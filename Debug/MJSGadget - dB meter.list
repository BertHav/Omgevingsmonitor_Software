
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000277f8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004360  080278b8  080278b8  000288b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bc18  0802bc18  0002d448  2**0
                  CONTENTS
  4 .ARM          00000008  0802bc18  0802bc18  0002cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bc20  0802bc20  0002d448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802bc20  0802bc20  0002cc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802bc24  0802bc24  0002cc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000448  20000000  0802bc28  0002d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031a8  20000448  0802c070  0002d448  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200035f0  0802c070  0002d5f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002d448  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003648a  00000000  00000000  0002d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009c30  00000000  00000000  000638fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d48  00000000  00000000  0006d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021b4  00000000  00000000  00070278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241b1  00000000  00000000  0007242c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000459f3  00000000  00000000  000965dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2a09  00000000  00000000  000dbfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0017e9d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9c0  00000000  00000000  0017ea8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018a44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018a4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0018ca35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000448 	.word	0x20000448
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080278a0 	.word	0x080278a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000044c 	.word	0x2000044c
 8000104:	080278a0 	.word	0x080278a0

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0802ad68 	.word	0x0802ad68
 8000e0c:	0802ada8 	.word	0x0802ada8
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802ade4 	.word	0x0802ade4
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af02      	add	r7, sp, #8
 8003656:	0004      	movs	r4, r0
 8003658:	0008      	movs	r0, r1
 800365a:	60ba      	str	r2, [r7, #8]
 800365c:	0019      	movs	r1, r3
 800365e:	260e      	movs	r6, #14
 8003660:	19bb      	adds	r3, r7, r6
 8003662:	1c22      	adds	r2, r4, #0
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	230c      	movs	r3, #12
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	1c02      	adds	r2, r0, #0
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	1dbb      	adds	r3, r7, #6
 8003670:	1c0a      	adds	r2, r1, #0
 8003672:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003674:	4b0c      	ldr	r3, [pc, #48]	@ (80036a8 <WriteMemRegister+0x58>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 800367c:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <WriteMemRegister+0x58>)
 800367e:	681c      	ldr	r4, [r3, #0]
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <WriteMemRegister+0x5c>)
 8003682:	7918      	ldrb	r0, [r3, #4]
 8003684:	68bd      	ldr	r5, [r7, #8]
 8003686:	230c      	movs	r3, #12
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	881a      	ldrh	r2, [r3, #0]
 800368c:	19bb      	adds	r3, r7, r6
 800368e:	8819      	ldrh	r1, [r3, #0]
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	002b      	movs	r3, r5
 8003698:	47a0      	blx	r4
 800369a:	0003      	movs	r3, r0
 800369c:	e000      	b.n	80036a0 <WriteMemRegister+0x50>
  }
  return false;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b005      	add	sp, #20
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a8:	20000470 	.word	0x20000470
 80036ac:	200004a0 	.word	0x200004a0

080036b0 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80036b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	0004      	movs	r4, r0
 80036b8:	0008      	movs	r0, r1
 80036ba:	60ba      	str	r2, [r7, #8]
 80036bc:	0019      	movs	r1, r3
 80036be:	260e      	movs	r6, #14
 80036c0:	19bb      	adds	r3, r7, r6
 80036c2:	1c22      	adds	r2, r4, #0
 80036c4:	801a      	strh	r2, [r3, #0]
 80036c6:	230c      	movs	r3, #12
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	1c02      	adds	r2, r0, #0
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	1c0a      	adds	r2, r1, #0
 80036d2:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <ReadMemRegister+0x58>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 80036dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <ReadMemRegister+0x58>)
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <ReadMemRegister+0x5c>)
 80036e2:	7918      	ldrb	r0, [r3, #4]
 80036e4:	68bd      	ldr	r5, [r7, #8]
 80036e6:	230c      	movs	r3, #12
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	19bb      	adds	r3, r7, r6
 80036ee:	8819      	ldrh	r1, [r3, #0]
 80036f0:	1dbb      	adds	r3, r7, #6
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	002b      	movs	r3, r5
 80036f8:	47a0      	blx	r4
 80036fa:	0003      	movs	r3, r0
 80036fc:	e000      	b.n	8003700 <ReadMemRegister+0x50>
  }
  return false;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b005      	add	sp, #20
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003708:	2000046c 	.word	0x2000046c
 800370c:	200004a0 	.word	0x200004a0

08003710 <setENS160TimeStamp>:

void setENS160TimeStamp(uint32_t ticks) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003718:	f00e fcea 	bl	80120f0 <HAL_GetTick>
 800371c:	0002      	movs	r2, r0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	18d2      	adds	r2, r2, r3
 8003722:	4b03      	ldr	r3, [pc, #12]	@ (8003730 <setENS160TimeStamp+0x20>)
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	46bd      	mov	sp, r7
 800372a:	b002      	add	sp, #8
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	20000468 	.word	0x20000468

08003734 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 800373e:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <ENS_Init+0x20>)
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003744:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <ENS_Init+0x24>)
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	601a      	str	r2, [r3, #0]
}	
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	b002      	add	sp, #8
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	2000046c 	.word	0x2000046c
 8003758:	20000470 	.word	0x20000470

0800375c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003762:	1dbb      	adds	r3, r7, #6
 8003764:	22f0      	movs	r2, #240	@ 0xf0
 8003766:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003768:	1dba      	adds	r2, r7, #6
 800376a:	2301      	movs	r3, #1
 800376c:	2101      	movs	r1, #1
 800376e:	2010      	movs	r0, #16
 8003770:	f7ff ff6e 	bl	8003650 <WriteMemRegister>
 8003774:	0003      	movs	r3, r0
 8003776:	001a      	movs	r2, r3
 8003778:	1dfb      	adds	r3, r7, #7
 800377a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 800377c:	201e      	movs	r0, #30
 800377e:	f00e fcc1 	bl	8012104 <HAL_Delay>
	return result;
 8003782:	1dfb      	adds	r3, r7, #7
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	1e5a      	subs	r2, r3, #1
 8003788:	4193      	sbcs	r3, r2
 800378a:	b2db      	uxtb	r3, r3
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}

08003794 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 800379a:	003b      	movs	r3, r7
 800379c:	2200      	movs	r2, #0
 800379e:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 80037a0:	1dfb      	adds	r3, r7, #7
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 80037a6:	003a      	movs	r2, r7
 80037a8:	2302      	movs	r3, #2
 80037aa:	2101      	movs	r1, #1
 80037ac:	2000      	movs	r0, #0
 80037ae:	f7ff ff7f 	bl	80036b0 <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 80037b2:	003b      	movs	r3, r7
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b21a      	sxth	r2, r3
 80037b8:	003b      	movs	r3, r7
 80037ba:	785b      	ldrb	r3, [r3, #1]
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	b21b      	sxth	r3, r3
 80037c0:	4313      	orrs	r3, r2
 80037c2:	b21a      	sxth	r2, r3
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 80037c8:	4b1c      	ldr	r3, [pc, #112]	@ (800383c <ENS160_checkPartID+0xa8>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d015      	beq.n	80037fc <ENS160_checkPartID+0x68>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	881a      	ldrh	r2, [r3, #0]
 80037d4:	23b0      	movs	r3, #176	@ 0xb0
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	429a      	cmp	r2, r3
 80037da:	d009      	beq.n	80037f0 <ENS160_checkPartID+0x5c>
 80037dc:	1d3b      	adds	r3, r7, #4
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	2362      	movs	r3, #98	@ 0x62
 80037e2:	33ff      	adds	r3, #255	@ 0xff
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d101      	bne.n	80037ec <ENS160_checkPartID+0x58>
 80037e8:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <ENS160_checkPartID+0xac>)
 80037ea:	e002      	b.n	80037f2 <ENS160_checkPartID+0x5e>
 80037ec:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <ENS160_checkPartID+0xb0>)
 80037ee:	e000      	b.n	80037f2 <ENS160_checkPartID+0x5e>
 80037f0:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <ENS160_checkPartID+0xb4>)
 80037f2:	4a16      	ldr	r2, [pc, #88]	@ (800384c <ENS160_checkPartID+0xb8>)
 80037f4:	4916      	ldr	r1, [pc, #88]	@ (8003850 <ENS160_checkPartID+0xbc>)
 80037f6:	2003      	movs	r0, #3
 80037f8:	f00e f82e 	bl	8011858 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 80037fc:	1d3b      	adds	r3, r7, #4
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	23b0      	movs	r3, #176	@ 0xb0
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	429a      	cmp	r2, r3
 8003806:	d106      	bne.n	8003816 <ENS160_checkPartID+0x82>
	  hwsw._revENS16x = 0;
 8003808:	4b12      	ldr	r3, [pc, #72]	@ (8003854 <ENS160_checkPartID+0xc0>)
 800380a:	2200      	movs	r2, #0
 800380c:	70da      	strb	r2, [r3, #3]
	  result = true;
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00b      	b.n	800382e <ENS160_checkPartID+0x9a>
	}
	else if (part_id == ENS161_PARTID) {
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	881a      	ldrh	r2, [r3, #0]
 800381a:	2362      	movs	r3, #98	@ 0x62
 800381c:	33ff      	adds	r3, #255	@ 0xff
 800381e:	429a      	cmp	r2, r3
 8003820:	d105      	bne.n	800382e <ENS160_checkPartID+0x9a>
	  hwsw._revENS16x = 1;
 8003822:	4b0c      	ldr	r3, [pc, #48]	@ (8003854 <ENS160_checkPartID+0xc0>)
 8003824:	2201      	movs	r2, #1
 8003826:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003828:	1dfb      	adds	r3, r7, #7
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
	}
	return result;
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	781b      	ldrb	r3, [r3, #0]
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b002      	add	sp, #8
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			@ (mov r8, r8)
 800383c:	20000464 	.word	0x20000464
 8003840:	080278b8 	.word	0x080278b8
 8003844:	080278c4 	.word	0x080278c4
 8003848:	080278c8 	.word	0x080278c8
 800384c:	080278d4 	.word	0x080278d4
 8003850:	080278f4 	.word	0x080278f4
 8003854:	200004a0 	.word	0x200004a0

08003858 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 800385e:	4a27      	ldr	r2, [pc, #156]	@ (80038fc <ENS160_clearCommand+0xa4>)
 8003860:	2301      	movs	r3, #1
 8003862:	2101      	movs	r1, #1
 8003864:	2012      	movs	r0, #18
 8003866:	f7ff fef3 	bl	8003650 <WriteMemRegister>
 800386a:	0003      	movs	r3, r0
 800386c:	001a      	movs	r2, r3
 800386e:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <ENS160_clearCommand+0xa8>)
 8003870:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003872:	200a      	movs	r0, #10
 8003874:	f00e fc46 	bl	8012104 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003878:	4b20      	ldr	r3, [pc, #128]	@ (80038fc <ENS160_clearCommand+0xa4>)
 800387a:	22cc      	movs	r2, #204	@ 0xcc
 800387c:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 800387e:	4a1f      	ldr	r2, [pc, #124]	@ (80038fc <ENS160_clearCommand+0xa4>)
 8003880:	2301      	movs	r3, #1
 8003882:	2101      	movs	r1, #1
 8003884:	2012      	movs	r0, #18
 8003886:	f7ff fee3 	bl	8003650 <WriteMemRegister>
 800388a:	0003      	movs	r3, r0
 800388c:	001a      	movs	r2, r3
 800388e:	4b1c      	ldr	r3, [pc, #112]	@ (8003900 <ENS160_clearCommand+0xa8>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4013      	ands	r3, r2
 8003894:	b2da      	uxtb	r2, r3
 8003896:	4b1a      	ldr	r3, [pc, #104]	@ (8003900 <ENS160_clearCommand+0xa8>)
 8003898:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 800389a:	200a      	movs	r0, #10
 800389c:	f00e fc32 	bl	8012104 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 80038a0:	4a16      	ldr	r2, [pc, #88]	@ (80038fc <ENS160_clearCommand+0xa4>)
 80038a2:	2301      	movs	r3, #1
 80038a4:	2101      	movs	r1, #1
 80038a6:	2020      	movs	r0, #32
 80038a8:	f7ff ff02 	bl	80036b0 <ReadMemRegister>
 80038ac:	0003      	movs	r3, r0
 80038ae:	001a      	movs	r2, r3
 80038b0:	4b13      	ldr	r3, [pc, #76]	@ (8003900 <ENS160_clearCommand+0xa8>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	4013      	ands	r3, r2
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	4b11      	ldr	r3, [pc, #68]	@ (8003900 <ENS160_clearCommand+0xa8>)
 80038ba:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <ENS160_clearCommand+0xac>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 80038c4:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <ENS160_clearCommand+0xa4>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	0018      	movs	r0, r3
 80038ca:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <ENS160_clearCommand+0xa4>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <ENS160_clearCommand+0x7e>
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <ENS160_clearCommand+0xb0>)
 80038d4:	e000      	b.n	80038d8 <ENS160_clearCommand+0x80>
 80038d6:	4b0d      	ldr	r3, [pc, #52]	@ (800390c <ENS160_clearCommand+0xb4>)
 80038d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003910 <ENS160_clearCommand+0xb8>)
 80038da:	490e      	ldr	r1, [pc, #56]	@ (8003914 <ENS160_clearCommand+0xbc>)
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	0003      	movs	r3, r0
 80038e0:	2003      	movs	r0, #3
 80038e2:	f00d ffb9 	bl	8011858 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80038e6:	200a      	movs	r0, #10
 80038e8:	f00e fc0c 	bl	8012104 <HAL_Delay>
		
	return result;
 80038ec:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <ENS160_clearCommand+0xa8>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	1e5a      	subs	r2, r3, #1
 80038f2:	4193      	sbcs	r3, r2
 80038f4:	b2db      	uxtb	r3, r3
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	200004a8 	.word	0x200004a8
 8003900:	200004a9 	.word	0x200004a9
 8003904:	20000464 	.word	0x20000464
 8003908:	080278f8 	.word	0x080278f8
 800390c:	080278c4 	.word	0x080278c4
 8003910:	080278fc 	.word	0x080278fc
 8003914:	080278f4 	.word	0x080278f4

08003918 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	b085      	sub	sp, #20
 800391c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 800391e:	f7ff ff9b 	bl	8003858 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003922:	200a      	movs	r0, #10
 8003924:	f00e fbee 	bl	8012104 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003928:	1d3b      	adds	r3, r7, #4
 800392a:	220e      	movs	r2, #14
 800392c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 800392e:	1d3a      	adds	r2, r7, #4
 8003930:	2301      	movs	r3, #1
 8003932:	2101      	movs	r1, #1
 8003934:	2012      	movs	r0, #18
 8003936:	f7ff fe8b 	bl	8003650 <WriteMemRegister>

	HAL_Delay(10);
 800393a:	200a      	movs	r0, #10
 800393c:	f00e fbe2 	bl	8012104 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003940:	1d3a      	adds	r2, r7, #4
 8003942:	2303      	movs	r3, #3
 8003944:	2101      	movs	r1, #1
 8003946:	204c      	movs	r0, #76	@ 0x4c
 8003948:	f7ff feb2 	bl	80036b0 <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	781a      	ldrb	r2, [r3, #0]
 8003950:	4b1a      	ldr	r3, [pc, #104]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003952:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003954:	1d3b      	adds	r3, r7, #4
 8003956:	785a      	ldrb	r2, [r3, #1]
 8003958:	4b18      	ldr	r3, [pc, #96]	@ (80039bc <ENS160_getFirmware+0xa4>)
 800395a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	789a      	ldrb	r2, [r3, #2]
 8003960:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003962:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003964:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b06      	cmp	r3, #6
 800396a:	d903      	bls.n	8003974 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 800396c:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <ENS160_getFirmware+0xa4>)
 800396e:	2201      	movs	r2, #1
 8003970:	70da      	strb	r2, [r3, #3]
 8003972:	e002      	b.n	800397a <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003974:	4b11      	ldr	r3, [pc, #68]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003976:	2200      	movs	r2, #0
 8003978:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 800397a:	4b11      	ldr	r3, [pc, #68]	@ (80039c0 <ENS160_getFirmware+0xa8>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00f      	beq.n	80039a2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003982:	4b0e      	ldr	r3, [pc, #56]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	001c      	movs	r4, r3
 8003988:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <ENS160_getFirmware+0xa4>)
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	0018      	movs	r0, r3
 800398e:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <ENS160_getFirmware+0xa4>)
 8003990:	789b      	ldrb	r3, [r3, #2]
 8003992:	4a0c      	ldr	r2, [pc, #48]	@ (80039c4 <ENS160_getFirmware+0xac>)
 8003994:	490c      	ldr	r1, [pc, #48]	@ (80039c8 <ENS160_getFirmware+0xb0>)
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	9000      	str	r0, [sp, #0]
 800399a:	0023      	movs	r3, r4
 800399c:	2003      	movs	r0, #3
 800399e:	f00d ff5b 	bl	8011858 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 80039a2:	200a      	movs	r0, #10
 80039a4:	f00e fbae 	bl	8012104 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	4193      	sbcs	r3, r2
 80039b0:	b2db      	uxtb	r3, r3
}
 80039b2:	0018      	movs	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b003      	add	sp, #12
 80039b8:	bd90      	pop	{r4, r7, pc}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	200004a0 	.word	0x200004a0
 80039c0:	20000464 	.word	0x20000464
 80039c4:	08027928 	.word	0x08027928
 80039c8:	080278f4 	.word	0x080278f4

080039cc <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	0002      	movs	r2, r0
 80039d4:	1dfb      	adds	r3, r7, #7
 80039d6:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 80039d8:	1dfb      	adds	r3, r7, #7
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d108      	bne.n	80039f2 <ENS160_setMode+0x26>
 80039e0:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <ENS160_setMode+0x58>)
 80039e2:	78db      	ldrb	r3, [r3, #3]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <ENS160_setMode+0x26>
	  result = 1;
 80039e8:	230f      	movs	r3, #15
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e00a      	b.n	8003a08 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 80039f2:	1dfa      	adds	r2, r7, #7
 80039f4:	2301      	movs	r3, #1
 80039f6:	2101      	movs	r1, #1
 80039f8:	2010      	movs	r0, #16
 80039fa:	f7ff fe29 	bl	8003650 <WriteMemRegister>
 80039fe:	0003      	movs	r3, r0
 8003a00:	001a      	movs	r2, r3
 8003a02:	230f      	movs	r3, #15
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003a08:	200a      	movs	r0, #10
 8003a0a:	f00e fb7b 	bl	8012104 <HAL_Delay>
	
	return result;
 8003a0e:	230f      	movs	r3, #15
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	1e5a      	subs	r2, r3, #1
 8003a16:	4193      	sbcs	r3, r2
 8003a18:	b2db      	uxtb	r3, r3
}
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b004      	add	sp, #16
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	200004a0 	.word	0x200004a0

08003a28 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003a2e:	1dfb      	adds	r3, r7, #7
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003a34:	4b37      	ldr	r3, [pc, #220]	@ (8003b14 <ENS_DeviceConnected+0xec>)
 8003a36:	2252      	movs	r2, #82	@ 0x52
 8003a38:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003a3a:	1dbb      	adds	r3, r7, #6
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	e02d      	b.n	8003a9e <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003a42:	f7ff fe8b 	bl	800375c <ENS160_reset>
 8003a46:	0003      	movs	r3, r0
 8003a48:	001a      	movs	r2, r3
 8003a4a:	1dfb      	adds	r3, r7, #7
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	401a      	ands	r2, r3
 8003a50:	1dfb      	adds	r3, r7, #7
 8003a52:	1e51      	subs	r1, r2, #1
 8003a54:	418a      	sbcs	r2, r1
 8003a56:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003a58:	f7ff fe9c 	bl	8003794 <ENS160_checkPartID>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	001a      	movs	r2, r3
 8003a60:	1dfb      	adds	r3, r7, #7
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	401a      	ands	r2, r3
 8003a66:	1dfb      	adds	r3, r7, #7
 8003a68:	1e51      	subs	r1, r2, #1
 8003a6a:	418a      	sbcs	r2, r1
 8003a6c:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003a6e:	1dfb      	adds	r3, r7, #7
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	4053      	eors	r3, r2
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003a7c:	4a26      	ldr	r2, [pc, #152]	@ (8003b18 <ENS_DeviceConnected+0xf0>)
 8003a7e:	4b27      	ldr	r3, [pc, #156]	@ (8003b1c <ENS_DeviceConnected+0xf4>)
 8003a80:	0019      	movs	r1, r3
 8003a82:	2002      	movs	r0, #2
 8003a84:	f00d fee8 	bl	8011858 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003a88:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <ENS_DeviceConnected+0xec>)
 8003a8a:	2253      	movs	r2, #83	@ 0x53
 8003a8c:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003a8e:	1dfb      	adds	r3, r7, #7
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003a94:	1dbb      	adds	r3, r7, #6
 8003a96:	781a      	ldrb	r2, [r3, #0]
 8003a98:	1dbb      	adds	r3, r7, #6
 8003a9a:	3201      	adds	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	1dbb      	adds	r3, r7, #6
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d9cd      	bls.n	8003a42 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003aa6:	1dfb      	adds	r3, r7, #7
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02b      	beq.n	8003b06 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f7ff ff8c 	bl	80039cc <ENS160_setMode>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	1dfb      	adds	r3, r7, #7
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	401a      	ands	r2, r3
 8003abe:	1dfb      	adds	r3, r7, #7
 8003ac0:	1e51      	subs	r1, r2, #1
 8003ac2:	418a      	sbcs	r2, r1
 8003ac4:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003ac6:	f7ff fec7 	bl	8003858 <ENS160_clearCommand>
 8003aca:	0003      	movs	r3, r0
 8003acc:	001a      	movs	r2, r3
 8003ace:	1dfb      	adds	r3, r7, #7
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	1dfb      	adds	r3, r7, #7
 8003ad6:	1e51      	subs	r1, r2, #1
 8003ad8:	418a      	sbcs	r2, r1
 8003ada:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003adc:	f7ff ff1c 	bl	8003918 <ENS160_getFirmware>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	001a      	movs	r2, r3
 8003ae4:	1dfb      	adds	r3, r7, #7
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	401a      	ands	r2, r3
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	1e51      	subs	r1, r2, #1
 8003aee:	418a      	sbcs	r2, r1
 8003af0:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003af2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <ENS_DeviceConnected+0xf8>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003afa:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <ENS_DeviceConnected+0xfc>)
 8003afc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <ENS_DeviceConnected+0x100>)
 8003afe:	0019      	movs	r1, r3
 8003b00:	2003      	movs	r0, #3
 8003b02:	f00d fea9 	bl	8011858 <CreateLine>
    }
  }
  return _available;
 8003b06:	1dfb      	adds	r3, r7, #7
 8003b08:	781b      	ldrb	r3, [r3, #0]
}
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b002      	add	sp, #8
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	200004a0 	.word	0x200004a0
 8003b18:	08027944 	.word	0x08027944
 8003b1c:	08027964 	.word	0x08027964
 8003b20:	20000464 	.word	0x20000464
 8003b24:	08027968 	.word	0x08027968
 8003b28:	080278f4 	.word	0x080278f4

08003b2c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003b32:	1dfa      	adds	r2, r7, #7
 8003b34:	2301      	movs	r3, #1
 8003b36:	2101      	movs	r1, #1
 8003b38:	2020      	movs	r0, #32
 8003b3a:	f7ff fdb9 	bl	80036b0 <ReadMemRegister>

  if (debugENS160) {
 8003b3e:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <ENS160_readStatus+0x34>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	4a06      	ldr	r2, [pc, #24]	@ (8003b64 <ENS160_readStatus+0x38>)
 8003b4c:	4906      	ldr	r1, [pc, #24]	@ (8003b68 <ENS160_readStatus+0x3c>)
 8003b4e:	2003      	movs	r0, #3
 8003b50:	f00d fe82 	bl	8011858 <CreateLine>
  }
  return status;
 8003b54:	1dfb      	adds	r3, r7, #7
 8003b56:	781b      	ldrb	r3, [r3, #0]
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000464 	.word	0x20000464
 8003b64:	0802799c 	.word	0x0802799c
 8003b68:	080278f4 	.word	0x080278f4

08003b6c <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003b6c:	b5b0      	push	{r4, r5, r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	0002      	movs	r2, r0
 8003b74:	1dfb      	adds	r3, r7, #7
 8003b76:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003b78:	2317      	movs	r3, #23
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003b80:	4b32      	ldr	r3, [pc, #200]	@ (8003c4c <ENS160_measure+0xe0>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003b88:	4a31      	ldr	r2, [pc, #196]	@ (8003c50 <ENS160_measure+0xe4>)
 8003b8a:	4b32      	ldr	r3, [pc, #200]	@ (8003c54 <ENS160_measure+0xe8>)
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	2003      	movs	r0, #3
 8003b90:	f00d fe62 	bl	8011858 <CreateLine>
	}
	
	if (waitForNew) {
 8003b94:	1dfb      	adds	r3, r7, #7
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	f00e fab1 	bl	8012104 <HAL_Delay>
			status = ENS160_readStatus();
 8003ba2:	2516      	movs	r5, #22
 8003ba4:	197c      	adds	r4, r7, r5
 8003ba6:	f7ff ffc1 	bl	8003b2c <ENS160_readStatus>
 8003baa:	0003      	movs	r3, r0
 8003bac:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003bae:	197b      	adds	r3, r7, r5
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ef      	beq.n	8003b9c <ENS160_measure+0x30>
 8003bbc:	e002      	b.n	8003bc4 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003bbe:	200a      	movs	r0, #10
 8003bc0:	f00e faa0 	bl	8012104 <HAL_Delay>
	}
	
	newData = true;
 8003bc4:	2317      	movs	r3, #23
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 8003bcc:	240c      	movs	r4, #12
 8003bce:	193a      	adds	r2, r7, r4
 8003bd0:	2307      	movs	r3, #7
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	2021      	movs	r0, #33	@ 0x21
 8003bd6:	f7ff fd6b 	bl	80036b0 <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 8003bda:	0021      	movs	r1, r4
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c58 <ENS160_measure+0xec>)
 8003be2:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	b21a      	sxth	r2, r3
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	789b      	ldrb	r3, [r3, #2]
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	b21b      	sxth	r3, r3
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	b21b      	sxth	r3, r3
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <ENS160_measure+0xec>)
 8003bfa:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	78db      	ldrb	r3, [r3, #3]
 8003c00:	b21a      	sxth	r2, r3
 8003c02:	187b      	adds	r3, r7, r1
 8003c04:	791b      	ldrb	r3, [r3, #4]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	b21b      	sxth	r3, r3
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	b21b      	sxth	r3, r3
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <ENS160_measure+0xec>)
 8003c12:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8003c14:	4b11      	ldr	r3, [pc, #68]	@ (8003c5c <ENS160_measure+0xf0>)
 8003c16:	78db      	ldrb	r3, [r3, #3]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00c      	beq.n	8003c36 <ENS160_measure+0xca>
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	795b      	ldrb	r3, [r3, #5]
 8003c20:	b21a      	sxth	r2, r3
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	799b      	ldrb	r3, [r3, #6]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	b21b      	sxth	r3, r3
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	b21b      	sxth	r3, r3
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <ENS160_measure+0xec>)
 8003c32:	80da      	strh	r2, [r3, #6]
 8003c34:	e002      	b.n	8003c3c <ENS160_measure+0xd0>
  	else pred._data_aqi500 = 0;
 8003c36:	4b08      	ldr	r3, [pc, #32]	@ (8003c58 <ENS160_measure+0xec>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8003c3c:	2317      	movs	r3, #23
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	781b      	ldrb	r3, [r3, #0]
}
 8003c42:	0018      	movs	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	b006      	add	sp, #24
 8003c48:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	20000464 	.word	0x20000464
 8003c50:	080279b0 	.word	0x080279b0
 8003c54:	080278f4 	.word	0x080278f4
 8003c58:	20000498 	.word	0x20000498
 8003c5c:	200004a0 	.word	0x200004a0

08003c60 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	0002      	movs	r2, r0
 8003c68:	1dfb      	adds	r3, r7, #7
 8003c6a:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 8003c6c:	2317      	movs	r3, #23
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 8003c74:	4bae      	ldr	r3, [pc, #696]	@ (8003f30 <ENS160_measureRaw+0x2d0>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 8003c7c:	4aad      	ldr	r2, [pc, #692]	@ (8003f34 <ENS160_measureRaw+0x2d4>)
 8003c7e:	4bae      	ldr	r3, [pc, #696]	@ (8003f38 <ENS160_measureRaw+0x2d8>)
 8003c80:	0019      	movs	r1, r3
 8003c82:	2003      	movs	r0, #3
 8003c84:	f00d fde8 	bl	8011858 <CreateLine>
	}
	
	if (waitForNew) {
 8003c88:	1dfb      	adds	r3, r7, #7
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d010      	beq.n	8003cb2 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 8003c90:	2001      	movs	r0, #1
 8003c92:	f00e fa37 	bl	8012104 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003c96:	240b      	movs	r4, #11
 8003c98:	193a      	adds	r2, r7, r4
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	2020      	movs	r0, #32
 8003ca0:	f7ff fd06 	bl	80036b0 <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 8003ca4:	193b      	adds	r3, r7, r4
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	4013      	ands	r3, r2
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ee      	beq.n	8003c90 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 8003cb2:	240c      	movs	r4, #12
 8003cb4:	193a      	adds	r2, r7, r4
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	2101      	movs	r1, #1
 8003cba:	2048      	movs	r0, #72	@ 0x48
 8003cbc:	f7ff fcf8 	bl	80036b0 <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003cc0:	193b      	adds	r3, r7, r4
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	001a      	movs	r2, r3
 8003cc6:	193b      	adds	r3, r7, r4
 8003cc8:	785b      	ldrb	r3, [r3, #1]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7fd fcca 	bl	8001668 <__aeabi_ui2f>
 8003cd4:	1c03      	adds	r3, r0, #0
 8003cd6:	218a      	movs	r1, #138	@ 0x8a
 8003cd8:	05c9      	lsls	r1, r1, #23
 8003cda:	1c18      	adds	r0, r3, #0
 8003cdc:	f7fc ff7a 	bl	8000bd4 <__aeabi_fdiv>
 8003ce0:	1c03      	adds	r3, r0, #0
 8003ce2:	1c18      	adds	r0, r3, #0
 8003ce4:	f7ff fbbe 	bl	8003464 <__aeabi_f2d>
 8003ce8:	0002      	movs	r2, r0
 8003cea:	000b      	movs	r3, r1
 8003cec:	2000      	movs	r0, #0
 8003cee:	2180      	movs	r1, #128	@ 0x80
 8003cf0:	05c9      	lsls	r1, r1, #23
 8003cf2:	f022 fcb1 	bl	8026658 <pow>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	000b      	movs	r3, r1
 8003cfa:	0010      	movs	r0, r2
 8003cfc:	0019      	movs	r1, r3
 8003cfe:	f7fc fca5 	bl	800064c <__aeabi_d2uiz>
 8003d02:	0002      	movs	r2, r0
 8003d04:	4b8d      	ldr	r3, [pc, #564]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003d06:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003d08:	193b      	adds	r3, r7, r4
 8003d0a:	789b      	ldrb	r3, [r3, #2]
 8003d0c:	001a      	movs	r2, r3
 8003d0e:	193b      	adds	r3, r7, r4
 8003d10:	78db      	ldrb	r3, [r3, #3]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	4313      	orrs	r3, r2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f7fd fca6 	bl	8001668 <__aeabi_ui2f>
 8003d1c:	1c03      	adds	r3, r0, #0
 8003d1e:	218a      	movs	r1, #138	@ 0x8a
 8003d20:	05c9      	lsls	r1, r1, #23
 8003d22:	1c18      	adds	r0, r3, #0
 8003d24:	f7fc ff56 	bl	8000bd4 <__aeabi_fdiv>
 8003d28:	1c03      	adds	r3, r0, #0
 8003d2a:	1c18      	adds	r0, r3, #0
 8003d2c:	f7ff fb9a 	bl	8003464 <__aeabi_f2d>
 8003d30:	0002      	movs	r2, r0
 8003d32:	000b      	movs	r3, r1
 8003d34:	2000      	movs	r0, #0
 8003d36:	2180      	movs	r1, #128	@ 0x80
 8003d38:	05c9      	lsls	r1, r1, #23
 8003d3a:	f022 fc8d 	bl	8026658 <pow>
 8003d3e:	0002      	movs	r2, r0
 8003d40:	000b      	movs	r3, r1
 8003d42:	0010      	movs	r0, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	f7fc fc81 	bl	800064c <__aeabi_d2uiz>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	4b7b      	ldr	r3, [pc, #492]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003d4e:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003d50:	193b      	adds	r3, r7, r4
 8003d52:	791b      	ldrb	r3, [r3, #4]
 8003d54:	001a      	movs	r2, r3
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	795b      	ldrb	r3, [r3, #5]
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fd fc82 	bl	8001668 <__aeabi_ui2f>
 8003d64:	1c03      	adds	r3, r0, #0
 8003d66:	218a      	movs	r1, #138	@ 0x8a
 8003d68:	05c9      	lsls	r1, r1, #23
 8003d6a:	1c18      	adds	r0, r3, #0
 8003d6c:	f7fc ff32 	bl	8000bd4 <__aeabi_fdiv>
 8003d70:	1c03      	adds	r3, r0, #0
 8003d72:	1c18      	adds	r0, r3, #0
 8003d74:	f7ff fb76 	bl	8003464 <__aeabi_f2d>
 8003d78:	0002      	movs	r2, r0
 8003d7a:	000b      	movs	r3, r1
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	2180      	movs	r1, #128	@ 0x80
 8003d80:	05c9      	lsls	r1, r1, #23
 8003d82:	f022 fc69 	bl	8026658 <pow>
 8003d86:	0002      	movs	r2, r0
 8003d88:	000b      	movs	r3, r1
 8003d8a:	0010      	movs	r0, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	f7fc fc5d 	bl	800064c <__aeabi_d2uiz>
 8003d92:	0002      	movs	r2, r0
 8003d94:	4b69      	ldr	r3, [pc, #420]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003d96:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003d98:	193b      	adds	r3, r7, r4
 8003d9a:	799b      	ldrb	r3, [r3, #6]
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	193b      	adds	r3, r7, r4
 8003da0:	79db      	ldrb	r3, [r3, #7]
 8003da2:	021b      	lsls	r3, r3, #8
 8003da4:	4313      	orrs	r3, r2
 8003da6:	0018      	movs	r0, r3
 8003da8:	f7fd fc5e 	bl	8001668 <__aeabi_ui2f>
 8003dac:	1c03      	adds	r3, r0, #0
 8003dae:	218a      	movs	r1, #138	@ 0x8a
 8003db0:	05c9      	lsls	r1, r1, #23
 8003db2:	1c18      	adds	r0, r3, #0
 8003db4:	f7fc ff0e 	bl	8000bd4 <__aeabi_fdiv>
 8003db8:	1c03      	adds	r3, r0, #0
 8003dba:	1c18      	adds	r0, r3, #0
 8003dbc:	f7ff fb52 	bl	8003464 <__aeabi_f2d>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	000b      	movs	r3, r1
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	2180      	movs	r1, #128	@ 0x80
 8003dc8:	05c9      	lsls	r1, r1, #23
 8003dca:	f022 fc45 	bl	8026658 <pow>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	000b      	movs	r3, r1
 8003dd2:	0010      	movs	r0, r2
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	f7fc fc39 	bl	800064c <__aeabi_d2uiz>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	4b57      	ldr	r3, [pc, #348]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003dde:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8003de0:	193a      	adds	r2, r7, r4
 8003de2:	2308      	movs	r3, #8
 8003de4:	2101      	movs	r1, #1
 8003de6:	2028      	movs	r0, #40	@ 0x28
 8003de8:	f7ff fc62 	bl	80036b0 <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8003dec:	193b      	adds	r3, r7, r4
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	001a      	movs	r2, r3
 8003df2:	193b      	adds	r3, r7, r4
 8003df4:	785b      	ldrb	r3, [r3, #1]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7fd fc34 	bl	8001668 <__aeabi_ui2f>
 8003e00:	1c03      	adds	r3, r0, #0
 8003e02:	218a      	movs	r1, #138	@ 0x8a
 8003e04:	05c9      	lsls	r1, r1, #23
 8003e06:	1c18      	adds	r0, r3, #0
 8003e08:	f7fc fee4 	bl	8000bd4 <__aeabi_fdiv>
 8003e0c:	1c03      	adds	r3, r0, #0
 8003e0e:	1c18      	adds	r0, r3, #0
 8003e10:	f7ff fb28 	bl	8003464 <__aeabi_f2d>
 8003e14:	0002      	movs	r2, r0
 8003e16:	000b      	movs	r3, r1
 8003e18:	2000      	movs	r0, #0
 8003e1a:	2180      	movs	r1, #128	@ 0x80
 8003e1c:	05c9      	lsls	r1, r1, #23
 8003e1e:	f022 fc1b 	bl	8026658 <pow>
 8003e22:	0002      	movs	r2, r0
 8003e24:	000b      	movs	r3, r1
 8003e26:	0010      	movs	r0, r2
 8003e28:	0019      	movs	r1, r3
 8003e2a:	f7fc fc0f 	bl	800064c <__aeabi_d2uiz>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	4b42      	ldr	r3, [pc, #264]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003e32:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8003e34:	193b      	adds	r3, r7, r4
 8003e36:	789b      	ldrb	r3, [r3, #2]
 8003e38:	001a      	movs	r2, r3
 8003e3a:	193b      	adds	r3, r7, r4
 8003e3c:	78db      	ldrb	r3, [r3, #3]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	4313      	orrs	r3, r2
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7fd fc10 	bl	8001668 <__aeabi_ui2f>
 8003e48:	1c03      	adds	r3, r0, #0
 8003e4a:	218a      	movs	r1, #138	@ 0x8a
 8003e4c:	05c9      	lsls	r1, r1, #23
 8003e4e:	1c18      	adds	r0, r3, #0
 8003e50:	f7fc fec0 	bl	8000bd4 <__aeabi_fdiv>
 8003e54:	1c03      	adds	r3, r0, #0
 8003e56:	1c18      	adds	r0, r3, #0
 8003e58:	f7ff fb04 	bl	8003464 <__aeabi_f2d>
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	000b      	movs	r3, r1
 8003e60:	2000      	movs	r0, #0
 8003e62:	2180      	movs	r1, #128	@ 0x80
 8003e64:	05c9      	lsls	r1, r1, #23
 8003e66:	f022 fbf7 	bl	8026658 <pow>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	000b      	movs	r3, r1
 8003e6e:	0010      	movs	r0, r2
 8003e70:	0019      	movs	r1, r3
 8003e72:	f7fc fbeb 	bl	800064c <__aeabi_d2uiz>
 8003e76:	0002      	movs	r2, r0
 8003e78:	4b30      	ldr	r3, [pc, #192]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003e7a:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8003e7c:	193b      	adds	r3, r7, r4
 8003e7e:	791b      	ldrb	r3, [r3, #4]
 8003e80:	001a      	movs	r2, r3
 8003e82:	193b      	adds	r3, r7, r4
 8003e84:	795b      	ldrb	r3, [r3, #5]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7fd fbec 	bl	8001668 <__aeabi_ui2f>
 8003e90:	1c03      	adds	r3, r0, #0
 8003e92:	218a      	movs	r1, #138	@ 0x8a
 8003e94:	05c9      	lsls	r1, r1, #23
 8003e96:	1c18      	adds	r0, r3, #0
 8003e98:	f7fc fe9c 	bl	8000bd4 <__aeabi_fdiv>
 8003e9c:	1c03      	adds	r3, r0, #0
 8003e9e:	1c18      	adds	r0, r3, #0
 8003ea0:	f7ff fae0 	bl	8003464 <__aeabi_f2d>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	000b      	movs	r3, r1
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	2180      	movs	r1, #128	@ 0x80
 8003eac:	05c9      	lsls	r1, r1, #23
 8003eae:	f022 fbd3 	bl	8026658 <pow>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	000b      	movs	r3, r1
 8003eb6:	0010      	movs	r0, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	f7fc fbc7 	bl	800064c <__aeabi_d2uiz>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003ec2:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8003ec4:	193b      	adds	r3, r7, r4
 8003ec6:	799b      	ldrb	r3, [r3, #6]
 8003ec8:	001a      	movs	r2, r3
 8003eca:	193b      	adds	r3, r7, r4
 8003ecc:	79db      	ldrb	r3, [r3, #7]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7fd fbc8 	bl	8001668 <__aeabi_ui2f>
 8003ed8:	1c03      	adds	r3, r0, #0
 8003eda:	218a      	movs	r1, #138	@ 0x8a
 8003edc:	05c9      	lsls	r1, r1, #23
 8003ede:	1c18      	adds	r0, r3, #0
 8003ee0:	f7fc fe78 	bl	8000bd4 <__aeabi_fdiv>
 8003ee4:	1c03      	adds	r3, r0, #0
 8003ee6:	1c18      	adds	r0, r3, #0
 8003ee8:	f7ff fabc 	bl	8003464 <__aeabi_f2d>
 8003eec:	0002      	movs	r2, r0
 8003eee:	000b      	movs	r3, r1
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	2180      	movs	r1, #128	@ 0x80
 8003ef4:	05c9      	lsls	r1, r1, #23
 8003ef6:	f022 fbaf 	bl	8026658 <pow>
 8003efa:	0002      	movs	r2, r0
 8003efc:	000b      	movs	r3, r1
 8003efe:	0010      	movs	r0, r2
 8003f00:	0019      	movs	r1, r3
 8003f02:	f7fc fba3 	bl	800064c <__aeabi_d2uiz>
 8003f06:	0002      	movs	r2, r0
 8003f08:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003f0a:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8003f0c:	193a      	adds	r2, r7, r4
 8003f0e:	2301      	movs	r3, #1
 8003f10:	2101      	movs	r1, #1
 8003f12:	2038      	movs	r0, #56	@ 0x38
 8003f14:	f7ff fbcc 	bl	80036b0 <ReadMemRegister>
    raw._misr = i2cbuf[0];
 8003f18:	193b      	adds	r3, r7, r4
 8003f1a:	7819      	ldrb	r1, [r3, #0]
 8003f1c:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <ENS160_measureRaw+0x2dc>)
 8003f1e:	2220      	movs	r2, #32
 8003f20:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8003f22:	2317      	movs	r3, #23
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	781b      	ldrb	r3, [r3, #0]
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b007      	add	sp, #28
 8003f2e:	bd90      	pop	{r4, r7, pc}
 8003f30:	20000464 	.word	0x20000464
 8003f34:	080279cc 	.word	0x080279cc
 8003f38:	080278f4 	.word	0x080278f4
 8003f3c:	20000474 	.word	0x20000474

08003f40 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	0002      	movs	r2, r0
 8003f48:	1dbb      	adds	r3, r7, #6
 8003f4a:	801a      	strh	r2, [r3, #0]
 8003f4c:	1d3b      	adds	r3, r7, #4
 8003f4e:	1c0a      	adds	r2, r1, #0
 8003f50:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8003f52:	1dbb      	adds	r3, r7, #6
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	2108      	movs	r1, #8
 8003f5a:	187b      	adds	r3, r7, r1
 8003f5c:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 8003f5e:	1dbb      	adds	r3, r7, #6
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	0a1b      	lsrs	r3, r3, #8
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	187b      	adds	r3, r7, r1
 8003f6a:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	187b      	adds	r3, r7, r1
 8003f74:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 8003f84:	187a      	adds	r2, r7, r1
 8003f86:	2304      	movs	r3, #4
 8003f88:	2101      	movs	r1, #1
 8003f8a:	2013      	movs	r0, #19
 8003f8c:	f7ff fb60 	bl	8003650 <WriteMemRegister>
 8003f90:	0003      	movs	r3, r0
 8003f92:	001a      	movs	r2, r3
 8003f94:	210f      	movs	r1, #15
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	701a      	strb	r2, [r3, #0]
  return result;
 8003f9a:	187b      	adds	r3, r7, r1
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	1e5a      	subs	r2, r3, #1
 8003fa0:	4193      	sbcs	r3, r2
 8003fa2:	b2db      	uxtb	r3, r3
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b004      	add	sp, #16
 8003faa:	bd80      	pop	{r7, pc}

08003fac <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 8003fb6:	4916      	ldr	r1, [pc, #88]	@ (8004010 <ENS160_set_envdata+0x64>)
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fc fc81 	bl	80008c0 <__aeabi_fadd>
 8003fbe:	1c03      	adds	r3, r0, #0
 8003fc0:	2185      	movs	r1, #133	@ 0x85
 8003fc2:	05c9      	lsls	r1, r1, #23
 8003fc4:	1c18      	adds	r0, r3, #0
 8003fc6:	f7fc ffeb 	bl	8000fa0 <__aeabi_fmul>
 8003fca:	1c03      	adds	r3, r0, #0
 8003fcc:	250e      	movs	r5, #14
 8003fce:	197c      	adds	r4, r7, r5
 8003fd0:	1c18      	adds	r0, r3, #0
 8003fd2:	f7fc fb23 	bl	800061c <__aeabi_f2uiz>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 8003fda:	2188      	movs	r1, #136	@ 0x88
 8003fdc:	05c9      	lsls	r1, r1, #23
 8003fde:	6838      	ldr	r0, [r7, #0]
 8003fe0:	f7fc ffde 	bl	8000fa0 <__aeabi_fmul>
 8003fe4:	1c03      	adds	r3, r0, #0
 8003fe6:	260c      	movs	r6, #12
 8003fe8:	19bc      	adds	r4, r7, r6
 8003fea:	1c18      	adds	r0, r3, #0
 8003fec:	f7fc fb16 	bl	800061c <__aeabi_f2uiz>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8003ff4:	19bb      	adds	r3, r7, r6
 8003ff6:	881a      	ldrh	r2, [r3, #0]
 8003ff8:	197b      	adds	r3, r7, r5
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	0011      	movs	r1, r2
 8003ffe:	0018      	movs	r0, r3
 8004000:	f7ff ff9e 	bl	8003f40 <ENS160_set_envdata210>
 8004004:	0003      	movs	r3, r0
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b005      	add	sp, #20
 800400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	43889333 	.word	0x43889333

08004014 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b085      	sub	sp, #20
 8004018:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800401a:	4bd2      	ldr	r3, [pc, #840]	@ (8004364 <ENS_Upkeep+0x350>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	0018      	movs	r0, r3
 8004020:	f00d fbc4 	bl	80117ac <TimestampIsReached>
 8004024:	0003      	movs	r3, r0
 8004026:	001a      	movs	r2, r3
 8004028:	2301      	movs	r3, #1
 800402a:	4053      	eors	r3, r2
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <ENS_Upkeep+0x24>
    return ENSState;
 8004032:	4bcd      	ldr	r3, [pc, #820]	@ (8004368 <ENS_Upkeep+0x354>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	e1ee      	b.n	8004416 <ENS_Upkeep+0x402>
  }
  switch(ENSState) {
 8004038:	4bcb      	ldr	r3, [pc, #812]	@ (8004368 <ENS_Upkeep+0x354>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d900      	bls.n	8004042 <ENS_Upkeep+0x2e>
 8004040:	e1d2      	b.n	80043e8 <ENS_Upkeep+0x3d4>
 8004042:	009a      	lsls	r2, r3, #2
 8004044:	4bc9      	ldr	r3, [pc, #804]	@ (800436c <ENS_Upkeep+0x358>)
 8004046:	18d3      	adds	r3, r2, r3
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 800404c:	4ac8      	ldr	r2, [pc, #800]	@ (8004370 <ENS_Upkeep+0x35c>)
 800404e:	4bc9      	ldr	r3, [pc, #804]	@ (8004374 <ENS_Upkeep+0x360>)
 8004050:	0019      	movs	r1, r3
 8004052:	2003      	movs	r0, #3
 8004054:	f00d fc00 	bl	8011858 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 8004058:	f00e f84a 	bl	80120f0 <HAL_GetTick>
 800405c:	0003      	movs	r3, r0
 800405e:	4ac6      	ldr	r2, [pc, #792]	@ (8004378 <ENS_Upkeep+0x364>)
 8004060:	189a      	adds	r2, r3, r2
 8004062:	4bc0      	ldr	r3, [pc, #768]	@ (8004364 <ENS_Upkeep+0x350>)
 8004064:	601a      	str	r2, [r3, #0]
    break;
 8004066:	e1d4      	b.n	8004412 <ENS_Upkeep+0x3fe>


  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 8004068:	f007 fd62 	bl	800bb30 <getSensorLock>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d000      	beq.n	8004072 <ENS_Upkeep+0x5e>
 8004070:	e1c6      	b.n	8004400 <ENS_Upkeep+0x3ec>
      break;
    }
    setSensorLock(ENS160);
 8004072:	2005      	movs	r0, #5
 8004074:	f007 fd4c 	bl	800bb10 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004078:	1d3c      	adds	r4, r7, #4
 800407a:	2002      	movs	r0, #2
 800407c:	f7ff fca6 	bl	80039cc <ENS160_setMode>
 8004080:	0003      	movs	r3, r0
 8004082:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <ENS_Upkeep+0x7c>
 800408c:	4bbb      	ldr	r3, [pc, #748]	@ (800437c <ENS_Upkeep+0x368>)
 800408e:	e000      	b.n	8004092 <ENS_Upkeep+0x7e>
 8004090:	4bbb      	ldr	r3, [pc, #748]	@ (8004380 <ENS_Upkeep+0x36c>)
 8004092:	4abc      	ldr	r2, [pc, #752]	@ (8004384 <ENS_Upkeep+0x370>)
 8004094:	49b7      	ldr	r1, [pc, #732]	@ (8004374 <ENS_Upkeep+0x360>)
 8004096:	2003      	movs	r0, #3
 8004098:	f00d fbde 	bl	8011858 <CreateLine>
    setSensorLock(FREE);
 800409c:	2000      	movs	r0, #0
 800409e:	f007 fd37 	bl	800bb10 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 80040a2:	4bb1      	ldr	r3, [pc, #708]	@ (8004368 <ENS_Upkeep+0x354>)
 80040a4:	2203      	movs	r2, #3
 80040a6:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80040a8:	f00e f822 	bl	80120f0 <HAL_GetTick>
 80040ac:	0003      	movs	r3, r0
 80040ae:	22fa      	movs	r2, #250	@ 0xfa
 80040b0:	0092      	lsls	r2, r2, #2
 80040b2:	189a      	adds	r2, r3, r2
 80040b4:	4bab      	ldr	r3, [pc, #684]	@ (8004364 <ENS_Upkeep+0x350>)
 80040b6:	601a      	str	r2, [r3, #0]
    break;
 80040b8:	e1ab      	b.n	8004412 <ENS_Upkeep+0x3fe>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 80040ba:	f007 fd39 	bl	800bb30 <getSensorLock>
 80040be:	1e03      	subs	r3, r0, #0
 80040c0:	d000      	beq.n	80040c4 <ENS_Upkeep+0xb0>
 80040c2:	e19f      	b.n	8004404 <ENS_Upkeep+0x3f0>
      break;
    }
    setSensorLock(ENS160);
 80040c4:	2005      	movs	r0, #5
 80040c6:	f007 fd23 	bl	800bb10 <setSensorLock>
    status = ENS160_readStatus();
 80040ca:	1d7c      	adds	r4, r7, #5
 80040cc:	f7ff fd2e 	bl	8003b2c <ENS160_readStatus>
 80040d0:	0003      	movs	r3, r0
 80040d2:	7023      	strb	r3, [r4, #0]
    setSensorLock(FREE);
 80040d4:	2000      	movs	r0, #0
 80040d6:	f007 fd1b 	bl	800bb10 <setSensorLock>
    if ((status & 0x0C) != 0) {
 80040da:	1d7b      	adds	r3, r7, #5
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	220c      	movs	r2, #12
 80040e0:	4013      	ands	r3, r2
 80040e2:	d02d      	beq.n	8004140 <ENS_Upkeep+0x12c>
      switch (status >> 2) {
 80040e4:	1d7b      	adds	r3, r7, #5
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d013      	beq.n	8004118 <ENS_Upkeep+0x104>
 80040f0:	dc19      	bgt.n	8004126 <ENS_Upkeep+0x112>
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d002      	beq.n	80040fc <ENS_Upkeep+0xe8>
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d007      	beq.n	800410a <ENS_Upkeep+0xf6>
 80040fa:	e014      	b.n	8004126 <ENS_Upkeep+0x112>
      case 1:
        Debug("Warm-Up phase");
 80040fc:	4aa2      	ldr	r2, [pc, #648]	@ (8004388 <ENS_Upkeep+0x374>)
 80040fe:	4b9d      	ldr	r3, [pc, #628]	@ (8004374 <ENS_Upkeep+0x360>)
 8004100:	0019      	movs	r1, r3
 8004102:	2003      	movs	r0, #3
 8004104:	f00d fba8 	bl	8011858 <CreateLine>
        break;
 8004108:	e00d      	b.n	8004126 <ENS_Upkeep+0x112>
      case 2:
        Debug("Initial Start-UP phase");
 800410a:	4aa0      	ldr	r2, [pc, #640]	@ (800438c <ENS_Upkeep+0x378>)
 800410c:	4b99      	ldr	r3, [pc, #612]	@ (8004374 <ENS_Upkeep+0x360>)
 800410e:	0019      	movs	r1, r3
 8004110:	2003      	movs	r0, #3
 8004112:	f00d fba1 	bl	8011858 <CreateLine>
        break;
 8004116:	e006      	b.n	8004126 <ENS_Upkeep+0x112>
      case 3:
        Debug("Invalid output");
 8004118:	4a9d      	ldr	r2, [pc, #628]	@ (8004390 <ENS_Upkeep+0x37c>)
 800411a:	4b96      	ldr	r3, [pc, #600]	@ (8004374 <ENS_Upkeep+0x360>)
 800411c:	0019      	movs	r1, r3
 800411e:	2003      	movs	r0, #3
 8004120:	f00d fb9a 	bl	8011858 <CreateLine>
        break;
 8004124:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 8004126:	1d7b      	adds	r3, r7, #5
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2203      	movs	r2, #3
 800412c:	4013      	ands	r3, r2
 800412e:	d107      	bne.n	8004140 <ENS_Upkeep+0x12c>
        ENS160TimeStamp = HAL_GetTick() + 5000;
 8004130:	f00d ffde 	bl	80120f0 <HAL_GetTick>
 8004134:	0003      	movs	r3, r0
 8004136:	4a97      	ldr	r2, [pc, #604]	@ (8004394 <ENS_Upkeep+0x380>)
 8004138:	189a      	adds	r2, r3, r2
 800413a:	4b8a      	ldr	r3, [pc, #552]	@ (8004364 <ENS_Upkeep+0x350>)
 800413c:	601a      	str	r2, [r3, #0]
        break;
 800413e:	e168      	b.n	8004412 <ENS_Upkeep+0x3fe>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 8004140:	4b89      	ldr	r3, [pc, #548]	@ (8004368 <ENS_Upkeep+0x354>)
 8004142:	2204      	movs	r2, #4
 8004144:	701a      	strb	r2, [r3, #0]
    break;
 8004146:	e164      	b.n	8004412 <ENS_Upkeep+0x3fe>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 8004148:	f007 fcf2 	bl	800bb30 <getSensorLock>
 800414c:	1e03      	subs	r3, r0, #0
 800414e:	d035      	beq.n	80041bc <ENS_Upkeep+0x1a8>
 8004150:	f007 fcee 	bl	800bb30 <getSensorLock>
 8004154:	0003      	movs	r3, r0
 8004156:	2b05      	cmp	r3, #5
 8004158:	d030      	beq.n	80041bc <ENS_Upkeep+0x1a8>
      uint8_t locktype = getSensorLock();
 800415a:	1dbc      	adds	r4, r7, #6
 800415c:	f007 fce8 	bl	800bb30 <getSensorLock>
 8004160:	0003      	movs	r3, r0
 8004162:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 8004164:	1dbb      	adds	r3, r7, #6
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d019      	beq.n	80041a0 <ENS_Upkeep+0x18c>
 800416c:	1dbb      	adds	r3, r7, #6
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d013      	beq.n	800419c <ENS_Upkeep+0x188>
 8004174:	1dbb      	adds	r3, r7, #6
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d00d      	beq.n	8004198 <ENS_Upkeep+0x184>
 800417c:	1dbb      	adds	r3, r7, #6
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d007      	beq.n	8004194 <ENS_Upkeep+0x180>
 8004184:	1dbb      	adds	r3, r7, #6
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b05      	cmp	r3, #5
 800418a:	d101      	bne.n	8004190 <ENS_Upkeep+0x17c>
 800418c:	4b82      	ldr	r3, [pc, #520]	@ (8004398 <ENS_Upkeep+0x384>)
 800418e:	e008      	b.n	80041a2 <ENS_Upkeep+0x18e>
 8004190:	4b82      	ldr	r3, [pc, #520]	@ (800439c <ENS_Upkeep+0x388>)
 8004192:	e006      	b.n	80041a2 <ENS_Upkeep+0x18e>
 8004194:	4b82      	ldr	r3, [pc, #520]	@ (80043a0 <ENS_Upkeep+0x38c>)
 8004196:	e004      	b.n	80041a2 <ENS_Upkeep+0x18e>
 8004198:	4b82      	ldr	r3, [pc, #520]	@ (80043a4 <ENS_Upkeep+0x390>)
 800419a:	e002      	b.n	80041a2 <ENS_Upkeep+0x18e>
 800419c:	4b82      	ldr	r3, [pc, #520]	@ (80043a8 <ENS_Upkeep+0x394>)
 800419e:	e000      	b.n	80041a2 <ENS_Upkeep+0x18e>
 80041a0:	4b82      	ldr	r3, [pc, #520]	@ (80043ac <ENS_Upkeep+0x398>)
 80041a2:	4a83      	ldr	r2, [pc, #524]	@ (80043b0 <ENS_Upkeep+0x39c>)
 80041a4:	4973      	ldr	r1, [pc, #460]	@ (8004374 <ENS_Upkeep+0x360>)
 80041a6:	2003      	movs	r0, #3
 80041a8:	f00d fb56 	bl	8011858 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 97;
 80041ac:	f00d ffa0 	bl	80120f0 <HAL_GetTick>
 80041b0:	0003      	movs	r3, r0
 80041b2:	3361      	adds	r3, #97	@ 0x61
 80041b4:	001a      	movs	r2, r3
 80041b6:	4b6b      	ldr	r3, [pc, #428]	@ (8004364 <ENS_Upkeep+0x350>)
 80041b8:	601a      	str	r2, [r3, #0]
      break;
 80041ba:	e12a      	b.n	8004412 <ENS_Upkeep+0x3fe>
    }
    setSensorLock(ENS160);
 80041bc:	2005      	movs	r0, #5
 80041be:	f007 fca7 	bl	800bb10 <setSensorLock>
    status = ENS160_readStatus();
 80041c2:	1d7c      	adds	r4, r7, #5
 80041c4:	f7ff fcb2 	bl	8003b2c <ENS160_readStatus>
 80041c8:	0003      	movs	r3, r0
 80041ca:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 80041cc:	1d7b      	adds	r3, r7, #5
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2202      	movs	r2, #2
 80041d2:	4013      	ands	r3, r2
 80041d4:	d10b      	bne.n	80041ee <ENS_Upkeep+0x1da>
      ENS160TimeStamp = HAL_GetTick() + 500;
 80041d6:	f00d ff8b 	bl	80120f0 <HAL_GetTick>
 80041da:	0003      	movs	r3, r0
 80041dc:	33f5      	adds	r3, #245	@ 0xf5
 80041de:	33ff      	adds	r3, #255	@ 0xff
 80041e0:	001a      	movs	r2, r3
 80041e2:	4b60      	ldr	r3, [pc, #384]	@ (8004364 <ENS_Upkeep+0x350>)
 80041e4:	601a      	str	r2, [r3, #0]
      setSensorLock(FREE);
 80041e6:	2000      	movs	r0, #0
 80041e8:	f007 fc92 	bl	800bb10 <setSensorLock>
      break;
 80041ec:	e111      	b.n	8004412 <ENS_Upkeep+0x3fe>
    }
    ENS160_measure(false);
 80041ee:	2000      	movs	r0, #0
 80041f0:	f7ff fcbc 	bl	8003b6c <ENS160_measure>
    HAL_Delay(10);
 80041f4:	200a      	movs	r0, #10
 80041f6:	f00d ff85 	bl	8012104 <HAL_Delay>
    ENS160_measureRaw(false);
 80041fa:	2000      	movs	r0, #0
 80041fc:	f7ff fd30 	bl	8003c60 <ENS160_measureRaw>
    HAL_Delay(10);
 8004200:	200a      	movs	r0, #10
 8004202:	f00d ff7f 	bl	8012104 <HAL_Delay>
    setSensorLock(FREE);
 8004206:	2000      	movs	r0, #0
 8004208:	f007 fc82 	bl	800bb10 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800420c:	4b56      	ldr	r3, [pc, #344]	@ (8004368 <ENS_Upkeep+0x354>)
 800420e:	2206      	movs	r2, #6
 8004210:	701a      	strb	r2, [r3, #0]
    break;
 8004212:	e0fe      	b.n	8004412 <ENS_Upkeep+0x3fe>

  case ENS_STATE_PROCESS_RESULTS:
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 8004214:	4b67      	ldr	r3, [pc, #412]	@ (80043b4 <ENS_Upkeep+0x3a0>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	001c      	movs	r4, r3
 800421a:	4b66      	ldr	r3, [pc, #408]	@ (80043b4 <ENS_Upkeep+0x3a0>)
 800421c:	885b      	ldrh	r3, [r3, #2]
 800421e:	0018      	movs	r0, r3
 8004220:	4b64      	ldr	r3, [pc, #400]	@ (80043b4 <ENS_Upkeep+0x3a0>)
 8004222:	889b      	ldrh	r3, [r3, #4]
 8004224:	4a64      	ldr	r2, [pc, #400]	@ (80043b8 <ENS_Upkeep+0x3a4>)
 8004226:	4965      	ldr	r1, [pc, #404]	@ (80043bc <ENS_Upkeep+0x3a8>)
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	9000      	str	r0, [sp, #0]
 800422c:	0023      	movs	r3, r4
 800422e:	2002      	movs	r0, #2
 8004230:	f00d fb12 	bl	8011858 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 8004234:	4b62      	ldr	r3, [pc, #392]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	4b61      	ldr	r3, [pc, #388]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a61      	ldr	r2, [pc, #388]	@ (80043c4 <ENS_Upkeep+0x3b0>)
 800423e:	495f      	ldr	r1, [pc, #380]	@ (80043bc <ENS_Upkeep+0x3a8>)
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	0003      	movs	r3, r0
 8004244:	2002      	movs	r0, #2
 8004246:	f00d fb07 	bl	8011858 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 800424a:	4b5d      	ldr	r3, [pc, #372]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 800424c:	6898      	ldr	r0, [r3, #8]
 800424e:	4b5c      	ldr	r3, [pc, #368]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4a5d      	ldr	r2, [pc, #372]	@ (80043c8 <ENS_Upkeep+0x3b4>)
 8004254:	4959      	ldr	r1, [pc, #356]	@ (80043bc <ENS_Upkeep+0x3a8>)
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	0003      	movs	r3, r0
 800425a:	2002      	movs	r0, #2
 800425c:	f00d fafc 	bl	8011858 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 8004260:	4b57      	ldr	r3, [pc, #348]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 8004262:	6918      	ldr	r0, [r3, #16]
 8004264:	4b56      	ldr	r3, [pc, #344]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	4a58      	ldr	r2, [pc, #352]	@ (80043cc <ENS_Upkeep+0x3b8>)
 800426a:	4954      	ldr	r1, [pc, #336]	@ (80043bc <ENS_Upkeep+0x3a8>)
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	0003      	movs	r3, r0
 8004270:	2002      	movs	r0, #2
 8004272:	f00d faf1 	bl	8011858 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 8004276:	4b52      	ldr	r3, [pc, #328]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 8004278:	6998      	ldr	r0, [r3, #24]
 800427a:	4b51      	ldr	r3, [pc, #324]	@ (80043c0 <ENS_Upkeep+0x3ac>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	4a54      	ldr	r2, [pc, #336]	@ (80043d0 <ENS_Upkeep+0x3bc>)
 8004280:	494e      	ldr	r1, [pc, #312]	@ (80043bc <ENS_Upkeep+0x3a8>)
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	0003      	movs	r3, r0
 8004286:	2002      	movs	r0, #2
 8004288:	f00d fae6 	bl	8011858 <CreateLine>
    ENSState = ENS_LOW_POWER;
 800428c:	4b36      	ldr	r3, [pc, #216]	@ (8004368 <ENS_Upkeep+0x354>)
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]
    break;
 8004292:	e0be      	b.n	8004412 <ENS_Upkeep+0x3fe>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 5000;
 8004294:	f00d ff2c 	bl	80120f0 <HAL_GetTick>
 8004298:	0003      	movs	r3, r0
 800429a:	4a3e      	ldr	r2, [pc, #248]	@ (8004394 <ENS_Upkeep+0x380>)
 800429c:	189a      	adds	r2, r3, r2
 800429e:	4b31      	ldr	r3, [pc, #196]	@ (8004364 <ENS_Upkeep+0x350>)
 80042a0:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle) {
 80042a2:	4b4c      	ldr	r3, [pc, #304]	@ (80043d4 <ENS_Upkeep+0x3c0>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2201      	movs	r2, #1
 80042a8:	4053      	eors	r3, r2
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02a      	beq.n	8004306 <ENS_Upkeep+0x2f2>
 80042b0:	4b49      	ldr	r3, [pc, #292]	@ (80043d8 <ENS_Upkeep+0x3c4>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2201      	movs	r2, #1
 80042b6:	4053      	eors	r3, r2
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d023      	beq.n	8004306 <ENS_Upkeep+0x2f2>
      if (getSensorLock() != FREE) {
 80042be:	f007 fc37 	bl	800bb30 <getSensorLock>
 80042c2:	1e03      	subs	r3, r0, #0
 80042c4:	d000      	beq.n	80042c8 <ENS_Upkeep+0x2b4>
 80042c6:	e09f      	b.n	8004408 <ENS_Upkeep+0x3f4>
        break;
      }
      setSensorLock(ENS160);
 80042c8:	2005      	movs	r0, #5
 80042ca:	f007 fc21 	bl	800bb10 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 80042ce:	1cfc      	adds	r4, r7, #3
 80042d0:	2000      	movs	r0, #0
 80042d2:	f7ff fb7b 	bl	80039cc <ENS160_setMode>
 80042d6:	0003      	movs	r3, r0
 80042d8:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s", result?"done.":"failed.");
 80042da:	1cfb      	adds	r3, r7, #3
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <ENS_Upkeep+0x2d2>
 80042e2:	4b26      	ldr	r3, [pc, #152]	@ (800437c <ENS_Upkeep+0x368>)
 80042e4:	e000      	b.n	80042e8 <ENS_Upkeep+0x2d4>
 80042e6:	4b26      	ldr	r3, [pc, #152]	@ (8004380 <ENS_Upkeep+0x36c>)
 80042e8:	4a3c      	ldr	r2, [pc, #240]	@ (80043dc <ENS_Upkeep+0x3c8>)
 80042ea:	4922      	ldr	r1, [pc, #136]	@ (8004374 <ENS_Upkeep+0x360>)
 80042ec:	2003      	movs	r0, #3
 80042ee:	f00d fab3 	bl	8011858 <CreateLine>
      setSensorLock(FREE);
 80042f2:	2000      	movs	r0, #0
 80042f4:	f007 fc0c 	bl	800bb10 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 80042f8:	f00d fefa 	bl	80120f0 <HAL_GetTick>
 80042fc:	0003      	movs	r3, r0
 80042fe:	4a38      	ldr	r2, [pc, #224]	@ (80043e0 <ENS_Upkeep+0x3cc>)
 8004300:	189a      	adds	r2, r3, r2
 8004302:	4b18      	ldr	r3, [pc, #96]	@ (8004364 <ENS_Upkeep+0x350>)
 8004304:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004306:	4b18      	ldr	r3, [pc, #96]	@ (8004368 <ENS_Upkeep+0x354>)
 8004308:	2208      	movs	r2, #8
 800430a:	701a      	strb	r2, [r3, #0]
    break;
 800430c:	e081      	b.n	8004412 <ENS_Upkeep+0x3fe>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 800430e:	f007 fc0f 	bl	800bb30 <getSensorLock>
 8004312:	1e03      	subs	r3, r0, #0
 8004314:	d000      	beq.n	8004318 <ENS_Upkeep+0x304>
 8004316:	e079      	b.n	800440c <ENS_Upkeep+0x3f8>
        break;
      }
      setSensorLock(ENS160);
 8004318:	2005      	movs	r0, #5
 800431a:	f007 fbf9 	bl	800bb10 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800431e:	1cba      	adds	r2, r7, #2
 8004320:	2301      	movs	r3, #1
 8004322:	2101      	movs	r1, #1
 8004324:	2010      	movs	r0, #16
 8004326:	f7ff f9c3 	bl	80036b0 <ReadMemRegister>
      if (data == 0) {
 800432a:	1cbb      	adds	r3, r7, #2
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d114      	bne.n	800435c <ENS_Upkeep+0x348>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004332:	1dfc      	adds	r4, r7, #7
 8004334:	2002      	movs	r0, #2
 8004336:	f7ff fb49 	bl	80039cc <ENS160_setMode>
 800433a:	0003      	movs	r3, r0
 800433c:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800433e:	1dfb      	adds	r3, r7, #7
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <ENS_Upkeep+0x336>
 8004346:	4b0d      	ldr	r3, [pc, #52]	@ (800437c <ENS_Upkeep+0x368>)
 8004348:	e000      	b.n	800434c <ENS_Upkeep+0x338>
 800434a:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <ENS_Upkeep+0x36c>)
 800434c:	4a25      	ldr	r2, [pc, #148]	@ (80043e4 <ENS_Upkeep+0x3d0>)
 800434e:	4909      	ldr	r1, [pc, #36]	@ (8004374 <ENS_Upkeep+0x360>)
 8004350:	2003      	movs	r0, #3
 8004352:	f00d fa81 	bl	8011858 <CreateLine>
        setSensorLock(FREE);
 8004356:	2000      	movs	r0, #0
 8004358:	f007 fbda 	bl	800bb10 <setSensorLock>
      }
      ENSState = ENS_STATUS_CHECK;
 800435c:	4b02      	ldr	r3, [pc, #8]	@ (8004368 <ENS_Upkeep+0x354>)
 800435e:	2203      	movs	r2, #3
 8004360:	701a      	strb	r2, [r3, #0]
    break;
 8004362:	e056      	b.n	8004412 <ENS_Upkeep+0x3fe>
 8004364:	20000468 	.word	0x20000468
 8004368:	20000000 	.word	0x20000000
 800436c:	0802ae24 	.word	0x0802ae24
 8004370:	080279ec 	.word	0x080279ec
 8004374:	080278f4 	.word	0x080278f4
 8004378:	002f9b80 	.word	0x002f9b80
 800437c:	08027a20 	.word	0x08027a20
 8004380:	08027a28 	.word	0x08027a28
 8004384:	08027a30 	.word	0x08027a30
 8004388:	08027a54 	.word	0x08027a54
 800438c:	08027a64 	.word	0x08027a64
 8004390:	08027a7c 	.word	0x08027a7c
 8004394:	00001388 	.word	0x00001388
 8004398:	08027a8c 	.word	0x08027a8c
 800439c:	08027a94 	.word	0x08027a94
 80043a0:	08027a9c 	.word	0x08027a9c
 80043a4:	08027aa4 	.word	0x08027aa4
 80043a8:	08027aac 	.word	0x08027aac
 80043ac:	08027ab4 	.word	0x08027ab4
 80043b0:	08027abc 	.word	0x08027abc
 80043b4:	20000498 	.word	0x20000498
 80043b8:	08027ae4 	.word	0x08027ae4
 80043bc:	08027964 	.word	0x08027964
 80043c0:	20000474 	.word	0x20000474
 80043c4:	08027b10 	.word	0x08027b10
 80043c8:	08027b2c 	.word	0x08027b2c
 80043cc:	08027b48 	.word	0x08027b48
 80043d0:	08027b64 	.word	0x08027b64
 80043d4:	20001e2d 	.word	0x20001e2d
 80043d8:	20001e2e 	.word	0x20001e2e
 80043dc:	08027b80 	.word	0x08027b80
 80043e0:	0000afc8 	.word	0x0000afc8
 80043e4:	08027ba4 	.word	0x08027ba4


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 80043e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004420 <ENS_Upkeep+0x40c>)
 80043ea:	2202      	movs	r2, #2
 80043ec:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 80043ee:	f007 fb9f 	bl	800bb30 <getSensorLock>
 80043f2:	0003      	movs	r3, r0
 80043f4:	2b05      	cmp	r3, #5
 80043f6:	d00b      	beq.n	8004410 <ENS_Upkeep+0x3fc>
      setSensorLock(FREE);
 80043f8:	2000      	movs	r0, #0
 80043fa:	f007 fb89 	bl	800bb10 <setSensorLock>
    }
    break;
 80043fe:	e007      	b.n	8004410 <ENS_Upkeep+0x3fc>
      break;
 8004400:	46c0      	nop			@ (mov r8, r8)
 8004402:	e006      	b.n	8004412 <ENS_Upkeep+0x3fe>
      break;
 8004404:	46c0      	nop			@ (mov r8, r8)
 8004406:	e004      	b.n	8004412 <ENS_Upkeep+0x3fe>
        break;
 8004408:	46c0      	nop			@ (mov r8, r8)
 800440a:	e002      	b.n	8004412 <ENS_Upkeep+0x3fe>
        break;
 800440c:	46c0      	nop			@ (mov r8, r8)
 800440e:	e000      	b.n	8004412 <ENS_Upkeep+0x3fe>
    break;
 8004410:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 8004412:	4b03      	ldr	r3, [pc, #12]	@ (8004420 <ENS_Upkeep+0x40c>)
 8004414:	781b      	ldrb	r3, [r3, #0]
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b003      	add	sp, #12
 800441c:	bd90      	pop	{r4, r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	20000000 	.word	0x20000000

08004424 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8004428:	4b02      	ldr	r3, [pc, #8]	@ (8004434 <forceNTPupdate+0x10>)
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
}
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000684 	.word	0x20000684

08004438 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 8004440:	f00d fe56 	bl	80120f0 <HAL_GetTick>
 8004444:	0002      	movs	r2, r0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	18d2      	adds	r2, r2, r3
 800444a:	4b03      	ldr	r3, [pc, #12]	@ (8004458 <setESPTimeStamp+0x20>)
 800444c:	601a      	str	r2, [r3, #0]
}
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	46bd      	mov	sp, r7
 8004452:	b002      	add	sp, #8
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	20000680 	.word	0x20000680

0800445c <setCharges>:
void setCharges(){
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004460:	f003 fc46 	bl	8007cf0 <ReadBatteryVoltage>
 8004464:	1c02      	adds	r2, r0, #0
 8004466:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <setCharges+0x3c>)
 8004468:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800446a:	f003 fca3 	bl	8007db4 <ReadSolarVoltage>
 800446e:	0003      	movs	r3, r0
 8004470:	0018      	movs	r0, r3
 8004472:	f7fe ffa5 	bl	80033c0 <__aeabi_i2d>
 8004476:	2200      	movs	r2, #0
 8004478:	4b08      	ldr	r3, [pc, #32]	@ (800449c <setCharges+0x40>)
 800447a:	f7fd fc9b 	bl	8001db4 <__aeabi_ddiv>
 800447e:	0002      	movs	r2, r0
 8004480:	000b      	movs	r3, r1
 8004482:	0010      	movs	r0, r2
 8004484:	0019      	movs	r1, r3
 8004486:	f7ff f835 	bl	80034f4 <__aeabi_d2f>
 800448a:	1c02      	adds	r2, r0, #0
 800448c:	4b04      	ldr	r3, [pc, #16]	@ (80044a0 <setCharges+0x44>)
 800448e:	601a      	str	r2, [r3, #0]
}
 8004490:	46c0      	nop			@ (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	46c0      	nop			@ (mov r8, r8)
 8004498:	200005d8 	.word	0x200005d8
 800449c:	408f4000 	.word	0x408f4000
 80044a0:	200005dc 	.word	0x200005dc

080044a4 <checkEEprom>:
bool checkEEprom(){
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80044aa:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <checkEEprom+0x5c>)
 80044ac:	4815      	ldr	r0, [pc, #84]	@ (8004504 <checkEEprom+0x60>)
 80044ae:	220c      	movs	r2, #12
 80044b0:	0019      	movs	r1, r3
 80044b2:	f005 fe5b 	bl	800a16c <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80044b6:	1dfb      	adds	r3, r7, #7
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	e00e      	b.n	80044dc <checkEEprom+0x38>
    configSum += tempConfig[i];
 80044be:	1dfb      	adds	r3, r7, #7
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	4a0f      	ldr	r2, [pc, #60]	@ (8004500 <checkEEprom+0x5c>)
 80044c4:	5cd3      	ldrb	r3, [r2, r3]
 80044c6:	001a      	movs	r2, r3
 80044c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <checkEEprom+0x64>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	18d2      	adds	r2, r2, r3
 80044ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004508 <checkEEprom+0x64>)
 80044d0:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80044d2:	1dfb      	adds	r3, r7, #7
 80044d4:	781a      	ldrb	r2, [r3, #0]
 80044d6:	1dfb      	adds	r3, r7, #7
 80044d8:	3201      	adds	r2, #1
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	1dfb      	adds	r3, r7, #7
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b0b      	cmp	r3, #11
 80044e2:	d9ec      	bls.n	80044be <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 80044e4:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <checkEEprom+0x64>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	425a      	negs	r2, r3
 80044ea:	4153      	adcs	r3, r2
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	4b07      	ldr	r3, [pc, #28]	@ (800450c <checkEEprom+0x68>)
 80044f0:	701a      	strb	r2, [r3, #0]
  return test;
 80044f2:	4b06      	ldr	r3, [pc, #24]	@ (800450c <checkEEprom+0x68>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
}
 80044f6:	0018      	movs	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b002      	add	sp, #8
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	200006cc 	.word	0x200006cc
 8004504:	0808000c 	.word	0x0808000c
 8004508:	200006d8 	.word	0x200006d8
 800450c:	200006dc 	.word	0x200006dc

08004510 <checkName>:
bool checkName(){
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004516:	4b15      	ldr	r3, [pc, #84]	@ (800456c <checkName+0x5c>)
 8004518:	4815      	ldr	r0, [pc, #84]	@ (8004570 <checkName+0x60>)
 800451a:	2220      	movs	r2, #32
 800451c:	0019      	movs	r1, r3
 800451e:	f005 fe25 	bl	800a16c <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004522:	1dfb      	adds	r3, r7, #7
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e00e      	b.n	8004548 <checkName+0x38>
    configSum += nameConfig[i];
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	4a0f      	ldr	r2, [pc, #60]	@ (800456c <checkName+0x5c>)
 8004530:	5cd3      	ldrb	r3, [r2, r3]
 8004532:	001a      	movs	r2, r3
 8004534:	4b0f      	ldr	r3, [pc, #60]	@ (8004574 <checkName+0x64>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	18d2      	adds	r2, r2, r3
 800453a:	4b0e      	ldr	r3, [pc, #56]	@ (8004574 <checkName+0x64>)
 800453c:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800453e:	1dfb      	adds	r3, r7, #7
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	1dfb      	adds	r3, r7, #7
 8004544:	3201      	adds	r2, #1
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	1dfb      	adds	r3, r7, #7
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b0b      	cmp	r3, #11
 800454e:	d9ec      	bls.n	800452a <checkName+0x1a>
  }
  test = (configSum != 0);
 8004550:	4b08      	ldr	r3, [pc, #32]	@ (8004574 <checkName+0x64>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	1e5a      	subs	r2, r3, #1
 8004556:	4193      	sbcs	r3, r2
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4b07      	ldr	r3, [pc, #28]	@ (8004578 <checkName+0x68>)
 800455c:	701a      	strb	r2, [r3, #0]
  return test;
 800455e:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <checkName+0x68>)
 8004560:	781b      	ldrb	r3, [r3, #0]
}
 8004562:	0018      	movs	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	b002      	add	sp, #8
 8004568:	bd80      	pop	{r7, pc}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	200006e0 	.word	0x200006e0
 8004570:	08080090 	.word	0x08080090
 8004574:	20000700 	.word	0x20000700
 8004578:	20000704 	.word	0x20000704

0800457c <setHIDS>:


void setHIDS(float temp, float humid){
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004586:	4b05      	ldr	r3, [pc, #20]	@ (800459c <setHIDS+0x20>)
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 800458c:	4b03      	ldr	r3, [pc, #12]	@ (800459c <setHIDS+0x20>)
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	46bd      	mov	sp, r7
 8004596:	b002      	add	sp, #8
 8004598:	bd80      	pop	{r7, pc}
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	20000690 	.word	0x20000690

080045a0 <setVOC>:

void setVOC(uint16_t voc) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	0002      	movs	r2, r0
 80045a8:	1dbb      	adds	r3, r7, #6
 80045aa:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 80045ac:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <setVOC+0x30>)
 80045ae:	1dba      	adds	r2, r7, #6
 80045b0:	8812      	ldrh	r2, [r2, #0]
 80045b2:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 80045b4:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <setVOC+0x30>)
 80045b6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80045b8:	1dba      	adds	r2, r7, #6
 80045ba:	8812      	ldrh	r2, [r2, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d903      	bls.n	80045c8 <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 80045c0:	4b03      	ldr	r3, [pc, #12]	@ (80045d0 <setVOC+0x30>)
 80045c2:	1dba      	adds	r2, r7, #6
 80045c4:	8812      	ldrh	r2, [r2, #0]
 80045c6:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 80045c8:	46c0      	nop			@ (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b002      	add	sp, #8
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20000690 	.word	0x20000690

080045d4 <sethPa>:

void sethPa(float hPa) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  MeasVal.hPaValue = hPa;
 80045dc:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <sethPa+0x30>)
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (hPa > MeasVal.hPaValuemax) {
 80045e2:	4b08      	ldr	r3, [pc, #32]	@ (8004604 <sethPa+0x30>)
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	1c19      	adds	r1, r3, #0
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7fb ffb5 	bl	8000558 <__aeabi_fcmpgt>
 80045ee:	1e03      	subs	r3, r0, #0
 80045f0:	d100      	bne.n	80045f4 <sethPa+0x20>
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 80045f2:	e002      	b.n	80045fa <sethPa+0x26>
    MeasVal.hPaValuemax = hPa;
 80045f4:	4b03      	ldr	r3, [pc, #12]	@ (8004604 <sethPa+0x30>)
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b002      	add	sp, #8
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			@ (mov r8, r8)
 8004604:	20000690 	.word	0x20000690

08004608 <setMic>:


void setMic(float dB, float dBmax, float dBAavg){
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004614:	4b06      	ldr	r3, [pc, #24]	@ (8004630 <setMic+0x28>)
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 800461a:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <setMic+0x28>)
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 8004620:	4b03      	ldr	r3, [pc, #12]	@ (8004630 <setMic+0x28>)
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b004      	add	sp, #16
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	20000690 	.word	0x20000690

08004634 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	0002      	movs	r2, r0
 800463c:	1dbb      	adds	r3, r7, #6
 800463e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004640:	1dbb      	adds	r3, r7, #6
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	0018      	movs	r0, r3
 8004646:	f7fc ffc3 	bl	80015d0 <__aeabi_i2f>
 800464a:	1c03      	adds	r3, r0, #0
 800464c:	490d      	ldr	r1, [pc, #52]	@ (8004684 <setPM2p5+0x50>)
 800464e:	1c18      	adds	r0, r3, #0
 8004650:	f7fc fac0 	bl	8000bd4 <__aeabi_fdiv>
 8004654:	1c03      	adds	r3, r0, #0
 8004656:	1c1a      	adds	r2, r3, #0
 8004658:	4b0b      	ldr	r3, [pc, #44]	@ (8004688 <setPM2p5+0x54>)
 800465a:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 800465c:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <setPM2p5+0x54>)
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	4b09      	ldr	r3, [pc, #36]	@ (8004688 <setPM2p5+0x54>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	1c19      	adds	r1, r3, #0
 8004666:	1c10      	adds	r0, r2, #0
 8004668:	f7fb ff76 	bl	8000558 <__aeabi_fcmpgt>
 800466c:	1e03      	subs	r3, r0, #0
 800466e:	d100      	bne.n	8004672 <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004670:	e003      	b.n	800467a <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004672:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <setPM2p5+0x54>)
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	4b04      	ldr	r3, [pc, #16]	@ (8004688 <setPM2p5+0x54>)
 8004678:	60da      	str	r2, [r3, #12]
}
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	46bd      	mov	sp, r7
 800467e:	b002      	add	sp, #8
 8004680:	bd80      	pop	{r7, pc}
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	41200000 	.word	0x41200000
 8004688:	20000690 	.word	0x20000690

0800468c <setPM10>:

void setPM10(uint16_t PM10) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	0002      	movs	r2, r0
 8004694:	1dbb      	adds	r3, r7, #6
 8004696:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004698:	1dbb      	adds	r3, r7, #6
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	0018      	movs	r0, r3
 800469e:	f7fc ff97 	bl	80015d0 <__aeabi_i2f>
 80046a2:	1c03      	adds	r3, r0, #0
 80046a4:	490d      	ldr	r1, [pc, #52]	@ (80046dc <setPM10+0x50>)
 80046a6:	1c18      	adds	r0, r3, #0
 80046a8:	f7fc fa94 	bl	8000bd4 <__aeabi_fdiv>
 80046ac:	1c03      	adds	r3, r0, #0
 80046ae:	1c1a      	adds	r2, r3, #0
 80046b0:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <setPM10+0x54>)
 80046b2:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80046b4:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <setPM10+0x54>)
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <setPM10+0x54>)
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	1c19      	adds	r1, r3, #0
 80046be:	1c10      	adds	r0, r2, #0
 80046c0:	f7fb ff4a 	bl	8000558 <__aeabi_fcmpgt>
 80046c4:	1e03      	subs	r3, r0, #0
 80046c6:	d100      	bne.n	80046ca <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80046c8:	e003      	b.n	80046d2 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80046ca:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <setPM10+0x54>)
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <setPM10+0x54>)
 80046d0:	615a      	str	r2, [r3, #20]
}
 80046d2:	46c0      	nop			@ (mov r8, r8)
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b002      	add	sp, #8
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	46c0      	nop			@ (mov r8, r8)
 80046dc:	41200000 	.word	0x41200000
 80046e0:	20000690 	.word	0x20000690

080046e4 <setNOx>:

void setNOx(uint16_t nox) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	0002      	movs	r2, r0
 80046ec:	1dbb      	adds	r3, r7, #6
 80046ee:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 80046f0:	4b08      	ldr	r3, [pc, #32]	@ (8004714 <setNOx+0x30>)
 80046f2:	1dba      	adds	r2, r7, #6
 80046f4:	8812      	ldrh	r2, [r2, #0]
 80046f6:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 80046f8:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <setNOx+0x30>)
 80046fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046fc:	1dba      	adds	r2, r7, #6
 80046fe:	8812      	ldrh	r2, [r2, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d903      	bls.n	800470c <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 8004704:	4b03      	ldr	r3, [pc, #12]	@ (8004714 <setNOx+0x30>)
 8004706:	1dba      	adds	r2, r7, #6
 8004708:	8812      	ldrh	r2, [r2, #0]
 800470a:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 800470c:	46c0      	nop			@ (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	b002      	add	sp, #8
 8004712:	bd80      	pop	{r7, pc}
 8004714:	20000690 	.word	0x20000690

08004718 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 800471c:	f007 fdbe 	bl	800c29c <sen5x_Get_sen5x_enable_state>
 8004720:	1e03      	subs	r3, r0, #0
 8004722:	d008      	beq.n	8004736 <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 8004724:	4b08      	ldr	r3, [pc, #32]	@ (8004748 <resetMaxMeasurementValues+0x30>)
 8004726:	2200      	movs	r2, #0
 8004728:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 800472a:	4b07      	ldr	r3, [pc, #28]	@ (8004748 <resetMaxMeasurementValues+0x30>)
 800472c:	2200      	movs	r2, #0
 800472e:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <resetMaxMeasurementValues+0x30>)
 8004732:	2200      	movs	r2, #0
 8004734:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.hPaValuemax = 0.0;
 8004736:	4b04      	ldr	r3, [pc, #16]	@ (8004748 <resetMaxMeasurementValues+0x30>)
 8004738:	2200      	movs	r2, #0
 800473a:	639a      	str	r2, [r3, #56]	@ 0x38
  MeasVal.VOCIndexmax = 0;
 800473c:	4b02      	ldr	r3, [pc, #8]	@ (8004748 <resetMaxMeasurementValues+0x30>)
 800473e:	2200      	movs	r2, #0
 8004740:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8004742:	46c0      	nop			@ (mov r8, r8)
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20000690 	.word	0x20000690

0800474c <SetConfigMode>:

void SetConfigMode(){
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004750:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <SetConfigMode+0x30>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2201      	movs	r2, #1
 8004756:	4053      	eors	r3, r2
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 800475e:	4a08      	ldr	r2, [pc, #32]	@ (8004780 <SetConfigMode+0x34>)
 8004760:	4b08      	ldr	r3, [pc, #32]	@ (8004784 <SetConfigMode+0x38>)
 8004762:	0019      	movs	r1, r3
 8004764:	2003      	movs	r0, #3
 8004766:	f00d f877 	bl	8011858 <CreateLine>
  }
  ReconfigSet = true;
 800476a:	4b04      	ldr	r3, [pc, #16]	@ (800477c <SetConfigMode+0x30>)
 800476c:	2201      	movs	r2, #1
 800476e:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004770:	4b05      	ldr	r3, [pc, #20]	@ (8004788 <SetConfigMode+0x3c>)
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
}
 8004776:	46c0      	nop			@ (mov r8, r8)
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	200005b7 	.word	0x200005b7
 8004780:	08027bd4 	.word	0x08027bd4
 8004784:	08027bf4 	.word	0x08027bf4
 8004788:	20000207 	.word	0x20000207

0800478c <GetReconfigMode>:

bool GetReconfigMode() {
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004790:	4b02      	ldr	r3, [pc, #8]	@ (800479c <GetReconfigMode+0x10>)
 8004792:	781b      	ldrb	r3, [r3, #0]
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	200005b7 	.word	0x200005b7

080047a0 <ESP_GetUID>:

void ESP_GetUID(){
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80047a4:	f00d fcee 	bl	8012184 <HAL_GetUIDw0>
 80047a8:	0002      	movs	r2, r0
 80047aa:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <ESP_GetUID+0x28>)
 80047ac:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80047ae:	f00d fcf3 	bl	8012198 <HAL_GetUIDw1>
 80047b2:	0002      	movs	r2, r0
 80047b4:	4b04      	ldr	r3, [pc, #16]	@ (80047c8 <ESP_GetUID+0x28>)
 80047b6:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80047b8:	f00d fcf8 	bl	80121ac <HAL_GetUIDw2>
 80047bc:	0002      	movs	r2, r0
 80047be:	4b02      	ldr	r3, [pc, #8]	@ (80047c8 <ESP_GetUID+0x28>)
 80047c0:	609a      	str	r2, [r3, #8]
}
 80047c2:	46c0      	nop			@ (mov r8, r8)
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	200005c0 	.word	0x200005c0

080047cc <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80047d4:	4b08      	ldr	r3, [pc, #32]	@ (80047f8 <ESP_Init+0x2c>)
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80047da:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <ESP_Init+0x30>)
 80047dc:	2202      	movs	r2, #2
 80047de:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 80047e0:	f7ff ffde 	bl	80047a0 <ESP_GetUID>
  beurs = checkEEprom();
 80047e4:	f7ff fe5e 	bl	80044a4 <checkEEprom>
 80047e8:	0003      	movs	r3, r0
 80047ea:	001a      	movs	r2, r3
 80047ec:	4b04      	ldr	r3, [pc, #16]	@ (8004800 <ESP_Init+0x34>)
 80047ee:	701a      	strb	r2, [r3, #0]
}
 80047f0:	46c0      	nop			@ (mov r8, r8)
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b002      	add	sp, #8
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	200004ac 	.word	0x200004ac
 80047fc:	2000002c 	.word	0x2000002c
 8004800:	200005ba 	.word	0x200005ba

08004804 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004804:	b5b0      	push	{r4, r5, r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	000a      	movs	r2, r1
 800480e:	1cbb      	adds	r3, r7, #2
 8004810:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004812:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <ESP_Send+0x54>)
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	250f      	movs	r5, #15
 8004818:	197c      	adds	r4, r7, r5
 800481a:	1cbb      	adds	r3, r7, #2
 800481c:	881a      	ldrh	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0019      	movs	r1, r3
 8004822:	f016 fa27 	bl	801ac74 <HAL_UART_Transmit_DMA>
 8004826:	0003      	movs	r3, r0
 8004828:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800482a:	197b      	adds	r3, r7, r5
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004832:	4a0a      	ldr	r2, [pc, #40]	@ (800485c <ESP_Send+0x58>)
 8004834:	4b0a      	ldr	r3, [pc, #40]	@ (8004860 <ESP_Send+0x5c>)
 8004836:	0019      	movs	r1, r3
 8004838:	2001      	movs	r0, #1
 800483a:	f00d f80d 	bl	8011858 <CreateLine>
    return false;
 800483e:	2300      	movs	r3, #0
 8004840:	e006      	b.n	8004850 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <ESP_Send+0x60>)
 8004846:	0011      	movs	r1, r2
 8004848:	0018      	movs	r0, r3
 800484a:	f01e ff8d 	bl	8023768 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 800484e:	2301      	movs	r3, #1
}
 8004850:	0018      	movs	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	b004      	add	sp, #16
 8004856:	bdb0      	pop	{r4, r5, r7, pc}
 8004858:	200004ac 	.word	0x200004ac
 800485c:	08027bf8 	.word	0x08027bf8
 8004860:	08027c18 	.word	0x08027c18
 8004864:	08027c1c 	.word	0x08027c1c

08004868 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	000a      	movs	r2, r1
 8004872:	1cbb      	adds	r3, r7, #2
 8004874:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004876:	4b52      	ldr	r3, [pc, #328]	@ (80049c0 <ESP_Receive+0x158>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 800487c:	260f      	movs	r6, #15
 800487e:	19bb      	adds	r3, r7, r6
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004884:	4b4f      	ldr	r3, [pc, #316]	@ (80049c4 <ESP_Receive+0x15c>)
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	250e      	movs	r5, #14
 800488a:	197c      	adds	r4, r7, r5
 800488c:	1cbb      	adds	r3, r7, #2
 800488e:	881a      	ldrh	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	0019      	movs	r1, r3
 8004894:	f016 fa7e 	bl	801ad94 <HAL_UART_Receive_DMA>
 8004898:	0003      	movs	r3, r0
 800489a:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800489c:	002c      	movs	r4, r5
 800489e:	193b      	adds	r3, r7, r4
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d100      	bne.n	80048a8 <ESP_Receive+0x40>
 80048a6:	e085      	b.n	80049b4 <ESP_Receive+0x14c>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 80048a8:	4b46      	ldr	r3, [pc, #280]	@ (80049c4 <ESP_Receive+0x15c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2284      	movs	r2, #132	@ 0x84
 80048ae:	589b      	ldr	r3, [r3, r2]
 80048b0:	4a45      	ldr	r2, [pc, #276]	@ (80049c8 <ESP_Receive+0x160>)
 80048b2:	4946      	ldr	r1, [pc, #280]	@ (80049cc <ESP_Receive+0x164>)
 80048b4:	2001      	movs	r0, #1
 80048b6:	f00c ffcf 	bl	8011858 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 80048ba:	193b      	adds	r3, r7, r4
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	4013      	ands	r3, r2
 80048c2:	d008      	beq.n	80048d6 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 80048c4:	4a42      	ldr	r2, [pc, #264]	@ (80049d0 <ESP_Receive+0x168>)
 80048c6:	4b41      	ldr	r3, [pc, #260]	@ (80049cc <ESP_Receive+0x164>)
 80048c8:	0019      	movs	r1, r3
 80048ca:	2001      	movs	r0, #1
 80048cc:	f00c ffc4 	bl	8011858 <CreateLine>
      reset = true;
 80048d0:	19bb      	adds	r3, r7, r6
 80048d2:	2201      	movs	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 80048d6:	230e      	movs	r3, #14
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2202      	movs	r2, #2
 80048de:	4013      	ands	r3, r2
 80048e0:	d005      	beq.n	80048ee <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 80048e2:	4a3c      	ldr	r2, [pc, #240]	@ (80049d4 <ESP_Receive+0x16c>)
 80048e4:	4b39      	ldr	r3, [pc, #228]	@ (80049cc <ESP_Receive+0x164>)
 80048e6:	0019      	movs	r1, r3
 80048e8:	2001      	movs	r0, #1
 80048ea:	f00c ffb5 	bl	8011858 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 80048ee:	230e      	movs	r3, #14
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2204      	movs	r2, #4
 80048f6:	4013      	ands	r3, r2
 80048f8:	d005      	beq.n	8004906 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 80048fa:	4a37      	ldr	r2, [pc, #220]	@ (80049d8 <ESP_Receive+0x170>)
 80048fc:	4b33      	ldr	r3, [pc, #204]	@ (80049cc <ESP_Receive+0x164>)
 80048fe:	0019      	movs	r1, r3
 8004900:	2001      	movs	r0, #1
 8004902:	f00c ffa9 	bl	8011858 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004906:	230e      	movs	r3, #14
 8004908:	18fb      	adds	r3, r7, r3
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2208      	movs	r2, #8
 800490e:	4013      	ands	r3, r2
 8004910:	d005      	beq.n	800491e <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8004912:	4a32      	ldr	r2, [pc, #200]	@ (80049dc <ESP_Receive+0x174>)
 8004914:	4b2d      	ldr	r3, [pc, #180]	@ (80049cc <ESP_Receive+0x164>)
 8004916:	0019      	movs	r1, r3
 8004918:	2001      	movs	r0, #1
 800491a:	f00c ff9d 	bl	8011858 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 800491e:	230e      	movs	r3, #14
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2210      	movs	r2, #16
 8004926:	4013      	ands	r3, r2
 8004928:	d005      	beq.n	8004936 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 800492a:	4a2d      	ldr	r2, [pc, #180]	@ (80049e0 <ESP_Receive+0x178>)
 800492c:	4b27      	ldr	r3, [pc, #156]	@ (80049cc <ESP_Receive+0x164>)
 800492e:	0019      	movs	r1, r3
 8004930:	2001      	movs	r0, #1
 8004932:	f00c ff91 	bl	8011858 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8004936:	230e      	movs	r3, #14
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2220      	movs	r2, #32
 800493e:	4013      	ands	r3, r2
 8004940:	d005      	beq.n	800494e <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8004942:	4a28      	ldr	r2, [pc, #160]	@ (80049e4 <ESP_Receive+0x17c>)
 8004944:	4b21      	ldr	r3, [pc, #132]	@ (80049cc <ESP_Receive+0x164>)
 8004946:	0019      	movs	r1, r3
 8004948:	2001      	movs	r0, #1
 800494a:	f00c ff85 	bl	8011858 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 800494e:	230e      	movs	r3, #14
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2240      	movs	r2, #64	@ 0x40
 8004956:	4013      	ands	r3, r2
 8004958:	d005      	beq.n	8004966 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 800495a:	4a23      	ldr	r2, [pc, #140]	@ (80049e8 <ESP_Receive+0x180>)
 800495c:	4b1b      	ldr	r3, [pc, #108]	@ (80049cc <ESP_Receive+0x164>)
 800495e:	0019      	movs	r1, r3
 8004960:	2001      	movs	r0, #1
 8004962:	f00c ff79 	bl	8011858 <CreateLine>
    }
#endif
    if (reset) {
 8004966:	230f      	movs	r3, #15
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01c      	beq.n	80049aa <ESP_Receive+0x142>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004970:	4b1e      	ldr	r3, [pc, #120]	@ (80049ec <ESP_Receive+0x184>)
 8004972:	2200      	movs	r2, #0
 8004974:	2101      	movs	r1, #1
 8004976:	0018      	movs	r0, r3
 8004978:	f00e fe4b 	bl	8013612 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800497c:	2001      	movs	r0, #1
 800497e:	f00d fbc1 	bl	8012104 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004982:	2380      	movs	r3, #128	@ 0x80
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	481a      	ldr	r0, [pc, #104]	@ (80049f0 <ESP_Receive+0x188>)
 8004988:	2200      	movs	r2, #0
 800498a:	0019      	movs	r1, r3
 800498c:	f00e fe41 	bl	8013612 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004990:	2001      	movs	r0, #1
 8004992:	f00d fbb7 	bl	8012104 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004996:	4b15      	ldr	r3, [pc, #84]	@ (80049ec <ESP_Receive+0x184>)
 8004998:	2200      	movs	r2, #0
 800499a:	2102      	movs	r1, #2
 800499c:	0018      	movs	r0, r3
 800499e:	f00e fe38 	bl	8013612 <HAL_GPIO_WritePin>
      SetAllREDLED();
 80049a2:	f00b fecb 	bl	801073c <SetAllREDLED>
      HAL_NVIC_SystemReset();
 80049a6:	f00e f86c 	bl	8012a82 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 80049aa:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <ESP_Receive+0x158>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	701a      	strb	r2, [r3, #0]
    return false;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e000      	b.n	80049b6 <ESP_Receive+0x14e>
  }
  return true;
 80049b4:	2301      	movs	r3, #1
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b005      	add	sp, #20
 80049bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	200004b0 	.word	0x200004b0
 80049c4:	200004ac 	.word	0x200004ac
 80049c8:	08027c2c 	.word	0x08027c2c
 80049cc:	08027c18 	.word	0x08027c18
 80049d0:	08027c5c 	.word	0x08027c5c
 80049d4:	08027c80 	.word	0x08027c80
 80049d8:	08027ca4 	.word	0x08027ca4
 80049dc:	08027cc8 	.word	0x08027cc8
 80049e0:	08027cec 	.word	0x08027cec
 80049e4:	08027d18 	.word	0x08027d18
 80049e8:	08027d48 	.word	0x08027d48
 80049ec:	50001c00 	.word	0x50001c00
 80049f0:	50000800 	.word	0x50000800

080049f4 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80049fc:	4b39      	ldr	r3, [pc, #228]	@ (8004ae4 <HAL_UART_ErrorCallback+0xf0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d16b      	bne.n	8004ade <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2284      	movs	r2, #132	@ 0x84
 8004a0a:	589b      	ldr	r3, [r3, r2]
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d065      	beq.n	8004adc <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2284      	movs	r2, #132	@ 0x84
 8004a14:	589b      	ldr	r3, [r3, r2]
 8004a16:	4a34      	ldr	r2, [pc, #208]	@ (8004ae8 <HAL_UART_ErrorCallback+0xf4>)
 8004a18:	4934      	ldr	r1, [pc, #208]	@ (8004aec <HAL_UART_ErrorCallback+0xf8>)
 8004a1a:	2003      	movs	r0, #3
 8004a1c:	f00c ff1c 	bl	8011858 <CreateLine>
    switch (huart->ErrorCode) {
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2284      	movs	r2, #132	@ 0x84
 8004a24:	589b      	ldr	r3, [r3, r2]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d851      	bhi.n	8004ace <HAL_UART_ErrorCallback+0xda>
 8004a2a:	009a      	lsls	r2, r3, #2
 8004a2c:	4b30      	ldr	r3, [pc, #192]	@ (8004af0 <HAL_UART_ErrorCallback+0xfc>)
 8004a2e:	18d3      	adds	r3, r2, r3
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8004a34:	4a2f      	ldr	r2, [pc, #188]	@ (8004af4 <HAL_UART_ErrorCallback+0x100>)
 8004a36:	4b30      	ldr	r3, [pc, #192]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004a38:	0019      	movs	r1, r3
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f00c ff0c 	bl	8011858 <CreateLine>
        break;
 8004a40:	e04d      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8004a42:	4a2e      	ldr	r2, [pc, #184]	@ (8004afc <HAL_UART_ErrorCallback+0x108>)
 8004a44:	4b2c      	ldr	r3, [pc, #176]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004a46:	0019      	movs	r1, r3
 8004a48:	2001      	movs	r0, #1
 8004a4a:	f00c ff05 	bl	8011858 <CreateLine>
        break;
 8004a4e:	e046      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8004a50:	4a2b      	ldr	r2, [pc, #172]	@ (8004b00 <HAL_UART_ErrorCallback+0x10c>)
 8004a52:	4b29      	ldr	r3, [pc, #164]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004a54:	0019      	movs	r1, r3
 8004a56:	2001      	movs	r0, #1
 8004a58:	f00c fefe 	bl	8011858 <CreateLine>
        break;
 8004a5c:	e03f      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8004a5e:	4a29      	ldr	r2, [pc, #164]	@ (8004b04 <HAL_UART_ErrorCallback+0x110>)
 8004a60:	4b25      	ldr	r3, [pc, #148]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004a62:	0019      	movs	r1, r3
 8004a64:	2001      	movs	r0, #1
 8004a66:	f00c fef7 	bl	8011858 <CreateLine>
        break;
 8004a6a:	e038      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8004a6c:	4a26      	ldr	r2, [pc, #152]	@ (8004b08 <HAL_UART_ErrorCallback+0x114>)
 8004a6e:	4b22      	ldr	r3, [pc, #136]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004a70:	0019      	movs	r1, r3
 8004a72:	2001      	movs	r0, #1
 8004a74:	f00c fef0 	bl	8011858 <CreateLine>
        break;
 8004a78:	e031      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8004a7a:	4a24      	ldr	r2, [pc, #144]	@ (8004b0c <HAL_UART_ErrorCallback+0x118>)
 8004a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004a7e:	0019      	movs	r1, r3
 8004a80:	2001      	movs	r0, #1
 8004a82:	f00c fee9 	bl	8011858 <CreateLine>
        break;
 8004a86:	e02a      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8004a88:	4a21      	ldr	r2, [pc, #132]	@ (8004b10 <HAL_UART_ErrorCallback+0x11c>)
 8004a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f00c fee2 	bl	8011858 <CreateLine>
        break;
 8004a94:	e023      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8004a96:	4a1f      	ldr	r2, [pc, #124]	@ (8004b14 <HAL_UART_ErrorCallback+0x120>)
 8004a98:	4b17      	ldr	r3, [pc, #92]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	f00c fedb 	bl	8011858 <CreateLine>
        break;
 8004aa2:	e01c      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8004aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b18 <HAL_UART_ErrorCallback+0x124>)
 8004aa6:	4b14      	ldr	r3, [pc, #80]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	2001      	movs	r0, #1
 8004aac:	f00c fed4 	bl	8011858 <CreateLine>
        break;
 8004ab0:	e015      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8004ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8004b1c <HAL_UART_ErrorCallback+0x128>)
 8004ab4:	4b10      	ldr	r3, [pc, #64]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004ab6:	0019      	movs	r1, r3
 8004ab8:	2001      	movs	r0, #1
 8004aba:	f00c fecd 	bl	8011858 <CreateLine>
        break;
 8004abe:	e00e      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8004ac0:	4a17      	ldr	r2, [pc, #92]	@ (8004b20 <HAL_UART_ErrorCallback+0x12c>)
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	f00c fec6 	bl	8011858 <CreateLine>
        break;
 8004acc:	e007      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8004ace:	4a15      	ldr	r2, [pc, #84]	@ (8004b24 <HAL_UART_ErrorCallback+0x130>)
 8004ad0:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <HAL_UART_ErrorCallback+0x104>)
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	f00c febf 	bl	8011858 <CreateLine>
 8004ada:	e000      	b.n	8004ade <HAL_UART_ErrorCallback+0xea>
      return;
 8004adc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b002      	add	sp, #8
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	200004ac 	.word	0x200004ac
 8004ae8:	08027d78 	.word	0x08027d78
 8004aec:	08027bf4 	.word	0x08027bf4
 8004af0:	0802aed4 	.word	0x0802aed4
 8004af4:	08027da8 	.word	0x08027da8
 8004af8:	08027c18 	.word	0x08027c18
 8004afc:	08027ddc 	.word	0x08027ddc
 8004b00:	08027e08 	.word	0x08027e08
 8004b04:	08027e3c 	.word	0x08027e3c
 8004b08:	08027e68 	.word	0x08027e68
 8004b0c:	08027e90 	.word	0x08027e90
 8004b10:	08027ec0 	.word	0x08027ec0
 8004b14:	08027ef8 	.word	0x08027ef8
 8004b18:	08027f30 	.word	0x08027f30
 8004b1c:	08027f58 	.word	0x08027f58
 8004b20:	08027f80 	.word	0x08027f80
 8004b24:	08027fac 	.word	0x08027fac

08004b28 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e010      	b.n	8004b5a <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	001a      	movs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	1898      	adds	r0, r3, r2
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	18d3      	adds	r3, r2, r3
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	001a      	movs	r2, r3
 8004b4c:	4b07      	ldr	r3, [pc, #28]	@ (8004b6c <uint8ArrayToString+0x44>)
 8004b4e:	0019      	movs	r1, r3
 8004b50:	f01e fe7a 	bl	8023848 <siprintf>
  for (int i = 0; i < 12; i++) {
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b0b      	cmp	r3, #11
 8004b5e:	ddeb      	ble.n	8004b38 <uint8ArrayToString+0x10>
  }
}
 8004b60:	46c0      	nop			@ (mov r8, r8)
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b004      	add	sp, #16
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	08027fd0 	.word	0x08027fd0

08004b70 <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8004b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b72:	b089      	sub	sp, #36	@ 0x24
 8004b74:	af04      	add	r7, sp, #16
 8004b76:	6039      	str	r1, [r7, #0]
 8004b78:	0011      	movs	r1, r2
 8004b7a:	1dfb      	adds	r3, r7, #7
 8004b7c:	1c02      	adds	r2, r0, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	1dbb      	adds	r3, r7, #6
 8004b82:	1c0a      	adds	r2, r1, #0
 8004b84:	701a      	strb	r2, [r3, #0]
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
#ifdef LONGDATAGRAM
  static char Buffer[25];
#endif
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8004b86:	4b23      	ldr	r3, [pc, #140]	@ (8004c14 <CreateMessage+0xa4>)
 8004b88:	4823      	ldr	r0, [pc, #140]	@ (8004c18 <CreateMessage+0xa8>)
 8004b8a:	220c      	movs	r2, #12
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	f005 faed 	bl	800a16c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8004b92:	4b22      	ldr	r3, [pc, #136]	@ (8004c1c <CreateMessage+0xac>)
 8004b94:	4822      	ldr	r0, [pc, #136]	@ (8004c20 <CreateMessage+0xb0>)
 8004b96:	220c      	movs	r2, #12
 8004b98:	0019      	movs	r1, r3
 8004b9a:	f005 fae7 	bl	800a16c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8004b9e:	4b21      	ldr	r3, [pc, #132]	@ (8004c24 <CreateMessage+0xb4>)
 8004ba0:	4821      	ldr	r0, [pc, #132]	@ (8004c28 <CreateMessage+0xb8>)
 8004ba2:	220c      	movs	r2, #12
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	f005 fae1 	bl	800a16c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8004baa:	4b20      	ldr	r3, [pc, #128]	@ (8004c2c <CreateMessage+0xbc>)
 8004bac:	4820      	ldr	r0, [pc, #128]	@ (8004c30 <CreateMessage+0xc0>)
 8004bae:	220c      	movs	r2, #12
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	f005 fadb 	bl	800a16c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8004bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c34 <CreateMessage+0xc4>)
 8004bb8:	481f      	ldr	r0, [pc, #124]	@ (8004c38 <CreateMessage+0xc8>)
 8004bba:	220c      	movs	r2, #12
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	f005 fad5 	bl	800a16c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8004bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c3c <CreateMessage+0xcc>)
 8004bc4:	481e      	ldr	r0, [pc, #120]	@ (8004c40 <CreateMessage+0xd0>)
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	0019      	movs	r1, r3
 8004bca:	f005 facf 	bl	800a16c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8004bce:	4b1d      	ldr	r3, [pc, #116]	@ (8004c44 <CreateMessage+0xd4>)
 8004bd0:	481d      	ldr	r0, [pc, #116]	@ (8004c48 <CreateMessage+0xd8>)
 8004bd2:	220c      	movs	r2, #12
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	f005 fac9 	bl	800a16c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8004bda:	4b1c      	ldr	r3, [pc, #112]	@ (8004c4c <CreateMessage+0xdc>)
 8004bdc:	481c      	ldr	r0, [pc, #112]	@ (8004c50 <CreateMessage+0xe0>)
 8004bde:	220c      	movs	r2, #12
 8004be0:	0019      	movs	r1, r3
 8004be2:	f005 fac3 	bl	800a16c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8004be6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <CreateMessage+0xe4>)
 8004be8:	481b      	ldr	r0, [pc, #108]	@ (8004c58 <CreateMessage+0xe8>)
 8004bea:	220c      	movs	r2, #12
 8004bec:	0019      	movs	r1, r3
 8004bee:	f005 fabd 	bl	800a16c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8004bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c5c <CreateMessage+0xec>)
 8004bf4:	481a      	ldr	r0, [pc, #104]	@ (8004c60 <CreateMessage+0xf0>)
 8004bf6:	220c      	movs	r2, #12
 8004bf8:	0019      	movs	r1, r3
 8004bfa:	f005 fab7 	bl	800a16c <ReadUint8ArrayEEprom>
  if(checkName()){
 8004bfe:	f7ff fc87 	bl	8004510 <checkName>
 8004c02:	1e03      	subs	r3, r0, #0
 8004c04:	d032      	beq.n	8004c6c <CreateMessage+0xfc>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004c06:	4b17      	ldr	r3, [pc, #92]	@ (8004c64 <CreateMessage+0xf4>)
 8004c08:	4817      	ldr	r0, [pc, #92]	@ (8004c68 <CreateMessage+0xf8>)
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	f005 faad 	bl	800a16c <ReadUint8ArrayEEprom>
 8004c12:	e031      	b.n	8004c78 <CreateMessage+0x108>
 8004c14:	20000708 	.word	0x20000708
 8004c18:	0808000c 	.word	0x0808000c
 8004c1c:	20000714 	.word	0x20000714
 8004c20:	08080018 	.word	0x08080018
 8004c24:	20000720 	.word	0x20000720
 8004c28:	08080048 	.word	0x08080048
 8004c2c:	2000072c 	.word	0x2000072c
 8004c30:	08080030 	.word	0x08080030
 8004c34:	20000738 	.word	0x20000738
 8004c38:	0808003c 	.word	0x0808003c
 8004c3c:	20000744 	.word	0x20000744
 8004c40:	0808006c 	.word	0x0808006c
 8004c44:	20000750 	.word	0x20000750
 8004c48:	08080078 	.word	0x08080078
 8004c4c:	2000075c 	.word	0x2000075c
 8004c50:	08080024 	.word	0x08080024
 8004c54:	20000768 	.word	0x20000768
 8004c58:	08080054 	.word	0x08080054
 8004c5c:	20000774 	.word	0x20000774
 8004c60:	08080060 	.word	0x08080060
 8004c64:	20000780 	.word	0x20000780
 8004c68:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8004c6c:	4bed      	ldr	r3, [pc, #948]	@ (8005024 <CreateMessage+0x4b4>)
 8004c6e:	4aee      	ldr	r2, [pc, #952]	@ (8005028 <CreateMessage+0x4b8>)
 8004c70:	6811      	ldr	r1, [r2, #0]
 8004c72:	6019      	str	r1, [r3, #0]
 8004c74:	7912      	ldrb	r2, [r2, #4]
 8004c76:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8004c78:	f7ff fbf0 	bl	800445c <setCharges>
  uint16_t index = 0;
 8004c7c:	260e      	movs	r6, #14
 8004c7e:	19bb      	adds	r3, r7, r6
 8004c80:	2200      	movs	r2, #0
 8004c82:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8004c84:	19bb      	adds	r3, r7, r6
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	4be8      	ldr	r3, [pc, #928]	@ (800502c <CreateMessage+0x4bc>)
 8004c8a:	18d3      	adds	r3, r2, r3
 8004c8c:	4ae8      	ldr	r2, [pc, #928]	@ (8005030 <CreateMessage+0x4c0>)
 8004c8e:	0011      	movs	r1, r2
 8004c90:	0018      	movs	r0, r3
 8004c92:	f01e fdd9 	bl	8023848 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  uint8ArrayToString(Buffer, tempConfig);
 8004c96:	4ae7      	ldr	r2, [pc, #924]	@ (8005034 <CreateMessage+0x4c4>)
 8004c98:	4be7      	ldr	r3, [pc, #924]	@ (8005038 <CreateMessage+0x4c8>)
 8004c9a:	0011      	movs	r1, r2
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f7ff ff43 	bl	8004b28 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8004ca2:	4be6      	ldr	r3, [pc, #920]	@ (800503c <CreateMessage+0x4cc>)
 8004ca4:	689c      	ldr	r4, [r3, #8]
 8004ca6:	4be6      	ldr	r3, [pc, #920]	@ (8005040 <CreateMessage+0x4d0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	1c18      	adds	r0, r3, #0
 8004cac:	f7fe fbda 	bl	8003464 <__aeabi_f2d>
 8004cb0:	0002      	movs	r2, r0
 8004cb2:	000b      	movs	r3, r1
 8004cb4:	4ddb      	ldr	r5, [pc, #876]	@ (8005024 <CreateMessage+0x4b4>)
 8004cb6:	49e3      	ldr	r1, [pc, #908]	@ (8005044 <CreateMessage+0x4d4>)
 8004cb8:	48e3      	ldr	r0, [pc, #908]	@ (8005048 <CreateMessage+0x4d8>)
 8004cba:	9202      	str	r2, [sp, #8]
 8004cbc:	9303      	str	r3, [sp, #12]
 8004cbe:	4bde      	ldr	r3, [pc, #888]	@ (8005038 <CreateMessage+0x4c8>)
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	002b      	movs	r3, r5
 8004cc4:	0022      	movs	r2, r4
 8004cc6:	f01e fdbf 	bl	8023848 <siprintf>
#endif
index = strlen(message);
 8004cca:	4bd8      	ldr	r3, [pc, #864]	@ (800502c <CreateMessage+0x4bc>)
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f7fb fa4d 	bl	800016c <strlen>
 8004cd2:	0002      	movs	r2, r0
 8004cd4:	19bb      	adds	r3, r7, r6
 8004cd6:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d019      	beq.n	8004d14 <CreateMessage+0x1a4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004ce0:	4bd2      	ldr	r3, [pc, #840]	@ (800502c <CreateMessage+0x4bc>)
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f7fb fa42 	bl	800016c <strlen>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	4bcf      	ldr	r3, [pc, #828]	@ (800502c <CreateMessage+0x4bc>)
 8004cee:	0011      	movs	r1, r2
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7ff fd87 	bl	8004804 <ESP_Send>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	001a      	movs	r2, r3
 8004cfa:	4bd4      	ldr	r3, [pc, #848]	@ (800504c <CreateMessage+0x4dc>)
 8004cfc:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004cfe:	4bd4      	ldr	r3, [pc, #848]	@ (8005050 <CreateMessage+0x4e0>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	001a      	movs	r2, r3
 8004d04:	4bd1      	ldr	r3, [pc, #836]	@ (800504c <CreateMessage+0x4dc>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	1e5a      	subs	r2, r3, #1
 8004d0c:	4193      	sbcs	r3, r2
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	4bcf      	ldr	r3, [pc, #828]	@ (8005050 <CreateMessage+0x4e0>)
 8004d12:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8004d14:	4acf      	ldr	r2, [pc, #828]	@ (8005054 <CreateMessage+0x4e4>)
 8004d16:	4bc8      	ldr	r3, [pc, #800]	@ (8005038 <CreateMessage+0x4c8>)
 8004d18:	0011      	movs	r1, r2
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f7ff ff04 	bl	8004b28 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8004d20:	4bc6      	ldr	r3, [pc, #792]	@ (800503c <CreateMessage+0x4cc>)
 8004d22:	689c      	ldr	r4, [r3, #8]
 8004d24:	4bc6      	ldr	r3, [pc, #792]	@ (8005040 <CreateMessage+0x4d0>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	1c18      	adds	r0, r3, #0
 8004d2a:	f7fe fb9b 	bl	8003464 <__aeabi_f2d>
 8004d2e:	0002      	movs	r2, r0
 8004d30:	000b      	movs	r3, r1
 8004d32:	4dbc      	ldr	r5, [pc, #752]	@ (8005024 <CreateMessage+0x4b4>)
 8004d34:	49c8      	ldr	r1, [pc, #800]	@ (8005058 <CreateMessage+0x4e8>)
 8004d36:	48bd      	ldr	r0, [pc, #756]	@ (800502c <CreateMessage+0x4bc>)
 8004d38:	9202      	str	r2, [sp, #8]
 8004d3a:	9303      	str	r3, [sp, #12]
 8004d3c:	4bbe      	ldr	r3, [pc, #760]	@ (8005038 <CreateMessage+0x4c8>)
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	002b      	movs	r3, r5
 8004d42:	0022      	movs	r2, r4
 8004d44:	f01e fd80 	bl	8023848 <siprintf>
#endif
  index += strlen(message);
 8004d48:	4bb8      	ldr	r3, [pc, #736]	@ (800502c <CreateMessage+0x4bc>)
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f7fb fa0e 	bl	800016c <strlen>
 8004d50:	0003      	movs	r3, r0
 8004d52:	b299      	uxth	r1, r3
 8004d54:	220e      	movs	r2, #14
 8004d56:	18bb      	adds	r3, r7, r2
 8004d58:	18ba      	adds	r2, r7, r2
 8004d5a:	8812      	ldrh	r2, [r2, #0]
 8004d5c:	188a      	adds	r2, r1, r2
 8004d5e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004d60:	1dbb      	adds	r3, r7, #6
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d019      	beq.n	8004d9c <CreateMessage+0x22c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004d68:	4bb0      	ldr	r3, [pc, #704]	@ (800502c <CreateMessage+0x4bc>)
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f7fb f9fe 	bl	800016c <strlen>
 8004d70:	0003      	movs	r3, r0
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	4bad      	ldr	r3, [pc, #692]	@ (800502c <CreateMessage+0x4bc>)
 8004d76:	0011      	movs	r1, r2
 8004d78:	0018      	movs	r0, r3
 8004d7a:	f7ff fd43 	bl	8004804 <ESP_Send>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	001a      	movs	r2, r3
 8004d82:	4bb2      	ldr	r3, [pc, #712]	@ (800504c <CreateMessage+0x4dc>)
 8004d84:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004d86:	4bb2      	ldr	r3, [pc, #712]	@ (8005050 <CreateMessage+0x4e0>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	4baf      	ldr	r3, [pc, #700]	@ (800504c <CreateMessage+0x4dc>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	4013      	ands	r3, r2
 8004d92:	1e5a      	subs	r2, r3, #1
 8004d94:	4193      	sbcs	r3, r2
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	4bad      	ldr	r3, [pc, #692]	@ (8005050 <CreateMessage+0x4e0>)
 8004d9a:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8004d9c:	4aaf      	ldr	r2, [pc, #700]	@ (800505c <CreateMessage+0x4ec>)
 8004d9e:	4ba6      	ldr	r3, [pc, #664]	@ (8005038 <CreateMessage+0x4c8>)
 8004da0:	0011      	movs	r1, r2
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7ff fec0 	bl	8004b28 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndexmax);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8004da8:	4ba4      	ldr	r3, [pc, #656]	@ (800503c <CreateMessage+0x4cc>)
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	4ba4      	ldr	r3, [pc, #656]	@ (8005040 <CreateMessage+0x4d0>)
 8004dae:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004db0:	4c9c      	ldr	r4, [pc, #624]	@ (8005024 <CreateMessage+0x4b4>)
 8004db2:	49ab      	ldr	r1, [pc, #684]	@ (8005060 <CreateMessage+0x4f0>)
 8004db4:	489d      	ldr	r0, [pc, #628]	@ (800502c <CreateMessage+0x4bc>)
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	4b9f      	ldr	r3, [pc, #636]	@ (8005038 <CreateMessage+0x4c8>)
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	0023      	movs	r3, r4
 8004dbe:	f01e fd43 	bl	8023848 <siprintf>
#endif
  index += strlen(message);
 8004dc2:	4b9a      	ldr	r3, [pc, #616]	@ (800502c <CreateMessage+0x4bc>)
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f7fb f9d1 	bl	800016c <strlen>
 8004dca:	0003      	movs	r3, r0
 8004dcc:	b299      	uxth	r1, r3
 8004dce:	220e      	movs	r2, #14
 8004dd0:	18bb      	adds	r3, r7, r2
 8004dd2:	18ba      	adds	r2, r7, r2
 8004dd4:	8812      	ldrh	r2, [r2, #0]
 8004dd6:	188a      	adds	r2, r1, r2
 8004dd8:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004dda:	1dbb      	adds	r3, r7, #6
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d019      	beq.n	8004e16 <CreateMessage+0x2a6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004de2:	4b92      	ldr	r3, [pc, #584]	@ (800502c <CreateMessage+0x4bc>)
 8004de4:	0018      	movs	r0, r3
 8004de6:	f7fb f9c1 	bl	800016c <strlen>
 8004dea:	0003      	movs	r3, r0
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	4b8f      	ldr	r3, [pc, #572]	@ (800502c <CreateMessage+0x4bc>)
 8004df0:	0011      	movs	r1, r2
 8004df2:	0018      	movs	r0, r3
 8004df4:	f7ff fd06 	bl	8004804 <ESP_Send>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	001a      	movs	r2, r3
 8004dfc:	4b93      	ldr	r3, [pc, #588]	@ (800504c <CreateMessage+0x4dc>)
 8004dfe:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004e00:	4b93      	ldr	r3, [pc, #588]	@ (8005050 <CreateMessage+0x4e0>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	001a      	movs	r2, r3
 8004e06:	4b91      	ldr	r3, [pc, #580]	@ (800504c <CreateMessage+0x4dc>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	1e5a      	subs	r2, r3, #1
 8004e0e:	4193      	sbcs	r3, r2
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	4b8f      	ldr	r3, [pc, #572]	@ (8005050 <CreateMessage+0x4e0>)
 8004e14:	701a      	strb	r2, [r3, #0]
  }

  if (IsBMP280SensorPresent()) {
 8004e16:	f006 faaf 	bl	800b378 <IsBMP280SensorPresent>
 8004e1a:	1e03      	subs	r3, r0, #0
 8004e1c:	d043      	beq.n	8004ea6 <CreateMessage+0x336>
    uint8ArrayToString(Buffer, hPaConfig);
 8004e1e:	4a91      	ldr	r2, [pc, #580]	@ (8005064 <CreateMessage+0x4f4>)
 8004e20:	4b85      	ldr	r3, [pc, #532]	@ (8005038 <CreateMessage+0x4c8>)
 8004e22:	0011      	movs	r1, r2
 8004e24:	0018      	movs	r0, r3
 8004e26:	f7ff fe7f 	bl	8004b28 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.hPaValuemax);
#else
    sprintf(&message[0], ",{\"name\":\"hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.hPaValuemax);
 8004e2a:	4b84      	ldr	r3, [pc, #528]	@ (800503c <CreateMessage+0x4cc>)
 8004e2c:	689c      	ldr	r4, [r3, #8]
 8004e2e:	4b84      	ldr	r3, [pc, #528]	@ (8005040 <CreateMessage+0x4d0>)
 8004e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e32:	1c18      	adds	r0, r3, #0
 8004e34:	f7fe fb16 	bl	8003464 <__aeabi_f2d>
 8004e38:	0002      	movs	r2, r0
 8004e3a:	000b      	movs	r3, r1
 8004e3c:	4d79      	ldr	r5, [pc, #484]	@ (8005024 <CreateMessage+0x4b4>)
 8004e3e:	498a      	ldr	r1, [pc, #552]	@ (8005068 <CreateMessage+0x4f8>)
 8004e40:	487a      	ldr	r0, [pc, #488]	@ (800502c <CreateMessage+0x4bc>)
 8004e42:	9202      	str	r2, [sp, #8]
 8004e44:	9303      	str	r3, [sp, #12]
 8004e46:	4b7c      	ldr	r3, [pc, #496]	@ (8005038 <CreateMessage+0x4c8>)
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	002b      	movs	r3, r5
 8004e4c:	0022      	movs	r2, r4
 8004e4e:	f01e fcfb 	bl	8023848 <siprintf>
#endif
    index += strlen(message);
 8004e52:	4b76      	ldr	r3, [pc, #472]	@ (800502c <CreateMessage+0x4bc>)
 8004e54:	0018      	movs	r0, r3
 8004e56:	f7fb f989 	bl	800016c <strlen>
 8004e5a:	0003      	movs	r3, r0
 8004e5c:	b299      	uxth	r1, r3
 8004e5e:	220e      	movs	r2, #14
 8004e60:	18bb      	adds	r3, r7, r2
 8004e62:	18ba      	adds	r2, r7, r2
 8004e64:	8812      	ldrh	r2, [r2, #0]
 8004e66:	188a      	adds	r2, r1, r2
 8004e68:	801a      	strh	r2, [r3, #0]
    if (send) {
 8004e6a:	1dbb      	adds	r3, r7, #6
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d019      	beq.n	8004ea6 <CreateMessage+0x336>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8004e72:	4b6e      	ldr	r3, [pc, #440]	@ (800502c <CreateMessage+0x4bc>)
 8004e74:	0018      	movs	r0, r3
 8004e76:	f7fb f979 	bl	800016c <strlen>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	4b6b      	ldr	r3, [pc, #428]	@ (800502c <CreateMessage+0x4bc>)
 8004e80:	0011      	movs	r1, r2
 8004e82:	0018      	movs	r0, r3
 8004e84:	f7ff fcbe 	bl	8004804 <ESP_Send>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	001a      	movs	r2, r3
 8004e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800504c <CreateMessage+0x4dc>)
 8004e8e:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8004e90:	4b6f      	ldr	r3, [pc, #444]	@ (8005050 <CreateMessage+0x4e0>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	001a      	movs	r2, r3
 8004e96:	4b6d      	ldr	r3, [pc, #436]	@ (800504c <CreateMessage+0x4dc>)
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	1e5a      	subs	r2, r3, #1
 8004e9e:	4193      	sbcs	r3, r2
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	4b6b      	ldr	r3, [pc, #428]	@ (8005050 <CreateMessage+0x4e0>)
 8004ea4:	701a      	strb	r2, [r3, #0]
    }
  }

  uint8ArrayToString(Buffer, soundConfig);
 8004ea6:	4a71      	ldr	r2, [pc, #452]	@ (800506c <CreateMessage+0x4fc>)
 8004ea8:	4b63      	ldr	r3, [pc, #396]	@ (8005038 <CreateMessage+0x4c8>)
 8004eaa:	0011      	movs	r1, r2
 8004eac:	0018      	movs	r0, r3
 8004eae:	f7ff fe3b 	bl	8004b28 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8004eb2:	4b62      	ldr	r3, [pc, #392]	@ (800503c <CreateMessage+0x4cc>)
 8004eb4:	689c      	ldr	r4, [r3, #8]
 8004eb6:	4b62      	ldr	r3, [pc, #392]	@ (8005040 <CreateMessage+0x4d0>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	1c18      	adds	r0, r3, #0
 8004ebc:	f7fe fad2 	bl	8003464 <__aeabi_f2d>
 8004ec0:	0002      	movs	r2, r0
 8004ec2:	000b      	movs	r3, r1
 8004ec4:	4d57      	ldr	r5, [pc, #348]	@ (8005024 <CreateMessage+0x4b4>)
 8004ec6:	496a      	ldr	r1, [pc, #424]	@ (8005070 <CreateMessage+0x500>)
 8004ec8:	4858      	ldr	r0, [pc, #352]	@ (800502c <CreateMessage+0x4bc>)
 8004eca:	9202      	str	r2, [sp, #8]
 8004ecc:	9303      	str	r3, [sp, #12]
 8004ece:	4b5a      	ldr	r3, [pc, #360]	@ (8005038 <CreateMessage+0x4c8>)
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	002b      	movs	r3, r5
 8004ed4:	0022      	movs	r2, r4
 8004ed6:	f01e fcb7 	bl	8023848 <siprintf>
#endif
  index += strlen(message);
 8004eda:	4b54      	ldr	r3, [pc, #336]	@ (800502c <CreateMessage+0x4bc>)
 8004edc:	0018      	movs	r0, r3
 8004ede:	f7fb f945 	bl	800016c <strlen>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	b299      	uxth	r1, r3
 8004ee6:	220e      	movs	r2, #14
 8004ee8:	18bb      	adds	r3, r7, r2
 8004eea:	18ba      	adds	r2, r7, r2
 8004eec:	8812      	ldrh	r2, [r2, #0]
 8004eee:	188a      	adds	r2, r1, r2
 8004ef0:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004ef2:	1dbb      	adds	r3, r7, #6
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d019      	beq.n	8004f2e <CreateMessage+0x3be>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004efa:	4b4c      	ldr	r3, [pc, #304]	@ (800502c <CreateMessage+0x4bc>)
 8004efc:	0018      	movs	r0, r3
 8004efe:	f7fb f935 	bl	800016c <strlen>
 8004f02:	0003      	movs	r3, r0
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	4b49      	ldr	r3, [pc, #292]	@ (800502c <CreateMessage+0x4bc>)
 8004f08:	0011      	movs	r1, r2
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	f7ff fc7a 	bl	8004804 <ESP_Send>
 8004f10:	0003      	movs	r3, r0
 8004f12:	001a      	movs	r2, r3
 8004f14:	4b4d      	ldr	r3, [pc, #308]	@ (800504c <CreateMessage+0x4dc>)
 8004f16:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004f18:	4b4d      	ldr	r3, [pc, #308]	@ (8005050 <CreateMessage+0x4e0>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	001a      	movs	r2, r3
 8004f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800504c <CreateMessage+0x4dc>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	4013      	ands	r3, r2
 8004f24:	1e5a      	subs	r2, r3, #1
 8004f26:	4193      	sbcs	r3, r2
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	4b49      	ldr	r3, [pc, #292]	@ (8005050 <CreateMessage+0x4e0>)
 8004f2c:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 8004f2e:	1dfb      	adds	r3, r7, #7
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2201      	movs	r2, #1
 8004f34:	4053      	eors	r3, r2
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d100      	bne.n	8004f3e <CreateMessage+0x3ce>
 8004f3c:	e14b      	b.n	80051d6 <CreateMessage+0x666>
    uint8ArrayToString(Buffer, solarConfig);
 8004f3e:	4a4d      	ldr	r2, [pc, #308]	@ (8005074 <CreateMessage+0x504>)
 8004f40:	4b3d      	ldr	r3, [pc, #244]	@ (8005038 <CreateMessage+0x4c8>)
 8004f42:	0011      	movs	r1, r2
 8004f44:	0018      	movs	r0, r3
 8004f46:	f7ff fdef 	bl	8004b28 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8004f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800503c <CreateMessage+0x4cc>)
 8004f4c:	689c      	ldr	r4, [r3, #8]
 8004f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8005078 <CreateMessage+0x508>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	1c18      	adds	r0, r3, #0
 8004f54:	f7fe fa86 	bl	8003464 <__aeabi_f2d>
 8004f58:	0002      	movs	r2, r0
 8004f5a:	000b      	movs	r3, r1
 8004f5c:	4d31      	ldr	r5, [pc, #196]	@ (8005024 <CreateMessage+0x4b4>)
 8004f5e:	4947      	ldr	r1, [pc, #284]	@ (800507c <CreateMessage+0x50c>)
 8004f60:	4832      	ldr	r0, [pc, #200]	@ (800502c <CreateMessage+0x4bc>)
 8004f62:	9202      	str	r2, [sp, #8]
 8004f64:	9303      	str	r3, [sp, #12]
 8004f66:	4b34      	ldr	r3, [pc, #208]	@ (8005038 <CreateMessage+0x4c8>)
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	002b      	movs	r3, r5
 8004f6c:	0022      	movs	r2, r4
 8004f6e:	f01e fc6b 	bl	8023848 <siprintf>
#endif
    index += strlen(message);
 8004f72:	4b2e      	ldr	r3, [pc, #184]	@ (800502c <CreateMessage+0x4bc>)
 8004f74:	0018      	movs	r0, r3
 8004f76:	f7fb f8f9 	bl	800016c <strlen>
 8004f7a:	0003      	movs	r3, r0
 8004f7c:	b299      	uxth	r1, r3
 8004f7e:	220e      	movs	r2, #14
 8004f80:	18bb      	adds	r3, r7, r2
 8004f82:	18ba      	adds	r2, r7, r2
 8004f84:	8812      	ldrh	r2, [r2, #0]
 8004f86:	188a      	adds	r2, r1, r2
 8004f88:	801a      	strh	r2, [r3, #0]
    if (send) {
 8004f8a:	1dbb      	adds	r3, r7, #6
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d019      	beq.n	8004fc6 <CreateMessage+0x456>
      status = ESP_Send((uint8_t*)message, strlen(message));
 8004f92:	4b26      	ldr	r3, [pc, #152]	@ (800502c <CreateMessage+0x4bc>)
 8004f94:	0018      	movs	r0, r3
 8004f96:	f7fb f8e9 	bl	800016c <strlen>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	4b23      	ldr	r3, [pc, #140]	@ (800502c <CreateMessage+0x4bc>)
 8004fa0:	0011      	movs	r1, r2
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f7ff fc2e 	bl	8004804 <ESP_Send>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	001a      	movs	r2, r3
 8004fac:	4b27      	ldr	r3, [pc, #156]	@ (800504c <CreateMessage+0x4dc>)
 8004fae:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 8004fb0:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <CreateMessage+0x4e0>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	001a      	movs	r2, r3
 8004fb6:	4b25      	ldr	r3, [pc, #148]	@ (800504c <CreateMessage+0x4dc>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	1e5a      	subs	r2, r3, #1
 8004fbe:	4193      	sbcs	r3, r2
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	4b23      	ldr	r3, [pc, #140]	@ (8005050 <CreateMessage+0x4e0>)
 8004fc4:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8005080 <CreateMessage+0x510>)
 8004fc8:	791b      	ldrb	r3, [r3, #4]
 8004fca:	2b35      	cmp	r3, #53	@ 0x35
 8004fcc:	d000      	beq.n	8004fd0 <CreateMessage+0x460>
 8004fce:	e075      	b.n	80050bc <CreateMessage+0x54c>
 8004fd0:	f002 ff44 	bl	8007e5c <Check_USB_PowerOn>
 8004fd4:	1e03      	subs	r3, r0, #0
 8004fd6:	d071      	beq.n	80050bc <CreateMessage+0x54c>
      uint8ArrayToString(Buffer, noxConfig);
 8004fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8005084 <CreateMessage+0x514>)
 8004fda:	4b17      	ldr	r3, [pc, #92]	@ (8005038 <CreateMessage+0x4c8>)
 8004fdc:	0011      	movs	r1, r2
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7ff fda2 	bl	8004b28 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 8004fe4:	4b15      	ldr	r3, [pc, #84]	@ (800503c <CreateMessage+0x4cc>)
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	4b15      	ldr	r3, [pc, #84]	@ (8005040 <CreateMessage+0x4d0>)
 8004fea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fec:	4c0d      	ldr	r4, [pc, #52]	@ (8005024 <CreateMessage+0x4b4>)
 8004fee:	4926      	ldr	r1, [pc, #152]	@ (8005088 <CreateMessage+0x518>)
 8004ff0:	480e      	ldr	r0, [pc, #56]	@ (800502c <CreateMessage+0x4bc>)
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	4b10      	ldr	r3, [pc, #64]	@ (8005038 <CreateMessage+0x4c8>)
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	0023      	movs	r3, r4
 8004ffa:	f01e fc25 	bl	8023848 <siprintf>
#endif
      index += strlen(message);
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <CreateMessage+0x4bc>)
 8005000:	0018      	movs	r0, r3
 8005002:	f7fb f8b3 	bl	800016c <strlen>
 8005006:	0003      	movs	r3, r0
 8005008:	b299      	uxth	r1, r3
 800500a:	220e      	movs	r2, #14
 800500c:	18bb      	adds	r3, r7, r2
 800500e:	18ba      	adds	r2, r7, r2
 8005010:	8812      	ldrh	r2, [r2, #0]
 8005012:	188a      	adds	r2, r1, r2
 8005014:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005016:	1dbb      	adds	r3, r7, #6
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d04e      	beq.n	80050bc <CreateMessage+0x54c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800501e:	4b03      	ldr	r3, [pc, #12]	@ (800502c <CreateMessage+0x4bc>)
 8005020:	0018      	movs	r0, r3
 8005022:	e033      	b.n	800508c <CreateMessage+0x51c>
 8005024:	20000780 	.word	0x20000780
 8005028:	0802ae68 	.word	0x0802ae68
 800502c:	200005e0 	.word	0x200005e0
 8005030:	08027fd8 	.word	0x08027fd8
 8005034:	20000708 	.word	0x20000708
 8005038:	200007a0 	.word	0x200007a0
 800503c:	200005c0 	.word	0x200005c0
 8005040:	20000690 	.word	0x20000690
 8005044:	08027fdc 	.word	0x08027fdc
 8005048:	200005e1 	.word	0x200005e1
 800504c:	200007b9 	.word	0x200007b9
 8005050:	2000002d 	.word	0x2000002d
 8005054:	20000714 	.word	0x20000714
 8005058:	08028030 	.word	0x08028030
 800505c:	2000072c 	.word	0x2000072c
 8005060:	08028088 	.word	0x08028088
 8005064:	20000738 	.word	0x20000738
 8005068:	080280dc 	.word	0x080280dc
 800506c:	20000720 	.word	0x20000720
 8005070:	08028134 	.word	0x08028134
 8005074:	20000750 	.word	0x20000750
 8005078:	200005dc 	.word	0x200005dc
 800507c:	08028190 	.word	0x08028190
 8005080:	20000ea0 	.word	0x20000ea0
 8005084:	2000075c 	.word	0x2000075c
 8005088:	080281f0 	.word	0x080281f0
 800508c:	f7fb f86e 	bl	800016c <strlen>
 8005090:	0003      	movs	r3, r0
 8005092:	b29a      	uxth	r2, r3
 8005094:	4b7d      	ldr	r3, [pc, #500]	@ (800528c <CreateMessage+0x71c>)
 8005096:	0011      	movs	r1, r2
 8005098:	0018      	movs	r0, r3
 800509a:	f7ff fbb3 	bl	8004804 <ESP_Send>
 800509e:	0003      	movs	r3, r0
 80050a0:	001a      	movs	r2, r3
 80050a2:	4b7b      	ldr	r3, [pc, #492]	@ (8005290 <CreateMessage+0x720>)
 80050a4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80050a6:	4b7b      	ldr	r3, [pc, #492]	@ (8005294 <CreateMessage+0x724>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	001a      	movs	r2, r3
 80050ac:	4b78      	ldr	r3, [pc, #480]	@ (8005290 <CreateMessage+0x720>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	4013      	ands	r3, r2
 80050b2:	1e5a      	subs	r2, r3, #1
 80050b4:	4193      	sbcs	r3, r2
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	4b76      	ldr	r3, [pc, #472]	@ (8005294 <CreateMessage+0x724>)
 80050ba:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 80050bc:	f007 f8ee 	bl	800c29c <sen5x_Get_sen5x_enable_state>
 80050c0:	1e03      	subs	r3, r0, #0
 80050c2:	d100      	bne.n	80050c6 <CreateMessage+0x556>
 80050c4:	e087      	b.n	80051d6 <CreateMessage+0x666>
      uint8ArrayToString(Buffer, PM2Config);
 80050c6:	4a74      	ldr	r2, [pc, #464]	@ (8005298 <CreateMessage+0x728>)
 80050c8:	4b74      	ldr	r3, [pc, #464]	@ (800529c <CreateMessage+0x72c>)
 80050ca:	0011      	movs	r1, r2
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7ff fd2b 	bl	8004b28 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 80050d2:	4b73      	ldr	r3, [pc, #460]	@ (80052a0 <CreateMessage+0x730>)
 80050d4:	689c      	ldr	r4, [r3, #8]
 80050d6:	4b73      	ldr	r3, [pc, #460]	@ (80052a4 <CreateMessage+0x734>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	1c18      	adds	r0, r3, #0
 80050dc:	f7fe f9c2 	bl	8003464 <__aeabi_f2d>
 80050e0:	0002      	movs	r2, r0
 80050e2:	000b      	movs	r3, r1
 80050e4:	4d70      	ldr	r5, [pc, #448]	@ (80052a8 <CreateMessage+0x738>)
 80050e6:	4971      	ldr	r1, [pc, #452]	@ (80052ac <CreateMessage+0x73c>)
 80050e8:	4868      	ldr	r0, [pc, #416]	@ (800528c <CreateMessage+0x71c>)
 80050ea:	9202      	str	r2, [sp, #8]
 80050ec:	9303      	str	r3, [sp, #12]
 80050ee:	4b6b      	ldr	r3, [pc, #428]	@ (800529c <CreateMessage+0x72c>)
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	002b      	movs	r3, r5
 80050f4:	0022      	movs	r2, r4
 80050f6:	f01e fba7 	bl	8023848 <siprintf>
#endif
      index += strlen(message);
 80050fa:	4b64      	ldr	r3, [pc, #400]	@ (800528c <CreateMessage+0x71c>)
 80050fc:	0018      	movs	r0, r3
 80050fe:	f7fb f835 	bl	800016c <strlen>
 8005102:	0003      	movs	r3, r0
 8005104:	b299      	uxth	r1, r3
 8005106:	220e      	movs	r2, #14
 8005108:	18bb      	adds	r3, r7, r2
 800510a:	18ba      	adds	r2, r7, r2
 800510c:	8812      	ldrh	r2, [r2, #0]
 800510e:	188a      	adds	r2, r1, r2
 8005110:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005112:	1dbb      	adds	r3, r7, #6
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d019      	beq.n	800514e <CreateMessage+0x5de>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800511a:	4b5c      	ldr	r3, [pc, #368]	@ (800528c <CreateMessage+0x71c>)
 800511c:	0018      	movs	r0, r3
 800511e:	f7fb f825 	bl	800016c <strlen>
 8005122:	0003      	movs	r3, r0
 8005124:	b29a      	uxth	r2, r3
 8005126:	4b59      	ldr	r3, [pc, #356]	@ (800528c <CreateMessage+0x71c>)
 8005128:	0011      	movs	r1, r2
 800512a:	0018      	movs	r0, r3
 800512c:	f7ff fb6a 	bl	8004804 <ESP_Send>
 8005130:	0003      	movs	r3, r0
 8005132:	001a      	movs	r2, r3
 8005134:	4b56      	ldr	r3, [pc, #344]	@ (8005290 <CreateMessage+0x720>)
 8005136:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005138:	4b56      	ldr	r3, [pc, #344]	@ (8005294 <CreateMessage+0x724>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	001a      	movs	r2, r3
 800513e:	4b54      	ldr	r3, [pc, #336]	@ (8005290 <CreateMessage+0x720>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	4013      	ands	r3, r2
 8005144:	1e5a      	subs	r2, r3, #1
 8005146:	4193      	sbcs	r3, r2
 8005148:	b2da      	uxtb	r2, r3
 800514a:	4b52      	ldr	r3, [pc, #328]	@ (8005294 <CreateMessage+0x724>)
 800514c:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 800514e:	4a58      	ldr	r2, [pc, #352]	@ (80052b0 <CreateMessage+0x740>)
 8005150:	4b52      	ldr	r3, [pc, #328]	@ (800529c <CreateMessage+0x72c>)
 8005152:	0011      	movs	r1, r2
 8005154:	0018      	movs	r0, r3
 8005156:	f7ff fce7 	bl	8004b28 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 800515a:	4b51      	ldr	r3, [pc, #324]	@ (80052a0 <CreateMessage+0x730>)
 800515c:	689c      	ldr	r4, [r3, #8]
 800515e:	4b51      	ldr	r3, [pc, #324]	@ (80052a4 <CreateMessage+0x734>)
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	1c18      	adds	r0, r3, #0
 8005164:	f7fe f97e 	bl	8003464 <__aeabi_f2d>
 8005168:	0002      	movs	r2, r0
 800516a:	000b      	movs	r3, r1
 800516c:	4d4e      	ldr	r5, [pc, #312]	@ (80052a8 <CreateMessage+0x738>)
 800516e:	4951      	ldr	r1, [pc, #324]	@ (80052b4 <CreateMessage+0x744>)
 8005170:	4846      	ldr	r0, [pc, #280]	@ (800528c <CreateMessage+0x71c>)
 8005172:	9202      	str	r2, [sp, #8]
 8005174:	9303      	str	r3, [sp, #12]
 8005176:	4b49      	ldr	r3, [pc, #292]	@ (800529c <CreateMessage+0x72c>)
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	002b      	movs	r3, r5
 800517c:	0022      	movs	r2, r4
 800517e:	f01e fb63 	bl	8023848 <siprintf>
#endif
      index += strlen(message);
 8005182:	4b42      	ldr	r3, [pc, #264]	@ (800528c <CreateMessage+0x71c>)
 8005184:	0018      	movs	r0, r3
 8005186:	f7fa fff1 	bl	800016c <strlen>
 800518a:	0003      	movs	r3, r0
 800518c:	b299      	uxth	r1, r3
 800518e:	220e      	movs	r2, #14
 8005190:	18bb      	adds	r3, r7, r2
 8005192:	18ba      	adds	r2, r7, r2
 8005194:	8812      	ldrh	r2, [r2, #0]
 8005196:	188a      	adds	r2, r1, r2
 8005198:	801a      	strh	r2, [r3, #0]
      if (send) {
 800519a:	1dbb      	adds	r3, r7, #6
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d019      	beq.n	80051d6 <CreateMessage+0x666>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80051a2:	4b3a      	ldr	r3, [pc, #232]	@ (800528c <CreateMessage+0x71c>)
 80051a4:	0018      	movs	r0, r3
 80051a6:	f7fa ffe1 	bl	800016c <strlen>
 80051aa:	0003      	movs	r3, r0
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	4b37      	ldr	r3, [pc, #220]	@ (800528c <CreateMessage+0x71c>)
 80051b0:	0011      	movs	r1, r2
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7ff fb26 	bl	8004804 <ESP_Send>
 80051b8:	0003      	movs	r3, r0
 80051ba:	001a      	movs	r2, r3
 80051bc:	4b34      	ldr	r3, [pc, #208]	@ (8005290 <CreateMessage+0x720>)
 80051be:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80051c0:	4b34      	ldr	r3, [pc, #208]	@ (8005294 <CreateMessage+0x724>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	001a      	movs	r2, r3
 80051c6:	4b32      	ldr	r3, [pc, #200]	@ (8005290 <CreateMessage+0x720>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	4013      	ands	r3, r2
 80051cc:	1e5a      	subs	r2, r3, #1
 80051ce:	4193      	sbcs	r3, r2
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	4b30      	ldr	r3, [pc, #192]	@ (8005294 <CreateMessage+0x724>)
 80051d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  uint8ArrayToString(Buffer, batteryConfig);
 80051d6:	4a38      	ldr	r2, [pc, #224]	@ (80052b8 <CreateMessage+0x748>)
 80051d8:	4b30      	ldr	r3, [pc, #192]	@ (800529c <CreateMessage+0x72c>)
 80051da:	0011      	movs	r1, r2
 80051dc:	0018      	movs	r0, r3
 80051de:	f7ff fca3 	bl	8004b28 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 80051e2:	4b2f      	ldr	r3, [pc, #188]	@ (80052a0 <CreateMessage+0x730>)
 80051e4:	689c      	ldr	r4, [r3, #8]
 80051e6:	4b35      	ldr	r3, [pc, #212]	@ (80052bc <CreateMessage+0x74c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	1c18      	adds	r0, r3, #0
 80051ec:	f7fe f93a 	bl	8003464 <__aeabi_f2d>
 80051f0:	0002      	movs	r2, r0
 80051f2:	000b      	movs	r3, r1
 80051f4:	4d2c      	ldr	r5, [pc, #176]	@ (80052a8 <CreateMessage+0x738>)
 80051f6:	4932      	ldr	r1, [pc, #200]	@ (80052c0 <CreateMessage+0x750>)
 80051f8:	4824      	ldr	r0, [pc, #144]	@ (800528c <CreateMessage+0x71c>)
 80051fa:	9202      	str	r2, [sp, #8]
 80051fc:	9303      	str	r3, [sp, #12]
 80051fe:	4b27      	ldr	r3, [pc, #156]	@ (800529c <CreateMessage+0x72c>)
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	002b      	movs	r3, r5
 8005204:	0022      	movs	r2, r4
 8005206:	f01e fb1f 	bl	8023848 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 800520a:	4b20      	ldr	r3, [pc, #128]	@ (800528c <CreateMessage+0x71c>)
 800520c:	0018      	movs	r0, r3
 800520e:	f7fa ffad 	bl	800016c <strlen>
 8005212:	0002      	movs	r2, r0
 8005214:	4b1d      	ldr	r3, [pc, #116]	@ (800528c <CreateMessage+0x71c>)
 8005216:	18d3      	adds	r3, r2, r3
 8005218:	4a2a      	ldr	r2, [pc, #168]	@ (80052c4 <CreateMessage+0x754>)
 800521a:	0011      	movs	r1, r2
 800521c:	0018      	movs	r0, r3
 800521e:	f01e fb13 	bl	8023848 <siprintf>
  index += strlen(message);
 8005222:	4b1a      	ldr	r3, [pc, #104]	@ (800528c <CreateMessage+0x71c>)
 8005224:	0018      	movs	r0, r3
 8005226:	f7fa ffa1 	bl	800016c <strlen>
 800522a:	0003      	movs	r3, r0
 800522c:	b299      	uxth	r1, r3
 800522e:	220e      	movs	r2, #14
 8005230:	18bb      	adds	r3, r7, r2
 8005232:	18ba      	adds	r2, r7, r2
 8005234:	8812      	ldrh	r2, [r2, #0]
 8005236:	188a      	adds	r2, r1, r2
 8005238:	801a      	strh	r2, [r3, #0]
  if (send) {
 800523a:	1dbb      	adds	r3, r7, #6
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d019      	beq.n	8005276 <CreateMessage+0x706>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005242:	4b12      	ldr	r3, [pc, #72]	@ (800528c <CreateMessage+0x71c>)
 8005244:	0018      	movs	r0, r3
 8005246:	f7fa ff91 	bl	800016c <strlen>
 800524a:	0003      	movs	r3, r0
 800524c:	b29a      	uxth	r2, r3
 800524e:	4b0f      	ldr	r3, [pc, #60]	@ (800528c <CreateMessage+0x71c>)
 8005250:	0011      	movs	r1, r2
 8005252:	0018      	movs	r0, r3
 8005254:	f7ff fad6 	bl	8004804 <ESP_Send>
 8005258:	0003      	movs	r3, r0
 800525a:	001a      	movs	r2, r3
 800525c:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <CreateMessage+0x720>)
 800525e:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005260:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <CreateMessage+0x724>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	001a      	movs	r2, r3
 8005266:	4b0a      	ldr	r3, [pc, #40]	@ (8005290 <CreateMessage+0x720>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	4013      	ands	r3, r2
 800526c:	1e5a      	subs	r2, r3, #1
 800526e:	4193      	sbcs	r3, r2
 8005270:	b2da      	uxtb	r2, r3
 8005272:	4b08      	ldr	r3, [pc, #32]	@ (8005294 <CreateMessage+0x724>)
 8005274:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8005276:	4b07      	ldr	r3, [pc, #28]	@ (8005294 <CreateMessage+0x724>)
 8005278:	781a      	ldrb	r2, [r3, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	701a      	strb	r2, [r3, #0]
  return index;
 800527e:	230e      	movs	r3, #14
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	881b      	ldrh	r3, [r3, #0]
}
 8005284:	0018      	movs	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	b005      	add	sp, #20
 800528a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800528c:	200005e0 	.word	0x200005e0
 8005290:	200007b9 	.word	0x200007b9
 8005294:	2000002d 	.word	0x2000002d
 8005298:	20000768 	.word	0x20000768
 800529c:	200007a0 	.word	0x200007a0
 80052a0:	200005c0 	.word	0x200005c0
 80052a4:	20000690 	.word	0x20000690
 80052a8:	20000780 	.word	0x20000780
 80052ac:	08028244 	.word	0x08028244
 80052b0:	20000774 	.word	0x20000774
 80052b4:	080282a0 	.word	0x080282a0
 80052b8:	20000744 	.word	0x20000744
 80052bc:	200005d8 	.word	0x200005d8
 80052c0:	080282fc 	.word	0x080282fc
 80052c4:	08028354 	.word	0x08028354

080052c8 <StartProg>:

void StartProg(){
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80052cc:	2064      	movs	r0, #100	@ 0x64
 80052ce:	f00c ff19 	bl	8012104 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052d2:	4b15      	ldr	r3, [pc, #84]	@ (8005328 <StartProg+0x60>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	2101      	movs	r1, #1
 80052d8:	0018      	movs	r0, r3
 80052da:	f00e f99a 	bl	8013612 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80052de:	2064      	movs	r0, #100	@ 0x64
 80052e0:	f00c ff10 	bl	8012104 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80052e4:	4b10      	ldr	r3, [pc, #64]	@ (8005328 <StartProg+0x60>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	2102      	movs	r1, #2
 80052ea:	0018      	movs	r0, r3
 80052ec:	f00e f991 	bl	8013612 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80052f0:	23fa      	movs	r3, #250	@ 0xfa
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	0018      	movs	r0, r3
 80052f6:	f00c ff05 	bl	8012104 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005328 <StartProg+0x60>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	2101      	movs	r1, #1
 8005300:	0018      	movs	r0, r3
 8005302:	f00e f986 	bl	8013612 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8005306:	23fa      	movs	r3, #250	@ 0xfa
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	0018      	movs	r0, r3
 800530c:	f00c fefa 	bl	8012104 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <StartProg+0x60>)
 8005312:	2201      	movs	r2, #1
 8005314:	2102      	movs	r1, #2
 8005316:	0018      	movs	r0, r3
 8005318:	f00e f97b 	bl	8013612 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 800531c:	2028      	movs	r0, #40	@ 0x28
 800531e:	f00c fef1 	bl	8012104 <HAL_Delay>
}
 8005322:	46c0      	nop			@ (mov r8, r8)
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	50001c00 	.word	0x50001c00

0800532c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 800532c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800532e:	b0d9      	sub	sp, #356	@ 0x164
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	0008      	movs	r0, r1
 8005336:	0011      	movs	r1, r2
 8005338:	4ba4      	ldr	r3, [pc, #656]	@ (80055cc <ParseBuffer+0x2a0>)
 800533a:	24b0      	movs	r4, #176	@ 0xb0
 800533c:	0064      	lsls	r4, r4, #1
 800533e:	191b      	adds	r3, r3, r4
 8005340:	19db      	adds	r3, r3, r7
 8005342:	1c02      	adds	r2, r0, #0
 8005344:	801a      	strh	r2, [r3, #0]
 8005346:	4ba2      	ldr	r3, [pc, #648]	@ (80055d0 <ParseBuffer+0x2a4>)
 8005348:	191b      	adds	r3, r3, r4
 800534a:	19db      	adds	r3, r3, r7
 800534c:	1c0a      	adds	r2, r1, #0
 800534e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8005350:	2380      	movs	r3, #128	@ 0x80
 8005352:	005a      	lsls	r2, r3, #1
 8005354:	2348      	movs	r3, #72	@ 0x48
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	2100      	movs	r1, #0
 800535a:	0018      	movs	r0, r3
 800535c:	f01e fbda 	bl	8023b14 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8005360:	2360      	movs	r3, #96	@ 0x60
 8005362:	33ff      	adds	r3, #255	@ 0xff
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	2203      	movs	r2, #3
 8005368:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800536a:	23ae      	movs	r3, #174	@ 0xae
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	2200      	movs	r2, #0
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	e013      	b.n	800539e <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8005376:	20ae      	movs	r0, #174	@ 0xae
 8005378:	0040      	lsls	r0, r0, #1
 800537a:	183b      	adds	r3, r7, r0
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	18d2      	adds	r2, r2, r3
 8005382:	183b      	adds	r3, r7, r0
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	7811      	ldrb	r1, [r2, #0]
 8005388:	4a92      	ldr	r2, [pc, #584]	@ (80055d4 <ParseBuffer+0x2a8>)
 800538a:	24b0      	movs	r4, #176	@ 0xb0
 800538c:	0064      	lsls	r4, r4, #1
 800538e:	1912      	adds	r2, r2, r4
 8005390:	19d2      	adds	r2, r2, r7
 8005392:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8005394:	183b      	adds	r3, r7, r0
 8005396:	881a      	ldrh	r2, [r3, #0]
 8005398:	183b      	adds	r3, r7, r0
 800539a:	3201      	adds	r2, #1
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	23ae      	movs	r3, #174	@ 0xae
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	18fa      	adds	r2, r7, r3
 80053a4:	4b89      	ldr	r3, [pc, #548]	@ (80055cc <ParseBuffer+0x2a0>)
 80053a6:	21b0      	movs	r1, #176	@ 0xb0
 80053a8:	0049      	lsls	r1, r1, #1
 80053aa:	185b      	adds	r3, r3, r1
 80053ac:	19db      	adds	r3, r3, r7
 80053ae:	8812      	ldrh	r2, [r2, #0]
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d3df      	bcc.n	8005376 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80053b6:	4b85      	ldr	r3, [pc, #532]	@ (80055cc <ParseBuffer+0x2a0>)
 80053b8:	185b      	adds	r3, r3, r1
 80053ba:	19db      	adds	r3, r3, r7
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	4a85      	ldr	r2, [pc, #532]	@ (80055d4 <ParseBuffer+0x2a8>)
 80053c0:	1852      	adds	r2, r2, r1
 80053c2:	19d2      	adds	r2, r2, r7
 80053c4:	2100      	movs	r1, #0
 80053c6:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80053c8:	f00c fac0 	bl	801194c <GetVerboseLevel>
 80053cc:	0003      	movs	r3, r0
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d106      	bne.n	80053e0 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 80053d2:	2348      	movs	r3, #72	@ 0x48
 80053d4:	18fa      	adds	r2, r7, r3
 80053d6:	4b80      	ldr	r3, [pc, #512]	@ (80055d8 <ParseBuffer+0x2ac>)
 80053d8:	0011      	movs	r1, r2
 80053da:	0018      	movs	r0, r3
 80053dc:	f01e f9c4 	bl	8023768 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	26ac      	movs	r6, #172	@ 0xac
 80053e4:	0076      	lsls	r6, r6, #1
 80053e6:	19ba      	adds	r2, r7, r6
 80053e8:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80053ea:	4b7c      	ldr	r3, [pc, #496]	@ (80055dc <ParseBuffer+0x2b0>)
 80053ec:	25b0      	movs	r5, #176	@ 0xb0
 80053ee:	006d      	lsls	r5, r5, #1
 80053f0:	195b      	adds	r3, r3, r5
 80053f2:	19db      	adds	r3, r3, r7
 80053f4:	4a7a      	ldr	r2, [pc, #488]	@ (80055e0 <ParseBuffer+0x2b4>)
 80053f6:	8811      	ldrh	r1, [r2, #0]
 80053f8:	8019      	strh	r1, [r3, #0]
 80053fa:	7892      	ldrb	r2, [r2, #2]
 80053fc:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80053fe:	4b79      	ldr	r3, [pc, #484]	@ (80055e4 <ParseBuffer+0x2b8>)
 8005400:	195b      	adds	r3, r3, r5
 8005402:	19db      	adds	r3, r3, r7
 8005404:	4a78      	ldr	r2, [pc, #480]	@ (80055e8 <ParseBuffer+0x2bc>)
 8005406:	6811      	ldr	r1, [r2, #0]
 8005408:	6019      	str	r1, [r3, #0]
 800540a:	8892      	ldrh	r2, [r2, #4]
 800540c:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 800540e:	4b77      	ldr	r3, [pc, #476]	@ (80055ec <ParseBuffer+0x2c0>)
 8005410:	195b      	adds	r3, r3, r5
 8005412:	19db      	adds	r3, r3, r7
 8005414:	4a76      	ldr	r2, [pc, #472]	@ (80055f0 <ParseBuffer+0x2c4>)
 8005416:	6811      	ldr	r1, [r2, #0]
 8005418:	6019      	str	r1, [r3, #0]
 800541a:	7912      	ldrb	r2, [r2, #4]
 800541c:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 800541e:	4b75      	ldr	r3, [pc, #468]	@ (80055f4 <ParseBuffer+0x2c8>)
 8005420:	195b      	adds	r3, r3, r5
 8005422:	19db      	adds	r3, r3, r7
 8005424:	4a74      	ldr	r2, [pc, #464]	@ (80055f8 <ParseBuffer+0x2cc>)
 8005426:	6811      	ldr	r1, [r2, #0]
 8005428:	6019      	str	r1, [r3, #0]
 800542a:	8892      	ldrh	r2, [r2, #4]
 800542c:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800542e:	4b73      	ldr	r3, [pc, #460]	@ (80055fc <ParseBuffer+0x2d0>)
 8005430:	195b      	adds	r3, r3, r5
 8005432:	19db      	adds	r3, r3, r7
 8005434:	223e      	movs	r2, #62	@ 0x3e
 8005436:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8005438:	4b71      	ldr	r3, [pc, #452]	@ (8005600 <ParseBuffer+0x2d4>)
 800543a:	195b      	adds	r3, r3, r5
 800543c:	19db      	adds	r3, r3, r7
 800543e:	4a71      	ldr	r2, [pc, #452]	@ (8005604 <ParseBuffer+0x2d8>)
 8005440:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005442:	c313      	stmia	r3!, {r0, r1, r4}
 8005444:	8811      	ldrh	r1, [r2, #0]
 8005446:	8019      	strh	r1, [r3, #0]
 8005448:	7892      	ldrb	r2, [r2, #2]
 800544a:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 800544c:	4b6e      	ldr	r3, [pc, #440]	@ (8005608 <ParseBuffer+0x2dc>)
 800544e:	195b      	adds	r3, r3, r5
 8005450:	19db      	adds	r3, r3, r7
 8005452:	4a6e      	ldr	r2, [pc, #440]	@ (800560c <ParseBuffer+0x2e0>)
 8005454:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005456:	c313      	stmia	r3!, {r0, r1, r4}
 8005458:	8812      	ldrh	r2, [r2, #0]
 800545a:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 800545c:	4b5c      	ldr	r3, [pc, #368]	@ (80055d0 <ParseBuffer+0x2a4>)
 800545e:	195b      	adds	r3, r3, r5
 8005460:	19db      	adds	r3, r3, r7
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8005468:	2344      	movs	r3, #68	@ 0x44
 800546a:	18fa      	adds	r2, r7, r3
 800546c:	2348      	movs	r3, #72	@ 0x48
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	0011      	movs	r1, r2
 8005472:	0018      	movs	r0, r3
 8005474:	f01e fb89 	bl	8023b8a <strstr>
 8005478:	0003      	movs	r3, r0
 800547a:	19ba      	adds	r2, r7, r6
 800547c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 800547e:	4b54      	ldr	r3, [pc, #336]	@ (80055d0 <ParseBuffer+0x2a4>)
 8005480:	22b0      	movs	r2, #176	@ 0xb0
 8005482:	0052      	lsls	r2, r2, #1
 8005484:	189b      	adds	r3, r3, r2
 8005486:	19db      	adds	r3, r3, r7
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d10c      	bne.n	80054a8 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 800548e:	232c      	movs	r3, #44	@ 0x2c
 8005490:	18fa      	adds	r2, r7, r3
 8005492:	2348      	movs	r3, #72	@ 0x48
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	0011      	movs	r1, r2
 8005498:	0018      	movs	r0, r3
 800549a:	f01e fb76 	bl	8023b8a <strstr>
 800549e:	0003      	movs	r3, r0
 80054a0:	22ac      	movs	r2, #172	@ 0xac
 80054a2:	0052      	lsls	r2, r2, #1
 80054a4:	18ba      	adds	r2, r7, r2
 80054a6:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80054a8:	4b49      	ldr	r3, [pc, #292]	@ (80055d0 <ParseBuffer+0x2a4>)
 80054aa:	22b0      	movs	r2, #176	@ 0xb0
 80054ac:	0052      	lsls	r2, r2, #1
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	19db      	adds	r3, r3, r7
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d10c      	bne.n	80054d2 <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 80054b8:	2328      	movs	r3, #40	@ 0x28
 80054ba:	18fa      	adds	r2, r7, r3
 80054bc:	2348      	movs	r3, #72	@ 0x48
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	0011      	movs	r1, r2
 80054c2:	0018      	movs	r0, r3
 80054c4:	f01e fb61 	bl	8023b8a <strstr>
 80054c8:	0003      	movs	r3, r0
 80054ca:	22ac      	movs	r2, #172	@ 0xac
 80054cc:	0052      	lsls	r2, r2, #1
 80054ce:	18ba      	adds	r2, r7, r2
 80054d0:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80054d2:	4b3f      	ldr	r3, [pc, #252]	@ (80055d0 <ParseBuffer+0x2a4>)
 80054d4:	22b0      	movs	r2, #176	@ 0xb0
 80054d6:	0052      	lsls	r2, r2, #1
 80054d8:	189b      	adds	r3, r3, r2
 80054da:	19db      	adds	r3, r3, r7
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b05      	cmp	r3, #5
 80054e0:	d10c      	bne.n	80054fc <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 80054e2:	2308      	movs	r3, #8
 80054e4:	18fa      	adds	r2, r7, r3
 80054e6:	2348      	movs	r3, #72	@ 0x48
 80054e8:	18fb      	adds	r3, r7, r3
 80054ea:	0011      	movs	r1, r2
 80054ec:	0018      	movs	r0, r3
 80054ee:	f01e fb4c 	bl	8023b8a <strstr>
 80054f2:	0003      	movs	r3, r0
 80054f4:	22ac      	movs	r2, #172	@ 0xac
 80054f6:	0052      	lsls	r2, r2, #1
 80054f8:	18ba      	adds	r2, r7, r2
 80054fa:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80054fc:	233c      	movs	r3, #60	@ 0x3c
 80054fe:	18fa      	adds	r2, r7, r3
 8005500:	2448      	movs	r4, #72	@ 0x48
 8005502:	193b      	adds	r3, r7, r4
 8005504:	0011      	movs	r1, r2
 8005506:	0018      	movs	r0, r3
 8005508:	f01e fb3f 	bl	8023b8a <strstr>
 800550c:	0003      	movs	r3, r0
 800550e:	22aa      	movs	r2, #170	@ 0xaa
 8005510:	0052      	lsls	r2, r2, #1
 8005512:	18ba      	adds	r2, r7, r2
 8005514:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8005516:	2318      	movs	r3, #24
 8005518:	18fa      	adds	r2, r7, r3
 800551a:	193b      	adds	r3, r7, r4
 800551c:	0011      	movs	r1, r2
 800551e:	0018      	movs	r0, r3
 8005520:	f01e fb33 	bl	8023b8a <strstr>
 8005524:	0003      	movs	r3, r0
 8005526:	22a8      	movs	r2, #168	@ 0xa8
 8005528:	0052      	lsls	r2, r2, #1
 800552a:	18ba      	adds	r2, r7, r2
 800552c:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 800552e:	4a38      	ldr	r2, [pc, #224]	@ (8005610 <ParseBuffer+0x2e4>)
 8005530:	193b      	adds	r3, r7, r4
 8005532:	0011      	movs	r1, r2
 8005534:	0018      	movs	r0, r3
 8005536:	f01e fb28 	bl	8023b8a <strstr>
 800553a:	0003      	movs	r3, r0
 800553c:	22a6      	movs	r2, #166	@ 0xa6
 800553e:	0052      	lsls	r2, r2, #1
 8005540:	18ba      	adds	r2, r7, r2
 8005542:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8005544:	2334      	movs	r3, #52	@ 0x34
 8005546:	18fa      	adds	r2, r7, r3
 8005548:	193b      	adds	r3, r7, r4
 800554a:	0011      	movs	r1, r2
 800554c:	0018      	movs	r0, r3
 800554e:	f01e fb1c 	bl	8023b8a <strstr>
 8005552:	0003      	movs	r3, r0
 8005554:	22a4      	movs	r2, #164	@ 0xa4
 8005556:	0052      	lsls	r2, r2, #1
 8005558:	18ba      	adds	r2, r7, r2
 800555a:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 800555c:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <ParseBuffer+0x2a0>)
 800555e:	21b0      	movs	r1, #176	@ 0xb0
 8005560:	0049      	lsls	r1, r1, #1
 8005562:	185b      	adds	r3, r3, r1
 8005564:	19db      	adds	r3, r3, r7
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d800      	bhi.n	800556e <ParseBuffer+0x242>
 800556c:	e0bf      	b.n	80056ee <ParseBuffer+0x3c2>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 800556e:	22ac      	movs	r2, #172	@ 0xac
 8005570:	0052      	lsls	r2, r2, #1
 8005572:	18bb      	adds	r3, r7, r2
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d052      	beq.n	8005620 <ParseBuffer+0x2f4>
 800557a:	18bb      	adds	r3, r7, r2
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b4f      	cmp	r3, #79	@ 0x4f
 8005582:	d14d      	bne.n	8005620 <ParseBuffer+0x2f4>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8005584:	2360      	movs	r3, #96	@ 0x60
 8005586:	33ff      	adds	r3, #255	@ 0xff
 8005588:	18fb      	adds	r3, r7, r3
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 800558e:	4b21      	ldr	r3, [pc, #132]	@ (8005614 <ParseBuffer+0x2e8>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b12      	cmp	r3, #18
 8005594:	d144      	bne.n	8005620 <ParseBuffer+0x2f4>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8005596:	4b0d      	ldr	r3, [pc, #52]	@ (80055cc <ParseBuffer+0x2a0>)
 8005598:	185b      	adds	r3, r3, r1
 800559a:	19db      	adds	r3, r3, r7
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	2b2b      	cmp	r3, #43	@ 0x2b
 80055a0:	d10b      	bne.n	80055ba <ParseBuffer+0x28e>
 80055a2:	4b0c      	ldr	r3, [pc, #48]	@ (80055d4 <ParseBuffer+0x2a8>)
 80055a4:	185b      	adds	r3, r3, r1
 80055a6:	19db      	adds	r3, r3, r7
 80055a8:	2221      	movs	r2, #33	@ 0x21
 80055aa:	5c9b      	ldrb	r3, [r3, r2]
 80055ac:	2b32      	cmp	r3, #50	@ 0x32
 80055ae:	d104      	bne.n	80055ba <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80055b0:	193b      	adds	r3, r7, r4
 80055b2:	0018      	movs	r0, r3
 80055b4:	f002 fdd2 	bl	800815c <ParseTime>
 80055b8:	e032      	b.n	8005620 <ParseBuffer+0x2f4>
        }
        else {
          Error("Error getting time");
 80055ba:	4a17      	ldr	r2, [pc, #92]	@ (8005618 <ParseBuffer+0x2ec>)
 80055bc:	4b17      	ldr	r3, [pc, #92]	@ (800561c <ParseBuffer+0x2f0>)
 80055be:	0019      	movs	r1, r3
 80055c0:	2001      	movs	r0, #1
 80055c2:	f00c f949 	bl	8011858 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80055c6:	2306      	movs	r3, #6
 80055c8:	e095      	b.n	80056f6 <ParseBuffer+0x3ca>
 80055ca:	46c0      	nop			@ (mov r8, r8)
 80055cc:	fffffea2 	.word	0xfffffea2
 80055d0:	fffffea1 	.word	0xfffffea1
 80055d4:	fffffee8 	.word	0xfffffee8
 80055d8:	08028358 	.word	0x08028358
 80055dc:	fffffee4 	.word	0xfffffee4
 80055e0:	08028384 	.word	0x08028384
 80055e4:	fffffedc 	.word	0xfffffedc
 80055e8:	08028388 	.word	0x08028388
 80055ec:	fffffed4 	.word	0xfffffed4
 80055f0:	08028390 	.word	0x08028390
 80055f4:	fffffecc 	.word	0xfffffecc
 80055f8:	08028398 	.word	0x08028398
 80055fc:	fffffec8 	.word	0xfffffec8
 8005600:	fffffeb8 	.word	0xfffffeb8
 8005604:	080283a0 	.word	0x080283a0
 8005608:	fffffea8 	.word	0xfffffea8
 800560c:	080283b0 	.word	0x080283b0
 8005610:	0802ae48 	.word	0x0802ae48
 8005614:	2000068a 	.word	0x2000068a
 8005618:	08028370 	.word	0x08028370
 800561c:	08027c18 	.word	0x08027c18
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8005620:	22ac      	movs	r2, #172	@ 0xac
 8005622:	0052      	lsls	r2, r2, #1
 8005624:	18bb      	adds	r3, r7, r2
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <ParseBuffer+0x314>
 800562c:	18bb      	adds	r3, r7, r2
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b72      	cmp	r3, #114	@ 0x72
 8005634:	d104      	bne.n	8005640 <ParseBuffer+0x314>
      status = RECEIVE_STATUS_READY;
 8005636:	2360      	movs	r3, #96	@ 0x60
 8005638:	33ff      	adds	r3, #255	@ 0xff
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	2202      	movs	r2, #2
 800563e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8005640:	22ac      	movs	r2, #172	@ 0xac
 8005642:	0052      	lsls	r2, r2, #1
 8005644:	18bb      	adds	r3, r7, r2
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d009      	beq.n	8005660 <ParseBuffer+0x334>
 800564c:	18bb      	adds	r3, r7, r2
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b3e      	cmp	r3, #62	@ 0x3e
 8005654:	d104      	bne.n	8005660 <ParseBuffer+0x334>
      status = RECEIVE_STATUS_START;
 8005656:	2360      	movs	r3, #96	@ 0x60
 8005658:	33ff      	adds	r3, #255	@ 0xff
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2205      	movs	r2, #5
 800565e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8005660:	22ac      	movs	r2, #172	@ 0xac
 8005662:	0052      	lsls	r2, r2, #1
 8005664:	18bb      	adds	r3, r7, r2
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d009      	beq.n	8005680 <ParseBuffer+0x354>
 800566c:	18bb      	adds	r3, r7, r2
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2b2b      	cmp	r3, #43	@ 0x2b
 8005674:	d104      	bne.n	8005680 <ParseBuffer+0x354>
      status = RECEIVE_STATUS_TIME;
 8005676:	2360      	movs	r3, #96	@ 0x60
 8005678:	33ff      	adds	r3, #255	@ 0xff
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	220b      	movs	r2, #11
 800567e:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8005680:	22aa      	movs	r2, #170	@ 0xaa
 8005682:	0052      	lsls	r2, r2, #1
 8005684:	18bb      	adds	r3, r7, r2
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <ParseBuffer+0x36a>
 800568c:	18bb      	adds	r3, r7, r2
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b45      	cmp	r3, #69	@ 0x45
 8005694:	d00a      	beq.n	80056ac <ParseBuffer+0x380>
 8005696:	22a4      	movs	r2, #164	@ 0xa4
 8005698:	0052      	lsls	r2, r2, #1
 800569a:	18bb      	adds	r3, r7, r2
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <ParseBuffer+0x38a>
 80056a2:	18bb      	adds	r3, r7, r2
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b46      	cmp	r3, #70	@ 0x46
 80056aa:	d104      	bne.n	80056b6 <ParseBuffer+0x38a>
      status = RECEIVE_STATUS_ERROR;
 80056ac:	2360      	movs	r3, #96	@ 0x60
 80056ae:	33ff      	adds	r3, #255	@ 0xff
 80056b0:	18fb      	adds	r3, r7, r3
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80056b6:	22a8      	movs	r2, #168	@ 0xa8
 80056b8:	0052      	lsls	r2, r2, #1
 80056ba:	18bb      	adds	r3, r7, r2
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <ParseBuffer+0x3a6>
 80056c2:	18bb      	adds	r3, r7, r2
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b57      	cmp	r3, #87	@ 0x57
 80056ca:	d102      	bne.n	80056d2 <ParseBuffer+0x3a6>
      ConnectionMade = true;
 80056cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005700 <ParseBuffer+0x3d4>)
 80056ce:	2201      	movs	r2, #1
 80056d0:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80056d2:	22a6      	movs	r2, #166	@ 0xa6
 80056d4:	0052      	lsls	r2, r2, #1
 80056d6:	18bb      	adds	r3, r7, r2
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <ParseBuffer+0x3c2>
 80056de:	18bb      	adds	r3, r7, r2
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b32      	cmp	r3, #50	@ 0x32
 80056e6:	d102      	bne.n	80056ee <ParseBuffer+0x3c2>
      beurs = true;
 80056e8:	4b06      	ldr	r3, [pc, #24]	@ (8005704 <ParseBuffer+0x3d8>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80056ee:	2360      	movs	r3, #96	@ 0x60
 80056f0:	33ff      	adds	r3, #255	@ 0xff
 80056f2:	18fb      	adds	r3, r7, r3
 80056f4:	781b      	ldrb	r3, [r3, #0]

}
 80056f6:	0018      	movs	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	b059      	add	sp, #356	@ 0x164
 80056fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056fe:	46c0      	nop			@ (mov r8, r8)
 8005700:	200005b8 	.word	0x200005b8
 8005704:	200005ba 	.word	0x200005ba

08005708 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800570e:	4b0b      	ldr	r3, [pc, #44]	@ (800573c <PollAwake+0x34>)
 8005710:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	0018      	movs	r0, r3
 8005716:	f7fa fd29 	bl	800016c <strlen>
 800571a:	0003      	movs	r3, r0
 800571c:	b29a      	uxth	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	0011      	movs	r1, r2
 8005722:	0018      	movs	r0, r3
 8005724:	f7ff f86e 	bl	8004804 <ESP_Send>
 8005728:	1e03      	subs	r3, r0, #0
 800572a:	d001      	beq.n	8005730 <PollAwake+0x28>
    return true;
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <PollAwake+0x2a>
  }
  else{
    return false;
 8005730:	2300      	movs	r3, #0
  }
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b002      	add	sp, #8
 8005738:	bd80      	pop	{r7, pc}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	080283c0 	.word	0x080283c0

08005740 <RFPower>:

bool RFPower(){
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8005746:	4b0b      	ldr	r3, [pc, #44]	@ (8005774 <RFPower+0x34>)
 8005748:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	0018      	movs	r0, r3
 800574e:	f7fa fd0d 	bl	800016c <strlen>
 8005752:	0003      	movs	r3, r0
 8005754:	b29a      	uxth	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0011      	movs	r1, r2
 800575a:	0018      	movs	r0, r3
 800575c:	f7ff f852 	bl	8004804 <ESP_Send>
 8005760:	1e03      	subs	r3, r0, #0
 8005762:	d001      	beq.n	8005768 <RFPower+0x28>
    return true;
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <RFPower+0x2a>
  }
  else{
    return false;
 8005768:	2300      	movs	r3, #0
  }
}
 800576a:	0018      	movs	r0, r3
 800576c:	46bd      	mov	sp, r7
 800576e:	b002      	add	sp, #8
 8005770:	bd80      	pop	{r7, pc}
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	080283c8 	.word	0x080283c8

08005778 <CheckRFPower>:

bool CheckRFPower(){
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800577e:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <CheckRFPower+0x34>)
 8005780:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	0018      	movs	r0, r3
 8005786:	f7fa fcf1 	bl	800016c <strlen>
 800578a:	0003      	movs	r3, r0
 800578c:	b29a      	uxth	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	0011      	movs	r1, r2
 8005792:	0018      	movs	r0, r3
 8005794:	f7ff f836 	bl	8004804 <ESP_Send>
 8005798:	1e03      	subs	r3, r0, #0
 800579a:	d001      	beq.n	80057a0 <CheckRFPower+0x28>
    return true;
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80057a0:	2300      	movs	r3, #0
  }
}
 80057a2:	0018      	movs	r0, r3
 80057a4:	46bd      	mov	sp, r7
 80057a6:	b002      	add	sp, #8
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	46c0      	nop			@ (mov r8, r8)
 80057ac:	080283d8 	.word	0x080283d8

080057b0 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80057b6:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <ATRestore+0x34>)
 80057b8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0018      	movs	r0, r3
 80057be:	f7fa fcd5 	bl	800016c <strlen>
 80057c2:	0003      	movs	r3, r0
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	0011      	movs	r1, r2
 80057ca:	0018      	movs	r0, r3
 80057cc:	f7ff f81a 	bl	8004804 <ESP_Send>
 80057d0:	1e03      	subs	r3, r0, #0
 80057d2:	d001      	beq.n	80057d8 <ATRestore+0x28>
    return true;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <ATRestore+0x2a>
  }
  else{
    return false;
 80057d8:	2300      	movs	r3, #0
  }
}
 80057da:	0018      	movs	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	b002      	add	sp, #8
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	080283e8 	.word	0x080283e8

080057e8 <CWINIT>:

bool CWINIT(){
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80057ee:	4b0b      	ldr	r3, [pc, #44]	@ (800581c <CWINIT+0x34>)
 80057f0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f7fa fcb9 	bl	800016c <strlen>
 80057fa:	0003      	movs	r3, r0
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	0011      	movs	r1, r2
 8005802:	0018      	movs	r0, r3
 8005804:	f7fe fffe 	bl	8004804 <ESP_Send>
 8005808:	1e03      	subs	r3, r0, #0
 800580a:	d001      	beq.n	8005810 <CWINIT+0x28>
    return true;
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <CWINIT+0x2a>
  }
  else{
    return false;
 8005810:	2300      	movs	r3, #0
  }
}
 8005812:	0018      	movs	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	b002      	add	sp, #8
 8005818:	bd80      	pop	{r7, pc}
 800581a:	46c0      	nop			@ (mov r8, r8)
 800581c:	080283f8 	.word	0x080283f8

08005820 <CWMODE1>:

bool CWMODE1(){
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8005826:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <CWMODE1+0x34>)
 8005828:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	0018      	movs	r0, r3
 800582e:	f7fa fc9d 	bl	800016c <strlen>
 8005832:	0003      	movs	r3, r0
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	0011      	movs	r1, r2
 800583a:	0018      	movs	r0, r3
 800583c:	f7fe ffe2 	bl	8004804 <ESP_Send>
 8005840:	1e03      	subs	r3, r0, #0
 8005842:	d001      	beq.n	8005848 <CWMODE1+0x28>
    return true;
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <CWMODE1+0x2a>
  }
  else{
    return false;
 8005848:	2300      	movs	r3, #0
  }
}
 800584a:	0018      	movs	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	b002      	add	sp, #8
 8005850:	bd80      	pop	{r7, pc}
 8005852:	46c0      	nop			@ (mov r8, r8)
 8005854:	08028408 	.word	0x08028408

08005858 <CWMODE2>:

bool CWMODE2(){
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800585e:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <CWMODE2+0x34>)
 8005860:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	0018      	movs	r0, r3
 8005866:	f7fa fc81 	bl	800016c <strlen>
 800586a:	0003      	movs	r3, r0
 800586c:	b29a      	uxth	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	0011      	movs	r1, r2
 8005872:	0018      	movs	r0, r3
 8005874:	f7fe ffc6 	bl	8004804 <ESP_Send>
 8005878:	1e03      	subs	r3, r0, #0
 800587a:	d001      	beq.n	8005880 <CWMODE2+0x28>
    return true;
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <CWMODE2+0x2a>
  }
  else{
    return false;
 8005880:	2300      	movs	r3, #0
  }
}
 8005882:	0018      	movs	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	b002      	add	sp, #8
 8005888:	bd80      	pop	{r7, pc}
 800588a:	46c0      	nop			@ (mov r8, r8)
 800588c:	08028418 	.word	0x08028418

08005890 <CWAUTOCONN>:

bool CWAUTOCONN(){
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8005896:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <CWAUTOCONN+0x34>)
 8005898:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	0018      	movs	r0, r3
 800589e:	f7fa fc65 	bl	800016c <strlen>
 80058a2:	0003      	movs	r3, r0
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	0011      	movs	r1, r2
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fe ffaa 	bl	8004804 <ESP_Send>
 80058b0:	1e03      	subs	r3, r0, #0
 80058b2:	d001      	beq.n	80058b8 <CWAUTOCONN+0x28>
    return true;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80058b8:	2300      	movs	r3, #0
  }
}
 80058ba:	0018      	movs	r0, r3
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	08028428 	.word	0x08028428

080058c8 <CWJAP>:

bool CWJAP(){
 80058c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ca:	46c6      	mov	lr, r8
 80058cc:	b500      	push	{lr}
 80058ce:	b0a2      	sub	sp, #136	@ 0x88
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	466b      	mov	r3, sp
 80058d4:	4698      	mov	r8, r3
  beursTest = true;
 80058d6:	4b39      	ldr	r3, [pc, #228]	@ (80059bc <CWJAP+0xf4>)
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80058dc:	2618      	movs	r6, #24
 80058de:	19bb      	adds	r3, r7, r6
 80058e0:	2264      	movs	r2, #100	@ 0x64
 80058e2:	2100      	movs	r1, #0
 80058e4:	0018      	movs	r0, r3
 80058e6:	f01e f915 	bl	8023b14 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80058ea:	4b35      	ldr	r3, [pc, #212]	@ (80059c0 <CWJAP+0xf8>)
 80058ec:	4a35      	ldr	r2, [pc, #212]	@ (80059c4 <CWJAP+0xfc>)
 80058ee:	4936      	ldr	r1, [pc, #216]	@ (80059c8 <CWJAP+0x100>)
 80058f0:	19b8      	adds	r0, r7, r6
 80058f2:	f01d ffa9 	bl	8023848 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80058f6:	19bb      	adds	r3, r7, r6
 80058f8:	0018      	movs	r0, r3
 80058fa:	f7fa fc37 	bl	800016c <strlen>
 80058fe:	0002      	movs	r2, r0
 8005900:	216f      	movs	r1, #111	@ 0x6f
 8005902:	0030      	movs	r0, r6
 8005904:	180b      	adds	r3, r1, r0
 8005906:	19db      	adds	r3, r3, r7
 8005908:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800590a:	180b      	adds	r3, r1, r0
 800590c:	19db      	adds	r3, r3, r7
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	1e5a      	subs	r2, r3, #1
 8005914:	2180      	movs	r1, #128	@ 0x80
 8005916:	1879      	adds	r1, r7, r1
 8005918:	600a      	str	r2, [r1, #0]
 800591a:	001a      	movs	r2, r3
 800591c:	60ba      	str	r2, [r7, #8]
 800591e:	2200      	movs	r2, #0
 8005920:	60fa      	str	r2, [r7, #12]
 8005922:	68b8      	ldr	r0, [r7, #8]
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	0002      	movs	r2, r0
 8005928:	0f52      	lsrs	r2, r2, #29
 800592a:	000e      	movs	r6, r1
 800592c:	00f6      	lsls	r6, r6, #3
 800592e:	617e      	str	r6, [r7, #20]
 8005930:	697e      	ldr	r6, [r7, #20]
 8005932:	4316      	orrs	r6, r2
 8005934:	617e      	str	r6, [r7, #20]
 8005936:	0002      	movs	r2, r0
 8005938:	00d2      	lsls	r2, r2, #3
 800593a:	613a      	str	r2, [r7, #16]
 800593c:	001a      	movs	r2, r3
 800593e:	603a      	str	r2, [r7, #0]
 8005940:	2200      	movs	r2, #0
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	6838      	ldr	r0, [r7, #0]
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	0002      	movs	r2, r0
 800594a:	0f52      	lsrs	r2, r2, #29
 800594c:	000e      	movs	r6, r1
 800594e:	00f5      	lsls	r5, r6, #3
 8005950:	4315      	orrs	r5, r2
 8005952:	0002      	movs	r2, r0
 8005954:	00d4      	lsls	r4, r2, #3
 8005956:	3307      	adds	r3, #7
 8005958:	08db      	lsrs	r3, r3, #3
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	466a      	mov	r2, sp
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	469d      	mov	sp, r3
 8005962:	466b      	mov	r3, sp
 8005964:	3300      	adds	r3, #0
 8005966:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8005968:	246f      	movs	r4, #111	@ 0x6f
 800596a:	2518      	movs	r5, #24
 800596c:	1963      	adds	r3, r4, r5
 800596e:	19db      	adds	r3, r3, r7
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	001a      	movs	r2, r3
 8005976:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005978:	2100      	movs	r1, #0
 800597a:	0018      	movs	r0, r3
 800597c:	f01e f8ca 	bl	8023b14 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8005980:	1963      	adds	r3, r4, r5
 8005982:	19db      	adds	r3, r3, r7
 8005984:	781a      	ldrb	r2, [r3, #0]
 8005986:	1979      	adds	r1, r7, r5
 8005988:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800598a:	0018      	movs	r0, r3
 800598c:	f01e f8e9 	bl	8023b62 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8005990:	1963      	adds	r3, r4, r5
 8005992:	19db      	adds	r3, r3, r7
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	b29a      	uxth	r2, r3
 8005998:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800599a:	0011      	movs	r1, r2
 800599c:	0018      	movs	r0, r3
 800599e:	f7fe ff31 	bl	8004804 <ESP_Send>
 80059a2:	1e03      	subs	r3, r0, #0
 80059a4:	d001      	beq.n	80059aa <CWJAP+0xe2>
    return true;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <CWJAP+0xe4>
  }
  else{
    return false;
 80059aa:	2300      	movs	r3, #0
 80059ac:	46c5      	mov	sp, r8
  }
}
 80059ae:	0018      	movs	r0, r3
 80059b0:	46bd      	mov	sp, r7
 80059b2:	b022      	add	sp, #136	@ 0x88
 80059b4:	bc80      	pop	{r7}
 80059b6:	46b8      	mov	r8, r7
 80059b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	200005b9 	.word	0x200005b9
 80059c0:	0802ae54 	.word	0x0802ae54
 80059c4:	0802ae48 	.word	0x0802ae48
 80059c8:	0802843c 	.word	0x0802843c

080059cc <CWMODE3>:

bool CWMODE3(){
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80059d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a00 <CWMODE3+0x34>)
 80059d4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	0018      	movs	r0, r3
 80059da:	f7fa fbc7 	bl	800016c <strlen>
 80059de:	0003      	movs	r3, r0
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	0011      	movs	r1, r2
 80059e6:	0018      	movs	r0, r3
 80059e8:	f7fe ff0c 	bl	8004804 <ESP_Send>
 80059ec:	1e03      	subs	r3, r0, #0
 80059ee:	d001      	beq.n	80059f4 <CWMODE3+0x28>
    return true;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <CWMODE3+0x2a>
  }
  else{
    return false;
 80059f4:	2300      	movs	r3, #0
  }
}
 80059f6:	0018      	movs	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b002      	add	sp, #8
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	46c0      	nop			@ (mov r8, r8)
 8005a00:	08028454 	.word	0x08028454

08005a04 <CWSTATE>:

bool CWSTATE(){
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a38 <CWSTATE+0x34>)
 8005a0c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	0018      	movs	r0, r3
 8005a12:	f7fa fbab 	bl	800016c <strlen>
 8005a16:	0003      	movs	r3, r0
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	0011      	movs	r1, r2
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f7fe fef0 	bl	8004804 <ESP_Send>
 8005a24:	1e03      	subs	r3, r0, #0
 8005a26:	d001      	beq.n	8005a2c <CWSTATE+0x28>
    return true;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <CWSTATE+0x2a>
  }
  else{
    return false;
 8005a2c:	2300      	movs	r3, #0
  }
}
 8005a2e:	0018      	movs	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	b002      	add	sp, #8
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	46c0      	nop			@ (mov r8, r8)
 8005a38:	08028464 	.word	0x08028464

08005a3c <CWSAP>:

bool CWSAP(){
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8005a42:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <CWSAP+0x34>)
 8005a44:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f7fa fb8f 	bl	800016c <strlen>
 8005a4e:	0003      	movs	r3, r0
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	0011      	movs	r1, r2
 8005a56:	0018      	movs	r0, r3
 8005a58:	f7fe fed4 	bl	8004804 <ESP_Send>
 8005a5c:	1e03      	subs	r3, r0, #0
 8005a5e:	d001      	beq.n	8005a64 <CWSAP+0x28>
    return true;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <CWSAP+0x2a>
  }
  else{
    return false;
 8005a64:	2300      	movs	r3, #0
  }
}
 8005a66:	0018      	movs	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b002      	add	sp, #8
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	08028474 	.word	0x08028474

08005a74 <CIPMUX>:

bool CIPMUX(){
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8005a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa8 <CIPMUX+0x34>)
 8005a7c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7fa fb73 	bl	800016c <strlen>
 8005a86:	0003      	movs	r3, r0
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0011      	movs	r1, r2
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f7fe feb8 	bl	8004804 <ESP_Send>
 8005a94:	1e03      	subs	r3, r0, #0
 8005a96:	d001      	beq.n	8005a9c <CIPMUX+0x28>
    return true;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <CIPMUX+0x2a>
  }
  else{
    return false;
 8005a9c:	2300      	movs	r3, #0
  }
}
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b002      	add	sp, #8
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	46c0      	nop			@ (mov r8, r8)
 8005aa8:	08028498 	.word	0x08028498

08005aac <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8005ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae0 <WEBSERVER+0x34>)
 8005ab4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f7fa fb57 	bl	800016c <strlen>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	0011      	movs	r1, r2
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f7fe fe9c 	bl	8004804 <ESP_Send>
 8005acc:	1e03      	subs	r3, r0, #0
 8005ace:	d001      	beq.n	8005ad4 <WEBSERVER+0x28>
    return true;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8005ad4:	2300      	movs	r3, #0
  }
}
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	b002      	add	sp, #8
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	46c0      	nop			@ (mov r8, r8)
 8005ae0:	080284a8 	.word	0x080284a8

08005ae4 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8005ae4:	b590      	push	{r4, r7, lr}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8005aea:	1cfb      	adds	r3, r7, #3
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8005af0:	4b26      	ldr	r3, [pc, #152]	@ (8005b8c <HTTPCPOST+0xa8>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	1dbc      	adds	r4, r7, #6
 8005af6:	1cf9      	adds	r1, r7, #3
 8005af8:	2200      	movs	r2, #0
 8005afa:	0018      	movs	r0, r3
 8005afc:	f7ff f838 	bl	8004b70 <CreateMessage>
 8005b00:	0003      	movs	r3, r0
 8005b02:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8005b04:	4b21      	ldr	r3, [pc, #132]	@ (8005b8c <HTTPCPOST+0xa8>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d007      	beq.n	8005b1c <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8005b0c:	1dbb      	adds	r3, r7, #6
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	4a1f      	ldr	r2, [pc, #124]	@ (8005b90 <HTTPCPOST+0xac>)
 8005b12:	4920      	ldr	r1, [pc, #128]	@ (8005b94 <HTTPCPOST+0xb0>)
 8005b14:	4820      	ldr	r0, [pc, #128]	@ (8005b98 <HTTPCPOST+0xb4>)
 8005b16:	f01d fe97 	bl	8023848 <siprintf>
 8005b1a:	e015      	b.n	8005b48 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8005b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8005b9c <HTTPCPOST+0xb8>)
 8005b1e:	4820      	ldr	r0, [pc, #128]	@ (8005ba0 <HTTPCPOST+0xbc>)
 8005b20:	220c      	movs	r2, #12
 8005b22:	0019      	movs	r1, r3
 8005b24:	f004 fb22 	bl	800a16c <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8005b28:	4a1c      	ldr	r2, [pc, #112]	@ (8005b9c <HTTPCPOST+0xb8>)
 8005b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ba4 <HTTPCPOST+0xc0>)
 8005b2c:	0011      	movs	r1, r2
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f7fe fffa 	bl	8004b28 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8005b34:	1dbb      	adds	r3, r7, #6
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	4c1a      	ldr	r4, [pc, #104]	@ (8005ba4 <HTTPCPOST+0xc0>)
 8005b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba8 <HTTPCPOST+0xc4>)
 8005b3c:	491b      	ldr	r1, [pc, #108]	@ (8005bac <HTTPCPOST+0xc8>)
 8005b3e:	4816      	ldr	r0, [pc, #88]	@ (8005b98 <HTTPCPOST+0xb4>)
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	0023      	movs	r3, r4
 8005b44:	f01d fe80 	bl	8023848 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8005b48:	4b13      	ldr	r3, [pc, #76]	@ (8005b98 <HTTPCPOST+0xb4>)
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	f7fa fb0e 	bl	800016c <strlen>
 8005b50:	0002      	movs	r2, r0
 8005b52:	1d3b      	adds	r3, r7, #4
 8005b54:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8005b56:	1d3b      	adds	r3, r7, #4
 8005b58:	8818      	ldrh	r0, [r3, #0]
 8005b5a:	1cfb      	adds	r3, r7, #3
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	4a14      	ldr	r2, [pc, #80]	@ (8005bb0 <HTTPCPOST+0xcc>)
 8005b60:	4914      	ldr	r1, [pc, #80]	@ (8005bb4 <HTTPCPOST+0xd0>)
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	0003      	movs	r3, r0
 8005b66:	2003      	movs	r0, #3
 8005b68:	f00b fe76 	bl	8011858 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8005b6c:	1d3b      	adds	r3, r7, #4
 8005b6e:	881a      	ldrh	r2, [r3, #0]
 8005b70:	4b09      	ldr	r3, [pc, #36]	@ (8005b98 <HTTPCPOST+0xb4>)
 8005b72:	0011      	movs	r1, r2
 8005b74:	0018      	movs	r0, r3
 8005b76:	f7fe fe45 	bl	8004804 <ESP_Send>
 8005b7a:	1e03      	subs	r3, r0, #0
 8005b7c:	d001      	beq.n	8005b82 <HTTPCPOST+0x9e>
    return true;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8005b82:	2300      	movs	r3, #0
  }
}
 8005b84:	0018      	movs	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b003      	add	sp, #12
 8005b8a:	bd90      	pop	{r4, r7, pc}
 8005b8c:	200005ba 	.word	0x200005ba
 8005b90:	0802ae70 	.word	0x0802ae70
 8005b94:	080284c0 	.word	0x080284c0
 8005b98:	200005e0 	.word	0x200005e0
 8005b9c:	200007bc 	.word	0x200007bc
 8005ba0:	08080000 	.word	0x08080000
 8005ba4:	200007c8 	.word	0x200007c8
 8005ba8:	0802aeac 	.word	0x0802aeac
 8005bac:	080284f8 	.word	0x080284f8
 8005bb0:	08028538 	.word	0x08028538
 8005bb4:	08027bf4 	.word	0x08027bf4

08005bb8 <SENDDATA>:

bool SENDDATA(){
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af02      	add	r7, sp, #8
  bool result = false;
 8005bbe:	1dfb      	adds	r3, r7, #7
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005c00 <SENDDATA+0x48>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	1df9      	adds	r1, r7, #7
 8005bca:	2201      	movs	r2, #1
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f7fe ffcf 	bl	8004b70 <CreateMessage>
 8005bd2:	0003      	movs	r3, r0
 8005bd4:	001a      	movs	r2, r3
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <SENDDATA+0x4c>)
 8005bd8:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8005bda:	1dfb      	adds	r3, r7, #7
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	0018      	movs	r0, r3
 8005be0:	4b08      	ldr	r3, [pc, #32]	@ (8005c04 <SENDDATA+0x4c>)
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	4a08      	ldr	r2, [pc, #32]	@ (8005c08 <SENDDATA+0x50>)
 8005be6:	4909      	ldr	r1, [pc, #36]	@ (8005c0c <SENDDATA+0x54>)
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	0003      	movs	r3, r0
 8005bec:	2003      	movs	r0, #3
 8005bee:	f00b fe33 	bl	8011858 <CreateLine>
  return result;
 8005bf2:	1dfb      	adds	r3, r7, #7
 8005bf4:	781b      	ldrb	r3, [r3, #0]
}
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b002      	add	sp, #8
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	200005ba 	.word	0x200005ba
 8005c04:	200005d4 	.word	0x200005d4
 8005c08:	08028594 	.word	0x08028594
 8005c0c:	08027bf4 	.word	0x08027bf4

08005c10 <SLEEP>:

bool SLEEP(){
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8005c16:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <SLEEP+0x34>)
 8005c18:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f7fa faa5 	bl	800016c <strlen>
 8005c22:	0003      	movs	r3, r0
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	0011      	movs	r1, r2
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f7fe fdea 	bl	8004804 <ESP_Send>
 8005c30:	1e03      	subs	r3, r0, #0
 8005c32:	d001      	beq.n	8005c38 <SLEEP+0x28>
    return true;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <SLEEP+0x2a>
  }
  else{
    return false;
 8005c38:	2300      	movs	r3, #0
  }
}
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b002      	add	sp, #8
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	080285d0 	.word	0x080285d0

08005c48 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <CIPSNTPCFG+0x3c>)
 8005c50:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	0018      	movs	r0, r3
 8005c56:	f7fa fa89 	bl	800016c <strlen>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	0011      	movs	r1, r2
 8005c62:	0018      	movs	r0, r3
 8005c64:	f7fe fdce 	bl	8004804 <ESP_Send>
 8005c68:	1e03      	subs	r3, r0, #0
 8005c6a:	d006      	beq.n	8005c7a <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8005c6c:	23fa      	movs	r3, #250	@ 0xfa
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	0018      	movs	r0, r3
 8005c72:	f00c fa47 	bl	8012104 <HAL_Delay>
    return true;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e000      	b.n	8005c7c <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8005c7a:	2300      	movs	r3, #0
  }
}
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	b002      	add	sp, #8
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	080285e0 	.word	0x080285e0

08005c88 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <CIPSNTPTIME+0x34>)
 8005c90:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	0018      	movs	r0, r3
 8005c96:	f7fa fa69 	bl	800016c <strlen>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0011      	movs	r1, r2
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f7fe fdae 	bl	8004804 <ESP_Send>
 8005ca8:	1e03      	subs	r3, r0, #0
 8005caa:	d001      	beq.n	8005cb0 <CIPSNTPTIME+0x28>
    return true;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8005cb0:	2300      	movs	r3, #0
  }
}
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b002      	add	sp, #8
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	08028630 	.word	0x08028630

08005cc0 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <CIPSNTPINTV+0x34>)
 8005cc8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f7fa fa4d 	bl	800016c <strlen>
 8005cd2:	0003      	movs	r3, r0
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	0011      	movs	r1, r2
 8005cda:	0018      	movs	r0, r3
 8005cdc:	f7fe fd92 	bl	8004804 <ESP_Send>
 8005ce0:	1e03      	subs	r3, r0, #0
 8005ce2:	d001      	beq.n	8005ce8 <CIPSNTPINTV+0x28>
    return true;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8005ce8:	2300      	movs	r3, #0
  }
}
 8005cea:	0018      	movs	r0, r3
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b002      	add	sp, #8
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	08028644 	.word	0x08028644

08005cf8 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8005cf8:	b5b0      	push	{r4, r5, r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	0002      	movs	r2, r0
 8005d00:	1dfb      	adds	r3, r7, #7
 8005d02:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8005d04:	4b6c      	ldr	r3, [pc, #432]	@ (8005eb8 <DMA_ProcessBuffer+0x1c0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	200e      	movs	r0, #14
 8005d0e:	183b      	adds	r3, r7, r0
 8005d10:	2180      	movs	r1, #128	@ 0x80
 8005d12:	0049      	lsls	r1, r1, #1
 8005d14:	1a8a      	subs	r2, r1, r2
 8005d16:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8005d18:	230d      	movs	r3, #13
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8005d20:	183b      	adds	r3, r7, r0
 8005d22:	881a      	ldrh	r2, [r3, #0]
 8005d24:	2380      	movs	r3, #128	@ 0x80
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d903      	bls.n	8005d34 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8005d2c:	183b      	adds	r3, r7, r0
 8005d2e:	2280      	movs	r2, #128	@ 0x80
 8005d30:	0052      	lsls	r2, r2, #1
 8005d32:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8005d34:	4b61      	ldr	r3, [pc, #388]	@ (8005ebc <DMA_ProcessBuffer+0x1c4>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	001a      	movs	r2, r3
 8005d3c:	230e      	movs	r3, #14
 8005d3e:	18fb      	adds	r3, r7, r3
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d131      	bne.n	8005daa <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8005d46:	4b5e      	ldr	r3, [pc, #376]	@ (8005ec0 <DMA_ProcessBuffer+0x1c8>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b14      	cmp	r3, #20
 8005d4c:	d91b      	bls.n	8005d86 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8005d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ec0 <DMA_ProcessBuffer+0x1c8>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8005d54:	4b5b      	ldr	r3, [pc, #364]	@ (8005ec4 <DMA_ProcessBuffer+0x1cc>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d107      	bne.n	8005d6c <DMA_ProcessBuffer+0x74>
 8005d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ec8 <DMA_ProcessBuffer+0x1d0>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8005d64:	230d      	movs	r3, #13
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	2207      	movs	r2, #7
 8005d6a:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8005d6c:	4b55      	ldr	r3, [pc, #340]	@ (8005ec4 <DMA_ProcessBuffer+0x1cc>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d103      	bne.n	8005d7c <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8005d74:	4b55      	ldr	r3, [pc, #340]	@ (8005ecc <DMA_ProcessBuffer+0x1d4>)
 8005d76:	220b      	movs	r2, #11
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	e016      	b.n	8005daa <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8005d7c:	230d      	movs	r3, #13
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	2206      	movs	r2, #6
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	e011      	b.n	8005daa <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8005d86:	4b4e      	ldr	r3, [pc, #312]	@ (8005ec0 <DMA_ProcessBuffer+0x1c8>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8005ec0 <DMA_ProcessBuffer+0x1c8>)
 8005d90:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8005d92:	f00c f9ad 	bl	80120f0 <HAL_GetTick>
 8005d96:	0003      	movs	r3, r0
 8005d98:	33f5      	adds	r3, #245	@ 0xf5
 8005d9a:	33ff      	adds	r3, #255	@ 0xff
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8005ed0 <DMA_ProcessBuffer+0x1d8>)
 8005da0:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8005da2:	230d      	movs	r3, #13
 8005da4:	18fb      	adds	r3, r7, r3
 8005da6:	2204      	movs	r2, #4
 8005da8:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8005daa:	4b44      	ldr	r3, [pc, #272]	@ (8005ebc <DMA_ProcessBuffer+0x1c4>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	001a      	movs	r2, r3
 8005db2:	210e      	movs	r1, #14
 8005db4:	187b      	adds	r3, r7, r1
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d100      	bne.n	8005dbe <DMA_ProcessBuffer+0xc6>
 8005dbc:	e075      	b.n	8005eaa <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8005dbe:	4b40      	ldr	r3, [pc, #256]	@ (8005ec0 <DMA_ProcessBuffer+0x1c8>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8005dc4:	4b43      	ldr	r3, [pc, #268]	@ (8005ed4 <DMA_ProcessBuffer+0x1dc>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	4b3c      	ldr	r3, [pc, #240]	@ (8005ebc <DMA_ProcessBuffer+0x1c4>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d109      	bne.n	8005de8 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8005dd4:	187b      	adds	r3, r7, r1
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed4 <DMA_ProcessBuffer+0x1dc>)
 8005ddc:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8005dde:	230d      	movs	r3, #13
 8005de0:	18fb      	adds	r3, r7, r3
 8005de2:	220a      	movs	r2, #10
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	e060      	b.n	8005eaa <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8005de8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ed4 <DMA_ProcessBuffer+0x1dc>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	001a      	movs	r2, r3
 8005df0:	210e      	movs	r1, #14
 8005df2:	187b      	adds	r3, r7, r1
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d009      	beq.n	8005e0e <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8005dfa:	187b      	adds	r3, r7, r1
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	4b34      	ldr	r3, [pc, #208]	@ (8005ed4 <DMA_ProcessBuffer+0x1dc>)
 8005e02:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8005e04:	230d      	movs	r3, #13
 8005e06:	18fb      	adds	r3, r7, r3
 8005e08:	220a      	movs	r2, #10
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	e04d      	b.n	8005eaa <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8005e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8005ebc <DMA_ProcessBuffer+0x1c4>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	001a      	movs	r2, r3
 8005e16:	210e      	movs	r1, #14
 8005e18:	187b      	adds	r3, r7, r1
 8005e1a:	881b      	ldrh	r3, [r3, #0]
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d917      	bls.n	8005e50 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8005e20:	4b26      	ldr	r3, [pc, #152]	@ (8005ebc <DMA_ProcessBuffer+0x1c4>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	001a      	movs	r2, r3
 8005e28:	4b2b      	ldr	r3, [pc, #172]	@ (8005ed8 <DMA_ProcessBuffer+0x1e0>)
 8005e2a:	18d0      	adds	r0, r2, r3
 8005e2c:	4b23      	ldr	r3, [pc, #140]	@ (8005ebc <DMA_ProcessBuffer+0x1c4>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	001a      	movs	r2, r3
 8005e34:	187b      	adds	r3, r7, r1
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	1a9b      	subs	r3, r3, r2
 8005e3a:	b299      	uxth	r1, r3
 8005e3c:	230d      	movs	r3, #13
 8005e3e:	18fc      	adds	r4, r7, r3
 8005e40:	1dfb      	adds	r3, r7, #7
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	001a      	movs	r2, r3
 8005e46:	f7ff fa71 	bl	800532c <ParseBuffer>
 8005e4a:	0003      	movs	r3, r0
 8005e4c:	7023      	strb	r3, [r4, #0]
 8005e4e:	e026      	b.n	8005e9e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8005e50:	4b1a      	ldr	r3, [pc, #104]	@ (8005ebc <DMA_ProcessBuffer+0x1c4>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	001a      	movs	r2, r3
 8005e58:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed8 <DMA_ProcessBuffer+0x1e0>)
 8005e5a:	18d0      	adds	r0, r2, r3
 8005e5c:	4b17      	ldr	r3, [pc, #92]	@ (8005ebc <DMA_ProcessBuffer+0x1c4>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	001a      	movs	r2, r3
 8005e64:	2380      	movs	r3, #128	@ 0x80
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	b299      	uxth	r1, r3
 8005e6c:	250d      	movs	r5, #13
 8005e6e:	197c      	adds	r4, r7, r5
 8005e70:	1dfb      	adds	r3, r7, #7
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	001a      	movs	r2, r3
 8005e76:	f7ff fa59 	bl	800532c <ParseBuffer>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8005e7e:	210e      	movs	r1, #14
 8005e80:	187b      	adds	r3, r7, r1
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8005e88:	197c      	adds	r4, r7, r5
 8005e8a:	1dfb      	adds	r3, r7, #7
 8005e8c:	781a      	ldrb	r2, [r3, #0]
 8005e8e:	187b      	adds	r3, r7, r1
 8005e90:	8819      	ldrh	r1, [r3, #0]
 8005e92:	4b11      	ldr	r3, [pc, #68]	@ (8005ed8 <DMA_ProcessBuffer+0x1e0>)
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7ff fa49 	bl	800532c <ParseBuffer>
 8005e9a:	0003      	movs	r3, r0
 8005e9c:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8005e9e:	230e      	movs	r3, #14
 8005ea0:	18fb      	adds	r3, r7, r3
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <DMA_ProcessBuffer+0x1c4>)
 8005ea8:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8005eaa:	230d      	movs	r3, #13
 8005eac:	18fb      	adds	r3, r7, r3
 8005eae:	781b      	ldrb	r3, [r3, #0]
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b004      	add	sp, #16
 8005eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8005eb8:	20002134 	.word	0x20002134
 8005ebc:	200007e1 	.word	0x200007e1
 8005ec0:	20000688 	.word	0x20000688
 8005ec4:	2000068a 	.word	0x2000068a
 8005ec8:	20000001 	.word	0x20000001
 8005ecc:	2000002c 	.word	0x2000002c
 8005ed0:	20000680 	.word	0x20000680
 8005ed4:	200007e2 	.word	0x200007e2
 8005ed8:	200004b4 	.word	0x200004b4

08005edc <clearDMABuffer>:

void clearDMABuffer(){
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8005ee0:	2380      	movs	r3, #128	@ 0x80
 8005ee2:	005a      	lsls	r2, r3, #1
 8005ee4:	4b03      	ldr	r3, [pc, #12]	@ (8005ef4 <clearDMABuffer+0x18>)
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f01d fe13 	bl	8023b14 <memset>
}
 8005eee:	46c0      	nop			@ (mov r8, r8)
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	200004b4 	.word	0x200004b4

08005ef8 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	0002      	movs	r2, r0
 8005f00:	1dfb      	adds	r3, r7, #7
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	1dbb      	adds	r3, r7, #6
 8005f06:	1c0a      	adds	r2, r1, #0
 8005f08:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8005f0a:	210f      	movs	r1, #15
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8005f12:	1dbb      	adds	r3, r7, #6
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d105      	bne.n	8005f26 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8005f1a:	187b      	adds	r3, r7, r1
 8005f1c:	1dfa      	adds	r2, r7, #7
 8005f1e:	7812      	ldrb	r2, [r2, #0]
 8005f20:	4251      	negs	r1, r2
 8005f22:	414a      	adcs	r2, r1
 8005f24:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8005f26:	1dbb      	adds	r3, r7, #6
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d107      	bne.n	8005f3e <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8005f2e:	230f      	movs	r3, #15
 8005f30:	18fb      	adds	r3, r7, r3
 8005f32:	1dfa      	adds	r2, r7, #7
 8005f34:	7812      	ldrb	r2, [r2, #0]
 8005f36:	3a02      	subs	r2, #2
 8005f38:	4251      	negs	r1, r2
 8005f3a:	414a      	adcs	r2, r1
 8005f3c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8005f3e:	1dbb      	adds	r3, r7, #6
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d107      	bne.n	8005f56 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8005f46:	230f      	movs	r3, #15
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	1dfa      	adds	r2, r7, #7
 8005f4c:	7812      	ldrb	r2, [r2, #0]
 8005f4e:	3a05      	subs	r2, #5
 8005f50:	4251      	negs	r1, r2
 8005f52:	414a      	adcs	r2, r1
 8005f54:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8005f56:	1dbb      	adds	r3, r7, #6
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b05      	cmp	r3, #5
 8005f5c:	d107      	bne.n	8005f6e <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8005f5e:	230f      	movs	r3, #15
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	1dfa      	adds	r2, r7, #7
 8005f64:	7812      	ldrb	r2, [r2, #0]
 8005f66:	3a0b      	subs	r2, #11
 8005f68:	4251      	negs	r1, r2
 8005f6a:	414a      	adcs	r2, r1
 8005f6c:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8005f6e:	230f      	movs	r3, #15
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	781b      	ldrb	r3, [r3, #0]
}
 8005f74:	0018      	movs	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b004      	add	sp, #16
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <AT_Send>:

bool AT_Send(AT_Commands state){
 8005f7c:	b590      	push	{r4, r7, lr}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	0002      	movs	r2, r0
 8005f84:	1dfb      	adds	r3, r7, #7
 8005f86:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8005f88:	230f      	movs	r3, #15
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	701a      	strb	r2, [r3, #0]
  switch (state){
 8005f90:	1dfb      	adds	r3, r7, #7
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b14      	cmp	r3, #20
 8005f96:	d900      	bls.n	8005f9a <AT_Send+0x1e>
 8005f98:	e19e      	b.n	80062d8 <AT_Send+0x35c>
 8005f9a:	009a      	lsls	r2, r3, #2
 8005f9c:	4bd2      	ldr	r3, [pc, #840]	@ (80062e8 <AT_Send+0x36c>)
 8005f9e:	18d3      	adds	r3, r2, r3
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8005fa4:	4bd1      	ldr	r3, [pc, #836]	@ (80062ec <AT_Send+0x370>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f00b fbff 	bl	80117ac <TimestampIsReached>
 8005fae:	1e03      	subs	r3, r0, #0
 8005fb0:	d100      	bne.n	8005fb4 <AT_Send+0x38>
 8005fb2:	e190      	b.n	80062d6 <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8005fb4:	4ace      	ldr	r2, [pc, #824]	@ (80062f0 <AT_Send+0x374>)
 8005fb6:	4bcf      	ldr	r3, [pc, #828]	@ (80062f4 <AT_Send+0x378>)
 8005fb8:	0019      	movs	r1, r3
 8005fba:	2003      	movs	r0, #3
 8005fbc:	f00b fc4c 	bl	8011858 <CreateLine>
    ATCommandSend = PollAwake();
 8005fc0:	230f      	movs	r3, #15
 8005fc2:	18fc      	adds	r4, r7, r3
 8005fc4:	f7ff fba0 	bl	8005708 <PollAwake>
 8005fc8:	0003      	movs	r3, r0
 8005fca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005fcc:	f00c f890 	bl	80120f0 <HAL_GetTick>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	3332      	adds	r3, #50	@ 0x32
 8005fd4:	001a      	movs	r2, r3
 8005fd6:	4bc5      	ldr	r3, [pc, #788]	@ (80062ec <AT_Send+0x370>)
 8005fd8:	601a      	str	r2, [r3, #0]
  }
  break;
 8005fda:	e17c      	b.n	80062d6 <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8005fdc:	4ac6      	ldr	r2, [pc, #792]	@ (80062f8 <AT_Send+0x37c>)
 8005fde:	4bc5      	ldr	r3, [pc, #788]	@ (80062f4 <AT_Send+0x378>)
 8005fe0:	0019      	movs	r1, r3
 8005fe2:	2003      	movs	r0, #3
 8005fe4:	f00b fc38 	bl	8011858 <CreateLine>
    ATCommandSend = RFPower();
 8005fe8:	230f      	movs	r3, #15
 8005fea:	18fc      	adds	r4, r7, r3
 8005fec:	f7ff fba8 	bl	8005740 <RFPower>
 8005ff0:	0003      	movs	r3, r0
 8005ff2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005ff4:	f00c f87c 	bl	80120f0 <HAL_GetTick>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	330a      	adds	r3, #10
 8005ffc:	001a      	movs	r2, r3
 8005ffe:	4bbb      	ldr	r3, [pc, #748]	@ (80062ec <AT_Send+0x370>)
 8006000:	601a      	str	r2, [r3, #0]
    break;
 8006002:	e169      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8006004:	4abd      	ldr	r2, [pc, #756]	@ (80062fc <AT_Send+0x380>)
 8006006:	4bbb      	ldr	r3, [pc, #748]	@ (80062f4 <AT_Send+0x378>)
 8006008:	0019      	movs	r1, r3
 800600a:	2003      	movs	r0, #3
 800600c:	f00b fc24 	bl	8011858 <CreateLine>
    ATCommandSend = CheckRFPower();
 8006010:	230f      	movs	r3, #15
 8006012:	18fc      	adds	r4, r7, r3
 8006014:	f7ff fbb0 	bl	8005778 <CheckRFPower>
 8006018:	0003      	movs	r3, r0
 800601a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800601c:	f00c f868 	bl	80120f0 <HAL_GetTick>
 8006020:	0003      	movs	r3, r0
 8006022:	330a      	adds	r3, #10
 8006024:	001a      	movs	r2, r3
 8006026:	4bb1      	ldr	r3, [pc, #708]	@ (80062ec <AT_Send+0x370>)
 8006028:	601a      	str	r2, [r3, #0]
    break;
 800602a:	e155      	b.n	80062d8 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 800602c:	4ab4      	ldr	r2, [pc, #720]	@ (8006300 <AT_Send+0x384>)
 800602e:	4bb1      	ldr	r3, [pc, #708]	@ (80062f4 <AT_Send+0x378>)
 8006030:	0019      	movs	r1, r3
 8006032:	2003      	movs	r0, #3
 8006034:	f00b fc10 	bl	8011858 <CreateLine>
    ATCommandSend = ATRestore();
 8006038:	230f      	movs	r3, #15
 800603a:	18fc      	adds	r4, r7, r3
 800603c:	f7ff fbb8 	bl	80057b0 <ATRestore>
 8006040:	0003      	movs	r3, r0
 8006042:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006044:	f00c f854 	bl	80120f0 <HAL_GetTick>
 8006048:	0003      	movs	r3, r0
 800604a:	3332      	adds	r3, #50	@ 0x32
 800604c:	001a      	movs	r2, r3
 800604e:	4ba7      	ldr	r3, [pc, #668]	@ (80062ec <AT_Send+0x370>)
 8006050:	601a      	str	r2, [r3, #0]
    break;
 8006052:	e141      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006054:	4aab      	ldr	r2, [pc, #684]	@ (8006304 <AT_Send+0x388>)
 8006056:	4ba7      	ldr	r3, [pc, #668]	@ (80062f4 <AT_Send+0x378>)
 8006058:	0019      	movs	r1, r3
 800605a:	2003      	movs	r0, #3
 800605c:	f00b fbfc 	bl	8011858 <CreateLine>
    ATCommandSend = CWINIT();
 8006060:	230f      	movs	r3, #15
 8006062:	18fc      	adds	r4, r7, r3
 8006064:	f7ff fbc0 	bl	80057e8 <CWINIT>
 8006068:	0003      	movs	r3, r0
 800606a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800606c:	f00c f840 	bl	80120f0 <HAL_GetTick>
 8006070:	0003      	movs	r3, r0
 8006072:	33f5      	adds	r3, #245	@ 0xf5
 8006074:	33ff      	adds	r3, #255	@ 0xff
 8006076:	001a      	movs	r2, r3
 8006078:	4b9c      	ldr	r3, [pc, #624]	@ (80062ec <AT_Send+0x370>)
 800607a:	601a      	str	r2, [r3, #0]
    break;
 800607c:	e12c      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 800607e:	4aa2      	ldr	r2, [pc, #648]	@ (8006308 <AT_Send+0x38c>)
 8006080:	4b9c      	ldr	r3, [pc, #624]	@ (80062f4 <AT_Send+0x378>)
 8006082:	0019      	movs	r1, r3
 8006084:	2003      	movs	r0, #3
 8006086:	f00b fbe7 	bl	8011858 <CreateLine>
    ATCommandSend = CWSTATE();
 800608a:	230f      	movs	r3, #15
 800608c:	18fc      	adds	r4, r7, r3
 800608e:	f7ff fcb9 	bl	8005a04 <CWSTATE>
 8006092:	0003      	movs	r3, r0
 8006094:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006096:	f00c f82b 	bl	80120f0 <HAL_GetTick>
 800609a:	0003      	movs	r3, r0
 800609c:	33f5      	adds	r3, #245	@ 0xf5
 800609e:	33ff      	adds	r3, #255	@ 0xff
 80060a0:	001a      	movs	r2, r3
 80060a2:	4b92      	ldr	r3, [pc, #584]	@ (80062ec <AT_Send+0x370>)
 80060a4:	601a      	str	r2, [r3, #0]
    break;
 80060a6:	e117      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80060a8:	4a98      	ldr	r2, [pc, #608]	@ (800630c <AT_Send+0x390>)
 80060aa:	4b92      	ldr	r3, [pc, #584]	@ (80062f4 <AT_Send+0x378>)
 80060ac:	0019      	movs	r1, r3
 80060ae:	2003      	movs	r0, #3
 80060b0:	f00b fbd2 	bl	8011858 <CreateLine>
    ATCommandSend = CWMODE1();
 80060b4:	230f      	movs	r3, #15
 80060b6:	18fc      	adds	r4, r7, r3
 80060b8:	f7ff fbb2 	bl	8005820 <CWMODE1>
 80060bc:	0003      	movs	r3, r0
 80060be:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80060c0:	f00c f816 	bl	80120f0 <HAL_GetTick>
 80060c4:	0003      	movs	r3, r0
 80060c6:	330a      	adds	r3, #10
 80060c8:	001a      	movs	r2, r3
 80060ca:	4b88      	ldr	r3, [pc, #544]	@ (80062ec <AT_Send+0x370>)
 80060cc:	601a      	str	r2, [r3, #0]
    break;
 80060ce:	e103      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80060d0:	4a8e      	ldr	r2, [pc, #568]	@ (800630c <AT_Send+0x390>)
 80060d2:	4b88      	ldr	r3, [pc, #544]	@ (80062f4 <AT_Send+0x378>)
 80060d4:	0019      	movs	r1, r3
 80060d6:	2003      	movs	r0, #3
 80060d8:	f00b fbbe 	bl	8011858 <CreateLine>
    ATCommandSend = CWMODE2();
 80060dc:	230f      	movs	r3, #15
 80060de:	18fc      	adds	r4, r7, r3
 80060e0:	f7ff fbba 	bl	8005858 <CWMODE2>
 80060e4:	0003      	movs	r3, r0
 80060e6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80060e8:	f00c f802 	bl	80120f0 <HAL_GetTick>
 80060ec:	0003      	movs	r3, r0
 80060ee:	330a      	adds	r3, #10
 80060f0:	001a      	movs	r2, r3
 80060f2:	4b7e      	ldr	r3, [pc, #504]	@ (80062ec <AT_Send+0x370>)
 80060f4:	601a      	str	r2, [r3, #0]
    break;
 80060f6:	e0ef      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 80060f8:	4a85      	ldr	r2, [pc, #532]	@ (8006310 <AT_Send+0x394>)
 80060fa:	4b7e      	ldr	r3, [pc, #504]	@ (80062f4 <AT_Send+0x378>)
 80060fc:	0019      	movs	r1, r3
 80060fe:	2003      	movs	r0, #3
 8006100:	f00b fbaa 	bl	8011858 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8006104:	230f      	movs	r3, #15
 8006106:	18fc      	adds	r4, r7, r3
 8006108:	f7ff fbc2 	bl	8005890 <CWAUTOCONN>
 800610c:	0003      	movs	r3, r0
 800610e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006110:	f00b ffee 	bl	80120f0 <HAL_GetTick>
 8006114:	0003      	movs	r3, r0
 8006116:	330a      	adds	r3, #10
 8006118:	001a      	movs	r2, r3
 800611a:	4b74      	ldr	r3, [pc, #464]	@ (80062ec <AT_Send+0x370>)
 800611c:	601a      	str	r2, [r3, #0]
    break;
 800611e:	e0db      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8006120:	4a7c      	ldr	r2, [pc, #496]	@ (8006314 <AT_Send+0x398>)
 8006122:	4b74      	ldr	r3, [pc, #464]	@ (80062f4 <AT_Send+0x378>)
 8006124:	0019      	movs	r1, r3
 8006126:	2003      	movs	r0, #3
 8006128:	f00b fb96 	bl	8011858 <CreateLine>
    ATCommandSend = CWJAP();
 800612c:	230f      	movs	r3, #15
 800612e:	18fc      	adds	r4, r7, r3
 8006130:	f7ff fbca 	bl	80058c8 <CWJAP>
 8006134:	0003      	movs	r3, r0
 8006136:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006138:	f00b ffda 	bl	80120f0 <HAL_GetTick>
 800613c:	0003      	movs	r3, r0
 800613e:	3332      	adds	r3, #50	@ 0x32
 8006140:	001a      	movs	r2, r3
 8006142:	4b6a      	ldr	r3, [pc, #424]	@ (80062ec <AT_Send+0x370>)
 8006144:	601a      	str	r2, [r3, #0]
    break;
 8006146:	e0c7      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8006148:	4a73      	ldr	r2, [pc, #460]	@ (8006318 <AT_Send+0x39c>)
 800614a:	4b6a      	ldr	r3, [pc, #424]	@ (80062f4 <AT_Send+0x378>)
 800614c:	0019      	movs	r1, r3
 800614e:	2003      	movs	r0, #3
 8006150:	f00b fb82 	bl	8011858 <CreateLine>
    ATCommandSend = CWMODE3();
 8006154:	230f      	movs	r3, #15
 8006156:	18fc      	adds	r4, r7, r3
 8006158:	f7ff fc38 	bl	80059cc <CWMODE3>
 800615c:	0003      	movs	r3, r0
 800615e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006160:	f00b ffc6 	bl	80120f0 <HAL_GetTick>
 8006164:	0003      	movs	r3, r0
 8006166:	330a      	adds	r3, #10
 8006168:	001a      	movs	r2, r3
 800616a:	4b60      	ldr	r3, [pc, #384]	@ (80062ec <AT_Send+0x370>)
 800616c:	601a      	str	r2, [r3, #0]
    break;
 800616e:	e0b3      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8006170:	4a6a      	ldr	r2, [pc, #424]	@ (800631c <AT_Send+0x3a0>)
 8006172:	4b60      	ldr	r3, [pc, #384]	@ (80062f4 <AT_Send+0x378>)
 8006174:	0019      	movs	r1, r3
 8006176:	2003      	movs	r0, #3
 8006178:	f00b fb6e 	bl	8011858 <CreateLine>
    ATCommandSend = CWSAP();
 800617c:	230f      	movs	r3, #15
 800617e:	18fc      	adds	r4, r7, r3
 8006180:	f7ff fc5c 	bl	8005a3c <CWSAP>
 8006184:	0003      	movs	r3, r0
 8006186:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006188:	f00b ffb2 	bl	80120f0 <HAL_GetTick>
 800618c:	0003      	movs	r3, r0
 800618e:	330a      	adds	r3, #10
 8006190:	001a      	movs	r2, r3
 8006192:	4b56      	ldr	r3, [pc, #344]	@ (80062ec <AT_Send+0x370>)
 8006194:	601a      	str	r2, [r3, #0]
    break;
 8006196:	e09f      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 8006198:	4a61      	ldr	r2, [pc, #388]	@ (8006320 <AT_Send+0x3a4>)
 800619a:	4b56      	ldr	r3, [pc, #344]	@ (80062f4 <AT_Send+0x378>)
 800619c:	0019      	movs	r1, r3
 800619e:	2003      	movs	r0, #3
 80061a0:	f00b fb5a 	bl	8011858 <CreateLine>
    ATCommandSend = CIPMUX();
 80061a4:	230f      	movs	r3, #15
 80061a6:	18fc      	adds	r4, r7, r3
 80061a8:	f7ff fc64 	bl	8005a74 <CIPMUX>
 80061ac:	0003      	movs	r3, r0
 80061ae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80061b0:	f00b ff9e 	bl	80120f0 <HAL_GetTick>
 80061b4:	0003      	movs	r3, r0
 80061b6:	330a      	adds	r3, #10
 80061b8:	001a      	movs	r2, r3
 80061ba:	4b4c      	ldr	r3, [pc, #304]	@ (80062ec <AT_Send+0x370>)
 80061bc:	601a      	str	r2, [r3, #0]
    break;
 80061be:	e08b      	b.n	80062d8 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80061c0:	4a58      	ldr	r2, [pc, #352]	@ (8006324 <AT_Send+0x3a8>)
 80061c2:	4b4c      	ldr	r3, [pc, #304]	@ (80062f4 <AT_Send+0x378>)
 80061c4:	0019      	movs	r1, r3
 80061c6:	2003      	movs	r0, #3
 80061c8:	f00b fb46 	bl	8011858 <CreateLine>
    ATCommandSend = WEBSERVER();
 80061cc:	230f      	movs	r3, #15
 80061ce:	18fc      	adds	r4, r7, r3
 80061d0:	f7ff fc6c 	bl	8005aac <WEBSERVER>
 80061d4:	0003      	movs	r3, r0
 80061d6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80061d8:	f00b ff8a 	bl	80120f0 <HAL_GetTick>
 80061dc:	0003      	movs	r3, r0
 80061de:	330a      	adds	r3, #10
 80061e0:	001a      	movs	r2, r3
 80061e2:	4b42      	ldr	r3, [pc, #264]	@ (80062ec <AT_Send+0x370>)
 80061e4:	601a      	str	r2, [r3, #0]
    break;
 80061e6:	e077      	b.n	80062d8 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80061e8:	230f      	movs	r3, #15
 80061ea:	18fc      	adds	r4, r7, r3
 80061ec:	f7ff fc7a 	bl	8005ae4 <HTTPCPOST>
 80061f0:	0003      	movs	r3, r0
 80061f2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80061f4:	f00b ff7c 	bl	80120f0 <HAL_GetTick>
 80061f8:	0003      	movs	r3, r0
 80061fa:	33f5      	adds	r3, #245	@ 0xf5
 80061fc:	33ff      	adds	r3, #255	@ 0xff
 80061fe:	001a      	movs	r2, r3
 8006200:	4b3a      	ldr	r3, [pc, #232]	@ (80062ec <AT_Send+0x370>)
 8006202:	601a      	str	r2, [r3, #0]
    break;
 8006204:	e068      	b.n	80062d8 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 8006206:	4a48      	ldr	r2, [pc, #288]	@ (8006328 <AT_Send+0x3ac>)
 8006208:	4b3a      	ldr	r3, [pc, #232]	@ (80062f4 <AT_Send+0x378>)
 800620a:	0019      	movs	r1, r3
 800620c:	2003      	movs	r0, #3
 800620e:	f00b fb23 	bl	8011858 <CreateLine>
    ATCommandSend = SENDDATA();
 8006212:	230f      	movs	r3, #15
 8006214:	18fc      	adds	r4, r7, r3
 8006216:	f7ff fccf 	bl	8005bb8 <SENDDATA>
 800621a:	0003      	movs	r3, r0
 800621c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 800621e:	f00b ff67 	bl	80120f0 <HAL_GetTick>
 8006222:	0003      	movs	r3, r0
 8006224:	33f5      	adds	r3, #245	@ 0xf5
 8006226:	33ff      	adds	r3, #255	@ 0xff
 8006228:	001a      	movs	r2, r3
 800622a:	4b30      	ldr	r3, [pc, #192]	@ (80062ec <AT_Send+0x370>)
 800622c:	601a      	str	r2, [r3, #0]
    break;
 800622e:	e053      	b.n	80062d8 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8006230:	4a3e      	ldr	r2, [pc, #248]	@ (800632c <AT_Send+0x3b0>)
 8006232:	4b30      	ldr	r3, [pc, #192]	@ (80062f4 <AT_Send+0x378>)
 8006234:	0019      	movs	r1, r3
 8006236:	2003      	movs	r0, #3
 8006238:	f00b fb0e 	bl	8011858 <CreateLine>
    ATCommandSend = SLEEP();
 800623c:	230f      	movs	r3, #15
 800623e:	18fc      	adds	r4, r7, r3
 8006240:	f7ff fce6 	bl	8005c10 <SLEEP>
 8006244:	0003      	movs	r3, r0
 8006246:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006248:	f00b ff52 	bl	80120f0 <HAL_GetTick>
 800624c:	0003      	movs	r3, r0
 800624e:	330a      	adds	r3, #10
 8006250:	001a      	movs	r2, r3
 8006252:	4b26      	ldr	r3, [pc, #152]	@ (80062ec <AT_Send+0x370>)
 8006254:	601a      	str	r2, [r3, #0]
    break;
 8006256:	e03f      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8006258:	4a35      	ldr	r2, [pc, #212]	@ (8006330 <AT_Send+0x3b4>)
 800625a:	4b26      	ldr	r3, [pc, #152]	@ (80062f4 <AT_Send+0x378>)
 800625c:	0019      	movs	r1, r3
 800625e:	2003      	movs	r0, #3
 8006260:	f00b fafa 	bl	8011858 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8006264:	230f      	movs	r3, #15
 8006266:	18fc      	adds	r4, r7, r3
 8006268:	f7ff fcee 	bl	8005c48 <CIPSNTPCFG>
 800626c:	0003      	movs	r3, r0
 800626e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006270:	f00b ff3e 	bl	80120f0 <HAL_GetTick>
 8006274:	0003      	movs	r3, r0
 8006276:	330a      	adds	r3, #10
 8006278:	001a      	movs	r2, r3
 800627a:	4b1c      	ldr	r3, [pc, #112]	@ (80062ec <AT_Send+0x370>)
 800627c:	601a      	str	r2, [r3, #0]
    break;
 800627e:	e02b      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8006280:	4a2c      	ldr	r2, [pc, #176]	@ (8006334 <AT_Send+0x3b8>)
 8006282:	4b1c      	ldr	r3, [pc, #112]	@ (80062f4 <AT_Send+0x378>)
 8006284:	0019      	movs	r1, r3
 8006286:	2003      	movs	r0, #3
 8006288:	f00b fae6 	bl	8011858 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 800628c:	230f      	movs	r3, #15
 800628e:	18fc      	adds	r4, r7, r3
 8006290:	f7ff fcfa 	bl	8005c88 <CIPSNTPTIME>
 8006294:	0003      	movs	r3, r0
 8006296:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006298:	f00b ff2a 	bl	80120f0 <HAL_GetTick>
 800629c:	0003      	movs	r3, r0
 800629e:	33f5      	adds	r3, #245	@ 0xf5
 80062a0:	33ff      	adds	r3, #255	@ 0xff
 80062a2:	001a      	movs	r2, r3
 80062a4:	4b11      	ldr	r3, [pc, #68]	@ (80062ec <AT_Send+0x370>)
 80062a6:	601a      	str	r2, [r3, #0]
    break;
 80062a8:	e016      	b.n	80062d8 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80062aa:	4a23      	ldr	r2, [pc, #140]	@ (8006338 <AT_Send+0x3bc>)
 80062ac:	4b11      	ldr	r3, [pc, #68]	@ (80062f4 <AT_Send+0x378>)
 80062ae:	0019      	movs	r1, r3
 80062b0:	2003      	movs	r0, #3
 80062b2:	f00b fad1 	bl	8011858 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80062b6:	230f      	movs	r3, #15
 80062b8:	18fc      	adds	r4, r7, r3
 80062ba:	f7ff fd01 	bl	8005cc0 <CIPSNTPINTV>
 80062be:	0003      	movs	r3, r0
 80062c0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80062c2:	f00b ff15 	bl	80120f0 <HAL_GetTick>
 80062c6:	0003      	movs	r3, r0
 80062c8:	330a      	adds	r3, #10
 80062ca:	001a      	movs	r2, r3
 80062cc:	4b07      	ldr	r3, [pc, #28]	@ (80062ec <AT_Send+0x370>)
 80062ce:	601a      	str	r2, [r3, #0]
    break;
 80062d0:	e002      	b.n	80062d8 <AT_Send+0x35c>

  case AT_END:
    break;
 80062d2:	46c0      	nop			@ (mov r8, r8)
 80062d4:	e000      	b.n	80062d8 <AT_Send+0x35c>
  break;
 80062d6:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80062d8:	230f      	movs	r3, #15
 80062da:	18fb      	adds	r3, r7, r3
 80062dc:	781b      	ldrb	r3, [r3, #0]
}
 80062de:	0018      	movs	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b005      	add	sp, #20
 80062e4:	bd90      	pop	{r4, r7, pc}
 80062e6:	46c0      	nop			@ (mov r8, r8)
 80062e8:	0802af08 	.word	0x0802af08
 80062ec:	20000680 	.word	0x20000680
 80062f0:	0802865c 	.word	0x0802865c
 80062f4:	08027bf4 	.word	0x08027bf4
 80062f8:	08028668 	.word	0x08028668
 80062fc:	0802867c 	.word	0x0802867c
 8006300:	08028690 	.word	0x08028690
 8006304:	080286a0 	.word	0x080286a0
 8006308:	080286b4 	.word	0x080286b4
 800630c:	080286cc 	.word	0x080286cc
 8006310:	080286e4 	.word	0x080286e4
 8006314:	080286fc 	.word	0x080286fc
 8006318:	08028710 	.word	0x08028710
 800631c:	0802872c 	.word	0x0802872c
 8006320:	08028748 	.word	0x08028748
 8006324:	08028764 	.word	0x08028764
 8006328:	08028780 	.word	0x08028780
 800632c:	08028790 	.word	0x08028790
 8006330:	080287b4 	.word	0x080287b4
 8006334:	080287c8 	.word	0x080287c8
 8006338:	080287e0 	.word	0x080287e0

0800633c <ESP_WakeTest>:

void ESP_WakeTest(void) {
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8006342:	1dfb      	adds	r3, r7, #7
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8006348:	4b7d      	ldr	r3, [pc, #500]	@ (8006540 <ESP_WakeTest+0x204>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b05      	cmp	r3, #5
 800634e:	d900      	bls.n	8006352 <ESP_WakeTest+0x16>
 8006350:	e0d9      	b.n	8006506 <ESP_WakeTest+0x1ca>
 8006352:	009a      	lsls	r2, r3, #2
 8006354:	4b7b      	ldr	r3, [pc, #492]	@ (8006544 <ESP_WakeTest+0x208>)
 8006356:	18d3      	adds	r3, r2, r3
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 800635c:	4b7a      	ldr	r3, [pc, #488]	@ (8006548 <ESP_WakeTest+0x20c>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2201      	movs	r2, #1
 8006362:	4053      	eors	r3, r2
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d036      	beq.n	80063d8 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800636a:	2380      	movs	r3, #128	@ 0x80
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	4877      	ldr	r0, [pc, #476]	@ (800654c <ESP_WakeTest+0x210>)
 8006370:	2200      	movs	r2, #0
 8006372:	0019      	movs	r1, r3
 8006374:	f00d f94d 	bl	8013612 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8006378:	2032      	movs	r0, #50	@ 0x32
 800637a:	f00b fec3 	bl	8012104 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800637e:	2380      	movs	r3, #128	@ 0x80
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	4872      	ldr	r0, [pc, #456]	@ (800654c <ESP_WakeTest+0x210>)
 8006384:	2201      	movs	r2, #1
 8006386:	0019      	movs	r1, r3
 8006388:	f00d f943 	bl	8013612 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800638c:	200a      	movs	r0, #10
 800638e:	f00b feb9 	bl	8012104 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006392:	4b6f      	ldr	r3, [pc, #444]	@ (8006550 <ESP_WakeTest+0x214>)
 8006394:	2200      	movs	r2, #0
 8006396:	2101      	movs	r1, #1
 8006398:	0018      	movs	r0, r3
 800639a:	f00d f93a 	bl	8013612 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800639e:	200a      	movs	r0, #10
 80063a0:	f00b feb0 	bl	8012104 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80063a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006550 <ESP_WakeTest+0x214>)
 80063a6:	2201      	movs	r2, #1
 80063a8:	2102      	movs	r1, #2
 80063aa:	0018      	movs	r0, r3
 80063ac:	f00d f931 	bl	8013612 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80063b0:	200a      	movs	r0, #10
 80063b2:	f00b fea7 	bl	8012104 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80063b6:	4b66      	ldr	r3, [pc, #408]	@ (8006550 <ESP_WakeTest+0x214>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	2101      	movs	r1, #1
 80063bc:	0018      	movs	r0, r3
 80063be:	f00d f928 	bl	8013612 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80063c2:	f00b fe95 	bl	80120f0 <HAL_GetTick>
 80063c6:	0003      	movs	r3, r0
 80063c8:	22af      	movs	r2, #175	@ 0xaf
 80063ca:	0092      	lsls	r2, r2, #2
 80063cc:	189a      	adds	r2, r3, r2
 80063ce:	4b61      	ldr	r3, [pc, #388]	@ (8006554 <ESP_WakeTest+0x218>)
 80063d0:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80063d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006548 <ESP_WakeTest+0x20c>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80063d8:	2380      	movs	r3, #128	@ 0x80
 80063da:	005a      	lsls	r2, r3, #1
 80063dc:	4b5e      	ldr	r3, [pc, #376]	@ (8006558 <ESP_WakeTest+0x21c>)
 80063de:	0011      	movs	r1, r2
 80063e0:	0018      	movs	r0, r3
 80063e2:	f7fe fa41 	bl	8004868 <ESP_Receive>
 80063e6:	1e03      	subs	r3, r0, #0
 80063e8:	d100      	bne.n	80063ec <ESP_WakeTest+0xb0>
 80063ea:	e09f      	b.n	800652c <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 80063ec:	4b54      	ldr	r3, [pc, #336]	@ (8006540 <ESP_WakeTest+0x204>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80063f2:	e09b      	b.n	800652c <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80063f4:	4b57      	ldr	r3, [pc, #348]	@ (8006554 <ESP_WakeTest+0x218>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	0018      	movs	r0, r3
 80063fa:	f00b f9d7 	bl	80117ac <TimestampIsReached>
 80063fe:	1e03      	subs	r3, r0, #0
 8006400:	d100      	bne.n	8006404 <ESP_WakeTest+0xc8>
 8006402:	e095      	b.n	8006530 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8006404:	4b55      	ldr	r3, [pc, #340]	@ (800655c <ESP_WakeTest+0x220>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	1dfc      	adds	r4, r7, #7
 800640a:	0018      	movs	r0, r3
 800640c:	f7ff fdb6 	bl	8005f7c <AT_Send>
 8006410:	0003      	movs	r3, r0
 8006412:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8006414:	1dfb      	adds	r3, r7, #7
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d100      	bne.n	800641e <ESP_WakeTest+0xe2>
 800641c:	e088      	b.n	8006530 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 800641e:	4b48      	ldr	r3, [pc, #288]	@ (8006540 <ESP_WakeTest+0x204>)
 8006420:	2202      	movs	r2, #2
 8006422:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006424:	e084      	b.n	8006530 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8006426:	4b4b      	ldr	r3, [pc, #300]	@ (8006554 <ESP_WakeTest+0x218>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	0018      	movs	r0, r3
 800642c:	f00b f9be 	bl	80117ac <TimestampIsReached>
 8006430:	1e03      	subs	r3, r0, #0
 8006432:	d100      	bne.n	8006436 <ESP_WakeTest+0xfa>
 8006434:	e07e      	b.n	8006534 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8006436:	4b4a      	ldr	r3, [pc, #296]	@ (8006560 <ESP_WakeTest+0x224>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	0018      	movs	r0, r3
 800643c:	f7ff fc5c 	bl	8005cf8 <DMA_ProcessBuffer>
 8006440:	0003      	movs	r3, r0
 8006442:	001a      	movs	r2, r3
 8006444:	4b47      	ldr	r3, [pc, #284]	@ (8006564 <ESP_WakeTest+0x228>)
 8006446:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8006448:	4b46      	ldr	r3, [pc, #280]	@ (8006564 <ESP_WakeTest+0x228>)
 800644a:	781a      	ldrb	r2, [r3, #0]
 800644c:	4b44      	ldr	r3, [pc, #272]	@ (8006560 <ESP_WakeTest+0x224>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	1dbc      	adds	r4, r7, #6
 8006452:	0019      	movs	r1, r3
 8006454:	0010      	movs	r0, r2
 8006456:	f7ff fd4f 	bl	8005ef8 <ATCompare>
 800645a:	0003      	movs	r3, r0
 800645c:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800645e:	4b41      	ldr	r3, [pc, #260]	@ (8006564 <ESP_WakeTest+0x228>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d102      	bne.n	800646c <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8006466:	4b36      	ldr	r3, [pc, #216]	@ (8006540 <ESP_WakeTest+0x204>)
 8006468:	2201      	movs	r2, #1
 800646a:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 800646c:	4b3d      	ldr	r3, [pc, #244]	@ (8006564 <ESP_WakeTest+0x228>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b07      	cmp	r3, #7
 8006472:	d104      	bne.n	800647e <ESP_WakeTest+0x142>
          StartProg();
 8006474:	f7fe ff28 	bl	80052c8 <StartProg>
          TestState = ESP_TEST_BOOT;
 8006478:	4b31      	ldr	r3, [pc, #196]	@ (8006540 <ESP_WakeTest+0x204>)
 800647a:	2205      	movs	r2, #5
 800647c:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800647e:	4b39      	ldr	r3, [pc, #228]	@ (8006564 <ESP_WakeTest+0x228>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b03      	cmp	r3, #3
 8006484:	d109      	bne.n	800649a <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8006486:	f00b fe33 	bl	80120f0 <HAL_GetTick>
 800648a:	0003      	movs	r3, r0
 800648c:	3332      	adds	r3, #50	@ 0x32
 800648e:	001a      	movs	r2, r3
 8006490:	4b30      	ldr	r3, [pc, #192]	@ (8006554 <ESP_WakeTest+0x218>)
 8006492:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8006494:	4b2a      	ldr	r3, [pc, #168]	@ (8006540 <ESP_WakeTest+0x204>)
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800649a:	1dbb      	adds	r3, r7, #6
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d048      	beq.n	8006534 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80064a2:	4b27      	ldr	r3, [pc, #156]	@ (8006540 <ESP_WakeTest+0x204>)
 80064a4:	2203      	movs	r2, #3
 80064a6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80064a8:	e044      	b.n	8006534 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80064aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006568 <ESP_WakeTest+0x22c>)
 80064ac:	22fa      	movs	r2, #250	@ 0xfa
 80064ae:	0112      	lsls	r2, r2, #4
 80064b0:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80064b2:	f009 ff21 	bl	80102f8 <Calculate_LED_ON>
 80064b6:	0003      	movs	r3, r0
 80064b8:	001a      	movs	r2, r3
 80064ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006568 <ESP_WakeTest+0x22c>)
 80064bc:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80064be:	4b2a      	ldr	r3, [pc, #168]	@ (8006568 <ESP_WakeTest+0x22c>)
 80064c0:	22fa      	movs	r2, #250	@ 0xfa
 80064c2:	0112      	lsls	r2, r2, #4
 80064c4:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80064c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006540 <ESP_WakeTest+0x204>)
 80064c8:	2204      	movs	r2, #4
 80064ca:	701a      	strb	r2, [r3, #0]

      break;
 80064cc:	e033      	b.n	8006536 <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80064ce:	4b27      	ldr	r3, [pc, #156]	@ (800656c <ESP_WakeTest+0x230>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80064d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006548 <ESP_WakeTest+0x20c>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80064da:	4b1d      	ldr	r3, [pc, #116]	@ (8006550 <ESP_WakeTest+0x214>)
 80064dc:	2200      	movs	r2, #0
 80064de:	2101      	movs	r1, #1
 80064e0:	0018      	movs	r0, r3
 80064e2:	f00d f896 	bl	8013612 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80064e6:	2380      	movs	r3, #128	@ 0x80
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	4818      	ldr	r0, [pc, #96]	@ (800654c <ESP_WakeTest+0x210>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	0019      	movs	r1, r3
 80064f0:	f00d f88f 	bl	8013612 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80064f4:	4b16      	ldr	r3, [pc, #88]	@ (8006550 <ESP_WakeTest+0x214>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	2102      	movs	r1, #2
 80064fa:	0018      	movs	r0, r3
 80064fc:	f00d f889 	bl	8013612 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8006500:	f004 ffa8 	bl	800b454 <SetESPMeasurementDone>
      break;
 8006504:	e017      	b.n	8006536 <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 8006506:	4b0e      	ldr	r3, [pc, #56]	@ (8006540 <ESP_WakeTest+0x204>)
 8006508:	2200      	movs	r2, #0
 800650a:	701a      	strb	r2, [r3, #0]
      break;
 800650c:	e013      	b.n	8006536 <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 800650e:	4b16      	ldr	r3, [pc, #88]	@ (8006568 <ESP_WakeTest+0x22c>)
 8006510:	22fa      	movs	r2, #250	@ 0xfa
 8006512:	0112      	lsls	r2, r2, #4
 8006514:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8006516:	4b14      	ldr	r3, [pc, #80]	@ (8006568 <ESP_WakeTest+0x22c>)
 8006518:	22fa      	movs	r2, #250	@ 0xfa
 800651a:	0112      	lsls	r2, r2, #4
 800651c:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 800651e:	f009 feeb 	bl	80102f8 <Calculate_LED_ON>
 8006522:	0003      	movs	r3, r0
 8006524:	001a      	movs	r2, r3
 8006526:	4b10      	ldr	r3, [pc, #64]	@ (8006568 <ESP_WakeTest+0x22c>)
 8006528:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800652a:	e004      	b.n	8006536 <ESP_WakeTest+0x1fa>
      break;
 800652c:	46c0      	nop			@ (mov r8, r8)
 800652e:	e002      	b.n	8006536 <ESP_WakeTest+0x1fa>
      break;
 8006530:	46c0      	nop			@ (mov r8, r8)
 8006532:	e000      	b.n	8006536 <ESP_WakeTest+0x1fa>
      break;
 8006534:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006536:	46c0      	nop			@ (mov r8, r8)
 8006538:	46bd      	mov	sp, r7
 800653a:	b003      	add	sp, #12
 800653c:	bd90      	pop	{r4, r7, pc}
 800653e:	46c0      	nop			@ (mov r8, r8)
 8006540:	2000068c 	.word	0x2000068c
 8006544:	0802af5c 	.word	0x0802af5c
 8006548:	200005b4 	.word	0x200005b4
 800654c:	50000800 	.word	0x50000800
 8006550:	50001c00 	.word	0x50001c00
 8006554:	20000680 	.word	0x20000680
 8006558:	200004b4 	.word	0x200004b4
 800655c:	2000068a 	.word	0x2000068a
 8006560:	20000689 	.word	0x20000689
 8006564:	2000002e 	.word	0x2000002e
 8006568:	40000400 	.word	0x40000400
 800656c:	20000001 	.word	0x20000001

08006570 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8006570:	b5b0      	push	{r4, r5, r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8006576:	1dfb      	adds	r3, r7, #7
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 800657c:	4be2      	ldr	r3, [pc, #904]	@ (8006908 <ESP_Upkeep+0x398>)
 800657e:	781a      	ldrb	r2, [r3, #0]
 8006580:	4be2      	ldr	r3, [pc, #904]	@ (800690c <ESP_Upkeep+0x39c>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d024      	beq.n	80065d2 <ESP_Upkeep+0x62>
 8006588:	f00b f9e0 	bl	801194c <GetVerboseLevel>
 800658c:	0003      	movs	r3, r0
 800658e:	2b03      	cmp	r3, #3
 8006590:	d11f      	bne.n	80065d2 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 8006592:	4bdd      	ldr	r3, [pc, #884]	@ (8006908 <ESP_Upkeep+0x398>)
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	4bdd      	ldr	r3, [pc, #884]	@ (800690c <ESP_Upkeep+0x39c>)
 8006598:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 800659a:	4bdc      	ldr	r3, [pc, #880]	@ (800690c <ESP_Upkeep+0x39c>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d103      	bne.n	80065aa <ESP_Upkeep+0x3a>
 80065a2:	4bdb      	ldr	r3, [pc, #876]	@ (8006910 <ESP_Upkeep+0x3a0>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b0e      	cmp	r3, #14
 80065a8:	d013      	beq.n	80065d2 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80065aa:	4bd8      	ldr	r3, [pc, #864]	@ (800690c <ESP_Upkeep+0x39c>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	001d      	movs	r5, r3
 80065b0:	4bd7      	ldr	r3, [pc, #860]	@ (8006910 <ESP_Upkeep+0x3a0>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	0018      	movs	r0, r3
 80065b6:	4bd7      	ldr	r3, [pc, #860]	@ (8006914 <ESP_Upkeep+0x3a4>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	001c      	movs	r4, r3
 80065bc:	4bd6      	ldr	r3, [pc, #856]	@ (8006918 <ESP_Upkeep+0x3a8>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	4ad6      	ldr	r2, [pc, #856]	@ (800691c <ESP_Upkeep+0x3ac>)
 80065c2:	49d7      	ldr	r1, [pc, #860]	@ (8006920 <ESP_Upkeep+0x3b0>)
 80065c4:	9302      	str	r3, [sp, #8]
 80065c6:	9401      	str	r4, [sp, #4]
 80065c8:	9000      	str	r0, [sp, #0]
 80065ca:	002b      	movs	r3, r5
 80065cc:	2003      	movs	r0, #3
 80065ce:	f00b f943 	bl	8011858 <CreateLine>
    }
  }
  switch (EspState) {
 80065d2:	4bcd      	ldr	r3, [pc, #820]	@ (8006908 <ESP_Upkeep+0x398>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d901      	bls.n	80065de <ESP_Upkeep+0x6e>
 80065da:	f000 fc36 	bl	8006e4a <ESP_Upkeep+0x8da>
 80065de:	009a      	lsls	r2, r3, #2
 80065e0:	4bd0      	ldr	r3, [pc, #832]	@ (8006924 <ESP_Upkeep+0x3b4>)
 80065e2:	18d3      	adds	r3, r2, r3
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80065e8:	4bc7      	ldr	r3, [pc, #796]	@ (8006908 <ESP_Upkeep+0x398>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	701a      	strb	r2, [r3, #0]
      break;
 80065ee:	f000 fc45 	bl	8006e7c <ESP_Upkeep+0x90c>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 80065f2:	f005 fa67 	bl	800bac4 <DisableConnectedDevices>
      SetESPIndicator();
 80065f6:	f00a f811 	bl	801061c <SetESPIndicator>
      if(!EspTurnedOn){
 80065fa:	4bcb      	ldr	r3, [pc, #812]	@ (8006928 <ESP_Upkeep+0x3b8>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2201      	movs	r2, #1
 8006600:	4053      	eors	r3, r2
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b00      	cmp	r3, #0
 8006606:	d036      	beq.n	8006676 <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8006608:	2380      	movs	r3, #128	@ 0x80
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	48c7      	ldr	r0, [pc, #796]	@ (800692c <ESP_Upkeep+0x3bc>)
 800660e:	2200      	movs	r2, #0
 8006610:	0019      	movs	r1, r3
 8006612:	f00c fffe 	bl	8013612 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8006616:	2001      	movs	r0, #1
 8006618:	f00b fd74 	bl	8012104 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800661c:	2380      	movs	r3, #128	@ 0x80
 800661e:	011b      	lsls	r3, r3, #4
 8006620:	48c2      	ldr	r0, [pc, #776]	@ (800692c <ESP_Upkeep+0x3bc>)
 8006622:	2201      	movs	r2, #1
 8006624:	0019      	movs	r1, r3
 8006626:	f00c fff4 	bl	8013612 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800662a:	2001      	movs	r0, #1
 800662c:	f00b fd6a 	bl	8012104 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006630:	4bbf      	ldr	r3, [pc, #764]	@ (8006930 <ESP_Upkeep+0x3c0>)
 8006632:	2200      	movs	r2, #0
 8006634:	2101      	movs	r1, #1
 8006636:	0018      	movs	r0, r3
 8006638:	f00c ffeb 	bl	8013612 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800663c:	2001      	movs	r0, #1
 800663e:	f00b fd61 	bl	8012104 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8006642:	4bbb      	ldr	r3, [pc, #748]	@ (8006930 <ESP_Upkeep+0x3c0>)
 8006644:	2201      	movs	r2, #1
 8006646:	2102      	movs	r1, #2
 8006648:	0018      	movs	r0, r3
 800664a:	f00c ffe2 	bl	8013612 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800664e:	2001      	movs	r0, #1
 8006650:	f00b fd58 	bl	8012104 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006654:	4bb6      	ldr	r3, [pc, #728]	@ (8006930 <ESP_Upkeep+0x3c0>)
 8006656:	2201      	movs	r2, #1
 8006658:	2101      	movs	r1, #1
 800665a:	0018      	movs	r0, r3
 800665c:	f00c ffd9 	bl	8013612 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8006660:	f00b fd46 	bl	80120f0 <HAL_GetTick>
 8006664:	0003      	movs	r3, r0
 8006666:	22af      	movs	r2, #175	@ 0xaf
 8006668:	0092      	lsls	r2, r2, #2
 800666a:	189a      	adds	r2, r3, r2
 800666c:	4bb1      	ldr	r3, [pc, #708]	@ (8006934 <ESP_Upkeep+0x3c4>)
 800666e:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8006670:	4bad      	ldr	r3, [pc, #692]	@ (8006928 <ESP_Upkeep+0x3b8>)
 8006672:	2201      	movs	r2, #1
 8006674:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8006676:	2380      	movs	r3, #128	@ 0x80
 8006678:	005a      	lsls	r2, r3, #1
 800667a:	4baf      	ldr	r3, [pc, #700]	@ (8006938 <ESP_Upkeep+0x3c8>)
 800667c:	0011      	movs	r1, r2
 800667e:	0018      	movs	r0, r3
 8006680:	f7fe f8f2 	bl	8004868 <ESP_Receive>
 8006684:	1e03      	subs	r3, r0, #0
 8006686:	d101      	bne.n	800668c <ESP_Upkeep+0x11c>
 8006688:	f000 fbeb 	bl	8006e62 <ESP_Upkeep+0x8f2>
        EspState = ESP_STATE_WAIT_AWAKE;
 800668c:	4b9e      	ldr	r3, [pc, #632]	@ (8006908 <ESP_Upkeep+0x398>)
 800668e:	220f      	movs	r2, #15
 8006690:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8006692:	f00b fd2d 	bl	80120f0 <HAL_GetTick>
 8006696:	0003      	movs	r3, r0
 8006698:	22fa      	movs	r2, #250	@ 0xfa
 800669a:	00d2      	lsls	r2, r2, #3
 800669c:	189a      	adds	r2, r3, r2
 800669e:	4ba7      	ldr	r3, [pc, #668]	@ (800693c <ESP_Upkeep+0x3cc>)
 80066a0:	601a      	str	r2, [r3, #0]
      }
      break;
 80066a2:	f000 fbde 	bl	8006e62 <ESP_Upkeep+0x8f2>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80066a6:	2001      	movs	r0, #1
 80066a8:	f7ff fb26 	bl	8005cf8 <DMA_ProcessBuffer>
 80066ac:	0003      	movs	r3, r0
 80066ae:	001a      	movs	r2, r3
 80066b0:	4ba3      	ldr	r3, [pc, #652]	@ (8006940 <ESP_Upkeep+0x3d0>)
 80066b2:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80066b4:	4ba2      	ldr	r3, [pc, #648]	@ (8006940 <ESP_Upkeep+0x3d0>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	1dbc      	adds	r4, r7, #6
 80066ba:	2101      	movs	r1, #1
 80066bc:	0018      	movs	r0, r3
 80066be:	f7ff fc1b 	bl	8005ef8 <ATCompare>
 80066c2:	0003      	movs	r3, r0
 80066c4:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80066c6:	1dbb      	adds	r3, r7, #6
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d108      	bne.n	80066e0 <ESP_Upkeep+0x170>
 80066ce:	4b9b      	ldr	r3, [pc, #620]	@ (800693c <ESP_Upkeep+0x3cc>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	0018      	movs	r0, r3
 80066d4:	f00b f86a 	bl	80117ac <TimestampIsReached>
 80066d8:	1e03      	subs	r3, r0, #0
 80066da:	d101      	bne.n	80066e0 <ESP_Upkeep+0x170>
 80066dc:	f000 fbc3 	bl	8006e66 <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_MODE_SELECT;
 80066e0:	4b89      	ldr	r3, [pc, #548]	@ (8006908 <ESP_Upkeep+0x398>)
 80066e2:	220b      	movs	r2, #11
 80066e4:	701a      	strb	r2, [r3, #0]
        }
        break;
 80066e6:	f000 fbbe 	bl	8006e66 <ESP_Upkeep+0x8f6>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80066ea:	4b96      	ldr	r3, [pc, #600]	@ (8006944 <ESP_Upkeep+0x3d4>)
 80066ec:	2209      	movs	r2, #9
 80066ee:	2114      	movs	r1, #20
 80066f0:	0018      	movs	r0, r3
 80066f2:	f01d fa0f 	bl	8023b14 <memset>
      if(!InitIsDone || WifiReset){
 80066f6:	4b94      	ldr	r3, [pc, #592]	@ (8006948 <ESP_Upkeep+0x3d8>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2201      	movs	r2, #1
 80066fc:	4053      	eors	r3, r2
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d103      	bne.n	800670c <ESP_Upkeep+0x19c>
 8006704:	4b91      	ldr	r3, [pc, #580]	@ (800694c <ESP_Upkeep+0x3dc>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01a      	beq.n	8006742 <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 800670c:	4b8d      	ldr	r3, [pc, #564]	@ (8006944 <ESP_Upkeep+0x3d4>)
 800670e:	4a90      	ldr	r2, [pc, #576]	@ (8006950 <ESP_Upkeep+0x3e0>)
 8006710:	6811      	ldr	r1, [r2, #0]
 8006712:	6019      	str	r1, [r3, #0]
 8006714:	8891      	ldrh	r1, [r2, #4]
 8006716:	8099      	strh	r1, [r3, #4]
 8006718:	7992      	ldrb	r2, [r2, #6]
 800671a:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 800671c:	4b7a      	ldr	r3, [pc, #488]	@ (8006908 <ESP_Upkeep+0x398>)
 800671e:	2204      	movs	r2, #4
 8006720:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8006722:	4b8c      	ldr	r3, [pc, #560]	@ (8006954 <ESP_Upkeep+0x3e4>)
 8006724:	2200      	movs	r2, #0
 8006726:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8006728:	4b7a      	ldr	r3, [pc, #488]	@ (8006914 <ESP_Upkeep+0x3a4>)
 800672a:	2200      	movs	r2, #0
 800672c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800672e:	4b89      	ldr	r3, [pc, #548]	@ (8006954 <ESP_Upkeep+0x3e4>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	001a      	movs	r2, r3
 8006734:	4b83      	ldr	r3, [pc, #524]	@ (8006944 <ESP_Upkeep+0x3d4>)
 8006736:	5c9a      	ldrb	r2, [r3, r2]
 8006738:	4b75      	ldr	r3, [pc, #468]	@ (8006910 <ESP_Upkeep+0x3a0>)
 800673a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800673c:	4b76      	ldr	r3, [pc, #472]	@ (8006918 <ESP_Upkeep+0x3a8>)
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8006742:	4b81      	ldr	r3, [pc, #516]	@ (8006948 <ESP_Upkeep+0x3d8>)
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01f      	beq.n	800678a <ESP_Upkeep+0x21a>
 800674a:	4b83      	ldr	r3, [pc, #524]	@ (8006958 <ESP_Upkeep+0x3e8>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2201      	movs	r2, #1
 8006750:	4053      	eors	r3, r2
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d018      	beq.n	800678a <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8006758:	4b7a      	ldr	r3, [pc, #488]	@ (8006944 <ESP_Upkeep+0x3d4>)
 800675a:	4a80      	ldr	r2, [pc, #512]	@ (800695c <ESP_Upkeep+0x3ec>)
 800675c:	6811      	ldr	r1, [r2, #0]
 800675e:	6019      	str	r1, [r3, #0]
 8006760:	8892      	ldrh	r2, [r2, #4]
 8006762:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8006764:	4b68      	ldr	r3, [pc, #416]	@ (8006908 <ESP_Upkeep+0x398>)
 8006766:	2204      	movs	r2, #4
 8006768:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800676a:	4b7a      	ldr	r3, [pc, #488]	@ (8006954 <ESP_Upkeep+0x3e4>)
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8006770:	4b68      	ldr	r3, [pc, #416]	@ (8006914 <ESP_Upkeep+0x3a4>)
 8006772:	2201      	movs	r2, #1
 8006774:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8006776:	4b77      	ldr	r3, [pc, #476]	@ (8006954 <ESP_Upkeep+0x3e4>)
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	001a      	movs	r2, r3
 800677c:	4b71      	ldr	r3, [pc, #452]	@ (8006944 <ESP_Upkeep+0x3d4>)
 800677e:	5c9a      	ldrb	r2, [r3, r2]
 8006780:	4b63      	ldr	r3, [pc, #396]	@ (8006910 <ESP_Upkeep+0x3a0>)
 8006782:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006784:	4b64      	ldr	r3, [pc, #400]	@ (8006918 <ESP_Upkeep+0x3a8>)
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 800678a:	4b6f      	ldr	r3, [pc, #444]	@ (8006948 <ESP_Upkeep+0x3d8>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d021      	beq.n	80067d6 <ESP_Upkeep+0x266>
 8006792:	4b71      	ldr	r3, [pc, #452]	@ (8006958 <ESP_Upkeep+0x3e8>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d01d      	beq.n	80067d6 <ESP_Upkeep+0x266>
 800679a:	4b71      	ldr	r3, [pc, #452]	@ (8006960 <ESP_Upkeep+0x3f0>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2201      	movs	r2, #1
 80067a0:	4053      	eors	r3, r2
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d016      	beq.n	80067d6 <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80067a8:	4b6e      	ldr	r3, [pc, #440]	@ (8006964 <ESP_Upkeep+0x3f4>)
 80067aa:	881a      	ldrh	r2, [r3, #0]
 80067ac:	4b65      	ldr	r3, [pc, #404]	@ (8006944 <ESP_Upkeep+0x3d4>)
 80067ae:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80067b0:	4b55      	ldr	r3, [pc, #340]	@ (8006908 <ESP_Upkeep+0x398>)
 80067b2:	2204      	movs	r2, #4
 80067b4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80067b6:	4b67      	ldr	r3, [pc, #412]	@ (8006954 <ESP_Upkeep+0x3e4>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80067bc:	4b55      	ldr	r3, [pc, #340]	@ (8006914 <ESP_Upkeep+0x3a4>)
 80067be:	2204      	movs	r2, #4
 80067c0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80067c2:	4b64      	ldr	r3, [pc, #400]	@ (8006954 <ESP_Upkeep+0x3e4>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	001a      	movs	r2, r3
 80067c8:	4b5e      	ldr	r3, [pc, #376]	@ (8006944 <ESP_Upkeep+0x3d4>)
 80067ca:	5c9a      	ldrb	r2, [r3, r2]
 80067cc:	4b50      	ldr	r3, [pc, #320]	@ (8006910 <ESP_Upkeep+0x3a0>)
 80067ce:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80067d0:	4b51      	ldr	r3, [pc, #324]	@ (8006918 <ESP_Upkeep+0x3a8>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80067d6:	4b5c      	ldr	r3, [pc, #368]	@ (8006948 <ESP_Upkeep+0x3d8>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d02c      	beq.n	8006838 <ESP_Upkeep+0x2c8>
 80067de:	4b5e      	ldr	r3, [pc, #376]	@ (8006958 <ESP_Upkeep+0x3e8>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d028      	beq.n	8006838 <ESP_Upkeep+0x2c8>
 80067e6:	4b5e      	ldr	r3, [pc, #376]	@ (8006960 <ESP_Upkeep+0x3f0>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d024      	beq.n	8006838 <ESP_Upkeep+0x2c8>
 80067ee:	4b5e      	ldr	r3, [pc, #376]	@ (8006968 <ESP_Upkeep+0x3f8>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2201      	movs	r2, #1
 80067f4:	4053      	eors	r3, r2
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01d      	beq.n	8006838 <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 80067fc:	4b51      	ldr	r3, [pc, #324]	@ (8006944 <ESP_Upkeep+0x3d4>)
 80067fe:	4a5b      	ldr	r2, [pc, #364]	@ (800696c <ESP_Upkeep+0x3fc>)
 8006800:	8811      	ldrh	r1, [r2, #0]
 8006802:	8019      	strh	r1, [r3, #0]
 8006804:	7892      	ldrb	r2, [r2, #2]
 8006806:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8006808:	4b3f      	ldr	r3, [pc, #252]	@ (8006908 <ESP_Upkeep+0x398>)
 800680a:	2204      	movs	r2, #4
 800680c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800680e:	4b51      	ldr	r3, [pc, #324]	@ (8006954 <ESP_Upkeep+0x3e4>)
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8006814:	4b3f      	ldr	r3, [pc, #252]	@ (8006914 <ESP_Upkeep+0x3a4>)
 8006816:	2202      	movs	r2, #2
 8006818:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800681a:	f00b fc69 	bl	80120f0 <HAL_GetTick>
 800681e:	0002      	movs	r2, r0
 8006820:	4b53      	ldr	r3, [pc, #332]	@ (8006970 <ESP_Upkeep+0x400>)
 8006822:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8006824:	4b4b      	ldr	r3, [pc, #300]	@ (8006954 <ESP_Upkeep+0x3e4>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	001a      	movs	r2, r3
 800682a:	4b46      	ldr	r3, [pc, #280]	@ (8006944 <ESP_Upkeep+0x3d4>)
 800682c:	5c9a      	ldrb	r2, [r3, r2]
 800682e:	4b38      	ldr	r3, [pc, #224]	@ (8006910 <ESP_Upkeep+0x3a0>)
 8006830:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006832:	4b39      	ldr	r3, [pc, #228]	@ (8006918 <ESP_Upkeep+0x3a8>)
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8006838:	4b43      	ldr	r3, [pc, #268]	@ (8006948 <ESP_Upkeep+0x3d8>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d027      	beq.n	8006890 <ESP_Upkeep+0x320>
 8006840:	4b45      	ldr	r3, [pc, #276]	@ (8006958 <ESP_Upkeep+0x3e8>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d023      	beq.n	8006890 <ESP_Upkeep+0x320>
 8006848:	4b45      	ldr	r3, [pc, #276]	@ (8006960 <ESP_Upkeep+0x3f0>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01f      	beq.n	8006890 <ESP_Upkeep+0x320>
 8006850:	4b45      	ldr	r3, [pc, #276]	@ (8006968 <ESP_Upkeep+0x3f8>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01b      	beq.n	8006890 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8006858:	4b46      	ldr	r3, [pc, #280]	@ (8006974 <ESP_Upkeep+0x404>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	4b39      	ldr	r3, [pc, #228]	@ (8006944 <ESP_Upkeep+0x3d4>)
 800685e:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8006860:	4b29      	ldr	r3, [pc, #164]	@ (8006908 <ESP_Upkeep+0x398>)
 8006862:	2204      	movs	r2, #4
 8006864:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8006866:	4b3b      	ldr	r3, [pc, #236]	@ (8006954 <ESP_Upkeep+0x3e4>)
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 800686c:	4b29      	ldr	r3, [pc, #164]	@ (8006914 <ESP_Upkeep+0x3a4>)
 800686e:	2205      	movs	r2, #5
 8006870:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8006872:	f00b fc3d 	bl	80120f0 <HAL_GetTick>
 8006876:	0002      	movs	r2, r0
 8006878:	4b3d      	ldr	r3, [pc, #244]	@ (8006970 <ESP_Upkeep+0x400>)
 800687a:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800687c:	4b35      	ldr	r3, [pc, #212]	@ (8006954 <ESP_Upkeep+0x3e4>)
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	001a      	movs	r2, r3
 8006882:	4b30      	ldr	r3, [pc, #192]	@ (8006944 <ESP_Upkeep+0x3d4>)
 8006884:	5c9a      	ldrb	r2, [r3, r2]
 8006886:	4b22      	ldr	r3, [pc, #136]	@ (8006910 <ESP_Upkeep+0x3a0>)
 8006888:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800688a:	4b23      	ldr	r3, [pc, #140]	@ (8006918 <ESP_Upkeep+0x3a8>)
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8006890:	4b39      	ldr	r3, [pc, #228]	@ (8006978 <ESP_Upkeep+0x408>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d100      	bne.n	800689a <ESP_Upkeep+0x32a>
 8006898:	e2e7      	b.n	8006e6a <ESP_Upkeep+0x8fa>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800689a:	4b2a      	ldr	r3, [pc, #168]	@ (8006944 <ESP_Upkeep+0x3d4>)
 800689c:	4a37      	ldr	r2, [pc, #220]	@ (800697c <ESP_Upkeep+0x40c>)
 800689e:	6811      	ldr	r1, [r2, #0]
 80068a0:	6019      	str	r1, [r3, #0]
 80068a2:	7912      	ldrb	r2, [r2, #4]
 80068a4:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80068a6:	4a36      	ldr	r2, [pc, #216]	@ (8006980 <ESP_Upkeep+0x410>)
 80068a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006920 <ESP_Upkeep+0x3b0>)
 80068aa:	0019      	movs	r1, r3
 80068ac:	2003      	movs	r0, #3
 80068ae:	f00a ffd3 	bl	8011858 <CreateLine>
        DisableConnectedDevices();
 80068b2:	f005 f907 	bl	800bac4 <DisableConnectedDevices>
        usblog = false;
 80068b6:	4b33      	ldr	r3, [pc, #204]	@ (8006984 <ESP_Upkeep+0x414>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80068bc:	4b12      	ldr	r3, [pc, #72]	@ (8006908 <ESP_Upkeep+0x398>)
 80068be:	2204      	movs	r2, #4
 80068c0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80068c2:	4b24      	ldr	r3, [pc, #144]	@ (8006954 <ESP_Upkeep+0x3e4>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80068c8:	4b12      	ldr	r3, [pc, #72]	@ (8006914 <ESP_Upkeep+0x3a4>)
 80068ca:	2203      	movs	r2, #3
 80068cc:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80068ce:	4b21      	ldr	r3, [pc, #132]	@ (8006954 <ESP_Upkeep+0x3e4>)
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	001a      	movs	r2, r3
 80068d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006944 <ESP_Upkeep+0x3d4>)
 80068d6:	5c9a      	ldrb	r2, [r3, r2]
 80068d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006910 <ESP_Upkeep+0x3a0>)
 80068da:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80068dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006918 <ESP_Upkeep+0x3a8>)
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
      }
    break;
 80068e2:	e2c2      	b.n	8006e6a <ESP_Upkeep+0x8fa>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 80068e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006910 <ESP_Upkeep+0x3a0>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	1dfc      	adds	r4, r7, #7
 80068ea:	0018      	movs	r0, r3
 80068ec:	f7ff fb46 	bl	8005f7c <AT_Send>
 80068f0:	0003      	movs	r3, r0
 80068f2:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80068f4:	1dfb      	adds	r3, r7, #7
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d100      	bne.n	80068fe <ESP_Upkeep+0x38e>
 80068fc:	e2b7      	b.n	8006e6e <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 80068fe:	4b02      	ldr	r3, [pc, #8]	@ (8006908 <ESP_Upkeep+0x398>)
 8006900:	2203      	movs	r2, #3
 8006902:	701a      	strb	r2, [r3, #0]
        }
    break;
 8006904:	e2b3      	b.n	8006e6e <ESP_Upkeep+0x8fe>
 8006906:	46c0      	nop			@ (mov r8, r8)
 8006908:	2000002c 	.word	0x2000002c
 800690c:	20000003 	.word	0x20000003
 8006910:	2000068a 	.word	0x2000068a
 8006914:	2000068b 	.word	0x2000068b
 8006918:	20000689 	.word	0x20000689
 800691c:	08028800 	.word	0x08028800
 8006920:	08027bf4 	.word	0x08027bf4
 8006924:	0802af74 	.word	0x0802af74
 8006928:	200005b4 	.word	0x200005b4
 800692c:	50000800 	.word	0x50000800
 8006930:	50001c00 	.word	0x50001c00
 8006934:	20000680 	.word	0x20000680
 8006938:	200004b4 	.word	0x200004b4
 800693c:	200007e4 	.word	0x200007e4
 8006940:	2000002f 	.word	0x2000002f
 8006944:	20000670 	.word	0x20000670
 8006948:	200005b5 	.word	0x200005b5
 800694c:	200005b6 	.word	0x200005b6
 8006950:	20000004 	.word	0x20000004
 8006954:	2000067a 	.word	0x2000067a
 8006958:	200005b8 	.word	0x200005b8
 800695c:	20000014 	.word	0x20000014
 8006960:	200005b9 	.word	0x200005b9
 8006964:	20000010 	.word	0x20000010
 8006968:	20000002 	.word	0x20000002
 800696c:	2000000c 	.word	0x2000000c
 8006970:	200005cc 	.word	0x200005cc
 8006974:	20000024 	.word	0x20000024
 8006978:	200005b7 	.word	0x200005b7
 800697c:	2000001c 	.word	0x2000001c
 8006980:	0802882c 	.word	0x0802882c
 8006984:	20000207 	.word	0x20000207

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006988:	4bcb      	ldr	r3, [pc, #812]	@ (8006cb8 <ESP_Upkeep+0x748>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d007      	beq.n	80069a0 <ESP_Upkeep+0x430>
 8006990:	4bca      	ldr	r3, [pc, #808]	@ (8006cbc <ESP_Upkeep+0x74c>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b03      	cmp	r3, #3
 8006996:	d003      	beq.n	80069a0 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 8006998:	4bc9      	ldr	r3, [pc, #804]	@ (8006cc0 <ESP_Upkeep+0x750>)
 800699a:	220b      	movs	r2, #11
 800699c:	701a      	strb	r2, [r3, #0]
        break;
 800699e:	e26d      	b.n	8006e7c <ESP_Upkeep+0x90c>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 80069a0:	4bc8      	ldr	r3, [pc, #800]	@ (8006cc4 <ESP_Upkeep+0x754>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	0018      	movs	r0, r3
 80069a6:	f00a ff01 	bl	80117ac <TimestampIsReached>
 80069aa:	1e03      	subs	r3, r0, #0
 80069ac:	d100      	bne.n	80069b0 <ESP_Upkeep+0x440>
 80069ae:	e260      	b.n	8006e72 <ESP_Upkeep+0x902>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80069b0:	4bc5      	ldr	r3, [pc, #788]	@ (8006cc8 <ESP_Upkeep+0x758>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	0018      	movs	r0, r3
 80069b6:	f7ff f99f 	bl	8005cf8 <DMA_ProcessBuffer>
 80069ba:	0003      	movs	r3, r0
 80069bc:	001a      	movs	r2, r3
 80069be:	4bc3      	ldr	r3, [pc, #780]	@ (8006ccc <ESP_Upkeep+0x75c>)
 80069c0:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80069c2:	4bc2      	ldr	r3, [pc, #776]	@ (8006ccc <ESP_Upkeep+0x75c>)
 80069c4:	781a      	ldrb	r2, [r3, #0]
 80069c6:	4bc0      	ldr	r3, [pc, #768]	@ (8006cc8 <ESP_Upkeep+0x758>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	1d7c      	adds	r4, r7, #5
 80069cc:	0019      	movs	r1, r3
 80069ce:	0010      	movs	r0, r2
 80069d0:	f7ff fa92 	bl	8005ef8 <ATCompare>
 80069d4:	0003      	movs	r3, r0
 80069d6:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80069d8:	4bbc      	ldr	r3, [pc, #752]	@ (8006ccc <ESP_Upkeep+0x75c>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d138      	bne.n	8006a52 <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 80069e0:	4bbb      	ldr	r3, [pc, #748]	@ (8006cd0 <ESP_Upkeep+0x760>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b0f      	cmp	r3, #15
 80069e6:	d108      	bne.n	80069fa <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 80069e8:	4bb9      	ldr	r3, [pc, #740]	@ (8006cd0 <ESP_Upkeep+0x760>)
 80069ea:	220e      	movs	r2, #14
 80069ec:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80069ee:	4bb6      	ldr	r3, [pc, #728]	@ (8006cc8 <ESP_Upkeep+0x758>)
 80069f0:	2202      	movs	r2, #2
 80069f2:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 80069f4:	4bb7      	ldr	r3, [pc, #732]	@ (8006cd4 <ESP_Upkeep+0x764>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 80069fa:	4bb1      	ldr	r3, [pc, #708]	@ (8006cc0 <ESP_Upkeep+0x750>)
 80069fc:	2204      	movs	r2, #4
 80069fe:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8006a00:	4bb5      	ldr	r3, [pc, #724]	@ (8006cd8 <ESP_Upkeep+0x768>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	3301      	adds	r3, #1
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	4bb3      	ldr	r3, [pc, #716]	@ (8006cd8 <ESP_Upkeep+0x768>)
 8006a0a:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8006a0c:	4bb2      	ldr	r3, [pc, #712]	@ (8006cd8 <ESP_Upkeep+0x768>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d91e      	bls.n	8006a52 <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8006a14:	f00b fb6c 	bl	80120f0 <HAL_GetTick>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	4ab0      	ldr	r2, [pc, #704]	@ (8006cdc <ESP_Upkeep+0x76c>)
 8006a1c:	189a      	adds	r2, r3, r2
 8006a1e:	4ba9      	ldr	r3, [pc, #676]	@ (8006cc4 <ESP_Upkeep+0x754>)
 8006a20:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8006a22:	4baf      	ldr	r3, [pc, #700]	@ (8006ce0 <ESP_Upkeep+0x770>)
 8006a24:	2201      	movs	r2, #1
 8006a26:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8006a28:	f7ff fa58 	bl	8005edc <clearDMABuffer>
            stop = HAL_GetTick();
 8006a2c:	f00b fb60 	bl	80120f0 <HAL_GetTick>
 8006a30:	0002      	movs	r2, r0
 8006a32:	4bac      	ldr	r3, [pc, #688]	@ (8006ce4 <ESP_Upkeep+0x774>)
 8006a34:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8006a36:	4bab      	ldr	r3, [pc, #684]	@ (8006ce4 <ESP_Upkeep+0x774>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4bab      	ldr	r3, [pc, #684]	@ (8006ce8 <ESP_Upkeep+0x778>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	4aaa      	ldr	r2, [pc, #680]	@ (8006cec <ESP_Upkeep+0x77c>)
 8006a42:	49ab      	ldr	r1, [pc, #684]	@ (8006cf0 <ESP_Upkeep+0x780>)
 8006a44:	2001      	movs	r0, #1
 8006a46:	f00a ff07 	bl	8011858 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8006a4a:	4b9d      	ldr	r3, [pc, #628]	@ (8006cc0 <ESP_Upkeep+0x750>)
 8006a4c:	220d      	movs	r2, #13
 8006a4e:	701a      	strb	r2, [r3, #0]
            break;
 8006a50:	e214      	b.n	8006e7c <ESP_Upkeep+0x90c>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8006a52:	4b9e      	ldr	r3, [pc, #632]	@ (8006ccc <ESP_Upkeep+0x75c>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d106      	bne.n	8006a68 <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8006a5a:	f00b fb49 	bl	80120f0 <HAL_GetTick>
 8006a5e:	0003      	movs	r3, r0
 8006a60:	330a      	adds	r3, #10
 8006a62:	001a      	movs	r2, r3
 8006a64:	4b97      	ldr	r3, [pc, #604]	@ (8006cc4 <ESP_Upkeep+0x754>)
 8006a66:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8006a68:	4b98      	ldr	r3, [pc, #608]	@ (8006ccc <ESP_Upkeep+0x75c>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b0a      	cmp	r3, #10
 8006a6e:	d106      	bne.n	8006a7e <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8006a70:	f00b fb3e 	bl	80120f0 <HAL_GetTick>
 8006a74:	0003      	movs	r3, r0
 8006a76:	330a      	adds	r3, #10
 8006a78:	001a      	movs	r2, r3
 8006a7a:	4b92      	ldr	r3, [pc, #584]	@ (8006cc4 <ESP_Upkeep+0x754>)
 8006a7c:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8006a7e:	4b93      	ldr	r3, [pc, #588]	@ (8006ccc <ESP_Upkeep+0x75c>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b06      	cmp	r3, #6
 8006a84:	d14b      	bne.n	8006b1e <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8006a86:	4b9b      	ldr	r3, [pc, #620]	@ (8006cf4 <ESP_Upkeep+0x784>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	4b99      	ldr	r3, [pc, #612]	@ (8006cf4 <ESP_Upkeep+0x784>)
 8006a90:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8006a92:	4a99      	ldr	r2, [pc, #612]	@ (8006cf8 <ESP_Upkeep+0x788>)
 8006a94:	4b96      	ldr	r3, [pc, #600]	@ (8006cf0 <ESP_Upkeep+0x780>)
 8006a96:	0019      	movs	r1, r3
 8006a98:	2001      	movs	r0, #1
 8006a9a:	f00a fedd 	bl	8011858 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8006a9e:	4b95      	ldr	r3, [pc, #596]	@ (8006cf4 <ESP_Upkeep+0x784>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d924      	bls.n	8006af0 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8006aa6:	f00b fb23 	bl	80120f0 <HAL_GetTick>
 8006aaa:	0003      	movs	r3, r0
 8006aac:	4a93      	ldr	r2, [pc, #588]	@ (8006cfc <ESP_Upkeep+0x78c>)
 8006aae:	189a      	adds	r2, r3, r2
 8006ab0:	4b84      	ldr	r3, [pc, #528]	@ (8006cc4 <ESP_Upkeep+0x754>)
 8006ab2:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8006ab4:	4b8a      	ldr	r3, [pc, #552]	@ (8006ce0 <ESP_Upkeep+0x770>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8006aba:	f7ff fa0f 	bl	8005edc <clearDMABuffer>
            stop = HAL_GetTick();
 8006abe:	f00b fb17 	bl	80120f0 <HAL_GetTick>
 8006ac2:	0002      	movs	r2, r0
 8006ac4:	4b87      	ldr	r3, [pc, #540]	@ (8006ce4 <ESP_Upkeep+0x774>)
 8006ac6:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8006ac8:	4b86      	ldr	r3, [pc, #536]	@ (8006ce4 <ESP_Upkeep+0x774>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	4b86      	ldr	r3, [pc, #536]	@ (8006ce8 <ESP_Upkeep+0x778>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	4a8b      	ldr	r2, [pc, #556]	@ (8006d00 <ESP_Upkeep+0x790>)
 8006ad4:	4986      	ldr	r1, [pc, #536]	@ (8006cf0 <ESP_Upkeep+0x780>)
 8006ad6:	2001      	movs	r0, #1
 8006ad8:	f00a febe 	bl	8011858 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8006adc:	4b78      	ldr	r3, [pc, #480]	@ (8006cc0 <ESP_Upkeep+0x750>)
 8006ade:	220d      	movs	r2, #13
 8006ae0:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8006ae2:	4b7b      	ldr	r3, [pc, #492]	@ (8006cd0 <ESP_Upkeep+0x760>)
 8006ae4:	2214      	movs	r2, #20
 8006ae6:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8006ae8:	4b77      	ldr	r3, [pc, #476]	@ (8006cc8 <ESP_Upkeep+0x758>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	701a      	strb	r2, [r3, #0]
            break;
 8006aee:	e1c5      	b.n	8006e7c <ESP_Upkeep+0x90c>
          }
          if(ATCommand != AT_SENDDATA){
 8006af0:	4b77      	ldr	r3, [pc, #476]	@ (8006cd0 <ESP_Upkeep+0x760>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b0f      	cmp	r3, #15
 8006af6:	d003      	beq.n	8006b00 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8006af8:	4b71      	ldr	r3, [pc, #452]	@ (8006cc0 <ESP_Upkeep+0x750>)
 8006afa:	2204      	movs	r2, #4
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	e00e      	b.n	8006b1e <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8006b00:	4b73      	ldr	r3, [pc, #460]	@ (8006cd0 <ESP_Upkeep+0x760>)
 8006b02:	220e      	movs	r2, #14
 8006b04:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8006b06:	4b73      	ldr	r3, [pc, #460]	@ (8006cd4 <ESP_Upkeep+0x764>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	4b71      	ldr	r3, [pc, #452]	@ (8006cd4 <ESP_Upkeep+0x764>)
 8006b10:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8006b12:	4b6d      	ldr	r3, [pc, #436]	@ (8006cc8 <ESP_Upkeep+0x758>)
 8006b14:	2202      	movs	r2, #2
 8006b16:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8006b18:	4b69      	ldr	r3, [pc, #420]	@ (8006cc0 <ESP_Upkeep+0x750>)
 8006b1a:	2204      	movs	r2, #4
 8006b1c:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8006b1e:	1d7b      	adds	r3, r7, #5
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d100      	bne.n	8006b28 <ESP_Upkeep+0x5b8>
 8006b26:	e1a4      	b.n	8006e72 <ESP_Upkeep+0x902>
          EspState = ESP_STATE_NEXT_AT;
 8006b28:	4b65      	ldr	r3, [pc, #404]	@ (8006cc0 <ESP_Upkeep+0x750>)
 8006b2a:	2205      	movs	r2, #5
 8006b2c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006b2e:	e1a0      	b.n	8006e72 <ESP_Upkeep+0x902>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8006b30:	4b68      	ldr	r3, [pc, #416]	@ (8006cd4 <ESP_Upkeep+0x764>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	3301      	adds	r3, #1
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	4b66      	ldr	r3, [pc, #408]	@ (8006cd4 <ESP_Upkeep+0x764>)
 8006b3a:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8006b3c:	4b65      	ldr	r3, [pc, #404]	@ (8006cd4 <ESP_Upkeep+0x764>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	001a      	movs	r2, r3
 8006b42:	4b70      	ldr	r3, [pc, #448]	@ (8006d04 <ESP_Upkeep+0x794>)
 8006b44:	5c9a      	ldrb	r2, [r3, r2]
 8006b46:	4b62      	ldr	r3, [pc, #392]	@ (8006cd0 <ESP_Upkeep+0x760>)
 8006b48:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8006b4a:	4b61      	ldr	r3, [pc, #388]	@ (8006cd0 <ESP_Upkeep+0x760>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d102      	bne.n	8006b58 <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8006b52:	4b5d      	ldr	r3, [pc, #372]	@ (8006cc8 <ESP_Upkeep+0x758>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8006b58:	4b5d      	ldr	r3, [pc, #372]	@ (8006cd0 <ESP_Upkeep+0x760>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b0e      	cmp	r3, #14
 8006b5e:	d102      	bne.n	8006b66 <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8006b60:	4b59      	ldr	r3, [pc, #356]	@ (8006cc8 <ESP_Upkeep+0x758>)
 8006b62:	2202      	movs	r2, #2
 8006b64:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8006b66:	4b5a      	ldr	r3, [pc, #360]	@ (8006cd0 <ESP_Upkeep+0x760>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b0e      	cmp	r3, #14
 8006b6c:	d006      	beq.n	8006b7c <ESP_Upkeep+0x60c>
 8006b6e:	4b58      	ldr	r3, [pc, #352]	@ (8006cd0 <ESP_Upkeep+0x760>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d002      	beq.n	8006b7c <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8006b76:	4b54      	ldr	r3, [pc, #336]	@ (8006cc8 <ESP_Upkeep+0x758>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8006b7c:	4b54      	ldr	r3, [pc, #336]	@ (8006cd0 <ESP_Upkeep+0x760>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b11      	cmp	r3, #17
 8006b82:	d102      	bne.n	8006b8a <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8006b84:	4b50      	ldr	r3, [pc, #320]	@ (8006cc8 <ESP_Upkeep+0x758>)
 8006b86:	2205      	movs	r2, #5
 8006b88:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8006b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8006cc0 <ESP_Upkeep+0x750>)
 8006b8c:	2204      	movs	r2, #4
 8006b8e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8006b90:	4b4f      	ldr	r3, [pc, #316]	@ (8006cd0 <ESP_Upkeep+0x760>)
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b14      	cmp	r3, #20
 8006b96:	d000      	beq.n	8006b9a <ESP_Upkeep+0x62a>
 8006b98:	e16d      	b.n	8006e76 <ESP_Upkeep+0x906>
        if(Mode == AT_MODE_SEND){
 8006b9a:	4b48      	ldr	r3, [pc, #288]	@ (8006cbc <ESP_Upkeep+0x74c>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d124      	bne.n	8006bec <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8006ba2:	f00b faa5 	bl	80120f0 <HAL_GetTick>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	4a4c      	ldr	r2, [pc, #304]	@ (8006cdc <ESP_Upkeep+0x76c>)
 8006baa:	189a      	adds	r2, r3, r2
 8006bac:	4b45      	ldr	r3, [pc, #276]	@ (8006cc4 <ESP_Upkeep+0x754>)
 8006bae:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8006bb0:	f7ff f994 	bl	8005edc <clearDMABuffer>
          stop = HAL_GetTick();
 8006bb4:	f00b fa9c 	bl	80120f0 <HAL_GetTick>
 8006bb8:	0002      	movs	r2, r0
 8006bba:	4b4a      	ldr	r3, [pc, #296]	@ (8006ce4 <ESP_Upkeep+0x774>)
 8006bbc:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8006bbe:	4b49      	ldr	r3, [pc, #292]	@ (8006ce4 <ESP_Upkeep+0x774>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4b49      	ldr	r3, [pc, #292]	@ (8006ce8 <ESP_Upkeep+0x778>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	4a4f      	ldr	r2, [pc, #316]	@ (8006d08 <ESP_Upkeep+0x798>)
 8006bca:	4950      	ldr	r1, [pc, #320]	@ (8006d0c <ESP_Upkeep+0x79c>)
 8006bcc:	2002      	movs	r0, #2
 8006bce:	f00a fe43 	bl	8011858 <CreateLine>
          ResetdBAmax();
 8006bd2:	f004 fffb 	bl	800bbcc <ResetdBAmax>
          resetMaxMeasurementValues();
 8006bd6:	f7fd fd9f 	bl	8004718 <resetMaxMeasurementValues>
          showTime();
 8006bda:	f001 f96f 	bl	8007ebc <showTime>
          ESPTransmitDone = true;
 8006bde:	4b40      	ldr	r3, [pc, #256]	@ (8006ce0 <ESP_Upkeep+0x770>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8006be4:	4b36      	ldr	r3, [pc, #216]	@ (8006cc0 <ESP_Upkeep+0x750>)
 8006be6:	220d      	movs	r2, #13
 8006be8:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8006bea:	e144      	b.n	8006e76 <ESP_Upkeep+0x906>
        else if (Mode == AT_MODE_GETTIME) {
 8006bec:	4b33      	ldr	r3, [pc, #204]	@ (8006cbc <ESP_Upkeep+0x74c>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b05      	cmp	r3, #5
 8006bf2:	d12f      	bne.n	8006c54 <ESP_Upkeep+0x6e4>
            setTime = false;
 8006bf4:	4b46      	ldr	r3, [pc, #280]	@ (8006d10 <ESP_Upkeep+0x7a0>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8006bfa:	f001 f9b1 	bl	8007f60 <calculateNextNTPTime>
 8006bfe:	0002      	movs	r2, r0
 8006c00:	4b44      	ldr	r3, [pc, #272]	@ (8006d14 <ESP_Upkeep+0x7a4>)
 8006c02:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8006c04:	4b43      	ldr	r3, [pc, #268]	@ (8006d14 <ESP_Upkeep+0x7a4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a43      	ldr	r2, [pc, #268]	@ (8006d18 <ESP_Upkeep+0x7a8>)
 8006c0a:	189a      	adds	r2, r3, r2
 8006c0c:	4b41      	ldr	r3, [pc, #260]	@ (8006d14 <ESP_Upkeep+0x7a4>)
 8006c0e:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8006c10:	4b41      	ldr	r3, [pc, #260]	@ (8006d18 <ESP_Upkeep+0x7a8>)
 8006c12:	4a42      	ldr	r2, [pc, #264]	@ (8006d1c <ESP_Upkeep+0x7ac>)
 8006c14:	493d      	ldr	r1, [pc, #244]	@ (8006d0c <ESP_Upkeep+0x79c>)
 8006c16:	2002      	movs	r0, #2
 8006c18:	f00a fe1e 	bl	8011858 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8006c1c:	4b40      	ldr	r3, [pc, #256]	@ (8006d20 <ESP_Upkeep+0x7b0>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4b28      	ldr	r3, [pc, #160]	@ (8006cc4 <ESP_Upkeep+0x754>)
 8006c22:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8006c24:	f7ff f95a 	bl	8005edc <clearDMABuffer>
            stop = HAL_GetTick();
 8006c28:	f00b fa62 	bl	80120f0 <HAL_GetTick>
 8006c2c:	0002      	movs	r2, r0
 8006c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ce4 <ESP_Upkeep+0x774>)
 8006c30:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8006c32:	4b2c      	ldr	r3, [pc, #176]	@ (8006ce4 <ESP_Upkeep+0x774>)
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	4b2c      	ldr	r3, [pc, #176]	@ (8006ce8 <ESP_Upkeep+0x778>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	4a39      	ldr	r2, [pc, #228]	@ (8006d24 <ESP_Upkeep+0x7b4>)
 8006c3e:	4933      	ldr	r1, [pc, #204]	@ (8006d0c <ESP_Upkeep+0x79c>)
 8006c40:	2002      	movs	r0, #2
 8006c42:	f00a fe09 	bl	8011858 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8006c46:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc0 <ESP_Upkeep+0x750>)
 8006c48:	220d      	movs	r2, #13
 8006c4a:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8006c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cbc <ESP_Upkeep+0x74c>)
 8006c4e:	2202      	movs	r2, #2
 8006c50:	701a      	strb	r2, [r3, #0]
    break;
 8006c52:	e110      	b.n	8006e76 <ESP_Upkeep+0x906>
          EspState = ESP_STATE_RESET;
 8006c54:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc0 <ESP_Upkeep+0x750>)
 8006c56:	2209      	movs	r2, #9
 8006c58:	701a      	strb	r2, [r3, #0]
    break;
 8006c5a:	e10c      	b.n	8006e76 <ESP_Upkeep+0x906>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8006c5c:	4b32      	ldr	r3, [pc, #200]	@ (8006d28 <ESP_Upkeep+0x7b8>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006c62:	4b32      	ldr	r3, [pc, #200]	@ (8006d2c <ESP_Upkeep+0x7bc>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	2101      	movs	r1, #1
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f00c fcd2 	bl	8013612 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8006c6e:	2001      	movs	r0, #1
 8006c70:	f00b fa48 	bl	8012104 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8006c74:	2380      	movs	r3, #128	@ 0x80
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	482d      	ldr	r0, [pc, #180]	@ (8006d30 <ESP_Upkeep+0x7c0>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	0019      	movs	r1, r3
 8006c7e:	f00c fcc8 	bl	8013612 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8006c82:	2001      	movs	r0, #1
 8006c84:	f00b fa3e 	bl	8012104 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8006c88:	4b28      	ldr	r3, [pc, #160]	@ (8006d2c <ESP_Upkeep+0x7bc>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2102      	movs	r1, #2
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f00c fcbf 	bl	8013612 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8006c94:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc0 <ESP_Upkeep+0x750>)
 8006c96:	2209      	movs	r2, #9
 8006c98:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8006c9a:	f004 fed5 	bl	800ba48 <EnabledConnectedDevices>
      HAL_Delay(1);
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	f00b fa30 	bl	8012104 <HAL_Delay>
      ResetESPIndicator();
 8006ca4:	f009 fcd2 	bl	801064c <ResetESPIndicator>
      errorcntr = 0;
 8006ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd8 <ESP_Upkeep+0x768>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8006cae:	4b11      	ldr	r3, [pc, #68]	@ (8006cf4 <ESP_Upkeep+0x784>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
      break;
 8006cb4:	e0e2      	b.n	8006e7c <ESP_Upkeep+0x90c>
 8006cb6:	46c0      	nop			@ (mov r8, r8)
 8006cb8:	200005b7 	.word	0x200005b7
 8006cbc:	2000068b 	.word	0x2000068b
 8006cc0:	2000002c 	.word	0x2000002c
 8006cc4:	20000680 	.word	0x20000680
 8006cc8:	20000689 	.word	0x20000689
 8006ccc:	2000002f 	.word	0x2000002f
 8006cd0:	2000068a 	.word	0x2000068a
 8006cd4:	2000067a 	.word	0x2000067a
 8006cd8:	2000067b 	.word	0x2000067b
 8006cdc:	0003a980 	.word	0x0003a980
 8006ce0:	200005bc 	.word	0x200005bc
 8006ce4:	200005d0 	.word	0x200005d0
 8006ce8:	200005cc 	.word	0x200005cc
 8006cec:	0802885c 	.word	0x0802885c
 8006cf0:	08027c18 	.word	0x08027c18
 8006cf4:	2000067c 	.word	0x2000067c
 8006cf8:	08028890 	.word	0x08028890
 8006cfc:	0000c350 	.word	0x0000c350
 8006d00:	080288cc 	.word	0x080288cc
 8006d04:	20000670 	.word	0x20000670
 8006d08:	080288fc 	.word	0x080288fc
 8006d0c:	08028914 	.word	0x08028914
 8006d10:	20000002 	.word	0x20000002
 8006d14:	20000684 	.word	0x20000684
 8006d18:	00012686 	.word	0x00012686
 8006d1c:	08028918 	.word	0x08028918
 8006d20:	20000028 	.word	0x20000028
 8006d24:	0802895c 	.word	0x0802895c
 8006d28:	200005b4 	.word	0x200005b4
 8006d2c:	50001c00 	.word	0x50001c00
 8006d30:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8006d34:	4b54      	ldr	r3, [pc, #336]	@ (8006e88 <ESP_Upkeep+0x918>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f00a fd37 	bl	80117ac <TimestampIsReached>
 8006d3e:	1e03      	subs	r3, r0, #0
 8006d40:	d103      	bne.n	8006d4a <ESP_Upkeep+0x7da>
 8006d42:	4b52      	ldr	r3, [pc, #328]	@ (8006e8c <ESP_Upkeep+0x91c>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d043      	beq.n	8006dd2 <ESP_Upkeep+0x862>
        ESPTransmitDone = false;
 8006d4a:	4b51      	ldr	r3, [pc, #324]	@ (8006e90 <ESP_Upkeep+0x920>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8006d50:	4b50      	ldr	r3, [pc, #320]	@ (8006e94 <ESP_Upkeep+0x924>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d105      	bne.n	8006d64 <ESP_Upkeep+0x7f4>
          InitIsDone = true;
 8006d58:	4b4f      	ldr	r3, [pc, #316]	@ (8006e98 <ESP_Upkeep+0x928>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8006d5e:	4b4f      	ldr	r3, [pc, #316]	@ (8006e9c <ESP_Upkeep+0x92c>)
 8006d60:	220b      	movs	r2, #11
 8006d62:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8006d64:	4b4b      	ldr	r3, [pc, #300]	@ (8006e94 <ESP_Upkeep+0x924>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d108      	bne.n	8006d7e <ESP_Upkeep+0x80e>
          ConnectionMade = true;
 8006d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8006ea0 <ESP_Upkeep+0x930>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8006d72:	4b4c      	ldr	r3, [pc, #304]	@ (8006ea4 <ESP_Upkeep+0x934>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8006d78:	4b48      	ldr	r3, [pc, #288]	@ (8006e9c <ESP_Upkeep+0x92c>)
 8006d7a:	220b      	movs	r2, #11
 8006d7c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8006d7e:	4b45      	ldr	r3, [pc, #276]	@ (8006e94 <ESP_Upkeep+0x924>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d102      	bne.n	8006d8c <ESP_Upkeep+0x81c>
          EspState = ESP_STATE_INIT;
 8006d86:	4b45      	ldr	r3, [pc, #276]	@ (8006e9c <ESP_Upkeep+0x92c>)
 8006d88:	2202      	movs	r2, #2
 8006d8a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8006d8c:	4b41      	ldr	r3, [pc, #260]	@ (8006e94 <ESP_Upkeep+0x924>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d108      	bne.n	8006da6 <ESP_Upkeep+0x836>
          EspState = ESP_STATE_CONFIG;
 8006d94:	4b41      	ldr	r3, [pc, #260]	@ (8006e9c <ESP_Upkeep+0x92c>)
 8006d96:	220e      	movs	r2, #14
 8006d98:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8006d9a:	4a43      	ldr	r2, [pc, #268]	@ (8006ea8 <ESP_Upkeep+0x938>)
 8006d9c:	4b43      	ldr	r3, [pc, #268]	@ (8006eac <ESP_Upkeep+0x93c>)
 8006d9e:	0019      	movs	r1, r3
 8006da0:	2002      	movs	r0, #2
 8006da2:	f00a fd59 	bl	8011858 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8006da6:	4b3b      	ldr	r3, [pc, #236]	@ (8006e94 <ESP_Upkeep+0x924>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d105      	bne.n	8006dba <ESP_Upkeep+0x84a>
          EspState = ESP_STATE_MODE_SELECT;
 8006dae:	4b3b      	ldr	r3, [pc, #236]	@ (8006e9c <ESP_Upkeep+0x92c>)
 8006db0:	220b      	movs	r2, #11
 8006db2:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8006db4:	4b3e      	ldr	r3, [pc, #248]	@ (8006eb0 <ESP_Upkeep+0x940>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006dba:	4b34      	ldr	r3, [pc, #208]	@ (8006e8c <ESP_Upkeep+0x91c>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d020      	beq.n	8006e04 <ESP_Upkeep+0x894>
 8006dc2:	4b34      	ldr	r3, [pc, #208]	@ (8006e94 <ESP_Upkeep+0x924>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	d01c      	beq.n	8006e04 <ESP_Upkeep+0x894>
          EspState = ESP_STATE_INIT;
 8006dca:	4b34      	ldr	r3, [pc, #208]	@ (8006e9c <ESP_Upkeep+0x92c>)
 8006dcc:	2202      	movs	r2, #2
 8006dce:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006dd0:	e018      	b.n	8006e04 <ESP_Upkeep+0x894>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8006dd2:	f001 f8c5 	bl	8007f60 <calculateNextNTPTime>
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	4b36      	ldr	r3, [pc, #216]	@ (8006eb4 <ESP_Upkeep+0x944>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d94c      	bls.n	8006e7a <ESP_Upkeep+0x90a>
        if(Mode == AT_MODE_SEND ) {
 8006de0:	4b2c      	ldr	r3, [pc, #176]	@ (8006e94 <ESP_Upkeep+0x924>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d148      	bne.n	8006e7a <ESP_Upkeep+0x90a>
           Mode = AT_MODE_GETTIME;
 8006de8:	4b2a      	ldr	r3, [pc, #168]	@ (8006e94 <ESP_Upkeep+0x924>)
 8006dea:	2205      	movs	r2, #5
 8006dec:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8006dee:	4b2b      	ldr	r3, [pc, #172]	@ (8006e9c <ESP_Upkeep+0x92c>)
 8006df0:	2202      	movs	r2, #2
 8006df2:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8006df4:	4b24      	ldr	r3, [pc, #144]	@ (8006e88 <ESP_Upkeep+0x918>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	4b2f      	ldr	r3, [pc, #188]	@ (8006eb8 <ESP_Upkeep+0x948>)
 8006dfa:	601a      	str	r2, [r3, #0]
           setTime = true;
 8006dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8006ebc <ESP_Upkeep+0x94c>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8006e02:	e03a      	b.n	8006e7a <ESP_Upkeep+0x90a>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8006e04:	46c0      	nop			@ (mov r8, r8)
      break;
 8006e06:	e038      	b.n	8006e7a <ESP_Upkeep+0x90a>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8006e08:	4b2d      	ldr	r3, [pc, #180]	@ (8006ec0 <ESP_Upkeep+0x950>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	4053      	eors	r3, r2
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d008      	beq.n	8006e28 <ESP_Upkeep+0x8b8>
        Info("Do nothing until reset");
 8006e16:	4a24      	ldr	r2, [pc, #144]	@ (8006ea8 <ESP_Upkeep+0x938>)
 8006e18:	4b24      	ldr	r3, [pc, #144]	@ (8006eac <ESP_Upkeep+0x93c>)
 8006e1a:	0019      	movs	r1, r3
 8006e1c:	2002      	movs	r0, #2
 8006e1e:	f00a fd1b 	bl	8011858 <CreateLine>
        msgdone = true;
 8006e22:	4b27      	ldr	r3, [pc, #156]	@ (8006ec0 <ESP_Upkeep+0x950>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8006e28:	f019 fc3a 	bl	80206a0 <GetUsbRxPointer>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f000 f97e 	bl	8007130 <Process_PC_Config>
      break;
 8006e34:	e022      	b.n	8006e7c <ESP_Upkeep+0x90c>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8006e36:	4a23      	ldr	r2, [pc, #140]	@ (8006ec4 <ESP_Upkeep+0x954>)
 8006e38:	4b23      	ldr	r3, [pc, #140]	@ (8006ec8 <ESP_Upkeep+0x958>)
 8006e3a:	0019      	movs	r1, r3
 8006e3c:	2001      	movs	r0, #1
 8006e3e:	f00a fd0b 	bl	8011858 <CreateLine>
      EspState = ESP_STATE_INIT;
 8006e42:	4b16      	ldr	r3, [pc, #88]	@ (8006e9c <ESP_Upkeep+0x92c>)
 8006e44:	2202      	movs	r2, #2
 8006e46:	701a      	strb	r2, [r3, #0]
      break;
 8006e48:	e018      	b.n	8006e7c <ESP_Upkeep+0x90c>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8006e4a:	4a20      	ldr	r2, [pc, #128]	@ (8006ecc <ESP_Upkeep+0x95c>)
 8006e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ec8 <ESP_Upkeep+0x958>)
 8006e4e:	0019      	movs	r1, r3
 8006e50:	2001      	movs	r0, #1
 8006e52:	f00a fd01 	bl	8011858 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8006e56:	4b11      	ldr	r3, [pc, #68]	@ (8006e9c <ESP_Upkeep+0x92c>)
 8006e58:	2207      	movs	r2, #7
 8006e5a:	701a      	strb	r2, [r3, #0]
      break;
 8006e5c:	e00e      	b.n	8006e7c <ESP_Upkeep+0x90c>
      break;
 8006e5e:	46c0      	nop			@ (mov r8, r8)
 8006e60:	e00c      	b.n	8006e7c <ESP_Upkeep+0x90c>
      break;
 8006e62:	46c0      	nop			@ (mov r8, r8)
 8006e64:	e00a      	b.n	8006e7c <ESP_Upkeep+0x90c>
        break;
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	e008      	b.n	8006e7c <ESP_Upkeep+0x90c>
    break;
 8006e6a:	46c0      	nop			@ (mov r8, r8)
 8006e6c:	e006      	b.n	8006e7c <ESP_Upkeep+0x90c>
    break;
 8006e6e:	46c0      	nop			@ (mov r8, r8)
 8006e70:	e004      	b.n	8006e7c <ESP_Upkeep+0x90c>
      break;
 8006e72:	46c0      	nop			@ (mov r8, r8)
 8006e74:	e002      	b.n	8006e7c <ESP_Upkeep+0x90c>
    break;
 8006e76:	46c0      	nop			@ (mov r8, r8)
 8006e78:	e000      	b.n	8006e7c <ESP_Upkeep+0x90c>
      break;
 8006e7a:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8006e7c:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <ESP_Upkeep+0x92c>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
}
 8006e80:	0018      	movs	r0, r3
 8006e82:	46bd      	mov	sp, r7
 8006e84:	b002      	add	sp, #8
 8006e86:	bdb0      	pop	{r4, r5, r7, pc}
 8006e88:	20000680 	.word	0x20000680
 8006e8c:	200005b7 	.word	0x200005b7
 8006e90:	200005bc 	.word	0x200005bc
 8006e94:	2000068b 	.word	0x2000068b
 8006e98:	200005b5 	.word	0x200005b5
 8006e9c:	2000002c 	.word	0x2000002c
 8006ea0:	200005b8 	.word	0x200005b8
 8006ea4:	200005ba 	.word	0x200005ba
 8006ea8:	0802897c 	.word	0x0802897c
 8006eac:	08028914 	.word	0x08028914
 8006eb0:	200005b9 	.word	0x200005b9
 8006eb4:	20000684 	.word	0x20000684
 8006eb8:	20000028 	.word	0x20000028
 8006ebc:	20000002 	.word	0x20000002
 8006ec0:	200005bb 	.word	0x200005bb
 8006ec4:	08028994 	.word	0x08028994
 8006ec8:	08027c18 	.word	0x08027c18
 8006ecc:	080289a8 	.word	0x080289a8

08006ed0 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8006ed8:	4b12      	ldr	r3, [pc, #72]	@ (8006f24 <I2CSensors_Init+0x54>)
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8006ede:	4a12      	ldr	r2, [pc, #72]	@ (8006f28 <I2CSensors_Init+0x58>)
 8006ee0:	4b12      	ldr	r3, [pc, #72]	@ (8006f2c <I2CSensors_Init+0x5c>)
 8006ee2:	0011      	movs	r1, r2
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f00a fe1b 	bl	8011b20 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 8006eea:	4a0f      	ldr	r2, [pc, #60]	@ (8006f28 <I2CSensors_Init+0x58>)
 8006eec:	4b0f      	ldr	r3, [pc, #60]	@ (8006f2c <I2CSensors_Init+0x5c>)
 8006eee:	0011      	movs	r1, r2
 8006ef0:	0018      	movs	r0, r3
 8006ef2:	f007 fd83 	bl	800e9fc <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8006ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8006f30 <I2CSensors_Init+0x60>)
 8006ef8:	490b      	ldr	r1, [pc, #44]	@ (8006f28 <I2CSensors_Init+0x58>)
 8006efa:	4b0c      	ldr	r3, [pc, #48]	@ (8006f2c <I2CSensors_Init+0x5c>)
 8006efc:	0018      	movs	r0, r3
 8006efe:	f001 ff6f 	bl	8008de0 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8006f02:	4a0c      	ldr	r2, [pc, #48]	@ (8006f34 <I2CSensors_Init+0x64>)
 8006f04:	4b0c      	ldr	r3, [pc, #48]	@ (8006f38 <I2CSensors_Init+0x68>)
 8006f06:	0011      	movs	r1, r2
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f002 fd25 	bl	8009958 <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 8006f0e:	4a09      	ldr	r2, [pc, #36]	@ (8006f34 <I2CSensors_Init+0x64>)
 8006f10:	4b09      	ldr	r3, [pc, #36]	@ (8006f38 <I2CSensors_Init+0x68>)
 8006f12:	0011      	movs	r1, r2
 8006f14:	0018      	movs	r0, r3
 8006f16:	f7fc fc0d 	bl	8003734 <ENS_Init>
}
 8006f1a:	46c0      	nop			@ (mov r8, r8)
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	b002      	add	sp, #8
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	46c0      	nop			@ (mov r8, r8)
 8006f24:	200007e8 	.word	0x200007e8
 8006f28:	08006fe9 	.word	0x08006fe9
 8006f2c:	08006f95 	.word	0x08006f95
 8006f30:	08006f3d 	.word	0x08006f3d
 8006f34:	080070b9 	.word	0x080070b9
 8006f38:	0800703d 	.word	0x0800703d

08006f3c <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3e:	b087      	sub	sp, #28
 8006f40:	af02      	add	r7, sp, #8
 8006f42:	6039      	str	r1, [r7, #0]
 8006f44:	0011      	movs	r1, r2
 8006f46:	1dfb      	adds	r3, r7, #7
 8006f48:	1c02      	adds	r2, r0, #0
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	1dbb      	adds	r3, r7, #6
 8006f4e:	1c0a      	adds	r2, r1, #0
 8006f50:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 8006f52:	4b0f      	ldr	r3, [pc, #60]	@ (8006f90 <ReadI2CDirect+0x54>)
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	1dfb      	adds	r3, r7, #7
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	18db      	adds	r3, r3, r3
 8006f5e:	b299      	uxth	r1, r3
 8006f60:	1dbb      	adds	r3, r7, #6
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	260f      	movs	r6, #15
 8006f68:	19bc      	adds	r4, r7, r6
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	25fa      	movs	r5, #250	@ 0xfa
 8006f6e:	9500      	str	r5, [sp, #0]
 8006f70:	f00c fd26 	bl	80139c0 <HAL_I2C_Master_Receive>
 8006f74:	0003      	movs	r3, r0
 8006f76:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006f78:	19bb      	adds	r3, r7, r6
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <ReadI2CDirect+0x48>
        return false;
 8006f80:	2300      	movs	r3, #0
 8006f82:	e000      	b.n	8006f86 <ReadI2CDirect+0x4a>
    }
    return true;
 8006f84:	2301      	movs	r3, #1
}
 8006f86:	0018      	movs	r0, r3
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	b005      	add	sp, #20
 8006f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f8e:	46c0      	nop			@ (mov r8, r8)
 8006f90:	200007e8 	.word	0x200007e8

08006f94 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006f94:	b5b0      	push	{r4, r5, r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6039      	str	r1, [r7, #0]
 8006f9c:	0011      	movs	r1, r2
 8006f9e:	1dfb      	adds	r3, r7, #7
 8006fa0:	1c02      	adds	r2, r0, #0
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	1dbb      	adds	r3, r7, #6
 8006fa6:	1c0a      	adds	r2, r1, #0
 8006fa8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006faa:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe4 <ReadI2C+0x50>)
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	1dfb      	adds	r3, r7, #7
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	18db      	adds	r3, r3, r3
 8006fb6:	b299      	uxth	r1, r3
 8006fb8:	1dbb      	adds	r3, r7, #6
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	250f      	movs	r5, #15
 8006fc0:	197c      	adds	r4, r7, r5
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	f00c ff0a 	bl	8013ddc <HAL_I2C_Master_Receive_DMA>
 8006fc8:	0003      	movs	r3, r0
 8006fca:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006fcc:	197b      	adds	r3, r7, r5
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <ReadI2C+0x44>
        return false;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <ReadI2C+0x46>
    }
    return true;
 8006fd8:	2301      	movs	r3, #1
}
 8006fda:	0018      	movs	r0, r3
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	b004      	add	sp, #16
 8006fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8006fe2:	46c0      	nop			@ (mov r8, r8)
 8006fe4:	200007e8 	.word	0x200007e8

08006fe8 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006fe8:	b5b0      	push	{r4, r5, r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6039      	str	r1, [r7, #0]
 8006ff0:	0011      	movs	r1, r2
 8006ff2:	1dfb      	adds	r3, r7, #7
 8006ff4:	1c02      	adds	r2, r0, #0
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	1dbb      	adds	r3, r7, #6
 8006ffa:	1c0a      	adds	r2, r1, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8007038 <WriteI2C+0x50>)
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	1dfb      	adds	r3, r7, #7
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b29b      	uxth	r3, r3
 8007008:	18db      	adds	r3, r3, r3
 800700a:	b299      	uxth	r1, r3
 800700c:	1dbb      	adds	r3, r7, #6
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	250f      	movs	r5, #15
 8007014:	197c      	adds	r4, r7, r5
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	f00c fdda 	bl	8013bd0 <HAL_I2C_Master_Transmit_DMA>
 800701c:	0003      	movs	r3, r0
 800701e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007020:	197b      	adds	r3, r7, r5
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <WriteI2C+0x44>
        return false;
 8007028:	2300      	movs	r3, #0
 800702a:	e000      	b.n	800702e <WriteI2C+0x46>
    }
    return true;
 800702c:	2301      	movs	r3, #1
}
 800702e:	0018      	movs	r0, r3
 8007030:	46bd      	mov	sp, r7
 8007032:	b004      	add	sp, #16
 8007034:	bdb0      	pop	{r4, r5, r7, pc}
 8007036:	46c0      	nop			@ (mov r8, r8)
 8007038:	200007e8 	.word	0x200007e8

0800703c <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800703c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800703e:	b08b      	sub	sp, #44	@ 0x2c
 8007040:	af04      	add	r7, sp, #16
 8007042:	0004      	movs	r4, r0
 8007044:	0008      	movs	r0, r1
 8007046:	0011      	movs	r1, r2
 8007048:	607b      	str	r3, [r7, #4]
 800704a:	250f      	movs	r5, #15
 800704c:	197b      	adds	r3, r7, r5
 800704e:	1c22      	adds	r2, r4, #0
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	260c      	movs	r6, #12
 8007054:	19bb      	adds	r3, r7, r6
 8007056:	1c02      	adds	r2, r0, #0
 8007058:	801a      	strh	r2, [r3, #0]
 800705a:	230a      	movs	r3, #10
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	1c0a      	adds	r2, r1, #0
 8007060:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 8007062:	4b14      	ldr	r3, [pc, #80]	@ (80070b4 <ReadI2CMem+0x78>)
 8007064:	6818      	ldr	r0, [r3, #0]
 8007066:	197b      	adds	r3, r7, r5
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	18db      	adds	r3, r3, r3
 800706e:	b299      	uxth	r1, r3
 8007070:	2217      	movs	r2, #23
 8007072:	18bc      	adds	r4, r7, r2
 8007074:	230a      	movs	r3, #10
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	881d      	ldrh	r5, [r3, #0]
 800707a:	19bb      	adds	r3, r7, r6
 800707c:	881a      	ldrh	r2, [r3, #0]
 800707e:	2364      	movs	r3, #100	@ 0x64
 8007080:	9302      	str	r3, [sp, #8]
 8007082:	2328      	movs	r3, #40	@ 0x28
 8007084:	2608      	movs	r6, #8
 8007086:	199b      	adds	r3, r3, r6
 8007088:	19db      	adds	r3, r3, r7
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	002b      	movs	r3, r5
 8007094:	f00c ffa8 	bl	8013fe8 <HAL_I2C_Mem_Read>
 8007098:	0003      	movs	r3, r0
 800709a:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 800709c:	2217      	movs	r2, #23
 800709e:	18bb      	adds	r3, r7, r2
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <ReadI2CMem+0x6e>
     return false;
 80070a6:	2300      	movs	r3, #0
 80070a8:	e000      	b.n	80070ac <ReadI2CMem+0x70>
   }
   return true;
 80070aa:	2301      	movs	r3, #1
}
 80070ac:	0018      	movs	r0, r3
 80070ae:	46bd      	mov	sp, r7
 80070b0:	b007      	add	sp, #28
 80070b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070b4:	200007e8 	.word	0x200007e8

080070b8 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 80070b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ba:	b089      	sub	sp, #36	@ 0x24
 80070bc:	af02      	add	r7, sp, #8
 80070be:	0004      	movs	r4, r0
 80070c0:	0008      	movs	r0, r1
 80070c2:	0011      	movs	r1, r2
 80070c4:	607b      	str	r3, [r7, #4]
 80070c6:	250f      	movs	r5, #15
 80070c8:	197b      	adds	r3, r7, r5
 80070ca:	1c22      	adds	r2, r4, #0
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	260c      	movs	r6, #12
 80070d0:	19bb      	adds	r3, r7, r6
 80070d2:	1c02      	adds	r2, r0, #0
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	230a      	movs	r3, #10
 80070d8:	18fb      	adds	r3, r7, r3
 80070da:	1c0a      	adds	r2, r1, #0
 80070dc:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 80070de:	4b13      	ldr	r3, [pc, #76]	@ (800712c <WriteI2CMem+0x74>)
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	197b      	adds	r3, r7, r5
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	18db      	adds	r3, r3, r3
 80070ea:	b299      	uxth	r1, r3
 80070ec:	2217      	movs	r2, #23
 80070ee:	18bc      	adds	r4, r7, r2
 80070f0:	230a      	movs	r3, #10
 80070f2:	18fb      	adds	r3, r7, r3
 80070f4:	881d      	ldrh	r5, [r3, #0]
 80070f6:	19bb      	adds	r3, r7, r6
 80070f8:	881a      	ldrh	r2, [r3, #0]
 80070fa:	2328      	movs	r3, #40	@ 0x28
 80070fc:	2608      	movs	r6, #8
 80070fe:	199b      	adds	r3, r3, r6
 8007100:	19db      	adds	r3, r3, r7
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	002b      	movs	r3, r5
 800710c:	f00d f8a0 	bl	8014250 <HAL_I2C_Mem_Write_DMA>
 8007110:	0003      	movs	r3, r0
 8007112:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007114:	2217      	movs	r2, #23
 8007116:	18bb      	adds	r3, r7, r2
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <WriteI2CMem+0x6a>
     return false;
 800711e:	2300      	movs	r3, #0
 8007120:	e000      	b.n	8007124 <WriteI2CMem+0x6c>
   }
   return true;
 8007122:	2301      	movs	r3, #1
}
 8007124:	0018      	movs	r0, r3
 8007126:	46bd      	mov	sp, r7
 8007128:	b007      	add	sp, #28
 800712a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800712c:	200007e8 	.word	0x200007e8

08007130 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8007130:	b590      	push	{r4, r7, lr}
 8007132:	b0c3      	sub	sp, #268	@ 0x10c
 8007134:	af3e      	add	r7, sp, #248	@ 0xf8
 8007136:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8007138:	f019 fad2 	bl	80206e0 <GetUsbRxDataSize>
 800713c:	0003      	movs	r3, r0
 800713e:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b05      	cmp	r3, #5
 8007144:	d971      	bls.n	800722a <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2123      	movs	r1, #35	@ 0x23
 800714a:	0018      	movs	r0, r3
 800714c:	f01c fcea 	bl	8023b24 <strchr>
 8007150:	0003      	movs	r3, r0
 8007152:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d065      	beq.n	8007226 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	785a      	ldrb	r2, [r3, #1]
 800715e:	4b34      	ldr	r3, [pc, #208]	@ (8007230 <Process_PC_Config+0x100>)
 8007160:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	789a      	ldrb	r2, [r3, #2]
 8007166:	4b32      	ldr	r3, [pc, #200]	@ (8007230 <Process_PC_Config+0x100>)
 8007168:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800716a:	4b31      	ldr	r3, [pc, #196]	@ (8007230 <Process_PC_Config+0x100>)
 800716c:	785b      	ldrb	r3, [r3, #1]
 800716e:	3305      	adds	r3, #5
 8007170:	001a      	movs	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4293      	cmp	r3, r2
 8007176:	d351      	bcc.n	800721c <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	1cd9      	adds	r1, r3, #3
 800717c:	4b2c      	ldr	r3, [pc, #176]	@ (8007230 <Process_PC_Config+0x100>)
 800717e:	785b      	ldrb	r3, [r3, #1]
 8007180:	001a      	movs	r2, r3
 8007182:	4b2c      	ldr	r3, [pc, #176]	@ (8007234 <Process_PC_Config+0x104>)
 8007184:	0018      	movs	r0, r3
 8007186:	f01c fda1 	bl	8023ccc <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800718a:	4b29      	ldr	r3, [pc, #164]	@ (8007230 <Process_PC_Config+0x100>)
 800718c:	785b      	ldrb	r3, [r3, #1]
 800718e:	3303      	adds	r3, #3
 8007190:	001a      	movs	r2, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	189b      	adds	r3, r3, r2
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	021b      	lsls	r3, r3, #8
 800719a:	b21a      	sxth	r2, r3
 800719c:	4b24      	ldr	r3, [pc, #144]	@ (8007230 <Process_PC_Config+0x100>)
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	3304      	adds	r3, #4
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	18cb      	adds	r3, r1, r3
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	b21b      	sxth	r3, r3
 80071aa:	4313      	orrs	r3, r2
 80071ac:	b21b      	sxth	r3, r3
 80071ae:	b299      	uxth	r1, r3
 80071b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007230 <Process_PC_Config+0x100>)
 80071b2:	2381      	movs	r3, #129	@ 0x81
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80071b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007230 <Process_PC_Config+0x100>)
 80071ba:	2381      	movs	r3, #129	@ 0x81
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	5ad4      	ldrh	r4, [r2, r3]
 80071c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007230 <Process_PC_Config+0x100>)
 80071c2:	785b      	ldrb	r3, [r3, #1]
 80071c4:	3303      	adds	r3, #3
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	0011      	movs	r1, r2
 80071cc:	0018      	movs	r0, r3
 80071ce:	f000 f975 	bl	80074bc <CRC16_ARC>
 80071d2:	0003      	movs	r3, r0
 80071d4:	429c      	cmp	r4, r3
 80071d6:	d007      	beq.n	80071e8 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80071d8:	4b15      	ldr	r3, [pc, #84]	@ (8007230 <Process_PC_Config+0x100>)
 80071da:	785a      	ldrb	r2, [r3, #1]
 80071dc:	4b15      	ldr	r3, [pc, #84]	@ (8007234 <Process_PC_Config+0x104>)
 80071de:	0019      	movs	r1, r3
 80071e0:	2001      	movs	r0, #1
 80071e2:	f000 f919 	bl	8007418 <Create_Message>
 80071e6:	e016      	b.n	8007216 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80071e8:	4c11      	ldr	r4, [pc, #68]	@ (8007230 <Process_PC_Config+0x100>)
 80071ea:	466b      	mov	r3, sp
 80071ec:	0018      	movs	r0, r3
 80071ee:	0023      	movs	r3, r4
 80071f0:	3310      	adds	r3, #16
 80071f2:	22f4      	movs	r2, #244	@ 0xf4
 80071f4:	0019      	movs	r1, r3
 80071f6:	f01c fd69 	bl	8023ccc <memcpy>
 80071fa:	6820      	ldr	r0, [r4, #0]
 80071fc:	6861      	ldr	r1, [r4, #4]
 80071fe:	68a2      	ldr	r2, [r4, #8]
 8007200:	68e3      	ldr	r3, [r4, #12]
 8007202:	f000 f819 	bl	8007238 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8007206:	4b0a      	ldr	r3, [pc, #40]	@ (8007230 <Process_PC_Config+0x100>)
 8007208:	7818      	ldrb	r0, [r3, #0]
 800720a:	4b09      	ldr	r3, [pc, #36]	@ (8007230 <Process_PC_Config+0x100>)
 800720c:	785a      	ldrb	r2, [r3, #1]
 800720e:	4b09      	ldr	r3, [pc, #36]	@ (8007234 <Process_PC_Config+0x104>)
 8007210:	0019      	movs	r1, r3
 8007212:	f000 f901 	bl	8007418 <Create_Message>
                }
                ResetUsbRxDataSize();
 8007216:	f019 fa4b 	bl	80206b0 <ResetUsbRxDataSize>
                return;
 800721a:	e006      	b.n	800722a <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	0018      	movs	r0, r3
 8007220:	f019 fa68 	bl	80206f4 <GetUsbRxNextChunk>
 8007224:	e001      	b.n	800722a <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8007226:	f019 fa43 	bl	80206b0 <ResetUsbRxDataSize>
        }
    }
}
 800722a:	46bd      	mov	sp, r7
 800722c:	b005      	add	sp, #20
 800722e:	bd90      	pop	{r4, r7, pc}
 8007230:	200007ec 	.word	0x200007ec
 8007234:	200007ee 	.word	0x200007ee

08007238 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8007238:	b084      	sub	sp, #16
 800723a:	b5b0      	push	{r4, r5, r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	2518      	movs	r5, #24
 8007242:	197c      	adds	r4, r7, r5
 8007244:	6020      	str	r0, [r4, #0]
 8007246:	6061      	str	r1, [r4, #4]
 8007248:	60a2      	str	r2, [r4, #8]
 800724a:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 800724c:	197b      	adds	r3, r7, r5
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2bfe      	cmp	r3, #254	@ 0xfe
 8007252:	d100      	bne.n	8007256 <ProcessCmd+0x1e>
 8007254:	e09c      	b.n	8007390 <ProcessCmd+0x158>
 8007256:	dd00      	ble.n	800725a <ProcessCmd+0x22>
 8007258:	e0bc      	b.n	80073d4 <ProcessCmd+0x19c>
 800725a:	2b0c      	cmp	r3, #12
 800725c:	dc0a      	bgt.n	8007274 <ProcessCmd+0x3c>
 800725e:	2b00      	cmp	r3, #0
 8007260:	da00      	bge.n	8007264 <ProcessCmd+0x2c>
 8007262:	e0b7      	b.n	80073d4 <ProcessCmd+0x19c>
 8007264:	2b0c      	cmp	r3, #12
 8007266:	d900      	bls.n	800726a <ProcessCmd+0x32>
 8007268:	e0b4      	b.n	80073d4 <ProcessCmd+0x19c>
 800726a:	009a      	lsls	r2, r3, #2
 800726c:	4b5d      	ldr	r3, [pc, #372]	@ (80073e4 <ProcessCmd+0x1ac>)
 800726e:	18d3      	adds	r3, r2, r3
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	469f      	mov	pc, r3
 8007274:	2bfd      	cmp	r3, #253	@ 0xfd
 8007276:	d100      	bne.n	800727a <ProcessCmd+0x42>
 8007278:	e084      	b.n	8007384 <ProcessCmd+0x14c>
            }
            break;
        }
    }

}
 800727a:	e0ab      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800727c:	2118      	movs	r1, #24
 800727e:	187b      	adds	r3, r7, r1
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	001a      	movs	r2, r3
 8007284:	187b      	adds	r3, r7, r1
 8007286:	1c99      	adds	r1, r3, #2
 8007288:	4857      	ldr	r0, [pc, #348]	@ (80073e8 <ProcessCmd+0x1b0>)
 800728a:	230c      	movs	r3, #12
 800728c:	f002 ff52 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 8007290:	e0a0      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007292:	2118      	movs	r1, #24
 8007294:	187b      	adds	r3, r7, r1
 8007296:	785b      	ldrb	r3, [r3, #1]
 8007298:	001a      	movs	r2, r3
 800729a:	187b      	adds	r3, r7, r1
 800729c:	1c99      	adds	r1, r3, #2
 800729e:	4853      	ldr	r0, [pc, #332]	@ (80073ec <ProcessCmd+0x1b4>)
 80072a0:	230c      	movs	r3, #12
 80072a2:	f002 ff47 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 80072a6:	e095      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80072a8:	2118      	movs	r1, #24
 80072aa:	187b      	adds	r3, r7, r1
 80072ac:	785b      	ldrb	r3, [r3, #1]
 80072ae:	001a      	movs	r2, r3
 80072b0:	187b      	adds	r3, r7, r1
 80072b2:	1c99      	adds	r1, r3, #2
 80072b4:	484e      	ldr	r0, [pc, #312]	@ (80073f0 <ProcessCmd+0x1b8>)
 80072b6:	230c      	movs	r3, #12
 80072b8:	f002 ff3c 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 80072bc:	e08a      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80072be:	2118      	movs	r1, #24
 80072c0:	187b      	adds	r3, r7, r1
 80072c2:	785b      	ldrb	r3, [r3, #1]
 80072c4:	001a      	movs	r2, r3
 80072c6:	187b      	adds	r3, r7, r1
 80072c8:	1c99      	adds	r1, r3, #2
 80072ca:	484a      	ldr	r0, [pc, #296]	@ (80073f4 <ProcessCmd+0x1bc>)
 80072cc:	230c      	movs	r3, #12
 80072ce:	f002 ff31 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 80072d2:	e07f      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80072d4:	2118      	movs	r1, #24
 80072d6:	187b      	adds	r3, r7, r1
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	001a      	movs	r2, r3
 80072dc:	187b      	adds	r3, r7, r1
 80072de:	1c99      	adds	r1, r3, #2
 80072e0:	4845      	ldr	r0, [pc, #276]	@ (80073f8 <ProcessCmd+0x1c0>)
 80072e2:	230c      	movs	r3, #12
 80072e4:	f002 ff26 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 80072e8:	e074      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80072ea:	2118      	movs	r1, #24
 80072ec:	187b      	adds	r3, r7, r1
 80072ee:	785b      	ldrb	r3, [r3, #1]
 80072f0:	001a      	movs	r2, r3
 80072f2:	187b      	adds	r3, r7, r1
 80072f4:	1c99      	adds	r1, r3, #2
 80072f6:	4841      	ldr	r0, [pc, #260]	@ (80073fc <ProcessCmd+0x1c4>)
 80072f8:	230c      	movs	r3, #12
 80072fa:	f002 ff1b 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 80072fe:	e069      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007300:	2118      	movs	r1, #24
 8007302:	187b      	adds	r3, r7, r1
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	001a      	movs	r2, r3
 8007308:	187b      	adds	r3, r7, r1
 800730a:	1c99      	adds	r1, r3, #2
 800730c:	483c      	ldr	r0, [pc, #240]	@ (8007400 <ProcessCmd+0x1c8>)
 800730e:	230c      	movs	r3, #12
 8007310:	f002 ff10 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 8007314:	e05e      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8007316:	2118      	movs	r1, #24
 8007318:	187b      	adds	r3, r7, r1
 800731a:	785b      	ldrb	r3, [r3, #1]
 800731c:	001a      	movs	r2, r3
 800731e:	187b      	adds	r3, r7, r1
 8007320:	1c99      	adds	r1, r3, #2
 8007322:	4838      	ldr	r0, [pc, #224]	@ (8007404 <ProcessCmd+0x1cc>)
 8007324:	2320      	movs	r3, #32
 8007326:	f002 ff05 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 800732a:	e053      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800732c:	2118      	movs	r1, #24
 800732e:	187b      	adds	r3, r7, r1
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	001a      	movs	r2, r3
 8007334:	187b      	adds	r3, r7, r1
 8007336:	1c99      	adds	r1, r3, #2
 8007338:	4833      	ldr	r0, [pc, #204]	@ (8007408 <ProcessCmd+0x1d0>)
 800733a:	230c      	movs	r3, #12
 800733c:	f002 fefa 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 8007340:	e048      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007342:	2118      	movs	r1, #24
 8007344:	187b      	adds	r3, r7, r1
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	001a      	movs	r2, r3
 800734a:	187b      	adds	r3, r7, r1
 800734c:	1c99      	adds	r1, r3, #2
 800734e:	482f      	ldr	r0, [pc, #188]	@ (800740c <ProcessCmd+0x1d4>)
 8007350:	230c      	movs	r3, #12
 8007352:	f002 feef 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 8007356:	e03d      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8007358:	2118      	movs	r1, #24
 800735a:	187b      	adds	r3, r7, r1
 800735c:	785b      	ldrb	r3, [r3, #1]
 800735e:	001a      	movs	r2, r3
 8007360:	187b      	adds	r3, r7, r1
 8007362:	1c99      	adds	r1, r3, #2
 8007364:	482a      	ldr	r0, [pc, #168]	@ (8007410 <ProcessCmd+0x1d8>)
 8007366:	230c      	movs	r3, #12
 8007368:	f002 fee4 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 800736c:	e032      	b.n	80073d4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800736e:	2118      	movs	r1, #24
 8007370:	187b      	adds	r3, r7, r1
 8007372:	785b      	ldrb	r3, [r3, #1]
 8007374:	001a      	movs	r2, r3
 8007376:	187b      	adds	r3, r7, r1
 8007378:	1c99      	adds	r1, r3, #2
 800737a:	4826      	ldr	r0, [pc, #152]	@ (8007414 <ProcessCmd+0x1dc>)
 800737c:	230c      	movs	r3, #12
 800737e:	f002 fed9 	bl	800a134 <WriteUint8ArrayEepromSafe>
        break;
 8007382:	e027      	b.n	80073d4 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8007384:	4b18      	ldr	r3, [pc, #96]	@ (80073e8 <ProcessCmd+0x1b0>)
 8007386:	21f8      	movs	r1, #248	@ 0xf8
 8007388:	0018      	movs	r0, r3
 800738a:	f002 ff18 	bl	800a1be <ClearEEprom>
        break;
 800738e:	e021      	b.n	80073d4 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8007390:	2118      	movs	r1, #24
 8007392:	187b      	adds	r3, r7, r1
 8007394:	789b      	ldrb	r3, [r3, #2]
 8007396:	021b      	lsls	r3, r3, #8
 8007398:	b21a      	sxth	r2, r3
 800739a:	187b      	adds	r3, r7, r1
 800739c:	78db      	ldrb	r3, [r3, #3]
 800739e:	b21b      	sxth	r3, r3
 80073a0:	4313      	orrs	r3, r2
 80073a2:	b21a      	sxth	r2, r3
 80073a4:	1dbb      	adds	r3, r7, #6
 80073a6:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80073a8:	1dbb      	adds	r3, r7, #6
 80073aa:	881a      	ldrh	r2, [r3, #0]
 80073ac:	23c0      	movs	r3, #192	@ 0xc0
 80073ae:	015b      	lsls	r3, r3, #5
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d207      	bcs.n	80073c4 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 80073b4:	1dbb      	adds	r3, r7, #6
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	4a0b      	ldr	r2, [pc, #44]	@ (80073e8 <ProcessCmd+0x1b0>)
 80073ba:	0019      	movs	r1, r3
 80073bc:	0010      	movs	r0, r2
 80073be:	f002 fefe 	bl	800a1be <ClearEEprom>
            break;
 80073c2:	e006      	b.n	80073d2 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80073c4:	23c0      	movs	r3, #192	@ 0xc0
 80073c6:	015b      	lsls	r3, r3, #5
 80073c8:	4a07      	ldr	r2, [pc, #28]	@ (80073e8 <ProcessCmd+0x1b0>)
 80073ca:	0019      	movs	r1, r3
 80073cc:	0010      	movs	r0, r2
 80073ce:	f002 fef6 	bl	800a1be <ClearEEprom>
            break;
 80073d2:	46c0      	nop			@ (mov r8, r8)
}
 80073d4:	46c0      	nop			@ (mov r8, r8)
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b002      	add	sp, #8
 80073da:	bcb0      	pop	{r4, r5, r7}
 80073dc:	bc08      	pop	{r3}
 80073de:	b004      	add	sp, #16
 80073e0:	4718      	bx	r3
 80073e2:	46c0      	nop			@ (mov r8, r8)
 80073e4:	0802afb4 	.word	0x0802afb4
 80073e8:	08080000 	.word	0x08080000
 80073ec:	0808000c 	.word	0x0808000c
 80073f0:	08080018 	.word	0x08080018
 80073f4:	08080024 	.word	0x08080024
 80073f8:	08080030 	.word	0x08080030
 80073fc:	0808003c 	.word	0x0808003c
 8007400:	08080048 	.word	0x08080048
 8007404:	08080090 	.word	0x08080090
 8007408:	08080078 	.word	0x08080078
 800740c:	0808006c 	.word	0x0808006c
 8007410:	08080060 	.word	0x08080060
 8007414:	08080054 	.word	0x08080054

08007418 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8007418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6039      	str	r1, [r7, #0]
 8007420:	0011      	movs	r1, r2
 8007422:	1dfb      	adds	r3, r7, #7
 8007424:	1c02      	adds	r2, r0, #0
 8007426:	701a      	strb	r2, [r3, #0]
 8007428:	1dbb      	adds	r3, r7, #6
 800742a:	1c0a      	adds	r2, r1, #0
 800742c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 800742e:	2223      	movs	r2, #35	@ 0x23
 8007430:	4b20      	ldr	r3, [pc, #128]	@ (80074b4 <Create_Message+0x9c>)
 8007432:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8007434:	4b1f      	ldr	r3, [pc, #124]	@ (80074b4 <Create_Message+0x9c>)
 8007436:	1dfa      	adds	r2, r7, #7
 8007438:	7812      	ldrb	r2, [r2, #0]
 800743a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 800743c:	4b1d      	ldr	r3, [pc, #116]	@ (80074b4 <Create_Message+0x9c>)
 800743e:	1dba      	adds	r2, r7, #6
 8007440:	7812      	ldrb	r2, [r2, #0]
 8007442:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8007444:	1dbb      	adds	r3, r7, #6
 8007446:	781a      	ldrb	r2, [r3, #0]
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	4b1b      	ldr	r3, [pc, #108]	@ (80074b8 <Create_Message+0xa0>)
 800744c:	0018      	movs	r0, r3
 800744e:	f01c fc3d 	bl	8023ccc <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8007452:	1dbb      	adds	r3, r7, #6
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	b29a      	uxth	r2, r3
 8007458:	250e      	movs	r5, #14
 800745a:	197b      	adds	r3, r7, r5
 800745c:	3203      	adds	r2, #3
 800745e:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8007460:	260c      	movs	r6, #12
 8007462:	19bc      	adds	r4, r7, r6
 8007464:	197b      	adds	r3, r7, r5
 8007466:	881a      	ldrh	r2, [r3, #0]
 8007468:	4b12      	ldr	r3, [pc, #72]	@ (80074b4 <Create_Message+0x9c>)
 800746a:	0011      	movs	r1, r2
 800746c:	0018      	movs	r0, r3
 800746e:	f000 f825 	bl	80074bc <CRC16_ARC>
 8007472:	0003      	movs	r3, r0
 8007474:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8007476:	0030      	movs	r0, r6
 8007478:	183b      	adds	r3, r7, r0
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	0a1b      	lsrs	r3, r3, #8
 800747e:	b29a      	uxth	r2, r3
 8007480:	197b      	adds	r3, r7, r5
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b2d1      	uxtb	r1, r2
 8007486:	4a0b      	ldr	r2, [pc, #44]	@ (80074b4 <Create_Message+0x9c>)
 8007488:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800748a:	197b      	adds	r3, r7, r5
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	3301      	adds	r3, #1
 8007490:	183a      	adds	r2, r7, r0
 8007492:	8812      	ldrh	r2, [r2, #0]
 8007494:	b2d1      	uxtb	r1, r2
 8007496:	4a07      	ldr	r2, [pc, #28]	@ (80074b4 <Create_Message+0x9c>)
 8007498:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800749a:	197b      	adds	r3, r7, r5
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	3302      	adds	r3, #2
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	4b04      	ldr	r3, [pc, #16]	@ (80074b4 <Create_Message+0x9c>)
 80074a4:	0011      	movs	r1, r2
 80074a6:	0018      	movs	r0, r3
 80074a8:	f019 f8c0 	bl	802062c <CDC_Transmit_FS>
}
 80074ac:	46c0      	nop			@ (mov r8, r8)
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b005      	add	sp, #20
 80074b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074b4:	200008f8 	.word	0x200008f8
 80074b8:	200008fb 	.word	0x200008fb

080074bc <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	000a      	movs	r2, r1
 80074c6:	1cbb      	adds	r3, r7, #2
 80074c8:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80074ca:	2316      	movs	r3, #22
 80074cc:	18fb      	adds	r3, r7, r3
 80074ce:	2200      	movs	r2, #0
 80074d0:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80074d2:	2300      	movs	r3, #0
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	e02e      	b.n	8007536 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	18d3      	adds	r3, r2, r3
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	0019      	movs	r1, r3
 80074e2:	2216      	movs	r2, #22
 80074e4:	18bb      	adds	r3, r7, r2
 80074e6:	18ba      	adds	r2, r7, r2
 80074e8:	8812      	ldrh	r2, [r2, #0]
 80074ea:	404a      	eors	r2, r1
 80074ec:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	e01a      	b.n	800752a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80074f4:	2116      	movs	r1, #22
 80074f6:	187b      	adds	r3, r7, r1
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	2201      	movs	r2, #1
 80074fc:	4013      	ands	r3, r2
 80074fe:	d00b      	beq.n	8007518 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8007500:	187b      	adds	r3, r7, r1
 8007502:	187a      	adds	r2, r7, r1
 8007504:	8812      	ldrh	r2, [r2, #0]
 8007506:	0852      	lsrs	r2, r2, #1
 8007508:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800750a:	187b      	adds	r3, r7, r1
 800750c:	187a      	adds	r2, r7, r1
 800750e:	8812      	ldrh	r2, [r2, #0]
 8007510:	490f      	ldr	r1, [pc, #60]	@ (8007550 <CRC16_ARC+0x94>)
 8007512:	404a      	eors	r2, r1
 8007514:	801a      	strh	r2, [r3, #0]
 8007516:	e005      	b.n	8007524 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8007518:	2216      	movs	r2, #22
 800751a:	18bb      	adds	r3, r7, r2
 800751c:	18ba      	adds	r2, r7, r2
 800751e:	8812      	ldrh	r2, [r2, #0]
 8007520:	0852      	lsrs	r2, r2, #1
 8007522:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	3301      	adds	r3, #1
 8007528:	60fb      	str	r3, [r7, #12]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b07      	cmp	r3, #7
 800752e:	dde1      	ble.n	80074f4 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	3301      	adds	r3, #1
 8007534:	613b      	str	r3, [r7, #16]
 8007536:	1cbb      	adds	r3, r7, #2
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	429a      	cmp	r2, r3
 800753e:	dbcb      	blt.n	80074d8 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8007540:	2316      	movs	r3, #22
 8007542:	18fb      	adds	r3, r7, r3
 8007544:	881b      	ldrh	r3, [r3, #0]
}
 8007546:	0018      	movs	r0, r3
 8007548:	46bd      	mov	sp, r7
 800754a:	b006      	add	sp, #24
 800754c:	bd80      	pop	{r7, pc}
 800754e:	46c0      	nop			@ (mov r8, r8)
 8007550:	ffffa001 	.word	0xffffa001

08007554 <printf_USB>:

void printf_USB(const char* message, ...)
{
 8007554:	b40f      	push	{r0, r1, r2, r3}
 8007556:	b590      	push	{r4, r7, lr}
 8007558:	b0a9      	sub	sp, #164	@ 0xa4
 800755a:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 800755c:	23ac      	movs	r3, #172	@ 0xac
 800755e:	2108      	movs	r1, #8
 8007560:	185b      	adds	r3, r3, r1
 8007562:	19db      	adds	r3, r3, r7
 8007564:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	23a8      	movs	r3, #168	@ 0xa8
 800756a:	185b      	adds	r3, r3, r1
 800756c:	19db      	adds	r3, r3, r7
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	2408      	movs	r4, #8
 8007572:	193b      	adds	r3, r7, r4
 8007574:	0018      	movs	r0, r3
 8007576:	f01c fa21 	bl	80239bc <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 800757a:	193b      	adds	r3, r7, r4
 800757c:	0018      	movs	r0, r3
 800757e:	f7f8 fdf5 	bl	800016c <strlen>
 8007582:	0003      	movs	r3, r0
 8007584:	b29a      	uxth	r2, r3
 8007586:	193b      	adds	r3, r7, r4
 8007588:	0011      	movs	r1, r2
 800758a:	0018      	movs	r0, r3
 800758c:	f019 f84e 	bl	802062c <CDC_Transmit_FS>
}
 8007590:	46c0      	nop			@ (mov r8, r8)
 8007592:	46bd      	mov	sp, r7
 8007594:	b029      	add	sp, #164	@ 0xa4
 8007596:	bc90      	pop	{r4, r7}
 8007598:	bc08      	pop	{r3}
 800759a:	b004      	add	sp, #16
 800759c:	4718      	bx	r3

0800759e <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	000a      	movs	r2, r1
 80075a8:	1cfb      	adds	r3, r7, #3
 80075aa:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 80075ac:	1cfb      	adds	r3, r7, #3
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <PC_selectout+0x1e>
    printf_USB(msg);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	0018      	movs	r0, r3
 80075b8:	f7ff ffcc 	bl	8007554 <printf_USB>
  }
//  else {
    printf(msg);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	0018      	movs	r0, r3
 80075c0:	f01c f8d2 	bl	8023768 <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 80075c4:	200a      	movs	r0, #10
 80075c6:	f00a fd9d 	bl	8012104 <HAL_Delay>
}
 80075ca:	46c0      	nop			@ (mov r8, r8)
 80075cc:	46bd      	mov	sp, r7
 80075ce:	b002      	add	sp, #8
 80075d0:	bd80      	pop	{r7, pc}
	...

080075d4 <PC_show_Keys>:

void PC_show_Keys() {
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];

  static char Buffer[25];
  static char msg[64];
  if(Check_USB_PowerOn()){
 80075d8:	f000 fc40 	bl	8007e5c <Check_USB_PowerOn>
 80075dc:	1e03      	subs	r3, r0, #0
 80075de:	d003      	beq.n	80075e8 <PC_show_Keys+0x14>
    usb_out = true;
 80075e0:	4bcc      	ldr	r3, [pc, #816]	@ (8007914 <PC_show_Keys+0x340>)
 80075e2:	2201      	movs	r2, #1
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	e002      	b.n	80075ee <PC_show_Keys+0x1a>
  }
  else {
    usb_out = false;
 80075e8:	4bca      	ldr	r3, [pc, #808]	@ (8007914 <PC_show_Keys+0x340>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 80075ee:	4aca      	ldr	r2, [pc, #808]	@ (8007918 <PC_show_Keys+0x344>)
 80075f0:	4bca      	ldr	r3, [pc, #808]	@ (800791c <PC_show_Keys+0x348>)
 80075f2:	0011      	movs	r1, r2
 80075f4:	0018      	movs	r0, r3
 80075f6:	f01c f927 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80075fa:	4bc6      	ldr	r3, [pc, #792]	@ (8007914 <PC_show_Keys+0x340>)
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	4bc7      	ldr	r3, [pc, #796]	@ (800791c <PC_show_Keys+0x348>)
 8007600:	0011      	movs	r1, r2
 8007602:	0018      	movs	r0, r3
 8007604:	f7ff ffcb 	bl	800759e <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8007608:	4bc5      	ldr	r3, [pc, #788]	@ (8007920 <PC_show_Keys+0x34c>)
 800760a:	48c6      	ldr	r0, [pc, #792]	@ (8007924 <PC_show_Keys+0x350>)
 800760c:	220c      	movs	r2, #12
 800760e:	0019      	movs	r1, r3
 8007610:	f002 fdac 	bl	800a16c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8007614:	4ac2      	ldr	r2, [pc, #776]	@ (8007920 <PC_show_Keys+0x34c>)
 8007616:	4bc4      	ldr	r3, [pc, #784]	@ (8007928 <PC_show_Keys+0x354>)
 8007618:	0011      	movs	r1, r2
 800761a:	0018      	movs	r0, r3
 800761c:	f7fd fa84 	bl	8004b28 <uint8ArrayToString>
  sprintf(msg, "Box id ----------------------: %s\r\n", Buffer);
 8007620:	4ac1      	ldr	r2, [pc, #772]	@ (8007928 <PC_show_Keys+0x354>)
 8007622:	49c2      	ldr	r1, [pc, #776]	@ (800792c <PC_show_Keys+0x358>)
 8007624:	4bbd      	ldr	r3, [pc, #756]	@ (800791c <PC_show_Keys+0x348>)
 8007626:	0018      	movs	r0, r3
 8007628:	f01c f90e 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800762c:	4bb9      	ldr	r3, [pc, #740]	@ (8007914 <PC_show_Keys+0x340>)
 800762e:	781a      	ldrb	r2, [r3, #0]
 8007630:	4bba      	ldr	r3, [pc, #744]	@ (800791c <PC_show_Keys+0x348>)
 8007632:	0011      	movs	r1, r2
 8007634:	0018      	movs	r0, r3
 8007636:	f7ff ffb2 	bl	800759e <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800763a:	4bbd      	ldr	r3, [pc, #756]	@ (8007930 <PC_show_Keys+0x35c>)
 800763c:	48bd      	ldr	r0, [pc, #756]	@ (8007934 <PC_show_Keys+0x360>)
 800763e:	220c      	movs	r2, #12
 8007640:	0019      	movs	r1, r3
 8007642:	f002 fd93 	bl	800a16c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8007646:	4aba      	ldr	r2, [pc, #744]	@ (8007930 <PC_show_Keys+0x35c>)
 8007648:	4bb7      	ldr	r3, [pc, #732]	@ (8007928 <PC_show_Keys+0x354>)
 800764a:	0011      	movs	r1, r2
 800764c:	0018      	movs	r0, r3
 800764e:	f7fd fa6b 	bl	8004b28 <uint8ArrayToString>
  sprintf(msg, "1 - Temperature sensor id: --: %s\r\n", Buffer);
 8007652:	4ab5      	ldr	r2, [pc, #724]	@ (8007928 <PC_show_Keys+0x354>)
 8007654:	49b8      	ldr	r1, [pc, #736]	@ (8007938 <PC_show_Keys+0x364>)
 8007656:	4bb1      	ldr	r3, [pc, #708]	@ (800791c <PC_show_Keys+0x348>)
 8007658:	0018      	movs	r0, r3
 800765a:	f01c f8f5 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800765e:	4bad      	ldr	r3, [pc, #692]	@ (8007914 <PC_show_Keys+0x340>)
 8007660:	781a      	ldrb	r2, [r3, #0]
 8007662:	4bae      	ldr	r3, [pc, #696]	@ (800791c <PC_show_Keys+0x348>)
 8007664:	0011      	movs	r1, r2
 8007666:	0018      	movs	r0, r3
 8007668:	f7ff ff99 	bl	800759e <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 800766c:	4bb3      	ldr	r3, [pc, #716]	@ (800793c <PC_show_Keys+0x368>)
 800766e:	48b4      	ldr	r0, [pc, #720]	@ (8007940 <PC_show_Keys+0x36c>)
 8007670:	220c      	movs	r2, #12
 8007672:	0019      	movs	r1, r3
 8007674:	f002 fd7a 	bl	800a16c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8007678:	4ab0      	ldr	r2, [pc, #704]	@ (800793c <PC_show_Keys+0x368>)
 800767a:	4bab      	ldr	r3, [pc, #684]	@ (8007928 <PC_show_Keys+0x354>)
 800767c:	0011      	movs	r1, r2
 800767e:	0018      	movs	r0, r3
 8007680:	f7fd fa52 	bl	8004b28 <uint8ArrayToString>
  sprintf(msg, "2 - Humidity sensor id ------: %s\r\n", Buffer);
 8007684:	4aa8      	ldr	r2, [pc, #672]	@ (8007928 <PC_show_Keys+0x354>)
 8007686:	49af      	ldr	r1, [pc, #700]	@ (8007944 <PC_show_Keys+0x370>)
 8007688:	4ba4      	ldr	r3, [pc, #656]	@ (800791c <PC_show_Keys+0x348>)
 800768a:	0018      	movs	r0, r3
 800768c:	f01c f8dc 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007690:	4ba0      	ldr	r3, [pc, #640]	@ (8007914 <PC_show_Keys+0x340>)
 8007692:	781a      	ldrb	r2, [r3, #0]
 8007694:	4ba1      	ldr	r3, [pc, #644]	@ (800791c <PC_show_Keys+0x348>)
 8007696:	0011      	movs	r1, r2
 8007698:	0018      	movs	r0, r3
 800769a:	f7ff ff80 	bl	800759e <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 800769e:	4baa      	ldr	r3, [pc, #680]	@ (8007948 <PC_show_Keys+0x374>)
 80076a0:	48aa      	ldr	r0, [pc, #680]	@ (800794c <PC_show_Keys+0x378>)
 80076a2:	220c      	movs	r2, #12
 80076a4:	0019      	movs	r1, r3
 80076a6:	f002 fd61 	bl	800a16c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 80076aa:	4aa7      	ldr	r2, [pc, #668]	@ (8007948 <PC_show_Keys+0x374>)
 80076ac:	4b9e      	ldr	r3, [pc, #632]	@ (8007928 <PC_show_Keys+0x354>)
 80076ae:	0011      	movs	r1, r2
 80076b0:	0018      	movs	r0, r3
 80076b2:	f7fd fa39 	bl	8004b28 <uint8ArrayToString>
  sprintf(msg, "3 - NOx sensor id -----------: %s\r\n", Buffer);
 80076b6:	4a9c      	ldr	r2, [pc, #624]	@ (8007928 <PC_show_Keys+0x354>)
 80076b8:	49a5      	ldr	r1, [pc, #660]	@ (8007950 <PC_show_Keys+0x37c>)
 80076ba:	4b98      	ldr	r3, [pc, #608]	@ (800791c <PC_show_Keys+0x348>)
 80076bc:	0018      	movs	r0, r3
 80076be:	f01c f8c3 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80076c2:	4b94      	ldr	r3, [pc, #592]	@ (8007914 <PC_show_Keys+0x340>)
 80076c4:	781a      	ldrb	r2, [r3, #0]
 80076c6:	4b95      	ldr	r3, [pc, #596]	@ (800791c <PC_show_Keys+0x348>)
 80076c8:	0011      	movs	r1, r2
 80076ca:	0018      	movs	r0, r3
 80076cc:	f7ff ff67 	bl	800759e <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 80076d0:	4ba0      	ldr	r3, [pc, #640]	@ (8007954 <PC_show_Keys+0x380>)
 80076d2:	48a1      	ldr	r0, [pc, #644]	@ (8007958 <PC_show_Keys+0x384>)
 80076d4:	220c      	movs	r2, #12
 80076d6:	0019      	movs	r1, r3
 80076d8:	f002 fd48 	bl	800a16c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 80076dc:	4a9d      	ldr	r2, [pc, #628]	@ (8007954 <PC_show_Keys+0x380>)
 80076de:	4b92      	ldr	r3, [pc, #584]	@ (8007928 <PC_show_Keys+0x354>)
 80076e0:	0011      	movs	r1, r2
 80076e2:	0018      	movs	r0, r3
 80076e4:	f7fd fa20 	bl	8004b28 <uint8ArrayToString>
  sprintf(msg, "4 - VOC sensor id -----------: %s\r\n", Buffer);
 80076e8:	4a8f      	ldr	r2, [pc, #572]	@ (8007928 <PC_show_Keys+0x354>)
 80076ea:	499c      	ldr	r1, [pc, #624]	@ (800795c <PC_show_Keys+0x388>)
 80076ec:	4b8b      	ldr	r3, [pc, #556]	@ (800791c <PC_show_Keys+0x348>)
 80076ee:	0018      	movs	r0, r3
 80076f0:	f01c f8aa 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80076f4:	4b87      	ldr	r3, [pc, #540]	@ (8007914 <PC_show_Keys+0x340>)
 80076f6:	781a      	ldrb	r2, [r3, #0]
 80076f8:	4b88      	ldr	r3, [pc, #544]	@ (800791c <PC_show_Keys+0x348>)
 80076fa:	0011      	movs	r1, r2
 80076fc:	0018      	movs	r0, r3
 80076fe:	f7ff ff4e 	bl	800759e <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, soundConfig, IdSize);
 8007702:	4b97      	ldr	r3, [pc, #604]	@ (8007960 <PC_show_Keys+0x38c>)
 8007704:	4897      	ldr	r0, [pc, #604]	@ (8007964 <PC_show_Keys+0x390>)
 8007706:	220c      	movs	r2, #12
 8007708:	0019      	movs	r1, r3
 800770a:	f002 fd2f 	bl	800a16c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 800770e:	4a94      	ldr	r2, [pc, #592]	@ (8007960 <PC_show_Keys+0x38c>)
 8007710:	4b85      	ldr	r3, [pc, #532]	@ (8007928 <PC_show_Keys+0x354>)
 8007712:	0011      	movs	r1, r2
 8007714:	0018      	movs	r0, r3
 8007716:	f7fd fa07 	bl	8004b28 <uint8ArrayToString>
  sprintf(msg, "5 is former dBa unused\r\n");
 800771a:	4a93      	ldr	r2, [pc, #588]	@ (8007968 <PC_show_Keys+0x394>)
 800771c:	4b7f      	ldr	r3, [pc, #508]	@ (800791c <PC_show_Keys+0x348>)
 800771e:	0011      	movs	r1, r2
 8007720:	0018      	movs	r0, r3
 8007722:	f01c f891 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007726:	4b7b      	ldr	r3, [pc, #492]	@ (8007914 <PC_show_Keys+0x340>)
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	4b7c      	ldr	r3, [pc, #496]	@ (800791c <PC_show_Keys+0x348>)
 800772c:	0011      	movs	r1, r2
 800772e:	0018      	movs	r0, r3
 8007730:	f7ff ff35 	bl	800759e <PC_selectout>
  sprintf(msg, "5 - Air pressure sensor id --: %s\r\n", Buffer);
 8007734:	4a7c      	ldr	r2, [pc, #496]	@ (8007928 <PC_show_Keys+0x354>)
 8007736:	498d      	ldr	r1, [pc, #564]	@ (800796c <PC_show_Keys+0x398>)
 8007738:	4b78      	ldr	r3, [pc, #480]	@ (800791c <PC_show_Keys+0x348>)
 800773a:	0018      	movs	r0, r3
 800773c:	f01c f884 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007740:	4b74      	ldr	r3, [pc, #464]	@ (8007914 <PC_show_Keys+0x340>)
 8007742:	781a      	ldrb	r2, [r3, #0]
 8007744:	4b75      	ldr	r3, [pc, #468]	@ (800791c <PC_show_Keys+0x348>)
 8007746:	0011      	movs	r1, r2
 8007748:	0018      	movs	r0, r3
 800774a:	f7ff ff28 	bl	800759e <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 800774e:	4b84      	ldr	r3, [pc, #528]	@ (8007960 <PC_show_Keys+0x38c>)
 8007750:	4887      	ldr	r0, [pc, #540]	@ (8007970 <PC_show_Keys+0x39c>)
 8007752:	220c      	movs	r2, #12
 8007754:	0019      	movs	r1, r3
 8007756:	f002 fd09 	bl	800a16c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 800775a:	4a81      	ldr	r2, [pc, #516]	@ (8007960 <PC_show_Keys+0x38c>)
 800775c:	4b72      	ldr	r3, [pc, #456]	@ (8007928 <PC_show_Keys+0x354>)
 800775e:	0011      	movs	r1, r2
 8007760:	0018      	movs	r0, r3
 8007762:	f7fd f9e1 	bl	8004b28 <uint8ArrayToString>
  sprintf(msg, "6 is former dBc\r\n");
 8007766:	4a83      	ldr	r2, [pc, #524]	@ (8007974 <PC_show_Keys+0x3a0>)
 8007768:	4b6c      	ldr	r3, [pc, #432]	@ (800791c <PC_show_Keys+0x348>)
 800776a:	0011      	movs	r1, r2
 800776c:	0018      	movs	r0, r3
 800776e:	f01c f86b 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007772:	4b68      	ldr	r3, [pc, #416]	@ (8007914 <PC_show_Keys+0x340>)
 8007774:	781a      	ldrb	r2, [r3, #0]
 8007776:	4b69      	ldr	r3, [pc, #420]	@ (800791c <PC_show_Keys+0x348>)
 8007778:	0011      	movs	r1, r2
 800777a:	0018      	movs	r0, r3
 800777c:	f7ff ff0f 	bl	800759e <PC_selectout>
  sprintf(msg, "6 - Sound dBA sensor id -----: %s\r\n", Buffer);
 8007780:	4a69      	ldr	r2, [pc, #420]	@ (8007928 <PC_show_Keys+0x354>)
 8007782:	497d      	ldr	r1, [pc, #500]	@ (8007978 <PC_show_Keys+0x3a4>)
 8007784:	4b65      	ldr	r3, [pc, #404]	@ (800791c <PC_show_Keys+0x348>)
 8007786:	0018      	movs	r0, r3
 8007788:	f01c f85e 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800778c:	4b61      	ldr	r3, [pc, #388]	@ (8007914 <PC_show_Keys+0x340>)
 800778e:	781a      	ldrb	r2, [r3, #0]
 8007790:	4b62      	ldr	r3, [pc, #392]	@ (800791c <PC_show_Keys+0x348>)
 8007792:	0011      	movs	r1, r2
 8007794:	0018      	movs	r0, r3
 8007796:	f7ff ff02 	bl	800759e <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800779a:	4b78      	ldr	r3, [pc, #480]	@ (800797c <PC_show_Keys+0x3a8>)
 800779c:	4878      	ldr	r0, [pc, #480]	@ (8007980 <PC_show_Keys+0x3ac>)
 800779e:	2220      	movs	r2, #32
 80077a0:	0019      	movs	r1, r3
 80077a2:	f002 fce3 	bl	800a16c <ReadUint8ArrayEEprom>
  sprintf(msg, "7 - Stored name -------------: ");
 80077a6:	4a77      	ldr	r2, [pc, #476]	@ (8007984 <PC_show_Keys+0x3b0>)
 80077a8:	4b5c      	ldr	r3, [pc, #368]	@ (800791c <PC_show_Keys+0x348>)
 80077aa:	0011      	movs	r1, r2
 80077ac:	0018      	movs	r0, r3
 80077ae:	f01c f84b 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80077b2:	4b58      	ldr	r3, [pc, #352]	@ (8007914 <PC_show_Keys+0x340>)
 80077b4:	781a      	ldrb	r2, [r3, #0]
 80077b6:	4b59      	ldr	r3, [pc, #356]	@ (800791c <PC_show_Keys+0x348>)
 80077b8:	0011      	movs	r1, r2
 80077ba:	0018      	movs	r0, r3
 80077bc:	f7ff feef 	bl	800759e <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);
 80077c0:	4a6e      	ldr	r2, [pc, #440]	@ (800797c <PC_show_Keys+0x3a8>)
 80077c2:	4971      	ldr	r1, [pc, #452]	@ (8007988 <PC_show_Keys+0x3b4>)
 80077c4:	4b55      	ldr	r3, [pc, #340]	@ (800791c <PC_show_Keys+0x348>)
 80077c6:	0018      	movs	r0, r3
 80077c8:	f01c f83e 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80077cc:	4b51      	ldr	r3, [pc, #324]	@ (8007914 <PC_show_Keys+0x340>)
 80077ce:	781a      	ldrb	r2, [r3, #0]
 80077d0:	4b52      	ldr	r3, [pc, #328]	@ (800791c <PC_show_Keys+0x348>)
 80077d2:	0011      	movs	r1, r2
 80077d4:	0018      	movs	r0, r3
 80077d6:	f7ff fee2 	bl	800759e <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 80077da:	4b6c      	ldr	r3, [pc, #432]	@ (800798c <PC_show_Keys+0x3b8>)
 80077dc:	486c      	ldr	r0, [pc, #432]	@ (8007990 <PC_show_Keys+0x3bc>)
 80077de:	220c      	movs	r2, #12
 80077e0:	0019      	movs	r1, r3
 80077e2:	f002 fcc3 	bl	800a16c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 80077e6:	4a69      	ldr	r2, [pc, #420]	@ (800798c <PC_show_Keys+0x3b8>)
 80077e8:	4b4f      	ldr	r3, [pc, #316]	@ (8007928 <PC_show_Keys+0x354>)
 80077ea:	0011      	movs	r1, r2
 80077ec:	0018      	movs	r0, r3
 80077ee:	f7fd f99b 	bl	8004b28 <uint8ArrayToString>
  sprintf(msg, "8 - Solar voltage sensor id -: %s\r\n", Buffer);
 80077f2:	4a4d      	ldr	r2, [pc, #308]	@ (8007928 <PC_show_Keys+0x354>)
 80077f4:	4967      	ldr	r1, [pc, #412]	@ (8007994 <PC_show_Keys+0x3c0>)
 80077f6:	4b49      	ldr	r3, [pc, #292]	@ (800791c <PC_show_Keys+0x348>)
 80077f8:	0018      	movs	r0, r3
 80077fa:	f01c f825 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80077fe:	4b45      	ldr	r3, [pc, #276]	@ (8007914 <PC_show_Keys+0x340>)
 8007800:	781a      	ldrb	r2, [r3, #0]
 8007802:	4b46      	ldr	r3, [pc, #280]	@ (800791c <PC_show_Keys+0x348>)
 8007804:	0011      	movs	r1, r2
 8007806:	0018      	movs	r0, r3
 8007808:	f7ff fec9 	bl	800759e <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 800780c:	4b62      	ldr	r3, [pc, #392]	@ (8007998 <PC_show_Keys+0x3c4>)
 800780e:	4863      	ldr	r0, [pc, #396]	@ (800799c <PC_show_Keys+0x3c8>)
 8007810:	220c      	movs	r2, #12
 8007812:	0019      	movs	r1, r3
 8007814:	f002 fcaa 	bl	800a16c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8007818:	4a5f      	ldr	r2, [pc, #380]	@ (8007998 <PC_show_Keys+0x3c4>)
 800781a:	4b43      	ldr	r3, [pc, #268]	@ (8007928 <PC_show_Keys+0x354>)
 800781c:	0011      	movs	r1, r2
 800781e:	0018      	movs	r0, r3
 8007820:	f7fd f982 	bl	8004b28 <uint8ArrayToString>
  sprintf(msg, "9 - Battery voltage sensor id: %s\r\n", Buffer);
 8007824:	4a40      	ldr	r2, [pc, #256]	@ (8007928 <PC_show_Keys+0x354>)
 8007826:	495e      	ldr	r1, [pc, #376]	@ (80079a0 <PC_show_Keys+0x3cc>)
 8007828:	4b3c      	ldr	r3, [pc, #240]	@ (800791c <PC_show_Keys+0x348>)
 800782a:	0018      	movs	r0, r3
 800782c:	f01c f80c 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007830:	4b38      	ldr	r3, [pc, #224]	@ (8007914 <PC_show_Keys+0x340>)
 8007832:	781a      	ldrb	r2, [r3, #0]
 8007834:	4b39      	ldr	r3, [pc, #228]	@ (800791c <PC_show_Keys+0x348>)
 8007836:	0011      	movs	r1, r2
 8007838:	0018      	movs	r0, r3
 800783a:	f7ff feb0 	bl	800759e <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 800783e:	4b59      	ldr	r3, [pc, #356]	@ (80079a4 <PC_show_Keys+0x3d0>)
 8007840:	4859      	ldr	r0, [pc, #356]	@ (80079a8 <PC_show_Keys+0x3d4>)
 8007842:	220c      	movs	r2, #12
 8007844:	0019      	movs	r1, r3
 8007846:	f002 fc91 	bl	800a16c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 800784a:	4a56      	ldr	r2, [pc, #344]	@ (80079a4 <PC_show_Keys+0x3d0>)
 800784c:	4b36      	ldr	r3, [pc, #216]	@ (8007928 <PC_show_Keys+0x354>)
 800784e:	0011      	movs	r1, r2
 8007850:	0018      	movs	r0, r3
 8007852:	f7fd f969 	bl	8004b28 <uint8ArrayToString>
  sprintf(msg, ": - PM10 sensor id ----------: %s\r\n", Buffer);
 8007856:	4a34      	ldr	r2, [pc, #208]	@ (8007928 <PC_show_Keys+0x354>)
 8007858:	4954      	ldr	r1, [pc, #336]	@ (80079ac <PC_show_Keys+0x3d8>)
 800785a:	4b30      	ldr	r3, [pc, #192]	@ (800791c <PC_show_Keys+0x348>)
 800785c:	0018      	movs	r0, r3
 800785e:	f01b fff3 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007862:	4b2c      	ldr	r3, [pc, #176]	@ (8007914 <PC_show_Keys+0x340>)
 8007864:	781a      	ldrb	r2, [r3, #0]
 8007866:	4b2d      	ldr	r3, [pc, #180]	@ (800791c <PC_show_Keys+0x348>)
 8007868:	0011      	movs	r1, r2
 800786a:	0018      	movs	r0, r3
 800786c:	f7ff fe97 	bl	800759e <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8007870:	4b4f      	ldr	r3, [pc, #316]	@ (80079b0 <PC_show_Keys+0x3dc>)
 8007872:	4850      	ldr	r0, [pc, #320]	@ (80079b4 <PC_show_Keys+0x3e0>)
 8007874:	220c      	movs	r2, #12
 8007876:	0019      	movs	r1, r3
 8007878:	f002 fc78 	bl	800a16c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 800787c:	4a4c      	ldr	r2, [pc, #304]	@ (80079b0 <PC_show_Keys+0x3dc>)
 800787e:	4b2a      	ldr	r3, [pc, #168]	@ (8007928 <PC_show_Keys+0x354>)
 8007880:	0011      	movs	r1, r2
 8007882:	0018      	movs	r0, r3
 8007884:	f7fd f950 	bl	8004b28 <uint8ArrayToString>
  sprintf(msg, "; - PM2p5 sensor id ---------: %s\r\n", Buffer);
 8007888:	4a27      	ldr	r2, [pc, #156]	@ (8007928 <PC_show_Keys+0x354>)
 800788a:	494b      	ldr	r1, [pc, #300]	@ (80079b8 <PC_show_Keys+0x3e4>)
 800788c:	4b23      	ldr	r3, [pc, #140]	@ (800791c <PC_show_Keys+0x348>)
 800788e:	0018      	movs	r0, r3
 8007890:	f01b ffda 	bl	8023848 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8007894:	4b1f      	ldr	r3, [pc, #124]	@ (8007914 <PC_show_Keys+0x340>)
 8007896:	781a      	ldrb	r2, [r3, #0]
 8007898:	4b20      	ldr	r3, [pc, #128]	@ (800791c <PC_show_Keys+0x348>)
 800789a:	0011      	movs	r1, r2
 800789c:	0018      	movs	r0, r3
 800789e:	f7ff fe7e 	bl	800759e <PC_selectout>

  printf_USB("\r\nOnly the last two nibbles are necessary.\r\n");
 80078a2:	4b46      	ldr	r3, [pc, #280]	@ (80079bc <PC_show_Keys+0x3e8>)
 80078a4:	0018      	movs	r0, r3
 80078a6:	f7ff fe55 	bl	8007554 <printf_USB>
  HAL_Delay(10);
 80078aa:	200a      	movs	r0, #10
 80078ac:	f00a fc2a 	bl	8012104 <HAL_Delay>
  printf_USB("Command example for air pressure => #5,6a\r\n");
 80078b0:	4b43      	ldr	r3, [pc, #268]	@ (80079c0 <PC_show_Keys+0x3ec>)
 80078b2:	0018      	movs	r0, r3
 80078b4:	f7ff fe4e 	bl	8007554 <printf_USB>
  HAL_Delay(10);
 80078b8:	200a      	movs	r0, #10
 80078ba:	f00a fc23 	bl	8012104 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 80078be:	4b41      	ldr	r3, [pc, #260]	@ (80079c4 <PC_show_Keys+0x3f0>)
 80078c0:	0018      	movs	r0, r3
 80078c2:	f7ff fe47 	bl	8007554 <printf_USB>
  HAL_Delay(10);
 80078c6:	200a      	movs	r0, #10
 80078c8:	f00a fc1c 	bl	8012104 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 80078cc:	4b3e      	ldr	r3, [pc, #248]	@ (80079c8 <PC_show_Keys+0x3f4>)
 80078ce:	0018      	movs	r0, r3
 80078d0:	f7ff fe40 	bl	8007554 <printf_USB>
  HAL_Delay(10);
 80078d4:	200a      	movs	r0, #10
 80078d6:	f00a fc15 	bl	8012104 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 80078da:	4b3c      	ldr	r3, [pc, #240]	@ (80079cc <PC_show_Keys+0x3f8>)
 80078dc:	0018      	movs	r0, r3
 80078de:	f7ff fe39 	bl	8007554 <printf_USB>
  HAL_Delay(10);
 80078e2:	200a      	movs	r0, #10
 80078e4:	f00a fc0e 	bl	8012104 <HAL_Delay>
  printf_USB(" $5,67af09374cdef30007b35055\r\n");
 80078e8:	4b39      	ldr	r3, [pc, #228]	@ (80079d0 <PC_show_Keys+0x3fc>)
 80078ea:	0018      	movs	r0, r3
 80078ec:	f7ff fe32 	bl	8007554 <printf_USB>
  HAL_Delay(10);
 80078f0:	200a      	movs	r0, #10
 80078f2:	f00a fc07 	bl	8012104 <HAL_Delay>
  if (!usb_out) {
 80078f6:	4b07      	ldr	r3, [pc, #28]	@ (8007914 <PC_show_Keys+0x340>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2201      	movs	r2, #1
 80078fc:	4053      	eors	r3, r2
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b00      	cmp	r3, #0
 8007902:	d003      	beq.n	800790c <PC_show_Keys+0x338>
    printf("A key can only be changed by USB input.\r\n");
 8007904:	4b33      	ldr	r3, [pc, #204]	@ (80079d4 <PC_show_Keys+0x400>)
 8007906:	0018      	movs	r0, r3
 8007908:	f01b ff94 	bl	8023834 <puts>
  }
}
 800790c:	46c0      	nop			@ (mov r8, r8)
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	46c0      	nop			@ (mov r8, r8)
 8007914:	200009fd 	.word	0x200009fd
 8007918:	080289d8 	.word	0x080289d8
 800791c:	20000a00 	.word	0x20000a00
 8007920:	20000a40 	.word	0x20000a40
 8007924:	08080000 	.word	0x08080000
 8007928:	20000a4c 	.word	0x20000a4c
 800792c:	080289f4 	.word	0x080289f4
 8007930:	20000a68 	.word	0x20000a68
 8007934:	0808000c 	.word	0x0808000c
 8007938:	08028a18 	.word	0x08028a18
 800793c:	20000a74 	.word	0x20000a74
 8007940:	08080018 	.word	0x08080018
 8007944:	08028a3c 	.word	0x08028a3c
 8007948:	20000a80 	.word	0x20000a80
 800794c:	08080024 	.word	0x08080024
 8007950:	08028a60 	.word	0x08028a60
 8007954:	20000a8c 	.word	0x20000a8c
 8007958:	08080030 	.word	0x08080030
 800795c:	08028a84 	.word	0x08028a84
 8007960:	20000a98 	.word	0x20000a98
 8007964:	0808003c 	.word	0x0808003c
 8007968:	08028aa8 	.word	0x08028aa8
 800796c:	08028ac4 	.word	0x08028ac4
 8007970:	08080048 	.word	0x08080048
 8007974:	08028ae8 	.word	0x08028ae8
 8007978:	08028afc 	.word	0x08028afc
 800797c:	20000aa4 	.word	0x20000aa4
 8007980:	08080090 	.word	0x08080090
 8007984:	08028b20 	.word	0x08028b20
 8007988:	08028b40 	.word	0x08028b40
 800798c:	20000ac4 	.word	0x20000ac4
 8007990:	08080078 	.word	0x08080078
 8007994:	08028b48 	.word	0x08028b48
 8007998:	20000ad0 	.word	0x20000ad0
 800799c:	0808006c 	.word	0x0808006c
 80079a0:	08028b6c 	.word	0x08028b6c
 80079a4:	20000adc 	.word	0x20000adc
 80079a8:	08080060 	.word	0x08080060
 80079ac:	08028b90 	.word	0x08028b90
 80079b0:	20000ae8 	.word	0x20000ae8
 80079b4:	08080054 	.word	0x08080054
 80079b8:	08028bb4 	.word	0x08028bb4
 80079bc:	08028bd8 	.word	0x08028bd8
 80079c0:	08028c08 	.word	0x08028c08
 80079c4:	08028c34 	.word	0x08028c34
 80079c8:	08028c70 	.word	0x08028c70
 80079cc:	08028ca8 	.word	0x08028ca8
 80079d0:	08028cdc 	.word	0x08028cdc
 80079d4:	08028cfc 	.word	0x08028cfc

080079d8 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 80079d8:	b590      	push	{r4, r7, lr}
 80079da:	b0c5      	sub	sp, #276	@ 0x114
 80079dc:	af3e      	add	r7, sp, #248	@ 0xf8
 80079de:	6078      	str	r0, [r7, #4]
  static uint8_t boxConfig[IdSize];
  static uint32_t len = 5;
  uint32_t length = GetUsbRxDataSize();
 80079e0:	f018 fe7e 	bl	80206e0 <GetUsbRxDataSize>
 80079e4:	0003      	movs	r3, r0
 80079e6:	613b      	str	r3, [r7, #16]
  static uint8_t r = 0;
//  uint8_t* message;
  static char Buffer[24];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2124      	movs	r1, #36	@ 0x24
 80079ec:	0018      	movs	r0, r3
 80079ee:	f01c f899 	bl	8023b24 <strchr>
 80079f2:	0003      	movs	r3, r0
 80079f4:	60fb      	str	r3, [r7, #12]
  if ((length == 1) && (message != NULL) && (len != 27)){
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d10f      	bne.n	8007a1c <Process_USB_input+0x44>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00c      	beq.n	8007a1c <Process_USB_input+0x44>
 8007a02:	4bab      	ldr	r3, [pc, #684]	@ (8007cb0 <Process_USB_input+0x2d8>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b1b      	cmp	r3, #27
 8007a08:	d008      	beq.n	8007a1c <Process_USB_input+0x44>
      Debug("Switching to input length of 27 for full opensensemap keylength");
 8007a0a:	4aaa      	ldr	r2, [pc, #680]	@ (8007cb4 <Process_USB_input+0x2dc>)
 8007a0c:	4baa      	ldr	r3, [pc, #680]	@ (8007cb8 <Process_USB_input+0x2e0>)
 8007a0e:	0019      	movs	r1, r3
 8007a10:	2003      	movs	r0, #3
 8007a12:	f009 ff21 	bl	8011858 <CreateLine>
      len = 27;
 8007a16:	4ba6      	ldr	r3, [pc, #664]	@ (8007cb0 <Process_USB_input+0x2d8>)
 8007a18:	221b      	movs	r2, #27
 8007a1a:	601a      	str	r2, [r3, #0]
  }
  if (length > len) {
 8007a1c:	4ba4      	ldr	r3, [pc, #656]	@ (8007cb0 <Process_USB_input+0x2d8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d800      	bhi.n	8007a28 <Process_USB_input+0x50>
 8007a26:	e12c      	b.n	8007c82 <Process_USB_input+0x2aa>
//    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
    printf_USB("USB input: %s\r\n", (const char*)data);
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	4ba4      	ldr	r3, [pc, #656]	@ (8007cbc <Process_USB_input+0x2e4>)
 8007a2c:	0011      	movs	r1, r2
 8007a2e:	0018      	movs	r0, r3
 8007a30:	f7ff fd90 	bl	8007554 <printf_USB>
    message = (unsigned char*)data;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	60fb      	str	r3, [r7, #12]
    if (message[0] == '$') {
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b24      	cmp	r3, #36	@ 0x24
 8007a3e:	d102      	bne.n	8007a46 <Process_USB_input+0x6e>
      len = 27;
 8007a40:	4b9b      	ldr	r3, [pc, #620]	@ (8007cb0 <Process_USB_input+0x2d8>)
 8007a42:	221b      	movs	r2, #27
 8007a44:	601a      	str	r2, [r3, #0]
    }
    if((message[0] == '#') || (message[0] == '$')) {
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b23      	cmp	r3, #35	@ 0x23
 8007a4c:	d004      	beq.n	8007a58 <Process_USB_input+0x80>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b24      	cmp	r3, #36	@ 0x24
 8007a54:	d000      	beq.n	8007a58 <Process_USB_input+0x80>
 8007a56:	e0f7      	b.n	8007c48 <Process_USB_input+0x270>
      received.Command = (message[1] & 0x0F);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	220f      	movs	r2, #15
 8007a60:	4013      	ands	r3, r2
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	4b96      	ldr	r3, [pc, #600]	@ (8007cc0 <Process_USB_input+0x2e8>)
 8007a66:	701a      	strb	r2, [r3, #0]
      if (message[2] == ',') {
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b2c      	cmp	r3, #44	@ 0x2c
 8007a70:	d000      	beq.n	8007a74 <Process_USB_input+0x9c>
 8007a72:	e0e2      	b.n	8007c3a <Process_USB_input+0x262>
        for (uint8_t i=3; i < len; i++) {
 8007a74:	2317      	movs	r3, #23
 8007a76:	18fb      	adds	r3, r7, r3
 8007a78:	2203      	movs	r2, #3
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e084      	b.n	8007b88 <Process_USB_input+0x1b0>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", message[i], i, r);
          HAL_Delay(10);
 8007a7e:	200a      	movs	r0, #10
 8007a80:	f00a fb40 	bl	8012104 <HAL_Delay>
          if (isxdigit(message[i])) {
 8007a84:	2117      	movs	r1, #23
 8007a86:	187b      	adds	r3, r7, r1
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	18d3      	adds	r3, r2, r3
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	4b8c      	ldr	r3, [pc, #560]	@ (8007cc4 <Process_USB_input+0x2ec>)
 8007a94:	18d3      	adds	r3, r2, r3
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	001a      	movs	r2, r3
 8007a9a:	2344      	movs	r3, #68	@ 0x44
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	d05c      	beq.n	8007b5a <Process_USB_input+0x182>
            result = (result << 4) | (isdigit(message[i]) ? message[i] - '0' : toupper(message[i]) - 'A' + 10);
 8007aa0:	4b89      	ldr	r3, [pc, #548]	@ (8007cc8 <Process_USB_input+0x2f0>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	b25a      	sxtb	r2, r3
 8007aa8:	0008      	movs	r0, r1
 8007aaa:	187b      	adds	r3, r7, r1
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	68f9      	ldr	r1, [r7, #12]
 8007ab0:	18cb      	adds	r3, r1, r3
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	1c59      	adds	r1, r3, #1
 8007ab6:	4b83      	ldr	r3, [pc, #524]	@ (8007cc4 <Process_USB_input+0x2ec>)
 8007ab8:	18cb      	adds	r3, r1, r3
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	0019      	movs	r1, r3
 8007abe:	2304      	movs	r3, #4
 8007ac0:	400b      	ands	r3, r1
 8007ac2:	d008      	beq.n	8007ad6 <Process_USB_input+0xfe>
 8007ac4:	183b      	adds	r3, r7, r0
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	68f9      	ldr	r1, [r7, #12]
 8007aca:	18cb      	adds	r3, r1, r3
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	3b30      	subs	r3, #48	@ 0x30
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	b25b      	sxtb	r3, r3
 8007ad4:	e01e      	b.n	8007b14 <Process_USB_input+0x13c>
 8007ad6:	2317      	movs	r3, #23
 8007ad8:	18fb      	adds	r3, r7, r3
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	68f9      	ldr	r1, [r7, #12]
 8007ade:	18c9      	adds	r1, r1, r3
 8007ae0:	200b      	movs	r0, #11
 8007ae2:	183b      	adds	r3, r7, r0
 8007ae4:	7809      	ldrb	r1, [r1, #0]
 8007ae6:	7019      	strb	r1, [r3, #0]
 8007ae8:	183b      	adds	r3, r7, r0
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	1c59      	adds	r1, r3, #1
 8007aee:	4b75      	ldr	r3, [pc, #468]	@ (8007cc4 <Process_USB_input+0x2ec>)
 8007af0:	18cb      	adds	r3, r1, r3
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	0019      	movs	r1, r3
 8007af6:	2303      	movs	r3, #3
 8007af8:	400b      	ands	r3, r1
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d103      	bne.n	8007b06 <Process_USB_input+0x12e>
 8007afe:	183b      	adds	r3, r7, r0
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	3b20      	subs	r3, #32
 8007b04:	e002      	b.n	8007b0c <Process_USB_input+0x134>
 8007b06:	230b      	movs	r3, #11
 8007b08:	18fb      	adds	r3, r7, r3
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	3b37      	subs	r3, #55	@ 0x37
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	b25b      	sxtb	r3, r3
 8007b14:	4313      	orrs	r3, r2
 8007b16:	b25b      	sxtb	r3, r3
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	4b6b      	ldr	r3, [pc, #428]	@ (8007cc8 <Process_USB_input+0x2f0>)
 8007b1c:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%2X\r\n", result);
            HAL_Delay(10);
 8007b1e:	200a      	movs	r0, #10
 8007b20:	f00a faf0 	bl	8012104 <HAL_Delay>
            if (len == 27) {
 8007b24:	4b62      	ldr	r3, [pc, #392]	@ (8007cb0 <Process_USB_input+0x2d8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b1b      	cmp	r3, #27
 8007b2a:	d127      	bne.n	8007b7c <Process_USB_input+0x1a4>
              if ((i % 2) == 0) {
 8007b2c:	2317      	movs	r3, #23
 8007b2e:	18fb      	adds	r3, r7, r3
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2201      	movs	r2, #1
 8007b34:	4013      	ands	r3, r2
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d11f      	bne.n	8007b7c <Process_USB_input+0x1a4>
                message[r] = result;
 8007b3c:	4b63      	ldr	r3, [pc, #396]	@ (8007ccc <Process_USB_input+0x2f4>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	001a      	movs	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	189b      	adds	r3, r3, r2
 8007b46:	4a60      	ldr	r2, [pc, #384]	@ (8007cc8 <Process_USB_input+0x2f0>)
 8007b48:	7812      	ldrb	r2, [r2, #0]
 8007b4a:	701a      	strb	r2, [r3, #0]
                r++;
 8007b4c:	4b5f      	ldr	r3, [pc, #380]	@ (8007ccc <Process_USB_input+0x2f4>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	3301      	adds	r3, #1
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	4b5d      	ldr	r3, [pc, #372]	@ (8007ccc <Process_USB_input+0x2f4>)
 8007b56:	701a      	strb	r2, [r3, #0]
 8007b58:	e010      	b.n	8007b7c <Process_USB_input+0x1a4>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", message[i], i);
 8007b5a:	2017      	movs	r0, #23
 8007b5c:	183b      	adds	r3, r7, r0
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	18d3      	adds	r3, r2, r3
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	0019      	movs	r1, r3
 8007b68:	183b      	adds	r3, r7, r0
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	4b58      	ldr	r3, [pc, #352]	@ (8007cd0 <Process_USB_input+0x2f8>)
 8007b6e:	0018      	movs	r0, r3
 8007b70:	f7ff fcf0 	bl	8007554 <printf_USB>
            ResetUsbRxDataSize();
 8007b74:	f018 fd9c 	bl	80206b0 <ResetUsbRxDataSize>
            return false; // Of een andere foutwaarde
 8007b78:	2300      	movs	r3, #0
 8007b7a:	e095      	b.n	8007ca8 <Process_USB_input+0x2d0>
        for (uint8_t i=3; i < len; i++) {
 8007b7c:	2117      	movs	r1, #23
 8007b7e:	187b      	adds	r3, r7, r1
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	187b      	adds	r3, r7, r1
 8007b84:	3201      	adds	r2, #1
 8007b86:	701a      	strb	r2, [r3, #0]
 8007b88:	2317      	movs	r3, #23
 8007b8a:	18fb      	adds	r3, r7, r3
 8007b8c:	781a      	ldrb	r2, [r3, #0]
 8007b8e:	4b48      	ldr	r3, [pc, #288]	@ (8007cb0 <Process_USB_input+0x2d8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d200      	bcs.n	8007b98 <Process_USB_input+0x1c0>
 8007b96:	e772      	b.n	8007a7e <Process_USB_input+0xa6>
          }
        }
        if (len == 5) {
 8007b98:	4b45      	ldr	r3, [pc, #276]	@ (8007cb0 <Process_USB_input+0x2d8>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b05      	cmp	r3, #5
 8007b9e:	d112      	bne.n	8007bc6 <Process_USB_input+0x1ee>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8007ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8007cd4 <Process_USB_input+0x2fc>)
 8007ba2:	484d      	ldr	r0, [pc, #308]	@ (8007cd8 <Process_USB_input+0x300>)
 8007ba4:	220c      	movs	r2, #12
 8007ba6:	0019      	movs	r1, r3
 8007ba8:	f002 fae0 	bl	800a16c <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte
 8007bac:	4b46      	ldr	r3, [pc, #280]	@ (8007cc8 <Process_USB_input+0x2f0>)
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	4b48      	ldr	r3, [pc, #288]	@ (8007cd4 <Process_USB_input+0x2fc>)
 8007bb2:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8007bb4:	4b42      	ldr	r3, [pc, #264]	@ (8007cc0 <Process_USB_input+0x2e8>)
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	4946      	ldr	r1, [pc, #280]	@ (8007cd4 <Process_USB_input+0x2fc>)
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	220c      	movs	r2, #12
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	f01c f884 	bl	8023ccc <memcpy>
 8007bc4:	e005      	b.n	8007bd2 <Process_USB_input+0x1fa>
        }
        else {
          memcpy(received.Payload, message, IdSize);
 8007bc6:	68f9      	ldr	r1, [r7, #12]
 8007bc8:	4b44      	ldr	r3, [pc, #272]	@ (8007cdc <Process_USB_input+0x304>)
 8007bca:	220c      	movs	r2, #12
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f01c f87d 	bl	8023ccc <memcpy>
        }
        received.PayloadLength = IdSize;
 8007bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8007cc0 <Process_USB_input+0x2e8>)
 8007bd4:	220c      	movs	r2, #12
 8007bd6:	705a      	strb	r2, [r3, #1]
        uint8ArrayToString(Buffer, received.Payload);
 8007bd8:	4a40      	ldr	r2, [pc, #256]	@ (8007cdc <Process_USB_input+0x304>)
 8007bda:	4b41      	ldr	r3, [pc, #260]	@ (8007ce0 <Process_USB_input+0x308>)
 8007bdc:	0011      	movs	r1, r2
 8007bde:	0018      	movs	r0, r3
 8007be0:	f7fc ffa2 	bl	8004b28 <uint8ArrayToString>
        ProcessCmd(received);
 8007be4:	4c36      	ldr	r4, [pc, #216]	@ (8007cc0 <Process_USB_input+0x2e8>)
 8007be6:	466b      	mov	r3, sp
 8007be8:	0018      	movs	r0, r3
 8007bea:	0023      	movs	r3, r4
 8007bec:	3310      	adds	r3, #16
 8007bee:	22f4      	movs	r2, #244	@ 0xf4
 8007bf0:	0019      	movs	r1, r3
 8007bf2:	f01c f86b 	bl	8023ccc <memcpy>
 8007bf6:	6820      	ldr	r0, [r4, #0]
 8007bf8:	6861      	ldr	r1, [r4, #4]
 8007bfa:	68a2      	ldr	r2, [r4, #8]
 8007bfc:	68e3      	ldr	r3, [r4, #12]
 8007bfe:	f7ff fb1b 	bl	8007238 <ProcessCmd>
        ResetUsbRxDataSize();
 8007c02:	f018 fd55 	bl	80206b0 <ResetUsbRxDataSize>
        PC_show_Keys();
 8007c06:	f7ff fce5 	bl	80075d4 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8007c0a:	2316      	movs	r3, #22
 8007c0c:	18fb      	adds	r3, r7, r3
 8007c0e:	2200      	movs	r2, #0
 8007c10:	701a      	strb	r2, [r3, #0]
 8007c12:	e00b      	b.n	8007c2c <Process_USB_input+0x254>
          data[i] = '\0';
 8007c14:	2116      	movs	r1, #22
 8007c16:	187b      	adds	r3, r7, r1
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	18d3      	adds	r3, r2, r3
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8007c22:	187b      	adds	r3, r7, r1
 8007c24:	781a      	ldrb	r2, [r3, #0]
 8007c26:	187b      	adds	r3, r7, r1
 8007c28:	3201      	adds	r2, #1
 8007c2a:	701a      	strb	r2, [r3, #0]
 8007c2c:	2316      	movs	r3, #22
 8007c2e:	18fb      	adds	r3, r7, r3
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b1f      	cmp	r3, #31
 8007c34:	d9ee      	bls.n	8007c14 <Process_USB_input+0x23c>
        }
        return true;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e036      	b.n	8007ca8 <Process_USB_input+0x2d0>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 8007c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ce4 <Process_USB_input+0x30c>)
 8007c3c:	0018      	movs	r0, r3
 8007c3e:	f7ff fc89 	bl	8007554 <printf_USB>
        ResetUsbRxDataSize();
 8007c42:	f018 fd35 	bl	80206b0 <ResetUsbRxDataSize>
      if (message[2] == ',') {
 8007c46:	e006      	b.n	8007c56 <Process_USB_input+0x27e>
      }
    }
    else {
      len = 5;
 8007c48:	4b19      	ldr	r3, [pc, #100]	@ (8007cb0 <Process_USB_input+0x2d8>)
 8007c4a:	2205      	movs	r2, #5
 8007c4c:	601a      	str	r2, [r3, #0]
      PC_show_Keys();
 8007c4e:	f7ff fcc1 	bl	80075d4 <PC_show_Keys>
      ResetUsbRxDataSize();
 8007c52:	f018 fd2d 	bl	80206b0 <ResetUsbRxDataSize>
    }
    for (uint8_t i=0; i < 32; i++) {
 8007c56:	2315      	movs	r3, #21
 8007c58:	18fb      	adds	r3, r7, r3
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e00b      	b.n	8007c78 <Process_USB_input+0x2a0>
      data[i] = '\0';
 8007c60:	2115      	movs	r1, #21
 8007c62:	187b      	adds	r3, r7, r1
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	18d3      	adds	r3, r2, r3
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 8007c6e:	187b      	adds	r3, r7, r1
 8007c70:	781a      	ldrb	r2, [r3, #0]
 8007c72:	187b      	adds	r3, r7, r1
 8007c74:	3201      	adds	r2, #1
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	2315      	movs	r3, #21
 8007c7a:	18fb      	adds	r3, r7, r3
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b1f      	cmp	r3, #31
 8007c80:	d9ee      	bls.n	8007c60 <Process_USB_input+0x288>
    }

  }
  if (formerlength != length) {
 8007c82:	4b19      	ldr	r3, [pc, #100]	@ (8007ce8 <Process_USB_input+0x310>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d008      	beq.n	8007c9e <Process_USB_input+0x2c6>
    printf_USB("USB input: %s\r", (const char*)data);
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	4b17      	ldr	r3, [pc, #92]	@ (8007cec <Process_USB_input+0x314>)
 8007c90:	0011      	movs	r1, r2
 8007c92:	0018      	movs	r0, r3
 8007c94:	f7ff fc5e 	bl	8007554 <printf_USB>
    formerlength = length;
 8007c98:	4b13      	ldr	r3, [pc, #76]	@ (8007ce8 <Process_USB_input+0x310>)
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f018 fd27 	bl	80206f4 <GetUsbRxNextChunk>

  return false;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	0018      	movs	r0, r3
 8007caa:	46bd      	mov	sp, r7
 8007cac:	b007      	add	sp, #28
 8007cae:	bd90      	pop	{r4, r7, pc}
 8007cb0:	20000030 	.word	0x20000030
 8007cb4:	08028d28 	.word	0x08028d28
 8007cb8:	08028d68 	.word	0x08028d68
 8007cbc:	08028d6c 	.word	0x08028d6c
 8007cc0:	200007ec 	.word	0x200007ec
 8007cc4:	0802b800 	.word	0x0802b800
 8007cc8:	200008f0 	.word	0x200008f0
 8007ccc:	20000af4 	.word	0x20000af4
 8007cd0:	08028d7c 	.word	0x08028d7c
 8007cd4:	20000af8 	.word	0x20000af8
 8007cd8:	08080000 	.word	0x08080000
 8007cdc:	200007ee 	.word	0x200007ee
 8007ce0:	20000b04 	.word	0x20000b04
 8007ce4:	08028db4 	.word	0x08028db4
 8007ce8:	200008f4 	.word	0x200008f4
 8007cec:	08028de0 	.word	0x08028de0

08007cf0 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8007cf4:	4b26      	ldr	r3, [pc, #152]	@ (8007d90 <ReadBatteryVoltage+0xa0>)
 8007cf6:	4a27      	ldr	r2, [pc, #156]	@ (8007d94 <ReadBatteryVoltage+0xa4>)
 8007cf8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007cfa:	4b25      	ldr	r3, [pc, #148]	@ (8007d90 <ReadBatteryVoltage+0xa0>)
 8007cfc:	2280      	movs	r2, #128	@ 0x80
 8007cfe:	0152      	lsls	r2, r2, #5
 8007d00:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007d02:	4a23      	ldr	r2, [pc, #140]	@ (8007d90 <ReadBatteryVoltage+0xa0>)
 8007d04:	4b24      	ldr	r3, [pc, #144]	@ (8007d98 <ReadBatteryVoltage+0xa8>)
 8007d06:	0011      	movs	r1, r2
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f00a fcc9 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8007d0e:	1e03      	subs	r3, r0, #0
 8007d10:	d001      	beq.n	8007d16 <ReadBatteryVoltage+0x26>
    Error_Handler();
 8007d12:	f003 facb 	bl	800b2ac <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8007d16:	4b20      	ldr	r3, [pc, #128]	@ (8007d98 <ReadBatteryVoltage+0xa8>)
 8007d18:	0018      	movs	r0, r3
 8007d1a:	f00a fbc5 	bl	80124a8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8007d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007d98 <ReadBatteryVoltage+0xa8>)
 8007d20:	2101      	movs	r1, #1
 8007d22:	0018      	movs	r0, r3
 8007d24:	f00a fc14 	bl	8012550 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8007d28:	4b1b      	ldr	r3, [pc, #108]	@ (8007d98 <ReadBatteryVoltage+0xa8>)
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f00a fcac 	bl	8012688 <HAL_ADC_GetValue>
 8007d30:	0002      	movs	r2, r0
 8007d32:	4b1a      	ldr	r3, [pc, #104]	@ (8007d9c <ReadBatteryVoltage+0xac>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4353      	muls	r3, r2
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	4919      	ldr	r1, [pc, #100]	@ (8007da0 <ReadBatteryVoltage+0xb0>)
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f7f8 fa31 	bl	80001a4 <__udivsi3>
 8007d42:	0003      	movs	r3, r0
 8007d44:	001a      	movs	r2, r3
 8007d46:	4b17      	ldr	r3, [pc, #92]	@ (8007da4 <ReadBatteryVoltage+0xb4>)
 8007d48:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8007d4a:	4b16      	ldr	r3, [pc, #88]	@ (8007da4 <ReadBatteryVoltage+0xb4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	0018      	movs	r0, r3
 8007d50:	f7f9 fc8a 	bl	8001668 <__aeabi_ui2f>
 8007d54:	1c03      	adds	r3, r0, #0
 8007d56:	4914      	ldr	r1, [pc, #80]	@ (8007da8 <ReadBatteryVoltage+0xb8>)
 8007d58:	1c18      	adds	r0, r3, #0
 8007d5a:	f7f8 ff3b 	bl	8000bd4 <__aeabi_fdiv>
 8007d5e:	1c03      	adds	r3, r0, #0
 8007d60:	1c1a      	adds	r2, r3, #0
 8007d62:	4b12      	ldr	r3, [pc, #72]	@ (8007dac <ReadBatteryVoltage+0xbc>)
 8007d64:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8007d66:	4b0a      	ldr	r3, [pc, #40]	@ (8007d90 <ReadBatteryVoltage+0xa0>)
 8007d68:	4a0a      	ldr	r2, [pc, #40]	@ (8007d94 <ReadBatteryVoltage+0xa4>)
 8007d6a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8007d6c:	4b08      	ldr	r3, [pc, #32]	@ (8007d90 <ReadBatteryVoltage+0xa0>)
 8007d6e:	4a10      	ldr	r2, [pc, #64]	@ (8007db0 <ReadBatteryVoltage+0xc0>)
 8007d70:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007d72:	4a07      	ldr	r2, [pc, #28]	@ (8007d90 <ReadBatteryVoltage+0xa0>)
 8007d74:	4b08      	ldr	r3, [pc, #32]	@ (8007d98 <ReadBatteryVoltage+0xa8>)
 8007d76:	0011      	movs	r1, r2
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f00a fc91 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8007d7e:	1e03      	subs	r3, r0, #0
 8007d80:	d001      	beq.n	8007d86 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8007d82:	f003 fa93 	bl	800b2ac <Error_Handler>
  }
  return trueValue;
 8007d86:	4b09      	ldr	r3, [pc, #36]	@ (8007dac <ReadBatteryVoltage+0xbc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 }
 8007d8a:	1c18      	adds	r0, r3, #0
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	20000b1c 	.word	0x20000b1c
 8007d94:	38004000 	.word	0x38004000
 8007d98:	20000b58 	.word	0x20000b58
 8007d9c:	20000034 	.word	0x20000034
 8007da0:	00000fff 	.word	0x00000fff
 8007da4:	20000b24 	.word	0x20000b24
 8007da8:	447a0000 	.word	0x447a0000
 8007dac:	20000b28 	.word	0x20000b28
 8007db0:	00001001 	.word	0x00001001

08007db4 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8007db8:	4b21      	ldr	r3, [pc, #132]	@ (8007e40 <ReadSolarVoltage+0x8c>)
 8007dba:	4a22      	ldr	r2, [pc, #136]	@ (8007e44 <ReadSolarVoltage+0x90>)
 8007dbc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007dbe:	4b20      	ldr	r3, [pc, #128]	@ (8007e40 <ReadSolarVoltage+0x8c>)
 8007dc0:	2280      	movs	r2, #128	@ 0x80
 8007dc2:	0152      	lsls	r2, r2, #5
 8007dc4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8007e40 <ReadSolarVoltage+0x8c>)
 8007dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8007e48 <ReadSolarVoltage+0x94>)
 8007dca:	0011      	movs	r1, r2
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f00a fc67 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8007dd2:	1e03      	subs	r3, r0, #0
 8007dd4:	d001      	beq.n	8007dda <ReadSolarVoltage+0x26>
    Error_Handler();
 8007dd6:	f003 fa69 	bl	800b2ac <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8007dda:	4b1b      	ldr	r3, [pc, #108]	@ (8007e48 <ReadSolarVoltage+0x94>)
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f00a fb63 	bl	80124a8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8007de2:	4b19      	ldr	r3, [pc, #100]	@ (8007e48 <ReadSolarVoltage+0x94>)
 8007de4:	2101      	movs	r1, #1
 8007de6:	0018      	movs	r0, r3
 8007de8:	f00a fbb2 	bl	8012550 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8007dec:	4b16      	ldr	r3, [pc, #88]	@ (8007e48 <ReadSolarVoltage+0x94>)
 8007dee:	0018      	movs	r0, r3
 8007df0:	f00a fc4a 	bl	8012688 <HAL_ADC_GetValue>
 8007df4:	0002      	movs	r2, r0
 8007df6:	4b15      	ldr	r3, [pc, #84]	@ (8007e4c <ReadSolarVoltage+0x98>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	435a      	muls	r2, r3
 8007dfc:	0013      	movs	r3, r2
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	189b      	adds	r3, r3, r2
 8007e02:	4913      	ldr	r1, [pc, #76]	@ (8007e50 <ReadSolarVoltage+0x9c>)
 8007e04:	0018      	movs	r0, r3
 8007e06:	f7f8 f9cd 	bl	80001a4 <__udivsi3>
 8007e0a:	0003      	movs	r3, r0
 8007e0c:	001a      	movs	r2, r3
 8007e0e:	4b11      	ldr	r3, [pc, #68]	@ (8007e54 <ReadSolarVoltage+0xa0>)
 8007e10:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8007e12:	4b0b      	ldr	r3, [pc, #44]	@ (8007e40 <ReadSolarVoltage+0x8c>)
 8007e14:	4a0b      	ldr	r2, [pc, #44]	@ (8007e44 <ReadSolarVoltage+0x90>)
 8007e16:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8007e18:	4b09      	ldr	r3, [pc, #36]	@ (8007e40 <ReadSolarVoltage+0x8c>)
 8007e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8007e58 <ReadSolarVoltage+0xa4>)
 8007e1c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8007e1e:	4a08      	ldr	r2, [pc, #32]	@ (8007e40 <ReadSolarVoltage+0x8c>)
 8007e20:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <ReadSolarVoltage+0x94>)
 8007e22:	0011      	movs	r1, r2
 8007e24:	0018      	movs	r0, r3
 8007e26:	f00a fc3b 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8007e2a:	1e03      	subs	r3, r0, #0
 8007e2c:	d001      	beq.n	8007e32 <ReadSolarVoltage+0x7e>
    Error_Handler();
 8007e2e:	f003 fa3d 	bl	800b2ac <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8007e32:	4b08      	ldr	r3, [pc, #32]	@ (8007e54 <ReadSolarVoltage+0xa0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 }
 8007e38:	0018      	movs	r0, r3
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	46c0      	nop			@ (mov r8, r8)
 8007e40:	20000b1c 	.word	0x20000b1c
 8007e44:	3c008000 	.word	0x3c008000
 8007e48:	20000b58 	.word	0x20000b58
 8007e4c:	20000034 	.word	0x20000034
 8007e50:	00000fff 	.word	0x00000fff
 8007e54:	20000b2c 	.word	0x20000b2c
 8007e58:	00001001 	.word	0x00001001

08007e5c <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8007e60:	23a0      	movs	r3, #160	@ 0xa0
 8007e62:	05db      	lsls	r3, r3, #23
 8007e64:	2180      	movs	r1, #128	@ 0x80
 8007e66:	0018      	movs	r0, r3
 8007e68:	f00b fbb6 	bl	80135d8 <HAL_GPIO_ReadPin>
 8007e6c:	0003      	movs	r3, r0
 8007e6e:	1e5a      	subs	r2, r3, #1
 8007e70:	4193      	sbcs	r3, r2
 8007e72:	b2db      	uxtb	r3, r3
}
 8007e74:	0018      	movs	r0, r3
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8007e7e:	2380      	movs	r3, #128	@ 0x80
 8007e80:	021a      	lsls	r2, r3, #8
 8007e82:	23a0      	movs	r3, #160	@ 0xa0
 8007e84:	05db      	lsls	r3, r3, #23
 8007e86:	0011      	movs	r1, r2
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f00b fba5 	bl	80135d8 <HAL_GPIO_ReadPin>
 8007e8e:	0003      	movs	r3, r0
 8007e90:	1e5a      	subs	r2, r3, #1
 8007e92:	4193      	sbcs	r3, r2
 8007e94:	b2db      	uxtb	r3, r3
}
 8007e96:	0018      	movs	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8007ea0:	4b05      	ldr	r3, [pc, #20]	@ (8007eb8 <UserButton_Pressed+0x1c>)
 8007ea2:	2104      	movs	r1, #4
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	f00b fb97 	bl	80135d8 <HAL_GPIO_ReadPin>
 8007eaa:	0003      	movs	r3, r0
 8007eac:	425a      	negs	r2, r3
 8007eae:	4153      	adcs	r3, r2
 8007eb0:	b2db      	uxtb	r3, r3
}
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	50000c00 	.word	0x50000c00

08007ebc <showTime>:
char strbuf[24] = {0}; //fi length -> 22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8007ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ebe:	46d6      	mov	lr, sl
 8007ec0:	464f      	mov	r7, r9
 8007ec2:	4646      	mov	r6, r8
 8007ec4:	b5c0      	push	{r6, r7, lr}
 8007ec6:	b08e      	sub	sp, #56	@ 0x38
 8007ec8:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 8007eca:	4b21      	ldr	r3, [pc, #132]	@ (8007f50 <showTime+0x94>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d036      	beq.n	8007f40 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8007ed2:	003a      	movs	r2, r7
 8007ed4:	1d3b      	adds	r3, r7, #4
 8007ed6:	0011      	movs	r1, r2
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f000 fa3f 	bl	800835c <RTC_GetTime>
  UpdateSystemUptime();
 8007ede:	f000 f853 	bl	8007f88 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007ee2:	003b      	movs	r3, r7
 8007ee4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007ee6:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007ee8:	003b      	movs	r3, r7
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007eee:	4b19      	ldr	r3, [pc, #100]	@ (8007f54 <showTime+0x98>)
 8007ef0:	0092      	lsls	r2, r2, #2
 8007ef2:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007ef4:	003b      	movs	r3, r7
 8007ef6:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007ef8:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007efa:	1d3b      	adds	r3, r7, #4
 8007efc:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007efe:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8007f00:	1d3b      	adds	r3, r7, #4
 8007f02:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f04:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007f06:	1d3b      	adds	r3, r7, #4
 8007f08:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f0a:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007f0c:	4b12      	ldr	r3, [pc, #72]	@ (8007f58 <showTime+0x9c>)
 8007f0e:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f10:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007f12:	4b11      	ldr	r3, [pc, #68]	@ (8007f58 <showTime+0x9c>)
 8007f14:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f16:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007f18:	4b0f      	ldr	r3, [pc, #60]	@ (8007f58 <showTime+0x9c>)
 8007f1a:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f1c:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8007f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f58 <showTime+0x9c>)
 8007f20:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8007f22:	480e      	ldr	r0, [pc, #56]	@ (8007f5c <showTime+0xa0>)
 8007f24:	9306      	str	r3, [sp, #24]
 8007f26:	4643      	mov	r3, r8
 8007f28:	9305      	str	r3, [sp, #20]
 8007f2a:	4663      	mov	r3, ip
 8007f2c:	9304      	str	r3, [sp, #16]
 8007f2e:	9603      	str	r6, [sp, #12]
 8007f30:	9502      	str	r5, [sp, #8]
 8007f32:	9401      	str	r4, [sp, #4]
 8007f34:	9100      	str	r1, [sp, #0]
 8007f36:	4653      	mov	r3, sl
 8007f38:	4649      	mov	r1, r9
 8007f3a:	f01b fc15 	bl	8023768 <iprintf>
 8007f3e:	e000      	b.n	8007f42 <showTime+0x86>
    return;
 8007f40:	46c0      	nop			@ (mov r8, r8)
}
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b006      	add	sp, #24
 8007f46:	bce0      	pop	{r5, r6, r7}
 8007f48:	46ba      	mov	sl, r7
 8007f4a:	46b1      	mov	r9, r6
 8007f4c:	46a8      	mov	r8, r5
 8007f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f50:	20000b3c 	.word	0x20000b3c
 8007f54:	20000054 	.word	0x20000054
 8007f58:	20000b30 	.word	0x20000b30
 8007f5c:	08028e3c 	.word	0x08028e3c

08007f60 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8007f66:	003a      	movs	r2, r7
 8007f68:	1d3b      	adds	r3, r7, #4
 8007f6a:	0011      	movs	r1, r2
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	f000 f9f5 	bl	800835c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8007f72:	1d3a      	adds	r2, r7, #4
 8007f74:	003b      	movs	r3, r7
 8007f76:	0011      	movs	r1, r2
 8007f78:	0018      	movs	r0, r3
 8007f7a:	f000 fbc5 	bl	8008708 <makeTime>
 8007f7e:	0003      	movs	r3, r0
}
 8007f80:	0018      	movs	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b006      	add	sp, #24
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8007f8e:	003a      	movs	r2, r7
 8007f90:	1d3b      	adds	r3, r7, #4
 8007f92:	0011      	movs	r1, r2
 8007f94:	0018      	movs	r0, r3
 8007f96:	f000 f9e1 	bl	800835c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8007f9a:	1d3a      	adds	r2, r7, #4
 8007f9c:	003b      	movs	r3, r7
 8007f9e:	0011      	movs	r1, r2
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f000 fbb1 	bl	8008708 <makeTime>
 8007fa6:	0002      	movs	r2, r0
 8007fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8008024 <UpdateSystemUptime+0x9c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	213c      	movs	r1, #60	@ 0x3c
 8007fb8:	0018      	movs	r0, r3
 8007fba:	f7f8 f979 	bl	80002b0 <__aeabi_uidivmod>
 8007fbe:	000b      	movs	r3, r1
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	4b19      	ldr	r3, [pc, #100]	@ (8008028 <UpdateSystemUptime+0xa0>)
 8007fc4:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	213c      	movs	r1, #60	@ 0x3c
 8007fca:	0018      	movs	r0, r3
 8007fcc:	f7f8 f8ea 	bl	80001a4 <__udivsi3>
 8007fd0:	0003      	movs	r3, r0
 8007fd2:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	213c      	movs	r1, #60	@ 0x3c
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f7f8 f969 	bl	80002b0 <__aeabi_uidivmod>
 8007fde:	000b      	movs	r3, r1
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	4b11      	ldr	r3, [pc, #68]	@ (8008028 <UpdateSystemUptime+0xa0>)
 8007fe4:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	213c      	movs	r1, #60	@ 0x3c
 8007fea:	0018      	movs	r0, r3
 8007fec:	f7f8 f8da 	bl	80001a4 <__udivsi3>
 8007ff0:	0003      	movs	r3, r0
 8007ff2:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	2118      	movs	r1, #24
 8007ff8:	0018      	movs	r0, r3
 8007ffa:	f7f8 f959 	bl	80002b0 <__aeabi_uidivmod>
 8007ffe:	000b      	movs	r3, r1
 8008000:	b2da      	uxtb	r2, r3
 8008002:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <UpdateSystemUptime+0xa0>)
 8008004:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	2118      	movs	r1, #24
 800800a:	0018      	movs	r0, r3
 800800c:	f7f8 f8ca 	bl	80001a4 <__udivsi3>
 8008010:	0003      	movs	r3, r0
 8008012:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	b29a      	uxth	r2, r3
 8008018:	4b03      	ldr	r3, [pc, #12]	@ (8008028 <UpdateSystemUptime+0xa0>)
 800801a:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800801c:	46c0      	nop			@ (mov r8, r8)
 800801e:	46bd      	mov	sp, r7
 8008020:	b008      	add	sp, #32
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20000b3c 	.word	0x20000b3c
 8008028:	20000b30 	.word	0x20000b30

0800802c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800802c:	b590      	push	{r4, r7, lr}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	0008      	movs	r0, r1
 8008036:	0011      	movs	r1, r2
 8008038:	1cfb      	adds	r3, r7, #3
 800803a:	1c02      	adds	r2, r0, #0
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	1cbb      	adds	r3, r7, #2
 8008040:	1c0a      	adds	r2, r1, #0
 8008042:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8008044:	230e      	movs	r3, #14
 8008046:	18fb      	adds	r3, r7, r3
 8008048:	2200      	movs	r2, #0
 800804a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800804c:	230f      	movs	r3, #15
 800804e:	18fb      	adds	r3, r7, r3
 8008050:	1cfa      	adds	r2, r7, #3
 8008052:	7812      	ldrb	r2, [r2, #0]
 8008054:	701a      	strb	r2, [r3, #0]
 8008056:	e015      	b.n	8008084 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8008058:	200f      	movs	r0, #15
 800805a:	183b      	adds	r3, r7, r0
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	18d2      	adds	r2, r2, r3
 8008062:	240e      	movs	r4, #14
 8008064:	193b      	adds	r3, r7, r4
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	7811      	ldrb	r1, [r2, #0]
 800806a:	2208      	movs	r2, #8
 800806c:	18ba      	adds	r2, r7, r2
 800806e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8008070:	193b      	adds	r3, r7, r4
 8008072:	781a      	ldrb	r2, [r3, #0]
 8008074:	193b      	adds	r3, r7, r4
 8008076:	3201      	adds	r2, #1
 8008078:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800807a:	183b      	adds	r3, r7, r0
 800807c:	781a      	ldrb	r2, [r3, #0]
 800807e:	183b      	adds	r3, r7, r0
 8008080:	3201      	adds	r2, #1
 8008082:	701a      	strb	r2, [r3, #0]
 8008084:	200f      	movs	r0, #15
 8008086:	183a      	adds	r2, r7, r0
 8008088:	1cbb      	adds	r3, r7, #2
 800808a:	7812      	ldrb	r2, [r2, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	429a      	cmp	r2, r3
 8008090:	d9e2      	bls.n	8008058 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8008092:	230e      	movs	r3, #14
 8008094:	18fb      	adds	r3, r7, r3
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2208      	movs	r2, #8
 800809a:	18ba      	adds	r2, r7, r2
 800809c:	2100      	movs	r1, #0
 800809e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 80080a0:	1cfb      	adds	r3, r7, #3
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2b13      	cmp	r3, #19
 80080a6:	d849      	bhi.n	800813c <aBuff2int+0x110>
    if (start == 17) { //month
 80080a8:	1cfb      	adds	r3, r7, #3
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b11      	cmp	r3, #17
 80080ae:	d122      	bne.n	80080f6 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 80080b0:	183b      	adds	r3, r7, r0
 80080b2:	2200      	movs	r2, #0
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e018      	b.n	80080ea <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 80080b8:	240f      	movs	r4, #15
 80080ba:	193b      	adds	r3, r7, r4
 80080bc:	781a      	ldrb	r2, [r3, #0]
 80080be:	4b25      	ldr	r3, [pc, #148]	@ (8008154 <aBuff2int+0x128>)
 80080c0:	0092      	lsls	r2, r2, #2
 80080c2:	58d2      	ldr	r2, [r2, r3]
 80080c4:	2308      	movs	r3, #8
 80080c6:	18fb      	adds	r3, r7, r3
 80080c8:	0011      	movs	r1, r2
 80080ca:	0018      	movs	r0, r3
 80080cc:	f7f8 f844 	bl	8000158 <strcmp>
 80080d0:	1e03      	subs	r3, r0, #0
 80080d2:	d104      	bne.n	80080de <aBuff2int+0xb2>
          return i+1;
 80080d4:	193b      	adds	r3, r7, r4
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	3301      	adds	r3, #1
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	e035      	b.n	800814a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80080de:	210f      	movs	r1, #15
 80080e0:	187b      	adds	r3, r7, r1
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	187b      	adds	r3, r7, r1
 80080e6:	3201      	adds	r2, #1
 80080e8:	701a      	strb	r2, [r3, #0]
 80080ea:	230f      	movs	r3, #15
 80080ec:	18fb      	adds	r3, r7, r3
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b0b      	cmp	r3, #11
 80080f2:	d9e1      	bls.n	80080b8 <aBuff2int+0x8c>
 80080f4:	e022      	b.n	800813c <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80080f6:	230f      	movs	r3, #15
 80080f8:	18fb      	adds	r3, r7, r3
 80080fa:	2200      	movs	r2, #0
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	e018      	b.n	8008132 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8008100:	240f      	movs	r4, #15
 8008102:	193b      	adds	r3, r7, r4
 8008104:	781a      	ldrb	r2, [r3, #0]
 8008106:	4b14      	ldr	r3, [pc, #80]	@ (8008158 <aBuff2int+0x12c>)
 8008108:	0092      	lsls	r2, r2, #2
 800810a:	58d2      	ldr	r2, [r2, r3]
 800810c:	2308      	movs	r3, #8
 800810e:	18fb      	adds	r3, r7, r3
 8008110:	0011      	movs	r1, r2
 8008112:	0018      	movs	r0, r3
 8008114:	f7f8 f820 	bl	8000158 <strcmp>
 8008118:	1e03      	subs	r3, r0, #0
 800811a:	d104      	bne.n	8008126 <aBuff2int+0xfa>
          return i+1;
 800811c:	193b      	adds	r3, r7, r4
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	3301      	adds	r3, #1
 8008122:	b2db      	uxtb	r3, r3
 8008124:	e011      	b.n	800814a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8008126:	210f      	movs	r1, #15
 8008128:	187b      	adds	r3, r7, r1
 800812a:	781a      	ldrb	r2, [r3, #0]
 800812c:	187b      	adds	r3, r7, r1
 800812e:	3201      	adds	r2, #1
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	230f      	movs	r3, #15
 8008134:	18fb      	adds	r3, r7, r3
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b06      	cmp	r3, #6
 800813a:	d9e1      	bls.n	8008100 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800813c:	2308      	movs	r3, #8
 800813e:	18fb      	adds	r3, r7, r3
 8008140:	0018      	movs	r0, r3
 8008142:	f019 ff36 	bl	8021fb2 <atoi>
 8008146:	0003      	movs	r3, r0
 8008148:	b2db      	uxtb	r3, r3
}
 800814a:	0018      	movs	r0, r3
 800814c:	46bd      	mov	sp, r7
 800814e:	b005      	add	sp, #20
 8008150:	bd90      	pop	{r4, r7, pc}
 8008152:	46c0      	nop			@ (mov r8, r8)
 8008154:	20000054 	.word	0x20000054
 8008158:	20000038 	.word	0x20000038

0800815c <ParseTime>:

void ParseTime(char* buffer) {
 800815c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815e:	b08b      	sub	sp, #44	@ 0x2c
 8008160:	af02      	add	r7, sp, #8
 8008162:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008164:	2408      	movs	r4, #8
 8008166:	193a      	adds	r2, r7, r4
 8008168:	260c      	movs	r6, #12
 800816a:	19bb      	adds	r3, r7, r6
 800816c:	0011      	movs	r1, r2
 800816e:	0018      	movs	r0, r3
 8008170:	f000 f8f4 	bl	800835c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2219      	movs	r2, #25
 8008178:	2118      	movs	r1, #24
 800817a:	0018      	movs	r0, r3
 800817c:	f7ff ff56 	bl	800802c <aBuff2int>
 8008180:	0003      	movs	r3, r0
 8008182:	001a      	movs	r2, r3
 8008184:	19bb      	adds	r3, r7, r6
 8008186:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	221c      	movs	r2, #28
 800818c:	211b      	movs	r1, #27
 800818e:	0018      	movs	r0, r3
 8008190:	f7ff ff4c 	bl	800802c <aBuff2int>
 8008194:	0003      	movs	r3, r0
 8008196:	001a      	movs	r2, r3
 8008198:	19bb      	adds	r3, r7, r6
 800819a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	221f      	movs	r2, #31
 80081a0:	211e      	movs	r1, #30
 80081a2:	0018      	movs	r0, r3
 80081a4:	f7ff ff42 	bl	800802c <aBuff2int>
 80081a8:	0003      	movs	r3, r0
 80081aa:	001a      	movs	r2, r3
 80081ac:	19bb      	adds	r3, r7, r6
 80081ae:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2224      	movs	r2, #36	@ 0x24
 80081b4:	2123      	movs	r1, #35	@ 0x23
 80081b6:	0018      	movs	r0, r3
 80081b8:	f7ff ff38 	bl	800802c <aBuff2int>
 80081bc:	0003      	movs	r3, r0
 80081be:	001a      	movs	r2, r3
 80081c0:	0025      	movs	r5, r4
 80081c2:	197b      	adds	r3, r7, r5
 80081c4:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2213      	movs	r2, #19
 80081ca:	2111      	movs	r1, #17
 80081cc:	0018      	movs	r0, r3
 80081ce:	f7ff ff2d 	bl	800802c <aBuff2int>
 80081d2:	0003      	movs	r3, r0
 80081d4:	001a      	movs	r2, r3
 80081d6:	197b      	adds	r3, r7, r5
 80081d8:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2216      	movs	r2, #22
 80081de:	2115      	movs	r1, #21
 80081e0:	0018      	movs	r0, r3
 80081e2:	f7ff ff23 	bl	800802c <aBuff2int>
 80081e6:	0003      	movs	r3, r0
 80081e8:	001a      	movs	r2, r3
 80081ea:	197b      	adds	r3, r7, r5
 80081ec:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	220f      	movs	r2, #15
 80081f2:	210d      	movs	r1, #13
 80081f4:	0018      	movs	r0, r3
 80081f6:	f7ff ff19 	bl	800802c <aBuff2int>
 80081fa:	0003      	movs	r3, r0
 80081fc:	001a      	movs	r2, r3
 80081fe:	197b      	adds	r3, r7, r5
 8008200:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8008202:	19bb      	adds	r3, r7, r6
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	001c      	movs	r4, r3
 8008208:	19bb      	adds	r3, r7, r6
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	0018      	movs	r0, r3
 800820e:	19bb      	adds	r3, r7, r6
 8008210:	789b      	ldrb	r3, [r3, #2]
 8008212:	4a1c      	ldr	r2, [pc, #112]	@ (8008284 <ParseTime+0x128>)
 8008214:	491c      	ldr	r1, [pc, #112]	@ (8008288 <ParseTime+0x12c>)
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	9000      	str	r0, [sp, #0]
 800821a:	0023      	movs	r3, r4
 800821c:	2003      	movs	r0, #3
 800821e:	f009 fb1b 	bl	8011858 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 8008222:	197b      	adds	r3, r7, r5
 8008224:	789b      	ldrb	r3, [r3, #2]
 8008226:	001c      	movs	r4, r3
 8008228:	197b      	adds	r3, r7, r5
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	0018      	movs	r0, r3
 800822e:	197b      	adds	r3, r7, r5
 8008230:	78db      	ldrb	r3, [r3, #3]
 8008232:	4a16      	ldr	r2, [pc, #88]	@ (800828c <ParseTime+0x130>)
 8008234:	4914      	ldr	r1, [pc, #80]	@ (8008288 <ParseTime+0x12c>)
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	9000      	str	r0, [sp, #0]
 800823a:	0023      	movs	r3, r4
 800823c:	2003      	movs	r0, #3
 800823e:	f009 fb0b 	bl	8011858 <CreateLine>
  RTC_SetTime(&currentTime);
 8008242:	19bb      	adds	r3, r7, r6
 8008244:	0018      	movs	r0, r3
 8008246:	f000 f825 	bl	8008294 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800824a:	197b      	adds	r3, r7, r5
 800824c:	0018      	movs	r0, r3
 800824e:	f000 f847 	bl	80082e0 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8008252:	197b      	adds	r3, r7, r5
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2b02      	cmp	r3, #2
 8008258:	d101      	bne.n	800825e <ParseTime+0x102>
    reset_fanCleaningDone();
 800825a:	f004 f913 	bl	800c484 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 800825e:	4b0c      	ldr	r3, [pc, #48]	@ (8008290 <ParseTime+0x134>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8008266:	230c      	movs	r3, #12
 8008268:	18fa      	adds	r2, r7, r3
 800826a:	2308      	movs	r3, #8
 800826c:	18fb      	adds	r3, r7, r3
 800826e:	0011      	movs	r1, r2
 8008270:	0018      	movs	r0, r3
 8008272:	f000 fa49 	bl	8008708 <makeTime>
 8008276:	0002      	movs	r2, r0
 8008278:	4b05      	ldr	r3, [pc, #20]	@ (8008290 <ParseTime+0x134>)
 800827a:	601a      	str	r2, [r3, #0]
  }
}
 800827c:	46c0      	nop			@ (mov r8, r8)
 800827e:	46bd      	mov	sp, r7
 8008280:	b009      	add	sp, #36	@ 0x24
 8008282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008284:	08028e94 	.word	0x08028e94
 8008288:	08028ecc 	.word	0x08028ecc
 800828c:	08028ed0 	.word	0x08028ed0
 8008290:	20000b3c 	.word	0x20000b3c

08008294 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80082ae:	4b09      	ldr	r3, [pc, #36]	@ (80082d4 <RTC_SetTime+0x40>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	0018      	movs	r0, r3
 80082b8:	f011 fad2 	bl	8019860 <HAL_RTC_SetTime>
 80082bc:	1e03      	subs	r3, r0, #0
 80082be:	d005      	beq.n	80082cc <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 80082c0:	4a05      	ldr	r2, [pc, #20]	@ (80082d8 <RTC_SetTime+0x44>)
 80082c2:	4b06      	ldr	r3, [pc, #24]	@ (80082dc <RTC_SetTime+0x48>)
 80082c4:	0019      	movs	r1, r3
 80082c6:	2001      	movs	r0, #1
 80082c8:	f009 fac6 	bl	8011858 <CreateLine>
    }
}
 80082cc:	46c0      	nop			@ (mov r8, r8)
 80082ce:	46bd      	mov	sp, r7
 80082d0:	b002      	add	sp, #8
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000b38 	.word	0x20000b38
 80082d8:	08028f04 	.word	0x08028f04
 80082dc:	08028f20 	.word	0x08028f20

080082e0 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80082e8:	4b16      	ldr	r3, [pc, #88]	@ (8008344 <RTC_SetDate+0x64>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6879      	ldr	r1, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	0018      	movs	r0, r3
 80082f2:	f011 fbbd 	bl	8019a70 <HAL_RTC_SetDate>
 80082f6:	1e03      	subs	r3, r0, #0
 80082f8:	d005      	beq.n	8008306 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 80082fa:	4a13      	ldr	r2, [pc, #76]	@ (8008348 <RTC_SetDate+0x68>)
 80082fc:	4b13      	ldr	r3, [pc, #76]	@ (800834c <RTC_SetDate+0x6c>)
 80082fe:	0019      	movs	r1, r3
 8008300:	2001      	movs	r0, #1
 8008302:	f009 faa9 	bl	8011858 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8008306:	4b0f      	ldr	r3, [pc, #60]	@ (8008344 <RTC_SetDate+0x64>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2101      	movs	r1, #1
 800830c:	0018      	movs	r0, r3
 800830e:	f011 fef5 	bl	801a0fc <HAL_RTCEx_BKUPRead>
 8008312:	0003      	movs	r3, r0
 8008314:	4a0e      	ldr	r2, [pc, #56]	@ (8008350 <RTC_SetDate+0x70>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d010      	beq.n	800833c <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800831a:	4a0e      	ldr	r2, [pc, #56]	@ (8008354 <RTC_SetDate+0x74>)
 800831c:	4b0e      	ldr	r3, [pc, #56]	@ (8008358 <RTC_SetDate+0x78>)
 800831e:	0019      	movs	r1, r3
 8008320:	2003      	movs	r0, #3
 8008322:	f009 fa99 	bl	8011858 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8008326:	f010 fa1b 	bl	8018760 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800832a:	4b06      	ldr	r3, [pc, #24]	@ (8008344 <RTC_SetDate+0x64>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a08      	ldr	r2, [pc, #32]	@ (8008350 <RTC_SetDate+0x70>)
 8008330:	2101      	movs	r1, #1
 8008332:	0018      	movs	r0, r3
 8008334:	f011 feca 	bl	801a0cc <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8008338:	f010 fa20 	bl	801877c <HAL_PWR_DisableBkUpAccess>
    }
}
 800833c:	46c0      	nop			@ (mov r8, r8)
 800833e:	46bd      	mov	sp, r7
 8008340:	b002      	add	sp, #8
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20000b38 	.word	0x20000b38
 8008348:	08028f24 	.word	0x08028f24
 800834c:	08028f20 	.word	0x08028f20
 8008350:	0000bebe 	.word	0x0000bebe
 8008354:	08028f40 	.word	0x08028f40
 8008358:	08028ecc 	.word	0x08028ecc

0800835c <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800835c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8008366:	250f      	movs	r5, #15
 8008368:	197b      	adds	r3, r7, r5
 800836a:	2201      	movs	r2, #1
 800836c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800836e:	230e      	movs	r3, #14
 8008370:	18fb      	adds	r3, r7, r3
 8008372:	2200      	movs	r2, #0
 8008374:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8008376:	260c      	movs	r6, #12
 8008378:	19bc      	adds	r4, r7, r6
 800837a:	f008 faff 	bl	801097c <powerCheck>
 800837e:	0003      	movs	r3, r0
 8008380:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8008382:	19bb      	adds	r3, r7, r6
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d104      	bne.n	8008394 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800838a:	197b      	adds	r3, r7, r5
 800838c:	781a      	ldrb	r2, [r3, #0]
 800838e:	197b      	adds	r3, r7, r5
 8008390:	3201      	adds	r2, #1
 8008392:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8008394:	230d      	movs	r3, #13
 8008396:	18fb      	adds	r3, r7, r3
 8008398:	2200      	movs	r2, #0
 800839a:	701a      	strb	r2, [r3, #0]
 800839c:	e039      	b.n	8008412 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800839e:	4b23      	ldr	r3, [pc, #140]	@ (800842c <RTC_GetTime+0xd0>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	0018      	movs	r0, r3
 80083a8:	f011 fb04 	bl	80199b4 <HAL_RTC_GetTime>
 80083ac:	1e03      	subs	r3, r0, #0
 80083ae:	d005      	beq.n	80083bc <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 80083b0:	4a1f      	ldr	r2, [pc, #124]	@ (8008430 <RTC_GetTime+0xd4>)
 80083b2:	4b20      	ldr	r3, [pc, #128]	@ (8008434 <RTC_GetTime+0xd8>)
 80083b4:	0019      	movs	r1, r3
 80083b6:	2001      	movs	r0, #1
 80083b8:	f009 fa4e 	bl	8011858 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80083bc:	4b1b      	ldr	r3, [pc, #108]	@ (800842c <RTC_GetTime+0xd0>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	2200      	movs	r2, #0
 80083c4:	0018      	movs	r0, r3
 80083c6:	f011 fbe7 	bl	8019b98 <HAL_RTC_GetDate>
 80083ca:	1e03      	subs	r3, r0, #0
 80083cc:	d005      	beq.n	80083da <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80083ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008438 <RTC_GetTime+0xdc>)
 80083d0:	4b18      	ldr	r3, [pc, #96]	@ (8008434 <RTC_GetTime+0xd8>)
 80083d2:	0019      	movs	r1, r3
 80083d4:	2001      	movs	r0, #1
 80083d6:	f009 fa3f 	bl	8011858 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80083da:	230c      	movs	r3, #12
 80083dc:	18fb      	adds	r3, r7, r3
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d110      	bne.n	8008406 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	210e      	movs	r1, #14
 80083ea:	187a      	adds	r2, r7, r1
 80083ec:	7812      	ldrb	r2, [r2, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d018      	beq.n	8008424 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80083f2:	187b      	adds	r3, r7, r1
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	7812      	ldrb	r2, [r2, #0]
 80083f8:	701a      	strb	r2, [r3, #0]
        t++;
 80083fa:	210f      	movs	r1, #15
 80083fc:	187b      	adds	r3, r7, r1
 80083fe:	781a      	ldrb	r2, [r3, #0]
 8008400:	187b      	adds	r3, r7, r1
 8008402:	3201      	adds	r2, #1
 8008404:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8008406:	210d      	movs	r1, #13
 8008408:	187b      	adds	r3, r7, r1
 800840a:	781a      	ldrb	r2, [r3, #0]
 800840c:	187b      	adds	r3, r7, r1
 800840e:	3201      	adds	r2, #1
 8008410:	701a      	strb	r2, [r3, #0]
 8008412:	230d      	movs	r3, #13
 8008414:	18fa      	adds	r2, r7, r3
 8008416:	230f      	movs	r3, #15
 8008418:	18fb      	adds	r3, r7, r3
 800841a:	7812      	ldrb	r2, [r2, #0]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	429a      	cmp	r2, r3
 8008420:	d3bd      	bcc.n	800839e <RTC_GetTime+0x42>
 8008422:	e000      	b.n	8008426 <RTC_GetTime+0xca>
      }
      else {
        return;
 8008424:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8008426:	46bd      	mov	sp, r7
 8008428:	b005      	add	sp, #20
 800842a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800842c:	20000b38 	.word	0x20000b38
 8008430:	08028f58 	.word	0x08028f58
 8008434:	08028f20 	.word	0x08028f20
 8008438:	08028f74 	.word	0x08028f74

0800843c <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008442:	003a      	movs	r2, r7
 8008444:	1d3b      	adds	r3, r7, #4
 8008446:	0011      	movs	r1, r2
 8008448:	0018      	movs	r0, r3
 800844a:	f7ff ff87 	bl	800835c <RTC_GetTime>
  return currentDate.WeekDay;
 800844e:	003b      	movs	r3, r7
 8008450:	781b      	ldrb	r3, [r3, #0]
}
 8008452:	0018      	movs	r0, r3
 8008454:	46bd      	mov	sp, r7
 8008456:	b006      	add	sp, #24
 8008458:	bd80      	pop	{r7, pc}

0800845a <getPosixTime>:

uint32_t getPosixTime(void) {
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8008460:	003a      	movs	r2, r7
 8008462:	1d3b      	adds	r3, r7, #4
 8008464:	0011      	movs	r1, r2
 8008466:	0018      	movs	r0, r3
 8008468:	f7ff ff78 	bl	800835c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800846c:	1d3a      	adds	r2, r7, #4
 800846e:	003b      	movs	r3, r7
 8008470:	0011      	movs	r1, r2
 8008472:	0018      	movs	r0, r3
 8008474:	f000 f948 	bl	8008708 <makeTime>
 8008478:	0003      	movs	r3, r0
}
 800847a:	0018      	movs	r0, r3
 800847c:	46bd      	mov	sp, r7
 800847e:	b006      	add	sp, #24
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8008484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008486:	b08d      	sub	sp, #52	@ 0x34
 8008488:	af04      	add	r7, sp, #16
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800848e:	240c      	movs	r4, #12
 8008490:	193a      	adds	r2, r7, r4
 8008492:	2508      	movs	r5, #8
 8008494:	1979      	adds	r1, r7, r5
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	0018      	movs	r0, r3
 800849a:	f000 f9ff 	bl	800889c <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800849e:	002a      	movs	r2, r5
 80084a0:	18bb      	adds	r3, r7, r2
 80084a2:	789b      	ldrb	r3, [r3, #2]
 80084a4:	001e      	movs	r6, r3
 80084a6:	18bb      	adds	r3, r7, r2
 80084a8:	785b      	ldrb	r3, [r3, #1]
 80084aa:	469c      	mov	ip, r3
 80084ac:	18bb      	adds	r3, r7, r2
 80084ae:	78db      	ldrb	r3, [r3, #3]
 80084b0:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80084b2:	0021      	movs	r1, r4
 80084b4:	187b      	adds	r3, r7, r1
 80084b6:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80084b8:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80084ba:	187b      	adds	r3, r7, r1
 80084bc:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80084be:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80084c0:	187b      	adds	r3, r7, r1
 80084c2:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 80084c4:	4906      	ldr	r1, [pc, #24]	@ (80084e0 <getUTCfromPosixTime+0x5c>)
 80084c6:	6838      	ldr	r0, [r7, #0]
 80084c8:	9303      	str	r3, [sp, #12]
 80084ca:	9502      	str	r5, [sp, #8]
 80084cc:	9401      	str	r4, [sp, #4]
 80084ce:	9200      	str	r2, [sp, #0]
 80084d0:	4663      	mov	r3, ip
 80084d2:	0032      	movs	r2, r6
 80084d4:	f01b f9b8 	bl	8023848 <siprintf>
}
 80084d8:	46c0      	nop			@ (mov r8, r8)
 80084da:	46bd      	mov	sp, r7
 80084dc:	b009      	add	sp, #36	@ 0x24
 80084de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e0:	08028f90 	.word	0x08028f90

080084e4 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80084ec:	4b10      	ldr	r3, [pc, #64]	@ (8008530 <RTC_SetWakeUpTimer+0x4c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	0018      	movs	r0, r3
 80084f2:	f011 fd4f 	bl	8019f94 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 80084f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008530 <RTC_SetWakeUpTimer+0x4c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	22ff      	movs	r2, #255	@ 0xff
 8008500:	401a      	ands	r2, r3
 8008502:	4b0b      	ldr	r3, [pc, #44]	@ (8008530 <RTC_SetWakeUpTimer+0x4c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	490a      	ldr	r1, [pc, #40]	@ (8008534 <RTC_SetWakeUpTimer+0x50>)
 800850a:	430a      	orrs	r2, r1
 800850c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800850e:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <RTC_SetWakeUpTimer+0x54>)
 8008510:	2280      	movs	r2, #128	@ 0x80
 8008512:	0352      	lsls	r2, r2, #13
 8008514:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8008516:	4b06      	ldr	r3, [pc, #24]	@ (8008530 <RTC_SetWakeUpTimer+0x4c>)
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3b01      	subs	r3, #1
 800851e:	2204      	movs	r2, #4
 8008520:	0019      	movs	r1, r3
 8008522:	f011 fc5f 	bl	8019de4 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8008526:	46c0      	nop			@ (mov r8, r8)
 8008528:	46bd      	mov	sp, r7
 800852a:	b002      	add	sp, #8
 800852c:	bd80      	pop	{r7, pc}
 800852e:	46c0      	nop			@ (mov r8, r8)
 8008530:	20000b38 	.word	0x20000b38
 8008534:	fffffb7f 	.word	0xfffffb7f
 8008538:	40010400 	.word	0x40010400

0800853c <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8008540:	4a0b      	ldr	r2, [pc, #44]	@ (8008570 <Enter_Standby_Mode+0x34>)
 8008542:	4b0c      	ldr	r3, [pc, #48]	@ (8008574 <Enter_Standby_Mode+0x38>)
 8008544:	0019      	movs	r1, r3
 8008546:	2003      	movs	r0, #3
 8008548:	f009 f986 	bl	8011858 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 800854c:	2064      	movs	r0, #100	@ 0x64
 800854e:	f009 fdd9 	bl	8012104 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8008552:	4b09      	ldr	r3, [pc, #36]	@ (8008578 <Enter_Standby_Mode+0x3c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	0018      	movs	r0, r3
 8008558:	f011 fd1c 	bl	8019f94 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 800855c:	f002 f8e0 	bl	800a720 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8008560:	f009 fdf4 	bl	801214c <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8008564:	f010 f976 	bl	8018854 <HAL_PWR_EnterSTANDBYMode>
}
 8008568:	46c0      	nop			@ (mov r8, r8)
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	46c0      	nop			@ (mov r8, r8)
 8008570:	08028fe4 	.word	0x08028fe4
 8008574:	08028ecc 	.word	0x08028ecc
 8008578:	20000b38 	.word	0x20000b38

0800857c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af02      	add	r7, sp, #8
 8008582:	0002      	movs	r2, r0
 8008584:	1dbb      	adds	r3, r7, #6
 8008586:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8008588:	4b4c      	ldr	r3, [pc, #304]	@ (80086bc <Enter_Stop_Mode+0x140>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8008590:	f003 ff4c 	bl	800c42c <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8008594:	f7ff fbac 	bl	8007cf0 <ReadBatteryVoltage>
 8008598:	1c03      	adds	r3, r0, #0
 800859a:	1c18      	adds	r0, r3, #0
 800859c:	f7fa ff62 	bl	8003464 <__aeabi_f2d>
 80085a0:	0002      	movs	r2, r0
 80085a2:	000b      	movs	r3, r1
 80085a4:	4846      	ldr	r0, [pc, #280]	@ (80086c0 <Enter_Stop_Mode+0x144>)
 80085a6:	4947      	ldr	r1, [pc, #284]	@ (80086c4 <Enter_Stop_Mode+0x148>)
 80085a8:	9200      	str	r2, [sp, #0]
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	0002      	movs	r2, r0
 80085ae:	2002      	movs	r0, #2
 80085b0:	f009 f952 	bl	8011858 <CreateLine>
  powerDisplay(powerCheck());
 80085b4:	f008 f9e2 	bl	801097c <powerCheck>
 80085b8:	0003      	movs	r3, r0
 80085ba:	0018      	movs	r0, r3
 80085bc:	f008 f9fa 	bl	80109b4 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 80085c0:	1dbb      	adds	r3, r7, #6
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	4a40      	ldr	r2, [pc, #256]	@ (80086c8 <Enter_Stop_Mode+0x14c>)
 80085c6:	4941      	ldr	r1, [pc, #260]	@ (80086cc <Enter_Stop_Mode+0x150>)
 80085c8:	2003      	movs	r0, #3
 80085ca:	f009 f945 	bl	8011858 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 80085ce:	f7ff ff44 	bl	800845a <getPosixTime>
 80085d2:	0002      	movs	r2, r0
 80085d4:	1dbb      	adds	r3, r7, #6
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	18d3      	adds	r3, r2, r3
 80085da:	4a3d      	ldr	r2, [pc, #244]	@ (80086d0 <Enter_Stop_Mode+0x154>)
 80085dc:	0011      	movs	r1, r2
 80085de:	0018      	movs	r0, r3
 80085e0:	f7ff ff50 	bl	8008484 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 80085e4:	4b3a      	ldr	r3, [pc, #232]	@ (80086d0 <Enter_Stop_Mode+0x154>)
 80085e6:	4a3b      	ldr	r2, [pc, #236]	@ (80086d4 <Enter_Stop_Mode+0x158>)
 80085e8:	4936      	ldr	r1, [pc, #216]	@ (80086c4 <Enter_Stop_Mode+0x148>)
 80085ea:	2002      	movs	r0, #2
 80085ec:	f009 f934 	bl	8011858 <CreateLine>
  HAL_Delay(100);
 80085f0:	2064      	movs	r0, #100	@ 0x64
 80085f2:	f009 fd87 	bl	8012104 <HAL_Delay>
  HAL_SuspendTick();
 80085f6:	f009 fda9 	bl	801214c <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 80085fa:	1dbb      	adds	r3, r7, #6
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	0018      	movs	r0, r3
 8008600:	f7ff ff70 	bl	80084e4 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8008604:	2101      	movs	r1, #1
 8008606:	2001      	movs	r0, #1
 8008608:	f010 f8c8 	bl	801879c <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800860c:	f002 fcfe 	bl	800b00c <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8008610:	f009 fdaa 	bl	8012168 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8008614:	1dbb      	adds	r3, r7, #6
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	0018      	movs	r0, r3
 800861a:	f003 fe7b 	bl	800c314 <sen5x_enable>
 800861e:	1e03      	subs	r3, r0, #0
 8008620:	d01e      	beq.n	8008660 <Enter_Stop_Mode+0xe4>
    showTime();
 8008622:	f7ff fc4b 	bl	8007ebc <showTime>
    set_light_on_state();
 8008626:	f004 fb83 	bl	800cd30 <set_light_on_state>
    if (!userToggle) {
 800862a:	4b2b      	ldr	r3, [pc, #172]	@ (80086d8 <Enter_Stop_Mode+0x15c>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2201      	movs	r2, #1
 8008630:	4053      	eors	r3, r2
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d013      	beq.n	8008660 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 8008638:	201c      	movs	r0, #28
 800863a:	f7ff ff53 	bl	80084e4 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800863e:	4a22      	ldr	r2, [pc, #136]	@ (80086c8 <Enter_Stop_Mode+0x14c>)
 8008640:	4922      	ldr	r1, [pc, #136]	@ (80086cc <Enter_Stop_Mode+0x150>)
 8008642:	231c      	movs	r3, #28
 8008644:	2003      	movs	r0, #3
 8008646:	f009 f907 	bl	8011858 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800864a:	2101      	movs	r1, #1
 800864c:	2001      	movs	r0, #1
 800864e:	f010 f8a5 	bl	801879c <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8008652:	f002 fcdb 	bl	800b00c <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 8008656:	f009 fd87 	bl	8012168 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800865a:	2000      	movs	r0, #0
 800865c:	f003 fe38 	bl	800c2d0 <setsen5xReadTimer>
    }
  }
  showTime();
 8008660:	f7ff fc2c 	bl	8007ebc <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8008664:	f003 face 	bl	800bc04 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8008668:	f006 f9be 	bl	800e9e8 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 800866c:	2000      	movs	r0, #0
 800866e:	f003 fe41 	bl	800c2f4 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 8008672:	4b1a      	ldr	r3, [pc, #104]	@ (80086dc <Enter_Stop_Mode+0x160>)
 8008674:	0018      	movs	r0, r3
 8008676:	f7fb fedf 	bl	8004438 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800867a:	201e      	movs	r0, #30
 800867c:	f006 f9a2 	bl	800e9c4 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8008680:	2000      	movs	r0, #0
 8008682:	f009 faad 	bl	8011be0 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 8008686:	203c      	movs	r0, #60	@ 0x3c
 8008688:	f000 fb98 	bl	8008dbc <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 800868c:	205a      	movs	r0, #90	@ 0x5a
 800868e:	f000 ff31 	bl	80094f4 <setBMP280TimeStamp>
  setENS160TimeStamp(90);
 8008692:	205a      	movs	r0, #90	@ 0x5a
 8008694:	f7fb f83c 	bl	8003710 <setENS160TimeStamp>
  setMICTimeStamp(0);
 8008698:	2000      	movs	r0, #0
 800869a:	f003 faa1 	bl	800bbe0 <setMICTimeStamp>
  ESPTransmitDone = false;
 800869e:	4b10      	ldr	r3, [pc, #64]	@ (80086e0 <Enter_Stop_Mode+0x164>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 80086a4:	f009 fd24 	bl	80120f0 <HAL_GetTick>
 80086a8:	0003      	movs	r3, r0
 80086aa:	4a0e      	ldr	r2, [pc, #56]	@ (80086e4 <Enter_Stop_Mode+0x168>)
 80086ac:	189a      	adds	r2, r3, r2
 80086ae:	4b0e      	ldr	r3, [pc, #56]	@ (80086e8 <Enter_Stop_Mode+0x16c>)
 80086b0:	601a      	str	r2, [r3, #0]
}
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	46bd      	mov	sp, r7
 80086b6:	b002      	add	sp, #8
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	46c0      	nop			@ (mov r8, r8)
 80086bc:	20000e9d 	.word	0x20000e9d
 80086c0:	08029008 	.word	0x08029008
 80086c4:	08029020 	.word	0x08029020
 80086c8:	08029024 	.word	0x08029024
 80086cc:	08028ecc 	.word	0x08028ecc
 80086d0:	20000b40 	.word	0x20000b40
 80086d4:	08029048 	.word	0x08029048
 80086d8:	20001e2e 	.word	0x20001e2e
 80086dc:	00001194 	.word	0x00001194
 80086e0:	200005bc 	.word	0x200005bc
 80086e4:	00000bb8 	.word	0x00000bb8
 80086e8:	20000df4 	.word	0x20000df4

080086ec <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 80086f4:	4b03      	ldr	r3, [pc, #12]	@ (8008704 <InitClock+0x18>)
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	601a      	str	r2, [r3, #0]
}
 80086fa:	46c0      	nop			@ (mov r8, r8)
 80086fc:	46bd      	mov	sp, r7
 80086fe:	b002      	add	sp, #8
 8008700:	bd80      	pop	{r7, pc}
 8008702:	46c0      	nop			@ (mov r8, r8)
 8008704:	20000b38 	.word	0x20000b38

08008708 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	78db      	ldrb	r3, [r3, #3]
 8008716:	001a      	movs	r2, r3
 8008718:	0013      	movs	r3, r2
 800871a:	025b      	lsls	r3, r3, #9
 800871c:	189b      	adds	r3, r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	189b      	adds	r3, r3, r2
 8008722:	00db      	lsls	r3, r3, #3
 8008724:	189b      	adds	r3, r3, r2
 8008726:	011a      	lsls	r2, r3, #4
 8008728:	1ad2      	subs	r2, r2, r3
 800872a:	01d3      	lsls	r3, r2, #7
 800872c:	001a      	movs	r2, r3
 800872e:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8008730:	2300      	movs	r3, #0
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e028      	b.n	8008788 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4a53      	ldr	r2, [pc, #332]	@ (8008888 <makeTime+0x180>)
 800873a:	4293      	cmp	r3, r2
 800873c:	db21      	blt.n	8008782 <makeTime+0x7a>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	4a52      	ldr	r2, [pc, #328]	@ (800888c <makeTime+0x184>)
 8008742:	4694      	mov	ip, r2
 8008744:	4463      	add	r3, ip
 8008746:	001a      	movs	r2, r3
 8008748:	2303      	movs	r3, #3
 800874a:	4013      	ands	r3, r2
 800874c:	d119      	bne.n	8008782 <makeTime+0x7a>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4a4e      	ldr	r2, [pc, #312]	@ (800888c <makeTime+0x184>)
 8008752:	4694      	mov	ip, r2
 8008754:	4463      	add	r3, ip
 8008756:	2164      	movs	r1, #100	@ 0x64
 8008758:	0018      	movs	r0, r3
 800875a:	f7f7 fe93 	bl	8000484 <__aeabi_idivmod>
 800875e:	1e0b      	subs	r3, r1, #0
 8008760:	d10a      	bne.n	8008778 <makeTime+0x70>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	4a49      	ldr	r2, [pc, #292]	@ (800888c <makeTime+0x184>)
 8008766:	4694      	mov	ip, r2
 8008768:	4463      	add	r3, ip
 800876a:	22c8      	movs	r2, #200	@ 0xc8
 800876c:	0051      	lsls	r1, r2, #1
 800876e:	0018      	movs	r0, r3
 8008770:	f7f7 fe88 	bl	8000484 <__aeabi_idivmod>
 8008774:	1e0b      	subs	r3, r1, #0
 8008776:	d104      	bne.n	8008782 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4a45      	ldr	r2, [pc, #276]	@ (8008890 <makeTime+0x188>)
 800877c:	4694      	mov	ip, r2
 800877e:	4463      	add	r3, ip
 8008780:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	3301      	adds	r3, #1
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	78db      	ldrb	r3, [r3, #3]
 800878c:	001a      	movs	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4293      	cmp	r3, r2
 8008792:	dbd0      	blt.n	8008736 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8008794:	2301      	movs	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	e03c      	b.n	8008814 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d125      	bne.n	80087ec <makeTime+0xe4>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	78db      	ldrb	r3, [r3, #3]
 80087a4:	4a39      	ldr	r2, [pc, #228]	@ (800888c <makeTime+0x184>)
 80087a6:	4694      	mov	ip, r2
 80087a8:	4463      	add	r3, ip
 80087aa:	001a      	movs	r2, r3
 80087ac:	2303      	movs	r3, #3
 80087ae:	4013      	ands	r3, r2
 80087b0:	d11c      	bne.n	80087ec <makeTime+0xe4>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	78db      	ldrb	r3, [r3, #3]
 80087b6:	4a35      	ldr	r2, [pc, #212]	@ (800888c <makeTime+0x184>)
 80087b8:	4694      	mov	ip, r2
 80087ba:	4463      	add	r3, ip
 80087bc:	2164      	movs	r1, #100	@ 0x64
 80087be:	0018      	movs	r0, r3
 80087c0:	f7f7 fe60 	bl	8000484 <__aeabi_idivmod>
 80087c4:	1e0b      	subs	r3, r1, #0
 80087c6:	d10b      	bne.n	80087e0 <makeTime+0xd8>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	78db      	ldrb	r3, [r3, #3]
 80087cc:	4a2f      	ldr	r2, [pc, #188]	@ (800888c <makeTime+0x184>)
 80087ce:	4694      	mov	ip, r2
 80087d0:	4463      	add	r3, ip
 80087d2:	22c8      	movs	r2, #200	@ 0xc8
 80087d4:	0051      	lsls	r1, r2, #1
 80087d6:	0018      	movs	r0, r3
 80087d8:	f7f7 fe54 	bl	8000484 <__aeabi_idivmod>
 80087dc:	1e0b      	subs	r3, r1, #0
 80087de:	d105      	bne.n	80087ec <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4a2c      	ldr	r2, [pc, #176]	@ (8008894 <makeTime+0x18c>)
 80087e4:	4694      	mov	ip, r2
 80087e6:	4463      	add	r3, ip
 80087e8:	60bb      	str	r3, [r7, #8]
 80087ea:	e010      	b.n	800880e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	4a29      	ldr	r2, [pc, #164]	@ (8008898 <makeTime+0x190>)
 80087f2:	5cd3      	ldrb	r3, [r2, r3]
 80087f4:	001a      	movs	r2, r3
 80087f6:	0013      	movs	r3, r2
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	189b      	adds	r3, r3, r2
 80087fc:	011a      	lsls	r2, r3, #4
 80087fe:	1ad2      	subs	r2, r2, r3
 8008800:	0113      	lsls	r3, r2, #4
 8008802:	1a9b      	subs	r3, r3, r2
 8008804:	01db      	lsls	r3, r3, #7
 8008806:	001a      	movs	r2, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	189b      	adds	r3, r3, r2
 800880c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3301      	adds	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	001a      	movs	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4293      	cmp	r3, r2
 800881e:	dbbc      	blt.n	800879a <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	789b      	ldrb	r3, [r3, #2]
 8008824:	3b01      	subs	r3, #1
 8008826:	001a      	movs	r2, r3
 8008828:	0013      	movs	r3, r2
 800882a:	005b      	lsls	r3, r3, #1
 800882c:	189b      	adds	r3, r3, r2
 800882e:	011a      	lsls	r2, r3, #4
 8008830:	1ad2      	subs	r2, r2, r3
 8008832:	0113      	lsls	r3, r2, #4
 8008834:	1a9b      	subs	r3, r3, r2
 8008836:	01db      	lsls	r3, r3, #7
 8008838:	001a      	movs	r2, r3
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	189b      	adds	r3, r3, r2
 800883e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	001a      	movs	r2, r3
 8008846:	0013      	movs	r3, r2
 8008848:	011b      	lsls	r3, r3, #4
 800884a:	1a9b      	subs	r3, r3, r2
 800884c:	011a      	lsls	r2, r3, #4
 800884e:	1ad2      	subs	r2, r2, r3
 8008850:	0113      	lsls	r3, r2, #4
 8008852:	001a      	movs	r2, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	189b      	adds	r3, r3, r2
 8008858:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	001a      	movs	r2, r3
 8008860:	0013      	movs	r3, r2
 8008862:	011b      	lsls	r3, r3, #4
 8008864:	1a9b      	subs	r3, r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	001a      	movs	r2, r3
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	189b      	adds	r3, r3, r2
 800886e:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	789b      	ldrb	r3, [r3, #2]
 8008874:	001a      	movs	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	189b      	adds	r3, r3, r2
 800887a:	60bb      	str	r3, [r7, #8]
  return seconds;
 800887c:	68bb      	ldr	r3, [r7, #8]
}
 800887e:	0018      	movs	r0, r3
 8008880:	46bd      	mov	sp, r7
 8008882:	b004      	add	sp, #16
 8008884:	bd80      	pop	{r7, pc}
 8008886:	46c0      	nop			@ (mov r8, r8)
 8008888:	fffff84f 	.word	0xfffff84f
 800888c:	000007b2 	.word	0x000007b2
 8008890:	00015180 	.word	0x00015180
 8008894:	00263b80 	.word	0x00263b80
 8008898:	0802afe8 	.word	0x0802afe8

0800889c <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800889c:	b590      	push	{r4, r7, lr}
 800889e:	b089      	sub	sp, #36	@ 0x24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	213c      	movs	r1, #60	@ 0x3c
 80088b0:	0018      	movs	r0, r3
 80088b2:	f7f7 fcfd 	bl	80002b0 <__aeabi_uidivmod>
 80088b6:	000b      	movs	r3, r1
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	213c      	movs	r1, #60	@ 0x3c
 80088c2:	0018      	movs	r0, r3
 80088c4:	f7f7 fc6e 	bl	80001a4 <__udivsi3>
 80088c8:	0003      	movs	r3, r0
 80088ca:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	213c      	movs	r1, #60	@ 0x3c
 80088d0:	0018      	movs	r0, r3
 80088d2:	f7f7 fced 	bl	80002b0 <__aeabi_uidivmod>
 80088d6:	000b      	movs	r3, r1
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	213c      	movs	r1, #60	@ 0x3c
 80088e2:	0018      	movs	r0, r3
 80088e4:	f7f7 fc5e 	bl	80001a4 <__udivsi3>
 80088e8:	0003      	movs	r3, r0
 80088ea:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	2118      	movs	r1, #24
 80088f0:	0018      	movs	r0, r3
 80088f2:	f7f7 fcdd 	bl	80002b0 <__aeabi_uidivmod>
 80088f6:	000b      	movs	r3, r1
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2118      	movs	r1, #24
 8008902:	0018      	movs	r0, r3
 8008904:	f7f7 fc4e 	bl	80001a4 <__udivsi3>
 8008908:	0003      	movs	r3, r0
 800890a:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	3b01      	subs	r3, #1
 8008910:	2107      	movs	r1, #7
 8008912:	0018      	movs	r0, r3
 8008914:	f7f7 fccc 	bl	80002b0 <__aeabi_uidivmod>
 8008918:	000b      	movs	r3, r1
 800891a:	b2db      	uxtb	r3, r3
 800891c:	3301      	adds	r3, #1
 800891e:	b2da      	uxtb	r2, r3
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	701a      	strb	r2, [r3, #0]
  year = 0;
 8008924:	231f      	movs	r3, #31
 8008926:	18fb      	adds	r3, r7, r3
 8008928:	2200      	movs	r2, #0
 800892a:	701a      	strb	r2, [r3, #0]
  days = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8008930:	e005      	b.n	800893e <breakPosixTime+0xa2>
    year++;
 8008932:	211f      	movs	r1, #31
 8008934:	187b      	adds	r3, r7, r1
 8008936:	781a      	ldrb	r2, [r3, #0]
 8008938:	187b      	adds	r3, r7, r1
 800893a:	3201      	adds	r2, #1
 800893c:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800893e:	241f      	movs	r4, #31
 8008940:	193b      	adds	r3, r7, r4
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	4a64      	ldr	r2, [pc, #400]	@ (8008ad8 <breakPosixTime+0x23c>)
 8008946:	4694      	mov	ip, r2
 8008948:	4463      	add	r3, ip
 800894a:	001a      	movs	r2, r3
 800894c:	2303      	movs	r3, #3
 800894e:	4013      	ands	r3, r2
 8008950:	d119      	bne.n	8008986 <breakPosixTime+0xea>
 8008952:	193b      	adds	r3, r7, r4
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	4a60      	ldr	r2, [pc, #384]	@ (8008ad8 <breakPosixTime+0x23c>)
 8008958:	4694      	mov	ip, r2
 800895a:	4463      	add	r3, ip
 800895c:	2164      	movs	r1, #100	@ 0x64
 800895e:	0018      	movs	r0, r3
 8008960:	f7f7 fd90 	bl	8000484 <__aeabi_idivmod>
 8008964:	1e0b      	subs	r3, r1, #0
 8008966:	d10b      	bne.n	8008980 <breakPosixTime+0xe4>
 8008968:	193b      	adds	r3, r7, r4
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	4a5a      	ldr	r2, [pc, #360]	@ (8008ad8 <breakPosixTime+0x23c>)
 800896e:	4694      	mov	ip, r2
 8008970:	4463      	add	r3, ip
 8008972:	22c8      	movs	r2, #200	@ 0xc8
 8008974:	0051      	lsls	r1, r2, #1
 8008976:	0018      	movs	r0, r3
 8008978:	f7f7 fd84 	bl	8000484 <__aeabi_idivmod>
 800897c:	1e0b      	subs	r3, r1, #0
 800897e:	d102      	bne.n	8008986 <breakPosixTime+0xea>
 8008980:	23b7      	movs	r3, #183	@ 0xb7
 8008982:	005b      	lsls	r3, r3, #1
 8008984:	e001      	b.n	800898a <breakPosixTime+0xee>
 8008986:	236e      	movs	r3, #110	@ 0x6e
 8008988:	33ff      	adds	r3, #255	@ 0xff
 800898a:	697a      	ldr	r2, [r7, #20]
 800898c:	18d3      	adds	r3, r2, r3
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	429a      	cmp	r2, r3
 8008996:	d9cc      	bls.n	8008932 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	241f      	movs	r4, #31
 800899c:	193a      	adds	r2, r7, r4
 800899e:	7812      	ldrb	r2, [r2, #0]
 80089a0:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 80089a2:	193b      	adds	r3, r7, r4
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	4a4c      	ldr	r2, [pc, #304]	@ (8008ad8 <breakPosixTime+0x23c>)
 80089a8:	4694      	mov	ip, r2
 80089aa:	4463      	add	r3, ip
 80089ac:	001a      	movs	r2, r3
 80089ae:	2303      	movs	r3, #3
 80089b0:	4013      	ands	r3, r2
 80089b2:	d119      	bne.n	80089e8 <breakPosixTime+0x14c>
 80089b4:	193b      	adds	r3, r7, r4
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	4a47      	ldr	r2, [pc, #284]	@ (8008ad8 <breakPosixTime+0x23c>)
 80089ba:	4694      	mov	ip, r2
 80089bc:	4463      	add	r3, ip
 80089be:	2164      	movs	r1, #100	@ 0x64
 80089c0:	0018      	movs	r0, r3
 80089c2:	f7f7 fd5f 	bl	8000484 <__aeabi_idivmod>
 80089c6:	1e0b      	subs	r3, r1, #0
 80089c8:	d10b      	bne.n	80089e2 <breakPosixTime+0x146>
 80089ca:	193b      	adds	r3, r7, r4
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	4a42      	ldr	r2, [pc, #264]	@ (8008ad8 <breakPosixTime+0x23c>)
 80089d0:	4694      	mov	ip, r2
 80089d2:	4463      	add	r3, ip
 80089d4:	22c8      	movs	r2, #200	@ 0xc8
 80089d6:	0051      	lsls	r1, r2, #1
 80089d8:	0018      	movs	r0, r3
 80089da:	f7f7 fd53 	bl	8000484 <__aeabi_idivmod>
 80089de:	1e0b      	subs	r3, r1, #0
 80089e0:	d102      	bne.n	80089e8 <breakPosixTime+0x14c>
 80089e2:	23b7      	movs	r3, #183	@ 0xb7
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	e001      	b.n	80089ec <breakPosixTime+0x150>
 80089e8:	236e      	movs	r3, #110	@ 0x6e
 80089ea:	33ff      	adds	r3, #255	@ 0xff
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 80089f2:	69ba      	ldr	r2, [r7, #24]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	61bb      	str	r3, [r7, #24]

  days=0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]
  month=0;
 80089fe:	211e      	movs	r1, #30
 8008a00:	187b      	adds	r3, r7, r1
 8008a02:	2200      	movs	r2, #0
 8008a04:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8008a06:	231d      	movs	r3, #29
 8008a08:	18fb      	adds	r3, r7, r3
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8008a0e:	187b      	adds	r3, r7, r1
 8008a10:	2200      	movs	r2, #0
 8008a12:	701a      	strb	r2, [r3, #0]
 8008a14:	e048      	b.n	8008aa8 <breakPosixTime+0x20c>
    if (month==1) { // february
 8008a16:	231e      	movs	r3, #30
 8008a18:	18fb      	adds	r3, r7, r3
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d12a      	bne.n	8008a76 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8008a20:	241f      	movs	r4, #31
 8008a22:	193b      	adds	r3, r7, r4
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	4a2c      	ldr	r2, [pc, #176]	@ (8008ad8 <breakPosixTime+0x23c>)
 8008a28:	4694      	mov	ip, r2
 8008a2a:	4463      	add	r3, ip
 8008a2c:	001a      	movs	r2, r3
 8008a2e:	2303      	movs	r3, #3
 8008a30:	4013      	ands	r3, r2
 8008a32:	d11b      	bne.n	8008a6c <breakPosixTime+0x1d0>
 8008a34:	193b      	adds	r3, r7, r4
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	4a27      	ldr	r2, [pc, #156]	@ (8008ad8 <breakPosixTime+0x23c>)
 8008a3a:	4694      	mov	ip, r2
 8008a3c:	4463      	add	r3, ip
 8008a3e:	2164      	movs	r1, #100	@ 0x64
 8008a40:	0018      	movs	r0, r3
 8008a42:	f7f7 fd1f 	bl	8000484 <__aeabi_idivmod>
 8008a46:	1e0b      	subs	r3, r1, #0
 8008a48:	d10b      	bne.n	8008a62 <breakPosixTime+0x1c6>
 8008a4a:	193b      	adds	r3, r7, r4
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	4a22      	ldr	r2, [pc, #136]	@ (8008ad8 <breakPosixTime+0x23c>)
 8008a50:	4694      	mov	ip, r2
 8008a52:	4463      	add	r3, ip
 8008a54:	22c8      	movs	r2, #200	@ 0xc8
 8008a56:	0051      	lsls	r1, r2, #1
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f7f7 fd13 	bl	8000484 <__aeabi_idivmod>
 8008a5e:	1e0b      	subs	r3, r1, #0
 8008a60:	d104      	bne.n	8008a6c <breakPosixTime+0x1d0>
        monthLength=29;
 8008a62:	231d      	movs	r3, #29
 8008a64:	18fb      	adds	r3, r7, r3
 8008a66:	221d      	movs	r2, #29
 8008a68:	701a      	strb	r2, [r3, #0]
 8008a6a:	e00c      	b.n	8008a86 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8008a6c:	231d      	movs	r3, #29
 8008a6e:	18fb      	adds	r3, r7, r3
 8008a70:	221c      	movs	r2, #28
 8008a72:	701a      	strb	r2, [r3, #0]
 8008a74:	e007      	b.n	8008a86 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8008a76:	231e      	movs	r3, #30
 8008a78:	18fb      	adds	r3, r7, r3
 8008a7a:	781a      	ldrb	r2, [r3, #0]
 8008a7c:	231d      	movs	r3, #29
 8008a7e:	18fb      	adds	r3, r7, r3
 8008a80:	4916      	ldr	r1, [pc, #88]	@ (8008adc <breakPosixTime+0x240>)
 8008a82:	5c8a      	ldrb	r2, [r1, r2]
 8008a84:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8008a86:	211d      	movs	r1, #29
 8008a88:	187b      	adds	r3, r7, r1
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d310      	bcc.n	8008ab4 <breakPosixTime+0x218>
      time -= monthLength;
 8008a92:	187b      	adds	r3, r7, r1
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8008a9c:	211e      	movs	r1, #30
 8008a9e:	187b      	adds	r3, r7, r1
 8008aa0:	781a      	ldrb	r2, [r3, #0]
 8008aa2:	187b      	adds	r3, r7, r1
 8008aa4:	3201      	adds	r2, #1
 8008aa6:	701a      	strb	r2, [r3, #0]
 8008aa8:	231e      	movs	r3, #30
 8008aaa:	18fb      	adds	r3, r7, r3
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	2b0b      	cmp	r3, #11
 8008ab0:	d9b1      	bls.n	8008a16 <breakPosixTime+0x17a>
 8008ab2:	e000      	b.n	8008ab6 <breakPosixTime+0x21a>
    } else {
        break;
 8008ab4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8008ab6:	231e      	movs	r3, #30
 8008ab8:	18fb      	adds	r3, r7, r3
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	3301      	adds	r3, #1
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	3301      	adds	r3, #1
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	709a      	strb	r2, [r3, #2]
}
 8008ad0:	46c0      	nop			@ (mov r8, r8)
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	b009      	add	sp, #36	@ 0x24
 8008ad6:	bd90      	pop	{r4, r7, pc}
 8008ad8:	000007b2 	.word	0x000007b2
 8008adc:	0802afe8 	.word	0x0802afe8

08008ae0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008ae6:	003b      	movs	r3, r7
 8008ae8:	0018      	movs	r0, r3
 8008aea:	2308      	movs	r3, #8
 8008aec:	001a      	movs	r2, r3
 8008aee:	2100      	movs	r1, #0
 8008af0:	f01b f810 	bl	8023b14 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8008af4:	4b30      	ldr	r3, [pc, #192]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008af6:	4a31      	ldr	r2, [pc, #196]	@ (8008bbc <MX_ADC_Init+0xdc>)
 8008af8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8008afa:	4b2f      	ldr	r3, [pc, #188]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8008b00:	4b2d      	ldr	r3, [pc, #180]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b02:	22c0      	movs	r2, #192	@ 0xc0
 8008b04:	0612      	lsls	r2, r2, #24
 8008b06:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008b08:	4b2b      	ldr	r3, [pc, #172]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8008b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008b14:	4b28      	ldr	r3, [pc, #160]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b16:	2201      	movs	r2, #1
 8008b18:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008b1a:	4b27      	ldr	r3, [pc, #156]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8008b20:	4b25      	ldr	r3, [pc, #148]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b22:	2220      	movs	r2, #32
 8008b24:	2100      	movs	r1, #0
 8008b26:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8008b28:	4b23      	ldr	r3, [pc, #140]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b2a:	2221      	movs	r2, #33	@ 0x21
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b30:	4b21      	ldr	r3, [pc, #132]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b36:	4b20      	ldr	r3, [pc, #128]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b38:	22c2      	movs	r2, #194	@ 0xc2
 8008b3a:	32ff      	adds	r2, #255	@ 0xff
 8008b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8008b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b40:	222c      	movs	r2, #44	@ 0x2c
 8008b42:	2100      	movs	r1, #0
 8008b44:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008b46:	4b1c      	ldr	r3, [pc, #112]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b48:	2204      	movs	r2, #4
 8008b4a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8008b52:	4b19      	ldr	r3, [pc, #100]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8008b58:	4b17      	ldr	r3, [pc, #92]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008b5e:	4b16      	ldr	r3, [pc, #88]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b60:	2200      	movs	r2, #0
 8008b62:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8008b64:	4b14      	ldr	r3, [pc, #80]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b66:	0018      	movs	r0, r3
 8008b68:	f009 fb2a 	bl	80121c0 <HAL_ADC_Init>
 8008b6c:	1e03      	subs	r3, r0, #0
 8008b6e:	d001      	beq.n	8008b74 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8008b70:	f002 fb9c 	bl	800b2ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8008b74:	003b      	movs	r3, r7
 8008b76:	4a12      	ldr	r2, [pc, #72]	@ (8008bc0 <MX_ADC_Init+0xe0>)
 8008b78:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008b7a:	003b      	movs	r3, r7
 8008b7c:	2280      	movs	r2, #128	@ 0x80
 8008b7e:	0152      	lsls	r2, r2, #5
 8008b80:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008b82:	003a      	movs	r2, r7
 8008b84:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008b86:	0011      	movs	r1, r2
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f009 fd89 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8008b8e:	1e03      	subs	r3, r0, #0
 8008b90:	d001      	beq.n	8008b96 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8008b92:	f002 fb8b 	bl	800b2ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008b96:	003b      	movs	r3, r7
 8008b98:	4a0a      	ldr	r2, [pc, #40]	@ (8008bc4 <MX_ADC_Init+0xe4>)
 8008b9a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8008b9c:	003a      	movs	r2, r7
 8008b9e:	4b06      	ldr	r3, [pc, #24]	@ (8008bb8 <MX_ADC_Init+0xd8>)
 8008ba0:	0011      	movs	r1, r2
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f009 fd7c 	bl	80126a0 <HAL_ADC_ConfigChannel>
 8008ba8:	1e03      	subs	r3, r0, #0
 8008baa:	d001      	beq.n	8008bb0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8008bac:	f002 fb7e 	bl	800b2ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8008bb0:	46c0      	nop			@ (mov r8, r8)
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	b002      	add	sp, #8
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	20000b58 	.word	0x20000b58
 8008bbc:	40012400 	.word	0x40012400
 8008bc0:	38004000 	.word	0x38004000
 8008bc4:	3c008000 	.word	0x3c008000

08008bc8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008bc8:	b590      	push	{r4, r7, lr}
 8008bca:	b089      	sub	sp, #36	@ 0x24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bd0:	240c      	movs	r4, #12
 8008bd2:	193b      	adds	r3, r7, r4
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	2314      	movs	r3, #20
 8008bd8:	001a      	movs	r2, r3
 8008bda:	2100      	movs	r1, #0
 8008bdc:	f01a ff9a 	bl	8023b14 <memset>
  if(adcHandle->Instance==ADC1)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a14      	ldr	r2, [pc, #80]	@ (8008c38 <HAL_ADC_MspInit+0x70>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d121      	bne.n	8008c2e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008bea:	4b14      	ldr	r3, [pc, #80]	@ (8008c3c <HAL_ADC_MspInit+0x74>)
 8008bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bee:	4b13      	ldr	r3, [pc, #76]	@ (8008c3c <HAL_ADC_MspInit+0x74>)
 8008bf0:	2180      	movs	r1, #128	@ 0x80
 8008bf2:	0089      	lsls	r1, r1, #2
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008bf8:	4b10      	ldr	r3, [pc, #64]	@ (8008c3c <HAL_ADC_MspInit+0x74>)
 8008bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8008c3c <HAL_ADC_MspInit+0x74>)
 8008bfe:	2104      	movs	r1, #4
 8008c00:	430a      	orrs	r2, r1
 8008c02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008c04:	4b0d      	ldr	r3, [pc, #52]	@ (8008c3c <HAL_ADC_MspInit+0x74>)
 8008c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c08:	2204      	movs	r2, #4
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	60bb      	str	r3, [r7, #8]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8008c10:	193b      	adds	r3, r7, r4
 8008c12:	2230      	movs	r2, #48	@ 0x30
 8008c14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c16:	193b      	adds	r3, r7, r4
 8008c18:	2203      	movs	r2, #3
 8008c1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c1c:	193b      	adds	r3, r7, r4
 8008c1e:	2200      	movs	r2, #0
 8008c20:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c22:	193b      	adds	r3, r7, r4
 8008c24:	4a06      	ldr	r2, [pc, #24]	@ (8008c40 <HAL_ADC_MspInit+0x78>)
 8008c26:	0019      	movs	r1, r3
 8008c28:	0010      	movs	r0, r2
 8008c2a:	f00a fb57 	bl	80132dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008c2e:	46c0      	nop			@ (mov r8, r8)
 8008c30:	46bd      	mov	sp, r7
 8008c32:	b009      	add	sp, #36	@ 0x24
 8008c34:	bd90      	pop	{r4, r7, pc}
 8008c36:	46c0      	nop			@ (mov r8, r8)
 8008c38:	40012400 	.word	0x40012400
 8008c3c:	40021000 	.word	0x40021000
 8008c40:	50000800 	.word	0x50000800

08008c44 <ReadDirRegister>:
static uint8_t AHTerrors = 0;
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008c44:	b590      	push	{r4, r7, lr}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6039      	str	r1, [r7, #0]
 8008c4c:	0011      	movs	r1, r2
 8008c4e:	1dfb      	adds	r3, r7, #7
 8008c50:	1c02      	adds	r2, r0, #0
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	1dbb      	adds	r3, r7, #6
 8008c56:	1c0a      	adds	r2, r1, #0
 8008c58:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 8008c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c84 <ReadDirRegister+0x40>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00a      	beq.n	8008c78 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 8008c62:	4b08      	ldr	r3, [pc, #32]	@ (8008c84 <ReadDirRegister+0x40>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	1dba      	adds	r2, r7, #6
 8008c68:	7814      	ldrb	r4, [r2, #0]
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	1dfa      	adds	r2, r7, #7
 8008c6e:	7810      	ldrb	r0, [r2, #0]
 8008c70:	0022      	movs	r2, r4
 8008c72:	4798      	blx	r3
 8008c74:	0003      	movs	r3, r0
 8008c76:	e000      	b.n	8008c7a <ReadDirRegister+0x36>
  }
  return false;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	b003      	add	sp, #12
 8008c80:	bd90      	pop	{r4, r7, pc}
 8008c82:	46c0      	nop			@ (mov r8, r8)
 8008c84:	20000bc0 	.word	0x20000bc0

08008c88 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008c88:	b590      	push	{r4, r7, lr}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6039      	str	r1, [r7, #0]
 8008c90:	0011      	movs	r1, r2
 8008c92:	1dfb      	adds	r3, r7, #7
 8008c94:	1c02      	adds	r2, r0, #0
 8008c96:	701a      	strb	r2, [r3, #0]
 8008c98:	1dbb      	adds	r3, r7, #6
 8008c9a:	1c0a      	adds	r2, r1, #0
 8008c9c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc8 <ReadRegister+0x40>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 8008ca6:	4b08      	ldr	r3, [pc, #32]	@ (8008cc8 <ReadRegister+0x40>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	1dba      	adds	r2, r7, #6
 8008cac:	7814      	ldrb	r4, [r2, #0]
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	1dfa      	adds	r2, r7, #7
 8008cb2:	7810      	ldrb	r0, [r2, #0]
 8008cb4:	0022      	movs	r2, r4
 8008cb6:	4798      	blx	r3
 8008cb8:	0003      	movs	r3, r0
 8008cba:	e000      	b.n	8008cbe <ReadRegister+0x36>
  }
  return false;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	0018      	movs	r0, r3
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	b003      	add	sp, #12
 8008cc4:	bd90      	pop	{r4, r7, pc}
 8008cc6:	46c0      	nop			@ (mov r8, r8)
 8008cc8:	20000bb8 	.word	0x20000bb8

08008ccc <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008ccc:	b590      	push	{r4, r7, lr}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6039      	str	r1, [r7, #0]
 8008cd4:	0011      	movs	r1, r2
 8008cd6:	1dfb      	adds	r3, r7, #7
 8008cd8:	1c02      	adds	r2, r0, #0
 8008cda:	701a      	strb	r2, [r3, #0]
 8008cdc:	1dbb      	adds	r3, r7, #6
 8008cde:	1c0a      	adds	r2, r1, #0
 8008ce0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8008d0c <WriteRegister+0x40>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8008cea:	4b08      	ldr	r3, [pc, #32]	@ (8008d0c <WriteRegister+0x40>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	1dba      	adds	r2, r7, #6
 8008cf0:	7814      	ldrb	r4, [r2, #0]
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	1dfa      	adds	r2, r7, #7
 8008cf6:	7810      	ldrb	r0, [r2, #0]
 8008cf8:	0022      	movs	r2, r4
 8008cfa:	4798      	blx	r3
 8008cfc:	0003      	movs	r3, r0
 8008cfe:	e000      	b.n	8008d02 <WriteRegister+0x36>
  }
  return false;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	0018      	movs	r0, r3
 8008d04:	46bd      	mov	sp, r7
 8008d06:	b003      	add	sp, #12
 8008d08:	bd90      	pop	{r4, r7, pc}
 8008d0a:	46c0      	nop			@ (mov r8, r8)
 8008d0c:	20000bbc 	.word	0x20000bbc

08008d10 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	000a      	movs	r2, r1
 8008d1a:	1cfb      	adds	r3, r7, #3
 8008d1c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 8008d1e:	230f      	movs	r3, #15
 8008d20:	18fb      	adds	r3, r7, r3
 8008d22:	22ff      	movs	r2, #255	@ 0xff
 8008d24:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008d26:	230e      	movs	r3, #14
 8008d28:	18fb      	adds	r3, r7, r3
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	701a      	strb	r2, [r3, #0]
 8008d2e:	e037      	b.n	8008da0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008d30:	230e      	movs	r3, #14
 8008d32:	18fb      	adds	r3, r7, r3
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	18d3      	adds	r3, r2, r3
 8008d3a:	7819      	ldrb	r1, [r3, #0]
 8008d3c:	220f      	movs	r2, #15
 8008d3e:	18bb      	adds	r3, r7, r2
 8008d40:	18ba      	adds	r2, r7, r2
 8008d42:	7812      	ldrb	r2, [r2, #0]
 8008d44:	404a      	eors	r2, r1
 8008d46:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008d48:	230d      	movs	r3, #13
 8008d4a:	18fb      	adds	r3, r7, r3
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	701a      	strb	r2, [r3, #0]
 8008d50:	e01b      	b.n	8008d8a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 8008d52:	210f      	movs	r1, #15
 8008d54:	187b      	adds	r3, r7, r1
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	b25b      	sxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	da09      	bge.n	8008d72 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 8008d5e:	187b      	adds	r3, r7, r1
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	b25b      	sxtb	r3, r3
 8008d66:	2231      	movs	r2, #49	@ 0x31
 8008d68:	4053      	eors	r3, r2
 8008d6a:	b25a      	sxtb	r2, r3
 8008d6c:	187b      	adds	r3, r7, r1
 8008d6e:	701a      	strb	r2, [r3, #0]
 8008d70:	e005      	b.n	8008d7e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8008d72:	230f      	movs	r3, #15
 8008d74:	18fa      	adds	r2, r7, r3
 8008d76:	18fb      	adds	r3, r7, r3
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	18db      	adds	r3, r3, r3
 8008d7c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008d7e:	210d      	movs	r1, #13
 8008d80:	187b      	adds	r3, r7, r1
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	187b      	adds	r3, r7, r1
 8008d86:	3201      	adds	r2, #1
 8008d88:	701a      	strb	r2, [r3, #0]
 8008d8a:	230d      	movs	r3, #13
 8008d8c:	18fb      	adds	r3, r7, r3
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b07      	cmp	r3, #7
 8008d92:	d9de      	bls.n	8008d52 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008d94:	210e      	movs	r1, #14
 8008d96:	187b      	adds	r3, r7, r1
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	187b      	adds	r3, r7, r1
 8008d9c:	3201      	adds	r2, #1
 8008d9e:	701a      	strb	r2, [r3, #0]
 8008da0:	230e      	movs	r3, #14
 8008da2:	18fa      	adds	r2, r7, r3
 8008da4:	1cfb      	adds	r3, r7, #3
 8008da6:	7812      	ldrb	r2, [r2, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d3c0      	bcc.n	8008d30 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8008dae:	230f      	movs	r3, #15
 8008db0:	18fb      	adds	r3, r7, r3
 8008db2:	781b      	ldrb	r3, [r3, #0]
}
 8008db4:	0018      	movs	r0, r3
 8008db6:	46bd      	mov	sp, r7
 8008db8:	b004      	add	sp, #16
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 8008dc4:	f009 f994 	bl	80120f0 <HAL_GetTick>
 8008dc8:	0002      	movs	r2, r0
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	18d2      	adds	r2, r2, r3
 8008dce:	4b03      	ldr	r3, [pc, #12]	@ (8008ddc <setAHT20TimeStamp+0x20>)
 8008dd0:	601a      	str	r2, [r3, #0]
}
 8008dd2:	46c0      	nop			@ (mov r8, r8)
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	b002      	add	sp, #8
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	46c0      	nop			@ (mov r8, r8)
 8008ddc:	20000bb4 	.word	0x20000bb4

08008de0 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 8008dec:	4b06      	ldr	r3, [pc, #24]	@ (8008e08 <AHT_Init+0x28>)
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 8008df2:	4b06      	ldr	r3, [pc, #24]	@ (8008e0c <AHT_Init+0x2c>)
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008df8:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <AHT_Init+0x30>)
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	601a      	str	r2, [r3, #0]
}
 8008dfe:	46c0      	nop			@ (mov r8, r8)
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b004      	add	sp, #16
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	46c0      	nop			@ (mov r8, r8)
 8008e08:	20000bc0 	.word	0x20000bc0
 8008e0c:	20000bb8 	.word	0x20000bb8
 8008e10:	20000bbc 	.word	0x20000bbc

08008e14 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	0002      	movs	r2, r0
 8008e1c:	1dfb      	adds	r3, r7, #7
 8008e1e:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 8008e20:	4b18      	ldr	r3, [pc, #96]	@ (8008e84 <AHT20_register_reset+0x70>)
 8008e22:	1dfa      	adds	r2, r7, #7
 8008e24:	7812      	ldrb	r2, [r2, #0]
 8008e26:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 8008e28:	4b16      	ldr	r3, [pc, #88]	@ (8008e84 <AHT20_register_reset+0x70>)
 8008e2a:	2203      	movs	r2, #3
 8008e2c:	0019      	movs	r1, r3
 8008e2e:	2038      	movs	r0, #56	@ 0x38
 8008e30:	f7ff ff4c 	bl	8008ccc <WriteRegister>
  HAL_Delay(15);
 8008e34:	200f      	movs	r0, #15
 8008e36:	f009 f965 	bl	8012104 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8008e3a:	4b13      	ldr	r3, [pc, #76]	@ (8008e88 <AHT20_register_reset+0x74>)
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	0019      	movs	r1, r3
 8008e40:	2038      	movs	r0, #56	@ 0x38
 8008e42:	f7ff ff21 	bl	8008c88 <ReadRegister>
  HAL_Delay(15);
 8008e46:	200f      	movs	r0, #15
 8008e48:	f009 f95c 	bl	8012104 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 8008e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8008e88 <AHT20_register_reset+0x74>)
 8008e4e:	22b0      	movs	r2, #176	@ 0xb0
 8008e50:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 8008e52:	4b0d      	ldr	r3, [pc, #52]	@ (8008e88 <AHT20_register_reset+0x74>)
 8008e54:	789b      	ldrb	r3, [r3, #2]
 8008e56:	0018      	movs	r0, r3
 8008e58:	4b0b      	ldr	r3, [pc, #44]	@ (8008e88 <AHT20_register_reset+0x74>)
 8008e5a:	78db      	ldrb	r3, [r3, #3]
 8008e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8008e8c <AHT20_register_reset+0x78>)
 8008e5e:	490c      	ldr	r1, [pc, #48]	@ (8008e90 <AHT20_register_reset+0x7c>)
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	0003      	movs	r3, r0
 8008e64:	2003      	movs	r0, #3
 8008e66:	f008 fcf7 	bl	8011858 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 8008e6a:	4b07      	ldr	r3, [pc, #28]	@ (8008e88 <AHT20_register_reset+0x74>)
 8008e6c:	2203      	movs	r2, #3
 8008e6e:	0019      	movs	r1, r3
 8008e70:	2038      	movs	r0, #56	@ 0x38
 8008e72:	f7ff ff2b 	bl	8008ccc <WriteRegister>
  HAL_Delay(15);
 8008e76:	200f      	movs	r0, #15
 8008e78:	f009 f944 	bl	8012104 <HAL_Delay>
}
 8008e7c:	46c0      	nop			@ (mov r8, r8)
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b002      	add	sp, #8
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	20000090 	.word	0x20000090
 8008e88:	20000bc4 	.word	0x20000bc4
 8008e8c:	08029068 	.word	0x08029068
 8008e90:	080290b8 	.word	0x080290b8

08008e94 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 8008e98:	201b      	movs	r0, #27
 8008e9a:	f7ff ffbb 	bl	8008e14 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 8008e9e:	201c      	movs	r0, #28
 8008ea0:	f7ff ffb8 	bl	8008e14 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 8008ea4:	201e      	movs	r0, #30
 8008ea6:	f7ff ffb5 	bl	8008e14 <AHT20_register_reset>
}
 8008eaa:	46c0      	nop			@ (mov r8, r8)
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee8 <AHT20_read_status+0x38>)
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	0019      	movs	r1, r3
 8008eba:	2038      	movs	r0, #56	@ 0x38
 8008ebc:	f7ff ff06 	bl	8008ccc <WriteRegister>
  HAL_Delay(10);
 8008ec0:	200a      	movs	r0, #10
 8008ec2:	f009 f91f 	bl	8012104 <HAL_Delay>
  airtemphumraw[0] = 0;
 8008ec6:	4b09      	ldr	r3, [pc, #36]	@ (8008eec <AHT20_read_status+0x3c>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 8008ecc:	4b07      	ldr	r3, [pc, #28]	@ (8008eec <AHT20_read_status+0x3c>)
 8008ece:	2201      	movs	r2, #1
 8008ed0:	0019      	movs	r1, r3
 8008ed2:	2038      	movs	r0, #56	@ 0x38
 8008ed4:	f7ff fed8 	bl	8008c88 <ReadRegister>
  HAL_Delay(10);
 8008ed8:	200a      	movs	r0, #10
 8008eda:	f009 f913 	bl	8012104 <HAL_Delay>
  return airtemphumraw[0];
 8008ede:	4b03      	ldr	r3, [pc, #12]	@ (8008eec <AHT20_read_status+0x3c>)
 8008ee0:	781b      	ldrb	r3, [r3, #0]
}
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	2000008c 	.word	0x2000008c
 8008eec:	20000bc4 	.word	0x20000bc4

08008ef0 <AHT20_init>:

bool AHT20_init(void) {
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 8008ef6:	f009 f8fb 	bl	80120f0 <HAL_GetTick>
 8008efa:	0003      	movs	r3, r0
 8008efc:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b77      	cmp	r3, #119	@ 0x77
 8008f02:	d805      	bhi.n	8008f10 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2278      	movs	r2, #120	@ 0x78
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	f009 f8fa 	bl	8012104 <HAL_Delay>
  }
  AHT20_read_status();
 8008f10:	f7ff ffce 	bl	8008eb0 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 8008f14:	4b0e      	ldr	r3, [pc, #56]	@ (8008f50 <AHT20_init+0x60>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	4a0e      	ldr	r2, [pc, #56]	@ (8008f54 <AHT20_init+0x64>)
 8008f1a:	490f      	ldr	r1, [pc, #60]	@ (8008f58 <AHT20_init+0x68>)
 8008f1c:	2003      	movs	r0, #3
 8008f1e:	f008 fc9b 	bl	8011858 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 8008f22:	4b0b      	ldr	r3, [pc, #44]	@ (8008f50 <AHT20_init+0x60>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	001a      	movs	r2, r3
 8008f28:	2318      	movs	r3, #24
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	2b18      	cmp	r3, #24
 8008f2e:	d00a      	beq.n	8008f46 <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 8008f30:	4b0a      	ldr	r3, [pc, #40]	@ (8008f5c <AHT20_init+0x6c>)
 8008f32:	2203      	movs	r2, #3
 8008f34:	0019      	movs	r1, r3
 8008f36:	2038      	movs	r0, #56	@ 0x38
 8008f38:	f7ff fec8 	bl	8008ccc <WriteRegister>
    HAL_Delay(10);
 8008f3c:	200a      	movs	r0, #10
 8008f3e:	f009 f8e1 	bl	8012104 <HAL_Delay>
    AHT20_Start_Init();
 8008f42:	f7ff ffa7 	bl	8008e94 <AHT20_Start_Init>
  }
  return true;
 8008f46:	2301      	movs	r3, #1
}
 8008f48:	0018      	movs	r0, r3
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	b002      	add	sp, #8
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20000bc4 	.word	0x20000bc4
 8008f54:	080290bc 	.word	0x080290bc
 8008f58:	080290b8 	.word	0x080290b8
 8008f5c:	20000084 	.word	0x20000084

08008f60 <AHT20_calibrate>:


bool AHT20_calibrate() {
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 8008f66:	1dfc      	adds	r4, r7, #7
 8008f68:	4b10      	ldr	r3, [pc, #64]	@ (8008fac <AHT20_calibrate+0x4c>)
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	0019      	movs	r1, r3
 8008f6e:	2038      	movs	r0, #56	@ 0x38
 8008f70:	f7ff feac 	bl	8008ccc <WriteRegister>
 8008f74:	0003      	movs	r3, r0
 8008f76:	7023      	strb	r3, [r4, #0]
  if (!response) {
 8008f78:	1dfb      	adds	r3, r7, #7
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	4053      	eors	r3, r2
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d005      	beq.n	8008f92 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 8008f86:	4a0a      	ldr	r2, [pc, #40]	@ (8008fb0 <AHT20_calibrate+0x50>)
 8008f88:	4b0a      	ldr	r3, [pc, #40]	@ (8008fb4 <AHT20_calibrate+0x54>)
 8008f8a:	0019      	movs	r1, r3
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	f008 fc63 	bl	8011858 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 8008f92:	f009 f8ad 	bl	80120f0 <HAL_GetTick>
 8008f96:	0003      	movs	r3, r0
 8008f98:	3332      	adds	r3, #50	@ 0x32
 8008f9a:	001a      	movs	r2, r3
 8008f9c:	4b06      	ldr	r3, [pc, #24]	@ (8008fb8 <AHT20_calibrate+0x58>)
 8008f9e:	601a      	str	r2, [r3, #0]
  return response;
 8008fa0:	1dfb      	adds	r3, r7, #7
 8008fa2:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	b003      	add	sp, #12
 8008faa:	bd90      	pop	{r4, r7, pc}
 8008fac:	2000008c 	.word	0x2000008c
 8008fb0:	080290e4 	.word	0x080290e4
 8008fb4:	0802911c 	.word	0x0802911c
 8008fb8:	20000bb4 	.word	0x20000bb4

08008fbc <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 8008fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8008fec <AHT20_DeviceConnected+0x30>)
 8008fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff0 <AHT20_DeviceConnected+0x34>)
 8008fc4:	0019      	movs	r1, r3
 8008fc6:	2003      	movs	r0, #3
 8008fc8:	f008 fc46 	bl	8011858 <CreateLine>
   AHT20_init();
 8008fcc:	f7ff ff90 	bl	8008ef0 <AHT20_init>
   HAL_Delay(10);
 8008fd0:	200a      	movs	r0, #10
 8008fd2:	f009 f897 	bl	8012104 <HAL_Delay>
   AHT20_calibrate();
 8008fd6:	f7ff ffc3 	bl	8008f60 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 8008fda:	f7ff ff69 	bl	8008eb0 <AHT20_read_status>
 8008fde:	0003      	movs	r3, r0
 8008fe0:	1e5a      	subs	r2, r3, #1
 8008fe2:	4193      	sbcs	r3, r2
 8008fe4:	b2db      	uxtb	r3, r3
 }
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	08029120 	.word	0x08029120
 8008ff0:	080290b8 	.word	0x080290b8

08008ff4 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 8008ff4:	b590      	push	{r4, r7, lr}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 8008ffa:	1dfc      	adds	r4, r7, #7
 8008ffc:	4b10      	ldr	r3, [pc, #64]	@ (8009040 <AHT20_StartMeasurement+0x4c>)
 8008ffe:	2203      	movs	r2, #3
 8009000:	0019      	movs	r1, r3
 8009002:	2038      	movs	r0, #56	@ 0x38
 8009004:	f7ff fe62 	bl	8008ccc <WriteRegister>
 8009008:	0003      	movs	r3, r0
 800900a:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800900c:	1dfb      	adds	r3, r7, #7
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2201      	movs	r2, #1
 8009012:	4053      	eors	r3, r2
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d005      	beq.n	8009026 <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800901a:	4a0a      	ldr	r2, [pc, #40]	@ (8009044 <AHT20_StartMeasurement+0x50>)
 800901c:	4b0a      	ldr	r3, [pc, #40]	@ (8009048 <AHT20_StartMeasurement+0x54>)
 800901e:	0019      	movs	r1, r3
 8009020:	2001      	movs	r0, #1
 8009022:	f008 fc19 	bl	8011858 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 8009026:	f009 f863 	bl	80120f0 <HAL_GetTick>
 800902a:	0003      	movs	r3, r0
 800902c:	33fa      	adds	r3, #250	@ 0xfa
 800902e:	001a      	movs	r2, r3
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <AHT20_StartMeasurement+0x58>)
 8009032:	601a      	str	r2, [r3, #0]
  return response;
 8009034:	1dfb      	adds	r3, r7, #7
 8009036:	781b      	ldrb	r3, [r3, #0]
}
 8009038:	0018      	movs	r0, r3
 800903a:	46bd      	mov	sp, r7
 800903c:	b003      	add	sp, #12
 800903e:	bd90      	pop	{r4, r7, pc}
 8009040:	20000088 	.word	0x20000088
 8009044:	08029138 	.word	0x08029138
 8009048:	0802911c 	.word	0x0802911c
 800904c:	20000bb4 	.word	0x20000bb4

08009050 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 8009050:	b590      	push	{r4, r7, lr}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 8009056:	f009 f84b 	bl	80120f0 <HAL_GetTick>
 800905a:	0003      	movs	r3, r0
 800905c:	22fa      	movs	r2, #250	@ 0xfa
 800905e:	0092      	lsls	r2, r2, #2
 8009060:	189a      	adds	r2, r3, r2
 8009062:	4b2c      	ldr	r3, [pc, #176]	@ (8009114 <AHT20_GetMeasurementValues+0xc4>)
 8009064:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 8009066:	e01f      	b.n	80090a8 <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 8009068:	4a2b      	ldr	r2, [pc, #172]	@ (8009118 <AHT20_GetMeasurementValues+0xc8>)
 800906a:	4b2c      	ldr	r3, [pc, #176]	@ (800911c <AHT20_GetMeasurementValues+0xcc>)
 800906c:	0019      	movs	r1, r3
 800906e:	2002      	movs	r0, #2
 8009070:	f008 fbf2 	bl	8011858 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 8009074:	4b27      	ldr	r3, [pc, #156]	@ (8009114 <AHT20_GetMeasurementValues+0xc4>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	0018      	movs	r0, r3
 800907a:	f008 fb97 	bl	80117ac <TimestampIsReached>
 800907e:	1e03      	subs	r3, r0, #0
 8009080:	d00f      	beq.n	80090a2 <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 8009082:	4a27      	ldr	r2, [pc, #156]	@ (8009120 <AHT20_GetMeasurementValues+0xd0>)
 8009084:	4b27      	ldr	r3, [pc, #156]	@ (8009124 <AHT20_GetMeasurementValues+0xd4>)
 8009086:	0019      	movs	r1, r3
 8009088:	2001      	movs	r0, #1
 800908a:	f008 fbe5 	bl	8011858 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800908e:	f009 f82f 	bl	80120f0 <HAL_GetTick>
 8009092:	0003      	movs	r3, r0
 8009094:	22fa      	movs	r2, #250	@ 0xfa
 8009096:	00d2      	lsls	r2, r2, #3
 8009098:	189a      	adds	r2, r3, r2
 800909a:	4b1e      	ldr	r3, [pc, #120]	@ (8009114 <AHT20_GetMeasurementValues+0xc4>)
 800909c:	601a      	str	r2, [r3, #0]
      return false;
 800909e:	2300      	movs	r3, #0
 80090a0:	e034      	b.n	800910c <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 80090a2:	200a      	movs	r0, #10
 80090a4:	f009 f82e 	bl	8012104 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 80090a8:	f7ff ff02 	bl	8008eb0 <AHT20_read_status>
 80090ac:	0003      	movs	r3, r0
 80090ae:	001a      	movs	r2, r3
 80090b0:	2380      	movs	r3, #128	@ 0x80
 80090b2:	4013      	ands	r3, r2
 80090b4:	2b80      	cmp	r3, #128	@ 0x80
 80090b6:	d0d7      	beq.n	8009068 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 80090b8:	200a      	movs	r0, #10
 80090ba:	f009 f823 	bl	8012104 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 80090be:	1dfb      	adds	r3, r7, #7
 80090c0:	2200      	movs	r2, #0
 80090c2:	701a      	strb	r2, [r3, #0]
 80090c4:	e009      	b.n	80090da <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 80090c6:	1dfb      	adds	r3, r7, #7
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	4a17      	ldr	r2, [pc, #92]	@ (8009128 <AHT20_GetMeasurementValues+0xd8>)
 80090cc:	2100      	movs	r1, #0
 80090ce:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 80090d0:	1dfb      	adds	r3, r7, #7
 80090d2:	781a      	ldrb	r2, [r3, #0]
 80090d4:	1dfb      	adds	r3, r7, #7
 80090d6:	3201      	adds	r2, #1
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	1dfb      	adds	r3, r7, #7
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b06      	cmp	r3, #6
 80090e0:	d9f1      	bls.n	80090c6 <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 80090e2:	1dbc      	adds	r4, r7, #6
 80090e4:	4b10      	ldr	r3, [pc, #64]	@ (8009128 <AHT20_GetMeasurementValues+0xd8>)
 80090e6:	2207      	movs	r2, #7
 80090e8:	0019      	movs	r1, r3
 80090ea:	2038      	movs	r0, #56	@ 0x38
 80090ec:	f7ff fdaa 	bl	8008c44 <ReadDirRegister>
 80090f0:	0003      	movs	r3, r0
 80090f2:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 80090f4:	200a      	movs	r0, #10
 80090f6:	f009 f805 	bl	8012104 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 80090fa:	f008 fff9 	bl	80120f0 <HAL_GetTick>
 80090fe:	0003      	movs	r3, r0
 8009100:	3364      	adds	r3, #100	@ 0x64
 8009102:	001a      	movs	r2, r3
 8009104:	4b03      	ldr	r3, [pc, #12]	@ (8009114 <AHT20_GetMeasurementValues+0xc4>)
 8009106:	601a      	str	r2, [r3, #0]
  return response;
 8009108:	1dbb      	adds	r3, r7, #6
 800910a:	781b      	ldrb	r3, [r3, #0]
}
 800910c:	0018      	movs	r0, r3
 800910e:	46bd      	mov	sp, r7
 8009110:	b003      	add	sp, #12
 8009112:	bd90      	pop	{r4, r7, pc}
 8009114:	20000bb4 	.word	0x20000bb4
 8009118:	08029164 	.word	0x08029164
 800911c:	0802918c 	.word	0x0802918c
 8009120:	08029190 	.word	0x08029190
 8009124:	0802911c 	.word	0x0802911c
 8009128:	20000bc4 	.word	0x20000bc4

0800912c <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800912c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800912e:	46c6      	mov	lr, r8
 8009130:	b500      	push	{lr}
 8009132:	b08a      	sub	sp, #40	@ 0x28
 8009134:	af06      	add	r7, sp, #24
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800913a:	4b5a      	ldr	r3, [pc, #360]	@ (80092a4 <AHT20_Calculate+0x178>)
 800913c:	799c      	ldrb	r4, [r3, #6]
 800913e:	4b59      	ldr	r3, [pc, #356]	@ (80092a4 <AHT20_Calculate+0x178>)
 8009140:	2106      	movs	r1, #6
 8009142:	0018      	movs	r0, r3
 8009144:	f7ff fde4 	bl	8008d10 <CalculateCRC>
 8009148:	0003      	movs	r3, r0
 800914a:	429c      	cmp	r4, r3
 800914c:	d044      	beq.n	80091d8 <AHT20_Calculate+0xac>
 800914e:	4b55      	ldr	r3, [pc, #340]	@ (80092a4 <AHT20_Calculate+0x178>)
 8009150:	799b      	ldrb	r3, [r3, #6]
 8009152:	2bff      	cmp	r3, #255	@ 0xff
 8009154:	d040      	beq.n	80091d8 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 8009156:	4b53      	ldr	r3, [pc, #332]	@ (80092a4 <AHT20_Calculate+0x178>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	4698      	mov	r8, r3
 800915c:	4b51      	ldr	r3, [pc, #324]	@ (80092a4 <AHT20_Calculate+0x178>)
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	0018      	movs	r0, r3
 8009162:	4b50      	ldr	r3, [pc, #320]	@ (80092a4 <AHT20_Calculate+0x178>)
 8009164:	789b      	ldrb	r3, [r3, #2]
 8009166:	001c      	movs	r4, r3
 8009168:	4b4e      	ldr	r3, [pc, #312]	@ (80092a4 <AHT20_Calculate+0x178>)
 800916a:	78db      	ldrb	r3, [r3, #3]
 800916c:	001d      	movs	r5, r3
 800916e:	4b4d      	ldr	r3, [pc, #308]	@ (80092a4 <AHT20_Calculate+0x178>)
 8009170:	791b      	ldrb	r3, [r3, #4]
 8009172:	001e      	movs	r6, r3
 8009174:	4b4b      	ldr	r3, [pc, #300]	@ (80092a4 <AHT20_Calculate+0x178>)
 8009176:	795b      	ldrb	r3, [r3, #5]
 8009178:	469c      	mov	ip, r3
 800917a:	4b4a      	ldr	r3, [pc, #296]	@ (80092a4 <AHT20_Calculate+0x178>)
 800917c:	799b      	ldrb	r3, [r3, #6]
 800917e:	4a4a      	ldr	r2, [pc, #296]	@ (80092a8 <AHT20_Calculate+0x17c>)
 8009180:	494a      	ldr	r1, [pc, #296]	@ (80092ac <AHT20_Calculate+0x180>)
 8009182:	9305      	str	r3, [sp, #20]
 8009184:	4663      	mov	r3, ip
 8009186:	9304      	str	r3, [sp, #16]
 8009188:	9603      	str	r6, [sp, #12]
 800918a:	9502      	str	r5, [sp, #8]
 800918c:	9401      	str	r4, [sp, #4]
 800918e:	9000      	str	r0, [sp, #0]
 8009190:	4643      	mov	r3, r8
 8009192:	2003      	movs	r0, #3
 8009194:	f008 fb60 	bl	8011858 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 8009198:	4b42      	ldr	r3, [pc, #264]	@ (80092a4 <AHT20_Calculate+0x178>)
 800919a:	799b      	ldrb	r3, [r3, #6]
 800919c:	001c      	movs	r4, r3
 800919e:	4b41      	ldr	r3, [pc, #260]	@ (80092a4 <AHT20_Calculate+0x178>)
 80091a0:	2106      	movs	r1, #6
 80091a2:	0018      	movs	r0, r3
 80091a4:	f7ff fdb4 	bl	8008d10 <CalculateCRC>
 80091a8:	0003      	movs	r3, r0
 80091aa:	4a41      	ldr	r2, [pc, #260]	@ (80092b0 <AHT20_Calculate+0x184>)
 80091ac:	4941      	ldr	r1, [pc, #260]	@ (80092b4 <AHT20_Calculate+0x188>)
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	0023      	movs	r3, r4
 80091b2:	2001      	movs	r0, #1
 80091b4:	f008 fb50 	bl	8011858 <CreateLine>
    *airtemp = 0.0;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 80091c4:	f008 ff94 	bl	80120f0 <HAL_GetTick>
 80091c8:	0003      	movs	r3, r0
 80091ca:	22fa      	movs	r2, #250	@ 0xfa
 80091cc:	00d2      	lsls	r2, r2, #3
 80091ce:	189a      	adds	r2, r3, r2
 80091d0:	4b39      	ldr	r3, [pc, #228]	@ (80092b8 <AHT20_Calculate+0x18c>)
 80091d2:	601a      	str	r2, [r3, #0]
    return false;
 80091d4:	2300      	movs	r3, #0
 80091d6:	e05f      	b.n	8009298 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 80091d8:	4b38      	ldr	r3, [pc, #224]	@ (80092bc <AHT20_Calculate+0x190>)
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 80091de:	4b31      	ldr	r3, [pc, #196]	@ (80092a4 <AHT20_Calculate+0x178>)
 80091e0:	78db      	ldrb	r3, [r3, #3]
 80091e2:	041a      	lsls	r2, r3, #16
 80091e4:	23f0      	movs	r3, #240	@ 0xf0
 80091e6:	031b      	lsls	r3, r3, #12
 80091e8:	401a      	ands	r2, r3
 80091ea:	4b2e      	ldr	r3, [pc, #184]	@ (80092a4 <AHT20_Calculate+0x178>)
 80091ec:	791b      	ldrb	r3, [r3, #4]
 80091ee:	021b      	lsls	r3, r3, #8
 80091f0:	18d3      	adds	r3, r2, r3
 80091f2:	4a2c      	ldr	r2, [pc, #176]	@ (80092a4 <AHT20_Calculate+0x178>)
 80091f4:	7952      	ldrb	r2, [r2, #5]
 80091f6:	189b      	adds	r3, r3, r2
 80091f8:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f7f8 fa34 	bl	8001668 <__aeabi_ui2f>
 8009200:	1c03      	adds	r3, r0, #0
 8009202:	2193      	movs	r1, #147	@ 0x93
 8009204:	05c9      	lsls	r1, r1, #23
 8009206:	1c18      	adds	r0, r3, #0
 8009208:	f7f7 fce4 	bl	8000bd4 <__aeabi_fdiv>
 800920c:	1c03      	adds	r3, r0, #0
 800920e:	492c      	ldr	r1, [pc, #176]	@ (80092c0 <AHT20_Calculate+0x194>)
 8009210:	1c18      	adds	r0, r3, #0
 8009212:	f7f7 fec5 	bl	8000fa0 <__aeabi_fmul>
 8009216:	1c03      	adds	r3, r0, #0
 8009218:	492a      	ldr	r1, [pc, #168]	@ (80092c4 <AHT20_Calculate+0x198>)
 800921a:	1c18      	adds	r0, r3, #0
 800921c:	f7f7 fffe 	bl	800121c <__aeabi_fsub>
 8009220:	1c03      	adds	r3, r0, #0
 8009222:	1c1a      	adds	r2, r3, #0
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 8009228:	4b1e      	ldr	r3, [pc, #120]	@ (80092a4 <AHT20_Calculate+0x178>)
 800922a:	785b      	ldrb	r3, [r3, #1]
 800922c:	031a      	lsls	r2, r3, #12
 800922e:	4b1d      	ldr	r3, [pc, #116]	@ (80092a4 <AHT20_Calculate+0x178>)
 8009230:	789b      	ldrb	r3, [r3, #2]
 8009232:	011b      	lsls	r3, r3, #4
 8009234:	18d3      	adds	r3, r2, r3
 8009236:	4a1b      	ldr	r2, [pc, #108]	@ (80092a4 <AHT20_Calculate+0x178>)
 8009238:	78d2      	ldrb	r2, [r2, #3]
 800923a:	0912      	lsrs	r2, r2, #4
 800923c:	b2d2      	uxtb	r2, r2
 800923e:	189b      	adds	r3, r3, r2
 8009240:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 8009242:	68b8      	ldr	r0, [r7, #8]
 8009244:	f7f8 fa10 	bl	8001668 <__aeabi_ui2f>
 8009248:	1c03      	adds	r3, r0, #0
 800924a:	2193      	movs	r1, #147	@ 0x93
 800924c:	05c9      	lsls	r1, r1, #23
 800924e:	1c18      	adds	r0, r3, #0
 8009250:	f7f7 fcc0 	bl	8000bd4 <__aeabi_fdiv>
 8009254:	1c03      	adds	r3, r0, #0
 8009256:	491c      	ldr	r1, [pc, #112]	@ (80092c8 <AHT20_Calculate+0x19c>)
 8009258:	1c18      	adds	r0, r3, #0
 800925a:	f7f7 fea1 	bl	8000fa0 <__aeabi_fmul>
 800925e:	1c03      	adds	r3, r0, #0
 8009260:	1c1a      	adds	r2, r3, #0
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	1c18      	adds	r0, r3, #0
 800926c:	f7fa f8fa 	bl	8003464 <__aeabi_f2d>
 8009270:	0004      	movs	r4, r0
 8009272:	000d      	movs	r5, r1
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	1c18      	adds	r0, r3, #0
 800927a:	f7fa f8f3 	bl	8003464 <__aeabi_f2d>
 800927e:	0002      	movs	r2, r0
 8009280:	000b      	movs	r3, r1
 8009282:	4812      	ldr	r0, [pc, #72]	@ (80092cc <AHT20_Calculate+0x1a0>)
 8009284:	4909      	ldr	r1, [pc, #36]	@ (80092ac <AHT20_Calculate+0x180>)
 8009286:	9202      	str	r2, [sp, #8]
 8009288:	9303      	str	r3, [sp, #12]
 800928a:	9400      	str	r4, [sp, #0]
 800928c:	9501      	str	r5, [sp, #4]
 800928e:	0002      	movs	r2, r0
 8009290:	2003      	movs	r0, #3
 8009292:	f008 fae1 	bl	8011858 <CreateLine>
  return true;
 8009296:	2301      	movs	r3, #1
}
 8009298:	0018      	movs	r0, r3
 800929a:	46bd      	mov	sp, r7
 800929c:	b004      	add	sp, #16
 800929e:	bc80      	pop	{r7}
 80092a0:	46b8      	mov	r8, r7
 80092a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092a4:	20000bc4 	.word	0x20000bc4
 80092a8:	080291b4 	.word	0x080291b4
 80092ac:	080290b8 	.word	0x080290b8
 80092b0:	08029234 	.word	0x08029234
 80092b4:	0802911c 	.word	0x0802911c
 80092b8:	20000bb4 	.word	0x20000bb4
 80092bc:	20000bcb 	.word	0x20000bcb
 80092c0:	43480000 	.word	0x43480000
 80092c4:	42480000 	.word	0x42480000
 80092c8:	42c80000 	.word	0x42c80000
 80092cc:	0802925c 	.word	0x0802925c

080092d0 <AHT_Upkeep>:
  AHT20TimeStamp = HAL_GetTick() + 50;
  calibrated = false;
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
}

AHT20State AHT_Upkeep(void) {
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 80092d6:	4b4d      	ldr	r3, [pc, #308]	@ (800940c <AHT_Upkeep+0x13c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	0018      	movs	r0, r3
 80092dc:	f008 fa66 	bl	80117ac <TimestampIsReached>
 80092e0:	0003      	movs	r3, r0
 80092e2:	001a      	movs	r2, r3
 80092e4:	2301      	movs	r3, #1
 80092e6:	4053      	eors	r3, r2
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <AHT_Upkeep+0x24>
    return AHTState;
 80092ee:	4b48      	ldr	r3, [pc, #288]	@ (8009410 <AHT_Upkeep+0x140>)
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	e087      	b.n	8009404 <AHT_Upkeep+0x134>
  }
  switch(AHTState) {
 80092f4:	4b46      	ldr	r3, [pc, #280]	@ (8009410 <AHT_Upkeep+0x140>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b05      	cmp	r3, #5
 80092fa:	d85d      	bhi.n	80093b8 <AHT_Upkeep+0xe8>
 80092fc:	009a      	lsls	r2, r3, #2
 80092fe:	4b45      	ldr	r3, [pc, #276]	@ (8009414 <AHT_Upkeep+0x144>)
 8009300:	18d3      	adds	r3, r2, r3
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 8009306:	4a44      	ldr	r2, [pc, #272]	@ (8009418 <AHT_Upkeep+0x148>)
 8009308:	4b44      	ldr	r3, [pc, #272]	@ (800941c <AHT_Upkeep+0x14c>)
 800930a:	0019      	movs	r1, r3
 800930c:	2003      	movs	r0, #3
 800930e:	f008 faa3 	bl	8011858 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 8009312:	f008 feed 	bl	80120f0 <HAL_GetTick>
 8009316:	0003      	movs	r3, r0
 8009318:	4a41      	ldr	r2, [pc, #260]	@ (8009420 <AHT_Upkeep+0x150>)
 800931a:	189a      	adds	r2, r3, r2
 800931c:	4b3b      	ldr	r3, [pc, #236]	@ (800940c <AHT_Upkeep+0x13c>)
 800931e:	601a      	str	r2, [r3, #0]
    break;
 8009320:	e06e      	b.n	8009400 <AHT_Upkeep+0x130>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8009322:	f002 fc05 	bl	800bb30 <getSensorLock>
 8009326:	1e03      	subs	r3, r0, #0
 8009328:	d165      	bne.n	80093f6 <AHT_Upkeep+0x126>
      break;
    }
    setSensorLock(AHT20);
 800932a:	2003      	movs	r0, #3
 800932c:	f002 fbf0 	bl	800bb10 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 8009330:	f7ff fe60 	bl	8008ff4 <AHT20_StartMeasurement>
 8009334:	0003      	movs	r3, r0
 8009336:	001a      	movs	r2, r3
 8009338:	2301      	movs	r3, #1
 800933a:	4053      	eors	r3, r2
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <AHT_Upkeep+0x7a>
      AHTState = AHT20_ERROR;
 8009342:	4b33      	ldr	r3, [pc, #204]	@ (8009410 <AHT_Upkeep+0x140>)
 8009344:	22ff      	movs	r2, #255	@ 0xff
 8009346:	701a      	strb	r2, [r3, #0]
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
    }
    break;
 8009348:	e05a      	b.n	8009400 <AHT_Upkeep+0x130>
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800934a:	4b31      	ldr	r3, [pc, #196]	@ (8009410 <AHT_Upkeep+0x140>)
 800934c:	2202      	movs	r2, #2
 800934e:	701a      	strb	r2, [r3, #0]
    break;
 8009350:	e056      	b.n	8009400 <AHT_Upkeep+0x130>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 8009352:	f7ff fe7d 	bl	8009050 <AHT20_GetMeasurementValues>
 8009356:	1e03      	subs	r3, r0, #0
 8009358:	d04f      	beq.n	80093fa <AHT_Upkeep+0x12a>
//      Debug("AHT20_GetMeasurementValues success");
      setSensorLock(FREE);
 800935a:	2000      	movs	r0, #0
 800935c:	f002 fbd8 	bl	800bb10 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 8009360:	4b2b      	ldr	r3, [pc, #172]	@ (8009410 <AHT_Upkeep+0x140>)
 8009362:	2203      	movs	r2, #3
 8009364:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 8009366:	e048      	b.n	80093fa <AHT_Upkeep+0x12a>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 8009368:	003a      	movs	r2, r7
 800936a:	1d3b      	adds	r3, r7, #4
 800936c:	0011      	movs	r1, r2
 800936e:	0018      	movs	r0, r3
 8009370:	f7ff fedc 	bl	800912c <AHT20_Calculate>
 8009374:	0003      	movs	r3, r0
 8009376:	001a      	movs	r2, r3
 8009378:	2301      	movs	r3, #1
 800937a:	4053      	eors	r3, r2
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d005      	beq.n	800938e <AHT_Upkeep+0xbe>
      AHTState = AHT20_ERROR;
 8009382:	4b23      	ldr	r3, [pc, #140]	@ (8009410 <AHT_Upkeep+0x140>)
 8009384:	22ff      	movs	r2, #255	@ 0xff
 8009386:	701a      	strb	r2, [r3, #0]
      return AHTState;
 8009388:	4b21      	ldr	r3, [pc, #132]	@ (8009410 <AHT_Upkeep+0x140>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	e03a      	b.n	8009404 <AHT_Upkeep+0x134>
    }
//    setHIDS(airtemp, airhum);
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	1c11      	adds	r1, r2, #0
 8009394:	1c18      	adds	r0, r3, #0
 8009396:	f7fa fe09 	bl	8003fac <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800939a:	4b1d      	ldr	r3, [pc, #116]	@ (8009410 <AHT_Upkeep+0x140>)
 800939c:	2205      	movs	r2, #5
 800939e:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 80093a0:	f008 fea6 	bl	80120f0 <HAL_GetTick>
 80093a4:	0003      	movs	r3, r0
 80093a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009424 <AHT_Upkeep+0x154>)
 80093a8:	189a      	adds	r2, r3, r2
 80093aa:	4b18      	ldr	r3, [pc, #96]	@ (800940c <AHT_Upkeep+0x13c>)
 80093ac:	601a      	str	r2, [r3, #0]
    break;
 80093ae:	e027      	b.n	8009400 <AHT_Upkeep+0x130>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 80093b0:	4b17      	ldr	r3, [pc, #92]	@ (8009410 <AHT_Upkeep+0x140>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	701a      	strb	r2, [r3, #0]
  break;
 80093b6:	e023      	b.n	8009400 <AHT_Upkeep+0x130>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 80093b8:	4b15      	ldr	r3, [pc, #84]	@ (8009410 <AHT_Upkeep+0x140>)
 80093ba:	2201      	movs	r2, #1
 80093bc:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 80093be:	f002 fbb7 	bl	800bb30 <getSensorLock>
 80093c2:	0003      	movs	r3, r0
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d102      	bne.n	80093ce <AHT_Upkeep+0xfe>
      setSensorLock(FREE);
 80093c8:	2000      	movs	r0, #0
 80093ca:	f002 fba1 	bl	800bb10 <setSensorLock>
    }
    AHTerrors++;
 80093ce:	4b16      	ldr	r3, [pc, #88]	@ (8009428 <AHT_Upkeep+0x158>)
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	4b14      	ldr	r3, [pc, #80]	@ (8009428 <AHT_Upkeep+0x158>)
 80093d8:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 80093da:	4b13      	ldr	r3, [pc, #76]	@ (8009428 <AHT_Upkeep+0x158>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b19      	cmp	r3, #25
 80093e0:	d90d      	bls.n	80093fe <AHT_Upkeep+0x12e>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 80093e2:	4a12      	ldr	r2, [pc, #72]	@ (800942c <AHT_Upkeep+0x15c>)
 80093e4:	4b12      	ldr	r3, [pc, #72]	@ (8009430 <AHT_Upkeep+0x160>)
 80093e6:	0019      	movs	r1, r3
 80093e8:	2001      	movs	r0, #1
 80093ea:	f008 fa35 	bl	8011858 <CreateLine>
      AHTState = AHT_STATE_OFF;
 80093ee:	4b08      	ldr	r3, [pc, #32]	@ (8009410 <AHT_Upkeep+0x140>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	701a      	strb	r2, [r3, #0]
    }
    break;
 80093f4:	e003      	b.n	80093fe <AHT_Upkeep+0x12e>
      break;
 80093f6:	46c0      	nop			@ (mov r8, r8)
 80093f8:	e002      	b.n	8009400 <AHT_Upkeep+0x130>
    break;
 80093fa:	46c0      	nop			@ (mov r8, r8)
 80093fc:	e000      	b.n	8009400 <AHT_Upkeep+0x130>
    break;
 80093fe:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 8009400:	4b03      	ldr	r3, [pc, #12]	@ (8009410 <AHT_Upkeep+0x140>)
 8009402:	781b      	ldrb	r3, [r3, #0]
}
 8009404:	0018      	movs	r0, r3
 8009406:	46bd      	mov	sp, r7
 8009408:	b002      	add	sp, #8
 800940a:	bd80      	pop	{r7, pc}
 800940c:	20000bb4 	.word	0x20000bb4
 8009410:	20000093 	.word	0x20000093
 8009414:	0802aff4 	.word	0x0802aff4
 8009418:	08029290 	.word	0x08029290
 800941c:	080290b8 	.word	0x080290b8
 8009420:	000dbba0 	.word	0x000dbba0
 8009424:	0000ea60 	.word	0x0000ea60
 8009428:	20000bcb 	.word	0x20000bcb
 800942c:	080292b8 	.word	0x080292b8
 8009430:	0802911c 	.word	0x0802911c

08009434 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8009434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009436:	b087      	sub	sp, #28
 8009438:	af02      	add	r7, sp, #8
 800943a:	0004      	movs	r4, r0
 800943c:	0008      	movs	r0, r1
 800943e:	60ba      	str	r2, [r7, #8]
 8009440:	0019      	movs	r1, r3
 8009442:	260e      	movs	r6, #14
 8009444:	19bb      	adds	r3, r7, r6
 8009446:	1c22      	adds	r2, r4, #0
 8009448:	801a      	strh	r2, [r3, #0]
 800944a:	230c      	movs	r3, #12
 800944c:	18fb      	adds	r3, r7, r3
 800944e:	1c02      	adds	r2, r0, #0
 8009450:	801a      	strh	r2, [r3, #0]
 8009452:	1dbb      	adds	r3, r7, #6
 8009454:	1c0a      	adds	r2, r1, #0
 8009456:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8009458:	4b0c      	ldr	r3, [pc, #48]	@ (800948c <WriteMemRegister+0x58>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d010      	beq.n	8009482 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 8009460:	4b0a      	ldr	r3, [pc, #40]	@ (800948c <WriteMemRegister+0x58>)
 8009462:	681c      	ldr	r4, [r3, #0]
 8009464:	4b0a      	ldr	r3, [pc, #40]	@ (8009490 <WriteMemRegister+0x5c>)
 8009466:	7818      	ldrb	r0, [r3, #0]
 8009468:	68bd      	ldr	r5, [r7, #8]
 800946a:	230c      	movs	r3, #12
 800946c:	18fb      	adds	r3, r7, r3
 800946e:	881a      	ldrh	r2, [r3, #0]
 8009470:	19bb      	adds	r3, r7, r6
 8009472:	8819      	ldrh	r1, [r3, #0]
 8009474:	1dbb      	adds	r3, r7, #6
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	002b      	movs	r3, r5
 800947c:	47a0      	blx	r4
 800947e:	0003      	movs	r3, r0
 8009480:	e000      	b.n	8009484 <WriteMemRegister+0x50>
  }
  return false;
 8009482:	2300      	movs	r3, #0
}
 8009484:	0018      	movs	r0, r3
 8009486:	46bd      	mov	sp, r7
 8009488:	b005      	add	sp, #20
 800948a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800948c:	20000bcc 	.word	0x20000bcc
 8009490:	20000094 	.word	0x20000094

08009494 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8009494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009496:	b087      	sub	sp, #28
 8009498:	af02      	add	r7, sp, #8
 800949a:	0004      	movs	r4, r0
 800949c:	0008      	movs	r0, r1
 800949e:	60ba      	str	r2, [r7, #8]
 80094a0:	0019      	movs	r1, r3
 80094a2:	260e      	movs	r6, #14
 80094a4:	19bb      	adds	r3, r7, r6
 80094a6:	1c22      	adds	r2, r4, #0
 80094a8:	801a      	strh	r2, [r3, #0]
 80094aa:	230c      	movs	r3, #12
 80094ac:	18fb      	adds	r3, r7, r3
 80094ae:	1c02      	adds	r2, r0, #0
 80094b0:	801a      	strh	r2, [r3, #0]
 80094b2:	1dbb      	adds	r3, r7, #6
 80094b4:	1c0a      	adds	r2, r1, #0
 80094b6:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 80094b8:	4b0c      	ldr	r3, [pc, #48]	@ (80094ec <ReadMemRegister+0x58>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d010      	beq.n	80094e2 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 80094c0:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <ReadMemRegister+0x58>)
 80094c2:	681c      	ldr	r4, [r3, #0]
 80094c4:	4b0a      	ldr	r3, [pc, #40]	@ (80094f0 <ReadMemRegister+0x5c>)
 80094c6:	7818      	ldrb	r0, [r3, #0]
 80094c8:	68bd      	ldr	r5, [r7, #8]
 80094ca:	230c      	movs	r3, #12
 80094cc:	18fb      	adds	r3, r7, r3
 80094ce:	881a      	ldrh	r2, [r3, #0]
 80094d0:	19bb      	adds	r3, r7, r6
 80094d2:	8819      	ldrh	r1, [r3, #0]
 80094d4:	1dbb      	adds	r3, r7, #6
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	002b      	movs	r3, r5
 80094dc:	47a0      	blx	r4
 80094de:	0003      	movs	r3, r0
 80094e0:	e000      	b.n	80094e4 <ReadMemRegister+0x50>
  }
  return false;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	0018      	movs	r0, r3
 80094e6:	46bd      	mov	sp, r7
 80094e8:	b005      	add	sp, #20
 80094ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ec:	20000bd0 	.word	0x20000bd0
 80094f0:	20000094 	.word	0x20000094

080094f4 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 80094fc:	f008 fdf8 	bl	80120f0 <HAL_GetTick>
 8009500:	0002      	movs	r2, r0
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	18d2      	adds	r2, r2, r3
 8009506:	4b03      	ldr	r3, [pc, #12]	@ (8009514 <setBMP280TimeStamp+0x20>)
 8009508:	601a      	str	r2, [r3, #0]
}
 800950a:	46c0      	nop			@ (mov r8, r8)
 800950c:	46bd      	mov	sp, r7
 800950e:	b002      	add	sp, #8
 8009510:	bd80      	pop	{r7, pc}
 8009512:	46c0      	nop			@ (mov r8, r8)
 8009514:	20000bf8 	.word	0x20000bf8

08009518 <BMP280_reset>:

static void BMP280_reset() {
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800951e:	1dfb      	adds	r3, r7, #7
 8009520:	22b6      	movs	r2, #182	@ 0xb6
 8009522:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 8009524:	1dfa      	adds	r2, r7, #7
 8009526:	2301      	movs	r3, #1
 8009528:	2101      	movs	r1, #1
 800952a:	20e0      	movs	r0, #224	@ 0xe0
 800952c:	f7ff ff82 	bl	8009434 <WriteMemRegister>
  Info("BMP280 has been reset");
 8009530:	4a06      	ldr	r2, [pc, #24]	@ (800954c <BMP280_reset+0x34>)
 8009532:	4b07      	ldr	r3, [pc, #28]	@ (8009550 <BMP280_reset+0x38>)
 8009534:	0019      	movs	r1, r3
 8009536:	2002      	movs	r0, #2
 8009538:	f008 f98e 	bl	8011858 <CreateLine>
  HAL_Delay(100);
 800953c:	2064      	movs	r0, #100	@ 0x64
 800953e:	f008 fde1 	bl	8012104 <HAL_Delay>
}
 8009542:	46c0      	nop			@ (mov r8, r8)
 8009544:	46bd      	mov	sp, r7
 8009546:	b002      	add	sp, #8
 8009548:	bd80      	pop	{r7, pc}
 800954a:	46c0      	nop			@ (mov r8, r8)
 800954c:	080292fc 	.word	0x080292fc
 8009550:	08029314 	.word	0x08029314

08009554 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 8009554:	b590      	push	{r4, r7, lr}
 8009556:	b083      	sub	sp, #12
 8009558:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800955a:	4aae      	ldr	r2, [pc, #696]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 800955c:	231a      	movs	r3, #26
 800955e:	2101      	movs	r1, #1
 8009560:	2088      	movs	r0, #136	@ 0x88
 8009562:	f7ff ff97 	bl	8009494 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 8009566:	4bab      	ldr	r3, [pc, #684]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009568:	785b      	ldrb	r3, [r3, #1]
 800956a:	021b      	lsls	r3, r3, #8
 800956c:	b29b      	uxth	r3, r3
 800956e:	4aa9      	ldr	r2, [pc, #676]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009570:	7812      	ldrb	r2, [r2, #0]
 8009572:	189b      	adds	r3, r3, r2
 8009574:	b29a      	uxth	r2, r3
 8009576:	4ba8      	ldr	r3, [pc, #672]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 8009578:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800957a:	4ba6      	ldr	r3, [pc, #664]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 800957c:	78db      	ldrb	r3, [r3, #3]
 800957e:	021b      	lsls	r3, r3, #8
 8009580:	b29b      	uxth	r3, r3
 8009582:	4aa4      	ldr	r2, [pc, #656]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009584:	7892      	ldrb	r2, [r2, #2]
 8009586:	189b      	adds	r3, r3, r2
 8009588:	b29b      	uxth	r3, r3
 800958a:	b21a      	sxth	r2, r3
 800958c:	4ba2      	ldr	r3, [pc, #648]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 800958e:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 8009590:	4ba0      	ldr	r3, [pc, #640]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009592:	795b      	ldrb	r3, [r3, #5]
 8009594:	021b      	lsls	r3, r3, #8
 8009596:	b29b      	uxth	r3, r3
 8009598:	4a9e      	ldr	r2, [pc, #632]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 800959a:	7912      	ldrb	r2, [r2, #4]
 800959c:	189b      	adds	r3, r3, r2
 800959e:	b29b      	uxth	r3, r3
 80095a0:	b21a      	sxth	r2, r3
 80095a2:	4b9d      	ldr	r3, [pc, #628]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 80095a4:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 80095a6:	4b9b      	ldr	r3, [pc, #620]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80095a8:	79db      	ldrb	r3, [r3, #7]
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	4a99      	ldr	r2, [pc, #612]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80095b0:	7992      	ldrb	r2, [r2, #6]
 80095b2:	189b      	adds	r3, r3, r2
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	4b98      	ldr	r3, [pc, #608]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 80095b8:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 80095ba:	4b96      	ldr	r3, [pc, #600]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80095bc:	7a5b      	ldrb	r3, [r3, #9]
 80095be:	021b      	lsls	r3, r3, #8
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	4a94      	ldr	r2, [pc, #592]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80095c4:	7a12      	ldrb	r2, [r2, #8]
 80095c6:	189b      	adds	r3, r3, r2
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	b21a      	sxth	r2, r3
 80095cc:	4b92      	ldr	r3, [pc, #584]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 80095ce:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 80095d0:	4b90      	ldr	r3, [pc, #576]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80095d2:	7adb      	ldrb	r3, [r3, #11]
 80095d4:	021b      	lsls	r3, r3, #8
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	4a8e      	ldr	r2, [pc, #568]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80095da:	7a92      	ldrb	r2, [r2, #10]
 80095dc:	189b      	adds	r3, r3, r2
 80095de:	b29b      	uxth	r3, r3
 80095e0:	b21a      	sxth	r2, r3
 80095e2:	4b8d      	ldr	r3, [pc, #564]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 80095e4:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 80095e6:	4b8b      	ldr	r3, [pc, #556]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80095e8:	7b5b      	ldrb	r3, [r3, #13]
 80095ea:	021b      	lsls	r3, r3, #8
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	4a89      	ldr	r2, [pc, #548]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80095f0:	7b12      	ldrb	r2, [r2, #12]
 80095f2:	189b      	adds	r3, r3, r2
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	b21a      	sxth	r2, r3
 80095f8:	4b87      	ldr	r3, [pc, #540]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 80095fa:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 80095fc:	4b85      	ldr	r3, [pc, #532]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80095fe:	7bdb      	ldrb	r3, [r3, #15]
 8009600:	021b      	lsls	r3, r3, #8
 8009602:	b29b      	uxth	r3, r3
 8009604:	4a83      	ldr	r2, [pc, #524]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009606:	7b92      	ldrb	r2, [r2, #14]
 8009608:	189b      	adds	r3, r3, r2
 800960a:	b29b      	uxth	r3, r3
 800960c:	b21a      	sxth	r2, r3
 800960e:	4b82      	ldr	r3, [pc, #520]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 8009610:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 8009612:	4b80      	ldr	r3, [pc, #512]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009614:	7c5b      	ldrb	r3, [r3, #17]
 8009616:	021b      	lsls	r3, r3, #8
 8009618:	b29b      	uxth	r3, r3
 800961a:	4a7e      	ldr	r2, [pc, #504]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 800961c:	7c12      	ldrb	r2, [r2, #16]
 800961e:	189b      	adds	r3, r3, r2
 8009620:	b29b      	uxth	r3, r3
 8009622:	b21a      	sxth	r2, r3
 8009624:	4b7c      	ldr	r3, [pc, #496]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 8009626:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 8009628:	4b7a      	ldr	r3, [pc, #488]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 800962a:	7cdb      	ldrb	r3, [r3, #19]
 800962c:	021b      	lsls	r3, r3, #8
 800962e:	b29b      	uxth	r3, r3
 8009630:	4a78      	ldr	r2, [pc, #480]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009632:	7c92      	ldrb	r2, [r2, #18]
 8009634:	189b      	adds	r3, r3, r2
 8009636:	b29b      	uxth	r3, r3
 8009638:	b21a      	sxth	r2, r3
 800963a:	4b77      	ldr	r3, [pc, #476]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 800963c:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800963e:	4b75      	ldr	r3, [pc, #468]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009640:	7d5b      	ldrb	r3, [r3, #21]
 8009642:	021b      	lsls	r3, r3, #8
 8009644:	b29b      	uxth	r3, r3
 8009646:	4a73      	ldr	r2, [pc, #460]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009648:	7d12      	ldrb	r2, [r2, #20]
 800964a:	189b      	adds	r3, r3, r2
 800964c:	b29b      	uxth	r3, r3
 800964e:	b21a      	sxth	r2, r3
 8009650:	4b71      	ldr	r3, [pc, #452]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 8009652:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 8009654:	4b6f      	ldr	r3, [pc, #444]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009656:	7ddb      	ldrb	r3, [r3, #23]
 8009658:	021b      	lsls	r3, r3, #8
 800965a:	b29b      	uxth	r3, r3
 800965c:	4a6d      	ldr	r2, [pc, #436]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 800965e:	7d92      	ldrb	r2, [r2, #22]
 8009660:	189b      	adds	r3, r3, r2
 8009662:	b29b      	uxth	r3, r3
 8009664:	b21a      	sxth	r2, r3
 8009666:	4b6c      	ldr	r3, [pc, #432]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 8009668:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800966a:	4a6c      	ldr	r2, [pc, #432]	@ (800981c <BMP280_get_calibration+0x2c8>)
 800966c:	4b6c      	ldr	r3, [pc, #432]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 800966e:	0019      	movs	r1, r3
 8009670:	2003      	movs	r0, #3
 8009672:	f008 f8f1 	bl	8011858 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 8009676:	4b67      	ldr	r3, [pc, #412]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009678:	785b      	ldrb	r3, [r3, #1]
 800967a:	001c      	movs	r4, r3
 800967c:	4b65      	ldr	r3, [pc, #404]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	0018      	movs	r0, r3
 8009682:	4b65      	ldr	r3, [pc, #404]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 8009684:	881b      	ldrh	r3, [r3, #0]
 8009686:	4a67      	ldr	r2, [pc, #412]	@ (8009824 <BMP280_get_calibration+0x2d0>)
 8009688:	4965      	ldr	r1, [pc, #404]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	9000      	str	r0, [sp, #0]
 800968e:	0023      	movs	r3, r4
 8009690:	2003      	movs	r0, #3
 8009692:	f008 f8e1 	bl	8011858 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 8009696:	4b5f      	ldr	r3, [pc, #380]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009698:	78db      	ldrb	r3, [r3, #3]
 800969a:	001c      	movs	r4, r3
 800969c:	4b5d      	ldr	r3, [pc, #372]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 800969e:	789b      	ldrb	r3, [r3, #2]
 80096a0:	0018      	movs	r0, r3
 80096a2:	4b5d      	ldr	r3, [pc, #372]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 80096a4:	2202      	movs	r2, #2
 80096a6:	5e9b      	ldrsh	r3, [r3, r2]
 80096a8:	4a5f      	ldr	r2, [pc, #380]	@ (8009828 <BMP280_get_calibration+0x2d4>)
 80096aa:	495d      	ldr	r1, [pc, #372]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 80096ac:	9301      	str	r3, [sp, #4]
 80096ae:	9000      	str	r0, [sp, #0]
 80096b0:	0023      	movs	r3, r4
 80096b2:	2003      	movs	r0, #3
 80096b4:	f008 f8d0 	bl	8011858 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 80096b8:	4b56      	ldr	r3, [pc, #344]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80096ba:	795b      	ldrb	r3, [r3, #5]
 80096bc:	001c      	movs	r4, r3
 80096be:	4b55      	ldr	r3, [pc, #340]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80096c0:	791b      	ldrb	r3, [r3, #4]
 80096c2:	0018      	movs	r0, r3
 80096c4:	4b54      	ldr	r3, [pc, #336]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 80096c6:	2204      	movs	r2, #4
 80096c8:	5e9b      	ldrsh	r3, [r3, r2]
 80096ca:	4a58      	ldr	r2, [pc, #352]	@ (800982c <BMP280_get_calibration+0x2d8>)
 80096cc:	4954      	ldr	r1, [pc, #336]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	9000      	str	r0, [sp, #0]
 80096d2:	0023      	movs	r3, r4
 80096d4:	2003      	movs	r0, #3
 80096d6:	f008 f8bf 	bl	8011858 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 80096da:	4b4e      	ldr	r3, [pc, #312]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80096dc:	79db      	ldrb	r3, [r3, #7]
 80096de:	001c      	movs	r4, r3
 80096e0:	4b4c      	ldr	r3, [pc, #304]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80096e2:	799b      	ldrb	r3, [r3, #6]
 80096e4:	0018      	movs	r0, r3
 80096e6:	4b4c      	ldr	r3, [pc, #304]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 80096e8:	88db      	ldrh	r3, [r3, #6]
 80096ea:	4a51      	ldr	r2, [pc, #324]	@ (8009830 <BMP280_get_calibration+0x2dc>)
 80096ec:	494c      	ldr	r1, [pc, #304]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	9000      	str	r0, [sp, #0]
 80096f2:	0023      	movs	r3, r4
 80096f4:	2003      	movs	r0, #3
 80096f6:	f008 f8af 	bl	8011858 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 80096fa:	4b46      	ldr	r3, [pc, #280]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80096fc:	7a5b      	ldrb	r3, [r3, #9]
 80096fe:	001c      	movs	r4, r3
 8009700:	4b44      	ldr	r3, [pc, #272]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009702:	7a1b      	ldrb	r3, [r3, #8]
 8009704:	0018      	movs	r0, r3
 8009706:	4b44      	ldr	r3, [pc, #272]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 8009708:	2208      	movs	r2, #8
 800970a:	5e9b      	ldrsh	r3, [r3, r2]
 800970c:	4a49      	ldr	r2, [pc, #292]	@ (8009834 <BMP280_get_calibration+0x2e0>)
 800970e:	4944      	ldr	r1, [pc, #272]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 8009710:	9301      	str	r3, [sp, #4]
 8009712:	9000      	str	r0, [sp, #0]
 8009714:	0023      	movs	r3, r4
 8009716:	2003      	movs	r0, #3
 8009718:	f008 f89e 	bl	8011858 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800971c:	4b3d      	ldr	r3, [pc, #244]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 800971e:	7adb      	ldrb	r3, [r3, #11]
 8009720:	001c      	movs	r4, r3
 8009722:	4b3c      	ldr	r3, [pc, #240]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009724:	7a9b      	ldrb	r3, [r3, #10]
 8009726:	0018      	movs	r0, r3
 8009728:	4b3b      	ldr	r3, [pc, #236]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 800972a:	220a      	movs	r2, #10
 800972c:	5e9b      	ldrsh	r3, [r3, r2]
 800972e:	4a42      	ldr	r2, [pc, #264]	@ (8009838 <BMP280_get_calibration+0x2e4>)
 8009730:	493b      	ldr	r1, [pc, #236]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	9000      	str	r0, [sp, #0]
 8009736:	0023      	movs	r3, r4
 8009738:	2003      	movs	r0, #3
 800973a:	f008 f88d 	bl	8011858 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800973e:	4b35      	ldr	r3, [pc, #212]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009740:	7b5b      	ldrb	r3, [r3, #13]
 8009742:	001c      	movs	r4, r3
 8009744:	4b33      	ldr	r3, [pc, #204]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009746:	7b1b      	ldrb	r3, [r3, #12]
 8009748:	0018      	movs	r0, r3
 800974a:	4b33      	ldr	r3, [pc, #204]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 800974c:	220c      	movs	r2, #12
 800974e:	5e9b      	ldrsh	r3, [r3, r2]
 8009750:	4a3a      	ldr	r2, [pc, #232]	@ (800983c <BMP280_get_calibration+0x2e8>)
 8009752:	4933      	ldr	r1, [pc, #204]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	9000      	str	r0, [sp, #0]
 8009758:	0023      	movs	r3, r4
 800975a:	2003      	movs	r0, #3
 800975c:	f008 f87c 	bl	8011858 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 8009760:	4b2c      	ldr	r3, [pc, #176]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009762:	7bdb      	ldrb	r3, [r3, #15]
 8009764:	001c      	movs	r4, r3
 8009766:	4b2b      	ldr	r3, [pc, #172]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009768:	7b9b      	ldrb	r3, [r3, #14]
 800976a:	0018      	movs	r0, r3
 800976c:	4b2a      	ldr	r3, [pc, #168]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 800976e:	220e      	movs	r2, #14
 8009770:	5e9b      	ldrsh	r3, [r3, r2]
 8009772:	4a33      	ldr	r2, [pc, #204]	@ (8009840 <BMP280_get_calibration+0x2ec>)
 8009774:	492a      	ldr	r1, [pc, #168]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 8009776:	9301      	str	r3, [sp, #4]
 8009778:	9000      	str	r0, [sp, #0]
 800977a:	0023      	movs	r3, r4
 800977c:	2003      	movs	r0, #3
 800977e:	f008 f86b 	bl	8011858 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 8009782:	4b24      	ldr	r3, [pc, #144]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 8009784:	7c5b      	ldrb	r3, [r3, #17]
 8009786:	001c      	movs	r4, r3
 8009788:	4b22      	ldr	r3, [pc, #136]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 800978a:	7c1b      	ldrb	r3, [r3, #16]
 800978c:	0018      	movs	r0, r3
 800978e:	4b22      	ldr	r3, [pc, #136]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 8009790:	2210      	movs	r2, #16
 8009792:	5e9b      	ldrsh	r3, [r3, r2]
 8009794:	4a2b      	ldr	r2, [pc, #172]	@ (8009844 <BMP280_get_calibration+0x2f0>)
 8009796:	4922      	ldr	r1, [pc, #136]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 8009798:	9301      	str	r3, [sp, #4]
 800979a:	9000      	str	r0, [sp, #0]
 800979c:	0023      	movs	r3, r4
 800979e:	2003      	movs	r0, #3
 80097a0:	f008 f85a 	bl	8011858 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 80097a4:	4b1b      	ldr	r3, [pc, #108]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80097a6:	7cdb      	ldrb	r3, [r3, #19]
 80097a8:	001c      	movs	r4, r3
 80097aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80097ac:	7c9b      	ldrb	r3, [r3, #18]
 80097ae:	0018      	movs	r0, r3
 80097b0:	4b19      	ldr	r3, [pc, #100]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 80097b2:	2212      	movs	r2, #18
 80097b4:	5e9b      	ldrsh	r3, [r3, r2]
 80097b6:	4a24      	ldr	r2, [pc, #144]	@ (8009848 <BMP280_get_calibration+0x2f4>)
 80097b8:	4919      	ldr	r1, [pc, #100]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	9000      	str	r0, [sp, #0]
 80097be:	0023      	movs	r3, r4
 80097c0:	2003      	movs	r0, #3
 80097c2:	f008 f849 	bl	8011858 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 80097c6:	4b13      	ldr	r3, [pc, #76]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80097c8:	7d5b      	ldrb	r3, [r3, #21]
 80097ca:	001c      	movs	r4, r3
 80097cc:	4b11      	ldr	r3, [pc, #68]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80097ce:	7d1b      	ldrb	r3, [r3, #20]
 80097d0:	0018      	movs	r0, r3
 80097d2:	4b11      	ldr	r3, [pc, #68]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 80097d4:	2214      	movs	r2, #20
 80097d6:	5e9b      	ldrsh	r3, [r3, r2]
 80097d8:	4a1c      	ldr	r2, [pc, #112]	@ (800984c <BMP280_get_calibration+0x2f8>)
 80097da:	4911      	ldr	r1, [pc, #68]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	9000      	str	r0, [sp, #0]
 80097e0:	0023      	movs	r3, r4
 80097e2:	2003      	movs	r0, #3
 80097e4:	f008 f838 	bl	8011858 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 80097e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80097ea:	7ddb      	ldrb	r3, [r3, #23]
 80097ec:	001c      	movs	r4, r3
 80097ee:	4b09      	ldr	r3, [pc, #36]	@ (8009814 <BMP280_get_calibration+0x2c0>)
 80097f0:	7d9b      	ldrb	r3, [r3, #22]
 80097f2:	0018      	movs	r0, r3
 80097f4:	4b08      	ldr	r3, [pc, #32]	@ (8009818 <BMP280_get_calibration+0x2c4>)
 80097f6:	2216      	movs	r2, #22
 80097f8:	5e9b      	ldrsh	r3, [r3, r2]
 80097fa:	4a15      	ldr	r2, [pc, #84]	@ (8009850 <BMP280_get_calibration+0x2fc>)
 80097fc:	4908      	ldr	r1, [pc, #32]	@ (8009820 <BMP280_get_calibration+0x2cc>)
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	9000      	str	r0, [sp, #0]
 8009802:	0023      	movs	r3, r4
 8009804:	2003      	movs	r0, #3
 8009806:	f008 f827 	bl	8011858 <CreateLine>
}
 800980a:	46c0      	nop			@ (mov r8, r8)
 800980c:	46bd      	mov	sp, r7
 800980e:	b001      	add	sp, #4
 8009810:	bd90      	pop	{r4, r7, pc}
 8009812:	46c0      	nop			@ (mov r8, r8)
 8009814:	20000bfc 	.word	0x20000bfc
 8009818:	20000bd4 	.word	0x20000bd4
 800981c:	08029318 	.word	0x08029318
 8009820:	08029334 	.word	0x08029334
 8009824:	08029338 	.word	0x08029338
 8009828:	0802936c 	.word	0x0802936c
 800982c:	080293a0 	.word	0x080293a0
 8009830:	080293d4 	.word	0x080293d4
 8009834:	08029408 	.word	0x08029408
 8009838:	0802943c 	.word	0x0802943c
 800983c:	08029470 	.word	0x08029470
 8009840:	080294a4 	.word	0x080294a4
 8009844:	080294d8 	.word	0x080294d8
 8009848:	0802950c 	.word	0x0802950c
 800984c:	08029540 	.word	0x08029540
 8009850:	08029574 	.word	0x08029574

08009854 <BMP280_probe>:

static bool BMP280_probe() {
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800985a:	4b34      	ldr	r3, [pc, #208]	@ (800992c <BMP280_probe+0xd8>)
 800985c:	2276      	movs	r2, #118	@ 0x76
 800985e:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 8009860:	1dba      	adds	r2, r7, #6
 8009862:	2301      	movs	r3, #1
 8009864:	2101      	movs	r1, #1
 8009866:	20d0      	movs	r0, #208	@ 0xd0
 8009868:	f7ff fe14 	bl	8009494 <ReadMemRegister>
 800986c:	0003      	movs	r3, r0
 800986e:	001a      	movs	r2, r3
 8009870:	1dfb      	adds	r3, r7, #7
 8009872:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 8009874:	1dfb      	adds	r3, r7, #7
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	b25b      	sxtb	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00a      	beq.n	8009894 <BMP280_probe+0x40>
 800987e:	1dbb      	adds	r3, r7, #6
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d006      	beq.n	8009894 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 8009886:	1dbb      	adds	r3, r7, #6
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	4a29      	ldr	r2, [pc, #164]	@ (8009930 <BMP280_probe+0xdc>)
 800988c:	4929      	ldr	r1, [pc, #164]	@ (8009934 <BMP280_probe+0xe0>)
 800988e:	2003      	movs	r0, #3
 8009890:	f007 ffe2 	bl	8011858 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 8009894:	1dbb      	adds	r3, r7, #6
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	2b58      	cmp	r3, #88	@ 0x58
 800989a:	d01f      	beq.n	80098dc <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800989c:	4b23      	ldr	r3, [pc, #140]	@ (800992c <BMP280_probe+0xd8>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	3301      	adds	r3, #1
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	4b21      	ldr	r3, [pc, #132]	@ (800992c <BMP280_probe+0xd8>)
 80098a6:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 80098a8:	1dba      	adds	r2, r7, #6
 80098aa:	2301      	movs	r3, #1
 80098ac:	2101      	movs	r1, #1
 80098ae:	20d0      	movs	r0, #208	@ 0xd0
 80098b0:	f7ff fdf0 	bl	8009494 <ReadMemRegister>
 80098b4:	0003      	movs	r3, r0
 80098b6:	001a      	movs	r2, r3
 80098b8:	1dfb      	adds	r3, r7, #7
 80098ba:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 80098bc:	1dfb      	adds	r3, r7, #7
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	b25b      	sxtb	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00a      	beq.n	80098dc <BMP280_probe+0x88>
 80098c6:	1dbb      	adds	r3, r7, #6
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d006      	beq.n	80098dc <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 80098ce:	1dbb      	adds	r3, r7, #6
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	4a17      	ldr	r2, [pc, #92]	@ (8009930 <BMP280_probe+0xdc>)
 80098d4:	4917      	ldr	r1, [pc, #92]	@ (8009934 <BMP280_probe+0xe0>)
 80098d6:	2003      	movs	r0, #3
 80098d8:	f007 ffbe 	bl	8011858 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 80098dc:	1dbb      	adds	r3, r7, #6
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b58      	cmp	r3, #88	@ 0x58
 80098e2:	d110      	bne.n	8009906 <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 80098e4:	1dbb      	adds	r3, r7, #6
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	0018      	movs	r0, r3
 80098ea:	4b10      	ldr	r3, [pc, #64]	@ (800992c <BMP280_probe+0xd8>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	4a12      	ldr	r2, [pc, #72]	@ (8009938 <BMP280_probe+0xe4>)
 80098f0:	4912      	ldr	r1, [pc, #72]	@ (800993c <BMP280_probe+0xe8>)
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	0003      	movs	r3, r0
 80098f6:	2002      	movs	r0, #2
 80098f8:	f007 ffae 	bl	8011858 <CreateLine>
      BMP280_reset(); // get an initial state
 80098fc:	f7ff fe0c 	bl	8009518 <BMP280_reset>
      BMP280_get_calibration();
 8009900:	f7ff fe28 	bl	8009554 <BMP280_get_calibration>
 8009904:	e008      	b.n	8009918 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 8009906:	4b09      	ldr	r3, [pc, #36]	@ (800992c <BMP280_probe+0xd8>)
 8009908:	2200      	movs	r2, #0
 800990a:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800990c:	4a0c      	ldr	r2, [pc, #48]	@ (8009940 <BMP280_probe+0xec>)
 800990e:	4b0d      	ldr	r3, [pc, #52]	@ (8009944 <BMP280_probe+0xf0>)
 8009910:	0019      	movs	r1, r3
 8009912:	2001      	movs	r0, #1
 8009914:	f007 ffa0 	bl	8011858 <CreateLine>
    }
    return bmp280I2Caddr;
 8009918:	4b04      	ldr	r3, [pc, #16]	@ (800992c <BMP280_probe+0xd8>)
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	1e5a      	subs	r2, r3, #1
 800991e:	4193      	sbcs	r3, r2
 8009920:	b2db      	uxtb	r3, r3
}
 8009922:	0018      	movs	r0, r3
 8009924:	46bd      	mov	sp, r7
 8009926:	b002      	add	sp, #8
 8009928:	bd80      	pop	{r7, pc}
 800992a:	46c0      	nop			@ (mov r8, r8)
 800992c:	20000094 	.word	0x20000094
 8009930:	080295a8 	.word	0x080295a8
 8009934:	08029334 	.word	0x08029334
 8009938:	080295d8 	.word	0x080295d8
 800993c:	08029314 	.word	0x08029314
 8009940:	08029610 	.word	0x08029610
 8009944:	08029624 	.word	0x08029624

08009948 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800994c:	f7ff ff82 	bl	8009854 <BMP280_probe>
 8009950:	0003      	movs	r3, r0
}
 8009952:	0018      	movs	r0, r3
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 8009962:	4b05      	ldr	r3, [pc, #20]	@ (8009978 <BMP_Init+0x20>)
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 8009968:	4b04      	ldr	r3, [pc, #16]	@ (800997c <BMP_Init+0x24>)
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	601a      	str	r2, [r3, #0]
}
 800996e:	46c0      	nop			@ (mov r8, r8)
 8009970:	46bd      	mov	sp, r7
 8009972:	b002      	add	sp, #8
 8009974:	bd80      	pop	{r7, pc}
 8009976:	46c0      	nop			@ (mov r8, r8)
 8009978:	20000bd0 	.word	0x20000bd0
 800997c:	20000bcc 	.word	0x20000bcc

08009980 <BMP280_set_config>:


static bool BMP280_set_config() {
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 8009986:	1dbb      	adds	r3, r7, #6
 8009988:	228c      	movs	r2, #140	@ 0x8c
 800998a:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800998c:	1dba      	adds	r2, r7, #6
 800998e:	2301      	movs	r3, #1
 8009990:	2101      	movs	r1, #1
 8009992:	20f5      	movs	r0, #245	@ 0xf5
 8009994:	f7ff fd4e 	bl	8009434 <WriteMemRegister>
 8009998:	0003      	movs	r3, r0
 800999a:	001a      	movs	r2, r3
 800999c:	1dfb      	adds	r3, r7, #7
 800999e:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 80099a0:	f008 fba6 	bl	80120f0 <HAL_GetTick>
 80099a4:	0003      	movs	r3, r0
 80099a6:	330a      	adds	r3, #10
 80099a8:	001a      	movs	r2, r3
 80099aa:	4b06      	ldr	r3, [pc, #24]	@ (80099c4 <BMP280_set_config+0x44>)
 80099ac:	601a      	str	r2, [r3, #0]
  return rslt;
 80099ae:	1dfb      	adds	r3, r7, #7
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	b25b      	sxtb	r3, r3
 80099b4:	1e5a      	subs	r2, r3, #1
 80099b6:	4193      	sbcs	r3, r2
 80099b8:	b2db      	uxtb	r3, r3
}
 80099ba:	0018      	movs	r0, r3
 80099bc:	46bd      	mov	sp, r7
 80099be:	b002      	add	sp, #8
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	46c0      	nop			@ (mov r8, r8)
 80099c4:	20000bf8 	.word	0x20000bf8

080099c8 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 80099ce:	1dbb      	adds	r3, r7, #6
 80099d0:	2208      	movs	r2, #8
 80099d2:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 80099d4:	4b22      	ldr	r3, [pc, #136]	@ (8009a60 <BMP280_set_mode+0x98>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	224c      	movs	r2, #76	@ 0x4c
 80099da:	4313      	orrs	r3, r2
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	1d7b      	adds	r3, r7, #5
 80099e0:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 80099e2:	1d7a      	adds	r2, r7, #5
 80099e4:	2301      	movs	r3, #1
 80099e6:	2101      	movs	r1, #1
 80099e8:	20f4      	movs	r0, #244	@ 0xf4
 80099ea:	f7ff fd23 	bl	8009434 <WriteMemRegister>
 80099ee:	0003      	movs	r3, r0
 80099f0:	001a      	movs	r2, r3
 80099f2:	1dfb      	adds	r3, r7, #7
 80099f4:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 80099f6:	f008 fb7b 	bl	80120f0 <HAL_GetTick>
 80099fa:	0003      	movs	r3, r0
 80099fc:	22fa      	movs	r2, #250	@ 0xfa
 80099fe:	0092      	lsls	r2, r2, #2
 8009a00:	189a      	adds	r2, r3, r2
 8009a02:	4b18      	ldr	r3, [pc, #96]	@ (8009a64 <BMP280_set_mode+0x9c>)
 8009a04:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 8009a06:	e016      	b.n	8009a36 <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 8009a08:	1dba      	adds	r2, r7, #6
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	20f3      	movs	r0, #243	@ 0xf3
 8009a10:	f7ff fd40 	bl	8009494 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 8009a14:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <BMP280_set_mode+0x9c>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	0018      	movs	r0, r3
 8009a1a:	f007 fec7 	bl	80117ac <TimestampIsReached>
 8009a1e:	1e03      	subs	r3, r0, #0
 8009a20:	d006      	beq.n	8009a30 <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 8009a22:	4a11      	ldr	r2, [pc, #68]	@ (8009a68 <BMP280_set_mode+0xa0>)
 8009a24:	4b11      	ldr	r3, [pc, #68]	@ (8009a6c <BMP280_set_mode+0xa4>)
 8009a26:	0019      	movs	r1, r3
 8009a28:	2001      	movs	r0, #1
 8009a2a:	f007 ff15 	bl	8011858 <CreateLine>
      break;
 8009a2e:	e008      	b.n	8009a42 <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 8009a30:	2001      	movs	r0, #1
 8009a32:	f008 fb67 	bl	8012104 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 8009a36:	1dbb      	adds	r3, r7, #6
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	001a      	movs	r2, r3
 8009a3c:	2308      	movs	r3, #8
 8009a3e:	4013      	ands	r3, r2
 8009a40:	d1e2      	bne.n	8009a08 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 8009a42:	f008 fb55 	bl	80120f0 <HAL_GetTick>
 8009a46:	0002      	movs	r2, r0
 8009a48:	4b06      	ldr	r3, [pc, #24]	@ (8009a64 <BMP280_set_mode+0x9c>)
 8009a4a:	601a      	str	r2, [r3, #0]
  return rslt;
 8009a4c:	1dfb      	adds	r3, r7, #7
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	b25b      	sxtb	r3, r3
 8009a52:	1e5a      	subs	r2, r3, #1
 8009a54:	4193      	sbcs	r3, r2
 8009a56:	b2db      	uxtb	r3, r3
}
 8009a58:	0018      	movs	r0, r3
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	b002      	add	sp, #8
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	20000095 	.word	0x20000095
 8009a64:	20000bf8 	.word	0x20000bf8
 8009a68:	08029628 	.word	0x08029628
 8009a6c:	08029624 	.word	0x08029624

08009a70 <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 8009a76:	1dba      	adds	r2, r7, #6
 8009a78:	2301      	movs	r3, #1
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	20f4      	movs	r0, #244	@ 0xf4
 8009a7e:	f7ff fd09 	bl	8009494 <ReadMemRegister>
 8009a82:	0003      	movs	r3, r0
 8009a84:	001a      	movs	r2, r3
 8009a86:	1dfb      	adds	r3, r7, #7
 8009a88:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 8009a8a:	1dbb      	adds	r3, r7, #6
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2203      	movs	r2, #3
 8009a90:	4013      	ands	r3, r2
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	1dbb      	adds	r3, r7, #6
 8009a96:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 8009a98:	f008 fb2a 	bl	80120f0 <HAL_GetTick>
 8009a9c:	0003      	movs	r3, r0
 8009a9e:	330a      	adds	r3, #10
 8009aa0:	001a      	movs	r2, r3
 8009aa2:	4b08      	ldr	r3, [pc, #32]	@ (8009ac4 <BMP280_get_mode+0x54>)
 8009aa4:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 8009aa6:	1dfb      	adds	r3, r7, #7
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	b25b      	sxtb	r3, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d102      	bne.n	8009ab6 <BMP280_get_mode+0x46>
    bmpData = 255;
 8009ab0:	1dbb      	adds	r3, r7, #6
 8009ab2:	22ff      	movs	r2, #255	@ 0xff
 8009ab4:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 8009ab6:	1dbb      	adds	r3, r7, #6
 8009ab8:	781b      	ldrb	r3, [r3, #0]
}
 8009aba:	0018      	movs	r0, r3
 8009abc:	46bd      	mov	sp, r7
 8009abe:	b002      	add	sp, #8
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	46c0      	nop			@ (mov r8, r8)
 8009ac4:	20000bf8 	.word	0x20000bf8

08009ac8 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 8009ac8:	b5b0      	push	{r4, r5, r7, lr}
 8009aca:	b088      	sub	sp, #32
 8009acc:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 8009ace:	1d3a      	adds	r2, r7, #4
 8009ad0:	2306      	movs	r3, #6
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	20f7      	movs	r0, #247	@ 0xf7
 8009ad6:	f7ff fcdd 	bl	8009494 <ReadMemRegister>
 8009ada:	0003      	movs	r3, r0
 8009adc:	001a      	movs	r2, r3
 8009ade:	230f      	movs	r3, #15
 8009ae0:	18fb      	adds	r3, r7, r3
 8009ae2:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 8009ae4:	1d3b      	adds	r3, r7, #4
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b80      	cmp	r3, #128	@ 0x80
 8009aea:	d00f      	beq.n	8009b0c <BMP280_get_measurement_values+0x44>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 8009aec:	1d3b      	adds	r3, r7, #4
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	031a      	lsls	r2, r3, #12
 8009af2:	1d3b      	adds	r3, r7, #4
 8009af4:	785b      	ldrb	r3, [r3, #1]
 8009af6:	011b      	lsls	r3, r3, #4
 8009af8:	18d3      	adds	r3, r2, r3
 8009afa:	1d3a      	adds	r2, r7, #4
 8009afc:	7892      	ldrb	r2, [r2, #2]
 8009afe:	0912      	lsrs	r2, r2, #4
 8009b00:	b2d2      	uxtb	r2, r2
 8009b02:	189b      	adds	r3, r3, r2
 8009b04:	001a      	movs	r2, r3
 8009b06:	4b2b      	ldr	r3, [pc, #172]	@ (8009bb4 <BMP280_get_measurement_values+0xec>)
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	e019      	b.n	8009b40 <BMP280_get_measurement_values+0x78>
  }
  else {
    Error("BMP280 Invalid read of barometric pressure, using previous value.");
 8009b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8009bb8 <BMP280_get_measurement_values+0xf0>)
 8009b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8009bbc <BMP280_get_measurement_values+0xf4>)
 8009b10:	0019      	movs	r1, r3
 8009b12:	2001      	movs	r0, #1
 8009b14:	f007 fea0 	bl	8011858 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 8009b18:	1d3b      	adds	r3, r7, #4
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	001d      	movs	r5, r3
 8009b1e:	1d3b      	adds	r3, r7, #4
 8009b20:	785b      	ldrb	r3, [r3, #1]
 8009b22:	0018      	movs	r0, r3
 8009b24:	1d3b      	adds	r3, r7, #4
 8009b26:	789b      	ldrb	r3, [r3, #2]
 8009b28:	001c      	movs	r4, r3
 8009b2a:	4b22      	ldr	r3, [pc, #136]	@ (8009bb4 <BMP280_get_measurement_values+0xec>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a24      	ldr	r2, [pc, #144]	@ (8009bc0 <BMP280_get_measurement_values+0xf8>)
 8009b30:	4924      	ldr	r1, [pc, #144]	@ (8009bc4 <BMP280_get_measurement_values+0xfc>)
 8009b32:	9302      	str	r3, [sp, #8]
 8009b34:	9401      	str	r4, [sp, #4]
 8009b36:	9000      	str	r0, [sp, #0]
 8009b38:	002b      	movs	r3, r5
 8009b3a:	2003      	movs	r0, #3
 8009b3c:	f007 fe8c 	bl	8011858 <CreateLine>
  }
  if (bmpData[3] != 0x80) {
 8009b40:	1d3b      	adds	r3, r7, #4
 8009b42:	78db      	ldrb	r3, [r3, #3]
 8009b44:	2b80      	cmp	r3, #128	@ 0x80
 8009b46:	d00f      	beq.n	8009b68 <BMP280_get_measurement_values+0xa0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 8009b48:	1d3b      	adds	r3, r7, #4
 8009b4a:	78db      	ldrb	r3, [r3, #3]
 8009b4c:	031a      	lsls	r2, r3, #12
 8009b4e:	1d3b      	adds	r3, r7, #4
 8009b50:	791b      	ldrb	r3, [r3, #4]
 8009b52:	011b      	lsls	r3, r3, #4
 8009b54:	18d3      	adds	r3, r2, r3
 8009b56:	1d3a      	adds	r2, r7, #4
 8009b58:	7952      	ldrb	r2, [r2, #5]
 8009b5a:	0912      	lsrs	r2, r2, #4
 8009b5c:	b2d2      	uxtb	r2, r2
 8009b5e:	189b      	adds	r3, r3, r2
 8009b60:	001a      	movs	r2, r3
 8009b62:	4b19      	ldr	r3, [pc, #100]	@ (8009bc8 <BMP280_get_measurement_values+0x100>)
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	e019      	b.n	8009b9c <BMP280_get_measurement_values+0xd4>
  }
  else {
    Error("BMP280 Invalid read of temperature, using previous value.");
 8009b68:	4a18      	ldr	r2, [pc, #96]	@ (8009bcc <BMP280_get_measurement_values+0x104>)
 8009b6a:	4b14      	ldr	r3, [pc, #80]	@ (8009bbc <BMP280_get_measurement_values+0xf4>)
 8009b6c:	0019      	movs	r1, r3
 8009b6e:	2001      	movs	r0, #1
 8009b70:	f007 fe72 	bl	8011858 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 8009b74:	1d3b      	adds	r3, r7, #4
 8009b76:	78db      	ldrb	r3, [r3, #3]
 8009b78:	001d      	movs	r5, r3
 8009b7a:	1d3b      	adds	r3, r7, #4
 8009b7c:	791b      	ldrb	r3, [r3, #4]
 8009b7e:	0018      	movs	r0, r3
 8009b80:	1d3b      	adds	r3, r7, #4
 8009b82:	795b      	ldrb	r3, [r3, #5]
 8009b84:	001c      	movs	r4, r3
 8009b86:	4b10      	ldr	r3, [pc, #64]	@ (8009bc8 <BMP280_get_measurement_values+0x100>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a11      	ldr	r2, [pc, #68]	@ (8009bd0 <BMP280_get_measurement_values+0x108>)
 8009b8c:	490d      	ldr	r1, [pc, #52]	@ (8009bc4 <BMP280_get_measurement_values+0xfc>)
 8009b8e:	9302      	str	r3, [sp, #8]
 8009b90:	9401      	str	r4, [sp, #4]
 8009b92:	9000      	str	r0, [sp, #0]
 8009b94:	002b      	movs	r3, r5
 8009b96:	2003      	movs	r0, #3
 8009b98:	f007 fe5e 	bl	8011858 <CreateLine>
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 8009b9c:	230f      	movs	r3, #15
 8009b9e:	18fb      	adds	r3, r7, r3
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	b25b      	sxtb	r3, r3
 8009ba4:	1e5a      	subs	r2, r3, #1
 8009ba6:	4193      	sbcs	r3, r2
 8009ba8:	b2db      	uxtb	r3, r3
}
 8009baa:	0018      	movs	r0, r3
 8009bac:	46bd      	mov	sp, r7
 8009bae:	b004      	add	sp, #16
 8009bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb2:	46c0      	nop			@ (mov r8, r8)
 8009bb4:	20000bf4 	.word	0x20000bf4
 8009bb8:	08029654 	.word	0x08029654
 8009bbc:	08029624 	.word	0x08029624
 8009bc0:	08029698 	.word	0x08029698
 8009bc4:	08029334 	.word	0x08029334
 8009bc8:	20000bf0 	.word	0x20000bf0
 8009bcc:	080296e0 	.word	0x080296e0
 8009bd0:	0802971c 	.word	0x0802971c

08009bd4 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 8009bda:	4b1e      	ldr	r3, [pc, #120]	@ (8009c54 <BMP280_calc_temperature+0x80>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	10da      	asrs	r2, r3, #3
 8009be4:	4b1c      	ldr	r3, [pc, #112]	@ (8009c58 <BMP280_calc_temperature+0x84>)
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	4a1a      	ldr	r2, [pc, #104]	@ (8009c58 <BMP280_calc_temperature+0x84>)
 8009bee:	2102      	movs	r1, #2
 8009bf0:	5e52      	ldrsh	r2, [r2, r1]
 8009bf2:	4353      	muls	r3, r2
 8009bf4:	12db      	asrs	r3, r3, #11
 8009bf6:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	111b      	asrs	r3, r3, #4
 8009bfc:	4a16      	ldr	r2, [pc, #88]	@ (8009c58 <BMP280_calc_temperature+0x84>)
 8009bfe:	8812      	ldrh	r2, [r2, #0]
 8009c00:	1a9b      	subs	r3, r3, r2
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	1112      	asrs	r2, r2, #4
 8009c06:	4914      	ldr	r1, [pc, #80]	@ (8009c58 <BMP280_calc_temperature+0x84>)
 8009c08:	8809      	ldrh	r1, [r1, #0]
 8009c0a:	1a52      	subs	r2, r2, r1
 8009c0c:	4353      	muls	r3, r2
 8009c0e:	131b      	asrs	r3, r3, #12
 8009c10:	4a11      	ldr	r2, [pc, #68]	@ (8009c58 <BMP280_calc_temperature+0x84>)
 8009c12:	2104      	movs	r1, #4
 8009c14:	5e52      	ldrsh	r2, [r2, r1]
 8009c16:	4353      	muls	r3, r2
 8009c18:	139b      	asrs	r3, r3, #14
 8009c1a:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	18d2      	adds	r2, r2, r3
 8009c22:	4b0e      	ldr	r3, [pc, #56]	@ (8009c5c <BMP280_calc_temperature+0x88>)
 8009c24:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 8009c26:	4b0d      	ldr	r3, [pc, #52]	@ (8009c5c <BMP280_calc_temperature+0x88>)
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	0013      	movs	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	189b      	adds	r3, r3, r2
 8009c30:	3380      	adds	r3, #128	@ 0x80
 8009c32:	121b      	asrs	r3, r3, #8
 8009c34:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 8009c36:	68b8      	ldr	r0, [r7, #8]
 8009c38:	f7f7 fcca 	bl	80015d0 <__aeabi_i2f>
 8009c3c:	1c03      	adds	r3, r0, #0
 8009c3e:	4908      	ldr	r1, [pc, #32]	@ (8009c60 <BMP280_calc_temperature+0x8c>)
 8009c40:	1c18      	adds	r0, r3, #0
 8009c42:	f7f6 ffc7 	bl	8000bd4 <__aeabi_fdiv>
 8009c46:	1c03      	adds	r3, r0, #0
 8009c48:	607b      	str	r3, [r7, #4]
  return airTemp;
 8009c4a:	687b      	ldr	r3, [r7, #4]
}
 8009c4c:	1c18      	adds	r0, r3, #0
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	b006      	add	sp, #24
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	20000bf0 	.word	0x20000bf0
 8009c58:	20000bd4 	.word	0x20000bd4
 8009c5c:	20000bec 	.word	0x20000bec
 8009c60:	42c80000 	.word	0x42c80000

08009c64 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 8009c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8009da4 <BMP280_calc_pressure+0x140>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 8009c70:	4b4d      	ldr	r3, [pc, #308]	@ (8009da8 <BMP280_calc_pressure+0x144>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	105b      	asrs	r3, r3, #1
 8009c76:	4a4d      	ldr	r2, [pc, #308]	@ (8009dac <BMP280_calc_pressure+0x148>)
 8009c78:	4694      	mov	ip, r2
 8009c7a:	4463      	add	r3, ip
 8009c7c:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	109b      	asrs	r3, r3, #2
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	1092      	asrs	r2, r2, #2
 8009c86:	4353      	muls	r3, r2
 8009c88:	12db      	asrs	r3, r3, #11
 8009c8a:	4a49      	ldr	r2, [pc, #292]	@ (8009db0 <BMP280_calc_pressure+0x14c>)
 8009c8c:	2110      	movs	r1, #16
 8009c8e:	5e52      	ldrsh	r2, [r2, r1]
 8009c90:	4353      	muls	r3, r2
 8009c92:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 8009c94:	4b46      	ldr	r3, [pc, #280]	@ (8009db0 <BMP280_calc_pressure+0x14c>)
 8009c96:	220e      	movs	r2, #14
 8009c98:	5e9b      	ldrsh	r3, [r3, r2]
 8009c9a:	001a      	movs	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	4353      	muls	r3, r2
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	18d3      	adds	r3, r2, r3
 8009ca6:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	109a      	asrs	r2, r3, #2
 8009cac:	4b40      	ldr	r3, [pc, #256]	@ (8009db0 <BMP280_calc_pressure+0x14c>)
 8009cae:	210c      	movs	r1, #12
 8009cb0:	5e5b      	ldrsh	r3, [r3, r1]
 8009cb2:	041b      	lsls	r3, r3, #16
 8009cb4:	18d3      	adds	r3, r2, r3
 8009cb6:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 8009cb8:	4b3d      	ldr	r3, [pc, #244]	@ (8009db0 <BMP280_calc_pressure+0x14c>)
 8009cba:	220a      	movs	r2, #10
 8009cbc:	5e9b      	ldrsh	r3, [r3, r2]
 8009cbe:	0019      	movs	r1, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	109b      	asrs	r3, r3, #2
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	1092      	asrs	r2, r2, #2
 8009cc8:	4353      	muls	r3, r2
 8009cca:	135b      	asrs	r3, r3, #13
 8009ccc:	434b      	muls	r3, r1
 8009cce:	10da      	asrs	r2, r3, #3
 8009cd0:	4b37      	ldr	r3, [pc, #220]	@ (8009db0 <BMP280_calc_pressure+0x14c>)
 8009cd2:	2108      	movs	r1, #8
 8009cd4:	5e5b      	ldrsh	r3, [r3, r1]
 8009cd6:	0019      	movs	r1, r3
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	434b      	muls	r3, r1
 8009cdc:	105b      	asrs	r3, r3, #1
 8009cde:	18d3      	adds	r3, r2, r3
 8009ce0:	149b      	asrs	r3, r3, #18
 8009ce2:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2280      	movs	r2, #128	@ 0x80
 8009ce8:	0212      	lsls	r2, r2, #8
 8009cea:	4694      	mov	ip, r2
 8009cec:	4463      	add	r3, ip
 8009cee:	4a30      	ldr	r2, [pc, #192]	@ (8009db0 <BMP280_calc_pressure+0x14c>)
 8009cf0:	88d2      	ldrh	r2, [r2, #6]
 8009cf2:	4353      	muls	r3, r2
 8009cf4:	13db      	asrs	r3, r3, #15
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <BMP280_calc_pressure+0x9e>
    return 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e04b      	b.n	8009d9a <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	2280      	movs	r2, #128	@ 0x80
 8009d06:	0352      	lsls	r2, r2, #13
 8009d08:	1ad2      	subs	r2, r2, r3
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	131b      	asrs	r3, r3, #12
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	001a      	movs	r2, r3
 8009d12:	4b28      	ldr	r3, [pc, #160]	@ (8009db4 <BMP280_calc_pressure+0x150>)
 8009d14:	4353      	muls	r3, r2
 8009d16:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	db09      	blt.n	8009d32 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	0011      	movs	r1, r2
 8009d26:	0018      	movs	r0, r3
 8009d28:	f7f6 fa3c 	bl	80001a4 <__udivsi3>
 8009d2c:	0003      	movs	r3, r0
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	e007      	b.n	8009d42 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	0019      	movs	r1, r3
 8009d36:	6978      	ldr	r0, [r7, #20]
 8009d38:	f7f6 fa34 	bl	80001a4 <__udivsi3>
 8009d3c:	0003      	movs	r3, r0
 8009d3e:	005b      	lsls	r3, r3, #1
 8009d40:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 8009d42:	4b1b      	ldr	r3, [pc, #108]	@ (8009db0 <BMP280_calc_pressure+0x14c>)
 8009d44:	2216      	movs	r2, #22
 8009d46:	5e9b      	ldrsh	r3, [r3, r2]
 8009d48:	0019      	movs	r1, r3
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	08db      	lsrs	r3, r3, #3
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	08d2      	lsrs	r2, r2, #3
 8009d52:	4353      	muls	r3, r2
 8009d54:	0b5b      	lsrs	r3, r3, #13
 8009d56:	434b      	muls	r3, r1
 8009d58:	131b      	asrs	r3, r3, #12
 8009d5a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	089b      	lsrs	r3, r3, #2
 8009d60:	001a      	movs	r2, r3
 8009d62:	4b13      	ldr	r3, [pc, #76]	@ (8009db0 <BMP280_calc_pressure+0x14c>)
 8009d64:	2114      	movs	r1, #20
 8009d66:	5e5b      	ldrsh	r3, [r3, r1]
 8009d68:	4353      	muls	r3, r2
 8009d6a:	135b      	asrs	r3, r3, #13
 8009d6c:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	18d3      	adds	r3, r2, r3
 8009d74:	4a0e      	ldr	r2, [pc, #56]	@ (8009db0 <BMP280_calc_pressure+0x14c>)
 8009d76:	2112      	movs	r1, #18
 8009d78:	5e52      	ldrsh	r2, [r2, r1]
 8009d7a:	189b      	adds	r3, r3, r2
 8009d7c:	111a      	asrs	r2, r3, #4
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	18d3      	adds	r3, r2, r3
 8009d82:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 8009d84:	6978      	ldr	r0, [r7, #20]
 8009d86:	f7f7 fc6f 	bl	8001668 <__aeabi_ui2f>
 8009d8a:	1c03      	adds	r3, r0, #0
 8009d8c:	490a      	ldr	r1, [pc, #40]	@ (8009db8 <BMP280_calc_pressure+0x154>)
 8009d8e:	1c18      	adds	r0, r3, #0
 8009d90:	f7f6 ff20 	bl	8000bd4 <__aeabi_fdiv>
 8009d94:	1c03      	adds	r3, r0, #0
 8009d96:	607b      	str	r3, [r7, #4]
  return airhPa;
 8009d98:	687b      	ldr	r3, [r7, #4]
}
 8009d9a:	1c18      	adds	r0, r3, #0
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	b006      	add	sp, #24
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	46c0      	nop			@ (mov r8, r8)
 8009da4:	20000bf4 	.word	0x20000bf4
 8009da8:	20000bec 	.word	0x20000bec
 8009dac:	ffff0600 	.word	0xffff0600
 8009db0:	20000bd4 	.word	0x20000bd4
 8009db4:	00000c35 	.word	0x00000c35
 8009db8:	42c80000 	.word	0x42c80000

08009dbc <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 8009dbc:	b5b0      	push	{r4, r5, r7, lr}
 8009dbe:	b088      	sub	sp, #32
 8009dc0:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 8009dc2:	4b97      	ldr	r3, [pc, #604]	@ (800a020 <BMP_Upkeep+0x264>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	f007 fcf0 	bl	80117ac <TimestampIsReached>
 8009dcc:	0003      	movs	r3, r0
 8009dce:	001a      	movs	r2, r3
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	4053      	eors	r3, r2
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <BMP_Upkeep+0x24>
    return BMPState;
 8009dda:	4b92      	ldr	r3, [pc, #584]	@ (800a024 <BMP_Upkeep+0x268>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	e11b      	b.n	800a018 <BMP_Upkeep+0x25c>
  }
  switch(BMPState) {
 8009de0:	4b90      	ldr	r3, [pc, #576]	@ (800a024 <BMP_Upkeep+0x268>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b09      	cmp	r3, #9
 8009de6:	d900      	bls.n	8009dea <BMP_Upkeep+0x2e>
 8009de8:	e101      	b.n	8009fee <BMP_Upkeep+0x232>
 8009dea:	009a      	lsls	r2, r3, #2
 8009dec:	4b8e      	ldr	r3, [pc, #568]	@ (800a028 <BMP_Upkeep+0x26c>)
 8009dee:	18d3      	adds	r3, r2, r3
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 8009df4:	4a8d      	ldr	r2, [pc, #564]	@ (800a02c <BMP_Upkeep+0x270>)
 8009df6:	4b8e      	ldr	r3, [pc, #568]	@ (800a030 <BMP_Upkeep+0x274>)
 8009df8:	0019      	movs	r1, r3
 8009dfa:	2003      	movs	r0, #3
 8009dfc:	f007 fd2c 	bl	8011858 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 8009e00:	f008 f976 	bl	80120f0 <HAL_GetTick>
 8009e04:	0003      	movs	r3, r0
 8009e06:	4a8b      	ldr	r2, [pc, #556]	@ (800a034 <BMP_Upkeep+0x278>)
 8009e08:	189a      	adds	r2, r3, r2
 8009e0a:	4b85      	ldr	r3, [pc, #532]	@ (800a020 <BMP_Upkeep+0x264>)
 8009e0c:	601a      	str	r2, [r3, #0]
    break;
 8009e0e:	e101      	b.n	800a014 <BMP_Upkeep+0x258>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 8009e10:	f001 fe8e 	bl	800bb30 <getSensorLock>
 8009e14:	1e03      	subs	r3, r0, #0
 8009e16:	d000      	beq.n	8009e1a <BMP_Upkeep+0x5e>
 8009e18:	e0f5      	b.n	800a006 <BMP_Upkeep+0x24a>
      break;
    }
    BMP280_reset();
 8009e1a:	f7ff fb7d 	bl	8009518 <BMP280_reset>
    BMPState = BMP_SET_CONFIG;
 8009e1e:	4b81      	ldr	r3, [pc, #516]	@ (800a024 <BMP_Upkeep+0x268>)
 8009e20:	2201      	movs	r2, #1
 8009e22:	701a      	strb	r2, [r3, #0]
    break;
 8009e24:	e0f6      	b.n	800a014 <BMP_Upkeep+0x258>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 8009e26:	f001 fe83 	bl	800bb30 <getSensorLock>
 8009e2a:	1e03      	subs	r3, r0, #0
 8009e2c:	d000      	beq.n	8009e30 <BMP_Upkeep+0x74>
 8009e2e:	e0ec      	b.n	800a00a <BMP_Upkeep+0x24e>
      break;
    }
    setSensorLock(BMP280);
 8009e30:	2004      	movs	r0, #4
 8009e32:	f001 fe6d 	bl	800bb10 <setSensorLock>
    HAL_Delay(10); // wait for defered DMA transfers
 8009e36:	200a      	movs	r0, #10
 8009e38:	f008 f964 	bl	8012104 <HAL_Delay>
    if (BMP280_set_config()) {
 8009e3c:	f7ff fda0 	bl	8009980 <BMP280_set_config>
 8009e40:	1e03      	subs	r3, r0, #0
 8009e42:	d003      	beq.n	8009e4c <BMP_Upkeep+0x90>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8009e44:	4b77      	ldr	r3, [pc, #476]	@ (800a024 <BMP_Upkeep+0x268>)
 8009e46:	2202      	movs	r2, #2
 8009e48:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
     }
  break;
 8009e4a:	e0e3      	b.n	800a014 <BMP_Upkeep+0x258>
      BMPState = BMP_STATE_INIT;
 8009e4c:	4b75      	ldr	r3, [pc, #468]	@ (800a024 <BMP_Upkeep+0x268>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	701a      	strb	r2, [r3, #0]
  break;
 8009e52:	e0df      	b.n	800a014 <BMP_Upkeep+0x258>

  case BMP_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != BMP280)) {
 8009e54:	f001 fe6c 	bl	800bb30 <getSensorLock>
 8009e58:	1e03      	subs	r3, r0, #0
 8009e5a:	d035      	beq.n	8009ec8 <BMP_Upkeep+0x10c>
 8009e5c:	f001 fe68 	bl	800bb30 <getSensorLock>
 8009e60:	0003      	movs	r3, r0
 8009e62:	2b04      	cmp	r3, #4
 8009e64:	d030      	beq.n	8009ec8 <BMP_Upkeep+0x10c>
      uint8_t locktype = getSensorLock();
 8009e66:	1dfc      	adds	r4, r7, #7
 8009e68:	f001 fe62 	bl	800bb30 <getSensorLock>
 8009e6c:	0003      	movs	r3, r0
 8009e6e:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 8009e70:	1dfb      	adds	r3, r7, #7
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d019      	beq.n	8009eac <BMP_Upkeep+0xf0>
 8009e78:	1dfb      	adds	r3, r7, #7
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d013      	beq.n	8009ea8 <BMP_Upkeep+0xec>
 8009e80:	1dfb      	adds	r3, r7, #7
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d00d      	beq.n	8009ea4 <BMP_Upkeep+0xe8>
 8009e88:	1dfb      	adds	r3, r7, #7
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	d007      	beq.n	8009ea0 <BMP_Upkeep+0xe4>
 8009e90:	1dfb      	adds	r3, r7, #7
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	d101      	bne.n	8009e9c <BMP_Upkeep+0xe0>
 8009e98:	4b67      	ldr	r3, [pc, #412]	@ (800a038 <BMP_Upkeep+0x27c>)
 8009e9a:	e008      	b.n	8009eae <BMP_Upkeep+0xf2>
 8009e9c:	4b67      	ldr	r3, [pc, #412]	@ (800a03c <BMP_Upkeep+0x280>)
 8009e9e:	e006      	b.n	8009eae <BMP_Upkeep+0xf2>
 8009ea0:	4b67      	ldr	r3, [pc, #412]	@ (800a040 <BMP_Upkeep+0x284>)
 8009ea2:	e004      	b.n	8009eae <BMP_Upkeep+0xf2>
 8009ea4:	4b67      	ldr	r3, [pc, #412]	@ (800a044 <BMP_Upkeep+0x288>)
 8009ea6:	e002      	b.n	8009eae <BMP_Upkeep+0xf2>
 8009ea8:	4b67      	ldr	r3, [pc, #412]	@ (800a048 <BMP_Upkeep+0x28c>)
 8009eaa:	e000      	b.n	8009eae <BMP_Upkeep+0xf2>
 8009eac:	4b67      	ldr	r3, [pc, #412]	@ (800a04c <BMP_Upkeep+0x290>)
 8009eae:	4a68      	ldr	r2, [pc, #416]	@ (800a050 <BMP_Upkeep+0x294>)
 8009eb0:	495f      	ldr	r1, [pc, #380]	@ (800a030 <BMP_Upkeep+0x274>)
 8009eb2:	2003      	movs	r0, #3
 8009eb4:	f007 fcd0 	bl	8011858 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 8009eb8:	f008 f91a 	bl	80120f0 <HAL_GetTick>
 8009ebc:	0003      	movs	r3, r0
 8009ebe:	3361      	adds	r3, #97	@ 0x61
 8009ec0:	001a      	movs	r2, r3
 8009ec2:	4b57      	ldr	r3, [pc, #348]	@ (800a020 <BMP_Upkeep+0x264>)
 8009ec4:	601a      	str	r2, [r3, #0]
      break;
 8009ec6:	e0a5      	b.n	800a014 <BMP_Upkeep+0x258>
    }
    if (getSensorLock() == FREE) {
 8009ec8:	f001 fe32 	bl	800bb30 <getSensorLock>
 8009ecc:	1e03      	subs	r3, r0, #0
 8009ece:	d105      	bne.n	8009edc <BMP_Upkeep+0x120>
      HAL_Delay(10);
 8009ed0:	200a      	movs	r0, #10
 8009ed2:	f008 f917 	bl	8012104 <HAL_Delay>
      setSensorLock(BMP280);
 8009ed6:	2004      	movs	r0, #4
 8009ed8:	f001 fe1a 	bl	800bb10 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 8009edc:	f7ff fd74 	bl	80099c8 <BMP280_set_mode>
 8009ee0:	1e03      	subs	r3, r0, #0
 8009ee2:	d003      	beq.n	8009eec <BMP_Upkeep+0x130>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8009ee4:	4b4f      	ldr	r3, [pc, #316]	@ (800a024 <BMP_Upkeep+0x268>)
 8009ee6:	2205      	movs	r2, #5
 8009ee8:	701a      	strb	r2, [r3, #0]
    }
    else {
      Error("Error while setting BMP280 to forced mode");
      BMPState = BMP_STATE_INIT ;
    }
    break;
 8009eea:	e093      	b.n	800a014 <BMP_Upkeep+0x258>
      Error("Error while setting BMP280 to forced mode");
 8009eec:	4a59      	ldr	r2, [pc, #356]	@ (800a054 <BMP_Upkeep+0x298>)
 8009eee:	4b5a      	ldr	r3, [pc, #360]	@ (800a058 <BMP_Upkeep+0x29c>)
 8009ef0:	0019      	movs	r1, r3
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	f007 fcb0 	bl	8011858 <CreateLine>
      BMPState = BMP_STATE_INIT ;
 8009ef8:	4b4a      	ldr	r3, [pc, #296]	@ (800a024 <BMP_Upkeep+0x268>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	701a      	strb	r2, [r3, #0]
    break;
 8009efe:	e089      	b.n	800a014 <BMP_Upkeep+0x258>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (BMP280_get_measurement_values()) {
 8009f00:	f7ff fde2 	bl	8009ac8 <BMP280_get_measurement_values>
 8009f04:	1e03      	subs	r3, r0, #0
 8009f06:	d006      	beq.n	8009f16 <BMP_Upkeep+0x15a>
      setSensorLock(FREE);
 8009f08:	2000      	movs	r0, #0
 8009f0a:	f001 fe01 	bl	800bb10 <setSensorLock>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 8009f0e:	4b45      	ldr	r3, [pc, #276]	@ (800a024 <BMP_Upkeep+0x268>)
 8009f10:	2203      	movs	r2, #3
 8009f12:	701a      	strb	r2, [r3, #0]
    }
    else {
      BMPState = BMP_STATE_INIT;
      Error("BMP280 Error during reading measurement results array");
    }
  break;
 8009f14:	e07e      	b.n	800a014 <BMP_Upkeep+0x258>
      BMPState = BMP_STATE_INIT;
 8009f16:	4b43      	ldr	r3, [pc, #268]	@ (800a024 <BMP_Upkeep+0x268>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	701a      	strb	r2, [r3, #0]
      Error("BMP280 Error during reading measurement results array");
 8009f1c:	4a4f      	ldr	r2, [pc, #316]	@ (800a05c <BMP_Upkeep+0x2a0>)
 8009f1e:	4b4e      	ldr	r3, [pc, #312]	@ (800a058 <BMP_Upkeep+0x29c>)
 8009f20:	0019      	movs	r1, r3
 8009f22:	2001      	movs	r0, #1
 8009f24:	f007 fc98 	bl	8011858 <CreateLine>
  break;
 8009f28:	e074      	b.n	800a014 <BMP_Upkeep+0x258>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 8009f2a:	f7ff fe53 	bl	8009bd4 <BMP280_calc_temperature>
 8009f2e:	1c03      	adds	r3, r0, #0
 8009f30:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 8009f32:	f7ff fe97 	bl	8009c64 <BMP280_calc_pressure>
 8009f36:	1c03      	adds	r3, r0, #0
 8009f38:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 8009f3a:	4949      	ldr	r1, [pc, #292]	@ (800a060 <BMP_Upkeep+0x2a4>)
 8009f3c:	68b8      	ldr	r0, [r7, #8]
 8009f3e:	f7f6 fb0b 	bl	8000558 <__aeabi_fcmpgt>
 8009f42:	1e03      	subs	r3, r0, #0
 8009f44:	d025      	beq.n	8009f92 <BMP_Upkeep+0x1d6>
 8009f46:	4947      	ldr	r1, [pc, #284]	@ (800a064 <BMP_Upkeep+0x2a8>)
 8009f48:	68b8      	ldr	r0, [r7, #8]
 8009f4a:	f7f6 faf1 	bl	8000530 <__aeabi_fcmplt>
 8009f4e:	1e03      	subs	r3, r0, #0
 8009f50:	d01f      	beq.n	8009f92 <BMP_Upkeep+0x1d6>
      sethPa(airhpa);
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	1c18      	adds	r0, r3, #0
 8009f56:	f7fa fb3d 	bl	80045d4 <sethPa>
      Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7f9 fa82 	bl	8003464 <__aeabi_f2d>
 8009f60:	0004      	movs	r4, r0
 8009f62:	000d      	movs	r5, r1
 8009f64:	68b8      	ldr	r0, [r7, #8]
 8009f66:	f7f9 fa7d 	bl	8003464 <__aeabi_f2d>
 8009f6a:	0002      	movs	r2, r0
 8009f6c:	000b      	movs	r3, r1
 8009f6e:	483e      	ldr	r0, [pc, #248]	@ (800a068 <BMP_Upkeep+0x2ac>)
 8009f70:	493e      	ldr	r1, [pc, #248]	@ (800a06c <BMP_Upkeep+0x2b0>)
 8009f72:	9202      	str	r2, [sp, #8]
 8009f74:	9303      	str	r3, [sp, #12]
 8009f76:	9400      	str	r4, [sp, #0]
 8009f78:	9501      	str	r5, [sp, #4]
 8009f7a:	0002      	movs	r2, r0
 8009f7c:	2002      	movs	r0, #2
 8009f7e:	f007 fc6b 	bl	8011858 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 60000;
 8009f82:	f008 f8b5 	bl	80120f0 <HAL_GetTick>
 8009f86:	0003      	movs	r3, r0
 8009f88:	4a39      	ldr	r2, [pc, #228]	@ (800a070 <BMP_Upkeep+0x2b4>)
 8009f8a:	189a      	adds	r2, r3, r2
 8009f8c:	4b24      	ldr	r3, [pc, #144]	@ (800a020 <BMP_Upkeep+0x264>)
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	e00d      	b.n	8009fae <BMP_Upkeep+0x1f2>
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 8009f92:	4a38      	ldr	r2, [pc, #224]	@ (800a074 <BMP_Upkeep+0x2b8>)
 8009f94:	4b30      	ldr	r3, [pc, #192]	@ (800a058 <BMP_Upkeep+0x29c>)
 8009f96:	0019      	movs	r1, r3
 8009f98:	2001      	movs	r0, #1
 8009f9a:	f007 fc5d 	bl	8011858 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 2000;
 8009f9e:	f008 f8a7 	bl	80120f0 <HAL_GetTick>
 8009fa2:	0003      	movs	r3, r0
 8009fa4:	22fa      	movs	r2, #250	@ 0xfa
 8009fa6:	00d2      	lsls	r2, r2, #3
 8009fa8:	189a      	adds	r2, r3, r2
 8009faa:	4b1d      	ldr	r3, [pc, #116]	@ (800a020 <BMP_Upkeep+0x264>)
 8009fac:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 8009fae:	4b1d      	ldr	r3, [pc, #116]	@ (800a024 <BMP_Upkeep+0x268>)
 8009fb0:	2208      	movs	r2, #8
 8009fb2:	701a      	strb	r2, [r3, #0]
    break;
 8009fb4:	e02e      	b.n	800a014 <BMP_Upkeep+0x258>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 8009fb6:	4b1b      	ldr	r3, [pc, #108]	@ (800a024 <BMP_Upkeep+0x268>)
 8009fb8:	2209      	movs	r2, #9
 8009fba:	701a      	strb	r2, [r3, #0]
    break;
 8009fbc:	e02a      	b.n	800a014 <BMP_Upkeep+0x258>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 8009fbe:	f001 fdb7 	bl	800bb30 <getSensorLock>
 8009fc2:	1e03      	subs	r3, r0, #0
 8009fc4:	d123      	bne.n	800a00e <BMP_Upkeep+0x252>
      break;
    }
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 8009fc6:	f7ff fd53 	bl	8009a70 <BMP280_get_mode>
 8009fca:	0003      	movs	r3, r0
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d103      	bne.n	8009fd8 <BMP_Upkeep+0x21c>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 8009fd0:	4b14      	ldr	r3, [pc, #80]	@ (800a024 <BMP_Upkeep+0x268>)
 8009fd2:	2205      	movs	r2, #5
 8009fd4:	701a      	strb	r2, [r3, #0]
 8009fd6:	e002      	b.n	8009fde <BMP_Upkeep+0x222>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 8009fd8:	4b12      	ldr	r3, [pc, #72]	@ (800a024 <BMP_Upkeep+0x268>)
 8009fda:	2202      	movs	r2, #2
 8009fdc:	701a      	strb	r2, [r3, #0]
    }
    BMP280TimeStamp = HAL_GetTick() + 23;
 8009fde:	f008 f887 	bl	80120f0 <HAL_GetTick>
 8009fe2:	0003      	movs	r3, r0
 8009fe4:	3317      	adds	r3, #23
 8009fe6:	001a      	movs	r2, r3
 8009fe8:	4b0d      	ldr	r3, [pc, #52]	@ (800a020 <BMP_Upkeep+0x264>)
 8009fea:	601a      	str	r2, [r3, #0]
    break;
 8009fec:	e012      	b.n	800a014 <BMP_Upkeep+0x258>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 8009fee:	4b0d      	ldr	r3, [pc, #52]	@ (800a024 <BMP_Upkeep+0x268>)
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != BMP280) {
 8009ff4:	f001 fd9c 	bl	800bb30 <getSensorLock>
 8009ff8:	0003      	movs	r3, r0
 8009ffa:	2b04      	cmp	r3, #4
 8009ffc:	d009      	beq.n	800a012 <BMP_Upkeep+0x256>
      setSensorLock(FREE);
 8009ffe:	2000      	movs	r0, #0
 800a000:	f001 fd86 	bl	800bb10 <setSensorLock>
    }
    break;
 800a004:	e005      	b.n	800a012 <BMP_Upkeep+0x256>
      break;
 800a006:	46c0      	nop			@ (mov r8, r8)
 800a008:	e004      	b.n	800a014 <BMP_Upkeep+0x258>
      break;
 800a00a:	46c0      	nop			@ (mov r8, r8)
 800a00c:	e002      	b.n	800a014 <BMP_Upkeep+0x258>
      break;
 800a00e:	46c0      	nop			@ (mov r8, r8)
 800a010:	e000      	b.n	800a014 <BMP_Upkeep+0x258>
    break;
 800a012:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800a014:	4b03      	ldr	r3, [pc, #12]	@ (800a024 <BMP_Upkeep+0x268>)
 800a016:	781b      	ldrb	r3, [r3, #0]
}
 800a018:	0018      	movs	r0, r3
 800a01a:	46bd      	mov	sp, r7
 800a01c:	b004      	add	sp, #16
 800a01e:	bdb0      	pop	{r4, r5, r7, pc}
 800a020:	20000bf8 	.word	0x20000bf8
 800a024:	20000096 	.word	0x20000096
 800a028:	0802b00c 	.word	0x0802b00c
 800a02c:	08029764 	.word	0x08029764
 800a030:	08029334 	.word	0x08029334
 800a034:	002f9b80 	.word	0x002f9b80
 800a038:	080297a0 	.word	0x080297a0
 800a03c:	080297a8 	.word	0x080297a8
 800a040:	080297b0 	.word	0x080297b0
 800a044:	080297b8 	.word	0x080297b8
 800a048:	080297c0 	.word	0x080297c0
 800a04c:	080297c8 	.word	0x080297c8
 800a050:	080297d0 	.word	0x080297d0
 800a054:	080297f8 	.word	0x080297f8
 800a058:	08029624 	.word	0x08029624
 800a05c:	08029824 	.word	0x08029824
 800a060:	44548000 	.word	0x44548000
 800a064:	44898000 	.word	0x44898000
 800a068:	0802985c 	.word	0x0802985c
 800a06c:	08029314 	.word	0x08029314
 800a070:	0000ea60 	.word	0x0000ea60
 800a074:	08029894 	.word	0x08029894

0800a078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a07e:	4b10      	ldr	r3, [pc, #64]	@ (800a0c0 <MX_DMA_Init+0x48>)
 800a080:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a082:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c0 <MX_DMA_Init+0x48>)
 800a084:	2101      	movs	r1, #1
 800a086:	430a      	orrs	r2, r1
 800a088:	631a      	str	r2, [r3, #48]	@ 0x30
 800a08a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c0 <MX_DMA_Init+0x48>)
 800a08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a08e:	2201      	movs	r2, #1
 800a090:	4013      	ands	r3, r2
 800a092:	607b      	str	r3, [r7, #4]
 800a094:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800a096:	2200      	movs	r2, #0
 800a098:	2100      	movs	r1, #0
 800a09a:	200a      	movs	r0, #10
 800a09c:	f008 fccc 	bl	8012a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800a0a0:	200a      	movs	r0, #10
 800a0a2:	f008 fcde 	bl	8012a62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2103      	movs	r1, #3
 800a0aa:	200b      	movs	r0, #11
 800a0ac:	f008 fcc4 	bl	8012a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800a0b0:	200b      	movs	r0, #11
 800a0b2:	f008 fcd6 	bl	8012a62 <HAL_NVIC_EnableIRQ>

}
 800a0b6:	46c0      	nop			@ (mov r8, r8)
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	b002      	add	sp, #8
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	46c0      	nop			@ (mov r8, r8)
 800a0c0:	40021000 	.word	0x40021000

0800a0c4 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800a0c4:	b590      	push	{r4, r7, lr}
 800a0c6:	b087      	sub	sp, #28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	1dbb      	adds	r3, r7, #6
 800a0d0:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800a0d2:	4b17      	ldr	r3, [pc, #92]	@ (800a130 <WriteUint8ArrayEeprom+0x6c>)
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800a0d8:	f009 f840 	bl	801315c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800a0dc:	2316      	movs	r3, #22
 800a0de:	18fb      	adds	r3, r7, r3
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	801a      	strh	r2, [r3, #0]
 800a0e4:	e015      	b.n	800a112 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800a0e6:	4b12      	ldr	r3, [pc, #72]	@ (800a130 <WriteUint8ArrayEeprom+0x6c>)
 800a0e8:	6819      	ldr	r1, [r3, #0]
 800a0ea:	2416      	movs	r4, #22
 800a0ec:	193b      	adds	r3, r7, r4
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	18d3      	adds	r3, r2, r3
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	001a      	movs	r2, r3
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	f009 f897 	bl	801322c <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800a0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a130 <WriteUint8ArrayEeprom+0x6c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	4b0a      	ldr	r3, [pc, #40]	@ (800a130 <WriteUint8ArrayEeprom+0x6c>)
 800a106:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800a108:	193b      	adds	r3, r7, r4
 800a10a:	881a      	ldrh	r2, [r3, #0]
 800a10c:	193b      	adds	r3, r7, r4
 800a10e:	3201      	adds	r2, #1
 800a110:	801a      	strh	r2, [r3, #0]
 800a112:	2316      	movs	r3, #22
 800a114:	18fa      	adds	r2, r7, r3
 800a116:	1dbb      	adds	r3, r7, #6
 800a118:	8812      	ldrh	r2, [r2, #0]
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d3e2      	bcc.n	800a0e6 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800a120:	f009 f84a 	bl	80131b8 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800a124:	4b02      	ldr	r3, [pc, #8]	@ (800a130 <WriteUint8ArrayEeprom+0x6c>)
 800a126:	681b      	ldr	r3, [r3, #0]
}
 800a128:	0018      	movs	r0, r3
 800a12a:	46bd      	mov	sp, r7
 800a12c:	b007      	add	sp, #28
 800a12e:	bd90      	pop	{r4, r7, pc}
 800a130:	20000c1c 	.word	0x20000c1c

0800a134 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	0019      	movs	r1, r3
 800a140:	1dbb      	adds	r3, r7, #6
 800a142:	801a      	strh	r2, [r3, #0]
 800a144:	1d3b      	adds	r3, r7, #4
 800a146:	1c0a      	adds	r2, r1, #0
 800a148:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800a14a:	1dba      	adds	r2, r7, #6
 800a14c:	1d3b      	adds	r3, r7, #4
 800a14e:	8812      	ldrh	r2, [r2, #0]
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	429a      	cmp	r2, r3
 800a154:	d806      	bhi.n	800a164 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800a156:	1dbb      	adds	r3, r7, #6
 800a158:	881a      	ldrh	r2, [r3, #0]
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	0018      	movs	r0, r3
 800a160:	f7ff ffb0 	bl	800a0c4 <WriteUint8ArrayEeprom>
    }
}
 800a164:	46c0      	nop			@ (mov r8, r8)
 800a166:	46bd      	mov	sp, r7
 800a168:	b004      	add	sp, #16
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	1dbb      	adds	r3, r7, #6
 800a178:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800a17a:	2316      	movs	r3, #22
 800a17c:	18fb      	adds	r3, r7, r3
 800a17e:	2200      	movs	r2, #0
 800a180:	801a      	strh	r2, [r3, #0]
 800a182:	e010      	b.n	800a1a6 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800a184:	2016      	movs	r0, #22
 800a186:	183b      	adds	r3, r7, r0
 800a188:	881a      	ldrh	r2, [r3, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	18d3      	adds	r3, r2, r3
 800a18e:	0019      	movs	r1, r3
 800a190:	183b      	adds	r3, r7, r0
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	18d3      	adds	r3, r2, r3
 800a198:	780a      	ldrb	r2, [r1, #0]
 800a19a:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800a19c:	183b      	adds	r3, r7, r0
 800a19e:	881a      	ldrh	r2, [r3, #0]
 800a1a0:	183b      	adds	r3, r7, r0
 800a1a2:	3201      	adds	r2, #1
 800a1a4:	801a      	strh	r2, [r3, #0]
 800a1a6:	2316      	movs	r3, #22
 800a1a8:	18fa      	adds	r2, r7, r3
 800a1aa:	1dbb      	adds	r3, r7, #6
 800a1ac:	8812      	ldrh	r2, [r2, #0]
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d3e7      	bcc.n	800a184 <ReadUint8ArrayEEprom+0x18>
    }
}
 800a1b4:	46c0      	nop			@ (mov r8, r8)
 800a1b6:	46c0      	nop			@ (mov r8, r8)
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	b006      	add	sp, #24
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800a1be:	b590      	push	{r4, r7, lr}
 800a1c0:	b085      	sub	sp, #20
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	000a      	movs	r2, r1
 800a1c8:	1cbb      	adds	r3, r7, #2
 800a1ca:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800a1cc:	f008 ffc6 	bl	801315c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800a1d0:	230e      	movs	r3, #14
 800a1d2:	18fb      	adds	r3, r7, r3
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	801a      	strh	r2, [r3, #0]
 800a1d8:	e00c      	b.n	800a1f4 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800a1da:	240e      	movs	r4, #14
 800a1dc:	193b      	adds	r3, r7, r4
 800a1de:	881a      	ldrh	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	18d3      	adds	r3, r2, r3
 800a1e4:	0018      	movs	r0, r3
 800a1e6:	f008 fff5 	bl	80131d4 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800a1ea:	193b      	adds	r3, r7, r4
 800a1ec:	193a      	adds	r2, r7, r4
 800a1ee:	8812      	ldrh	r2, [r2, #0]
 800a1f0:	3204      	adds	r2, #4
 800a1f2:	801a      	strh	r2, [r3, #0]
 800a1f4:	230e      	movs	r3, #14
 800a1f6:	18fa      	adds	r2, r7, r3
 800a1f8:	1cbb      	adds	r3, r7, #2
 800a1fa:	8812      	ldrh	r2, [r2, #0]
 800a1fc:	881b      	ldrh	r3, [r3, #0]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d3eb      	bcc.n	800a1da <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800a202:	f008 ffd9 	bl	80131b8 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800a206:	46c0      	nop			@ (mov r8, r8)
 800a208:	46bd      	mov	sp, r7
 800a20a:	b005      	add	sp, #20
 800a20c:	bd90      	pop	{r4, r7, pc}
	...

0800a210 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a220:	d901      	bls.n	800a226 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800a222:	237f      	movs	r3, #127	@ 0x7f
 800a224:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800a226:	2017      	movs	r0, #23
 800a228:	183b      	adds	r3, r7, r0
 800a22a:	490d      	ldr	r1, [pc, #52]	@ (800a260 <accessLUT10log10+0x50>)
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	188a      	adds	r2, r1, r2
 800a230:	7812      	ldrb	r2, [r2, #0]
 800a232:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800a234:	0001      	movs	r1, r0
 800a236:	187b      	adds	r3, r7, r1
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	2206      	movs	r2, #6
 800a23c:	4113      	asrs	r3, r2
 800a23e:	001a      	movs	r2, r3
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800a244:	187b      	adds	r3, r7, r1
 800a246:	781a      	ldrb	r2, [r3, #0]
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2106      	movs	r1, #6
 800a24e:	408b      	lsls	r3, r1
 800a250:	1ad2      	subs	r2, r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	601a      	str	r2, [r3, #0]
}
 800a256:	46c0      	nop			@ (mov r8, r8)
 800a258:	46bd      	mov	sp, r7
 800a25a:	b006      	add	sp, #24
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	46c0      	nop			@ (mov r8, r8)
 800a260:	0802b034 	.word	0x0802b034

0800a264 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800a264:	b5b0      	push	{r4, r5, r7, lr}
 800a266:	b090      	sub	sp, #64	@ 0x40
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6138      	str	r0, [r7, #16]
 800a26c:	6179      	str	r1, [r7, #20]
 800a26e:	60fa      	str	r2, [r7, #12]
 800a270:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800a272:	2308      	movs	r3, #8
 800a274:	001a      	movs	r2, r3
 800a276:	3a20      	subs	r2, #32
 800a278:	2a00      	cmp	r2, #0
 800a27a:	db03      	blt.n	800a284 <efficient10log10+0x20>
 800a27c:	2101      	movs	r1, #1
 800a27e:	4091      	lsls	r1, r2
 800a280:	000d      	movs	r5, r1
 800a282:	e008      	b.n	800a296 <efficient10log10+0x32>
 800a284:	2220      	movs	r2, #32
 800a286:	1ad2      	subs	r2, r2, r3
 800a288:	2101      	movs	r1, #1
 800a28a:	40d1      	lsrs	r1, r2
 800a28c:	000a      	movs	r2, r1
 800a28e:	2100      	movs	r1, #0
 800a290:	4099      	lsls	r1, r3
 800a292:	000d      	movs	r5, r1
 800a294:	4315      	orrs	r5, r2
 800a296:	2201      	movs	r2, #1
 800a298:	409a      	lsls	r2, r3
 800a29a:	0014      	movs	r4, r2
 800a29c:	2201      	movs	r2, #1
 800a29e:	4252      	negs	r2, r2
 800a2a0:	17d3      	asrs	r3, r2, #31
 800a2a2:	1912      	adds	r2, r2, r4
 800a2a4:	416b      	adcs	r3, r5
 800a2a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800a2a8:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800a2aa:	2336      	movs	r3, #54	@ 0x36
 800a2ac:	2208      	movs	r2, #8
 800a2ae:	189b      	adds	r3, r3, r2
 800a2b0:	19db      	adds	r3, r3, r7
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800a2b6:	e017      	b.n	800a2e8 <efficient10log10+0x84>
    {
        P = P >> 1;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	07db      	lsls	r3, r3, #31
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	0852      	lsrs	r2, r2, #1
 800a2c0:	603a      	str	r2, [r7, #0]
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	431a      	orrs	r2, r3
 800a2c6:	603a      	str	r2, [r7, #0]
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	085b      	lsrs	r3, r3, #1
 800a2cc:	607b      	str	r3, [r7, #4]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	687c      	ldr	r4, [r7, #4]
 800a2d2:	613b      	str	r3, [r7, #16]
 800a2d4:	617c      	str	r4, [r7, #20]
        bShift++;
 800a2d6:	2136      	movs	r1, #54	@ 0x36
 800a2d8:	2008      	movs	r0, #8
 800a2da:	180b      	adds	r3, r1, r0
 800a2dc:	19db      	adds	r3, r3, r7
 800a2de:	881a      	ldrh	r2, [r3, #0]
 800a2e0:	180b      	adds	r3, r1, r0
 800a2e2:	19db      	adds	r3, r3, r7
 800a2e4:	3201      	adds	r2, #1
 800a2e6:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d8e3      	bhi.n	800a2b8 <efficient10log10+0x54>
 800a2f0:	697a      	ldr	r2, [r7, #20]
 800a2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d103      	bne.n	800a300 <efficient10log10+0x9c>
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d8db      	bhi.n	800a2b8 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	2308      	movs	r3, #8
 800a304:	3b01      	subs	r3, #1
 800a306:	2101      	movs	r1, #1
 800a308:	4099      	lsls	r1, r3
 800a30a:	000b      	movs	r3, r1
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800a318:	231c      	movs	r3, #28
 800a31a:	2408      	movs	r4, #8
 800a31c:	191b      	adds	r3, r3, r4
 800a31e:	19da      	adds	r2, r3, r7
 800a320:	2320      	movs	r3, #32
 800a322:	191b      	adds	r3, r3, r4
 800a324:	19d9      	adds	r1, r3, r7
 800a326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a328:	0018      	movs	r0, r3
 800a32a:	f7ff ff71 	bl	800a210 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800a32e:	2215      	movs	r2, #21
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800a334:	2036      	movs	r0, #54	@ 0x36
 800a336:	1902      	adds	r2, r0, r4
 800a338:	19d2      	adds	r2, r2, r7
 800a33a:	8812      	ldrh	r2, [r2, #0]
 800a33c:	2103      	movs	r1, #3
 800a33e:	434a      	muls	r2, r1
 800a340:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800a342:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800a344:	0021      	movs	r1, r4
 800a346:	1843      	adds	r3, r0, r1
 800a348:	19db      	adds	r3, r3, r7
 800a34a:	881b      	ldrh	r3, [r3, #0]
 800a34c:	2201      	movs	r2, #1
 800a34e:	4353      	muls	r3, r2
 800a350:	2203      	movs	r2, #3
 800a352:	4113      	asrs	r3, r2
 800a354:	001a      	movs	r2, r3
 800a356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a358:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800a35a:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800a35c:	2314      	movs	r3, #20
 800a35e:	185b      	adds	r3, r3, r1
 800a360:	19da      	adds	r2, r3, r7
 800a362:	2318      	movs	r3, #24
 800a364:	185b      	adds	r3, r3, r1
 800a366:	19db      	adds	r3, r3, r7
 800a368:	0011      	movs	r1, r2
 800a36a:	0018      	movs	r0, r3
 800a36c:	f000 f80a 	bl	800a384 <correctIntFracNumber>
    integerPart[0] = intPart;
 800a370:	6a3a      	ldr	r2, [r7, #32]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800a376:	69fa      	ldr	r2, [r7, #28]
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	601a      	str	r2, [r3, #0]
}
 800a37c:	46c0      	nop			@ (mov r8, r8)
 800a37e:	46bd      	mov	sp, r7
 800a380:	b010      	add	sp, #64	@ 0x40
 800a382:	bdb0      	pop	{r4, r5, r7, pc}

0800a384 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800a38e:	e00a      	b.n	800a3a6 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	1c5a      	adds	r2, r3, #1
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3b0a      	subs	r3, #10
 800a3a0:	001a      	movs	r2, r3
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b09      	cmp	r3, #9
 800a3ac:	dcf0      	bgt.n	800a390 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800a3ae:	e00a      	b.n	800a3c6 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	1e5a      	subs	r2, r3, #1
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	330a      	adds	r3, #10
 800a3c0:	001a      	movs	r2, r3
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3309      	adds	r3, #9
 800a3cc:	dbf0      	blt.n	800a3b0 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	da0f      	bge.n	800a3f6 <correctIntFracNumber+0x72>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	dd0b      	ble.n	800a3f6 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	3b0a      	subs	r3, #10
 800a3ee:	001a      	movs	r2, r3
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800a3f4:	e012      	b.n	800a41c <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	dd0e      	ble.n	800a41c <correctIntFracNumber+0x98>
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	da0a      	bge.n	800a41c <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	1e5a      	subs	r2, r3, #1
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	330a      	adds	r3, #10
 800a416:	001a      	movs	r2, r3
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	601a      	str	r2, [r3, #0]
}
 800a41c:	46c0      	nop			@ (mov r8, r8)
 800a41e:	46bd      	mov	sp, r7
 800a420:	b002      	add	sp, #8
 800a422:	bd80      	pop	{r7, pc}

0800a424 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800a424:	b590      	push	{r4, r7, lr}
 800a426:	b08b      	sub	sp, #44	@ 0x2c
 800a428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a42a:	2414      	movs	r4, #20
 800a42c:	193b      	adds	r3, r7, r4
 800a42e:	0018      	movs	r0, r3
 800a430:	2314      	movs	r3, #20
 800a432:	001a      	movs	r2, r3
 800a434:	2100      	movs	r1, #0
 800a436:	f019 fb6d 	bl	8023b14 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a43a:	4b8a      	ldr	r3, [pc, #552]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a43c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a43e:	4b89      	ldr	r3, [pc, #548]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a440:	2104      	movs	r1, #4
 800a442:	430a      	orrs	r2, r1
 800a444:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a446:	4b87      	ldr	r3, [pc, #540]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44a:	2204      	movs	r2, #4
 800a44c:	4013      	ands	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]
 800a450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a452:	4b84      	ldr	r3, [pc, #528]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a456:	4b83      	ldr	r3, [pc, #524]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a458:	2180      	movs	r1, #128	@ 0x80
 800a45a:	430a      	orrs	r2, r1
 800a45c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a45e:	4b81      	ldr	r3, [pc, #516]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a462:	2280      	movs	r2, #128	@ 0x80
 800a464:	4013      	ands	r3, r2
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a46a:	4b7e      	ldr	r3, [pc, #504]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a46c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a46e:	4b7d      	ldr	r3, [pc, #500]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a470:	2101      	movs	r1, #1
 800a472:	430a      	orrs	r2, r1
 800a474:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a476:	4b7b      	ldr	r3, [pc, #492]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a47a:	2201      	movs	r2, #1
 800a47c:	4013      	ands	r3, r2
 800a47e:	60bb      	str	r3, [r7, #8]
 800a480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a482:	4b78      	ldr	r3, [pc, #480]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a486:	4b77      	ldr	r3, [pc, #476]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a488:	2102      	movs	r1, #2
 800a48a:	430a      	orrs	r2, r1
 800a48c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a48e:	4b75      	ldr	r3, [pc, #468]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a492:	2202      	movs	r2, #2
 800a494:	4013      	ands	r3, r2
 800a496:	607b      	str	r3, [r7, #4]
 800a498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a49a:	4b72      	ldr	r3, [pc, #456]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a49e:	4b71      	ldr	r3, [pc, #452]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a4a0:	2108      	movs	r1, #8
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a4a6:	4b6f      	ldr	r3, [pc, #444]	@ (800a664 <MX_GPIO_Init+0x240>)
 800a4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4aa:	2208      	movs	r2, #8
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800a4b2:	4b6d      	ldr	r3, [pc, #436]	@ (800a668 <MX_GPIO_Init+0x244>)
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	0018      	movs	r0, r3
 800a4ba:	f009 f8aa 	bl	8013612 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800a4be:	4b6a      	ldr	r3, [pc, #424]	@ (800a668 <MX_GPIO_Init+0x244>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2102      	movs	r1, #2
 800a4c4:	0018      	movs	r0, r3
 800a4c6:	f009 f8a4 	bl	8013612 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800a4ca:	4968      	ldr	r1, [pc, #416]	@ (800a66c <MX_GPIO_Init+0x248>)
 800a4cc:	4b68      	ldr	r3, [pc, #416]	@ (800a670 <MX_GPIO_Init+0x24c>)
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	0018      	movs	r0, r3
 800a4d2:	f009 f89e 	bl	8013612 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800a4d6:	2380      	movs	r3, #128	@ 0x80
 800a4d8:	011b      	lsls	r3, r3, #4
 800a4da:	4866      	ldr	r0, [pc, #408]	@ (800a674 <MX_GPIO_Init+0x250>)
 800a4dc:	2201      	movs	r2, #1
 800a4de:	0019      	movs	r1, r3
 800a4e0:	f009 f897 	bl	8013612 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800a4e4:	2380      	movs	r3, #128	@ 0x80
 800a4e6:	015b      	lsls	r3, r3, #5
 800a4e8:	4862      	ldr	r0, [pc, #392]	@ (800a674 <MX_GPIO_Init+0x250>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	0019      	movs	r1, r3
 800a4ee:	f009 f890 	bl	8013612 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800a4f2:	193b      	adds	r3, r7, r4
 800a4f4:	4a60      	ldr	r2, [pc, #384]	@ (800a678 <MX_GPIO_Init+0x254>)
 800a4f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a4f8:	193b      	adds	r3, r7, r4
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4fe:	193b      	adds	r3, r7, r4
 800a500:	2200      	movs	r2, #0
 800a502:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a504:	193b      	adds	r3, r7, r4
 800a506:	4a5b      	ldr	r2, [pc, #364]	@ (800a674 <MX_GPIO_Init+0x250>)
 800a508:	0019      	movs	r1, r3
 800a50a:	0010      	movs	r0, r2
 800a50c:	f008 fee6 	bl	80132dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800a510:	193b      	adds	r3, r7, r4
 800a512:	2203      	movs	r2, #3
 800a514:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a516:	193b      	adds	r3, r7, r4
 800a518:	2201      	movs	r2, #1
 800a51a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a51c:	193b      	adds	r3, r7, r4
 800a51e:	2200      	movs	r2, #0
 800a520:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a522:	193b      	adds	r3, r7, r4
 800a524:	2200      	movs	r2, #0
 800a526:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a528:	193b      	adds	r3, r7, r4
 800a52a:	4a4f      	ldr	r2, [pc, #316]	@ (800a668 <MX_GPIO_Init+0x244>)
 800a52c:	0019      	movs	r1, r3
 800a52e:	0010      	movs	r0, r2
 800a530:	f008 fed4 	bl	80132dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800a534:	193b      	adds	r3, r7, r4
 800a536:	2270      	movs	r2, #112	@ 0x70
 800a538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a53a:	193b      	adds	r3, r7, r4
 800a53c:	2203      	movs	r2, #3
 800a53e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a540:	193b      	adds	r3, r7, r4
 800a542:	2200      	movs	r2, #0
 800a544:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a546:	193a      	adds	r2, r7, r4
 800a548:	23a0      	movs	r3, #160	@ 0xa0
 800a54a:	05db      	lsls	r3, r3, #23
 800a54c:	0011      	movs	r1, r2
 800a54e:	0018      	movs	r0, r3
 800a550:	f008 fec4 	bl	80132dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800a554:	193b      	adds	r3, r7, r4
 800a556:	22c0      	movs	r2, #192	@ 0xc0
 800a558:	0052      	lsls	r2, r2, #1
 800a55a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a55c:	193b      	adds	r3, r7, r4
 800a55e:	2200      	movs	r2, #0
 800a560:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a562:	193b      	adds	r3, r7, r4
 800a564:	2200      	movs	r2, #0
 800a566:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a568:	193a      	adds	r2, r7, r4
 800a56a:	23a0      	movs	r3, #160	@ 0xa0
 800a56c:	05db      	lsls	r3, r3, #23
 800a56e:	0011      	movs	r1, r2
 800a570:	0018      	movs	r0, r3
 800a572:	f008 feb3 	bl	80132dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800a576:	193b      	adds	r3, r7, r4
 800a578:	4a3c      	ldr	r2, [pc, #240]	@ (800a66c <MX_GPIO_Init+0x248>)
 800a57a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a57c:	193b      	adds	r3, r7, r4
 800a57e:	2201      	movs	r2, #1
 800a580:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a582:	193b      	adds	r3, r7, r4
 800a584:	2200      	movs	r2, #0
 800a586:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a588:	193b      	adds	r3, r7, r4
 800a58a:	2200      	movs	r2, #0
 800a58c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a58e:	193b      	adds	r3, r7, r4
 800a590:	4a37      	ldr	r2, [pc, #220]	@ (800a670 <MX_GPIO_Init+0x24c>)
 800a592:	0019      	movs	r1, r3
 800a594:	0010      	movs	r0, r2
 800a596:	f008 fea1 	bl	80132dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800a59a:	193b      	adds	r3, r7, r4
 800a59c:	4a37      	ldr	r2, [pc, #220]	@ (800a67c <MX_GPIO_Init+0x258>)
 800a59e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a5a0:	193b      	adds	r3, r7, r4
 800a5a2:	2203      	movs	r2, #3
 800a5a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5a6:	193b      	adds	r3, r7, r4
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5ac:	193b      	adds	r3, r7, r4
 800a5ae:	4a30      	ldr	r2, [pc, #192]	@ (800a670 <MX_GPIO_Init+0x24c>)
 800a5b0:	0019      	movs	r1, r3
 800a5b2:	0010      	movs	r0, r2
 800a5b4:	f008 fe92 	bl	80132dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800a5b8:	0021      	movs	r1, r4
 800a5ba:	187b      	adds	r3, r7, r1
 800a5bc:	2280      	movs	r2, #128	@ 0x80
 800a5be:	0092      	lsls	r2, r2, #2
 800a5c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5c2:	000c      	movs	r4, r1
 800a5c4:	193b      	adds	r3, r7, r4
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ca:	193b      	adds	r3, r7, r4
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800a5d0:	193b      	adds	r3, r7, r4
 800a5d2:	4a28      	ldr	r2, [pc, #160]	@ (800a674 <MX_GPIO_Init+0x250>)
 800a5d4:	0019      	movs	r1, r3
 800a5d6:	0010      	movs	r0, r2
 800a5d8:	f008 fe80 	bl	80132dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800a5dc:	193b      	adds	r3, r7, r4
 800a5de:	2280      	movs	r2, #128	@ 0x80
 800a5e0:	0212      	lsls	r2, r2, #8
 800a5e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a5e4:	193b      	adds	r3, r7, r4
 800a5e6:	2288      	movs	r2, #136	@ 0x88
 800a5e8:	0352      	lsls	r2, r2, #13
 800a5ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ec:	193b      	adds	r3, r7, r4
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800a5f2:	193a      	adds	r2, r7, r4
 800a5f4:	23a0      	movs	r3, #160	@ 0xa0
 800a5f6:	05db      	lsls	r3, r3, #23
 800a5f8:	0011      	movs	r1, r2
 800a5fa:	0018      	movs	r0, r3
 800a5fc:	f008 fe6e 	bl	80132dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800a600:	0021      	movs	r1, r4
 800a602:	187b      	adds	r3, r7, r1
 800a604:	22c0      	movs	r2, #192	@ 0xc0
 800a606:	0152      	lsls	r2, r2, #5
 800a608:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a60a:	000c      	movs	r4, r1
 800a60c:	193b      	adds	r3, r7, r4
 800a60e:	2201      	movs	r2, #1
 800a610:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a612:	193b      	adds	r3, r7, r4
 800a614:	2200      	movs	r2, #0
 800a616:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a618:	193b      	adds	r3, r7, r4
 800a61a:	2200      	movs	r2, #0
 800a61c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a61e:	193b      	adds	r3, r7, r4
 800a620:	4a14      	ldr	r2, [pc, #80]	@ (800a674 <MX_GPIO_Init+0x250>)
 800a622:	0019      	movs	r1, r3
 800a624:	0010      	movs	r0, r2
 800a626:	f008 fe59 	bl	80132dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800a62a:	0021      	movs	r1, r4
 800a62c:	187b      	adds	r3, r7, r1
 800a62e:	2204      	movs	r2, #4
 800a630:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a632:	187b      	adds	r3, r7, r1
 800a634:	2200      	movs	r2, #0
 800a636:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a638:	187b      	adds	r3, r7, r1
 800a63a:	2201      	movs	r2, #1
 800a63c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800a63e:	187b      	adds	r3, r7, r1
 800a640:	4a0f      	ldr	r2, [pc, #60]	@ (800a680 <MX_GPIO_Init+0x25c>)
 800a642:	0019      	movs	r1, r3
 800a644:	0010      	movs	r0, r2
 800a646:	f008 fe49 	bl	80132dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800a64a:	2200      	movs	r2, #0
 800a64c:	2100      	movs	r1, #0
 800a64e:	2007      	movs	r0, #7
 800a650:	f008 f9f2 	bl	8012a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a654:	2007      	movs	r0, #7
 800a656:	f008 fa04 	bl	8012a62 <HAL_NVIC_EnableIRQ>

}
 800a65a:	46c0      	nop			@ (mov r8, r8)
 800a65c:	46bd      	mov	sp, r7
 800a65e:	b00b      	add	sp, #44	@ 0x2c
 800a660:	bd90      	pop	{r4, r7, pc}
 800a662:	46c0      	nop			@ (mov r8, r8)
 800a664:	40021000 	.word	0x40021000
 800a668:	50001c00 	.word	0x50001c00
 800a66c:	00000301 	.word	0x00000301
 800a670:	50000400 	.word	0x50000400
 800a674:	50000800 	.word	0x50000800
 800a678:	0000200c 	.word	0x0000200c
 800a67c:	0000403e 	.word	0x0000403e
 800a680:	50000c00 	.word	0x50000c00

0800a684 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2100      	movs	r1, #0
 800a692:	0018      	movs	r0, r3
 800a694:	f00f fe30 	bl	801a2f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2108      	movs	r1, #8
 800a69c:	0018      	movs	r0, r3
 800a69e:	f00f fe2b 	bl	801a2f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	210c      	movs	r1, #12
 800a6a6:	0018      	movs	r0, r3
 800a6a8:	f00f fe26 	bl	801a2f8 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800a6ac:	2380      	movs	r3, #128	@ 0x80
 800a6ae:	05db      	lsls	r3, r3, #23
 800a6b0:	22fa      	movs	r2, #250	@ 0xfa
 800a6b2:	0112      	lsls	r2, r2, #4
 800a6b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800a6b6:	2380      	movs	r3, #128	@ 0x80
 800a6b8:	05db      	lsls	r3, r3, #23
 800a6ba:	22fa      	movs	r2, #250	@ 0xfa
 800a6bc:	0112      	lsls	r2, r2, #4
 800a6be:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800a6c0:	2380      	movs	r3, #128	@ 0x80
 800a6c2:	05db      	lsls	r3, r3, #23
 800a6c4:	22fa      	movs	r2, #250	@ 0xfa
 800a6c6:	0112      	lsls	r2, r2, #4
 800a6c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800a6ca:	2380      	movs	r3, #128	@ 0x80
 800a6cc:	05db      	lsls	r3, r3, #23
 800a6ce:	22fa      	movs	r2, #250	@ 0xfa
 800a6d0:	0112      	lsls	r2, r2, #4
 800a6d2:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	0018      	movs	r0, r3
 800a6da:	f00f fe0d 	bl	801a2f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2104      	movs	r1, #4
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	f00f fe08 	bl	801a2f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	2108      	movs	r1, #8
 800a6ec:	0018      	movs	r0, r3
 800a6ee:	f00f fe03 	bl	801a2f8 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800a6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <GPIO_InitPWMLEDs+0x98>)
 800a6f4:	22fa      	movs	r2, #250	@ 0xfa
 800a6f6:	0112      	lsls	r2, r2, #4
 800a6f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800a6fa:	4b08      	ldr	r3, [pc, #32]	@ (800a71c <GPIO_InitPWMLEDs+0x98>)
 800a6fc:	22fa      	movs	r2, #250	@ 0xfa
 800a6fe:	0112      	lsls	r2, r2, #4
 800a700:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800a702:	4b06      	ldr	r3, [pc, #24]	@ (800a71c <GPIO_InitPWMLEDs+0x98>)
 800a704:	22fa      	movs	r2, #250	@ 0xfa
 800a706:	0112      	lsls	r2, r2, #4
 800a708:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800a70a:	4b04      	ldr	r3, [pc, #16]	@ (800a71c <GPIO_InitPWMLEDs+0x98>)
 800a70c:	22fa      	movs	r2, #250	@ 0xfa
 800a70e:	0112      	lsls	r2, r2, #4
 800a710:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a712:	46c0      	nop			@ (mov r8, r8)
 800a714:	46bd      	mov	sp, r7
 800a716:	b002      	add	sp, #8
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	46c0      	nop			@ (mov r8, r8)
 800a71c:	40000400 	.word	0x40000400

0800a720 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a726:	1d3b      	adds	r3, r7, #4
 800a728:	0018      	movs	r0, r3
 800a72a:	2314      	movs	r3, #20
 800a72c:	001a      	movs	r2, r3
 800a72e:	2100      	movs	r1, #0
 800a730:	f019 f9f0 	bl	8023b14 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800a734:	1d3b      	adds	r3, r7, #4
 800a736:	2205      	movs	r2, #5
 800a738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a73a:	1d3b      	adds	r3, r7, #4
 800a73c:	2203      	movs	r2, #3
 800a73e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a740:	1d3b      	adds	r3, r7, #4
 800a742:	2200      	movs	r2, #0
 800a744:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a746:	1d3a      	adds	r2, r7, #4
 800a748:	23a0      	movs	r3, #160	@ 0xa0
 800a74a:	05db      	lsls	r3, r3, #23
 800a74c:	0011      	movs	r1, r2
 800a74e:	0018      	movs	r0, r3
 800a750:	f008 fdc4 	bl	80132dc <HAL_GPIO_Init>
}
 800a754:	46c0      	nop			@ (mov r8, r8)
 800a756:	46bd      	mov	sp, r7
 800a758:	b006      	add	sp, #24
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a760:	4b1b      	ldr	r3, [pc, #108]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a762:	4a1c      	ldr	r2, [pc, #112]	@ (800a7d4 <MX_I2C1_Init+0x78>)
 800a764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800a766:	4b1a      	ldr	r3, [pc, #104]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a768:	4a1b      	ldr	r2, [pc, #108]	@ (800a7d8 <MX_I2C1_Init+0x7c>)
 800a76a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a76c:	4b18      	ldr	r3, [pc, #96]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a76e:	2200      	movs	r2, #0
 800a770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a772:	4b17      	ldr	r3, [pc, #92]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a774:	2201      	movs	r2, #1
 800a776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a778:	4b15      	ldr	r3, [pc, #84]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a77e:	4b14      	ldr	r3, [pc, #80]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a780:	2200      	movs	r2, #0
 800a782:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a784:	4b12      	ldr	r3, [pc, #72]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a786:	2200      	movs	r2, #0
 800a788:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a78a:	4b11      	ldr	r3, [pc, #68]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a790:	4b0f      	ldr	r3, [pc, #60]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a792:	2200      	movs	r2, #0
 800a794:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a796:	4b0e      	ldr	r3, [pc, #56]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a798:	0018      	movs	r0, r3
 800a79a:	f008 ff73 	bl	8013684 <HAL_I2C_Init>
 800a79e:	1e03      	subs	r3, r0, #0
 800a7a0:	d001      	beq.n	800a7a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a7a2:	f000 fd83 	bl	800b2ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a7a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	0018      	movs	r0, r3
 800a7ac:	f00b fddc 	bl	8016368 <HAL_I2CEx_ConfigAnalogFilter>
 800a7b0:	1e03      	subs	r3, r0, #0
 800a7b2:	d001      	beq.n	800a7b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a7b4:	f000 fd7a 	bl	800b2ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a7b8:	4b05      	ldr	r3, [pc, #20]	@ (800a7d0 <MX_I2C1_Init+0x74>)
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f00b fe1f 	bl	8016400 <HAL_I2CEx_ConfigDigitalFilter>
 800a7c2:	1e03      	subs	r3, r0, #0
 800a7c4:	d001      	beq.n	800a7ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a7c6:	f000 fd71 	bl	800b2ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a7ca:	46c0      	nop			@ (mov r8, r8)
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20000c20 	.word	0x20000c20
 800a7d4:	40005400 	.word	0x40005400
 800a7d8:	00503d58 	.word	0x00503d58

0800a7dc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a7e0:	4b1b      	ldr	r3, [pc, #108]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a7e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a854 <MX_I2C2_Init+0x78>)
 800a7e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800a7e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a7e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a858 <MX_I2C2_Init+0x7c>)
 800a7ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a7ec:	4b18      	ldr	r3, [pc, #96]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a7f2:	4b17      	ldr	r3, [pc, #92]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a7f8:	4b15      	ldr	r3, [pc, #84]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a7fe:	4b14      	ldr	r3, [pc, #80]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a800:	2200      	movs	r2, #0
 800a802:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a804:	4b12      	ldr	r3, [pc, #72]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a806:	2200      	movs	r2, #0
 800a808:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a80a:	4b11      	ldr	r3, [pc, #68]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a810:	4b0f      	ldr	r3, [pc, #60]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a812:	2200      	movs	r2, #0
 800a814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a816:	4b0e      	ldr	r3, [pc, #56]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a818:	0018      	movs	r0, r3
 800a81a:	f008 ff33 	bl	8013684 <HAL_I2C_Init>
 800a81e:	1e03      	subs	r3, r0, #0
 800a820:	d001      	beq.n	800a826 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a822:	f000 fd43 	bl	800b2ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a826:	4b0a      	ldr	r3, [pc, #40]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a828:	2100      	movs	r1, #0
 800a82a:	0018      	movs	r0, r3
 800a82c:	f00b fd9c 	bl	8016368 <HAL_I2CEx_ConfigAnalogFilter>
 800a830:	1e03      	subs	r3, r0, #0
 800a832:	d001      	beq.n	800a838 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a834:	f000 fd3a 	bl	800b2ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a838:	4b05      	ldr	r3, [pc, #20]	@ (800a850 <MX_I2C2_Init+0x74>)
 800a83a:	2100      	movs	r1, #0
 800a83c:	0018      	movs	r0, r3
 800a83e:	f00b fddf 	bl	8016400 <HAL_I2CEx_ConfigDigitalFilter>
 800a842:	1e03      	subs	r3, r0, #0
 800a844:	d001      	beq.n	800a84a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a846:	f000 fd31 	bl	800b2ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a84a:	46c0      	nop			@ (mov r8, r8)
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	20000c74 	.word	0x20000c74
 800a854:	40005800 	.word	0x40005800
 800a858:	00503d58 	.word	0x00503d58

0800a85c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a85c:	b590      	push	{r4, r7, lr}
 800a85e:	b08b      	sub	sp, #44	@ 0x2c
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a864:	2414      	movs	r4, #20
 800a866:	193b      	adds	r3, r7, r4
 800a868:	0018      	movs	r0, r3
 800a86a:	2314      	movs	r3, #20
 800a86c:	001a      	movs	r2, r3
 800a86e:	2100      	movs	r1, #0
 800a870:	f019 f950 	bl	8023b14 <memset>
  if(i2cHandle->Instance==I2C1)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a5d      	ldr	r2, [pc, #372]	@ (800a9f0 <HAL_I2C_MspInit+0x194>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d000      	beq.n	800a880 <HAL_I2C_MspInit+0x24>
 800a87e:	e083      	b.n	800a988 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a880:	4b5c      	ldr	r3, [pc, #368]	@ (800a9f4 <HAL_I2C_MspInit+0x198>)
 800a882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a884:	4b5b      	ldr	r3, [pc, #364]	@ (800a9f4 <HAL_I2C_MspInit+0x198>)
 800a886:	2102      	movs	r1, #2
 800a888:	430a      	orrs	r2, r1
 800a88a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a88c:	4b59      	ldr	r3, [pc, #356]	@ (800a9f4 <HAL_I2C_MspInit+0x198>)
 800a88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a890:	2202      	movs	r2, #2
 800a892:	4013      	ands	r3, r2
 800a894:	613b      	str	r3, [r7, #16]
 800a896:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a898:	0021      	movs	r1, r4
 800a89a:	187b      	adds	r3, r7, r1
 800a89c:	22c0      	movs	r2, #192	@ 0xc0
 800a89e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a8a0:	187b      	adds	r3, r7, r1
 800a8a2:	2212      	movs	r2, #18
 800a8a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a6:	187b      	adds	r3, r7, r1
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8ac:	187b      	adds	r3, r7, r1
 800a8ae:	2203      	movs	r2, #3
 800a8b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800a8b2:	187b      	adds	r3, r7, r1
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8b8:	187b      	adds	r3, r7, r1
 800a8ba:	4a4f      	ldr	r2, [pc, #316]	@ (800a9f8 <HAL_I2C_MspInit+0x19c>)
 800a8bc:	0019      	movs	r1, r3
 800a8be:	0010      	movs	r0, r2
 800a8c0:	f008 fd0c 	bl	80132dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a8c4:	4b4b      	ldr	r3, [pc, #300]	@ (800a9f4 <HAL_I2C_MspInit+0x198>)
 800a8c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8c8:	4b4a      	ldr	r3, [pc, #296]	@ (800a9f4 <HAL_I2C_MspInit+0x198>)
 800a8ca:	2180      	movs	r1, #128	@ 0x80
 800a8cc:	0389      	lsls	r1, r1, #14
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800a8d2:	4b4a      	ldr	r3, [pc, #296]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a8d4:	4a4a      	ldr	r2, [pc, #296]	@ (800aa00 <HAL_I2C_MspInit+0x1a4>)
 800a8d6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800a8d8:	4b48      	ldr	r3, [pc, #288]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a8da:	2206      	movs	r2, #6
 800a8dc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a8de:	4b47      	ldr	r3, [pc, #284]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a8e4:	4b45      	ldr	r3, [pc, #276]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a8ea:	4b44      	ldr	r3, [pc, #272]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a8ec:	2280      	movs	r2, #128	@ 0x80
 800a8ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8f0:	4b42      	ldr	r3, [pc, #264]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8f6:	4b41      	ldr	r3, [pc, #260]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800a8fc:	4b3f      	ldr	r3, [pc, #252]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a902:	4b3e      	ldr	r3, [pc, #248]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a904:	2200      	movs	r2, #0
 800a906:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800a908:	4b3c      	ldr	r3, [pc, #240]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a90a:	0018      	movs	r0, r3
 800a90c:	f008 f8ca 	bl	8012aa4 <HAL_DMA_Init>
 800a910:	1e03      	subs	r3, r0, #0
 800a912:	d001      	beq.n	800a918 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800a914:	f000 fcca 	bl	800b2ac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a38      	ldr	r2, [pc, #224]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a91c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a91e:	4b37      	ldr	r3, [pc, #220]	@ (800a9fc <HAL_I2C_MspInit+0x1a0>)
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800a924:	4b37      	ldr	r3, [pc, #220]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a926:	4a38      	ldr	r2, [pc, #224]	@ (800aa08 <HAL_I2C_MspInit+0x1ac>)
 800a928:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800a92a:	4b36      	ldr	r3, [pc, #216]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a92c:	2206      	movs	r2, #6
 800a92e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a930:	4b34      	ldr	r3, [pc, #208]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a932:	2210      	movs	r2, #16
 800a934:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a936:	4b33      	ldr	r3, [pc, #204]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a938:	2200      	movs	r2, #0
 800a93a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a93c:	4b31      	ldr	r3, [pc, #196]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a93e:	2280      	movs	r2, #128	@ 0x80
 800a940:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a942:	4b30      	ldr	r3, [pc, #192]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a944:	2200      	movs	r2, #0
 800a946:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a948:	4b2e      	ldr	r3, [pc, #184]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800a94e:	4b2d      	ldr	r3, [pc, #180]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a950:	2200      	movs	r2, #0
 800a952:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a954:	4b2b      	ldr	r3, [pc, #172]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a956:	2200      	movs	r2, #0
 800a958:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800a95a:	4b2a      	ldr	r3, [pc, #168]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a95c:	0018      	movs	r0, r3
 800a95e:	f008 f8a1 	bl	8012aa4 <HAL_DMA_Init>
 800a962:	1e03      	subs	r3, r0, #0
 800a964:	d001      	beq.n	800a96a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800a966:	f000 fca1 	bl	800b2ac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4a25      	ldr	r2, [pc, #148]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a96e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a970:	4b24      	ldr	r3, [pc, #144]	@ (800aa04 <HAL_I2C_MspInit+0x1a8>)
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800a976:	2200      	movs	r2, #0
 800a978:	2100      	movs	r1, #0
 800a97a:	2017      	movs	r0, #23
 800a97c:	f008 f85c 	bl	8012a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800a980:	2017      	movs	r0, #23
 800a982:	f008 f86e 	bl	8012a62 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a986:	e02e      	b.n	800a9e6 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a1f      	ldr	r2, [pc, #124]	@ (800aa0c <HAL_I2C_MspInit+0x1b0>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d129      	bne.n	800a9e6 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a992:	4b18      	ldr	r3, [pc, #96]	@ (800a9f4 <HAL_I2C_MspInit+0x198>)
 800a994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a996:	4b17      	ldr	r3, [pc, #92]	@ (800a9f4 <HAL_I2C_MspInit+0x198>)
 800a998:	2102      	movs	r1, #2
 800a99a:	430a      	orrs	r2, r1
 800a99c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a99e:	4b15      	ldr	r3, [pc, #84]	@ (800a9f4 <HAL_I2C_MspInit+0x198>)
 800a9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a9aa:	2114      	movs	r1, #20
 800a9ac:	187b      	adds	r3, r7, r1
 800a9ae:	22c0      	movs	r2, #192	@ 0xc0
 800a9b0:	0112      	lsls	r2, r2, #4
 800a9b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a9b4:	187b      	adds	r3, r7, r1
 800a9b6:	2212      	movs	r2, #18
 800a9b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ba:	187b      	adds	r3, r7, r1
 800a9bc:	2200      	movs	r2, #0
 800a9be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9c0:	187b      	adds	r3, r7, r1
 800a9c2:	2203      	movs	r2, #3
 800a9c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800a9c6:	187b      	adds	r3, r7, r1
 800a9c8:	2206      	movs	r2, #6
 800a9ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9cc:	187b      	adds	r3, r7, r1
 800a9ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a9f8 <HAL_I2C_MspInit+0x19c>)
 800a9d0:	0019      	movs	r1, r3
 800a9d2:	0010      	movs	r0, r2
 800a9d4:	f008 fc82 	bl	80132dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a9d8:	4b06      	ldr	r3, [pc, #24]	@ (800a9f4 <HAL_I2C_MspInit+0x198>)
 800a9da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9dc:	4b05      	ldr	r3, [pc, #20]	@ (800a9f4 <HAL_I2C_MspInit+0x198>)
 800a9de:	2180      	movs	r1, #128	@ 0x80
 800a9e0:	03c9      	lsls	r1, r1, #15
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800a9e6:	46c0      	nop			@ (mov r8, r8)
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	b00b      	add	sp, #44	@ 0x2c
 800a9ec:	bd90      	pop	{r4, r7, pc}
 800a9ee:	46c0      	nop			@ (mov r8, r8)
 800a9f0:	40005400 	.word	0x40005400
 800a9f4:	40021000 	.word	0x40021000
 800a9f8:	50000400 	.word	0x50000400
 800a9fc:	20000cc8 	.word	0x20000cc8
 800aa00:	40020030 	.word	0x40020030
 800aa04:	20000d10 	.word	0x20000d10
 800aa08:	4002001c 	.word	0x4002001c
 800aa0c:	40005800 	.word	0x40005800

0800aa10 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800aa14:	4b10      	ldr	r3, [pc, #64]	@ (800aa58 <MX_I2S2_Init+0x48>)
 800aa16:	4a11      	ldr	r2, [pc, #68]	@ (800aa5c <MX_I2S2_Init+0x4c>)
 800aa18:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800aa1a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa58 <MX_I2S2_Init+0x48>)
 800aa1c:	22c0      	movs	r2, #192	@ 0xc0
 800aa1e:	0092      	lsls	r2, r2, #2
 800aa20:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800aa22:	4b0d      	ldr	r3, [pc, #52]	@ (800aa58 <MX_I2S2_Init+0x48>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800aa28:	4b0b      	ldr	r3, [pc, #44]	@ (800aa58 <MX_I2S2_Init+0x48>)
 800aa2a:	2203      	movs	r2, #3
 800aa2c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800aa2e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa58 <MX_I2S2_Init+0x48>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800aa34:	4b08      	ldr	r3, [pc, #32]	@ (800aa58 <MX_I2S2_Init+0x48>)
 800aa36:	22fa      	movs	r2, #250	@ 0xfa
 800aa38:	0192      	lsls	r2, r2, #6
 800aa3a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800aa3c:	4b06      	ldr	r3, [pc, #24]	@ (800aa58 <MX_I2S2_Init+0x48>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800aa42:	4b05      	ldr	r3, [pc, #20]	@ (800aa58 <MX_I2S2_Init+0x48>)
 800aa44:	0018      	movs	r0, r3
 800aa46:	f00b fd27 	bl	8016498 <HAL_I2S_Init>
 800aa4a:	1e03      	subs	r3, r0, #0
 800aa4c:	d001      	beq.n	800aa52 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800aa4e:	f000 fc2d 	bl	800b2ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800aa52:	46c0      	nop			@ (mov r8, r8)
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	20000d58 	.word	0x20000d58
 800aa5c:	40003800 	.word	0x40003800

0800aa60 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800aa60:	b590      	push	{r4, r7, lr}
 800aa62:	b089      	sub	sp, #36	@ 0x24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa68:	240c      	movs	r4, #12
 800aa6a:	193b      	adds	r3, r7, r4
 800aa6c:	0018      	movs	r0, r3
 800aa6e:	2314      	movs	r3, #20
 800aa70:	001a      	movs	r2, r3
 800aa72:	2100      	movs	r1, #0
 800aa74:	f019 f84e 	bl	8023b14 <memset>
  if(i2sHandle->Instance==SPI2)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a2d      	ldr	r2, [pc, #180]	@ (800ab34 <HAL_I2S_MspInit+0xd4>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d154      	bne.n	800ab2c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800aa82:	4b2d      	ldr	r3, [pc, #180]	@ (800ab38 <HAL_I2S_MspInit+0xd8>)
 800aa84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa86:	4b2c      	ldr	r3, [pc, #176]	@ (800ab38 <HAL_I2S_MspInit+0xd8>)
 800aa88:	2180      	movs	r1, #128	@ 0x80
 800aa8a:	01c9      	lsls	r1, r1, #7
 800aa8c:	430a      	orrs	r2, r1
 800aa8e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa90:	4b29      	ldr	r3, [pc, #164]	@ (800ab38 <HAL_I2S_MspInit+0xd8>)
 800aa92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa94:	4b28      	ldr	r3, [pc, #160]	@ (800ab38 <HAL_I2S_MspInit+0xd8>)
 800aa96:	2102      	movs	r1, #2
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800aa9c:	4b26      	ldr	r3, [pc, #152]	@ (800ab38 <HAL_I2S_MspInit+0xd8>)
 800aa9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	60bb      	str	r3, [r7, #8]
 800aaa6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800aaa8:	193b      	adds	r3, r7, r4
 800aaaa:	22b0      	movs	r2, #176	@ 0xb0
 800aaac:	0212      	lsls	r2, r2, #8
 800aaae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aab0:	0021      	movs	r1, r4
 800aab2:	187b      	adds	r3, r7, r1
 800aab4:	2202      	movs	r2, #2
 800aab6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aab8:	187b      	adds	r3, r7, r1
 800aaba:	2200      	movs	r2, #0
 800aabc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aabe:	187b      	adds	r3, r7, r1
 800aac0:	2200      	movs	r2, #0
 800aac2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800aac4:	187b      	adds	r3, r7, r1
 800aac6:	2200      	movs	r2, #0
 800aac8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aaca:	187b      	adds	r3, r7, r1
 800aacc:	4a1b      	ldr	r2, [pc, #108]	@ (800ab3c <HAL_I2S_MspInit+0xdc>)
 800aace:	0019      	movs	r1, r3
 800aad0:	0010      	movs	r0, r2
 800aad2:	f008 fc03 	bl	80132dc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800aad6:	4b1a      	ldr	r3, [pc, #104]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800aad8:	4a1a      	ldr	r2, [pc, #104]	@ (800ab44 <HAL_I2S_MspInit+0xe4>)
 800aada:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800aadc:	4b18      	ldr	r3, [pc, #96]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800aade:	2202      	movs	r2, #2
 800aae0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aae2:	4b17      	ldr	r3, [pc, #92]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aae8:	4b15      	ldr	r3, [pc, #84]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aaee:	4b14      	ldr	r3, [pc, #80]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800aaf0:	2280      	movs	r2, #128	@ 0x80
 800aaf2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800aaf4:	4b12      	ldr	r3, [pc, #72]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800aaf6:	2280      	movs	r2, #128	@ 0x80
 800aaf8:	0052      	lsls	r2, r2, #1
 800aafa:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800aafc:	4b10      	ldr	r3, [pc, #64]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800aafe:	2280      	movs	r2, #128	@ 0x80
 800ab00:	00d2      	lsls	r2, r2, #3
 800ab02:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800ab04:	4b0e      	ldr	r3, [pc, #56]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800ab06:	2220      	movs	r2, #32
 800ab08:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ab0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800ab10:	4b0b      	ldr	r3, [pc, #44]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800ab12:	0018      	movs	r0, r3
 800ab14:	f007 ffc6 	bl	8012aa4 <HAL_DMA_Init>
 800ab18:	1e03      	subs	r3, r0, #0
 800ab1a:	d001      	beq.n	800ab20 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800ab1c:	f000 fbc6 	bl	800b2ac <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a07      	ldr	r2, [pc, #28]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800ab24:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab26:	4b06      	ldr	r3, [pc, #24]	@ (800ab40 <HAL_I2S_MspInit+0xe0>)
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800ab2c:	46c0      	nop			@ (mov r8, r8)
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	b009      	add	sp, #36	@ 0x24
 800ab32:	bd90      	pop	{r4, r7, pc}
 800ab34:	40003800 	.word	0x40003800
 800ab38:	40021000 	.word	0x40021000
 800ab3c:	50000400 	.word	0x50000400
 800ab40:	20000d94 	.word	0x20000d94
 800ab44:	40020044 	.word	0x40020044

0800ab48 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	af00      	add	r7, sp, #0
  testDone = true;
 800ab4c:	4b14      	ldr	r3, [pc, #80]	@ (800aba0 <SetTestDone+0x58>)
 800ab4e:	2201      	movs	r2, #1
 800ab50:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800ab52:	23fa      	movs	r3, #250	@ 0xfa
 800ab54:	005b      	lsls	r3, r3, #1
 800ab56:	0018      	movs	r0, r3
 800ab58:	f007 fad4 	bl	8012104 <HAL_Delay>
  SetDBLED(false, false, true);
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	2100      	movs	r1, #0
 800ab60:	2000      	movs	r0, #0
 800ab62:	f005 fc45 	bl	80103f0 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800ab66:	4a0f      	ldr	r2, [pc, #60]	@ (800aba4 <SetTestDone+0x5c>)
 800ab68:	23fa      	movs	r3, #250	@ 0xfa
 800ab6a:	0119      	lsls	r1, r3, #4
 800ab6c:	23fa      	movs	r3, #250	@ 0xfa
 800ab6e:	011b      	lsls	r3, r3, #4
 800ab70:	0018      	movs	r0, r3
 800ab72:	f005 fc09 	bl	8010388 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800ab76:	4a0b      	ldr	r2, [pc, #44]	@ (800aba4 <SetTestDone+0x5c>)
 800ab78:	23fa      	movs	r3, #250	@ 0xfa
 800ab7a:	0119      	lsls	r1, r3, #4
 800ab7c:	23fa      	movs	r3, #250	@ 0xfa
 800ab7e:	011b      	lsls	r3, r3, #4
 800ab80:	0018      	movs	r0, r3
 800ab82:	f005 fc7f 	bl	8010484 <SetVocLED>
  HAL_Delay(500);
 800ab86:	23fa      	movs	r3, #250	@ 0xfa
 800ab88:	005b      	lsls	r3, r3, #1
 800ab8a:	0018      	movs	r0, r3
 800ab8c:	f007 faba 	bl	8012104 <HAL_Delay>
  SetLEDsOff();
 800ab90:	f005 fdb8 	bl	8010704 <SetLEDsOff>
  InitDone();
 800ab94:	f005 fb4c 	bl	8010230 <InitDone>
}
 800ab98:	46c0      	nop			@ (mov r8, r8)
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	46c0      	nop			@ (mov r8, r8)
 800aba0:	20000ddc 	.word	0x20000ddc
 800aba4:	00000bb8 	.word	0x00000bb8

0800aba8 <FlashLEDs>:

void FlashLEDs(){
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800abae:	1dfb      	adds	r3, r7, #7
 800abb0:	2200      	movs	r2, #0
 800abb2:	701a      	strb	r2, [r3, #0]
 800abb4:	e021      	b.n	800abfa <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800abb6:	2201      	movs	r2, #1
 800abb8:	2101      	movs	r1, #1
 800abba:	2001      	movs	r0, #1
 800abbc:	f005 fc18 	bl	80103f0 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800abc0:	4a12      	ldr	r2, [pc, #72]	@ (800ac0c <FlashLEDs+0x64>)
 800abc2:	23fa      	movs	r3, #250	@ 0xfa
 800abc4:	0119      	lsls	r1, r3, #4
 800abc6:	23fa      	movs	r3, #250	@ 0xfa
 800abc8:	011b      	lsls	r3, r3, #4
 800abca:	0018      	movs	r0, r3
 800abcc:	f005 fbdc 	bl	8010388 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800abd0:	4a0e      	ldr	r2, [pc, #56]	@ (800ac0c <FlashLEDs+0x64>)
 800abd2:	23fa      	movs	r3, #250	@ 0xfa
 800abd4:	0119      	lsls	r1, r3, #4
 800abd6:	23fa      	movs	r3, #250	@ 0xfa
 800abd8:	011b      	lsls	r3, r3, #4
 800abda:	0018      	movs	r0, r3
 800abdc:	f005 fc52 	bl	8010484 <SetVocLED>
    HAL_Delay(250);
 800abe0:	20fa      	movs	r0, #250	@ 0xfa
 800abe2:	f007 fa8f 	bl	8012104 <HAL_Delay>
    SetLEDsOff();
 800abe6:	f005 fd8d 	bl	8010704 <SetLEDsOff>
    HAL_Delay(250);
 800abea:	20fa      	movs	r0, #250	@ 0xfa
 800abec:	f007 fa8a 	bl	8012104 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 800abf0:	1dfb      	adds	r3, r7, #7
 800abf2:	781a      	ldrb	r2, [r3, #0]
 800abf4:	1dfb      	adds	r3, r7, #7
 800abf6:	3201      	adds	r2, #1
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	1dfb      	adds	r3, r7, #7
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d9d9      	bls.n	800abb6 <FlashLEDs+0xe>
  }
}
 800ac02:	46c0      	nop			@ (mov r8, r8)
 800ac04:	46c0      	nop			@ (mov r8, r8)
 800ac06:	46bd      	mov	sp, r7
 800ac08:	b002      	add	sp, #8
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	00000bb8 	.word	0x00000bb8

0800ac10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ac16:	f007 fa05 	bl	8012024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ac1a:	f000 f9f7 	bl	800b00c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ac1e:	f7ff fc01 	bl	800a424 <MX_GPIO_Init>
  MX_DMA_Init();
 800ac22:	f7ff fa29 	bl	800a078 <MX_DMA_Init>
  MX_I2C1_Init();
 800ac26:	f7ff fd99 	bl	800a75c <MX_I2C1_Init>
  MX_I2S2_Init();
 800ac2a:	f7ff fef1 	bl	800aa10 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800ac2e:	f006 fc25 	bl	801147c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800ac32:	f7ff fdd3 	bl	800a7dc <MX_I2C2_Init>
  MX_TIM2_Init();
 800ac36:	f006 fa19 	bl	801106c <MX_TIM2_Init>
  MX_TIM3_Init();
 800ac3a:	f006 fa8b 	bl	8011154 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800ac3e:	f006 fc4d 	bl	80114dc <MX_USART4_UART_Init>
  MX_ADC_Init();
 800ac42:	f7fd ff4d 	bl	8008ae0 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800ac46:	f015 fc51 	bl	80204ec <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800ac4a:	f001 fa99 	bl	800c180 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800ac4e:	f006 fbdf 	bl	8011410 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800ac52:	f006 fafd 	bl	8011250 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800ac56:	4ac7      	ldr	r2, [pc, #796]	@ (800af74 <main+0x364>)
 800ac58:	4bc7      	ldr	r3, [pc, #796]	@ (800af78 <main+0x368>)
 800ac5a:	0011      	movs	r1, r2
 800ac5c:	0018      	movs	r0, r3
 800ac5e:	f7ff fd11 	bl	800a684 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800ac62:	f006 fe7d 	bl	8011960 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800ac66:	f006 f889 	bl	8010d7c <Battery_Upkeep>
 800ac6a:	0003      	movs	r3, r0
 800ac6c:	001a      	movs	r2, r3
 800ac6e:	4bc3      	ldr	r3, [pc, #780]	@ (800af7c <main+0x36c>)
 800ac70:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800ac72:	4bc2      	ldr	r3, [pc, #776]	@ (800af7c <main+0x36c>)
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d113      	bne.n	800aca2 <main+0x92>
    SetAllREDLED();
 800ac7a:	f005 fd5f 	bl	801073c <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800ac7e:	f7fd f837 	bl	8007cf0 <ReadBatteryVoltage>
 800ac82:	1c03      	adds	r3, r0, #0
 800ac84:	1c18      	adds	r0, r3, #0
 800ac86:	f7f8 fbed 	bl	8003464 <__aeabi_f2d>
 800ac8a:	0002      	movs	r2, r0
 800ac8c:	000b      	movs	r3, r1
 800ac8e:	48bc      	ldr	r0, [pc, #752]	@ (800af80 <main+0x370>)
 800ac90:	49bc      	ldr	r1, [pc, #752]	@ (800af84 <main+0x374>)
 800ac92:	9200      	str	r2, [sp, #0]
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	0002      	movs	r2, r0
 800ac98:	2002      	movs	r0, #2
 800ac9a:	f006 fddd 	bl	8011858 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800ac9e:	f7fd fc4d 	bl	800853c <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800aca2:	f7fd f8fb 	bl	8007e9c <UserButton_Pressed>
 800aca6:	1e03      	subs	r3, r0, #0
 800aca8:	d004      	beq.n	800acb4 <main+0xa4>
    EnableESPProg();
 800acaa:	f015 fcef 	bl	802068c <EnableESPProg>
    ESP_Programming = true;
 800acae:	4bb6      	ldr	r3, [pc, #728]	@ (800af88 <main+0x378>)
 800acb0:	2201      	movs	r2, #1
 800acb2:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800acb4:	2003      	movs	r0, #3
 800acb6:	f006 fe39 	bl	801192c <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800acba:	49b4      	ldr	r1, [pc, #720]	@ (800af8c <main+0x37c>)
 800acbc:	4bb4      	ldr	r3, [pc, #720]	@ (800af90 <main+0x380>)
 800acbe:	2201      	movs	r2, #1
 800acc0:	0018      	movs	r0, r3
 800acc2:	f00f ff79 	bl	801abb8 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800acc6:	4bb3      	ldr	r3, [pc, #716]	@ (800af94 <main+0x384>)
 800acc8:	0018      	movs	r0, r3
 800acca:	f7fd fd0f 	bl	80086ec <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800acce:	4ab2      	ldr	r2, [pc, #712]	@ (800af98 <main+0x388>)
 800acd0:	49b2      	ldr	r1, [pc, #712]	@ (800af9c <main+0x38c>)
 800acd2:	48b3      	ldr	r0, [pc, #716]	@ (800afa0 <main+0x390>)
 800acd4:	230b      	movs	r3, #11
 800acd6:	f004 fc21 	bl	800f51c <soundInit>
 800acda:	0003      	movs	r3, r0
 800acdc:	001a      	movs	r2, r3
 800acde:	2301      	movs	r3, #1
 800ace0:	4053      	eors	r3, r2
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d005      	beq.n	800acf4 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800ace8:	4aae      	ldr	r2, [pc, #696]	@ (800afa4 <main+0x394>)
 800acea:	4baf      	ldr	r3, [pc, #700]	@ (800afa8 <main+0x398>)
 800acec:	21f9      	movs	r1, #249	@ 0xf9
 800acee:	0018      	movs	r0, r3
 800acf0:	f006 fe6a 	bl	80119c8 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800acf4:	4bad      	ldr	r3, [pc, #692]	@ (800afac <main+0x39c>)
 800acf6:	4aae      	ldr	r2, [pc, #696]	@ (800afb0 <main+0x3a0>)
 800acf8:	49a8      	ldr	r1, [pc, #672]	@ (800af9c <main+0x38c>)
 800acfa:	48ae      	ldr	r0, [pc, #696]	@ (800afb4 <main+0x3a4>)
 800acfc:	f000 fbb4 	bl	800b468 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800ad00:	f007 f9f6 	bl	80120f0 <HAL_GetTick>
 800ad04:	0003      	movs	r3, r0
 800ad06:	4aac      	ldr	r2, [pc, #688]	@ (800afb8 <main+0x3a8>)
 800ad08:	189a      	adds	r2, r3, r2
 800ad0a:	4bac      	ldr	r3, [pc, #688]	@ (800afbc <main+0x3ac>)
 800ad0c:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800ad0e:	f7fd f8a5 	bl	8007e5c <Check_USB_PowerOn>
 800ad12:	0003      	movs	r3, r0
 800ad14:	1e5a      	subs	r2, r3, #1
 800ad16:	4193      	sbcs	r3, r2
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	4053      	eors	r3, r2
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	1c1a      	adds	r2, r3, #0
 800ad22:	2301      	movs	r3, #1
 800ad24:	4013      	ands	r3, r2
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	4ba5      	ldr	r3, [pc, #660]	@ (800afc0 <main+0x3b0>)
 800ad2a:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800ad2c:	f7fd f896 	bl	8007e5c <Check_USB_PowerOn>
 800ad30:	1e03      	subs	r3, r0, #0
 800ad32:	d003      	beq.n	800ad3c <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800ad34:	4ba3      	ldr	r3, [pc, #652]	@ (800afc4 <main+0x3b4>)
 800ad36:	0018      	movs	r0, r3
 800ad38:	f7fc fc0c 	bl	8007554 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800ad3c:	4ba2      	ldr	r3, [pc, #648]	@ (800afc8 <main+0x3b8>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	0018      	movs	r0, r3
 800ad42:	f006 fd33 	bl	80117ac <TimestampIsReached>
 800ad46:	1e03      	subs	r3, r0, #0
 800ad48:	d00e      	beq.n	800ad68 <main+0x158>
      charge = Battery_Upkeep();
 800ad4a:	f006 f817 	bl	8010d7c <Battery_Upkeep>
 800ad4e:	0003      	movs	r3, r0
 800ad50:	001a      	movs	r2, r3
 800ad52:	4b8a      	ldr	r3, [pc, #552]	@ (800af7c <main+0x36c>)
 800ad54:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800ad56:	f007 f9cb 	bl	80120f0 <HAL_GetTick>
 800ad5a:	0003      	movs	r3, r0
 800ad5c:	4a9b      	ldr	r2, [pc, #620]	@ (800afcc <main+0x3bc>)
 800ad5e:	189a      	adds	r2, r3, r2
 800ad60:	4b99      	ldr	r3, [pc, #612]	@ (800afc8 <main+0x3b8>)
 800ad62:	601a      	str	r2, [r3, #0]
      showTime();
 800ad64:	f7fd f8aa 	bl	8007ebc <showTime>

    }
    configCheck();
 800ad68:	f005 fe6c 	bl	8010a44 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 800ad6c:	4b98      	ldr	r3, [pc, #608]	@ (800afd0 <main+0x3c0>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800ad72:	4b82      	ldr	r3, [pc, #520]	@ (800af7c <main+0x36c>)
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d003      	beq.n	800ad82 <main+0x172>
 800ad7a:	4b80      	ldr	r3, [pc, #512]	@ (800af7c <main+0x36c>)
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d104      	bne.n	800ad8c <main+0x17c>
          FlashLEDs();
 800ad82:	f7ff ff11 	bl	800aba8 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 800ad86:	4b93      	ldr	r3, [pc, #588]	@ (800afd4 <main+0x3c4>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800ad8c:	4b7b      	ldr	r3, [pc, #492]	@ (800af7c <main+0x36c>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d109      	bne.n	800ada8 <main+0x198>
 800ad94:	4b90      	ldr	r3, [pc, #576]	@ (800afd8 <main+0x3c8>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	2b09      	cmp	r3, #9
 800ad9a:	d105      	bne.n	800ada8 <main+0x198>
          batteryEmpty = true;
 800ad9c:	4b8f      	ldr	r3, [pc, #572]	@ (800afdc <main+0x3cc>)
 800ad9e:	2201      	movs	r2, #1
 800ada0:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800ada2:	f7fd fbcb 	bl	800853c <Enter_Standby_Mode>
 800ada6:	e002      	b.n	800adae <main+0x19e>
        }
        else{
          batteryEmpty = false;
 800ada8:	4b8c      	ldr	r3, [pc, #560]	@ (800afdc <main+0x3cc>)
 800adaa:	2200      	movs	r2, #0
 800adac:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800adae:	4b8c      	ldr	r3, [pc, #560]	@ (800afe0 <main+0x3d0>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d100      	bne.n	800adb8 <main+0x1a8>
 800adb6:	e088      	b.n	800aeca <main+0x2ba>
 800adb8:	4b73      	ldr	r3, [pc, #460]	@ (800af88 <main+0x378>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2201      	movs	r2, #1
 800adbe:	4053      	eors	r3, r2
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d100      	bne.n	800adc8 <main+0x1b8>
 800adc6:	e080      	b.n	800aeca <main+0x2ba>
 800adc8:	4b84      	ldr	r3, [pc, #528]	@ (800afdc <main+0x3cc>)
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	2201      	movs	r2, #1
 800adce:	4053      	eors	r3, r2
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b00      	cmp	r3, #0
 800add4:	d100      	bne.n	800add8 <main+0x1c8>
 800add6:	e078      	b.n	800aeca <main+0x2ba>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800add8:	4b79      	ldr	r3, [pc, #484]	@ (800afc0 <main+0x3b0>)
 800adda:	781a      	ldrb	r2, [r3, #0]
 800addc:	4b81      	ldr	r3, [pc, #516]	@ (800afe4 <main+0x3d4>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d020      	beq.n	800ae26 <main+0x216>
        if (IsSGPPresent() && !usbPluggedIn) {
 800ade4:	f000 fad2 	bl	800b38c <IsSGPPresent>
 800ade8:	1e03      	subs	r3, r0, #0
 800adea:	d009      	beq.n	800ae00 <main+0x1f0>
 800adec:	4b7d      	ldr	r3, [pc, #500]	@ (800afe4 <main+0x3d4>)
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	2201      	movs	r2, #1
 800adf2:	4053      	eors	r3, r2
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d002      	beq.n	800ae00 <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800adfa:	2001      	movs	r0, #1
 800adfc:	f000 fad0 	bl	800b3a0 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800ae00:	4b79      	ldr	r3, [pc, #484]	@ (800afe8 <main+0x3d8>)
 800ae02:	791b      	ldrb	r3, [r3, #4]
 800ae04:	2b34      	cmp	r3, #52	@ 0x34
 800ae06:	d003      	beq.n	800ae10 <main+0x200>
 800ae08:	4b77      	ldr	r3, [pc, #476]	@ (800afe8 <main+0x3d8>)
 800ae0a:	791b      	ldrb	r3, [r3, #4]
 800ae0c:	2b35      	cmp	r3, #53	@ 0x35
 800ae0e:	d106      	bne.n	800ae1e <main+0x20e>
 800ae10:	4b74      	ldr	r3, [pc, #464]	@ (800afe4 <main+0x3d4>)
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800ae18:	2000      	movs	r0, #0
 800ae1a:	f000 fac1 	bl	800b3a0 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 800ae1e:	4b71      	ldr	r3, [pc, #452]	@ (800afe4 <main+0x3d4>)
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	4b67      	ldr	r3, [pc, #412]	@ (800afc0 <main+0x3b0>)
 800ae24:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800ae26:	f000 fe8d 	bl	800bb44 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800ae2a:	4b6a      	ldr	r3, [pc, #424]	@ (800afd4 <main+0x3c4>)
 800ae2c:	78db      	ldrb	r3, [r3, #3]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d005      	beq.n	800ae3e <main+0x22e>
        MICstate = Mic_Upkeep();
 800ae32:	f001 f891 	bl	800bf58 <Mic_Upkeep>
 800ae36:	0003      	movs	r3, r0
 800ae38:	001a      	movs	r2, r3
 800ae3a:	4b6c      	ldr	r3, [pc, #432]	@ (800afec <main+0x3dc>)
 800ae3c:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800ae3e:	4b4f      	ldr	r3, [pc, #316]	@ (800af7c <main+0x36c>)
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d803      	bhi.n	800ae4e <main+0x23e>
 800ae46:	4b62      	ldr	r3, [pc, #392]	@ (800afd0 <main+0x3c0>)
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d016      	beq.n	800ae7c <main+0x26c>
 800ae4e:	4b61      	ldr	r3, [pc, #388]	@ (800afd4 <main+0x3c4>)
 800ae50:	789b      	ldrb	r3, [r3, #2]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d012      	beq.n	800ae7c <main+0x26c>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800ae56:	f001 fa21 	bl	800c29c <sen5x_Get_sen5x_enable_state>
 800ae5a:	0003      	movs	r3, r0
 800ae5c:	001a      	movs	r2, r3
 800ae5e:	2301      	movs	r3, #1
 800ae60:	4053      	eors	r3, r2
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d006      	beq.n	800ae76 <main+0x266>
 800ae68:	4b5e      	ldr	r3, [pc, #376]	@ (800afe4 <main+0x3d4>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <main+0x266>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800ae70:	2000      	movs	r0, #0
 800ae72:	f001 fa4f 	bl	800c314 <sen5x_enable>
        }
        sen5x_statemachine();
 800ae76:	f001 ff99 	bl	800cdac <sen5x_statemachine>
 800ae7a:	e020      	b.n	800aebe <main+0x2ae>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800ae7c:	4b3f      	ldr	r3, [pc, #252]	@ (800af7c <main+0x36c>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d81c      	bhi.n	800aebe <main+0x2ae>
 800ae84:	4b52      	ldr	r3, [pc, #328]	@ (800afd0 <main+0x3c0>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	4053      	eors	r3, r2
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d015      	beq.n	800aebe <main+0x2ae>
 800ae92:	4b50      	ldr	r3, [pc, #320]	@ (800afd4 <main+0x3c4>)
 800ae94:	789b      	ldrb	r3, [r3, #2]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d011      	beq.n	800aebe <main+0x2ae>
        Info("Battery level insufficient for sen5x operation");
 800ae9a:	4a55      	ldr	r2, [pc, #340]	@ (800aff0 <main+0x3e0>)
 800ae9c:	4b39      	ldr	r3, [pc, #228]	@ (800af84 <main+0x374>)
 800ae9e:	0019      	movs	r1, r3
 800aea0:	2002      	movs	r0, #2
 800aea2:	f006 fcd9 	bl	8011858 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800aea6:	4b4b      	ldr	r3, [pc, #300]	@ (800afd4 <main+0x3c4>)
 800aea8:	2200      	movs	r2, #0
 800aeaa:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800aeac:	4b51      	ldr	r3, [pc, #324]	@ (800aff4 <main+0x3e4>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800aeb2:	4b51      	ldr	r3, [pc, #324]	@ (800aff8 <main+0x3e8>)
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <main+0x2ae>
          sen5x_Power_Off();
 800aeba:	f001 fab7 	bl	800c42c <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800aebe:	f7fb fb57 	bl	8006570 <ESP_Upkeep>
 800aec2:	0003      	movs	r3, r0
 800aec4:	001a      	movs	r2, r3
 800aec6:	4b44      	ldr	r3, [pc, #272]	@ (800afd8 <main+0x3c8>)
 800aec8:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800aeca:	4b45      	ldr	r3, [pc, #276]	@ (800afe0 <main+0x3d0>)
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	2201      	movs	r2, #1
 800aed0:	4053      	eors	r3, r2
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d00f      	beq.n	800aef8 <main+0x2e8>
 800aed8:	4b2b      	ldr	r3, [pc, #172]	@ (800af88 <main+0x378>)
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	2201      	movs	r2, #1
 800aede:	4053      	eors	r3, r2
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d008      	beq.n	800aef8 <main+0x2e8>
 800aee6:	4b3d      	ldr	r3, [pc, #244]	@ (800afdc <main+0x3cc>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2201      	movs	r2, #1
 800aeec:	4053      	eors	r3, r2
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <main+0x2e8>
      Device_Test();  // for device with startup time
 800aef4:	f000 fc90 	bl	800b818 <Device_Test>
    }
    if (!usbPluggedIn) {
 800aef8:	4b3a      	ldr	r3, [pc, #232]	@ (800afe4 <main+0x3d4>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	2201      	movs	r2, #1
 800aefe:	4053      	eors	r3, r2
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d01c      	beq.n	800af40 <main+0x330>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800af06:	4b3d      	ldr	r3, [pc, #244]	@ (800affc <main+0x3ec>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	2201      	movs	r2, #1
 800af0c:	4053      	eors	r3, r2
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b00      	cmp	r3, #0
 800af12:	d015      	beq.n	800af40 <main+0x330>
 800af14:	f000 fcfe 	bl	800b914 <AllDevicesReady>
 800af18:	1e03      	subs	r3, r0, #0
 800af1a:	d011      	beq.n	800af40 <main+0x330>
 800af1c:	4b38      	ldr	r3, [pc, #224]	@ (800b000 <main+0x3f0>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00d      	beq.n	800af40 <main+0x330>
        EnabledConnectedDevices();
 800af24:	f000 fd90 	bl	800ba48 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800af28:	4b36      	ldr	r3, [pc, #216]	@ (800b004 <main+0x3f4>)
 800af2a:	795b      	ldrb	r3, [r3, #5]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <main+0x326>
 800af30:	23d7      	movs	r3, #215	@ 0xd7
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	e001      	b.n	800af3a <main+0x32a>
 800af36:	23dc      	movs	r3, #220	@ 0xdc
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	0018      	movs	r0, r3
 800af3c:	f7fd fb1e 	bl	800857c <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800af40:	4b12      	ldr	r3, [pc, #72]	@ (800af8c <main+0x37c>)
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <main+0x33c>
      check_cli_command();
 800af48:	f000 f8ea 	bl	800b120 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800af4c:	f7fc ff86 	bl	8007e5c <Check_USB_PowerOn>
 800af50:	1e03      	subs	r3, r0, #0
 800af52:	d100      	bne.n	800af56 <main+0x346>
 800af54:	e6f2      	b.n	800ad3c <main+0x12c>
 800af56:	4b2c      	ldr	r3, [pc, #176]	@ (800b008 <main+0x3f8>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	2201      	movs	r2, #1
 800af5c:	4053      	eors	r3, r2
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	2b00      	cmp	r3, #0
 800af62:	d100      	bne.n	800af66 <main+0x356>
 800af64:	e6ea      	b.n	800ad3c <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800af66:	f015 fb9b 	bl	80206a0 <GetUsbRxPointer>
 800af6a:	0003      	movs	r3, r0
 800af6c:	0018      	movs	r0, r3
 800af6e:	f7fc fd33 	bl	80079d8 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800af72:	e6e3      	b.n	800ad3c <main+0x12c>
 800af74:	20001e8c 	.word	0x20001e8c
 800af78:	20001e4c 	.word	0x20001e4c
 800af7c:	20000df8 	.word	0x20000df8
 800af80:	080298c8 	.word	0x080298c8
 800af84:	080298ec 	.word	0x080298ec
 800af88:	20000ddd 	.word	0x20000ddd
 800af8c:	20000de4 	.word	0x20000de4
 800af90:	20001fc4 	.word	0x20001fc4
 800af94:	20000e78 	.word	0x20000e78
 800af98:	20001ecc 	.word	0x20001ecc
 800af9c:	20000d58 	.word	0x20000d58
 800afa0:	20000d94 	.word	0x20000d94
 800afa4:	080298f0 	.word	0x080298f0
 800afa8:	0802b104 	.word	0x0802b104
 800afac:	2000207c 	.word	0x2000207c
 800afb0:	20000b58 	.word	0x20000b58
 800afb4:	20000c20 	.word	0x20000c20
 800afb8:	000061a8 	.word	0x000061a8
 800afbc:	20000df4 	.word	0x20000df4
 800afc0:	20000ddf 	.word	0x20000ddf
 800afc4:	08029904 	.word	0x08029904
 800afc8:	20000098 	.word	0x20000098
 800afcc:	0000c350 	.word	0x0000c350
 800afd0:	20000097 	.word	0x20000097
 800afd4:	20000dfc 	.word	0x20000dfc
 800afd8:	20000de1 	.word	0x20000de1
 800afdc:	20000dde 	.word	0x20000dde
 800afe0:	20000ddc 	.word	0x20000ddc
 800afe4:	20001e2d 	.word	0x20001e2d
 800afe8:	20000ea0 	.word	0x20000ea0
 800afec:	20000de0 	.word	0x20000de0
 800aff0:	08029938 	.word	0x08029938
 800aff4:	20000e9e 	.word	0x20000e9e
 800aff8:	20000e9d 	.word	0x20000e9d
 800affc:	20001e2e 	.word	0x20001e2e
 800b000:	200005bc 	.word	0x200005bc
 800b004:	20000e04 	.word	0x20000e04
 800b008:	200005b7 	.word	0x200005b7

0800b00c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b00c:	b590      	push	{r4, r7, lr}
 800b00e:	b09d      	sub	sp, #116	@ 0x74
 800b010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b012:	2438      	movs	r4, #56	@ 0x38
 800b014:	193b      	adds	r3, r7, r4
 800b016:	0018      	movs	r0, r3
 800b018:	2338      	movs	r3, #56	@ 0x38
 800b01a:	001a      	movs	r2, r3
 800b01c:	2100      	movs	r1, #0
 800b01e:	f018 fd79 	bl	8023b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b022:	2324      	movs	r3, #36	@ 0x24
 800b024:	18fb      	adds	r3, r7, r3
 800b026:	0018      	movs	r0, r3
 800b028:	2314      	movs	r3, #20
 800b02a:	001a      	movs	r2, r3
 800b02c:	2100      	movs	r1, #0
 800b02e:	f018 fd71 	bl	8023b14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b032:	003b      	movs	r3, r7
 800b034:	0018      	movs	r0, r3
 800b036:	2324      	movs	r3, #36	@ 0x24
 800b038:	001a      	movs	r2, r3
 800b03a:	2100      	movs	r1, #0
 800b03c:	f018 fd6a 	bl	8023b14 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b040:	4b34      	ldr	r3, [pc, #208]	@ (800b114 <SystemClock_Config+0x108>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a34      	ldr	r2, [pc, #208]	@ (800b118 <SystemClock_Config+0x10c>)
 800b046:	401a      	ands	r2, r3
 800b048:	4b32      	ldr	r3, [pc, #200]	@ (800b114 <SystemClock_Config+0x108>)
 800b04a:	2180      	movs	r1, #128	@ 0x80
 800b04c:	0109      	lsls	r1, r1, #4
 800b04e:	430a      	orrs	r2, r1
 800b050:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800b052:	f00d fb85 	bl	8018760 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800b056:	4b31      	ldr	r3, [pc, #196]	@ (800b11c <SystemClock_Config+0x110>)
 800b058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b05a:	4a2f      	ldr	r2, [pc, #188]	@ (800b118 <SystemClock_Config+0x10c>)
 800b05c:	401a      	ands	r2, r3
 800b05e:	4b2f      	ldr	r3, [pc, #188]	@ (800b11c <SystemClock_Config+0x110>)
 800b060:	2180      	movs	r1, #128	@ 0x80
 800b062:	0149      	lsls	r1, r1, #5
 800b064:	430a      	orrs	r2, r1
 800b066:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800b068:	193b      	adds	r3, r7, r4
 800b06a:	2226      	movs	r2, #38	@ 0x26
 800b06c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b06e:	193b      	adds	r3, r7, r4
 800b070:	2280      	movs	r2, #128	@ 0x80
 800b072:	0052      	lsls	r2, r2, #1
 800b074:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b076:	0021      	movs	r1, r4
 800b078:	187b      	adds	r3, r7, r1
 800b07a:	2201      	movs	r2, #1
 800b07c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b07e:	187b      	adds	r3, r7, r1
 800b080:	2210      	movs	r2, #16
 800b082:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800b084:	187b      	adds	r3, r7, r1
 800b086:	2201      	movs	r2, #1
 800b088:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800b08a:	187b      	adds	r3, r7, r1
 800b08c:	2200      	movs	r2, #0
 800b08e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b090:	187b      	adds	r3, r7, r1
 800b092:	0018      	movs	r0, r3
 800b094:	f00d fbf4 	bl	8018880 <HAL_RCC_OscConfig>
 800b098:	1e03      	subs	r3, r0, #0
 800b09a:	d001      	beq.n	800b0a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800b09c:	f000 f906 	bl	800b2ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b0a0:	2124      	movs	r1, #36	@ 0x24
 800b0a2:	187b      	adds	r3, r7, r1
 800b0a4:	220f      	movs	r2, #15
 800b0a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800b0a8:	187b      	adds	r3, r7, r1
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b0ae:	187b      	adds	r3, r7, r1
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b0b4:	187b      	adds	r3, r7, r1
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b0ba:	187b      	adds	r3, r7, r1
 800b0bc:	2200      	movs	r2, #0
 800b0be:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800b0c0:	187b      	adds	r3, r7, r1
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	0018      	movs	r0, r3
 800b0c6:	f00d ffaf 	bl	8019028 <HAL_RCC_ClockConfig>
 800b0ca:	1e03      	subs	r3, r0, #0
 800b0cc:	d001      	beq.n	800b0d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800b0ce:	f000 f8ed 	bl	800b2ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800b0d2:	003b      	movs	r3, r7
 800b0d4:	226d      	movs	r2, #109	@ 0x6d
 800b0d6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800b0d8:	003b      	movs	r3, r7
 800b0da:	2200      	movs	r2, #0
 800b0dc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800b0de:	003b      	movs	r3, r7
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800b0e4:	003b      	movs	r3, r7
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800b0ea:	003b      	movs	r3, r7
 800b0ec:	2280      	movs	r2, #128	@ 0x80
 800b0ee:	0252      	lsls	r2, r2, #9
 800b0f0:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b0f2:	003b      	movs	r3, r7
 800b0f4:	2280      	movs	r2, #128	@ 0x80
 800b0f6:	04d2      	lsls	r2, r2, #19
 800b0f8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b0fa:	003b      	movs	r3, r7
 800b0fc:	0018      	movs	r0, r3
 800b0fe:	f00e f9b7 	bl	8019470 <HAL_RCCEx_PeriphCLKConfig>
 800b102:	1e03      	subs	r3, r0, #0
 800b104:	d001      	beq.n	800b10a <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800b106:	f000 f8d1 	bl	800b2ac <Error_Handler>
  }
}
 800b10a:	46c0      	nop			@ (mov r8, r8)
 800b10c:	46bd      	mov	sp, r7
 800b10e:	b01d      	add	sp, #116	@ 0x74
 800b110:	bd90      	pop	{r4, r7, pc}
 800b112:	46c0      	nop			@ (mov r8, r8)
 800b114:	40007000 	.word	0x40007000
 800b118:	ffffe7ff 	.word	0xffffe7ff
 800b11c:	40021000 	.word	0x40021000

0800b120 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800b120:	b580      	push	{r7, lr}
 800b122:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800b124:	4b34      	ldr	r3, [pc, #208]	@ (800b1f8 <check_cli_command+0xd8>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	3b61      	subs	r3, #97	@ 0x61
 800b12a:	2b13      	cmp	r3, #19
 800b12c:	d833      	bhi.n	800b196 <check_cli_command+0x76>
 800b12e:	009a      	lsls	r2, r3, #2
 800b130:	4b32      	ldr	r3, [pc, #200]	@ (800b1fc <check_cli_command+0xdc>)
 800b132:	18d3      	adds	r3, r2, r3
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800b138:	4b31      	ldr	r3, [pc, #196]	@ (800b200 <check_cli_command+0xe0>)
 800b13a:	0018      	movs	r0, r3
 800b13c:	f018 fb7a 	bl	8023834 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800b140:	2003      	movs	r0, #3
 800b142:	f006 fbf3 	bl	801192c <SetVerboseLevel>
      break;
 800b146:	e051      	b.n	800b1ec <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800b148:	f7fc fa44 	bl	80075d4 <PC_show_Keys>
    break;
 800b14c:	e04e      	b.n	800b1ec <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800b14e:	f7f9 f969 	bl	8004424 <forceNTPupdate>
    break;
 800b152:	e04b      	b.n	800b1ec <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800b154:	4b2b      	ldr	r3, [pc, #172]	@ (800b204 <check_cli_command+0xe4>)
 800b156:	0018      	movs	r0, r3
 800b158:	f018 fb6c 	bl	8023834 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800b15c:	2002      	movs	r0, #2
 800b15e:	f006 fbe5 	bl	801192c <SetVerboseLevel>
      break;
 800b162:	e043      	b.n	800b1ec <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800b164:	4b28      	ldr	r3, [pc, #160]	@ (800b208 <check_cli_command+0xe8>)
 800b166:	0018      	movs	r0, r3
 800b168:	f018 fb64 	bl	8023834 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800b16c:	2001      	movs	r0, #1
 800b16e:	f006 fbdd 	bl	801192c <SetVerboseLevel>
      break;
 800b172:	e03b      	b.n	800b1ec <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800b174:	4b25      	ldr	r3, [pc, #148]	@ (800b20c <check_cli_command+0xec>)
 800b176:	0018      	movs	r0, r3
 800b178:	f018 fb5c 	bl	8023834 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800b17c:	2000      	movs	r0, #0
 800b17e:	f006 fbd5 	bl	801192c <SetVerboseLevel>
      break;
 800b182:	e033      	b.n	800b1ec <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800b184:	f006 ffb4 	bl	80120f0 <HAL_GetTick>
 800b188:	0002      	movs	r2, r0
 800b18a:	4b21      	ldr	r3, [pc, #132]	@ (800b210 <check_cli_command+0xf0>)
 800b18c:	601a      	str	r2, [r3, #0]
      break;
 800b18e:	e02d      	b.n	800b1ec <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800b190:	f7fc fe94 	bl	8007ebc <showTime>
      break;
 800b194:	e02a      	b.n	800b1ec <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800b196:	4a1f      	ldr	r2, [pc, #124]	@ (800b214 <check_cli_command+0xf4>)
 800b198:	4b1f      	ldr	r3, [pc, #124]	@ (800b218 <check_cli_command+0xf8>)
 800b19a:	0019      	movs	r1, r3
 800b19c:	2001      	movs	r0, #1
 800b19e:	f006 fb5b 	bl	8011858 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800b1a2:	4b1e      	ldr	r3, [pc, #120]	@ (800b21c <check_cli_command+0xfc>)
 800b1a4:	0018      	movs	r0, r3
 800b1a6:	f018 fb45 	bl	8023834 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800b1aa:	4b1d      	ldr	r3, [pc, #116]	@ (800b220 <check_cli_command+0x100>)
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	f018 fb41 	bl	8023834 <puts>
      printf("e - show EEPROM\r\n");
 800b1b2:	4b1c      	ldr	r3, [pc, #112]	@ (800b224 <check_cli_command+0x104>)
 800b1b4:	0018      	movs	r0, r3
 800b1b6:	f018 fb3d 	bl	8023834 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800b1ba:	4b1b      	ldr	r3, [pc, #108]	@ (800b228 <check_cli_command+0x108>)
 800b1bc:	0018      	movs	r0, r3
 800b1be:	f018 fb39 	bl	8023834 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800b1c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b22c <check_cli_command+0x10c>)
 800b1c4:	0018      	movs	r0, r3
 800b1c6:	f018 fb35 	bl	8023834 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800b1ca:	4b19      	ldr	r3, [pc, #100]	@ (800b230 <check_cli_command+0x110>)
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f018 fb31 	bl	8023834 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800b1d2:	4b18      	ldr	r3, [pc, #96]	@ (800b234 <check_cli_command+0x114>)
 800b1d4:	0018      	movs	r0, r3
 800b1d6:	f018 fb2d 	bl	8023834 <puts>
      printf("s - Start particle measurement\r\n");
 800b1da:	4b17      	ldr	r3, [pc, #92]	@ (800b238 <check_cli_command+0x118>)
 800b1dc:	0018      	movs	r0, r3
 800b1de:	f018 fb29 	bl	8023834 <puts>
      printf("t - Show actual systemtime\r\n");
 800b1e2:	4b16      	ldr	r3, [pc, #88]	@ (800b23c <check_cli_command+0x11c>)
 800b1e4:	0018      	movs	r0, r3
 800b1e6:	f018 fb25 	bl	8023834 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800b1ea:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800b1ec:	4b02      	ldr	r3, [pc, #8]	@ (800b1f8 <check_cli_command+0xd8>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	701a      	strb	r2, [r3, #0]
}
 800b1f2:	46c0      	nop			@ (mov r8, r8)
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	20000de4 	.word	0x20000de4
 800b1fc:	0802b0b4 	.word	0x0802b0b4
 800b200:	08029968 	.word	0x08029968
 800b204:	08029984 	.word	0x08029984
 800b208:	080299a0 	.word	0x080299a0
 800b20c:	080299c0 	.word	0x080299c0
 800b210:	20000eac 	.word	0x20000eac
 800b214:	080299dc 	.word	0x080299dc
 800b218:	08029a0c 	.word	0x08029a0c
 800b21c:	08029a10 	.word	0x08029a10
 800b220:	08029a28 	.word	0x08029a28
 800b224:	08029a48 	.word	0x08029a48
 800b228:	08029a5c 	.word	0x08029a5c
 800b22c:	08029a80 	.word	0x08029a80
 800b230:	08029aa0 	.word	0x08029aa0
 800b234:	08029ac4 	.word	0x08029ac4
 800b238:	08029ae4 	.word	0x08029ae4
 800b23c:	08029b04 	.word	0x08029b04

0800b240 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800b248:	4907      	ldr	r1, [pc, #28]	@ (800b268 <HAL_UART_RxCpltCallback+0x28>)
 800b24a:	4b08      	ldr	r3, [pc, #32]	@ (800b26c <HAL_UART_RxCpltCallback+0x2c>)
 800b24c:	2201      	movs	r2, #1
 800b24e:	0018      	movs	r0, r3
 800b250:	f00f fcb2 	bl	801abb8 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800b254:	4904      	ldr	r1, [pc, #16]	@ (800b268 <HAL_UART_RxCpltCallback+0x28>)
 800b256:	4b05      	ldr	r3, [pc, #20]	@ (800b26c <HAL_UART_RxCpltCallback+0x2c>)
 800b258:	2201      	movs	r2, #1
 800b25a:	0018      	movs	r0, r3
 800b25c:	f00f fcac 	bl	801abb8 <HAL_UART_Receive_IT>
}
 800b260:	46c0      	nop			@ (mov r8, r8)
 800b262:	46bd      	mov	sp, r7
 800b264:	b002      	add	sp, #8
 800b266:	bd80      	pop	{r7, pc}
 800b268:	20000de4 	.word	0x20000de4
 800b26c:	20001fc4 	.word	0x20001fc4

0800b270 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	0002      	movs	r2, r0
 800b278:	1dbb      	adds	r3, r7, #6
 800b27a:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800b27c:	1dbb      	adds	r3, r7, #6
 800b27e:	881a      	ldrh	r2, [r3, #0]
 800b280:	2380      	movs	r3, #128	@ 0x80
 800b282:	021b      	lsls	r3, r3, #8
 800b284:	429a      	cmp	r2, r3
 800b286:	d10b      	bne.n	800b2a0 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800b288:	f005 fd8c 	bl	8010da4 <setuserToggle>
    if (GetPMSensorPresence()) {
 800b28c:	f000 f860 	bl	800b350 <GetPMSensorPresence>
 800b290:	1e03      	subs	r3, r0, #0
 800b292:	d005      	beq.n	800b2a0 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800b294:	4b04      	ldr	r3, [pc, #16]	@ (800b2a8 <HAL_GPIO_EXTI_Callback+0x38>)
 800b296:	2201      	movs	r2, #1
 800b298:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800b29a:	2000      	movs	r0, #0
 800b29c:	f001 f808 	bl	800c2b0 <sen5x_Set_sen5x_state>
    }
  }
}
 800b2a0:	46c0      	nop			@ (mov r8, r8)
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	b002      	add	sp, #8
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	20000dfc 	.word	0x20000dfc

0800b2ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800b2b0:	f005 fa44 	bl	801073c <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b2b4:	b672      	cpsid	i
}
 800b2b6:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800b2b8:	4a05      	ldr	r2, [pc, #20]	@ (800b2d0 <Error_Handler+0x24>)
 800b2ba:	4b06      	ldr	r3, [pc, #24]	@ (800b2d4 <Error_Handler+0x28>)
 800b2bc:	0019      	movs	r1, r3
 800b2be:	2001      	movs	r0, #1
 800b2c0:	f006 faca 	bl	8011858 <CreateLine>

    HAL_Delay(2500);
 800b2c4:	4b04      	ldr	r3, [pc, #16]	@ (800b2d8 <Error_Handler+0x2c>)
 800b2c6:	0018      	movs	r0, r3
 800b2c8:	f006 ff1c 	bl	8012104 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800b2cc:	46c0      	nop			@ (mov r8, r8)
 800b2ce:	e7f3      	b.n	800b2b8 <Error_Handler+0xc>
 800b2d0:	08029b20 	.word	0x08029b20
 800b2d4:	08029a0c 	.word	0x08029a0c
 800b2d8:	000009c4 	.word	0x000009c4

0800b2dc <testInit>:
static uint8_t HIDSstate;
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;

void testInit(){
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800b2e0:	4b19      	ldr	r3, [pc, #100]	@ (800b348 <testInit+0x6c>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800b2e6:	4b18      	ldr	r3, [pc, #96]	@ (800b348 <testInit+0x6c>)
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800b2ec:	4b16      	ldr	r3, [pc, #88]	@ (800b348 <testInit+0x6c>)
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800b2f2:	4b15      	ldr	r3, [pc, #84]	@ (800b348 <testInit+0x6c>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800b2f8:	4b13      	ldr	r3, [pc, #76]	@ (800b348 <testInit+0x6c>)
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800b2fe:	4b12      	ldr	r3, [pc, #72]	@ (800b348 <testInit+0x6c>)
 800b300:	2200      	movs	r2, #0
 800b302:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800b304:	4b10      	ldr	r3, [pc, #64]	@ (800b348 <testInit+0x6c>)
 800b306:	2200      	movs	r2, #0
 800b308:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800b30a:	4b0f      	ldr	r3, [pc, #60]	@ (800b348 <testInit+0x6c>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800b310:	4b0d      	ldr	r3, [pc, #52]	@ (800b348 <testInit+0x6c>)
 800b312:	2200      	movs	r2, #0
 800b314:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800b316:	4b0d      	ldr	r3, [pc, #52]	@ (800b34c <testInit+0x70>)
 800b318:	2201      	movs	r2, #1
 800b31a:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800b31c:	4b0b      	ldr	r3, [pc, #44]	@ (800b34c <testInit+0x70>)
 800b31e:	2201      	movs	r2, #1
 800b320:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800b322:	4b0a      	ldr	r3, [pc, #40]	@ (800b34c <testInit+0x70>)
 800b324:	2201      	movs	r2, #1
 800b326:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800b328:	4b08      	ldr	r3, [pc, #32]	@ (800b34c <testInit+0x70>)
 800b32a:	2201      	movs	r2, #1
 800b32c:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800b32e:	4b07      	ldr	r3, [pc, #28]	@ (800b34c <testInit+0x70>)
 800b330:	2201      	movs	r2, #1
 800b332:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800b334:	4b05      	ldr	r3, [pc, #20]	@ (800b34c <testInit+0x70>)
 800b336:	2201      	movs	r2, #1
 800b338:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800b33a:	4b04      	ldr	r3, [pc, #16]	@ (800b34c <testInit+0x70>)
 800b33c:	2201      	movs	r2, #1
 800b33e:	719a      	strb	r2, [r3, #6]
}
 800b340:	46c0      	nop			@ (mov r8, r8)
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	46c0      	nop			@ (mov r8, r8)
 800b348:	20000e04 	.word	0x20000e04
 800b34c:	20000dfc 	.word	0x20000dfc

0800b350 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800b350:	b580      	push	{r7, lr}
 800b352:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800b354:	4b02      	ldr	r3, [pc, #8]	@ (800b360 <GetPMSensorPresence+0x10>)
 800b356:	795b      	ldrb	r3, [r3, #5]
}
 800b358:	0018      	movs	r0, r3
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	46c0      	nop			@ (mov r8, r8)
 800b360:	20000e04 	.word	0x20000e04

0800b364 <DisablePMSensor>:

void DisablePMSensor() {
 800b364:	b580      	push	{r7, lr}
 800b366:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800b368:	4b02      	ldr	r3, [pc, #8]	@ (800b374 <DisablePMSensor+0x10>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	715a      	strb	r2, [r3, #5]
}
 800b36e:	46c0      	nop			@ (mov r8, r8)
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	20000e04 	.word	0x20000e04

0800b378 <IsBMP280SensorPresent>:

bool IsAHT20SensorPresent() {
  return SensorProbe.AHT20_Present;
}

bool IsBMP280SensorPresent() {
 800b378:	b580      	push	{r7, lr}
 800b37a:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800b37c:	4b02      	ldr	r3, [pc, #8]	@ (800b388 <IsBMP280SensorPresent+0x10>)
 800b37e:	791b      	ldrb	r3, [r3, #4]
}
 800b380:	0018      	movs	r0, r3
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	46c0      	nop			@ (mov r8, r8)
 800b388:	20000e04 	.word	0x20000e04

0800b38c <IsSGPPresent>:

bool IsENS160SensorPresent() {
  return SensorProbe.ENS160_Present;
}

bool IsSGPPresent() {
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800b390:	4b02      	ldr	r3, [pc, #8]	@ (800b39c <IsSGPPresent+0x10>)
 800b392:	785b      	ldrb	r3, [r3, #1]
}
 800b394:	0018      	movs	r0, r3
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	46c0      	nop			@ (mov r8, r8)
 800b39c:	20000e04 	.word	0x20000e04

0800b3a0 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	0002      	movs	r2, r0
 800b3a8:	1dfb      	adds	r3, r7, #7
 800b3aa:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800b3ac:	4b0b      	ldr	r3, [pc, #44]	@ (800b3dc <SetVOCSensorDIS_ENA+0x3c>)
 800b3ae:	1dfa      	adds	r2, r7, #7
 800b3b0:	7812      	ldrb	r2, [r2, #0]
 800b3b2:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800b3b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b3e0 <SetVOCSensorDIS_ENA+0x40>)
 800b3b6:	1dfa      	adds	r2, r7, #7
 800b3b8:	7812      	ldrb	r2, [r2, #0]
 800b3ba:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800b3bc:	1dfb      	adds	r3, r7, #7
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d001      	beq.n	800b3c8 <SetVOCSensorDIS_ENA+0x28>
 800b3c4:	4b07      	ldr	r3, [pc, #28]	@ (800b3e4 <SetVOCSensorDIS_ENA+0x44>)
 800b3c6:	e000      	b.n	800b3ca <SetVOCSensorDIS_ENA+0x2a>
 800b3c8:	4b07      	ldr	r3, [pc, #28]	@ (800b3e8 <SetVOCSensorDIS_ENA+0x48>)
 800b3ca:	4a08      	ldr	r2, [pc, #32]	@ (800b3ec <SetVOCSensorDIS_ENA+0x4c>)
 800b3cc:	4908      	ldr	r1, [pc, #32]	@ (800b3f0 <SetVOCSensorDIS_ENA+0x50>)
 800b3ce:	2003      	movs	r0, #3
 800b3d0:	f006 fa42 	bl	8011858 <CreateLine>
}
 800b3d4:	46c0      	nop			@ (mov r8, r8)
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	b002      	add	sp, #8
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20000e04 	.word	0x20000e04
 800b3e0:	20000dfc 	.word	0x20000dfc
 800b3e4:	08029b4c 	.word	0x08029b4c
 800b3e8:	08029b54 	.word	0x08029b54
 800b3ec:	08029b60 	.word	0x08029b60
 800b3f0:	08029b74 	.word	0x08029b74

0800b3f4 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800b3f8:	4b02      	ldr	r3, [pc, #8]	@ (800b404 <IsPMSensorEnabled+0x10>)
 800b3fa:	789b      	ldrb	r3, [r3, #2]
}
 800b3fc:	0018      	movs	r0, r3
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	46c0      	nop			@ (mov r8, r8)
 800b404:	20000dfc 	.word	0x20000dfc

0800b408 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	0002      	movs	r2, r0
 800b410:	1dfb      	adds	r3, r7, #7
 800b412:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800b414:	4b05      	ldr	r3, [pc, #20]	@ (800b42c <SetVOCSensorStatus+0x24>)
 800b416:	7a1b      	ldrb	r3, [r3, #8]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800b41c:	4b04      	ldr	r3, [pc, #16]	@ (800b430 <SetVOCSensorStatus+0x28>)
 800b41e:	1dfa      	adds	r2, r7, #7
 800b420:	7812      	ldrb	r2, [r2, #0]
 800b422:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800b424:	46c0      	nop			@ (mov r8, r8)
 800b426:	46bd      	mov	sp, r7
 800b428:	b002      	add	sp, #8
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	20000e04 	.word	0x20000e04
 800b430:	20000dfc 	.word	0x20000dfc

0800b434 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	0002      	movs	r2, r0
 800b43c:	1dfb      	adds	r3, r7, #7
 800b43e:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800b440:	4b03      	ldr	r3, [pc, #12]	@ (800b450 <SetPMSensorStatus+0x1c>)
 800b442:	1dfa      	adds	r2, r7, #7
 800b444:	7812      	ldrb	r2, [r2, #0]
 800b446:	709a      	strb	r2, [r3, #2]
}
 800b448:	46c0      	nop			@ (mov r8, r8)
 800b44a:	46bd      	mov	sp, r7
 800b44c:	b002      	add	sp, #8
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20000dfc 	.word	0x20000dfc

0800b454 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800b454:	b580      	push	{r7, lr}
 800b456:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800b458:	4b02      	ldr	r3, [pc, #8]	@ (800b464 <SetESPMeasurementDone+0x10>)
 800b45a:	2201      	movs	r2, #1
 800b45c:	71da      	strb	r2, [r3, #7]
}
 800b45e:	46c0      	nop			@ (mov r8, r8)
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	20000e04 	.word	0x20000e04

0800b468 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
  testInit();
 800b476:	f7ff ff31 	bl	800b2dc <testInit>
  I2CSensors_Init(sensorI2C);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	0018      	movs	r0, r3
 800b47e:	f7fb fd27 	bl	8006ed0 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800b482:	f006 fc1b 	bl	8011cbc <HIDS_DeviceConnected>
 800b486:	0003      	movs	r3, r0
 800b488:	001a      	movs	r2, r3
 800b48a:	2301      	movs	r3, #1
 800b48c:	4053      	eors	r3, r2
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00c      	beq.n	800b4ae <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800b494:	4abf      	ldr	r2, [pc, #764]	@ (800b794 <Device_Init+0x32c>)
 800b496:	4bc0      	ldr	r3, [pc, #768]	@ (800b798 <Device_Init+0x330>)
 800b498:	0019      	movs	r1, r3
 800b49a:	2001      	movs	r0, #1
 800b49c:	f006 f9dc 	bl	8011858 <CreateLine>
     SensorProbe.HT_Present = false;
 800b4a0:	4bbe      	ldr	r3, [pc, #760]	@ (800b79c <Device_Init+0x334>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800b4a6:	4bbe      	ldr	r3, [pc, #760]	@ (800b7a0 <Device_Init+0x338>)
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	701a      	strb	r2, [r3, #0]
 800b4ac:	e008      	b.n	800b4c0 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800b4ae:	4bbb      	ldr	r3, [pc, #748]	@ (800b79c <Device_Init+0x334>)
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800b4b4:	4abb      	ldr	r2, [pc, #748]	@ (800b7a4 <Device_Init+0x33c>)
 800b4b6:	4bbc      	ldr	r3, [pc, #752]	@ (800b7a8 <Device_Init+0x340>)
 800b4b8:	0019      	movs	r1, r3
 800b4ba:	2003      	movs	r0, #3
 800b4bc:	f006 f9cc 	bl	8011858 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800b4c0:	f7fe fa42 	bl	8009948 <BMP280_DeviceConnected>
 800b4c4:	0003      	movs	r3, r0
 800b4c6:	001a      	movs	r2, r3
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	4053      	eors	r3, r2
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00c      	beq.n	800b4ec <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800b4d2:	4ab6      	ldr	r2, [pc, #728]	@ (800b7ac <Device_Init+0x344>)
 800b4d4:	4bb0      	ldr	r3, [pc, #704]	@ (800b798 <Device_Init+0x330>)
 800b4d6:	0019      	movs	r1, r3
 800b4d8:	2001      	movs	r0, #1
 800b4da:	f006 f9bd 	bl	8011858 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800b4de:	4baf      	ldr	r3, [pc, #700]	@ (800b79c <Device_Init+0x334>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800b4e4:	4bae      	ldr	r3, [pc, #696]	@ (800b7a0 <Device_Init+0x338>)
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	715a      	strb	r2, [r3, #5]
 800b4ea:	e008      	b.n	800b4fe <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800b4ec:	4bab      	ldr	r3, [pc, #684]	@ (800b79c <Device_Init+0x334>)
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800b4f2:	4aaf      	ldr	r2, [pc, #700]	@ (800b7b0 <Device_Init+0x348>)
 800b4f4:	4bac      	ldr	r3, [pc, #688]	@ (800b7a8 <Device_Init+0x340>)
 800b4f6:	0019      	movs	r1, r3
 800b4f8:	2003      	movs	r0, #3
 800b4fa:	f006 f9ad 	bl	8011858 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800b4fe:	f003 fc53 	bl	800eda8 <SGP_DeviceConnected>
 800b502:	0003      	movs	r3, r0
 800b504:	001a      	movs	r2, r3
 800b506:	2301      	movs	r3, #1
 800b508:	4053      	eors	r3, r2
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00c      	beq.n	800b52a <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800b510:	4ba2      	ldr	r3, [pc, #648]	@ (800b79c <Device_Init+0x334>)
 800b512:	2200      	movs	r2, #0
 800b514:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800b516:	4aa7      	ldr	r2, [pc, #668]	@ (800b7b4 <Device_Init+0x34c>)
 800b518:	4b9f      	ldr	r3, [pc, #636]	@ (800b798 <Device_Init+0x330>)
 800b51a:	0019      	movs	r1, r3
 800b51c:	2001      	movs	r0, #1
 800b51e:	f006 f99b 	bl	8011858 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800b522:	4b9f      	ldr	r3, [pc, #636]	@ (800b7a0 <Device_Init+0x338>)
 800b524:	2200      	movs	r2, #0
 800b526:	705a      	strb	r2, [r3, #1]
 800b528:	e00b      	b.n	800b542 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800b52a:	4b9c      	ldr	r3, [pc, #624]	@ (800b79c <Device_Init+0x334>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800b530:	4b9a      	ldr	r3, [pc, #616]	@ (800b79c <Device_Init+0x334>)
 800b532:	2201      	movs	r2, #1
 800b534:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800b536:	4aa0      	ldr	r2, [pc, #640]	@ (800b7b8 <Device_Init+0x350>)
 800b538:	4b9b      	ldr	r3, [pc, #620]	@ (800b7a8 <Device_Init+0x340>)
 800b53a:	0019      	movs	r1, r3
 800b53c:	2003      	movs	r0, #3
 800b53e:	f006 f98b 	bl	8011858 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800b542:	f7f8 fa71 	bl	8003a28 <ENS_DeviceConnected>
 800b546:	0003      	movs	r3, r0
 800b548:	001a      	movs	r2, r3
 800b54a:	2301      	movs	r3, #1
 800b54c:	4053      	eors	r3, r2
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b00      	cmp	r3, #0
 800b552:	d00c      	beq.n	800b56e <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800b554:	4b91      	ldr	r3, [pc, #580]	@ (800b79c <Device_Init+0x334>)
 800b556:	2200      	movs	r2, #0
 800b558:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800b55a:	4a98      	ldr	r2, [pc, #608]	@ (800b7bc <Device_Init+0x354>)
 800b55c:	4b8e      	ldr	r3, [pc, #568]	@ (800b798 <Device_Init+0x330>)
 800b55e:	0019      	movs	r1, r3
 800b560:	2001      	movs	r0, #1
 800b562:	f006 f979 	bl	8011858 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800b566:	4b8e      	ldr	r3, [pc, #568]	@ (800b7a0 <Device_Init+0x338>)
 800b568:	2200      	movs	r2, #0
 800b56a:	719a      	strb	r2, [r3, #6]
 800b56c:	e008      	b.n	800b580 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800b56e:	4b8b      	ldr	r3, [pc, #556]	@ (800b79c <Device_Init+0x334>)
 800b570:	2201      	movs	r2, #1
 800b572:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800b574:	4a92      	ldr	r2, [pc, #584]	@ (800b7c0 <Device_Init+0x358>)
 800b576:	4b8c      	ldr	r3, [pc, #560]	@ (800b7a8 <Device_Init+0x340>)
 800b578:	0019      	movs	r1, r3
 800b57a:	2003      	movs	r0, #3
 800b57c:	f006 f96c 	bl	8011858 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800b580:	f7fd fd1c 	bl	8008fbc <AHT20_DeviceConnected>
 800b584:	0003      	movs	r3, r0
 800b586:	001a      	movs	r2, r3
 800b588:	2301      	movs	r3, #1
 800b58a:	4053      	eors	r3, r2
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00c      	beq.n	800b5ac <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800b592:	4a8c      	ldr	r2, [pc, #560]	@ (800b7c4 <Device_Init+0x35c>)
 800b594:	4b80      	ldr	r3, [pc, #512]	@ (800b798 <Device_Init+0x330>)
 800b596:	0019      	movs	r1, r3
 800b598:	2001      	movs	r0, #1
 800b59a:	f006 f95d 	bl	8011858 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800b59e:	4b7f      	ldr	r3, [pc, #508]	@ (800b79c <Device_Init+0x334>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800b5a4:	4b7e      	ldr	r3, [pc, #504]	@ (800b7a0 <Device_Init+0x338>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	711a      	strb	r2, [r3, #4]
 800b5aa:	e008      	b.n	800b5be <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800b5ac:	4b7b      	ldr	r3, [pc, #492]	@ (800b79c <Device_Init+0x334>)
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800b5b2:	4a85      	ldr	r2, [pc, #532]	@ (800b7c8 <Device_Init+0x360>)
 800b5b4:	4b7c      	ldr	r3, [pc, #496]	@ (800b7a8 <Device_Init+0x340>)
 800b5b6:	0019      	movs	r1, r3
 800b5b8:	2003      	movs	r0, #3
 800b5ba:	f006 f94d 	bl	8011858 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800b5be:	4b77      	ldr	r3, [pc, #476]	@ (800b79c <Device_Init+0x334>)
 800b5c0:	785b      	ldrb	r3, [r3, #1]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d009      	beq.n	800b5da <Device_Init+0x172>
 800b5c6:	4b75      	ldr	r3, [pc, #468]	@ (800b79c <Device_Init+0x334>)
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d005      	beq.n	800b5da <Device_Init+0x172>
    SetDBLED(false, true, false);
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2101      	movs	r1, #1
 800b5d2:	2000      	movs	r0, #0
 800b5d4:	f004 ff0c 	bl	80103f0 <SetDBLED>
 800b5d8:	e018      	b.n	800b60c <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800b5da:	2200      	movs	r2, #0
 800b5dc:	2100      	movs	r1, #0
 800b5de:	2001      	movs	r0, #1
 800b5e0:	f004 ff06 	bl	80103f0 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800b5e4:	4b79      	ldr	r3, [pc, #484]	@ (800b7cc <Device_Init+0x364>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	0018      	movs	r0, r3
 800b5ec:	f008 f811 	bl	8013612 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800b5f0:	2380      	movs	r3, #128	@ 0x80
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	4875      	ldr	r0, [pc, #468]	@ (800b7cc <Device_Init+0x364>)
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	0019      	movs	r1, r3
 800b5fa:	f008 f80a 	bl	8013612 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800b5fe:	2380      	movs	r3, #128	@ 0x80
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4872      	ldr	r0, [pc, #456]	@ (800b7cc <Device_Init+0x364>)
 800b604:	2201      	movs	r2, #1
 800b606:	0019      	movs	r1, r3
 800b608:	f008 f803 	bl	8013612 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800b60c:	4b64      	ldr	r3, [pc, #400]	@ (800b7a0 <Device_Init+0x338>)
 800b60e:	78db      	ldrb	r3, [r3, #3]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d028      	beq.n	800b666 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800b614:	4a6e      	ldr	r2, [pc, #440]	@ (800b7d0 <Device_Init+0x368>)
 800b616:	4b6f      	ldr	r3, [pc, #444]	@ (800b7d4 <Device_Init+0x36c>)
 800b618:	0019      	movs	r1, r3
 800b61a:	2002      	movs	r0, #2
 800b61c:	f006 f91c 	bl	8011858 <CreateLine>
    if (!enableMicrophone(true)) {
 800b620:	2001      	movs	r0, #1
 800b622:	f003 ffe3 	bl	800f5ec <enableMicrophone>
 800b626:	0003      	movs	r3, r0
 800b628:	001a      	movs	r2, r3
 800b62a:	2301      	movs	r3, #1
 800b62c:	4053      	eors	r3, r2
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00c      	beq.n	800b64e <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800b634:	4a68      	ldr	r2, [pc, #416]	@ (800b7d8 <Device_Init+0x370>)
 800b636:	4b58      	ldr	r3, [pc, #352]	@ (800b798 <Device_Init+0x330>)
 800b638:	0019      	movs	r1, r3
 800b63a:	2001      	movs	r0, #1
 800b63c:	f006 f90c 	bl	8011858 <CreateLine>
      SensorProbe.MIC_Present = false;
 800b640:	4b56      	ldr	r3, [pc, #344]	@ (800b79c <Device_Init+0x334>)
 800b642:	2200      	movs	r2, #0
 800b644:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800b646:	4b56      	ldr	r3, [pc, #344]	@ (800b7a0 <Device_Init+0x338>)
 800b648:	2200      	movs	r2, #0
 800b64a:	70da      	strb	r2, [r3, #3]
 800b64c:	e00b      	b.n	800b666 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800b64e:	4b53      	ldr	r3, [pc, #332]	@ (800b79c <Device_Init+0x334>)
 800b650:	2201      	movs	r2, #1
 800b652:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800b654:	4b52      	ldr	r3, [pc, #328]	@ (800b7a0 <Device_Init+0x338>)
 800b656:	2201      	movs	r2, #1
 800b658:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800b65a:	4a60      	ldr	r2, [pc, #384]	@ (800b7dc <Device_Init+0x374>)
 800b65c:	4b52      	ldr	r3, [pc, #328]	@ (800b7a8 <Device_Init+0x340>)
 800b65e:	0019      	movs	r1, r3
 800b660:	2003      	movs	r0, #3
 800b662:	f006 f8f9 	bl	8011858 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800b666:	f000 ff17 	bl	800c498 <probe_sen5x>
 800b66a:	1e03      	subs	r3, r0, #0
 800b66c:	d122      	bne.n	800b6b4 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800b66e:	4a5c      	ldr	r2, [pc, #368]	@ (800b7e0 <Device_Init+0x378>)
 800b670:	4b4d      	ldr	r3, [pc, #308]	@ (800b7a8 <Device_Init+0x340>)
 800b672:	0019      	movs	r1, r3
 800b674:	2003      	movs	r0, #3
 800b676:	f006 f8ef 	bl	8011858 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800b67a:	4b48      	ldr	r3, [pc, #288]	@ (800b79c <Device_Init+0x334>)
 800b67c:	2201      	movs	r2, #1
 800b67e:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800b680:	4b47      	ldr	r3, [pc, #284]	@ (800b7a0 <Device_Init+0x338>)
 800b682:	2201      	movs	r2, #1
 800b684:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800b686:	4b57      	ldr	r3, [pc, #348]	@ (800b7e4 <Device_Init+0x37c>)
 800b688:	791b      	ldrb	r3, [r3, #4]
 800b68a:	2b34      	cmp	r3, #52	@ 0x34
 800b68c:	d003      	beq.n	800b696 <Device_Init+0x22e>
 800b68e:	4b55      	ldr	r3, [pc, #340]	@ (800b7e4 <Device_Init+0x37c>)
 800b690:	791b      	ldrb	r3, [r3, #4]
 800b692:	2b35      	cmp	r3, #53	@ 0x35
 800b694:	d11c      	bne.n	800b6d0 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800b696:	4a54      	ldr	r2, [pc, #336]	@ (800b7e8 <Device_Init+0x380>)
 800b698:	4b4e      	ldr	r3, [pc, #312]	@ (800b7d4 <Device_Init+0x36c>)
 800b69a:	0019      	movs	r1, r3
 800b69c:	2002      	movs	r0, #2
 800b69e:	f006 f8db 	bl	8011858 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800b6a2:	4b3f      	ldr	r3, [pc, #252]	@ (800b7a0 <Device_Init+0x338>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800b6a8:	4b3c      	ldr	r3, [pc, #240]	@ (800b79c <Device_Init+0x334>)
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800b6ae:	f003 fd5f 	bl	800f170 <SGP_SoftReset>
 800b6b2:	e00d      	b.n	800b6d0 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800b6b4:	f000 feba 	bl	800c42c <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800b6b8:	4a4c      	ldr	r2, [pc, #304]	@ (800b7ec <Device_Init+0x384>)
 800b6ba:	4b3b      	ldr	r3, [pc, #236]	@ (800b7a8 <Device_Init+0x340>)
 800b6bc:	0019      	movs	r1, r3
 800b6be:	2003      	movs	r0, #3
 800b6c0:	f006 f8ca 	bl	8011858 <CreateLine>
    SensorProbe.PM_Present = false;
 800b6c4:	4b35      	ldr	r3, [pc, #212]	@ (800b79c <Device_Init+0x334>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800b6ca:	4b35      	ldr	r3, [pc, #212]	@ (800b7a0 <Device_Init+0x338>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800b6d0:	4b32      	ldr	r3, [pc, #200]	@ (800b79c <Device_Init+0x334>)
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d001      	beq.n	800b6dc <Device_Init+0x274>
 800b6d8:	4b45      	ldr	r3, [pc, #276]	@ (800b7f0 <Device_Init+0x388>)
 800b6da:	e000      	b.n	800b6de <Device_Init+0x276>
 800b6dc:	4b45      	ldr	r3, [pc, #276]	@ (800b7f4 <Device_Init+0x38c>)
 800b6de:	4a46      	ldr	r2, [pc, #280]	@ (800b7f8 <Device_Init+0x390>)
 800b6e0:	493c      	ldr	r1, [pc, #240]	@ (800b7d4 <Device_Init+0x36c>)
 800b6e2:	2002      	movs	r0, #2
 800b6e4:	f006 f8b8 	bl	8011858 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800b6e8:	4b2c      	ldr	r3, [pc, #176]	@ (800b79c <Device_Init+0x334>)
 800b6ea:	785b      	ldrb	r3, [r3, #1]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d001      	beq.n	800b6f4 <Device_Init+0x28c>
 800b6f0:	4b3f      	ldr	r3, [pc, #252]	@ (800b7f0 <Device_Init+0x388>)
 800b6f2:	e000      	b.n	800b6f6 <Device_Init+0x28e>
 800b6f4:	4b3f      	ldr	r3, [pc, #252]	@ (800b7f4 <Device_Init+0x38c>)
 800b6f6:	4a41      	ldr	r2, [pc, #260]	@ (800b7fc <Device_Init+0x394>)
 800b6f8:	4936      	ldr	r1, [pc, #216]	@ (800b7d4 <Device_Init+0x36c>)
 800b6fa:	2002      	movs	r0, #2
 800b6fc:	f006 f8ac 	bl	8011858 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800b700:	4b26      	ldr	r3, [pc, #152]	@ (800b79c <Device_Init+0x334>)
 800b702:	789b      	ldrb	r3, [r3, #2]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <Device_Init+0x2a4>
 800b708:	4b39      	ldr	r3, [pc, #228]	@ (800b7f0 <Device_Init+0x388>)
 800b70a:	e000      	b.n	800b70e <Device_Init+0x2a6>
 800b70c:	4b39      	ldr	r3, [pc, #228]	@ (800b7f4 <Device_Init+0x38c>)
 800b70e:	4a3c      	ldr	r2, [pc, #240]	@ (800b800 <Device_Init+0x398>)
 800b710:	4930      	ldr	r1, [pc, #192]	@ (800b7d4 <Device_Init+0x36c>)
 800b712:	2002      	movs	r0, #2
 800b714:	f006 f8a0 	bl	8011858 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800b718:	4b20      	ldr	r3, [pc, #128]	@ (800b79c <Device_Init+0x334>)
 800b71a:	791b      	ldrb	r3, [r3, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <Device_Init+0x2bc>
 800b720:	4b33      	ldr	r3, [pc, #204]	@ (800b7f0 <Device_Init+0x388>)
 800b722:	e000      	b.n	800b726 <Device_Init+0x2be>
 800b724:	4b33      	ldr	r3, [pc, #204]	@ (800b7f4 <Device_Init+0x38c>)
 800b726:	4a37      	ldr	r2, [pc, #220]	@ (800b804 <Device_Init+0x39c>)
 800b728:	492a      	ldr	r1, [pc, #168]	@ (800b7d4 <Device_Init+0x36c>)
 800b72a:	2002      	movs	r0, #2
 800b72c:	f006 f894 	bl	8011858 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800b730:	4b1a      	ldr	r3, [pc, #104]	@ (800b79c <Device_Init+0x334>)
 800b732:	78db      	ldrb	r3, [r3, #3]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d001      	beq.n	800b73c <Device_Init+0x2d4>
 800b738:	4b2d      	ldr	r3, [pc, #180]	@ (800b7f0 <Device_Init+0x388>)
 800b73a:	e000      	b.n	800b73e <Device_Init+0x2d6>
 800b73c:	4b2d      	ldr	r3, [pc, #180]	@ (800b7f4 <Device_Init+0x38c>)
 800b73e:	4a32      	ldr	r2, [pc, #200]	@ (800b808 <Device_Init+0x3a0>)
 800b740:	4924      	ldr	r1, [pc, #144]	@ (800b7d4 <Device_Init+0x36c>)
 800b742:	2002      	movs	r0, #2
 800b744:	f006 f888 	bl	8011858 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800b748:	4b14      	ldr	r3, [pc, #80]	@ (800b79c <Device_Init+0x334>)
 800b74a:	795b      	ldrb	r3, [r3, #5]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <Device_Init+0x2ec>
 800b750:	4b27      	ldr	r3, [pc, #156]	@ (800b7f0 <Device_Init+0x388>)
 800b752:	e000      	b.n	800b756 <Device_Init+0x2ee>
 800b754:	4b27      	ldr	r3, [pc, #156]	@ (800b7f4 <Device_Init+0x38c>)
 800b756:	4a2d      	ldr	r2, [pc, #180]	@ (800b80c <Device_Init+0x3a4>)
 800b758:	491e      	ldr	r1, [pc, #120]	@ (800b7d4 <Device_Init+0x36c>)
 800b75a:	2002      	movs	r0, #2
 800b75c:	f006 f87c 	bl	8011858 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800b760:	4b0e      	ldr	r3, [pc, #56]	@ (800b79c <Device_Init+0x334>)
 800b762:	799b      	ldrb	r3, [r3, #6]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <Device_Init+0x304>
 800b768:	4b21      	ldr	r3, [pc, #132]	@ (800b7f0 <Device_Init+0x388>)
 800b76a:	e000      	b.n	800b76e <Device_Init+0x306>
 800b76c:	4b21      	ldr	r3, [pc, #132]	@ (800b7f4 <Device_Init+0x38c>)
 800b76e:	4a28      	ldr	r2, [pc, #160]	@ (800b810 <Device_Init+0x3a8>)
 800b770:	4918      	ldr	r1, [pc, #96]	@ (800b7d4 <Device_Init+0x36c>)
 800b772:	2002      	movs	r0, #2
 800b774:	f006 f870 	bl	8011858 <CreateLine>
  ESP_Init(espUart);
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	0018      	movs	r0, r3
 800b77c:	f7f9 f826 	bl	80047cc <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800b780:	4a24      	ldr	r2, [pc, #144]	@ (800b814 <Device_Init+0x3ac>)
 800b782:	4b09      	ldr	r3, [pc, #36]	@ (800b7a8 <Device_Init+0x340>)
 800b784:	0019      	movs	r1, r3
 800b786:	2003      	movs	r0, #3
 800b788:	f006 f866 	bl	8011858 <CreateLine>
}
 800b78c:	46c0      	nop			@ (mov r8, r8)
 800b78e:	46bd      	mov	sp, r7
 800b790:	b004      	add	sp, #16
 800b792:	bd80      	pop	{r7, pc}
 800b794:	08029b78 	.word	0x08029b78
 800b798:	08029ba8 	.word	0x08029ba8
 800b79c:	20000e04 	.word	0x20000e04
 800b7a0:	20000dfc 	.word	0x20000dfc
 800b7a4:	08029bac 	.word	0x08029bac
 800b7a8:	08029b74 	.word	0x08029b74
 800b7ac:	08029bd8 	.word	0x08029bd8
 800b7b0:	08029c0c 	.word	0x08029c0c
 800b7b4:	08029c3c 	.word	0x08029c3c
 800b7b8:	08029c58 	.word	0x08029c58
 800b7bc:	08029c70 	.word	0x08029c70
 800b7c0:	08029c8c 	.word	0x08029c8c
 800b7c4:	08029ca4 	.word	0x08029ca4
 800b7c8:	08029cd8 	.word	0x08029cd8
 800b7cc:	50000400 	.word	0x50000400
 800b7d0:	08029d0c 	.word	0x08029d0c
 800b7d4:	08029d30 	.word	0x08029d30
 800b7d8:	08029d34 	.word	0x08029d34
 800b7dc:	08029d60 	.word	0x08029d60
 800b7e0:	08029d8c 	.word	0x08029d8c
 800b7e4:	20000ea0 	.word	0x20000ea0
 800b7e8:	08029da4 	.word	0x08029da4
 800b7ec:	08029df4 	.word	0x08029df4
 800b7f0:	08029e18 	.word	0x08029e18
 800b7f4:	08029e1c 	.word	0x08029e1c
 800b7f8:	08029e20 	.word	0x08029e20
 800b7fc:	08029e3c 	.word	0x08029e3c
 800b800:	08029e58 	.word	0x08029e58
 800b804:	08029e78 	.word	0x08029e78
 800b808:	08029e98 	.word	0x08029e98
 800b80c:	08029eb8 	.word	0x08029eb8
 800b810:	08029ed4 	.word	0x08029ed4
 800b814:	08029ef0 	.word	0x08029ef0

0800b818 <Device_Test>:

void Device_Test(){
 800b818:	b580      	push	{r7, lr}
 800b81a:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800b81c:	4b34      	ldr	r3, [pc, #208]	@ (800b8f0 <Device_Test+0xd8>)
 800b81e:	799b      	ldrb	r3, [r3, #6]
 800b820:	2201      	movs	r2, #1
 800b822:	4053      	eors	r3, r2
 800b824:	b2db      	uxtb	r3, r3
 800b826:	2b00      	cmp	r3, #0
 800b828:	d027      	beq.n	800b87a <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800b82a:	f000 fb65 	bl	800bef8 <MIC_TestMeasurementDone>
 800b82e:	1e03      	subs	r3, r0, #0
 800b830:	d011      	beq.n	800b856 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800b832:	4b2f      	ldr	r3, [pc, #188]	@ (800b8f0 <Device_Test+0xd8>)
 800b834:	2201      	movs	r2, #1
 800b836:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800b838:	4b2e      	ldr	r3, [pc, #184]	@ (800b8f4 <Device_Test+0xdc>)
 800b83a:	2201      	movs	r2, #1
 800b83c:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800b83e:	f004 fd5b 	bl	80102f8 <Calculate_LED_ON>
 800b842:	0003      	movs	r3, r0
 800b844:	0019      	movs	r1, r3
 800b846:	23fa      	movs	r3, #250	@ 0xfa
 800b848:	011a      	lsls	r2, r3, #4
 800b84a:	23fa      	movs	r3, #250	@ 0xfa
 800b84c:	011b      	lsls	r3, r3, #4
 800b84e:	0018      	movs	r0, r3
 800b850:	f004 fd9a 	bl	8010388 <SetStatusLED>
 800b854:	e011      	b.n	800b87a <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800b856:	f003 fea5 	bl	800f5a4 <micSettlingComplete>
 800b85a:	1e03      	subs	r3, r0, #0
 800b85c:	d00d      	beq.n	800b87a <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800b85e:	4b25      	ldr	r3, [pc, #148]	@ (800b8f4 <Device_Test+0xdc>)
 800b860:	2201      	movs	r2, #1
 800b862:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800b864:	f004 fd48 	bl	80102f8 <Calculate_LED_ON>
 800b868:	0003      	movs	r3, r0
 800b86a:	0018      	movs	r0, r3
 800b86c:	23fa      	movs	r3, #250	@ 0xfa
 800b86e:	011a      	lsls	r2, r3, #4
 800b870:	23fa      	movs	r3, #250	@ 0xfa
 800b872:	011b      	lsls	r3, r3, #4
 800b874:	0019      	movs	r1, r3
 800b876:	f004 fd87 	bl	8010388 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800b87a:	4b1d      	ldr	r3, [pc, #116]	@ (800b8f0 <Device_Test+0xd8>)
 800b87c:	79db      	ldrb	r3, [r3, #7]
 800b87e:	2201      	movs	r2, #1
 800b880:	4053      	eors	r3, r2
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d001      	beq.n	800b88c <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800b888:	f7fa fd58 	bl	800633c <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800b88c:	4b18      	ldr	r3, [pc, #96]	@ (800b8f0 <Device_Test+0xd8>)
 800b88e:	79db      	ldrb	r3, [r3, #7]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d003      	beq.n	800b89c <Device_Test+0x84>
 800b894:	4b16      	ldr	r3, [pc, #88]	@ (800b8f0 <Device_Test+0xd8>)
 800b896:	799b      	ldrb	r3, [r3, #6]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d106      	bne.n	800b8aa <Device_Test+0x92>
 800b89c:	4b16      	ldr	r3, [pc, #88]	@ (800b8f8 <Device_Test+0xe0>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	f005 ff83 	bl	80117ac <TimestampIsReached>
 800b8a6:	1e03      	subs	r3, r0, #0
 800b8a8:	d01f      	beq.n	800b8ea <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800b8aa:	4b11      	ldr	r3, [pc, #68]	@ (800b8f0 <Device_Test+0xd8>)
 800b8ac:	79db      	ldrb	r3, [r3, #7]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <Device_Test+0x9e>
 800b8b2:	4b12      	ldr	r3, [pc, #72]	@ (800b8fc <Device_Test+0xe4>)
 800b8b4:	e000      	b.n	800b8b8 <Device_Test+0xa0>
 800b8b6:	4b12      	ldr	r3, [pc, #72]	@ (800b900 <Device_Test+0xe8>)
 800b8b8:	4a12      	ldr	r2, [pc, #72]	@ (800b904 <Device_Test+0xec>)
 800b8ba:	4913      	ldr	r1, [pc, #76]	@ (800b908 <Device_Test+0xf0>)
 800b8bc:	2002      	movs	r0, #2
 800b8be:	f005 ffcb 	bl	8011858 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800b8c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f0 <Device_Test+0xd8>)
 800b8c4:	799b      	ldrb	r3, [r3, #6]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d001      	beq.n	800b8ce <Device_Test+0xb6>
 800b8ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b8fc <Device_Test+0xe4>)
 800b8cc:	e000      	b.n	800b8d0 <Device_Test+0xb8>
 800b8ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b900 <Device_Test+0xe8>)
 800b8d0:	4a0e      	ldr	r2, [pc, #56]	@ (800b90c <Device_Test+0xf4>)
 800b8d2:	490d      	ldr	r1, [pc, #52]	@ (800b908 <Device_Test+0xf0>)
 800b8d4:	2002      	movs	r0, #2
 800b8d6:	f005 ffbf 	bl	8011858 <CreateLine>
    Info("Test completed");
 800b8da:	4a0d      	ldr	r2, [pc, #52]	@ (800b910 <Device_Test+0xf8>)
 800b8dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b908 <Device_Test+0xf0>)
 800b8de:	0019      	movs	r1, r3
 800b8e0:	2002      	movs	r0, #2
 800b8e2:	f005 ffb9 	bl	8011858 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800b8e6:	f7ff f92f 	bl	800ab48 <SetTestDone>
  }
}
 800b8ea:	46c0      	nop			@ (mov r8, r8)
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	20000e04 	.word	0x20000e04
 800b8f4:	20000dfc 	.word	0x20000dfc
 800b8f8:	20000df4 	.word	0x20000df4
 800b8fc:	08029f14 	.word	0x08029f14
 800b900:	08029f1c 	.word	0x08029f1c
 800b904:	08029f24 	.word	0x08029f24
 800b908:	08029d30 	.word	0x08029d30
 800b90c:	08029f38 	.word	0x08029f38
 800b910:	08029f4c 	.word	0x08029f4c

0800b914 <AllDevicesReady>:

bool AllDevicesReady() {
 800b914:	b580      	push	{r7, lr}
 800b916:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 800b918:	4b40      	ldr	r3, [pc, #256]	@ (800ba1c <AllDevicesReady+0x108>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	0018      	movs	r0, r3
 800b91e:	f005 ff45 	bl	80117ac <TimestampIsReached>
 800b922:	1e03      	subs	r3, r0, #0
 800b924:	d100      	bne.n	800b928 <AllDevicesReady+0x14>
 800b926:	e075      	b.n	800ba14 <AllDevicesReady+0x100>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800b928:	4b3d      	ldr	r3, [pc, #244]	@ (800ba20 <AllDevicesReady+0x10c>)
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	2b06      	cmp	r3, #6
 800b92e:	d102      	bne.n	800b936 <AllDevicesReady+0x22>
      Sensor.HT_measurementEnabled = false;
 800b930:	4b3c      	ldr	r3, [pc, #240]	@ (800ba24 <AllDevicesReady+0x110>)
 800b932:	2200      	movs	r2, #0
 800b934:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800b936:	4b3c      	ldr	r3, [pc, #240]	@ (800ba28 <AllDevicesReady+0x114>)
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	2b05      	cmp	r3, #5
 800b93c:	d006      	beq.n	800b94c <AllDevicesReady+0x38>
 800b93e:	4b3b      	ldr	r3, [pc, #236]	@ (800ba2c <AllDevicesReady+0x118>)
 800b940:	789b      	ldrb	r3, [r3, #2]
 800b942:	2201      	movs	r2, #1
 800b944:	4053      	eors	r3, r2
 800b946:	b2db      	uxtb	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <AllDevicesReady+0x3e>
      Sensor.AHT_measurementEnabled = false;
 800b94c:	4b35      	ldr	r3, [pc, #212]	@ (800ba24 <AllDevicesReady+0x110>)
 800b94e:	2200      	movs	r2, #0
 800b950:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800b952:	4b37      	ldr	r3, [pc, #220]	@ (800ba30 <AllDevicesReady+0x11c>)
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	2b08      	cmp	r3, #8
 800b958:	d006      	beq.n	800b968 <AllDevicesReady+0x54>
 800b95a:	4b34      	ldr	r3, [pc, #208]	@ (800ba2c <AllDevicesReady+0x118>)
 800b95c:	791b      	ldrb	r3, [r3, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	4053      	eors	r3, r2
 800b962:	b2db      	uxtb	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	d002      	beq.n	800b96e <AllDevicesReady+0x5a>
      Sensor.BMP_measurementEnabled = false;
 800b968:	4b2e      	ldr	r3, [pc, #184]	@ (800ba24 <AllDevicesReady+0x110>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800b96e:	4b31      	ldr	r3, [pc, #196]	@ (800ba34 <AllDevicesReady+0x120>)
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	2b08      	cmp	r3, #8
 800b974:	d006      	beq.n	800b984 <AllDevicesReady+0x70>
 800b976:	4b2d      	ldr	r3, [pc, #180]	@ (800ba2c <AllDevicesReady+0x118>)
 800b978:	78db      	ldrb	r3, [r3, #3]
 800b97a:	2201      	movs	r2, #1
 800b97c:	4053      	eors	r3, r2
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <AllDevicesReady+0x76>
      Sensor.ENS_measurementEnabled = false;
 800b984:	4b27      	ldr	r3, [pc, #156]	@ (800ba24 <AllDevicesReady+0x110>)
 800b986:	2200      	movs	r2, #0
 800b988:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800b98a:	4b2b      	ldr	r3, [pc, #172]	@ (800ba38 <AllDevicesReady+0x124>)
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	2b07      	cmp	r3, #7
 800b990:	d006      	beq.n	800b9a0 <AllDevicesReady+0x8c>
 800b992:	4b26      	ldr	r3, [pc, #152]	@ (800ba2c <AllDevicesReady+0x118>)
 800b994:	7a1b      	ldrb	r3, [r3, #8]
 800b996:	2201      	movs	r2, #1
 800b998:	4053      	eors	r3, r2
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <AllDevicesReady+0x92>
      Sensor.VOC_measurementEnabled = false;
 800b9a0:	4b20      	ldr	r3, [pc, #128]	@ (800ba24 <AllDevicesReady+0x110>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 800b9a6:	4b25      	ldr	r3, [pc, #148]	@ (800ba3c <AllDevicesReady+0x128>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d102      	bne.n	800b9b4 <AllDevicesReady+0xa0>
      Sensor.PM_measurementEnabled = false;
 800b9ae:	4b1d      	ldr	r3, [pc, #116]	@ (800ba24 <AllDevicesReady+0x110>)
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800b9b4:	4b22      	ldr	r3, [pc, #136]	@ (800ba40 <AllDevicesReady+0x12c>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	2b03      	cmp	r3, #3
 800b9ba:	d102      	bne.n	800b9c2 <AllDevicesReady+0xae>
      Sensor.MIC_measurementEnabled = false;
 800b9bc:	4b19      	ldr	r3, [pc, #100]	@ (800ba24 <AllDevicesReady+0x110>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 800b9c2:	4b20      	ldr	r3, [pc, #128]	@ (800ba44 <AllDevicesReady+0x130>)
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	2b09      	cmp	r3, #9
 800b9c8:	d124      	bne.n	800ba14 <AllDevicesReady+0x100>
      return !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800b9ca:	4b16      	ldr	r3, [pc, #88]	@ (800ba24 <AllDevicesReady+0x110>)
 800b9cc:	781a      	ldrb	r2, [r3, #0]
 800b9ce:	4b15      	ldr	r3, [pc, #84]	@ (800ba24 <AllDevicesReady+0x110>)
 800b9d0:	785b      	ldrb	r3, [r3, #1]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	b2da      	uxtb	r2, r3
 800b9d6:	4b13      	ldr	r3, [pc, #76]	@ (800ba24 <AllDevicesReady+0x110>)
 800b9d8:	791b      	ldrb	r3, [r3, #4]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	4b11      	ldr	r3, [pc, #68]	@ (800ba24 <AllDevicesReady+0x110>)
 800b9e0:	795b      	ldrb	r3, [r3, #5]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800b9e6:	4b0f      	ldr	r3, [pc, #60]	@ (800ba24 <AllDevicesReady+0x110>)
 800b9e8:	799b      	ldrb	r3, [r3, #6]
      return !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800b9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800ba24 <AllDevicesReady+0x110>)
 800b9f0:	789b      	ldrb	r3, [r3, #2]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba24 <AllDevicesReady+0x110>)
 800b9f8:	78db      	ldrb	r3, [r3, #3]
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	1e5a      	subs	r2, r3, #1
 800ba00:	4193      	sbcs	r3, r2
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	2201      	movs	r2, #1
 800ba06:	4053      	eors	r3, r2
 800ba08:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800ba0a:	1c1a      	adds	r2, r3, #0
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	4013      	ands	r3, r2
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	e000      	b.n	800ba16 <AllDevicesReady+0x102>
    }
  }
  return false;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	0018      	movs	r0, r3
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	20000df4 	.word	0x20000df4
 800ba20:	20000e0f 	.word	0x20000e0f
 800ba24:	20000dfc 	.word	0x20000dfc
 800ba28:	20000e10 	.word	0x20000e10
 800ba2c:	20000e04 	.word	0x20000e04
 800ba30:	20000e11 	.word	0x20000e11
 800ba34:	20000e12 	.word	0x20000e12
 800ba38:	20000e0e 	.word	0x20000e0e
 800ba3c:	2000009d 	.word	0x2000009d
 800ba40:	20000de0 	.word	0x20000de0
 800ba44:	20000de1 	.word	0x20000de1

0800ba48 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800ba4c:	4b1b      	ldr	r3, [pc, #108]	@ (800babc <EnabledConnectedDevices+0x74>)
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d002      	beq.n	800ba5a <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800ba54:	4b1a      	ldr	r3, [pc, #104]	@ (800bac0 <EnabledConnectedDevices+0x78>)
 800ba56:	2201      	movs	r2, #1
 800ba58:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800ba5a:	4b18      	ldr	r3, [pc, #96]	@ (800babc <EnabledConnectedDevices+0x74>)
 800ba5c:	789b      	ldrb	r3, [r3, #2]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d002      	beq.n	800ba68 <EnabledConnectedDevices+0x20>
    Sensor.AHT_measurementEnabled = true;
 800ba62:	4b17      	ldr	r3, [pc, #92]	@ (800bac0 <EnabledConnectedDevices+0x78>)
 800ba64:	2201      	movs	r2, #1
 800ba66:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800ba68:	4b14      	ldr	r3, [pc, #80]	@ (800babc <EnabledConnectedDevices+0x74>)
 800ba6a:	791b      	ldrb	r3, [r3, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <EnabledConnectedDevices+0x2e>
    Sensor.BMP_measurementEnabled = true;
 800ba70:	4b13      	ldr	r3, [pc, #76]	@ (800bac0 <EnabledConnectedDevices+0x78>)
 800ba72:	2201      	movs	r2, #1
 800ba74:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800ba76:	4b11      	ldr	r3, [pc, #68]	@ (800babc <EnabledConnectedDevices+0x74>)
 800ba78:	78db      	ldrb	r3, [r3, #3]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d002      	beq.n	800ba84 <EnabledConnectedDevices+0x3c>
    Sensor.ENS_measurementEnabled = true;
 800ba7e:	4b10      	ldr	r3, [pc, #64]	@ (800bac0 <EnabledConnectedDevices+0x78>)
 800ba80:	2201      	movs	r2, #1
 800ba82:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800ba84:	4b0d      	ldr	r3, [pc, #52]	@ (800babc <EnabledConnectedDevices+0x74>)
 800ba86:	785b      	ldrb	r3, [r3, #1]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d006      	beq.n	800ba9a <EnabledConnectedDevices+0x52>
 800ba8c:	4b0b      	ldr	r3, [pc, #44]	@ (800babc <EnabledConnectedDevices+0x74>)
 800ba8e:	7a1b      	ldrb	r3, [r3, #8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <EnabledConnectedDevices+0x52>
    Sensor.VOC_measurementEnabled = true;
 800ba94:	4b0a      	ldr	r3, [pc, #40]	@ (800bac0 <EnabledConnectedDevices+0x78>)
 800ba96:	2201      	movs	r2, #1
 800ba98:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800ba9a:	4b08      	ldr	r3, [pc, #32]	@ (800babc <EnabledConnectedDevices+0x74>)
 800ba9c:	795b      	ldrb	r3, [r3, #5]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d002      	beq.n	800baa8 <EnabledConnectedDevices+0x60>
    Sensor.PM_measurementEnabled = true;
 800baa2:	4b07      	ldr	r3, [pc, #28]	@ (800bac0 <EnabledConnectedDevices+0x78>)
 800baa4:	2201      	movs	r2, #1
 800baa6:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800baa8:	4b04      	ldr	r3, [pc, #16]	@ (800babc <EnabledConnectedDevices+0x74>)
 800baaa:	799b      	ldrb	r3, [r3, #6]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <EnabledConnectedDevices+0x6e>
    Sensor.MIC_measurementEnabled = true;
 800bab0:	4b03      	ldr	r3, [pc, #12]	@ (800bac0 <EnabledConnectedDevices+0x78>)
 800bab2:	2201      	movs	r2, #1
 800bab4:	70da      	strb	r2, [r3, #3]
  }
}
 800bab6:	46c0      	nop			@ (mov r8, r8)
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	20000e04 	.word	0x20000e04
 800bac0:	20000dfc 	.word	0x20000dfc

0800bac4 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800bac4:	b580      	push	{r7, lr}
 800bac6:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 800bac8:	4a0e      	ldr	r2, [pc, #56]	@ (800bb04 <DisableConnectedDevices+0x40>)
 800baca:	4b0f      	ldr	r3, [pc, #60]	@ (800bb08 <DisableConnectedDevices+0x44>)
 800bacc:	0019      	movs	r1, r3
 800bace:	2003      	movs	r0, #3
 800bad0:	f005 fec2 	bl	8011858 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 800bad4:	4b0d      	ldr	r3, [pc, #52]	@ (800bb0c <DisableConnectedDevices+0x48>)
 800bad6:	2200      	movs	r2, #0
 800bad8:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800bada:	4b0c      	ldr	r3, [pc, #48]	@ (800bb0c <DisableConnectedDevices+0x48>)
 800badc:	2200      	movs	r2, #0
 800bade:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800bae0:	4b0a      	ldr	r3, [pc, #40]	@ (800bb0c <DisableConnectedDevices+0x48>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800bae6:	4b09      	ldr	r3, [pc, #36]	@ (800bb0c <DisableConnectedDevices+0x48>)
 800bae8:	2200      	movs	r2, #0
 800baea:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800baec:	4b07      	ldr	r3, [pc, #28]	@ (800bb0c <DisableConnectedDevices+0x48>)
 800baee:	2200      	movs	r2, #0
 800baf0:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800baf2:	4b06      	ldr	r3, [pc, #24]	@ (800bb0c <DisableConnectedDevices+0x48>)
 800baf4:	2200      	movs	r2, #0
 800baf6:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800baf8:	4b04      	ldr	r3, [pc, #16]	@ (800bb0c <DisableConnectedDevices+0x48>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	70da      	strb	r2, [r3, #3]
}
 800bafe:	46c0      	nop			@ (mov r8, r8)
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	08029f5c 	.word	0x08029f5c
 800bb08:	08029b74 	.word	0x08029b74
 800bb0c:	20000dfc 	.word	0x20000dfc

0800bb10 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	0002      	movs	r2, r0
 800bb18:	1dfb      	adds	r3, r7, #7
 800bb1a:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800bb1c:	4b03      	ldr	r3, [pc, #12]	@ (800bb2c <setSensorLock+0x1c>)
 800bb1e:	1dfa      	adds	r2, r7, #7
 800bb20:	7812      	ldrb	r2, [r2, #0]
 800bb22:	701a      	strb	r2, [r3, #0]
}
 800bb24:	46c0      	nop			@ (mov r8, r8)
 800bb26:	46bd      	mov	sp, r7
 800bb28:	b002      	add	sp, #8
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	20000e0d 	.word	0x20000e0d

0800bb30 <getSensorLock>:

uint8_t getSensorLock() {
 800bb30:	b580      	push	{r7, lr}
 800bb32:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800bb34:	4b02      	ldr	r3, [pc, #8]	@ (800bb40 <getSensorLock+0x10>)
 800bb36:	781b      	ldrb	r3, [r3, #0]
}
 800bb38:	0018      	movs	r0, r3
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	46c0      	nop			@ (mov r8, r8)
 800bb40:	20000e0d 	.word	0x20000e0d

0800bb44 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800bb44:	b580      	push	{r7, lr}
 800bb46:	af00      	add	r7, sp, #0
  if (Sensor.HT_measurementEnabled) {
 800bb48:	4b1a      	ldr	r3, [pc, #104]	@ (800bbb4 <UpkeepI2Csensors+0x70>)
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d005      	beq.n	800bb5c <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800bb50:	f006 f9a6 	bl	8011ea0 <HIDS_Upkeep>
 800bb54:	0003      	movs	r3, r0
 800bb56:	001a      	movs	r2, r3
 800bb58:	4b17      	ldr	r3, [pc, #92]	@ (800bbb8 <UpkeepI2Csensors+0x74>)
 800bb5a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800bb5c:	4b15      	ldr	r3, [pc, #84]	@ (800bbb4 <UpkeepI2Csensors+0x70>)
 800bb5e:	785b      	ldrb	r3, [r3, #1]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d005      	beq.n	800bb70 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800bb64:	f003 fb2a 	bl	800f1bc <SGP_Upkeep>
 800bb68:	0003      	movs	r3, r0
 800bb6a:	001a      	movs	r2, r3
 800bb6c:	4b13      	ldr	r3, [pc, #76]	@ (800bbbc <UpkeepI2Csensors+0x78>)
 800bb6e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800bb70:	4b10      	ldr	r3, [pc, #64]	@ (800bbb4 <UpkeepI2Csensors+0x70>)
 800bb72:	791b      	ldrb	r3, [r3, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d005      	beq.n	800bb84 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800bb78:	f7fd fbaa 	bl	80092d0 <AHT_Upkeep>
 800bb7c:	0003      	movs	r3, r0
 800bb7e:	001a      	movs	r2, r3
 800bb80:	4b0f      	ldr	r3, [pc, #60]	@ (800bbc0 <UpkeepI2Csensors+0x7c>)
 800bb82:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800bb84:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb4 <UpkeepI2Csensors+0x70>)
 800bb86:	795b      	ldrb	r3, [r3, #5]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d005      	beq.n	800bb98 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800bb8c:	f7fe f916 	bl	8009dbc <BMP_Upkeep>
 800bb90:	0003      	movs	r3, r0
 800bb92:	001a      	movs	r2, r3
 800bb94:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc4 <UpkeepI2Csensors+0x80>)
 800bb96:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800bb98:	4b06      	ldr	r3, [pc, #24]	@ (800bbb4 <UpkeepI2Csensors+0x70>)
 800bb9a:	799b      	ldrb	r3, [r3, #6]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d005      	beq.n	800bbac <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800bba0:	f7f8 fa38 	bl	8004014 <ENS_Upkeep>
 800bba4:	0003      	movs	r3, r0
 800bba6:	001a      	movs	r2, r3
 800bba8:	4b07      	ldr	r3, [pc, #28]	@ (800bbc8 <UpkeepI2Csensors+0x84>)
 800bbaa:	701a      	strb	r2, [r3, #0]
  }
}
 800bbac:	46c0      	nop			@ (mov r8, r8)
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	46c0      	nop			@ (mov r8, r8)
 800bbb4:	20000dfc 	.word	0x20000dfc
 800bbb8:	20000e0f 	.word	0x20000e0f
 800bbbc:	20000e0e 	.word	0x20000e0e
 800bbc0:	20000e10 	.word	0x20000e10
 800bbc4:	20000e11 	.word	0x20000e11
 800bbc8:	20000e12 	.word	0x20000e12

0800bbcc <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800bbd0:	4b02      	ldr	r3, [pc, #8]	@ (800bbdc <ResetdBAmax+0x10>)
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	601a      	str	r2, [r3, #0]
}
 800bbd6:	46c0      	nop			@ (mov r8, r8)
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	20000e58 	.word	0x20000e58

0800bbe0 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800bbe8:	f006 fa82 	bl	80120f0 <HAL_GetTick>
 800bbec:	0002      	movs	r2, r0
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	18d2      	adds	r2, r2, r3
 800bbf2:	4b03      	ldr	r3, [pc, #12]	@ (800bc00 <setMICTimeStamp+0x20>)
 800bbf4:	601a      	str	r2, [r3, #0]
}
 800bbf6:	46c0      	nop			@ (mov r8, r8)
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	b002      	add	sp, #8
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	46c0      	nop			@ (mov r8, r8)
 800bc00:	20000e60 	.word	0x20000e60

0800bc04 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800bc04:	b580      	push	{r7, lr}
 800bc06:	af00      	add	r7, sp, #0
  counter = 0;
 800bc08:	4b05      	ldr	r3, [pc, #20]	@ (800bc20 <ResetDBACalculator+0x1c>)
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800bc0e:	4b05      	ldr	r3, [pc, #20]	@ (800bc24 <ResetDBACalculator+0x20>)
 800bc10:	2201      	movs	r2, #1
 800bc12:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800bc14:	4b04      	ldr	r3, [pc, #16]	@ (800bc28 <ResetDBACalculator+0x24>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	701a      	strb	r2, [r3, #0]
}
 800bc1a:	46c0      	nop			@ (mov r8, r8)
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	20000e5c 	.word	0x20000e5c
 800bc24:	2000009c 	.word	0x2000009c
 800bc28:	20000e5d 	.word	0x20000e5d

0800bc2c <MIC_Print>:

void MIC_Print(void) {
 800bc2c:	b5b0      	push	{r4, r5, r7, lr}
 800bc2e:	b08a      	sub	sp, #40	@ 0x28
 800bc30:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800bc32:	4b9f      	ldr	r3, [pc, #636]	@ (800beb0 <MIC_Print+0x284>)
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	4b9f      	ldr	r3, [pc, #636]	@ (800beb4 <MIC_Print+0x288>)
 800bc38:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800bc3a:	4b9f      	ldr	r3, [pc, #636]	@ (800beb8 <MIC_Print+0x28c>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	001a      	movs	r2, r3
 800bc40:	4b9c      	ldr	r3, [pc, #624]	@ (800beb4 <MIC_Print+0x288>)
 800bc42:	6819      	ldr	r1, [r3, #0]
 800bc44:	4b9d      	ldr	r3, [pc, #628]	@ (800bebc <MIC_Print+0x290>)
 800bc46:	0092      	lsls	r2, r2, #2
 800bc48:	50d1      	str	r1, [r2, r3]
  counter++;
 800bc4a:	4b9b      	ldr	r3, [pc, #620]	@ (800beb8 <MIC_Print+0x28c>)
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	b2da      	uxtb	r2, r3
 800bc52:	4b99      	ldr	r3, [pc, #612]	@ (800beb8 <MIC_Print+0x28c>)
 800bc54:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800bc56:	4b98      	ldr	r3, [pc, #608]	@ (800beb8 <MIC_Print+0x28c>)
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	2b09      	cmp	r3, #9
 800bc5c:	d80b      	bhi.n	800bc76 <MIC_Print+0x4a>
 800bc5e:	4b98      	ldr	r3, [pc, #608]	@ (800bec0 <MIC_Print+0x294>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2201      	movs	r2, #1
 800bc64:	4053      	eors	r3, r2
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d004      	beq.n	800bc76 <MIC_Print+0x4a>
    denominator = counter;
 800bc6c:	4b92      	ldr	r3, [pc, #584]	@ (800beb8 <MIC_Print+0x28c>)
 800bc6e:	781a      	ldrb	r2, [r3, #0]
 800bc70:	4b94      	ldr	r3, [pc, #592]	@ (800bec4 <MIC_Print+0x298>)
 800bc72:	701a      	strb	r2, [r3, #0]
 800bc74:	e005      	b.n	800bc82 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800bc76:	4b93      	ldr	r3, [pc, #588]	@ (800bec4 <MIC_Print+0x298>)
 800bc78:	220a      	movs	r2, #10
 800bc7a:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800bc7c:	4b90      	ldr	r3, [pc, #576]	@ (800bec0 <MIC_Print+0x294>)
 800bc7e:	2201      	movs	r2, #1
 800bc80:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800bc82:	4b91      	ldr	r3, [pc, #580]	@ (800bec8 <MIC_Print+0x29c>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800bc88:	230f      	movs	r3, #15
 800bc8a:	18fb      	adds	r3, r7, r3
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	701a      	strb	r2, [r3, #0]
 800bc90:	e042      	b.n	800bd18 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800bc92:	240f      	movs	r4, #15
 800bc94:	193b      	adds	r3, r7, r4
 800bc96:	781a      	ldrb	r2, [r3, #0]
 800bc98:	4b88      	ldr	r3, [pc, #544]	@ (800bebc <MIC_Print+0x290>)
 800bc9a:	0092      	lsls	r2, r2, #2
 800bc9c:	58d2      	ldr	r2, [r2, r3]
 800bc9e:	4b8a      	ldr	r3, [pc, #552]	@ (800bec8 <MIC_Print+0x29c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	1c19      	adds	r1, r3, #0
 800bca4:	1c10      	adds	r0, r2, #0
 800bca6:	f7f4 fe0b 	bl	80008c0 <__aeabi_fadd>
 800bcaa:	1c03      	adds	r3, r0, #0
 800bcac:	1c1a      	adds	r2, r3, #0
 800bcae:	4b86      	ldr	r3, [pc, #536]	@ (800bec8 <MIC_Print+0x29c>)
 800bcb0:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800bcb2:	193b      	adds	r3, r7, r4
 800bcb4:	781a      	ldrb	r2, [r3, #0]
 800bcb6:	4b81      	ldr	r3, [pc, #516]	@ (800bebc <MIC_Print+0x290>)
 800bcb8:	0092      	lsls	r2, r2, #2
 800bcba:	58d2      	ldr	r2, [r2, r3]
 800bcbc:	4b83      	ldr	r3, [pc, #524]	@ (800becc <MIC_Print+0x2a0>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	1c19      	adds	r1, r3, #0
 800bcc2:	1c10      	adds	r0, r2, #0
 800bcc4:	f7f4 fc48 	bl	8000558 <__aeabi_fcmpgt>
 800bcc8:	1e03      	subs	r3, r0, #0
 800bcca:	d006      	beq.n	800bcda <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800bccc:	193b      	adds	r3, r7, r4
 800bcce:	781a      	ldrb	r2, [r3, #0]
 800bcd0:	4b7a      	ldr	r3, [pc, #488]	@ (800bebc <MIC_Print+0x290>)
 800bcd2:	0092      	lsls	r2, r2, #2
 800bcd4:	58d2      	ldr	r2, [r2, r3]
 800bcd6:	4b7d      	ldr	r3, [pc, #500]	@ (800becc <MIC_Print+0x2a0>)
 800bcd8:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800bcda:	4b7b      	ldr	r3, [pc, #492]	@ (800bec8 <MIC_Print+0x29c>)
 800bcdc:	681c      	ldr	r4, [r3, #0]
 800bcde:	4b79      	ldr	r3, [pc, #484]	@ (800bec4 <MIC_Print+0x298>)
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	0018      	movs	r0, r3
 800bce4:	f7f5 fcc0 	bl	8001668 <__aeabi_ui2f>
 800bce8:	1c03      	adds	r3, r0, #0
 800bcea:	1c19      	adds	r1, r3, #0
 800bcec:	1c20      	adds	r0, r4, #0
 800bcee:	f7f4 ff71 	bl	8000bd4 <__aeabi_fdiv>
 800bcf2:	1c03      	adds	r3, r0, #0
 800bcf4:	1c1a      	adds	r2, r3, #0
 800bcf6:	4b76      	ldr	r3, [pc, #472]	@ (800bed0 <MIC_Print+0x2a4>)
 800bcf8:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800bcfa:	4b6e      	ldr	r3, [pc, #440]	@ (800beb4 <MIC_Print+0x288>)
 800bcfc:	6818      	ldr	r0, [r3, #0]
 800bcfe:	4b73      	ldr	r3, [pc, #460]	@ (800becc <MIC_Print+0x2a0>)
 800bd00:	6819      	ldr	r1, [r3, #0]
 800bd02:	4b73      	ldr	r3, [pc, #460]	@ (800bed0 <MIC_Print+0x2a4>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	1c1a      	adds	r2, r3, #0
 800bd08:	f7f8 fc7e 	bl	8004608 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800bd0c:	210f      	movs	r1, #15
 800bd0e:	187b      	adds	r3, r7, r1
 800bd10:	781a      	ldrb	r2, [r3, #0]
 800bd12:	187b      	adds	r3, r7, r1
 800bd14:	3201      	adds	r2, #1
 800bd16:	701a      	strb	r2, [r3, #0]
 800bd18:	4b6a      	ldr	r3, [pc, #424]	@ (800bec4 <MIC_Print+0x298>)
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	220f      	movs	r2, #15
 800bd1e:	18ba      	adds	r2, r7, r2
 800bd20:	7812      	ldrb	r2, [r2, #0]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d3b5      	bcc.n	800bc92 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800bd26:	4b63      	ldr	r3, [pc, #396]	@ (800beb4 <MIC_Print+0x288>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	1c18      	adds	r0, r3, #0
 800bd2c:	f7f7 fb9a 	bl	8003464 <__aeabi_f2d>
 800bd30:	6038      	str	r0, [r7, #0]
 800bd32:	6079      	str	r1, [r7, #4]
 800bd34:	4b65      	ldr	r3, [pc, #404]	@ (800becc <MIC_Print+0x2a0>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	1c18      	adds	r0, r3, #0
 800bd3a:	f7f7 fb93 	bl	8003464 <__aeabi_f2d>
 800bd3e:	0004      	movs	r4, r0
 800bd40:	000d      	movs	r5, r1
 800bd42:	4b63      	ldr	r3, [pc, #396]	@ (800bed0 <MIC_Print+0x2a4>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	1c18      	adds	r0, r3, #0
 800bd48:	f7f7 fb8c 	bl	8003464 <__aeabi_f2d>
 800bd4c:	0002      	movs	r2, r0
 800bd4e:	000b      	movs	r3, r1
 800bd50:	4960      	ldr	r1, [pc, #384]	@ (800bed4 <MIC_Print+0x2a8>)
 800bd52:	9204      	str	r2, [sp, #16]
 800bd54:	9305      	str	r3, [sp, #20]
 800bd56:	9402      	str	r4, [sp, #8]
 800bd58:	9503      	str	r5, [sp, #12]
 800bd5a:	4b5f      	ldr	r3, [pc, #380]	@ (800bed8 <MIC_Print+0x2ac>)
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	0008      	movs	r0, r1
 800bd64:	f017 fd00 	bl	8023768 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800bd68:	4b53      	ldr	r3, [pc, #332]	@ (800beb8 <MIC_Print+0x28c>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	2b0a      	cmp	r3, #10
 800bd6e:	d902      	bls.n	800bd76 <MIC_Print+0x14a>
    counter = 0;
 800bd70:	4b51      	ldr	r3, [pc, #324]	@ (800beb8 <MIC_Print+0x28c>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800bd76:	4b4f      	ldr	r3, [pc, #316]	@ (800beb4 <MIC_Print+0x288>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4958      	ldr	r1, [pc, #352]	@ (800bedc <MIC_Print+0x2b0>)
 800bd7c:	1c18      	adds	r0, r3, #0
 800bd7e:	f7f4 fbf5 	bl	800056c <__aeabi_fcmpge>
 800bd82:	1e03      	subs	r3, r0, #0
 800bd84:	d004      	beq.n	800bd90 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800bd86:	2201      	movs	r2, #1
 800bd88:	2101      	movs	r1, #1
 800bd8a:	2001      	movs	r0, #1
 800bd8c:	f004 fb30 	bl	80103f0 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800bd90:	4b48      	ldr	r3, [pc, #288]	@ (800beb4 <MIC_Print+0x288>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4952      	ldr	r1, [pc, #328]	@ (800bee0 <MIC_Print+0x2b4>)
 800bd96:	1c18      	adds	r0, r3, #0
 800bd98:	f7f4 fbe8 	bl	800056c <__aeabi_fcmpge>
 800bd9c:	1e03      	subs	r3, r0, #0
 800bd9e:	d00c      	beq.n	800bdba <MIC_Print+0x18e>
 800bda0:	4b44      	ldr	r3, [pc, #272]	@ (800beb4 <MIC_Print+0x288>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	494d      	ldr	r1, [pc, #308]	@ (800bedc <MIC_Print+0x2b0>)
 800bda6:	1c18      	adds	r0, r3, #0
 800bda8:	f7f4 fbc2 	bl	8000530 <__aeabi_fcmplt>
 800bdac:	1e03      	subs	r3, r0, #0
 800bdae:	d004      	beq.n	800bdba <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	2001      	movs	r0, #1
 800bdb6:	f004 fb1b 	bl	80103f0 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800bdba:	4b3e      	ldr	r3, [pc, #248]	@ (800beb4 <MIC_Print+0x288>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4949      	ldr	r1, [pc, #292]	@ (800bee4 <MIC_Print+0x2b8>)
 800bdc0:	1c18      	adds	r0, r3, #0
 800bdc2:	f7f4 fbd3 	bl	800056c <__aeabi_fcmpge>
 800bdc6:	1e03      	subs	r3, r0, #0
 800bdc8:	d00c      	beq.n	800bde4 <MIC_Print+0x1b8>
 800bdca:	4b3a      	ldr	r3, [pc, #232]	@ (800beb4 <MIC_Print+0x288>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4944      	ldr	r1, [pc, #272]	@ (800bee0 <MIC_Print+0x2b4>)
 800bdd0:	1c18      	adds	r0, r3, #0
 800bdd2:	f7f4 fbad 	bl	8000530 <__aeabi_fcmplt>
 800bdd6:	1e03      	subs	r3, r0, #0
 800bdd8:	d004      	beq.n	800bde4 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800bdda:	2200      	movs	r2, #0
 800bddc:	2101      	movs	r1, #1
 800bdde:	2001      	movs	r0, #1
 800bde0:	f004 fb06 	bl	80103f0 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800bde4:	4b33      	ldr	r3, [pc, #204]	@ (800beb4 <MIC_Print+0x288>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	493f      	ldr	r1, [pc, #252]	@ (800bee8 <MIC_Print+0x2bc>)
 800bdea:	1c18      	adds	r0, r3, #0
 800bdec:	f7f4 fbbe 	bl	800056c <__aeabi_fcmpge>
 800bdf0:	1e03      	subs	r3, r0, #0
 800bdf2:	d00c      	beq.n	800be0e <MIC_Print+0x1e2>
 800bdf4:	4b2f      	ldr	r3, [pc, #188]	@ (800beb4 <MIC_Print+0x288>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	493a      	ldr	r1, [pc, #232]	@ (800bee4 <MIC_Print+0x2b8>)
 800bdfa:	1c18      	adds	r0, r3, #0
 800bdfc:	f7f4 fb98 	bl	8000530 <__aeabi_fcmplt>
 800be00:	1e03      	subs	r3, r0, #0
 800be02:	d004      	beq.n	800be0e <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800be04:	2200      	movs	r2, #0
 800be06:	2101      	movs	r1, #1
 800be08:	2000      	movs	r0, #0
 800be0a:	f004 faf1 	bl	80103f0 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800be0e:	4b29      	ldr	r3, [pc, #164]	@ (800beb4 <MIC_Print+0x288>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4936      	ldr	r1, [pc, #216]	@ (800beec <MIC_Print+0x2c0>)
 800be14:	1c18      	adds	r0, r3, #0
 800be16:	f7f4 fba9 	bl	800056c <__aeabi_fcmpge>
 800be1a:	1e03      	subs	r3, r0, #0
 800be1c:	d00c      	beq.n	800be38 <MIC_Print+0x20c>
 800be1e:	4b25      	ldr	r3, [pc, #148]	@ (800beb4 <MIC_Print+0x288>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4931      	ldr	r1, [pc, #196]	@ (800bee8 <MIC_Print+0x2bc>)
 800be24:	1c18      	adds	r0, r3, #0
 800be26:	f7f4 fb83 	bl	8000530 <__aeabi_fcmplt>
 800be2a:	1e03      	subs	r3, r0, #0
 800be2c:	d004      	beq.n	800be38 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800be2e:	2201      	movs	r2, #1
 800be30:	2101      	movs	r1, #1
 800be32:	2000      	movs	r0, #0
 800be34:	f004 fadc 	bl	80103f0 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800be38:	4b1e      	ldr	r3, [pc, #120]	@ (800beb4 <MIC_Print+0x288>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	492c      	ldr	r1, [pc, #176]	@ (800bef0 <MIC_Print+0x2c4>)
 800be3e:	1c18      	adds	r0, r3, #0
 800be40:	f7f4 fb94 	bl	800056c <__aeabi_fcmpge>
 800be44:	1e03      	subs	r3, r0, #0
 800be46:	d00c      	beq.n	800be62 <MIC_Print+0x236>
 800be48:	4b1a      	ldr	r3, [pc, #104]	@ (800beb4 <MIC_Print+0x288>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4927      	ldr	r1, [pc, #156]	@ (800beec <MIC_Print+0x2c0>)
 800be4e:	1c18      	adds	r0, r3, #0
 800be50:	f7f4 fb6e 	bl	8000530 <__aeabi_fcmplt>
 800be54:	1e03      	subs	r3, r0, #0
 800be56:	d004      	beq.n	800be62 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800be58:	2201      	movs	r2, #1
 800be5a:	2100      	movs	r1, #0
 800be5c:	2000      	movs	r0, #0
 800be5e:	f004 fac7 	bl	80103f0 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800be62:	4b14      	ldr	r3, [pc, #80]	@ (800beb4 <MIC_Print+0x288>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4923      	ldr	r1, [pc, #140]	@ (800bef4 <MIC_Print+0x2c8>)
 800be68:	1c18      	adds	r0, r3, #0
 800be6a:	f7f4 fb7f 	bl	800056c <__aeabi_fcmpge>
 800be6e:	1e03      	subs	r3, r0, #0
 800be70:	d00c      	beq.n	800be8c <MIC_Print+0x260>
 800be72:	4b10      	ldr	r3, [pc, #64]	@ (800beb4 <MIC_Print+0x288>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	491e      	ldr	r1, [pc, #120]	@ (800bef0 <MIC_Print+0x2c4>)
 800be78:	1c18      	adds	r0, r3, #0
 800be7a:	f7f4 fb59 	bl	8000530 <__aeabi_fcmplt>
 800be7e:	1e03      	subs	r3, r0, #0
 800be80:	d004      	beq.n	800be8c <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800be82:	2201      	movs	r2, #1
 800be84:	2100      	movs	r1, #0
 800be86:	2001      	movs	r0, #1
 800be88:	f004 fab2 	bl	80103f0 <SetDBLED>
  }
  if(dBA < 35){//off
 800be8c:	4b09      	ldr	r3, [pc, #36]	@ (800beb4 <MIC_Print+0x288>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4918      	ldr	r1, [pc, #96]	@ (800bef4 <MIC_Print+0x2c8>)
 800be92:	1c18      	adds	r0, r3, #0
 800be94:	f7f4 fb4c 	bl	8000530 <__aeabi_fcmplt>
 800be98:	1e03      	subs	r3, r0, #0
 800be9a:	d100      	bne.n	800be9e <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800be9c:	e004      	b.n	800bea8 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800be9e:	2200      	movs	r2, #0
 800bea0:	2100      	movs	r1, #0
 800bea2:	2000      	movs	r0, #0
 800bea4:	f004 faa4 	bl	80103f0 <SetDBLED>
}
 800bea8:	46c0      	nop			@ (mov r8, r8)
 800beaa:	46bd      	mov	sp, r7
 800beac:	b004      	add	sp, #16
 800beae:	bdb0      	pop	{r4, r5, r7, pc}
 800beb0:	20000e54 	.word	0x20000e54
 800beb4:	20000e20 	.word	0x20000e20
 800beb8:	20000e5c 	.word	0x20000e5c
 800bebc:	20000e24 	.word	0x20000e24
 800bec0:	20000e5d 	.word	0x20000e5d
 800bec4:	2000009c 	.word	0x2000009c
 800bec8:	20000e50 	.word	0x20000e50
 800becc:	20000e58 	.word	0x20000e58
 800bed0:	20000e4c 	.word	0x20000e4c
 800bed4:	08029f70 	.word	0x08029f70
 800bed8:	20000e14 	.word	0x20000e14
 800bedc:	42b40000 	.word	0x42b40000
 800bee0:	42a00000 	.word	0x42a00000
 800bee4:	428c0000 	.word	0x428c0000
 800bee8:	42700000 	.word	0x42700000
 800beec:	42480000 	.word	0x42480000
 800bef0:	42200000 	.word	0x42200000
 800bef4:	420c0000 	.word	0x420c0000

0800bef8 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800befe:	4b11      	ldr	r3, [pc, #68]	@ (800bf44 <MIC_TestMeasurementDone+0x4c>)
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	4a10      	ldr	r2, [pc, #64]	@ (800bf48 <MIC_TestMeasurementDone+0x50>)
 800bf06:	4911      	ldr	r1, [pc, #68]	@ (800bf4c <MIC_TestMeasurementDone+0x54>)
 800bf08:	2002      	movs	r0, #2
 800bf0a:	f005 fca5 	bl	8011858 <CreateLine>
  if(DataReady) {
 800bf0e:	4b0d      	ldr	r3, [pc, #52]	@ (800bf44 <MIC_TestMeasurementDone+0x4c>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d010      	beq.n	800bf3a <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800bf18:	1dfb      	adds	r3, r7, #7
 800bf1a:	4a0d      	ldr	r2, [pc, #52]	@ (800bf50 <MIC_TestMeasurementDone+0x58>)
 800bf1c:	7812      	ldrb	r2, [r2, #0]
 800bf1e:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800bf20:	4b0b      	ldr	r3, [pc, #44]	@ (800bf50 <MIC_TestMeasurementDone+0x58>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	4a0b      	ldr	r2, [pc, #44]	@ (800bf54 <MIC_TestMeasurementDone+0x5c>)
 800bf28:	4908      	ldr	r1, [pc, #32]	@ (800bf4c <MIC_TestMeasurementDone+0x54>)
 800bf2a:	2002      	movs	r0, #2
 800bf2c:	f005 fc94 	bl	8011858 <CreateLine>
    ResetMICIndicator();
 800bf30:	f004 fb4c 	bl	80105cc <ResetMICIndicator>
    return Check;
 800bf34:	1dfb      	adds	r3, r7, #7
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	e000      	b.n	800bf3c <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	0018      	movs	r0, r3
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	b002      	add	sp, #8
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	20000f91 	.word	0x20000f91
 800bf48:	08029fb8 	.word	0x08029fb8
 800bf4c:	08029fe4 	.word	0x08029fe4
 800bf50:	20000f92 	.word	0x20000f92
 800bf54:	08029fe8 	.word	0x08029fe8

0800bf58 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800bf5e:	4b78      	ldr	r3, [pc, #480]	@ (800c140 <Mic_Upkeep+0x1e8>)
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	2b03      	cmp	r3, #3
 800bf64:	d100      	bne.n	800bf68 <Mic_Upkeep+0x10>
 800bf66:	e0b8      	b.n	800c0da <Mic_Upkeep+0x182>
 800bf68:	dd00      	ble.n	800bf6c <Mic_Upkeep+0x14>
 800bf6a:	e0d3      	b.n	800c114 <Mic_Upkeep+0x1bc>
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d037      	beq.n	800bfe0 <Mic_Upkeep+0x88>
 800bf70:	dd00      	ble.n	800bf74 <Mic_Upkeep+0x1c>
 800bf72:	e0cf      	b.n	800c114 <Mic_Upkeep+0x1bc>
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d002      	beq.n	800bf7e <Mic_Upkeep+0x26>
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d014      	beq.n	800bfa6 <Mic_Upkeep+0x4e>
 800bf7c:	e0ca      	b.n	800c114 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800bf7e:	2001      	movs	r0, #1
 800bf80:	f003 fb34 	bl	800f5ec <enableMicrophone>
 800bf84:	0003      	movs	r3, r0
 800bf86:	001a      	movs	r2, r3
 800bf88:	2301      	movs	r3, #1
 800bf8a:	4053      	eors	r3, r2
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d005      	beq.n	800bf9e <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800bf92:	4a6c      	ldr	r2, [pc, #432]	@ (800c144 <Mic_Upkeep+0x1ec>)
 800bf94:	4b6c      	ldr	r3, [pc, #432]	@ (800c148 <Mic_Upkeep+0x1f0>)
 800bf96:	217f      	movs	r1, #127	@ 0x7f
 800bf98:	0018      	movs	r0, r3
 800bf9a:	f005 fd15 	bl	80119c8 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800bf9e:	4b68      	ldr	r3, [pc, #416]	@ (800c140 <Mic_Upkeep+0x1e8>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	701a      	strb	r2, [r3, #0]
    break;
 800bfa4:	e0c5      	b.n	800c132 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800bfa6:	f003 fafd 	bl	800f5a4 <micSettlingComplete>
 800bfaa:	1e03      	subs	r3, r0, #0
 800bfac:	d105      	bne.n	800bfba <Mic_Upkeep+0x62>
 800bfae:	4b67      	ldr	r3, [pc, #412]	@ (800c14c <Mic_Upkeep+0x1f4>)
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d100      	bne.n	800bfba <Mic_Upkeep+0x62>
 800bfb8:	e0b6      	b.n	800c128 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800bfba:	f003 fb81 	bl	800f6c0 <startSPLcalculation>
 800bfbe:	0003      	movs	r3, r0
 800bfc0:	001a      	movs	r2, r3
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	4053      	eors	r3, r2
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d005      	beq.n	800bfd8 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800bfcc:	4a5d      	ldr	r2, [pc, #372]	@ (800c144 <Mic_Upkeep+0x1ec>)
 800bfce:	4b5e      	ldr	r3, [pc, #376]	@ (800c148 <Mic_Upkeep+0x1f0>)
 800bfd0:	2188      	movs	r1, #136	@ 0x88
 800bfd2:	0018      	movs	r0, r3
 800bfd4:	f005 fcf8 	bl	80119c8 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800bfd8:	4b59      	ldr	r3, [pc, #356]	@ (800c140 <Mic_Upkeep+0x1e8>)
 800bfda:	2202      	movs	r2, #2
 800bfdc:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bfde:	e0a3      	b.n	800c128 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800bfe0:	4b5b      	ldr	r3, [pc, #364]	@ (800c150 <Mic_Upkeep+0x1f8>)
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	0018      	movs	r0, r3
 800bfe8:	f003 f9be 	bl	800f368 <getSoundData>
 800bfec:	1e03      	subs	r3, r0, #0
 800bfee:	d100      	bne.n	800bff2 <Mic_Upkeep+0x9a>
 800bff0:	e09c      	b.n	800c12c <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800bff2:	f003 fab7 	bl	800f564 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800bff6:	4b56      	ldr	r3, [pc, #344]	@ (800c150 <Mic_Upkeep+0x1f8>)
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	001a      	movs	r2, r3
 800bffc:	4b54      	ldr	r3, [pc, #336]	@ (800c150 <Mic_Upkeep+0x1f8>)
 800bffe:	785b      	ldrb	r3, [r3, #1]
 800c000:	4954      	ldr	r1, [pc, #336]	@ (800c154 <Mic_Upkeep+0x1fc>)
 800c002:	0038      	movs	r0, r7
 800c004:	f017 fc20 	bl	8023848 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800c008:	4b51      	ldr	r3, [pc, #324]	@ (800c150 <Mic_Upkeep+0x1f8>)
 800c00a:	89db      	ldrh	r3, [r3, #14]
 800c00c:	001a      	movs	r2, r3
 800c00e:	4b50      	ldr	r3, [pc, #320]	@ (800c150 <Mic_Upkeep+0x1f8>)
 800c010:	7c1b      	ldrb	r3, [r3, #16]
 800c012:	4951      	ldr	r1, [pc, #324]	@ (800c158 <Mic_Upkeep+0x200>)
 800c014:	4851      	ldr	r0, [pc, #324]	@ (800c15c <Mic_Upkeep+0x204>)
 800c016:	f017 fc17 	bl	8023848 <siprintf>
      dBValue = atof(dBbuffer);
 800c01a:	003b      	movs	r3, r7
 800c01c:	0018      	movs	r0, r3
 800c01e:	f015 ffc3 	bl	8021fa8 <atof>
 800c022:	0002      	movs	r2, r0
 800c024:	000b      	movs	r3, r1
 800c026:	0010      	movs	r0, r2
 800c028:	0019      	movs	r1, r3
 800c02a:	f7f7 fa63 	bl	80034f4 <__aeabi_d2f>
 800c02e:	1c02      	adds	r2, r0, #0
 800c030:	4b4b      	ldr	r3, [pc, #300]	@ (800c160 <Mic_Upkeep+0x208>)
 800c032:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800c034:	4b4a      	ldr	r3, [pc, #296]	@ (800c160 <Mic_Upkeep+0x208>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	494a      	ldr	r1, [pc, #296]	@ (800c164 <Mic_Upkeep+0x20c>)
 800c03a:	1c18      	adds	r0, r3, #0
 800c03c:	f7f4 ffb0 	bl	8000fa0 <__aeabi_fmul>
 800c040:	1c03      	adds	r3, r0, #0
 800c042:	1c18      	adds	r0, r3, #0
 800c044:	f7f7 fa0e 	bl	8003464 <__aeabi_f2d>
 800c048:	2200      	movs	r2, #0
 800c04a:	4b47      	ldr	r3, [pc, #284]	@ (800c168 <Mic_Upkeep+0x210>)
 800c04c:	f7f5 fb4e 	bl	80016ec <__aeabi_dadd>
 800c050:	0002      	movs	r2, r0
 800c052:	000b      	movs	r3, r1
 800c054:	0010      	movs	r0, r2
 800c056:	0019      	movs	r1, r3
 800c058:	f7f7 f976 	bl	8003348 <__aeabi_d2iz>
 800c05c:	0003      	movs	r3, r0
 800c05e:	0018      	movs	r0, r3
 800c060:	f7f7 f9ae 	bl	80033c0 <__aeabi_i2d>
 800c064:	2200      	movs	r2, #0
 800c066:	4b41      	ldr	r3, [pc, #260]	@ (800c16c <Mic_Upkeep+0x214>)
 800c068:	f7f5 fea4 	bl	8001db4 <__aeabi_ddiv>
 800c06c:	0002      	movs	r2, r0
 800c06e:	000b      	movs	r3, r1
 800c070:	0010      	movs	r0, r2
 800c072:	0019      	movs	r1, r3
 800c074:	f7f7 fa3e 	bl	80034f4 <__aeabi_d2f>
 800c078:	1c02      	adds	r2, r0, #0
 800c07a:	4b39      	ldr	r3, [pc, #228]	@ (800c160 <Mic_Upkeep+0x208>)
 800c07c:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800c07e:	f7ff fdd5 	bl	800bc2c <MIC_Print>
      if (!startSPLcalculation()) {
 800c082:	f003 fb1d 	bl	800f6c0 <startSPLcalculation>
 800c086:	0003      	movs	r3, r0
 800c088:	001a      	movs	r2, r3
 800c08a:	2301      	movs	r3, #1
 800c08c:	4053      	eors	r3, r2
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b00      	cmp	r3, #0
 800c092:	d005      	beq.n	800c0a0 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800c094:	4a2b      	ldr	r2, [pc, #172]	@ (800c144 <Mic_Upkeep+0x1ec>)
 800c096:	4b2c      	ldr	r3, [pc, #176]	@ (800c148 <Mic_Upkeep+0x1f0>)
 800c098:	2198      	movs	r1, #152	@ 0x98
 800c09a:	0018      	movs	r0, r3
 800c09c:	f005 fc94 	bl	80119c8 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	f003 faa3 	bl	800f5ec <enableMicrophone>
 800c0a6:	0003      	movs	r3, r0
 800c0a8:	001a      	movs	r2, r3
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	4053      	eors	r3, r2
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d005      	beq.n	800c0c0 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800c0b4:	4a23      	ldr	r2, [pc, #140]	@ (800c144 <Mic_Upkeep+0x1ec>)
 800c0b6:	4b24      	ldr	r3, [pc, #144]	@ (800c148 <Mic_Upkeep+0x1f0>)
 800c0b8:	219b      	movs	r1, #155	@ 0x9b
 800c0ba:	0018      	movs	r0, r3
 800c0bc:	f005 fc84 	bl	80119c8 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800c0c0:	f006 f816 	bl	80120f0 <HAL_GetTick>
 800c0c4:	0003      	movs	r3, r0
 800c0c6:	4a2a      	ldr	r2, [pc, #168]	@ (800c170 <Mic_Upkeep+0x218>)
 800c0c8:	189a      	adds	r2, r3, r2
 800c0ca:	4b2a      	ldr	r3, [pc, #168]	@ (800c174 <Mic_Upkeep+0x21c>)
 800c0cc:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800c0ce:	4b1c      	ldr	r3, [pc, #112]	@ (800c140 <Mic_Upkeep+0x1e8>)
 800c0d0:	2203      	movs	r2, #3
 800c0d2:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800c0d4:	f004 fa7a 	bl	80105cc <ResetMICIndicator>
    }
    break;
 800c0d8:	e028      	b.n	800c12c <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800c0da:	4b26      	ldr	r3, [pc, #152]	@ (800c174 <Mic_Upkeep+0x21c>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	0018      	movs	r0, r3
 800c0e0:	f005 fb64 	bl	80117ac <TimestampIsReached>
 800c0e4:	1e03      	subs	r3, r0, #0
 800c0e6:	d023      	beq.n	800c130 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800c0e8:	2001      	movs	r0, #1
 800c0ea:	f003 fa7f 	bl	800f5ec <enableMicrophone>
 800c0ee:	0003      	movs	r3, r0
 800c0f0:	001a      	movs	r2, r3
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	4053      	eors	r3, r2
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d005      	beq.n	800c108 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800c0fc:	4a11      	ldr	r2, [pc, #68]	@ (800c144 <Mic_Upkeep+0x1ec>)
 800c0fe:	4b12      	ldr	r3, [pc, #72]	@ (800c148 <Mic_Upkeep+0x1f0>)
 800c100:	21a6      	movs	r1, #166	@ 0xa6
 800c102:	0018      	movs	r0, r3
 800c104:	f005 fc60 	bl	80119c8 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800c108:	4b0d      	ldr	r3, [pc, #52]	@ (800c140 <Mic_Upkeep+0x1e8>)
 800c10a:	2201      	movs	r2, #1
 800c10c:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800c10e:	f004 fa1b 	bl	8010548 <SetMICIndicator>
    }
    break;
 800c112:	e00d      	b.n	800c130 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800c114:	4a18      	ldr	r2, [pc, #96]	@ (800c178 <Mic_Upkeep+0x220>)
 800c116:	4b19      	ldr	r3, [pc, #100]	@ (800c17c <Mic_Upkeep+0x224>)
 800c118:	0019      	movs	r1, r3
 800c11a:	2003      	movs	r0, #3
 800c11c:	f005 fb9c 	bl	8011858 <CreateLine>
    MicState = MIC_STATE_INIT;
 800c120:	4b07      	ldr	r3, [pc, #28]	@ (800c140 <Mic_Upkeep+0x1e8>)
 800c122:	2200      	movs	r2, #0
 800c124:	701a      	strb	r2, [r3, #0]
    break;
 800c126:	e004      	b.n	800c132 <Mic_Upkeep+0x1da>
    break;
 800c128:	46c0      	nop			@ (mov r8, r8)
 800c12a:	e002      	b.n	800c132 <Mic_Upkeep+0x1da>
    break;
 800c12c:	46c0      	nop			@ (mov r8, r8)
 800c12e:	e000      	b.n	800c132 <Mic_Upkeep+0x1da>
    break;
 800c130:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800c132:	4b03      	ldr	r3, [pc, #12]	@ (800c140 <Mic_Upkeep+0x1e8>)
 800c134:	781b      	ldrb	r3, [r3, #0]
}
 800c136:	0018      	movs	r0, r3
 800c138:	46bd      	mov	sp, r7
 800c13a:	b002      	add	sp, #8
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	46c0      	nop			@ (mov r8, r8)
 800c140:	20000e76 	.word	0x20000e76
 800c144:	0802a000 	.word	0x0802a000
 800c148:	0802b10c 	.word	0x0802b10c
 800c14c:	20000f91 	.word	0x20000f91
 800c150:	20000e64 	.word	0x20000e64
 800c154:	0802a01c 	.word	0x0802a01c
 800c158:	0802a024 	.word	0x0802a024
 800c15c:	20000e14 	.word	0x20000e14
 800c160:	20000e54 	.word	0x20000e54
 800c164:	42c80000 	.word	0x42c80000
 800c168:	3fe00000 	.word	0x3fe00000
 800c16c:	40590000 	.word	0x40590000
 800c170:	000002f3 	.word	0x000002f3
 800c174:	20000e60 	.word	0x20000e60
 800c178:	0802a02c 	.word	0x0802a02c
 800c17c:	0802a04c 	.word	0x0802a04c

0800c180 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800c186:	1d3b      	adds	r3, r7, #4
 800c188:	0018      	movs	r0, r3
 800c18a:	2314      	movs	r3, #20
 800c18c:	001a      	movs	r2, r3
 800c18e:	2100      	movs	r1, #0
 800c190:	f017 fcc0 	bl	8023b14 <memset>
  RTC_DateTypeDef sDate = {0};
 800c194:	003b      	movs	r3, r7
 800c196:	2200      	movs	r2, #0
 800c198:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800c19a:	4b2e      	ldr	r3, [pc, #184]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c19c:	4a2e      	ldr	r2, [pc, #184]	@ (800c258 <MX_RTC_Init+0xd8>)
 800c19e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c1a0:	4b2c      	ldr	r3, [pc, #176]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c1a6:	4b2b      	ldr	r3, [pc, #172]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c1a8:	227f      	movs	r2, #127	@ 0x7f
 800c1aa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c1ac:	4b29      	ldr	r3, [pc, #164]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c1ae:	22ff      	movs	r2, #255	@ 0xff
 800c1b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c1b2:	4b28      	ldr	r3, [pc, #160]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800c1b8:	4b26      	ldr	r3, [pc, #152]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c1be:	4b25      	ldr	r3, [pc, #148]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c1c4:	4b23      	ldr	r3, [pc, #140]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c1ca:	4b22      	ldr	r3, [pc, #136]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c1cc:	0018      	movs	r0, r3
 800c1ce:	f00d faab 	bl	8019728 <HAL_RTC_Init>
 800c1d2:	1e03      	subs	r3, r0, #0
 800c1d4:	d001      	beq.n	800c1da <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800c1d6:	f7ff f869 	bl	800b2ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800c1da:	1d3b      	adds	r3, r7, #4
 800c1dc:	220d      	movs	r2, #13
 800c1de:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800c1e0:	1d3b      	adds	r3, r7, #4
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800c1e6:	1d3b      	adds	r3, r7, #4
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c1ec:	1d3b      	adds	r3, r7, #4
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c1f2:	1d3b      	adds	r3, r7, #4
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800c1f8:	1d39      	adds	r1, r7, #4
 800c1fa:	4b16      	ldr	r3, [pc, #88]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	0018      	movs	r0, r3
 800c200:	f00d fb2e 	bl	8019860 <HAL_RTC_SetTime>
 800c204:	1e03      	subs	r3, r0, #0
 800c206:	d001      	beq.n	800c20c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800c208:	f7ff f850 	bl	800b2ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800c20c:	003b      	movs	r3, r7
 800c20e:	2206      	movs	r2, #6
 800c210:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800c212:	003b      	movs	r3, r7
 800c214:	2211      	movs	r2, #17
 800c216:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800c218:	003b      	movs	r3, r7
 800c21a:	2217      	movs	r2, #23
 800c21c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800c21e:	003b      	movs	r3, r7
 800c220:	2218      	movs	r2, #24
 800c222:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800c224:	0039      	movs	r1, r7
 800c226:	4b0b      	ldr	r3, [pc, #44]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c228:	2200      	movs	r2, #0
 800c22a:	0018      	movs	r0, r3
 800c22c:	f00d fc20 	bl	8019a70 <HAL_RTC_SetDate>
 800c230:	1e03      	subs	r3, r0, #0
 800c232:	d001      	beq.n	800c238 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800c234:	f7ff f83a 	bl	800b2ac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800c238:	4b06      	ldr	r3, [pc, #24]	@ (800c254 <MX_RTC_Init+0xd4>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	2100      	movs	r1, #0
 800c23e:	0018      	movs	r0, r3
 800c240:	f00d fdd0 	bl	8019de4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800c244:	1e03      	subs	r3, r0, #0
 800c246:	d001      	beq.n	800c24c <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800c248:	f7ff f830 	bl	800b2ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800c24c:	46c0      	nop			@ (mov r8, r8)
 800c24e:	46bd      	mov	sp, r7
 800c250:	b006      	add	sp, #24
 800c252:	bd80      	pop	{r7, pc}
 800c254:	20000e78 	.word	0x20000e78
 800c258:	40002800 	.word	0x40002800

0800c25c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a0a      	ldr	r2, [pc, #40]	@ (800c294 <HAL_RTC_MspInit+0x38>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d10e      	bne.n	800c28c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c26e:	4b0a      	ldr	r3, [pc, #40]	@ (800c298 <HAL_RTC_MspInit+0x3c>)
 800c270:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c272:	4b09      	ldr	r3, [pc, #36]	@ (800c298 <HAL_RTC_MspInit+0x3c>)
 800c274:	2180      	movs	r1, #128	@ 0x80
 800c276:	02c9      	lsls	r1, r1, #11
 800c278:	430a      	orrs	r2, r1
 800c27a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800c27c:	2200      	movs	r2, #0
 800c27e:	2100      	movs	r1, #0
 800c280:	2002      	movs	r0, #2
 800c282:	f006 fbd9 	bl	8012a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800c286:	2002      	movs	r0, #2
 800c288:	f006 fbeb 	bl	8012a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800c28c:	46c0      	nop			@ (mov r8, r8)
 800c28e:	46bd      	mov	sp, r7
 800c290:	b002      	add	sp, #8
 800c292:	bd80      	pop	{r7, pc}
 800c294:	40002800 	.word	0x40002800
 800c298:	40021000 	.word	0x40021000

0800c29c <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800c29c:	b580      	push	{r7, lr}
 800c29e:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800c2a0:	4b02      	ldr	r3, [pc, #8]	@ (800c2ac <sen5x_Get_sen5x_enable_state+0x10>)
 800c2a2:	781b      	ldrb	r3, [r3, #0]
}
 800c2a4:	0018      	movs	r0, r3
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	46c0      	nop			@ (mov r8, r8)
 800c2ac:	20000e9f 	.word	0x20000e9f

0800c2b0 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	0002      	movs	r2, r0
 800c2b8:	1dfb      	adds	r3, r7, #7
 800c2ba:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800c2bc:	4b03      	ldr	r3, [pc, #12]	@ (800c2cc <sen5x_Set_sen5x_state+0x1c>)
 800c2be:	1dfa      	adds	r2, r7, #7
 800c2c0:	7812      	ldrb	r2, [r2, #0]
 800c2c2:	701a      	strb	r2, [r3, #0]
}
 800c2c4:	46c0      	nop			@ (mov r8, r8)
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	b002      	add	sp, #8
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	20000e9f 	.word	0x20000e9f

0800c2d0 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800c2d8:	f005 ff0a 	bl	80120f0 <HAL_GetTick>
 800c2dc:	0002      	movs	r2, r0
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	18d2      	adds	r2, r2, r3
 800c2e2:	4b03      	ldr	r3, [pc, #12]	@ (800c2f0 <setsen5xReadTimer+0x20>)
 800c2e4:	601a      	str	r2, [r3, #0]
}
 800c2e6:	46c0      	nop			@ (mov r8, r8)
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	b002      	add	sp, #8
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	46c0      	nop			@ (mov r8, r8)
 800c2f0:	20000eac 	.word	0x20000eac

0800c2f4 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	0002      	movs	r2, r0
 800c2fc:	1dfb      	adds	r3, r7, #7
 800c2fe:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800c300:	4b03      	ldr	r3, [pc, #12]	@ (800c310 <setsen5xSamplecounter+0x1c>)
 800c302:	2200      	movs	r2, #0
 800c304:	701a      	strb	r2, [r3, #0]
}
 800c306:	46c0      	nop			@ (mov r8, r8)
 800c308:	46bd      	mov	sp, r7
 800c30a:	b002      	add	sp, #8
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	46c0      	nop			@ (mov r8, r8)
 800c310:	20000ea8 	.word	0x20000ea8

0800c314 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800c31c:	f7ff f86a 	bl	800b3f4 <IsPMSensorEnabled>
 800c320:	1e03      	subs	r3, r0, #0
 800c322:	d035      	beq.n	800c390 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800c324:	f003 ff8e 	bl	8010244 <batteryChargeCheck>
 800c328:	0003      	movs	r3, r0
 800c32a:	2b03      	cmp	r3, #3
 800c32c:	d103      	bne.n	800c336 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800c32e:	4b20      	ldr	r3, [pc, #128]	@ (800c3b0 <sen5x_enable+0x9c>)
 800c330:	2201      	movs	r2, #1
 800c332:	701a      	strb	r2, [r3, #0]
 800c334:	e00d      	b.n	800c352 <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800c336:	4b1e      	ldr	r3, [pc, #120]	@ (800c3b0 <sen5x_enable+0x9c>)
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	1e5a      	subs	r2, r3, #1
 800c33c:	4193      	sbcs	r3, r2
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	2201      	movs	r2, #1
 800c342:	4053      	eors	r3, r2
 800c344:	b2db      	uxtb	r3, r3
 800c346:	1c1a      	adds	r2, r3, #0
 800c348:	2301      	movs	r3, #1
 800c34a:	4013      	ands	r3, r2
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	4b18      	ldr	r3, [pc, #96]	@ (800c3b0 <sen5x_enable+0x9c>)
 800c350:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800c352:	4b17      	ldr	r3, [pc, #92]	@ (800c3b0 <sen5x_enable+0x9c>)
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d003      	beq.n	800c362 <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800c35a:	2000      	movs	r0, #0
 800c35c:	f7ff ffb8 	bl	800c2d0 <setsen5xReadTimer>
 800c360:	e009      	b.n	800c376 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800c362:	f005 fec5 	bl	80120f0 <HAL_GetTick>
 800c366:	0002      	movs	r2, r0
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2164      	movs	r1, #100	@ 0x64
 800c36c:	434b      	muls	r3, r1
 800c36e:	18d3      	adds	r3, r2, r3
 800c370:	0018      	movs	r0, r3
 800c372:	f7ff ffad 	bl	800c2d0 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800c376:	4b0e      	ldr	r3, [pc, #56]	@ (800c3b0 <sen5x_enable+0x9c>)
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <sen5x_enable+0x6e>
 800c37e:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b4 <sen5x_enable+0xa0>)
 800c380:	e000      	b.n	800c384 <sen5x_enable+0x70>
 800c382:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b8 <sen5x_enable+0xa4>)
 800c384:	4a0d      	ldr	r2, [pc, #52]	@ (800c3bc <sen5x_enable+0xa8>)
 800c386:	490e      	ldr	r1, [pc, #56]	@ (800c3c0 <sen5x_enable+0xac>)
 800c388:	2002      	movs	r0, #2
 800c38a:	f005 fa65 	bl	8011858 <CreateLine>
 800c38e:	e005      	b.n	800c39c <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800c390:	4a0c      	ldr	r2, [pc, #48]	@ (800c3c4 <sen5x_enable+0xb0>)
 800c392:	4b0b      	ldr	r3, [pc, #44]	@ (800c3c0 <sen5x_enable+0xac>)
 800c394:	0019      	movs	r1, r3
 800c396:	2002      	movs	r0, #2
 800c398:	f005 fa5e 	bl	8011858 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800c39c:	4b0a      	ldr	r3, [pc, #40]	@ (800c3c8 <sen5x_enable+0xb4>)
 800c39e:	2201      	movs	r2, #1
 800c3a0:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800c3a2:	4b03      	ldr	r3, [pc, #12]	@ (800c3b0 <sen5x_enable+0x9c>)
 800c3a4:	781b      	ldrb	r3, [r3, #0]
}
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	b002      	add	sp, #8
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	46c0      	nop			@ (mov r8, r8)
 800c3b0:	20000e9f 	.word	0x20000e9f
 800c3b4:	0802a050 	.word	0x0802a050
 800c3b8:	0802a058 	.word	0x0802a058
 800c3bc:	0802a064 	.word	0x0802a064
 800c3c0:	0802a080 	.word	0x0802a080
 800c3c4:	0802a084 	.word	0x0802a084
 800c3c8:	2000009d 	.word	0x2000009d

0800c3cc <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800c3d0:	2380      	movs	r3, #128	@ 0x80
 800c3d2:	015b      	lsls	r3, r3, #5
 800c3d4:	480f      	ldr	r0, [pc, #60]	@ (800c414 <sen5x_Power_On+0x48>)
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	0019      	movs	r1, r3
 800c3da:	f007 f91a 	bl	8013612 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800c3de:	4a0e      	ldr	r2, [pc, #56]	@ (800c418 <sen5x_Power_On+0x4c>)
 800c3e0:	4b0e      	ldr	r3, [pc, #56]	@ (800c41c <sen5x_Power_On+0x50>)
 800c3e2:	0019      	movs	r1, r3
 800c3e4:	2003      	movs	r0, #3
 800c3e6:	f005 fa37 	bl	8011858 <CreateLine>
  HAL_Delay(150);
 800c3ea:	2096      	movs	r0, #150	@ 0x96
 800c3ec:	f005 fe8a 	bl	8012104 <HAL_Delay>
  if (sen5x_device_reset()) {
 800c3f0:	f001 f98c 	bl	800d70c <sen5x_device_reset>
 800c3f4:	1e03      	subs	r3, r0, #0
 800c3f6:	d006      	beq.n	800c406 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800c3f8:	4a09      	ldr	r2, [pc, #36]	@ (800c420 <sen5x_Power_On+0x54>)
 800c3fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c424 <sen5x_Power_On+0x58>)
 800c3fc:	0019      	movs	r1, r3
 800c3fe:	2001      	movs	r0, #1
 800c400:	f005 fa2a 	bl	8011858 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800c404:	e002      	b.n	800c40c <sen5x_Power_On+0x40>
    sen5x_On = true;
 800c406:	4b08      	ldr	r3, [pc, #32]	@ (800c428 <sen5x_Power_On+0x5c>)
 800c408:	2201      	movs	r2, #1
 800c40a:	701a      	strb	r2, [r3, #0]
}
 800c40c:	46c0      	nop			@ (mov r8, r8)
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	46c0      	nop			@ (mov r8, r8)
 800c414:	50000800 	.word	0x50000800
 800c418:	0802a0a4 	.word	0x0802a0a4
 800c41c:	0802a0c0 	.word	0x0802a0c0
 800c420:	0802a0c4 	.word	0x0802a0c4
 800c424:	0802a0ec 	.word	0x0802a0ec
 800c428:	20000e9d 	.word	0x20000e9d

0800c42c <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800c42c:	b580      	push	{r7, lr}
 800c42e:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800c430:	4b0e      	ldr	r3, [pc, #56]	@ (800c46c <sen5x_Power_Off+0x40>)
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d006      	beq.n	800c446 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800c438:	4a0d      	ldr	r2, [pc, #52]	@ (800c470 <sen5x_Power_Off+0x44>)
 800c43a:	4b0e      	ldr	r3, [pc, #56]	@ (800c474 <sen5x_Power_Off+0x48>)
 800c43c:	0019      	movs	r1, r3
 800c43e:	2003      	movs	r0, #3
 800c440:	f005 fa0a 	bl	8011858 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800c444:	e00f      	b.n	800c466 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800c446:	4a0c      	ldr	r2, [pc, #48]	@ (800c478 <sen5x_Power_Off+0x4c>)
 800c448:	4b0a      	ldr	r3, [pc, #40]	@ (800c474 <sen5x_Power_Off+0x48>)
 800c44a:	0019      	movs	r1, r3
 800c44c:	2003      	movs	r0, #3
 800c44e:	f005 fa03 	bl	8011858 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c452:	2380      	movs	r3, #128	@ 0x80
 800c454:	015b      	lsls	r3, r3, #5
 800c456:	4809      	ldr	r0, [pc, #36]	@ (800c47c <sen5x_Power_Off+0x50>)
 800c458:	2200      	movs	r2, #0
 800c45a:	0019      	movs	r1, r3
 800c45c:	f007 f8d9 	bl	8013612 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800c460:	4b07      	ldr	r3, [pc, #28]	@ (800c480 <sen5x_Power_Off+0x54>)
 800c462:	2200      	movs	r2, #0
 800c464:	701a      	strb	r2, [r3, #0]
}
 800c466:	46c0      	nop			@ (mov r8, r8)
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	20000e9e 	.word	0x20000e9e
 800c470:	0802a0f0 	.word	0x0802a0f0
 800c474:	0802a0c0 	.word	0x0802a0c0
 800c478:	0802a120 	.word	0x0802a120
 800c47c:	50000800 	.word	0x50000800
 800c480:	20000e9d 	.word	0x20000e9d

0800c484 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800c484:	b580      	push	{r7, lr}
 800c486:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800c488:	4b02      	ldr	r3, [pc, #8]	@ (800c494 <reset_fanCleaningDone+0x10>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	701a      	strb	r2, [r3, #0]
}
 800c48e:	46c0      	nop			@ (mov r8, r8)
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	20000e9c 	.word	0x20000e9c

0800c498 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800c498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c49a:	b093      	sub	sp, #76	@ 0x4c
 800c49c:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800c49e:	2436      	movs	r4, #54	@ 0x36
 800c4a0:	193b      	adds	r3, r7, r4
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800c4a6:	2335      	movs	r3, #53	@ 0x35
 800c4a8:	18fb      	adds	r3, r7, r3
 800c4aa:	2220      	movs	r2, #32
 800c4ac:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800c4ae:	2334      	movs	r3, #52	@ 0x34
 800c4b0:	18fb      	adds	r3, r7, r3
 800c4b2:	2220      	movs	r2, #32
 800c4b4:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800c4b6:	f7ff ff89 	bl	800c3cc <sen5x_Power_On>
  error = sen5x_device_reset();
 800c4ba:	0025      	movs	r5, r4
 800c4bc:	193c      	adds	r4, r7, r4
 800c4be:	f001 f925 	bl	800d70c <sen5x_device_reset>
 800c4c2:	0003      	movs	r3, r0
 800c4c4:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c4c6:	002c      	movs	r4, r5
 800c4c8:	193b      	adds	r3, r7, r4
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	5e9b      	ldrsh	r3, [r3, r2]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00b      	beq.n	800c4ea <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800c4d2:	193b      	adds	r3, r7, r4
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	5e9b      	ldrsh	r3, [r3, r2]
 800c4d8:	4a75      	ldr	r2, [pc, #468]	@ (800c6b0 <probe_sen5x+0x218>)
 800c4da:	4976      	ldr	r1, [pc, #472]	@ (800c6b4 <probe_sen5x+0x21c>)
 800c4dc:	2001      	movs	r0, #1
 800c4de:	f005 f9bb 	bl	8011858 <CreateLine>
      return error;
 800c4e2:	193b      	adds	r3, r7, r4
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	5e9b      	ldrsh	r3, [r3, r2]
 800c4e8:	e0de      	b.n	800c6a8 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800c4ea:	2536      	movs	r5, #54	@ 0x36
 800c4ec:	197c      	adds	r4, r7, r5
 800c4ee:	2335      	movs	r3, #53	@ 0x35
 800c4f0:	18fb      	adds	r3, r7, r3
 800c4f2:	781a      	ldrb	r2, [r3, #0]
 800c4f4:	230c      	movs	r3, #12
 800c4f6:	18fb      	adds	r3, r7, r3
 800c4f8:	0011      	movs	r1, r2
 800c4fa:	0018      	movs	r0, r3
 800c4fc:	f000 fff2 	bl	800d4e4 <sen5x_get_serial_number>
 800c500:	0003      	movs	r3, r0
 800c502:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c504:	197b      	adds	r3, r7, r5
 800c506:	2200      	movs	r2, #0
 800c508:	5e9b      	ldrsh	r3, [r3, r2]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00b      	beq.n	800c526 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800c50e:	197b      	adds	r3, r7, r5
 800c510:	2200      	movs	r2, #0
 800c512:	5e9a      	ldrsh	r2, [r3, r2]
 800c514:	4b68      	ldr	r3, [pc, #416]	@ (800c6b8 <probe_sen5x+0x220>)
 800c516:	0011      	movs	r1, r2
 800c518:	0018      	movs	r0, r3
 800c51a:	f017 f925 	bl	8023768 <iprintf>
      return error;
 800c51e:	197b      	adds	r3, r7, r5
 800c520:	2200      	movs	r2, #0
 800c522:	5e9b      	ldrsh	r3, [r3, r2]
 800c524:	e0c0      	b.n	800c6a8 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800c526:	230c      	movs	r3, #12
 800c528:	18fa      	adds	r2, r7, r3
 800c52a:	4b64      	ldr	r3, [pc, #400]	@ (800c6bc <probe_sen5x+0x224>)
 800c52c:	0011      	movs	r1, r2
 800c52e:	0018      	movs	r0, r3
 800c530:	f017 f91a 	bl	8023768 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800c534:	2536      	movs	r5, #54	@ 0x36
 800c536:	197c      	adds	r4, r7, r5
 800c538:	2334      	movs	r3, #52	@ 0x34
 800c53a:	18fb      	adds	r3, r7, r3
 800c53c:	781a      	ldrb	r2, [r3, #0]
 800c53e:	4b60      	ldr	r3, [pc, #384]	@ (800c6c0 <probe_sen5x+0x228>)
 800c540:	0011      	movs	r1, r2
 800c542:	0018      	movs	r0, r3
 800c544:	f000 ff78 	bl	800d438 <sen5x_get_product_name>
 800c548:	0003      	movs	r3, r0
 800c54a:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c54c:	197b      	adds	r3, r7, r5
 800c54e:	2200      	movs	r2, #0
 800c550:	5e9b      	ldrsh	r3, [r3, r2]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00b      	beq.n	800c56e <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800c556:	197b      	adds	r3, r7, r5
 800c558:	2200      	movs	r2, #0
 800c55a:	5e9a      	ldrsh	r2, [r3, r2]
 800c55c:	4b59      	ldr	r3, [pc, #356]	@ (800c6c4 <probe_sen5x+0x22c>)
 800c55e:	0011      	movs	r1, r2
 800c560:	0018      	movs	r0, r3
 800c562:	f017 f901 	bl	8023768 <iprintf>
      return error;
 800c566:	197b      	adds	r3, r7, r5
 800c568:	2200      	movs	r2, #0
 800c56a:	5e9b      	ldrsh	r3, [r3, r2]
 800c56c:	e09c      	b.n	800c6a8 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800c56e:	4a54      	ldr	r2, [pc, #336]	@ (800c6c0 <probe_sen5x+0x228>)
 800c570:	4b55      	ldr	r3, [pc, #340]	@ (800c6c8 <probe_sen5x+0x230>)
 800c572:	0011      	movs	r1, r2
 800c574:	0018      	movs	r0, r3
 800c576:	f017 f8f7 	bl	8023768 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800c57a:	2636      	movs	r6, #54	@ 0x36
 800c57c:	19bc      	adds	r4, r7, r6
 800c57e:	2308      	movs	r3, #8
 800c580:	18fd      	adds	r5, r7, r3
 800c582:	2309      	movs	r3, #9
 800c584:	18fa      	adds	r2, r7, r3
 800c586:	230a      	movs	r3, #10
 800c588:	18f9      	adds	r1, r7, r3
 800c58a:	230b      	movs	r3, #11
 800c58c:	18f8      	adds	r0, r7, r3
 800c58e:	1d7b      	adds	r3, r7, #5
 800c590:	9302      	str	r3, [sp, #8]
 800c592:	1dbb      	adds	r3, r7, #6
 800c594:	9301      	str	r3, [sp, #4]
 800c596:	1dfb      	adds	r3, r7, #7
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	002b      	movs	r3, r5
 800c59c:	f000 fff8 	bl	800d590 <sen5x_get_version>
 800c5a0:	0003      	movs	r3, r0
 800c5a2:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800c5a4:	19bb      	adds	r3, r7, r6
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	5e9b      	ldrsh	r3, [r3, r2]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d00b      	beq.n	800c5c6 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800c5ae:	19bb      	adds	r3, r7, r6
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	5e9a      	ldrsh	r2, [r3, r2]
 800c5b4:	4b45      	ldr	r3, [pc, #276]	@ (800c6cc <probe_sen5x+0x234>)
 800c5b6:	0011      	movs	r1, r2
 800c5b8:	0018      	movs	r0, r3
 800c5ba:	f017 f8d5 	bl	8023768 <iprintf>
      return error;
 800c5be:	19bb      	adds	r3, r7, r6
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	5e9b      	ldrsh	r3, [r3, r2]
 800c5c4:	e070      	b.n	800c6a8 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800c5c6:	230b      	movs	r3, #11
 800c5c8:	18fb      	adds	r3, r7, r3
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	0019      	movs	r1, r3
 800c5ce:	230a      	movs	r3, #10
 800c5d0:	18fb      	adds	r3, r7, r3
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	001a      	movs	r2, r3
 800c5d6:	2308      	movs	r3, #8
 800c5d8:	18fb      	adds	r3, r7, r3
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	001c      	movs	r4, r3
 800c5de:	1dfb      	adds	r3, r7, #7
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	483b      	ldr	r0, [pc, #236]	@ (800c6d0 <probe_sen5x+0x238>)
 800c5e4:	9300      	str	r3, [sp, #0]
 800c5e6:	0023      	movs	r3, r4
 800c5e8:	f017 f8be 	bl	8023768 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800c5f0:	262e      	movs	r6, #46	@ 0x2e
 800c5f2:	19bb      	adds	r3, r7, r6
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800c5f8:	232c      	movs	r3, #44	@ 0x2c
 800c5fa:	18fb      	adds	r3, r7, r3
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800c600:	4934      	ldr	r1, [pc, #208]	@ (800c6d4 <probe_sen5x+0x23c>)
 800c602:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c604:	f7f4 fccc 	bl	8000fa0 <__aeabi_fmul>
 800c608:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800c60a:	1c18      	adds	r0, r3, #0
 800c60c:	f7f4 ffc0 	bl	8001590 <__aeabi_f2iz>
 800c610:	0003      	movs	r3, r0
 800c612:	b218      	sxth	r0, r3
 800c614:	2536      	movs	r5, #54	@ 0x36
 800c616:	197c      	adds	r4, r7, r5
 800c618:	232c      	movs	r3, #44	@ 0x2c
 800c61a:	18fb      	adds	r3, r7, r3
 800c61c:	881a      	ldrh	r2, [r3, #0]
 800c61e:	19bb      	adds	r3, r7, r6
 800c620:	2100      	movs	r1, #0
 800c622:	5e5b      	ldrsh	r3, [r3, r1]
 800c624:	0019      	movs	r1, r3
 800c626:	f000 fea3 	bl	800d370 <sen5x_set_temperature_offset_parameters>
 800c62a:	0003      	movs	r3, r0
 800c62c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800c62e:	197b      	adds	r3, r7, r5
 800c630:	2200      	movs	r2, #0
 800c632:	5e9b      	ldrsh	r3, [r3, r2]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00b      	beq.n	800c650 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800c638:	197b      	adds	r3, r7, r5
 800c63a:	2200      	movs	r2, #0
 800c63c:	5e9b      	ldrsh	r3, [r3, r2]
 800c63e:	4a26      	ldr	r2, [pc, #152]	@ (800c6d8 <probe_sen5x+0x240>)
 800c640:	491c      	ldr	r1, [pc, #112]	@ (800c6b4 <probe_sen5x+0x21c>)
 800c642:	2001      	movs	r0, #1
 800c644:	f005 f908 	bl	8011858 <CreateLine>
      return error;
 800c648:	197b      	adds	r3, r7, r5
 800c64a:	2200      	movs	r2, #0
 800c64c:	5e9b      	ldrsh	r3, [r3, r2]
 800c64e:	e02b      	b.n	800c6a8 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800c650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c652:	f7f6 ff07 	bl	8003464 <__aeabi_f2d>
 800c656:	0002      	movs	r2, r0
 800c658:	000b      	movs	r3, r1
 800c65a:	4820      	ldr	r0, [pc, #128]	@ (800c6dc <probe_sen5x+0x244>)
 800c65c:	4920      	ldr	r1, [pc, #128]	@ (800c6e0 <probe_sen5x+0x248>)
 800c65e:	9200      	str	r2, [sp, #0]
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	0002      	movs	r2, r0
 800c664:	2002      	movs	r0, #2
 800c666:	f005 f8f7 	bl	8011858 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800c66a:	f7fb fbf7 	bl	8007e5c <Check_USB_PowerOn>
 800c66e:	0003      	movs	r3, r0
 800c670:	001a      	movs	r2, r3
 800c672:	2301      	movs	r3, #1
 800c674:	4053      	eors	r3, r2
 800c676:	b2db      	uxtb	r3, r3
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00a      	beq.n	800c692 <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800c67c:	f7ff fed6 	bl	800c42c <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800c680:	f005 fd36 	bl	80120f0 <HAL_GetTick>
 800c684:	0003      	movs	r3, r0
 800c686:	22fa      	movs	r2, #250	@ 0xfa
 800c688:	00d2      	lsls	r2, r2, #3
 800c68a:	189a      	adds	r2, r3, r2
 800c68c:	4b15      	ldr	r3, [pc, #84]	@ (800c6e4 <probe_sen5x+0x24c>)
 800c68e:	601a      	str	r2, [r3, #0]
 800c690:	e006      	b.n	800c6a0 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800c692:	f005 fd2d 	bl	80120f0 <HAL_GetTick>
 800c696:	0003      	movs	r3, r0
 800c698:	4a13      	ldr	r2, [pc, #76]	@ (800c6e8 <probe_sen5x+0x250>)
 800c69a:	189a      	adds	r2, r3, r2
 800c69c:	4b11      	ldr	r3, [pc, #68]	@ (800c6e4 <probe_sen5x+0x24c>)
 800c69e:	601a      	str	r2, [r3, #0]
  }
  return error;
 800c6a0:	2336      	movs	r3, #54	@ 0x36
 800c6a2:	18fb      	adds	r3, r7, r3
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	5e9b      	ldrsh	r3, [r3, r2]
}
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	b00f      	add	sp, #60	@ 0x3c
 800c6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6b0:	0802a13c 	.word	0x0802a13c
 800c6b4:	0802a0ec 	.word	0x0802a0ec
 800c6b8:	0802a168 	.word	0x0802a168
 800c6bc:	0802a198 	.word	0x0802a198
 800c6c0:	20000ea0 	.word	0x20000ea0
 800c6c4:	0802a1ac 	.word	0x0802a1ac
 800c6c8:	0802a1dc 	.word	0x0802a1dc
 800c6cc:	0802a1f0 	.word	0x0802a1f0
 800c6d0:	0802a21c 	.word	0x0802a21c
 800c6d4:	43480000 	.word	0x43480000
 800c6d8:	0802a240 	.word	0x0802a240
 800c6dc:	0802a280 	.word	0x0802a280
 800c6e0:	0802a080 	.word	0x0802a080
 800c6e4:	20000eac 	.word	0x20000eac
 800c6e8:	00006d60 	.word	0x00006d60

0800c6ec <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800c6ec:	b590      	push	{r4, r7, lr}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800c6f2:	1dbb      	adds	r3, r7, #6
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800c6f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c768 <sen5x_lightup_measurement+0x7c>)
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00b      	beq.n	800c718 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800c700:	4a1a      	ldr	r2, [pc, #104]	@ (800c76c <sen5x_lightup_measurement+0x80>)
 800c702:	4b1b      	ldr	r3, [pc, #108]	@ (800c770 <sen5x_lightup_measurement+0x84>)
 800c704:	0019      	movs	r1, r3
 800c706:	2002      	movs	r0, #2
 800c708:	f005 f8a6 	bl	8011858 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800c70c:	1dbc      	adds	r4, r7, #6
 800c70e:	f000 fcbb 	bl	800d088 <sen5x_start_measurement_without_pm>
 800c712:	0003      	movs	r3, r0
 800c714:	8023      	strh	r3, [r4, #0]
 800c716:	e00a      	b.n	800c72e <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800c718:	4a16      	ldr	r2, [pc, #88]	@ (800c774 <sen5x_lightup_measurement+0x88>)
 800c71a:	4b15      	ldr	r3, [pc, #84]	@ (800c770 <sen5x_lightup_measurement+0x84>)
 800c71c:	0019      	movs	r1, r3
 800c71e:	2002      	movs	r0, #2
 800c720:	f005 f89a 	bl	8011858 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800c724:	1dbc      	adds	r4, r7, #6
 800c726:	f000 fc81 	bl	800d02c <sen5x_start_measurement>
 800c72a:	0003      	movs	r3, r0
 800c72c:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800c72e:	1dbb      	adds	r3, r7, #6
 800c730:	2200      	movs	r2, #0
 800c732:	5e9b      	ldrsh	r3, [r3, r2]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d008      	beq.n	800c74a <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800c738:	1dbb      	adds	r3, r7, #6
 800c73a:	2200      	movs	r2, #0
 800c73c:	5e9b      	ldrsh	r3, [r3, r2]
 800c73e:	4a0e      	ldr	r2, [pc, #56]	@ (800c778 <sen5x_lightup_measurement+0x8c>)
 800c740:	490e      	ldr	r1, [pc, #56]	@ (800c77c <sen5x_lightup_measurement+0x90>)
 800c742:	2001      	movs	r0, #1
 800c744:	f005 f888 	bl	8011858 <CreateLine>
 800c748:	e007      	b.n	800c75a <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800c74a:	f7fb fbb7 	bl	8007ebc <showTime>
    Info("sen5x_start_measurement executed");
 800c74e:	4a0c      	ldr	r2, [pc, #48]	@ (800c780 <sen5x_lightup_measurement+0x94>)
 800c750:	4b07      	ldr	r3, [pc, #28]	@ (800c770 <sen5x_lightup_measurement+0x84>)
 800c752:	0019      	movs	r1, r3
 800c754:	2002      	movs	r0, #2
 800c756:	f005 f87f 	bl	8011858 <CreateLine>
  }
  return error;
 800c75a:	1dbb      	adds	r3, r7, #6
 800c75c:	2200      	movs	r2, #0
 800c75e:	5e9b      	ldrsh	r3, [r3, r2]
}
 800c760:	0018      	movs	r0, r3
 800c762:	46bd      	mov	sp, r7
 800c764:	b003      	add	sp, #12
 800c766:	bd90      	pop	{r4, r7, pc}
 800c768:	20000e9e 	.word	0x20000e9e
 800c76c:	0802a2b8 	.word	0x0802a2b8
 800c770:	0802a080 	.word	0x0802a080
 800c774:	0802a2e4 	.word	0x0802a2e4
 800c778:	0802a304 	.word	0x0802a304
 800c77c:	0802a0ec 	.word	0x0802a0ec
 800c780:	0802a334 	.word	0x0802a334

0800c784 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800c784:	b590      	push	{r4, r7, lr}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800c78a:	1dbb      	adds	r3, r7, #6
 800c78c:	2200      	movs	r2, #0
 800c78e:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800c790:	4b21      	ldr	r3, [pc, #132]	@ (800c818 <sen5x_extinguish_measurement+0x94>)
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d01e      	beq.n	800c7d6 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800c798:	4a20      	ldr	r2, [pc, #128]	@ (800c81c <sen5x_extinguish_measurement+0x98>)
 800c79a:	4b21      	ldr	r3, [pc, #132]	@ (800c820 <sen5x_extinguish_measurement+0x9c>)
 800c79c:	0019      	movs	r1, r3
 800c79e:	2002      	movs	r0, #2
 800c7a0:	f005 f85a 	bl	8011858 <CreateLine>
    Info("PM measurement is disabled");
 800c7a4:	4a1f      	ldr	r2, [pc, #124]	@ (800c824 <sen5x_extinguish_measurement+0xa0>)
 800c7a6:	4b1e      	ldr	r3, [pc, #120]	@ (800c820 <sen5x_extinguish_measurement+0x9c>)
 800c7a8:	0019      	movs	r1, r3
 800c7aa:	2002      	movs	r0, #2
 800c7ac:	f005 f854 	bl	8011858 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800c7b0:	1dbc      	adds	r4, r7, #6
 800c7b2:	f000 fc69 	bl	800d088 <sen5x_start_measurement_without_pm>
 800c7b6:	0003      	movs	r3, r0
 800c7b8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800c7ba:	1dbb      	adds	r3, r7, #6
 800c7bc:	2200      	movs	r2, #0
 800c7be:	5e9b      	ldrsh	r3, [r3, r2]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d022      	beq.n	800c80a <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800c7c4:	1dbb      	adds	r3, r7, #6
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	5e9b      	ldrsh	r3, [r3, r2]
 800c7ca:	4a17      	ldr	r2, [pc, #92]	@ (800c828 <sen5x_extinguish_measurement+0xa4>)
 800c7cc:	4917      	ldr	r1, [pc, #92]	@ (800c82c <sen5x_extinguish_measurement+0xa8>)
 800c7ce:	2001      	movs	r0, #1
 800c7d0:	f005 f842 	bl	8011858 <CreateLine>
 800c7d4:	e019      	b.n	800c80a <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800c7d6:	1dbc      	adds	r4, r7, #6
 800c7d8:	f000 fc84 	bl	800d0e4 <sen5x_stop_measurement>
 800c7dc:	0003      	movs	r3, r0
 800c7de:	8023      	strh	r3, [r4, #0]
    showTime();
 800c7e0:	f7fb fb6c 	bl	8007ebc <showTime>
    Info("sen5x_stop_measurement executed");
 800c7e4:	4a12      	ldr	r2, [pc, #72]	@ (800c830 <sen5x_extinguish_measurement+0xac>)
 800c7e6:	4b0e      	ldr	r3, [pc, #56]	@ (800c820 <sen5x_extinguish_measurement+0x9c>)
 800c7e8:	0019      	movs	r1, r3
 800c7ea:	2002      	movs	r0, #2
 800c7ec:	f005 f834 	bl	8011858 <CreateLine>
    if (error) {
 800c7f0:	1dbb      	adds	r3, r7, #6
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	5e9b      	ldrsh	r3, [r3, r2]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d007      	beq.n	800c80a <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800c7fa:	1dbb      	adds	r3, r7, #6
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	5e9b      	ldrsh	r3, [r3, r2]
 800c800:	4a0c      	ldr	r2, [pc, #48]	@ (800c834 <sen5x_extinguish_measurement+0xb0>)
 800c802:	490a      	ldr	r1, [pc, #40]	@ (800c82c <sen5x_extinguish_measurement+0xa8>)
 800c804:	2001      	movs	r0, #1
 800c806:	f005 f827 	bl	8011858 <CreateLine>
    }
  }
  return error;
 800c80a:	1dbb      	adds	r3, r7, #6
 800c80c:	2200      	movs	r2, #0
 800c80e:	5e9b      	ldrsh	r3, [r3, r2]
}
 800c810:	0018      	movs	r0, r3
 800c812:	46bd      	mov	sp, r7
 800c814:	b003      	add	sp, #12
 800c816:	bd90      	pop	{r4, r7, pc}
 800c818:	20000e9e 	.word	0x20000e9e
 800c81c:	0802a358 	.word	0x0802a358
 800c820:	0802a080 	.word	0x0802a080
 800c824:	0802a390 	.word	0x0802a390
 800c828:	0802a3ac 	.word	0x0802a3ac
 800c82c:	0802a0ec 	.word	0x0802a0ec
 800c830:	0802a3ec 	.word	0x0802a3ec
 800c834:	0802a40c 	.word	0x0802a40c

0800c838 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800c838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c83a:	b08d      	sub	sp, #52	@ 0x34
 800c83c:	af04      	add	r7, sp, #16
 800c83e:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800c840:	261e      	movs	r6, #30
 800c842:	19bb      	adds	r3, r7, r6
 800c844:	2200      	movs	r2, #0
 800c846:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800c848:	19bc      	adds	r4, r7, r6
 800c84a:	2316      	movs	r3, #22
 800c84c:	18fd      	adds	r5, r7, r3
 800c84e:	2318      	movs	r3, #24
 800c850:	18fa      	adds	r2, r7, r3
 800c852:	231a      	movs	r3, #26
 800c854:	18f9      	adds	r1, r7, r3
 800c856:	231c      	movs	r3, #28
 800c858:	18f8      	adds	r0, r7, r3
 800c85a:	230e      	movs	r3, #14
 800c85c:	18fb      	adds	r3, r7, r3
 800c85e:	9303      	str	r3, [sp, #12]
 800c860:	2310      	movs	r3, #16
 800c862:	18fb      	adds	r3, r7, r3
 800c864:	9302      	str	r3, [sp, #8]
 800c866:	2312      	movs	r3, #18
 800c868:	18fb      	adds	r3, r7, r3
 800c86a:	9301      	str	r3, [sp, #4]
 800c86c:	2314      	movs	r3, #20
 800c86e:	18fb      	adds	r3, r7, r3
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	002b      	movs	r3, r5
 800c874:	f000 fcb8 	bl	800d1e8 <sen5x_read_measured_values>
 800c878:	0003      	movs	r3, r0
 800c87a:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800c87c:	19bb      	adds	r3, r7, r6
 800c87e:	2200      	movs	r2, #0
 800c880:	5e9b      	ldrsh	r3, [r3, r2]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d003      	beq.n	800c88e <sen5x_read_measurement+0x56>
    return error;
 800c886:	19bb      	adds	r3, r7, r6
 800c888:	2200      	movs	r2, #0
 800c88a:	5e9b      	ldrsh	r3, [r3, r2]
 800c88c:	e02c      	b.n	800c8e8 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800c88e:	231c      	movs	r3, #28
 800c890:	18fb      	adds	r3, r7, r3
 800c892:	881a      	ldrh	r2, [r3, #0]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800c898:	231a      	movs	r3, #26
 800c89a:	18fb      	adds	r3, r7, r3
 800c89c:	881a      	ldrh	r2, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800c8a2:	2318      	movs	r3, #24
 800c8a4:	18fb      	adds	r3, r7, r3
 800c8a6:	881a      	ldrh	r2, [r3, #0]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800c8ac:	2316      	movs	r3, #22
 800c8ae:	18fb      	adds	r3, r7, r3
 800c8b0:	881a      	ldrh	r2, [r3, #0]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800c8b6:	2314      	movs	r3, #20
 800c8b8:	18fb      	adds	r3, r7, r3
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	5e9a      	ldrsh	r2, [r3, r2]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800c8c2:	2312      	movs	r3, #18
 800c8c4:	18fb      	adds	r3, r7, r3
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	5e9a      	ldrsh	r2, [r3, r2]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800c8ce:	2310      	movs	r3, #16
 800c8d0:	18fb      	adds	r3, r7, r3
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	5e9a      	ldrsh	r2, [r3, r2]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800c8da:	230e      	movs	r3, #14
 800c8dc:	18fb      	adds	r3, r7, r3
 800c8de:	2200      	movs	r2, #0
 800c8e0:	5e9a      	ldrsh	r2, [r3, r2]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	81da      	strh	r2, [r3, #14]
  return 0;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	0018      	movs	r0, r3
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	b009      	add	sp, #36	@ 0x24
 800c8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8f0 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800c8f4:	4b63      	ldr	r3, [pc, #396]	@ (800ca84 <sen5x_printvalues+0x194>)
 800c8f6:	881b      	ldrh	r3, [r3, #0]
 800c8f8:	4a63      	ldr	r2, [pc, #396]	@ (800ca88 <sen5x_printvalues+0x198>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d013      	beq.n	800c926 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800c8fe:	4b61      	ldr	r3, [pc, #388]	@ (800ca84 <sen5x_printvalues+0x194>)
 800c900:	881b      	ldrh	r3, [r3, #0]
 800c902:	0018      	movs	r0, r3
 800c904:	f7f4 fe64 	bl	80015d0 <__aeabi_i2f>
 800c908:	1c03      	adds	r3, r0, #0
 800c90a:	4960      	ldr	r1, [pc, #384]	@ (800ca8c <sen5x_printvalues+0x19c>)
 800c90c:	1c18      	adds	r0, r3, #0
 800c90e:	f7f4 f961 	bl	8000bd4 <__aeabi_fdiv>
 800c912:	1c03      	adds	r3, r0, #0
 800c914:	1c18      	adds	r0, r3, #0
 800c916:	f7f6 fda5 	bl	8003464 <__aeabi_f2d>
 800c91a:	0002      	movs	r2, r0
 800c91c:	000b      	movs	r3, r1
 800c91e:	495c      	ldr	r1, [pc, #368]	@ (800ca90 <sen5x_printvalues+0x1a0>)
 800c920:	0008      	movs	r0, r1
 800c922:	f016 ff21 	bl	8023768 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800c926:	4b57      	ldr	r3, [pc, #348]	@ (800ca84 <sen5x_printvalues+0x194>)
 800c928:	885b      	ldrh	r3, [r3, #2]
 800c92a:	4a57      	ldr	r2, [pc, #348]	@ (800ca88 <sen5x_printvalues+0x198>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d013      	beq.n	800c958 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800c930:	4b54      	ldr	r3, [pc, #336]	@ (800ca84 <sen5x_printvalues+0x194>)
 800c932:	885b      	ldrh	r3, [r3, #2]
 800c934:	0018      	movs	r0, r3
 800c936:	f7f4 fe4b 	bl	80015d0 <__aeabi_i2f>
 800c93a:	1c03      	adds	r3, r0, #0
 800c93c:	4953      	ldr	r1, [pc, #332]	@ (800ca8c <sen5x_printvalues+0x19c>)
 800c93e:	1c18      	adds	r0, r3, #0
 800c940:	f7f4 f948 	bl	8000bd4 <__aeabi_fdiv>
 800c944:	1c03      	adds	r3, r0, #0
 800c946:	1c18      	adds	r0, r3, #0
 800c948:	f7f6 fd8c 	bl	8003464 <__aeabi_f2d>
 800c94c:	0002      	movs	r2, r0
 800c94e:	000b      	movs	r3, r1
 800c950:	4950      	ldr	r1, [pc, #320]	@ (800ca94 <sen5x_printvalues+0x1a4>)
 800c952:	0008      	movs	r0, r1
 800c954:	f016 ff08 	bl	8023768 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800c958:	4b4a      	ldr	r3, [pc, #296]	@ (800ca84 <sen5x_printvalues+0x194>)
 800c95a:	889b      	ldrh	r3, [r3, #4]
 800c95c:	4a4a      	ldr	r2, [pc, #296]	@ (800ca88 <sen5x_printvalues+0x198>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d013      	beq.n	800c98a <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800c962:	4b48      	ldr	r3, [pc, #288]	@ (800ca84 <sen5x_printvalues+0x194>)
 800c964:	889b      	ldrh	r3, [r3, #4]
 800c966:	0018      	movs	r0, r3
 800c968:	f7f4 fe32 	bl	80015d0 <__aeabi_i2f>
 800c96c:	1c03      	adds	r3, r0, #0
 800c96e:	4947      	ldr	r1, [pc, #284]	@ (800ca8c <sen5x_printvalues+0x19c>)
 800c970:	1c18      	adds	r0, r3, #0
 800c972:	f7f4 f92f 	bl	8000bd4 <__aeabi_fdiv>
 800c976:	1c03      	adds	r3, r0, #0
 800c978:	1c18      	adds	r0, r3, #0
 800c97a:	f7f6 fd73 	bl	8003464 <__aeabi_f2d>
 800c97e:	0002      	movs	r2, r0
 800c980:	000b      	movs	r3, r1
 800c982:	4945      	ldr	r1, [pc, #276]	@ (800ca98 <sen5x_printvalues+0x1a8>)
 800c984:	0008      	movs	r0, r1
 800c986:	f016 feef 	bl	8023768 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800c98a:	4b3e      	ldr	r3, [pc, #248]	@ (800ca84 <sen5x_printvalues+0x194>)
 800c98c:	88db      	ldrh	r3, [r3, #6]
 800c98e:	4a3e      	ldr	r2, [pc, #248]	@ (800ca88 <sen5x_printvalues+0x198>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d013      	beq.n	800c9bc <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800c994:	4b3b      	ldr	r3, [pc, #236]	@ (800ca84 <sen5x_printvalues+0x194>)
 800c996:	88db      	ldrh	r3, [r3, #6]
 800c998:	0018      	movs	r0, r3
 800c99a:	f7f4 fe19 	bl	80015d0 <__aeabi_i2f>
 800c99e:	1c03      	adds	r3, r0, #0
 800c9a0:	493a      	ldr	r1, [pc, #232]	@ (800ca8c <sen5x_printvalues+0x19c>)
 800c9a2:	1c18      	adds	r0, r3, #0
 800c9a4:	f7f4 f916 	bl	8000bd4 <__aeabi_fdiv>
 800c9a8:	1c03      	adds	r3, r0, #0
 800c9aa:	1c18      	adds	r0, r3, #0
 800c9ac:	f7f6 fd5a 	bl	8003464 <__aeabi_f2d>
 800c9b0:	0002      	movs	r2, r0
 800c9b2:	000b      	movs	r3, r1
 800c9b4:	4939      	ldr	r1, [pc, #228]	@ (800ca9c <sen5x_printvalues+0x1ac>)
 800c9b6:	0008      	movs	r0, r1
 800c9b8:	f016 fed6 	bl	8023768 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800c9bc:	4b31      	ldr	r3, [pc, #196]	@ (800ca84 <sen5x_printvalues+0x194>)
 800c9be:	2208      	movs	r2, #8
 800c9c0:	5e9b      	ldrsh	r3, [r3, r2]
 800c9c2:	4a37      	ldr	r2, [pc, #220]	@ (800caa0 <sen5x_printvalues+0x1b0>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d014      	beq.n	800c9f2 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800c9c8:	4b2e      	ldr	r3, [pc, #184]	@ (800ca84 <sen5x_printvalues+0x194>)
 800c9ca:	2208      	movs	r2, #8
 800c9cc:	5e9b      	ldrsh	r3, [r3, r2]
 800c9ce:	0018      	movs	r0, r3
 800c9d0:	f7f4 fdfe 	bl	80015d0 <__aeabi_i2f>
 800c9d4:	1c03      	adds	r3, r0, #0
 800c9d6:	4933      	ldr	r1, [pc, #204]	@ (800caa4 <sen5x_printvalues+0x1b4>)
 800c9d8:	1c18      	adds	r0, r3, #0
 800c9da:	f7f4 f8fb 	bl	8000bd4 <__aeabi_fdiv>
 800c9de:	1c03      	adds	r3, r0, #0
 800c9e0:	1c18      	adds	r0, r3, #0
 800c9e2:	f7f6 fd3f 	bl	8003464 <__aeabi_f2d>
 800c9e6:	0002      	movs	r2, r0
 800c9e8:	000b      	movs	r3, r1
 800c9ea:	492f      	ldr	r1, [pc, #188]	@ (800caa8 <sen5x_printvalues+0x1b8>)
 800c9ec:	0008      	movs	r0, r1
 800c9ee:	f016 febb 	bl	8023768 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800c9f2:	4b24      	ldr	r3, [pc, #144]	@ (800ca84 <sen5x_printvalues+0x194>)
 800c9f4:	220a      	movs	r2, #10
 800c9f6:	5e9b      	ldrsh	r3, [r3, r2]
 800c9f8:	4a29      	ldr	r2, [pc, #164]	@ (800caa0 <sen5x_printvalues+0x1b0>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d014      	beq.n	800ca28 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800c9fe:	4b21      	ldr	r3, [pc, #132]	@ (800ca84 <sen5x_printvalues+0x194>)
 800ca00:	220a      	movs	r2, #10
 800ca02:	5e9b      	ldrsh	r3, [r3, r2]
 800ca04:	0018      	movs	r0, r3
 800ca06:	f7f4 fde3 	bl	80015d0 <__aeabi_i2f>
 800ca0a:	1c03      	adds	r3, r0, #0
 800ca0c:	4927      	ldr	r1, [pc, #156]	@ (800caac <sen5x_printvalues+0x1bc>)
 800ca0e:	1c18      	adds	r0, r3, #0
 800ca10:	f7f4 f8e0 	bl	8000bd4 <__aeabi_fdiv>
 800ca14:	1c03      	adds	r3, r0, #0
 800ca16:	1c18      	adds	r0, r3, #0
 800ca18:	f7f6 fd24 	bl	8003464 <__aeabi_f2d>
 800ca1c:	0002      	movs	r2, r0
 800ca1e:	000b      	movs	r3, r1
 800ca20:	4923      	ldr	r1, [pc, #140]	@ (800cab0 <sen5x_printvalues+0x1c0>)
 800ca22:	0008      	movs	r0, r1
 800ca24:	f016 fea0 	bl	8023768 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800ca28:	4b16      	ldr	r3, [pc, #88]	@ (800ca84 <sen5x_printvalues+0x194>)
 800ca2a:	220c      	movs	r2, #12
 800ca2c:	5e9b      	ldrsh	r3, [r3, r2]
 800ca2e:	4a1c      	ldr	r2, [pc, #112]	@ (800caa0 <sen5x_printvalues+0x1b0>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d00e      	beq.n	800ca52 <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800ca34:	4b13      	ldr	r3, [pc, #76]	@ (800ca84 <sen5x_printvalues+0x194>)
 800ca36:	220c      	movs	r2, #12
 800ca38:	5e9b      	ldrsh	r3, [r3, r2]
 800ca3a:	210a      	movs	r1, #10
 800ca3c:	0018      	movs	r0, r3
 800ca3e:	f7f3 fc3b 	bl	80002b8 <__divsi3>
 800ca42:	0003      	movs	r3, r0
 800ca44:	b21b      	sxth	r3, r3
 800ca46:	001a      	movs	r2, r3
 800ca48:	4b1a      	ldr	r3, [pc, #104]	@ (800cab4 <sen5x_printvalues+0x1c4>)
 800ca4a:	0011      	movs	r1, r2
 800ca4c:	0018      	movs	r0, r3
 800ca4e:	f016 fe8b 	bl	8023768 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800ca52:	4b0c      	ldr	r3, [pc, #48]	@ (800ca84 <sen5x_printvalues+0x194>)
 800ca54:	220e      	movs	r2, #14
 800ca56:	5e9b      	ldrsh	r3, [r3, r2]
 800ca58:	4a11      	ldr	r2, [pc, #68]	@ (800caa0 <sen5x_printvalues+0x1b0>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d00e      	beq.n	800ca7c <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800ca5e:	4b09      	ldr	r3, [pc, #36]	@ (800ca84 <sen5x_printvalues+0x194>)
 800ca60:	220e      	movs	r2, #14
 800ca62:	5e9b      	ldrsh	r3, [r3, r2]
 800ca64:	210a      	movs	r1, #10
 800ca66:	0018      	movs	r0, r3
 800ca68:	f7f3 fc26 	bl	80002b8 <__divsi3>
 800ca6c:	0003      	movs	r3, r0
 800ca6e:	b21b      	sxth	r3, r3
 800ca70:	001a      	movs	r2, r3
 800ca72:	4b11      	ldr	r3, [pc, #68]	@ (800cab8 <sen5x_printvalues+0x1c8>)
 800ca74:	0011      	movs	r1, r2
 800ca76:	0018      	movs	r0, r3
 800ca78:	f016 fe76 	bl	8023768 <iprintf>
  }
}
 800ca7c:	46c0      	nop			@ (mov r8, r8)
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	46c0      	nop			@ (mov r8, r8)
 800ca84:	20000eb0 	.word	0x20000eb0
 800ca88:	0000ffff 	.word	0x0000ffff
 800ca8c:	41200000 	.word	0x41200000
 800ca90:	0802a43c 	.word	0x0802a43c
 800ca94:	0802a468 	.word	0x0802a468
 800ca98:	0802a494 	.word	0x0802a494
 800ca9c:	0802a4c0 	.word	0x0802a4c0
 800caa0:	00007fff 	.word	0x00007fff
 800caa4:	42c80000 	.word	0x42c80000
 800caa8:	0802a4ec 	.word	0x0802a4ec
 800caac:	43480000 	.word	0x43480000
 800cab0:	0802a510 	.word	0x0802a510
 800cab4:	0802a538 	.word	0x0802a538
 800cab8:	0802a550 	.word	0x0802a550

0800cabc <sen5xStore>:

void sen5xStore() {
 800cabc:	b580      	push	{r7, lr}
 800cabe:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800cac0:	4b2e      	ldr	r3, [pc, #184]	@ (800cb7c <sen5xStore+0xc0>)
 800cac2:	885b      	ldrh	r3, [r3, #2]
 800cac4:	4a2e      	ldr	r2, [pc, #184]	@ (800cb80 <sen5xStore+0xc4>)
 800cac6:	4293      	cmp	r3, r2
 800cac8:	d004      	beq.n	800cad4 <sen5xStore+0x18>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800caca:	4b2c      	ldr	r3, [pc, #176]	@ (800cb7c <sen5xStore+0xc0>)
 800cacc:	885b      	ldrh	r3, [r3, #2]
 800cace:	0018      	movs	r0, r3
 800cad0:	f7f7 fdb0 	bl	8004634 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800cad4:	4b29      	ldr	r3, [pc, #164]	@ (800cb7c <sen5xStore+0xc0>)
 800cad6:	88db      	ldrh	r3, [r3, #6]
 800cad8:	4a29      	ldr	r2, [pc, #164]	@ (800cb80 <sen5xStore+0xc4>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d004      	beq.n	800cae8 <sen5xStore+0x2c>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800cade:	4b27      	ldr	r3, [pc, #156]	@ (800cb7c <sen5xStore+0xc0>)
 800cae0:	88db      	ldrh	r3, [r3, #6]
 800cae2:	0018      	movs	r0, r3
 800cae4:	f7f7 fdd2 	bl	800468c <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800cae8:	4b26      	ldr	r3, [pc, #152]	@ (800cb84 <sen5xStore+0xc8>)
 800caea:	791b      	ldrb	r3, [r3, #4]
 800caec:	2b34      	cmp	r3, #52	@ 0x34
 800caee:	d003      	beq.n	800caf8 <sen5xStore+0x3c>
 800caf0:	4b24      	ldr	r3, [pc, #144]	@ (800cb84 <sen5xStore+0xc8>)
 800caf2:	791b      	ldrb	r3, [r3, #4]
 800caf4:	2b35      	cmp	r3, #53	@ 0x35
 800caf6:	d13d      	bne.n	800cb74 <sen5xStore+0xb8>
    if (!VOCNOx || usbPluggedIn) {
 800caf8:	4b23      	ldr	r3, [pc, #140]	@ (800cb88 <sen5xStore+0xcc>)
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	2201      	movs	r2, #1
 800cafe:	4053      	eors	r3, r2
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d103      	bne.n	800cb0e <sen5xStore+0x52>
 800cb06:	4b21      	ldr	r3, [pc, #132]	@ (800cb8c <sen5xStore+0xd0>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d032      	beq.n	800cb74 <sen5xStore+0xb8>
      if (sen5x_data.voc_index != 0x7fff) {
 800cb0e:	4b1b      	ldr	r3, [pc, #108]	@ (800cb7c <sen5xStore+0xc0>)
 800cb10:	220c      	movs	r2, #12
 800cb12:	5e9b      	ldrsh	r3, [r3, r2]
 800cb14:	4a1e      	ldr	r2, [pc, #120]	@ (800cb90 <sen5xStore+0xd4>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d019      	beq.n	800cb4e <sen5xStore+0x92>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800cb1a:	4b18      	ldr	r3, [pc, #96]	@ (800cb7c <sen5xStore+0xc0>)
 800cb1c:	220c      	movs	r2, #12
 800cb1e:	5e9b      	ldrsh	r3, [r3, r2]
 800cb20:	210a      	movs	r1, #10
 800cb22:	0018      	movs	r0, r3
 800cb24:	f7f3 fbc8 	bl	80002b8 <__divsi3>
 800cb28:	0003      	movs	r3, r0
 800cb2a:	b21b      	sxth	r3, r3
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	0018      	movs	r0, r3
 800cb30:	f003 fe42 	bl	80107b8 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800cb34:	4b11      	ldr	r3, [pc, #68]	@ (800cb7c <sen5xStore+0xc0>)
 800cb36:	220c      	movs	r2, #12
 800cb38:	5e9b      	ldrsh	r3, [r3, r2]
 800cb3a:	210a      	movs	r1, #10
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	f7f3 fbbb 	bl	80002b8 <__divsi3>
 800cb42:	0003      	movs	r3, r0
 800cb44:	b21b      	sxth	r3, r3
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	0018      	movs	r0, r3
 800cb4a:	f7f7 fd29 	bl	80045a0 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800cb4e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb7c <sen5xStore+0xc0>)
 800cb50:	220e      	movs	r2, #14
 800cb52:	5e9b      	ldrsh	r3, [r3, r2]
 800cb54:	4a0e      	ldr	r2, [pc, #56]	@ (800cb90 <sen5xStore+0xd4>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d00c      	beq.n	800cb74 <sen5xStore+0xb8>
        setNOx(sen5x_data.nox_index / 10);
 800cb5a:	4b08      	ldr	r3, [pc, #32]	@ (800cb7c <sen5xStore+0xc0>)
 800cb5c:	220e      	movs	r2, #14
 800cb5e:	5e9b      	ldrsh	r3, [r3, r2]
 800cb60:	210a      	movs	r1, #10
 800cb62:	0018      	movs	r0, r3
 800cb64:	f7f3 fba8 	bl	80002b8 <__divsi3>
 800cb68:	0003      	movs	r3, r0
 800cb6a:	b21b      	sxth	r3, r3
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	0018      	movs	r0, r3
 800cb70:	f7f7 fdb8 	bl	80046e4 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800cb74:	46c0      	nop			@ (mov r8, r8)
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	46c0      	nop			@ (mov r8, r8)
 800cb7c:	20000eb0 	.word	0x20000eb0
 800cb80:	0000ffff 	.word	0x0000ffff
 800cb84:	20000ea0 	.word	0x20000ea0
 800cb88:	20000e9e 	.word	0x20000e9e
 800cb8c:	20001e2d 	.word	0x20001e2d
 800cb90:	00007fff 	.word	0x00007fff

0800cb94 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800cb94:	b590      	push	{r4, r7, lr}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af02      	add	r7, sp, #8
 800cb9a:	6039      	str	r1, [r7, #0]
 800cb9c:	0011      	movs	r1, r2
 800cb9e:	1dfb      	adds	r3, r7, #7
 800cba0:	1c02      	adds	r2, r0, #0
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	1d3b      	adds	r3, r7, #4
 800cba6:	1c0a      	adds	r2, r1, #0
 800cba8:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800cbaa:	1dfb      	adds	r3, r7, #7
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	18db      	adds	r3, r3, r3
 800cbb2:	b299      	uxth	r1, r3
 800cbb4:	1d3b      	adds	r3, r7, #4
 800cbb6:	881b      	ldrh	r3, [r3, #0]
 800cbb8:	683a      	ldr	r2, [r7, #0]
 800cbba:	4805      	ldr	r0, [pc, #20]	@ (800cbd0 <sensirion_i2c_hal_read+0x3c>)
 800cbbc:	2464      	movs	r4, #100	@ 0x64
 800cbbe:	9400      	str	r4, [sp, #0]
 800cbc0:	f006 fefe 	bl	80139c0 <HAL_I2C_Master_Receive>
 800cbc4:	0003      	movs	r3, r0
 800cbc6:	b25b      	sxtb	r3, r3
}
 800cbc8:	0018      	movs	r0, r3
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	b003      	add	sp, #12
 800cbce:	bd90      	pop	{r4, r7, pc}
 800cbd0:	20000c74 	.word	0x20000c74

0800cbd4 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800cbd4:	b590      	push	{r4, r7, lr}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af02      	add	r7, sp, #8
 800cbda:	6039      	str	r1, [r7, #0]
 800cbdc:	0011      	movs	r1, r2
 800cbde:	1dfb      	adds	r3, r7, #7
 800cbe0:	1c02      	adds	r2, r0, #0
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	1d3b      	adds	r3, r7, #4
 800cbe6:	1c0a      	adds	r2, r1, #0
 800cbe8:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800cbea:	1dfb      	adds	r3, r7, #7
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	18db      	adds	r3, r3, r3
 800cbf2:	b299      	uxth	r1, r3
 800cbf4:	1d3b      	adds	r3, r7, #4
 800cbf6:	881b      	ldrh	r3, [r3, #0]
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	4805      	ldr	r0, [pc, #20]	@ (800cc10 <sensirion_i2c_hal_write+0x3c>)
 800cbfc:	2464      	movs	r4, #100	@ 0x64
 800cbfe:	9400      	str	r4, [sp, #0]
 800cc00:	f006 fdd6 	bl	80137b0 <HAL_I2C_Master_Transmit>
 800cc04:	0003      	movs	r3, r0
 800cc06:	b25b      	sxtb	r3, r3
}
 800cc08:	0018      	movs	r0, r3
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	b003      	add	sp, #12
 800cc0e:	bd90      	pop	{r4, r7, pc}
 800cc10:	20000c74 	.word	0x20000c74

0800cc14 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	22fa      	movs	r2, #250	@ 0xfa
 800cc20:	0091      	lsls	r1, r2, #2
 800cc22:	0018      	movs	r0, r3
 800cc24:	f7f3 fabe 	bl	80001a4 <__udivsi3>
 800cc28:	0003      	movs	r3, r0
 800cc2a:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	22fa      	movs	r2, #250	@ 0xfa
 800cc30:	0091      	lsls	r1, r2, #2
 800cc32:	0018      	movs	r0, r3
 800cc34:	f7f3 fb3c 	bl	80002b0 <__aeabi_uidivmod>
 800cc38:	1e0b      	subs	r3, r1, #0
 800cc3a:	d002      	beq.n	800cc42 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	0018      	movs	r0, r3
 800cc46:	f005 fa5d 	bl	8012104 <HAL_Delay>
}
 800cc4a:	46c0      	nop			@ (mov r8, r8)
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	b004      	add	sp, #16
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800cc5e:	1d3b      	adds	r3, r7, #4
 800cc60:	0018      	movs	r0, r3
 800cc62:	f000 fd01 	bl	800d668 <sen5x_read_device_status>
 800cc66:	1e03      	subs	r3, r0, #0
 800cc68:	d007      	beq.n	800cc7a <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800cc6a:	4a28      	ldr	r2, [pc, #160]	@ (800cd0c <sen5x_check_for_errors+0xb8>)
 800cc6c:	4b28      	ldr	r3, [pc, #160]	@ (800cd10 <sen5x_check_for_errors+0xbc>)
 800cc6e:	0019      	movs	r1, r3
 800cc70:	2001      	movs	r0, #1
 800cc72:	f004 fdf1 	bl	8011858 <CreateLine>
    return true;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e043      	b.n	800cd02 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d101      	bne.n	800cc84 <sen5x_check_for_errors+0x30>
    return false;
 800cc80:	2300      	movs	r3, #0
 800cc82:	e03e      	b.n	800cd02 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	2380      	movs	r3, #128	@ 0x80
 800cc88:	039b      	lsls	r3, r3, #14
 800cc8a:	4013      	ands	r3, r2
 800cc8c:	d005      	beq.n	800cc9a <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800cc8e:	4a21      	ldr	r2, [pc, #132]	@ (800cd14 <sen5x_check_for_errors+0xc0>)
 800cc90:	4b21      	ldr	r3, [pc, #132]	@ (800cd18 <sen5x_check_for_errors+0xc4>)
 800cc92:	0019      	movs	r1, r3
 800cc94:	2003      	movs	r0, #3
 800cc96:	f004 fddf 	bl	8011858 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	2380      	movs	r3, #128	@ 0x80
 800cc9e:	031b      	lsls	r3, r3, #12
 800cca0:	4013      	ands	r3, r2
 800cca2:	d005      	beq.n	800ccb0 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800cca4:	4a1d      	ldr	r2, [pc, #116]	@ (800cd1c <sen5x_check_for_errors+0xc8>)
 800cca6:	4b1c      	ldr	r3, [pc, #112]	@ (800cd18 <sen5x_check_for_errors+0xc4>)
 800cca8:	0019      	movs	r1, r3
 800ccaa:	2003      	movs	r0, #3
 800ccac:	f004 fdd4 	bl	8011858 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2280      	movs	r2, #128	@ 0x80
 800ccb4:	4013      	ands	r3, r2
 800ccb6:	d005      	beq.n	800ccc4 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800ccb8:	4a19      	ldr	r2, [pc, #100]	@ (800cd20 <sen5x_check_for_errors+0xcc>)
 800ccba:	4b17      	ldr	r3, [pc, #92]	@ (800cd18 <sen5x_check_for_errors+0xc4>)
 800ccbc:	0019      	movs	r1, r3
 800ccbe:	2003      	movs	r0, #3
 800ccc0:	f004 fdca 	bl	8011858 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2240      	movs	r2, #64	@ 0x40
 800ccc8:	4013      	ands	r3, r2
 800ccca:	d005      	beq.n	800ccd8 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800cccc:	4a15      	ldr	r2, [pc, #84]	@ (800cd24 <sen5x_check_for_errors+0xd0>)
 800ccce:	4b12      	ldr	r3, [pc, #72]	@ (800cd18 <sen5x_check_for_errors+0xc4>)
 800ccd0:	0019      	movs	r1, r3
 800ccd2:	2003      	movs	r0, #3
 800ccd4:	f004 fdc0 	bl	8011858 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2220      	movs	r2, #32
 800ccdc:	4013      	ands	r3, r2
 800ccde:	d005      	beq.n	800ccec <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800cce0:	4a11      	ldr	r2, [pc, #68]	@ (800cd28 <sen5x_check_for_errors+0xd4>)
 800cce2:	4b0d      	ldr	r3, [pc, #52]	@ (800cd18 <sen5x_check_for_errors+0xc4>)
 800cce4:	0019      	movs	r1, r3
 800cce6:	2003      	movs	r0, #3
 800cce8:	f004 fdb6 	bl	8011858 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2210      	movs	r2, #16
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	d005      	beq.n	800cd00 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800ccf4:	4a0d      	ldr	r2, [pc, #52]	@ (800cd2c <sen5x_check_for_errors+0xd8>)
 800ccf6:	4b08      	ldr	r3, [pc, #32]	@ (800cd18 <sen5x_check_for_errors+0xc4>)
 800ccf8:	0019      	movs	r1, r3
 800ccfa:	2003      	movs	r0, #3
 800ccfc:	f004 fdac 	bl	8011858 <CreateLine>
  }
  return 1;
 800cd00:	2301      	movs	r3, #1
}
 800cd02:	0018      	movs	r0, r3
 800cd04:	46bd      	mov	sp, r7
 800cd06:	b002      	add	sp, #8
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	46c0      	nop			@ (mov r8, r8)
 800cd0c:	0802a568 	.word	0x0802a568
 800cd10:	0802a0ec 	.word	0x0802a0ec
 800cd14:	0802a594 	.word	0x0802a594
 800cd18:	0802a0c0 	.word	0x0802a0c0
 800cd1c:	0802a5b4 	.word	0x0802a5b4
 800cd20:	0802a5d0 	.word	0x0802a5d0
 800cd24:	0802a5f4 	.word	0x0802a5f4
 800cd28:	0802a614 	.word	0x0802a614
 800cd2c:	0802a628 	.word	0x0802a628

0800cd30 <set_light_on_state>:

void set_light_on_state(void) {
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800cd34:	4b15      	ldr	r3, [pc, #84]	@ (800cd8c <set_light_on_state+0x5c>)
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	4053      	eors	r3, r2
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d008      	beq.n	800cd54 <set_light_on_state+0x24>
    sen5x_Power_On();
 800cd42:	f7ff fb43 	bl	800c3cc <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 800cd46:	4a12      	ldr	r2, [pc, #72]	@ (800cd90 <set_light_on_state+0x60>)
 800cd48:	4b12      	ldr	r3, [pc, #72]	@ (800cd94 <set_light_on_state+0x64>)
 800cd4a:	0019      	movs	r1, r3
 800cd4c:	2003      	movs	r0, #3
 800cd4e:	f004 fd83 	bl	8011858 <CreateLine>
 800cd52:	e00a      	b.n	800cd6a <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800cd54:	f005 f9cc 	bl	80120f0 <HAL_GetTick>
 800cd58:	0002      	movs	r2, r0
 800cd5a:	4b0f      	ldr	r3, [pc, #60]	@ (800cd98 <set_light_on_state+0x68>)
 800cd5c:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800cd5e:	4a0f      	ldr	r2, [pc, #60]	@ (800cd9c <set_light_on_state+0x6c>)
 800cd60:	4b0c      	ldr	r3, [pc, #48]	@ (800cd94 <set_light_on_state+0x64>)
 800cd62:	0019      	movs	r1, r3
 800cd64:	2003      	movs	r0, #3
 800cd66:	f004 fd77 	bl	8011858 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800cd6a:	f7ff fcbf 	bl	800c6ec <sen5x_lightup_measurement>
 800cd6e:	1e03      	subs	r3, r0, #0
 800cd70:	d005      	beq.n	800cd7e <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800cd72:	4a0b      	ldr	r2, [pc, #44]	@ (800cda0 <set_light_on_state+0x70>)
 800cd74:	4b0b      	ldr	r3, [pc, #44]	@ (800cda4 <set_light_on_state+0x74>)
 800cd76:	0019      	movs	r1, r3
 800cd78:	2001      	movs	r0, #1
 800cd7a:	f004 fd6d 	bl	8011858 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800cd7e:	4b0a      	ldr	r3, [pc, #40]	@ (800cda8 <set_light_on_state+0x78>)
 800cd80:	2203      	movs	r2, #3
 800cd82:	701a      	strb	r2, [r3, #0]
}
 800cd84:	46c0      	nop			@ (mov r8, r8)
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	46c0      	nop			@ (mov r8, r8)
 800cd8c:	20000e9d 	.word	0x20000e9d
 800cd90:	0802a664 	.word	0x0802a664
 800cd94:	0802a0c0 	.word	0x0802a0c0
 800cd98:	20000eac 	.word	0x20000eac
 800cd9c:	0802a690 	.word	0x0802a690
 800cda0:	0802a6a8 	.word	0x0802a6a8
 800cda4:	0802a0ec 	.word	0x0802a0ec
 800cda8:	2000009d 	.word	0x2000009d

0800cdac <sen5x_statemachine>:

void sen5x_statemachine() {
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800cdb2:	1dfb      	adds	r3, r7, #7
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800cdb8:	4b86      	ldr	r3, [pc, #536]	@ (800cfd4 <sen5x_statemachine+0x228>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	0018      	movs	r0, r3
 800cdbe:	f004 fcf5 	bl	80117ac <TimestampIsReached>
 800cdc2:	1e03      	subs	r3, r0, #0
 800cdc4:	d100      	bne.n	800cdc8 <sen5x_statemachine+0x1c>
 800cdc6:	e100      	b.n	800cfca <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800cdc8:	4b83      	ldr	r3, [pc, #524]	@ (800cfd8 <sen5x_statemachine+0x22c>)
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	2b05      	cmp	r3, #5
 800cdce:	d900      	bls.n	800cdd2 <sen5x_statemachine+0x26>
 800cdd0:	e0fb      	b.n	800cfca <sen5x_statemachine+0x21e>
 800cdd2:	009a      	lsls	r2, r3, #2
 800cdd4:	4b81      	ldr	r3, [pc, #516]	@ (800cfdc <sen5x_statemachine+0x230>)
 800cdd6:	18d3      	adds	r3, r2, r3
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800cddc:	4a80      	ldr	r2, [pc, #512]	@ (800cfe0 <sen5x_statemachine+0x234>)
 800cdde:	4b81      	ldr	r3, [pc, #516]	@ (800cfe4 <sen5x_statemachine+0x238>)
 800cde0:	0019      	movs	r1, r3
 800cde2:	2001      	movs	r0, #1
 800cde4:	f004 fd38 	bl	8011858 <CreateLine>
      SetPMSensorStatus(false);
 800cde8:	2000      	movs	r0, #0
 800cdea:	f7fe fb23 	bl	800b434 <SetPMSensorStatus>
      DisablePMSensor();
 800cdee:	f7fe fab9 	bl	800b364 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800cdf2:	f005 f97d 	bl	80120f0 <HAL_GetTick>
 800cdf6:	0003      	movs	r3, r0
 800cdf8:	4a7b      	ldr	r2, [pc, #492]	@ (800cfe8 <sen5x_statemachine+0x23c>)
 800cdfa:	189a      	adds	r2, r3, r2
 800cdfc:	4b75      	ldr	r3, [pc, #468]	@ (800cfd4 <sen5x_statemachine+0x228>)
 800cdfe:	601a      	str	r2, [r3, #0]
      break;
 800ce00:	e0e3      	b.n	800cfca <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800ce02:	f005 f975 	bl	80120f0 <HAL_GetTick>
 800ce06:	0003      	movs	r3, r0
 800ce08:	4a78      	ldr	r2, [pc, #480]	@ (800cfec <sen5x_statemachine+0x240>)
 800ce0a:	189a      	adds	r2, r3, r2
 800ce0c:	4b71      	ldr	r3, [pc, #452]	@ (800cfd4 <sen5x_statemachine+0x228>)
 800ce0e:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800ce10:	f7ff ff8e 	bl	800cd30 <set_light_on_state>
      break;
 800ce14:	e0d9      	b.n	800cfca <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800ce16:	4b70      	ldr	r3, [pc, #448]	@ (800cfd8 <sen5x_statemachine+0x22c>)
 800ce18:	2202      	movs	r2, #2
 800ce1a:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800ce1c:	4b74      	ldr	r3, [pc, #464]	@ (800cff0 <sen5x_statemachine+0x244>)
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	2b05      	cmp	r3, #5
 800ce22:	d905      	bls.n	800ce30 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800ce24:	4b6c      	ldr	r3, [pc, #432]	@ (800cfd8 <sen5x_statemachine+0x22c>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800ce2a:	f7ff faff 	bl	800c42c <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800ce2e:	e0c9      	b.n	800cfc4 <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800ce30:	f7ff ff10 	bl	800cc54 <sen5x_check_for_errors>
 800ce34:	1e03      	subs	r3, r0, #0
 800ce36:	d01f      	beq.n	800ce78 <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800ce38:	f000 fc68 	bl	800d70c <sen5x_device_reset>
 800ce3c:	1e03      	subs	r3, r0, #0
 800ce3e:	d00f      	beq.n	800ce60 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800ce40:	4a6c      	ldr	r2, [pc, #432]	@ (800cff4 <sen5x_statemachine+0x248>)
 800ce42:	4b68      	ldr	r3, [pc, #416]	@ (800cfe4 <sen5x_statemachine+0x238>)
 800ce44:	0019      	movs	r1, r3
 800ce46:	2001      	movs	r0, #1
 800ce48:	f004 fd06 	bl	8011858 <CreateLine>
            sen5xErrors++;
 800ce4c:	4b68      	ldr	r3, [pc, #416]	@ (800cff0 <sen5x_statemachine+0x244>)
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	3301      	adds	r3, #1
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	4b66      	ldr	r3, [pc, #408]	@ (800cff0 <sen5x_statemachine+0x244>)
 800ce56:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800ce58:	4b5f      	ldr	r3, [pc, #380]	@ (800cfd8 <sen5x_statemachine+0x22c>)
 800ce5a:	2203      	movs	r2, #3
 800ce5c:	701a      	strb	r2, [r3, #0]
 800ce5e:	e005      	b.n	800ce6c <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800ce60:	4a65      	ldr	r2, [pc, #404]	@ (800cff8 <sen5x_statemachine+0x24c>)
 800ce62:	4b66      	ldr	r3, [pc, #408]	@ (800cffc <sen5x_statemachine+0x250>)
 800ce64:	0019      	movs	r1, r3
 800ce66:	2002      	movs	r0, #2
 800ce68:	f004 fcf6 	bl	8011858 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800ce6c:	f005 f940 	bl	80120f0 <HAL_GetTick>
 800ce70:	0002      	movs	r2, r0
 800ce72:	4b58      	ldr	r3, [pc, #352]	@ (800cfd4 <sen5x_statemachine+0x228>)
 800ce74:	601a      	str	r2, [r3, #0]
      break;
 800ce76:	e0a5      	b.n	800cfc4 <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800ce78:	4b5d      	ldr	r3, [pc, #372]	@ (800cff0 <sen5x_statemachine+0x244>)
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d100      	bne.n	800ce82 <sen5x_statemachine+0xd6>
 800ce80:	e0a0      	b.n	800cfc4 <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800ce82:	4b5b      	ldr	r3, [pc, #364]	@ (800cff0 <sen5x_statemachine+0x244>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800ce88:	4a5d      	ldr	r2, [pc, #372]	@ (800d000 <sen5x_statemachine+0x254>)
 800ce8a:	4b5e      	ldr	r3, [pc, #376]	@ (800d004 <sen5x_statemachine+0x258>)
 800ce8c:	0019      	movs	r1, r3
 800ce8e:	2003      	movs	r0, #3
 800ce90:	f004 fce2 	bl	8011858 <CreateLine>
      break;
 800ce94:	e096      	b.n	800cfc4 <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800ce96:	1dfb      	adds	r3, r7, #7
 800ce98:	0018      	movs	r0, r3
 800ce9a:	f000 f953 	bl	800d144 <sen5x_read_data_ready>
      if (data_ready) {
 800ce9e:	1dfb      	adds	r3, r7, #7
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d02c      	beq.n	800cf00 <sen5x_statemachine+0x154>
        SetPMIndicator();
 800cea6:	f003 fbe7 	bl	8010678 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800ceaa:	4b57      	ldr	r3, [pc, #348]	@ (800d008 <sen5x_statemachine+0x25c>)
 800ceac:	0018      	movs	r0, r3
 800ceae:	f7ff fcc3 	bl	800c838 <sen5x_read_measurement>
 800ceb2:	1e03      	subs	r3, r0, #0
 800ceb4:	d00b      	beq.n	800cece <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800ceb6:	4a55      	ldr	r2, [pc, #340]	@ (800d00c <sen5x_statemachine+0x260>)
 800ceb8:	4b4a      	ldr	r3, [pc, #296]	@ (800cfe4 <sen5x_statemachine+0x238>)
 800ceba:	0019      	movs	r1, r3
 800cebc:	2001      	movs	r0, #1
 800cebe:	f004 fccb 	bl	8011858 <CreateLine>
          sen5xErrors++;
 800cec2:	4b4b      	ldr	r3, [pc, #300]	@ (800cff0 <sen5x_statemachine+0x244>)
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	3301      	adds	r3, #1
 800cec8:	b2da      	uxtb	r2, r3
 800ceca:	4b49      	ldr	r3, [pc, #292]	@ (800cff0 <sen5x_statemachine+0x244>)
 800cecc:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800cece:	4b50      	ldr	r3, [pc, #320]	@ (800d010 <sen5x_statemachine+0x264>)
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	3301      	adds	r3, #1
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	4b4e      	ldr	r3, [pc, #312]	@ (800d010 <sen5x_statemachine+0x264>)
 800ced8:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800ceda:	4b4d      	ldr	r3, [pc, #308]	@ (800d010 <sen5x_statemachine+0x264>)
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2b1f      	cmp	r3, #31
 800cee0:	d102      	bne.n	800cee8 <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800cee2:	4b4b      	ldr	r3, [pc, #300]	@ (800d010 <sen5x_statemachine+0x264>)
 800cee4:	2200      	movs	r2, #0
 800cee6:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800cee8:	4b49      	ldr	r3, [pc, #292]	@ (800d010 <sen5x_statemachine+0x264>)
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d901      	bls.n	800cef4 <sen5x_statemachine+0x148>
          sen5xStore();
 800cef0:	f7ff fde4 	bl	800cabc <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800cef4:	4b46      	ldr	r3, [pc, #280]	@ (800d010 <sen5x_statemachine+0x264>)
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	2b02      	cmp	r3, #2
 800cefa:	d101      	bne.n	800cf00 <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800cefc:	f7ff fcf8 	bl	800c8f0 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800cf00:	4b44      	ldr	r3, [pc, #272]	@ (800d014 <sen5x_statemachine+0x268>)
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d103      	bne.n	800cf10 <sen5x_statemachine+0x164>
 800cf08:	4b41      	ldr	r3, [pc, #260]	@ (800d010 <sen5x_statemachine+0x264>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d95b      	bls.n	800cfc8 <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800cf10:	4b31      	ldr	r3, [pc, #196]	@ (800cfd8 <sen5x_statemachine+0x22c>)
 800cf12:	2204      	movs	r2, #4
 800cf14:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cf16:	e057      	b.n	800cfc8 <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800cf18:	f7fb fa90 	bl	800843c <RTC_GetWeekday>
 800cf1c:	0003      	movs	r3, r0
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d11a      	bne.n	800cf58 <sen5x_statemachine+0x1ac>
 800cf22:	4b3d      	ldr	r3, [pc, #244]	@ (800d018 <sen5x_statemachine+0x26c>)
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	2201      	movs	r2, #1
 800cf28:	4053      	eors	r3, r2
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d013      	beq.n	800cf58 <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800cf30:	f000 f9ee 	bl	800d310 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800cf34:	4a39      	ldr	r2, [pc, #228]	@ (800d01c <sen5x_statemachine+0x270>)
 800cf36:	4b31      	ldr	r3, [pc, #196]	@ (800cffc <sen5x_statemachine+0x250>)
 800cf38:	0019      	movs	r1, r3
 800cf3a:	2002      	movs	r0, #2
 800cf3c:	f004 fc8c 	bl	8011858 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800cf40:	f005 f8d6 	bl	80120f0 <HAL_GetTick>
 800cf44:	0003      	movs	r3, r0
 800cf46:	4a36      	ldr	r2, [pc, #216]	@ (800d020 <sen5x_statemachine+0x274>)
 800cf48:	189a      	adds	r2, r3, r2
 800cf4a:	4b22      	ldr	r3, [pc, #136]	@ (800cfd4 <sen5x_statemachine+0x228>)
 800cf4c:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800cf4e:	4b32      	ldr	r3, [pc, #200]	@ (800d018 <sen5x_statemachine+0x26c>)
 800cf50:	2201      	movs	r2, #1
 800cf52:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800cf54:	f7ff fbca 	bl	800c6ec <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800cf58:	4b1f      	ldr	r3, [pc, #124]	@ (800cfd8 <sen5x_statemachine+0x22c>)
 800cf5a:	2205      	movs	r2, #5
 800cf5c:	701a      	strb	r2, [r3, #0]
      break;
 800cf5e:	e034      	b.n	800cfca <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800cf60:	4b2c      	ldr	r3, [pc, #176]	@ (800d014 <sen5x_statemachine+0x268>)
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	2201      	movs	r2, #1
 800cf66:	4053      	eors	r3, r2
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d01c      	beq.n	800cfa8 <sen5x_statemachine+0x1fc>
 800cf6e:	4b2d      	ldr	r3, [pc, #180]	@ (800d024 <sen5x_statemachine+0x278>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	2201      	movs	r2, #1
 800cf74:	4053      	eors	r3, r2
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d015      	beq.n	800cfa8 <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800cf7c:	f7ff fc02 	bl	800c784 <sen5x_extinguish_measurement>
 800cf80:	1e03      	subs	r3, r0, #0
 800cf82:	d005      	beq.n	800cf90 <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800cf84:	4a28      	ldr	r2, [pc, #160]	@ (800d028 <sen5x_statemachine+0x27c>)
 800cf86:	4b17      	ldr	r3, [pc, #92]	@ (800cfe4 <sen5x_statemachine+0x238>)
 800cf88:	0019      	movs	r1, r3
 800cf8a:	2001      	movs	r0, #1
 800cf8c:	f004 fc64 	bl	8011858 <CreateLine>
        }
        sen5xSamples = 0;
 800cf90:	4b1f      	ldr	r3, [pc, #124]	@ (800d010 <sen5x_statemachine+0x264>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800cf96:	f7ff fa49 	bl	800c42c <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800cf9a:	2000      	movs	r0, #0
 800cf9c:	f7fe fa4a 	bl	800b434 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800cfa0:	4b0d      	ldr	r3, [pc, #52]	@ (800cfd8 <sen5x_statemachine+0x22c>)
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	701a      	strb	r2, [r3, #0]
 800cfa6:	e002      	b.n	800cfae <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800cfa8:	4b0b      	ldr	r3, [pc, #44]	@ (800cfd8 <sen5x_statemachine+0x22c>)
 800cfaa:	2203      	movs	r2, #3
 800cfac:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800cfae:	f003 fb89 	bl	80106c4 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800cfb2:	f005 f89d 	bl	80120f0 <HAL_GetTick>
 800cfb6:	0003      	movs	r3, r0
 800cfb8:	22fa      	movs	r2, #250	@ 0xfa
 800cfba:	0092      	lsls	r2, r2, #2
 800cfbc:	189a      	adds	r2, r3, r2
 800cfbe:	4b05      	ldr	r3, [pc, #20]	@ (800cfd4 <sen5x_statemachine+0x228>)
 800cfc0:	601a      	str	r2, [r3, #0]
    }
  }
}
 800cfc2:	e002      	b.n	800cfca <sen5x_statemachine+0x21e>
      break;
 800cfc4:	46c0      	nop			@ (mov r8, r8)
 800cfc6:	e000      	b.n	800cfca <sen5x_statemachine+0x21e>
      break;
 800cfc8:	46c0      	nop			@ (mov r8, r8)
}
 800cfca:	46c0      	nop			@ (mov r8, r8)
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	b002      	add	sp, #8
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	46c0      	nop			@ (mov r8, r8)
 800cfd4:	20000eac 	.word	0x20000eac
 800cfd8:	2000009d 	.word	0x2000009d
 800cfdc:	0802b118 	.word	0x0802b118
 800cfe0:	0802a6d4 	.word	0x0802a6d4
 800cfe4:	0802a0ec 	.word	0x0802a0ec
 800cfe8:	002fefd8 	.word	0x002fefd8
 800cfec:	00005910 	.word	0x00005910
 800cff0:	20000ea9 	.word	0x20000ea9
 800cff4:	0802a704 	.word	0x0802a704
 800cff8:	0802a71c 	.word	0x0802a71c
 800cffc:	0802a080 	.word	0x0802a080
 800d000:	0802a734 	.word	0x0802a734
 800d004:	0802a0c0 	.word	0x0802a0c0
 800d008:	20000eb0 	.word	0x20000eb0
 800d00c:	0802a748 	.word	0x0802a748
 800d010:	20000ea8 	.word	0x20000ea8
 800d014:	20001e2d 	.word	0x20001e2d
 800d018:	20000e9c 	.word	0x20000e9c
 800d01c:	0802a778 	.word	0x0802a778
 800d020:	00002710 	.word	0x00002710
 800d024:	20001e2e 	.word	0x20001e2e
 800d028:	0802a790 	.word	0x0802a790

0800d02c <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800d02c:	b590      	push	{r4, r7, lr}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d032:	1dbb      	adds	r3, r7, #6
 800d034:	2200      	movs	r2, #0
 800d036:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800d038:	1dbc      	adds	r4, r7, #6
 800d03a:	1dbb      	adds	r3, r7, #6
 800d03c:	8819      	ldrh	r1, [r3, #0]
 800d03e:	003b      	movs	r3, r7
 800d040:	2221      	movs	r2, #33	@ 0x21
 800d042:	0018      	movs	r0, r3
 800d044:	f001 fb56 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d048:	0003      	movs	r3, r0
 800d04a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d04c:	1d3c      	adds	r4, r7, #4
 800d04e:	1dbb      	adds	r3, r7, #6
 800d050:	881a      	ldrh	r2, [r3, #0]
 800d052:	003b      	movs	r3, r7
 800d054:	0019      	movs	r1, r3
 800d056:	2069      	movs	r0, #105	@ 0x69
 800d058:	f001 fbd0 	bl	800e7fc <sensirion_i2c_write_data>
 800d05c:	0003      	movs	r3, r0
 800d05e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d060:	1d3b      	adds	r3, r7, #4
 800d062:	2200      	movs	r2, #0
 800d064:	5e9b      	ldrsh	r3, [r3, r2]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d003      	beq.n	800d072 <sen5x_start_measurement+0x46>
        return error;
 800d06a:	1d3b      	adds	r3, r7, #4
 800d06c:	2200      	movs	r2, #0
 800d06e:	5e9b      	ldrsh	r3, [r3, r2]
 800d070:	e004      	b.n	800d07c <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800d072:	4b04      	ldr	r3, [pc, #16]	@ (800d084 <sen5x_start_measurement+0x58>)
 800d074:	0018      	movs	r0, r3
 800d076:	f7ff fdcd 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	0018      	movs	r0, r3
 800d07e:	46bd      	mov	sp, r7
 800d080:	b003      	add	sp, #12
 800d082:	bd90      	pop	{r4, r7, pc}
 800d084:	0000c350 	.word	0x0000c350

0800d088 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800d088:	b590      	push	{r4, r7, lr}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d08e:	1dbb      	adds	r3, r7, #6
 800d090:	2200      	movs	r2, #0
 800d092:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800d094:	1dbc      	adds	r4, r7, #6
 800d096:	1dbb      	adds	r3, r7, #6
 800d098:	8819      	ldrh	r1, [r3, #0]
 800d09a:	003b      	movs	r3, r7
 800d09c:	2237      	movs	r2, #55	@ 0x37
 800d09e:	0018      	movs	r0, r3
 800d0a0:	f001 fb28 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d0a4:	0003      	movs	r3, r0
 800d0a6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d0a8:	1d3c      	adds	r4, r7, #4
 800d0aa:	1dbb      	adds	r3, r7, #6
 800d0ac:	881a      	ldrh	r2, [r3, #0]
 800d0ae:	003b      	movs	r3, r7
 800d0b0:	0019      	movs	r1, r3
 800d0b2:	2069      	movs	r0, #105	@ 0x69
 800d0b4:	f001 fba2 	bl	800e7fc <sensirion_i2c_write_data>
 800d0b8:	0003      	movs	r3, r0
 800d0ba:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d0bc:	1d3b      	adds	r3, r7, #4
 800d0be:	2200      	movs	r2, #0
 800d0c0:	5e9b      	ldrsh	r3, [r3, r2]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d003      	beq.n	800d0ce <sen5x_start_measurement_without_pm+0x46>
        return error;
 800d0c6:	1d3b      	adds	r3, r7, #4
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	5e9b      	ldrsh	r3, [r3, r2]
 800d0cc:	e004      	b.n	800d0d8 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800d0ce:	4b04      	ldr	r3, [pc, #16]	@ (800d0e0 <sen5x_start_measurement_without_pm+0x58>)
 800d0d0:	0018      	movs	r0, r3
 800d0d2:	f7ff fd9f 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d0d6:	2300      	movs	r3, #0
}
 800d0d8:	0018      	movs	r0, r3
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	b003      	add	sp, #12
 800d0de:	bd90      	pop	{r4, r7, pc}
 800d0e0:	0000c350 	.word	0x0000c350

0800d0e4 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800d0e4:	b590      	push	{r4, r7, lr}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d0ea:	1dbb      	adds	r3, r7, #6
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800d0f0:	1dbc      	adds	r4, r7, #6
 800d0f2:	2382      	movs	r3, #130	@ 0x82
 800d0f4:	005a      	lsls	r2, r3, #1
 800d0f6:	1dbb      	adds	r3, r7, #6
 800d0f8:	8819      	ldrh	r1, [r3, #0]
 800d0fa:	003b      	movs	r3, r7
 800d0fc:	0018      	movs	r0, r3
 800d0fe:	f001 faf9 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d102:	0003      	movs	r3, r0
 800d104:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d106:	1d3c      	adds	r4, r7, #4
 800d108:	1dbb      	adds	r3, r7, #6
 800d10a:	881a      	ldrh	r2, [r3, #0]
 800d10c:	003b      	movs	r3, r7
 800d10e:	0019      	movs	r1, r3
 800d110:	2069      	movs	r0, #105	@ 0x69
 800d112:	f001 fb73 	bl	800e7fc <sensirion_i2c_write_data>
 800d116:	0003      	movs	r3, r0
 800d118:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d11a:	1d3b      	adds	r3, r7, #4
 800d11c:	2200      	movs	r2, #0
 800d11e:	5e9b      	ldrsh	r3, [r3, r2]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d003      	beq.n	800d12c <sen5x_stop_measurement+0x48>
        return error;
 800d124:	1d3b      	adds	r3, r7, #4
 800d126:	2200      	movs	r2, #0
 800d128:	5e9b      	ldrsh	r3, [r3, r2]
 800d12a:	e004      	b.n	800d136 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800d12c:	4b04      	ldr	r3, [pc, #16]	@ (800d140 <sen5x_stop_measurement+0x5c>)
 800d12e:	0018      	movs	r0, r3
 800d130:	f7ff fd70 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d134:	2300      	movs	r3, #0
}
 800d136:	0018      	movs	r0, r3
 800d138:	46bd      	mov	sp, r7
 800d13a:	b003      	add	sp, #12
 800d13c:	bd90      	pop	{r4, r7, pc}
 800d13e:	46c0      	nop			@ (mov r8, r8)
 800d140:	00030d40 	.word	0x00030d40

0800d144 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800d144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800d14c:	250e      	movs	r5, #14
 800d14e:	197b      	adds	r3, r7, r5
 800d150:	2200      	movs	r2, #0
 800d152:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800d154:	197c      	adds	r4, r7, r5
 800d156:	4a22      	ldr	r2, [pc, #136]	@ (800d1e0 <sen5x_read_data_ready+0x9c>)
 800d158:	197b      	adds	r3, r7, r5
 800d15a:	8819      	ldrh	r1, [r3, #0]
 800d15c:	2308      	movs	r3, #8
 800d15e:	18fb      	adds	r3, r7, r3
 800d160:	0018      	movs	r0, r3
 800d162:	f001 fac7 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d166:	0003      	movs	r3, r0
 800d168:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d16a:	260c      	movs	r6, #12
 800d16c:	19bc      	adds	r4, r7, r6
 800d16e:	197b      	adds	r3, r7, r5
 800d170:	881a      	ldrh	r2, [r3, #0]
 800d172:	2308      	movs	r3, #8
 800d174:	18fb      	adds	r3, r7, r3
 800d176:	0019      	movs	r1, r3
 800d178:	2069      	movs	r0, #105	@ 0x69
 800d17a:	f001 fb3f 	bl	800e7fc <sensirion_i2c_write_data>
 800d17e:	0003      	movs	r3, r0
 800d180:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d182:	19bb      	adds	r3, r7, r6
 800d184:	2200      	movs	r2, #0
 800d186:	5e9b      	ldrsh	r3, [r3, r2]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d003      	beq.n	800d194 <sen5x_read_data_ready+0x50>
        return error;
 800d18c:	19bb      	adds	r3, r7, r6
 800d18e:	2200      	movs	r2, #0
 800d190:	5e9b      	ldrsh	r3, [r3, r2]
 800d192:	e020      	b.n	800d1d6 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d194:	4b13      	ldr	r3, [pc, #76]	@ (800d1e4 <sen5x_read_data_ready+0xa0>)
 800d196:	0018      	movs	r0, r3
 800d198:	f7ff fd3c 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800d19c:	250c      	movs	r5, #12
 800d19e:	197c      	adds	r4, r7, r5
 800d1a0:	2308      	movs	r3, #8
 800d1a2:	18fb      	adds	r3, r7, r3
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	0019      	movs	r1, r3
 800d1a8:	2069      	movs	r0, #105	@ 0x69
 800d1aa:	f001 fb3f 	bl	800e82c <sensirion_i2c_read_data_inplace>
 800d1ae:	0003      	movs	r3, r0
 800d1b0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d1b2:	197b      	adds	r3, r7, r5
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	5e9b      	ldrsh	r3, [r3, r2]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d003      	beq.n	800d1c4 <sen5x_read_data_ready+0x80>
        return error;
 800d1bc:	197b      	adds	r3, r7, r5
 800d1be:	2200      	movs	r2, #0
 800d1c0:	5e9b      	ldrsh	r3, [r3, r2]
 800d1c2:	e008      	b.n	800d1d6 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800d1c4:	2308      	movs	r3, #8
 800d1c6:	18fb      	adds	r3, r7, r3
 800d1c8:	785b      	ldrb	r3, [r3, #1]
 800d1ca:	1e5a      	subs	r2, r3, #1
 800d1cc:	4193      	sbcs	r3, r2
 800d1ce:	b2da      	uxtb	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800d1d4:	2300      	movs	r3, #0
}
 800d1d6:	0018      	movs	r0, r3
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	b005      	add	sp, #20
 800d1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1de:	46c0      	nop			@ (mov r8, r8)
 800d1e0:	00000202 	.word	0x00000202
 800d1e4:	00004e20 	.word	0x00004e20

0800d1e8 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800d1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ea:	b08d      	sub	sp, #52	@ 0x34
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	607a      	str	r2, [r7, #4]
 800d1f4:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800d1f6:	252e      	movs	r5, #46	@ 0x2e
 800d1f8:	197b      	adds	r3, r7, r5
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800d1fe:	197c      	adds	r4, r7, r5
 800d200:	23f1      	movs	r3, #241	@ 0xf1
 800d202:	009a      	lsls	r2, r3, #2
 800d204:	197b      	adds	r3, r7, r5
 800d206:	8819      	ldrh	r1, [r3, #0]
 800d208:	2314      	movs	r3, #20
 800d20a:	18fb      	adds	r3, r7, r3
 800d20c:	0018      	movs	r0, r3
 800d20e:	f001 fa71 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d212:	0003      	movs	r3, r0
 800d214:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d216:	262c      	movs	r6, #44	@ 0x2c
 800d218:	19bc      	adds	r4, r7, r6
 800d21a:	197b      	adds	r3, r7, r5
 800d21c:	881a      	ldrh	r2, [r3, #0]
 800d21e:	2314      	movs	r3, #20
 800d220:	18fb      	adds	r3, r7, r3
 800d222:	0019      	movs	r1, r3
 800d224:	2069      	movs	r0, #105	@ 0x69
 800d226:	f001 fae9 	bl	800e7fc <sensirion_i2c_write_data>
 800d22a:	0003      	movs	r3, r0
 800d22c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d22e:	19bb      	adds	r3, r7, r6
 800d230:	2200      	movs	r2, #0
 800d232:	5e9b      	ldrsh	r3, [r3, r2]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d003      	beq.n	800d240 <sen5x_read_measured_values+0x58>
        return error;
 800d238:	19bb      	adds	r3, r7, r6
 800d23a:	2200      	movs	r2, #0
 800d23c:	5e9b      	ldrsh	r3, [r3, r2]
 800d23e:	e060      	b.n	800d302 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d240:	4b32      	ldr	r3, [pc, #200]	@ (800d30c <sen5x_read_measured_values+0x124>)
 800d242:	0018      	movs	r0, r3
 800d244:	f7ff fce6 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800d248:	252c      	movs	r5, #44	@ 0x2c
 800d24a:	197c      	adds	r4, r7, r5
 800d24c:	2314      	movs	r3, #20
 800d24e:	18fb      	adds	r3, r7, r3
 800d250:	2210      	movs	r2, #16
 800d252:	0019      	movs	r1, r3
 800d254:	2069      	movs	r0, #105	@ 0x69
 800d256:	f001 fae9 	bl	800e82c <sensirion_i2c_read_data_inplace>
 800d25a:	0003      	movs	r3, r0
 800d25c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d25e:	197b      	adds	r3, r7, r5
 800d260:	2200      	movs	r2, #0
 800d262:	5e9b      	ldrsh	r3, [r3, r2]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d003      	beq.n	800d270 <sen5x_read_measured_values+0x88>
        return error;
 800d268:	197b      	adds	r3, r7, r5
 800d26a:	2200      	movs	r2, #0
 800d26c:	5e9b      	ldrsh	r3, [r3, r2]
 800d26e:	e048      	b.n	800d302 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800d270:	2414      	movs	r4, #20
 800d272:	193b      	adds	r3, r7, r4
 800d274:	0018      	movs	r0, r3
 800d276:	f000 fa79 	bl	800d76c <sensirion_common_bytes_to_uint16_t>
 800d27a:	0003      	movs	r3, r0
 800d27c:	001a      	movs	r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800d282:	193b      	adds	r3, r7, r4
 800d284:	3302      	adds	r3, #2
 800d286:	0018      	movs	r0, r3
 800d288:	f000 fa70 	bl	800d76c <sensirion_common_bytes_to_uint16_t>
 800d28c:	0003      	movs	r3, r0
 800d28e:	001a      	movs	r2, r3
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800d294:	193b      	adds	r3, r7, r4
 800d296:	3304      	adds	r3, #4
 800d298:	0018      	movs	r0, r3
 800d29a:	f000 fa67 	bl	800d76c <sensirion_common_bytes_to_uint16_t>
 800d29e:	0003      	movs	r3, r0
 800d2a0:	001a      	movs	r2, r3
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800d2a6:	193b      	adds	r3, r7, r4
 800d2a8:	3306      	adds	r3, #6
 800d2aa:	0018      	movs	r0, r3
 800d2ac:	f000 fa5e 	bl	800d76c <sensirion_common_bytes_to_uint16_t>
 800d2b0:	0003      	movs	r3, r0
 800d2b2:	001a      	movs	r2, r3
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800d2b8:	193b      	adds	r3, r7, r4
 800d2ba:	3308      	adds	r3, #8
 800d2bc:	0018      	movs	r0, r3
 800d2be:	f000 fa81 	bl	800d7c4 <sensirion_common_bytes_to_int16_t>
 800d2c2:	0003      	movs	r3, r0
 800d2c4:	001a      	movs	r2, r3
 800d2c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2c8:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800d2ca:	193b      	adds	r3, r7, r4
 800d2cc:	330a      	adds	r3, #10
 800d2ce:	0018      	movs	r0, r3
 800d2d0:	f000 fa78 	bl	800d7c4 <sensirion_common_bytes_to_int16_t>
 800d2d4:	0003      	movs	r3, r0
 800d2d6:	001a      	movs	r2, r3
 800d2d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2da:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800d2dc:	193b      	adds	r3, r7, r4
 800d2de:	330c      	adds	r3, #12
 800d2e0:	0018      	movs	r0, r3
 800d2e2:	f000 fa6f 	bl	800d7c4 <sensirion_common_bytes_to_int16_t>
 800d2e6:	0003      	movs	r3, r0
 800d2e8:	001a      	movs	r2, r3
 800d2ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2ec:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800d2ee:	193b      	adds	r3, r7, r4
 800d2f0:	330e      	adds	r3, #14
 800d2f2:	0018      	movs	r0, r3
 800d2f4:	f000 fa66 	bl	800d7c4 <sensirion_common_bytes_to_int16_t>
 800d2f8:	0003      	movs	r3, r0
 800d2fa:	001a      	movs	r2, r3
 800d2fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2fe:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800d300:	2300      	movs	r3, #0
}
 800d302:	0018      	movs	r0, r3
 800d304:	46bd      	mov	sp, r7
 800d306:	b00d      	add	sp, #52	@ 0x34
 800d308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d30a:	46c0      	nop			@ (mov r8, r8)
 800d30c:	00004e20 	.word	0x00004e20

0800d310 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800d310:	b590      	push	{r4, r7, lr}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d316:	1dbb      	adds	r3, r7, #6
 800d318:	2200      	movs	r2, #0
 800d31a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800d31c:	1dbc      	adds	r4, r7, #6
 800d31e:	4a12      	ldr	r2, [pc, #72]	@ (800d368 <sen5x_start_fan_cleaning+0x58>)
 800d320:	1dbb      	adds	r3, r7, #6
 800d322:	8819      	ldrh	r1, [r3, #0]
 800d324:	003b      	movs	r3, r7
 800d326:	0018      	movs	r0, r3
 800d328:	f001 f9e4 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d32c:	0003      	movs	r3, r0
 800d32e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d330:	1d3c      	adds	r4, r7, #4
 800d332:	1dbb      	adds	r3, r7, #6
 800d334:	881a      	ldrh	r2, [r3, #0]
 800d336:	003b      	movs	r3, r7
 800d338:	0019      	movs	r1, r3
 800d33a:	2069      	movs	r0, #105	@ 0x69
 800d33c:	f001 fa5e 	bl	800e7fc <sensirion_i2c_write_data>
 800d340:	0003      	movs	r3, r0
 800d342:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d344:	1d3b      	adds	r3, r7, #4
 800d346:	2200      	movs	r2, #0
 800d348:	5e9b      	ldrsh	r3, [r3, r2]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d003      	beq.n	800d356 <sen5x_start_fan_cleaning+0x46>
        return error;
 800d34e:	1d3b      	adds	r3, r7, #4
 800d350:	2200      	movs	r2, #0
 800d352:	5e9b      	ldrsh	r3, [r3, r2]
 800d354:	e004      	b.n	800d360 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800d356:	4b05      	ldr	r3, [pc, #20]	@ (800d36c <sen5x_start_fan_cleaning+0x5c>)
 800d358:	0018      	movs	r0, r3
 800d35a:	f7ff fc5b 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	0018      	movs	r0, r3
 800d362:	46bd      	mov	sp, r7
 800d364:	b003      	add	sp, #12
 800d366:	bd90      	pop	{r4, r7, pc}
 800d368:	00005607 	.word	0x00005607
 800d36c:	00004e20 	.word	0x00004e20

0800d370 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800d370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d372:	b087      	sub	sp, #28
 800d374:	af00      	add	r7, sp, #0
 800d376:	0004      	movs	r4, r0
 800d378:	0008      	movs	r0, r1
 800d37a:	0011      	movs	r1, r2
 800d37c:	1dbb      	adds	r3, r7, #6
 800d37e:	1c22      	adds	r2, r4, #0
 800d380:	801a      	strh	r2, [r3, #0]
 800d382:	1d3b      	adds	r3, r7, #4
 800d384:	1c02      	adds	r2, r0, #0
 800d386:	801a      	strh	r2, [r3, #0]
 800d388:	1cbb      	adds	r3, r7, #2
 800d38a:	1c0a      	adds	r2, r1, #0
 800d38c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800d38e:	2516      	movs	r5, #22
 800d390:	197b      	adds	r3, r7, r5
 800d392:	2200      	movs	r2, #0
 800d394:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800d396:	197c      	adds	r4, r7, r5
 800d398:	4a25      	ldr	r2, [pc, #148]	@ (800d430 <sen5x_set_temperature_offset_parameters+0xc0>)
 800d39a:	197b      	adds	r3, r7, r5
 800d39c:	8819      	ldrh	r1, [r3, #0]
 800d39e:	2608      	movs	r6, #8
 800d3a0:	19bb      	adds	r3, r7, r6
 800d3a2:	0018      	movs	r0, r3
 800d3a4:	f001 f9a6 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d3a8:	0003      	movs	r3, r0
 800d3aa:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800d3ac:	197c      	adds	r4, r7, r5
 800d3ae:	1dbb      	adds	r3, r7, #6
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	5e9a      	ldrsh	r2, [r3, r2]
 800d3b4:	197b      	adds	r3, r7, r5
 800d3b6:	8819      	ldrh	r1, [r3, #0]
 800d3b8:	19bb      	adds	r3, r7, r6
 800d3ba:	0018      	movs	r0, r3
 800d3bc:	f001 fa05 	bl	800e7ca <sensirion_i2c_add_int16_t_to_buffer>
 800d3c0:	0003      	movs	r3, r0
 800d3c2:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800d3c4:	197c      	adds	r4, r7, r5
 800d3c6:	1d3b      	adds	r3, r7, #4
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	5e9a      	ldrsh	r2, [r3, r2]
 800d3cc:	197b      	adds	r3, r7, r5
 800d3ce:	8819      	ldrh	r1, [r3, #0]
 800d3d0:	19bb      	adds	r3, r7, r6
 800d3d2:	0018      	movs	r0, r3
 800d3d4:	f001 f9f9 	bl	800e7ca <sensirion_i2c_add_int16_t_to_buffer>
 800d3d8:	0003      	movs	r3, r0
 800d3da:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800d3dc:	197c      	adds	r4, r7, r5
 800d3de:	1cbb      	adds	r3, r7, #2
 800d3e0:	881a      	ldrh	r2, [r3, #0]
 800d3e2:	197b      	adds	r3, r7, r5
 800d3e4:	8819      	ldrh	r1, [r3, #0]
 800d3e6:	19bb      	adds	r3, r7, r6
 800d3e8:	0018      	movs	r0, r3
 800d3ea:	f001 f9af 	bl	800e74c <sensirion_i2c_add_uint16_t_to_buffer>
 800d3ee:	0003      	movs	r3, r0
 800d3f0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d3f2:	2214      	movs	r2, #20
 800d3f4:	18bc      	adds	r4, r7, r2
 800d3f6:	197b      	adds	r3, r7, r5
 800d3f8:	881a      	ldrh	r2, [r3, #0]
 800d3fa:	19bb      	adds	r3, r7, r6
 800d3fc:	0019      	movs	r1, r3
 800d3fe:	2069      	movs	r0, #105	@ 0x69
 800d400:	f001 f9fc 	bl	800e7fc <sensirion_i2c_write_data>
 800d404:	0003      	movs	r3, r0
 800d406:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d408:	2214      	movs	r2, #20
 800d40a:	18bb      	adds	r3, r7, r2
 800d40c:	2100      	movs	r1, #0
 800d40e:	5e5b      	ldrsh	r3, [r3, r1]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d003      	beq.n	800d41c <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800d414:	18bb      	adds	r3, r7, r2
 800d416:	2200      	movs	r2, #0
 800d418:	5e9b      	ldrsh	r3, [r3, r2]
 800d41a:	e004      	b.n	800d426 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800d41c:	4b05      	ldr	r3, [pc, #20]	@ (800d434 <sen5x_set_temperature_offset_parameters+0xc4>)
 800d41e:	0018      	movs	r0, r3
 800d420:	f7ff fbf8 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d424:	2300      	movs	r3, #0
}
 800d426:	0018      	movs	r0, r3
 800d428:	46bd      	mov	sp, r7
 800d42a:	b007      	add	sp, #28
 800d42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d42e:	46c0      	nop			@ (mov r8, r8)
 800d430:	000060b2 	.word	0x000060b2
 800d434:	00004e20 	.word	0x00004e20

0800d438 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800d438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d43a:	b091      	sub	sp, #68	@ 0x44
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	000a      	movs	r2, r1
 800d442:	1cfb      	adds	r3, r7, #3
 800d444:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800d446:	253e      	movs	r5, #62	@ 0x3e
 800d448:	197b      	adds	r3, r7, r5
 800d44a:	2200      	movs	r2, #0
 800d44c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800d44e:	197c      	adds	r4, r7, r5
 800d450:	4a22      	ldr	r2, [pc, #136]	@ (800d4dc <sen5x_get_product_name+0xa4>)
 800d452:	197b      	adds	r3, r7, r5
 800d454:	8819      	ldrh	r1, [r3, #0]
 800d456:	230c      	movs	r3, #12
 800d458:	18fb      	adds	r3, r7, r3
 800d45a:	0018      	movs	r0, r3
 800d45c:	f001 f94a 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d460:	0003      	movs	r3, r0
 800d462:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d464:	263c      	movs	r6, #60	@ 0x3c
 800d466:	19bc      	adds	r4, r7, r6
 800d468:	197b      	adds	r3, r7, r5
 800d46a:	881a      	ldrh	r2, [r3, #0]
 800d46c:	230c      	movs	r3, #12
 800d46e:	18fb      	adds	r3, r7, r3
 800d470:	0019      	movs	r1, r3
 800d472:	2069      	movs	r0, #105	@ 0x69
 800d474:	f001 f9c2 	bl	800e7fc <sensirion_i2c_write_data>
 800d478:	0003      	movs	r3, r0
 800d47a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d47c:	19bb      	adds	r3, r7, r6
 800d47e:	2200      	movs	r2, #0
 800d480:	5e9b      	ldrsh	r3, [r3, r2]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d003      	beq.n	800d48e <sen5x_get_product_name+0x56>
        return error;
 800d486:	19bb      	adds	r3, r7, r6
 800d488:	2200      	movs	r2, #0
 800d48a:	5e9b      	ldrsh	r3, [r3, r2]
 800d48c:	e021      	b.n	800d4d2 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800d48e:	4b14      	ldr	r3, [pc, #80]	@ (800d4e0 <sen5x_get_product_name+0xa8>)
 800d490:	0018      	movs	r0, r3
 800d492:	f7ff fbbf 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800d496:	253c      	movs	r5, #60	@ 0x3c
 800d498:	197c      	adds	r4, r7, r5
 800d49a:	230c      	movs	r3, #12
 800d49c:	18fb      	adds	r3, r7, r3
 800d49e:	2220      	movs	r2, #32
 800d4a0:	0019      	movs	r1, r3
 800d4a2:	2069      	movs	r0, #105	@ 0x69
 800d4a4:	f001 f9c2 	bl	800e82c <sensirion_i2c_read_data_inplace>
 800d4a8:	0003      	movs	r3, r0
 800d4aa:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d4ac:	197b      	adds	r3, r7, r5
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	5e9b      	ldrsh	r3, [r3, r2]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d003      	beq.n	800d4be <sen5x_get_product_name+0x86>
        return error;
 800d4b6:	197b      	adds	r3, r7, r5
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	5e9b      	ldrsh	r3, [r3, r2]
 800d4bc:	e009      	b.n	800d4d2 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800d4be:	1cfb      	adds	r3, r7, #3
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	6879      	ldr	r1, [r7, #4]
 800d4c6:	230c      	movs	r3, #12
 800d4c8:	18fb      	adds	r3, r7, r3
 800d4ca:	0018      	movs	r0, r3
 800d4cc:	f000 f988 	bl	800d7e0 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800d4d0:	2300      	movs	r3, #0
}
 800d4d2:	0018      	movs	r0, r3
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	b011      	add	sp, #68	@ 0x44
 800d4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4da:	46c0      	nop			@ (mov r8, r8)
 800d4dc:	0000d014 	.word	0x0000d014
 800d4e0:	0000c350 	.word	0x0000c350

0800d4e4 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800d4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4e6:	b091      	sub	sp, #68	@ 0x44
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	000a      	movs	r2, r1
 800d4ee:	1cfb      	adds	r3, r7, #3
 800d4f0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800d4f2:	253e      	movs	r5, #62	@ 0x3e
 800d4f4:	197b      	adds	r3, r7, r5
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800d4fa:	197c      	adds	r4, r7, r5
 800d4fc:	4a22      	ldr	r2, [pc, #136]	@ (800d588 <sen5x_get_serial_number+0xa4>)
 800d4fe:	197b      	adds	r3, r7, r5
 800d500:	8819      	ldrh	r1, [r3, #0]
 800d502:	230c      	movs	r3, #12
 800d504:	18fb      	adds	r3, r7, r3
 800d506:	0018      	movs	r0, r3
 800d508:	f001 f8f4 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d50c:	0003      	movs	r3, r0
 800d50e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d510:	263c      	movs	r6, #60	@ 0x3c
 800d512:	19bc      	adds	r4, r7, r6
 800d514:	197b      	adds	r3, r7, r5
 800d516:	881a      	ldrh	r2, [r3, #0]
 800d518:	230c      	movs	r3, #12
 800d51a:	18fb      	adds	r3, r7, r3
 800d51c:	0019      	movs	r1, r3
 800d51e:	2069      	movs	r0, #105	@ 0x69
 800d520:	f001 f96c 	bl	800e7fc <sensirion_i2c_write_data>
 800d524:	0003      	movs	r3, r0
 800d526:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d528:	19bb      	adds	r3, r7, r6
 800d52a:	2200      	movs	r2, #0
 800d52c:	5e9b      	ldrsh	r3, [r3, r2]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d003      	beq.n	800d53a <sen5x_get_serial_number+0x56>
        return error;
 800d532:	19bb      	adds	r3, r7, r6
 800d534:	2200      	movs	r2, #0
 800d536:	5e9b      	ldrsh	r3, [r3, r2]
 800d538:	e021      	b.n	800d57e <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800d53a:	4b14      	ldr	r3, [pc, #80]	@ (800d58c <sen5x_get_serial_number+0xa8>)
 800d53c:	0018      	movs	r0, r3
 800d53e:	f7ff fb69 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800d542:	253c      	movs	r5, #60	@ 0x3c
 800d544:	197c      	adds	r4, r7, r5
 800d546:	230c      	movs	r3, #12
 800d548:	18fb      	adds	r3, r7, r3
 800d54a:	2220      	movs	r2, #32
 800d54c:	0019      	movs	r1, r3
 800d54e:	2069      	movs	r0, #105	@ 0x69
 800d550:	f001 f96c 	bl	800e82c <sensirion_i2c_read_data_inplace>
 800d554:	0003      	movs	r3, r0
 800d556:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d558:	197b      	adds	r3, r7, r5
 800d55a:	2200      	movs	r2, #0
 800d55c:	5e9b      	ldrsh	r3, [r3, r2]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d003      	beq.n	800d56a <sen5x_get_serial_number+0x86>
        return error;
 800d562:	197b      	adds	r3, r7, r5
 800d564:	2200      	movs	r2, #0
 800d566:	5e9b      	ldrsh	r3, [r3, r2]
 800d568:	e009      	b.n	800d57e <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800d56a:	1cfb      	adds	r3, r7, #3
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	b29a      	uxth	r2, r3
 800d570:	6879      	ldr	r1, [r7, #4]
 800d572:	230c      	movs	r3, #12
 800d574:	18fb      	adds	r3, r7, r3
 800d576:	0018      	movs	r0, r3
 800d578:	f000 f932 	bl	800d7e0 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	0018      	movs	r0, r3
 800d580:	46bd      	mov	sp, r7
 800d582:	b011      	add	sp, #68	@ 0x44
 800d584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d586:	46c0      	nop			@ (mov r8, r8)
 800d588:	0000d033 	.word	0x0000d033
 800d58c:	0000c350 	.word	0x0000c350

0800d590 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800d590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d592:	b089      	sub	sp, #36	@ 0x24
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	607a      	str	r2, [r7, #4]
 800d59c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800d59e:	251e      	movs	r5, #30
 800d5a0:	197b      	adds	r3, r7, r5
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800d5a6:	197c      	adds	r4, r7, r5
 800d5a8:	23d1      	movs	r3, #209	@ 0xd1
 800d5aa:	021a      	lsls	r2, r3, #8
 800d5ac:	197b      	adds	r3, r7, r5
 800d5ae:	8819      	ldrh	r1, [r3, #0]
 800d5b0:	2310      	movs	r3, #16
 800d5b2:	18fb      	adds	r3, r7, r3
 800d5b4:	0018      	movs	r0, r3
 800d5b6:	f001 f89d 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d5ba:	0003      	movs	r3, r0
 800d5bc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d5be:	261c      	movs	r6, #28
 800d5c0:	19bc      	adds	r4, r7, r6
 800d5c2:	197b      	adds	r3, r7, r5
 800d5c4:	881a      	ldrh	r2, [r3, #0]
 800d5c6:	2310      	movs	r3, #16
 800d5c8:	18fb      	adds	r3, r7, r3
 800d5ca:	0019      	movs	r1, r3
 800d5cc:	2069      	movs	r0, #105	@ 0x69
 800d5ce:	f001 f915 	bl	800e7fc <sensirion_i2c_write_data>
 800d5d2:	0003      	movs	r3, r0
 800d5d4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d5d6:	19bb      	adds	r3, r7, r6
 800d5d8:	2200      	movs	r2, #0
 800d5da:	5e9b      	ldrsh	r3, [r3, r2]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d003      	beq.n	800d5e8 <sen5x_get_version+0x58>
        return error;
 800d5e0:	19bb      	adds	r3, r7, r6
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	5e9b      	ldrsh	r3, [r3, r2]
 800d5e6:	e038      	b.n	800d65a <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d5e8:	4b1e      	ldr	r3, [pc, #120]	@ (800d664 <sen5x_get_version+0xd4>)
 800d5ea:	0018      	movs	r0, r3
 800d5ec:	f7ff fb12 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800d5f0:	251c      	movs	r5, #28
 800d5f2:	197c      	adds	r4, r7, r5
 800d5f4:	2310      	movs	r3, #16
 800d5f6:	18fb      	adds	r3, r7, r3
 800d5f8:	2208      	movs	r2, #8
 800d5fa:	0019      	movs	r1, r3
 800d5fc:	2069      	movs	r0, #105	@ 0x69
 800d5fe:	f001 f915 	bl	800e82c <sensirion_i2c_read_data_inplace>
 800d602:	0003      	movs	r3, r0
 800d604:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d606:	197b      	adds	r3, r7, r5
 800d608:	2200      	movs	r2, #0
 800d60a:	5e9b      	ldrsh	r3, [r3, r2]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d003      	beq.n	800d618 <sen5x_get_version+0x88>
        return error;
 800d610:	197b      	adds	r3, r7, r5
 800d612:	2200      	movs	r2, #0
 800d614:	5e9b      	ldrsh	r3, [r3, r2]
 800d616:	e020      	b.n	800d65a <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800d618:	2110      	movs	r1, #16
 800d61a:	187b      	adds	r3, r7, r1
 800d61c:	781a      	ldrb	r2, [r3, #0]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800d622:	187b      	adds	r3, r7, r1
 800d624:	785a      	ldrb	r2, [r3, #1]
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800d62a:	187b      	adds	r3, r7, r1
 800d62c:	789b      	ldrb	r3, [r3, #2]
 800d62e:	1e5a      	subs	r2, r3, #1
 800d630:	4193      	sbcs	r3, r2
 800d632:	b2da      	uxtb	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800d638:	187b      	adds	r3, r7, r1
 800d63a:	78da      	ldrb	r2, [r3, #3]
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800d640:	187b      	adds	r3, r7, r1
 800d642:	791a      	ldrb	r2, [r3, #4]
 800d644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d646:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800d648:	187b      	adds	r3, r7, r1
 800d64a:	795a      	ldrb	r2, [r3, #5]
 800d64c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d64e:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800d650:	187b      	adds	r3, r7, r1
 800d652:	799a      	ldrb	r2, [r3, #6]
 800d654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d656:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	0018      	movs	r0, r3
 800d65c:	46bd      	mov	sp, r7
 800d65e:	b009      	add	sp, #36	@ 0x24
 800d660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d662:	46c0      	nop			@ (mov r8, r8)
 800d664:	00004e20 	.word	0x00004e20

0800d668 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800d668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d66a:	b087      	sub	sp, #28
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800d670:	2516      	movs	r5, #22
 800d672:	197b      	adds	r3, r7, r5
 800d674:	2200      	movs	r2, #0
 800d676:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800d678:	197c      	adds	r4, r7, r5
 800d67a:	4a22      	ldr	r2, [pc, #136]	@ (800d704 <sen5x_read_device_status+0x9c>)
 800d67c:	197b      	adds	r3, r7, r5
 800d67e:	8819      	ldrh	r1, [r3, #0]
 800d680:	230c      	movs	r3, #12
 800d682:	18fb      	adds	r3, r7, r3
 800d684:	0018      	movs	r0, r3
 800d686:	f001 f835 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d68a:	0003      	movs	r3, r0
 800d68c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d68e:	2614      	movs	r6, #20
 800d690:	19bc      	adds	r4, r7, r6
 800d692:	197b      	adds	r3, r7, r5
 800d694:	881a      	ldrh	r2, [r3, #0]
 800d696:	230c      	movs	r3, #12
 800d698:	18fb      	adds	r3, r7, r3
 800d69a:	0019      	movs	r1, r3
 800d69c:	2069      	movs	r0, #105	@ 0x69
 800d69e:	f001 f8ad 	bl	800e7fc <sensirion_i2c_write_data>
 800d6a2:	0003      	movs	r3, r0
 800d6a4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d6a6:	19bb      	adds	r3, r7, r6
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	5e9b      	ldrsh	r3, [r3, r2]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d003      	beq.n	800d6b8 <sen5x_read_device_status+0x50>
        return error;
 800d6b0:	19bb      	adds	r3, r7, r6
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	5e9b      	ldrsh	r3, [r3, r2]
 800d6b6:	e020      	b.n	800d6fa <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800d6b8:	4b13      	ldr	r3, [pc, #76]	@ (800d708 <sen5x_read_device_status+0xa0>)
 800d6ba:	0018      	movs	r0, r3
 800d6bc:	f7ff faaa 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800d6c0:	2514      	movs	r5, #20
 800d6c2:	197c      	adds	r4, r7, r5
 800d6c4:	230c      	movs	r3, #12
 800d6c6:	18fb      	adds	r3, r7, r3
 800d6c8:	2204      	movs	r2, #4
 800d6ca:	0019      	movs	r1, r3
 800d6cc:	2069      	movs	r0, #105	@ 0x69
 800d6ce:	f001 f8ad 	bl	800e82c <sensirion_i2c_read_data_inplace>
 800d6d2:	0003      	movs	r3, r0
 800d6d4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d6d6:	197b      	adds	r3, r7, r5
 800d6d8:	2200      	movs	r2, #0
 800d6da:	5e9b      	ldrsh	r3, [r3, r2]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d003      	beq.n	800d6e8 <sen5x_read_device_status+0x80>
        return error;
 800d6e0:	197b      	adds	r3, r7, r5
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	5e9b      	ldrsh	r3, [r3, r2]
 800d6e6:	e008      	b.n	800d6fa <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800d6e8:	230c      	movs	r3, #12
 800d6ea:	18fb      	adds	r3, r7, r3
 800d6ec:	0018      	movs	r0, r3
 800d6ee:	f000 f850 	bl	800d792 <sensirion_common_bytes_to_uint32_t>
 800d6f2:	0002      	movs	r2, r0
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	0018      	movs	r0, r3
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	b007      	add	sp, #28
 800d700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d702:	46c0      	nop			@ (mov r8, r8)
 800d704:	0000d206 	.word	0x0000d206
 800d708:	00004e20 	.word	0x00004e20

0800d70c <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800d70c:	b590      	push	{r4, r7, lr}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800d712:	1dbb      	adds	r3, r7, #6
 800d714:	2200      	movs	r2, #0
 800d716:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800d718:	1dbc      	adds	r4, r7, #6
 800d71a:	4a12      	ldr	r2, [pc, #72]	@ (800d764 <sen5x_device_reset+0x58>)
 800d71c:	1dbb      	adds	r3, r7, #6
 800d71e:	8819      	ldrh	r1, [r3, #0]
 800d720:	003b      	movs	r3, r7
 800d722:	0018      	movs	r0, r3
 800d724:	f000 ffe6 	bl	800e6f4 <sensirion_i2c_add_command_to_buffer>
 800d728:	0003      	movs	r3, r0
 800d72a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800d72c:	1d3c      	adds	r4, r7, #4
 800d72e:	1dbb      	adds	r3, r7, #6
 800d730:	881a      	ldrh	r2, [r3, #0]
 800d732:	003b      	movs	r3, r7
 800d734:	0019      	movs	r1, r3
 800d736:	2069      	movs	r0, #105	@ 0x69
 800d738:	f001 f860 	bl	800e7fc <sensirion_i2c_write_data>
 800d73c:	0003      	movs	r3, r0
 800d73e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800d740:	1d3b      	adds	r3, r7, #4
 800d742:	2200      	movs	r2, #0
 800d744:	5e9b      	ldrsh	r3, [r3, r2]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d003      	beq.n	800d752 <sen5x_device_reset+0x46>
        return error;
 800d74a:	1d3b      	adds	r3, r7, #4
 800d74c:	2200      	movs	r2, #0
 800d74e:	5e9b      	ldrsh	r3, [r3, r2]
 800d750:	e004      	b.n	800d75c <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800d752:	4b05      	ldr	r3, [pc, #20]	@ (800d768 <sen5x_device_reset+0x5c>)
 800d754:	0018      	movs	r0, r3
 800d756:	f7ff fa5d 	bl	800cc14 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	0018      	movs	r0, r3
 800d75e:	46bd      	mov	sp, r7
 800d760:	b003      	add	sp, #12
 800d762:	bd90      	pop	{r4, r7, pc}
 800d764:	0000d304 	.word	0x0000d304
 800d768:	00030d40 	.word	0x00030d40

0800d76c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	021b      	lsls	r3, r3, #8
 800d77a:	b21a      	sxth	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	3301      	adds	r3, #1
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	b21b      	sxth	r3, r3
 800d784:	4313      	orrs	r3, r2
 800d786:	b21b      	sxth	r3, r3
 800d788:	b29b      	uxth	r3, r3
}
 800d78a:	0018      	movs	r0, r3
 800d78c:	46bd      	mov	sp, r7
 800d78e:	b002      	add	sp, #8
 800d790:	bd80      	pop	{r7, pc}

0800d792 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800d792:	b580      	push	{r7, lr}
 800d794:	b082      	sub	sp, #8
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	061a      	lsls	r2, r3, #24
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	041b      	lsls	r3, r3, #16
 800d7a8:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	3302      	adds	r3, #2
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800d7b2:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	3203      	adds	r2, #3
 800d7b8:	7812      	ldrb	r2, [r2, #0]
 800d7ba:	4313      	orrs	r3, r2
}
 800d7bc:	0018      	movs	r0, r3
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	b002      	add	sp, #8
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	0018      	movs	r0, r3
 800d7d0:	f7ff ffcc 	bl	800d76c <sensirion_common_bytes_to_uint16_t>
 800d7d4:	0003      	movs	r3, r0
 800d7d6:	b21b      	sxth	r3, r3
}
 800d7d8:	0018      	movs	r0, r3
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	b002      	add	sp, #8
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	60b9      	str	r1, [r7, #8]
 800d7ea:	1dbb      	adds	r3, r7, #6
 800d7ec:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800d7ee:	2316      	movs	r3, #22
 800d7f0:	18fb      	adds	r3, r7, r3
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	801a      	strh	r2, [r3, #0]
 800d7f6:	e00f      	b.n	800d818 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800d7f8:	2016      	movs	r0, #22
 800d7fa:	183b      	adds	r3, r7, r0
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	68fa      	ldr	r2, [r7, #12]
 800d800:	18d2      	adds	r2, r2, r3
 800d802:	183b      	adds	r3, r7, r0
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	68b9      	ldr	r1, [r7, #8]
 800d808:	18cb      	adds	r3, r1, r3
 800d80a:	7812      	ldrb	r2, [r2, #0]
 800d80c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800d80e:	183b      	adds	r3, r7, r0
 800d810:	881a      	ldrh	r2, [r3, #0]
 800d812:	183b      	adds	r3, r7, r0
 800d814:	3201      	adds	r2, #1
 800d816:	801a      	strh	r2, [r3, #0]
 800d818:	2316      	movs	r3, #22
 800d81a:	18fa      	adds	r2, r7, r3
 800d81c:	1dbb      	adds	r3, r7, #6
 800d81e:	8812      	ldrh	r2, [r2, #0]
 800d820:	881b      	ldrh	r3, [r3, #0]
 800d822:	429a      	cmp	r2, r3
 800d824:	d3e8      	bcc.n	800d7f8 <sensirion_common_copy_bytes+0x18>
    }
}
 800d826:	46c0      	nop			@ (mov r8, r8)
 800d828:	46c0      	nop			@ (mov r8, r8)
 800d82a:	46bd      	mov	sp, r7
 800d82c:	b006      	add	sp, #24
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d113      	bne.n	800d876 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	22fe      	movs	r2, #254	@ 0xfe
 800d852:	0592      	lsls	r2, r2, #22
 800d854:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	4a1a      	ldr	r2, [pc, #104]	@ (800d8c4 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800d85a:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	4a1a      	ldr	r2, [pc, #104]	@ (800d8c8 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800d860:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	4a19      	ldr	r2, [pc, #100]	@ (800d8cc <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800d866:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	4a19      	ldr	r2, [pc, #100]	@ (800d8d0 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800d86c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	4a18      	ldr	r2, [pc, #96]	@ (800d8d4 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800d872:	61da      	str	r2, [r3, #28]
 800d874:	e011      	b.n	800d89a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	4a17      	ldr	r2, [pc, #92]	@ (800d8d8 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800d87a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	4a17      	ldr	r2, [pc, #92]	@ (800d8dc <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800d880:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	4a16      	ldr	r2, [pc, #88]	@ (800d8e0 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800d886:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	4a16      	ldr	r2, [pc, #88]	@ (800d8e4 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800d88c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	4a15      	ldr	r2, [pc, #84]	@ (800d8e8 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800d892:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	4a15      	ldr	r2, [pc, #84]	@ (800d8ec <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800d898:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	4a14      	ldr	r2, [pc, #80]	@ (800d8f0 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800d89e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	4a14      	ldr	r2, [pc, #80]	@ (800d8f4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800d8a4:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	4a12      	ldr	r2, [pc, #72]	@ (800d8f4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800d8aa:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	4a12      	ldr	r2, [pc, #72]	@ (800d8f8 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800d8b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	0018      	movs	r0, r3
 800d8b6:	f000 f833 	bl	800d920 <GasIndexAlgorithm_reset>
}
 800d8ba:	46c0      	nop			@ (mov r8, r8)
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	b004      	add	sp, #16
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	46c0      	nop			@ (mov r8, r8)
 800d8c4:	00002710 	.word	0x00002710
 800d8c8:	44340000 	.word	0x44340000
 800d8cc:	46859800 	.word	0x46859800
 800d8d0:	46a05000 	.word	0x46a05000
 800d8d4:	41f00000 	.word	0x41f00000
 800d8d8:	42c80000 	.word	0x42c80000
 800d8dc:	00004e20 	.word	0x00004e20
 800d8e0:	43340000 	.word	0x43340000
 800d8e4:	4528c000 	.word	0x4528c000
 800d8e8:	45a32000 	.word	0x45a32000
 800d8ec:	43aa0000 	.word	0x43aa0000
 800d8f0:	43660000 	.word	0x43660000
 800d8f4:	41400000 	.word	0x41400000
 800d8f8:	42480000 	.word	0x42480000

0800d8fc <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800d906:	4a05      	ldr	r2, [pc, #20]	@ (800d91c <GasIndexAlgorithm_init+0x20>)
 800d908:	6839      	ldr	r1, [r7, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	0018      	movs	r0, r3
 800d90e:	f7ff ff8f 	bl	800d830 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800d912:	46c0      	nop			@ (mov r8, r8)
 800d914:	46bd      	mov	sp, r7
 800d916:	b002      	add	sp, #8
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	46c0      	nop			@ (mov r8, r8)
 800d91c:	44610000 	.word	0x44610000

0800d920 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2200      	movs	r2, #0
 800d92c:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	0018      	movs	r0, r3
 800d93e:	f000 f805 	bl	800d94c <GasIndexAlgorithm__init_instances>
}
 800d942:	46c0      	nop			@ (mov r8, r8)
 800d944:	46bd      	mov	sp, r7
 800d946:	b002      	add	sp, #8
 800d948:	bd80      	pop	{r7, pc}
	...

0800d94c <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800d94c:	b590      	push	{r4, r7, lr}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	0018      	movs	r0, r3
 800d958:	f000 f8e8 	bl	800db2c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	0018      	movs	r0, r3
 800d960:	f000 f9a6 	bl	800dcb0 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800d964:	1c04      	adds	r4, r0, #0
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	0018      	movs	r0, r3
 800d96a:	f000 f9ab 	bl	800dcc4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800d96e:	1c02      	adds	r2, r0, #0
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	1c21      	adds	r1, r4, #0
 800d974:	0018      	movs	r0, r3
 800d976:	f000 fc3b 	bl	800e1f0 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d107      	bne.n	800d992 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800d982:	23fe      	movs	r3, #254	@ 0xfe
 800d984:	059b      	lsls	r3, r3, #22
 800d986:	4a0a      	ldr	r2, [pc, #40]	@ (800d9b0 <GasIndexAlgorithm__init_instances+0x64>)
 800d988:	490a      	ldr	r1, [pc, #40]	@ (800d9b4 <GasIndexAlgorithm__init_instances+0x68>)
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f000 fc86 	bl	800e29c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800d990:	e005      	b.n	800d99e <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800d992:	4b09      	ldr	r3, [pc, #36]	@ (800d9b8 <GasIndexAlgorithm__init_instances+0x6c>)
 800d994:	4a09      	ldr	r2, [pc, #36]	@ (800d9bc <GasIndexAlgorithm__init_instances+0x70>)
 800d996:	490a      	ldr	r1, [pc, #40]	@ (800d9c0 <GasIndexAlgorithm__init_instances+0x74>)
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fc7f 	bl	800e29c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	0018      	movs	r0, r3
 800d9a2:	f000 fd35 	bl	800e410 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800d9a6:	46c0      	nop			@ (mov r8, r8)
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	b003      	add	sp, #12
 800d9ac:	bd90      	pop	{r4, r7, pc}
 800d9ae:	46c0      	nop			@ (mov r8, r8)
 800d9b0:	bc257a78 	.word	0xbc257a78
 800d9b4:	44198000 	.word	0x44198000
 800d9b8:	42c80000 	.word	0x42c80000
 800d9bc:	bbd4fdf4 	.word	0xbbd4fdf4
 800d9c0:	43550000 	.word	0x43550000

0800d9c4 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800d9c4:	b590      	push	{r4, r7, lr}
 800d9c6:	b085      	sub	sp, #20
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9d4:	4952      	ldr	r1, [pc, #328]	@ (800db20 <GasIndexAlgorithm_process+0x15c>)
 800d9d6:	1c18      	adds	r0, r3, #0
 800d9d8:	f7f2 fdb4 	bl	8000544 <__aeabi_fcmple>
 800d9dc:	1e03      	subs	r3, r0, #0
 800d9de:	d00c      	beq.n	800d9fa <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	1c19      	adds	r1, r3, #0
 800d9ea:	1c10      	adds	r0, r2, #0
 800d9ec:	f7f2 ff68 	bl	80008c0 <__aeabi_fadd>
 800d9f0:	1c03      	adds	r3, r0, #0
 800d9f2:	1c1a      	adds	r2, r3, #0
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	631a      	str	r2, [r3, #48]	@ 0x30
 800d9f8:	e080      	b.n	800dafc <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	dd25      	ble.n	800da4c <GasIndexAlgorithm_process+0x88>
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	4a48      	ldr	r2, [pc, #288]	@ (800db24 <GasIndexAlgorithm_process+0x160>)
 800da04:	4293      	cmp	r3, r2
 800da06:	dc21      	bgt.n	800da4c <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	429a      	cmp	r2, r3
 800da10:	dc04      	bgt.n	800da1c <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	3301      	adds	r3, #1
 800da18:	60bb      	str	r3, [r7, #8]
 800da1a:	e00d      	b.n	800da38 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	4a41      	ldr	r2, [pc, #260]	@ (800db28 <GasIndexAlgorithm_process+0x164>)
 800da22:	4694      	mov	ip, r2
 800da24:	4463      	add	r3, ip
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	429a      	cmp	r2, r3
 800da2a:	dd05      	ble.n	800da38 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	4a3d      	ldr	r2, [pc, #244]	@ (800db28 <GasIndexAlgorithm_process+0x164>)
 800da32:	4694      	mov	ip, r2
 800da34:	4463      	add	r3, ip
 800da36:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	1ad3      	subs	r3, r2, r3
 800da40:	0018      	movs	r0, r3
 800da42:	f7f3 fdc5 	bl	80015d0 <__aeabi_i2f>
 800da46:	1c02      	adds	r2, r0, #0
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d005      	beq.n	800da60 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	0018      	movs	r0, r3
 800da58:	f000 f945 	bl	800dce6 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800da5c:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800da5e:	d014      	beq.n	800da8a <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	1c11      	adds	r1, r2, #0
 800da68:	0018      	movs	r0, r3
 800da6a:	f000 fbd1 	bl	800e210 <GasIndexAlgorithm__mox_model__process>
 800da6e:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	1c11      	adds	r1, r2, #0
 800da7c:	0018      	movs	r0, r3
 800da7e:	f000 fc25 	bl	800e2cc <GasIndexAlgorithm__sigmoid_scaled__process>
 800da82:	1c02      	adds	r2, r0, #0
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	639a      	str	r2, [r3, #56]	@ 0x38
 800da88:	e003      	b.n	800da92 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	689a      	ldr	r2, [r3, #8]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	1c11      	adds	r1, r2, #0
 800da9a:	0018      	movs	r0, r3
 800da9c:	f000 fcec 	bl	800e478 <GasIndexAlgorithm__adaptive_lowpass__process>
 800daa0:	1c02      	adds	r2, r0, #0
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daaa:	21fc      	movs	r1, #252	@ 0xfc
 800daac:	0589      	lsls	r1, r1, #22
 800daae:	1c18      	adds	r0, r3, #0
 800dab0:	f7f2 fd3e 	bl	8000530 <__aeabi_fcmplt>
 800dab4:	1e03      	subs	r3, r0, #0
 800dab6:	d003      	beq.n	800dac0 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	22fc      	movs	r2, #252	@ 0xfc
 800dabc:	0592      	lsls	r2, r2, #22
 800dabe:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dac4:	2100      	movs	r1, #0
 800dac6:	1c18      	adds	r0, r3, #0
 800dac8:	f7f2 fd46 	bl	8000558 <__aeabi_fcmpgt>
 800dacc:	1e03      	subs	r3, r0, #0
 800dace:	d015      	beq.n	800dafc <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	1c11      	adds	r1, r2, #0
 800dad8:	0018      	movs	r0, r3
 800dada:	f000 fa4f 	bl	800df7c <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	0018      	movs	r0, r3
 800dae2:	f000 f8e5 	bl	800dcb0 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800dae6:	1c04      	adds	r4, r0, #0
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	0018      	movs	r0, r3
 800daec:	f000 f8ea 	bl	800dcc4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800daf0:	1c02      	adds	r2, r0, #0
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	1c21      	adds	r1, r4, #0
 800daf6:	0018      	movs	r0, r3
 800daf8:	f000 fb7a 	bl	800e1f0 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db00:	21fc      	movs	r1, #252	@ 0xfc
 800db02:	0589      	lsls	r1, r1, #22
 800db04:	1c18      	adds	r0, r3, #0
 800db06:	f7f2 fedb 	bl	80008c0 <__aeabi_fadd>
 800db0a:	1c03      	adds	r3, r0, #0
 800db0c:	1c18      	adds	r0, r3, #0
 800db0e:	f7f3 fd3f 	bl	8001590 <__aeabi_f2iz>
 800db12:	0002      	movs	r2, r0
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	601a      	str	r2, [r3, #0]
    return;
 800db18:	46c0      	nop			@ (mov r8, r8)
}
 800db1a:	46bd      	mov	sp, r7
 800db1c:	b005      	add	sp, #20
 800db1e:	bd90      	pop	{r4, r7, pc}
 800db20:	42340000 	.word	0x42340000
 800db24:	0000fde7 	.word	0x0000fde7
 800db28:	00007fff 	.word	0x00007fff

0800db2c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800db2c:	b5b0      	push	{r4, r5, r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	223c      	movs	r2, #60	@ 0x3c
 800db38:	2100      	movs	r1, #0
 800db3a:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2200      	movs	r2, #0
 800db40:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2200      	movs	r2, #0
 800db46:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	4952      	ldr	r1, [pc, #328]	@ (800dca0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800db56:	1c18      	adds	r0, r3, #0
 800db58:	f7f3 f83c 	bl	8000bd4 <__aeabi_fdiv>
 800db5c:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800db5e:	2188      	movs	r1, #136	@ 0x88
 800db60:	05c9      	lsls	r1, r1, #23
 800db62:	1c18      	adds	r0, r3, #0
 800db64:	f7f3 fa1c 	bl	8000fa0 <__aeabi_fmul>
 800db68:	1c03      	adds	r3, r0, #0
 800db6a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	494a      	ldr	r1, [pc, #296]	@ (800dca0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800db76:	1c18      	adds	r0, r3, #0
 800db78:	f7f3 f82c 	bl	8000bd4 <__aeabi_fdiv>
 800db7c:	1c03      	adds	r3, r0, #0
 800db7e:	1c19      	adds	r1, r3, #0
 800db80:	1c20      	adds	r0, r4, #0
 800db82:	f7f2 fe9d 	bl	80008c0 <__aeabi_fadd>
 800db86:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800db88:	1c19      	adds	r1, r3, #0
 800db8a:	1c28      	adds	r0, r5, #0
 800db8c:	f7f3 f822 	bl	8000bd4 <__aeabi_fdiv>
 800db90:	1c03      	adds	r3, r0, #0
 800db92:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	4940      	ldr	r1, [pc, #256]	@ (800dca0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800db9e:	1c18      	adds	r0, r3, #0
 800dba0:	f7f3 f818 	bl	8000bd4 <__aeabi_fdiv>
 800dba4:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800dba6:	2185      	movs	r1, #133	@ 0x85
 800dba8:	05c9      	lsls	r1, r1, #23
 800dbaa:	1c18      	adds	r0, r3, #0
 800dbac:	f7f3 f9f8 	bl	8000fa0 <__aeabi_fmul>
 800dbb0:	1c03      	adds	r3, r0, #0
 800dbb2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	4938      	ldr	r1, [pc, #224]	@ (800dca0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800dbbe:	1c18      	adds	r0, r3, #0
 800dbc0:	f7f3 f808 	bl	8000bd4 <__aeabi_fdiv>
 800dbc4:	1c03      	adds	r3, r0, #0
 800dbc6:	1c19      	adds	r1, r3, #0
 800dbc8:	1c20      	adds	r0, r4, #0
 800dbca:	f7f2 fe79 	bl	80008c0 <__aeabi_fadd>
 800dbce:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800dbd0:	1c19      	adds	r1, r3, #0
 800dbd2:	1c28      	adds	r0, r5, #0
 800dbd4:	f7f2 fffe 	bl	8000bd4 <__aeabi_fdiv>
 800dbd8:	1c03      	adds	r3, r0, #0
 800dbda:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d118      	bne.n	800dc1a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800dbec:	2188      	movs	r1, #136	@ 0x88
 800dbee:	05c9      	lsls	r1, r1, #23
 800dbf0:	1c18      	adds	r0, r3, #0
 800dbf2:	f7f3 f9d5 	bl	8000fa0 <__aeabi_fmul>
 800dbf6:	1c03      	adds	r3, r0, #0
 800dbf8:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800dbfe:	4929      	ldr	r1, [pc, #164]	@ (800dca4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800dc00:	1c18      	adds	r0, r3, #0
 800dc02:	f7f2 fe5d 	bl	80008c0 <__aeabi_fadd>
 800dc06:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800dc08:	1c19      	adds	r1, r3, #0
 800dc0a:	1c20      	adds	r0, r4, #0
 800dc0c:	f7f2 ffe2 	bl	8000bd4 <__aeabi_fdiv>
 800dc10:	1c03      	adds	r3, r0, #0
 800dc12:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	655a      	str	r2, [r3, #84]	@ 0x54
 800dc18:	e017      	b.n	800dc4a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800dc1e:	2188      	movs	r1, #136	@ 0x88
 800dc20:	05c9      	lsls	r1, r1, #23
 800dc22:	1c18      	adds	r0, r3, #0
 800dc24:	f7f3 f9bc 	bl	8000fa0 <__aeabi_fmul>
 800dc28:	1c03      	adds	r3, r0, #0
 800dc2a:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800dc30:	491d      	ldr	r1, [pc, #116]	@ (800dca8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800dc32:	1c18      	adds	r0, r3, #0
 800dc34:	f7f2 fe44 	bl	80008c0 <__aeabi_fadd>
 800dc38:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800dc3a:	1c19      	adds	r1, r3, #0
 800dc3c:	1c20      	adds	r0, r4, #0
 800dc3e:	f7f2 ffc9 	bl	8000bd4 <__aeabi_fdiv>
 800dc42:	1c03      	adds	r3, r0, #0
 800dc44:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800dc4e:	2185      	movs	r1, #133	@ 0x85
 800dc50:	05c9      	lsls	r1, r1, #23
 800dc52:	1c18      	adds	r0, r3, #0
 800dc54:	f7f3 f9a4 	bl	8000fa0 <__aeabi_fmul>
 800dc58:	1c03      	adds	r3, r0, #0
 800dc5a:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	4912      	ldr	r1, [pc, #72]	@ (800dcac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800dc62:	1c18      	adds	r0, r3, #0
 800dc64:	f7f2 fe2c 	bl	80008c0 <__aeabi_fadd>
 800dc68:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800dc6a:	1c19      	adds	r1, r3, #0
 800dc6c:	1c20      	adds	r0, r4, #0
 800dc6e:	f7f2 ffb1 	bl	8000bd4 <__aeabi_fdiv>
 800dc72:	1c03      	adds	r3, r0, #0
 800dc74:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800dc98:	46c0      	nop			@ (mov r8, r8)
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	b002      	add	sp, #8
 800dc9e:	bdb0      	pop	{r4, r5, r7, pc}
 800dca0:	45610000 	.word	0x45610000
 800dca4:	44960000 	.word	0x44960000
 800dca8:	41a00000 	.word	0x41a00000
 800dcac:	451c4000 	.word	0x451c4000

0800dcb0 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800dcbc:	1c18      	adds	r0, r3, #0
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	b002      	add	sp, #8
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800dcd4:	1c19      	adds	r1, r3, #0
 800dcd6:	1c10      	adds	r0, r2, #0
 800dcd8:	f7f2 fdf2 	bl	80008c0 <__aeabi_fadd>
 800dcdc:	1c03      	adds	r3, r0, #0
}
 800dcde:	1c18      	adds	r0, r3, #0
 800dce0:	46bd      	mov	sp, r7
 800dce2:	b002      	add	sp, #8
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b082      	sub	sp, #8
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	223c      	movs	r2, #60	@ 0x3c
 800dcf2:	5c9b      	ldrb	r3, [r3, r2]
}
 800dcf4:	0018      	movs	r0, r3
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	b002      	add	sp, #8
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800dcfc:	b5b0      	push	{r4, r5, r7, lr}
 800dcfe:	b08c      	sub	sp, #48	@ 0x30
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800dd08:	1c19      	adds	r1, r3, #0
 800dd0a:	4895      	ldr	r0, [pc, #596]	@ (800df60 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800dd0c:	f7f3 fa86 	bl	800121c <__aeabi_fsub>
 800dd10:	1c03      	adds	r3, r0, #0
 800dd12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd18:	1c19      	adds	r1, r3, #0
 800dd1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd1c:	f7f2 fc1c 	bl	8000558 <__aeabi_fcmpgt>
 800dd20:	1e03      	subs	r3, r0, #0
 800dd22:	d00b      	beq.n	800dd3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800dd2c:	1c19      	adds	r1, r3, #0
 800dd2e:	1c10      	adds	r0, r2, #0
 800dd30:	f7f2 fdc6 	bl	80008c0 <__aeabi_fadd>
 800dd34:	1c03      	adds	r3, r0, #0
 800dd36:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dd40:	1c19      	adds	r1, r3, #0
 800dd42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd44:	f7f2 fc08 	bl	8000558 <__aeabi_fcmpgt>
 800dd48:	1e03      	subs	r3, r0, #0
 800dd4a:	d00b      	beq.n	800dd64 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800dd54:	1c19      	adds	r1, r3, #0
 800dd56:	1c10      	adds	r0, r2, #0
 800dd58:	f7f2 fdb2 	bl	80008c0 <__aeabi_fadd>
 800dd5c:	1c03      	adds	r3, r0, #0
 800dd5e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6959      	ldr	r1, [r3, #20]
 800dd68:	4a7e      	ldr	r2, [pc, #504]	@ (800df64 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	0018      	movs	r0, r3
 800dd6e:	f000 f9f1 	bl	800e154 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	1c11      	adds	r1, r2, #0
 800dd7a:	0018      	movs	r0, r3
 800dd7c:	f000 f9fa 	bl	800e174 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800dd80:	1c03      	adds	r3, r0, #0
 800dd82:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800dd90:	1c19      	adds	r1, r3, #0
 800dd92:	1c10      	adds	r0, r2, #0
 800dd94:	f7f3 fa42 	bl	800121c <__aeabi_fsub>
 800dd98:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800dd9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd9c:	1c18      	adds	r0, r3, #0
 800dd9e:	f7f3 f8ff 	bl	8000fa0 <__aeabi_fmul>
 800dda2:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800dda4:	1c19      	adds	r1, r3, #0
 800dda6:	1c20      	adds	r0, r4, #0
 800dda8:	f7f2 fd8a 	bl	80008c0 <__aeabi_fadd>
 800ddac:	1c03      	adds	r3, r0, #0
 800ddae:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ddb8:	1c19      	adds	r1, r3, #0
 800ddba:	486b      	ldr	r0, [pc, #428]	@ (800df68 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ddbc:	f7f3 fa2e 	bl	800121c <__aeabi_fsub>
 800ddc0:	1c03      	adds	r3, r0, #0
 800ddc2:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	1c11      	adds	r1, r2, #0
 800ddcc:	0018      	movs	r0, r3
 800ddce:	f000 f9d1 	bl	800e174 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ddd2:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ddd4:	1c19      	adds	r1, r3, #0
 800ddd6:	1c28      	adds	r0, r5, #0
 800ddd8:	f7f3 f8e2 	bl	8000fa0 <__aeabi_fmul>
 800dddc:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800ddde:	1c19      	adds	r1, r3, #0
 800dde0:	1c20      	adds	r0, r4, #0
 800dde2:	f7f2 fd6d 	bl	80008c0 <__aeabi_fadd>
 800dde6:	1c03      	adds	r3, r0, #0
 800dde8:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ddea:	4a60      	ldr	r2, [pc, #384]	@ (800df6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ddec:	6a39      	ldr	r1, [r7, #32]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	0018      	movs	r0, r3
 800ddf2:	f000 f9af 	bl	800e154 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	1c11      	adds	r1, r2, #0
 800ddfe:	0018      	movs	r0, r3
 800de00:	f000 f9b8 	bl	800e174 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800de04:	1c03      	adds	r3, r0, #0
 800de06:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800de08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800de0a:	69f8      	ldr	r0, [r7, #28]
 800de0c:	f7f3 f8c8 	bl	8000fa0 <__aeabi_fmul>
 800de10:	1c03      	adds	r3, r0, #0
 800de12:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6999      	ldr	r1, [r3, #24]
 800de1c:	4a51      	ldr	r2, [pc, #324]	@ (800df64 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	0018      	movs	r0, r3
 800de22:	f000 f997 	bl	800e154 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	1c11      	adds	r1, r2, #0
 800de2e:	0018      	movs	r0, r3
 800de30:	f000 f9a0 	bl	800e174 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800de34:	1c03      	adds	r3, r0, #0
 800de36:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800de44:	1c19      	adds	r1, r3, #0
 800de46:	1c10      	adds	r0, r2, #0
 800de48:	f7f3 f9e8 	bl	800121c <__aeabi_fsub>
 800de4c:	1c03      	adds	r3, r0, #0
 800de4e:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800de50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de52:	69b8      	ldr	r0, [r7, #24]
 800de54:	f7f3 f9e2 	bl	800121c <__aeabi_fsub>
 800de58:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800de5a:	1c19      	adds	r1, r3, #0
 800de5c:	1c28      	adds	r0, r5, #0
 800de5e:	f7f3 f89f 	bl	8000fa0 <__aeabi_fmul>
 800de62:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800de64:	1c19      	adds	r1, r3, #0
 800de66:	1c20      	adds	r0, r4, #0
 800de68:	f7f2 fd2a 	bl	80008c0 <__aeabi_fadd>
 800de6c:	1c03      	adds	r3, r0, #0
 800de6e:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800de78:	1c19      	adds	r1, r3, #0
 800de7a:	483b      	ldr	r0, [pc, #236]	@ (800df68 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800de7c:	f7f3 f9ce 	bl	800121c <__aeabi_fsub>
 800de80:	1c03      	adds	r3, r0, #0
 800de82:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	1c11      	adds	r1, r2, #0
 800de8c:	0018      	movs	r0, r3
 800de8e:	f000 f971 	bl	800e174 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800de92:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800de94:	1c19      	adds	r1, r3, #0
 800de96:	1c28      	adds	r0, r5, #0
 800de98:	f7f3 f882 	bl	8000fa0 <__aeabi_fmul>
 800de9c:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800de9e:	1c19      	adds	r1, r3, #0
 800dea0:	1c20      	adds	r0, r4, #0
 800dea2:	f7f2 fd0d 	bl	80008c0 <__aeabi_fadd>
 800dea6:	1c03      	adds	r3, r0, #0
 800dea8:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800deaa:	4a30      	ldr	r2, [pc, #192]	@ (800df6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800deac:	6939      	ldr	r1, [r7, #16]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	0018      	movs	r0, r3
 800deb2:	f000 f94f 	bl	800e154 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	1c11      	adds	r1, r2, #0
 800debe:	0018      	movs	r0, r3
 800dec0:	f000 f958 	bl	800e174 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800dec4:	1c03      	adds	r3, r0, #0
 800dec6:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800dec8:	6979      	ldr	r1, [r7, #20]
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f7f3 f868 	bl	8000fa0 <__aeabi_fmul>
 800ded0:	1c03      	adds	r3, r0, #0
 800ded2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	4923      	ldr	r1, [pc, #140]	@ (800df70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800dee2:	1c18      	adds	r0, r3, #0
 800dee4:	f7f2 fe76 	bl	8000bd4 <__aeabi_fdiv>
 800dee8:	1c03      	adds	r3, r0, #0
 800deea:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800deec:	69f9      	ldr	r1, [r7, #28]
 800deee:	20fe      	movs	r0, #254	@ 0xfe
 800def0:	0580      	lsls	r0, r0, #22
 800def2:	f7f3 f993 	bl	800121c <__aeabi_fsub>
 800def6:	1c03      	adds	r3, r0, #0
 800def8:	491e      	ldr	r1, [pc, #120]	@ (800df74 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800defa:	1c18      	adds	r0, r3, #0
 800defc:	f7f3 f850 	bl	8000fa0 <__aeabi_fmul>
 800df00:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800df02:	491d      	ldr	r1, [pc, #116]	@ (800df78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800df04:	1c18      	adds	r0, r3, #0
 800df06:	f7f3 f989 	bl	800121c <__aeabi_fsub>
 800df0a:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800df0c:	1c19      	adds	r1, r3, #0
 800df0e:	1c28      	adds	r0, r5, #0
 800df10:	f7f3 f846 	bl	8000fa0 <__aeabi_fmul>
 800df14:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800df16:	1c19      	adds	r1, r3, #0
 800df18:	1c20      	adds	r0, r4, #0
 800df1a:	f7f2 fcd1 	bl	80008c0 <__aeabi_fadd>
 800df1e:	1c03      	adds	r3, r0, #0
 800df20:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df2a:	2100      	movs	r1, #0
 800df2c:	1c18      	adds	r0, r3, #0
 800df2e:	f7f2 faff 	bl	8000530 <__aeabi_fcmplt>
 800df32:	1e03      	subs	r3, r0, #0
 800df34:	d002      	beq.n	800df3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2200      	movs	r2, #0
 800df3a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800df44:	1c19      	adds	r1, r3, #0
 800df46:	1c10      	adds	r0, r2, #0
 800df48:	f7f2 fb06 	bl	8000558 <__aeabi_fcmpgt>
 800df4c:	1e03      	subs	r3, r0, #0
 800df4e:	d100      	bne.n	800df52 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800df50:	e002      	b.n	800df58 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2200      	movs	r2, #0
 800df56:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800df58:	46c0      	nop			@ (mov r8, r8)
 800df5a:	46bd      	mov	sp, r7
 800df5c:	b00c      	add	sp, #48	@ 0x30
 800df5e:	bdb0      	pop	{r4, r5, r7, pc}
 800df60:	46fffe00 	.word	0x46fffe00
 800df64:	3c23d70a 	.word	0x3c23d70a
 800df68:	43ff0000 	.word	0x43ff0000
 800df6c:	3db851ec 	.word	0x3db851ec
 800df70:	42700000 	.word	0x42700000
 800df74:	3fa66666 	.word	0x3fa66666
 800df78:	3e99999a 	.word	0x3e99999a

0800df7c <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800df7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df7e:	b087      	sub	sp, #28
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	223c      	movs	r2, #60	@ 0x3c
 800df8a:	5c9b      	ldrb	r3, [r3, r2]
 800df8c:	2201      	movs	r2, #1
 800df8e:	4053      	eors	r3, r2
 800df90:	b2db      	uxtb	r3, r3
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00a      	beq.n	800dfac <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	223c      	movs	r2, #60	@ 0x3c
 800df9a:	2101      	movs	r1, #1
 800df9c:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	683a      	ldr	r2, [r7, #0]
 800dfa2:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800dfaa:	e0c8      	b.n	800e13e <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfb0:	4965      	ldr	r1, [pc, #404]	@ (800e148 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800dfb2:	1c18      	adds	r0, r3, #0
 800dfb4:	f7f2 fada 	bl	800056c <__aeabi_fcmpge>
 800dfb8:	1e03      	subs	r3, r0, #0
 800dfba:	d107      	bne.n	800dfcc <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800dfc0:	4962      	ldr	r1, [pc, #392]	@ (800e14c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800dfc2:	1c18      	adds	r0, r3, #0
 800dfc4:	f7f2 fabe 	bl	8000544 <__aeabi_fcmple>
 800dfc8:	1e03      	subs	r3, r0, #0
 800dfca:	d00e      	beq.n	800dfea <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800dfd4:	1c19      	adds	r1, r3, #0
 800dfd6:	1c10      	adds	r0, r2, #0
 800dfd8:	f7f2 fc72 	bl	80008c0 <__aeabi_fadd>
 800dfdc:	1c03      	adds	r3, r0, #0
 800dfde:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfee:	1c19      	adds	r1, r3, #0
 800dff0:	6838      	ldr	r0, [r7, #0]
 800dff2:	f7f3 f913 	bl	800121c <__aeabi_fsub>
 800dff6:	1c03      	adds	r3, r0, #0
 800dff8:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	0018      	movs	r0, r3
 800dffe:	f7ff fe7d 	bl	800dcfc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e006:	1c19      	adds	r1, r3, #0
 800e008:	6838      	ldr	r0, [r7, #0]
 800e00a:	f7f3 f907 	bl	800121c <__aeabi_fsub>
 800e00e:	1c03      	adds	r3, r0, #0
 800e010:	2185      	movs	r1, #133	@ 0x85
 800e012:	05c9      	lsls	r1, r1, #23
 800e014:	1c18      	adds	r0, r3, #0
 800e016:	f7f2 fddd 	bl	8000bd4 <__aeabi_fdiv>
 800e01a:	1c03      	adds	r3, r0, #0
 800e01c:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800e01e:	2100      	movs	r1, #0
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7f2 fa85 	bl	8000530 <__aeabi_fcmplt>
 800e026:	1e03      	subs	r3, r0, #0
 800e028:	d008      	beq.n	800e03c <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e02e:	68f9      	ldr	r1, [r7, #12]
 800e030:	1c18      	adds	r0, r3, #0
 800e032:	f7f3 f8f3 	bl	800121c <__aeabi_fsub>
 800e036:	1c03      	adds	r3, r0, #0
 800e038:	617b      	str	r3, [r7, #20]
 800e03a:	e007      	b.n	800e04c <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e040:	1c19      	adds	r1, r3, #0
 800e042:	68f8      	ldr	r0, [r7, #12]
 800e044:	f7f2 fc3c 	bl	80008c0 <__aeabi_fadd>
 800e048:	1c03      	adds	r3, r0, #0
 800e04a:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800e04c:	23fe      	movs	r3, #254	@ 0xfe
 800e04e:	059b      	lsls	r3, r3, #22
 800e050:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800e052:	493f      	ldr	r1, [pc, #252]	@ (800e150 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800e054:	6978      	ldr	r0, [r7, #20]
 800e056:	f7f2 fa7f 	bl	8000558 <__aeabi_fcmpgt>
 800e05a:	1e03      	subs	r3, r0, #0
 800e05c:	d010      	beq.n	800e080 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800e05e:	493c      	ldr	r1, [pc, #240]	@ (800e150 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800e060:	6978      	ldr	r0, [r7, #20]
 800e062:	f7f2 fdb7 	bl	8000bd4 <__aeabi_fdiv>
 800e066:	1c03      	adds	r3, r0, #0
 800e068:	1c1c      	adds	r4, r3, #0
 800e06a:	4939      	ldr	r1, [pc, #228]	@ (800e150 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800e06c:	6978      	ldr	r0, [r7, #20]
 800e06e:	f7f2 fdb1 	bl	8000bd4 <__aeabi_fdiv>
 800e072:	1c03      	adds	r3, r0, #0
 800e074:	1c19      	adds	r1, r3, #0
 800e076:	1c20      	adds	r0, r4, #0
 800e078:	f7f2 ff92 	bl	8000fa0 <__aeabi_fmul>
 800e07c:	1c03      	adds	r3, r0, #0
 800e07e:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800e084:	1c19      	adds	r1, r3, #0
 800e086:	2085      	movs	r0, #133	@ 0x85
 800e088:	05c0      	lsls	r0, r0, #23
 800e08a:	f7f3 f8c7 	bl	800121c <__aeabi_fsub>
 800e08e:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800e090:	6939      	ldr	r1, [r7, #16]
 800e092:	1c18      	adds	r0, r3, #0
 800e094:	f7f2 ff84 	bl	8000fa0 <__aeabi_fmul>
 800e098:	1c03      	adds	r3, r0, #0
 800e09a:	1c18      	adds	r0, r3, #0
 800e09c:	f018 fb72 	bl	8026784 <sqrtf>
 800e0a0:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800e0aa:	2185      	movs	r1, #133	@ 0x85
 800e0ac:	05c9      	lsls	r1, r1, #23
 800e0ae:	6938      	ldr	r0, [r7, #16]
 800e0b0:	f7f2 ff76 	bl	8000fa0 <__aeabi_fmul>
 800e0b4:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800e0b6:	1c19      	adds	r1, r3, #0
 800e0b8:	1c28      	adds	r0, r5, #0
 800e0ba:	f7f2 fd8b 	bl	8000bd4 <__aeabi_fdiv>
 800e0be:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800e0c0:	1c19      	adds	r1, r3, #0
 800e0c2:	1c20      	adds	r0, r4, #0
 800e0c4:	f7f2 ff6c 	bl	8000fa0 <__aeabi_fmul>
 800e0c8:	1c03      	adds	r3, r0, #0
 800e0ca:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e0d0:	68f9      	ldr	r1, [r7, #12]
 800e0d2:	1c18      	adds	r0, r3, #0
 800e0d4:	f7f2 ff64 	bl	8000fa0 <__aeabi_fmul>
 800e0d8:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800e0da:	6939      	ldr	r1, [r7, #16]
 800e0dc:	1c18      	adds	r0, r3, #0
 800e0de:	f7f2 fd79 	bl	8000bd4 <__aeabi_fdiv>
 800e0e2:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800e0e4:	68f9      	ldr	r1, [r7, #12]
 800e0e6:	1c18      	adds	r0, r3, #0
 800e0e8:	f7f2 ff5a 	bl	8000fa0 <__aeabi_fmul>
 800e0ec:	1c03      	adds	r3, r0, #0
             sqrtf(
 800e0ee:	1c19      	adds	r1, r3, #0
 800e0f0:	1c20      	adds	r0, r4, #0
 800e0f2:	f7f2 fbe5 	bl	80008c0 <__aeabi_fadd>
 800e0f6:	1c03      	adds	r3, r0, #0
 800e0f8:	1c18      	adds	r0, r3, #0
 800e0fa:	f018 fb43 	bl	8026784 <sqrtf>
 800e0fe:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800e100:	1c19      	adds	r1, r3, #0
 800e102:	1c30      	adds	r0, r6, #0
 800e104:	f7f2 ff4c 	bl	8000fa0 <__aeabi_fmul>
 800e108:	1c03      	adds	r3, r0, #0
 800e10a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e118:	68f9      	ldr	r1, [r7, #12]
 800e11a:	1c18      	adds	r0, r3, #0
 800e11c:	f7f2 ff40 	bl	8000fa0 <__aeabi_fmul>
 800e120:	1c03      	adds	r3, r0, #0
 800e122:	2182      	movs	r1, #130	@ 0x82
 800e124:	05c9      	lsls	r1, r1, #23
 800e126:	1c18      	adds	r0, r3, #0
 800e128:	f7f2 fd54 	bl	8000bd4 <__aeabi_fdiv>
 800e12c:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800e12e:	1c19      	adds	r1, r3, #0
 800e130:	1c20      	adds	r0, r4, #0
 800e132:	f7f2 fbc5 	bl	80008c0 <__aeabi_fadd>
 800e136:	1c03      	adds	r3, r0, #0
 800e138:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800e13e:	46c0      	nop			@ (mov r8, r8)
 800e140:	46bd      	mov	sp, r7
 800e142:	b007      	add	sp, #28
 800e144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e146:	46c0      	nop			@ (mov r8, r8)
 800e148:	42c80000 	.word	0x42c80000
 800e14c:	c2c80000 	.word	0xc2c80000
 800e150:	44b40000 	.word	0x44b40000

0800e154 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	68ba      	ldr	r2, [r7, #8]
 800e16a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e16c:	46c0      	nop			@ (mov r8, r8)
 800e16e:	46bd      	mov	sp, r7
 800e170:	b004      	add	sp, #16
 800e172:	bd80      	pop	{r7, pc}

0800e174 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800e174:	b590      	push	{r4, r7, lr}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e186:	1c19      	adds	r1, r3, #0
 800e188:	6838      	ldr	r0, [r7, #0]
 800e18a:	f7f3 f847 	bl	800121c <__aeabi_fsub>
 800e18e:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800e190:	1c19      	adds	r1, r3, #0
 800e192:	1c20      	adds	r0, r4, #0
 800e194:	f7f2 ff04 	bl	8000fa0 <__aeabi_fmul>
 800e198:	1c03      	adds	r3, r0, #0
 800e19a:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800e19c:	4912      	ldr	r1, [pc, #72]	@ (800e1e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f7f2 f9c6 	bl	8000530 <__aeabi_fcmplt>
 800e1a4:	1e03      	subs	r3, r0, #0
 800e1a6:	d002      	beq.n	800e1ae <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800e1a8:	23fe      	movs	r3, #254	@ 0xfe
 800e1aa:	059b      	lsls	r3, r3, #22
 800e1ac:	e018      	b.n	800e1e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800e1ae:	490f      	ldr	r1, [pc, #60]	@ (800e1ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f7f2 f9d1 	bl	8000558 <__aeabi_fcmpgt>
 800e1b6:	1e03      	subs	r3, r0, #0
 800e1b8:	d001      	beq.n	800e1be <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	e010      	b.n	800e1e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	1c18      	adds	r0, r3, #0
 800e1c2:	f018 fab7 	bl	8026734 <expf>
 800e1c6:	1c03      	adds	r3, r0, #0
 800e1c8:	21fe      	movs	r1, #254	@ 0xfe
 800e1ca:	0589      	lsls	r1, r1, #22
 800e1cc:	1c18      	adds	r0, r3, #0
 800e1ce:	f7f2 fb77 	bl	80008c0 <__aeabi_fadd>
 800e1d2:	1c03      	adds	r3, r0, #0
 800e1d4:	1c19      	adds	r1, r3, #0
 800e1d6:	20fe      	movs	r0, #254	@ 0xfe
 800e1d8:	0580      	lsls	r0, r0, #22
 800e1da:	f7f2 fcfb 	bl	8000bd4 <__aeabi_fdiv>
 800e1de:	1c03      	adds	r3, r0, #0
    }
}
 800e1e0:	1c18      	adds	r0, r3, #0
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	b005      	add	sp, #20
 800e1e6:	bd90      	pop	{r4, r7, pc}
 800e1e8:	c2480000 	.word	0xc2480000
 800e1ec:	42480000 	.word	0x42480000

0800e1f0 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	68ba      	ldr	r2, [r7, #8]
 800e200:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800e208:	46c0      	nop			@ (mov r8, r8)
 800e20a:	46bd      	mov	sp, r7
 800e20c:	b004      	add	sp, #16
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800e210:	b590      	push	{r4, r7, lr}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d114      	bne.n	800e24c <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e226:	1c19      	adds	r1, r3, #0
 800e228:	6838      	ldr	r0, [r7, #0]
 800e22a:	f7f2 fff7 	bl	800121c <__aeabi_fsub>
 800e22e:	1c03      	adds	r3, r0, #0
 800e230:	4918      	ldr	r1, [pc, #96]	@ (800e294 <GasIndexAlgorithm__mox_model__process+0x84>)
 800e232:	1c18      	adds	r0, r3, #0
 800e234:	f7f2 fcce 	bl	8000bd4 <__aeabi_fdiv>
 800e238:	1c03      	adds	r3, r0, #0
 800e23a:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800e240:	1c19      	adds	r1, r3, #0
 800e242:	1c10      	adds	r0, r2, #0
 800e244:	f7f2 feac 	bl	8000fa0 <__aeabi_fmul>
 800e248:	1c03      	adds	r3, r0, #0
 800e24a:	e01f      	b.n	800e28c <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e250:	1c19      	adds	r1, r3, #0
 800e252:	6838      	ldr	r0, [r7, #0]
 800e254:	f7f2 ffe2 	bl	800121c <__aeabi_fsub>
 800e258:	1c03      	adds	r3, r0, #0
 800e25a:	1c1a      	adds	r2, r3, #0
 800e25c:	2380      	movs	r3, #128	@ 0x80
 800e25e:	061b      	lsls	r3, r3, #24
 800e260:	4053      	eors	r3, r2
 800e262:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e268:	490b      	ldr	r1, [pc, #44]	@ (800e298 <GasIndexAlgorithm__mox_model__process+0x88>)
 800e26a:	1c18      	adds	r0, r3, #0
 800e26c:	f7f2 fb28 	bl	80008c0 <__aeabi_fadd>
 800e270:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800e272:	1c19      	adds	r1, r3, #0
 800e274:	1c20      	adds	r0, r4, #0
 800e276:	f7f2 fcad 	bl	8000bd4 <__aeabi_fdiv>
 800e27a:	1c03      	adds	r3, r0, #0
 800e27c:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800e282:	1c19      	adds	r1, r3, #0
 800e284:	1c10      	adds	r0, r2, #0
 800e286:	f7f2 fe8b 	bl	8000fa0 <__aeabi_fmul>
 800e28a:	1c03      	adds	r3, r0, #0
    }
}
 800e28c:	1c18      	adds	r0, r3, #0
 800e28e:	46bd      	mov	sp, r7
 800e290:	b003      	add	sp, #12
 800e292:	bd90      	pop	{r4, r7, pc}
 800e294:	44fa0000 	.word	0x44fa0000
 800e298:	435c0000 	.word	0x435c0000

0800e29c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
 800e2a8:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2180      	movs	r1, #128	@ 0x80
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2184      	movs	r1, #132	@ 0x84
 800e2b6:	68ba      	ldr	r2, [r7, #8]
 800e2b8:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2188      	movs	r1, #136	@ 0x88
 800e2be:	683a      	ldr	r2, [r7, #0]
 800e2c0:	505a      	str	r2, [r3, r1]
}
 800e2c2:	46c0      	nop			@ (mov r8, r8)
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	b004      	add	sp, #16
 800e2c8:	bd80      	pop	{r7, pc}
	...

0800e2cc <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800e2cc:	b590      	push	{r4, r7, lr}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2280      	movs	r2, #128	@ 0x80
 800e2da:	589c      	ldr	r4, [r3, r2]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2284      	movs	r2, #132	@ 0x84
 800e2e0:	589b      	ldr	r3, [r3, r2]
 800e2e2:	1c19      	adds	r1, r3, #0
 800e2e4:	6838      	ldr	r0, [r7, #0]
 800e2e6:	f7f2 ff99 	bl	800121c <__aeabi_fsub>
 800e2ea:	1c03      	adds	r3, r0, #0
 800e2ec:	1c19      	adds	r1, r3, #0
 800e2ee:	1c20      	adds	r0, r4, #0
 800e2f0:	f7f2 fe56 	bl	8000fa0 <__aeabi_fmul>
 800e2f4:	1c03      	adds	r3, r0, #0
 800e2f6:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800e2f8:	4940      	ldr	r1, [pc, #256]	@ (800e3fc <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800e2fa:	68b8      	ldr	r0, [r7, #8]
 800e2fc:	f7f2 f918 	bl	8000530 <__aeabi_fcmplt>
 800e300:	1e03      	subs	r3, r0, #0
 800e302:	d001      	beq.n	800e308 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800e304:	4b3e      	ldr	r3, [pc, #248]	@ (800e400 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e306:	e075      	b.n	800e3f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800e308:	493e      	ldr	r1, [pc, #248]	@ (800e404 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800e30a:	68b8      	ldr	r0, [r7, #8]
 800e30c:	f7f2 f924 	bl	8000558 <__aeabi_fcmpgt>
 800e310:	1e03      	subs	r3, r0, #0
 800e312:	d001      	beq.n	800e318 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800e314:	2300      	movs	r3, #0
 800e316:	e06d      	b.n	800e3f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800e318:	2100      	movs	r1, #0
 800e31a:	6838      	ldr	r0, [r7, #0]
 800e31c:	f7f2 f926 	bl	800056c <__aeabi_fcmpge>
 800e320:	1e03      	subs	r3, r0, #0
 800e322:	d047      	beq.n	800e3b4 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2288      	movs	r2, #136	@ 0x88
 800e328:	589b      	ldr	r3, [r3, r2]
 800e32a:	21fe      	movs	r1, #254	@ 0xfe
 800e32c:	0589      	lsls	r1, r1, #22
 800e32e:	1c18      	adds	r0, r3, #0
 800e330:	f7f2 f8f8 	bl	8000524 <__aeabi_fcmpeq>
 800e334:	1e03      	subs	r3, r0, #0
 800e336:	d00e      	beq.n	800e356 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	689b      	ldr	r3, [r3, #8]
 800e33c:	1c19      	adds	r1, r3, #0
 800e33e:	20fe      	movs	r0, #254	@ 0xfe
 800e340:	0580      	lsls	r0, r0, #22
 800e342:	f7f2 ff6b 	bl	800121c <__aeabi_fsub>
 800e346:	1c03      	adds	r3, r0, #0
 800e348:	492f      	ldr	r1, [pc, #188]	@ (800e408 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800e34a:	1c18      	adds	r0, r3, #0
 800e34c:	f7f2 fe28 	bl	8000fa0 <__aeabi_fmul>
 800e350:	1c03      	adds	r3, r0, #0
 800e352:	60fb      	str	r3, [r7, #12]
 800e354:	e012      	b.n	800e37c <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	689b      	ldr	r3, [r3, #8]
 800e35a:	492c      	ldr	r1, [pc, #176]	@ (800e40c <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800e35c:	1c18      	adds	r0, r3, #0
 800e35e:	f7f2 fe1f 	bl	8000fa0 <__aeabi_fmul>
 800e362:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800e364:	1c19      	adds	r1, r3, #0
 800e366:	4826      	ldr	r0, [pc, #152]	@ (800e400 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e368:	f7f2 ff58 	bl	800121c <__aeabi_fsub>
 800e36c:	1c03      	adds	r3, r0, #0
 800e36e:	2181      	movs	r1, #129	@ 0x81
 800e370:	05c9      	lsls	r1, r1, #23
 800e372:	1c18      	adds	r0, r3, #0
 800e374:	f7f2 fc2e 	bl	8000bd4 <__aeabi_fdiv>
 800e378:	1c03      	adds	r3, r0, #0
 800e37a:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800e37c:	4920      	ldr	r1, [pc, #128]	@ (800e400 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e37e:	68f8      	ldr	r0, [r7, #12]
 800e380:	f7f2 fa9e 	bl	80008c0 <__aeabi_fadd>
 800e384:	1c03      	adds	r3, r0, #0
 800e386:	1c1c      	adds	r4, r3, #0
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	1c18      	adds	r0, r3, #0
 800e38c:	f018 f9d2 	bl	8026734 <expf>
 800e390:	1c03      	adds	r3, r0, #0
 800e392:	21fe      	movs	r1, #254	@ 0xfe
 800e394:	0589      	lsls	r1, r1, #22
 800e396:	1c18      	adds	r0, r3, #0
 800e398:	f7f2 fa92 	bl	80008c0 <__aeabi_fadd>
 800e39c:	1c03      	adds	r3, r0, #0
 800e39e:	1c19      	adds	r1, r3, #0
 800e3a0:	1c20      	adds	r0, r4, #0
 800e3a2:	f7f2 fc17 	bl	8000bd4 <__aeabi_fdiv>
 800e3a6:	1c03      	adds	r3, r0, #0
 800e3a8:	68f9      	ldr	r1, [r7, #12]
 800e3aa:	1c18      	adds	r0, r3, #0
 800e3ac:	f7f2 ff36 	bl	800121c <__aeabi_fsub>
 800e3b0:	1c03      	adds	r3, r0, #0
 800e3b2:	e01f      	b.n	800e3f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2188      	movs	r1, #136	@ 0x88
 800e3bc:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800e3be:	1c19      	adds	r1, r3, #0
 800e3c0:	1c10      	adds	r0, r2, #0
 800e3c2:	f7f2 fc07 	bl	8000bd4 <__aeabi_fdiv>
 800e3c6:	1c03      	adds	r3, r0, #0
 800e3c8:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	1c18      	adds	r0, r3, #0
 800e3ce:	f018 f9b1 	bl	8026734 <expf>
 800e3d2:	1c03      	adds	r3, r0, #0
 800e3d4:	21fe      	movs	r1, #254	@ 0xfe
 800e3d6:	0589      	lsls	r1, r1, #22
 800e3d8:	1c18      	adds	r0, r3, #0
 800e3da:	f7f2 fa71 	bl	80008c0 <__aeabi_fadd>
 800e3de:	1c03      	adds	r3, r0, #0
 800e3e0:	1c19      	adds	r1, r3, #0
 800e3e2:	4807      	ldr	r0, [pc, #28]	@ (800e400 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800e3e4:	f7f2 fbf6 	bl	8000bd4 <__aeabi_fdiv>
 800e3e8:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800e3ea:	1c19      	adds	r1, r3, #0
 800e3ec:	1c20      	adds	r0, r4, #0
 800e3ee:	f7f2 fdd7 	bl	8000fa0 <__aeabi_fmul>
 800e3f2:	1c03      	adds	r3, r0, #0
        }
    }
}
 800e3f4:	1c18      	adds	r0, r3, #0
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	b005      	add	sp, #20
 800e3fa:	bd90      	pop	{r4, r7, pc}
 800e3fc:	c2480000 	.word	0xc2480000
 800e400:	43fa0000 	.word	0x43fa0000
 800e404:	42480000 	.word	0x42480000
 800e408:	3f8041ab 	.word	0x3f8041ab
 800e40c:	40a00000 	.word	0x40a00000

0800e410 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800e410:	b590      	push	{r4, r7, lr}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	4913      	ldr	r1, [pc, #76]	@ (800e470 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800e422:	1c18      	adds	r0, r3, #0
 800e424:	f7f2 fa4c 	bl	80008c0 <__aeabi_fadd>
 800e428:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800e42a:	1c19      	adds	r1, r3, #0
 800e42c:	1c20      	adds	r0, r4, #0
 800e42e:	f7f2 fbd1 	bl	8000bd4 <__aeabi_fdiv>
 800e432:	1c03      	adds	r3, r0, #0
 800e434:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	228c      	movs	r2, #140	@ 0x8c
 800e43a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	490b      	ldr	r1, [pc, #44]	@ (800e474 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800e446:	1c18      	adds	r0, r3, #0
 800e448:	f7f2 fa3a 	bl	80008c0 <__aeabi_fadd>
 800e44c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800e44e:	1c19      	adds	r1, r3, #0
 800e450:	1c20      	adds	r0, r4, #0
 800e452:	f7f2 fbbf 	bl	8000bd4 <__aeabi_fdiv>
 800e456:	1c03      	adds	r3, r0, #0
 800e458:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2290      	movs	r2, #144	@ 0x90
 800e45e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2294      	movs	r2, #148	@ 0x94
 800e464:	2100      	movs	r1, #0
 800e466:	5499      	strb	r1, [r3, r2]
}
 800e468:	46c0      	nop			@ (mov r8, r8)
 800e46a:	46bd      	mov	sp, r7
 800e46c:	b003      	add	sp, #12
 800e46e:	bd90      	pop	{r4, r7, pc}
 800e470:	41a00000 	.word	0x41a00000
 800e474:	43fa0000 	.word	0x43fa0000

0800e478 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800e478:	b590      	push	{r4, r7, lr}
 800e47a:	b087      	sub	sp, #28
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2294      	movs	r2, #148	@ 0x94
 800e486:	5c9b      	ldrb	r3, [r3, r2]
 800e488:	2201      	movs	r2, #1
 800e48a:	4053      	eors	r3, r2
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00f      	beq.n	800e4b2 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2198      	movs	r1, #152	@ 0x98
 800e496:	683a      	ldr	r2, [r7, #0]
 800e498:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	219c      	movs	r1, #156	@ 0x9c
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	21a0      	movs	r1, #160	@ 0xa0
 800e4a6:	683a      	ldr	r2, [r7, #0]
 800e4a8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2294      	movs	r2, #148	@ 0x94
 800e4ae:	2101      	movs	r1, #1
 800e4b0:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	228c      	movs	r2, #140	@ 0x8c
 800e4b6:	589b      	ldr	r3, [r3, r2]
 800e4b8:	1c19      	adds	r1, r3, #0
 800e4ba:	20fe      	movs	r0, #254	@ 0xfe
 800e4bc:	0580      	lsls	r0, r0, #22
 800e4be:	f7f2 fead 	bl	800121c <__aeabi_fsub>
 800e4c2:	1c03      	adds	r3, r0, #0
 800e4c4:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2298      	movs	r2, #152	@ 0x98
 800e4ca:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800e4cc:	1c19      	adds	r1, r3, #0
 800e4ce:	f7f2 fd67 	bl	8000fa0 <__aeabi_fmul>
 800e4d2:	1c03      	adds	r3, r0, #0
 800e4d4:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	228c      	movs	r2, #140	@ 0x8c
 800e4da:	589b      	ldr	r3, [r3, r2]
 800e4dc:	6839      	ldr	r1, [r7, #0]
 800e4de:	1c18      	adds	r0, r3, #0
 800e4e0:	f7f2 fd5e 	bl	8000fa0 <__aeabi_fmul>
 800e4e4:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800e4e6:	1c19      	adds	r1, r3, #0
 800e4e8:	1c20      	adds	r0, r4, #0
 800e4ea:	f7f2 f9e9 	bl	80008c0 <__aeabi_fadd>
 800e4ee:	1c03      	adds	r3, r0, #0
 800e4f0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2298      	movs	r2, #152	@ 0x98
 800e4f6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2290      	movs	r2, #144	@ 0x90
 800e4fc:	589b      	ldr	r3, [r3, r2]
 800e4fe:	1c19      	adds	r1, r3, #0
 800e500:	20fe      	movs	r0, #254	@ 0xfe
 800e502:	0580      	lsls	r0, r0, #22
 800e504:	f7f2 fe8a 	bl	800121c <__aeabi_fsub>
 800e508:	1c03      	adds	r3, r0, #0
 800e50a:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	229c      	movs	r2, #156	@ 0x9c
 800e510:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800e512:	1c19      	adds	r1, r3, #0
 800e514:	f7f2 fd44 	bl	8000fa0 <__aeabi_fmul>
 800e518:	1c03      	adds	r3, r0, #0
 800e51a:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2290      	movs	r2, #144	@ 0x90
 800e520:	589b      	ldr	r3, [r3, r2]
 800e522:	6839      	ldr	r1, [r7, #0]
 800e524:	1c18      	adds	r0, r3, #0
 800e526:	f7f2 fd3b 	bl	8000fa0 <__aeabi_fmul>
 800e52a:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800e52c:	1c19      	adds	r1, r3, #0
 800e52e:	1c20      	adds	r0, r4, #0
 800e530:	f7f2 f9c6 	bl	80008c0 <__aeabi_fadd>
 800e534:	1c03      	adds	r3, r0, #0
 800e536:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	229c      	movs	r2, #156	@ 0x9c
 800e53c:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2298      	movs	r2, #152	@ 0x98
 800e542:	589a      	ldr	r2, [r3, r2]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	219c      	movs	r1, #156	@ 0x9c
 800e548:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800e54a:	1c19      	adds	r1, r3, #0
 800e54c:	1c10      	adds	r0, r2, #0
 800e54e:	f7f2 fe65 	bl	800121c <__aeabi_fsub>
 800e552:	1c03      	adds	r3, r0, #0
 800e554:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800e556:	2100      	movs	r1, #0
 800e558:	6978      	ldr	r0, [r7, #20]
 800e55a:	f7f1 ffe9 	bl	8000530 <__aeabi_fcmplt>
 800e55e:	1e03      	subs	r3, r0, #0
 800e560:	d004      	beq.n	800e56c <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	2280      	movs	r2, #128	@ 0x80
 800e566:	0612      	lsls	r2, r2, #24
 800e568:	4053      	eors	r3, r2
 800e56a:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800e56c:	4923      	ldr	r1, [pc, #140]	@ (800e5fc <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800e56e:	6978      	ldr	r0, [r7, #20]
 800e570:	f7f2 fd16 	bl	8000fa0 <__aeabi_fmul>
 800e574:	1c03      	adds	r3, r0, #0
 800e576:	1c18      	adds	r0, r3, #0
 800e578:	f018 f8dc 	bl	8026734 <expf>
 800e57c:	1c03      	adds	r3, r0, #0
 800e57e:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800e580:	491f      	ldr	r1, [pc, #124]	@ (800e600 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800e582:	6938      	ldr	r0, [r7, #16]
 800e584:	f7f2 fd0c 	bl	8000fa0 <__aeabi_fmul>
 800e588:	1c03      	adds	r3, r0, #0
 800e58a:	491e      	ldr	r1, [pc, #120]	@ (800e604 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800e58c:	1c18      	adds	r0, r3, #0
 800e58e:	f7f2 f997 	bl	80008c0 <__aeabi_fadd>
 800e592:	1c03      	adds	r3, r0, #0
 800e594:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685c      	ldr	r4, [r3, #4]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	68f9      	ldr	r1, [r7, #12]
 800e5a0:	1c18      	adds	r0, r3, #0
 800e5a2:	f7f2 f98d 	bl	80008c0 <__aeabi_fadd>
 800e5a6:	1c03      	adds	r3, r0, #0
 800e5a8:	1c19      	adds	r1, r3, #0
 800e5aa:	1c20      	adds	r0, r4, #0
 800e5ac:	f7f2 fb12 	bl	8000bd4 <__aeabi_fdiv>
 800e5b0:	1c03      	adds	r3, r0, #0
 800e5b2:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800e5b4:	68b9      	ldr	r1, [r7, #8]
 800e5b6:	20fe      	movs	r0, #254	@ 0xfe
 800e5b8:	0580      	lsls	r0, r0, #22
 800e5ba:	f7f2 fe2f 	bl	800121c <__aeabi_fsub>
 800e5be:	1c03      	adds	r3, r0, #0
 800e5c0:	1c18      	adds	r0, r3, #0
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	22a0      	movs	r2, #160	@ 0xa0
 800e5c6:	589b      	ldr	r3, [r3, r2]
 800e5c8:	1c19      	adds	r1, r3, #0
 800e5ca:	f7f2 fce9 	bl	8000fa0 <__aeabi_fmul>
 800e5ce:	1c03      	adds	r3, r0, #0
 800e5d0:	1c1c      	adds	r4, r3, #0
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	68b8      	ldr	r0, [r7, #8]
 800e5d6:	f7f2 fce3 	bl	8000fa0 <__aeabi_fmul>
 800e5da:	1c03      	adds	r3, r0, #0
 800e5dc:	1c19      	adds	r1, r3, #0
 800e5de:	1c20      	adds	r0, r4, #0
 800e5e0:	f7f2 f96e 	bl	80008c0 <__aeabi_fadd>
 800e5e4:	1c03      	adds	r3, r0, #0
 800e5e6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	22a0      	movs	r2, #160	@ 0xa0
 800e5ec:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	22a0      	movs	r2, #160	@ 0xa0
 800e5f2:	589b      	ldr	r3, [r3, r2]
}
 800e5f4:	1c18      	adds	r0, r3, #0
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	b007      	add	sp, #28
 800e5fa:	bd90      	pop	{r4, r7, pc}
 800e5fc:	be4ccccd 	.word	0xbe4ccccd
 800e600:	43f00000 	.word	0x43f00000
 800e604:	41a00000 	.word	0x41a00000

0800e608 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	000a      	movs	r2, r1
 800e612:	1cbb      	adds	r3, r7, #2
 800e614:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800e616:	230d      	movs	r3, #13
 800e618:	18fb      	adds	r3, r7, r3
 800e61a:	22ff      	movs	r2, #255	@ 0xff
 800e61c:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800e61e:	230e      	movs	r3, #14
 800e620:	18fb      	adds	r3, r7, r3
 800e622:	2200      	movs	r2, #0
 800e624:	801a      	strh	r2, [r3, #0]
 800e626:	e037      	b.n	800e698 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800e628:	230e      	movs	r3, #14
 800e62a:	18fb      	adds	r3, r7, r3
 800e62c:	881b      	ldrh	r3, [r3, #0]
 800e62e:	687a      	ldr	r2, [r7, #4]
 800e630:	18d3      	adds	r3, r2, r3
 800e632:	7819      	ldrb	r1, [r3, #0]
 800e634:	220d      	movs	r2, #13
 800e636:	18bb      	adds	r3, r7, r2
 800e638:	18ba      	adds	r2, r7, r2
 800e63a:	7812      	ldrb	r2, [r2, #0]
 800e63c:	404a      	eors	r2, r1
 800e63e:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800e640:	230c      	movs	r3, #12
 800e642:	18fb      	adds	r3, r7, r3
 800e644:	2208      	movs	r2, #8
 800e646:	701a      	strb	r2, [r3, #0]
 800e648:	e01b      	b.n	800e682 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800e64a:	210d      	movs	r1, #13
 800e64c:	187b      	adds	r3, r7, r1
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	b25b      	sxtb	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	da09      	bge.n	800e66a <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800e656:	187b      	adds	r3, r7, r1
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	005b      	lsls	r3, r3, #1
 800e65c:	b25b      	sxtb	r3, r3
 800e65e:	2231      	movs	r2, #49	@ 0x31
 800e660:	4053      	eors	r3, r2
 800e662:	b25a      	sxtb	r2, r3
 800e664:	187b      	adds	r3, r7, r1
 800e666:	701a      	strb	r2, [r3, #0]
 800e668:	e005      	b.n	800e676 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800e66a:	230d      	movs	r3, #13
 800e66c:	18fa      	adds	r2, r7, r3
 800e66e:	18fb      	adds	r3, r7, r3
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	18db      	adds	r3, r3, r3
 800e674:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800e676:	220c      	movs	r2, #12
 800e678:	18bb      	adds	r3, r7, r2
 800e67a:	18ba      	adds	r2, r7, r2
 800e67c:	7812      	ldrb	r2, [r2, #0]
 800e67e:	3a01      	subs	r2, #1
 800e680:	701a      	strb	r2, [r3, #0]
 800e682:	230c      	movs	r3, #12
 800e684:	18fb      	adds	r3, r7, r3
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1de      	bne.n	800e64a <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800e68c:	220e      	movs	r2, #14
 800e68e:	18bb      	adds	r3, r7, r2
 800e690:	18ba      	adds	r2, r7, r2
 800e692:	8812      	ldrh	r2, [r2, #0]
 800e694:	3201      	adds	r2, #1
 800e696:	801a      	strh	r2, [r3, #0]
 800e698:	230e      	movs	r3, #14
 800e69a:	18fa      	adds	r2, r7, r3
 800e69c:	1cbb      	adds	r3, r7, #2
 800e69e:	8812      	ldrh	r2, [r2, #0]
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d3c0      	bcc.n	800e628 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800e6a6:	230d      	movs	r3, #13
 800e6a8:	18fb      	adds	r3, r7, r3
 800e6aa:	781b      	ldrb	r3, [r3, #0]
}
 800e6ac:	0018      	movs	r0, r3
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	b004      	add	sp, #16
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	0008      	movs	r0, r1
 800e6be:	0011      	movs	r1, r2
 800e6c0:	1cbb      	adds	r3, r7, #2
 800e6c2:	1c02      	adds	r2, r0, #0
 800e6c4:	801a      	strh	r2, [r3, #0]
 800e6c6:	1c7b      	adds	r3, r7, #1
 800e6c8:	1c0a      	adds	r2, r1, #0
 800e6ca:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800e6cc:	1cbb      	adds	r3, r7, #2
 800e6ce:	881a      	ldrh	r2, [r3, #0]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	0011      	movs	r1, r2
 800e6d4:	0018      	movs	r0, r3
 800e6d6:	f7ff ff97 	bl	800e608 <sensirion_i2c_generate_crc>
 800e6da:	0003      	movs	r3, r0
 800e6dc:	001a      	movs	r2, r3
 800e6de:	1c7b      	adds	r3, r7, #1
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d001      	beq.n	800e6ea <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	e000      	b.n	800e6ec <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800e6ea:	2300      	movs	r3, #0
}
 800e6ec:	0018      	movs	r0, r3
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	b002      	add	sp, #8
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	0008      	movs	r0, r1
 800e6fe:	0011      	movs	r1, r2
 800e700:	1cbb      	adds	r3, r7, #2
 800e702:	1c02      	adds	r2, r0, #0
 800e704:	801a      	strh	r2, [r3, #0]
 800e706:	003b      	movs	r3, r7
 800e708:	1c0a      	adds	r2, r1, #0
 800e70a:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800e70c:	003b      	movs	r3, r7
 800e70e:	881b      	ldrh	r3, [r3, #0]
 800e710:	0a1b      	lsrs	r3, r3, #8
 800e712:	b299      	uxth	r1, r3
 800e714:	1cbb      	adds	r3, r7, #2
 800e716:	881b      	ldrh	r3, [r3, #0]
 800e718:	1cba      	adds	r2, r7, #2
 800e71a:	1c58      	adds	r0, r3, #1
 800e71c:	8010      	strh	r0, [r2, #0]
 800e71e:	001a      	movs	r2, r3
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	189b      	adds	r3, r3, r2
 800e724:	b2ca      	uxtb	r2, r1
 800e726:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800e728:	1cbb      	adds	r3, r7, #2
 800e72a:	881b      	ldrh	r3, [r3, #0]
 800e72c:	1cba      	adds	r2, r7, #2
 800e72e:	1c59      	adds	r1, r3, #1
 800e730:	8011      	strh	r1, [r2, #0]
 800e732:	001a      	movs	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	189b      	adds	r3, r3, r2
 800e738:	003a      	movs	r2, r7
 800e73a:	8812      	ldrh	r2, [r2, #0]
 800e73c:	b2d2      	uxtb	r2, r2
 800e73e:	701a      	strb	r2, [r3, #0]
    return offset;
 800e740:	1cbb      	adds	r3, r7, #2
 800e742:	881b      	ldrh	r3, [r3, #0]
}
 800e744:	0018      	movs	r0, r3
 800e746:	46bd      	mov	sp, r7
 800e748:	b002      	add	sp, #8
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800e74c:	b590      	push	{r4, r7, lr}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	0008      	movs	r0, r1
 800e756:	0011      	movs	r1, r2
 800e758:	1cbb      	adds	r3, r7, #2
 800e75a:	1c02      	adds	r2, r0, #0
 800e75c:	801a      	strh	r2, [r3, #0]
 800e75e:	003b      	movs	r3, r7
 800e760:	1c0a      	adds	r2, r1, #0
 800e762:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800e764:	003b      	movs	r3, r7
 800e766:	881b      	ldrh	r3, [r3, #0]
 800e768:	0a1b      	lsrs	r3, r3, #8
 800e76a:	b299      	uxth	r1, r3
 800e76c:	1cbb      	adds	r3, r7, #2
 800e76e:	881b      	ldrh	r3, [r3, #0]
 800e770:	1cba      	adds	r2, r7, #2
 800e772:	1c58      	adds	r0, r3, #1
 800e774:	8010      	strh	r0, [r2, #0]
 800e776:	001a      	movs	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	189b      	adds	r3, r3, r2
 800e77c:	b2ca      	uxtb	r2, r1
 800e77e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800e780:	1cbb      	adds	r3, r7, #2
 800e782:	881b      	ldrh	r3, [r3, #0]
 800e784:	1cba      	adds	r2, r7, #2
 800e786:	1c59      	adds	r1, r3, #1
 800e788:	8011      	strh	r1, [r2, #0]
 800e78a:	001a      	movs	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	189b      	adds	r3, r3, r2
 800e790:	003a      	movs	r2, r7
 800e792:	8812      	ldrh	r2, [r2, #0]
 800e794:	b2d2      	uxtb	r2, r2
 800e796:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800e798:	1cbb      	adds	r3, r7, #2
 800e79a:	881b      	ldrh	r3, [r3, #0]
 800e79c:	3b02      	subs	r3, #2
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800e7a2:	1cbb      	adds	r3, r7, #2
 800e7a4:	881b      	ldrh	r3, [r3, #0]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	18d4      	adds	r4, r2, r3
 800e7aa:	2102      	movs	r1, #2
 800e7ac:	f7ff ff2c 	bl	800e608 <sensirion_i2c_generate_crc>
 800e7b0:	0003      	movs	r3, r0
 800e7b2:	7023      	strb	r3, [r4, #0]
    offset++;
 800e7b4:	1cbb      	adds	r3, r7, #2
 800e7b6:	881a      	ldrh	r2, [r3, #0]
 800e7b8:	1cbb      	adds	r3, r7, #2
 800e7ba:	3201      	adds	r2, #1
 800e7bc:	801a      	strh	r2, [r3, #0]

    return offset;
 800e7be:	1cbb      	adds	r3, r7, #2
 800e7c0:	881b      	ldrh	r3, [r3, #0]
}
 800e7c2:	0018      	movs	r0, r3
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	b003      	add	sp, #12
 800e7c8:	bd90      	pop	{r4, r7, pc}

0800e7ca <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b082      	sub	sp, #8
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	0008      	movs	r0, r1
 800e7d4:	0011      	movs	r1, r2
 800e7d6:	1cbb      	adds	r3, r7, #2
 800e7d8:	1c02      	adds	r2, r0, #0
 800e7da:	801a      	strh	r2, [r3, #0]
 800e7dc:	003b      	movs	r3, r7
 800e7de:	1c0a      	adds	r2, r1, #0
 800e7e0:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800e7e2:	003b      	movs	r3, r7
 800e7e4:	881a      	ldrh	r2, [r3, #0]
 800e7e6:	1cbb      	adds	r3, r7, #2
 800e7e8:	8819      	ldrh	r1, [r3, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	0018      	movs	r0, r3
 800e7ee:	f7ff ffad 	bl	800e74c <sensirion_i2c_add_uint16_t_to_buffer>
 800e7f2:	0003      	movs	r3, r0
}
 800e7f4:	0018      	movs	r0, r3
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	b002      	add	sp, #8
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6039      	str	r1, [r7, #0]
 800e804:	0011      	movs	r1, r2
 800e806:	1dfb      	adds	r3, r7, #7
 800e808:	1c02      	adds	r2, r0, #0
 800e80a:	701a      	strb	r2, [r3, #0]
 800e80c:	1d3b      	adds	r3, r7, #4
 800e80e:	1c0a      	adds	r2, r1, #0
 800e810:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800e812:	1d3b      	adds	r3, r7, #4
 800e814:	881a      	ldrh	r2, [r3, #0]
 800e816:	6839      	ldr	r1, [r7, #0]
 800e818:	1dfb      	adds	r3, r7, #7
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	0018      	movs	r0, r3
 800e81e:	f7fe f9d9 	bl	800cbd4 <sensirion_i2c_hal_write>
 800e822:	0003      	movs	r3, r0
}
 800e824:	0018      	movs	r0, r3
 800e826:	46bd      	mov	sp, r7
 800e828:	b002      	add	sp, #8
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800e82c:	b5b0      	push	{r4, r5, r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6039      	str	r1, [r7, #0]
 800e834:	0011      	movs	r1, r2
 800e836:	1dfb      	adds	r3, r7, #7
 800e838:	1c02      	adds	r2, r0, #0
 800e83a:	701a      	strb	r2, [r3, #0]
 800e83c:	1d3b      	adds	r3, r7, #4
 800e83e:	1c0a      	adds	r2, r1, #0
 800e840:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800e842:	1d3b      	adds	r3, r7, #4
 800e844:	881b      	ldrh	r3, [r3, #0]
 800e846:	085b      	lsrs	r3, r3, #1
 800e848:	b29b      	uxth	r3, r3
 800e84a:	220a      	movs	r2, #10
 800e84c:	18ba      	adds	r2, r7, r2
 800e84e:	1c19      	adds	r1, r3, #0
 800e850:	1c0b      	adds	r3, r1, #0
 800e852:	18db      	adds	r3, r3, r3
 800e854:	185b      	adds	r3, r3, r1
 800e856:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800e858:	1d3b      	adds	r3, r7, #4
 800e85a:	881b      	ldrh	r3, [r3, #0]
 800e85c:	2201      	movs	r2, #1
 800e85e:	4013      	ands	r3, r2
 800e860:	b29b      	uxth	r3, r3
 800e862:	2b00      	cmp	r3, #0
 800e864:	d001      	beq.n	800e86a <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800e866:	2304      	movs	r3, #4
 800e868:	e06b      	b.n	800e942 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800e86a:	230a      	movs	r3, #10
 800e86c:	18fb      	adds	r3, r7, r3
 800e86e:	881a      	ldrh	r2, [r3, #0]
 800e870:	6839      	ldr	r1, [r7, #0]
 800e872:	1dfb      	adds	r3, r7, #7
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	0018      	movs	r0, r3
 800e878:	f7fe f98c 	bl	800cb94 <sensirion_i2c_hal_read>
 800e87c:	0003      	movs	r3, r0
 800e87e:	001a      	movs	r2, r3
 800e880:	2108      	movs	r1, #8
 800e882:	187b      	adds	r3, r7, r1
 800e884:	801a      	strh	r2, [r3, #0]
    if (error) {
 800e886:	000a      	movs	r2, r1
 800e888:	18bb      	adds	r3, r7, r2
 800e88a:	2100      	movs	r1, #0
 800e88c:	5e5b      	ldrsh	r3, [r3, r1]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d003      	beq.n	800e89a <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800e892:	18bb      	adds	r3, r7, r2
 800e894:	2200      	movs	r2, #0
 800e896:	5e9b      	ldrsh	r3, [r3, r2]
 800e898:	e053      	b.n	800e942 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800e89a:	230e      	movs	r3, #14
 800e89c:	18fb      	adds	r3, r7, r3
 800e89e:	2200      	movs	r2, #0
 800e8a0:	801a      	strh	r2, [r3, #0]
 800e8a2:	230c      	movs	r3, #12
 800e8a4:	18fb      	adds	r3, r7, r3
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	801a      	strh	r2, [r3, #0]
 800e8aa:	e041      	b.n	800e930 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800e8ac:	210e      	movs	r1, #14
 800e8ae:	187b      	adds	r3, r7, r1
 800e8b0:	881b      	ldrh	r3, [r3, #0]
 800e8b2:	683a      	ldr	r2, [r7, #0]
 800e8b4:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800e8b6:	187b      	adds	r3, r7, r1
 800e8b8:	881b      	ldrh	r3, [r3, #0]
 800e8ba:	3302      	adds	r3, #2
 800e8bc:	683a      	ldr	r2, [r7, #0]
 800e8be:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	001a      	movs	r2, r3
 800e8c4:	2102      	movs	r1, #2
 800e8c6:	f7ff fef5 	bl	800e6b4 <sensirion_i2c_check_crc>
 800e8ca:	0003      	movs	r3, r0
 800e8cc:	001a      	movs	r2, r3
 800e8ce:	2108      	movs	r1, #8
 800e8d0:	187b      	adds	r3, r7, r1
 800e8d2:	801a      	strh	r2, [r3, #0]
        if (error) {
 800e8d4:	000a      	movs	r2, r1
 800e8d6:	18bb      	adds	r3, r7, r2
 800e8d8:	2100      	movs	r1, #0
 800e8da:	5e5b      	ldrsh	r3, [r3, r1]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d003      	beq.n	800e8e8 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800e8e0:	18bb      	adds	r3, r7, r2
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	5e9b      	ldrsh	r3, [r3, r2]
 800e8e6:	e02c      	b.n	800e942 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800e8e8:	240e      	movs	r4, #14
 800e8ea:	193b      	adds	r3, r7, r4
 800e8ec:	881b      	ldrh	r3, [r3, #0]
 800e8ee:	683a      	ldr	r2, [r7, #0]
 800e8f0:	18d2      	adds	r2, r2, r3
 800e8f2:	250c      	movs	r5, #12
 800e8f4:	197b      	adds	r3, r7, r5
 800e8f6:	881b      	ldrh	r3, [r3, #0]
 800e8f8:	1979      	adds	r1, r7, r5
 800e8fa:	1c58      	adds	r0, r3, #1
 800e8fc:	8008      	strh	r0, [r1, #0]
 800e8fe:	0019      	movs	r1, r3
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	185b      	adds	r3, r3, r1
 800e904:	7812      	ldrb	r2, [r2, #0]
 800e906:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800e908:	193b      	adds	r3, r7, r4
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	3301      	adds	r3, #1
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	18d2      	adds	r2, r2, r3
 800e912:	197b      	adds	r3, r7, r5
 800e914:	881b      	ldrh	r3, [r3, #0]
 800e916:	1979      	adds	r1, r7, r5
 800e918:	1c58      	adds	r0, r3, #1
 800e91a:	8008      	strh	r0, [r1, #0]
 800e91c:	0019      	movs	r1, r3
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	185b      	adds	r3, r3, r1
 800e922:	7812      	ldrb	r2, [r2, #0]
 800e924:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800e926:	193b      	adds	r3, r7, r4
 800e928:	193a      	adds	r2, r7, r4
 800e92a:	8812      	ldrh	r2, [r2, #0]
 800e92c:	3203      	adds	r2, #3
 800e92e:	801a      	strh	r2, [r3, #0]
 800e930:	230e      	movs	r3, #14
 800e932:	18fa      	adds	r2, r7, r3
 800e934:	230a      	movs	r3, #10
 800e936:	18fb      	adds	r3, r7, r3
 800e938:	8812      	ldrh	r2, [r2, #0]
 800e93a:	881b      	ldrh	r3, [r3, #0]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d3b5      	bcc.n	800e8ac <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800e940:	2300      	movs	r3, #0
}
 800e942:	0018      	movs	r0, r3
 800e944:	46bd      	mov	sp, r7
 800e946:	b004      	add	sp, #16
 800e948:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e94c <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800e94c:	b590      	push	{r4, r7, lr}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6039      	str	r1, [r7, #0]
 800e954:	0011      	movs	r1, r2
 800e956:	1dfb      	adds	r3, r7, #7
 800e958:	1c02      	adds	r2, r0, #0
 800e95a:	701a      	strb	r2, [r3, #0]
 800e95c:	1dbb      	adds	r3, r7, #6
 800e95e:	1c0a      	adds	r2, r1, #0
 800e960:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800e962:	4b08      	ldr	r3, [pc, #32]	@ (800e984 <ReadRegister+0x38>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d008      	beq.n	800e97c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800e96a:	4b06      	ldr	r3, [pc, #24]	@ (800e984 <ReadRegister+0x38>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	1dba      	adds	r2, r7, #6
 800e970:	7814      	ldrb	r4, [r2, #0]
 800e972:	6839      	ldr	r1, [r7, #0]
 800e974:	1dfa      	adds	r2, r7, #7
 800e976:	7810      	ldrb	r0, [r2, #0]
 800e978:	0022      	movs	r2, r4
 800e97a:	4798      	blx	r3
  }
}
 800e97c:	46c0      	nop			@ (mov r8, r8)
 800e97e:	46bd      	mov	sp, r7
 800e980:	b003      	add	sp, #12
 800e982:	bd90      	pop	{r4, r7, pc}
 800e984:	20000ec4 	.word	0x20000ec4

0800e988 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800e988:	b590      	push	{r4, r7, lr}
 800e98a:	b083      	sub	sp, #12
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6039      	str	r1, [r7, #0]
 800e990:	0011      	movs	r1, r2
 800e992:	1dfb      	adds	r3, r7, #7
 800e994:	1c02      	adds	r2, r0, #0
 800e996:	701a      	strb	r2, [r3, #0]
 800e998:	1dbb      	adds	r3, r7, #6
 800e99a:	1c0a      	adds	r2, r1, #0
 800e99c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e99e:	4b08      	ldr	r3, [pc, #32]	@ (800e9c0 <WriteRegister+0x38>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d008      	beq.n	800e9b8 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800e9a6:	4b06      	ldr	r3, [pc, #24]	@ (800e9c0 <WriteRegister+0x38>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	1dba      	adds	r2, r7, #6
 800e9ac:	7814      	ldrb	r4, [r2, #0]
 800e9ae:	6839      	ldr	r1, [r7, #0]
 800e9b0:	1dfa      	adds	r2, r7, #7
 800e9b2:	7810      	ldrb	r0, [r2, #0]
 800e9b4:	0022      	movs	r2, r4
 800e9b6:	4798      	blx	r3
  }
}
 800e9b8:	46c0      	nop			@ (mov r8, r8)
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	b003      	add	sp, #12
 800e9be:	bd90      	pop	{r4, r7, pc}
 800e9c0:	20000ec8 	.word	0x20000ec8

0800e9c4 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800e9cc:	f003 fb90 	bl	80120f0 <HAL_GetTick>
 800e9d0:	0002      	movs	r2, r0
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	18d2      	adds	r2, r2, r3
 800e9d6:	4b03      	ldr	r3, [pc, #12]	@ (800e9e4 <setSGP40TimeStamp+0x20>)
 800e9d8:	601a      	str	r2, [r3, #0]
}
 800e9da:	46c0      	nop			@ (mov r8, r8)
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	b002      	add	sp, #8
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	46c0      	nop			@ (mov r8, r8)
 800e9e4:	20000ed8 	.word	0x20000ed8

0800e9e8 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800e9ec:	4b02      	ldr	r3, [pc, #8]	@ (800e9f8 <ResetSGP40samplecounter+0x10>)
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	701a      	strb	r2, [r3, #0]
}
 800e9f2:	46c0      	nop			@ (mov r8, r8)
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	20000ed6 	.word	0x20000ed6

0800e9fc <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800ea06:	4b07      	ldr	r3, [pc, #28]	@ (800ea24 <SGP_Init+0x28>)
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800ea0c:	4b06      	ldr	r3, [pc, #24]	@ (800ea28 <SGP_Init+0x2c>)
 800ea0e:	683a      	ldr	r2, [r7, #0]
 800ea10:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800ea12:	4b06      	ldr	r3, [pc, #24]	@ (800ea2c <SGP_Init+0x30>)
 800ea14:	2100      	movs	r1, #0
 800ea16:	0018      	movs	r0, r3
 800ea18:	f7fe ff70 	bl	800d8fc <GasIndexAlgorithm_init>
}
 800ea1c:	46c0      	nop			@ (mov r8, r8)
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	b002      	add	sp, #8
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	20000ec4 	.word	0x20000ec4
 800ea28:	20000ec8 	.word	0x20000ec8
 800ea2c:	20000ee0 	.word	0x20000ee0

0800ea30 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800ea30:	b580      	push	{r7, lr}
 800ea32:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800ea34:	4b07      	ldr	r3, [pc, #28]	@ (800ea54 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d004      	beq.n	800ea46 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800ea3c:	4b06      	ldr	r3, [pc, #24]	@ (800ea58 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800ea3e:	22fe      	movs	r2, #254	@ 0xfe
 800ea40:	0592      	lsls	r2, r2, #22
 800ea42:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800ea44:	e002      	b.n	800ea4c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800ea46:	4b04      	ldr	r3, [pc, #16]	@ (800ea58 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800ea48:	4a04      	ldr	r2, [pc, #16]	@ (800ea5c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800ea4a:	605a      	str	r2, [r3, #4]
}
 800ea4c:	46c0      	nop			@ (mov r8, r8)
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	46c0      	nop			@ (mov r8, r8)
 800ea54:	20001e2d 	.word	0x20001e2d
 800ea58:	20000ee0 	.word	0x20000ee0
 800ea5c:	44610000 	.word	0x44610000

0800ea60 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800ea60:	b580      	push	{r7, lr}
 800ea62:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800ea64:	4b13      	ldr	r3, [pc, #76]	@ (800eab4 <SGP_StartMeasurement+0x54>)
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00d      	beq.n	800ea88 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800ea6c:	4b12      	ldr	r3, [pc, #72]	@ (800eab8 <SGP_StartMeasurement+0x58>)
 800ea6e:	2208      	movs	r2, #8
 800ea70:	0019      	movs	r1, r3
 800ea72:	2059      	movs	r0, #89	@ 0x59
 800ea74:	f7ff ff88 	bl	800e988 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800ea78:	f003 fb3a 	bl	80120f0 <HAL_GetTick>
 800ea7c:	0003      	movs	r3, r0
 800ea7e:	331e      	adds	r3, #30
 800ea80:	001a      	movs	r2, r3
 800ea82:	4b0e      	ldr	r3, [pc, #56]	@ (800eabc <SGP_StartMeasurement+0x5c>)
 800ea84:	601a      	str	r2, [r3, #0]
 800ea86:	e00c      	b.n	800eaa2 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800ea88:	4b0d      	ldr	r3, [pc, #52]	@ (800eac0 <SGP_StartMeasurement+0x60>)
 800ea8a:	2208      	movs	r2, #8
 800ea8c:	0019      	movs	r1, r3
 800ea8e:	2059      	movs	r0, #89	@ 0x59
 800ea90:	f7ff ff7a 	bl	800e988 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800ea94:	f003 fb2c 	bl	80120f0 <HAL_GetTick>
 800ea98:	0003      	movs	r3, r0
 800ea9a:	33aa      	adds	r3, #170	@ 0xaa
 800ea9c:	001a      	movs	r2, r3
 800ea9e:	4b09      	ldr	r3, [pc, #36]	@ (800eac4 <SGP_StartMeasurement+0x64>)
 800eaa0:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800eaa2:	4b09      	ldr	r3, [pc, #36]	@ (800eac8 <SGP_StartMeasurement+0x68>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800eaa8:	4b08      	ldr	r3, [pc, #32]	@ (800eacc <SGP_StartMeasurement+0x6c>)
 800eaaa:	2200      	movs	r2, #0
 800eaac:	701a      	strb	r2, [r3, #0]
}
 800eaae:	46c0      	nop			@ (mov r8, r8)
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	20000f88 	.word	0x20000f88
 800eab8:	200000b0 	.word	0x200000b0
 800eabc:	200000c4 	.word	0x200000c4
 800eac0:	200000a8 	.word	0x200000a8
 800eac4:	200000bc 	.word	0x200000bc
 800eac8:	20000edc 	.word	0x20000edc
 800eacc:	20000edd 	.word	0x20000edd

0800ead0 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800ead0:	b580      	push	{r7, lr}
 800ead2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800ead4:	4b04      	ldr	r3, [pc, #16]	@ (800eae8 <SGP_HeatedUp+0x18>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	0018      	movs	r0, r3
 800eada:	f002 fe67 	bl	80117ac <TimestampIsReached>
 800eade:	0003      	movs	r3, r0
}
 800eae0:	0018      	movs	r0, r3
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	46c0      	nop			@ (mov r8, r8)
 800eae8:	200000bc 	.word	0x200000bc

0800eaec <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800eaec:	b580      	push	{r7, lr}
 800eaee:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800eaf0:	4b04      	ldr	r3, [pc, #16]	@ (800eb04 <SGP_MeasurementReady+0x18>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	0018      	movs	r0, r3
 800eaf6:	f002 fe59 	bl	80117ac <TimestampIsReached>
 800eafa:	0003      	movs	r3, r0
}
 800eafc:	0018      	movs	r0, r3
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	46c0      	nop			@ (mov r8, r8)
 800eb04:	200000c4 	.word	0x200000c4

0800eb08 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800eb0c:	4b04      	ldr	r3, [pc, #16]	@ (800eb20 <SGP_MeasurementDone+0x18>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	0018      	movs	r0, r3
 800eb12:	f002 fe4b 	bl	80117ac <TimestampIsReached>
 800eb16:	0003      	movs	r3, r0
}
 800eb18:	0018      	movs	r0, r3
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	46c0      	nop			@ (mov r8, r8)
 800eb20:	200000c0 	.word	0x200000c0

0800eb24 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800eb24:	b580      	push	{r7, lr}
 800eb26:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800eb28:	4b04      	ldr	r3, [pc, #16]	@ (800eb3c <SGP_TurnHeaterOff+0x18>)
 800eb2a:	2202      	movs	r2, #2
 800eb2c:	0019      	movs	r1, r3
 800eb2e:	2059      	movs	r0, #89	@ 0x59
 800eb30:	f7ff ff2a 	bl	800e988 <WriteRegister>
}
 800eb34:	46c0      	nop			@ (mov r8, r8)
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	46c0      	nop			@ (mov r8, r8)
 800eb3c:	200000a0 	.word	0x200000a0

0800eb40 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800eb40:	b590      	push	{r4, r7, lr}
 800eb42:	b087      	sub	sp, #28
 800eb44:	af02      	add	r7, sp, #8
 800eb46:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800eb48:	f7ff ffc2 	bl	800ead0 <SGP_HeatedUp>
 800eb4c:	1e03      	subs	r3, r0, #0
 800eb4e:	d032      	beq.n	800ebb6 <SGP_GetMeasurementValues+0x76>
 800eb50:	4b7f      	ldr	r3, [pc, #508]	@ (800ed50 <SGP_GetMeasurementValues+0x210>)
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	2201      	movs	r2, #1
 800eb56:	4053      	eors	r3, r2
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d02b      	beq.n	800ebb6 <SGP_GetMeasurementValues+0x76>
 800eb5e:	4b7d      	ldr	r3, [pc, #500]	@ (800ed54 <SGP_GetMeasurementValues+0x214>)
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	2201      	movs	r2, #1
 800eb64:	4053      	eors	r3, r2
 800eb66:	b2db      	uxtb	r3, r3
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d024      	beq.n	800ebb6 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800eb6c:	4b78      	ldr	r3, [pc, #480]	@ (800ed50 <SGP_GetMeasurementValues+0x210>)
 800eb6e:	2201      	movs	r2, #1
 800eb70:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800eb72:	4b79      	ldr	r3, [pc, #484]	@ (800ed58 <SGP_GetMeasurementValues+0x218>)
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00d      	beq.n	800eb96 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800eb7a:	4b78      	ldr	r3, [pc, #480]	@ (800ed5c <SGP_GetMeasurementValues+0x21c>)
 800eb7c:	2208      	movs	r2, #8
 800eb7e:	0019      	movs	r1, r3
 800eb80:	2059      	movs	r0, #89	@ 0x59
 800eb82:	f7ff ff01 	bl	800e988 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800eb86:	f003 fab3 	bl	80120f0 <HAL_GetTick>
 800eb8a:	0003      	movs	r3, r0
 800eb8c:	331e      	adds	r3, #30
 800eb8e:	001a      	movs	r2, r3
 800eb90:	4b73      	ldr	r3, [pc, #460]	@ (800ed60 <SGP_GetMeasurementValues+0x220>)
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	e00c      	b.n	800ebb0 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800eb96:	4b73      	ldr	r3, [pc, #460]	@ (800ed64 <SGP_GetMeasurementValues+0x224>)
 800eb98:	2208      	movs	r2, #8
 800eb9a:	0019      	movs	r1, r3
 800eb9c:	2059      	movs	r0, #89	@ 0x59
 800eb9e:	f7ff fef3 	bl	800e988 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800eba2:	f003 faa5 	bl	80120f0 <HAL_GetTick>
 800eba6:	0003      	movs	r3, r0
 800eba8:	331e      	adds	r3, #30
 800ebaa:	001a      	movs	r2, r3
 800ebac:	4b6c      	ldr	r3, [pc, #432]	@ (800ed60 <SGP_GetMeasurementValues+0x220>)
 800ebae:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800ebb0:	4b68      	ldr	r3, [pc, #416]	@ (800ed54 <SGP_GetMeasurementValues+0x214>)
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800ebb6:	4b66      	ldr	r3, [pc, #408]	@ (800ed50 <SGP_GetMeasurementValues+0x210>)
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d100      	bne.n	800ebc0 <SGP_GetMeasurementValues+0x80>
 800ebbe:	e0ab      	b.n	800ed18 <SGP_GetMeasurementValues+0x1d8>
 800ebc0:	f7ff ff94 	bl	800eaec <SGP_MeasurementReady>
 800ebc4:	1e03      	subs	r3, r0, #0
 800ebc6:	d100      	bne.n	800ebca <SGP_GetMeasurementValues+0x8a>
 800ebc8:	e0a6      	b.n	800ed18 <SGP_GetMeasurementValues+0x1d8>
 800ebca:	4b67      	ldr	r3, [pc, #412]	@ (800ed68 <SGP_GetMeasurementValues+0x228>)
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	4053      	eors	r3, r2
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d100      	bne.n	800ebda <SGP_GetMeasurementValues+0x9a>
 800ebd8:	e09e      	b.n	800ed18 <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800ebda:	4b63      	ldr	r3, [pc, #396]	@ (800ed68 <SGP_GetMeasurementValues+0x228>)
 800ebdc:	2201      	movs	r2, #1
 800ebde:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800ebe0:	4b62      	ldr	r3, [pc, #392]	@ (800ed6c <SGP_GetMeasurementValues+0x22c>)
 800ebe2:	2203      	movs	r2, #3
 800ebe4:	0019      	movs	r1, r3
 800ebe6:	2059      	movs	r0, #89	@ 0x59
 800ebe8:	f7ff feb0 	bl	800e94c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800ebec:	4b5f      	ldr	r3, [pc, #380]	@ (800ed6c <SGP_GetMeasurementValues+0x22c>)
 800ebee:	2203      	movs	r2, #3
 800ebf0:	2103      	movs	r1, #3
 800ebf2:	0018      	movs	r0, r3
 800ebf4:	f000 f918 	bl	800ee28 <CheckCRC>
 800ebf8:	0003      	movs	r3, r0
 800ebfa:	001a      	movs	r2, r3
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	4053      	eors	r3, r2
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d02a      	beq.n	800ec5c <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800ec06:	4a5a      	ldr	r2, [pc, #360]	@ (800ed70 <SGP_GetMeasurementValues+0x230>)
 800ec08:	4b5a      	ldr	r3, [pc, #360]	@ (800ed74 <SGP_GetMeasurementValues+0x234>)
 800ec0a:	0019      	movs	r1, r3
 800ec0c:	2001      	movs	r0, #1
 800ec0e:	f002 fe23 	bl	8011858 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800ec12:	4a59      	ldr	r2, [pc, #356]	@ (800ed78 <SGP_GetMeasurementValues+0x238>)
 800ec14:	4b59      	ldr	r3, [pc, #356]	@ (800ed7c <SGP_GetMeasurementValues+0x23c>)
 800ec16:	0019      	movs	r1, r3
 800ec18:	2002      	movs	r0, #2
 800ec1a:	f002 fe1d 	bl	8011858 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ec1e:	230f      	movs	r3, #15
 800ec20:	18fb      	adds	r3, r7, r3
 800ec22:	2200      	movs	r2, #0
 800ec24:	701a      	strb	r2, [r3, #0]
 800ec26:	e012      	b.n	800ec4e <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800ec28:	240f      	movs	r4, #15
 800ec2a:	193b      	adds	r3, r7, r4
 800ec2c:	7818      	ldrb	r0, [r3, #0]
 800ec2e:	193b      	adds	r3, r7, r4
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	4a4e      	ldr	r2, [pc, #312]	@ (800ed6c <SGP_GetMeasurementValues+0x22c>)
 800ec34:	5cd3      	ldrb	r3, [r2, r3]
 800ec36:	4a52      	ldr	r2, [pc, #328]	@ (800ed80 <SGP_GetMeasurementValues+0x240>)
 800ec38:	4952      	ldr	r1, [pc, #328]	@ (800ed84 <SGP_GetMeasurementValues+0x244>)
 800ec3a:	9300      	str	r3, [sp, #0]
 800ec3c:	0003      	movs	r3, r0
 800ec3e:	2003      	movs	r0, #3
 800ec40:	f002 fe0a 	bl	8011858 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ec44:	193b      	adds	r3, r7, r4
 800ec46:	781a      	ldrb	r2, [r3, #0]
 800ec48:	193b      	adds	r3, r7, r4
 800ec4a:	3201      	adds	r2, #1
 800ec4c:	701a      	strb	r2, [r3, #0]
 800ec4e:	230f      	movs	r3, #15
 800ec50:	18fb      	adds	r3, r7, r3
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d9e7      	bls.n	800ec28 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e075      	b.n	800ed48 <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800ec5c:	f003 fa48 	bl	80120f0 <HAL_GetTick>
 800ec60:	0003      	movs	r3, r0
 800ec62:	22fa      	movs	r2, #250	@ 0xfa
 800ec64:	0092      	lsls	r2, r2, #2
 800ec66:	189a      	adds	r2, r3, r2
 800ec68:	4b47      	ldr	r3, [pc, #284]	@ (800ed88 <SGP_GetMeasurementValues+0x248>)
 800ec6a:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800ec6c:	f7ff ff5a 	bl	800eb24 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800ec70:	4b46      	ldr	r3, [pc, #280]	@ (800ed8c <SGP_GetMeasurementValues+0x24c>)
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	3301      	adds	r3, #1
 800ec76:	b2da      	uxtb	r2, r3
 800ec78:	4b44      	ldr	r3, [pc, #272]	@ (800ed8c <SGP_GetMeasurementValues+0x24c>)
 800ec7a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800ec7c:	4b43      	ldr	r3, [pc, #268]	@ (800ed8c <SGP_GetMeasurementValues+0x24c>)
 800ec7e:	781a      	ldrb	r2, [r3, #0]
 800ec80:	4b43      	ldr	r3, [pc, #268]	@ (800ed90 <SGP_GetMeasurementValues+0x250>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d347      	bcc.n	800ed18 <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800ec88:	4b38      	ldr	r3, [pc, #224]	@ (800ed6c <SGP_GetMeasurementValues+0x22c>)
 800ec8a:	785b      	ldrb	r3, [r3, #1]
 800ec8c:	021b      	lsls	r3, r3, #8
 800ec8e:	b21a      	sxth	r2, r3
 800ec90:	4b36      	ldr	r3, [pc, #216]	@ (800ed6c <SGP_GetMeasurementValues+0x22c>)
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	b21b      	sxth	r3, r3
 800ec96:	4313      	orrs	r3, r2
 800ec98:	b21a      	sxth	r2, r3
 800ec9a:	240c      	movs	r4, #12
 800ec9c:	193b      	adds	r3, r7, r4
 800ec9e:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800eca0:	2300      	movs	r3, #0
 800eca2:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800eca4:	193b      	adds	r3, r7, r4
 800eca6:	8819      	ldrh	r1, [r3, #0]
 800eca8:	2308      	movs	r3, #8
 800ecaa:	18fa      	adds	r2, r7, r3
 800ecac:	4b39      	ldr	r3, [pc, #228]	@ (800ed94 <SGP_GetMeasurementValues+0x254>)
 800ecae:	0018      	movs	r0, r3
 800ecb0:	f7fe fe88 	bl	800d9c4 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800ecba:	4b37      	ldr	r3, [pc, #220]	@ (800ed98 <SGP_GetMeasurementValues+0x258>)
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	b2da      	uxtb	r2, r3
 800ecc2:	4b35      	ldr	r3, [pc, #212]	@ (800ed98 <SGP_GetMeasurementValues+0x258>)
 800ecc4:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800ecc6:	4b34      	ldr	r3, [pc, #208]	@ (800ed98 <SGP_GetMeasurementValues+0x258>)
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d10d      	bne.n	800ecea <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800ecce:	193b      	adds	r3, r7, r4
 800ecd0:	881b      	ldrh	r3, [r3, #0]
 800ecd2:	4a32      	ldr	r2, [pc, #200]	@ (800ed9c <SGP_GetMeasurementValues+0x25c>)
 800ecd4:	492b      	ldr	r1, [pc, #172]	@ (800ed84 <SGP_GetMeasurementValues+0x244>)
 800ecd6:	2003      	movs	r0, #3
 800ecd8:	f002 fdbe 	bl	8011858 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	4a30      	ldr	r2, [pc, #192]	@ (800eda0 <SGP_GetMeasurementValues+0x260>)
 800ece0:	4928      	ldr	r1, [pc, #160]	@ (800ed84 <SGP_GetMeasurementValues+0x244>)
 800ece2:	2003      	movs	r0, #3
 800ece4:	f002 fdb8 	bl	8011858 <CreateLine>
 800ece8:	e006      	b.n	800ecf8 <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800ecea:	4b2b      	ldr	r3, [pc, #172]	@ (800ed98 <SGP_GetMeasurementValues+0x258>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	2b0b      	cmp	r3, #11
 800ecf0:	d102      	bne.n	800ecf8 <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800ecf2:	4b29      	ldr	r3, [pc, #164]	@ (800ed98 <SGP_GetMeasurementValues+0x258>)
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	0018      	movs	r0, r3
 800ecfe:	f001 fd5b 	bl	80107b8 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800ed02:	4b22      	ldr	r3, [pc, #136]	@ (800ed8c <SGP_GetMeasurementValues+0x24c>)
 800ed04:	2200      	movs	r2, #0
 800ed06:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800ed08:	4b13      	ldr	r3, [pc, #76]	@ (800ed58 <SGP_GetMeasurementValues+0x218>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800ed0e:	4b11      	ldr	r3, [pc, #68]	@ (800ed54 <SGP_GetMeasurementValues+0x214>)
 800ed10:	2200      	movs	r2, #0
 800ed12:	701a      	strb	r2, [r3, #0]
      return true;
 800ed14:	2301      	movs	r3, #1
 800ed16:	e017      	b.n	800ed48 <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800ed18:	f7ff fef6 	bl	800eb08 <SGP_MeasurementDone>
 800ed1c:	1e03      	subs	r3, r0, #0
 800ed1e:	d012      	beq.n	800ed46 <SGP_GetMeasurementValues+0x206>
 800ed20:	4b0b      	ldr	r3, [pc, #44]	@ (800ed50 <SGP_GetMeasurementValues+0x210>)
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00e      	beq.n	800ed46 <SGP_GetMeasurementValues+0x206>
 800ed28:	4b0f      	ldr	r3, [pc, #60]	@ (800ed68 <SGP_GetMeasurementValues+0x228>)
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d00a      	beq.n	800ed46 <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800ed30:	4a1c      	ldr	r2, [pc, #112]	@ (800eda4 <SGP_GetMeasurementValues+0x264>)
 800ed32:	4b14      	ldr	r3, [pc, #80]	@ (800ed84 <SGP_GetMeasurementValues+0x244>)
 800ed34:	0019      	movs	r1, r3
 800ed36:	2003      	movs	r0, #3
 800ed38:	f002 fd8e 	bl	8011858 <CreateLine>
    SGP_StartMeasurement();
 800ed3c:	f7ff fe90 	bl	800ea60 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800ed40:	4b04      	ldr	r3, [pc, #16]	@ (800ed54 <SGP_GetMeasurementValues+0x214>)
 800ed42:	2200      	movs	r2, #0
 800ed44:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800ed46:	2300      	movs	r3, #0
}
 800ed48:	0018      	movs	r0, r3
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	b005      	add	sp, #20
 800ed4e:	bd90      	pop	{r4, r7, pc}
 800ed50:	20000edc 	.word	0x20000edc
 800ed54:	20000f89 	.word	0x20000f89
 800ed58:	20000f88 	.word	0x20000f88
 800ed5c:	200000b0 	.word	0x200000b0
 800ed60:	200000c4 	.word	0x200000c4
 800ed64:	200000a8 	.word	0x200000a8
 800ed68:	20000edd 	.word	0x20000edd
 800ed6c:	20000ecc 	.word	0x20000ecc
 800ed70:	0802a7c0 	.word	0x0802a7c0
 800ed74:	0802a7e8 	.word	0x0802a7e8
 800ed78:	0802a7ec 	.word	0x0802a7ec
 800ed7c:	0802a80c 	.word	0x0802a80c
 800ed80:	0802a810 	.word	0x0802a810
 800ed84:	0802a830 	.word	0x0802a830
 800ed88:	200000c0 	.word	0x200000c0
 800ed8c:	20000ed5 	.word	0x20000ed5
 800ed90:	200000ba 	.word	0x200000ba
 800ed94:	20000ee0 	.word	0x20000ee0
 800ed98:	20000ed6 	.word	0x20000ed6
 800ed9c:	0802a834 	.word	0x0802a834
 800eda0:	0802a850 	.word	0x0802a850
 800eda4:	0802a86c 	.word	0x0802a86c

0800eda8 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800edae:	4b1a      	ldr	r3, [pc, #104]	@ (800ee18 <SGP_DeviceConnected+0x70>)
 800edb0:	2202      	movs	r2, #2
 800edb2:	0019      	movs	r1, r3
 800edb4:	2059      	movs	r0, #89	@ 0x59
 800edb6:	f7ff fde7 	bl	800e988 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800edba:	2001      	movs	r0, #1
 800edbc:	f003 f9a2 	bl	8012104 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800edc0:	4b16      	ldr	r3, [pc, #88]	@ (800ee1c <SGP_DeviceConnected+0x74>)
 800edc2:	2209      	movs	r2, #9
 800edc4:	0019      	movs	r1, r3
 800edc6:	2059      	movs	r0, #89	@ 0x59
 800edc8:	f7ff fdc0 	bl	800e94c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800edcc:	1dfb      	adds	r3, r7, #7
 800edce:	2200      	movs	r2, #0
 800edd0:	701a      	strb	r2, [r3, #0]
 800edd2:	e011      	b.n	800edf8 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800edd4:	1dfb      	adds	r3, r7, #7
 800edd6:	7818      	ldrb	r0, [r3, #0]
 800edd8:	1dfb      	adds	r3, r7, #7
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	4a0f      	ldr	r2, [pc, #60]	@ (800ee1c <SGP_DeviceConnected+0x74>)
 800edde:	5cd3      	ldrb	r3, [r2, r3]
 800ede0:	4a0f      	ldr	r2, [pc, #60]	@ (800ee20 <SGP_DeviceConnected+0x78>)
 800ede2:	4910      	ldr	r1, [pc, #64]	@ (800ee24 <SGP_DeviceConnected+0x7c>)
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	0003      	movs	r3, r0
 800ede8:	2002      	movs	r0, #2
 800edea:	f002 fd35 	bl	8011858 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800edee:	1dfb      	adds	r3, r7, #7
 800edf0:	781a      	ldrb	r2, [r3, #0]
 800edf2:	1dfb      	adds	r3, r7, #7
 800edf4:	3201      	adds	r2, #1
 800edf6:	701a      	strb	r2, [r3, #0]
 800edf8:	1dfb      	adds	r3, r7, #7
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	2b08      	cmp	r3, #8
 800edfe:	d9e9      	bls.n	800edd4 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800ee00:	4b06      	ldr	r3, [pc, #24]	@ (800ee1c <SGP_DeviceConnected+0x74>)
 800ee02:	2203      	movs	r2, #3
 800ee04:	2109      	movs	r1, #9
 800ee06:	0018      	movs	r0, r3
 800ee08:	f000 f80e 	bl	800ee28 <CheckCRC>
 800ee0c:	0003      	movs	r3, r0
}
 800ee0e:	0018      	movs	r0, r3
 800ee10:	46bd      	mov	sp, r7
 800ee12:	b002      	add	sp, #8
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	46c0      	nop			@ (mov r8, r8)
 800ee18:	200000a4 	.word	0x200000a4
 800ee1c:	20000ecc 	.word	0x20000ecc
 800ee20:	0802a88c 	.word	0x0802a88c
 800ee24:	0802a80c 	.word	0x0802a80c

0800ee28 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800ee28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee2a:	b08f      	sub	sp, #60	@ 0x3c
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee30:	0008      	movs	r0, r1
 800ee32:	0011      	movs	r1, r2
 800ee34:	2323      	movs	r3, #35	@ 0x23
 800ee36:	18fb      	adds	r3, r7, r3
 800ee38:	1c02      	adds	r2, r0, #0
 800ee3a:	701a      	strb	r2, [r3, #0]
 800ee3c:	2322      	movs	r3, #34	@ 0x22
 800ee3e:	18fb      	adds	r3, r7, r3
 800ee40:	1c0a      	adds	r2, r1, #0
 800ee42:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800ee44:	2317      	movs	r3, #23
 800ee46:	2220      	movs	r2, #32
 800ee48:	189b      	adds	r3, r3, r2
 800ee4a:	19db      	adds	r3, r3, r7
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	701a      	strb	r2, [r3, #0]
 800ee50:	e09f      	b.n	800ef92 <CheckCRC+0x16a>
 800ee52:	466b      	mov	r3, sp
 800ee54:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800ee56:	2322      	movs	r3, #34	@ 0x22
 800ee58:	18fb      	adds	r3, r7, r3
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	001a      	movs	r2, r3
 800ee5e:	3a01      	subs	r2, #1
 800ee60:	633a      	str	r2, [r7, #48]	@ 0x30
 800ee62:	60bb      	str	r3, [r7, #8]
 800ee64:	2200      	movs	r2, #0
 800ee66:	60fa      	str	r2, [r7, #12]
 800ee68:	68b8      	ldr	r0, [r7, #8]
 800ee6a:	68f9      	ldr	r1, [r7, #12]
 800ee6c:	0002      	movs	r2, r0
 800ee6e:	0f52      	lsrs	r2, r2, #29
 800ee70:	000c      	movs	r4, r1
 800ee72:	00e4      	lsls	r4, r4, #3
 800ee74:	61fc      	str	r4, [r7, #28]
 800ee76:	69fc      	ldr	r4, [r7, #28]
 800ee78:	4314      	orrs	r4, r2
 800ee7a:	61fc      	str	r4, [r7, #28]
 800ee7c:	0002      	movs	r2, r0
 800ee7e:	00d2      	lsls	r2, r2, #3
 800ee80:	61ba      	str	r2, [r7, #24]
 800ee82:	603b      	str	r3, [r7, #0]
 800ee84:	2200      	movs	r2, #0
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	6838      	ldr	r0, [r7, #0]
 800ee8a:	6879      	ldr	r1, [r7, #4]
 800ee8c:	0002      	movs	r2, r0
 800ee8e:	0f52      	lsrs	r2, r2, #29
 800ee90:	000c      	movs	r4, r1
 800ee92:	00e4      	lsls	r4, r4, #3
 800ee94:	617c      	str	r4, [r7, #20]
 800ee96:	697c      	ldr	r4, [r7, #20]
 800ee98:	4314      	orrs	r4, r2
 800ee9a:	617c      	str	r4, [r7, #20]
 800ee9c:	0002      	movs	r2, r0
 800ee9e:	00d2      	lsls	r2, r2, #3
 800eea0:	613a      	str	r2, [r7, #16]
 800eea2:	3307      	adds	r3, #7
 800eea4:	08db      	lsrs	r3, r3, #3
 800eea6:	00db      	lsls	r3, r3, #3
 800eea8:	466a      	mov	r2, sp
 800eeaa:	1ad3      	subs	r3, r2, r3
 800eeac:	469d      	mov	sp, r3
 800eeae:	466b      	mov	r3, sp
 800eeb0:	3300      	adds	r3, #0
 800eeb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800eeb4:	2316      	movs	r3, #22
 800eeb6:	2220      	movs	r2, #32
 800eeb8:	189b      	adds	r3, r3, r2
 800eeba:	19db      	adds	r3, r3, r7
 800eebc:	2200      	movs	r2, #0
 800eebe:	701a      	strb	r2, [r3, #0]
 800eec0:	e01e      	b.n	800ef00 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800eec2:	2317      	movs	r3, #23
 800eec4:	2220      	movs	r2, #32
 800eec6:	189b      	adds	r3, r3, r2
 800eec8:	19db      	adds	r3, r3, r7
 800eeca:	781a      	ldrb	r2, [r3, #0]
 800eecc:	2116      	movs	r1, #22
 800eece:	2320      	movs	r3, #32
 800eed0:	18cb      	adds	r3, r1, r3
 800eed2:	19db      	adds	r3, r3, r7
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	18d3      	adds	r3, r2, r3
 800eed8:	001a      	movs	r2, r3
 800eeda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eedc:	189a      	adds	r2, r3, r2
 800eede:	0008      	movs	r0, r1
 800eee0:	2320      	movs	r3, #32
 800eee2:	18cb      	adds	r3, r1, r3
 800eee4:	19db      	adds	r3, r3, r7
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	7811      	ldrb	r1, [r2, #0]
 800eeea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eeec:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800eeee:	2320      	movs	r3, #32
 800eef0:	18c3      	adds	r3, r0, r3
 800eef2:	19db      	adds	r3, r3, r7
 800eef4:	781a      	ldrb	r2, [r3, #0]
 800eef6:	2320      	movs	r3, #32
 800eef8:	18c3      	adds	r3, r0, r3
 800eefa:	19db      	adds	r3, r3, r7
 800eefc:	3201      	adds	r2, #1
 800eefe:	701a      	strb	r2, [r3, #0]
 800ef00:	2316      	movs	r3, #22
 800ef02:	2220      	movs	r2, #32
 800ef04:	189b      	adds	r3, r3, r2
 800ef06:	19da      	adds	r2, r3, r7
 800ef08:	2322      	movs	r3, #34	@ 0x22
 800ef0a:	18fb      	adds	r3, r7, r3
 800ef0c:	7812      	ldrb	r2, [r2, #0]
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d3d6      	bcc.n	800eec2 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800ef14:	2417      	movs	r4, #23
 800ef16:	2320      	movs	r3, #32
 800ef18:	18e3      	adds	r3, r4, r3
 800ef1a:	19db      	adds	r3, r3, r7
 800ef1c:	781a      	ldrb	r2, [r3, #0]
 800ef1e:	2322      	movs	r3, #34	@ 0x22
 800ef20:	18fb      	adds	r3, r7, r3
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	18d3      	adds	r3, r2, r3
 800ef26:	3b01      	subs	r3, #1
 800ef28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef2a:	18d2      	adds	r2, r2, r3
 800ef2c:	250b      	movs	r5, #11
 800ef2e:	2320      	movs	r3, #32
 800ef30:	18eb      	adds	r3, r5, r3
 800ef32:	19db      	adds	r3, r3, r7
 800ef34:	7812      	ldrb	r2, [r2, #0]
 800ef36:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800ef38:	2322      	movs	r3, #34	@ 0x22
 800ef3a:	18fb      	adds	r3, r7, r3
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	b2da      	uxtb	r2, r3
 800ef42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef44:	0011      	movs	r1, r2
 800ef46:	0018      	movs	r0, r3
 800ef48:	f000 f838 	bl	800efbc <CalculateCRC>
 800ef4c:	0003      	movs	r3, r0
 800ef4e:	001a      	movs	r2, r3
 800ef50:	2320      	movs	r3, #32
 800ef52:	18eb      	adds	r3, r5, r3
 800ef54:	19db      	adds	r3, r3, r7
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d00c      	beq.n	800ef76 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800ef5c:	2320      	movs	r3, #32
 800ef5e:	18e3      	adds	r3, r4, r3
 800ef60:	19db      	adds	r3, r3, r7
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	3301      	adds	r3, #1
 800ef66:	4a13      	ldr	r2, [pc, #76]	@ (800efb4 <CheckCRC+0x18c>)
 800ef68:	4913      	ldr	r1, [pc, #76]	@ (800efb8 <CheckCRC+0x190>)
 800ef6a:	2001      	movs	r0, #1
 800ef6c:	f002 fc74 	bl	8011858 <CreateLine>
      return false;
 800ef70:	2300      	movs	r3, #0
 800ef72:	46b5      	mov	sp, r6
 800ef74:	e019      	b.n	800efaa <CheckCRC+0x182>
 800ef76:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800ef78:	2217      	movs	r2, #23
 800ef7a:	2320      	movs	r3, #32
 800ef7c:	18d3      	adds	r3, r2, r3
 800ef7e:	19db      	adds	r3, r3, r7
 800ef80:	2120      	movs	r1, #32
 800ef82:	1852      	adds	r2, r2, r1
 800ef84:	19d1      	adds	r1, r2, r7
 800ef86:	2222      	movs	r2, #34	@ 0x22
 800ef88:	18ba      	adds	r2, r7, r2
 800ef8a:	7809      	ldrb	r1, [r1, #0]
 800ef8c:	7812      	ldrb	r2, [r2, #0]
 800ef8e:	188a      	adds	r2, r1, r2
 800ef90:	701a      	strb	r2, [r3, #0]
 800ef92:	2317      	movs	r3, #23
 800ef94:	2220      	movs	r2, #32
 800ef96:	189b      	adds	r3, r3, r2
 800ef98:	19da      	adds	r2, r3, r7
 800ef9a:	2323      	movs	r3, #35	@ 0x23
 800ef9c:	18fb      	adds	r3, r7, r3
 800ef9e:	7812      	ldrb	r2, [r2, #0]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d200      	bcs.n	800efa8 <CheckCRC+0x180>
 800efa6:	e754      	b.n	800ee52 <CheckCRC+0x2a>
    }
  }
  return true;
 800efa8:	2301      	movs	r3, #1
}
 800efaa:	0018      	movs	r0, r3
 800efac:	46bd      	mov	sp, r7
 800efae:	b00f      	add	sp, #60	@ 0x3c
 800efb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efb2:	46c0      	nop			@ (mov r8, r8)
 800efb4:	0802a8ac 	.word	0x0802a8ac
 800efb8:	0802a7e8 	.word	0x0802a7e8

0800efbc <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	000a      	movs	r2, r1
 800efc6:	1cfb      	adds	r3, r7, #3
 800efc8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800efca:	230f      	movs	r3, #15
 800efcc:	18fb      	adds	r3, r7, r3
 800efce:	22ff      	movs	r2, #255	@ 0xff
 800efd0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800efd2:	230e      	movs	r3, #14
 800efd4:	18fb      	adds	r3, r7, r3
 800efd6:	2200      	movs	r2, #0
 800efd8:	701a      	strb	r2, [r3, #0]
 800efda:	e037      	b.n	800f04c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800efdc:	230e      	movs	r3, #14
 800efde:	18fb      	adds	r3, r7, r3
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	18d3      	adds	r3, r2, r3
 800efe6:	7819      	ldrb	r1, [r3, #0]
 800efe8:	220f      	movs	r2, #15
 800efea:	18bb      	adds	r3, r7, r2
 800efec:	18ba      	adds	r2, r7, r2
 800efee:	7812      	ldrb	r2, [r2, #0]
 800eff0:	404a      	eors	r2, r1
 800eff2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800eff4:	230d      	movs	r3, #13
 800eff6:	18fb      	adds	r3, r7, r3
 800eff8:	2200      	movs	r2, #0
 800effa:	701a      	strb	r2, [r3, #0]
 800effc:	e01b      	b.n	800f036 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800effe:	210f      	movs	r1, #15
 800f000:	187b      	adds	r3, r7, r1
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	b25b      	sxtb	r3, r3
 800f006:	2b00      	cmp	r3, #0
 800f008:	da09      	bge.n	800f01e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800f00a:	187b      	adds	r3, r7, r1
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	005b      	lsls	r3, r3, #1
 800f010:	b25b      	sxtb	r3, r3
 800f012:	2231      	movs	r2, #49	@ 0x31
 800f014:	4053      	eors	r3, r2
 800f016:	b25a      	sxtb	r2, r3
 800f018:	187b      	adds	r3, r7, r1
 800f01a:	701a      	strb	r2, [r3, #0]
 800f01c:	e005      	b.n	800f02a <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800f01e:	230f      	movs	r3, #15
 800f020:	18fa      	adds	r2, r7, r3
 800f022:	18fb      	adds	r3, r7, r3
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	18db      	adds	r3, r3, r3
 800f028:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800f02a:	210d      	movs	r1, #13
 800f02c:	187b      	adds	r3, r7, r1
 800f02e:	781a      	ldrb	r2, [r3, #0]
 800f030:	187b      	adds	r3, r7, r1
 800f032:	3201      	adds	r2, #1
 800f034:	701a      	strb	r2, [r3, #0]
 800f036:	230d      	movs	r3, #13
 800f038:	18fb      	adds	r3, r7, r3
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	2b07      	cmp	r3, #7
 800f03e:	d9de      	bls.n	800effe <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800f040:	210e      	movs	r1, #14
 800f042:	187b      	adds	r3, r7, r1
 800f044:	781a      	ldrb	r2, [r3, #0]
 800f046:	187b      	adds	r3, r7, r1
 800f048:	3201      	adds	r2, #1
 800f04a:	701a      	strb	r2, [r3, #0]
 800f04c:	230e      	movs	r3, #14
 800f04e:	18fa      	adds	r2, r7, r3
 800f050:	1cfb      	adds	r3, r7, #3
 800f052:	7812      	ldrb	r2, [r2, #0]
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	429a      	cmp	r2, r3
 800f058:	d3c0      	bcc.n	800efdc <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800f05a:	230f      	movs	r3, #15
 800f05c:	18fb      	adds	r3, r7, r3
 800f05e:	781b      	ldrb	r3, [r3, #0]
}
 800f060:	0018      	movs	r0, r3
 800f062:	46bd      	mov	sp, r7
 800f064:	b004      	add	sp, #16
 800f066:	bd80      	pop	{r7, pc}

0800f068 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4936      	ldr	r1, [pc, #216]	@ (800f150 <SGP_SetHT+0xe8>)
 800f078:	1c18      	adds	r0, r3, #0
 800f07a:	f7f1 fc21 	bl	80008c0 <__aeabi_fadd>
 800f07e:	1c03      	adds	r3, r0, #0
 800f080:	4934      	ldr	r1, [pc, #208]	@ (800f154 <SGP_SetHT+0xec>)
 800f082:	1c18      	adds	r0, r3, #0
 800f084:	f7f1 fda6 	bl	8000bd4 <__aeabi_fdiv>
 800f088:	1c03      	adds	r3, r0, #0
 800f08a:	4933      	ldr	r1, [pc, #204]	@ (800f158 <SGP_SetHT+0xf0>)
 800f08c:	1c18      	adds	r0, r3, #0
 800f08e:	f7f1 ff87 	bl	8000fa0 <__aeabi_fmul>
 800f092:	1c03      	adds	r3, r0, #0
 800f094:	1c18      	adds	r0, r3, #0
 800f096:	f7f1 fac1 	bl	800061c <__aeabi_f2uiz>
 800f09a:	0003      	movs	r3, r0
 800f09c:	b29a      	uxth	r2, r3
 800f09e:	4b2f      	ldr	r3, [pc, #188]	@ (800f15c <SGP_SetHT+0xf4>)
 800f0a0:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	492e      	ldr	r1, [pc, #184]	@ (800f160 <SGP_SetHT+0xf8>)
 800f0a8:	1c18      	adds	r0, r3, #0
 800f0aa:	f7f1 fd93 	bl	8000bd4 <__aeabi_fdiv>
 800f0ae:	1c03      	adds	r3, r0, #0
 800f0b0:	4929      	ldr	r1, [pc, #164]	@ (800f158 <SGP_SetHT+0xf0>)
 800f0b2:	1c18      	adds	r0, r3, #0
 800f0b4:	f7f1 ff74 	bl	8000fa0 <__aeabi_fmul>
 800f0b8:	1c03      	adds	r3, r0, #0
 800f0ba:	1c18      	adds	r0, r3, #0
 800f0bc:	f7f1 faae 	bl	800061c <__aeabi_f2uiz>
 800f0c0:	0003      	movs	r3, r0
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	4b27      	ldr	r3, [pc, #156]	@ (800f164 <SGP_SetHT+0xfc>)
 800f0c6:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800f0c8:	4b26      	ldr	r3, [pc, #152]	@ (800f164 <SGP_SetHT+0xfc>)
 800f0ca:	881b      	ldrh	r3, [r3, #0]
 800f0cc:	0a1b      	lsrs	r3, r3, #8
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	b2da      	uxtb	r2, r3
 800f0d2:	4b25      	ldr	r3, [pc, #148]	@ (800f168 <SGP_SetHT+0x100>)
 800f0d4:	709a      	strb	r2, [r3, #2]
 800f0d6:	4b24      	ldr	r3, [pc, #144]	@ (800f168 <SGP_SetHT+0x100>)
 800f0d8:	789a      	ldrb	r2, [r3, #2]
 800f0da:	210c      	movs	r1, #12
 800f0dc:	187b      	adds	r3, r7, r1
 800f0de:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800f0e0:	4b20      	ldr	r3, [pc, #128]	@ (800f164 <SGP_SetHT+0xfc>)
 800f0e2:	881b      	ldrh	r3, [r3, #0]
 800f0e4:	b2da      	uxtb	r2, r3
 800f0e6:	4b20      	ldr	r3, [pc, #128]	@ (800f168 <SGP_SetHT+0x100>)
 800f0e8:	70da      	strb	r2, [r3, #3]
 800f0ea:	4b1f      	ldr	r3, [pc, #124]	@ (800f168 <SGP_SetHT+0x100>)
 800f0ec:	78da      	ldrb	r2, [r3, #3]
 800f0ee:	187b      	adds	r3, r7, r1
 800f0f0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800f0f2:	187b      	adds	r3, r7, r1
 800f0f4:	2102      	movs	r1, #2
 800f0f6:	0018      	movs	r0, r3
 800f0f8:	f7ff ff60 	bl	800efbc <CalculateCRC>
 800f0fc:	0003      	movs	r3, r0
 800f0fe:	001a      	movs	r2, r3
 800f100:	4b19      	ldr	r3, [pc, #100]	@ (800f168 <SGP_SetHT+0x100>)
 800f102:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800f104:	4b15      	ldr	r3, [pc, #84]	@ (800f15c <SGP_SetHT+0xf4>)
 800f106:	881b      	ldrh	r3, [r3, #0]
 800f108:	0a1b      	lsrs	r3, r3, #8
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	b2da      	uxtb	r2, r3
 800f10e:	4b16      	ldr	r3, [pc, #88]	@ (800f168 <SGP_SetHT+0x100>)
 800f110:	715a      	strb	r2, [r3, #5]
 800f112:	4b15      	ldr	r3, [pc, #84]	@ (800f168 <SGP_SetHT+0x100>)
 800f114:	795a      	ldrb	r2, [r3, #5]
 800f116:	2108      	movs	r1, #8
 800f118:	187b      	adds	r3, r7, r1
 800f11a:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800f11c:	4b0f      	ldr	r3, [pc, #60]	@ (800f15c <SGP_SetHT+0xf4>)
 800f11e:	881b      	ldrh	r3, [r3, #0]
 800f120:	b2da      	uxtb	r2, r3
 800f122:	4b11      	ldr	r3, [pc, #68]	@ (800f168 <SGP_SetHT+0x100>)
 800f124:	719a      	strb	r2, [r3, #6]
 800f126:	4b10      	ldr	r3, [pc, #64]	@ (800f168 <SGP_SetHT+0x100>)
 800f128:	799a      	ldrb	r2, [r3, #6]
 800f12a:	187b      	adds	r3, r7, r1
 800f12c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800f12e:	187b      	adds	r3, r7, r1
 800f130:	2102      	movs	r1, #2
 800f132:	0018      	movs	r0, r3
 800f134:	f7ff ff42 	bl	800efbc <CalculateCRC>
 800f138:	0003      	movs	r3, r0
 800f13a:	001a      	movs	r2, r3
 800f13c:	4b0a      	ldr	r3, [pc, #40]	@ (800f168 <SGP_SetHT+0x100>)
 800f13e:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800f140:	4b0a      	ldr	r3, [pc, #40]	@ (800f16c <SGP_SetHT+0x104>)
 800f142:	2201      	movs	r2, #1
 800f144:	701a      	strb	r2, [r3, #0]
}
 800f146:	46c0      	nop			@ (mov r8, r8)
 800f148:	46bd      	mov	sp, r7
 800f14a:	b004      	add	sp, #16
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	46c0      	nop			@ (mov r8, r8)
 800f150:	42340000 	.word	0x42340000
 800f154:	432f0000 	.word	0x432f0000
 800f158:	477fff00 	.word	0x477fff00
 800f15c:	20000f86 	.word	0x20000f86
 800f160:	42c80000 	.word	0x42c80000
 800f164:	20000f84 	.word	0x20000f84
 800f168:	200000b0 	.word	0x200000b0
 800f16c:	20000f88 	.word	0x20000f88

0800f170 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800f170:	b580      	push	{r7, lr}
 800f172:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800f174:	4a09      	ldr	r2, [pc, #36]	@ (800f19c <SGP_SoftReset+0x2c>)
 800f176:	4b0a      	ldr	r3, [pc, #40]	@ (800f1a0 <SGP_SoftReset+0x30>)
 800f178:	0019      	movs	r1, r3
 800f17a:	2003      	movs	r0, #3
 800f17c:	f002 fb6c 	bl	8011858 <CreateLine>
  SGP_TurnHeaterOff();
 800f180:	f7ff fcd0 	bl	800eb24 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800f184:	200a      	movs	r0, #10
 800f186:	f002 ffbd 	bl	8012104 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800f18a:	4b06      	ldr	r3, [pc, #24]	@ (800f1a4 <SGP_SoftReset+0x34>)
 800f18c:	2202      	movs	r2, #2
 800f18e:	0019      	movs	r1, r3
 800f190:	2059      	movs	r0, #89	@ 0x59
 800f192:	f7ff fbf9 	bl	800e988 <WriteRegister>
}
 800f196:	46c0      	nop			@ (mov r8, r8)
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	0802a954 	.word	0x0802a954
 800f1a0:	0802a830 	.word	0x0802a830
 800f1a4:	200000b8 	.word	0x200000b8

0800f1a8 <ResetVOCresult>:

void ResetVOCresult(void) {
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800f1ac:	4b02      	ldr	r3, [pc, #8]	@ (800f1b8 <ResetVOCresult+0x10>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	601a      	str	r2, [r3, #0]
}
 800f1b2:	46c0      	nop			@ (mov r8, r8)
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}
 800f1b8:	20000f8c 	.word	0x20000f8c

0800f1bc <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800f1c0:	4b42      	ldr	r3, [pc, #264]	@ (800f2cc <SGP_Upkeep+0x110>)
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	2b07      	cmp	r3, #7
 800f1c6:	d869      	bhi.n	800f29c <SGP_Upkeep+0xe0>
 800f1c8:	009a      	lsls	r2, r3, #2
 800f1ca:	4b41      	ldr	r3, [pc, #260]	@ (800f2d0 <SGP_Upkeep+0x114>)
 800f1cc:	18d3      	adds	r3, r2, r3
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800f1d2:	4a40      	ldr	r2, [pc, #256]	@ (800f2d4 <SGP_Upkeep+0x118>)
 800f1d4:	4b40      	ldr	r3, [pc, #256]	@ (800f2d8 <SGP_Upkeep+0x11c>)
 800f1d6:	0019      	movs	r1, r3
 800f1d8:	2003      	movs	r0, #3
 800f1da:	f002 fb3d 	bl	8011858 <CreateLine>
    break;
 800f1de:	e070      	b.n	800f2c2 <SGP_Upkeep+0x106>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800f1e0:	f7ff ffe2 	bl	800f1a8 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800f1e4:	4b39      	ldr	r3, [pc, #228]	@ (800f2cc <SGP_Upkeep+0x110>)
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	701a      	strb	r2, [r3, #0]
    break;
 800f1ea:	e06a      	b.n	800f2c2 <SGP_Upkeep+0x106>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800f1ec:	f7fc fca0 	bl	800bb30 <getSensorLock>
 800f1f0:	1e03      	subs	r3, r0, #0
 800f1f2:	d15f      	bne.n	800f2b4 <SGP_Upkeep+0xf8>
      break;
    }
    setSensorLock(SGP40);
 800f1f4:	2002      	movs	r0, #2
 800f1f6:	f7fc fc8b 	bl	800bb10 <setSensorLock>
    SetMeasurementIndicator();
 800f1fa:	f001 f977 	bl	80104ec <SetMeasurementIndicator>
    SGP_StartMeasurement();
 800f1fe:	f7ff fc2f 	bl	800ea60 <SGP_StartMeasurement>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800f202:	4b32      	ldr	r3, [pc, #200]	@ (800f2cc <SGP_Upkeep+0x110>)
 800f204:	2202      	movs	r2, #2
 800f206:	701a      	strb	r2, [r3, #0]
    break;
 800f208:	e05b      	b.n	800f2c2 <SGP_Upkeep+0x106>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800f20a:	4b34      	ldr	r3, [pc, #208]	@ (800f2dc <SGP_Upkeep+0x120>)
 800f20c:	0018      	movs	r0, r3
 800f20e:	f7ff fc97 	bl	800eb40 <SGP_GetMeasurementValues>
 800f212:	1e03      	subs	r3, r0, #0
 800f214:	d050      	beq.n	800f2b8 <SGP_Upkeep+0xfc>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800f216:	4b2d      	ldr	r3, [pc, #180]	@ (800f2cc <SGP_Upkeep+0x110>)
 800f218:	2203      	movs	r2, #3
 800f21a:	701a      	strb	r2, [r3, #0]
      setSensorLock(FREE);
 800f21c:	2000      	movs	r0, #0
 800f21e:	f7fc fc77 	bl	800bb10 <setSensorLock>
    }
    break;
 800f222:	e049      	b.n	800f2b8 <SGP_Upkeep+0xfc>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800f224:	4b2d      	ldr	r3, [pc, #180]	@ (800f2dc <SGP_Upkeep+0x120>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	b29b      	uxth	r3, r3
 800f22a:	0018      	movs	r0, r3
 800f22c:	f7f5 f9b8 	bl	80045a0 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800f230:	4b26      	ldr	r3, [pc, #152]	@ (800f2cc <SGP_Upkeep+0x110>)
 800f232:	2206      	movs	r2, #6
 800f234:	701a      	strb	r2, [r3, #0]
    break;
 800f236:	e044      	b.n	800f2c2 <SGP_Upkeep+0x106>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800f238:	4b24      	ldr	r3, [pc, #144]	@ (800f2cc <SGP_Upkeep+0x110>)
 800f23a:	2207      	movs	r2, #7
 800f23c:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800f23e:	4b28      	ldr	r3, [pc, #160]	@ (800f2e0 <SGP_Upkeep+0x124>)
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	2b01      	cmp	r3, #1
 800f244:	d112      	bne.n	800f26c <SGP_Upkeep+0xb0>
 800f246:	4b27      	ldr	r3, [pc, #156]	@ (800f2e4 <SGP_Upkeep+0x128>)
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	2201      	movs	r2, #1
 800f24c:	4053      	eors	r3, r2
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00b      	beq.n	800f26c <SGP_Upkeep+0xb0>
      // During startup take 12 samples
      if (sgpinitdone) {
 800f254:	4b24      	ldr	r3, [pc, #144]	@ (800f2e8 <SGP_Upkeep+0x12c>)
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d004      	beq.n	800f266 <SGP_Upkeep+0xaa>
        SGP_SoftReset();
 800f25c:	f7ff ff88 	bl	800f170 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800f260:	2000      	movs	r0, #0
 800f262:	f7fc f8d1 	bl	800b408 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800f266:	4b20      	ldr	r3, [pc, #128]	@ (800f2e8 <SGP_Upkeep+0x12c>)
 800f268:	2201      	movs	r2, #1
 800f26a:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800f26c:	f002 ff40 	bl	80120f0 <HAL_GetTick>
 800f270:	0003      	movs	r3, r0
 800f272:	22c8      	movs	r2, #200	@ 0xc8
 800f274:	0092      	lsls	r2, r2, #2
 800f276:	189a      	adds	r2, r3, r2
 800f278:	4b1c      	ldr	r3, [pc, #112]	@ (800f2ec <SGP_Upkeep+0x130>)
 800f27a:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800f27c:	f001 f94e 	bl	801051c <ResetMeasurementIndicator>
  break;
 800f280:	e01f      	b.n	800f2c2 <SGP_Upkeep+0x106>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800f282:	4b1a      	ldr	r3, [pc, #104]	@ (800f2ec <SGP_Upkeep+0x130>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	0018      	movs	r0, r3
 800f288:	f002 fa90 	bl	80117ac <TimestampIsReached>
 800f28c:	1e03      	subs	r3, r0, #0
 800f28e:	d015      	beq.n	800f2bc <SGP_Upkeep+0x100>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800f290:	f7ff fbce 	bl	800ea30 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800f294:	4b0d      	ldr	r3, [pc, #52]	@ (800f2cc <SGP_Upkeep+0x110>)
 800f296:	2200      	movs	r2, #0
 800f298:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f29a:	e00f      	b.n	800f2bc <SGP_Upkeep+0x100>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800f29c:	4b0b      	ldr	r3, [pc, #44]	@ (800f2cc <SGP_Upkeep+0x110>)
 800f29e:	2200      	movs	r2, #0
 800f2a0:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 800f2a2:	f7fc fc45 	bl	800bb30 <getSensorLock>
 800f2a6:	0003      	movs	r3, r0
 800f2a8:	2b02      	cmp	r3, #2
 800f2aa:	d109      	bne.n	800f2c0 <SGP_Upkeep+0x104>
      setSensorLock(FREE);
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	f7fc fc2f 	bl	800bb10 <setSensorLock>
    }
    break;
 800f2b2:	e005      	b.n	800f2c0 <SGP_Upkeep+0x104>
      break;
 800f2b4:	46c0      	nop			@ (mov r8, r8)
 800f2b6:	e004      	b.n	800f2c2 <SGP_Upkeep+0x106>
    break;
 800f2b8:	46c0      	nop			@ (mov r8, r8)
 800f2ba:	e002      	b.n	800f2c2 <SGP_Upkeep+0x106>
    break;
 800f2bc:	46c0      	nop			@ (mov r8, r8)
 800f2be:	e000      	b.n	800f2c2 <SGP_Upkeep+0x106>
    break;
 800f2c0:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800f2c2:	4b02      	ldr	r3, [pc, #8]	@ (800f2cc <SGP_Upkeep+0x110>)
 800f2c4:	781b      	ldrb	r3, [r3, #0]
}
 800f2c6:	0018      	movs	r0, r3
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	20000f90 	.word	0x20000f90
 800f2d0:	0802b130 	.word	0x0802b130
 800f2d4:	0802a96c 	.word	0x0802a96c
 800f2d8:	0802a830 	.word	0x0802a830
 800f2dc:	20000f8c 	.word	0x20000f8c
 800f2e0:	20000ed6 	.word	0x20000ed6
 800f2e4:	20001e2d 	.word	0x20001e2d
 800f2e8:	20000ec0 	.word	0x20000ec0
 800f2ec:	20000ed8 	.word	0x20000ed8

0800f2f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	0002      	movs	r2, r0
 800f2f8:	1dfb      	adds	r3, r7, #7
 800f2fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f2fc:	1dfb      	adds	r3, r7, #7
 800f2fe:	781b      	ldrb	r3, [r3, #0]
 800f300:	2b7f      	cmp	r3, #127	@ 0x7f
 800f302:	d809      	bhi.n	800f318 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f304:	1dfb      	adds	r3, r7, #7
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	001a      	movs	r2, r3
 800f30a:	231f      	movs	r3, #31
 800f30c:	401a      	ands	r2, r3
 800f30e:	4b04      	ldr	r3, [pc, #16]	@ (800f320 <__NVIC_EnableIRQ+0x30>)
 800f310:	2101      	movs	r1, #1
 800f312:	4091      	lsls	r1, r2
 800f314:	000a      	movs	r2, r1
 800f316:	601a      	str	r2, [r3, #0]
  }
}
 800f318:	46c0      	nop			@ (mov r8, r8)
 800f31a:	46bd      	mov	sp, r7
 800f31c:	b002      	add	sp, #8
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	e000e100 	.word	0xe000e100

0800f324 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	0002      	movs	r2, r0
 800f32c:	1dfb      	adds	r3, r7, #7
 800f32e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f330:	1dfb      	adds	r3, r7, #7
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	2b7f      	cmp	r3, #127	@ 0x7f
 800f336:	d810      	bhi.n	800f35a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f338:	1dfb      	adds	r3, r7, #7
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	001a      	movs	r2, r3
 800f33e:	231f      	movs	r3, #31
 800f340:	4013      	ands	r3, r2
 800f342:	4908      	ldr	r1, [pc, #32]	@ (800f364 <__NVIC_DisableIRQ+0x40>)
 800f344:	2201      	movs	r2, #1
 800f346:	409a      	lsls	r2, r3
 800f348:	0013      	movs	r3, r2
 800f34a:	2280      	movs	r2, #128	@ 0x80
 800f34c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800f34e:	f3bf 8f4f 	dsb	sy
}
 800f352:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800f354:	f3bf 8f6f 	isb	sy
}
 800f358:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800f35a:	46c0      	nop			@ (mov r8, r8)
 800f35c:	46bd      	mov	sp, r7
 800f35e:	b002      	add	sp, #8
 800f360:	bd80      	pop	{r7, pc}
 800f362:	46c0      	nop			@ (mov r8, r8)
 800f364:	e000e100 	.word	0xe000e100

0800f368 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800f368:	b5b0      	push	{r4, r5, r7, lr}
 800f36a:	b088      	sub	sp, #32
 800f36c:	af02      	add	r7, sp, #8
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	0008      	movs	r0, r1
 800f372:	0011      	movs	r1, r2
 800f374:	1cfb      	adds	r3, r7, #3
 800f376:	1c02      	adds	r2, r0, #0
 800f378:	701a      	strb	r2, [r3, #0]
 800f37a:	1cbb      	adds	r3, r7, #2
 800f37c:	1c0a      	adds	r2, r1, #0
 800f37e:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800f380:	4b5b      	ldr	r3, [pc, #364]	@ (800f4f0 <getSoundData+0x188>)
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	b2db      	uxtb	r3, r3
 800f386:	2201      	movs	r2, #1
 800f388:	4053      	eors	r3, r2
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d107      	bne.n	800f3a0 <getSoundData+0x38>
 800f390:	4b58      	ldr	r3, [pc, #352]	@ (800f4f4 <getSoundData+0x18c>)
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	b2db      	uxtb	r3, r3
 800f396:	2201      	movs	r2, #1
 800f398:	4053      	eors	r3, r2
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d001      	beq.n	800f3a4 <getSoundData+0x3c>
    {
        return false;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	e0a0      	b.n	800f4e6 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800f3a4:	4b54      	ldr	r3, [pc, #336]	@ (800f4f8 <getSoundData+0x190>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d005      	beq.n	800f3ba <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800f3ae:	4b53      	ldr	r3, [pc, #332]	@ (800f4fc <getSoundData+0x194>)
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	b25b      	sxtb	r3, r3
 800f3b4:	0018      	movs	r0, r3
 800f3b6:	f7ff ffb5 	bl	800f324 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800f3ba:	f3bf 8f4f 	dsb	sy
}
 800f3be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800f3c0:	f3bf 8f6f 	isb	sy
}
 800f3c4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800f3c6:	1cfb      	adds	r3, r7, #3
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d04c      	beq.n	800f468 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800f3ce:	4b4c      	ldr	r3, [pc, #304]	@ (800f500 <getSoundData+0x198>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d11b      	bne.n	800f40e <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	617b      	str	r3, [r7, #20]
 800f3e6:	e00e      	b.n	800f406 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	18d3      	adds	r3, r2, r3
 800f3ee:	3302      	adds	r3, #2
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	18d3      	adds	r3, r2, r3
 800f3fa:	3308      	adds	r3, #8
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	3301      	adds	r3, #1
 800f404:	617b      	str	r3, [r7, #20]
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	2b05      	cmp	r3, #5
 800f40a:	d9ed      	bls.n	800f3e8 <getSoundData+0x80>
 800f40c:	e02c      	b.n	800f468 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	1c59      	adds	r1, r3, #1
 800f414:	4b3b      	ldr	r3, [pc, #236]	@ (800f504 <getSoundData+0x19c>)
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	4b3b      	ldr	r3, [pc, #236]	@ (800f508 <getSoundData+0x1a0>)
 800f41a:	681c      	ldr	r4, [r3, #0]
 800f41c:	4b38      	ldr	r3, [pc, #224]	@ (800f500 <getSoundData+0x198>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	9300      	str	r3, [sp, #0]
 800f422:	0023      	movs	r3, r4
 800f424:	f000 fde8 	bl	800fff8 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f428:	2300      	movs	r3, #0
 800f42a:	613b      	str	r3, [r7, #16]
 800f42c:	e019      	b.n	800f462 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	18d3      	adds	r3, r2, r3
 800f434:	1c98      	adds	r0, r3, #2
 800f436:	693b      	ldr	r3, [r7, #16]
 800f438:	3308      	adds	r3, #8
 800f43a:	687a      	ldr	r2, [r7, #4]
 800f43c:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800f43e:	4b33      	ldr	r3, [pc, #204]	@ (800f50c <getSoundData+0x1a4>)
 800f440:	693a      	ldr	r2, [r7, #16]
 800f442:	0092      	lsls	r2, r2, #2
 800f444:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800f446:	4b32      	ldr	r3, [pc, #200]	@ (800f510 <getSoundData+0x1a8>)
 800f448:	693a      	ldr	r2, [r7, #16]
 800f44a:	0092      	lsls	r2, r2, #2
 800f44c:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800f44e:	4b2c      	ldr	r3, [pc, #176]	@ (800f500 <getSoundData+0x198>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	0013      	movs	r3, r2
 800f456:	0022      	movs	r2, r4
 800f458:	f000 fdce 	bl	800fff8 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	3301      	adds	r3, #1
 800f460:	613b      	str	r3, [r7, #16]
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	2b05      	cmp	r3, #5
 800f466:	d9e2      	bls.n	800f42e <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800f468:	1cbb      	adds	r3, r7, #2
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d028      	beq.n	800f4c2 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800f470:	240e      	movs	r4, #14
 800f472:	193b      	adds	r3, r7, r4
 800f474:	2200      	movs	r2, #0
 800f476:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800f478:	250d      	movs	r5, #13
 800f47a:	197b      	adds	r3, r7, r5
 800f47c:	2200      	movs	r2, #0
 800f47e:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800f480:	4b24      	ldr	r3, [pc, #144]	@ (800f514 <getSoundData+0x1ac>)
 800f482:	6818      	ldr	r0, [r3, #0]
 800f484:	4924      	ldr	r1, [pc, #144]	@ (800f518 <getSoundData+0x1b0>)
 800f486:	197b      	adds	r3, r7, r5
 800f488:	193a      	adds	r2, r7, r4
 800f48a:	f000 fe59 	bl	8010140 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800f48e:	193b      	adds	r3, r7, r4
 800f490:	881a      	ldrh	r2, [r3, #0]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	21ff      	movs	r1, #255	@ 0xff
 800f496:	4011      	ands	r1, r2
 800f498:	000c      	movs	r4, r1
 800f49a:	7b99      	ldrb	r1, [r3, #14]
 800f49c:	2000      	movs	r0, #0
 800f49e:	4001      	ands	r1, r0
 800f4a0:	1c08      	adds	r0, r1, #0
 800f4a2:	1c21      	adds	r1, r4, #0
 800f4a4:	4301      	orrs	r1, r0
 800f4a6:	7399      	strb	r1, [r3, #14]
 800f4a8:	0a12      	lsrs	r2, r2, #8
 800f4aa:	b290      	uxth	r0, r2
 800f4ac:	7bda      	ldrb	r2, [r3, #15]
 800f4ae:	2100      	movs	r1, #0
 800f4b0:	400a      	ands	r2, r1
 800f4b2:	1c11      	adds	r1, r2, #0
 800f4b4:	1c02      	adds	r2, r0, #0
 800f4b6:	430a      	orrs	r2, r1
 800f4b8:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800f4ba:	197b      	adds	r3, r7, r5
 800f4bc:	781a      	ldrb	r2, [r3, #0]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800f4c2:	f000 f86f 	bl	800f5a4 <micSettlingComplete>
 800f4c6:	0003      	movs	r3, r0
 800f4c8:	001a      	movs	r2, r3
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800f4ce:	4b0a      	ldr	r3, [pc, #40]	@ (800f4f8 <getSoundData+0x190>)
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d005      	beq.n	800f4e4 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800f4d8:	4b08      	ldr	r3, [pc, #32]	@ (800f4fc <getSoundData+0x194>)
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	b25b      	sxtb	r3, r3
 800f4de:	0018      	movs	r0, r3
 800f4e0:	f7ff ff06 	bl	800f2f0 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800f4e4:	2301      	movs	r3, #1
}
 800f4e6:	0018      	movs	r0, r3
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	b006      	add	sp, #24
 800f4ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f4ee:	46c0      	nop			@ (mov r8, r8)
 800f4f0:	20000f92 	.word	0x20000f92
 800f4f4:	20000f95 	.word	0x20000f95
 800f4f8:	20000f94 	.word	0x20000f94
 800f4fc:	200019e4 	.word	0x200019e4
 800f500:	20001a20 	.word	0x20001a20
 800f504:	200019e8 	.word	0x200019e8
 800f508:	200019ec 	.word	0x200019ec
 800f50c:	200019f0 	.word	0x200019f0
 800f510:	20001a08 	.word	0x20001a08
 800f514:	20000f9c 	.word	0x20000f9c
 800f518:	3b5c7333 	.word	0x3b5c7333

0800f51c <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]
 800f528:	001a      	movs	r2, r3
 800f52a:	1cfb      	adds	r3, r7, #3
 800f52c:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800f52e:	4b09      	ldr	r3, [pc, #36]	@ (800f554 <soundInit+0x38>)
 800f530:	68ba      	ldr	r2, [r7, #8]
 800f532:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800f534:	4b08      	ldr	r3, [pc, #32]	@ (800f558 <soundInit+0x3c>)
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800f53a:	4b08      	ldr	r3, [pc, #32]	@ (800f55c <soundInit+0x40>)
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800f540:	4b07      	ldr	r3, [pc, #28]	@ (800f560 <soundInit+0x44>)
 800f542:	2200      	movs	r2, #0
 800f544:	569a      	ldrsb	r2, [r3, r2]
 800f546:	4b06      	ldr	r3, [pc, #24]	@ (800f560 <soundInit+0x44>)
 800f548:	701a      	strb	r2, [r3, #0]

    return true;
 800f54a:	2301      	movs	r3, #1
}
 800f54c:	0018      	movs	r0, r3
 800f54e:	46bd      	mov	sp, r7
 800f550:	b004      	add	sp, #16
 800f552:	bd80      	pop	{r7, pc}
 800f554:	200019dc 	.word	0x200019dc
 800f558:	200019d8 	.word	0x200019d8
 800f55c:	200019e0 	.word	0x200019e0
 800f560:	200019e4 	.word	0x200019e4

0800f564 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800f568:	4b02      	ldr	r3, [pc, #8]	@ (800f574 <clearMaximumAmplitude+0x10>)
 800f56a:	2200      	movs	r2, #0
 800f56c:	601a      	str	r2, [r3, #0]
}
 800f56e:	46c0      	nop			@ (mov r8, r8)
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	20000f9c 	.word	0x20000f9c

0800f578 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800f57c:	4b08      	ldr	r3, [pc, #32]	@ (800f5a0 <startMicSettlingPeriod+0x28>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2200      	movs	r2, #0
 800f584:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800f586:	4b06      	ldr	r3, [pc, #24]	@ (800f5a0 <startMicSettlingPeriod+0x28>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	0018      	movs	r0, r3
 800f58c:	f00a fe0c 	bl	801a1a8 <HAL_TIM_Base_Start>
 800f590:	1e03      	subs	r3, r0, #0
 800f592:	d001      	beq.n	800f598 <startMicSettlingPeriod+0x20>
    {
        return false;
 800f594:	2300      	movs	r3, #0
 800f596:	e000      	b.n	800f59a <startMicSettlingPeriod+0x22>
    }
    return true;
 800f598:	2301      	movs	r3, #1
}
 800f59a:	0018      	movs	r0, r3
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	200019d8 	.word	0x200019d8

0800f5a4 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800f5aa:	4b0e      	ldr	r3, [pc, #56]	@ (800f5e4 <micSettlingComplete+0x40>)
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	691b      	ldr	r3, [r3, #16]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	401a      	ands	r2, r3
 800f5b6:	1dfb      	adds	r3, r7, #7
 800f5b8:	3a01      	subs	r2, #1
 800f5ba:	4251      	negs	r1, r2
 800f5bc:	414a      	adcs	r2, r1
 800f5be:	701a      	strb	r2, [r3, #0]
    if (complete)
 800f5c0:	1dfb      	adds	r3, r7, #7
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d007      	beq.n	800f5d8 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800f5c8:	4b06      	ldr	r3, [pc, #24]	@ (800f5e4 <micSettlingComplete+0x40>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	0018      	movs	r0, r3
 800f5ce:	f00a fe35 	bl	801a23c <HAL_TIM_Base_Stop>
      DataReady = true;
 800f5d2:	4b05      	ldr	r3, [pc, #20]	@ (800f5e8 <micSettlingComplete+0x44>)
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800f5d8:	1dfb      	adds	r3, r7, #7
 800f5da:	781b      	ldrb	r3, [r3, #0]
}
 800f5dc:	0018      	movs	r0, r3
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	b002      	add	sp, #8
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	200019d8 	.word	0x200019d8
 800f5e8:	20000f91 	.word	0x20000f91

0800f5ec <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	0002      	movs	r2, r0
 800f5f4:	1dfb      	adds	r3, r7, #7
 800f5f6:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800f5f8:	4b29      	ldr	r3, [pc, #164]	@ (800f6a0 <enableMicrophone+0xb4>)
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	1dfa      	adds	r2, r7, #7
 800f600:	7812      	ldrb	r2, [r2, #0]
 800f602:	429a      	cmp	r2, r3
 800f604:	d101      	bne.n	800f60a <enableMicrophone+0x1e>
    {
        return true;
 800f606:	2301      	movs	r3, #1
 800f608:	e045      	b.n	800f696 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800f60a:	1dfb      	adds	r3, r7, #7
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d025      	beq.n	800f65e <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800f612:	f7ff ffb1 	bl	800f578 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800f616:	4b23      	ldr	r3, [pc, #140]	@ (800f6a4 <enableMicrophone+0xb8>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2280      	movs	r2, #128	@ 0x80
 800f61c:	0092      	lsls	r2, r2, #2
 800f61e:	4922      	ldr	r1, [pc, #136]	@ (800f6a8 <enableMicrophone+0xbc>)
 800f620:	0018      	movs	r0, r3
 800f622:	f007 f82b 	bl	801667c <HAL_I2S_Receive_DMA>
 800f626:	1e03      	subs	r3, r0, #0
 800f628:	d001      	beq.n	800f62e <enableMicrophone+0x42>
        {
            return false;
 800f62a:	2300      	movs	r3, #0
 800f62c:	e033      	b.n	800f696 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800f62e:	f7ff ff99 	bl	800f564 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800f632:	4b1e      	ldr	r3, [pc, #120]	@ (800f6ac <enableMicrophone+0xc0>)
 800f634:	2200      	movs	r2, #0
 800f636:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800f638:	4b1d      	ldr	r3, [pc, #116]	@ (800f6b0 <enableMicrophone+0xc4>)
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	b25b      	sxtb	r3, r3
 800f63e:	0018      	movs	r0, r3
 800f640:	f7ff fe56 	bl	800f2f0 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800f644:	4b1b      	ldr	r3, [pc, #108]	@ (800f6b4 <enableMicrophone+0xc8>)
 800f646:	2201      	movs	r2, #1
 800f648:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800f64a:	4b15      	ldr	r3, [pc, #84]	@ (800f6a0 <enableMicrophone+0xb4>)
 800f64c:	2201      	movs	r2, #1
 800f64e:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800f650:	4b19      	ldr	r3, [pc, #100]	@ (800f6b8 <enableMicrophone+0xcc>)
 800f652:	2200      	movs	r2, #0
 800f654:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800f656:	4b19      	ldr	r3, [pc, #100]	@ (800f6bc <enableMicrophone+0xd0>)
 800f658:	2200      	movs	r2, #0
 800f65a:	701a      	strb	r2, [r3, #0]
 800f65c:	e01a      	b.n	800f694 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800f65e:	4b14      	ldr	r3, [pc, #80]	@ (800f6b0 <enableMicrophone+0xc4>)
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	b25b      	sxtb	r3, r3
 800f664:	0018      	movs	r0, r3
 800f666:	f7ff fe5d 	bl	800f324 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800f66a:	4b12      	ldr	r3, [pc, #72]	@ (800f6b4 <enableMicrophone+0xc8>)
 800f66c:	2200      	movs	r2, #0
 800f66e:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800f670:	4b11      	ldr	r3, [pc, #68]	@ (800f6b8 <enableMicrophone+0xcc>)
 800f672:	2200      	movs	r2, #0
 800f674:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800f676:	4b11      	ldr	r3, [pc, #68]	@ (800f6bc <enableMicrophone+0xd0>)
 800f678:	2200      	movs	r2, #0
 800f67a:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800f67c:	4b09      	ldr	r3, [pc, #36]	@ (800f6a4 <enableMicrophone+0xb8>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	0018      	movs	r0, r3
 800f682:	f007 f8bd 	bl	8016800 <HAL_I2S_DMAStop>
 800f686:	1e03      	subs	r3, r0, #0
 800f688:	d001      	beq.n	800f68e <enableMicrophone+0xa2>
        {
            return false;
 800f68a:	2300      	movs	r3, #0
 800f68c:	e003      	b.n	800f696 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800f68e:	4b04      	ldr	r3, [pc, #16]	@ (800f6a0 <enableMicrophone+0xb4>)
 800f690:	2200      	movs	r2, #0
 800f692:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800f694:	2301      	movs	r3, #1
}
 800f696:	0018      	movs	r0, r3
 800f698:	46bd      	mov	sp, r7
 800f69a:	b002      	add	sp, #8
 800f69c:	bd80      	pop	{r7, pc}
 800f69e:	46c0      	nop			@ (mov r8, r8)
 800f6a0:	20000f92 	.word	0x20000f92
 800f6a4:	200019dc 	.word	0x200019dc
 800f6a8:	20000fd8 	.word	0x20000fd8
 800f6ac:	20000f98 	.word	0x20000f98
 800f6b0:	200019e4 	.word	0x200019e4
 800f6b4:	20000f94 	.word	0x20000f94
 800f6b8:	20000f93 	.word	0x20000f93
 800f6bc:	20000f95 	.word	0x20000f95

0800f6c0 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800f6c4:	4b0c      	ldr	r3, [pc, #48]	@ (800f6f8 <startSPLcalculation+0x38>)
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	4053      	eors	r3, r2
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d001      	beq.n	800f6d8 <startSPLcalculation+0x18>
    {
        return false;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	e00c      	b.n	800f6f2 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800f6d8:	4b08      	ldr	r3, [pc, #32]	@ (800f6fc <startSPLcalculation+0x3c>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d001      	beq.n	800f6e6 <startSPLcalculation+0x26>
    {
        return true;
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	e005      	b.n	800f6f2 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800f6e6:	f000 fb63 	bl	800fdb0 <resetSPLstate>
    SPLcalcEnabled = true;
 800f6ea:	4b04      	ldr	r3, [pc, #16]	@ (800f6fc <startSPLcalculation+0x3c>)
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	701a      	strb	r2, [r3, #0]
    return true;
 800f6f0:	2301      	movs	r3, #1
}
 800f6f2:	0018      	movs	r0, r3
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	20000f92 	.word	0x20000f92
 800f6fc:	20000f93 	.word	0x20000f93

0800f700 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800f708:	4b05      	ldr	r3, [pc, #20]	@ (800f720 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d102      	bne.n	800f718 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800f712:	2000      	movs	r0, #0
 800f714:	f000 f81a 	bl	800f74c <processHalfDMAbuffer>
  }
}
 800f718:	46c0      	nop			@ (mov r8, r8)
 800f71a:	46bd      	mov	sp, r7
 800f71c:	b002      	add	sp, #8
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	200019dc 	.word	0x200019dc

0800f724 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800f72c:	4b06      	ldr	r3, [pc, #24]	@ (800f748 <HAL_I2S_RxCpltCallback+0x24>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	429a      	cmp	r2, r3
 800f734:	d104      	bne.n	800f740 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800f736:	2380      	movs	r3, #128	@ 0x80
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	0018      	movs	r0, r3
 800f73c:	f000 f806 	bl	800f74c <processHalfDMAbuffer>
  }
}
 800f740:	46c0      	nop			@ (mov r8, r8)
 800f742:	46bd      	mov	sp, r7
 800f744:	b002      	add	sp, #8
 800f746:	bd80      	pop	{r7, pc}
 800f748:	200019dc 	.word	0x200019dc

0800f74c <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	005a      	lsls	r2, r3, #1
 800f758:	4b15      	ldr	r3, [pc, #84]	@ (800f7b0 <processHalfDMAbuffer+0x64>)
 800f75a:	18d3      	adds	r3, r2, r3
 800f75c:	4a15      	ldr	r2, [pc, #84]	@ (800f7b4 <processHalfDMAbuffer+0x68>)
 800f75e:	2180      	movs	r1, #128	@ 0x80
 800f760:	0089      	lsls	r1, r1, #2
 800f762:	0018      	movs	r0, r3
 800f764:	f000 fd35 	bl	80101d2 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800f768:	4b13      	ldr	r3, [pc, #76]	@ (800f7b8 <processHalfDMAbuffer+0x6c>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	425a      	negs	r2, r3
 800f76e:	4153      	adcs	r3, r2
 800f770:	b2da      	uxtb	r2, r3
 800f772:	4b11      	ldr	r3, [pc, #68]	@ (800f7b8 <processHalfDMAbuffer+0x6c>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2109      	movs	r1, #9
 800f778:	4299      	cmp	r1, r3
 800f77a:	419b      	sbcs	r3, r3
 800f77c:	425b      	negs	r3, r3
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	480c      	ldr	r0, [pc, #48]	@ (800f7b4 <processHalfDMAbuffer+0x68>)
 800f782:	2180      	movs	r1, #128	@ 0x80
 800f784:	f000 fb46 	bl	800fe14 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800f788:	4b0b      	ldr	r3, [pc, #44]	@ (800f7b8 <processHalfDMAbuffer+0x6c>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2b09      	cmp	r3, #9
 800f78e:	d804      	bhi.n	800f79a <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800f790:	4b09      	ldr	r3, [pc, #36]	@ (800f7b8 <processHalfDMAbuffer+0x6c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	1c5a      	adds	r2, r3, #1
 800f796:	4b08      	ldr	r3, [pc, #32]	@ (800f7b8 <processHalfDMAbuffer+0x6c>)
 800f798:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800f79a:	4b08      	ldr	r3, [pc, #32]	@ (800f7bc <processHalfDMAbuffer+0x70>)
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d001      	beq.n	800f7a8 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800f7a4:	f000 f826 	bl	800f7f4 <calculateSPLQ31>
    }
}
 800f7a8:	46c0      	nop			@ (mov r8, r8)
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	b002      	add	sp, #8
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	20000fd8 	.word	0x20000fd8
 800f7b4:	200017d8 	.word	0x200017d8
 800f7b8:	20000f98 	.word	0x20000f98
 800f7bc:	20000f93 	.word	0x20000f93

0800f7c0 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800f7c8:	4b07      	ldr	r3, [pc, #28]	@ (800f7e8 <HAL_I2S_ErrorCallback+0x28>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d106      	bne.n	800f7e0 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800f7d2:	4a06      	ldr	r2, [pc, #24]	@ (800f7ec <HAL_I2S_ErrorCallback+0x2c>)
 800f7d4:	239e      	movs	r3, #158	@ 0x9e
 800f7d6:	0059      	lsls	r1, r3, #1
 800f7d8:	4b05      	ldr	r3, [pc, #20]	@ (800f7f0 <HAL_I2S_ErrorCallback+0x30>)
 800f7da:	0018      	movs	r0, r3
 800f7dc:	f002 f8f4 	bl	80119c8 <errorHandler>
  }
}
 800f7e0:	46c0      	nop			@ (mov r8, r8)
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	b002      	add	sp, #8
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	200019dc 	.word	0x200019dc
 800f7ec:	0802a994 	.word	0x0802a994
 800f7f0:	0802b220 	.word	0x0802b220

0800f7f4 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800f7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7f6:	b0b3      	sub	sp, #204	@ 0xcc
 800f7f8:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800f7fa:	4ae2      	ldr	r2, [pc, #904]	@ (800fb84 <calculateSPLQ31+0x390>)
 800f7fc:	2338      	movs	r3, #56	@ 0x38
 800f7fe:	2030      	movs	r0, #48	@ 0x30
 800f800:	181b      	adds	r3, r3, r0
 800f802:	19d9      	adds	r1, r3, r7
 800f804:	2334      	movs	r3, #52	@ 0x34
 800f806:	181b      	adds	r3, r3, r0
 800f808:	19d8      	adds	r0, r3, r7
 800f80a:	2380      	movs	r3, #128	@ 0x80
 800f80c:	f000 fc36 	bl	801007c <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800f810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f812:	2b00      	cmp	r3, #0
 800f814:	da00      	bge.n	800f818 <calculateSPLQ31+0x24>
 800f816:	3301      	adds	r3, #1
 800f818:	105b      	asrs	r3, r3, #1
 800f81a:	001a      	movs	r2, r3
 800f81c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f81e:	2b00      	cmp	r3, #0
 800f820:	da00      	bge.n	800f824 <calculateSPLQ31+0x30>
 800f822:	3301      	adds	r3, #1
 800f824:	105b      	asrs	r3, r3, #1
 800f826:	18d3      	adds	r3, r2, r3
 800f828:	2188      	movs	r1, #136	@ 0x88
 800f82a:	187a      	adds	r2, r7, r1
 800f82c:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800f82e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f830:	187b      	adds	r3, r7, r1
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	1ad3      	subs	r3, r2, r3
 800f836:	3304      	adds	r3, #4
 800f838:	2284      	movs	r2, #132	@ 0x84
 800f83a:	18b9      	adds	r1, r7, r2
 800f83c:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800f83e:	18bb      	adds	r3, r7, r2
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4ad1      	ldr	r2, [pc, #836]	@ (800fb88 <calculateSPLQ31+0x394>)
 800f844:	0019      	movs	r1, r3
 800f846:	0010      	movs	r0, r2
 800f848:	f000 fc58 	bl	80100fc <getPo2factor>
 800f84c:	0003      	movs	r3, r0
 800f84e:	2280      	movs	r2, #128	@ 0x80
 800f850:	18ba      	adds	r2, r7, r2
 800f852:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800f854:	2300      	movs	r3, #0
 800f856:	2284      	movs	r2, #132	@ 0x84
 800f858:	2130      	movs	r1, #48	@ 0x30
 800f85a:	1852      	adds	r2, r2, r1
 800f85c:	19d2      	adds	r2, r2, r7
 800f85e:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800f860:	2300      	movs	r3, #0
 800f862:	2280      	movs	r2, #128	@ 0x80
 800f864:	1852      	adds	r2, r2, r1
 800f866:	19d2      	adds	r2, r2, r7
 800f868:	6013      	str	r3, [r2, #0]
 800f86a:	e032      	b.n	800f8d2 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800f86c:	4ac5      	ldr	r2, [pc, #788]	@ (800fb84 <calculateSPLQ31+0x390>)
 800f86e:	2680      	movs	r6, #128	@ 0x80
 800f870:	2330      	movs	r3, #48	@ 0x30
 800f872:	18f1      	adds	r1, r6, r3
 800f874:	19cb      	adds	r3, r1, r7
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	009b      	lsls	r3, r3, #2
 800f87a:	589a      	ldr	r2, [r3, r2]
 800f87c:	2188      	movs	r1, #136	@ 0x88
 800f87e:	1879      	adds	r1, r7, r1
 800f880:	680b      	ldr	r3, [r1, #0]
 800f882:	1ad2      	subs	r2, r2, r3
 800f884:	2180      	movs	r1, #128	@ 0x80
 800f886:	1879      	adds	r1, r7, r1
 800f888:	680b      	ldr	r3, [r1, #0]
 800f88a:	409a      	lsls	r2, r3
 800f88c:	0011      	movs	r1, r2
 800f88e:	4abf      	ldr	r2, [pc, #764]	@ (800fb8c <calculateSPLQ31+0x398>)
 800f890:	2084      	movs	r0, #132	@ 0x84
 800f892:	2330      	movs	r3, #48	@ 0x30
 800f894:	18c3      	adds	r3, r0, r3
 800f896:	19db      	adds	r3, r3, r7
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800f89e:	2230      	movs	r2, #48	@ 0x30
 800f8a0:	1883      	adds	r3, r0, r2
 800f8a2:	19db      	adds	r3, r3, r7
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	49b8      	ldr	r1, [pc, #736]	@ (800fb8c <calculateSPLQ31+0x398>)
 800f8aa:	009a      	lsls	r2, r3, #2
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	5053      	str	r3, [r2, r1]
        count += 2;
 800f8b0:	2230      	movs	r2, #48	@ 0x30
 800f8b2:	1883      	adds	r3, r0, r2
 800f8b4:	19db      	adds	r3, r3, r7
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	3302      	adds	r3, #2
 800f8ba:	0011      	movs	r1, r2
 800f8bc:	1882      	adds	r2, r0, r2
 800f8be:	19d2      	adds	r2, r2, r7
 800f8c0:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800f8c2:	000a      	movs	r2, r1
 800f8c4:	18b3      	adds	r3, r6, r2
 800f8c6:	19db      	adds	r3, r3, r7
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	18b2      	adds	r2, r6, r2
 800f8ce:	19d2      	adds	r2, r2, r7
 800f8d0:	6013      	str	r3, [r2, #0]
 800f8d2:	2380      	movs	r3, #128	@ 0x80
 800f8d4:	2630      	movs	r6, #48	@ 0x30
 800f8d6:	199b      	adds	r3, r3, r6
 800f8d8:	19db      	adds	r3, r3, r7
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800f8de:	d9c5      	bls.n	800f86c <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800f8e0:	4bab      	ldr	r3, [pc, #684]	@ (800fb90 <calculateSPLQ31+0x39c>)
 800f8e2:	6818      	ldr	r0, [r3, #0]
 800f8e4:	49a9      	ldr	r1, [pc, #676]	@ (800fb8c <calculateSPLQ31+0x398>)
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f011 fd23 	bl	8021334 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800f8ee:	4aa9      	ldr	r2, [pc, #676]	@ (800fb94 <calculateSPLQ31+0x3a0>)
 800f8f0:	2338      	movs	r3, #56	@ 0x38
 800f8f2:	199b      	adds	r3, r3, r6
 800f8f4:	19d9      	adds	r1, r3, r7
 800f8f6:	2334      	movs	r3, #52	@ 0x34
 800f8f8:	199b      	adds	r3, r3, r6
 800f8fa:	19d8      	adds	r0, r3, r7
 800f8fc:	237e      	movs	r3, #126	@ 0x7e
 800f8fe:	f000 fbbd 	bl	801007c <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800f902:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f904:	2380      	movs	r3, #128	@ 0x80
 800f906:	061b      	lsls	r3, r3, #24
 800f908:	429a      	cmp	r2, r3
 800f90a:	d101      	bne.n	800f910 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800f90c:	4b9e      	ldr	r3, [pc, #632]	@ (800fb88 <calculateSPLQ31+0x394>)
 800f90e:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800f910:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f912:	2380      	movs	r3, #128	@ 0x80
 800f914:	061b      	lsls	r3, r3, #24
 800f916:	429a      	cmp	r2, r3
 800f918:	d101      	bne.n	800f91e <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800f91a:	4b9b      	ldr	r3, [pc, #620]	@ (800fb88 <calculateSPLQ31+0x394>)
 800f91c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800f91e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f920:	17da      	asrs	r2, r3, #31
 800f922:	189b      	adds	r3, r3, r2
 800f924:	4053      	eors	r3, r2
 800f926:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800f928:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f92a:	17da      	asrs	r2, r3, #31
 800f92c:	189b      	adds	r3, r3, r2
 800f92e:	4053      	eors	r3, r2
 800f930:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800f932:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f934:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f936:	429a      	cmp	r2, r3
 800f938:	dd01      	ble.n	800f93e <calculateSPLQ31+0x14a>
    {
        max = min;
 800f93a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f93c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800f93e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f940:	3304      	adds	r3, #4
 800f942:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800f944:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f946:	4a90      	ldr	r2, [pc, #576]	@ (800fb88 <calculateSPLQ31+0x394>)
 800f948:	0019      	movs	r1, r3
 800f94a:	0010      	movs	r0, r2
 800f94c:	f000 fbd6 	bl	80100fc <getPo2factor>
 800f950:	0003      	movs	r3, r0
 800f952:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800f954:	2302      	movs	r3, #2
 800f956:	22ac      	movs	r2, #172	@ 0xac
 800f958:	18ba      	adds	r2, r7, r2
 800f95a:	6013      	str	r3, [r2, #0]
 800f95c:	e012      	b.n	800f984 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800f95e:	4a8b      	ldr	r2, [pc, #556]	@ (800fb8c <calculateSPLQ31+0x398>)
 800f960:	20ac      	movs	r0, #172	@ 0xac
 800f962:	183b      	adds	r3, r7, r0
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	589a      	ldr	r2, [r3, r2]
 800f96a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f96c:	409a      	lsls	r2, r3
 800f96e:	0011      	movs	r1, r2
 800f970:	4a86      	ldr	r2, [pc, #536]	@ (800fb8c <calculateSPLQ31+0x398>)
 800f972:	183b      	adds	r3, r7, r0
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800f97a:	183b      	adds	r3, r7, r0
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3301      	adds	r3, #1
 800f980:	183a      	adds	r2, r7, r0
 800f982:	6013      	str	r3, [r2, #0]
 800f984:	23ac      	movs	r3, #172	@ 0xac
 800f986:	18fb      	adds	r3, r7, r3
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f98c:	d9e7      	bls.n	800f95e <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800f98e:	4b7d      	ldr	r3, [pc, #500]	@ (800fb84 <calculateSPLQ31+0x390>)
 800f990:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800f992:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800f994:	4b7d      	ldr	r3, [pc, #500]	@ (800fb8c <calculateSPLQ31+0x398>)
 800f996:	2240      	movs	r2, #64	@ 0x40
 800f998:	0018      	movs	r0, r3
 800f99a:	f012 fa75 	bl	8021e88 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800f99e:	2330      	movs	r3, #48	@ 0x30
 800f9a0:	18fb      	adds	r3, r7, r3
 800f9a2:	0018      	movs	r0, r3
 800f9a4:	2330      	movs	r3, #48	@ 0x30
 800f9a6:	001a      	movs	r2, r3
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	f014 f8b3 	bl	8023b14 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	21a0      	movs	r1, #160	@ 0xa0
 800f9b4:	1879      	adds	r1, r7, r1
 800f9b6:	600a      	str	r2, [r1, #0]
 800f9b8:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	229c      	movs	r2, #156	@ 0x9c
 800f9be:	18ba      	adds	r2, r7, r2
 800f9c0:	6013      	str	r3, [r2, #0]
 800f9c2:	e05b      	b.n	800fa7c <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800f9c4:	269c      	movs	r6, #156	@ 0x9c
 800f9c6:	19bb      	adds	r3, r7, r6
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	009a      	lsls	r2, r3, #2
 800f9cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f9ce:	189b      	adds	r3, r3, r2
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	613b      	str	r3, [r7, #16]
 800f9d4:	17db      	asrs	r3, r3, #31
 800f9d6:	617b      	str	r3, [r7, #20]
 800f9d8:	4b6f      	ldr	r3, [pc, #444]	@ (800fb98 <calculateSPLQ31+0x3a4>)
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	19bb      	adds	r3, r7, r6
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	005b      	lsls	r3, r3, #1
 800f9e2:	18d3      	adds	r3, r2, r3
 800f9e4:	881b      	ldrh	r3, [r3, #0]
 800f9e6:	60bb      	str	r3, [r7, #8]
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	60fb      	str	r3, [r7, #12]
 800f9ec:	68ba      	ldr	r2, [r7, #8]
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6938      	ldr	r0, [r7, #16]
 800f9f2:	6979      	ldr	r1, [r7, #20]
 800f9f4:	f7f0 fde4 	bl	80005c0 <__aeabi_lmul>
 800f9f8:	0002      	movs	r2, r0
 800f9fa:	000b      	movs	r3, r1
 800f9fc:	0010      	movs	r0, r2
 800f9fe:	0019      	movs	r1, r3
 800fa00:	23a0      	movs	r3, #160	@ 0xa0
 800fa02:	18fa      	adds	r2, r7, r3
 800fa04:	6853      	ldr	r3, [r2, #4]
 800fa06:	6812      	ldr	r2, [r2, #0]
 800fa08:	1812      	adds	r2, r2, r0
 800fa0a:	414b      	adcs	r3, r1
 800fa0c:	21a0      	movs	r1, #160	@ 0xa0
 800fa0e:	1879      	adds	r1, r7, r1
 800fa10:	600a      	str	r2, [r1, #0]
 800fa12:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800fa14:	4b61      	ldr	r3, [pc, #388]	@ (800fb9c <calculateSPLQ31+0x3a8>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	19bb      	adds	r3, r7, r6
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	18d3      	adds	r3, r2, r3
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	2b06      	cmp	r3, #6
 800fa22:	d025      	beq.n	800fa70 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800fa24:	4b5d      	ldr	r3, [pc, #372]	@ (800fb9c <calculateSPLQ31+0x3a8>)
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	19bb      	adds	r3, r7, r6
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	18d3      	adds	r3, r2, r3
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	2230      	movs	r2, #48	@ 0x30
 800fa32:	18ba      	adds	r2, r7, r2
 800fa34:	00db      	lsls	r3, r3, #3
 800fa36:	18d3      	adds	r3, r2, r3
 800fa38:	6818      	ldr	r0, [r3, #0]
 800fa3a:	6859      	ldr	r1, [r3, #4]
 800fa3c:	19bb      	adds	r3, r7, r6
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	009a      	lsls	r2, r3, #2
 800fa42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fa44:	189b      	adds	r3, r3, r2
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	603b      	str	r3, [r7, #0]
 800fa4a:	17db      	asrs	r3, r3, #31
 800fa4c:	607b      	str	r3, [r7, #4]
 800fa4e:	4b53      	ldr	r3, [pc, #332]	@ (800fb9c <calculateSPLQ31+0x3a8>)
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	19be      	adds	r6, r7, r6
 800fa54:	6833      	ldr	r3, [r6, #0]
 800fa56:	18d3      	adds	r3, r2, r3
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	001e      	movs	r6, r3
 800fa5c:	683a      	ldr	r2, [r7, #0]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	1880      	adds	r0, r0, r2
 800fa62:	4159      	adcs	r1, r3
 800fa64:	2330      	movs	r3, #48	@ 0x30
 800fa66:	18fa      	adds	r2, r7, r3
 800fa68:	00f3      	lsls	r3, r6, #3
 800fa6a:	18d3      	adds	r3, r2, r3
 800fa6c:	6018      	str	r0, [r3, #0]
 800fa6e:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800fa70:	229c      	movs	r2, #156	@ 0x9c
 800fa72:	18bb      	adds	r3, r7, r2
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	3301      	adds	r3, #1
 800fa78:	18ba      	adds	r2, r7, r2
 800fa7a:	6013      	str	r3, [r2, #0]
 800fa7c:	239c      	movs	r3, #156	@ 0x9c
 800fa7e:	18fb      	adds	r3, r7, r3
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b3f      	cmp	r3, #63	@ 0x3f
 800fa84:	d99e      	bls.n	800f9c4 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800fa86:	2380      	movs	r3, #128	@ 0x80
 800fa88:	18fb      	adds	r3, r7, r3
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	005b      	lsls	r3, r3, #1
 800fa8e:	001a      	movs	r2, r3
 800fa90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fa92:	005b      	lsls	r3, r3, #1
 800fa94:	18d3      	adds	r3, r2, r3
 800fa96:	3b22      	subs	r3, #34	@ 0x22
 800fa98:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800fa9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fa9c:	17da      	asrs	r2, r3, #31
 800fa9e:	189b      	adds	r3, r3, r2
 800faa0:	4053      	eors	r3, r2
 800faa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800faa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	da62      	bge.n	800fb70 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800faaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800faac:	3b20      	subs	r3, #32
 800faae:	2b00      	cmp	r3, #0
 800fab0:	db05      	blt.n	800fabe <calculateSPLQ31+0x2ca>
 800fab2:	22a0      	movs	r2, #160	@ 0xa0
 800fab4:	18ba      	adds	r2, r7, r2
 800fab6:	6812      	ldr	r2, [r2, #0]
 800fab8:	409a      	lsls	r2, r3
 800faba:	627a      	str	r2, [r7, #36]	@ 0x24
 800fabc:	e010      	b.n	800fae0 <calculateSPLQ31+0x2ec>
 800fabe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fac0:	2220      	movs	r2, #32
 800fac2:	1ad3      	subs	r3, r2, r3
 800fac4:	22a0      	movs	r2, #160	@ 0xa0
 800fac6:	18ba      	adds	r2, r7, r2
 800fac8:	6812      	ldr	r2, [r2, #0]
 800faca:	40da      	lsrs	r2, r3
 800facc:	0013      	movs	r3, r2
 800face:	22a4      	movs	r2, #164	@ 0xa4
 800fad0:	18ba      	adds	r2, r7, r2
 800fad2:	6811      	ldr	r1, [r2, #0]
 800fad4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fad6:	4091      	lsls	r1, r2
 800fad8:	6279      	str	r1, [r7, #36]	@ 0x24
 800fada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fadc:	431a      	orrs	r2, r3
 800fade:	627a      	str	r2, [r7, #36]	@ 0x24
 800fae0:	21a0      	movs	r1, #160	@ 0xa0
 800fae2:	187b      	adds	r3, r7, r1
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fae8:	409a      	lsls	r2, r3
 800faea:	623a      	str	r2, [r7, #32]
 800faec:	6a3b      	ldr	r3, [r7, #32]
 800faee:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800faf0:	187a      	adds	r2, r7, r1
 800faf2:	6013      	str	r3, [r2, #0]
 800faf4:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800faf6:	2300      	movs	r3, #0
 800faf8:	2298      	movs	r2, #152	@ 0x98
 800fafa:	18ba      	adds	r2, r7, r2
 800fafc:	6013      	str	r3, [r2, #0]
 800fafe:	e031      	b.n	800fb64 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800fb00:	2330      	movs	r3, #48	@ 0x30
 800fb02:	18fa      	adds	r2, r7, r3
 800fb04:	2398      	movs	r3, #152	@ 0x98
 800fb06:	18fb      	adds	r3, r7, r3
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	00db      	lsls	r3, r3, #3
 800fb0c:	18d3      	adds	r3, r2, r3
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fb14:	3920      	subs	r1, #32
 800fb16:	2900      	cmp	r1, #0
 800fb18:	db03      	blt.n	800fb22 <calculateSPLQ31+0x32e>
 800fb1a:	0010      	movs	r0, r2
 800fb1c:	4088      	lsls	r0, r1
 800fb1e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fb20:	e00c      	b.n	800fb3c <calculateSPLQ31+0x348>
 800fb22:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fb24:	2020      	movs	r0, #32
 800fb26:	1a41      	subs	r1, r0, r1
 800fb28:	0010      	movs	r0, r2
 800fb2a:	40c8      	lsrs	r0, r1
 800fb2c:	0001      	movs	r1, r0
 800fb2e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fb30:	001c      	movs	r4, r3
 800fb32:	4084      	lsls	r4, r0
 800fb34:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800fb36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb38:	4308      	orrs	r0, r1
 800fb3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fb3c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fb3e:	0013      	movs	r3, r2
 800fb40:	408b      	lsls	r3, r1
 800fb42:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fb44:	2330      	movs	r3, #48	@ 0x30
 800fb46:	18fa      	adds	r2, r7, r3
 800fb48:	2098      	movs	r0, #152	@ 0x98
 800fb4a:	183b      	adds	r3, r7, r0
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	00db      	lsls	r3, r3, #3
 800fb50:	18d3      	adds	r3, r2, r3
 800fb52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb56:	6019      	str	r1, [r3, #0]
 800fb58:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fb5a:	183b      	adds	r3, r7, r0
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	183a      	adds	r2, r7, r0
 800fb62:	6013      	str	r3, [r2, #0]
 800fb64:	2398      	movs	r3, #152	@ 0x98
 800fb66:	18fb      	adds	r3, r7, r3
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b05      	cmp	r3, #5
 800fb6c:	d9c8      	bls.n	800fb00 <calculateSPLQ31+0x30c>
 800fb6e:	e06b      	b.n	800fc48 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800fb70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb72:	3b20      	subs	r3, #32
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	db13      	blt.n	800fba0 <calculateSPLQ31+0x3ac>
 800fb78:	22a4      	movs	r2, #164	@ 0xa4
 800fb7a:	18ba      	adds	r2, r7, r2
 800fb7c:	6812      	ldr	r2, [r2, #0]
 800fb7e:	40da      	lsrs	r2, r3
 800fb80:	61ba      	str	r2, [r7, #24]
 800fb82:	e01e      	b.n	800fbc2 <calculateSPLQ31+0x3ce>
 800fb84:	200017d8 	.word	0x200017d8
 800fb88:	7fffffff 	.word	0x7fffffff
 800fb8c:	20001a24 	.word	0x20001a24
 800fb90:	200000c8 	.word	0x200000c8
 800fb94:	20001a2c 	.word	0x20001a2c
 800fb98:	200000cc 	.word	0x200000cc
 800fb9c:	200000d8 	.word	0x200000d8
 800fba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fba2:	2220      	movs	r2, #32
 800fba4:	1ad3      	subs	r3, r2, r3
 800fba6:	22a4      	movs	r2, #164	@ 0xa4
 800fba8:	18ba      	adds	r2, r7, r2
 800fbaa:	6812      	ldr	r2, [r2, #0]
 800fbac:	409a      	lsls	r2, r3
 800fbae:	0013      	movs	r3, r2
 800fbb0:	22a0      	movs	r2, #160	@ 0xa0
 800fbb2:	18ba      	adds	r2, r7, r2
 800fbb4:	6811      	ldr	r1, [r2, #0]
 800fbb6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fbb8:	40d1      	lsrs	r1, r2
 800fbba:	61b9      	str	r1, [r7, #24]
 800fbbc:	69ba      	ldr	r2, [r7, #24]
 800fbbe:	431a      	orrs	r2, r3
 800fbc0:	61ba      	str	r2, [r7, #24]
 800fbc2:	23a4      	movs	r3, #164	@ 0xa4
 800fbc4:	18fb      	adds	r3, r7, r3
 800fbc6:	681a      	ldr	r2, [r3, #0]
 800fbc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fbca:	40da      	lsrs	r2, r3
 800fbcc:	61fa      	str	r2, [r7, #28]
 800fbce:	69ba      	ldr	r2, [r7, #24]
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	21a0      	movs	r1, #160	@ 0xa0
 800fbd4:	1879      	adds	r1, r7, r1
 800fbd6:	600a      	str	r2, [r1, #0]
 800fbd8:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fbda:	2300      	movs	r3, #0
 800fbdc:	2294      	movs	r2, #148	@ 0x94
 800fbde:	18ba      	adds	r2, r7, r2
 800fbe0:	6013      	str	r3, [r2, #0]
 800fbe2:	e02c      	b.n	800fc3e <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800fbe4:	2330      	movs	r3, #48	@ 0x30
 800fbe6:	18fa      	adds	r2, r7, r3
 800fbe8:	2394      	movs	r3, #148	@ 0x94
 800fbea:	18fb      	adds	r3, r7, r3
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	00db      	lsls	r3, r3, #3
 800fbf0:	18d3      	adds	r3, r2, r3
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fbf8:	3920      	subs	r1, #32
 800fbfa:	2900      	cmp	r1, #0
 800fbfc:	db03      	blt.n	800fc06 <calculateSPLQ31+0x412>
 800fbfe:	0018      	movs	r0, r3
 800fc00:	40c8      	lsrs	r0, r1
 800fc02:	0004      	movs	r4, r0
 800fc04:	e00a      	b.n	800fc1c <calculateSPLQ31+0x428>
 800fc06:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fc08:	2020      	movs	r0, #32
 800fc0a:	1a41      	subs	r1, r0, r1
 800fc0c:	0018      	movs	r0, r3
 800fc0e:	4088      	lsls	r0, r1
 800fc10:	0001      	movs	r1, r0
 800fc12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fc14:	0016      	movs	r6, r2
 800fc16:	40c6      	lsrs	r6, r0
 800fc18:	0034      	movs	r4, r6
 800fc1a:	430c      	orrs	r4, r1
 800fc1c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800fc1e:	40cb      	lsrs	r3, r1
 800fc20:	001d      	movs	r5, r3
 800fc22:	2330      	movs	r3, #48	@ 0x30
 800fc24:	18fa      	adds	r2, r7, r3
 800fc26:	2194      	movs	r1, #148	@ 0x94
 800fc28:	187b      	adds	r3, r7, r1
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	00db      	lsls	r3, r3, #3
 800fc2e:	18d3      	adds	r3, r2, r3
 800fc30:	601c      	str	r4, [r3, #0]
 800fc32:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fc34:	187b      	adds	r3, r7, r1
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	187a      	adds	r2, r7, r1
 800fc3c:	6013      	str	r3, [r2, #0]
 800fc3e:	2394      	movs	r3, #148	@ 0x94
 800fc40:	18fb      	adds	r3, r7, r3
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2b05      	cmp	r3, #5
 800fc46:	d9cd      	bls.n	800fbe4 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800fc48:	230f      	movs	r3, #15
 800fc4a:	425d      	negs	r5, r3
 800fc4c:	2305      	movs	r3, #5
 800fc4e:	425e      	negs	r6, r3
 800fc50:	4b4a      	ldr	r3, [pc, #296]	@ (800fd7c <calculateSPLQ31+0x588>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	4b4a      	ldr	r3, [pc, #296]	@ (800fd80 <calculateSPLQ31+0x58c>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	21a0      	movs	r1, #160	@ 0xa0
 800fc5e:	1879      	adds	r1, r7, r1
 800fc60:	6808      	ldr	r0, [r1, #0]
 800fc62:	6849      	ldr	r1, [r1, #4]
 800fc64:	4c47      	ldr	r4, [pc, #284]	@ (800fd84 <calculateSPLQ31+0x590>)
 800fc66:	9403      	str	r4, [sp, #12]
 800fc68:	4c47      	ldr	r4, [pc, #284]	@ (800fd88 <calculateSPLQ31+0x594>)
 800fc6a:	9402      	str	r4, [sp, #8]
 800fc6c:	9301      	str	r3, [sp, #4]
 800fc6e:	9200      	str	r2, [sp, #0]
 800fc70:	0033      	movs	r3, r6
 800fc72:	002a      	movs	r2, r5
 800fc74:	f000 fa86 	bl	8010184 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fc78:	2300      	movs	r3, #0
 800fc7a:	2290      	movs	r2, #144	@ 0x90
 800fc7c:	18ba      	adds	r2, r7, r2
 800fc7e:	6013      	str	r3, [r2, #0]
 800fc80:	e026      	b.n	800fcd0 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800fc82:	2330      	movs	r3, #48	@ 0x30
 800fc84:	18fa      	adds	r2, r7, r3
 800fc86:	2490      	movs	r4, #144	@ 0x90
 800fc88:	193b      	adds	r3, r7, r4
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	00db      	lsls	r3, r3, #3
 800fc8e:	18d3      	adds	r3, r2, r3
 800fc90:	6818      	ldr	r0, [r3, #0]
 800fc92:	6859      	ldr	r1, [r3, #4]
 800fc94:	230f      	movs	r3, #15
 800fc96:	425d      	negs	r5, r3
 800fc98:	2305      	movs	r3, #5
 800fc9a:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800fc9c:	193b      	adds	r3, r7, r4
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	009a      	lsls	r2, r3, #2
 800fca2:	4b3a      	ldr	r3, [pc, #232]	@ (800fd8c <calculateSPLQ31+0x598>)
 800fca4:	18d3      	adds	r3, r2, r3
 800fca6:	193a      	adds	r2, r7, r4
 800fca8:	6812      	ldr	r2, [r2, #0]
 800fcaa:	0094      	lsls	r4, r2, #2
 800fcac:	4a38      	ldr	r2, [pc, #224]	@ (800fd90 <calculateSPLQ31+0x59c>)
 800fcae:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800fcb0:	9203      	str	r2, [sp, #12]
 800fcb2:	9302      	str	r3, [sp, #8]
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	9301      	str	r3, [sp, #4]
 800fcb8:	2300      	movs	r3, #0
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	0033      	movs	r3, r6
 800fcbe:	002a      	movs	r2, r5
 800fcc0:	f000 fa60 	bl	8010184 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fcc4:	2490      	movs	r4, #144	@ 0x90
 800fcc6:	193b      	adds	r3, r7, r4
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	3301      	adds	r3, #1
 800fccc:	193a      	adds	r2, r7, r4
 800fcce:	6013      	str	r3, [r2, #0]
 800fcd0:	2390      	movs	r3, #144	@ 0x90
 800fcd2:	18fb      	adds	r3, r7, r3
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b05      	cmp	r3, #5
 800fcd8:	d9d3      	bls.n	800fc82 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800fcda:	4b2b      	ldr	r3, [pc, #172]	@ (800fd88 <calculateSPLQ31+0x594>)
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	4b2d      	ldr	r3, [pc, #180]	@ (800fd94 <calculateSPLQ31+0x5a0>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	18d2      	adds	r2, r2, r3
 800fce4:	4b2b      	ldr	r3, [pc, #172]	@ (800fd94 <calculateSPLQ31+0x5a0>)
 800fce6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800fce8:	4b26      	ldr	r3, [pc, #152]	@ (800fd84 <calculateSPLQ31+0x590>)
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	4b2a      	ldr	r3, [pc, #168]	@ (800fd98 <calculateSPLQ31+0x5a4>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	18d2      	adds	r2, r2, r3
 800fcf2:	4b29      	ldr	r3, [pc, #164]	@ (800fd98 <calculateSPLQ31+0x5a4>)
 800fcf4:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	228c      	movs	r2, #140	@ 0x8c
 800fcfa:	18ba      	adds	r2, r7, r2
 800fcfc:	6013      	str	r3, [r2, #0]
 800fcfe:	e025      	b.n	800fd4c <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800fd00:	4b22      	ldr	r3, [pc, #136]	@ (800fd8c <calculateSPLQ31+0x598>)
 800fd02:	208c      	movs	r0, #140	@ 0x8c
 800fd04:	183a      	adds	r2, r7, r0
 800fd06:	6812      	ldr	r2, [r2, #0]
 800fd08:	0092      	lsls	r2, r2, #2
 800fd0a:	58d2      	ldr	r2, [r2, r3]
 800fd0c:	4b23      	ldr	r3, [pc, #140]	@ (800fd9c <calculateSPLQ31+0x5a8>)
 800fd0e:	1839      	adds	r1, r7, r0
 800fd10:	6809      	ldr	r1, [r1, #0]
 800fd12:	0089      	lsls	r1, r1, #2
 800fd14:	58cb      	ldr	r3, [r1, r3]
 800fd16:	18d1      	adds	r1, r2, r3
 800fd18:	4b20      	ldr	r3, [pc, #128]	@ (800fd9c <calculateSPLQ31+0x5a8>)
 800fd1a:	183a      	adds	r2, r7, r0
 800fd1c:	6812      	ldr	r2, [r2, #0]
 800fd1e:	0092      	lsls	r2, r2, #2
 800fd20:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800fd22:	4b1b      	ldr	r3, [pc, #108]	@ (800fd90 <calculateSPLQ31+0x59c>)
 800fd24:	183a      	adds	r2, r7, r0
 800fd26:	6812      	ldr	r2, [r2, #0]
 800fd28:	0092      	lsls	r2, r2, #2
 800fd2a:	58d2      	ldr	r2, [r2, r3]
 800fd2c:	4b1c      	ldr	r3, [pc, #112]	@ (800fda0 <calculateSPLQ31+0x5ac>)
 800fd2e:	1839      	adds	r1, r7, r0
 800fd30:	6809      	ldr	r1, [r1, #0]
 800fd32:	0089      	lsls	r1, r1, #2
 800fd34:	58cb      	ldr	r3, [r1, r3]
 800fd36:	18d1      	adds	r1, r2, r3
 800fd38:	4b19      	ldr	r3, [pc, #100]	@ (800fda0 <calculateSPLQ31+0x5ac>)
 800fd3a:	183a      	adds	r2, r7, r0
 800fd3c:	6812      	ldr	r2, [r2, #0]
 800fd3e:	0092      	lsls	r2, r2, #2
 800fd40:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800fd42:	183b      	adds	r3, r7, r0
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	3301      	adds	r3, #1
 800fd48:	183a      	adds	r2, r7, r0
 800fd4a:	6013      	str	r3, [r2, #0]
 800fd4c:	238c      	movs	r3, #140	@ 0x8c
 800fd4e:	18fb      	adds	r3, r7, r3
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2b05      	cmp	r3, #5
 800fd54:	d9d4      	bls.n	800fd00 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800fd56:	4b13      	ldr	r3, [pc, #76]	@ (800fda4 <calculateSPLQ31+0x5b0>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	1c5a      	adds	r2, r3, #1
 800fd5c:	4b11      	ldr	r3, [pc, #68]	@ (800fda4 <calculateSPLQ31+0x5b0>)
 800fd5e:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800fd60:	4b10      	ldr	r3, [pc, #64]	@ (800fda4 <calculateSPLQ31+0x5b0>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	2b0f      	cmp	r3, #15
 800fd66:	d905      	bls.n	800fd74 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800fd68:	4b0f      	ldr	r3, [pc, #60]	@ (800fda8 <calculateSPLQ31+0x5b4>)
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800fd6e:	4b0f      	ldr	r3, [pc, #60]	@ (800fdac <calculateSPLQ31+0x5b8>)
 800fd70:	2200      	movs	r2, #0
 800fd72:	701a      	strb	r2, [r3, #0]
    }
}
 800fd74:	46c0      	nop			@ (mov r8, r8)
 800fd76:	46bd      	mov	sp, r7
 800fd78:	b02f      	add	sp, #188	@ 0xbc
 800fd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd7c:	200000d0 	.word	0x200000d0
 800fd80:	200000d4 	.word	0x200000d4
 800fd84:	20000fa4 	.word	0x20000fa4
 800fd88:	20000fa0 	.word	0x20000fa0
 800fd8c:	20000fa8 	.word	0x20000fa8
 800fd90:	20000fc0 	.word	0x20000fc0
 800fd94:	200019e8 	.word	0x200019e8
 800fd98:	200019ec 	.word	0x200019ec
 800fd9c:	200019f0 	.word	0x200019f0
 800fda0:	20001a08 	.word	0x20001a08
 800fda4:	20001a20 	.word	0x20001a20
 800fda8:	20000f95 	.word	0x20000f95
 800fdac:	20000f93 	.word	0x20000f93

0800fdb0 <resetSPLstate>:

static void resetSPLstate(void)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800fdb6:	4b11      	ldr	r3, [pc, #68]	@ (800fdfc <resetSPLstate+0x4c>)
 800fdb8:	2200      	movs	r2, #0
 800fdba:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800fdbc:	4b10      	ldr	r3, [pc, #64]	@ (800fe00 <resetSPLstate+0x50>)
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800fdc2:	4b10      	ldr	r3, [pc, #64]	@ (800fe04 <resetSPLstate+0x54>)
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fdc8:	2300      	movs	r3, #0
 800fdca:	607b      	str	r3, [r7, #4]
 800fdcc:	e00c      	b.n	800fde8 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800fdce:	4b0e      	ldr	r3, [pc, #56]	@ (800fe08 <resetSPLstate+0x58>)
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	0092      	lsls	r2, r2, #2
 800fdd4:	2100      	movs	r1, #0
 800fdd6:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800fdd8:	4b0c      	ldr	r3, [pc, #48]	@ (800fe0c <resetSPLstate+0x5c>)
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	0092      	lsls	r2, r2, #2
 800fdde:	2100      	movs	r1, #0
 800fde0:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	3301      	adds	r3, #1
 800fde6:	607b      	str	r3, [r7, #4]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2b05      	cmp	r3, #5
 800fdec:	d9ef      	bls.n	800fdce <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800fdee:	4b08      	ldr	r3, [pc, #32]	@ (800fe10 <resetSPLstate+0x60>)
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	701a      	strb	r2, [r3, #0]
}
 800fdf4:	46c0      	nop			@ (mov r8, r8)
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	b002      	add	sp, #8
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	200019e8 	.word	0x200019e8
 800fe00:	200019ec 	.word	0x200019ec
 800fe04:	20001a20 	.word	0x20001a20
 800fe08:	200019f0 	.word	0x200019f0
 800fe0c:	20001a08 	.word	0x20001a08
 800fe10:	20000f95 	.word	0x20000f95

0800fe14 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800fe14:	b5b0      	push	{r4, r5, r7, lr}
 800fe16:	b090      	sub	sp, #64	@ 0x40
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	0019      	movs	r1, r3
 800fe20:	1dfb      	adds	r3, r7, #7
 800fe22:	701a      	strb	r2, [r3, #0]
 800fe24:	1dbb      	adds	r3, r7, #6
 800fe26:	1c0a      	adds	r2, r1, #0
 800fe28:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800fe2a:	1dfb      	adds	r3, r7, #7
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d005      	beq.n	800fe3e <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800fe32:	4b3b      	ldr	r3, [pc, #236]	@ (800ff20 <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe34:	2200      	movs	r2, #0
 800fe36:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800fe38:	4b3a      	ldr	r3, [pc, #232]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x110>)
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800fe42:	2300      	movs	r3, #0
 800fe44:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800fe46:	2305      	movs	r3, #5
 800fe48:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe4e:	e040      	b.n	800fed2 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800fe50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	68fa      	ldr	r2, [r7, #12]
 800fe56:	18d3      	adds	r3, r2, r3
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5c:	409a      	lsls	r2, r3
 800fe5e:	0013      	movs	r3, r2
 800fe60:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800fe62:	4b30      	ldr	r3, [pc, #192]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x110>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	425a      	negs	r2, r3
 800fe68:	4b2e      	ldr	r3, [pc, #184]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x110>)
 800fe6a:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800fe6c:	2418      	movs	r4, #24
 800fe6e:	193a      	adds	r2, r7, r4
 800fe70:	492c      	ldr	r1, [pc, #176]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x110>)
 800fe72:	231c      	movs	r3, #28
 800fe74:	18f8      	adds	r0, r7, r3
 800fe76:	2301      	movs	r3, #1
 800fe78:	f012 f85e 	bl	8021f38 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800fe7c:	2514      	movs	r5, #20
 800fe7e:	197a      	adds	r2, r7, r5
 800fe80:	1939      	adds	r1, r7, r4
 800fe82:	4829      	ldr	r0, [pc, #164]	@ (800ff28 <getFilteredMaxAmplitudeQ31+0x114>)
 800fe84:	2301      	movs	r3, #1
 800fe86:	f012 f825 	bl	8021ed4 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800fe8a:	2410      	movs	r4, #16
 800fe8c:	193a      	adds	r2, r7, r4
 800fe8e:	4924      	ldr	r1, [pc, #144]	@ (800ff20 <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe90:	4826      	ldr	r0, [pc, #152]	@ (800ff2c <getFilteredMaxAmplitudeQ31+0x118>)
 800fe92:	2301      	movs	r3, #1
 800fe94:	f012 f81e 	bl	8021ed4 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800fe98:	4a21      	ldr	r2, [pc, #132]	@ (800ff20 <getFilteredMaxAmplitudeQ31+0x10c>)
 800fe9a:	1939      	adds	r1, r7, r4
 800fe9c:	1978      	adds	r0, r7, r5
 800fe9e:	2301      	movs	r3, #1
 800fea0:	f012 f84a 	bl	8021f38 <arm_add_q31>

        lastData = fx;
 800fea4:	69fa      	ldr	r2, [r7, #28]
 800fea6:	4b1f      	ldr	r3, [pc, #124]	@ (800ff24 <getFilteredMaxAmplitudeQ31+0x110>)
 800fea8:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800feaa:	4b1d      	ldr	r3, [pc, #116]	@ (800ff20 <getFilteredMaxAmplitudeQ31+0x10c>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800feb0:	429a      	cmp	r2, r3
 800feb2:	da03      	bge.n	800febc <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800feb4:	4b1a      	ldr	r3, [pc, #104]	@ (800ff20 <getFilteredMaxAmplitudeQ31+0x10c>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800feba:	e007      	b.n	800fecc <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800febc:	4b18      	ldr	r3, [pc, #96]	@ (800ff20 <getFilteredMaxAmplitudeQ31+0x10c>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fec2:	429a      	cmp	r2, r3
 800fec4:	dd02      	ble.n	800fecc <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800fec6:	4b16      	ldr	r3, [pc, #88]	@ (800ff20 <getFilteredMaxAmplitudeQ31+0x10c>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800fecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fece:	3301      	adds	r3, #1
 800fed0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fed2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d3ba      	bcc.n	800fe50 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800feda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fedc:	17da      	asrs	r2, r3, #31
 800fede:	189b      	adds	r3, r3, r2
 800fee0:	4053      	eors	r3, r2
 800fee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800fee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800fee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800feea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feec:	4293      	cmp	r3, r2
 800feee:	d200      	bcs.n	800fef2 <getFilteredMaxAmplitudeQ31+0xde>
 800fef0:	0013      	movs	r3, r2
 800fef2:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800fef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fef8:	40da      	lsrs	r2, r3
 800fefa:	0013      	movs	r3, r2
 800fefc:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800fefe:	1dbb      	adds	r3, r7, #6
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d007      	beq.n	800ff16 <getFilteredMaxAmplitudeQ31+0x102>
 800ff06:	4b0a      	ldr	r3, [pc, #40]	@ (800ff30 <getFilteredMaxAmplitudeQ31+0x11c>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	6a3a      	ldr	r2, [r7, #32]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d902      	bls.n	800ff16 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800ff10:	4b07      	ldr	r3, [pc, #28]	@ (800ff30 <getFilteredMaxAmplitudeQ31+0x11c>)
 800ff12:	6a3a      	ldr	r2, [r7, #32]
 800ff14:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800ff16:	6a3b      	ldr	r3, [r7, #32]
}
 800ff18:	0018      	movs	r0, r3
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	b010      	add	sp, #64	@ 0x40
 800ff1e:	bdb0      	pop	{r4, r5, r7, pc}
 800ff20:	20001e24 	.word	0x20001e24
 800ff24:	20001e28 	.word	0x20001e28
 800ff28:	0802b218 	.word	0x0802b218
 800ff2c:	0802b21c 	.word	0x0802b21c
 800ff30:	20000f9c 	.word	0x20000f9c

0800ff34 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b086      	sub	sp, #24
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800ff40:	4913      	ldr	r1, [pc, #76]	@ (800ff90 <floatToIntAndFrac2dp+0x5c>)
 800ff42:	68f8      	ldr	r0, [r7, #12]
 800ff44:	f7f1 f82c 	bl	8000fa0 <__aeabi_fmul>
 800ff48:	1c03      	adds	r3, r0, #0
 800ff4a:	1c18      	adds	r0, r3, #0
 800ff4c:	f016 fcc0 	bl	80268d0 <roundf>
 800ff50:	1c03      	adds	r3, r0, #0
 800ff52:	1c18      	adds	r0, r3, #0
 800ff54:	f7f0 fb62 	bl	800061c <__aeabi_f2uiz>
 800ff58:	0003      	movs	r3, r0
 800ff5a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	2164      	movs	r1, #100	@ 0x64
 800ff60:	0018      	movs	r0, r3
 800ff62:	f7f0 f91f 	bl	80001a4 <__udivsi3>
 800ff66:	0003      	movs	r3, r0
 800ff68:	001a      	movs	r2, r3
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	b2da      	uxtb	r2, r3
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	2164      	movs	r1, #100	@ 0x64
 800ff7a:	434b      	muls	r3, r1
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	1ad3      	subs	r3, r2, r3
 800ff80:	b2da      	uxtb	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	701a      	strb	r2, [r3, #0]
}
 800ff86:	46c0      	nop			@ (mov r8, r8)
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	b006      	add	sp, #24
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	46c0      	nop			@ (mov r8, r8)
 800ff90:	42c80000 	.word	0x42c80000

0800ff94 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800ffa0:	4914      	ldr	r1, [pc, #80]	@ (800fff4 <floatToIntAndFrac1dp+0x60>)
 800ffa2:	68f8      	ldr	r0, [r7, #12]
 800ffa4:	f7f0 fffc 	bl	8000fa0 <__aeabi_fmul>
 800ffa8:	1c03      	adds	r3, r0, #0
 800ffaa:	1c18      	adds	r0, r3, #0
 800ffac:	f016 fc90 	bl	80268d0 <roundf>
 800ffb0:	1c03      	adds	r3, r0, #0
 800ffb2:	1c18      	adds	r0, r3, #0
 800ffb4:	f7f0 fb32 	bl	800061c <__aeabi_f2uiz>
 800ffb8:	0003      	movs	r3, r0
 800ffba:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	210a      	movs	r1, #10
 800ffc0:	0018      	movs	r0, r3
 800ffc2:	f7f0 f8ef 	bl	80001a4 <__udivsi3>
 800ffc6:	0003      	movs	r3, r0
 800ffc8:	001a      	movs	r2, r3
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	b2da      	uxtb	r2, r3
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	1c19      	adds	r1, r3, #0
 800ffda:	0089      	lsls	r1, r1, #2
 800ffdc:	18cb      	adds	r3, r1, r3
 800ffde:	18db      	adds	r3, r3, r3
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	1ad3      	subs	r3, r2, r3
 800ffe4:	b2da      	uxtb	r2, r3
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	701a      	strb	r2, [r3, #0]
}
 800ffea:	46c0      	nop			@ (mov r8, r8)
 800ffec:	46bd      	mov	sp, r7
 800ffee:	b006      	add	sp, #24
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	46c0      	nop			@ (mov r8, r8)
 800fff4:	41200000 	.word	0x41200000

0800fff8 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800fff8:	b590      	push	{r4, r7, lr}
 800fffa:	b087      	sub	sp, #28
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	60f8      	str	r0, [r7, #12]
 8010000:	60b9      	str	r1, [r7, #8]
 8010002:	607a      	str	r2, [r7, #4]
 8010004:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f7f1 fae2 	bl	80015d0 <__aeabi_i2f>
 801000c:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 801000e:	6838      	ldr	r0, [r7, #0]
 8010010:	f7f1 fade 	bl	80015d0 <__aeabi_i2f>
 8010014:	1c03      	adds	r3, r0, #0
 8010016:	4918      	ldr	r1, [pc, #96]	@ (8010078 <sumToIntAverage+0x80>)
 8010018:	1c18      	adds	r0, r3, #0
 801001a:	f7f0 fddb 	bl	8000bd4 <__aeabi_fdiv>
 801001e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8010020:	1c19      	adds	r1, r3, #0
 8010022:	1c20      	adds	r0, r4, #0
 8010024:	f7f0 fc4c 	bl	80008c0 <__aeabi_fadd>
 8010028:	1c03      	adds	r3, r0, #0
 801002a:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 801002c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801002e:	f7f1 fb1b 	bl	8001668 <__aeabi_ui2f>
 8010032:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8010034:	1c19      	adds	r1, r3, #0
 8010036:	1c20      	adds	r0, r4, #0
 8010038:	f7f0 fdcc 	bl	8000bd4 <__aeabi_fdiv>
 801003c:	1c03      	adds	r3, r0, #0
 801003e:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 8010040:	2300      	movs	r3, #0
 8010042:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 8010044:	68ba      	ldr	r2, [r7, #8]
 8010046:	2310      	movs	r3, #16
 8010048:	18f9      	adds	r1, r7, r3
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	1c18      	adds	r0, r3, #0
 801004e:	f7ff ffa1 	bl	800ff94 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	2bff      	cmp	r3, #255	@ 0xff
 8010056:	d906      	bls.n	8010066 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	22ff      	movs	r2, #255	@ 0xff
 801005c:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	2209      	movs	r2, #9
 8010062:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8010064:	e003      	b.n	801006e <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	b2da      	uxtb	r2, r3
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	701a      	strb	r2, [r3, #0]
}
 801006e:	46c0      	nop			@ (mov r8, r8)
 8010070:	46bd      	mov	sp, r7
 8010072:	b007      	add	sp, #28
 8010074:	bd90      	pop	{r4, r7, pc}
 8010076:	46c0      	nop			@ (mov r8, r8)
 8010078:	41200000 	.word	0x41200000

0801007c <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b086      	sub	sp, #24
 8010080:	af00      	add	r7, sp, #0
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	607a      	str	r2, [r7, #4]
 8010088:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	2280      	movs	r2, #128	@ 0x80
 801008e:	0612      	lsls	r2, r2, #24
 8010090:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	4a18      	ldr	r2, [pc, #96]	@ (80100f8 <findMinMax+0x7c>)
 8010096:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8010098:	2300      	movs	r3, #0
 801009a:	617b      	str	r3, [r7, #20]
 801009c:	e022      	b.n	80100e4 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	009b      	lsls	r3, r3, #2
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	18d3      	adds	r3, r2, r3
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	da06      	bge.n	80100be <findMinMax+0x42>
        {
            min[0] = array[i];
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	009b      	lsls	r3, r3, #2
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	18d3      	adds	r3, r2, r3
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	009b      	lsls	r3, r3, #2
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	18d3      	adds	r3, r2, r3
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	dd06      	ble.n	80100de <findMinMax+0x62>
        {
            max[0] = array[i];
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	18d3      	adds	r3, r2, r3
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	3301      	adds	r3, #1
 80100e2:	617b      	str	r3, [r7, #20]
 80100e4:	697a      	ldr	r2, [r7, #20]
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d3d8      	bcc.n	801009e <findMinMax+0x22>
        }
    }
}
 80100ec:	46c0      	nop			@ (mov r8, r8)
 80100ee:	46c0      	nop			@ (mov r8, r8)
 80100f0:	46bd      	mov	sp, r7
 80100f2:	b006      	add	sp, #24
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	46c0      	nop			@ (mov r8, r8)
 80100f8:	7fffffff 	.word	0x7fffffff

080100fc <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 8010106:	2300      	movs	r3, #0
 8010108:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 801010a:	687a      	ldr	r2, [r7, #4]
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	429a      	cmp	r2, r3
 8010110:	d302      	bcc.n	8010118 <getPo2factor+0x1c>
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d107      	bne.n	8010128 <getPo2factor+0x2c>
    {
        return 0;
 8010118:	2300      	movs	r3, #0
 801011a:	e00d      	b.n	8010138 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	085b      	lsrs	r3, r3, #1
 8010120:	607b      	str	r3, [r7, #4]
        bitShift++;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	3301      	adds	r3, #1
 8010126:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	429a      	cmp	r2, r3
 801012e:	d2f5      	bcs.n	801011c <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	3b01      	subs	r3, #1
 8010134:	60fb      	str	r3, [r7, #12]
    return bitShift;
 8010136:	68fb      	ldr	r3, [r7, #12]
}
 8010138:	0018      	movs	r0, r3
 801013a:	46bd      	mov	sp, r7
 801013c:	b004      	add	sp, #16
 801013e:	bd80      	pop	{r7, pc}

08010140 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b086      	sub	sp, #24
 8010144:	af00      	add	r7, sp, #0
 8010146:	60f8      	str	r0, [r7, #12]
 8010148:	60b9      	str	r1, [r7, #8]
 801014a:	607a      	str	r2, [r7, #4]
 801014c:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	f7f1 fa8a 	bl	8001668 <__aeabi_ui2f>
 8010154:	1c03      	adds	r3, r0, #0
 8010156:	1c19      	adds	r1, r3, #0
 8010158:	68b8      	ldr	r0, [r7, #8]
 801015a:	f7f0 ff21 	bl	8000fa0 <__aeabi_fmul>
 801015e:	1c03      	adds	r3, r0, #0
 8010160:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 8010162:	2300      	movs	r3, #0
 8010164:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8010166:	683a      	ldr	r2, [r7, #0]
 8010168:	2310      	movs	r3, #16
 801016a:	18f9      	adds	r1, r7, r3
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	1c18      	adds	r0, r3, #0
 8010170:	f7ff fee0 	bl	800ff34 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	b29a      	uxth	r2, r3
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	801a      	strh	r2, [r3, #0]
}
 801017c:	46c0      	nop			@ (mov r8, r8)
 801017e:	46bd      	mov	sp, r7
 8010180:	b006      	add	sp, #24
 8010182:	bd80      	pop	{r7, pc}

08010184 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b084      	sub	sp, #16
 8010188:	af00      	add	r7, sp, #0
 801018a:	60b8      	str	r0, [r7, #8]
 801018c:	60f9      	str	r1, [r7, #12]
 801018e:	607a      	str	r2, [r7, #4]
 8010190:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 8010192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010194:	6a3a      	ldr	r2, [r7, #32]
 8010196:	68b8      	ldr	r0, [r7, #8]
 8010198:	68f9      	ldr	r1, [r7, #12]
 801019a:	f7fa f863 	bl	800a264 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 801019e:	6a3b      	ldr	r3, [r7, #32]
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	18d2      	adds	r2, r2, r3
 80101a6:	69bb      	ldr	r3, [r7, #24]
 80101a8:	18d2      	adds	r2, r2, r3
 80101aa:	6a3b      	ldr	r3, [r7, #32]
 80101ac:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 80101ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	18d2      	adds	r2, r2, r3
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	18d2      	adds	r2, r2, r3
 80101ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101bc:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 80101be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101c0:	6a3b      	ldr	r3, [r7, #32]
 80101c2:	0011      	movs	r1, r2
 80101c4:	0018      	movs	r0, r3
 80101c6:	f7fa f8dd 	bl	800a384 <correctIntFracNumber>
}
 80101ca:	46c0      	nop			@ (mov r8, r8)
 80101cc:	46bd      	mov	sp, r7
 80101ce:	b004      	add	sp, #16
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b086      	sub	sp, #24
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	60f8      	str	r0, [r7, #12]
 80101da:	60b9      	str	r1, [r7, #8]
 80101dc:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 80101de:	2300      	movs	r3, #0
 80101e0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80101e2:	2300      	movs	r3, #0
 80101e4:	613b      	str	r3, [r7, #16]
 80101e6:	e019      	b.n	801021c <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	005b      	lsls	r3, r3, #1
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	18d3      	adds	r3, r2, r3
 80101f0:	881b      	ldrh	r3, [r3, #0]
 80101f2:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80101f4:	693a      	ldr	r2, [r7, #16]
 80101f6:	3201      	adds	r2, #1
 80101f8:	0052      	lsls	r2, r2, #1
 80101fa:	68f9      	ldr	r1, [r7, #12]
 80101fc:	188a      	adds	r2, r1, r2
 80101fe:	8812      	ldrh	r2, [r2, #0]
 8010200:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8010202:	0019      	movs	r1, r3
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 801020c:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801020e:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	3301      	adds	r3, #1
 8010214:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	3304      	adds	r3, #4
 801021a:	613b      	str	r3, [r7, #16]
 801021c:	693a      	ldr	r2, [r7, #16]
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	429a      	cmp	r2, r3
 8010222:	d3e1      	bcc.n	80101e8 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8010224:	46c0      	nop			@ (mov r8, r8)
 8010226:	46c0      	nop			@ (mov r8, r8)
 8010228:	46bd      	mov	sp, r7
 801022a:	b006      	add	sp, #24
 801022c:	bd80      	pop	{r7, pc}
	...

08010230 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 8010230:	b580      	push	{r7, lr}
 8010232:	af00      	add	r7, sp, #0
  init = false;
 8010234:	4b02      	ldr	r3, [pc, #8]	@ (8010240 <InitDone+0x10>)
 8010236:	2200      	movs	r2, #0
 8010238:	701a      	strb	r2, [r3, #0]
}
 801023a:	46c0      	nop			@ (mov r8, r8)
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}
 8010240:	200000dc 	.word	0x200000dc

08010244 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 801024a:	f7f7 fd51 	bl	8007cf0 <ReadBatteryVoltage>
 801024e:	1c02      	adds	r2, r0, #0
 8010250:	4b25      	ldr	r3, [pc, #148]	@ (80102e8 <batteryChargeCheck+0xa4>)
 8010252:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 8010254:	4b24      	ldr	r3, [pc, #144]	@ (80102e8 <batteryChargeCheck+0xa4>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	4924      	ldr	r1, [pc, #144]	@ (80102ec <batteryChargeCheck+0xa8>)
 801025a:	1c18      	adds	r0, r3, #0
 801025c:	f7f0 f968 	bl	8000530 <__aeabi_fcmplt>
 8010260:	1e03      	subs	r3, r0, #0
 8010262:	d002      	beq.n	801026a <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 8010264:	1dfb      	adds	r3, r7, #7
 8010266:	2200      	movs	r2, #0
 8010268:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 801026a:	4b1f      	ldr	r3, [pc, #124]	@ (80102e8 <batteryChargeCheck+0xa4>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	491f      	ldr	r1, [pc, #124]	@ (80102ec <batteryChargeCheck+0xa8>)
 8010270:	1c18      	adds	r0, r3, #0
 8010272:	f7f0 f97b 	bl	800056c <__aeabi_fcmpge>
 8010276:	1e03      	subs	r3, r0, #0
 8010278:	d00d      	beq.n	8010296 <batteryChargeCheck+0x52>
 801027a:	4b1b      	ldr	r3, [pc, #108]	@ (80102e8 <batteryChargeCheck+0xa4>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	1c18      	adds	r0, r3, #0
 8010280:	f7f3 f8f0 	bl	8003464 <__aeabi_f2d>
 8010284:	4a1a      	ldr	r2, [pc, #104]	@ (80102f0 <batteryChargeCheck+0xac>)
 8010286:	4b1b      	ldr	r3, [pc, #108]	@ (80102f4 <batteryChargeCheck+0xb0>)
 8010288:	f7f0 f918 	bl	80004bc <__aeabi_dcmplt>
 801028c:	1e03      	subs	r3, r0, #0
 801028e:	d002      	beq.n	8010296 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 8010290:	1dfb      	adds	r3, r7, #7
 8010292:	2201      	movs	r2, #1
 8010294:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 8010296:	4b14      	ldr	r3, [pc, #80]	@ (80102e8 <batteryChargeCheck+0xa4>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	1c18      	adds	r0, r3, #0
 801029c:	f7f3 f8e2 	bl	8003464 <__aeabi_f2d>
 80102a0:	4a13      	ldr	r2, [pc, #76]	@ (80102f0 <batteryChargeCheck+0xac>)
 80102a2:	4b14      	ldr	r3, [pc, #80]	@ (80102f4 <batteryChargeCheck+0xb0>)
 80102a4:	f7f0 f928 	bl	80004f8 <__aeabi_dcmpge>
 80102a8:	1e03      	subs	r3, r0, #0
 80102aa:	d00b      	beq.n	80102c4 <batteryChargeCheck+0x80>
 80102ac:	4b0e      	ldr	r3, [pc, #56]	@ (80102e8 <batteryChargeCheck+0xa4>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2181      	movs	r1, #129	@ 0x81
 80102b2:	05c9      	lsls	r1, r1, #23
 80102b4:	1c18      	adds	r0, r3, #0
 80102b6:	f7f0 f93b 	bl	8000530 <__aeabi_fcmplt>
 80102ba:	1e03      	subs	r3, r0, #0
 80102bc:	d002      	beq.n	80102c4 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 80102be:	1dfb      	adds	r3, r7, #7
 80102c0:	2202      	movs	r2, #2
 80102c2:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 80102c4:	4b08      	ldr	r3, [pc, #32]	@ (80102e8 <batteryChargeCheck+0xa4>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	2181      	movs	r1, #129	@ 0x81
 80102ca:	05c9      	lsls	r1, r1, #23
 80102cc:	1c18      	adds	r0, r3, #0
 80102ce:	f7f0 f94d 	bl	800056c <__aeabi_fcmpge>
 80102d2:	1e03      	subs	r3, r0, #0
 80102d4:	d002      	beq.n	80102dc <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 80102d6:	1dfb      	adds	r3, r7, #7
 80102d8:	2203      	movs	r2, #3
 80102da:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 80102dc:	1dfb      	adds	r3, r7, #7
 80102de:	781b      	ldrb	r3, [r3, #0]
}
 80102e0:	0018      	movs	r0, r3
 80102e2:	46bd      	mov	sp, r7
 80102e4:	b002      	add	sp, #8
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	20001e3c 	.word	0x20001e3c
 80102ec:	40600000 	.word	0x40600000
 80102f0:	9999999a 	.word	0x9999999a
 80102f4:	400d9999 	.word	0x400d9999

080102f8 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 80102f8:	b5b0      	push	{r4, r5, r7, lr}
 80102fa:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 80102fc:	f7f7 fd5a 	bl	8007db4 <ReadSolarVoltage>
 8010300:	0003      	movs	r3, r0
 8010302:	001a      	movs	r2, r3
 8010304:	4b1a      	ldr	r3, [pc, #104]	@ (8010370 <Calculate_LED_ON+0x78>)
 8010306:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8010308:	4b19      	ldr	r3, [pc, #100]	@ (8010370 <Calculate_LED_ON+0x78>)
 801030a:	881b      	ldrh	r3, [r3, #0]
 801030c:	4a19      	ldr	r2, [pc, #100]	@ (8010374 <Calculate_LED_ON+0x7c>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d802      	bhi.n	8010318 <Calculate_LED_ON+0x20>
    solmV = 2900;
 8010312:	4b17      	ldr	r3, [pc, #92]	@ (8010370 <Calculate_LED_ON+0x78>)
 8010314:	4a18      	ldr	r2, [pc, #96]	@ (8010378 <Calculate_LED_ON+0x80>)
 8010316:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8010318:	4b15      	ldr	r3, [pc, #84]	@ (8010370 <Calculate_LED_ON+0x78>)
 801031a:	881b      	ldrh	r3, [r3, #0]
 801031c:	4a17      	ldr	r2, [pc, #92]	@ (801037c <Calculate_LED_ON+0x84>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d902      	bls.n	8010328 <Calculate_LED_ON+0x30>
    solmV = 4700;
 8010322:	4b13      	ldr	r3, [pc, #76]	@ (8010370 <Calculate_LED_ON+0x78>)
 8010324:	4a15      	ldr	r2, [pc, #84]	@ (801037c <Calculate_LED_ON+0x84>)
 8010326:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8010328:	4b11      	ldr	r3, [pc, #68]	@ (8010370 <Calculate_LED_ON+0x78>)
 801032a:	881b      	ldrh	r3, [r3, #0]
 801032c:	0018      	movs	r0, r3
 801032e:	f7f3 f847 	bl	80033c0 <__aeabi_i2d>
 8010332:	0004      	movs	r4, r0
 8010334:	000d      	movs	r5, r1
 8010336:	4b0e      	ldr	r3, [pc, #56]	@ (8010370 <Calculate_LED_ON+0x78>)
 8010338:	881b      	ldrh	r3, [r3, #0]
 801033a:	001a      	movs	r2, r3
 801033c:	4b10      	ldr	r3, [pc, #64]	@ (8010380 <Calculate_LED_ON+0x88>)
 801033e:	1a9b      	subs	r3, r3, r2
 8010340:	0018      	movs	r0, r3
 8010342:	f7f3 f83d 	bl	80033c0 <__aeabi_i2d>
 8010346:	2200      	movs	r2, #0
 8010348:	4b0e      	ldr	r3, [pc, #56]	@ (8010384 <Calculate_LED_ON+0x8c>)
 801034a:	f7f2 f977 	bl	800263c <__aeabi_dmul>
 801034e:	0002      	movs	r2, r0
 8010350:	000b      	movs	r3, r1
 8010352:	0020      	movs	r0, r4
 8010354:	0029      	movs	r1, r5
 8010356:	f7f1 f9c9 	bl	80016ec <__aeabi_dadd>
 801035a:	0002      	movs	r2, r0
 801035c:	000b      	movs	r3, r1
 801035e:	0010      	movs	r0, r2
 8010360:	0019      	movs	r1, r3
 8010362:	f7f0 f973 	bl	800064c <__aeabi_d2uiz>
 8010366:	0003      	movs	r3, r0
 8010368:	b29b      	uxth	r3, r3
}
 801036a:	0018      	movs	r0, r3
 801036c:	46bd      	mov	sp, r7
 801036e:	bdb0      	pop	{r4, r5, r7, pc}
 8010370:	20001e40 	.word	0x20001e40
 8010374:	00000b53 	.word	0x00000b53
 8010378:	00000b54 	.word	0x00000b54
 801037c:	0000125c 	.word	0x0000125c
 8010380:	00000dee 	.word	0x00000dee
 8010384:	3ff80000 	.word	0x3ff80000

08010388 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8010388:	b590      	push	{r4, r7, lr}
 801038a:	b083      	sub	sp, #12
 801038c:	af00      	add	r7, sp, #0
 801038e:	0004      	movs	r4, r0
 8010390:	0008      	movs	r0, r1
 8010392:	0011      	movs	r1, r2
 8010394:	1dbb      	adds	r3, r7, #6
 8010396:	1c22      	adds	r2, r4, #0
 8010398:	801a      	strh	r2, [r3, #0]
 801039a:	1d3b      	adds	r3, r7, #4
 801039c:	1c02      	adds	r2, r0, #0
 801039e:	801a      	strh	r2, [r3, #0]
 80103a0:	1cbb      	adds	r3, r7, #2
 80103a2:	1c0a      	adds	r2, r1, #0
 80103a4:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 80103a6:	4b0f      	ldr	r3, [pc, #60]	@ (80103e4 <SetStatusLED+0x5c>)
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d107      	bne.n	80103be <SetStatusLED+0x36>
 80103ae:	4b0e      	ldr	r3, [pc, #56]	@ (80103e8 <SetStatusLED+0x60>)
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d103      	bne.n	80103be <SetStatusLED+0x36>
 80103b6:	4b0d      	ldr	r3, [pc, #52]	@ (80103ec <SetStatusLED+0x64>)
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d00e      	beq.n	80103dc <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 80103be:	2380      	movs	r3, #128	@ 0x80
 80103c0:	05db      	lsls	r3, r3, #23
 80103c2:	1dba      	adds	r2, r7, #6
 80103c4:	8812      	ldrh	r2, [r2, #0]
 80103c6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 80103c8:	2380      	movs	r3, #128	@ 0x80
 80103ca:	05db      	lsls	r3, r3, #23
 80103cc:	1d3a      	adds	r2, r7, #4
 80103ce:	8812      	ldrh	r2, [r2, #0]
 80103d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 80103d2:	2380      	movs	r3, #128	@ 0x80
 80103d4:	05db      	lsls	r3, r3, #23
 80103d6:	1cba      	adds	r2, r7, #2
 80103d8:	8812      	ldrh	r2, [r2, #0]
 80103da:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80103dc:	46c0      	nop			@ (mov r8, r8)
 80103de:	46bd      	mov	sp, r7
 80103e0:	b003      	add	sp, #12
 80103e2:	bd90      	pop	{r4, r7, pc}
 80103e4:	20001e2d 	.word	0x20001e2d
 80103e8:	200000dc 	.word	0x200000dc
 80103ec:	20001e2e 	.word	0x20001e2e

080103f0 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 80103f0:	b590      	push	{r4, r7, lr}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	0004      	movs	r4, r0
 80103f8:	0008      	movs	r0, r1
 80103fa:	0011      	movs	r1, r2
 80103fc:	1dfb      	adds	r3, r7, #7
 80103fe:	1c22      	adds	r2, r4, #0
 8010400:	701a      	strb	r2, [r3, #0]
 8010402:	1dbb      	adds	r3, r7, #6
 8010404:	1c02      	adds	r2, r0, #0
 8010406:	701a      	strb	r2, [r3, #0]
 8010408:	1d7b      	adds	r3, r7, #5
 801040a:	1c0a      	adds	r2, r1, #0
 801040c:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 801040e:	4b19      	ldr	r3, [pc, #100]	@ (8010474 <SetDBLED+0x84>)
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d107      	bne.n	8010426 <SetDBLED+0x36>
 8010416:	4b18      	ldr	r3, [pc, #96]	@ (8010478 <SetDBLED+0x88>)
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d103      	bne.n	8010426 <SetDBLED+0x36>
 801041e:	4b17      	ldr	r3, [pc, #92]	@ (801047c <SetDBLED+0x8c>)
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d022      	beq.n	801046c <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8010426:	1dfb      	adds	r3, r7, #7
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	2201      	movs	r2, #1
 801042c:	4053      	eors	r3, r2
 801042e:	b2db      	uxtb	r3, r3
 8010430:	001a      	movs	r2, r3
 8010432:	4b13      	ldr	r3, [pc, #76]	@ (8010480 <SetDBLED+0x90>)
 8010434:	2101      	movs	r1, #1
 8010436:	0018      	movs	r0, r3
 8010438:	f003 f8eb 	bl	8013612 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 801043c:	1dbb      	adds	r3, r7, #6
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	2201      	movs	r2, #1
 8010442:	4053      	eors	r3, r2
 8010444:	b2db      	uxtb	r3, r3
 8010446:	001a      	movs	r2, r3
 8010448:	2380      	movs	r3, #128	@ 0x80
 801044a:	005b      	lsls	r3, r3, #1
 801044c:	480c      	ldr	r0, [pc, #48]	@ (8010480 <SetDBLED+0x90>)
 801044e:	0019      	movs	r1, r3
 8010450:	f003 f8df 	bl	8013612 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8010454:	1d7b      	adds	r3, r7, #5
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	2201      	movs	r2, #1
 801045a:	4053      	eors	r3, r2
 801045c:	b2db      	uxtb	r3, r3
 801045e:	001a      	movs	r2, r3
 8010460:	2380      	movs	r3, #128	@ 0x80
 8010462:	009b      	lsls	r3, r3, #2
 8010464:	4806      	ldr	r0, [pc, #24]	@ (8010480 <SetDBLED+0x90>)
 8010466:	0019      	movs	r1, r3
 8010468:	f003 f8d3 	bl	8013612 <HAL_GPIO_WritePin>
  }
}
 801046c:	46c0      	nop			@ (mov r8, r8)
 801046e:	46bd      	mov	sp, r7
 8010470:	b003      	add	sp, #12
 8010472:	bd90      	pop	{r4, r7, pc}
 8010474:	20001e2d 	.word	0x20001e2d
 8010478:	200000dc 	.word	0x200000dc
 801047c:	20001e2e 	.word	0x20001e2e
 8010480:	50000400 	.word	0x50000400

08010484 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8010484:	b590      	push	{r4, r7, lr}
 8010486:	b083      	sub	sp, #12
 8010488:	af00      	add	r7, sp, #0
 801048a:	0004      	movs	r4, r0
 801048c:	0008      	movs	r0, r1
 801048e:	0011      	movs	r1, r2
 8010490:	1dbb      	adds	r3, r7, #6
 8010492:	1c22      	adds	r2, r4, #0
 8010494:	801a      	strh	r2, [r3, #0]
 8010496:	1d3b      	adds	r3, r7, #4
 8010498:	1c02      	adds	r2, r0, #0
 801049a:	801a      	strh	r2, [r3, #0]
 801049c:	1cbb      	adds	r3, r7, #2
 801049e:	1c0a      	adds	r2, r1, #0
 80104a0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 80104a2:	4b0e      	ldr	r3, [pc, #56]	@ (80104dc <SetVocLED+0x58>)
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d107      	bne.n	80104ba <SetVocLED+0x36>
 80104aa:	4b0d      	ldr	r3, [pc, #52]	@ (80104e0 <SetVocLED+0x5c>)
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d103      	bne.n	80104ba <SetVocLED+0x36>
 80104b2:	4b0c      	ldr	r3, [pc, #48]	@ (80104e4 <SetVocLED+0x60>)
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d00b      	beq.n	80104d2 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 80104ba:	4b0b      	ldr	r3, [pc, #44]	@ (80104e8 <SetVocLED+0x64>)
 80104bc:	1dba      	adds	r2, r7, #6
 80104be:	8812      	ldrh	r2, [r2, #0]
 80104c0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 80104c2:	4b09      	ldr	r3, [pc, #36]	@ (80104e8 <SetVocLED+0x64>)
 80104c4:	1d3a      	adds	r2, r7, #4
 80104c6:	8812      	ldrh	r2, [r2, #0]
 80104c8:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 80104ca:	4b07      	ldr	r3, [pc, #28]	@ (80104e8 <SetVocLED+0x64>)
 80104cc:	1cba      	adds	r2, r7, #2
 80104ce:	8812      	ldrh	r2, [r2, #0]
 80104d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80104d2:	46c0      	nop			@ (mov r8, r8)
 80104d4:	46bd      	mov	sp, r7
 80104d6:	b003      	add	sp, #12
 80104d8:	bd90      	pop	{r4, r7, pc}
 80104da:	46c0      	nop			@ (mov r8, r8)
 80104dc:	20001e2d 	.word	0x20001e2d
 80104e0:	200000dc 	.word	0x200000dc
 80104e4:	20001e2e 	.word	0x20001e2e
 80104e8:	40000400 	.word	0x40000400

080104ec <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 80104ec:	b580      	push	{r7, lr}
 80104ee:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80104f0:	4b08      	ldr	r3, [pc, #32]	@ (8010514 <SetMeasurementIndicator+0x28>)
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d103      	bne.n	8010500 <SetMeasurementIndicator+0x14>
 80104f8:	4b07      	ldr	r3, [pc, #28]	@ (8010518 <SetMeasurementIndicator+0x2c>)
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d006      	beq.n	801050e <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8010500:	f7ff fefa 	bl	80102f8 <Calculate_LED_ON>
 8010504:	0003      	movs	r3, r0
 8010506:	001a      	movs	r2, r3
 8010508:	2380      	movs	r3, #128	@ 0x80
 801050a:	05db      	lsls	r3, r3, #23
 801050c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801050e:	46c0      	nop			@ (mov r8, r8)
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}
 8010514:	20001e2d 	.word	0x20001e2d
 8010518:	20001e2e 	.word	0x20001e2e

0801051c <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 801051c:	b580      	push	{r7, lr}
 801051e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8010520:	4b07      	ldr	r3, [pc, #28]	@ (8010540 <ResetMeasurementIndicator+0x24>)
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d103      	bne.n	8010530 <ResetMeasurementIndicator+0x14>
 8010528:	4b06      	ldr	r3, [pc, #24]	@ (8010544 <ResetMeasurementIndicator+0x28>)
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d004      	beq.n	801053a <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8010530:	2380      	movs	r3, #128	@ 0x80
 8010532:	05db      	lsls	r3, r3, #23
 8010534:	22fa      	movs	r2, #250	@ 0xfa
 8010536:	0112      	lsls	r2, r2, #4
 8010538:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 801053a:	46c0      	nop			@ (mov r8, r8)
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	20001e2d 	.word	0x20001e2d
 8010544:	20001e2e 	.word	0x20001e2e

08010548 <SetMICIndicator>:
void SetMICIndicator(){
 8010548:	b580      	push	{r7, lr}
 801054a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801054c:	4b19      	ldr	r3, [pc, #100]	@ (80105b4 <SetMICIndicator+0x6c>)
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d103      	bne.n	801055c <SetMICIndicator+0x14>
 8010554:	4b18      	ldr	r3, [pc, #96]	@ (80105b8 <SetMICIndicator+0x70>)
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d007      	beq.n	801056c <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 801055c:	f7ff fecc 	bl	80102f8 <Calculate_LED_ON>
 8010560:	0003      	movs	r3, r0
 8010562:	001a      	movs	r2, r3
 8010564:	2380      	movs	r3, #128	@ 0x80
 8010566:	05db      	lsls	r3, r3, #23
 8010568:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 801056a:	e01f      	b.n	80105ac <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 801056c:	4b13      	ldr	r3, [pc, #76]	@ (80105bc <SetMICIndicator+0x74>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	1c18      	adds	r0, r3, #0
 8010572:	f7f2 ff77 	bl	8003464 <__aeabi_f2d>
 8010576:	4a12      	ldr	r2, [pc, #72]	@ (80105c0 <SetMICIndicator+0x78>)
 8010578:	4b12      	ldr	r3, [pc, #72]	@ (80105c4 <SetMICIndicator+0x7c>)
 801057a:	f7ef ffb3 	bl	80004e4 <__aeabi_dcmpgt>
 801057e:	1e03      	subs	r3, r0, #0
 8010580:	d00a      	beq.n	8010598 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8010582:	f7ff feb9 	bl	80102f8 <Calculate_LED_ON>
 8010586:	0003      	movs	r3, r0
 8010588:	001a      	movs	r2, r3
 801058a:	2380      	movs	r3, #128	@ 0x80
 801058c:	05db      	lsls	r3, r3, #23
 801058e:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8010590:	4b0d      	ldr	r3, [pc, #52]	@ (80105c8 <SetMICIndicator+0x80>)
 8010592:	2202      	movs	r2, #2
 8010594:	701a      	strb	r2, [r3, #0]
}
 8010596:	e009      	b.n	80105ac <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8010598:	f7ff feae 	bl	80102f8 <Calculate_LED_ON>
 801059c:	0003      	movs	r3, r0
 801059e:	001a      	movs	r2, r3
 80105a0:	2380      	movs	r3, #128	@ 0x80
 80105a2:	05db      	lsls	r3, r3, #23
 80105a4:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 80105a6:	4b08      	ldr	r3, [pc, #32]	@ (80105c8 <SetMICIndicator+0x80>)
 80105a8:	2201      	movs	r2, #1
 80105aa:	701a      	strb	r2, [r3, #0]
}
 80105ac:	46c0      	nop			@ (mov r8, r8)
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	46c0      	nop			@ (mov r8, r8)
 80105b4:	20001e2d 	.word	0x20001e2d
 80105b8:	20001e2e 	.word	0x20001e2e
 80105bc:	20001e3c 	.word	0x20001e3c
 80105c0:	9999999a 	.word	0x9999999a
 80105c4:	400d9999 	.word	0x400d9999
 80105c8:	20001e30 	.word	0x20001e30

080105cc <ResetMICIndicator>:
void ResetMICIndicator(){
 80105cc:	b580      	push	{r7, lr}
 80105ce:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80105d0:	4b0f      	ldr	r3, [pc, #60]	@ (8010610 <ResetMICIndicator+0x44>)
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d103      	bne.n	80105e0 <ResetMICIndicator+0x14>
 80105d8:	4b0e      	ldr	r3, [pc, #56]	@ (8010614 <ResetMICIndicator+0x48>)
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d005      	beq.n	80105ec <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 80105e0:	2380      	movs	r3, #128	@ 0x80
 80105e2:	05db      	lsls	r3, r3, #23
 80105e4:	22fa      	movs	r2, #250	@ 0xfa
 80105e6:	0112      	lsls	r2, r2, #4
 80105e8:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 80105ea:	e00e      	b.n	801060a <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 80105ec:	4b0a      	ldr	r3, [pc, #40]	@ (8010618 <ResetMICIndicator+0x4c>)
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	2b02      	cmp	r3, #2
 80105f2:	d105      	bne.n	8010600 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 80105f4:	2380      	movs	r3, #128	@ 0x80
 80105f6:	05db      	lsls	r3, r3, #23
 80105f8:	22fa      	movs	r2, #250	@ 0xfa
 80105fa:	0112      	lsls	r2, r2, #4
 80105fc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80105fe:	e004      	b.n	801060a <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8010600:	2380      	movs	r3, #128	@ 0x80
 8010602:	05db      	lsls	r3, r3, #23
 8010604:	22fa      	movs	r2, #250	@ 0xfa
 8010606:	0112      	lsls	r2, r2, #4
 8010608:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801060a:	46c0      	nop			@ (mov r8, r8)
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	20001e2d 	.word	0x20001e2d
 8010614:	20001e2e 	.word	0x20001e2e
 8010618:	20001e30 	.word	0x20001e30

0801061c <SetESPIndicator>:
void SetESPIndicator(){
 801061c:	b580      	push	{r7, lr}
 801061e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8010620:	4b08      	ldr	r3, [pc, #32]	@ (8010644 <SetESPIndicator+0x28>)
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d103      	bne.n	8010630 <SetESPIndicator+0x14>
 8010628:	4b07      	ldr	r3, [pc, #28]	@ (8010648 <SetESPIndicator+0x2c>)
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d006      	beq.n	801063e <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8010630:	f7ff fe62 	bl	80102f8 <Calculate_LED_ON>
 8010634:	0003      	movs	r3, r0
 8010636:	001a      	movs	r2, r3
 8010638:	2380      	movs	r3, #128	@ 0x80
 801063a:	05db      	lsls	r3, r3, #23
 801063c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801063e:	46c0      	nop			@ (mov r8, r8)
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}
 8010644:	20001e2d 	.word	0x20001e2d
 8010648:	20001e2e 	.word	0x20001e2e

0801064c <ResetESPIndicator>:
void ResetESPIndicator(){
 801064c:	b580      	push	{r7, lr}
 801064e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8010650:	4b07      	ldr	r3, [pc, #28]	@ (8010670 <ResetESPIndicator+0x24>)
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d103      	bne.n	8010660 <ResetESPIndicator+0x14>
 8010658:	4b06      	ldr	r3, [pc, #24]	@ (8010674 <ResetESPIndicator+0x28>)
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d004      	beq.n	801066a <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8010660:	2380      	movs	r3, #128	@ 0x80
 8010662:	05db      	lsls	r3, r3, #23
 8010664:	22fa      	movs	r2, #250	@ 0xfa
 8010666:	0112      	lsls	r2, r2, #4
 8010668:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 801066a:	46c0      	nop			@ (mov r8, r8)
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	20001e2d 	.word	0x20001e2d
 8010674:	20001e2e 	.word	0x20001e2e

08010678 <SetPMIndicator>:

void SetPMIndicator() {
 8010678:	b580      	push	{r7, lr}
 801067a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 801067c:	4b0f      	ldr	r3, [pc, #60]	@ (80106bc <SetPMIndicator+0x44>)
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d103      	bne.n	801068c <SetPMIndicator+0x14>
 8010684:	4b0e      	ldr	r3, [pc, #56]	@ (80106c0 <SetPMIndicator+0x48>)
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d014      	beq.n	80106b6 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 801068c:	f7ff fe34 	bl	80102f8 <Calculate_LED_ON>
 8010690:	0003      	movs	r3, r0
 8010692:	001a      	movs	r2, r3
 8010694:	2380      	movs	r3, #128	@ 0x80
 8010696:	05db      	lsls	r3, r3, #23
 8010698:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 801069a:	f7ff fe2d 	bl	80102f8 <Calculate_LED_ON>
 801069e:	0003      	movs	r3, r0
 80106a0:	001a      	movs	r2, r3
 80106a2:	2380      	movs	r3, #128	@ 0x80
 80106a4:	05db      	lsls	r3, r3, #23
 80106a6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 80106a8:	f7ff fe26 	bl	80102f8 <Calculate_LED_ON>
 80106ac:	0003      	movs	r3, r0
 80106ae:	001a      	movs	r2, r3
 80106b0:	2380      	movs	r3, #128	@ 0x80
 80106b2:	05db      	lsls	r3, r3, #23
 80106b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80106b6:	46c0      	nop			@ (mov r8, r8)
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}
 80106bc:	20001e2d 	.word	0x20001e2d
 80106c0:	20001e2e 	.word	0x20001e2e

080106c4 <ResetPMIndicator>:

void ResetPMIndicator() {
 80106c4:	b580      	push	{r7, lr}
 80106c6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 80106c8:	4b0c      	ldr	r3, [pc, #48]	@ (80106fc <ResetPMIndicator+0x38>)
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d103      	bne.n	80106d8 <ResetPMIndicator+0x14>
 80106d0:	4b0b      	ldr	r3, [pc, #44]	@ (8010700 <ResetPMIndicator+0x3c>)
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00e      	beq.n	80106f6 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 80106d8:	2380      	movs	r3, #128	@ 0x80
 80106da:	05db      	lsls	r3, r3, #23
 80106dc:	22fa      	movs	r2, #250	@ 0xfa
 80106de:	0112      	lsls	r2, r2, #4
 80106e0:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 80106e2:	2380      	movs	r3, #128	@ 0x80
 80106e4:	05db      	lsls	r3, r3, #23
 80106e6:	22fa      	movs	r2, #250	@ 0xfa
 80106e8:	0112      	lsls	r2, r2, #4
 80106ea:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 80106ec:	2380      	movs	r3, #128	@ 0x80
 80106ee:	05db      	lsls	r3, r3, #23
 80106f0:	22fa      	movs	r2, #250	@ 0xfa
 80106f2:	0112      	lsls	r2, r2, #4
 80106f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 80106f6:	46c0      	nop			@ (mov r8, r8)
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}
 80106fc:	20001e2d 	.word	0x20001e2d
 8010700:	20001e2e 	.word	0x20001e2e

08010704 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8010704:	b580      	push	{r7, lr}
 8010706:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8010708:	23fa      	movs	r3, #250	@ 0xfa
 801070a:	011a      	lsls	r2, r3, #4
 801070c:	23fa      	movs	r3, #250	@ 0xfa
 801070e:	0119      	lsls	r1, r3, #4
 8010710:	23fa      	movs	r3, #250	@ 0xfa
 8010712:	011b      	lsls	r3, r3, #4
 8010714:	0018      	movs	r0, r3
 8010716:	f7ff fe37 	bl	8010388 <SetStatusLED>
  SetDBLED(false,false,false);
 801071a:	2200      	movs	r2, #0
 801071c:	2100      	movs	r1, #0
 801071e:	2000      	movs	r0, #0
 8010720:	f7ff fe66 	bl	80103f0 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8010724:	23fa      	movs	r3, #250	@ 0xfa
 8010726:	011a      	lsls	r2, r3, #4
 8010728:	23fa      	movs	r3, #250	@ 0xfa
 801072a:	0119      	lsls	r1, r3, #4
 801072c:	23fa      	movs	r3, #250	@ 0xfa
 801072e:	011b      	lsls	r3, r3, #4
 8010730:	0018      	movs	r0, r3
 8010732:	f7ff fea7 	bl	8010484 <SetVocLED>
return;
 8010736:	46c0      	nop			@ (mov r8, r8)
}
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}

0801073c <SetAllREDLED>:

void SetAllREDLED() {
 801073c:	b580      	push	{r7, lr}
 801073e:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 8010740:	2380      	movs	r3, #128	@ 0x80
 8010742:	05db      	lsls	r3, r3, #23
 8010744:	4a19      	ldr	r2, [pc, #100]	@ (80107ac <SetAllREDLED+0x70>)
 8010746:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8010748:	2380      	movs	r3, #128	@ 0x80
 801074a:	05db      	lsls	r3, r3, #23
 801074c:	22fa      	movs	r2, #250	@ 0xfa
 801074e:	0112      	lsls	r2, r2, #4
 8010750:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8010752:	2380      	movs	r3, #128	@ 0x80
 8010754:	05db      	lsls	r3, r3, #23
 8010756:	22fa      	movs	r2, #250	@ 0xfa
 8010758:	0112      	lsls	r2, r2, #4
 801075a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 801075c:	4b14      	ldr	r3, [pc, #80]	@ (80107b0 <SetAllREDLED+0x74>)
 801075e:	4a13      	ldr	r2, [pc, #76]	@ (80107ac <SetAllREDLED+0x70>)
 8010760:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8010762:	4b13      	ldr	r3, [pc, #76]	@ (80107b0 <SetAllREDLED+0x74>)
 8010764:	22fa      	movs	r2, #250	@ 0xfa
 8010766:	0112      	lsls	r2, r2, #4
 8010768:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 801076a:	4b11      	ldr	r3, [pc, #68]	@ (80107b0 <SetAllREDLED+0x74>)
 801076c:	22fa      	movs	r2, #250	@ 0xfa
 801076e:	0112      	lsls	r2, r2, #4
 8010770:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8010772:	4b10      	ldr	r3, [pc, #64]	@ (80107b4 <SetAllREDLED+0x78>)
 8010774:	2200      	movs	r2, #0
 8010776:	2101      	movs	r1, #1
 8010778:	0018      	movs	r0, r3
 801077a:	f002 ff4a 	bl	8013612 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 801077e:	2380      	movs	r3, #128	@ 0x80
 8010780:	005b      	lsls	r3, r3, #1
 8010782:	480c      	ldr	r0, [pc, #48]	@ (80107b4 <SetAllREDLED+0x78>)
 8010784:	2201      	movs	r2, #1
 8010786:	0019      	movs	r1, r3
 8010788:	f002 ff43 	bl	8013612 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 801078c:	2380      	movs	r3, #128	@ 0x80
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	4808      	ldr	r0, [pc, #32]	@ (80107b4 <SetAllREDLED+0x78>)
 8010792:	2201      	movs	r2, #1
 8010794:	0019      	movs	r1, r3
 8010796:	f002 ff3c 	bl	8013612 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 801079a:	23fa      	movs	r3, #250	@ 0xfa
 801079c:	009b      	lsls	r3, r3, #2
 801079e:	0018      	movs	r0, r3
 80107a0:	f001 fcb0 	bl	8012104 <HAL_Delay>
}
 80107a4:	46c0      	nop			@ (mov r8, r8)
 80107a6:	46bd      	mov	sp, r7
 80107a8:	bd80      	pop	{r7, pc}
 80107aa:	46c0      	nop			@ (mov r8, r8)
 80107ac:	00000bb8 	.word	0x00000bb8
 80107b0:	40000400 	.word	0x40000400
 80107b4:	50000400 	.word	0x50000400

080107b8 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 80107b8:	b5b0      	push	{r4, r5, r7, lr}
 80107ba:	b082      	sub	sp, #8
 80107bc:	af00      	add	r7, sp, #0
 80107be:	0002      	movs	r2, r0
 80107c0:	1dbb      	adds	r3, r7, #6
 80107c2:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 80107c4:	1dbb      	adds	r3, r7, #6
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d05a      	beq.n	8010882 <SetVOCindicator+0xca>
 80107cc:	1dbb      	adds	r3, r7, #6
 80107ce:	881b      	ldrh	r3, [r3, #0]
 80107d0:	2b64      	cmp	r3, #100	@ 0x64
 80107d2:	d856      	bhi.n	8010882 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 80107d4:	1dbb      	adds	r3, r7, #6
 80107d6:	881b      	ldrh	r3, [r3, #0]
 80107d8:	0018      	movs	r0, r3
 80107da:	f7f2 fdf1 	bl	80033c0 <__aeabi_i2d>
 80107de:	2200      	movs	r2, #0
 80107e0:	4b5f      	ldr	r3, [pc, #380]	@ (8010960 <SetVOCindicator+0x1a8>)
 80107e2:	f7f1 fae7 	bl	8001db4 <__aeabi_ddiv>
 80107e6:	0002      	movs	r2, r0
 80107e8:	000b      	movs	r3, r1
 80107ea:	2000      	movs	r0, #0
 80107ec:	495d      	ldr	r1, [pc, #372]	@ (8010964 <SetVOCindicator+0x1ac>)
 80107ee:	f7f2 f9ed 	bl	8002bcc <__aeabi_dsub>
 80107f2:	0002      	movs	r2, r0
 80107f4:	000b      	movs	r3, r1
 80107f6:	0014      	movs	r4, r2
 80107f8:	001d      	movs	r5, r3
 80107fa:	4b5b      	ldr	r3, [pc, #364]	@ (8010968 <SetVOCindicator+0x1b0>)
 80107fc:	881b      	ldrh	r3, [r3, #0]
 80107fe:	0018      	movs	r0, r3
 8010800:	f7f2 fdde 	bl	80033c0 <__aeabi_i2d>
 8010804:	0002      	movs	r2, r0
 8010806:	000b      	movs	r3, r1
 8010808:	0020      	movs	r0, r4
 801080a:	0029      	movs	r1, r5
 801080c:	f7f1 ff16 	bl	800263c <__aeabi_dmul>
 8010810:	0002      	movs	r2, r0
 8010812:	000b      	movs	r3, r1
 8010814:	0010      	movs	r0, r2
 8010816:	0019      	movs	r1, r3
 8010818:	f7ef ff18 	bl	800064c <__aeabi_d2uiz>
 801081c:	0003      	movs	r3, r0
 801081e:	b29a      	uxth	r2, r3
 8010820:	4b52      	ldr	r3, [pc, #328]	@ (801096c <SetVOCindicator+0x1b4>)
 8010822:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8010824:	1dbb      	adds	r3, r7, #6
 8010826:	881b      	ldrh	r3, [r3, #0]
 8010828:	0018      	movs	r0, r3
 801082a:	f7f2 fdc9 	bl	80033c0 <__aeabi_i2d>
 801082e:	2200      	movs	r2, #0
 8010830:	4b4b      	ldr	r3, [pc, #300]	@ (8010960 <SetVOCindicator+0x1a8>)
 8010832:	f7f1 fabf 	bl	8001db4 <__aeabi_ddiv>
 8010836:	0002      	movs	r2, r0
 8010838:	000b      	movs	r3, r1
 801083a:	0014      	movs	r4, r2
 801083c:	001d      	movs	r5, r3
 801083e:	4b4a      	ldr	r3, [pc, #296]	@ (8010968 <SetVOCindicator+0x1b0>)
 8010840:	881b      	ldrh	r3, [r3, #0]
 8010842:	0018      	movs	r0, r3
 8010844:	f7f2 fdbc 	bl	80033c0 <__aeabi_i2d>
 8010848:	0002      	movs	r2, r0
 801084a:	000b      	movs	r3, r1
 801084c:	0020      	movs	r0, r4
 801084e:	0029      	movs	r1, r5
 8010850:	f7f1 fef4 	bl	800263c <__aeabi_dmul>
 8010854:	0002      	movs	r2, r0
 8010856:	000b      	movs	r3, r1
 8010858:	0010      	movs	r0, r2
 801085a:	0019      	movs	r1, r3
 801085c:	f7ef fef6 	bl	800064c <__aeabi_d2uiz>
 8010860:	0003      	movs	r3, r0
 8010862:	b29a      	uxth	r2, r3
 8010864:	4b42      	ldr	r3, [pc, #264]	@ (8010970 <SetVOCindicator+0x1b8>)
 8010866:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8010868:	4b3f      	ldr	r3, [pc, #252]	@ (8010968 <SetVOCindicator+0x1b0>)
 801086a:	881a      	ldrh	r2, [r3, #0]
 801086c:	4b41      	ldr	r3, [pc, #260]	@ (8010974 <SetVOCindicator+0x1bc>)
 801086e:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8010870:	4b40      	ldr	r3, [pc, #256]	@ (8010974 <SetVOCindicator+0x1bc>)
 8010872:	8818      	ldrh	r0, [r3, #0]
 8010874:	4b3d      	ldr	r3, [pc, #244]	@ (801096c <SetVOCindicator+0x1b4>)
 8010876:	8819      	ldrh	r1, [r3, #0]
 8010878:	4b3d      	ldr	r3, [pc, #244]	@ (8010970 <SetVOCindicator+0x1b8>)
 801087a:	881b      	ldrh	r3, [r3, #0]
 801087c:	001a      	movs	r2, r3
 801087e:	f7ff fe01 	bl	8010484 <SetVocLED>
  }
  if(VOCi > 100){
 8010882:	1dbb      	adds	r3, r7, #6
 8010884:	881b      	ldrh	r3, [r3, #0]
 8010886:	2b64      	cmp	r3, #100	@ 0x64
 8010888:	d966      	bls.n	8010958 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 801088a:	1dbb      	adds	r3, r7, #6
 801088c:	881b      	ldrh	r3, [r3, #0]
 801088e:	0018      	movs	r0, r3
 8010890:	f7f2 fd96 	bl	80033c0 <__aeabi_i2d>
 8010894:	2200      	movs	r2, #0
 8010896:	4b32      	ldr	r3, [pc, #200]	@ (8010960 <SetVOCindicator+0x1a8>)
 8010898:	f7f2 f998 	bl	8002bcc <__aeabi_dsub>
 801089c:	0002      	movs	r2, r0
 801089e:	000b      	movs	r3, r1
 80108a0:	0010      	movs	r0, r2
 80108a2:	0019      	movs	r1, r3
 80108a4:	2200      	movs	r2, #0
 80108a6:	4b34      	ldr	r3, [pc, #208]	@ (8010978 <SetVOCindicator+0x1c0>)
 80108a8:	f7f1 fa84 	bl	8001db4 <__aeabi_ddiv>
 80108ac:	0002      	movs	r2, r0
 80108ae:	000b      	movs	r3, r1
 80108b0:	0014      	movs	r4, r2
 80108b2:	001d      	movs	r5, r3
 80108b4:	4b2c      	ldr	r3, [pc, #176]	@ (8010968 <SetVOCindicator+0x1b0>)
 80108b6:	881b      	ldrh	r3, [r3, #0]
 80108b8:	0018      	movs	r0, r3
 80108ba:	f7f2 fd81 	bl	80033c0 <__aeabi_i2d>
 80108be:	0002      	movs	r2, r0
 80108c0:	000b      	movs	r3, r1
 80108c2:	0020      	movs	r0, r4
 80108c4:	0029      	movs	r1, r5
 80108c6:	f7f1 feb9 	bl	800263c <__aeabi_dmul>
 80108ca:	0002      	movs	r2, r0
 80108cc:	000b      	movs	r3, r1
 80108ce:	0010      	movs	r0, r2
 80108d0:	0019      	movs	r1, r3
 80108d2:	f7ef febb 	bl	800064c <__aeabi_d2uiz>
 80108d6:	0003      	movs	r3, r0
 80108d8:	b29a      	uxth	r2, r3
 80108da:	4b24      	ldr	r3, [pc, #144]	@ (801096c <SetVOCindicator+0x1b4>)
 80108dc:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 80108de:	1dbb      	adds	r3, r7, #6
 80108e0:	881b      	ldrh	r3, [r3, #0]
 80108e2:	0018      	movs	r0, r3
 80108e4:	f7f2 fd6c 	bl	80033c0 <__aeabi_i2d>
 80108e8:	2200      	movs	r2, #0
 80108ea:	4b1d      	ldr	r3, [pc, #116]	@ (8010960 <SetVOCindicator+0x1a8>)
 80108ec:	f7f2 f96e 	bl	8002bcc <__aeabi_dsub>
 80108f0:	0002      	movs	r2, r0
 80108f2:	000b      	movs	r3, r1
 80108f4:	0010      	movs	r0, r2
 80108f6:	0019      	movs	r1, r3
 80108f8:	2200      	movs	r2, #0
 80108fa:	4b1f      	ldr	r3, [pc, #124]	@ (8010978 <SetVOCindicator+0x1c0>)
 80108fc:	f7f1 fa5a 	bl	8001db4 <__aeabi_ddiv>
 8010900:	0002      	movs	r2, r0
 8010902:	000b      	movs	r3, r1
 8010904:	2000      	movs	r0, #0
 8010906:	4917      	ldr	r1, [pc, #92]	@ (8010964 <SetVOCindicator+0x1ac>)
 8010908:	f7f2 f960 	bl	8002bcc <__aeabi_dsub>
 801090c:	0002      	movs	r2, r0
 801090e:	000b      	movs	r3, r1
 8010910:	0014      	movs	r4, r2
 8010912:	001d      	movs	r5, r3
 8010914:	4b14      	ldr	r3, [pc, #80]	@ (8010968 <SetVOCindicator+0x1b0>)
 8010916:	881b      	ldrh	r3, [r3, #0]
 8010918:	0018      	movs	r0, r3
 801091a:	f7f2 fd51 	bl	80033c0 <__aeabi_i2d>
 801091e:	0002      	movs	r2, r0
 8010920:	000b      	movs	r3, r1
 8010922:	0020      	movs	r0, r4
 8010924:	0029      	movs	r1, r5
 8010926:	f7f1 fe89 	bl	800263c <__aeabi_dmul>
 801092a:	0002      	movs	r2, r0
 801092c:	000b      	movs	r3, r1
 801092e:	0010      	movs	r0, r2
 8010930:	0019      	movs	r1, r3
 8010932:	f7ef fe8b 	bl	800064c <__aeabi_d2uiz>
 8010936:	0003      	movs	r3, r0
 8010938:	b29a      	uxth	r2, r3
 801093a:	4b0e      	ldr	r3, [pc, #56]	@ (8010974 <SetVOCindicator+0x1bc>)
 801093c:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 801093e:	4b0a      	ldr	r3, [pc, #40]	@ (8010968 <SetVOCindicator+0x1b0>)
 8010940:	881a      	ldrh	r2, [r3, #0]
 8010942:	4b0b      	ldr	r3, [pc, #44]	@ (8010970 <SetVOCindicator+0x1b8>)
 8010944:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8010946:	4b0b      	ldr	r3, [pc, #44]	@ (8010974 <SetVOCindicator+0x1bc>)
 8010948:	8818      	ldrh	r0, [r3, #0]
 801094a:	4b08      	ldr	r3, [pc, #32]	@ (801096c <SetVOCindicator+0x1b4>)
 801094c:	8819      	ldrh	r1, [r3, #0]
 801094e:	4b08      	ldr	r3, [pc, #32]	@ (8010970 <SetVOCindicator+0x1b8>)
 8010950:	881b      	ldrh	r3, [r3, #0]
 8010952:	001a      	movs	r2, r3
 8010954:	f7ff fd96 	bl	8010484 <SetVocLED>
  }

}
 8010958:	46c0      	nop			@ (mov r8, r8)
 801095a:	46bd      	mov	sp, r7
 801095c:	b002      	add	sp, #8
 801095e:	bdb0      	pop	{r4, r5, r7, pc}
 8010960:	40590000 	.word	0x40590000
 8010964:	3ff00000 	.word	0x3ff00000
 8010968:	200000de 	.word	0x200000de
 801096c:	20001e42 	.word	0x20001e42
 8010970:	20001e44 	.word	0x20001e44
 8010974:	20001e46 	.word	0x20001e46
 8010978:	40790000 	.word	0x40790000

0801097c <powerCheck>:

Battery_Status powerCheck(){
 801097c:	b590      	push	{r4, r7, lr}
 801097e:	b083      	sub	sp, #12
 8010980:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 8010982:	f7f7 fa6b 	bl	8007e5c <Check_USB_PowerOn>
 8010986:	0003      	movs	r3, r0
 8010988:	001a      	movs	r2, r3
 801098a:	2301      	movs	r3, #1
 801098c:	4053      	eors	r3, r2
 801098e:	b2db      	uxtb	r3, r3
 8010990:	2b00      	cmp	r3, #0
 8010992:	d005      	beq.n	80109a0 <powerCheck+0x24>
    status = batteryChargeCheck();
 8010994:	1dfc      	adds	r4, r7, #7
 8010996:	f7ff fc55 	bl	8010244 <batteryChargeCheck>
 801099a:	0003      	movs	r3, r0
 801099c:	7023      	strb	r3, [r4, #0]
 801099e:	e002      	b.n	80109a6 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 80109a0:	1dfb      	adds	r3, r7, #7
 80109a2:	2204      	movs	r2, #4
 80109a4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80109a6:	1dfb      	adds	r3, r7, #7
 80109a8:	781b      	ldrb	r3, [r3, #0]
}
 80109aa:	0018      	movs	r0, r3
 80109ac:	46bd      	mov	sp, r7
 80109ae:	b003      	add	sp, #12
 80109b0:	bd90      	pop	{r4, r7, pc}
	...

080109b4 <powerDisplay>:

void powerDisplay(Battery_Status status){
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	0002      	movs	r2, r0
 80109bc:	1dfb      	adds	r3, r7, #7
 80109be:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 80109c0:	1dfb      	adds	r3, r7, #7
 80109c2:	781b      	ldrb	r3, [r3, #0]
 80109c4:	2b04      	cmp	r3, #4
 80109c6:	d105      	bne.n	80109d4 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 80109c8:	4a18      	ldr	r2, [pc, #96]	@ (8010a2c <powerDisplay+0x78>)
 80109ca:	4b19      	ldr	r3, [pc, #100]	@ (8010a30 <powerDisplay+0x7c>)
 80109cc:	0019      	movs	r1, r3
 80109ce:	2003      	movs	r0, #3
 80109d0:	f000 ff42 	bl	8011858 <CreateLine>

  }
  if(status == BATTERY_FULL){
 80109d4:	1dfb      	adds	r3, r7, #7
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	2b03      	cmp	r3, #3
 80109da:	d105      	bne.n	80109e8 <powerDisplay+0x34>
    Debug("Battery fully charged");
 80109dc:	4a15      	ldr	r2, [pc, #84]	@ (8010a34 <powerDisplay+0x80>)
 80109de:	4b14      	ldr	r3, [pc, #80]	@ (8010a30 <powerDisplay+0x7c>)
 80109e0:	0019      	movs	r1, r3
 80109e2:	2003      	movs	r0, #3
 80109e4:	f000 ff38 	bl	8011858 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 80109e8:	1dfb      	adds	r3, r7, #7
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	2b02      	cmp	r3, #2
 80109ee:	d105      	bne.n	80109fc <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 80109f0:	4a11      	ldr	r2, [pc, #68]	@ (8010a38 <powerDisplay+0x84>)
 80109f2:	4b0f      	ldr	r3, [pc, #60]	@ (8010a30 <powerDisplay+0x7c>)
 80109f4:	0019      	movs	r1, r3
 80109f6:	2003      	movs	r0, #3
 80109f8:	f000 ff2e 	bl	8011858 <CreateLine>
  }
  if(status == BATTERY_LOW){
 80109fc:	1dfb      	adds	r3, r7, #7
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d105      	bne.n	8010a10 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 8010a04:	4a0d      	ldr	r2, [pc, #52]	@ (8010a3c <powerDisplay+0x88>)
 8010a06:	4b0a      	ldr	r3, [pc, #40]	@ (8010a30 <powerDisplay+0x7c>)
 8010a08:	0019      	movs	r1, r3
 8010a0a:	2003      	movs	r0, #3
 8010a0c:	f000 ff24 	bl	8011858 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8010a10:	1dfb      	adds	r3, r7, #7
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d105      	bne.n	8010a24 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 8010a18:	4a09      	ldr	r2, [pc, #36]	@ (8010a40 <powerDisplay+0x8c>)
 8010a1a:	4b05      	ldr	r3, [pc, #20]	@ (8010a30 <powerDisplay+0x7c>)
 8010a1c:	0019      	movs	r1, r3
 8010a1e:	2003      	movs	r0, #3
 8010a20:	f000 ff1a 	bl	8011858 <CreateLine>
  }
}
 8010a24:	46c0      	nop			@ (mov r8, r8)
 8010a26:	46bd      	mov	sp, r7
 8010a28:	b002      	add	sp, #8
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	0802a9b4 	.word	0x0802a9b4
 8010a30:	0802a9d8 	.word	0x0802a9d8
 8010a34:	0802a9dc 	.word	0x0802a9dc
 8010a38:	0802a9f4 	.word	0x0802a9f4
 8010a3c:	0802aa14 	.word	0x0802aa14
 8010a40:	0802aa2c 	.word	0x0802aa2c

08010a44 <configCheck>:

void configCheck(){
 8010a44:	b590      	push	{r4, r7, lr}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8010a4a:	f7f7 fa16 	bl	8007e7a <BootButton_Pressed>
 8010a4e:	1e03      	subs	r3, r0, #0
 8010a50:	d007      	beq.n	8010a62 <configCheck+0x1e>
 8010a52:	f7f7 fa23 	bl	8007e9c <UserButton_Pressed>
 8010a56:	1e03      	subs	r3, r0, #0
 8010a58:	d003      	beq.n	8010a62 <configCheck+0x1e>
    configSet = true;
 8010a5a:	4bb2      	ldr	r3, [pc, #712]	@ (8010d24 <configCheck+0x2e0>)
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	701a      	strb	r2, [r3, #0]
 8010a60:	e00a      	b.n	8010a78 <configCheck+0x34>
  }
  else{
    configSet = false;
 8010a62:	4bb0      	ldr	r3, [pc, #704]	@ (8010d24 <configCheck+0x2e0>)
 8010a64:	2200      	movs	r2, #0
 8010a66:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8010a68:	f001 fb42 	bl	80120f0 <HAL_GetTick>
 8010a6c:	0003      	movs	r3, r0
 8010a6e:	22fa      	movs	r2, #250	@ 0xfa
 8010a70:	00d2      	lsls	r2, r2, #3
 8010a72:	189a      	adds	r2, r3, r2
 8010a74:	4bac      	ldr	r3, [pc, #688]	@ (8010d28 <configCheck+0x2e4>)
 8010a76:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8010a78:	4baa      	ldr	r3, [pc, #680]	@ (8010d24 <configCheck+0x2e0>)
 8010a7a:	781b      	ldrb	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d00d      	beq.n	8010a9c <configCheck+0x58>
 8010a80:	4ba9      	ldr	r3, [pc, #676]	@ (8010d28 <configCheck+0x2e4>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	0018      	movs	r0, r3
 8010a86:	f000 fe91 	bl	80117ac <TimestampIsReached>
 8010a8a:	1e03      	subs	r3, r0, #0
 8010a8c:	d006      	beq.n	8010a9c <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 8010a8e:	f7f3 fe5d 	bl	800474c <SetConfigMode>
    SetDBLED(true, true, true);
 8010a92:	2201      	movs	r2, #1
 8010a94:	2101      	movs	r1, #1
 8010a96:	2001      	movs	r0, #1
 8010a98:	f7ff fcaa 	bl	80103f0 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8010a9c:	f7f7 f9ed 	bl	8007e7a <BootButton_Pressed>
 8010aa0:	0003      	movs	r3, r0
 8010aa2:	001a      	movs	r2, r3
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	4053      	eors	r3, r2
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d054      	beq.n	8010b58 <configCheck+0x114>
 8010aae:	f7f7 f9f5 	bl	8007e9c <UserButton_Pressed>
 8010ab2:	1e03      	subs	r3, r0, #0
 8010ab4:	d050      	beq.n	8010b58 <configCheck+0x114>
 8010ab6:	4b9d      	ldr	r3, [pc, #628]	@ (8010d2c <configCheck+0x2e8>)
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	2201      	movs	r2, #1
 8010abc:	4053      	eors	r3, r2
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d049      	beq.n	8010b58 <configCheck+0x114>
 8010ac4:	f7f3 fe62 	bl	800478c <GetReconfigMode>
 8010ac8:	0003      	movs	r3, r0
 8010aca:	001a      	movs	r2, r3
 8010acc:	2301      	movs	r3, #1
 8010ace:	4053      	eors	r3, r2
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d040      	beq.n	8010b58 <configCheck+0x114>
    SetLEDsOff();
 8010ad6:	f7ff fe15 	bl	8010704 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8010ada:	4a95      	ldr	r2, [pc, #596]	@ (8010d30 <configCheck+0x2ec>)
 8010adc:	4994      	ldr	r1, [pc, #592]	@ (8010d30 <configCheck+0x2ec>)
 8010ade:	4b94      	ldr	r3, [pc, #592]	@ (8010d30 <configCheck+0x2ec>)
 8010ae0:	0018      	movs	r0, r3
 8010ae2:	f7ff fccf 	bl	8010484 <SetVocLED>
    HAL_Delay(1500);
 8010ae6:	4b93      	ldr	r3, [pc, #588]	@ (8010d34 <configCheck+0x2f0>)
 8010ae8:	0018      	movs	r0, r3
 8010aea:	f001 fb0b 	bl	8012104 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 8010aee:	23fa      	movs	r3, #250	@ 0xfa
 8010af0:	011a      	lsls	r2, r3, #4
 8010af2:	23fa      	movs	r3, #250	@ 0xfa
 8010af4:	0119      	lsls	r1, r3, #4
 8010af6:	23fa      	movs	r3, #250	@ 0xfa
 8010af8:	011b      	lsls	r3, r3, #4
 8010afa:	0018      	movs	r0, r3
 8010afc:	f7ff fcc2 	bl	8010484 <SetVocLED>
    userToggle = !userToggle;
 8010b00:	4b8d      	ldr	r3, [pc, #564]	@ (8010d38 <configCheck+0x2f4>)
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	1e5a      	subs	r2, r3, #1
 8010b06:	4193      	sbcs	r3, r2
 8010b08:	b2db      	uxtb	r3, r3
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	4053      	eors	r3, r2
 8010b0e:	b2db      	uxtb	r3, r3
 8010b10:	1c1a      	adds	r2, r3, #0
 8010b12:	2301      	movs	r3, #1
 8010b14:	4013      	ands	r3, r2
 8010b16:	b2da      	uxtb	r2, r3
 8010b18:	4b87      	ldr	r3, [pc, #540]	@ (8010d38 <configCheck+0x2f4>)
 8010b1a:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8010b1c:	4b86      	ldr	r3, [pc, #536]	@ (8010d38 <configCheck+0x2f4>)
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d001      	beq.n	8010b28 <configCheck+0xe4>
      EnabledConnectedDevices();
 8010b24:	f7fa ff90 	bl	800ba48 <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8010b28:	4b83      	ldr	r3, [pc, #524]	@ (8010d38 <configCheck+0x2f4>)
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d001      	beq.n	8010b34 <configCheck+0xf0>
 8010b30:	4b82      	ldr	r3, [pc, #520]	@ (8010d3c <configCheck+0x2f8>)
 8010b32:	e000      	b.n	8010b36 <configCheck+0xf2>
 8010b34:	4b82      	ldr	r3, [pc, #520]	@ (8010d40 <configCheck+0x2fc>)
 8010b36:	4a83      	ldr	r2, [pc, #524]	@ (8010d44 <configCheck+0x300>)
 8010b38:	4983      	ldr	r1, [pc, #524]	@ (8010d48 <configCheck+0x304>)
 8010b3a:	2003      	movs	r0, #3
 8010b3c:	f000 fe8c 	bl	8011858 <CreateLine>
    userbuttonHeld = true;
 8010b40:	4b7a      	ldr	r3, [pc, #488]	@ (8010d2c <configCheck+0x2e8>)
 8010b42:	2201      	movs	r2, #1
 8010b44:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 8010b46:	f001 fad3 	bl	80120f0 <HAL_GetTick>
 8010b4a:	0003      	movs	r3, r0
 8010b4c:	22fa      	movs	r2, #250	@ 0xfa
 8010b4e:	00d2      	lsls	r2, r2, #3
 8010b50:	189a      	adds	r2, r3, r2
 8010b52:	4b7e      	ldr	r3, [pc, #504]	@ (8010d4c <configCheck+0x308>)
 8010b54:	601a      	str	r2, [r3, #0]
 8010b56:	e002      	b.n	8010b5e <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 8010b58:	4b74      	ldr	r3, [pc, #464]	@ (8010d2c <configCheck+0x2e8>)
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8010b5e:	f7f7 f98c 	bl	8007e7a <BootButton_Pressed>
 8010b62:	0003      	movs	r3, r0
 8010b64:	001a      	movs	r2, r3
 8010b66:	2301      	movs	r3, #1
 8010b68:	4053      	eors	r3, r2
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d100      	bne.n	8010b72 <configCheck+0x12e>
 8010b70:	e0a4      	b.n	8010cbc <configCheck+0x278>
 8010b72:	4b6e      	ldr	r3, [pc, #440]	@ (8010d2c <configCheck+0x2e8>)
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d100      	bne.n	8010b7c <configCheck+0x138>
 8010b7a:	e09f      	b.n	8010cbc <configCheck+0x278>
 8010b7c:	4b73      	ldr	r3, [pc, #460]	@ (8010d4c <configCheck+0x308>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	0018      	movs	r0, r3
 8010b82:	f000 fe13 	bl	80117ac <TimestampIsReached>
 8010b86:	1e03      	subs	r3, r0, #0
 8010b88:	d100      	bne.n	8010b8c <configCheck+0x148>
 8010b8a:	e097      	b.n	8010cbc <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8010b8c:	f7fa fbe0 	bl	800b350 <GetPMSensorPresence>
 8010b90:	1e03      	subs	r3, r0, #0
 8010b92:	d100      	bne.n	8010b96 <configCheck+0x152>
 8010b94:	e082      	b.n	8010c9c <configCheck+0x258>
 8010b96:	4b6e      	ldr	r3, [pc, #440]	@ (8010d50 <configCheck+0x30c>)
 8010b98:	791b      	ldrb	r3, [r3, #4]
 8010b9a:	2b34      	cmp	r3, #52	@ 0x34
 8010b9c:	d004      	beq.n	8010ba8 <configCheck+0x164>
 8010b9e:	4b6c      	ldr	r3, [pc, #432]	@ (8010d50 <configCheck+0x30c>)
 8010ba0:	791b      	ldrb	r3, [r3, #4]
 8010ba2:	2b35      	cmp	r3, #53	@ 0x35
 8010ba4:	d000      	beq.n	8010ba8 <configCheck+0x164>
 8010ba6:	e079      	b.n	8010c9c <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 8010ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8010d54 <configCheck+0x310>)
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	1e5a      	subs	r2, r3, #1
 8010bae:	4193      	sbcs	r3, r2
 8010bb0:	b2db      	uxtb	r3, r3
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	4053      	eors	r3, r2
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	1c1a      	adds	r2, r3, #0
 8010bba:	2301      	movs	r3, #1
 8010bbc:	4013      	ands	r3, r2
 8010bbe:	b2da      	uxtb	r2, r3
 8010bc0:	4b64      	ldr	r3, [pc, #400]	@ (8010d54 <configCheck+0x310>)
 8010bc2:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 8010bc4:	4b63      	ldr	r3, [pc, #396]	@ (8010d54 <configCheck+0x310>)
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d005      	beq.n	8010bd8 <configCheck+0x194>
 8010bcc:	1dbc      	adds	r4, r7, #6
 8010bce:	f7ff fb93 	bl	80102f8 <Calculate_LED_ON>
 8010bd2:	0003      	movs	r3, r0
 8010bd4:	8023      	strh	r3, [r4, #0]
 8010bd6:	e003      	b.n	8010be0 <configCheck+0x19c>
        else color = 4000;
 8010bd8:	1dbb      	adds	r3, r7, #6
 8010bda:	22fa      	movs	r2, #250	@ 0xfa
 8010bdc:	0112      	lsls	r2, r2, #4
 8010bde:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 8010be0:	4b5c      	ldr	r3, [pc, #368]	@ (8010d54 <configCheck+0x310>)
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d001      	beq.n	8010bec <configCheck+0x1a8>
 8010be8:	4b5b      	ldr	r3, [pc, #364]	@ (8010d58 <configCheck+0x314>)
 8010bea:	e000      	b.n	8010bee <configCheck+0x1aa>
 8010bec:	4b5b      	ldr	r3, [pc, #364]	@ (8010d5c <configCheck+0x318>)
 8010bee:	4a5c      	ldr	r2, [pc, #368]	@ (8010d60 <configCheck+0x31c>)
 8010bf0:	495c      	ldr	r1, [pc, #368]	@ (8010d64 <configCheck+0x320>)
 8010bf2:	2002      	movs	r0, #2
 8010bf4:	f000 fe30 	bl	8011858 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8010bf8:	1d7b      	adds	r3, r7, #5
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	701a      	strb	r2, [r3, #0]
 8010bfe:	e028      	b.n	8010c52 <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 8010c00:	f7ff fb7a 	bl	80102f8 <Calculate_LED_ON>
 8010c04:	0003      	movs	r3, r0
 8010c06:	001a      	movs	r2, r3
 8010c08:	4b57      	ldr	r3, [pc, #348]	@ (8010d68 <configCheck+0x324>)
 8010c0a:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8010c0c:	4b56      	ldr	r3, [pc, #344]	@ (8010d68 <configCheck+0x324>)
 8010c0e:	1dba      	adds	r2, r7, #6
 8010c10:	8812      	ldrh	r2, [r2, #0]
 8010c12:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8010c14:	4b54      	ldr	r3, [pc, #336]	@ (8010d68 <configCheck+0x324>)
 8010c16:	1dba      	adds	r2, r7, #6
 8010c18:	8812      	ldrh	r2, [r2, #0]
 8010c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8010c1c:	23c8      	movs	r3, #200	@ 0xc8
 8010c1e:	005b      	lsls	r3, r3, #1
 8010c20:	0018      	movs	r0, r3
 8010c22:	f001 fa6f 	bl	8012104 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 8010c26:	4b50      	ldr	r3, [pc, #320]	@ (8010d68 <configCheck+0x324>)
 8010c28:	22fa      	movs	r2, #250	@ 0xfa
 8010c2a:	0112      	lsls	r2, r2, #4
 8010c2c:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8010c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8010d68 <configCheck+0x324>)
 8010c30:	22fa      	movs	r2, #250	@ 0xfa
 8010c32:	0112      	lsls	r2, r2, #4
 8010c34:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8010c36:	4b4c      	ldr	r3, [pc, #304]	@ (8010d68 <configCheck+0x324>)
 8010c38:	22fa      	movs	r2, #250	@ 0xfa
 8010c3a:	0112      	lsls	r2, r2, #4
 8010c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8010c3e:	23c8      	movs	r3, #200	@ 0xc8
 8010c40:	005b      	lsls	r3, r3, #1
 8010c42:	0018      	movs	r0, r3
 8010c44:	f001 fa5e 	bl	8012104 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8010c48:	1d7b      	adds	r3, r7, #5
 8010c4a:	781a      	ldrb	r2, [r3, #0]
 8010c4c:	1d7b      	adds	r3, r7, #5
 8010c4e:	3201      	adds	r2, #1
 8010c50:	701a      	strb	r2, [r3, #0]
 8010c52:	1d7b      	adds	r3, r7, #5
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d9d2      	bls.n	8010c00 <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8010c5a:	4b37      	ldr	r3, [pc, #220]	@ (8010d38 <configCheck+0x2f4>)
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	1e5a      	subs	r2, r3, #1
 8010c60:	4193      	sbcs	r3, r2
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	2201      	movs	r2, #1
 8010c66:	4053      	eors	r3, r2
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	1c1a      	adds	r2, r3, #0
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	4013      	ands	r3, r2
 8010c70:	b2da      	uxtb	r2, r3
 8010c72:	4b31      	ldr	r3, [pc, #196]	@ (8010d38 <configCheck+0x2f4>)
 8010c74:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 8010c76:	4b30      	ldr	r3, [pc, #192]	@ (8010d38 <configCheck+0x2f4>)
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d001      	beq.n	8010c82 <configCheck+0x23e>
 8010c7e:	4b36      	ldr	r3, [pc, #216]	@ (8010d58 <configCheck+0x314>)
 8010c80:	e000      	b.n	8010c84 <configCheck+0x240>
 8010c82:	4b36      	ldr	r3, [pc, #216]	@ (8010d5c <configCheck+0x318>)
 8010c84:	4a39      	ldr	r2, [pc, #228]	@ (8010d6c <configCheck+0x328>)
 8010c86:	4937      	ldr	r1, [pc, #220]	@ (8010d64 <configCheck+0x320>)
 8010c88:	2002      	movs	r0, #2
 8010c8a:	f000 fde5 	bl	8011858 <CreateLine>
      if (usbPluggedIn) {
 8010c8e:	4b38      	ldr	r3, [pc, #224]	@ (8010d70 <configCheck+0x32c>)
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d009      	beq.n	8010caa <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 8010c96:	f7fc f84b 	bl	800cd30 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8010c9a:	e006      	b.n	8010caa <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8010c9c:	4a35      	ldr	r2, [pc, #212]	@ (8010d74 <configCheck+0x330>)
 8010c9e:	4b31      	ldr	r3, [pc, #196]	@ (8010d64 <configCheck+0x320>)
 8010ca0:	0019      	movs	r1, r3
 8010ca2:	2002      	movs	r0, #2
 8010ca4:	f000 fdd8 	bl	8011858 <CreateLine>
 8010ca8:	e000      	b.n	8010cac <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8010caa:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 8010cac:	46c0      	nop			@ (mov r8, r8)
 8010cae:	f7f7 f8f5 	bl	8007e9c <UserButton_Pressed>
 8010cb2:	1e03      	subs	r3, r0, #0
 8010cb4:	d1fb      	bne.n	8010cae <configCheck+0x26a>
    }
    userbuttonHeld = false;
 8010cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8010d2c <configCheck+0x2e8>)
 8010cb8:	2200      	movs	r2, #0
 8010cba:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8010cbc:	f7f7 f8dd 	bl	8007e7a <BootButton_Pressed>
 8010cc0:	0003      	movs	r3, r0
 8010cc2:	001a      	movs	r2, r3
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	4053      	eors	r3, r2
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d00b      	beq.n	8010ce6 <configCheck+0x2a2>
 8010cce:	f7f7 f8e5 	bl	8007e9c <UserButton_Pressed>
 8010cd2:	0003      	movs	r3, r0
 8010cd4:	001a      	movs	r2, r3
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	4053      	eors	r3, r2
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d002      	beq.n	8010ce6 <configCheck+0x2a2>
    userbuttonHeld = false;
 8010ce0:	4b12      	ldr	r3, [pc, #72]	@ (8010d2c <configCheck+0x2e8>)
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 8010ce6:	f7f7 f8b9 	bl	8007e5c <Check_USB_PowerOn>
 8010cea:	1e03      	subs	r3, r0, #0
 8010cec:	d003      	beq.n	8010cf6 <configCheck+0x2b2>
    usbPluggedIn = true;
 8010cee:	4b20      	ldr	r3, [pc, #128]	@ (8010d70 <configCheck+0x32c>)
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 8010cf4:	e012      	b.n	8010d1c <configCheck+0x2d8>
    if(!userToggle && !init){
 8010cf6:	4b10      	ldr	r3, [pc, #64]	@ (8010d38 <configCheck+0x2f4>)
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	4053      	eors	r3, r2
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d008      	beq.n	8010d16 <configCheck+0x2d2>
 8010d04:	4b1c      	ldr	r3, [pc, #112]	@ (8010d78 <configCheck+0x334>)
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	2201      	movs	r2, #1
 8010d0a:	4053      	eors	r3, r2
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d001      	beq.n	8010d16 <configCheck+0x2d2>
      SetLEDsOff();
 8010d12:	f7ff fcf7 	bl	8010704 <SetLEDsOff>
    usbPluggedIn = false;
 8010d16:	4b16      	ldr	r3, [pc, #88]	@ (8010d70 <configCheck+0x32c>)
 8010d18:	2200      	movs	r2, #0
 8010d1a:	701a      	strb	r2, [r3, #0]
}
 8010d1c:	46c0      	nop			@ (mov r8, r8)
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	b003      	add	sp, #12
 8010d22:	bd90      	pop	{r4, r7, pc}
 8010d24:	20001e2c 	.word	0x20001e2c
 8010d28:	20001e34 	.word	0x20001e34
 8010d2c:	20001e2f 	.word	0x20001e2f
 8010d30:	00000bb8 	.word	0x00000bb8
 8010d34:	000005dc 	.word	0x000005dc
 8010d38:	20001e2e 	.word	0x20001e2e
 8010d3c:	0802aa50 	.word	0x0802aa50
 8010d40:	0802aa54 	.word	0x0802aa54
 8010d44:	0802aa58 	.word	0x0802aa58
 8010d48:	0802a9d8 	.word	0x0802a9d8
 8010d4c:	20001e38 	.word	0x20001e38
 8010d50:	20000ea0 	.word	0x20000ea0
 8010d54:	20000e9e 	.word	0x20000e9e
 8010d58:	0802aa78 	.word	0x0802aa78
 8010d5c:	0802aa80 	.word	0x0802aa80
 8010d60:	0802aa8c 	.word	0x0802aa8c
 8010d64:	0802aaac 	.word	0x0802aaac
 8010d68:	40000400 	.word	0x40000400
 8010d6c:	0802aab0 	.word	0x0802aab0
 8010d70:	20001e2d 	.word	0x20001e2d
 8010d74:	0802aac8 	.word	0x0802aac8
 8010d78:	200000dc 	.word	0x200000dc

08010d7c <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8010d7c:	b590      	push	{r4, r7, lr}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 8010d82:	1dfc      	adds	r4, r7, #7
 8010d84:	f7ff fdfa 	bl	801097c <powerCheck>
 8010d88:	0003      	movs	r3, r0
 8010d8a:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 8010d8c:	1dfb      	adds	r3, r7, #7
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	0018      	movs	r0, r3
 8010d92:	f7ff fe0f 	bl	80109b4 <powerDisplay>
  return status;
 8010d96:	1dfb      	adds	r3, r7, #7
 8010d98:	781b      	ldrb	r3, [r3, #0]
}
 8010d9a:	0018      	movs	r0, r3
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	b003      	add	sp, #12
 8010da0:	bd90      	pop	{r4, r7, pc}
	...

08010da4 <setuserToggle>:

void setuserToggle(void) {
 8010da4:	b580      	push	{r7, lr}
 8010da6:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 8010da8:	f7ff fde8 	bl	801097c <powerCheck>
 8010dac:	0003      	movs	r3, r0
 8010dae:	2b04      	cmp	r3, #4
 8010db0:	d004      	beq.n	8010dbc <setuserToggle+0x18>
    userToggle = true;
 8010db2:	4b04      	ldr	r3, [pc, #16]	@ (8010dc4 <setuserToggle+0x20>)
 8010db4:	2201      	movs	r2, #1
 8010db6:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 8010db8:	f7fa fe46 	bl	800ba48 <EnabledConnectedDevices>
  }
}
 8010dbc:	46c0      	nop			@ (mov r8, r8)
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	46c0      	nop			@ (mov r8, r8)
 8010dc4:	20001e2e 	.word	0x20001e2e

08010dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010dcc:	4b07      	ldr	r3, [pc, #28]	@ (8010dec <HAL_MspInit+0x24>)
 8010dce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010dd0:	4b06      	ldr	r3, [pc, #24]	@ (8010dec <HAL_MspInit+0x24>)
 8010dd2:	2101      	movs	r1, #1
 8010dd4:	430a      	orrs	r2, r1
 8010dd6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8010dd8:	4b04      	ldr	r3, [pc, #16]	@ (8010dec <HAL_MspInit+0x24>)
 8010dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ddc:	4b03      	ldr	r3, [pc, #12]	@ (8010dec <HAL_MspInit+0x24>)
 8010dde:	2180      	movs	r1, #128	@ 0x80
 8010de0:	0549      	lsls	r1, r1, #21
 8010de2:	430a      	orrs	r2, r1
 8010de4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010de6:	46c0      	nop			@ (mov r8, r8)
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	40021000 	.word	0x40021000

08010df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8010df4:	46c0      	nop			@ (mov r8, r8)
 8010df6:	e7fd      	b.n	8010df4 <NMI_Handler+0x4>

08010df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8010dfc:	46c0      	nop			@ (mov r8, r8)
 8010dfe:	e7fd      	b.n	8010dfc <HardFault_Handler+0x4>

08010e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8010e04:	46c0      	nop			@ (mov r8, r8)
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010e0e:	46c0      	nop			@ (mov r8, r8)
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010e18:	f001 f958 	bl	80120cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8010e1c:	46c0      	nop			@ (mov r8, r8)
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
	...

08010e24 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8010e28:	4b03      	ldr	r3, [pc, #12]	@ (8010e38 <RTC_IRQHandler+0x14>)
 8010e2a:	0018      	movs	r0, r3
 8010e2c:	f009 f916 	bl	801a05c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8010e30:	46c0      	nop			@ (mov r8, r8)
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	46c0      	nop			@ (mov r8, r8)
 8010e38:	20000e78 	.word	0x20000e78

08010e3c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8010e40:	2380      	movs	r3, #128	@ 0x80
 8010e42:	021b      	lsls	r3, r3, #8
 8010e44:	0018      	movs	r0, r3
 8010e46:	f002 fc01 	bl	801364c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8010e4a:	46c0      	nop			@ (mov r8, r8)
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8010e54:	4b05      	ldr	r3, [pc, #20]	@ (8010e6c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8010e56:	0018      	movs	r0, r3
 8010e58:	f001 ff89 	bl	8012d6e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8010e5c:	4b04      	ldr	r3, [pc, #16]	@ (8010e70 <DMA1_Channel2_3_IRQHandler+0x20>)
 8010e5e:	0018      	movs	r0, r3
 8010e60:	f001 ff85 	bl	8012d6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8010e64:	46c0      	nop			@ (mov r8, r8)
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	46c0      	nop			@ (mov r8, r8)
 8010e6c:	20000d10 	.word	0x20000d10
 8010e70:	20000cc8 	.word	0x20000cc8

08010e74 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8010e78:	4b07      	ldr	r3, [pc, #28]	@ (8010e98 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8010e7a:	0018      	movs	r0, r3
 8010e7c:	f001 ff77 	bl	8012d6e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8010e80:	4b06      	ldr	r3, [pc, #24]	@ (8010e9c <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8010e82:	0018      	movs	r0, r3
 8010e84:	f001 ff73 	bl	8012d6e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8010e88:	4b05      	ldr	r3, [pc, #20]	@ (8010ea0 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8010e8a:	0018      	movs	r0, r3
 8010e8c:	f001 ff6f 	bl	8012d6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8010e90:	46c0      	nop			@ (mov r8, r8)
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	46c0      	nop			@ (mov r8, r8)
 8010e98:	20000d94 	.word	0x20000d94
 8010e9c:	20002134 	.word	0x20002134
 8010ea0:	2000217c 	.word	0x2000217c

08010ea4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8010ea8:	4b03      	ldr	r3, [pc, #12]	@ (8010eb8 <USART4_5_IRQHandler+0x14>)
 8010eaa:	0018      	movs	r0, r3
 8010eac:	f009 ffd0 	bl	801ae50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8010eb0:	46c0      	nop			@ (mov r8, r8)
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	46c0      	nop			@ (mov r8, r8)
 8010eb8:	2000207c 	.word	0x2000207c

08010ebc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8010ec0:	4b09      	ldr	r3, [pc, #36]	@ (8010ee8 <I2C1_IRQHandler+0x2c>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	699a      	ldr	r2, [r3, #24]
 8010ec6:	23e0      	movs	r3, #224	@ 0xe0
 8010ec8:	00db      	lsls	r3, r3, #3
 8010eca:	4013      	ands	r3, r2
 8010ecc:	d004      	beq.n	8010ed8 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8010ece:	4b06      	ldr	r3, [pc, #24]	@ (8010ee8 <I2C1_IRQHandler+0x2c>)
 8010ed0:	0018      	movs	r0, r3
 8010ed2:	f003 fad9 	bl	8014488 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8010ed6:	e003      	b.n	8010ee0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8010ed8:	4b03      	ldr	r3, [pc, #12]	@ (8010ee8 <I2C1_IRQHandler+0x2c>)
 8010eda:	0018      	movs	r0, r3
 8010edc:	f003 faba 	bl	8014454 <HAL_I2C_EV_IRQHandler>
}
 8010ee0:	46c0      	nop			@ (mov r8, r8)
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	46c0      	nop			@ (mov r8, r8)
 8010ee8:	20000c20 	.word	0x20000c20

08010eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8010ef0:	4b03      	ldr	r3, [pc, #12]	@ (8010f00 <USART1_IRQHandler+0x14>)
 8010ef2:	0018      	movs	r0, r3
 8010ef4:	f009 ffac 	bl	801ae50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8010ef8:	46c0      	nop			@ (mov r8, r8)
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	46c0      	nop			@ (mov r8, r8)
 8010f00:	20001fc4 	.word	0x20001fc4

08010f04 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8010f08:	4b03      	ldr	r3, [pc, #12]	@ (8010f18 <USB_IRQHandler+0x14>)
 8010f0a:	0018      	movs	r0, r3
 8010f0c:	f005 fefc 	bl	8016d08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8010f10:	46c0      	nop			@ (mov r8, r8)
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	46c0      	nop			@ (mov r8, r8)
 8010f18:	20002f90 	.word	0x20002f90

08010f1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	af00      	add	r7, sp, #0
  return 1;
 8010f20:	2301      	movs	r3, #1
}
 8010f22:	0018      	movs	r0, r3
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <_kill>:

int _kill(int pid, int sig)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8010f32:	f012 fe93 	bl	8023c5c <__errno>
 8010f36:	0003      	movs	r3, r0
 8010f38:	2216      	movs	r2, #22
 8010f3a:	601a      	str	r2, [r3, #0]
  return -1;
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	425b      	negs	r3, r3
}
 8010f40:	0018      	movs	r0, r3
 8010f42:	46bd      	mov	sp, r7
 8010f44:	b002      	add	sp, #8
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <_exit>:

void _exit (int status)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8010f50:	2301      	movs	r3, #1
 8010f52:	425a      	negs	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	0011      	movs	r1, r2
 8010f58:	0018      	movs	r0, r3
 8010f5a:	f7ff ffe5 	bl	8010f28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8010f5e:	46c0      	nop			@ (mov r8, r8)
 8010f60:	e7fd      	b.n	8010f5e <_exit+0x16>

08010f62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b086      	sub	sp, #24
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	60f8      	str	r0, [r7, #12]
 8010f6a:	60b9      	str	r1, [r7, #8]
 8010f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010f6e:	2300      	movs	r3, #0
 8010f70:	617b      	str	r3, [r7, #20]
 8010f72:	e00a      	b.n	8010f8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8010f74:	e000      	b.n	8010f78 <_read+0x16>
 8010f76:	bf00      	nop
 8010f78:	0001      	movs	r1, r0
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	1c5a      	adds	r2, r3, #1
 8010f7e:	60ba      	str	r2, [r7, #8]
 8010f80:	b2ca      	uxtb	r2, r1
 8010f82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	3301      	adds	r3, #1
 8010f88:	617b      	str	r3, [r7, #20]
 8010f8a:	697a      	ldr	r2, [r7, #20]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	dbf0      	blt.n	8010f74 <_read+0x12>
  }

  return len;
 8010f92:	687b      	ldr	r3, [r7, #4]
}
 8010f94:	0018      	movs	r0, r3
 8010f96:	46bd      	mov	sp, r7
 8010f98:	b006      	add	sp, #24
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <_close>:
  }
  return len;
}

int _close(int file)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	425b      	negs	r3, r3
}
 8010fa8:	0018      	movs	r0, r3
 8010faa:	46bd      	mov	sp, r7
 8010fac:	b002      	add	sp, #8
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b082      	sub	sp, #8
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
 8010fb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	2280      	movs	r2, #128	@ 0x80
 8010fbe:	0192      	lsls	r2, r2, #6
 8010fc0:	605a      	str	r2, [r3, #4]
  return 0;
 8010fc2:	2300      	movs	r3, #0
}
 8010fc4:	0018      	movs	r0, r3
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	b002      	add	sp, #8
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <_isatty>:

int _isatty(int file)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8010fd4:	2301      	movs	r3, #1
}
 8010fd6:	0018      	movs	r0, r3
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	b002      	add	sp, #8
 8010fdc:	bd80      	pop	{r7, pc}

08010fde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010fde:	b580      	push	{r7, lr}
 8010fe0:	b084      	sub	sp, #16
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	60f8      	str	r0, [r7, #12]
 8010fe6:	60b9      	str	r1, [r7, #8]
 8010fe8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8010fea:	2300      	movs	r3, #0
}
 8010fec:	0018      	movs	r0, r3
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	b004      	add	sp, #16
 8010ff2:	bd80      	pop	{r7, pc}

08010ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b086      	sub	sp, #24
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010ffc:	4a14      	ldr	r2, [pc, #80]	@ (8011050 <_sbrk+0x5c>)
 8010ffe:	4b15      	ldr	r3, [pc, #84]	@ (8011054 <_sbrk+0x60>)
 8011000:	1ad3      	subs	r3, r2, r3
 8011002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8011008:	4b13      	ldr	r3, [pc, #76]	@ (8011058 <_sbrk+0x64>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d102      	bne.n	8011016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8011010:	4b11      	ldr	r3, [pc, #68]	@ (8011058 <_sbrk+0x64>)
 8011012:	4a12      	ldr	r2, [pc, #72]	@ (801105c <_sbrk+0x68>)
 8011014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8011016:	4b10      	ldr	r3, [pc, #64]	@ (8011058 <_sbrk+0x64>)
 8011018:	681a      	ldr	r2, [r3, #0]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	18d3      	adds	r3, r2, r3
 801101e:	693a      	ldr	r2, [r7, #16]
 8011020:	429a      	cmp	r2, r3
 8011022:	d207      	bcs.n	8011034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8011024:	f012 fe1a 	bl	8023c5c <__errno>
 8011028:	0003      	movs	r3, r0
 801102a:	220c      	movs	r2, #12
 801102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801102e:	2301      	movs	r3, #1
 8011030:	425b      	negs	r3, r3
 8011032:	e009      	b.n	8011048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8011034:	4b08      	ldr	r3, [pc, #32]	@ (8011058 <_sbrk+0x64>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801103a:	4b07      	ldr	r3, [pc, #28]	@ (8011058 <_sbrk+0x64>)
 801103c:	681a      	ldr	r2, [r3, #0]
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	18d2      	adds	r2, r2, r3
 8011042:	4b05      	ldr	r3, [pc, #20]	@ (8011058 <_sbrk+0x64>)
 8011044:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8011046:	68fb      	ldr	r3, [r7, #12]
}
 8011048:	0018      	movs	r0, r3
 801104a:	46bd      	mov	sp, r7
 801104c:	b006      	add	sp, #24
 801104e:	bd80      	pop	{r7, pc}
 8011050:	20005000 	.word	0x20005000
 8011054:	00000400 	.word	0x00000400
 8011058:	20001e48 	.word	0x20001e48
 801105c:	200035f0 	.word	0x200035f0

08011060 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8011064:	46c0      	nop			@ (mov r8, r8)
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
	...

0801106c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b086      	sub	sp, #24
 8011070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011072:	2310      	movs	r3, #16
 8011074:	18fb      	adds	r3, r7, r3
 8011076:	0018      	movs	r0, r3
 8011078:	2308      	movs	r3, #8
 801107a:	001a      	movs	r2, r3
 801107c:	2100      	movs	r1, #0
 801107e:	f012 fd49 	bl	8023b14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011082:	003b      	movs	r3, r7
 8011084:	0018      	movs	r0, r3
 8011086:	2310      	movs	r3, #16
 8011088:	001a      	movs	r2, r3
 801108a:	2100      	movs	r1, #0
 801108c:	f012 fd42 	bl	8023b14 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8011090:	4b2e      	ldr	r3, [pc, #184]	@ (801114c <MX_TIM2_Init+0xe0>)
 8011092:	2280      	movs	r2, #128	@ 0x80
 8011094:	05d2      	lsls	r2, r2, #23
 8011096:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8011098:	4b2c      	ldr	r3, [pc, #176]	@ (801114c <MX_TIM2_Init+0xe0>)
 801109a:	2200      	movs	r2, #0
 801109c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801109e:	4b2b      	ldr	r3, [pc, #172]	@ (801114c <MX_TIM2_Init+0xe0>)
 80110a0:	2200      	movs	r2, #0
 80110a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80110a4:	4b29      	ldr	r3, [pc, #164]	@ (801114c <MX_TIM2_Init+0xe0>)
 80110a6:	4a2a      	ldr	r2, [pc, #168]	@ (8011150 <MX_TIM2_Init+0xe4>)
 80110a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80110aa:	4b28      	ldr	r3, [pc, #160]	@ (801114c <MX_TIM2_Init+0xe0>)
 80110ac:	2200      	movs	r2, #0
 80110ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80110b0:	4b26      	ldr	r3, [pc, #152]	@ (801114c <MX_TIM2_Init+0xe0>)
 80110b2:	2200      	movs	r2, #0
 80110b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80110b6:	4b25      	ldr	r3, [pc, #148]	@ (801114c <MX_TIM2_Init+0xe0>)
 80110b8:	0018      	movs	r0, r3
 80110ba:	f009 f8dd 	bl	801a278 <HAL_TIM_PWM_Init>
 80110be:	1e03      	subs	r3, r0, #0
 80110c0:	d001      	beq.n	80110c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80110c2:	f7fa f8f3 	bl	800b2ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80110c6:	2110      	movs	r1, #16
 80110c8:	187b      	adds	r3, r7, r1
 80110ca:	2200      	movs	r2, #0
 80110cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80110ce:	187b      	adds	r3, r7, r1
 80110d0:	2200      	movs	r2, #0
 80110d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80110d4:	187a      	adds	r2, r7, r1
 80110d6:	4b1d      	ldr	r3, [pc, #116]	@ (801114c <MX_TIM2_Init+0xe0>)
 80110d8:	0011      	movs	r1, r2
 80110da:	0018      	movs	r0, r3
 80110dc:	f009 fbea 	bl	801a8b4 <HAL_TIMEx_MasterConfigSynchronization>
 80110e0:	1e03      	subs	r3, r0, #0
 80110e2:	d001      	beq.n	80110e8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80110e4:	f7fa f8e2 	bl	800b2ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80110e8:	003b      	movs	r3, r7
 80110ea:	2260      	movs	r2, #96	@ 0x60
 80110ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80110ee:	003b      	movs	r3, r7
 80110f0:	2200      	movs	r2, #0
 80110f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80110f4:	003b      	movs	r3, r7
 80110f6:	2200      	movs	r2, #0
 80110f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80110fa:	003b      	movs	r3, r7
 80110fc:	2200      	movs	r2, #0
 80110fe:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011100:	0039      	movs	r1, r7
 8011102:	4b12      	ldr	r3, [pc, #72]	@ (801114c <MX_TIM2_Init+0xe0>)
 8011104:	2200      	movs	r2, #0
 8011106:	0018      	movs	r0, r3
 8011108:	f009 f988 	bl	801a41c <HAL_TIM_PWM_ConfigChannel>
 801110c:	1e03      	subs	r3, r0, #0
 801110e:	d001      	beq.n	8011114 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8011110:	f7fa f8cc 	bl	800b2ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8011114:	0039      	movs	r1, r7
 8011116:	4b0d      	ldr	r3, [pc, #52]	@ (801114c <MX_TIM2_Init+0xe0>)
 8011118:	2208      	movs	r2, #8
 801111a:	0018      	movs	r0, r3
 801111c:	f009 f97e 	bl	801a41c <HAL_TIM_PWM_ConfigChannel>
 8011120:	1e03      	subs	r3, r0, #0
 8011122:	d001      	beq.n	8011128 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8011124:	f7fa f8c2 	bl	800b2ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8011128:	0039      	movs	r1, r7
 801112a:	4b08      	ldr	r3, [pc, #32]	@ (801114c <MX_TIM2_Init+0xe0>)
 801112c:	220c      	movs	r2, #12
 801112e:	0018      	movs	r0, r3
 8011130:	f009 f974 	bl	801a41c <HAL_TIM_PWM_ConfigChannel>
 8011134:	1e03      	subs	r3, r0, #0
 8011136:	d001      	beq.n	801113c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8011138:	f7fa f8b8 	bl	800b2ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 801113c:	4b03      	ldr	r3, [pc, #12]	@ (801114c <MX_TIM2_Init+0xe0>)
 801113e:	0018      	movs	r0, r3
 8011140:	f000 f8fe 	bl	8011340 <HAL_TIM_MspPostInit>

}
 8011144:	46c0      	nop			@ (mov r8, r8)
 8011146:	46bd      	mov	sp, r7
 8011148:	b006      	add	sp, #24
 801114a:	bd80      	pop	{r7, pc}
 801114c:	20001e4c 	.word	0x20001e4c
 8011150:	0000ffff 	.word	0x0000ffff

08011154 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b086      	sub	sp, #24
 8011158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801115a:	2310      	movs	r3, #16
 801115c:	18fb      	adds	r3, r7, r3
 801115e:	0018      	movs	r0, r3
 8011160:	2308      	movs	r3, #8
 8011162:	001a      	movs	r2, r3
 8011164:	2100      	movs	r1, #0
 8011166:	f012 fcd5 	bl	8023b14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801116a:	003b      	movs	r3, r7
 801116c:	0018      	movs	r0, r3
 801116e:	2310      	movs	r3, #16
 8011170:	001a      	movs	r2, r3
 8011172:	2100      	movs	r1, #0
 8011174:	f012 fcce 	bl	8023b14 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8011178:	4b32      	ldr	r3, [pc, #200]	@ (8011244 <MX_TIM3_Init+0xf0>)
 801117a:	4a33      	ldr	r2, [pc, #204]	@ (8011248 <MX_TIM3_Init+0xf4>)
 801117c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 801117e:	4b31      	ldr	r3, [pc, #196]	@ (8011244 <MX_TIM3_Init+0xf0>)
 8011180:	2200      	movs	r2, #0
 8011182:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011184:	4b2f      	ldr	r3, [pc, #188]	@ (8011244 <MX_TIM3_Init+0xf0>)
 8011186:	2200      	movs	r2, #0
 8011188:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 801118a:	4b2e      	ldr	r3, [pc, #184]	@ (8011244 <MX_TIM3_Init+0xf0>)
 801118c:	4a2f      	ldr	r2, [pc, #188]	@ (801124c <MX_TIM3_Init+0xf8>)
 801118e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011190:	4b2c      	ldr	r3, [pc, #176]	@ (8011244 <MX_TIM3_Init+0xf0>)
 8011192:	2200      	movs	r2, #0
 8011194:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011196:	4b2b      	ldr	r3, [pc, #172]	@ (8011244 <MX_TIM3_Init+0xf0>)
 8011198:	2200      	movs	r2, #0
 801119a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801119c:	4b29      	ldr	r3, [pc, #164]	@ (8011244 <MX_TIM3_Init+0xf0>)
 801119e:	0018      	movs	r0, r3
 80111a0:	f009 f86a 	bl	801a278 <HAL_TIM_PWM_Init>
 80111a4:	1e03      	subs	r3, r0, #0
 80111a6:	d001      	beq.n	80111ac <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80111a8:	f7fa f880 	bl	800b2ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80111ac:	2110      	movs	r1, #16
 80111ae:	187b      	adds	r3, r7, r1
 80111b0:	2200      	movs	r2, #0
 80111b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80111b4:	187b      	adds	r3, r7, r1
 80111b6:	2200      	movs	r2, #0
 80111b8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80111ba:	187a      	adds	r2, r7, r1
 80111bc:	4b21      	ldr	r3, [pc, #132]	@ (8011244 <MX_TIM3_Init+0xf0>)
 80111be:	0011      	movs	r1, r2
 80111c0:	0018      	movs	r0, r3
 80111c2:	f009 fb77 	bl	801a8b4 <HAL_TIMEx_MasterConfigSynchronization>
 80111c6:	1e03      	subs	r3, r0, #0
 80111c8:	d001      	beq.n	80111ce <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80111ca:	f7fa f86f 	bl	800b2ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80111ce:	003b      	movs	r3, r7
 80111d0:	2260      	movs	r2, #96	@ 0x60
 80111d2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80111d4:	003b      	movs	r3, r7
 80111d6:	2200      	movs	r2, #0
 80111d8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80111da:	003b      	movs	r3, r7
 80111dc:	2200      	movs	r2, #0
 80111de:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80111e0:	003b      	movs	r3, r7
 80111e2:	2200      	movs	r2, #0
 80111e4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80111e6:	0039      	movs	r1, r7
 80111e8:	4b16      	ldr	r3, [pc, #88]	@ (8011244 <MX_TIM3_Init+0xf0>)
 80111ea:	2200      	movs	r2, #0
 80111ec:	0018      	movs	r0, r3
 80111ee:	f009 f915 	bl	801a41c <HAL_TIM_PWM_ConfigChannel>
 80111f2:	1e03      	subs	r3, r0, #0
 80111f4:	d001      	beq.n	80111fa <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80111f6:	f7fa f859 	bl	800b2ac <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80111fa:	4b12      	ldr	r3, [pc, #72]	@ (8011244 <MX_TIM3_Init+0xf0>)
 80111fc:	2104      	movs	r1, #4
 80111fe:	0018      	movs	r0, r3
 8011200:	f009 fbb6 	bl	801a970 <HAL_TIMEx_RemapConfig>
 8011204:	1e03      	subs	r3, r0, #0
 8011206:	d001      	beq.n	801120c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8011208:	f7fa f850 	bl	800b2ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801120c:	0039      	movs	r1, r7
 801120e:	4b0d      	ldr	r3, [pc, #52]	@ (8011244 <MX_TIM3_Init+0xf0>)
 8011210:	2204      	movs	r2, #4
 8011212:	0018      	movs	r0, r3
 8011214:	f009 f902 	bl	801a41c <HAL_TIM_PWM_ConfigChannel>
 8011218:	1e03      	subs	r3, r0, #0
 801121a:	d001      	beq.n	8011220 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 801121c:	f7fa f846 	bl	800b2ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8011220:	0039      	movs	r1, r7
 8011222:	4b08      	ldr	r3, [pc, #32]	@ (8011244 <MX_TIM3_Init+0xf0>)
 8011224:	2208      	movs	r2, #8
 8011226:	0018      	movs	r0, r3
 8011228:	f009 f8f8 	bl	801a41c <HAL_TIM_PWM_ConfigChannel>
 801122c:	1e03      	subs	r3, r0, #0
 801122e:	d001      	beq.n	8011234 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8011230:	f7fa f83c 	bl	800b2ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8011234:	4b03      	ldr	r3, [pc, #12]	@ (8011244 <MX_TIM3_Init+0xf0>)
 8011236:	0018      	movs	r0, r3
 8011238:	f000 f882 	bl	8011340 <HAL_TIM_MspPostInit>

}
 801123c:	46c0      	nop			@ (mov r8, r8)
 801123e:	46bd      	mov	sp, r7
 8011240:	b006      	add	sp, #24
 8011242:	bd80      	pop	{r7, pc}
 8011244:	20001e8c 	.word	0x20001e8c
 8011248:	40000400 	.word	0x40000400
 801124c:	0000ffff 	.word	0x0000ffff

08011250 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b082      	sub	sp, #8
 8011254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011256:	003b      	movs	r3, r7
 8011258:	0018      	movs	r0, r3
 801125a:	2308      	movs	r3, #8
 801125c:	001a      	movs	r2, r3
 801125e:	2100      	movs	r1, #0
 8011260:	f012 fc58 	bl	8023b14 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8011264:	4b15      	ldr	r3, [pc, #84]	@ (80112bc <MX_TIM6_Init+0x6c>)
 8011266:	4a16      	ldr	r2, [pc, #88]	@ (80112c0 <MX_TIM6_Init+0x70>)
 8011268:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 801126a:	4b14      	ldr	r3, [pc, #80]	@ (80112bc <MX_TIM6_Init+0x6c>)
 801126c:	220a      	movs	r2, #10
 801126e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011270:	4b12      	ldr	r3, [pc, #72]	@ (80112bc <MX_TIM6_Init+0x6c>)
 8011272:	2200      	movs	r2, #0
 8011274:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8011276:	4b11      	ldr	r3, [pc, #68]	@ (80112bc <MX_TIM6_Init+0x6c>)
 8011278:	4a12      	ldr	r2, [pc, #72]	@ (80112c4 <MX_TIM6_Init+0x74>)
 801127a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801127c:	4b0f      	ldr	r3, [pc, #60]	@ (80112bc <MX_TIM6_Init+0x6c>)
 801127e:	2200      	movs	r2, #0
 8011280:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8011282:	4b0e      	ldr	r3, [pc, #56]	@ (80112bc <MX_TIM6_Init+0x6c>)
 8011284:	0018      	movs	r0, r3
 8011286:	f008 ff4f 	bl	801a128 <HAL_TIM_Base_Init>
 801128a:	1e03      	subs	r3, r0, #0
 801128c:	d001      	beq.n	8011292 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 801128e:	f7fa f80d 	bl	800b2ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011292:	003b      	movs	r3, r7
 8011294:	2200      	movs	r2, #0
 8011296:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011298:	003b      	movs	r3, r7
 801129a:	2200      	movs	r2, #0
 801129c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801129e:	003a      	movs	r2, r7
 80112a0:	4b06      	ldr	r3, [pc, #24]	@ (80112bc <MX_TIM6_Init+0x6c>)
 80112a2:	0011      	movs	r1, r2
 80112a4:	0018      	movs	r0, r3
 80112a6:	f009 fb05 	bl	801a8b4 <HAL_TIMEx_MasterConfigSynchronization>
 80112aa:	1e03      	subs	r3, r0, #0
 80112ac:	d001      	beq.n	80112b2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80112ae:	f7f9 fffd 	bl	800b2ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80112b2:	46c0      	nop			@ (mov r8, r8)
 80112b4:	46bd      	mov	sp, r7
 80112b6:	b002      	add	sp, #8
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	46c0      	nop			@ (mov r8, r8)
 80112bc:	20001ecc 	.word	0x20001ecc
 80112c0:	40001000 	.word	0x40001000
 80112c4:	0000ffff 	.word	0x0000ffff

080112c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	2380      	movs	r3, #128	@ 0x80
 80112d6:	05db      	lsls	r3, r3, #23
 80112d8:	429a      	cmp	r2, r3
 80112da:	d106      	bne.n	80112ea <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80112dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011308 <HAL_TIM_PWM_MspInit+0x40>)
 80112de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80112e0:	4b09      	ldr	r3, [pc, #36]	@ (8011308 <HAL_TIM_PWM_MspInit+0x40>)
 80112e2:	2101      	movs	r1, #1
 80112e4:	430a      	orrs	r2, r1
 80112e6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80112e8:	e00a      	b.n	8011300 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	4a07      	ldr	r2, [pc, #28]	@ (801130c <HAL_TIM_PWM_MspInit+0x44>)
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d105      	bne.n	8011300 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80112f4:	4b04      	ldr	r3, [pc, #16]	@ (8011308 <HAL_TIM_PWM_MspInit+0x40>)
 80112f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80112f8:	4b03      	ldr	r3, [pc, #12]	@ (8011308 <HAL_TIM_PWM_MspInit+0x40>)
 80112fa:	2102      	movs	r1, #2
 80112fc:	430a      	orrs	r2, r1
 80112fe:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8011300:	46c0      	nop			@ (mov r8, r8)
 8011302:	46bd      	mov	sp, r7
 8011304:	b002      	add	sp, #8
 8011306:	bd80      	pop	{r7, pc}
 8011308:	40021000 	.word	0x40021000
 801130c:	40000400 	.word	0x40000400

08011310 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4a06      	ldr	r2, [pc, #24]	@ (8011338 <HAL_TIM_Base_MspInit+0x28>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d105      	bne.n	801132e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8011322:	4b06      	ldr	r3, [pc, #24]	@ (801133c <HAL_TIM_Base_MspInit+0x2c>)
 8011324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011326:	4b05      	ldr	r3, [pc, #20]	@ (801133c <HAL_TIM_Base_MspInit+0x2c>)
 8011328:	2110      	movs	r1, #16
 801132a:	430a      	orrs	r2, r1
 801132c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 801132e:	46c0      	nop			@ (mov r8, r8)
 8011330:	46bd      	mov	sp, r7
 8011332:	b002      	add	sp, #8
 8011334:	bd80      	pop	{r7, pc}
 8011336:	46c0      	nop			@ (mov r8, r8)
 8011338:	40001000 	.word	0x40001000
 801133c:	40021000 	.word	0x40021000

08011340 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8011340:	b590      	push	{r4, r7, lr}
 8011342:	b08b      	sub	sp, #44	@ 0x2c
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011348:	2414      	movs	r4, #20
 801134a:	193b      	adds	r3, r7, r4
 801134c:	0018      	movs	r0, r3
 801134e:	2314      	movs	r3, #20
 8011350:	001a      	movs	r2, r3
 8011352:	2100      	movs	r1, #0
 8011354:	f012 fbde 	bl	8023b14 <memset>
  if(timHandle->Instance==TIM2)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681a      	ldr	r2, [r3, #0]
 801135c:	2380      	movs	r3, #128	@ 0x80
 801135e:	05db      	lsls	r3, r3, #23
 8011360:	429a      	cmp	r2, r3
 8011362:	d123      	bne.n	80113ac <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011364:	4b27      	ldr	r3, [pc, #156]	@ (8011404 <HAL_TIM_MspPostInit+0xc4>)
 8011366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011368:	4b26      	ldr	r3, [pc, #152]	@ (8011404 <HAL_TIM_MspPostInit+0xc4>)
 801136a:	2101      	movs	r1, #1
 801136c:	430a      	orrs	r2, r1
 801136e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011370:	4b24      	ldr	r3, [pc, #144]	@ (8011404 <HAL_TIM_MspPostInit+0xc4>)
 8011372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011374:	2201      	movs	r2, #1
 8011376:	4013      	ands	r3, r2
 8011378:	613b      	str	r3, [r7, #16]
 801137a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 801137c:	0021      	movs	r1, r4
 801137e:	187b      	adds	r3, r7, r1
 8011380:	220d      	movs	r2, #13
 8011382:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011384:	187b      	adds	r3, r7, r1
 8011386:	2202      	movs	r2, #2
 8011388:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801138a:	187b      	adds	r3, r7, r1
 801138c:	2200      	movs	r2, #0
 801138e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011390:	187b      	adds	r3, r7, r1
 8011392:	2200      	movs	r2, #0
 8011394:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8011396:	187b      	adds	r3, r7, r1
 8011398:	2202      	movs	r2, #2
 801139a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801139c:	187a      	adds	r2, r7, r1
 801139e:	23a0      	movs	r3, #160	@ 0xa0
 80113a0:	05db      	lsls	r3, r3, #23
 80113a2:	0011      	movs	r1, r2
 80113a4:	0018      	movs	r0, r3
 80113a6:	f001 ff99 	bl	80132dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80113aa:	e027      	b.n	80113fc <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	4a15      	ldr	r2, [pc, #84]	@ (8011408 <HAL_TIM_MspPostInit+0xc8>)
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d122      	bne.n	80113fc <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80113b6:	4b13      	ldr	r3, [pc, #76]	@ (8011404 <HAL_TIM_MspPostInit+0xc4>)
 80113b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113ba:	4b12      	ldr	r3, [pc, #72]	@ (8011404 <HAL_TIM_MspPostInit+0xc4>)
 80113bc:	2104      	movs	r1, #4
 80113be:	430a      	orrs	r2, r1
 80113c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80113c2:	4b10      	ldr	r3, [pc, #64]	@ (8011404 <HAL_TIM_MspPostInit+0xc4>)
 80113c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113c6:	2204      	movs	r2, #4
 80113c8:	4013      	ands	r3, r2
 80113ca:	60fb      	str	r3, [r7, #12]
 80113cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80113ce:	2114      	movs	r1, #20
 80113d0:	187b      	adds	r3, r7, r1
 80113d2:	22e0      	movs	r2, #224	@ 0xe0
 80113d4:	0052      	lsls	r2, r2, #1
 80113d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80113d8:	187b      	adds	r3, r7, r1
 80113da:	2202      	movs	r2, #2
 80113dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113de:	187b      	adds	r3, r7, r1
 80113e0:	2200      	movs	r2, #0
 80113e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80113e4:	187b      	adds	r3, r7, r1
 80113e6:	2200      	movs	r2, #0
 80113e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80113ea:	187b      	adds	r3, r7, r1
 80113ec:	2202      	movs	r2, #2
 80113ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80113f0:	187b      	adds	r3, r7, r1
 80113f2:	4a06      	ldr	r2, [pc, #24]	@ (801140c <HAL_TIM_MspPostInit+0xcc>)
 80113f4:	0019      	movs	r1, r3
 80113f6:	0010      	movs	r0, r2
 80113f8:	f001 ff70 	bl	80132dc <HAL_GPIO_Init>
}
 80113fc:	46c0      	nop			@ (mov r8, r8)
 80113fe:	46bd      	mov	sp, r7
 8011400:	b00b      	add	sp, #44	@ 0x2c
 8011402:	bd90      	pop	{r4, r7, pc}
 8011404:	40021000 	.word	0x40021000
 8011408:	40000400 	.word	0x40000400
 801140c:	50000800 	.word	0x50000800

08011410 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8011414:	4b17      	ldr	r3, [pc, #92]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 8011416:	4a18      	ldr	r2, [pc, #96]	@ (8011478 <MX_LPUART1_UART_Init+0x68>)
 8011418:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 801141a:	4b16      	ldr	r3, [pc, #88]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 801141c:	22e1      	movs	r2, #225	@ 0xe1
 801141e:	0252      	lsls	r2, r2, #9
 8011420:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8011422:	4b14      	ldr	r3, [pc, #80]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 8011424:	2200      	movs	r2, #0
 8011426:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8011428:	4b12      	ldr	r3, [pc, #72]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 801142a:	2200      	movs	r2, #0
 801142c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 801142e:	4b11      	ldr	r3, [pc, #68]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 8011430:	2200      	movs	r2, #0
 8011432:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8011434:	4b0f      	ldr	r3, [pc, #60]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 8011436:	220c      	movs	r2, #12
 8011438:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801143a:	4b0e      	ldr	r3, [pc, #56]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 801143c:	2200      	movs	r2, #0
 801143e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011440:	4b0c      	ldr	r3, [pc, #48]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 8011442:	2200      	movs	r2, #0
 8011444:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8011446:	4b0b      	ldr	r3, [pc, #44]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 8011448:	2218      	movs	r2, #24
 801144a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 801144c:	4b09      	ldr	r3, [pc, #36]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 801144e:	2280      	movs	r2, #128	@ 0x80
 8011450:	0212      	lsls	r2, r2, #8
 8011452:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8011454:	4b07      	ldr	r3, [pc, #28]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 8011456:	2280      	movs	r2, #128	@ 0x80
 8011458:	0152      	lsls	r2, r2, #5
 801145a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 801145c:	4b05      	ldr	r3, [pc, #20]	@ (8011474 <MX_LPUART1_UART_Init+0x64>)
 801145e:	0018      	movs	r0, r3
 8011460:	f009 faa4 	bl	801a9ac <HAL_UART_Init>
 8011464:	1e03      	subs	r3, r0, #0
 8011466:	d001      	beq.n	801146c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8011468:	f7f9 ff20 	bl	800b2ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 801146c:	46c0      	nop			@ (mov r8, r8)
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}
 8011472:	46c0      	nop			@ (mov r8, r8)
 8011474:	20001f0c 	.word	0x20001f0c
 8011478:	40004800 	.word	0x40004800

0801147c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8011480:	4b14      	ldr	r3, [pc, #80]	@ (80114d4 <MX_USART1_UART_Init+0x58>)
 8011482:	4a15      	ldr	r2, [pc, #84]	@ (80114d8 <MX_USART1_UART_Init+0x5c>)
 8011484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8011486:	4b13      	ldr	r3, [pc, #76]	@ (80114d4 <MX_USART1_UART_Init+0x58>)
 8011488:	22e1      	movs	r2, #225	@ 0xe1
 801148a:	0252      	lsls	r2, r2, #9
 801148c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801148e:	4b11      	ldr	r3, [pc, #68]	@ (80114d4 <MX_USART1_UART_Init+0x58>)
 8011490:	2200      	movs	r2, #0
 8011492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8011494:	4b0f      	ldr	r3, [pc, #60]	@ (80114d4 <MX_USART1_UART_Init+0x58>)
 8011496:	2200      	movs	r2, #0
 8011498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801149a:	4b0e      	ldr	r3, [pc, #56]	@ (80114d4 <MX_USART1_UART_Init+0x58>)
 801149c:	2200      	movs	r2, #0
 801149e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80114a0:	4b0c      	ldr	r3, [pc, #48]	@ (80114d4 <MX_USART1_UART_Init+0x58>)
 80114a2:	220c      	movs	r2, #12
 80114a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80114a6:	4b0b      	ldr	r3, [pc, #44]	@ (80114d4 <MX_USART1_UART_Init+0x58>)
 80114a8:	2200      	movs	r2, #0
 80114aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80114ac:	4b09      	ldr	r3, [pc, #36]	@ (80114d4 <MX_USART1_UART_Init+0x58>)
 80114ae:	2200      	movs	r2, #0
 80114b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80114b2:	4b08      	ldr	r3, [pc, #32]	@ (80114d4 <MX_USART1_UART_Init+0x58>)
 80114b4:	2200      	movs	r2, #0
 80114b6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80114b8:	4b06      	ldr	r3, [pc, #24]	@ (80114d4 <MX_USART1_UART_Init+0x58>)
 80114ba:	2200      	movs	r2, #0
 80114bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80114be:	4b05      	ldr	r3, [pc, #20]	@ (80114d4 <MX_USART1_UART_Init+0x58>)
 80114c0:	0018      	movs	r0, r3
 80114c2:	f009 fa73 	bl	801a9ac <HAL_UART_Init>
 80114c6:	1e03      	subs	r3, r0, #0
 80114c8:	d001      	beq.n	80114ce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80114ca:	f7f9 feef 	bl	800b2ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80114ce:	46c0      	nop			@ (mov r8, r8)
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	20001fc4 	.word	0x20001fc4
 80114d8:	40013800 	.word	0x40013800

080114dc <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80114e0:	4b14      	ldr	r3, [pc, #80]	@ (8011534 <MX_USART4_UART_Init+0x58>)
 80114e2:	4a15      	ldr	r2, [pc, #84]	@ (8011538 <MX_USART4_UART_Init+0x5c>)
 80114e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80114e6:	4b13      	ldr	r3, [pc, #76]	@ (8011534 <MX_USART4_UART_Init+0x58>)
 80114e8:	22e1      	movs	r2, #225	@ 0xe1
 80114ea:	0252      	lsls	r2, r2, #9
 80114ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80114ee:	4b11      	ldr	r3, [pc, #68]	@ (8011534 <MX_USART4_UART_Init+0x58>)
 80114f0:	2200      	movs	r2, #0
 80114f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80114f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011534 <MX_USART4_UART_Init+0x58>)
 80114f6:	2200      	movs	r2, #0
 80114f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80114fa:	4b0e      	ldr	r3, [pc, #56]	@ (8011534 <MX_USART4_UART_Init+0x58>)
 80114fc:	2200      	movs	r2, #0
 80114fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8011500:	4b0c      	ldr	r3, [pc, #48]	@ (8011534 <MX_USART4_UART_Init+0x58>)
 8011502:	220c      	movs	r2, #12
 8011504:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011506:	4b0b      	ldr	r3, [pc, #44]	@ (8011534 <MX_USART4_UART_Init+0x58>)
 8011508:	2200      	movs	r2, #0
 801150a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 801150c:	4b09      	ldr	r3, [pc, #36]	@ (8011534 <MX_USART4_UART_Init+0x58>)
 801150e:	2200      	movs	r2, #0
 8011510:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8011512:	4b08      	ldr	r3, [pc, #32]	@ (8011534 <MX_USART4_UART_Init+0x58>)
 8011514:	2200      	movs	r2, #0
 8011516:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8011518:	4b06      	ldr	r3, [pc, #24]	@ (8011534 <MX_USART4_UART_Init+0x58>)
 801151a:	2200      	movs	r2, #0
 801151c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 801151e:	4b05      	ldr	r3, [pc, #20]	@ (8011534 <MX_USART4_UART_Init+0x58>)
 8011520:	0018      	movs	r0, r3
 8011522:	f009 fa43 	bl	801a9ac <HAL_UART_Init>
 8011526:	1e03      	subs	r3, r0, #0
 8011528:	d001      	beq.n	801152e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 801152a:	f7f9 febf 	bl	800b2ac <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 801152e:	46c0      	nop			@ (mov r8, r8)
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	2000207c 	.word	0x2000207c
 8011538:	40004c00 	.word	0x40004c00

0801153c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801153c:	b590      	push	{r4, r7, lr}
 801153e:	b08d      	sub	sp, #52	@ 0x34
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011544:	241c      	movs	r4, #28
 8011546:	193b      	adds	r3, r7, r4
 8011548:	0018      	movs	r0, r3
 801154a:	2314      	movs	r3, #20
 801154c:	001a      	movs	r2, r3
 801154e:	2100      	movs	r1, #0
 8011550:	f012 fae0 	bl	8023b14 <memset>
  if(uartHandle->Instance==LPUART1)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	4a8b      	ldr	r2, [pc, #556]	@ (8011788 <HAL_UART_MspInit+0x24c>)
 801155a:	4293      	cmp	r3, r2
 801155c:	d129      	bne.n	80115b2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801155e:	4b8b      	ldr	r3, [pc, #556]	@ (801178c <HAL_UART_MspInit+0x250>)
 8011560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011562:	4b8a      	ldr	r3, [pc, #552]	@ (801178c <HAL_UART_MspInit+0x250>)
 8011564:	2180      	movs	r1, #128	@ 0x80
 8011566:	02c9      	lsls	r1, r1, #11
 8011568:	430a      	orrs	r2, r1
 801156a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801156c:	4b87      	ldr	r3, [pc, #540]	@ (801178c <HAL_UART_MspInit+0x250>)
 801156e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011570:	4b86      	ldr	r3, [pc, #536]	@ (801178c <HAL_UART_MspInit+0x250>)
 8011572:	2104      	movs	r1, #4
 8011574:	430a      	orrs	r2, r1
 8011576:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011578:	4b84      	ldr	r3, [pc, #528]	@ (801178c <HAL_UART_MspInit+0x250>)
 801157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801157c:	2204      	movs	r2, #4
 801157e:	4013      	ands	r3, r2
 8011580:	61bb      	str	r3, [r7, #24]
 8011582:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8011584:	0021      	movs	r1, r4
 8011586:	187b      	adds	r3, r7, r1
 8011588:	2203      	movs	r2, #3
 801158a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801158c:	187b      	adds	r3, r7, r1
 801158e:	2202      	movs	r2, #2
 8011590:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011592:	187b      	adds	r3, r7, r1
 8011594:	2200      	movs	r2, #0
 8011596:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011598:	187b      	adds	r3, r7, r1
 801159a:	2203      	movs	r2, #3
 801159c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 801159e:	187b      	adds	r3, r7, r1
 80115a0:	2206      	movs	r2, #6
 80115a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80115a4:	187b      	adds	r3, r7, r1
 80115a6:	4a7a      	ldr	r2, [pc, #488]	@ (8011790 <HAL_UART_MspInit+0x254>)
 80115a8:	0019      	movs	r1, r3
 80115aa:	0010      	movs	r0, r2
 80115ac:	f001 fe96 	bl	80132dc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80115b0:	e0e5      	b.n	801177e <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	4a77      	ldr	r2, [pc, #476]	@ (8011794 <HAL_UART_MspInit+0x258>)
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d133      	bne.n	8011624 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80115bc:	4b73      	ldr	r3, [pc, #460]	@ (801178c <HAL_UART_MspInit+0x250>)
 80115be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80115c0:	4b72      	ldr	r3, [pc, #456]	@ (801178c <HAL_UART_MspInit+0x250>)
 80115c2:	2180      	movs	r1, #128	@ 0x80
 80115c4:	01c9      	lsls	r1, r1, #7
 80115c6:	430a      	orrs	r2, r1
 80115c8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115ca:	4b70      	ldr	r3, [pc, #448]	@ (801178c <HAL_UART_MspInit+0x250>)
 80115cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115ce:	4b6f      	ldr	r3, [pc, #444]	@ (801178c <HAL_UART_MspInit+0x250>)
 80115d0:	2101      	movs	r1, #1
 80115d2:	430a      	orrs	r2, r1
 80115d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80115d6:	4b6d      	ldr	r3, [pc, #436]	@ (801178c <HAL_UART_MspInit+0x250>)
 80115d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115da:	2201      	movs	r2, #1
 80115dc:	4013      	ands	r3, r2
 80115de:	617b      	str	r3, [r7, #20]
 80115e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80115e2:	211c      	movs	r1, #28
 80115e4:	187b      	adds	r3, r7, r1
 80115e6:	22c0      	movs	r2, #192	@ 0xc0
 80115e8:	00d2      	lsls	r2, r2, #3
 80115ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115ec:	187b      	adds	r3, r7, r1
 80115ee:	2202      	movs	r2, #2
 80115f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115f2:	187b      	adds	r3, r7, r1
 80115f4:	2200      	movs	r2, #0
 80115f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115f8:	187b      	adds	r3, r7, r1
 80115fa:	2203      	movs	r2, #3
 80115fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80115fe:	187b      	adds	r3, r7, r1
 8011600:	2204      	movs	r2, #4
 8011602:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011604:	187a      	adds	r2, r7, r1
 8011606:	23a0      	movs	r3, #160	@ 0xa0
 8011608:	05db      	lsls	r3, r3, #23
 801160a:	0011      	movs	r1, r2
 801160c:	0018      	movs	r0, r3
 801160e:	f001 fe65 	bl	80132dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8011612:	2200      	movs	r2, #0
 8011614:	2100      	movs	r1, #0
 8011616:	201b      	movs	r0, #27
 8011618:	f001 fa0e 	bl	8012a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 801161c:	201b      	movs	r0, #27
 801161e:	f001 fa20 	bl	8012a62 <HAL_NVIC_EnableIRQ>
}
 8011622:	e0ac      	b.n	801177e <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4a5b      	ldr	r2, [pc, #364]	@ (8011798 <HAL_UART_MspInit+0x25c>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d000      	beq.n	8011630 <HAL_UART_MspInit+0xf4>
 801162e:	e0a6      	b.n	801177e <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8011630:	4b56      	ldr	r3, [pc, #344]	@ (801178c <HAL_UART_MspInit+0x250>)
 8011632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011634:	4b55      	ldr	r3, [pc, #340]	@ (801178c <HAL_UART_MspInit+0x250>)
 8011636:	2180      	movs	r1, #128	@ 0x80
 8011638:	0309      	lsls	r1, r1, #12
 801163a:	430a      	orrs	r2, r1
 801163c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801163e:	4b53      	ldr	r3, [pc, #332]	@ (801178c <HAL_UART_MspInit+0x250>)
 8011640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011642:	4b52      	ldr	r3, [pc, #328]	@ (801178c <HAL_UART_MspInit+0x250>)
 8011644:	2101      	movs	r1, #1
 8011646:	430a      	orrs	r2, r1
 8011648:	62da      	str	r2, [r3, #44]	@ 0x2c
 801164a:	4b50      	ldr	r3, [pc, #320]	@ (801178c <HAL_UART_MspInit+0x250>)
 801164c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801164e:	2201      	movs	r2, #1
 8011650:	4013      	ands	r3, r2
 8011652:	613b      	str	r3, [r7, #16]
 8011654:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011656:	4b4d      	ldr	r3, [pc, #308]	@ (801178c <HAL_UART_MspInit+0x250>)
 8011658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801165a:	4b4c      	ldr	r3, [pc, #304]	@ (801178c <HAL_UART_MspInit+0x250>)
 801165c:	2104      	movs	r1, #4
 801165e:	430a      	orrs	r2, r1
 8011660:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011662:	4b4a      	ldr	r3, [pc, #296]	@ (801178c <HAL_UART_MspInit+0x250>)
 8011664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011666:	2204      	movs	r2, #4
 8011668:	4013      	ands	r3, r2
 801166a:	60fb      	str	r3, [r7, #12]
 801166c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801166e:	241c      	movs	r4, #28
 8011670:	193b      	adds	r3, r7, r4
 8011672:	2202      	movs	r2, #2
 8011674:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011676:	193b      	adds	r3, r7, r4
 8011678:	2202      	movs	r2, #2
 801167a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801167c:	193b      	adds	r3, r7, r4
 801167e:	2200      	movs	r2, #0
 8011680:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011682:	193b      	adds	r3, r7, r4
 8011684:	2203      	movs	r2, #3
 8011686:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8011688:	193b      	adds	r3, r7, r4
 801168a:	2206      	movs	r2, #6
 801168c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801168e:	193a      	adds	r2, r7, r4
 8011690:	23a0      	movs	r3, #160	@ 0xa0
 8011692:	05db      	lsls	r3, r3, #23
 8011694:	0011      	movs	r1, r2
 8011696:	0018      	movs	r0, r3
 8011698:	f001 fe20 	bl	80132dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 801169c:	0021      	movs	r1, r4
 801169e:	187b      	adds	r3, r7, r1
 80116a0:	2280      	movs	r2, #128	@ 0x80
 80116a2:	00d2      	lsls	r2, r2, #3
 80116a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80116a6:	187b      	adds	r3, r7, r1
 80116a8:	2202      	movs	r2, #2
 80116aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116ac:	187b      	adds	r3, r7, r1
 80116ae:	2200      	movs	r2, #0
 80116b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80116b2:	187b      	adds	r3, r7, r1
 80116b4:	2203      	movs	r2, #3
 80116b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80116b8:	187b      	adds	r3, r7, r1
 80116ba:	2206      	movs	r2, #6
 80116bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80116be:	187b      	adds	r3, r7, r1
 80116c0:	4a33      	ldr	r2, [pc, #204]	@ (8011790 <HAL_UART_MspInit+0x254>)
 80116c2:	0019      	movs	r1, r3
 80116c4:	0010      	movs	r0, r2
 80116c6:	f001 fe09 	bl	80132dc <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80116ca:	4b34      	ldr	r3, [pc, #208]	@ (801179c <HAL_UART_MspInit+0x260>)
 80116cc:	4a34      	ldr	r2, [pc, #208]	@ (80117a0 <HAL_UART_MspInit+0x264>)
 80116ce:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80116d0:	4b32      	ldr	r3, [pc, #200]	@ (801179c <HAL_UART_MspInit+0x260>)
 80116d2:	220c      	movs	r2, #12
 80116d4:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80116d6:	4b31      	ldr	r3, [pc, #196]	@ (801179c <HAL_UART_MspInit+0x260>)
 80116d8:	2200      	movs	r2, #0
 80116da:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80116dc:	4b2f      	ldr	r3, [pc, #188]	@ (801179c <HAL_UART_MspInit+0x260>)
 80116de:	2200      	movs	r2, #0
 80116e0:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80116e2:	4b2e      	ldr	r3, [pc, #184]	@ (801179c <HAL_UART_MspInit+0x260>)
 80116e4:	2280      	movs	r2, #128	@ 0x80
 80116e6:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80116e8:	4b2c      	ldr	r3, [pc, #176]	@ (801179c <HAL_UART_MspInit+0x260>)
 80116ea:	2200      	movs	r2, #0
 80116ec:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80116ee:	4b2b      	ldr	r3, [pc, #172]	@ (801179c <HAL_UART_MspInit+0x260>)
 80116f0:	2200      	movs	r2, #0
 80116f2:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80116f4:	4b29      	ldr	r3, [pc, #164]	@ (801179c <HAL_UART_MspInit+0x260>)
 80116f6:	2220      	movs	r2, #32
 80116f8:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80116fa:	4b28      	ldr	r3, [pc, #160]	@ (801179c <HAL_UART_MspInit+0x260>)
 80116fc:	2200      	movs	r2, #0
 80116fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8011700:	4b26      	ldr	r3, [pc, #152]	@ (801179c <HAL_UART_MspInit+0x260>)
 8011702:	0018      	movs	r0, r3
 8011704:	f001 f9ce 	bl	8012aa4 <HAL_DMA_Init>
 8011708:	1e03      	subs	r3, r0, #0
 801170a:	d001      	beq.n	8011710 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 801170c:	f7f9 fdce 	bl	800b2ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	4a22      	ldr	r2, [pc, #136]	@ (801179c <HAL_UART_MspInit+0x260>)
 8011714:	675a      	str	r2, [r3, #116]	@ 0x74
 8011716:	4b21      	ldr	r3, [pc, #132]	@ (801179c <HAL_UART_MspInit+0x260>)
 8011718:	687a      	ldr	r2, [r7, #4]
 801171a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 801171c:	4b21      	ldr	r3, [pc, #132]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 801171e:	4a22      	ldr	r2, [pc, #136]	@ (80117a8 <HAL_UART_MspInit+0x26c>)
 8011720:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8011722:	4b20      	ldr	r3, [pc, #128]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 8011724:	220c      	movs	r2, #12
 8011726:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8011728:	4b1e      	ldr	r3, [pc, #120]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 801172a:	2210      	movs	r2, #16
 801172c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801172e:	4b1d      	ldr	r3, [pc, #116]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 8011730:	2200      	movs	r2, #0
 8011732:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8011734:	4b1b      	ldr	r3, [pc, #108]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 8011736:	2280      	movs	r2, #128	@ 0x80
 8011738:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801173a:	4b1a      	ldr	r3, [pc, #104]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 801173c:	2200      	movs	r2, #0
 801173e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8011740:	4b18      	ldr	r3, [pc, #96]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 8011742:	2200      	movs	r2, #0
 8011744:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8011746:	4b17      	ldr	r3, [pc, #92]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 8011748:	2200      	movs	r2, #0
 801174a:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 801174c:	4b15      	ldr	r3, [pc, #84]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 801174e:	2200      	movs	r2, #0
 8011750:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8011752:	4b14      	ldr	r3, [pc, #80]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 8011754:	0018      	movs	r0, r3
 8011756:	f001 f9a5 	bl	8012aa4 <HAL_DMA_Init>
 801175a:	1e03      	subs	r3, r0, #0
 801175c:	d001      	beq.n	8011762 <HAL_UART_MspInit+0x226>
      Error_Handler();
 801175e:	f7f9 fda5 	bl	800b2ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	4a0f      	ldr	r2, [pc, #60]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 8011766:	671a      	str	r2, [r3, #112]	@ 0x70
 8011768:	4b0e      	ldr	r3, [pc, #56]	@ (80117a4 <HAL_UART_MspInit+0x268>)
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 801176e:	2200      	movs	r2, #0
 8011770:	2100      	movs	r1, #0
 8011772:	200e      	movs	r0, #14
 8011774:	f001 f960 	bl	8012a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8011778:	200e      	movs	r0, #14
 801177a:	f001 f972 	bl	8012a62 <HAL_NVIC_EnableIRQ>
}
 801177e:	46c0      	nop			@ (mov r8, r8)
 8011780:	46bd      	mov	sp, r7
 8011782:	b00d      	add	sp, #52	@ 0x34
 8011784:	bd90      	pop	{r4, r7, pc}
 8011786:	46c0      	nop			@ (mov r8, r8)
 8011788:	40004800 	.word	0x40004800
 801178c:	40021000 	.word	0x40021000
 8011790:	50000800 	.word	0x50000800
 8011794:	40013800 	.word	0x40013800
 8011798:	40004c00 	.word	0x40004c00
 801179c:	20002134 	.word	0x20002134
 80117a0:	4002006c 	.word	0x4002006c
 80117a4:	2000217c 	.word	0x2000217c
 80117a8:	40020080 	.word	0x40020080

080117ac <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b086      	sub	sp, #24
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80117b4:	f000 fc9c 	bl	80120f0 <HAL_GetTick>
 80117b8:	0003      	movs	r3, r0
 80117ba:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80117bc:	4b1c      	ldr	r3, [pc, #112]	@ (8011830 <TimestampIsReached+0x84>)
 80117be:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80117c0:	697a      	ldr	r2, [r7, #20]
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d307      	bcc.n	80117d8 <TimestampIsReached+0x2c>
 80117c8:	697a      	ldr	r2, [r7, #20]
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	1ad3      	subs	r3, r2, r3
 80117ce:	693a      	ldr	r2, [r7, #16]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	d901      	bls.n	80117d8 <TimestampIsReached+0x2c>
 80117d4:	2201      	movs	r2, #1
 80117d6:	e000      	b.n	80117da <TimestampIsReached+0x2e>
 80117d8:	2200      	movs	r2, #0
 80117da:	230f      	movs	r3, #15
 80117dc:	18fb      	adds	r3, r7, r3
 80117de:	701a      	strb	r2, [r3, #0]
 80117e0:	781a      	ldrb	r2, [r3, #0]
 80117e2:	2101      	movs	r1, #1
 80117e4:	400a      	ands	r2, r1
 80117e6:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 80117e8:	697a      	ldr	r2, [r7, #20]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d207      	bcs.n	8011800 <TimestampIsReached+0x54>
 80117f0:	687a      	ldr	r2, [r7, #4]
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	693a      	ldr	r2, [r7, #16]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d201      	bcs.n	8011800 <TimestampIsReached+0x54>
 80117fc:	2201      	movs	r2, #1
 80117fe:	e000      	b.n	8011802 <TimestampIsReached+0x56>
 8011800:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8011802:	200e      	movs	r0, #14
 8011804:	183b      	adds	r3, r7, r0
 8011806:	701a      	strb	r2, [r3, #0]
 8011808:	781a      	ldrb	r2, [r3, #0]
 801180a:	2101      	movs	r1, #1
 801180c:	400a      	ands	r2, r1
 801180e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8011810:	230f      	movs	r3, #15
 8011812:	18fb      	adds	r3, r7, r3
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d103      	bne.n	8011822 <TimestampIsReached+0x76>
 801181a:	183b      	adds	r3, r7, r0
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d001      	beq.n	8011826 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8011822:	2301      	movs	r3, #1
 8011824:	e000      	b.n	8011828 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8011826:	2300      	movs	r3, #0
}
 8011828:	0018      	movs	r0, r3
 801182a:	46bd      	mov	sp, r7
 801182c:	b006      	add	sp, #24
 801182e:	bd80      	pop	{r7, pc}
 8011830:	7fffffff 	.word	0x7fffffff

08011834 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8011834:	b580      	push	{r7, lr}
 8011836:	b082      	sub	sp, #8
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 801183c:	f000 fc58 	bl	80120f0 <HAL_GetTick>
 8011840:	0002      	movs	r2, r0
 8011842:	4904      	ldr	r1, [pc, #16]	@ (8011854 <AddTimestamp+0x20>)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	0018      	movs	r0, r3
 8011848:	f011 fffe 	bl	8023848 <siprintf>
}
 801184c:	46c0      	nop			@ (mov r8, r8)
 801184e:	46bd      	mov	sp, r7
 8011850:	b002      	add	sp, #8
 8011852:	bd80      	pop	{r7, pc}
 8011854:	0802aafc 	.word	0x0802aafc

08011858 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8011858:	b40c      	push	{r2, r3}
 801185a:	b5b0      	push	{r4, r5, r7, lr}
 801185c:	b0a4      	sub	sp, #144	@ 0x90
 801185e:	af00      	add	r7, sp, #0
 8011860:	0002      	movs	r2, r0
 8011862:	6039      	str	r1, [r7, #0]
 8011864:	1dfb      	adds	r3, r7, #7
 8011866:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8011868:	4b23      	ldr	r3, [pc, #140]	@ (80118f8 <CreateLine+0xa0>)
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	1dfa      	adds	r2, r7, #7
 801186e:	7812      	ldrb	r2, [r2, #0]
 8011870:	429a      	cmp	r2, r3
 8011872:	d839      	bhi.n	80118e8 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8011874:	683a      	ldr	r2, [r7, #0]
 8011876:	4921      	ldr	r1, [pc, #132]	@ (80118fc <CreateLine+0xa4>)
 8011878:	240c      	movs	r4, #12
 801187a:	193b      	adds	r3, r7, r4
 801187c:	0018      	movs	r0, r3
 801187e:	f011 ffe3 	bl	8023848 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8011882:	4b1d      	ldr	r3, [pc, #116]	@ (80118f8 <CreateLine+0xa0>)
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	2b01      	cmp	r3, #1
 8011888:	d909      	bls.n	801189e <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 801188a:	193b      	adds	r3, r7, r4
 801188c:	0018      	movs	r0, r3
 801188e:	f7ee fc6d 	bl	800016c <strlen>
 8011892:	0002      	movs	r2, r0
 8011894:	193b      	adds	r3, r7, r4
 8011896:	189b      	adds	r3, r3, r2
 8011898:	0018      	movs	r0, r3
 801189a:	f7ff ffcb 	bl	8011834 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 801189e:	240c      	movs	r4, #12
 80118a0:	193b      	adds	r3, r7, r4
 80118a2:	0018      	movs	r0, r3
 80118a4:	f7ee fc62 	bl	800016c <strlen>
 80118a8:	0003      	movs	r3, r0
 80118aa:	218c      	movs	r1, #140	@ 0x8c
 80118ac:	187a      	adds	r2, r7, r1
 80118ae:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 80118b0:	239c      	movs	r3, #156	@ 0x9c
 80118b2:	2508      	movs	r5, #8
 80118b4:	195b      	adds	r3, r3, r5
 80118b6:	19db      	adds	r3, r3, r7
 80118b8:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80118ba:	193a      	adds	r2, r7, r4
 80118bc:	187b      	adds	r3, r7, r1
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	18d0      	adds	r0, r2, r3
 80118c2:	187b      	adds	r3, r7, r1
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2280      	movs	r2, #128	@ 0x80
 80118c8:	1ad3      	subs	r3, r2, r3
 80118ca:	0019      	movs	r1, r3
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	2298      	movs	r2, #152	@ 0x98
 80118d0:	1952      	adds	r2, r2, r5
 80118d2:	19d2      	adds	r2, r2, r7
 80118d4:	6812      	ldr	r2, [r2, #0]
 80118d6:	f012 f84f 	bl	8023978 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 80118da:	193a      	adds	r2, r7, r4
 80118dc:	4b08      	ldr	r3, [pc, #32]	@ (8011900 <CreateLine+0xa8>)
 80118de:	0011      	movs	r1, r2
 80118e0:	0018      	movs	r0, r3
 80118e2:	f011 ff41 	bl	8023768 <iprintf>
 80118e6:	e000      	b.n	80118ea <CreateLine+0x92>
    return;
 80118e8:	46c0      	nop			@ (mov r8, r8)
}
 80118ea:	46bd      	mov	sp, r7
 80118ec:	b024      	add	sp, #144	@ 0x90
 80118ee:	bcb0      	pop	{r4, r5, r7}
 80118f0:	bc08      	pop	{r3}
 80118f2:	b002      	add	sp, #8
 80118f4:	4718      	bx	r3
 80118f6:	46c0      	nop			@ (mov r8, r8)
 80118f8:	200000e4 	.word	0x200000e4
 80118fc:	0802ab08 	.word	0x0802ab08
 8011900:	0802ab0c 	.word	0x0802ab0c

08011904 <_write>:

int _write(int fd, void *buf, size_t count) {
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
 801190a:	60f8      	str	r0, [r7, #12]
 801190c:	60b9      	str	r1, [r7, #8]
 801190e:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	b29a      	uxth	r2, r3
 8011914:	68b9      	ldr	r1, [r7, #8]
 8011916:	4804      	ldr	r0, [pc, #16]	@ (8011928 <_write+0x24>)
 8011918:	2364      	movs	r3, #100	@ 0x64
 801191a:	f009 f8ad 	bl	801aa78 <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 801191e:	687b      	ldr	r3, [r7, #4]
}
 8011920:	0018      	movs	r0, r3
 8011922:	46bd      	mov	sp, r7
 8011924:	b004      	add	sp, #16
 8011926:	bd80      	pop	{r7, pc}
 8011928:	20001fc4 	.word	0x20001fc4

0801192c <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	0002      	movs	r2, r0
 8011934:	1dfb      	adds	r3, r7, #7
 8011936:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8011938:	4b03      	ldr	r3, [pc, #12]	@ (8011948 <SetVerboseLevel+0x1c>)
 801193a:	1dfa      	adds	r2, r7, #7
 801193c:	7812      	ldrb	r2, [r2, #0]
 801193e:	701a      	strb	r2, [r3, #0]
}
 8011940:	46c0      	nop			@ (mov r8, r8)
 8011942:	46bd      	mov	sp, r7
 8011944:	b002      	add	sp, #8
 8011946:	bd80      	pop	{r7, pc}
 8011948:	200000e4 	.word	0x200000e4

0801194c <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 801194c:	b580      	push	{r7, lr}
 801194e:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 8011950:	4b02      	ldr	r3, [pc, #8]	@ (801195c <GetVerboseLevel+0x10>)
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	0018      	movs	r0, r3
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	46c0      	nop			@ (mov r8, r8)
 801195c:	200000e4 	.word	0x200000e4

08011960 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 8011960:	b580      	push	{r7, lr}
 8011962:	b082      	sub	sp, #8
 8011964:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8011966:	4a0f      	ldr	r2, [pc, #60]	@ (80119a4 <BinaryReleaseInfo+0x44>)
 8011968:	4b0f      	ldr	r3, [pc, #60]	@ (80119a8 <BinaryReleaseInfo+0x48>)
 801196a:	0019      	movs	r1, r3
 801196c:	2002      	movs	r0, #2
 801196e:	f7ff ff73 	bl	8011858 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8011972:	480e      	ldr	r0, [pc, #56]	@ (80119ac <BinaryReleaseInfo+0x4c>)
 8011974:	4a0e      	ldr	r2, [pc, #56]	@ (80119b0 <BinaryReleaseInfo+0x50>)
 8011976:	490c      	ldr	r1, [pc, #48]	@ (80119a8 <BinaryReleaseInfo+0x48>)
 8011978:	4b0e      	ldr	r3, [pc, #56]	@ (80119b4 <BinaryReleaseInfo+0x54>)
 801197a:	9300      	str	r3, [sp, #0]
 801197c:	0003      	movs	r3, r0
 801197e:	2002      	movs	r0, #2
 8011980:	f7ff ff6a 	bl	8011858 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8011984:	4b0c      	ldr	r3, [pc, #48]	@ (80119b8 <BinaryReleaseInfo+0x58>)
 8011986:	4a0d      	ldr	r2, [pc, #52]	@ (80119bc <BinaryReleaseInfo+0x5c>)
 8011988:	4907      	ldr	r1, [pc, #28]	@ (80119a8 <BinaryReleaseInfo+0x48>)
 801198a:	2002      	movs	r0, #2
 801198c:	f7ff ff64 	bl	8011858 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8011990:	4b0b      	ldr	r3, [pc, #44]	@ (80119c0 <BinaryReleaseInfo+0x60>)
 8011992:	4a0c      	ldr	r2, [pc, #48]	@ (80119c4 <BinaryReleaseInfo+0x64>)
 8011994:	4904      	ldr	r1, [pc, #16]	@ (80119a8 <BinaryReleaseInfo+0x48>)
 8011996:	2002      	movs	r0, #2
 8011998:	f7ff ff5e 	bl	8011858 <CreateLine>
}
 801199c:	46c0      	nop			@ (mov r8, r8)
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	46c0      	nop			@ (mov r8, r8)
 80119a4:	0802ab14 	.word	0x0802ab14
 80119a8:	0802ab40 	.word	0x0802ab40
 80119ac:	0802ab44 	.word	0x0802ab44
 80119b0:	0802ab50 	.word	0x0802ab50
 80119b4:	0802ab64 	.word	0x0802ab64
 80119b8:	0802ab70 	.word	0x0802ab70
 80119bc:	0802ab7c 	.word	0x0802ab7c
 80119c0:	0802ab84 	.word	0x0802ab84
 80119c4:	0802ab8c 	.word	0x0802ab8c

080119c8 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	60f8      	str	r0, [r7, #12]
 80119d0:	60b9      	str	r1, [r7, #8]
 80119d2:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	68ba      	ldr	r2, [r7, #8]
 80119d8:	68f9      	ldr	r1, [r7, #12]
 80119da:	4803      	ldr	r0, [pc, #12]	@ (80119e8 <errorHandler+0x20>)
 80119dc:	f011 fec4 	bl	8023768 <iprintf>
//    while (true)
//    {
//    }
}
 80119e0:	46c0      	nop			@ (mov r8, r8)
 80119e2:	46bd      	mov	sp, r7
 80119e4:	b004      	add	sp, #16
 80119e6:	bd80      	pop	{r7, pc}
 80119e8:	0802aba4 	.word	0x0802aba4

080119ec <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80119ec:	b590      	push	{r4, r7, lr}
 80119ee:	b083      	sub	sp, #12
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6039      	str	r1, [r7, #0]
 80119f4:	0011      	movs	r1, r2
 80119f6:	1dfb      	adds	r3, r7, #7
 80119f8:	1c02      	adds	r2, r0, #0
 80119fa:	701a      	strb	r2, [r3, #0]
 80119fc:	1dbb      	adds	r3, r7, #6
 80119fe:	1c0a      	adds	r2, r1, #0
 8011a00:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8011a02:	4b0a      	ldr	r3, [pc, #40]	@ (8011a2c <ReadRegister+0x40>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d00a      	beq.n	8011a20 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8011a0a:	4b08      	ldr	r3, [pc, #32]	@ (8011a2c <ReadRegister+0x40>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	1dba      	adds	r2, r7, #6
 8011a10:	7814      	ldrb	r4, [r2, #0]
 8011a12:	6839      	ldr	r1, [r7, #0]
 8011a14:	1dfa      	adds	r2, r7, #7
 8011a16:	7810      	ldrb	r0, [r2, #0]
 8011a18:	0022      	movs	r2, r4
 8011a1a:	4798      	blx	r3
 8011a1c:	0003      	movs	r3, r0
 8011a1e:	e000      	b.n	8011a22 <ReadRegister+0x36>
	}
	return false;
 8011a20:	2300      	movs	r3, #0
}
 8011a22:	0018      	movs	r0, r3
 8011a24:	46bd      	mov	sp, r7
 8011a26:	b003      	add	sp, #12
 8011a28:	bd90      	pop	{r4, r7, pc}
 8011a2a:	46c0      	nop			@ (mov r8, r8)
 8011a2c:	200021cc 	.word	0x200021cc

08011a30 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8011a30:	b590      	push	{r4, r7, lr}
 8011a32:	b083      	sub	sp, #12
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6039      	str	r1, [r7, #0]
 8011a38:	0011      	movs	r1, r2
 8011a3a:	1dfb      	adds	r3, r7, #7
 8011a3c:	1c02      	adds	r2, r0, #0
 8011a3e:	701a      	strb	r2, [r3, #0]
 8011a40:	1dbb      	adds	r3, r7, #6
 8011a42:	1c0a      	adds	r2, r1, #0
 8011a44:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8011a46:	4b0a      	ldr	r3, [pc, #40]	@ (8011a70 <WriteRegister+0x40>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00a      	beq.n	8011a64 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8011a4e:	4b08      	ldr	r3, [pc, #32]	@ (8011a70 <WriteRegister+0x40>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	1dba      	adds	r2, r7, #6
 8011a54:	7814      	ldrb	r4, [r2, #0]
 8011a56:	6839      	ldr	r1, [r7, #0]
 8011a58:	1dfa      	adds	r2, r7, #7
 8011a5a:	7810      	ldrb	r0, [r2, #0]
 8011a5c:	0022      	movs	r2, r4
 8011a5e:	4798      	blx	r3
 8011a60:	0003      	movs	r3, r0
 8011a62:	e000      	b.n	8011a66 <WriteRegister+0x36>
  }
  return false;
 8011a64:	2300      	movs	r3, #0
}
 8011a66:	0018      	movs	r0, r3
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	b003      	add	sp, #12
 8011a6c:	bd90      	pop	{r4, r7, pc}
 8011a6e:	46c0      	nop			@ (mov r8, r8)
 8011a70:	200021d0 	.word	0x200021d0

08011a74 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b084      	sub	sp, #16
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	000a      	movs	r2, r1
 8011a7e:	1cfb      	adds	r3, r7, #3
 8011a80:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8011a82:	230f      	movs	r3, #15
 8011a84:	18fb      	adds	r3, r7, r3
 8011a86:	22ff      	movs	r2, #255	@ 0xff
 8011a88:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8011a8a:	230e      	movs	r3, #14
 8011a8c:	18fb      	adds	r3, r7, r3
 8011a8e:	2200      	movs	r2, #0
 8011a90:	701a      	strb	r2, [r3, #0]
 8011a92:	e037      	b.n	8011b04 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8011a94:	230e      	movs	r3, #14
 8011a96:	18fb      	adds	r3, r7, r3
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	687a      	ldr	r2, [r7, #4]
 8011a9c:	18d3      	adds	r3, r2, r3
 8011a9e:	7819      	ldrb	r1, [r3, #0]
 8011aa0:	220f      	movs	r2, #15
 8011aa2:	18bb      	adds	r3, r7, r2
 8011aa4:	18ba      	adds	r2, r7, r2
 8011aa6:	7812      	ldrb	r2, [r2, #0]
 8011aa8:	404a      	eors	r2, r1
 8011aaa:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8011aac:	230d      	movs	r3, #13
 8011aae:	18fb      	adds	r3, r7, r3
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	701a      	strb	r2, [r3, #0]
 8011ab4:	e01b      	b.n	8011aee <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8011ab6:	210f      	movs	r1, #15
 8011ab8:	187b      	adds	r3, r7, r1
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	b25b      	sxtb	r3, r3
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	da09      	bge.n	8011ad6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8011ac2:	187b      	adds	r3, r7, r1
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	005b      	lsls	r3, r3, #1
 8011ac8:	b25b      	sxtb	r3, r3
 8011aca:	2231      	movs	r2, #49	@ 0x31
 8011acc:	4053      	eors	r3, r2
 8011ace:	b25a      	sxtb	r2, r3
 8011ad0:	187b      	adds	r3, r7, r1
 8011ad2:	701a      	strb	r2, [r3, #0]
 8011ad4:	e005      	b.n	8011ae2 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8011ad6:	230f      	movs	r3, #15
 8011ad8:	18fa      	adds	r2, r7, r3
 8011ada:	18fb      	adds	r3, r7, r3
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	18db      	adds	r3, r3, r3
 8011ae0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8011ae2:	210d      	movs	r1, #13
 8011ae4:	187b      	adds	r3, r7, r1
 8011ae6:	781a      	ldrb	r2, [r3, #0]
 8011ae8:	187b      	adds	r3, r7, r1
 8011aea:	3201      	adds	r2, #1
 8011aec:	701a      	strb	r2, [r3, #0]
 8011aee:	230d      	movs	r3, #13
 8011af0:	18fb      	adds	r3, r7, r3
 8011af2:	781b      	ldrb	r3, [r3, #0]
 8011af4:	2b07      	cmp	r3, #7
 8011af6:	d9de      	bls.n	8011ab6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8011af8:	210e      	movs	r1, #14
 8011afa:	187b      	adds	r3, r7, r1
 8011afc:	781a      	ldrb	r2, [r3, #0]
 8011afe:	187b      	adds	r3, r7, r1
 8011b00:	3201      	adds	r2, #1
 8011b02:	701a      	strb	r2, [r3, #0]
 8011b04:	230e      	movs	r3, #14
 8011b06:	18fa      	adds	r2, r7, r3
 8011b08:	1cfb      	adds	r3, r7, #3
 8011b0a:	7812      	ldrb	r2, [r2, #0]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d3c0      	bcc.n	8011a94 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8011b12:	230f      	movs	r3, #15
 8011b14:	18fb      	adds	r3, r7, r3
 8011b16:	781b      	ldrb	r3, [r3, #0]
}
 8011b18:	0018      	movs	r0, r3
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	b004      	add	sp, #16
 8011b1e:	bd80      	pop	{r7, pc}

08011b20 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8011b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8011b54 <HIDS_Init+0x34>)
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8011b30:	4b09      	ldr	r3, [pc, #36]	@ (8011b58 <HIDS_Init+0x38>)
 8011b32:	683a      	ldr	r2, [r7, #0]
 8011b34:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8011b36:	4b09      	ldr	r3, [pc, #36]	@ (8011b5c <HIDS_Init+0x3c>)
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	0018      	movs	r0, r3
 8011b3c:	f000 f840 	bl	8011bc0 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8011b40:	4b07      	ldr	r3, [pc, #28]	@ (8011b60 <HIDS_Init+0x40>)
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	0018      	movs	r0, r3
 8011b46:	f000 f82b 	bl	8011ba0 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8011b4a:	46c0      	nop			@ (mov r8, r8)
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	b002      	add	sp, #8
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	46c0      	nop			@ (mov r8, r8)
 8011b54:	200021cc 	.word	0x200021cc
 8011b58:	200021d0 	.word	0x200021d0
 8011b5c:	200000e6 	.word	0x200000e6
 8011b60:	200000e5 	.word	0x200000e5

08011b64 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8011b64:	b580      	push	{r7, lr}
 8011b66:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8011b68:	f000 fac2 	bl	80120f0 <HAL_GetTick>
 8011b6c:	0002      	movs	r2, r0
 8011b6e:	4b08      	ldr	r3, [pc, #32]	@ (8011b90 <HIDS_StartMeasurement+0x2c>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	18d2      	adds	r2, r2, r3
 8011b74:	4b07      	ldr	r3, [pc, #28]	@ (8011b94 <HIDS_StartMeasurement+0x30>)
 8011b76:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8011b78:	4b07      	ldr	r3, [pc, #28]	@ (8011b98 <HIDS_StartMeasurement+0x34>)
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	0019      	movs	r1, r3
 8011b7e:	2044      	movs	r0, #68	@ 0x44
 8011b80:	f7ff ff56 	bl	8011a30 <WriteRegister>
  MeasurementDone = false;
 8011b84:	4b05      	ldr	r3, [pc, #20]	@ (8011b9c <HIDS_StartMeasurement+0x38>)
 8011b86:	2200      	movs	r2, #0
 8011b88:	701a      	strb	r2, [r3, #0]
}
 8011b8a:	46c0      	nop			@ (mov r8, r8)
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}
 8011b90:	200000ec 	.word	0x200000ec
 8011b94:	200000e8 	.word	0x200000e8
 8011b98:	200000e6 	.word	0x200000e6
 8011b9c:	200021e2 	.word	0x200021e2

08011ba0 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b082      	sub	sp, #8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	0002      	movs	r2, r0
 8011ba8:	1dfb      	adds	r3, r7, #7
 8011baa:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8011bac:	4b03      	ldr	r3, [pc, #12]	@ (8011bbc <HIDS_SetHeaterMode+0x1c>)
 8011bae:	1dfa      	adds	r2, r7, #7
 8011bb0:	7812      	ldrb	r2, [r2, #0]
 8011bb2:	701a      	strb	r2, [r3, #0]
}
 8011bb4:	46c0      	nop			@ (mov r8, r8)
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	b002      	add	sp, #8
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	200000e5 	.word	0x200000e5

08011bc0 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	0002      	movs	r2, r0
 8011bc8:	1dfb      	adds	r3, r7, #7
 8011bca:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8011bcc:	4b03      	ldr	r3, [pc, #12]	@ (8011bdc <HIDS_SetMeasurementMode+0x1c>)
 8011bce:	1dfa      	adds	r2, r7, #7
 8011bd0:	7812      	ldrb	r2, [r2, #0]
 8011bd2:	701a      	strb	r2, [r3, #0]
}
 8011bd4:	46c0      	nop			@ (mov r8, r8)
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	b002      	add	sp, #8
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	200000e6 	.word	0x200000e6

08011be0 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b082      	sub	sp, #8
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8011be8:	f000 fa82 	bl	80120f0 <HAL_GetTick>
 8011bec:	0002      	movs	r2, r0
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	18d2      	adds	r2, r2, r3
 8011bf2:	4b03      	ldr	r3, [pc, #12]	@ (8011c00 <setHIDSTimeStamp+0x20>)
 8011bf4:	601a      	str	r2, [r3, #0]
}
 8011bf6:	46c0      	nop			@ (mov r8, r8)
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	b002      	add	sp, #8
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	46c0      	nop			@ (mov r8, r8)
 8011c00:	200021e4 	.word	0x200021e4

08011c04 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8011c04:	b590      	push	{r4, r7, lr}
 8011c06:	b085      	sub	sp, #20
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	781a      	ldrb	r2, [r3, #0]
 8011c10:	210c      	movs	r1, #12
 8011c12:	187b      	adds	r3, r7, r1
 8011c14:	701a      	strb	r2, [r3, #0]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	785a      	ldrb	r2, [r3, #1]
 8011c1a:	187b      	adds	r3, r7, r1
 8011c1c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8011c1e:	240f      	movs	r4, #15
 8011c20:	193b      	adds	r3, r7, r4
 8011c22:	687a      	ldr	r2, [r7, #4]
 8011c24:	7892      	ldrb	r2, [r2, #2]
 8011c26:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8011c28:	187b      	adds	r3, r7, r1
 8011c2a:	2102      	movs	r1, #2
 8011c2c:	0018      	movs	r0, r3
 8011c2e:	f7ff ff21 	bl	8011a74 <CalculateCRC>
 8011c32:	0003      	movs	r3, r0
 8011c34:	001a      	movs	r2, r3
 8011c36:	193b      	adds	r3, r7, r4
 8011c38:	781b      	ldrb	r3, [r3, #0]
 8011c3a:	4293      	cmp	r3, r2
 8011c3c:	d007      	beq.n	8011c4e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8011c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8011ca8 <CheckCRC+0xa4>)
 8011c40:	4b1a      	ldr	r3, [pc, #104]	@ (8011cac <CheckCRC+0xa8>)
 8011c42:	0019      	movs	r1, r3
 8011c44:	2001      	movs	r0, #1
 8011c46:	f7ff fe07 	bl	8011858 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	e027      	b.n	8011c9e <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	78da      	ldrb	r2, [r3, #3]
 8011c52:	2108      	movs	r1, #8
 8011c54:	187b      	adds	r3, r7, r1
 8011c56:	701a      	strb	r2, [r3, #0]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	791a      	ldrb	r2, [r3, #4]
 8011c5c:	187b      	adds	r3, r7, r1
 8011c5e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8011c60:	240e      	movs	r4, #14
 8011c62:	193b      	adds	r3, r7, r4
 8011c64:	687a      	ldr	r2, [r7, #4]
 8011c66:	7952      	ldrb	r2, [r2, #5]
 8011c68:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8011c6a:	187b      	adds	r3, r7, r1
 8011c6c:	2102      	movs	r1, #2
 8011c6e:	0018      	movs	r0, r3
 8011c70:	f7ff ff00 	bl	8011a74 <CalculateCRC>
 8011c74:	0003      	movs	r3, r0
 8011c76:	001a      	movs	r2, r3
 8011c78:	193b      	adds	r3, r7, r4
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	4293      	cmp	r3, r2
 8011c7e:	d00d      	beq.n	8011c9c <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8011c80:	4a0b      	ldr	r2, [pc, #44]	@ (8011cb0 <CheckCRC+0xac>)
 8011c82:	4b0a      	ldr	r3, [pc, #40]	@ (8011cac <CheckCRC+0xa8>)
 8011c84:	0019      	movs	r1, r3
 8011c86:	2001      	movs	r0, #1
 8011c88:	f7ff fde6 	bl	8011858 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8011c8c:	4a09      	ldr	r2, [pc, #36]	@ (8011cb4 <CheckCRC+0xb0>)
 8011c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8011cb8 <CheckCRC+0xb4>)
 8011c90:	217d      	movs	r1, #125	@ 0x7d
 8011c92:	0018      	movs	r0, r3
 8011c94:	f7ff fe98 	bl	80119c8 <errorHandler>
		return false;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	e000      	b.n	8011c9e <CheckCRC+0x9a>
	}
	return true;
 8011c9c:	2301      	movs	r3, #1
}
 8011c9e:	0018      	movs	r0, r3
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	b005      	add	sp, #20
 8011ca4:	bd90      	pop	{r4, r7, pc}
 8011ca6:	46c0      	nop			@ (mov r8, r8)
 8011ca8:	0802abf0 	.word	0x0802abf0
 8011cac:	0802ac18 	.word	0x0802ac18
 8011cb0:	0802ac1c 	.word	0x0802ac1c
 8011cb4:	0802ac48 	.word	0x0802ac48
 8011cb8:	0802b278 	.word	0x0802b278

08011cbc <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b084      	sub	sp, #16
 8011cc0:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8011cc2:	1dbb      	adds	r3, r7, #6
 8011cc4:	2289      	movs	r2, #137	@ 0x89
 8011cc6:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8011cc8:	1dbb      	adds	r3, r7, #6
 8011cca:	2201      	movs	r2, #1
 8011ccc:	0019      	movs	r1, r3
 8011cce:	2044      	movs	r0, #68	@ 0x44
 8011cd0:	f7ff feae 	bl	8011a30 <WriteRegister>
	HAL_Delay(30);
 8011cd4:	201e      	movs	r0, #30
 8011cd6:	f000 fa15 	bl	8012104 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8011cda:	4b14      	ldr	r3, [pc, #80]	@ (8011d2c <HIDS_DeviceConnected+0x70>)
 8011cdc:	2206      	movs	r2, #6
 8011cde:	0019      	movs	r1, r3
 8011ce0:	2044      	movs	r0, #68	@ 0x44
 8011ce2:	f7ff fe83 	bl	80119ec <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8011ce6:	1dfb      	adds	r3, r7, #7
 8011ce8:	2200      	movs	r2, #0
 8011cea:	701a      	strb	r2, [r3, #0]
 8011cec:	e011      	b.n	8011d12 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8011cee:	1dfb      	adds	r3, r7, #7
 8011cf0:	7818      	ldrb	r0, [r3, #0]
 8011cf2:	1dfb      	adds	r3, r7, #7
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8011d2c <HIDS_DeviceConnected+0x70>)
 8011cf8:	5cd3      	ldrb	r3, [r2, r3]
 8011cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8011d30 <HIDS_DeviceConnected+0x74>)
 8011cfc:	490d      	ldr	r1, [pc, #52]	@ (8011d34 <HIDS_DeviceConnected+0x78>)
 8011cfe:	9300      	str	r3, [sp, #0]
 8011d00:	0003      	movs	r3, r0
 8011d02:	2002      	movs	r0, #2
 8011d04:	f7ff fda8 	bl	8011858 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8011d08:	1dfb      	adds	r3, r7, #7
 8011d0a:	781a      	ldrb	r2, [r3, #0]
 8011d0c:	1dfb      	adds	r3, r7, #7
 8011d0e:	3201      	adds	r2, #1
 8011d10:	701a      	strb	r2, [r3, #0]
 8011d12:	1dfb      	adds	r3, r7, #7
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	2b05      	cmp	r3, #5
 8011d18:	d9e9      	bls.n	8011cee <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8011d1a:	4b04      	ldr	r3, [pc, #16]	@ (8011d2c <HIDS_DeviceConnected+0x70>)
 8011d1c:	0018      	movs	r0, r3
 8011d1e:	f7ff ff71 	bl	8011c04 <CheckCRC>
 8011d22:	0003      	movs	r3, r0
}
 8011d24:	0018      	movs	r0, r3
 8011d26:	46bd      	mov	sp, r7
 8011d28:	b002      	add	sp, #8
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	200021d4 	.word	0x200021d4
 8011d30:	0802ac60 	.word	0x0802ac60
 8011d34:	0802abec 	.word	0x0802abec

08011d38 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8011d3c:	4b04      	ldr	r3, [pc, #16]	@ (8011d50 <HIDS_MeasurementReady+0x18>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	0018      	movs	r0, r3
 8011d42:	f7ff fd33 	bl	80117ac <TimestampIsReached>
 8011d46:	0003      	movs	r3, r0
}
 8011d48:	0018      	movs	r0, r3
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	46c0      	nop			@ (mov r8, r8)
 8011d50:	200000e8 	.word	0x200000e8

08011d54 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 8011d5e:	4b41      	ldr	r3, [pc, #260]	@ (8011e64 <HIDS_GetMeasurementValues+0x110>)
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d001      	beq.n	8011d6a <HIDS_GetMeasurementValues+0x16>
 8011d66:	2301      	movs	r3, #1
 8011d68:	e077      	b.n	8011e5a <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 8011d6a:	f7ff ffe5 	bl	8011d38 <HIDS_MeasurementReady>
 8011d6e:	0003      	movs	r3, r0
 8011d70:	001a      	movs	r2, r3
 8011d72:	2301      	movs	r3, #1
 8011d74:	4053      	eors	r3, r2
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d001      	beq.n	8011d80 <HIDS_GetMeasurementValues+0x2c>
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	e06c      	b.n	8011e5a <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8011d80:	4b39      	ldr	r3, [pc, #228]	@ (8011e68 <HIDS_GetMeasurementValues+0x114>)
 8011d82:	2206      	movs	r2, #6
 8011d84:	0019      	movs	r1, r3
 8011d86:	2044      	movs	r0, #68	@ 0x44
 8011d88:	f7ff fe30 	bl	80119ec <ReadRegister>
 8011d8c:	0003      	movs	r3, r0
 8011d8e:	001a      	movs	r2, r3
 8011d90:	2301      	movs	r3, #1
 8011d92:	4053      	eors	r3, r2
 8011d94:	b2db      	uxtb	r3, r3
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d005      	beq.n	8011da6 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 8011d9a:	4a34      	ldr	r2, [pc, #208]	@ (8011e6c <HIDS_GetMeasurementValues+0x118>)
 8011d9c:	4b34      	ldr	r3, [pc, #208]	@ (8011e70 <HIDS_GetMeasurementValues+0x11c>)
 8011d9e:	0019      	movs	r1, r3
 8011da0:	2001      	movs	r0, #1
 8011da2:	f7ff fd59 	bl	8011858 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8011da6:	4b30      	ldr	r3, [pc, #192]	@ (8011e68 <HIDS_GetMeasurementValues+0x114>)
 8011da8:	0018      	movs	r0, r3
 8011daa:	f7ff ff2b 	bl	8011c04 <CheckCRC>
 8011dae:	0003      	movs	r3, r0
 8011db0:	001a      	movs	r2, r3
 8011db2:	2301      	movs	r3, #1
 8011db4:	4053      	eors	r3, r2
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d001      	beq.n	8011dc0 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	e04c      	b.n	8011e5a <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8011dc0:	4b29      	ldr	r3, [pc, #164]	@ (8011e68 <HIDS_GetMeasurementValues+0x114>)
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	021b      	lsls	r3, r3, #8
 8011dc6:	4a28      	ldr	r2, [pc, #160]	@ (8011e68 <HIDS_GetMeasurementValues+0x114>)
 8011dc8:	7852      	ldrb	r2, [r2, #1]
 8011dca:	4313      	orrs	r3, r2
 8011dcc:	22af      	movs	r2, #175	@ 0xaf
 8011dce:	4353      	muls	r3, r2
 8011dd0:	0018      	movs	r0, r3
 8011dd2:	f7f1 faf5 	bl	80033c0 <__aeabi_i2d>
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	4b26      	ldr	r3, [pc, #152]	@ (8011e74 <HIDS_GetMeasurementValues+0x120>)
 8011dda:	f7ef ffeb 	bl	8001db4 <__aeabi_ddiv>
 8011dde:	0002      	movs	r2, r0
 8011de0:	000b      	movs	r3, r1
 8011de2:	0010      	movs	r0, r2
 8011de4:	0019      	movs	r1, r3
 8011de6:	f7f1 fb85 	bl	80034f4 <__aeabi_d2f>
 8011dea:	1c03      	adds	r3, r0, #0
 8011dec:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8011dee:	4922      	ldr	r1, [pc, #136]	@ (8011e78 <HIDS_GetMeasurementValues+0x124>)
 8011df0:	68f8      	ldr	r0, [r7, #12]
 8011df2:	f7ef fa13 	bl	800121c <__aeabi_fsub>
 8011df6:	1c03      	adds	r3, r0, #0
 8011df8:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8011dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8011e68 <HIDS_GetMeasurementValues+0x114>)
 8011dfc:	78db      	ldrb	r3, [r3, #3]
 8011dfe:	021b      	lsls	r3, r3, #8
 8011e00:	4a19      	ldr	r2, [pc, #100]	@ (8011e68 <HIDS_GetMeasurementValues+0x114>)
 8011e02:	7912      	ldrb	r2, [r2, #4]
 8011e04:	431a      	orrs	r2, r3
 8011e06:	0013      	movs	r3, r2
 8011e08:	015b      	lsls	r3, r3, #5
 8011e0a:	1a9b      	subs	r3, r3, r2
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	189b      	adds	r3, r3, r2
 8011e10:	0018      	movs	r0, r3
 8011e12:	f7f1 fad5 	bl	80033c0 <__aeabi_i2d>
 8011e16:	2200      	movs	r2, #0
 8011e18:	4b16      	ldr	r3, [pc, #88]	@ (8011e74 <HIDS_GetMeasurementValues+0x120>)
 8011e1a:	f7ef ffcb 	bl	8001db4 <__aeabi_ddiv>
 8011e1e:	0002      	movs	r2, r0
 8011e20:	000b      	movs	r3, r1
 8011e22:	0010      	movs	r0, r2
 8011e24:	0019      	movs	r1, r3
 8011e26:	f7f1 fb65 	bl	80034f4 <__aeabi_d2f>
 8011e2a:	1c03      	adds	r3, r0, #0
 8011e2c:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 8011e2e:	4913      	ldr	r1, [pc, #76]	@ (8011e7c <HIDS_GetMeasurementValues+0x128>)
 8011e30:	68b8      	ldr	r0, [r7, #8]
 8011e32:	f7ef f9f3 	bl	800121c <__aeabi_fsub>
 8011e36:	1c03      	adds	r3, r0, #0
 8011e38:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	68fa      	ldr	r2, [r7, #12]
 8011e3e:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	68ba      	ldr	r2, [r7, #8]
 8011e44:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8011e46:	687a      	ldr	r2, [r7, #4]
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	0011      	movs	r1, r2
 8011e4c:	0018      	movs	r0, r3
 8011e4e:	f7fd f90b 	bl	800f068 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8011e52:	4b04      	ldr	r3, [pc, #16]	@ (8011e64 <HIDS_GetMeasurementValues+0x110>)
 8011e54:	2201      	movs	r2, #1
 8011e56:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8011e58:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 8011e5a:	0018      	movs	r0, r3
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	b004      	add	sp, #16
 8011e60:	bd80      	pop	{r7, pc}
 8011e62:	46c0      	nop			@ (mov r8, r8)
 8011e64:	200021e2 	.word	0x200021e2
 8011e68:	200021dc 	.word	0x200021dc
 8011e6c:	0802ac80 	.word	0x0802ac80
 8011e70:	0802ac18 	.word	0x0802ac18
 8011e74:	40efffe0 	.word	0x40efffe0
 8011e78:	42340000 	.word	0x42340000
 8011e7c:	40c00000 	.word	0x40c00000

08011e80 <ResetHIDSresults>:

void ResetHIDSresults() {
 8011e80:	b580      	push	{r7, lr}
 8011e82:	af00      	add	r7, sp, #0
  humid = 0.0;
 8011e84:	4b04      	ldr	r3, [pc, #16]	@ (8011e98 <ResetHIDSresults+0x18>)
 8011e86:	2200      	movs	r2, #0
 8011e88:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 8011e8a:	4b04      	ldr	r3, [pc, #16]	@ (8011e9c <ResetHIDSresults+0x1c>)
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	601a      	str	r2, [r3, #0]
}
 8011e90:	46c0      	nop			@ (mov r8, r8)
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
 8011e96:	46c0      	nop			@ (mov r8, r8)
 8011e98:	200021c4 	.word	0x200021c4
 8011e9c:	200021c8 	.word	0x200021c8

08011ea0 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8011ea0:	b5b0      	push	{r4, r5, r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8011ea6:	4b40      	ldr	r3, [pc, #256]	@ (8011fa8 <HIDS_Upkeep+0x108>)
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	2b06      	cmp	r3, #6
 8011eac:	d900      	bls.n	8011eb0 <HIDS_Upkeep+0x10>
 8011eae:	e06e      	b.n	8011f8e <HIDS_Upkeep+0xee>
 8011eb0:	009a      	lsls	r2, r3, #2
 8011eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8011fac <HIDS_Upkeep+0x10c>)
 8011eb4:	18d3      	adds	r3, r2, r3
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 8011eba:	4a3d      	ldr	r2, [pc, #244]	@ (8011fb0 <HIDS_Upkeep+0x110>)
 8011ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8011fb4 <HIDS_Upkeep+0x114>)
 8011ebe:	0019      	movs	r1, r3
 8011ec0:	2003      	movs	r0, #3
 8011ec2:	f7ff fcc9 	bl	8011858 <CreateLine>
      break;
 8011ec6:	e069      	b.n	8011f9c <HIDS_Upkeep+0xfc>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8011ec8:	f7ff ffda 	bl	8011e80 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8011ecc:	4b36      	ldr	r3, [pc, #216]	@ (8011fa8 <HIDS_Upkeep+0x108>)
 8011ece:	2201      	movs	r2, #1
 8011ed0:	701a      	strb	r2, [r3, #0]
      break;
 8011ed2:	e063      	b.n	8011f9c <HIDS_Upkeep+0xfc>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 8011ed4:	f7fe fb0a 	bl	80104ec <SetMeasurementIndicator>
      setSensorLock(HIDS);
 8011ed8:	2001      	movs	r0, #1
 8011eda:	f7f9 fe19 	bl	800bb10 <setSensorLock>
      HIDS_StartMeasurement();
 8011ede:	f7ff fe41 	bl	8011b64 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8011ee2:	4b31      	ldr	r3, [pc, #196]	@ (8011fa8 <HIDS_Upkeep+0x108>)
 8011ee4:	2202      	movs	r2, #2
 8011ee6:	701a      	strb	r2, [r3, #0]
      break;
 8011ee8:	e058      	b.n	8011f9c <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8011eea:	4a33      	ldr	r2, [pc, #204]	@ (8011fb8 <HIDS_Upkeep+0x118>)
 8011eec:	4b33      	ldr	r3, [pc, #204]	@ (8011fbc <HIDS_Upkeep+0x11c>)
 8011eee:	0011      	movs	r1, r2
 8011ef0:	0018      	movs	r0, r3
 8011ef2:	f7ff ff2f 	bl	8011d54 <HIDS_GetMeasurementValues>
 8011ef6:	1e03      	subs	r3, r0, #0
 8011ef8:	d04d      	beq.n	8011f96 <HIDS_Upkeep+0xf6>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8011efa:	4b2b      	ldr	r3, [pc, #172]	@ (8011fa8 <HIDS_Upkeep+0x108>)
 8011efc:	2203      	movs	r2, #3
 8011efe:	701a      	strb	r2, [r3, #0]
        setSensorLock(FREE);
 8011f00:	2000      	movs	r0, #0
 8011f02:	f7f9 fe05 	bl	800bb10 <setSensorLock>
      }
      break;
 8011f06:	e046      	b.n	8011f96 <HIDS_Upkeep+0xf6>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8011f08:	4b2c      	ldr	r3, [pc, #176]	@ (8011fbc <HIDS_Upkeep+0x11c>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	1c18      	adds	r0, r3, #0
 8011f0e:	f7f1 faa9 	bl	8003464 <__aeabi_f2d>
 8011f12:	0004      	movs	r4, r0
 8011f14:	000d      	movs	r5, r1
 8011f16:	4b28      	ldr	r3, [pc, #160]	@ (8011fb8 <HIDS_Upkeep+0x118>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	1c18      	adds	r0, r3, #0
 8011f1c:	f7f1 faa2 	bl	8003464 <__aeabi_f2d>
 8011f20:	0002      	movs	r2, r0
 8011f22:	000b      	movs	r3, r1
 8011f24:	4826      	ldr	r0, [pc, #152]	@ (8011fc0 <HIDS_Upkeep+0x120>)
 8011f26:	4923      	ldr	r1, [pc, #140]	@ (8011fb4 <HIDS_Upkeep+0x114>)
 8011f28:	9202      	str	r2, [sp, #8]
 8011f2a:	9303      	str	r3, [sp, #12]
 8011f2c:	9400      	str	r4, [sp, #0]
 8011f2e:	9501      	str	r5, [sp, #4]
 8011f30:	0002      	movs	r2, r0
 8011f32:	2003      	movs	r0, #3
 8011f34:	f7ff fc90 	bl	8011858 <CreateLine>
      setHIDS(temp, humid);
 8011f38:	4b1f      	ldr	r3, [pc, #124]	@ (8011fb8 <HIDS_Upkeep+0x118>)
 8011f3a:	681a      	ldr	r2, [r3, #0]
 8011f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8011fbc <HIDS_Upkeep+0x11c>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	1c19      	adds	r1, r3, #0
 8011f42:	1c10      	adds	r0, r2, #0
 8011f44:	f7f2 fb1a 	bl	800457c <setHIDS>
      ResetMeasurementIndicator();
 8011f48:	f7fe fae8 	bl	801051c <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 8011f4c:	f000 f8d0 	bl	80120f0 <HAL_GetTick>
 8011f50:	0004      	movs	r4, r0
 8011f52:	f7f5 ff83 	bl	8007e5c <Check_USB_PowerOn>
 8011f56:	1e03      	subs	r3, r0, #0
 8011f58:	d103      	bne.n	8011f62 <HIDS_Upkeep+0xc2>
 8011f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8011fc4 <HIDS_Upkeep+0x124>)
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d001      	beq.n	8011f66 <HIDS_Upkeep+0xc6>
 8011f62:	4b19      	ldr	r3, [pc, #100]	@ (8011fc8 <HIDS_Upkeep+0x128>)
 8011f64:	e001      	b.n	8011f6a <HIDS_Upkeep+0xca>
 8011f66:	23fa      	movs	r3, #250	@ 0xfa
 8011f68:	009b      	lsls	r3, r3, #2
 8011f6a:	191a      	adds	r2, r3, r4
 8011f6c:	4b17      	ldr	r3, [pc, #92]	@ (8011fcc <HIDS_Upkeep+0x12c>)
 8011f6e:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 8011f70:	4b0d      	ldr	r3, [pc, #52]	@ (8011fa8 <HIDS_Upkeep+0x108>)
 8011f72:	2206      	movs	r2, #6
 8011f74:	701a      	strb	r2, [r3, #0]
      break;
 8011f76:	e011      	b.n	8011f9c <HIDS_Upkeep+0xfc>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8011f78:	4b14      	ldr	r3, [pc, #80]	@ (8011fcc <HIDS_Upkeep+0x12c>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	0018      	movs	r0, r3
 8011f7e:	f7ff fc15 	bl	80117ac <TimestampIsReached>
 8011f82:	1e03      	subs	r3, r0, #0
 8011f84:	d009      	beq.n	8011f9a <HIDS_Upkeep+0xfa>
        HIDSState = HIDS_STATE_INIT;
 8011f86:	4b08      	ldr	r3, [pc, #32]	@ (8011fa8 <HIDS_Upkeep+0x108>)
 8011f88:	2200      	movs	r2, #0
 8011f8a:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011f8c:	e005      	b.n	8011f9a <HIDS_Upkeep+0xfa>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8011f8e:	4b06      	ldr	r3, [pc, #24]	@ (8011fa8 <HIDS_Upkeep+0x108>)
 8011f90:	2200      	movs	r2, #0
 8011f92:	701a      	strb	r2, [r3, #0]
      break;
 8011f94:	e002      	b.n	8011f9c <HIDS_Upkeep+0xfc>
      break;
 8011f96:	46c0      	nop			@ (mov r8, r8)
 8011f98:	e000      	b.n	8011f9c <HIDS_Upkeep+0xfc>
      break;
 8011f9a:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8011f9c:	4b02      	ldr	r3, [pc, #8]	@ (8011fa8 <HIDS_Upkeep+0x108>)
 8011f9e:	781b      	ldrb	r3, [r3, #0]
}
 8011fa0:	0018      	movs	r0, r3
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8011fa6:	46c0      	nop			@ (mov r8, r8)
 8011fa8:	200021e8 	.word	0x200021e8
 8011fac:	0802b25c 	.word	0x0802b25c
 8011fb0:	0802acb4 	.word	0x0802acb4
 8011fb4:	0802ace8 	.word	0x0802ace8
 8011fb8:	200021c8 	.word	0x200021c8
 8011fbc:	200021c4 	.word	0x200021c4
 8011fc0:	0802acec 	.word	0x0802acec
 8011fc4:	20001e2e 	.word	0x20001e2e
 8011fc8:	00002710 	.word	0x00002710
 8011fcc:	200021e4 	.word	0x200021e4

08011fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8011fd0:	480d      	ldr	r0, [pc, #52]	@ (8012008 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8011fd2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8011fd4:	f7ff f844 	bl	8011060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011fd8:	480c      	ldr	r0, [pc, #48]	@ (801200c <LoopForever+0x6>)
  ldr r1, =_edata
 8011fda:	490d      	ldr	r1, [pc, #52]	@ (8012010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8011fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8012014 <LoopForever+0xe>)
  movs r3, #0
 8011fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011fe0:	e002      	b.n	8011fe8 <LoopCopyDataInit>

08011fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011fe6:	3304      	adds	r3, #4

08011fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8011fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8011fec:	d3f9      	bcc.n	8011fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8011fee:	4a0a      	ldr	r2, [pc, #40]	@ (8012018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8011ff0:	4c0a      	ldr	r4, [pc, #40]	@ (801201c <LoopForever+0x16>)
  movs r3, #0
 8011ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011ff4:	e001      	b.n	8011ffa <LoopFillZerobss>

08011ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011ff8:	3204      	adds	r2, #4

08011ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8011ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8011ffc:	d3fb      	bcc.n	8011ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8011ffe:	f011 fe33 	bl	8023c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012002:	f7f8 fe05 	bl	800ac10 <main>

08012006 <LoopForever>:

LoopForever:
    b LoopForever
 8012006:	e7fe      	b.n	8012006 <LoopForever>
   ldr   r0, =_estack
 8012008:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 801200c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012010:	20000448 	.word	0x20000448
  ldr r2, =_sidata
 8012014:	0802bc28 	.word	0x0802bc28
  ldr r2, =_sbss
 8012018:	20000448 	.word	0x20000448
  ldr r4, =_ebss
 801201c:	200035f0 	.word	0x200035f0

08012020 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012020:	e7fe      	b.n	8012020 <ADC1_COMP_IRQHandler>
	...

08012024 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801202a:	1dfb      	adds	r3, r7, #7
 801202c:	2200      	movs	r2, #0
 801202e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8012030:	4b0b      	ldr	r3, [pc, #44]	@ (8012060 <HAL_Init+0x3c>)
 8012032:	681a      	ldr	r2, [r3, #0]
 8012034:	4b0a      	ldr	r3, [pc, #40]	@ (8012060 <HAL_Init+0x3c>)
 8012036:	2140      	movs	r1, #64	@ 0x40
 8012038:	430a      	orrs	r2, r1
 801203a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801203c:	2003      	movs	r0, #3
 801203e:	f000 f811 	bl	8012064 <HAL_InitTick>
 8012042:	1e03      	subs	r3, r0, #0
 8012044:	d003      	beq.n	801204e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8012046:	1dfb      	adds	r3, r7, #7
 8012048:	2201      	movs	r2, #1
 801204a:	701a      	strb	r2, [r3, #0]
 801204c:	e001      	b.n	8012052 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801204e:	f7fe febb 	bl	8010dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8012052:	1dfb      	adds	r3, r7, #7
 8012054:	781b      	ldrb	r3, [r3, #0]
}
 8012056:	0018      	movs	r0, r3
 8012058:	46bd      	mov	sp, r7
 801205a:	b002      	add	sp, #8
 801205c:	bd80      	pop	{r7, pc}
 801205e:	46c0      	nop			@ (mov r8, r8)
 8012060:	40022000 	.word	0x40022000

08012064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012064:	b590      	push	{r4, r7, lr}
 8012066:	b083      	sub	sp, #12
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801206c:	4b14      	ldr	r3, [pc, #80]	@ (80120c0 <HAL_InitTick+0x5c>)
 801206e:	681c      	ldr	r4, [r3, #0]
 8012070:	4b14      	ldr	r3, [pc, #80]	@ (80120c4 <HAL_InitTick+0x60>)
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	0019      	movs	r1, r3
 8012076:	23fa      	movs	r3, #250	@ 0xfa
 8012078:	0098      	lsls	r0, r3, #2
 801207a:	f7ee f893 	bl	80001a4 <__udivsi3>
 801207e:	0003      	movs	r3, r0
 8012080:	0019      	movs	r1, r3
 8012082:	0020      	movs	r0, r4
 8012084:	f7ee f88e 	bl	80001a4 <__udivsi3>
 8012088:	0003      	movs	r3, r0
 801208a:	0018      	movs	r0, r3
 801208c:	f000 fcfd 	bl	8012a8a <HAL_SYSTICK_Config>
 8012090:	1e03      	subs	r3, r0, #0
 8012092:	d001      	beq.n	8012098 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8012094:	2301      	movs	r3, #1
 8012096:	e00f      	b.n	80120b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2b03      	cmp	r3, #3
 801209c:	d80b      	bhi.n	80120b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801209e:	6879      	ldr	r1, [r7, #4]
 80120a0:	2301      	movs	r3, #1
 80120a2:	425b      	negs	r3, r3
 80120a4:	2200      	movs	r2, #0
 80120a6:	0018      	movs	r0, r3
 80120a8:	f000 fcc6 	bl	8012a38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80120ac:	4b06      	ldr	r3, [pc, #24]	@ (80120c8 <HAL_InitTick+0x64>)
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80120b2:	2300      	movs	r3, #0
 80120b4:	e000      	b.n	80120b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80120b6:	2301      	movs	r3, #1
}
 80120b8:	0018      	movs	r0, r3
 80120ba:	46bd      	mov	sp, r7
 80120bc:	b003      	add	sp, #12
 80120be:	bd90      	pop	{r4, r7, pc}
 80120c0:	200000e0 	.word	0x200000e0
 80120c4:	200000f4 	.word	0x200000f4
 80120c8:	200000f0 	.word	0x200000f0

080120cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80120d0:	4b05      	ldr	r3, [pc, #20]	@ (80120e8 <HAL_IncTick+0x1c>)
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	001a      	movs	r2, r3
 80120d6:	4b05      	ldr	r3, [pc, #20]	@ (80120ec <HAL_IncTick+0x20>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	18d2      	adds	r2, r2, r3
 80120dc:	4b03      	ldr	r3, [pc, #12]	@ (80120ec <HAL_IncTick+0x20>)
 80120de:	601a      	str	r2, [r3, #0]
}
 80120e0:	46c0      	nop			@ (mov r8, r8)
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	46c0      	nop			@ (mov r8, r8)
 80120e8:	200000f4 	.word	0x200000f4
 80120ec:	200021ec 	.word	0x200021ec

080120f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	af00      	add	r7, sp, #0
  return uwTick;
 80120f4:	4b02      	ldr	r3, [pc, #8]	@ (8012100 <HAL_GetTick+0x10>)
 80120f6:	681b      	ldr	r3, [r3, #0]
}
 80120f8:	0018      	movs	r0, r3
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	46c0      	nop			@ (mov r8, r8)
 8012100:	200021ec 	.word	0x200021ec

08012104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b084      	sub	sp, #16
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801210c:	f7ff fff0 	bl	80120f0 <HAL_GetTick>
 8012110:	0003      	movs	r3, r0
 8012112:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	3301      	adds	r3, #1
 801211c:	d005      	beq.n	801212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801211e:	4b0a      	ldr	r3, [pc, #40]	@ (8012148 <HAL_Delay+0x44>)
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	001a      	movs	r2, r3
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	189b      	adds	r3, r3, r2
 8012128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801212a:	46c0      	nop			@ (mov r8, r8)
 801212c:	f7ff ffe0 	bl	80120f0 <HAL_GetTick>
 8012130:	0002      	movs	r2, r0
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	1ad3      	subs	r3, r2, r3
 8012136:	68fa      	ldr	r2, [r7, #12]
 8012138:	429a      	cmp	r2, r3
 801213a:	d8f7      	bhi.n	801212c <HAL_Delay+0x28>
  {
  }
}
 801213c:	46c0      	nop			@ (mov r8, r8)
 801213e:	46c0      	nop			@ (mov r8, r8)
 8012140:	46bd      	mov	sp, r7
 8012142:	b004      	add	sp, #16
 8012144:	bd80      	pop	{r7, pc}
 8012146:	46c0      	nop			@ (mov r8, r8)
 8012148:	200000f4 	.word	0x200000f4

0801214c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8012150:	4b04      	ldr	r3, [pc, #16]	@ (8012164 <HAL_SuspendTick+0x18>)
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	4b03      	ldr	r3, [pc, #12]	@ (8012164 <HAL_SuspendTick+0x18>)
 8012156:	2102      	movs	r1, #2
 8012158:	438a      	bics	r2, r1
 801215a:	601a      	str	r2, [r3, #0]
}
 801215c:	46c0      	nop			@ (mov r8, r8)
 801215e:	46bd      	mov	sp, r7
 8012160:	bd80      	pop	{r7, pc}
 8012162:	46c0      	nop			@ (mov r8, r8)
 8012164:	e000e010 	.word	0xe000e010

08012168 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 801216c:	4b04      	ldr	r3, [pc, #16]	@ (8012180 <HAL_ResumeTick+0x18>)
 801216e:	681a      	ldr	r2, [r3, #0]
 8012170:	4b03      	ldr	r3, [pc, #12]	@ (8012180 <HAL_ResumeTick+0x18>)
 8012172:	2102      	movs	r1, #2
 8012174:	430a      	orrs	r2, r1
 8012176:	601a      	str	r2, [r3, #0]
}
 8012178:	46c0      	nop			@ (mov r8, r8)
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}
 801217e:	46c0      	nop			@ (mov r8, r8)
 8012180:	e000e010 	.word	0xe000e010

08012184 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8012188:	4b02      	ldr	r3, [pc, #8]	@ (8012194 <HAL_GetUIDw0+0x10>)
 801218a:	681b      	ldr	r3, [r3, #0]
}
 801218c:	0018      	movs	r0, r3
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	46c0      	nop			@ (mov r8, r8)
 8012194:	1ff80050 	.word	0x1ff80050

08012198 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 801219c:	4b02      	ldr	r3, [pc, #8]	@ (80121a8 <HAL_GetUIDw1+0x10>)
 801219e:	681b      	ldr	r3, [r3, #0]
}
 80121a0:	0018      	movs	r0, r3
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	46c0      	nop			@ (mov r8, r8)
 80121a8:	1ff80054 	.word	0x1ff80054

080121ac <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80121b0:	4b02      	ldr	r3, [pc, #8]	@ (80121bc <HAL_GetUIDw2+0x10>)
 80121b2:	681b      	ldr	r3, [r3, #0]
}
 80121b4:	0018      	movs	r0, r3
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	46c0      	nop			@ (mov r8, r8)
 80121bc:	1ff80064 	.word	0x1ff80064

080121c0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d101      	bne.n	80121d2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80121ce:	2301      	movs	r3, #1
 80121d0:	e159      	b.n	8012486 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d10a      	bne.n	80121f0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2200      	movs	r2, #0
 80121de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2250      	movs	r2, #80	@ 0x50
 80121e4:	2100      	movs	r1, #0
 80121e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	0018      	movs	r0, r3
 80121ec:	f7f6 fcec 	bl	8008bc8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80121f4:	2210      	movs	r2, #16
 80121f6:	4013      	ands	r3, r2
 80121f8:	2b10      	cmp	r3, #16
 80121fa:	d005      	beq.n	8012208 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	689b      	ldr	r3, [r3, #8]
 8012202:	2204      	movs	r2, #4
 8012204:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8012206:	d00b      	beq.n	8012220 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801220c:	2210      	movs	r2, #16
 801220e:	431a      	orrs	r2, r3
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2250      	movs	r2, #80	@ 0x50
 8012218:	2100      	movs	r1, #0
 801221a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801221c:	2301      	movs	r3, #1
 801221e:	e132      	b.n	8012486 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012224:	4a9a      	ldr	r2, [pc, #616]	@ (8012490 <HAL_ADC_Init+0x2d0>)
 8012226:	4013      	ands	r3, r2
 8012228:	2202      	movs	r2, #2
 801222a:	431a      	orrs	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	689b      	ldr	r3, [r3, #8]
 8012236:	2203      	movs	r2, #3
 8012238:	4013      	ands	r3, r2
 801223a:	2b01      	cmp	r3, #1
 801223c:	d108      	bne.n	8012250 <HAL_ADC_Init+0x90>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	2201      	movs	r2, #1
 8012246:	4013      	ands	r3, r2
 8012248:	2b01      	cmp	r3, #1
 801224a:	d101      	bne.n	8012250 <HAL_ADC_Init+0x90>
 801224c:	2301      	movs	r3, #1
 801224e:	e000      	b.n	8012252 <HAL_ADC_Init+0x92>
 8012250:	2300      	movs	r3, #0
 8012252:	2b00      	cmp	r3, #0
 8012254:	d149      	bne.n	80122ea <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	685a      	ldr	r2, [r3, #4]
 801225a:	23c0      	movs	r3, #192	@ 0xc0
 801225c:	061b      	lsls	r3, r3, #24
 801225e:	429a      	cmp	r2, r3
 8012260:	d00b      	beq.n	801227a <HAL_ADC_Init+0xba>
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	685a      	ldr	r2, [r3, #4]
 8012266:	2380      	movs	r3, #128	@ 0x80
 8012268:	05db      	lsls	r3, r3, #23
 801226a:	429a      	cmp	r2, r3
 801226c:	d005      	beq.n	801227a <HAL_ADC_Init+0xba>
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	685a      	ldr	r2, [r3, #4]
 8012272:	2380      	movs	r3, #128	@ 0x80
 8012274:	061b      	lsls	r3, r3, #24
 8012276:	429a      	cmp	r2, r3
 8012278:	d111      	bne.n	801229e <HAL_ADC_Init+0xde>
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	691a      	ldr	r2, [r3, #16]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	0092      	lsls	r2, r2, #2
 8012286:	0892      	lsrs	r2, r2, #2
 8012288:	611a      	str	r2, [r3, #16]
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	6919      	ldr	r1, [r3, #16]
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	685a      	ldr	r2, [r3, #4]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	430a      	orrs	r2, r1
 801229a:	611a      	str	r2, [r3, #16]
 801229c:	e014      	b.n	80122c8 <HAL_ADC_Init+0x108>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	691a      	ldr	r2, [r3, #16]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	0092      	lsls	r2, r2, #2
 80122aa:	0892      	lsrs	r2, r2, #2
 80122ac:	611a      	str	r2, [r3, #16]
 80122ae:	4b79      	ldr	r3, [pc, #484]	@ (8012494 <HAL_ADC_Init+0x2d4>)
 80122b0:	681a      	ldr	r2, [r3, #0]
 80122b2:	4b78      	ldr	r3, [pc, #480]	@ (8012494 <HAL_ADC_Init+0x2d4>)
 80122b4:	4978      	ldr	r1, [pc, #480]	@ (8012498 <HAL_ADC_Init+0x2d8>)
 80122b6:	400a      	ands	r2, r1
 80122b8:	601a      	str	r2, [r3, #0]
 80122ba:	4b76      	ldr	r3, [pc, #472]	@ (8012494 <HAL_ADC_Init+0x2d4>)
 80122bc:	6819      	ldr	r1, [r3, #0]
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	685a      	ldr	r2, [r3, #4]
 80122c2:	4b74      	ldr	r3, [pc, #464]	@ (8012494 <HAL_ADC_Init+0x2d4>)
 80122c4:	430a      	orrs	r2, r1
 80122c6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	68da      	ldr	r2, [r3, #12]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2118      	movs	r1, #24
 80122d4:	438a      	bics	r2, r1
 80122d6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	68d9      	ldr	r1, [r3, #12]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	689a      	ldr	r2, [r3, #8]
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	430a      	orrs	r2, r1
 80122e8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80122ea:	4b6a      	ldr	r3, [pc, #424]	@ (8012494 <HAL_ADC_Init+0x2d4>)
 80122ec:	681a      	ldr	r2, [r3, #0]
 80122ee:	4b69      	ldr	r3, [pc, #420]	@ (8012494 <HAL_ADC_Init+0x2d4>)
 80122f0:	496a      	ldr	r1, [pc, #424]	@ (801249c <HAL_ADC_Init+0x2dc>)
 80122f2:	400a      	ands	r2, r1
 80122f4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80122f6:	4b67      	ldr	r3, [pc, #412]	@ (8012494 <HAL_ADC_Init+0x2d4>)
 80122f8:	6819      	ldr	r1, [r3, #0]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80122fe:	065a      	lsls	r2, r3, #25
 8012300:	4b64      	ldr	r3, [pc, #400]	@ (8012494 <HAL_ADC_Init+0x2d4>)
 8012302:	430a      	orrs	r2, r1
 8012304:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	689a      	ldr	r2, [r3, #8]
 801230c:	2380      	movs	r3, #128	@ 0x80
 801230e:	055b      	lsls	r3, r3, #21
 8012310:	4013      	ands	r3, r2
 8012312:	d108      	bne.n	8012326 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	689a      	ldr	r2, [r3, #8]
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	2180      	movs	r1, #128	@ 0x80
 8012320:	0549      	lsls	r1, r1, #21
 8012322:	430a      	orrs	r2, r1
 8012324:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	68da      	ldr	r2, [r3, #12]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	495b      	ldr	r1, [pc, #364]	@ (80124a0 <HAL_ADC_Init+0x2e0>)
 8012332:	400a      	ands	r2, r1
 8012334:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	68d9      	ldr	r1, [r3, #12]
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	691b      	ldr	r3, [r3, #16]
 8012344:	2b02      	cmp	r3, #2
 8012346:	d101      	bne.n	801234c <HAL_ADC_Init+0x18c>
 8012348:	2304      	movs	r3, #4
 801234a:	e000      	b.n	801234e <HAL_ADC_Init+0x18e>
 801234c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801234e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2020      	movs	r0, #32
 8012354:	5c1b      	ldrb	r3, [r3, r0]
 8012356:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8012358:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	202c      	movs	r0, #44	@ 0x2c
 801235e:	5c1b      	ldrb	r3, [r3, r0]
 8012360:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8012362:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8012368:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	699b      	ldr	r3, [r3, #24]
 801236e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8012370:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	69db      	ldr	r3, [r3, #28]
 8012376:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8012378:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	430a      	orrs	r2, r1
 8012380:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012386:	23c2      	movs	r3, #194	@ 0xc2
 8012388:	33ff      	adds	r3, #255	@ 0xff
 801238a:	429a      	cmp	r2, r3
 801238c:	d00b      	beq.n	80123a6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	68d9      	ldr	r1, [r3, #12]
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 801239c:	431a      	orrs	r2, r3
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	430a      	orrs	r2, r1
 80123a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2221      	movs	r2, #33	@ 0x21
 80123aa:	5c9b      	ldrb	r3, [r3, r2]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d11a      	bne.n	80123e6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2220      	movs	r2, #32
 80123b4:	5c9b      	ldrb	r3, [r3, r2]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d109      	bne.n	80123ce <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	68da      	ldr	r2, [r3, #12]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	2180      	movs	r1, #128	@ 0x80
 80123c6:	0249      	lsls	r1, r1, #9
 80123c8:	430a      	orrs	r2, r1
 80123ca:	60da      	str	r2, [r3, #12]
 80123cc:	e00b      	b.n	80123e6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80123d2:	2220      	movs	r2, #32
 80123d4:	431a      	orrs	r2, r3
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80123de:	2201      	movs	r2, #1
 80123e0:	431a      	orrs	r2, r3
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d11f      	bne.n	801242e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	691a      	ldr	r2, [r3, #16]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	492a      	ldr	r1, [pc, #168]	@ (80124a4 <HAL_ADC_Init+0x2e4>)
 80123fa:	400a      	ands	r2, r1
 80123fc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	6919      	ldr	r1, [r3, #16]
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 801240c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8012412:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	430a      	orrs	r2, r1
 801241a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	691a      	ldr	r2, [r3, #16]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	2101      	movs	r1, #1
 8012428:	430a      	orrs	r2, r1
 801242a:	611a      	str	r2, [r3, #16]
 801242c:	e00e      	b.n	801244c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	691b      	ldr	r3, [r3, #16]
 8012434:	2201      	movs	r2, #1
 8012436:	4013      	ands	r3, r2
 8012438:	2b01      	cmp	r3, #1
 801243a:	d107      	bne.n	801244c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	691a      	ldr	r2, [r3, #16]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	2101      	movs	r1, #1
 8012448:	438a      	bics	r2, r1
 801244a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	695a      	ldr	r2, [r3, #20]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	2107      	movs	r1, #7
 8012458:	438a      	bics	r2, r1
 801245a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	6959      	ldr	r1, [r3, #20]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	430a      	orrs	r2, r1
 801246c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2200      	movs	r2, #0
 8012472:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012478:	2203      	movs	r2, #3
 801247a:	4393      	bics	r3, r2
 801247c:	2201      	movs	r2, #1
 801247e:	431a      	orrs	r2, r3
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8012484:	2300      	movs	r3, #0
}
 8012486:	0018      	movs	r0, r3
 8012488:	46bd      	mov	sp, r7
 801248a:	b002      	add	sp, #8
 801248c:	bd80      	pop	{r7, pc}
 801248e:	46c0      	nop			@ (mov r8, r8)
 8012490:	fffffefd 	.word	0xfffffefd
 8012494:	40012708 	.word	0x40012708
 8012498:	ffc3ffff 	.word	0xffc3ffff
 801249c:	fdffffff 	.word	0xfdffffff
 80124a0:	fffe0219 	.word	0xfffe0219
 80124a4:	fffffc03 	.word	0xfffffc03

080124a8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80124a8:	b590      	push	{r4, r7, lr}
 80124aa:	b085      	sub	sp, #20
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80124b0:	230f      	movs	r3, #15
 80124b2:	18fb      	adds	r3, r7, r3
 80124b4:	2200      	movs	r2, #0
 80124b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	689b      	ldr	r3, [r3, #8]
 80124be:	2204      	movs	r2, #4
 80124c0:	4013      	ands	r3, r2
 80124c2:	d138      	bne.n	8012536 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2250      	movs	r2, #80	@ 0x50
 80124c8:	5c9b      	ldrb	r3, [r3, r2]
 80124ca:	2b01      	cmp	r3, #1
 80124cc:	d101      	bne.n	80124d2 <HAL_ADC_Start+0x2a>
 80124ce:	2302      	movs	r3, #2
 80124d0:	e038      	b.n	8012544 <HAL_ADC_Start+0x9c>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2250      	movs	r2, #80	@ 0x50
 80124d6:	2101      	movs	r1, #1
 80124d8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	69db      	ldr	r3, [r3, #28]
 80124de:	2b01      	cmp	r3, #1
 80124e0:	d007      	beq.n	80124f2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80124e2:	230f      	movs	r3, #15
 80124e4:	18fc      	adds	r4, r7, r3
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	0018      	movs	r0, r3
 80124ea:	f000 f95f 	bl	80127ac <ADC_Enable>
 80124ee:	0003      	movs	r3, r0
 80124f0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80124f2:	230f      	movs	r3, #15
 80124f4:	18fb      	adds	r3, r7, r3
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d120      	bne.n	801253e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012500:	4a12      	ldr	r2, [pc, #72]	@ (801254c <HAL_ADC_Start+0xa4>)
 8012502:	4013      	ands	r3, r2
 8012504:	2280      	movs	r2, #128	@ 0x80
 8012506:	0052      	lsls	r2, r2, #1
 8012508:	431a      	orrs	r2, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2200      	movs	r2, #0
 8012512:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2250      	movs	r2, #80	@ 0x50
 8012518:	2100      	movs	r1, #0
 801251a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	221c      	movs	r2, #28
 8012522:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	689a      	ldr	r2, [r3, #8]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2104      	movs	r1, #4
 8012530:	430a      	orrs	r2, r1
 8012532:	609a      	str	r2, [r3, #8]
 8012534:	e003      	b.n	801253e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8012536:	230f      	movs	r3, #15
 8012538:	18fb      	adds	r3, r7, r3
 801253a:	2202      	movs	r2, #2
 801253c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 801253e:	230f      	movs	r3, #15
 8012540:	18fb      	adds	r3, r7, r3
 8012542:	781b      	ldrb	r3, [r3, #0]
}
 8012544:	0018      	movs	r0, r3
 8012546:	46bd      	mov	sp, r7
 8012548:	b005      	add	sp, #20
 801254a:	bd90      	pop	{r4, r7, pc}
 801254c:	fffff0fe 	.word	0xfffff0fe

08012550 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801255a:	2300      	movs	r3, #0
 801255c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 801255e:	2300      	movs	r3, #0
 8012560:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	695b      	ldr	r3, [r3, #20]
 8012566:	2b08      	cmp	r3, #8
 8012568:	d102      	bne.n	8012570 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 801256a:	2308      	movs	r3, #8
 801256c:	60fb      	str	r3, [r7, #12]
 801256e:	e014      	b.n	801259a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	2201      	movs	r2, #1
 8012578:	4013      	ands	r3, r2
 801257a:	2b01      	cmp	r3, #1
 801257c:	d10b      	bne.n	8012596 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012582:	2220      	movs	r2, #32
 8012584:	431a      	orrs	r2, r3
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2250      	movs	r2, #80	@ 0x50
 801258e:	2100      	movs	r1, #0
 8012590:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8012592:	2301      	movs	r3, #1
 8012594:	e072      	b.n	801267c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8012596:	230c      	movs	r3, #12
 8012598:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801259a:	f7ff fda9 	bl	80120f0 <HAL_GetTick>
 801259e:	0003      	movs	r3, r0
 80125a0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80125a2:	e01f      	b.n	80125e4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	3301      	adds	r3, #1
 80125a8:	d01c      	beq.n	80125e4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d007      	beq.n	80125c0 <HAL_ADC_PollForConversion+0x70>
 80125b0:	f7ff fd9e 	bl	80120f0 <HAL_GetTick>
 80125b4:	0002      	movs	r2, r0
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	1ad3      	subs	r3, r2, r3
 80125ba:	683a      	ldr	r2, [r7, #0]
 80125bc:	429a      	cmp	r2, r3
 80125be:	d211      	bcs.n	80125e4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	68fa      	ldr	r2, [r7, #12]
 80125c8:	4013      	ands	r3, r2
 80125ca:	d10b      	bne.n	80125e4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125d0:	2204      	movs	r2, #4
 80125d2:	431a      	orrs	r2, r3
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2250      	movs	r2, #80	@ 0x50
 80125dc:	2100      	movs	r1, #0
 80125de:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80125e0:	2303      	movs	r3, #3
 80125e2:	e04b      	b.n	801267c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	68fa      	ldr	r2, [r7, #12]
 80125ec:	4013      	ands	r3, r2
 80125ee:	d0d9      	beq.n	80125a4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80125f4:	2280      	movs	r2, #128	@ 0x80
 80125f6:	0092      	lsls	r2, r2, #2
 80125f8:	431a      	orrs	r2, r3
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	68da      	ldr	r2, [r3, #12]
 8012604:	23c0      	movs	r3, #192	@ 0xc0
 8012606:	011b      	lsls	r3, r3, #4
 8012608:	4013      	ands	r3, r2
 801260a:	d12e      	bne.n	801266a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2220      	movs	r2, #32
 8012610:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8012612:	2b00      	cmp	r3, #0
 8012614:	d129      	bne.n	801266a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	2208      	movs	r2, #8
 801261e:	4013      	ands	r3, r2
 8012620:	2b08      	cmp	r3, #8
 8012622:	d122      	bne.n	801266a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	689b      	ldr	r3, [r3, #8]
 801262a:	2204      	movs	r2, #4
 801262c:	4013      	ands	r3, r2
 801262e:	d110      	bne.n	8012652 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	685a      	ldr	r2, [r3, #4]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	210c      	movs	r1, #12
 801263c:	438a      	bics	r2, r1
 801263e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012644:	4a0f      	ldr	r2, [pc, #60]	@ (8012684 <HAL_ADC_PollForConversion+0x134>)
 8012646:	4013      	ands	r3, r2
 8012648:	2201      	movs	r2, #1
 801264a:	431a      	orrs	r2, r3
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	655a      	str	r2, [r3, #84]	@ 0x54
 8012650:	e00b      	b.n	801266a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012656:	2220      	movs	r2, #32
 8012658:	431a      	orrs	r2, r3
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012662:	2201      	movs	r2, #1
 8012664:	431a      	orrs	r2, r3
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	699b      	ldr	r3, [r3, #24]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d103      	bne.n	801267a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	220c      	movs	r2, #12
 8012678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801267a:	2300      	movs	r3, #0
}
 801267c:	0018      	movs	r0, r3
 801267e:	46bd      	mov	sp, r7
 8012680:	b004      	add	sp, #16
 8012682:	bd80      	pop	{r7, pc}
 8012684:	fffffefe 	.word	0xfffffefe

08012688 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8012696:	0018      	movs	r0, r3
 8012698:	46bd      	mov	sp, r7
 801269a:	b002      	add	sp, #8
 801269c:	bd80      	pop	{r7, pc}
	...

080126a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2250      	movs	r2, #80	@ 0x50
 80126ae:	5c9b      	ldrb	r3, [r3, r2]
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d101      	bne.n	80126b8 <HAL_ADC_ConfigChannel+0x18>
 80126b4:	2302      	movs	r3, #2
 80126b6:	e06c      	b.n	8012792 <HAL_ADC_ConfigChannel+0xf2>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2250      	movs	r2, #80	@ 0x50
 80126bc:	2101      	movs	r1, #1
 80126be:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	689b      	ldr	r3, [r3, #8]
 80126c6:	2204      	movs	r2, #4
 80126c8:	4013      	ands	r3, r2
 80126ca:	d00b      	beq.n	80126e4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80126d0:	2220      	movs	r2, #32
 80126d2:	431a      	orrs	r2, r3
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2250      	movs	r2, #80	@ 0x50
 80126dc:	2100      	movs	r1, #0
 80126de:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80126e0:	2301      	movs	r3, #1
 80126e2:	e056      	b.n	8012792 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	4a2c      	ldr	r2, [pc, #176]	@ (801279c <HAL_ADC_ConfigChannel+0xfc>)
 80126ea:	4293      	cmp	r3, r2
 80126ec:	d028      	beq.n	8012740 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	035b      	lsls	r3, r3, #13
 80126fa:	0b5a      	lsrs	r2, r3, #13
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	430a      	orrs	r2, r1
 8012702:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	2380      	movs	r3, #128	@ 0x80
 801270a:	02db      	lsls	r3, r3, #11
 801270c:	4013      	ands	r3, r2
 801270e:	d009      	beq.n	8012724 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8012710:	4b23      	ldr	r3, [pc, #140]	@ (80127a0 <HAL_ADC_ConfigChannel+0x100>)
 8012712:	681a      	ldr	r2, [r3, #0]
 8012714:	4b22      	ldr	r3, [pc, #136]	@ (80127a0 <HAL_ADC_ConfigChannel+0x100>)
 8012716:	2180      	movs	r1, #128	@ 0x80
 8012718:	0409      	lsls	r1, r1, #16
 801271a:	430a      	orrs	r2, r1
 801271c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 801271e:	200a      	movs	r0, #10
 8012720:	f000 f8ac 	bl	801287c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	681a      	ldr	r2, [r3, #0]
 8012728:	2380      	movs	r3, #128	@ 0x80
 801272a:	029b      	lsls	r3, r3, #10
 801272c:	4013      	ands	r3, r2
 801272e:	d02b      	beq.n	8012788 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8012730:	4b1b      	ldr	r3, [pc, #108]	@ (80127a0 <HAL_ADC_ConfigChannel+0x100>)
 8012732:	681a      	ldr	r2, [r3, #0]
 8012734:	4b1a      	ldr	r3, [pc, #104]	@ (80127a0 <HAL_ADC_ConfigChannel+0x100>)
 8012736:	2180      	movs	r1, #128	@ 0x80
 8012738:	03c9      	lsls	r1, r1, #15
 801273a:	430a      	orrs	r2, r1
 801273c:	601a      	str	r2, [r3, #0]
 801273e:	e023      	b.n	8012788 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	035b      	lsls	r3, r3, #13
 801274c:	0b5b      	lsrs	r3, r3, #13
 801274e:	43d9      	mvns	r1, r3
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	400a      	ands	r2, r1
 8012756:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	681a      	ldr	r2, [r3, #0]
 801275c:	2380      	movs	r3, #128	@ 0x80
 801275e:	02db      	lsls	r3, r3, #11
 8012760:	4013      	ands	r3, r2
 8012762:	d005      	beq.n	8012770 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8012764:	4b0e      	ldr	r3, [pc, #56]	@ (80127a0 <HAL_ADC_ConfigChannel+0x100>)
 8012766:	681a      	ldr	r2, [r3, #0]
 8012768:	4b0d      	ldr	r3, [pc, #52]	@ (80127a0 <HAL_ADC_ConfigChannel+0x100>)
 801276a:	490e      	ldr	r1, [pc, #56]	@ (80127a4 <HAL_ADC_ConfigChannel+0x104>)
 801276c:	400a      	ands	r2, r1
 801276e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	2380      	movs	r3, #128	@ 0x80
 8012776:	029b      	lsls	r3, r3, #10
 8012778:	4013      	ands	r3, r2
 801277a:	d005      	beq.n	8012788 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 801277c:	4b08      	ldr	r3, [pc, #32]	@ (80127a0 <HAL_ADC_ConfigChannel+0x100>)
 801277e:	681a      	ldr	r2, [r3, #0]
 8012780:	4b07      	ldr	r3, [pc, #28]	@ (80127a0 <HAL_ADC_ConfigChannel+0x100>)
 8012782:	4909      	ldr	r1, [pc, #36]	@ (80127a8 <HAL_ADC_ConfigChannel+0x108>)
 8012784:	400a      	ands	r2, r1
 8012786:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2250      	movs	r2, #80	@ 0x50
 801278c:	2100      	movs	r1, #0
 801278e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8012790:	2300      	movs	r3, #0
}
 8012792:	0018      	movs	r0, r3
 8012794:	46bd      	mov	sp, r7
 8012796:	b002      	add	sp, #8
 8012798:	bd80      	pop	{r7, pc}
 801279a:	46c0      	nop			@ (mov r8, r8)
 801279c:	00001001 	.word	0x00001001
 80127a0:	40012708 	.word	0x40012708
 80127a4:	ff7fffff 	.word	0xff7fffff
 80127a8:	ffbfffff 	.word	0xffbfffff

080127ac <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b084      	sub	sp, #16
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80127b4:	2300      	movs	r3, #0
 80127b6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	689b      	ldr	r3, [r3, #8]
 80127be:	2203      	movs	r2, #3
 80127c0:	4013      	ands	r3, r2
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d108      	bne.n	80127d8 <ADC_Enable+0x2c>
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	2201      	movs	r2, #1
 80127ce:	4013      	ands	r3, r2
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	d101      	bne.n	80127d8 <ADC_Enable+0x2c>
 80127d4:	2301      	movs	r3, #1
 80127d6:	e000      	b.n	80127da <ADC_Enable+0x2e>
 80127d8:	2300      	movs	r3, #0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d146      	bne.n	801286c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	689b      	ldr	r3, [r3, #8]
 80127e4:	4a24      	ldr	r2, [pc, #144]	@ (8012878 <ADC_Enable+0xcc>)
 80127e6:	4013      	ands	r3, r2
 80127e8:	d00d      	beq.n	8012806 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80127ee:	2210      	movs	r2, #16
 80127f0:	431a      	orrs	r2, r3
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80127fa:	2201      	movs	r2, #1
 80127fc:	431a      	orrs	r2, r3
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8012802:	2301      	movs	r3, #1
 8012804:	e033      	b.n	801286e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	689a      	ldr	r2, [r3, #8]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	2101      	movs	r1, #1
 8012812:	430a      	orrs	r2, r1
 8012814:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8012816:	2001      	movs	r0, #1
 8012818:	f000 f830 	bl	801287c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 801281c:	f7ff fc68 	bl	80120f0 <HAL_GetTick>
 8012820:	0003      	movs	r3, r0
 8012822:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8012824:	e01b      	b.n	801285e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8012826:	f7ff fc63 	bl	80120f0 <HAL_GetTick>
 801282a:	0002      	movs	r2, r0
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	1ad3      	subs	r3, r2, r3
 8012830:	2b0a      	cmp	r3, #10
 8012832:	d914      	bls.n	801285e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	2201      	movs	r2, #1
 801283c:	4013      	ands	r3, r2
 801283e:	2b01      	cmp	r3, #1
 8012840:	d00d      	beq.n	801285e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012846:	2210      	movs	r2, #16
 8012848:	431a      	orrs	r2, r3
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012852:	2201      	movs	r2, #1
 8012854:	431a      	orrs	r2, r3
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 801285a:	2301      	movs	r3, #1
 801285c:	e007      	b.n	801286e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	2201      	movs	r2, #1
 8012866:	4013      	ands	r3, r2
 8012868:	2b01      	cmp	r3, #1
 801286a:	d1dc      	bne.n	8012826 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801286c:	2300      	movs	r3, #0
}
 801286e:	0018      	movs	r0, r3
 8012870:	46bd      	mov	sp, r7
 8012872:	b004      	add	sp, #16
 8012874:	bd80      	pop	{r7, pc}
 8012876:	46c0      	nop			@ (mov r8, r8)
 8012878:	80000017 	.word	0x80000017

0801287c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b084      	sub	sp, #16
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8012884:	4b0b      	ldr	r3, [pc, #44]	@ (80128b4 <ADC_DelayMicroSecond+0x38>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	490b      	ldr	r1, [pc, #44]	@ (80128b8 <ADC_DelayMicroSecond+0x3c>)
 801288a:	0018      	movs	r0, r3
 801288c:	f7ed fc8a 	bl	80001a4 <__udivsi3>
 8012890:	0003      	movs	r3, r0
 8012892:	001a      	movs	r2, r3
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	4353      	muls	r3, r2
 8012898:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 801289a:	e002      	b.n	80128a2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	3b01      	subs	r3, #1
 80128a0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d1f9      	bne.n	801289c <ADC_DelayMicroSecond+0x20>
  }
}
 80128a8:	46c0      	nop			@ (mov r8, r8)
 80128aa:	46c0      	nop			@ (mov r8, r8)
 80128ac:	46bd      	mov	sp, r7
 80128ae:	b004      	add	sp, #16
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	46c0      	nop			@ (mov r8, r8)
 80128b4:	200000e0 	.word	0x200000e0
 80128b8:	000f4240 	.word	0x000f4240

080128bc <__NVIC_EnableIRQ>:
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	0002      	movs	r2, r0
 80128c4:	1dfb      	adds	r3, r7, #7
 80128c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80128c8:	1dfb      	adds	r3, r7, #7
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80128ce:	d809      	bhi.n	80128e4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80128d0:	1dfb      	adds	r3, r7, #7
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	001a      	movs	r2, r3
 80128d6:	231f      	movs	r3, #31
 80128d8:	401a      	ands	r2, r3
 80128da:	4b04      	ldr	r3, [pc, #16]	@ (80128ec <__NVIC_EnableIRQ+0x30>)
 80128dc:	2101      	movs	r1, #1
 80128de:	4091      	lsls	r1, r2
 80128e0:	000a      	movs	r2, r1
 80128e2:	601a      	str	r2, [r3, #0]
}
 80128e4:	46c0      	nop			@ (mov r8, r8)
 80128e6:	46bd      	mov	sp, r7
 80128e8:	b002      	add	sp, #8
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	e000e100 	.word	0xe000e100

080128f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80128f0:	b590      	push	{r4, r7, lr}
 80128f2:	b083      	sub	sp, #12
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	0002      	movs	r2, r0
 80128f8:	6039      	str	r1, [r7, #0]
 80128fa:	1dfb      	adds	r3, r7, #7
 80128fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80128fe:	1dfb      	adds	r3, r7, #7
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	2b7f      	cmp	r3, #127	@ 0x7f
 8012904:	d828      	bhi.n	8012958 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012906:	4a2f      	ldr	r2, [pc, #188]	@ (80129c4 <__NVIC_SetPriority+0xd4>)
 8012908:	1dfb      	adds	r3, r7, #7
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	b25b      	sxtb	r3, r3
 801290e:	089b      	lsrs	r3, r3, #2
 8012910:	33c0      	adds	r3, #192	@ 0xc0
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	589b      	ldr	r3, [r3, r2]
 8012916:	1dfa      	adds	r2, r7, #7
 8012918:	7812      	ldrb	r2, [r2, #0]
 801291a:	0011      	movs	r1, r2
 801291c:	2203      	movs	r2, #3
 801291e:	400a      	ands	r2, r1
 8012920:	00d2      	lsls	r2, r2, #3
 8012922:	21ff      	movs	r1, #255	@ 0xff
 8012924:	4091      	lsls	r1, r2
 8012926:	000a      	movs	r2, r1
 8012928:	43d2      	mvns	r2, r2
 801292a:	401a      	ands	r2, r3
 801292c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	019b      	lsls	r3, r3, #6
 8012932:	22ff      	movs	r2, #255	@ 0xff
 8012934:	401a      	ands	r2, r3
 8012936:	1dfb      	adds	r3, r7, #7
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	0018      	movs	r0, r3
 801293c:	2303      	movs	r3, #3
 801293e:	4003      	ands	r3, r0
 8012940:	00db      	lsls	r3, r3, #3
 8012942:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012944:	481f      	ldr	r0, [pc, #124]	@ (80129c4 <__NVIC_SetPriority+0xd4>)
 8012946:	1dfb      	adds	r3, r7, #7
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	b25b      	sxtb	r3, r3
 801294c:	089b      	lsrs	r3, r3, #2
 801294e:	430a      	orrs	r2, r1
 8012950:	33c0      	adds	r3, #192	@ 0xc0
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8012956:	e031      	b.n	80129bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012958:	4a1b      	ldr	r2, [pc, #108]	@ (80129c8 <__NVIC_SetPriority+0xd8>)
 801295a:	1dfb      	adds	r3, r7, #7
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	0019      	movs	r1, r3
 8012960:	230f      	movs	r3, #15
 8012962:	400b      	ands	r3, r1
 8012964:	3b08      	subs	r3, #8
 8012966:	089b      	lsrs	r3, r3, #2
 8012968:	3306      	adds	r3, #6
 801296a:	009b      	lsls	r3, r3, #2
 801296c:	18d3      	adds	r3, r2, r3
 801296e:	3304      	adds	r3, #4
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	1dfa      	adds	r2, r7, #7
 8012974:	7812      	ldrb	r2, [r2, #0]
 8012976:	0011      	movs	r1, r2
 8012978:	2203      	movs	r2, #3
 801297a:	400a      	ands	r2, r1
 801297c:	00d2      	lsls	r2, r2, #3
 801297e:	21ff      	movs	r1, #255	@ 0xff
 8012980:	4091      	lsls	r1, r2
 8012982:	000a      	movs	r2, r1
 8012984:	43d2      	mvns	r2, r2
 8012986:	401a      	ands	r2, r3
 8012988:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	019b      	lsls	r3, r3, #6
 801298e:	22ff      	movs	r2, #255	@ 0xff
 8012990:	401a      	ands	r2, r3
 8012992:	1dfb      	adds	r3, r7, #7
 8012994:	781b      	ldrb	r3, [r3, #0]
 8012996:	0018      	movs	r0, r3
 8012998:	2303      	movs	r3, #3
 801299a:	4003      	ands	r3, r0
 801299c:	00db      	lsls	r3, r3, #3
 801299e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80129a0:	4809      	ldr	r0, [pc, #36]	@ (80129c8 <__NVIC_SetPriority+0xd8>)
 80129a2:	1dfb      	adds	r3, r7, #7
 80129a4:	781b      	ldrb	r3, [r3, #0]
 80129a6:	001c      	movs	r4, r3
 80129a8:	230f      	movs	r3, #15
 80129aa:	4023      	ands	r3, r4
 80129ac:	3b08      	subs	r3, #8
 80129ae:	089b      	lsrs	r3, r3, #2
 80129b0:	430a      	orrs	r2, r1
 80129b2:	3306      	adds	r3, #6
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	18c3      	adds	r3, r0, r3
 80129b8:	3304      	adds	r3, #4
 80129ba:	601a      	str	r2, [r3, #0]
}
 80129bc:	46c0      	nop			@ (mov r8, r8)
 80129be:	46bd      	mov	sp, r7
 80129c0:	b003      	add	sp, #12
 80129c2:	bd90      	pop	{r4, r7, pc}
 80129c4:	e000e100 	.word	0xe000e100
 80129c8:	e000ed00 	.word	0xe000ed00

080129cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80129d0:	f3bf 8f4f 	dsb	sy
}
 80129d4:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80129d6:	4b04      	ldr	r3, [pc, #16]	@ (80129e8 <__NVIC_SystemReset+0x1c>)
 80129d8:	4a04      	ldr	r2, [pc, #16]	@ (80129ec <__NVIC_SystemReset+0x20>)
 80129da:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80129dc:	f3bf 8f4f 	dsb	sy
}
 80129e0:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80129e2:	46c0      	nop			@ (mov r8, r8)
 80129e4:	e7fd      	b.n	80129e2 <__NVIC_SystemReset+0x16>
 80129e6:	46c0      	nop			@ (mov r8, r8)
 80129e8:	e000ed00 	.word	0xe000ed00
 80129ec:	05fa0004 	.word	0x05fa0004

080129f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	1e5a      	subs	r2, r3, #1
 80129fc:	2380      	movs	r3, #128	@ 0x80
 80129fe:	045b      	lsls	r3, r3, #17
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d301      	bcc.n	8012a08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012a04:	2301      	movs	r3, #1
 8012a06:	e010      	b.n	8012a2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012a08:	4b0a      	ldr	r3, [pc, #40]	@ (8012a34 <SysTick_Config+0x44>)
 8012a0a:	687a      	ldr	r2, [r7, #4]
 8012a0c:	3a01      	subs	r2, #1
 8012a0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012a10:	2301      	movs	r3, #1
 8012a12:	425b      	negs	r3, r3
 8012a14:	2103      	movs	r1, #3
 8012a16:	0018      	movs	r0, r3
 8012a18:	f7ff ff6a 	bl	80128f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012a1c:	4b05      	ldr	r3, [pc, #20]	@ (8012a34 <SysTick_Config+0x44>)
 8012a1e:	2200      	movs	r2, #0
 8012a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012a22:	4b04      	ldr	r3, [pc, #16]	@ (8012a34 <SysTick_Config+0x44>)
 8012a24:	2207      	movs	r2, #7
 8012a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012a28:	2300      	movs	r3, #0
}
 8012a2a:	0018      	movs	r0, r3
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	b002      	add	sp, #8
 8012a30:	bd80      	pop	{r7, pc}
 8012a32:	46c0      	nop			@ (mov r8, r8)
 8012a34:	e000e010 	.word	0xe000e010

08012a38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b084      	sub	sp, #16
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	60b9      	str	r1, [r7, #8]
 8012a40:	607a      	str	r2, [r7, #4]
 8012a42:	210f      	movs	r1, #15
 8012a44:	187b      	adds	r3, r7, r1
 8012a46:	1c02      	adds	r2, r0, #0
 8012a48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8012a4a:	68ba      	ldr	r2, [r7, #8]
 8012a4c:	187b      	adds	r3, r7, r1
 8012a4e:	781b      	ldrb	r3, [r3, #0]
 8012a50:	b25b      	sxtb	r3, r3
 8012a52:	0011      	movs	r1, r2
 8012a54:	0018      	movs	r0, r3
 8012a56:	f7ff ff4b 	bl	80128f0 <__NVIC_SetPriority>
}
 8012a5a:	46c0      	nop			@ (mov r8, r8)
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	b004      	add	sp, #16
 8012a60:	bd80      	pop	{r7, pc}

08012a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012a62:	b580      	push	{r7, lr}
 8012a64:	b082      	sub	sp, #8
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	0002      	movs	r2, r0
 8012a6a:	1dfb      	adds	r3, r7, #7
 8012a6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012a6e:	1dfb      	adds	r3, r7, #7
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	b25b      	sxtb	r3, r3
 8012a74:	0018      	movs	r0, r3
 8012a76:	f7ff ff21 	bl	80128bc <__NVIC_EnableIRQ>
}
 8012a7a:	46c0      	nop			@ (mov r8, r8)
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	b002      	add	sp, #8
 8012a80:	bd80      	pop	{r7, pc}

08012a82 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8012a82:	b580      	push	{r7, lr}
 8012a84:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8012a86:	f7ff ffa1 	bl	80129cc <__NVIC_SystemReset>

08012a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b082      	sub	sp, #8
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	0018      	movs	r0, r3
 8012a96:	f7ff ffab 	bl	80129f0 <SysTick_Config>
 8012a9a:	0003      	movs	r3, r0
}
 8012a9c:	0018      	movs	r0, r3
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	b002      	add	sp, #8
 8012aa2:	bd80      	pop	{r7, pc}

08012aa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b084      	sub	sp, #16
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d101      	bne.n	8012ab6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	e061      	b.n	8012b7a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	4a32      	ldr	r2, [pc, #200]	@ (8012b84 <HAL_DMA_Init+0xe0>)
 8012abc:	4694      	mov	ip, r2
 8012abe:	4463      	add	r3, ip
 8012ac0:	2114      	movs	r1, #20
 8012ac2:	0018      	movs	r0, r3
 8012ac4:	f7ed fb6e 	bl	80001a4 <__udivsi3>
 8012ac8:	0003      	movs	r3, r0
 8012aca:	009a      	lsls	r2, r3, #2
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	4a2d      	ldr	r2, [pc, #180]	@ (8012b88 <HAL_DMA_Init+0xe4>)
 8012ad4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2225      	movs	r2, #37	@ 0x25
 8012ada:	2102      	movs	r1, #2
 8012adc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	4a28      	ldr	r2, [pc, #160]	@ (8012b8c <HAL_DMA_Init+0xe8>)
 8012aea:	4013      	ands	r3, r2
 8012aec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8012af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	691b      	ldr	r3, [r3, #16]
 8012afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	699b      	ldr	r3, [r3, #24]
 8012b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	6a1b      	ldr	r3, [r3, #32]
 8012b14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8012b16:	68fa      	ldr	r2, [r7, #12]
 8012b18:	4313      	orrs	r3, r2
 8012b1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	68fa      	ldr	r2, [r7, #12]
 8012b22:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	689a      	ldr	r2, [r3, #8]
 8012b28:	2380      	movs	r3, #128	@ 0x80
 8012b2a:	01db      	lsls	r3, r3, #7
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	d018      	beq.n	8012b62 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8012b30:	4b17      	ldr	r3, [pc, #92]	@ (8012b90 <HAL_DMA_Init+0xec>)
 8012b32:	681a      	ldr	r2, [r3, #0]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b38:	211c      	movs	r1, #28
 8012b3a:	400b      	ands	r3, r1
 8012b3c:	210f      	movs	r1, #15
 8012b3e:	4099      	lsls	r1, r3
 8012b40:	000b      	movs	r3, r1
 8012b42:	43d9      	mvns	r1, r3
 8012b44:	4b12      	ldr	r3, [pc, #72]	@ (8012b90 <HAL_DMA_Init+0xec>)
 8012b46:	400a      	ands	r2, r1
 8012b48:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8012b4a:	4b11      	ldr	r3, [pc, #68]	@ (8012b90 <HAL_DMA_Init+0xec>)
 8012b4c:	6819      	ldr	r1, [r3, #0]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	685a      	ldr	r2, [r3, #4]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b56:	201c      	movs	r0, #28
 8012b58:	4003      	ands	r3, r0
 8012b5a:	409a      	lsls	r2, r3
 8012b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8012b90 <HAL_DMA_Init+0xec>)
 8012b5e:	430a      	orrs	r2, r1
 8012b60:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2200      	movs	r2, #0
 8012b66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2225      	movs	r2, #37	@ 0x25
 8012b6c:	2101      	movs	r1, #1
 8012b6e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2224      	movs	r2, #36	@ 0x24
 8012b74:	2100      	movs	r1, #0
 8012b76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012b78:	2300      	movs	r3, #0
}
 8012b7a:	0018      	movs	r0, r3
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	b004      	add	sp, #16
 8012b80:	bd80      	pop	{r7, pc}
 8012b82:	46c0      	nop			@ (mov r8, r8)
 8012b84:	bffdfff8 	.word	0xbffdfff8
 8012b88:	40020000 	.word	0x40020000
 8012b8c:	ffff800f 	.word	0xffff800f
 8012b90:	400200a8 	.word	0x400200a8

08012b94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b086      	sub	sp, #24
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	60f8      	str	r0, [r7, #12]
 8012b9c:	60b9      	str	r1, [r7, #8]
 8012b9e:	607a      	str	r2, [r7, #4]
 8012ba0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ba2:	2317      	movs	r3, #23
 8012ba4:	18fb      	adds	r3, r7, r3
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	2224      	movs	r2, #36	@ 0x24
 8012bae:	5c9b      	ldrb	r3, [r3, r2]
 8012bb0:	2b01      	cmp	r3, #1
 8012bb2:	d101      	bne.n	8012bb8 <HAL_DMA_Start_IT+0x24>
 8012bb4:	2302      	movs	r3, #2
 8012bb6:	e04f      	b.n	8012c58 <HAL_DMA_Start_IT+0xc4>
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	2224      	movs	r2, #36	@ 0x24
 8012bbc:	2101      	movs	r1, #1
 8012bbe:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	2225      	movs	r2, #37	@ 0x25
 8012bc4:	5c9b      	ldrb	r3, [r3, r2]
 8012bc6:	b2db      	uxtb	r3, r3
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d13a      	bne.n	8012c42 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	2225      	movs	r2, #37	@ 0x25
 8012bd0:	2102      	movs	r1, #2
 8012bd2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	681a      	ldr	r2, [r3, #0]
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	2101      	movs	r1, #1
 8012be6:	438a      	bics	r2, r1
 8012be8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	687a      	ldr	r2, [r7, #4]
 8012bee:	68b9      	ldr	r1, [r7, #8]
 8012bf0:	68f8      	ldr	r0, [r7, #12]
 8012bf2:	f000 f976 	bl	8012ee2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d008      	beq.n	8012c10 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	210e      	movs	r1, #14
 8012c0a:	430a      	orrs	r2, r1
 8012c0c:	601a      	str	r2, [r3, #0]
 8012c0e:	e00f      	b.n	8012c30 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	681a      	ldr	r2, [r3, #0]
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	2104      	movs	r1, #4
 8012c1c:	438a      	bics	r2, r1
 8012c1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	681a      	ldr	r2, [r3, #0]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	210a      	movs	r1, #10
 8012c2c:	430a      	orrs	r2, r1
 8012c2e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	681a      	ldr	r2, [r3, #0]
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	2101      	movs	r1, #1
 8012c3c:	430a      	orrs	r2, r1
 8012c3e:	601a      	str	r2, [r3, #0]
 8012c40:	e007      	b.n	8012c52 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	2224      	movs	r2, #36	@ 0x24
 8012c46:	2100      	movs	r1, #0
 8012c48:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8012c4a:	2317      	movs	r3, #23
 8012c4c:	18fb      	adds	r3, r7, r3
 8012c4e:	2202      	movs	r2, #2
 8012c50:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8012c52:	2317      	movs	r3, #23
 8012c54:	18fb      	adds	r3, r7, r3
 8012c56:	781b      	ldrb	r3, [r3, #0]
}
 8012c58:	0018      	movs	r0, r3
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	b006      	add	sp, #24
 8012c5e:	bd80      	pop	{r7, pc}

08012c60 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b084      	sub	sp, #16
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012c68:	230f      	movs	r3, #15
 8012c6a:	18fb      	adds	r3, r7, r3
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2225      	movs	r2, #37	@ 0x25
 8012c74:	5c9b      	ldrb	r3, [r3, r2]
 8012c76:	b2db      	uxtb	r3, r3
 8012c78:	2b02      	cmp	r3, #2
 8012c7a:	d008      	beq.n	8012c8e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2204      	movs	r2, #4
 8012c80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2224      	movs	r2, #36	@ 0x24
 8012c86:	2100      	movs	r1, #0
 8012c88:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	e024      	b.n	8012cd8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	210e      	movs	r1, #14
 8012c9a:	438a      	bics	r2, r1
 8012c9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2101      	movs	r1, #1
 8012caa:	438a      	bics	r2, r1
 8012cac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012cb2:	221c      	movs	r2, #28
 8012cb4:	401a      	ands	r2, r3
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012cba:	2101      	movs	r1, #1
 8012cbc:	4091      	lsls	r1, r2
 8012cbe:	000a      	movs	r2, r1
 8012cc0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2225      	movs	r2, #37	@ 0x25
 8012cc6:	2101      	movs	r1, #1
 8012cc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2224      	movs	r2, #36	@ 0x24
 8012cce:	2100      	movs	r1, #0
 8012cd0:	5499      	strb	r1, [r3, r2]

    return status;
 8012cd2:	230f      	movs	r3, #15
 8012cd4:	18fb      	adds	r3, r7, r3
 8012cd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012cd8:	0018      	movs	r0, r3
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	b004      	add	sp, #16
 8012cde:	bd80      	pop	{r7, pc}

08012ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012ce8:	210f      	movs	r1, #15
 8012cea:	187b      	adds	r3, r7, r1
 8012cec:	2200      	movs	r2, #0
 8012cee:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2225      	movs	r2, #37	@ 0x25
 8012cf4:	5c9b      	ldrb	r3, [r3, r2]
 8012cf6:	b2db      	uxtb	r3, r3
 8012cf8:	2b02      	cmp	r3, #2
 8012cfa:	d006      	beq.n	8012d0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2204      	movs	r2, #4
 8012d00:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8012d02:	187b      	adds	r3, r7, r1
 8012d04:	2201      	movs	r2, #1
 8012d06:	701a      	strb	r2, [r3, #0]
 8012d08:	e02a      	b.n	8012d60 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	681a      	ldr	r2, [r3, #0]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	210e      	movs	r1, #14
 8012d16:	438a      	bics	r2, r1
 8012d18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2101      	movs	r1, #1
 8012d26:	438a      	bics	r2, r1
 8012d28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d2e:	221c      	movs	r2, #28
 8012d30:	401a      	ands	r2, r3
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d36:	2101      	movs	r1, #1
 8012d38:	4091      	lsls	r1, r2
 8012d3a:	000a      	movs	r2, r1
 8012d3c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2225      	movs	r2, #37	@ 0x25
 8012d42:	2101      	movs	r1, #1
 8012d44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2224      	movs	r2, #36	@ 0x24
 8012d4a:	2100      	movs	r1, #0
 8012d4c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d004      	beq.n	8012d60 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d5a:	687a      	ldr	r2, [r7, #4]
 8012d5c:	0010      	movs	r0, r2
 8012d5e:	4798      	blx	r3
    }
  }
  return status;
 8012d60:	230f      	movs	r3, #15
 8012d62:	18fb      	adds	r3, r7, r3
 8012d64:	781b      	ldrb	r3, [r3, #0]
}
 8012d66:	0018      	movs	r0, r3
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	b004      	add	sp, #16
 8012d6c:	bd80      	pop	{r7, pc}

08012d6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8012d6e:	b580      	push	{r7, lr}
 8012d70:	b084      	sub	sp, #16
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d8a:	221c      	movs	r2, #28
 8012d8c:	4013      	ands	r3, r2
 8012d8e:	2204      	movs	r2, #4
 8012d90:	409a      	lsls	r2, r3
 8012d92:	0013      	movs	r3, r2
 8012d94:	68fa      	ldr	r2, [r7, #12]
 8012d96:	4013      	ands	r3, r2
 8012d98:	d026      	beq.n	8012de8 <HAL_DMA_IRQHandler+0x7a>
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	2204      	movs	r2, #4
 8012d9e:	4013      	ands	r3, r2
 8012da0:	d022      	beq.n	8012de8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2220      	movs	r2, #32
 8012daa:	4013      	ands	r3, r2
 8012dac:	d107      	bne.n	8012dbe <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	2104      	movs	r1, #4
 8012dba:	438a      	bics	r2, r1
 8012dbc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012dc2:	221c      	movs	r2, #28
 8012dc4:	401a      	ands	r2, r3
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dca:	2104      	movs	r1, #4
 8012dcc:	4091      	lsls	r1, r2
 8012dce:	000a      	movs	r2, r1
 8012dd0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d100      	bne.n	8012ddc <HAL_DMA_IRQHandler+0x6e>
 8012dda:	e071      	b.n	8012ec0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012de0:	687a      	ldr	r2, [r7, #4]
 8012de2:	0010      	movs	r0, r2
 8012de4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8012de6:	e06b      	b.n	8012ec0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012dec:	221c      	movs	r2, #28
 8012dee:	4013      	ands	r3, r2
 8012df0:	2202      	movs	r2, #2
 8012df2:	409a      	lsls	r2, r3
 8012df4:	0013      	movs	r3, r2
 8012df6:	68fa      	ldr	r2, [r7, #12]
 8012df8:	4013      	ands	r3, r2
 8012dfa:	d02d      	beq.n	8012e58 <HAL_DMA_IRQHandler+0xea>
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	2202      	movs	r2, #2
 8012e00:	4013      	ands	r3, r2
 8012e02:	d029      	beq.n	8012e58 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2220      	movs	r2, #32
 8012e0c:	4013      	ands	r3, r2
 8012e0e:	d10b      	bne.n	8012e28 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	681a      	ldr	r2, [r3, #0]
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	210a      	movs	r1, #10
 8012e1c:	438a      	bics	r2, r1
 8012e1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2225      	movs	r2, #37	@ 0x25
 8012e24:	2101      	movs	r1, #1
 8012e26:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e2c:	221c      	movs	r2, #28
 8012e2e:	401a      	ands	r2, r3
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e34:	2102      	movs	r1, #2
 8012e36:	4091      	lsls	r1, r2
 8012e38:	000a      	movs	r2, r1
 8012e3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2224      	movs	r2, #36	@ 0x24
 8012e40:	2100      	movs	r1, #0
 8012e42:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d039      	beq.n	8012ec0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e50:	687a      	ldr	r2, [r7, #4]
 8012e52:	0010      	movs	r0, r2
 8012e54:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8012e56:	e033      	b.n	8012ec0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e5c:	221c      	movs	r2, #28
 8012e5e:	4013      	ands	r3, r2
 8012e60:	2208      	movs	r2, #8
 8012e62:	409a      	lsls	r2, r3
 8012e64:	0013      	movs	r3, r2
 8012e66:	68fa      	ldr	r2, [r7, #12]
 8012e68:	4013      	ands	r3, r2
 8012e6a:	d02a      	beq.n	8012ec2 <HAL_DMA_IRQHandler+0x154>
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	2208      	movs	r2, #8
 8012e70:	4013      	ands	r3, r2
 8012e72:	d026      	beq.n	8012ec2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	210e      	movs	r1, #14
 8012e80:	438a      	bics	r2, r1
 8012e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e88:	221c      	movs	r2, #28
 8012e8a:	401a      	ands	r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e90:	2101      	movs	r1, #1
 8012e92:	4091      	lsls	r1, r2
 8012e94:	000a      	movs	r2, r1
 8012e96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2201      	movs	r2, #1
 8012e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2225      	movs	r2, #37	@ 0x25
 8012ea2:	2101      	movs	r1, #1
 8012ea4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2224      	movs	r2, #36	@ 0x24
 8012eaa:	2100      	movs	r1, #0
 8012eac:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d005      	beq.n	8012ec2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012eba:	687a      	ldr	r2, [r7, #4]
 8012ebc:	0010      	movs	r0, r2
 8012ebe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8012ec0:	46c0      	nop			@ (mov r8, r8)
 8012ec2:	46c0      	nop			@ (mov r8, r8)
}
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	b004      	add	sp, #16
 8012ec8:	bd80      	pop	{r7, pc}

08012eca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8012eca:	b580      	push	{r7, lr}
 8012ecc:	b082      	sub	sp, #8
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2225      	movs	r2, #37	@ 0x25
 8012ed6:	5c9b      	ldrb	r3, [r3, r2]
 8012ed8:	b2db      	uxtb	r3, r3
}
 8012eda:	0018      	movs	r0, r3
 8012edc:	46bd      	mov	sp, r7
 8012ede:	b002      	add	sp, #8
 8012ee0:	bd80      	pop	{r7, pc}

08012ee2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012ee2:	b580      	push	{r7, lr}
 8012ee4:	b084      	sub	sp, #16
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	60f8      	str	r0, [r7, #12]
 8012eea:	60b9      	str	r1, [r7, #8]
 8012eec:	607a      	str	r2, [r7, #4]
 8012eee:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ef4:	221c      	movs	r2, #28
 8012ef6:	401a      	ands	r2, r3
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012efc:	2101      	movs	r1, #1
 8012efe:	4091      	lsls	r1, r2
 8012f00:	000a      	movs	r2, r1
 8012f02:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	683a      	ldr	r2, [r7, #0]
 8012f0a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	689b      	ldr	r3, [r3, #8]
 8012f10:	2b10      	cmp	r3, #16
 8012f12:	d108      	bne.n	8012f26 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	68ba      	ldr	r2, [r7, #8]
 8012f22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8012f24:	e007      	b.n	8012f36 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	68ba      	ldr	r2, [r7, #8]
 8012f2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	60da      	str	r2, [r3, #12]
}
 8012f36:	46c0      	nop			@ (mov r8, r8)
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	b004      	add	sp, #16
 8012f3c:	bd80      	pop	{r7, pc}
	...

08012f40 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b084      	sub	sp, #16
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8012f48:	f7ff f8d2 	bl	80120f0 <HAL_GetTick>
 8012f4c:	0003      	movs	r3, r0
 8012f4e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8012f50:	e00f      	b.n	8012f72 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	3301      	adds	r3, #1
 8012f56:	d00c      	beq.n	8012f72 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d007      	beq.n	8012f6e <FLASH_WaitForLastOperation+0x2e>
 8012f5e:	f7ff f8c7 	bl	80120f0 <HAL_GetTick>
 8012f62:	0002      	movs	r2, r0
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	1ad3      	subs	r3, r2, r3
 8012f68:	687a      	ldr	r2, [r7, #4]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d201      	bcs.n	8012f72 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8012f6e:	2303      	movs	r3, #3
 8012f70:	e052      	b.n	8013018 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8012f72:	4b2b      	ldr	r3, [pc, #172]	@ (8013020 <FLASH_WaitForLastOperation+0xe0>)
 8012f74:	699b      	ldr	r3, [r3, #24]
 8012f76:	2201      	movs	r2, #1
 8012f78:	4013      	ands	r3, r2
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d0e9      	beq.n	8012f52 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8012f7e:	4b28      	ldr	r3, [pc, #160]	@ (8013020 <FLASH_WaitForLastOperation+0xe0>)
 8012f80:	699b      	ldr	r3, [r3, #24]
 8012f82:	2202      	movs	r2, #2
 8012f84:	4013      	ands	r3, r2
 8012f86:	2b02      	cmp	r3, #2
 8012f88:	d102      	bne.n	8012f90 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8012f8a:	4b25      	ldr	r3, [pc, #148]	@ (8013020 <FLASH_WaitForLastOperation+0xe0>)
 8012f8c:	2202      	movs	r2, #2
 8012f8e:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8012f90:	4b23      	ldr	r3, [pc, #140]	@ (8013020 <FLASH_WaitForLastOperation+0xe0>)
 8012f92:	699a      	ldr	r2, [r3, #24]
 8012f94:	2380      	movs	r3, #128	@ 0x80
 8012f96:	005b      	lsls	r3, r3, #1
 8012f98:	401a      	ands	r2, r3
 8012f9a:	2380      	movs	r3, #128	@ 0x80
 8012f9c:	005b      	lsls	r3, r3, #1
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d035      	beq.n	801300e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8012fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8013020 <FLASH_WaitForLastOperation+0xe0>)
 8012fa4:	699a      	ldr	r2, [r3, #24]
 8012fa6:	2380      	movs	r3, #128	@ 0x80
 8012fa8:	009b      	lsls	r3, r3, #2
 8012faa:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8012fac:	2380      	movs	r3, #128	@ 0x80
 8012fae:	009b      	lsls	r3, r3, #2
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d02c      	beq.n	801300e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8012fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8013020 <FLASH_WaitForLastOperation+0xe0>)
 8012fb6:	699a      	ldr	r2, [r3, #24]
 8012fb8:	2380      	movs	r3, #128	@ 0x80
 8012fba:	00db      	lsls	r3, r3, #3
 8012fbc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8012fbe:	2380      	movs	r3, #128	@ 0x80
 8012fc0:	00db      	lsls	r3, r3, #3
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d023      	beq.n	801300e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8012fc6:	4b16      	ldr	r3, [pc, #88]	@ (8013020 <FLASH_WaitForLastOperation+0xe0>)
 8012fc8:	699a      	ldr	r2, [r3, #24]
 8012fca:	2380      	movs	r3, #128	@ 0x80
 8012fcc:	011b      	lsls	r3, r3, #4
 8012fce:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8012fd0:	2380      	movs	r3, #128	@ 0x80
 8012fd2:	011b      	lsls	r3, r3, #4
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d01a      	beq.n	801300e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8012fd8:	4b11      	ldr	r3, [pc, #68]	@ (8013020 <FLASH_WaitForLastOperation+0xe0>)
 8012fda:	699a      	ldr	r2, [r3, #24]
 8012fdc:	2380      	movs	r3, #128	@ 0x80
 8012fde:	019b      	lsls	r3, r3, #6
 8012fe0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8012fe2:	2380      	movs	r3, #128	@ 0x80
 8012fe4:	019b      	lsls	r3, r3, #6
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d011      	beq.n	801300e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8012fea:	4b0d      	ldr	r3, [pc, #52]	@ (8013020 <FLASH_WaitForLastOperation+0xe0>)
 8012fec:	699a      	ldr	r2, [r3, #24]
 8012fee:	2380      	movs	r3, #128	@ 0x80
 8012ff0:	029b      	lsls	r3, r3, #10
 8012ff2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8012ff4:	2380      	movs	r3, #128	@ 0x80
 8012ff6:	029b      	lsls	r3, r3, #10
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d008      	beq.n	801300e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8012ffc:	4b08      	ldr	r3, [pc, #32]	@ (8013020 <FLASH_WaitForLastOperation+0xe0>)
 8012ffe:	699a      	ldr	r2, [r3, #24]
 8013000:	2380      	movs	r3, #128	@ 0x80
 8013002:	025b      	lsls	r3, r3, #9
 8013004:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8013006:	2380      	movs	r3, #128	@ 0x80
 8013008:	025b      	lsls	r3, r3, #9
 801300a:	429a      	cmp	r2, r3
 801300c:	d103      	bne.n	8013016 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 801300e:	f000 f809 	bl	8013024 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8013012:	2301      	movs	r3, #1
 8013014:	e000      	b.n	8013018 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8013016:	2300      	movs	r3, #0
}
 8013018:	0018      	movs	r0, r3
 801301a:	46bd      	mov	sp, r7
 801301c:	b004      	add	sp, #16
 801301e:	bd80      	pop	{r7, pc}
 8013020:	40022000 	.word	0x40022000

08013024 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 801302a:	2300      	movs	r3, #0
 801302c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801302e:	4b49      	ldr	r3, [pc, #292]	@ (8013154 <FLASH_SetErrorCode+0x130>)
 8013030:	699a      	ldr	r2, [r3, #24]
 8013032:	2380      	movs	r3, #128	@ 0x80
 8013034:	005b      	lsls	r3, r3, #1
 8013036:	401a      	ands	r2, r3
 8013038:	2380      	movs	r3, #128	@ 0x80
 801303a:	005b      	lsls	r3, r3, #1
 801303c:	429a      	cmp	r2, r3
 801303e:	d10a      	bne.n	8013056 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8013040:	4b45      	ldr	r3, [pc, #276]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 8013042:	695b      	ldr	r3, [r3, #20]
 8013044:	2202      	movs	r2, #2
 8013046:	431a      	orrs	r2, r3
 8013048:	4b43      	ldr	r3, [pc, #268]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 801304a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2280      	movs	r2, #128	@ 0x80
 8013050:	0052      	lsls	r2, r2, #1
 8013052:	4313      	orrs	r3, r2
 8013054:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8013056:	4b3f      	ldr	r3, [pc, #252]	@ (8013154 <FLASH_SetErrorCode+0x130>)
 8013058:	699a      	ldr	r2, [r3, #24]
 801305a:	2380      	movs	r3, #128	@ 0x80
 801305c:	009b      	lsls	r3, r3, #2
 801305e:	401a      	ands	r2, r3
 8013060:	2380      	movs	r3, #128	@ 0x80
 8013062:	009b      	lsls	r3, r3, #2
 8013064:	429a      	cmp	r2, r3
 8013066:	d10a      	bne.n	801307e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8013068:	4b3b      	ldr	r3, [pc, #236]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 801306a:	695b      	ldr	r3, [r3, #20]
 801306c:	2201      	movs	r2, #1
 801306e:	431a      	orrs	r2, r3
 8013070:	4b39      	ldr	r3, [pc, #228]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 8013072:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2280      	movs	r2, #128	@ 0x80
 8013078:	0092      	lsls	r2, r2, #2
 801307a:	4313      	orrs	r3, r2
 801307c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 801307e:	4b35      	ldr	r3, [pc, #212]	@ (8013154 <FLASH_SetErrorCode+0x130>)
 8013080:	699a      	ldr	r2, [r3, #24]
 8013082:	2380      	movs	r3, #128	@ 0x80
 8013084:	00db      	lsls	r3, r3, #3
 8013086:	401a      	ands	r2, r3
 8013088:	2380      	movs	r3, #128	@ 0x80
 801308a:	00db      	lsls	r3, r3, #3
 801308c:	429a      	cmp	r2, r3
 801308e:	d10a      	bne.n	80130a6 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8013090:	4b31      	ldr	r3, [pc, #196]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 8013092:	695b      	ldr	r3, [r3, #20]
 8013094:	2208      	movs	r2, #8
 8013096:	431a      	orrs	r2, r3
 8013098:	4b2f      	ldr	r3, [pc, #188]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 801309a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2280      	movs	r2, #128	@ 0x80
 80130a0:	00d2      	lsls	r2, r2, #3
 80130a2:	4313      	orrs	r3, r2
 80130a4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80130a6:	4b2b      	ldr	r3, [pc, #172]	@ (8013154 <FLASH_SetErrorCode+0x130>)
 80130a8:	699a      	ldr	r2, [r3, #24]
 80130aa:	2380      	movs	r3, #128	@ 0x80
 80130ac:	011b      	lsls	r3, r3, #4
 80130ae:	401a      	ands	r2, r3
 80130b0:	2380      	movs	r3, #128	@ 0x80
 80130b2:	011b      	lsls	r3, r3, #4
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d10a      	bne.n	80130ce <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80130b8:	4b27      	ldr	r3, [pc, #156]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 80130ba:	695b      	ldr	r3, [r3, #20]
 80130bc:	2204      	movs	r2, #4
 80130be:	431a      	orrs	r2, r3
 80130c0:	4b25      	ldr	r3, [pc, #148]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 80130c2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2280      	movs	r2, #128	@ 0x80
 80130c8:	0112      	lsls	r2, r2, #4
 80130ca:	4313      	orrs	r3, r2
 80130cc:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80130ce:	4b21      	ldr	r3, [pc, #132]	@ (8013154 <FLASH_SetErrorCode+0x130>)
 80130d0:	699a      	ldr	r2, [r3, #24]
 80130d2:	2380      	movs	r3, #128	@ 0x80
 80130d4:	019b      	lsls	r3, r3, #6
 80130d6:	401a      	ands	r2, r3
 80130d8:	2380      	movs	r3, #128	@ 0x80
 80130da:	019b      	lsls	r3, r3, #6
 80130dc:	429a      	cmp	r2, r3
 80130de:	d10a      	bne.n	80130f6 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80130e0:	4b1d      	ldr	r3, [pc, #116]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 80130e2:	695b      	ldr	r3, [r3, #20]
 80130e4:	2210      	movs	r2, #16
 80130e6:	431a      	orrs	r2, r3
 80130e8:	4b1b      	ldr	r3, [pc, #108]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 80130ea:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2280      	movs	r2, #128	@ 0x80
 80130f0:	0192      	lsls	r2, r2, #6
 80130f2:	4313      	orrs	r3, r2
 80130f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80130f6:	4b17      	ldr	r3, [pc, #92]	@ (8013154 <FLASH_SetErrorCode+0x130>)
 80130f8:	699a      	ldr	r2, [r3, #24]
 80130fa:	2380      	movs	r3, #128	@ 0x80
 80130fc:	029b      	lsls	r3, r3, #10
 80130fe:	401a      	ands	r2, r3
 8013100:	2380      	movs	r3, #128	@ 0x80
 8013102:	029b      	lsls	r3, r3, #10
 8013104:	429a      	cmp	r2, r3
 8013106:	d109      	bne.n	801311c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8013108:	4b13      	ldr	r3, [pc, #76]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 801310a:	695b      	ldr	r3, [r3, #20]
 801310c:	2220      	movs	r2, #32
 801310e:	431a      	orrs	r2, r3
 8013110:	4b11      	ldr	r3, [pc, #68]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 8013112:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2220      	movs	r2, #32
 8013118:	4313      	orrs	r3, r2
 801311a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 801311c:	4b0d      	ldr	r3, [pc, #52]	@ (8013154 <FLASH_SetErrorCode+0x130>)
 801311e:	699a      	ldr	r2, [r3, #24]
 8013120:	2380      	movs	r3, #128	@ 0x80
 8013122:	025b      	lsls	r3, r3, #9
 8013124:	401a      	ands	r2, r3
 8013126:	2380      	movs	r3, #128	@ 0x80
 8013128:	025b      	lsls	r3, r3, #9
 801312a:	429a      	cmp	r2, r3
 801312c:	d10a      	bne.n	8013144 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 801312e:	4b0a      	ldr	r3, [pc, #40]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 8013130:	695b      	ldr	r3, [r3, #20]
 8013132:	2240      	movs	r2, #64	@ 0x40
 8013134:	431a      	orrs	r2, r3
 8013136:	4b08      	ldr	r3, [pc, #32]	@ (8013158 <FLASH_SetErrorCode+0x134>)
 8013138:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2280      	movs	r2, #128	@ 0x80
 801313e:	0252      	lsls	r2, r2, #9
 8013140:	4313      	orrs	r3, r2
 8013142:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8013144:	4b03      	ldr	r3, [pc, #12]	@ (8013154 <FLASH_SetErrorCode+0x130>)
 8013146:	687a      	ldr	r2, [r7, #4]
 8013148:	619a      	str	r2, [r3, #24]
}  
 801314a:	46c0      	nop			@ (mov r8, r8)
 801314c:	46bd      	mov	sp, r7
 801314e:	b002      	add	sp, #8
 8013150:	bd80      	pop	{r7, pc}
 8013152:	46c0      	nop			@ (mov r8, r8)
 8013154:	40022000 	.word	0x40022000
 8013158:	200021f0 	.word	0x200021f0

0801315c <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8013162:	4b12      	ldr	r3, [pc, #72]	@ (80131ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	2201      	movs	r2, #1
 8013168:	4013      	ands	r3, r2
 801316a:	d019      	beq.n	80131a0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801316c:	f3ef 8310 	mrs	r3, PRIMASK
 8013170:	607b      	str	r3, [r7, #4]
  return(result);
 8013172:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8013174:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8013176:	b672      	cpsid	i
}
 8013178:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 801317a:	4b0c      	ldr	r3, [pc, #48]	@ (80131ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 801317c:	4a0c      	ldr	r2, [pc, #48]	@ (80131b0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 801317e:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8013180:	4b0a      	ldr	r3, [pc, #40]	@ (80131ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8013182:	4a0c      	ldr	r2, [pc, #48]	@ (80131b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8013184:	60da      	str	r2, [r3, #12]
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801318a:	68bb      	ldr	r3, [r7, #8]
 801318c:	f383 8810 	msr	PRIMASK, r3
}
 8013190:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8013192:	4b06      	ldr	r3, [pc, #24]	@ (80131ac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	2201      	movs	r2, #1
 8013198:	4013      	ands	r3, r2
 801319a:	d001      	beq.n	80131a0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 801319c:	2301      	movs	r3, #1
 801319e:	e000      	b.n	80131a2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 80131a0:	2300      	movs	r3, #0
}
 80131a2:	0018      	movs	r0, r3
 80131a4:	46bd      	mov	sp, r7
 80131a6:	b004      	add	sp, #16
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	46c0      	nop			@ (mov r8, r8)
 80131ac:	40022000 	.word	0x40022000
 80131b0:	89abcdef 	.word	0x89abcdef
 80131b4:	02030405 	.word	0x02030405

080131b8 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80131bc:	4b04      	ldr	r3, [pc, #16]	@ (80131d0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80131be:	685a      	ldr	r2, [r3, #4]
 80131c0:	4b03      	ldr	r3, [pc, #12]	@ (80131d0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80131c2:	2101      	movs	r1, #1
 80131c4:	430a      	orrs	r2, r1
 80131c6:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 80131c8:	2300      	movs	r3, #0
}
 80131ca:	0018      	movs	r0, r3
 80131cc:	46bd      	mov	sp, r7
 80131ce:	bd80      	pop	{r7, pc}
 80131d0:	40022000 	.word	0x40022000

080131d4 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 80131d4:	b5b0      	push	{r4, r5, r7, lr}
 80131d6:	b084      	sub	sp, #16
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80131dc:	250f      	movs	r5, #15
 80131de:	197b      	adds	r3, r7, r5
 80131e0:	2200      	movs	r2, #0
 80131e2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80131e4:	197c      	adds	r4, r7, r5
 80131e6:	4b0f      	ldr	r3, [pc, #60]	@ (8013224 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80131e8:	0018      	movs	r0, r3
 80131ea:	f7ff fea9 	bl	8012f40 <FLASH_WaitForLastOperation>
 80131ee:	0003      	movs	r3, r0
 80131f0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80131f2:	0029      	movs	r1, r5
 80131f4:	187b      	adds	r3, r7, r1
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d10c      	bne.n	8013216 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80131fc:	4b0a      	ldr	r3, [pc, #40]	@ (8013228 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 80131fe:	2200      	movs	r2, #0
 8013200:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2200      	movs	r2, #0
 8013206:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013208:	187c      	adds	r4, r7, r1
 801320a:	4b06      	ldr	r3, [pc, #24]	@ (8013224 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 801320c:	0018      	movs	r0, r3
 801320e:	f7ff fe97 	bl	8012f40 <FLASH_WaitForLastOperation>
 8013212:	0003      	movs	r3, r0
 8013214:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8013216:	230f      	movs	r3, #15
 8013218:	18fb      	adds	r3, r7, r3
 801321a:	781b      	ldrb	r3, [r3, #0]
}  
 801321c:	0018      	movs	r0, r3
 801321e:	46bd      	mov	sp, r7
 8013220:	b004      	add	sp, #16
 8013222:	bdb0      	pop	{r4, r5, r7, pc}
 8013224:	0000c350 	.word	0x0000c350
 8013228:	200021f0 	.word	0x200021f0

0801322c <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 801322c:	b5b0      	push	{r4, r5, r7, lr}
 801322e:	b086      	sub	sp, #24
 8013230:	af00      	add	r7, sp, #0
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013238:	2317      	movs	r3, #23
 801323a:	18fb      	adds	r3, r7, r3
 801323c:	2201      	movs	r2, #1
 801323e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013240:	4b24      	ldr	r3, [pc, #144]	@ (80132d4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8013242:	7c1b      	ldrb	r3, [r3, #16]
 8013244:	2b01      	cmp	r3, #1
 8013246:	d101      	bne.n	801324c <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8013248:	2302      	movs	r3, #2
 801324a:	e03e      	b.n	80132ca <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 801324c:	4b21      	ldr	r3, [pc, #132]	@ (80132d4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801324e:	2201      	movs	r2, #1
 8013250:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8013252:	2517      	movs	r5, #23
 8013254:	197c      	adds	r4, r7, r5
 8013256:	4b20      	ldr	r3, [pc, #128]	@ (80132d8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8013258:	0018      	movs	r0, r3
 801325a:	f7ff fe71 	bl	8012f40 <FLASH_WaitForLastOperation>
 801325e:	0003      	movs	r3, r0
 8013260:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8013262:	197b      	adds	r3, r7, r5
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d129      	bne.n	80132be <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801326a:	4b1a      	ldr	r3, [pc, #104]	@ (80132d4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801326c:	2200      	movs	r2, #0
 801326e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2b02      	cmp	r3, #2
 8013274:	d103      	bne.n	801327e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	687a      	ldr	r2, [r7, #4]
 801327a:	601a      	str	r2, [r3, #0]
 801327c:	e013      	b.n	80132a6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2b01      	cmp	r3, #1
 8013282:	d104      	bne.n	801328e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	687a      	ldr	r2, [r7, #4]
 8013288:	b292      	uxth	r2, r2
 801328a:	801a      	strh	r2, [r3, #0]
 801328c:	e00b      	b.n	80132a6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d104      	bne.n	801329e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	687a      	ldr	r2, [r7, #4]
 8013298:	b2d2      	uxtb	r2, r2
 801329a:	701a      	strb	r2, [r3, #0]
 801329c:	e003      	b.n	80132a6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 801329e:	2317      	movs	r3, #23
 80132a0:	18fb      	adds	r3, r7, r3
 80132a2:	2201      	movs	r2, #1
 80132a4:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80132a6:	2217      	movs	r2, #23
 80132a8:	18bb      	adds	r3, r7, r2
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d106      	bne.n	80132be <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80132b0:	18bc      	adds	r4, r7, r2
 80132b2:	4b09      	ldr	r3, [pc, #36]	@ (80132d8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80132b4:	0018      	movs	r0, r3
 80132b6:	f7ff fe43 	bl	8012f40 <FLASH_WaitForLastOperation>
 80132ba:	0003      	movs	r3, r0
 80132bc:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80132be:	4b05      	ldr	r3, [pc, #20]	@ (80132d4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80132c0:	2200      	movs	r2, #0
 80132c2:	741a      	strb	r2, [r3, #16]

  return status;
 80132c4:	2317      	movs	r3, #23
 80132c6:	18fb      	adds	r3, r7, r3
 80132c8:	781b      	ldrb	r3, [r3, #0]
}
 80132ca:	0018      	movs	r0, r3
 80132cc:	46bd      	mov	sp, r7
 80132ce:	b006      	add	sp, #24
 80132d0:	bdb0      	pop	{r4, r5, r7, pc}
 80132d2:	46c0      	nop			@ (mov r8, r8)
 80132d4:	200021f0 	.word	0x200021f0
 80132d8:	0000c350 	.word	0x0000c350

080132dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b086      	sub	sp, #24
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80132e6:	2300      	movs	r3, #0
 80132e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80132ea:	2300      	movs	r3, #0
 80132ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80132ee:	2300      	movs	r3, #0
 80132f0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80132f2:	e155      	b.n	80135a0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	2101      	movs	r1, #1
 80132fa:	697a      	ldr	r2, [r7, #20]
 80132fc:	4091      	lsls	r1, r2
 80132fe:	000a      	movs	r2, r1
 8013300:	4013      	ands	r3, r2
 8013302:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d100      	bne.n	801330c <HAL_GPIO_Init+0x30>
 801330a:	e146      	b.n	801359a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	685b      	ldr	r3, [r3, #4]
 8013310:	2203      	movs	r2, #3
 8013312:	4013      	ands	r3, r2
 8013314:	2b01      	cmp	r3, #1
 8013316:	d005      	beq.n	8013324 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	685b      	ldr	r3, [r3, #4]
 801331c:	2203      	movs	r2, #3
 801331e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8013320:	2b02      	cmp	r3, #2
 8013322:	d130      	bne.n	8013386 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	689b      	ldr	r3, [r3, #8]
 8013328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	005b      	lsls	r3, r3, #1
 801332e:	2203      	movs	r2, #3
 8013330:	409a      	lsls	r2, r3
 8013332:	0013      	movs	r3, r2
 8013334:	43da      	mvns	r2, r3
 8013336:	693b      	ldr	r3, [r7, #16]
 8013338:	4013      	ands	r3, r2
 801333a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	68da      	ldr	r2, [r3, #12]
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	005b      	lsls	r3, r3, #1
 8013344:	409a      	lsls	r2, r3
 8013346:	0013      	movs	r3, r2
 8013348:	693a      	ldr	r2, [r7, #16]
 801334a:	4313      	orrs	r3, r2
 801334c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	693a      	ldr	r2, [r7, #16]
 8013352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801335a:	2201      	movs	r2, #1
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	409a      	lsls	r2, r3
 8013360:	0013      	movs	r3, r2
 8013362:	43da      	mvns	r2, r3
 8013364:	693b      	ldr	r3, [r7, #16]
 8013366:	4013      	ands	r3, r2
 8013368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	685b      	ldr	r3, [r3, #4]
 801336e:	091b      	lsrs	r3, r3, #4
 8013370:	2201      	movs	r2, #1
 8013372:	401a      	ands	r2, r3
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	409a      	lsls	r2, r3
 8013378:	0013      	movs	r3, r2
 801337a:	693a      	ldr	r2, [r7, #16]
 801337c:	4313      	orrs	r3, r2
 801337e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	693a      	ldr	r2, [r7, #16]
 8013384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	685b      	ldr	r3, [r3, #4]
 801338a:	2203      	movs	r2, #3
 801338c:	4013      	ands	r3, r2
 801338e:	2b03      	cmp	r3, #3
 8013390:	d017      	beq.n	80133c2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	68db      	ldr	r3, [r3, #12]
 8013396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8013398:	697b      	ldr	r3, [r7, #20]
 801339a:	005b      	lsls	r3, r3, #1
 801339c:	2203      	movs	r2, #3
 801339e:	409a      	lsls	r2, r3
 80133a0:	0013      	movs	r3, r2
 80133a2:	43da      	mvns	r2, r3
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	4013      	ands	r3, r2
 80133a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	689a      	ldr	r2, [r3, #8]
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	005b      	lsls	r3, r3, #1
 80133b2:	409a      	lsls	r2, r3
 80133b4:	0013      	movs	r3, r2
 80133b6:	693a      	ldr	r2, [r7, #16]
 80133b8:	4313      	orrs	r3, r2
 80133ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	693a      	ldr	r2, [r7, #16]
 80133c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	685b      	ldr	r3, [r3, #4]
 80133c6:	2203      	movs	r2, #3
 80133c8:	4013      	ands	r3, r2
 80133ca:	2b02      	cmp	r3, #2
 80133cc:	d123      	bne.n	8013416 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	08da      	lsrs	r2, r3, #3
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	3208      	adds	r2, #8
 80133d6:	0092      	lsls	r2, r2, #2
 80133d8:	58d3      	ldr	r3, [r2, r3]
 80133da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	2207      	movs	r2, #7
 80133e0:	4013      	ands	r3, r2
 80133e2:	009b      	lsls	r3, r3, #2
 80133e4:	220f      	movs	r2, #15
 80133e6:	409a      	lsls	r2, r3
 80133e8:	0013      	movs	r3, r2
 80133ea:	43da      	mvns	r2, r3
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	4013      	ands	r3, r2
 80133f0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	691a      	ldr	r2, [r3, #16]
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	2107      	movs	r1, #7
 80133fa:	400b      	ands	r3, r1
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	409a      	lsls	r2, r3
 8013400:	0013      	movs	r3, r2
 8013402:	693a      	ldr	r2, [r7, #16]
 8013404:	4313      	orrs	r3, r2
 8013406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	08da      	lsrs	r2, r3, #3
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	3208      	adds	r2, #8
 8013410:	0092      	lsls	r2, r2, #2
 8013412:	6939      	ldr	r1, [r7, #16]
 8013414:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801341c:	697b      	ldr	r3, [r7, #20]
 801341e:	005b      	lsls	r3, r3, #1
 8013420:	2203      	movs	r2, #3
 8013422:	409a      	lsls	r2, r3
 8013424:	0013      	movs	r3, r2
 8013426:	43da      	mvns	r2, r3
 8013428:	693b      	ldr	r3, [r7, #16]
 801342a:	4013      	ands	r3, r2
 801342c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	685b      	ldr	r3, [r3, #4]
 8013432:	2203      	movs	r2, #3
 8013434:	401a      	ands	r2, r3
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	005b      	lsls	r3, r3, #1
 801343a:	409a      	lsls	r2, r3
 801343c:	0013      	movs	r3, r2
 801343e:	693a      	ldr	r2, [r7, #16]
 8013440:	4313      	orrs	r3, r2
 8013442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	693a      	ldr	r2, [r7, #16]
 8013448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	685a      	ldr	r2, [r3, #4]
 801344e:	23c0      	movs	r3, #192	@ 0xc0
 8013450:	029b      	lsls	r3, r3, #10
 8013452:	4013      	ands	r3, r2
 8013454:	d100      	bne.n	8013458 <HAL_GPIO_Init+0x17c>
 8013456:	e0a0      	b.n	801359a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013458:	4b57      	ldr	r3, [pc, #348]	@ (80135b8 <HAL_GPIO_Init+0x2dc>)
 801345a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801345c:	4b56      	ldr	r3, [pc, #344]	@ (80135b8 <HAL_GPIO_Init+0x2dc>)
 801345e:	2101      	movs	r1, #1
 8013460:	430a      	orrs	r2, r1
 8013462:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8013464:	4a55      	ldr	r2, [pc, #340]	@ (80135bc <HAL_GPIO_Init+0x2e0>)
 8013466:	697b      	ldr	r3, [r7, #20]
 8013468:	089b      	lsrs	r3, r3, #2
 801346a:	3302      	adds	r3, #2
 801346c:	009b      	lsls	r3, r3, #2
 801346e:	589b      	ldr	r3, [r3, r2]
 8013470:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	2203      	movs	r2, #3
 8013476:	4013      	ands	r3, r2
 8013478:	009b      	lsls	r3, r3, #2
 801347a:	220f      	movs	r2, #15
 801347c:	409a      	lsls	r2, r3
 801347e:	0013      	movs	r3, r2
 8013480:	43da      	mvns	r2, r3
 8013482:	693b      	ldr	r3, [r7, #16]
 8013484:	4013      	ands	r3, r2
 8013486:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8013488:	687a      	ldr	r2, [r7, #4]
 801348a:	23a0      	movs	r3, #160	@ 0xa0
 801348c:	05db      	lsls	r3, r3, #23
 801348e:	429a      	cmp	r2, r3
 8013490:	d01f      	beq.n	80134d2 <HAL_GPIO_Init+0x1f6>
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	4a4a      	ldr	r2, [pc, #296]	@ (80135c0 <HAL_GPIO_Init+0x2e4>)
 8013496:	4293      	cmp	r3, r2
 8013498:	d019      	beq.n	80134ce <HAL_GPIO_Init+0x1f2>
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	4a49      	ldr	r2, [pc, #292]	@ (80135c4 <HAL_GPIO_Init+0x2e8>)
 801349e:	4293      	cmp	r3, r2
 80134a0:	d013      	beq.n	80134ca <HAL_GPIO_Init+0x1ee>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	4a48      	ldr	r2, [pc, #288]	@ (80135c8 <HAL_GPIO_Init+0x2ec>)
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d00d      	beq.n	80134c6 <HAL_GPIO_Init+0x1ea>
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	4a47      	ldr	r2, [pc, #284]	@ (80135cc <HAL_GPIO_Init+0x2f0>)
 80134ae:	4293      	cmp	r3, r2
 80134b0:	d007      	beq.n	80134c2 <HAL_GPIO_Init+0x1e6>
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	4a46      	ldr	r2, [pc, #280]	@ (80135d0 <HAL_GPIO_Init+0x2f4>)
 80134b6:	4293      	cmp	r3, r2
 80134b8:	d101      	bne.n	80134be <HAL_GPIO_Init+0x1e2>
 80134ba:	2305      	movs	r3, #5
 80134bc:	e00a      	b.n	80134d4 <HAL_GPIO_Init+0x1f8>
 80134be:	2306      	movs	r3, #6
 80134c0:	e008      	b.n	80134d4 <HAL_GPIO_Init+0x1f8>
 80134c2:	2304      	movs	r3, #4
 80134c4:	e006      	b.n	80134d4 <HAL_GPIO_Init+0x1f8>
 80134c6:	2303      	movs	r3, #3
 80134c8:	e004      	b.n	80134d4 <HAL_GPIO_Init+0x1f8>
 80134ca:	2302      	movs	r3, #2
 80134cc:	e002      	b.n	80134d4 <HAL_GPIO_Init+0x1f8>
 80134ce:	2301      	movs	r3, #1
 80134d0:	e000      	b.n	80134d4 <HAL_GPIO_Init+0x1f8>
 80134d2:	2300      	movs	r3, #0
 80134d4:	697a      	ldr	r2, [r7, #20]
 80134d6:	2103      	movs	r1, #3
 80134d8:	400a      	ands	r2, r1
 80134da:	0092      	lsls	r2, r2, #2
 80134dc:	4093      	lsls	r3, r2
 80134de:	693a      	ldr	r2, [r7, #16]
 80134e0:	4313      	orrs	r3, r2
 80134e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80134e4:	4935      	ldr	r1, [pc, #212]	@ (80135bc <HAL_GPIO_Init+0x2e0>)
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	089b      	lsrs	r3, r3, #2
 80134ea:	3302      	adds	r3, #2
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	693a      	ldr	r2, [r7, #16]
 80134f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80134f2:	4b38      	ldr	r3, [pc, #224]	@ (80135d4 <HAL_GPIO_Init+0x2f8>)
 80134f4:	689b      	ldr	r3, [r3, #8]
 80134f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	43da      	mvns	r2, r3
 80134fc:	693b      	ldr	r3, [r7, #16]
 80134fe:	4013      	ands	r3, r2
 8013500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	685a      	ldr	r2, [r3, #4]
 8013506:	2380      	movs	r3, #128	@ 0x80
 8013508:	035b      	lsls	r3, r3, #13
 801350a:	4013      	ands	r3, r2
 801350c:	d003      	beq.n	8013516 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 801350e:	693a      	ldr	r2, [r7, #16]
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	4313      	orrs	r3, r2
 8013514:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8013516:	4b2f      	ldr	r3, [pc, #188]	@ (80135d4 <HAL_GPIO_Init+0x2f8>)
 8013518:	693a      	ldr	r2, [r7, #16]
 801351a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 801351c:	4b2d      	ldr	r3, [pc, #180]	@ (80135d4 <HAL_GPIO_Init+0x2f8>)
 801351e:	68db      	ldr	r3, [r3, #12]
 8013520:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	43da      	mvns	r2, r3
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	4013      	ands	r3, r2
 801352a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	685a      	ldr	r2, [r3, #4]
 8013530:	2380      	movs	r3, #128	@ 0x80
 8013532:	039b      	lsls	r3, r3, #14
 8013534:	4013      	ands	r3, r2
 8013536:	d003      	beq.n	8013540 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8013538:	693a      	ldr	r2, [r7, #16]
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	4313      	orrs	r3, r2
 801353e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8013540:	4b24      	ldr	r3, [pc, #144]	@ (80135d4 <HAL_GPIO_Init+0x2f8>)
 8013542:	693a      	ldr	r2, [r7, #16]
 8013544:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8013546:	4b23      	ldr	r3, [pc, #140]	@ (80135d4 <HAL_GPIO_Init+0x2f8>)
 8013548:	685b      	ldr	r3, [r3, #4]
 801354a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	43da      	mvns	r2, r3
 8013550:	693b      	ldr	r3, [r7, #16]
 8013552:	4013      	ands	r3, r2
 8013554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	685a      	ldr	r2, [r3, #4]
 801355a:	2380      	movs	r3, #128	@ 0x80
 801355c:	029b      	lsls	r3, r3, #10
 801355e:	4013      	ands	r3, r2
 8013560:	d003      	beq.n	801356a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8013562:	693a      	ldr	r2, [r7, #16]
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	4313      	orrs	r3, r2
 8013568:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801356a:	4b1a      	ldr	r3, [pc, #104]	@ (80135d4 <HAL_GPIO_Init+0x2f8>)
 801356c:	693a      	ldr	r2, [r7, #16]
 801356e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013570:	4b18      	ldr	r3, [pc, #96]	@ (80135d4 <HAL_GPIO_Init+0x2f8>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	43da      	mvns	r2, r3
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	4013      	ands	r3, r2
 801357e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	685a      	ldr	r2, [r3, #4]
 8013584:	2380      	movs	r3, #128	@ 0x80
 8013586:	025b      	lsls	r3, r3, #9
 8013588:	4013      	ands	r3, r2
 801358a:	d003      	beq.n	8013594 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 801358c:	693a      	ldr	r2, [r7, #16]
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	4313      	orrs	r3, r2
 8013592:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8013594:	4b0f      	ldr	r3, [pc, #60]	@ (80135d4 <HAL_GPIO_Init+0x2f8>)
 8013596:	693a      	ldr	r2, [r7, #16]
 8013598:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	3301      	adds	r3, #1
 801359e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	681a      	ldr	r2, [r3, #0]
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	40da      	lsrs	r2, r3
 80135a8:	1e13      	subs	r3, r2, #0
 80135aa:	d000      	beq.n	80135ae <HAL_GPIO_Init+0x2d2>
 80135ac:	e6a2      	b.n	80132f4 <HAL_GPIO_Init+0x18>
  }
}
 80135ae:	46c0      	nop			@ (mov r8, r8)
 80135b0:	46c0      	nop			@ (mov r8, r8)
 80135b2:	46bd      	mov	sp, r7
 80135b4:	b006      	add	sp, #24
 80135b6:	bd80      	pop	{r7, pc}
 80135b8:	40021000 	.word	0x40021000
 80135bc:	40010000 	.word	0x40010000
 80135c0:	50000400 	.word	0x50000400
 80135c4:	50000800 	.word	0x50000800
 80135c8:	50000c00 	.word	0x50000c00
 80135cc:	50001000 	.word	0x50001000
 80135d0:	50001c00 	.word	0x50001c00
 80135d4:	40010400 	.word	0x40010400

080135d8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]
 80135e0:	000a      	movs	r2, r1
 80135e2:	1cbb      	adds	r3, r7, #2
 80135e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	691b      	ldr	r3, [r3, #16]
 80135ea:	1cba      	adds	r2, r7, #2
 80135ec:	8812      	ldrh	r2, [r2, #0]
 80135ee:	4013      	ands	r3, r2
 80135f0:	d004      	beq.n	80135fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80135f2:	230f      	movs	r3, #15
 80135f4:	18fb      	adds	r3, r7, r3
 80135f6:	2201      	movs	r2, #1
 80135f8:	701a      	strb	r2, [r3, #0]
 80135fa:	e003      	b.n	8013604 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80135fc:	230f      	movs	r3, #15
 80135fe:	18fb      	adds	r3, r7, r3
 8013600:	2200      	movs	r2, #0
 8013602:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8013604:	230f      	movs	r3, #15
 8013606:	18fb      	adds	r3, r7, r3
 8013608:	781b      	ldrb	r3, [r3, #0]
}
 801360a:	0018      	movs	r0, r3
 801360c:	46bd      	mov	sp, r7
 801360e:	b004      	add	sp, #16
 8013610:	bd80      	pop	{r7, pc}

08013612 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013612:	b580      	push	{r7, lr}
 8013614:	b082      	sub	sp, #8
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
 801361a:	0008      	movs	r0, r1
 801361c:	0011      	movs	r1, r2
 801361e:	1cbb      	adds	r3, r7, #2
 8013620:	1c02      	adds	r2, r0, #0
 8013622:	801a      	strh	r2, [r3, #0]
 8013624:	1c7b      	adds	r3, r7, #1
 8013626:	1c0a      	adds	r2, r1, #0
 8013628:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801362a:	1c7b      	adds	r3, r7, #1
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d004      	beq.n	801363c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013632:	1cbb      	adds	r3, r7, #2
 8013634:	881a      	ldrh	r2, [r3, #0]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801363a:	e003      	b.n	8013644 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 801363c:	1cbb      	adds	r3, r7, #2
 801363e:	881a      	ldrh	r2, [r3, #0]
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8013644:	46c0      	nop			@ (mov r8, r8)
 8013646:	46bd      	mov	sp, r7
 8013648:	b002      	add	sp, #8
 801364a:	bd80      	pop	{r7, pc}

0801364c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b082      	sub	sp, #8
 8013650:	af00      	add	r7, sp, #0
 8013652:	0002      	movs	r2, r0
 8013654:	1dbb      	adds	r3, r7, #6
 8013656:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8013658:	4b09      	ldr	r3, [pc, #36]	@ (8013680 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801365a:	695b      	ldr	r3, [r3, #20]
 801365c:	1dba      	adds	r2, r7, #6
 801365e:	8812      	ldrh	r2, [r2, #0]
 8013660:	4013      	ands	r3, r2
 8013662:	d008      	beq.n	8013676 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8013664:	4b06      	ldr	r3, [pc, #24]	@ (8013680 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8013666:	1dba      	adds	r2, r7, #6
 8013668:	8812      	ldrh	r2, [r2, #0]
 801366a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801366c:	1dbb      	adds	r3, r7, #6
 801366e:	881b      	ldrh	r3, [r3, #0]
 8013670:	0018      	movs	r0, r3
 8013672:	f7f7 fdfd 	bl	800b270 <HAL_GPIO_EXTI_Callback>
  }
}
 8013676:	46c0      	nop			@ (mov r8, r8)
 8013678:	46bd      	mov	sp, r7
 801367a:	b002      	add	sp, #8
 801367c:	bd80      	pop	{r7, pc}
 801367e:	46c0      	nop			@ (mov r8, r8)
 8013680:	40010400 	.word	0x40010400

08013684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b082      	sub	sp, #8
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d101      	bne.n	8013696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8013692:	2301      	movs	r3, #1
 8013694:	e082      	b.n	801379c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	2241      	movs	r2, #65	@ 0x41
 801369a:	5c9b      	ldrb	r3, [r3, r2]
 801369c:	b2db      	uxtb	r3, r3
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d107      	bne.n	80136b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	2240      	movs	r2, #64	@ 0x40
 80136a6:	2100      	movs	r1, #0
 80136a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	0018      	movs	r0, r3
 80136ae:	f7f7 f8d5 	bl	800a85c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	2241      	movs	r2, #65	@ 0x41
 80136b6:	2124      	movs	r1, #36	@ 0x24
 80136b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	681a      	ldr	r2, [r3, #0]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	2101      	movs	r1, #1
 80136c6:	438a      	bics	r2, r1
 80136c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	685a      	ldr	r2, [r3, #4]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	4934      	ldr	r1, [pc, #208]	@ (80137a4 <HAL_I2C_Init+0x120>)
 80136d4:	400a      	ands	r2, r1
 80136d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	689a      	ldr	r2, [r3, #8]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	4931      	ldr	r1, [pc, #196]	@ (80137a8 <HAL_I2C_Init+0x124>)
 80136e4:	400a      	ands	r2, r1
 80136e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	68db      	ldr	r3, [r3, #12]
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d108      	bne.n	8013702 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	689a      	ldr	r2, [r3, #8]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2180      	movs	r1, #128	@ 0x80
 80136fa:	0209      	lsls	r1, r1, #8
 80136fc:	430a      	orrs	r2, r1
 80136fe:	609a      	str	r2, [r3, #8]
 8013700:	e007      	b.n	8013712 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	689a      	ldr	r2, [r3, #8]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2184      	movs	r1, #132	@ 0x84
 801370c:	0209      	lsls	r1, r1, #8
 801370e:	430a      	orrs	r2, r1
 8013710:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	68db      	ldr	r3, [r3, #12]
 8013716:	2b02      	cmp	r3, #2
 8013718:	d104      	bne.n	8013724 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	2280      	movs	r2, #128	@ 0x80
 8013720:	0112      	lsls	r2, r2, #4
 8013722:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	685a      	ldr	r2, [r3, #4]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	491f      	ldr	r1, [pc, #124]	@ (80137ac <HAL_I2C_Init+0x128>)
 8013730:	430a      	orrs	r2, r1
 8013732:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	68da      	ldr	r2, [r3, #12]
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	491a      	ldr	r1, [pc, #104]	@ (80137a8 <HAL_I2C_Init+0x124>)
 8013740:	400a      	ands	r2, r1
 8013742:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	691a      	ldr	r2, [r3, #16]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	695b      	ldr	r3, [r3, #20]
 801374c:	431a      	orrs	r2, r3
 801374e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	699b      	ldr	r3, [r3, #24]
 8013754:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	430a      	orrs	r2, r1
 801375c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	69d9      	ldr	r1, [r3, #28]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6a1a      	ldr	r2, [r3, #32]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	430a      	orrs	r2, r1
 801376c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	681a      	ldr	r2, [r3, #0]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	2101      	movs	r1, #1
 801377a:	430a      	orrs	r2, r1
 801377c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2200      	movs	r2, #0
 8013782:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2241      	movs	r2, #65	@ 0x41
 8013788:	2120      	movs	r1, #32
 801378a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2200      	movs	r2, #0
 8013790:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2242      	movs	r2, #66	@ 0x42
 8013796:	2100      	movs	r1, #0
 8013798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801379a:	2300      	movs	r3, #0
}
 801379c:	0018      	movs	r0, r3
 801379e:	46bd      	mov	sp, r7
 80137a0:	b002      	add	sp, #8
 80137a2:	bd80      	pop	{r7, pc}
 80137a4:	f0ffffff 	.word	0xf0ffffff
 80137a8:	ffff7fff 	.word	0xffff7fff
 80137ac:	02008000 	.word	0x02008000

080137b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80137b0:	b590      	push	{r4, r7, lr}
 80137b2:	b089      	sub	sp, #36	@ 0x24
 80137b4:	af02      	add	r7, sp, #8
 80137b6:	60f8      	str	r0, [r7, #12]
 80137b8:	0008      	movs	r0, r1
 80137ba:	607a      	str	r2, [r7, #4]
 80137bc:	0019      	movs	r1, r3
 80137be:	230a      	movs	r3, #10
 80137c0:	18fb      	adds	r3, r7, r3
 80137c2:	1c02      	adds	r2, r0, #0
 80137c4:	801a      	strh	r2, [r3, #0]
 80137c6:	2308      	movs	r3, #8
 80137c8:	18fb      	adds	r3, r7, r3
 80137ca:	1c0a      	adds	r2, r1, #0
 80137cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2241      	movs	r2, #65	@ 0x41
 80137d2:	5c9b      	ldrb	r3, [r3, r2]
 80137d4:	b2db      	uxtb	r3, r3
 80137d6:	2b20      	cmp	r3, #32
 80137d8:	d000      	beq.n	80137dc <HAL_I2C_Master_Transmit+0x2c>
 80137da:	e0e7      	b.n	80139ac <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	2240      	movs	r2, #64	@ 0x40
 80137e0:	5c9b      	ldrb	r3, [r3, r2]
 80137e2:	2b01      	cmp	r3, #1
 80137e4:	d101      	bne.n	80137ea <HAL_I2C_Master_Transmit+0x3a>
 80137e6:	2302      	movs	r3, #2
 80137e8:	e0e1      	b.n	80139ae <HAL_I2C_Master_Transmit+0x1fe>
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	2240      	movs	r2, #64	@ 0x40
 80137ee:	2101      	movs	r1, #1
 80137f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80137f2:	f7fe fc7d 	bl	80120f0 <HAL_GetTick>
 80137f6:	0003      	movs	r3, r0
 80137f8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80137fa:	2380      	movs	r3, #128	@ 0x80
 80137fc:	0219      	lsls	r1, r3, #8
 80137fe:	68f8      	ldr	r0, [r7, #12]
 8013800:	697b      	ldr	r3, [r7, #20]
 8013802:	9300      	str	r3, [sp, #0]
 8013804:	2319      	movs	r3, #25
 8013806:	2201      	movs	r2, #1
 8013808:	f002 fa30 	bl	8015c6c <I2C_WaitOnFlagUntilTimeout>
 801380c:	1e03      	subs	r3, r0, #0
 801380e:	d001      	beq.n	8013814 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8013810:	2301      	movs	r3, #1
 8013812:	e0cc      	b.n	80139ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	2241      	movs	r2, #65	@ 0x41
 8013818:	2121      	movs	r1, #33	@ 0x21
 801381a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	2242      	movs	r2, #66	@ 0x42
 8013820:	2110      	movs	r1, #16
 8013822:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2200      	movs	r2, #0
 8013828:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	687a      	ldr	r2, [r7, #4]
 801382e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	2208      	movs	r2, #8
 8013834:	18ba      	adds	r2, r7, r2
 8013836:	8812      	ldrh	r2, [r2, #0]
 8013838:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2200      	movs	r2, #0
 801383e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013844:	b29b      	uxth	r3, r3
 8013846:	2bff      	cmp	r3, #255	@ 0xff
 8013848:	d911      	bls.n	801386e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	22ff      	movs	r2, #255	@ 0xff
 801384e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013854:	b2da      	uxtb	r2, r3
 8013856:	2380      	movs	r3, #128	@ 0x80
 8013858:	045c      	lsls	r4, r3, #17
 801385a:	230a      	movs	r3, #10
 801385c:	18fb      	adds	r3, r7, r3
 801385e:	8819      	ldrh	r1, [r3, #0]
 8013860:	68f8      	ldr	r0, [r7, #12]
 8013862:	4b55      	ldr	r3, [pc, #340]	@ (80139b8 <HAL_I2C_Master_Transmit+0x208>)
 8013864:	9300      	str	r3, [sp, #0]
 8013866:	0023      	movs	r3, r4
 8013868:	f002 fc52 	bl	8016110 <I2C_TransferConfig>
 801386c:	e075      	b.n	801395a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013872:	b29a      	uxth	r2, r3
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801387c:	b2da      	uxtb	r2, r3
 801387e:	2380      	movs	r3, #128	@ 0x80
 8013880:	049c      	lsls	r4, r3, #18
 8013882:	230a      	movs	r3, #10
 8013884:	18fb      	adds	r3, r7, r3
 8013886:	8819      	ldrh	r1, [r3, #0]
 8013888:	68f8      	ldr	r0, [r7, #12]
 801388a:	4b4b      	ldr	r3, [pc, #300]	@ (80139b8 <HAL_I2C_Master_Transmit+0x208>)
 801388c:	9300      	str	r3, [sp, #0]
 801388e:	0023      	movs	r3, r4
 8013890:	f002 fc3e 	bl	8016110 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8013894:	e061      	b.n	801395a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013896:	697a      	ldr	r2, [r7, #20]
 8013898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	0018      	movs	r0, r3
 801389e:	f002 fa33 	bl	8015d08 <I2C_WaitOnTXISFlagUntilTimeout>
 80138a2:	1e03      	subs	r3, r0, #0
 80138a4:	d001      	beq.n	80138aa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80138a6:	2301      	movs	r3, #1
 80138a8:	e081      	b.n	80139ae <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138ae:	781a      	ldrb	r2, [r3, #0]
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138ba:	1c5a      	adds	r2, r3, #1
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80138c4:	b29b      	uxth	r3, r3
 80138c6:	3b01      	subs	r3, #1
 80138c8:	b29a      	uxth	r2, r3
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80138d2:	3b01      	subs	r3, #1
 80138d4:	b29a      	uxth	r2, r3
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80138de:	b29b      	uxth	r3, r3
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d03a      	beq.n	801395a <HAL_I2C_Master_Transmit+0x1aa>
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d136      	bne.n	801395a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80138ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138ee:	68f8      	ldr	r0, [r7, #12]
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	0013      	movs	r3, r2
 80138f6:	2200      	movs	r2, #0
 80138f8:	2180      	movs	r1, #128	@ 0x80
 80138fa:	f002 f9b7 	bl	8015c6c <I2C_WaitOnFlagUntilTimeout>
 80138fe:	1e03      	subs	r3, r0, #0
 8013900:	d001      	beq.n	8013906 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8013902:	2301      	movs	r3, #1
 8013904:	e053      	b.n	80139ae <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801390a:	b29b      	uxth	r3, r3
 801390c:	2bff      	cmp	r3, #255	@ 0xff
 801390e:	d911      	bls.n	8013934 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	22ff      	movs	r2, #255	@ 0xff
 8013914:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801391a:	b2da      	uxtb	r2, r3
 801391c:	2380      	movs	r3, #128	@ 0x80
 801391e:	045c      	lsls	r4, r3, #17
 8013920:	230a      	movs	r3, #10
 8013922:	18fb      	adds	r3, r7, r3
 8013924:	8819      	ldrh	r1, [r3, #0]
 8013926:	68f8      	ldr	r0, [r7, #12]
 8013928:	2300      	movs	r3, #0
 801392a:	9300      	str	r3, [sp, #0]
 801392c:	0023      	movs	r3, r4
 801392e:	f002 fbef 	bl	8016110 <I2C_TransferConfig>
 8013932:	e012      	b.n	801395a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013938:	b29a      	uxth	r2, r3
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013942:	b2da      	uxtb	r2, r3
 8013944:	2380      	movs	r3, #128	@ 0x80
 8013946:	049c      	lsls	r4, r3, #18
 8013948:	230a      	movs	r3, #10
 801394a:	18fb      	adds	r3, r7, r3
 801394c:	8819      	ldrh	r1, [r3, #0]
 801394e:	68f8      	ldr	r0, [r7, #12]
 8013950:	2300      	movs	r3, #0
 8013952:	9300      	str	r3, [sp, #0]
 8013954:	0023      	movs	r3, r4
 8013956:	f002 fbdb 	bl	8016110 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801395e:	b29b      	uxth	r3, r3
 8013960:	2b00      	cmp	r3, #0
 8013962:	d198      	bne.n	8013896 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013964:	697a      	ldr	r2, [r7, #20]
 8013966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	0018      	movs	r0, r3
 801396c:	f002 fa12 	bl	8015d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8013970:	1e03      	subs	r3, r0, #0
 8013972:	d001      	beq.n	8013978 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8013974:	2301      	movs	r3, #1
 8013976:	e01a      	b.n	80139ae <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2220      	movs	r2, #32
 801397e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	685a      	ldr	r2, [r3, #4]
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	490c      	ldr	r1, [pc, #48]	@ (80139bc <HAL_I2C_Master_Transmit+0x20c>)
 801398c:	400a      	ands	r2, r1
 801398e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	2241      	movs	r2, #65	@ 0x41
 8013994:	2120      	movs	r1, #32
 8013996:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	2242      	movs	r2, #66	@ 0x42
 801399c:	2100      	movs	r1, #0
 801399e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	2240      	movs	r2, #64	@ 0x40
 80139a4:	2100      	movs	r1, #0
 80139a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80139a8:	2300      	movs	r3, #0
 80139aa:	e000      	b.n	80139ae <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80139ac:	2302      	movs	r3, #2
  }
}
 80139ae:	0018      	movs	r0, r3
 80139b0:	46bd      	mov	sp, r7
 80139b2:	b007      	add	sp, #28
 80139b4:	bd90      	pop	{r4, r7, pc}
 80139b6:	46c0      	nop			@ (mov r8, r8)
 80139b8:	80002000 	.word	0x80002000
 80139bc:	fe00e800 	.word	0xfe00e800

080139c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80139c0:	b590      	push	{r4, r7, lr}
 80139c2:	b089      	sub	sp, #36	@ 0x24
 80139c4:	af02      	add	r7, sp, #8
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	0008      	movs	r0, r1
 80139ca:	607a      	str	r2, [r7, #4]
 80139cc:	0019      	movs	r1, r3
 80139ce:	230a      	movs	r3, #10
 80139d0:	18fb      	adds	r3, r7, r3
 80139d2:	1c02      	adds	r2, r0, #0
 80139d4:	801a      	strh	r2, [r3, #0]
 80139d6:	2308      	movs	r3, #8
 80139d8:	18fb      	adds	r3, r7, r3
 80139da:	1c0a      	adds	r2, r1, #0
 80139dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2241      	movs	r2, #65	@ 0x41
 80139e2:	5c9b      	ldrb	r3, [r3, r2]
 80139e4:	b2db      	uxtb	r3, r3
 80139e6:	2b20      	cmp	r3, #32
 80139e8:	d000      	beq.n	80139ec <HAL_I2C_Master_Receive+0x2c>
 80139ea:	e0e8      	b.n	8013bbe <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	2240      	movs	r2, #64	@ 0x40
 80139f0:	5c9b      	ldrb	r3, [r3, r2]
 80139f2:	2b01      	cmp	r3, #1
 80139f4:	d101      	bne.n	80139fa <HAL_I2C_Master_Receive+0x3a>
 80139f6:	2302      	movs	r3, #2
 80139f8:	e0e2      	b.n	8013bc0 <HAL_I2C_Master_Receive+0x200>
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	2240      	movs	r2, #64	@ 0x40
 80139fe:	2101      	movs	r1, #1
 8013a00:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8013a02:	f7fe fb75 	bl	80120f0 <HAL_GetTick>
 8013a06:	0003      	movs	r3, r0
 8013a08:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8013a0a:	2380      	movs	r3, #128	@ 0x80
 8013a0c:	0219      	lsls	r1, r3, #8
 8013a0e:	68f8      	ldr	r0, [r7, #12]
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	9300      	str	r3, [sp, #0]
 8013a14:	2319      	movs	r3, #25
 8013a16:	2201      	movs	r2, #1
 8013a18:	f002 f928 	bl	8015c6c <I2C_WaitOnFlagUntilTimeout>
 8013a1c:	1e03      	subs	r3, r0, #0
 8013a1e:	d001      	beq.n	8013a24 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8013a20:	2301      	movs	r3, #1
 8013a22:	e0cd      	b.n	8013bc0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2241      	movs	r2, #65	@ 0x41
 8013a28:	2122      	movs	r1, #34	@ 0x22
 8013a2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	2242      	movs	r2, #66	@ 0x42
 8013a30:	2110      	movs	r1, #16
 8013a32:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	2200      	movs	r2, #0
 8013a38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2208      	movs	r2, #8
 8013a44:	18ba      	adds	r2, r7, r2
 8013a46:	8812      	ldrh	r2, [r2, #0]
 8013a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a54:	b29b      	uxth	r3, r3
 8013a56:	2bff      	cmp	r3, #255	@ 0xff
 8013a58:	d911      	bls.n	8013a7e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	22ff      	movs	r2, #255	@ 0xff
 8013a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a64:	b2da      	uxtb	r2, r3
 8013a66:	2380      	movs	r3, #128	@ 0x80
 8013a68:	045c      	lsls	r4, r3, #17
 8013a6a:	230a      	movs	r3, #10
 8013a6c:	18fb      	adds	r3, r7, r3
 8013a6e:	8819      	ldrh	r1, [r3, #0]
 8013a70:	68f8      	ldr	r0, [r7, #12]
 8013a72:	4b55      	ldr	r3, [pc, #340]	@ (8013bc8 <HAL_I2C_Master_Receive+0x208>)
 8013a74:	9300      	str	r3, [sp, #0]
 8013a76:	0023      	movs	r3, r4
 8013a78:	f002 fb4a 	bl	8016110 <I2C_TransferConfig>
 8013a7c:	e076      	b.n	8013b6c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013a82:	b29a      	uxth	r2, r3
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a8c:	b2da      	uxtb	r2, r3
 8013a8e:	2380      	movs	r3, #128	@ 0x80
 8013a90:	049c      	lsls	r4, r3, #18
 8013a92:	230a      	movs	r3, #10
 8013a94:	18fb      	adds	r3, r7, r3
 8013a96:	8819      	ldrh	r1, [r3, #0]
 8013a98:	68f8      	ldr	r0, [r7, #12]
 8013a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8013bc8 <HAL_I2C_Master_Receive+0x208>)
 8013a9c:	9300      	str	r3, [sp, #0]
 8013a9e:	0023      	movs	r3, r4
 8013aa0:	f002 fb36 	bl	8016110 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8013aa4:	e062      	b.n	8013b6c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013aa6:	697a      	ldr	r2, [r7, #20]
 8013aa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	0018      	movs	r0, r3
 8013aae:	f002 f9b5 	bl	8015e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8013ab2:	1e03      	subs	r3, r0, #0
 8013ab4:	d001      	beq.n	8013aba <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	e082      	b.n	8013bc0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ac4:	b2d2      	uxtb	r2, r2
 8013ac6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013acc:	1c5a      	adds	r2, r3, #1
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ad6:	3b01      	subs	r3, #1
 8013ad8:	b29a      	uxth	r2, r3
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	3b01      	subs	r3, #1
 8013ae6:	b29a      	uxth	r2, r3
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013af0:	b29b      	uxth	r3, r3
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d03a      	beq.n	8013b6c <HAL_I2C_Master_Receive+0x1ac>
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d136      	bne.n	8013b6c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8013afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b00:	68f8      	ldr	r0, [r7, #12]
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	9300      	str	r3, [sp, #0]
 8013b06:	0013      	movs	r3, r2
 8013b08:	2200      	movs	r2, #0
 8013b0a:	2180      	movs	r1, #128	@ 0x80
 8013b0c:	f002 f8ae 	bl	8015c6c <I2C_WaitOnFlagUntilTimeout>
 8013b10:	1e03      	subs	r3, r0, #0
 8013b12:	d001      	beq.n	8013b18 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8013b14:	2301      	movs	r3, #1
 8013b16:	e053      	b.n	8013bc0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	2bff      	cmp	r3, #255	@ 0xff
 8013b20:	d911      	bls.n	8013b46 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	22ff      	movs	r2, #255	@ 0xff
 8013b26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b2c:	b2da      	uxtb	r2, r3
 8013b2e:	2380      	movs	r3, #128	@ 0x80
 8013b30:	045c      	lsls	r4, r3, #17
 8013b32:	230a      	movs	r3, #10
 8013b34:	18fb      	adds	r3, r7, r3
 8013b36:	8819      	ldrh	r1, [r3, #0]
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	9300      	str	r3, [sp, #0]
 8013b3e:	0023      	movs	r3, r4
 8013b40:	f002 fae6 	bl	8016110 <I2C_TransferConfig>
 8013b44:	e012      	b.n	8013b6c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013b4a:	b29a      	uxth	r2, r3
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b54:	b2da      	uxtb	r2, r3
 8013b56:	2380      	movs	r3, #128	@ 0x80
 8013b58:	049c      	lsls	r4, r3, #18
 8013b5a:	230a      	movs	r3, #10
 8013b5c:	18fb      	adds	r3, r7, r3
 8013b5e:	8819      	ldrh	r1, [r3, #0]
 8013b60:	68f8      	ldr	r0, [r7, #12]
 8013b62:	2300      	movs	r3, #0
 8013b64:	9300      	str	r3, [sp, #0]
 8013b66:	0023      	movs	r3, r4
 8013b68:	f002 fad2 	bl	8016110 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d197      	bne.n	8013aa6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8013b76:	697a      	ldr	r2, [r7, #20]
 8013b78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	0018      	movs	r0, r3
 8013b7e:	f002 f909 	bl	8015d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8013b82:	1e03      	subs	r3, r0, #0
 8013b84:	d001      	beq.n	8013b8a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8013b86:	2301      	movs	r3, #1
 8013b88:	e01a      	b.n	8013bc0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2220      	movs	r2, #32
 8013b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	685a      	ldr	r2, [r3, #4]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	490b      	ldr	r1, [pc, #44]	@ (8013bcc <HAL_I2C_Master_Receive+0x20c>)
 8013b9e:	400a      	ands	r2, r1
 8013ba0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	2241      	movs	r2, #65	@ 0x41
 8013ba6:	2120      	movs	r1, #32
 8013ba8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	2242      	movs	r2, #66	@ 0x42
 8013bae:	2100      	movs	r1, #0
 8013bb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	2240      	movs	r2, #64	@ 0x40
 8013bb6:	2100      	movs	r1, #0
 8013bb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	e000      	b.n	8013bc0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8013bbe:	2302      	movs	r3, #2
  }
}
 8013bc0:	0018      	movs	r0, r3
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	b007      	add	sp, #28
 8013bc6:	bd90      	pop	{r4, r7, pc}
 8013bc8:	80002400 	.word	0x80002400
 8013bcc:	fe00e800 	.word	0xfe00e800

08013bd0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8013bd0:	b5b0      	push	{r4, r5, r7, lr}
 8013bd2:	b088      	sub	sp, #32
 8013bd4:	af02      	add	r7, sp, #8
 8013bd6:	60f8      	str	r0, [r7, #12]
 8013bd8:	0008      	movs	r0, r1
 8013bda:	607a      	str	r2, [r7, #4]
 8013bdc:	0019      	movs	r1, r3
 8013bde:	230a      	movs	r3, #10
 8013be0:	18fb      	adds	r3, r7, r3
 8013be2:	1c02      	adds	r2, r0, #0
 8013be4:	801a      	strh	r2, [r3, #0]
 8013be6:	2308      	movs	r3, #8
 8013be8:	18fb      	adds	r3, r7, r3
 8013bea:	1c0a      	adds	r2, r1, #0
 8013bec:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	2241      	movs	r2, #65	@ 0x41
 8013bf2:	5c9b      	ldrb	r3, [r3, r2]
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	2b20      	cmp	r3, #32
 8013bf8:	d000      	beq.n	8013bfc <HAL_I2C_Master_Transmit_DMA+0x2c>
 8013bfa:	e0dd      	b.n	8013db8 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	699a      	ldr	r2, [r3, #24]
 8013c02:	2380      	movs	r3, #128	@ 0x80
 8013c04:	021b      	lsls	r3, r3, #8
 8013c06:	401a      	ands	r2, r3
 8013c08:	2380      	movs	r3, #128	@ 0x80
 8013c0a:	021b      	lsls	r3, r3, #8
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	d101      	bne.n	8013c14 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8013c10:	2302      	movs	r3, #2
 8013c12:	e0d2      	b.n	8013dba <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	2240      	movs	r2, #64	@ 0x40
 8013c18:	5c9b      	ldrb	r3, [r3, r2]
 8013c1a:	2b01      	cmp	r3, #1
 8013c1c:	d101      	bne.n	8013c22 <HAL_I2C_Master_Transmit_DMA+0x52>
 8013c1e:	2302      	movs	r3, #2
 8013c20:	e0cb      	b.n	8013dba <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	2240      	movs	r2, #64	@ 0x40
 8013c26:	2101      	movs	r1, #1
 8013c28:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	2241      	movs	r2, #65	@ 0x41
 8013c2e:	2121      	movs	r1, #33	@ 0x21
 8013c30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	2242      	movs	r2, #66	@ 0x42
 8013c36:	2110      	movs	r1, #16
 8013c38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	2208      	movs	r2, #8
 8013c4a:	18ba      	adds	r2, r7, r2
 8013c4c:	8812      	ldrh	r2, [r2, #0]
 8013c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	4a5c      	ldr	r2, [pc, #368]	@ (8013dc4 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8013c54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	4a5b      	ldr	r2, [pc, #364]	@ (8013dc8 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8013c5a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	2bff      	cmp	r3, #255	@ 0xff
 8013c64:	d906      	bls.n	8013c74 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	22ff      	movs	r2, #255	@ 0xff
 8013c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8013c6c:	2380      	movs	r3, #128	@ 0x80
 8013c6e:	045b      	lsls	r3, r3, #17
 8013c70:	617b      	str	r3, [r7, #20]
 8013c72:	e007      	b.n	8013c84 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013c78:	b29a      	uxth	r2, r3
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8013c7e:	2380      	movs	r3, #128	@ 0x80
 8013c80:	049b      	lsls	r3, r3, #18
 8013c82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d100      	bne.n	8013c8e <HAL_I2C_Master_Transmit_DMA+0xbe>
 8013c8c:	e078      	b.n	8013d80 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d023      	beq.n	8013cde <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c9a:	4a4c      	ldr	r2, [pc, #304]	@ (8013dcc <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8013c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ca2:	4a4b      	ldr	r2, [pc, #300]	@ (8013dd0 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8013ca4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013caa:	2200      	movs	r2, #0
 8013cac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013cba:	6879      	ldr	r1, [r7, #4]
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	3328      	adds	r3, #40	@ 0x28
 8013cc2:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8013cc8:	2513      	movs	r5, #19
 8013cca:	197c      	adds	r4, r7, r5
 8013ccc:	f7fe ff62 	bl	8012b94 <HAL_DMA_Start_IT>
 8013cd0:	0003      	movs	r3, r0
 8013cd2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8013cd4:	197b      	adds	r3, r7, r5
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d13d      	bne.n	8013d58 <HAL_I2C_Master_Transmit_DMA+0x188>
 8013cdc:	e013      	b.n	8013d06 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	2241      	movs	r2, #65	@ 0x41
 8013ce2:	2120      	movs	r1, #32
 8013ce4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	2242      	movs	r2, #66	@ 0x42
 8013cea:	2100      	movs	r1, #0
 8013cec:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cf2:	2280      	movs	r2, #128	@ 0x80
 8013cf4:	431a      	orrs	r2, r3
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	2240      	movs	r2, #64	@ 0x40
 8013cfe:	2100      	movs	r1, #0
 8013d00:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8013d02:	2301      	movs	r3, #1
 8013d04:	e059      	b.n	8013dba <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d0a:	b2da      	uxtb	r2, r3
 8013d0c:	697c      	ldr	r4, [r7, #20]
 8013d0e:	230a      	movs	r3, #10
 8013d10:	18fb      	adds	r3, r7, r3
 8013d12:	8819      	ldrh	r1, [r3, #0]
 8013d14:	68f8      	ldr	r0, [r7, #12]
 8013d16:	4b2f      	ldr	r3, [pc, #188]	@ (8013dd4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8013d18:	9300      	str	r3, [sp, #0]
 8013d1a:	0023      	movs	r3, r4
 8013d1c:	f002 f9f8 	bl	8016110 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013d24:	b29a      	uxth	r2, r3
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d2a:	1ad3      	subs	r3, r2, r3
 8013d2c:	b29a      	uxth	r2, r3
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	2240      	movs	r2, #64	@ 0x40
 8013d36:	2100      	movs	r1, #0
 8013d38:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	2110      	movs	r1, #16
 8013d3e:	0018      	movs	r0, r3
 8013d40:	f002 fa20 	bl	8016184 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	681a      	ldr	r2, [r3, #0]
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	2180      	movs	r1, #128	@ 0x80
 8013d50:	01c9      	lsls	r1, r1, #7
 8013d52:	430a      	orrs	r2, r1
 8013d54:	601a      	str	r2, [r3, #0]
 8013d56:	e02d      	b.n	8013db4 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2241      	movs	r2, #65	@ 0x41
 8013d5c:	2120      	movs	r1, #32
 8013d5e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	2242      	movs	r2, #66	@ 0x42
 8013d64:	2100      	movs	r1, #0
 8013d66:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013d6c:	2210      	movs	r2, #16
 8013d6e:	431a      	orrs	r2, r3
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2240      	movs	r2, #64	@ 0x40
 8013d78:	2100      	movs	r1, #0
 8013d7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	e01c      	b.n	8013dba <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	4a15      	ldr	r2, [pc, #84]	@ (8013dd8 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8013d84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d8a:	b2da      	uxtb	r2, r3
 8013d8c:	2380      	movs	r3, #128	@ 0x80
 8013d8e:	049c      	lsls	r4, r3, #18
 8013d90:	230a      	movs	r3, #10
 8013d92:	18fb      	adds	r3, r7, r3
 8013d94:	8819      	ldrh	r1, [r3, #0]
 8013d96:	68f8      	ldr	r0, [r7, #12]
 8013d98:	4b0e      	ldr	r3, [pc, #56]	@ (8013dd4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8013d9a:	9300      	str	r3, [sp, #0]
 8013d9c:	0023      	movs	r3, r4
 8013d9e:	f002 f9b7 	bl	8016110 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	2240      	movs	r2, #64	@ 0x40
 8013da6:	2100      	movs	r1, #0
 8013da8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	2101      	movs	r1, #1
 8013dae:	0018      	movs	r0, r3
 8013db0:	f002 f9e8 	bl	8016184 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8013db4:	2300      	movs	r3, #0
 8013db6:	e000      	b.n	8013dba <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013db8:	2302      	movs	r3, #2
  }
}
 8013dba:	0018      	movs	r0, r3
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	b006      	add	sp, #24
 8013dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8013dc2:	46c0      	nop			@ (mov r8, r8)
 8013dc4:	ffff0000 	.word	0xffff0000
 8013dc8:	08014a41 	.word	0x08014a41
 8013dcc:	08015abd 	.word	0x08015abd
 8013dd0:	08015bfd 	.word	0x08015bfd
 8013dd4:	80002000 	.word	0x80002000
 8013dd8:	080145ed 	.word	0x080145ed

08013ddc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8013ddc:	b5b0      	push	{r4, r5, r7, lr}
 8013dde:	b088      	sub	sp, #32
 8013de0:	af02      	add	r7, sp, #8
 8013de2:	60f8      	str	r0, [r7, #12]
 8013de4:	0008      	movs	r0, r1
 8013de6:	607a      	str	r2, [r7, #4]
 8013de8:	0019      	movs	r1, r3
 8013dea:	230a      	movs	r3, #10
 8013dec:	18fb      	adds	r3, r7, r3
 8013dee:	1c02      	adds	r2, r0, #0
 8013df0:	801a      	strh	r2, [r3, #0]
 8013df2:	2308      	movs	r3, #8
 8013df4:	18fb      	adds	r3, r7, r3
 8013df6:	1c0a      	adds	r2, r1, #0
 8013df8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	2241      	movs	r2, #65	@ 0x41
 8013dfe:	5c9b      	ldrb	r3, [r3, r2]
 8013e00:	b2db      	uxtb	r3, r3
 8013e02:	2b20      	cmp	r3, #32
 8013e04:	d000      	beq.n	8013e08 <HAL_I2C_Master_Receive_DMA+0x2c>
 8013e06:	e0dd      	b.n	8013fc4 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	699a      	ldr	r2, [r3, #24]
 8013e0e:	2380      	movs	r3, #128	@ 0x80
 8013e10:	021b      	lsls	r3, r3, #8
 8013e12:	401a      	ands	r2, r3
 8013e14:	2380      	movs	r3, #128	@ 0x80
 8013e16:	021b      	lsls	r3, r3, #8
 8013e18:	429a      	cmp	r2, r3
 8013e1a:	d101      	bne.n	8013e20 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8013e1c:	2302      	movs	r3, #2
 8013e1e:	e0d2      	b.n	8013fc6 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	2240      	movs	r2, #64	@ 0x40
 8013e24:	5c9b      	ldrb	r3, [r3, r2]
 8013e26:	2b01      	cmp	r3, #1
 8013e28:	d101      	bne.n	8013e2e <HAL_I2C_Master_Receive_DMA+0x52>
 8013e2a:	2302      	movs	r3, #2
 8013e2c:	e0cb      	b.n	8013fc6 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	2240      	movs	r2, #64	@ 0x40
 8013e32:	2101      	movs	r1, #1
 8013e34:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	2241      	movs	r2, #65	@ 0x41
 8013e3a:	2122      	movs	r1, #34	@ 0x22
 8013e3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	2242      	movs	r2, #66	@ 0x42
 8013e42:	2110      	movs	r1, #16
 8013e44:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	2208      	movs	r2, #8
 8013e56:	18ba      	adds	r2, r7, r2
 8013e58:	8812      	ldrh	r2, [r2, #0]
 8013e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	4a5c      	ldr	r2, [pc, #368]	@ (8013fd0 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8013e60:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	4a5b      	ldr	r2, [pc, #364]	@ (8013fd4 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8013e66:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	2bff      	cmp	r3, #255	@ 0xff
 8013e70:	d906      	bls.n	8013e80 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	22ff      	movs	r2, #255	@ 0xff
 8013e76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8013e78:	2380      	movs	r3, #128	@ 0x80
 8013e7a:	045b      	lsls	r3, r3, #17
 8013e7c:	617b      	str	r3, [r7, #20]
 8013e7e:	e007      	b.n	8013e90 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013e84:	b29a      	uxth	r2, r3
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8013e8a:	2380      	movs	r3, #128	@ 0x80
 8013e8c:	049b      	lsls	r3, r3, #18
 8013e8e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d100      	bne.n	8013e9a <HAL_I2C_Master_Receive_DMA+0xbe>
 8013e98:	e078      	b.n	8013f8c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d023      	beq.n	8013eea <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ea6:	4a4c      	ldr	r2, [pc, #304]	@ (8013fd8 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8013ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013eae:	4a4b      	ldr	r2, [pc, #300]	@ (8013fdc <HAL_I2C_Master_Receive_DMA+0x200>)
 8013eb0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	3324      	adds	r3, #36	@ 0x24
 8013ecc:	0019      	movs	r1, r3
 8013ece:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8013ed4:	2513      	movs	r5, #19
 8013ed6:	197c      	adds	r4, r7, r5
 8013ed8:	f7fe fe5c 	bl	8012b94 <HAL_DMA_Start_IT>
 8013edc:	0003      	movs	r3, r0
 8013ede:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8013ee0:	197b      	adds	r3, r7, r5
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d13d      	bne.n	8013f64 <HAL_I2C_Master_Receive_DMA+0x188>
 8013ee8:	e013      	b.n	8013f12 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	2241      	movs	r2, #65	@ 0x41
 8013eee:	2120      	movs	r1, #32
 8013ef0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	2242      	movs	r2, #66	@ 0x42
 8013ef6:	2100      	movs	r1, #0
 8013ef8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013efe:	2280      	movs	r2, #128	@ 0x80
 8013f00:	431a      	orrs	r2, r3
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	2240      	movs	r2, #64	@ 0x40
 8013f0a:	2100      	movs	r1, #0
 8013f0c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8013f0e:	2301      	movs	r3, #1
 8013f10:	e059      	b.n	8013fc6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f16:	b2da      	uxtb	r2, r3
 8013f18:	697c      	ldr	r4, [r7, #20]
 8013f1a:	230a      	movs	r3, #10
 8013f1c:	18fb      	adds	r3, r7, r3
 8013f1e:	8819      	ldrh	r1, [r3, #0]
 8013f20:	68f8      	ldr	r0, [r7, #12]
 8013f22:	4b2f      	ldr	r3, [pc, #188]	@ (8013fe0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8013f24:	9300      	str	r3, [sp, #0]
 8013f26:	0023      	movs	r3, r4
 8013f28:	f002 f8f2 	bl	8016110 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013f30:	b29a      	uxth	r2, r3
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f36:	1ad3      	subs	r3, r2, r3
 8013f38:	b29a      	uxth	r2, r3
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	2240      	movs	r2, #64	@ 0x40
 8013f42:	2100      	movs	r1, #0
 8013f44:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	2110      	movs	r1, #16
 8013f4a:	0018      	movs	r0, r3
 8013f4c:	f002 f91a 	bl	8016184 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	681a      	ldr	r2, [r3, #0]
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	2180      	movs	r1, #128	@ 0x80
 8013f5c:	0209      	lsls	r1, r1, #8
 8013f5e:	430a      	orrs	r2, r1
 8013f60:	601a      	str	r2, [r3, #0]
 8013f62:	e02d      	b.n	8013fc0 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2241      	movs	r2, #65	@ 0x41
 8013f68:	2120      	movs	r1, #32
 8013f6a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	2242      	movs	r2, #66	@ 0x42
 8013f70:	2100      	movs	r1, #0
 8013f72:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f78:	2210      	movs	r2, #16
 8013f7a:	431a      	orrs	r2, r3
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	2240      	movs	r2, #64	@ 0x40
 8013f84:	2100      	movs	r1, #0
 8013f86:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8013f88:	2301      	movs	r3, #1
 8013f8a:	e01c      	b.n	8013fc6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	4a15      	ldr	r2, [pc, #84]	@ (8013fe4 <HAL_I2C_Master_Receive_DMA+0x208>)
 8013f90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013f96:	b2da      	uxtb	r2, r3
 8013f98:	2380      	movs	r3, #128	@ 0x80
 8013f9a:	049c      	lsls	r4, r3, #18
 8013f9c:	230a      	movs	r3, #10
 8013f9e:	18fb      	adds	r3, r7, r3
 8013fa0:	8819      	ldrh	r1, [r3, #0]
 8013fa2:	68f8      	ldr	r0, [r7, #12]
 8013fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8013fe0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8013fa6:	9300      	str	r3, [sp, #0]
 8013fa8:	0023      	movs	r3, r4
 8013faa:	f002 f8b1 	bl	8016110 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	2240      	movs	r2, #64	@ 0x40
 8013fb2:	2100      	movs	r1, #0
 8013fb4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	2101      	movs	r1, #1
 8013fba:	0018      	movs	r0, r3
 8013fbc:	f002 f8e2 	bl	8016184 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	e000      	b.n	8013fc6 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8013fc4:	2302      	movs	r3, #2
  }
}
 8013fc6:	0018      	movs	r0, r3
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	b006      	add	sp, #24
 8013fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8013fce:	46c0      	nop			@ (mov r8, r8)
 8013fd0:	ffff0000 	.word	0xffff0000
 8013fd4:	08014a41 	.word	0x08014a41
 8013fd8:	08015b5d 	.word	0x08015b5d
 8013fdc:	08015bfd 	.word	0x08015bfd
 8013fe0:	80002400 	.word	0x80002400
 8013fe4:	080145ed 	.word	0x080145ed

08013fe8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013fe8:	b590      	push	{r4, r7, lr}
 8013fea:	b089      	sub	sp, #36	@ 0x24
 8013fec:	af02      	add	r7, sp, #8
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	000c      	movs	r4, r1
 8013ff2:	0010      	movs	r0, r2
 8013ff4:	0019      	movs	r1, r3
 8013ff6:	230a      	movs	r3, #10
 8013ff8:	18fb      	adds	r3, r7, r3
 8013ffa:	1c22      	adds	r2, r4, #0
 8013ffc:	801a      	strh	r2, [r3, #0]
 8013ffe:	2308      	movs	r3, #8
 8014000:	18fb      	adds	r3, r7, r3
 8014002:	1c02      	adds	r2, r0, #0
 8014004:	801a      	strh	r2, [r3, #0]
 8014006:	1dbb      	adds	r3, r7, #6
 8014008:	1c0a      	adds	r2, r1, #0
 801400a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	2241      	movs	r2, #65	@ 0x41
 8014010:	5c9b      	ldrb	r3, [r3, r2]
 8014012:	b2db      	uxtb	r3, r3
 8014014:	2b20      	cmp	r3, #32
 8014016:	d000      	beq.n	801401a <HAL_I2C_Mem_Read+0x32>
 8014018:	e110      	b.n	801423c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 801401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801401c:	2b00      	cmp	r3, #0
 801401e:	d004      	beq.n	801402a <HAL_I2C_Mem_Read+0x42>
 8014020:	232c      	movs	r3, #44	@ 0x2c
 8014022:	18fb      	adds	r3, r7, r3
 8014024:	881b      	ldrh	r3, [r3, #0]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d105      	bne.n	8014036 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	2280      	movs	r2, #128	@ 0x80
 801402e:	0092      	lsls	r2, r2, #2
 8014030:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8014032:	2301      	movs	r3, #1
 8014034:	e103      	b.n	801423e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	2240      	movs	r2, #64	@ 0x40
 801403a:	5c9b      	ldrb	r3, [r3, r2]
 801403c:	2b01      	cmp	r3, #1
 801403e:	d101      	bne.n	8014044 <HAL_I2C_Mem_Read+0x5c>
 8014040:	2302      	movs	r3, #2
 8014042:	e0fc      	b.n	801423e <HAL_I2C_Mem_Read+0x256>
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2240      	movs	r2, #64	@ 0x40
 8014048:	2101      	movs	r1, #1
 801404a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801404c:	f7fe f850 	bl	80120f0 <HAL_GetTick>
 8014050:	0003      	movs	r3, r0
 8014052:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8014054:	2380      	movs	r3, #128	@ 0x80
 8014056:	0219      	lsls	r1, r3, #8
 8014058:	68f8      	ldr	r0, [r7, #12]
 801405a:	697b      	ldr	r3, [r7, #20]
 801405c:	9300      	str	r3, [sp, #0]
 801405e:	2319      	movs	r3, #25
 8014060:	2201      	movs	r2, #1
 8014062:	f001 fe03 	bl	8015c6c <I2C_WaitOnFlagUntilTimeout>
 8014066:	1e03      	subs	r3, r0, #0
 8014068:	d001      	beq.n	801406e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 801406a:	2301      	movs	r3, #1
 801406c:	e0e7      	b.n	801423e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	2241      	movs	r2, #65	@ 0x41
 8014072:	2122      	movs	r1, #34	@ 0x22
 8014074:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	2242      	movs	r2, #66	@ 0x42
 801407a:	2140      	movs	r1, #64	@ 0x40
 801407c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	2200      	movs	r2, #0
 8014082:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014088:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	222c      	movs	r2, #44	@ 0x2c
 801408e:	18ba      	adds	r2, r7, r2
 8014090:	8812      	ldrh	r2, [r2, #0]
 8014092:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	2200      	movs	r2, #0
 8014098:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801409a:	1dbb      	adds	r3, r7, #6
 801409c:	881c      	ldrh	r4, [r3, #0]
 801409e:	2308      	movs	r3, #8
 80140a0:	18fb      	adds	r3, r7, r3
 80140a2:	881a      	ldrh	r2, [r3, #0]
 80140a4:	230a      	movs	r3, #10
 80140a6:	18fb      	adds	r3, r7, r3
 80140a8:	8819      	ldrh	r1, [r3, #0]
 80140aa:	68f8      	ldr	r0, [r7, #12]
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	9301      	str	r3, [sp, #4]
 80140b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140b2:	9300      	str	r3, [sp, #0]
 80140b4:	0023      	movs	r3, r4
 80140b6:	f000 ffc1 	bl	801503c <I2C_RequestMemoryRead>
 80140ba:	1e03      	subs	r3, r0, #0
 80140bc:	d005      	beq.n	80140ca <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	2240      	movs	r2, #64	@ 0x40
 80140c2:	2100      	movs	r1, #0
 80140c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80140c6:	2301      	movs	r3, #1
 80140c8:	e0b9      	b.n	801423e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80140ce:	b29b      	uxth	r3, r3
 80140d0:	2bff      	cmp	r3, #255	@ 0xff
 80140d2:	d911      	bls.n	80140f8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	22ff      	movs	r2, #255	@ 0xff
 80140d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80140de:	b2da      	uxtb	r2, r3
 80140e0:	2380      	movs	r3, #128	@ 0x80
 80140e2:	045c      	lsls	r4, r3, #17
 80140e4:	230a      	movs	r3, #10
 80140e6:	18fb      	adds	r3, r7, r3
 80140e8:	8819      	ldrh	r1, [r3, #0]
 80140ea:	68f8      	ldr	r0, [r7, #12]
 80140ec:	4b56      	ldr	r3, [pc, #344]	@ (8014248 <HAL_I2C_Mem_Read+0x260>)
 80140ee:	9300      	str	r3, [sp, #0]
 80140f0:	0023      	movs	r3, r4
 80140f2:	f002 f80d 	bl	8016110 <I2C_TransferConfig>
 80140f6:	e012      	b.n	801411e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80140fc:	b29a      	uxth	r2, r3
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014106:	b2da      	uxtb	r2, r3
 8014108:	2380      	movs	r3, #128	@ 0x80
 801410a:	049c      	lsls	r4, r3, #18
 801410c:	230a      	movs	r3, #10
 801410e:	18fb      	adds	r3, r7, r3
 8014110:	8819      	ldrh	r1, [r3, #0]
 8014112:	68f8      	ldr	r0, [r7, #12]
 8014114:	4b4c      	ldr	r3, [pc, #304]	@ (8014248 <HAL_I2C_Mem_Read+0x260>)
 8014116:	9300      	str	r3, [sp, #0]
 8014118:	0023      	movs	r3, r4
 801411a:	f001 fff9 	bl	8016110 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801411e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014120:	68f8      	ldr	r0, [r7, #12]
 8014122:	697b      	ldr	r3, [r7, #20]
 8014124:	9300      	str	r3, [sp, #0]
 8014126:	0013      	movs	r3, r2
 8014128:	2200      	movs	r2, #0
 801412a:	2104      	movs	r1, #4
 801412c:	f001 fd9e 	bl	8015c6c <I2C_WaitOnFlagUntilTimeout>
 8014130:	1e03      	subs	r3, r0, #0
 8014132:	d001      	beq.n	8014138 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8014134:	2301      	movs	r3, #1
 8014136:	e082      	b.n	801423e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014142:	b2d2      	uxtb	r2, r2
 8014144:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801414a:	1c5a      	adds	r2, r3, #1
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014154:	3b01      	subs	r3, #1
 8014156:	b29a      	uxth	r2, r3
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014160:	b29b      	uxth	r3, r3
 8014162:	3b01      	subs	r3, #1
 8014164:	b29a      	uxth	r2, r3
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801416e:	b29b      	uxth	r3, r3
 8014170:	2b00      	cmp	r3, #0
 8014172:	d03a      	beq.n	80141ea <HAL_I2C_Mem_Read+0x202>
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014178:	2b00      	cmp	r3, #0
 801417a:	d136      	bne.n	80141ea <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801417c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801417e:	68f8      	ldr	r0, [r7, #12]
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	9300      	str	r3, [sp, #0]
 8014184:	0013      	movs	r3, r2
 8014186:	2200      	movs	r2, #0
 8014188:	2180      	movs	r1, #128	@ 0x80
 801418a:	f001 fd6f 	bl	8015c6c <I2C_WaitOnFlagUntilTimeout>
 801418e:	1e03      	subs	r3, r0, #0
 8014190:	d001      	beq.n	8014196 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8014192:	2301      	movs	r3, #1
 8014194:	e053      	b.n	801423e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801419a:	b29b      	uxth	r3, r3
 801419c:	2bff      	cmp	r3, #255	@ 0xff
 801419e:	d911      	bls.n	80141c4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	22ff      	movs	r2, #255	@ 0xff
 80141a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80141aa:	b2da      	uxtb	r2, r3
 80141ac:	2380      	movs	r3, #128	@ 0x80
 80141ae:	045c      	lsls	r4, r3, #17
 80141b0:	230a      	movs	r3, #10
 80141b2:	18fb      	adds	r3, r7, r3
 80141b4:	8819      	ldrh	r1, [r3, #0]
 80141b6:	68f8      	ldr	r0, [r7, #12]
 80141b8:	2300      	movs	r3, #0
 80141ba:	9300      	str	r3, [sp, #0]
 80141bc:	0023      	movs	r3, r4
 80141be:	f001 ffa7 	bl	8016110 <I2C_TransferConfig>
 80141c2:	e012      	b.n	80141ea <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80141c8:	b29a      	uxth	r2, r3
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80141d2:	b2da      	uxtb	r2, r3
 80141d4:	2380      	movs	r3, #128	@ 0x80
 80141d6:	049c      	lsls	r4, r3, #18
 80141d8:	230a      	movs	r3, #10
 80141da:	18fb      	adds	r3, r7, r3
 80141dc:	8819      	ldrh	r1, [r3, #0]
 80141de:	68f8      	ldr	r0, [r7, #12]
 80141e0:	2300      	movs	r3, #0
 80141e2:	9300      	str	r3, [sp, #0]
 80141e4:	0023      	movs	r3, r4
 80141e6:	f001 ff93 	bl	8016110 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80141ee:	b29b      	uxth	r3, r3
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d194      	bne.n	801411e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80141f4:	697a      	ldr	r2, [r7, #20]
 80141f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	0018      	movs	r0, r3
 80141fc:	f001 fdca 	bl	8015d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8014200:	1e03      	subs	r3, r0, #0
 8014202:	d001      	beq.n	8014208 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8014204:	2301      	movs	r3, #1
 8014206:	e01a      	b.n	801423e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	2220      	movs	r2, #32
 801420e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	685a      	ldr	r2, [r3, #4]
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	490c      	ldr	r1, [pc, #48]	@ (801424c <HAL_I2C_Mem_Read+0x264>)
 801421c:	400a      	ands	r2, r1
 801421e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	2241      	movs	r2, #65	@ 0x41
 8014224:	2120      	movs	r1, #32
 8014226:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	2242      	movs	r2, #66	@ 0x42
 801422c:	2100      	movs	r1, #0
 801422e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	2240      	movs	r2, #64	@ 0x40
 8014234:	2100      	movs	r1, #0
 8014236:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8014238:	2300      	movs	r3, #0
 801423a:	e000      	b.n	801423e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 801423c:	2302      	movs	r3, #2
  }
}
 801423e:	0018      	movs	r0, r3
 8014240:	46bd      	mov	sp, r7
 8014242:	b007      	add	sp, #28
 8014244:	bd90      	pop	{r4, r7, pc}
 8014246:	46c0      	nop			@ (mov r8, r8)
 8014248:	80002400 	.word	0x80002400
 801424c:	fe00e800 	.word	0xfe00e800

08014250 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8014250:	b5b0      	push	{r4, r5, r7, lr}
 8014252:	b088      	sub	sp, #32
 8014254:	af02      	add	r7, sp, #8
 8014256:	60f8      	str	r0, [r7, #12]
 8014258:	000c      	movs	r4, r1
 801425a:	0010      	movs	r0, r2
 801425c:	0019      	movs	r1, r3
 801425e:	230a      	movs	r3, #10
 8014260:	18fb      	adds	r3, r7, r3
 8014262:	1c22      	adds	r2, r4, #0
 8014264:	801a      	strh	r2, [r3, #0]
 8014266:	2308      	movs	r3, #8
 8014268:	18fb      	adds	r3, r7, r3
 801426a:	1c02      	adds	r2, r0, #0
 801426c:	801a      	strh	r2, [r3, #0]
 801426e:	1dbb      	adds	r3, r7, #6
 8014270:	1c0a      	adds	r2, r1, #0
 8014272:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	2241      	movs	r2, #65	@ 0x41
 8014278:	5c9b      	ldrb	r3, [r3, r2]
 801427a:	b2db      	uxtb	r3, r3
 801427c:	2b20      	cmp	r3, #32
 801427e:	d000      	beq.n	8014282 <HAL_I2C_Mem_Write_DMA+0x32>
 8014280:	e0d8      	b.n	8014434 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8014282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014284:	2b00      	cmp	r3, #0
 8014286:	d004      	beq.n	8014292 <HAL_I2C_Mem_Write_DMA+0x42>
 8014288:	232c      	movs	r3, #44	@ 0x2c
 801428a:	18fb      	adds	r3, r7, r3
 801428c:	881b      	ldrh	r3, [r3, #0]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d105      	bne.n	801429e <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	2280      	movs	r2, #128	@ 0x80
 8014296:	0092      	lsls	r2, r2, #2
 8014298:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 801429a:	2301      	movs	r3, #1
 801429c:	e0cb      	b.n	8014436 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	699a      	ldr	r2, [r3, #24]
 80142a4:	2380      	movs	r3, #128	@ 0x80
 80142a6:	021b      	lsls	r3, r3, #8
 80142a8:	401a      	ands	r2, r3
 80142aa:	2380      	movs	r3, #128	@ 0x80
 80142ac:	021b      	lsls	r3, r3, #8
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d101      	bne.n	80142b6 <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 80142b2:	2302      	movs	r3, #2
 80142b4:	e0bf      	b.n	8014436 <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	2240      	movs	r2, #64	@ 0x40
 80142ba:	5c9b      	ldrb	r3, [r3, r2]
 80142bc:	2b01      	cmp	r3, #1
 80142be:	d101      	bne.n	80142c4 <HAL_I2C_Mem_Write_DMA+0x74>
 80142c0:	2302      	movs	r3, #2
 80142c2:	e0b8      	b.n	8014436 <HAL_I2C_Mem_Write_DMA+0x1e6>
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	2240      	movs	r2, #64	@ 0x40
 80142c8:	2101      	movs	r1, #1
 80142ca:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2241      	movs	r2, #65	@ 0x41
 80142d0:	2121      	movs	r1, #33	@ 0x21
 80142d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	2242      	movs	r2, #66	@ 0x42
 80142d8:	2140      	movs	r1, #64	@ 0x40
 80142da:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	2200      	movs	r2, #0
 80142e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80142e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	222c      	movs	r2, #44	@ 0x2c
 80142ec:	18ba      	adds	r2, r7, r2
 80142ee:	8812      	ldrh	r2, [r2, #0]
 80142f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	4a52      	ldr	r2, [pc, #328]	@ (8014440 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 80142f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	4a52      	ldr	r2, [pc, #328]	@ (8014444 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 80142fc:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80142fe:	230a      	movs	r3, #10
 8014300:	18fb      	adds	r3, r7, r3
 8014302:	881a      	ldrh	r2, [r3, #0]
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801430c:	b29b      	uxth	r3, r3
 801430e:	2bff      	cmp	r3, #255	@ 0xff
 8014310:	d903      	bls.n	801431a <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	22ff      	movs	r2, #255	@ 0xff
 8014316:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014318:	e004      	b.n	8014324 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801431e:	b29a      	uxth	r2, r3
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8014324:	1dbb      	adds	r3, r7, #6
 8014326:	881b      	ldrh	r3, [r3, #0]
 8014328:	2b01      	cmp	r3, #1
 801432a:	d10b      	bne.n	8014344 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801432c:	2308      	movs	r3, #8
 801432e:	18fb      	adds	r3, r7, r3
 8014330:	881b      	ldrh	r3, [r3, #0]
 8014332:	b2da      	uxtb	r2, r3
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	2201      	movs	r2, #1
 801433e:	4252      	negs	r2, r2
 8014340:	651a      	str	r2, [r3, #80]	@ 0x50
 8014342:	e00e      	b.n	8014362 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8014344:	2108      	movs	r1, #8
 8014346:	187b      	adds	r3, r7, r1
 8014348:	881b      	ldrh	r3, [r3, #0]
 801434a:	0a1b      	lsrs	r3, r3, #8
 801434c:	b29b      	uxth	r3, r3
 801434e:	b2da      	uxtb	r2, r3
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8014356:	187b      	adds	r3, r7, r1
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	b2db      	uxtb	r3, r3
 801435c:	001a      	movs	r2, r3
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014366:	2b00      	cmp	r3, #0
 8014368:	d023      	beq.n	80143b2 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801436e:	4a36      	ldr	r2, [pc, #216]	@ (8014448 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8014370:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014376:	4a35      	ldr	r2, [pc, #212]	@ (801444c <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8014378:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801437e:	2200      	movs	r2, #0
 8014380:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014386:	2200      	movs	r2, #0
 8014388:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801438e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	3328      	adds	r3, #40	@ 0x28
 8014396:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801439c:	2517      	movs	r5, #23
 801439e:	197c      	adds	r4, r7, r5
 80143a0:	f7fe fbf8 	bl	8012b94 <HAL_DMA_Start_IT>
 80143a4:	0003      	movs	r3, r0
 80143a6:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80143a8:	197b      	adds	r3, r7, r5
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d12d      	bne.n	801440c <HAL_I2C_Mem_Write_DMA+0x1bc>
 80143b0:	e013      	b.n	80143da <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	2241      	movs	r2, #65	@ 0x41
 80143b6:	2120      	movs	r1, #32
 80143b8:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	2242      	movs	r2, #66	@ 0x42
 80143be:	2100      	movs	r1, #0
 80143c0:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80143c6:	2280      	movs	r2, #128	@ 0x80
 80143c8:	431a      	orrs	r2, r3
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	2240      	movs	r2, #64	@ 0x40
 80143d2:	2100      	movs	r1, #0
 80143d4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80143d6:	2301      	movs	r3, #1
 80143d8:	e02d      	b.n	8014436 <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80143da:	1dbb      	adds	r3, r7, #6
 80143dc:	881b      	ldrh	r3, [r3, #0]
 80143de:	b2da      	uxtb	r2, r3
 80143e0:	2380      	movs	r3, #128	@ 0x80
 80143e2:	045c      	lsls	r4, r3, #17
 80143e4:	230a      	movs	r3, #10
 80143e6:	18fb      	adds	r3, r7, r3
 80143e8:	8819      	ldrh	r1, [r3, #0]
 80143ea:	68f8      	ldr	r0, [r7, #12]
 80143ec:	4b18      	ldr	r3, [pc, #96]	@ (8014450 <HAL_I2C_Mem_Write_DMA+0x200>)
 80143ee:	9300      	str	r3, [sp, #0]
 80143f0:	0023      	movs	r3, r4
 80143f2:	f001 fe8d 	bl	8016110 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	2240      	movs	r2, #64	@ 0x40
 80143fa:	2100      	movs	r1, #0
 80143fc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	2101      	movs	r1, #1
 8014402:	0018      	movs	r0, r3
 8014404:	f001 febe 	bl	8016184 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8014408:	2300      	movs	r3, #0
 801440a:	e014      	b.n	8014436 <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	2241      	movs	r2, #65	@ 0x41
 8014410:	2120      	movs	r1, #32
 8014412:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	2242      	movs	r2, #66	@ 0x42
 8014418:	2100      	movs	r1, #0
 801441a:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014420:	2210      	movs	r2, #16
 8014422:	431a      	orrs	r2, r3
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	2240      	movs	r2, #64	@ 0x40
 801442c:	2100      	movs	r1, #0
 801442e:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8014430:	2301      	movs	r3, #1
 8014432:	e000      	b.n	8014436 <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8014434:	2302      	movs	r3, #2
  }
}
 8014436:	0018      	movs	r0, r3
 8014438:	46bd      	mov	sp, r7
 801443a:	b006      	add	sp, #24
 801443c:	bdb0      	pop	{r4, r5, r7, pc}
 801443e:	46c0      	nop			@ (mov r8, r8)
 8014440:	ffff0000 	.word	0xffff0000
 8014444:	08014c39 	.word	0x08014c39
 8014448:	08015abd 	.word	0x08015abd
 801444c:	08015bfd 	.word	0x08015bfd
 8014450:	80002000 	.word	0x80002000

08014454 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b084      	sub	sp, #16
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	699b      	ldr	r3, [r3, #24]
 8014462:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014470:	2b00      	cmp	r3, #0
 8014472:	d005      	beq.n	8014480 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014478:	68ba      	ldr	r2, [r7, #8]
 801447a:	68f9      	ldr	r1, [r7, #12]
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	4798      	blx	r3
  }
}
 8014480:	46c0      	nop			@ (mov r8, r8)
 8014482:	46bd      	mov	sp, r7
 8014484:	b004      	add	sp, #16
 8014486:	bd80      	pop	{r7, pc}

08014488 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b086      	sub	sp, #24
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	699b      	ldr	r3, [r3, #24]
 8014496:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80144a0:	697a      	ldr	r2, [r7, #20]
 80144a2:	2380      	movs	r3, #128	@ 0x80
 80144a4:	005b      	lsls	r3, r3, #1
 80144a6:	4013      	ands	r3, r2
 80144a8:	d00e      	beq.n	80144c8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80144aa:	693b      	ldr	r3, [r7, #16]
 80144ac:	2280      	movs	r2, #128	@ 0x80
 80144ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80144b0:	d00a      	beq.n	80144c8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144b6:	2201      	movs	r2, #1
 80144b8:	431a      	orrs	r2, r3
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	2280      	movs	r2, #128	@ 0x80
 80144c4:	0052      	lsls	r2, r2, #1
 80144c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80144c8:	697a      	ldr	r2, [r7, #20]
 80144ca:	2380      	movs	r3, #128	@ 0x80
 80144cc:	00db      	lsls	r3, r3, #3
 80144ce:	4013      	ands	r3, r2
 80144d0:	d00e      	beq.n	80144f0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80144d2:	693b      	ldr	r3, [r7, #16]
 80144d4:	2280      	movs	r2, #128	@ 0x80
 80144d6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80144d8:	d00a      	beq.n	80144f0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144de:	2208      	movs	r2, #8
 80144e0:	431a      	orrs	r2, r3
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	2280      	movs	r2, #128	@ 0x80
 80144ec:	00d2      	lsls	r2, r2, #3
 80144ee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80144f0:	697a      	ldr	r2, [r7, #20]
 80144f2:	2380      	movs	r3, #128	@ 0x80
 80144f4:	009b      	lsls	r3, r3, #2
 80144f6:	4013      	ands	r3, r2
 80144f8:	d00e      	beq.n	8014518 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	2280      	movs	r2, #128	@ 0x80
 80144fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8014500:	d00a      	beq.n	8014518 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014506:	2202      	movs	r2, #2
 8014508:	431a      	orrs	r2, r3
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	2280      	movs	r2, #128	@ 0x80
 8014514:	0092      	lsls	r2, r2, #2
 8014516:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801451c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	220b      	movs	r2, #11
 8014522:	4013      	ands	r3, r2
 8014524:	d005      	beq.n	8014532 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8014526:	68fa      	ldr	r2, [r7, #12]
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	0011      	movs	r1, r2
 801452c:	0018      	movs	r0, r3
 801452e:	f001 f977 	bl	8015820 <I2C_ITError>
  }
}
 8014532:	46c0      	nop			@ (mov r8, r8)
 8014534:	46bd      	mov	sp, r7
 8014536:	b006      	add	sp, #24
 8014538:	bd80      	pop	{r7, pc}

0801453a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801453a:	b580      	push	{r7, lr}
 801453c:	b082      	sub	sp, #8
 801453e:	af00      	add	r7, sp, #0
 8014540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8014542:	46c0      	nop			@ (mov r8, r8)
 8014544:	46bd      	mov	sp, r7
 8014546:	b002      	add	sp, #8
 8014548:	bd80      	pop	{r7, pc}

0801454a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801454a:	b580      	push	{r7, lr}
 801454c:	b082      	sub	sp, #8
 801454e:	af00      	add	r7, sp, #0
 8014550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8014552:	46c0      	nop			@ (mov r8, r8)
 8014554:	46bd      	mov	sp, r7
 8014556:	b002      	add	sp, #8
 8014558:	bd80      	pop	{r7, pc}

0801455a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801455a:	b580      	push	{r7, lr}
 801455c:	b082      	sub	sp, #8
 801455e:	af00      	add	r7, sp, #0
 8014560:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8014562:	46c0      	nop			@ (mov r8, r8)
 8014564:	46bd      	mov	sp, r7
 8014566:	b002      	add	sp, #8
 8014568:	bd80      	pop	{r7, pc}

0801456a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801456a:	b580      	push	{r7, lr}
 801456c:	b082      	sub	sp, #8
 801456e:	af00      	add	r7, sp, #0
 8014570:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8014572:	46c0      	nop			@ (mov r8, r8)
 8014574:	46bd      	mov	sp, r7
 8014576:	b002      	add	sp, #8
 8014578:	bd80      	pop	{r7, pc}

0801457a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801457a:	b580      	push	{r7, lr}
 801457c:	b082      	sub	sp, #8
 801457e:	af00      	add	r7, sp, #0
 8014580:	6078      	str	r0, [r7, #4]
 8014582:	0008      	movs	r0, r1
 8014584:	0011      	movs	r1, r2
 8014586:	1cfb      	adds	r3, r7, #3
 8014588:	1c02      	adds	r2, r0, #0
 801458a:	701a      	strb	r2, [r3, #0]
 801458c:	003b      	movs	r3, r7
 801458e:	1c0a      	adds	r2, r1, #0
 8014590:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8014592:	46c0      	nop			@ (mov r8, r8)
 8014594:	46bd      	mov	sp, r7
 8014596:	b002      	add	sp, #8
 8014598:	bd80      	pop	{r7, pc}

0801459a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801459a:	b580      	push	{r7, lr}
 801459c:	b082      	sub	sp, #8
 801459e:	af00      	add	r7, sp, #0
 80145a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80145a2:	46c0      	nop			@ (mov r8, r8)
 80145a4:	46bd      	mov	sp, r7
 80145a6:	b002      	add	sp, #8
 80145a8:	bd80      	pop	{r7, pc}

080145aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80145aa:	b580      	push	{r7, lr}
 80145ac:	b082      	sub	sp, #8
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80145b2:	46c0      	nop			@ (mov r8, r8)
 80145b4:	46bd      	mov	sp, r7
 80145b6:	b002      	add	sp, #8
 80145b8:	bd80      	pop	{r7, pc}

080145ba <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80145ba:	b580      	push	{r7, lr}
 80145bc:	b082      	sub	sp, #8
 80145be:	af00      	add	r7, sp, #0
 80145c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80145c2:	46c0      	nop			@ (mov r8, r8)
 80145c4:	46bd      	mov	sp, r7
 80145c6:	b002      	add	sp, #8
 80145c8:	bd80      	pop	{r7, pc}

080145ca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80145ca:	b580      	push	{r7, lr}
 80145cc:	b082      	sub	sp, #8
 80145ce:	af00      	add	r7, sp, #0
 80145d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80145d2:	46c0      	nop			@ (mov r8, r8)
 80145d4:	46bd      	mov	sp, r7
 80145d6:	b002      	add	sp, #8
 80145d8:	bd80      	pop	{r7, pc}

080145da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80145da:	b580      	push	{r7, lr}
 80145dc:	b082      	sub	sp, #8
 80145de:	af00      	add	r7, sp, #0
 80145e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80145e2:	46c0      	nop			@ (mov r8, r8)
 80145e4:	46bd      	mov	sp, r7
 80145e6:	b002      	add	sp, #8
 80145e8:	bd80      	pop	{r7, pc}
	...

080145ec <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80145ec:	b590      	push	{r4, r7, lr}
 80145ee:	b089      	sub	sp, #36	@ 0x24
 80145f0:	af02      	add	r7, sp, #8
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	60b9      	str	r1, [r7, #8]
 80145f6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	2240      	movs	r2, #64	@ 0x40
 8014600:	5c9b      	ldrb	r3, [r3, r2]
 8014602:	2b01      	cmp	r3, #1
 8014604:	d101      	bne.n	801460a <I2C_Master_ISR_IT+0x1e>
 8014606:	2302      	movs	r3, #2
 8014608:	e113      	b.n	8014832 <I2C_Master_ISR_IT+0x246>
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	2240      	movs	r2, #64	@ 0x40
 801460e:	2101      	movs	r1, #1
 8014610:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	2210      	movs	r2, #16
 8014616:	4013      	ands	r3, r2
 8014618:	d012      	beq.n	8014640 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2210      	movs	r2, #16
 801461e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014620:	d00e      	beq.n	8014640 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	2210      	movs	r2, #16
 8014628:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801462e:	2204      	movs	r2, #4
 8014630:	431a      	orrs	r2, r3
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	0018      	movs	r0, r3
 801463a:	f001 fa1c 	bl	8015a76 <I2C_Flush_TXDR>
 801463e:	e0e5      	b.n	801480c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	2204      	movs	r2, #4
 8014644:	4013      	ands	r3, r2
 8014646:	d021      	beq.n	801468c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2204      	movs	r2, #4
 801464c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801464e:	d01d      	beq.n	801468c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	2204      	movs	r2, #4
 8014654:	4393      	bics	r3, r2
 8014656:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014662:	b2d2      	uxtb	r2, r2
 8014664:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801466a:	1c5a      	adds	r2, r3, #1
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014674:	3b01      	subs	r3, #1
 8014676:	b29a      	uxth	r2, r3
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014680:	b29b      	uxth	r3, r3
 8014682:	3b01      	subs	r3, #1
 8014684:	b29a      	uxth	r2, r3
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801468a:	e0bf      	b.n	801480c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	2202      	movs	r2, #2
 8014690:	4013      	ands	r3, r2
 8014692:	d01c      	beq.n	80146ce <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2202      	movs	r2, #2
 8014698:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801469a:	d018      	beq.n	80146ce <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146a0:	781a      	ldrb	r2, [r3, #0]
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146ac:	1c5a      	adds	r2, r3, #1
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146b6:	3b01      	subs	r3, #1
 80146b8:	b29a      	uxth	r2, r3
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80146c2:	b29b      	uxth	r3, r3
 80146c4:	3b01      	subs	r3, #1
 80146c6:	b29a      	uxth	r2, r3
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80146cc:	e09e      	b.n	801480c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80146ce:	697b      	ldr	r3, [r7, #20]
 80146d0:	2280      	movs	r2, #128	@ 0x80
 80146d2:	4013      	ands	r3, r2
 80146d4:	d100      	bne.n	80146d8 <I2C_Master_ISR_IT+0xec>
 80146d6:	e069      	b.n	80147ac <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2240      	movs	r2, #64	@ 0x40
 80146dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80146de:	d065      	beq.n	80147ac <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80146e4:	b29b      	uxth	r3, r3
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d04a      	beq.n	8014780 <I2C_Master_ISR_IT+0x194>
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d146      	bne.n	8014780 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	685b      	ldr	r3, [r3, #4]
 80146f8:	b29a      	uxth	r2, r3
 80146fa:	2112      	movs	r1, #18
 80146fc:	187b      	adds	r3, r7, r1
 80146fe:	0592      	lsls	r2, r2, #22
 8014700:	0d92      	lsrs	r2, r2, #22
 8014702:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014708:	b29b      	uxth	r3, r3
 801470a:	2bff      	cmp	r3, #255	@ 0xff
 801470c:	d910      	bls.n	8014730 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	22ff      	movs	r2, #255	@ 0xff
 8014712:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014718:	b2da      	uxtb	r2, r3
 801471a:	2380      	movs	r3, #128	@ 0x80
 801471c:	045c      	lsls	r4, r3, #17
 801471e:	187b      	adds	r3, r7, r1
 8014720:	8819      	ldrh	r1, [r3, #0]
 8014722:	68f8      	ldr	r0, [r7, #12]
 8014724:	2300      	movs	r3, #0
 8014726:	9300      	str	r3, [sp, #0]
 8014728:	0023      	movs	r3, r4
 801472a:	f001 fcf1 	bl	8016110 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801472e:	e03c      	b.n	80147aa <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014734:	b29a      	uxth	r2, r3
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801473e:	4a3f      	ldr	r2, [pc, #252]	@ (801483c <I2C_Master_ISR_IT+0x250>)
 8014740:	4293      	cmp	r3, r2
 8014742:	d00e      	beq.n	8014762 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014748:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801474e:	2312      	movs	r3, #18
 8014750:	18fb      	adds	r3, r7, r3
 8014752:	8819      	ldrh	r1, [r3, #0]
 8014754:	68f8      	ldr	r0, [r7, #12]
 8014756:	2300      	movs	r3, #0
 8014758:	9300      	str	r3, [sp, #0]
 801475a:	0023      	movs	r3, r4
 801475c:	f001 fcd8 	bl	8016110 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014760:	e023      	b.n	80147aa <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014766:	b2da      	uxtb	r2, r3
 8014768:	2380      	movs	r3, #128	@ 0x80
 801476a:	049c      	lsls	r4, r3, #18
 801476c:	2312      	movs	r3, #18
 801476e:	18fb      	adds	r3, r7, r3
 8014770:	8819      	ldrh	r1, [r3, #0]
 8014772:	68f8      	ldr	r0, [r7, #12]
 8014774:	2300      	movs	r3, #0
 8014776:	9300      	str	r3, [sp, #0]
 8014778:	0023      	movs	r3, r4
 801477a:	f001 fcc9 	bl	8016110 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801477e:	e014      	b.n	80147aa <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	685a      	ldr	r2, [r3, #4]
 8014786:	2380      	movs	r3, #128	@ 0x80
 8014788:	049b      	lsls	r3, r3, #18
 801478a:	401a      	ands	r2, r3
 801478c:	2380      	movs	r3, #128	@ 0x80
 801478e:	049b      	lsls	r3, r3, #18
 8014790:	429a      	cmp	r2, r3
 8014792:	d004      	beq.n	801479e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	0018      	movs	r0, r3
 8014798:	f000 fd56 	bl	8015248 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801479c:	e036      	b.n	801480c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	2140      	movs	r1, #64	@ 0x40
 80147a2:	0018      	movs	r0, r3
 80147a4:	f001 f83c 	bl	8015820 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80147a8:	e030      	b.n	801480c <I2C_Master_ISR_IT+0x220>
 80147aa:	e02f      	b.n	801480c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	2240      	movs	r2, #64	@ 0x40
 80147b0:	4013      	ands	r3, r2
 80147b2:	d02b      	beq.n	801480c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2240      	movs	r2, #64	@ 0x40
 80147b8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80147ba:	d027      	beq.n	801480c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d11d      	bne.n	8014802 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	685a      	ldr	r2, [r3, #4]
 80147cc:	2380      	movs	r3, #128	@ 0x80
 80147ce:	049b      	lsls	r3, r3, #18
 80147d0:	401a      	ands	r2, r3
 80147d2:	2380      	movs	r3, #128	@ 0x80
 80147d4:	049b      	lsls	r3, r3, #18
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d018      	beq.n	801480c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80147de:	4a17      	ldr	r2, [pc, #92]	@ (801483c <I2C_Master_ISR_IT+0x250>)
 80147e0:	4293      	cmp	r3, r2
 80147e2:	d109      	bne.n	80147f8 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	685a      	ldr	r2, [r3, #4]
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	2180      	movs	r1, #128	@ 0x80
 80147f0:	01c9      	lsls	r1, r1, #7
 80147f2:	430a      	orrs	r2, r1
 80147f4:	605a      	str	r2, [r3, #4]
 80147f6:	e009      	b.n	801480c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	0018      	movs	r0, r3
 80147fc:	f000 fd24 	bl	8015248 <I2C_ITMasterSeqCplt>
 8014800:	e004      	b.n	801480c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	2140      	movs	r1, #64	@ 0x40
 8014806:	0018      	movs	r0, r3
 8014808:	f001 f80a 	bl	8015820 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	2220      	movs	r2, #32
 8014810:	4013      	ands	r3, r2
 8014812:	d009      	beq.n	8014828 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	2220      	movs	r2, #32
 8014818:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801481a:	d005      	beq.n	8014828 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 801481c:	697a      	ldr	r2, [r7, #20]
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	0011      	movs	r1, r2
 8014822:	0018      	movs	r0, r3
 8014824:	f000 fdb6 	bl	8015394 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	2240      	movs	r2, #64	@ 0x40
 801482c:	2100      	movs	r1, #0
 801482e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014830:	2300      	movs	r3, #0
}
 8014832:	0018      	movs	r0, r3
 8014834:	46bd      	mov	sp, r7
 8014836:	b007      	add	sp, #28
 8014838:	bd90      	pop	{r4, r7, pc}
 801483a:	46c0      	nop			@ (mov r8, r8)
 801483c:	ffff0000 	.word	0xffff0000

08014840 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b086      	sub	sp, #24
 8014844:	af00      	add	r7, sp, #0
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014850:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	2240      	movs	r2, #64	@ 0x40
 801485a:	5c9b      	ldrb	r3, [r3, r2]
 801485c:	2b01      	cmp	r3, #1
 801485e:	d101      	bne.n	8014864 <I2C_Slave_ISR_IT+0x24>
 8014860:	2302      	movs	r3, #2
 8014862:	e0e6      	b.n	8014a32 <I2C_Slave_ISR_IT+0x1f2>
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	2240      	movs	r2, #64	@ 0x40
 8014868:	2101      	movs	r1, #1
 801486a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	2220      	movs	r2, #32
 8014870:	4013      	ands	r3, r2
 8014872:	d009      	beq.n	8014888 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2220      	movs	r2, #32
 8014878:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801487a:	d005      	beq.n	8014888 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 801487c:	693a      	ldr	r2, [r7, #16]
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	0011      	movs	r1, r2
 8014882:	0018      	movs	r0, r3
 8014884:	f000 fe54 	bl	8015530 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014888:	693b      	ldr	r3, [r7, #16]
 801488a:	2210      	movs	r2, #16
 801488c:	4013      	ands	r3, r2
 801488e:	d052      	beq.n	8014936 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2210      	movs	r2, #16
 8014894:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8014896:	d04e      	beq.n	8014936 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801489c:	b29b      	uxth	r3, r3
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d12d      	bne.n	80148fe <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	2241      	movs	r2, #65	@ 0x41
 80148a6:	5c9b      	ldrb	r3, [r3, r2]
 80148a8:	b2db      	uxtb	r3, r3
 80148aa:	2b28      	cmp	r3, #40	@ 0x28
 80148ac:	d10b      	bne.n	80148c6 <I2C_Slave_ISR_IT+0x86>
 80148ae:	697a      	ldr	r2, [r7, #20]
 80148b0:	2380      	movs	r3, #128	@ 0x80
 80148b2:	049b      	lsls	r3, r3, #18
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d106      	bne.n	80148c6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80148b8:	693a      	ldr	r2, [r7, #16]
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	0011      	movs	r1, r2
 80148be:	0018      	movs	r0, r3
 80148c0:	f000 ff56 	bl	8015770 <I2C_ITListenCplt>
 80148c4:	e036      	b.n	8014934 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	2241      	movs	r2, #65	@ 0x41
 80148ca:	5c9b      	ldrb	r3, [r3, r2]
 80148cc:	b2db      	uxtb	r3, r3
 80148ce:	2b29      	cmp	r3, #41	@ 0x29
 80148d0:	d110      	bne.n	80148f4 <I2C_Slave_ISR_IT+0xb4>
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	4a59      	ldr	r2, [pc, #356]	@ (8014a3c <I2C_Slave_ISR_IT+0x1fc>)
 80148d6:	4293      	cmp	r3, r2
 80148d8:	d00c      	beq.n	80148f4 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	2210      	movs	r2, #16
 80148e0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	0018      	movs	r0, r3
 80148e6:	f001 f8c6 	bl	8015a76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	0018      	movs	r0, r3
 80148ee:	f000 fced 	bl	80152cc <I2C_ITSlaveSeqCplt>
 80148f2:	e01f      	b.n	8014934 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2210      	movs	r2, #16
 80148fa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80148fc:	e091      	b.n	8014a22 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	2210      	movs	r2, #16
 8014904:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801490a:	2204      	movs	r2, #4
 801490c:	431a      	orrs	r2, r3
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8014912:	697b      	ldr	r3, [r7, #20]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d005      	beq.n	8014924 <I2C_Slave_ISR_IT+0xe4>
 8014918:	697a      	ldr	r2, [r7, #20]
 801491a:	2380      	movs	r3, #128	@ 0x80
 801491c:	045b      	lsls	r3, r3, #17
 801491e:	429a      	cmp	r2, r3
 8014920:	d000      	beq.n	8014924 <I2C_Slave_ISR_IT+0xe4>
 8014922:	e07e      	b.n	8014a22 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	0011      	movs	r1, r2
 801492c:	0018      	movs	r0, r3
 801492e:	f000 ff77 	bl	8015820 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8014932:	e076      	b.n	8014a22 <I2C_Slave_ISR_IT+0x1e2>
 8014934:	e075      	b.n	8014a22 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	2204      	movs	r2, #4
 801493a:	4013      	ands	r3, r2
 801493c:	d02f      	beq.n	801499e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	2204      	movs	r2, #4
 8014942:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8014944:	d02b      	beq.n	801499e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801494a:	b29b      	uxth	r3, r3
 801494c:	2b00      	cmp	r3, #0
 801494e:	d018      	beq.n	8014982 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801495a:	b2d2      	uxtb	r2, r2
 801495c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014962:	1c5a      	adds	r2, r3, #1
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801496c:	3b01      	subs	r3, #1
 801496e:	b29a      	uxth	r2, r3
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014978:	b29b      	uxth	r3, r3
 801497a:	3b01      	subs	r3, #1
 801497c:	b29a      	uxth	r2, r3
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014986:	b29b      	uxth	r3, r3
 8014988:	2b00      	cmp	r3, #0
 801498a:	d14c      	bne.n	8014a26 <I2C_Slave_ISR_IT+0x1e6>
 801498c:	697b      	ldr	r3, [r7, #20]
 801498e:	4a2b      	ldr	r2, [pc, #172]	@ (8014a3c <I2C_Slave_ISR_IT+0x1fc>)
 8014990:	4293      	cmp	r3, r2
 8014992:	d048      	beq.n	8014a26 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	0018      	movs	r0, r3
 8014998:	f000 fc98 	bl	80152cc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 801499c:	e043      	b.n	8014a26 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	2208      	movs	r2, #8
 80149a2:	4013      	ands	r3, r2
 80149a4:	d00a      	beq.n	80149bc <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	2208      	movs	r2, #8
 80149aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80149ac:	d006      	beq.n	80149bc <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80149ae:	693a      	ldr	r2, [r7, #16]
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	0011      	movs	r1, r2
 80149b4:	0018      	movs	r0, r3
 80149b6:	f000 fba3 	bl	8015100 <I2C_ITAddrCplt>
 80149ba:	e035      	b.n	8014a28 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80149bc:	693b      	ldr	r3, [r7, #16]
 80149be:	2202      	movs	r2, #2
 80149c0:	4013      	ands	r3, r2
 80149c2:	d031      	beq.n	8014a28 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	2202      	movs	r2, #2
 80149c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80149ca:	d02d      	beq.n	8014a28 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80149d0:	b29b      	uxth	r3, r3
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d018      	beq.n	8014a08 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149da:	781a      	ldrb	r2, [r3, #0]
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149e6:	1c5a      	adds	r2, r3, #1
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	3b01      	subs	r3, #1
 80149f4:	b29a      	uxth	r2, r3
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80149fe:	3b01      	subs	r3, #1
 8014a00:	b29a      	uxth	r2, r3
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014a06:	e00f      	b.n	8014a28 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8014a08:	697a      	ldr	r2, [r7, #20]
 8014a0a:	2380      	movs	r3, #128	@ 0x80
 8014a0c:	045b      	lsls	r3, r3, #17
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d002      	beq.n	8014a18 <I2C_Slave_ISR_IT+0x1d8>
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d107      	bne.n	8014a28 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	0018      	movs	r0, r3
 8014a1c:	f000 fc56 	bl	80152cc <I2C_ITSlaveSeqCplt>
 8014a20:	e002      	b.n	8014a28 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8014a22:	46c0      	nop			@ (mov r8, r8)
 8014a24:	e000      	b.n	8014a28 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8014a26:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	2240      	movs	r2, #64	@ 0x40
 8014a2c:	2100      	movs	r1, #0
 8014a2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014a30:	2300      	movs	r3, #0
}
 8014a32:	0018      	movs	r0, r3
 8014a34:	46bd      	mov	sp, r7
 8014a36:	b006      	add	sp, #24
 8014a38:	bd80      	pop	{r7, pc}
 8014a3a:	46c0      	nop			@ (mov r8, r8)
 8014a3c:	ffff0000 	.word	0xffff0000

08014a40 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8014a40:	b590      	push	{r4, r7, lr}
 8014a42:	b089      	sub	sp, #36	@ 0x24
 8014a44:	af02      	add	r7, sp, #8
 8014a46:	60f8      	str	r0, [r7, #12]
 8014a48:	60b9      	str	r1, [r7, #8]
 8014a4a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	2240      	movs	r2, #64	@ 0x40
 8014a50:	5c9b      	ldrb	r3, [r3, r2]
 8014a52:	2b01      	cmp	r3, #1
 8014a54:	d101      	bne.n	8014a5a <I2C_Master_ISR_DMA+0x1a>
 8014a56:	2302      	movs	r3, #2
 8014a58:	e0e7      	b.n	8014c2a <I2C_Master_ISR_DMA+0x1ea>
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	2240      	movs	r2, #64	@ 0x40
 8014a5e:	2101      	movs	r1, #1
 8014a60:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	2210      	movs	r2, #16
 8014a66:	4013      	ands	r3, r2
 8014a68:	d017      	beq.n	8014a9a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2210      	movs	r2, #16
 8014a6e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014a70:	d013      	beq.n	8014a9a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	2210      	movs	r2, #16
 8014a78:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014a7e:	2204      	movs	r2, #4
 8014a80:	431a      	orrs	r2, r3
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	2120      	movs	r1, #32
 8014a8a:	0018      	movs	r0, r3
 8014a8c:	f001 fb7a 	bl	8016184 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	0018      	movs	r0, r3
 8014a94:	f000 ffef 	bl	8015a76 <I2C_Flush_TXDR>
 8014a98:	e0c2      	b.n	8014c20 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	2280      	movs	r2, #128	@ 0x80
 8014a9e:	4013      	ands	r3, r2
 8014aa0:	d100      	bne.n	8014aa4 <I2C_Master_ISR_DMA+0x64>
 8014aa2:	e07c      	b.n	8014b9e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	2240      	movs	r2, #64	@ 0x40
 8014aa8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014aaa:	d100      	bne.n	8014aae <I2C_Master_ISR_DMA+0x6e>
 8014aac:	e077      	b.n	8014b9e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	681a      	ldr	r2, [r3, #0]
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	2140      	movs	r1, #64	@ 0x40
 8014aba:	438a      	bics	r2, r1
 8014abc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ac2:	b29b      	uxth	r3, r3
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d055      	beq.n	8014b74 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	685b      	ldr	r3, [r3, #4]
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	2312      	movs	r3, #18
 8014ad2:	18fb      	adds	r3, r7, r3
 8014ad4:	0592      	lsls	r2, r2, #22
 8014ad6:	0d92      	lsrs	r2, r2, #22
 8014ad8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ade:	b29b      	uxth	r3, r3
 8014ae0:	2bff      	cmp	r3, #255	@ 0xff
 8014ae2:	d906      	bls.n	8014af2 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	22ff      	movs	r2, #255	@ 0xff
 8014ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8014aea:	2380      	movs	r3, #128	@ 0x80
 8014aec:	045b      	lsls	r3, r3, #17
 8014aee:	617b      	str	r3, [r7, #20]
 8014af0:	e010      	b.n	8014b14 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014af6:	b29a      	uxth	r2, r3
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b00:	4a4c      	ldr	r2, [pc, #304]	@ (8014c34 <I2C_Master_ISR_DMA+0x1f4>)
 8014b02:	4293      	cmp	r3, r2
 8014b04:	d003      	beq.n	8014b0e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b0a:	617b      	str	r3, [r7, #20]
 8014b0c:	e002      	b.n	8014b14 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8014b0e:	2380      	movs	r3, #128	@ 0x80
 8014b10:	049b      	lsls	r3, r3, #18
 8014b12:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b18:	b2da      	uxtb	r2, r3
 8014b1a:	697c      	ldr	r4, [r7, #20]
 8014b1c:	2312      	movs	r3, #18
 8014b1e:	18fb      	adds	r3, r7, r3
 8014b20:	8819      	ldrh	r1, [r3, #0]
 8014b22:	68f8      	ldr	r0, [r7, #12]
 8014b24:	2300      	movs	r3, #0
 8014b26:	9300      	str	r3, [sp, #0]
 8014b28:	0023      	movs	r3, r4
 8014b2a:	f001 faf1 	bl	8016110 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014b32:	b29a      	uxth	r2, r3
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014b38:	1ad3      	subs	r3, r2, r3
 8014b3a:	b29a      	uxth	r2, r3
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	2241      	movs	r2, #65	@ 0x41
 8014b44:	5c9b      	ldrb	r3, [r3, r2]
 8014b46:	b2db      	uxtb	r3, r3
 8014b48:	2b22      	cmp	r3, #34	@ 0x22
 8014b4a:	d109      	bne.n	8014b60 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	681a      	ldr	r2, [r3, #0]
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	2180      	movs	r1, #128	@ 0x80
 8014b58:	0209      	lsls	r1, r1, #8
 8014b5a:	430a      	orrs	r2, r1
 8014b5c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014b5e:	e05f      	b.n	8014c20 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	681a      	ldr	r2, [r3, #0]
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	2180      	movs	r1, #128	@ 0x80
 8014b6c:	01c9      	lsls	r1, r1, #7
 8014b6e:	430a      	orrs	r2, r1
 8014b70:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014b72:	e055      	b.n	8014c20 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	685a      	ldr	r2, [r3, #4]
 8014b7a:	2380      	movs	r3, #128	@ 0x80
 8014b7c:	049b      	lsls	r3, r3, #18
 8014b7e:	401a      	ands	r2, r3
 8014b80:	2380      	movs	r3, #128	@ 0x80
 8014b82:	049b      	lsls	r3, r3, #18
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d004      	beq.n	8014b92 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	0018      	movs	r0, r3
 8014b8c:	f000 fb5c 	bl	8015248 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8014b90:	e046      	b.n	8014c20 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	2140      	movs	r1, #64	@ 0x40
 8014b96:	0018      	movs	r0, r3
 8014b98:	f000 fe42 	bl	8015820 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8014b9c:	e040      	b.n	8014c20 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	2240      	movs	r2, #64	@ 0x40
 8014ba2:	4013      	ands	r3, r2
 8014ba4:	d02c      	beq.n	8014c00 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2240      	movs	r2, #64	@ 0x40
 8014baa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014bac:	d028      	beq.n	8014c00 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014bb2:	b29b      	uxth	r3, r3
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d11d      	bne.n	8014bf4 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	685a      	ldr	r2, [r3, #4]
 8014bbe:	2380      	movs	r3, #128	@ 0x80
 8014bc0:	049b      	lsls	r3, r3, #18
 8014bc2:	401a      	ands	r2, r3
 8014bc4:	2380      	movs	r3, #128	@ 0x80
 8014bc6:	049b      	lsls	r3, r3, #18
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d028      	beq.n	8014c1e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bd0:	4a18      	ldr	r2, [pc, #96]	@ (8014c34 <I2C_Master_ISR_DMA+0x1f4>)
 8014bd2:	4293      	cmp	r3, r2
 8014bd4:	d109      	bne.n	8014bea <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	685a      	ldr	r2, [r3, #4]
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	2180      	movs	r1, #128	@ 0x80
 8014be2:	01c9      	lsls	r1, r1, #7
 8014be4:	430a      	orrs	r2, r1
 8014be6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8014be8:	e019      	b.n	8014c1e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	0018      	movs	r0, r3
 8014bee:	f000 fb2b 	bl	8015248 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8014bf2:	e014      	b.n	8014c1e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	2140      	movs	r1, #64	@ 0x40
 8014bf8:	0018      	movs	r0, r3
 8014bfa:	f000 fe11 	bl	8015820 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8014bfe:	e00e      	b.n	8014c1e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	2220      	movs	r2, #32
 8014c04:	4013      	ands	r3, r2
 8014c06:	d00b      	beq.n	8014c20 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	2220      	movs	r2, #32
 8014c0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014c0e:	d007      	beq.n	8014c20 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8014c10:	68ba      	ldr	r2, [r7, #8]
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	0011      	movs	r1, r2
 8014c16:	0018      	movs	r0, r3
 8014c18:	f000 fbbc 	bl	8015394 <I2C_ITMasterCplt>
 8014c1c:	e000      	b.n	8014c20 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8014c1e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	2240      	movs	r2, #64	@ 0x40
 8014c24:	2100      	movs	r1, #0
 8014c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014c28:	2300      	movs	r3, #0
}
 8014c2a:	0018      	movs	r0, r3
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	b007      	add	sp, #28
 8014c30:	bd90      	pop	{r4, r7, pc}
 8014c32:	46c0      	nop			@ (mov r8, r8)
 8014c34:	ffff0000 	.word	0xffff0000

08014c38 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8014c38:	b590      	push	{r4, r7, lr}
 8014c3a:	b089      	sub	sp, #36	@ 0x24
 8014c3c:	af02      	add	r7, sp, #8
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	60b9      	str	r1, [r7, #8]
 8014c42:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8014c44:	4b88      	ldr	r3, [pc, #544]	@ (8014e68 <I2C_Mem_ISR_DMA+0x230>)
 8014c46:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	2240      	movs	r2, #64	@ 0x40
 8014c4c:	5c9b      	ldrb	r3, [r3, r2]
 8014c4e:	2b01      	cmp	r3, #1
 8014c50:	d101      	bne.n	8014c56 <I2C_Mem_ISR_DMA+0x1e>
 8014c52:	2302      	movs	r3, #2
 8014c54:	e104      	b.n	8014e60 <I2C_Mem_ISR_DMA+0x228>
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	2240      	movs	r2, #64	@ 0x40
 8014c5a:	2101      	movs	r1, #1
 8014c5c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014c5e:	68bb      	ldr	r3, [r7, #8]
 8014c60:	2210      	movs	r2, #16
 8014c62:	4013      	ands	r3, r2
 8014c64:	d017      	beq.n	8014c96 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2210      	movs	r2, #16
 8014c6a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014c6c:	d013      	beq.n	8014c96 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	2210      	movs	r2, #16
 8014c74:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c7a:	2204      	movs	r2, #4
 8014c7c:	431a      	orrs	r2, r3
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2120      	movs	r1, #32
 8014c86:	0018      	movs	r0, r3
 8014c88:	f001 fa7c 	bl	8016184 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	0018      	movs	r0, r3
 8014c90:	f000 fef1 	bl	8015a76 <I2C_Flush_TXDR>
 8014c94:	e0df      	b.n	8014e56 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014c96:	68bb      	ldr	r3, [r7, #8]
 8014c98:	2202      	movs	r2, #2
 8014c9a:	4013      	ands	r3, r2
 8014c9c:	d00d      	beq.n	8014cba <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	2202      	movs	r2, #2
 8014ca2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8014ca4:	d009      	beq.n	8014cba <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	68fa      	ldr	r2, [r7, #12]
 8014cac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8014cae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	4252      	negs	r2, r2
 8014cb6:	651a      	str	r2, [r3, #80]	@ 0x50
 8014cb8:	e0cd      	b.n	8014e56 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014cba:	68bb      	ldr	r3, [r7, #8]
 8014cbc:	2280      	movs	r2, #128	@ 0x80
 8014cbe:	4013      	ands	r3, r2
 8014cc0:	d05e      	beq.n	8014d80 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	2240      	movs	r2, #64	@ 0x40
 8014cc6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8014cc8:	d05a      	beq.n	8014d80 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2110      	movs	r1, #16
 8014cce:	0018      	movs	r0, r3
 8014cd0:	f001 fa58 	bl	8016184 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d04a      	beq.n	8014d74 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014ce2:	b29b      	uxth	r3, r3
 8014ce4:	2bff      	cmp	r3, #255	@ 0xff
 8014ce6:	d910      	bls.n	8014d0a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	22ff      	movs	r2, #255	@ 0xff
 8014cec:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014cf2:	b299      	uxth	r1, r3
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014cf8:	b2da      	uxtb	r2, r3
 8014cfa:	2380      	movs	r3, #128	@ 0x80
 8014cfc:	045b      	lsls	r3, r3, #17
 8014cfe:	68f8      	ldr	r0, [r7, #12]
 8014d00:	2400      	movs	r4, #0
 8014d02:	9400      	str	r4, [sp, #0]
 8014d04:	f001 fa04 	bl	8016110 <I2C_TransferConfig>
 8014d08:	e011      	b.n	8014d2e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d0e:	b29a      	uxth	r2, r3
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014d18:	b299      	uxth	r1, r3
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d1e:	b2da      	uxtb	r2, r3
 8014d20:	2380      	movs	r3, #128	@ 0x80
 8014d22:	049b      	lsls	r3, r3, #18
 8014d24:	68f8      	ldr	r0, [r7, #12]
 8014d26:	2400      	movs	r4, #0
 8014d28:	9400      	str	r4, [sp, #0]
 8014d2a:	f001 f9f1 	bl	8016110 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d38:	1ad3      	subs	r3, r2, r3
 8014d3a:	b29a      	uxth	r2, r3
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	2241      	movs	r2, #65	@ 0x41
 8014d44:	5c9b      	ldrb	r3, [r3, r2]
 8014d46:	b2db      	uxtb	r3, r3
 8014d48:	2b22      	cmp	r3, #34	@ 0x22
 8014d4a:	d109      	bne.n	8014d60 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	681a      	ldr	r2, [r3, #0]
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	2180      	movs	r1, #128	@ 0x80
 8014d58:	0209      	lsls	r1, r1, #8
 8014d5a:	430a      	orrs	r2, r1
 8014d5c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014d5e:	e07a      	b.n	8014e56 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	681a      	ldr	r2, [r3, #0]
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	2180      	movs	r1, #128	@ 0x80
 8014d6c:	01c9      	lsls	r1, r1, #7
 8014d6e:	430a      	orrs	r2, r1
 8014d70:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8014d72:	e070      	b.n	8014e56 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	2140      	movs	r1, #64	@ 0x40
 8014d78:	0018      	movs	r0, r3
 8014d7a:	f000 fd51 	bl	8015820 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8014d7e:	e06a      	b.n	8014e56 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	2240      	movs	r2, #64	@ 0x40
 8014d84:	4013      	ands	r3, r2
 8014d86:	d058      	beq.n	8014e3a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2240      	movs	r2, #64	@ 0x40
 8014d8c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8014d8e:	d054      	beq.n	8014e3a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	2241      	movs	r2, #65	@ 0x41
 8014d94:	5c9b      	ldrb	r3, [r3, r2]
 8014d96:	b2db      	uxtb	r3, r3
 8014d98:	2b22      	cmp	r3, #34	@ 0x22
 8014d9a:	d101      	bne.n	8014da0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8014d9c:	4b33      	ldr	r3, [pc, #204]	@ (8014e6c <I2C_Mem_ISR_DMA+0x234>)
 8014d9e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014da4:	b29b      	uxth	r3, r3
 8014da6:	2bff      	cmp	r3, #255	@ 0xff
 8014da8:	d911      	bls.n	8014dce <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	22ff      	movs	r2, #255	@ 0xff
 8014dae:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014db4:	b299      	uxth	r1, r3
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014dba:	b2da      	uxtb	r2, r3
 8014dbc:	2380      	movs	r3, #128	@ 0x80
 8014dbe:	045c      	lsls	r4, r3, #17
 8014dc0:	68f8      	ldr	r0, [r7, #12]
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	9300      	str	r3, [sp, #0]
 8014dc6:	0023      	movs	r3, r4
 8014dc8:	f001 f9a2 	bl	8016110 <I2C_TransferConfig>
 8014dcc:	e012      	b.n	8014df4 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014dd2:	b29a      	uxth	r2, r3
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ddc:	b299      	uxth	r1, r3
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014de2:	b2da      	uxtb	r2, r3
 8014de4:	2380      	movs	r3, #128	@ 0x80
 8014de6:	049c      	lsls	r4, r3, #18
 8014de8:	68f8      	ldr	r0, [r7, #12]
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	9300      	str	r3, [sp, #0]
 8014dee:	0023      	movs	r3, r4
 8014df0:	f001 f98e 	bl	8016110 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014df8:	b29a      	uxth	r2, r3
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014dfe:	1ad3      	subs	r3, r2, r3
 8014e00:	b29a      	uxth	r2, r3
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	2241      	movs	r2, #65	@ 0x41
 8014e0a:	5c9b      	ldrb	r3, [r3, r2]
 8014e0c:	b2db      	uxtb	r3, r3
 8014e0e:	2b22      	cmp	r3, #34	@ 0x22
 8014e10:	d109      	bne.n	8014e26 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	681a      	ldr	r2, [r3, #0]
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	2180      	movs	r1, #128	@ 0x80
 8014e1e:	0209      	lsls	r1, r1, #8
 8014e20:	430a      	orrs	r2, r1
 8014e22:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014e24:	e017      	b.n	8014e56 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	2180      	movs	r1, #128	@ 0x80
 8014e32:	01c9      	lsls	r1, r1, #7
 8014e34:	430a      	orrs	r2, r1
 8014e36:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8014e38:	e00d      	b.n	8014e56 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	2220      	movs	r2, #32
 8014e3e:	4013      	ands	r3, r2
 8014e40:	d009      	beq.n	8014e56 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2220      	movs	r2, #32
 8014e46:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014e48:	d005      	beq.n	8014e56 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8014e4a:	68ba      	ldr	r2, [r7, #8]
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	0011      	movs	r1, r2
 8014e50:	0018      	movs	r0, r3
 8014e52:	f000 fa9f 	bl	8015394 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	2240      	movs	r2, #64	@ 0x40
 8014e5a:	2100      	movs	r1, #0
 8014e5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014e5e:	2300      	movs	r3, #0
}
 8014e60:	0018      	movs	r0, r3
 8014e62:	46bd      	mov	sp, r7
 8014e64:	b007      	add	sp, #28
 8014e66:	bd90      	pop	{r4, r7, pc}
 8014e68:	80002000 	.word	0x80002000
 8014e6c:	80002400 	.word	0x80002400

08014e70 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b088      	sub	sp, #32
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	60f8      	str	r0, [r7, #12]
 8014e78:	60b9      	str	r1, [r7, #8]
 8014e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e80:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8014e82:	2300      	movs	r3, #0
 8014e84:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	2240      	movs	r2, #64	@ 0x40
 8014e8a:	5c9b      	ldrb	r3, [r3, r2]
 8014e8c:	2b01      	cmp	r3, #1
 8014e8e:	d101      	bne.n	8014e94 <I2C_Slave_ISR_DMA+0x24>
 8014e90:	2302      	movs	r3, #2
 8014e92:	e0cd      	b.n	8015030 <I2C_Slave_ISR_DMA+0x1c0>
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	2240      	movs	r2, #64	@ 0x40
 8014e98:	2101      	movs	r1, #1
 8014e9a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	2220      	movs	r2, #32
 8014ea0:	4013      	ands	r3, r2
 8014ea2:	d009      	beq.n	8014eb8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2220      	movs	r2, #32
 8014ea8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8014eaa:	d005      	beq.n	8014eb8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8014eac:	68ba      	ldr	r2, [r7, #8]
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	0011      	movs	r1, r2
 8014eb2:	0018      	movs	r0, r3
 8014eb4:	f000 fb3c 	bl	8015530 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	2210      	movs	r2, #16
 8014ebc:	4013      	ands	r3, r2
 8014ebe:	d100      	bne.n	8014ec2 <I2C_Slave_ISR_DMA+0x52>
 8014ec0:	e0a3      	b.n	801500a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2210      	movs	r2, #16
 8014ec6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8014ec8:	d100      	bne.n	8014ecc <I2C_Slave_ISR_DMA+0x5c>
 8014eca:	e09e      	b.n	801500a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014ecc:	687a      	ldr	r2, [r7, #4]
 8014ece:	2380      	movs	r3, #128	@ 0x80
 8014ed0:	01db      	lsls	r3, r3, #7
 8014ed2:	4013      	ands	r3, r2
 8014ed4:	d105      	bne.n	8014ee2 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8014ed6:	687a      	ldr	r2, [r7, #4]
 8014ed8:	2380      	movs	r3, #128	@ 0x80
 8014eda:	021b      	lsls	r3, r3, #8
 8014edc:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8014ede:	d100      	bne.n	8014ee2 <I2C_Slave_ISR_DMA+0x72>
 8014ee0:	e08c      	b.n	8014ffc <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d00c      	beq.n	8014f04 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8014eea:	687a      	ldr	r2, [r7, #4]
 8014eec:	2380      	movs	r3, #128	@ 0x80
 8014eee:	021b      	lsls	r3, r3, #8
 8014ef0:	4013      	ands	r3, r2
 8014ef2:	d007      	beq.n	8014f04 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	685b      	ldr	r3, [r3, #4]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d101      	bne.n	8014f04 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8014f00:	2301      	movs	r3, #1
 8014f02:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d00c      	beq.n	8014f26 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8014f0c:	687a      	ldr	r2, [r7, #4]
 8014f0e:	2380      	movs	r3, #128	@ 0x80
 8014f10:	01db      	lsls	r3, r3, #7
 8014f12:	4013      	ands	r3, r2
 8014f14:	d007      	beq.n	8014f26 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	685b      	ldr	r3, [r3, #4]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d101      	bne.n	8014f26 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8014f22:	2301      	movs	r3, #1
 8014f24:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8014f26:	69fb      	ldr	r3, [r7, #28]
 8014f28:	2b01      	cmp	r3, #1
 8014f2a:	d12d      	bne.n	8014f88 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	2241      	movs	r2, #65	@ 0x41
 8014f30:	5c9b      	ldrb	r3, [r3, r2]
 8014f32:	b2db      	uxtb	r3, r3
 8014f34:	2b28      	cmp	r3, #40	@ 0x28
 8014f36:	d10b      	bne.n	8014f50 <I2C_Slave_ISR_DMA+0xe0>
 8014f38:	69ba      	ldr	r2, [r7, #24]
 8014f3a:	2380      	movs	r3, #128	@ 0x80
 8014f3c:	049b      	lsls	r3, r3, #18
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d106      	bne.n	8014f50 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8014f42:	68ba      	ldr	r2, [r7, #8]
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	0011      	movs	r1, r2
 8014f48:	0018      	movs	r0, r3
 8014f4a:	f000 fc11 	bl	8015770 <I2C_ITListenCplt>
 8014f4e:	e054      	b.n	8014ffa <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	2241      	movs	r2, #65	@ 0x41
 8014f54:	5c9b      	ldrb	r3, [r3, r2]
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	2b29      	cmp	r3, #41	@ 0x29
 8014f5a:	d110      	bne.n	8014f7e <I2C_Slave_ISR_DMA+0x10e>
 8014f5c:	69bb      	ldr	r3, [r7, #24]
 8014f5e:	4a36      	ldr	r2, [pc, #216]	@ (8015038 <I2C_Slave_ISR_DMA+0x1c8>)
 8014f60:	4293      	cmp	r3, r2
 8014f62:	d00c      	beq.n	8014f7e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	2210      	movs	r2, #16
 8014f6a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	0018      	movs	r0, r3
 8014f70:	f000 fd81 	bl	8015a76 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	0018      	movs	r0, r3
 8014f78:	f000 f9a8 	bl	80152cc <I2C_ITSlaveSeqCplt>
 8014f7c:	e03d      	b.n	8014ffa <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2210      	movs	r2, #16
 8014f84:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8014f86:	e03e      	b.n	8015006 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	2210      	movs	r2, #16
 8014f8e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f94:	2204      	movs	r2, #4
 8014f96:	431a      	orrs	r2, r3
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8014f9c:	2317      	movs	r3, #23
 8014f9e:	18fb      	adds	r3, r7, r3
 8014fa0:	68fa      	ldr	r2, [r7, #12]
 8014fa2:	2141      	movs	r1, #65	@ 0x41
 8014fa4:	5c52      	ldrb	r2, [r2, r1]
 8014fa6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8014fa8:	69bb      	ldr	r3, [r7, #24]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d004      	beq.n	8014fb8 <I2C_Slave_ISR_DMA+0x148>
 8014fae:	69ba      	ldr	r2, [r7, #24]
 8014fb0:	2380      	movs	r3, #128	@ 0x80
 8014fb2:	045b      	lsls	r3, r3, #17
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d126      	bne.n	8015006 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8014fb8:	2217      	movs	r2, #23
 8014fba:	18bb      	adds	r3, r7, r2
 8014fbc:	781b      	ldrb	r3, [r3, #0]
 8014fbe:	2b21      	cmp	r3, #33	@ 0x21
 8014fc0:	d003      	beq.n	8014fca <I2C_Slave_ISR_DMA+0x15a>
 8014fc2:	18bb      	adds	r3, r7, r2
 8014fc4:	781b      	ldrb	r3, [r3, #0]
 8014fc6:	2b29      	cmp	r3, #41	@ 0x29
 8014fc8:	d103      	bne.n	8014fd2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	2221      	movs	r2, #33	@ 0x21
 8014fce:	631a      	str	r2, [r3, #48]	@ 0x30
 8014fd0:	e00b      	b.n	8014fea <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8014fd2:	2217      	movs	r2, #23
 8014fd4:	18bb      	adds	r3, r7, r2
 8014fd6:	781b      	ldrb	r3, [r3, #0]
 8014fd8:	2b22      	cmp	r3, #34	@ 0x22
 8014fda:	d003      	beq.n	8014fe4 <I2C_Slave_ISR_DMA+0x174>
 8014fdc:	18bb      	adds	r3, r7, r2
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8014fe2:	d102      	bne.n	8014fea <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	2222      	movs	r2, #34	@ 0x22
 8014fe8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	0011      	movs	r1, r2
 8014ff2:	0018      	movs	r0, r3
 8014ff4:	f000 fc14 	bl	8015820 <I2C_ITError>
      if (treatdmanack == 1U)
 8014ff8:	e005      	b.n	8015006 <I2C_Slave_ISR_DMA+0x196>
 8014ffa:	e004      	b.n	8015006 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	2210      	movs	r2, #16
 8015002:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8015004:	e00f      	b.n	8015026 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8015006:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8015008:	e00d      	b.n	8015026 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	2208      	movs	r2, #8
 801500e:	4013      	ands	r3, r2
 8015010:	d009      	beq.n	8015026 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2208      	movs	r2, #8
 8015016:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8015018:	d005      	beq.n	8015026 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801501a:	68ba      	ldr	r2, [r7, #8]
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	0011      	movs	r1, r2
 8015020:	0018      	movs	r0, r3
 8015022:	f000 f86d 	bl	8015100 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	2240      	movs	r2, #64	@ 0x40
 801502a:	2100      	movs	r1, #0
 801502c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801502e:	2300      	movs	r3, #0
}
 8015030:	0018      	movs	r0, r3
 8015032:	46bd      	mov	sp, r7
 8015034:	b008      	add	sp, #32
 8015036:	bd80      	pop	{r7, pc}
 8015038:	ffff0000 	.word	0xffff0000

0801503c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801503c:	b5b0      	push	{r4, r5, r7, lr}
 801503e:	b086      	sub	sp, #24
 8015040:	af02      	add	r7, sp, #8
 8015042:	60f8      	str	r0, [r7, #12]
 8015044:	000c      	movs	r4, r1
 8015046:	0010      	movs	r0, r2
 8015048:	0019      	movs	r1, r3
 801504a:	250a      	movs	r5, #10
 801504c:	197b      	adds	r3, r7, r5
 801504e:	1c22      	adds	r2, r4, #0
 8015050:	801a      	strh	r2, [r3, #0]
 8015052:	2308      	movs	r3, #8
 8015054:	18fb      	adds	r3, r7, r3
 8015056:	1c02      	adds	r2, r0, #0
 8015058:	801a      	strh	r2, [r3, #0]
 801505a:	1dbb      	adds	r3, r7, #6
 801505c:	1c0a      	adds	r2, r1, #0
 801505e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8015060:	1dbb      	adds	r3, r7, #6
 8015062:	881b      	ldrh	r3, [r3, #0]
 8015064:	b2da      	uxtb	r2, r3
 8015066:	197b      	adds	r3, r7, r5
 8015068:	8819      	ldrh	r1, [r3, #0]
 801506a:	68f8      	ldr	r0, [r7, #12]
 801506c:	4b23      	ldr	r3, [pc, #140]	@ (80150fc <I2C_RequestMemoryRead+0xc0>)
 801506e:	9300      	str	r3, [sp, #0]
 8015070:	2300      	movs	r3, #0
 8015072:	f001 f84d 	bl	8016110 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8015076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015078:	6a39      	ldr	r1, [r7, #32]
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	0018      	movs	r0, r3
 801507e:	f000 fe43 	bl	8015d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8015082:	1e03      	subs	r3, r0, #0
 8015084:	d001      	beq.n	801508a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8015086:	2301      	movs	r3, #1
 8015088:	e033      	b.n	80150f2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801508a:	1dbb      	adds	r3, r7, #6
 801508c:	881b      	ldrh	r3, [r3, #0]
 801508e:	2b01      	cmp	r3, #1
 8015090:	d107      	bne.n	80150a2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8015092:	2308      	movs	r3, #8
 8015094:	18fb      	adds	r3, r7, r3
 8015096:	881b      	ldrh	r3, [r3, #0]
 8015098:	b2da      	uxtb	r2, r3
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	629a      	str	r2, [r3, #40]	@ 0x28
 80150a0:	e019      	b.n	80150d6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80150a2:	2308      	movs	r3, #8
 80150a4:	18fb      	adds	r3, r7, r3
 80150a6:	881b      	ldrh	r3, [r3, #0]
 80150a8:	0a1b      	lsrs	r3, r3, #8
 80150aa:	b29b      	uxth	r3, r3
 80150ac:	b2da      	uxtb	r2, r3
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80150b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150b6:	6a39      	ldr	r1, [r7, #32]
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	0018      	movs	r0, r3
 80150bc:	f000 fe24 	bl	8015d08 <I2C_WaitOnTXISFlagUntilTimeout>
 80150c0:	1e03      	subs	r3, r0, #0
 80150c2:	d001      	beq.n	80150c8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80150c4:	2301      	movs	r3, #1
 80150c6:	e014      	b.n	80150f2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80150c8:	2308      	movs	r3, #8
 80150ca:	18fb      	adds	r3, r7, r3
 80150cc:	881b      	ldrh	r3, [r3, #0]
 80150ce:	b2da      	uxtb	r2, r3
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80150d6:	6a3a      	ldr	r2, [r7, #32]
 80150d8:	68f8      	ldr	r0, [r7, #12]
 80150da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150dc:	9300      	str	r3, [sp, #0]
 80150de:	0013      	movs	r3, r2
 80150e0:	2200      	movs	r2, #0
 80150e2:	2140      	movs	r1, #64	@ 0x40
 80150e4:	f000 fdc2 	bl	8015c6c <I2C_WaitOnFlagUntilTimeout>
 80150e8:	1e03      	subs	r3, r0, #0
 80150ea:	d001      	beq.n	80150f0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80150ec:	2301      	movs	r3, #1
 80150ee:	e000      	b.n	80150f2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80150f0:	2300      	movs	r3, #0
}
 80150f2:	0018      	movs	r0, r3
 80150f4:	46bd      	mov	sp, r7
 80150f6:	b004      	add	sp, #16
 80150f8:	bdb0      	pop	{r4, r5, r7, pc}
 80150fa:	46c0      	nop			@ (mov r8, r8)
 80150fc:	80002000 	.word	0x80002000

08015100 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015100:	b5b0      	push	{r4, r5, r7, lr}
 8015102:	b084      	sub	sp, #16
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	2241      	movs	r2, #65	@ 0x41
 801510e:	5c9b      	ldrb	r3, [r3, r2]
 8015110:	b2db      	uxtb	r3, r3
 8015112:	001a      	movs	r2, r3
 8015114:	2328      	movs	r3, #40	@ 0x28
 8015116:	4013      	ands	r3, r2
 8015118:	2b28      	cmp	r3, #40	@ 0x28
 801511a:	d000      	beq.n	801511e <I2C_ITAddrCplt+0x1e>
 801511c:	e088      	b.n	8015230 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	699b      	ldr	r3, [r3, #24]
 8015124:	0c1b      	lsrs	r3, r3, #16
 8015126:	b2da      	uxtb	r2, r3
 8015128:	250f      	movs	r5, #15
 801512a:	197b      	adds	r3, r7, r5
 801512c:	2101      	movs	r1, #1
 801512e:	400a      	ands	r2, r1
 8015130:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	699b      	ldr	r3, [r3, #24]
 8015138:	0c1b      	lsrs	r3, r3, #16
 801513a:	b29a      	uxth	r2, r3
 801513c:	200c      	movs	r0, #12
 801513e:	183b      	adds	r3, r7, r0
 8015140:	21fe      	movs	r1, #254	@ 0xfe
 8015142:	400a      	ands	r2, r1
 8015144:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	689b      	ldr	r3, [r3, #8]
 801514c:	b29a      	uxth	r2, r3
 801514e:	240a      	movs	r4, #10
 8015150:	193b      	adds	r3, r7, r4
 8015152:	0592      	lsls	r2, r2, #22
 8015154:	0d92      	lsrs	r2, r2, #22
 8015156:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	68db      	ldr	r3, [r3, #12]
 801515e:	b29a      	uxth	r2, r3
 8015160:	2308      	movs	r3, #8
 8015162:	18fb      	adds	r3, r7, r3
 8015164:	21fe      	movs	r1, #254	@ 0xfe
 8015166:	400a      	ands	r2, r1
 8015168:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	68db      	ldr	r3, [r3, #12]
 801516e:	2b02      	cmp	r3, #2
 8015170:	d148      	bne.n	8015204 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8015172:	0021      	movs	r1, r4
 8015174:	187b      	adds	r3, r7, r1
 8015176:	881b      	ldrh	r3, [r3, #0]
 8015178:	09db      	lsrs	r3, r3, #7
 801517a:	b29a      	uxth	r2, r3
 801517c:	183b      	adds	r3, r7, r0
 801517e:	881b      	ldrh	r3, [r3, #0]
 8015180:	4053      	eors	r3, r2
 8015182:	b29b      	uxth	r3, r3
 8015184:	001a      	movs	r2, r3
 8015186:	2306      	movs	r3, #6
 8015188:	4013      	ands	r3, r2
 801518a:	d120      	bne.n	80151ce <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 801518c:	183b      	adds	r3, r7, r0
 801518e:	187a      	adds	r2, r7, r1
 8015190:	8812      	ldrh	r2, [r2, #0]
 8015192:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015198:	1c5a      	adds	r2, r3, #1
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80151a2:	2b02      	cmp	r3, #2
 80151a4:	d14c      	bne.n	8015240 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	2200      	movs	r2, #0
 80151aa:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	2208      	movs	r2, #8
 80151b2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	2240      	movs	r2, #64	@ 0x40
 80151b8:	2100      	movs	r1, #0
 80151ba:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80151bc:	183b      	adds	r3, r7, r0
 80151be:	881a      	ldrh	r2, [r3, #0]
 80151c0:	197b      	adds	r3, r7, r5
 80151c2:	7819      	ldrb	r1, [r3, #0]
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	0018      	movs	r0, r3
 80151c8:	f7ff f9d7 	bl	801457a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80151cc:	e038      	b.n	8015240 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80151ce:	240c      	movs	r4, #12
 80151d0:	193b      	adds	r3, r7, r4
 80151d2:	2208      	movs	r2, #8
 80151d4:	18ba      	adds	r2, r7, r2
 80151d6:	8812      	ldrh	r2, [r2, #0]
 80151d8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80151da:	2380      	movs	r3, #128	@ 0x80
 80151dc:	021a      	lsls	r2, r3, #8
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	0011      	movs	r1, r2
 80151e2:	0018      	movs	r0, r3
 80151e4:	f001 f85c 	bl	80162a0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2240      	movs	r2, #64	@ 0x40
 80151ec:	2100      	movs	r1, #0
 80151ee:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80151f0:	193b      	adds	r3, r7, r4
 80151f2:	881a      	ldrh	r2, [r3, #0]
 80151f4:	230f      	movs	r3, #15
 80151f6:	18fb      	adds	r3, r7, r3
 80151f8:	7819      	ldrb	r1, [r3, #0]
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	0018      	movs	r0, r3
 80151fe:	f7ff f9bc 	bl	801457a <HAL_I2C_AddrCallback>
}
 8015202:	e01d      	b.n	8015240 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8015204:	2380      	movs	r3, #128	@ 0x80
 8015206:	021a      	lsls	r2, r3, #8
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	0011      	movs	r1, r2
 801520c:	0018      	movs	r0, r3
 801520e:	f001 f847 	bl	80162a0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	2240      	movs	r2, #64	@ 0x40
 8015216:	2100      	movs	r1, #0
 8015218:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801521a:	230c      	movs	r3, #12
 801521c:	18fb      	adds	r3, r7, r3
 801521e:	881a      	ldrh	r2, [r3, #0]
 8015220:	230f      	movs	r3, #15
 8015222:	18fb      	adds	r3, r7, r3
 8015224:	7819      	ldrb	r1, [r3, #0]
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	0018      	movs	r0, r3
 801522a:	f7ff f9a6 	bl	801457a <HAL_I2C_AddrCallback>
}
 801522e:	e007      	b.n	8015240 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	2208      	movs	r2, #8
 8015236:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	2240      	movs	r2, #64	@ 0x40
 801523c:	2100      	movs	r1, #0
 801523e:	5499      	strb	r1, [r3, r2]
}
 8015240:	46c0      	nop			@ (mov r8, r8)
 8015242:	46bd      	mov	sp, r7
 8015244:	b004      	add	sp, #16
 8015246:	bdb0      	pop	{r4, r5, r7, pc}

08015248 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2242      	movs	r2, #66	@ 0x42
 8015254:	2100      	movs	r1, #0
 8015256:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	2241      	movs	r2, #65	@ 0x41
 801525c:	5c9b      	ldrb	r3, [r3, r2]
 801525e:	b2db      	uxtb	r3, r3
 8015260:	2b21      	cmp	r3, #33	@ 0x21
 8015262:	d117      	bne.n	8015294 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	2241      	movs	r2, #65	@ 0x41
 8015268:	2120      	movs	r1, #32
 801526a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	2211      	movs	r2, #17
 8015270:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2200      	movs	r2, #0
 8015276:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2101      	movs	r1, #1
 801527c:	0018      	movs	r0, r3
 801527e:	f001 f80f 	bl	80162a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	2240      	movs	r2, #64	@ 0x40
 8015286:	2100      	movs	r1, #0
 8015288:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	0018      	movs	r0, r3
 801528e:	f7ff f954 	bl	801453a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8015292:	e016      	b.n	80152c2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2241      	movs	r2, #65	@ 0x41
 8015298:	2120      	movs	r1, #32
 801529a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2212      	movs	r2, #18
 80152a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2200      	movs	r2, #0
 80152a6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2102      	movs	r1, #2
 80152ac:	0018      	movs	r0, r3
 80152ae:	f000 fff7 	bl	80162a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2240      	movs	r2, #64	@ 0x40
 80152b6:	2100      	movs	r1, #0
 80152b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	0018      	movs	r0, r3
 80152be:	f7ff f944 	bl	801454a <HAL_I2C_MasterRxCpltCallback>
}
 80152c2:	46c0      	nop			@ (mov r8, r8)
 80152c4:	46bd      	mov	sp, r7
 80152c6:	b002      	add	sp, #8
 80152c8:	bd80      	pop	{r7, pc}
	...

080152cc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b084      	sub	sp, #16
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2242      	movs	r2, #66	@ 0x42
 80152e0:	2100      	movs	r1, #0
 80152e2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80152e4:	68fa      	ldr	r2, [r7, #12]
 80152e6:	2380      	movs	r3, #128	@ 0x80
 80152e8:	01db      	lsls	r3, r3, #7
 80152ea:	4013      	ands	r3, r2
 80152ec:	d008      	beq.n	8015300 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	681a      	ldr	r2, [r3, #0]
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	4924      	ldr	r1, [pc, #144]	@ (801538c <I2C_ITSlaveSeqCplt+0xc0>)
 80152fa:	400a      	ands	r2, r1
 80152fc:	601a      	str	r2, [r3, #0]
 80152fe:	e00c      	b.n	801531a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8015300:	68fa      	ldr	r2, [r7, #12]
 8015302:	2380      	movs	r3, #128	@ 0x80
 8015304:	021b      	lsls	r3, r3, #8
 8015306:	4013      	ands	r3, r2
 8015308:	d007      	beq.n	801531a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	681a      	ldr	r2, [r3, #0]
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	491e      	ldr	r1, [pc, #120]	@ (8015390 <I2C_ITSlaveSeqCplt+0xc4>)
 8015316:	400a      	ands	r2, r1
 8015318:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	2241      	movs	r2, #65	@ 0x41
 801531e:	5c9b      	ldrb	r3, [r3, r2]
 8015320:	b2db      	uxtb	r3, r3
 8015322:	2b29      	cmp	r3, #41	@ 0x29
 8015324:	d114      	bne.n	8015350 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	2241      	movs	r2, #65	@ 0x41
 801532a:	2128      	movs	r1, #40	@ 0x28
 801532c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	2221      	movs	r2, #33	@ 0x21
 8015332:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2101      	movs	r1, #1
 8015338:	0018      	movs	r0, r3
 801533a:	f000 ffb1 	bl	80162a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	2240      	movs	r2, #64	@ 0x40
 8015342:	2100      	movs	r1, #0
 8015344:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	0018      	movs	r0, r3
 801534a:	f7ff f906 	bl	801455a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801534e:	e019      	b.n	8015384 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2241      	movs	r2, #65	@ 0x41
 8015354:	5c9b      	ldrb	r3, [r3, r2]
 8015356:	b2db      	uxtb	r3, r3
 8015358:	2b2a      	cmp	r3, #42	@ 0x2a
 801535a:	d113      	bne.n	8015384 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2241      	movs	r2, #65	@ 0x41
 8015360:	2128      	movs	r1, #40	@ 0x28
 8015362:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	2222      	movs	r2, #34	@ 0x22
 8015368:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	2102      	movs	r1, #2
 801536e:	0018      	movs	r0, r3
 8015370:	f000 ff96 	bl	80162a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	2240      	movs	r2, #64	@ 0x40
 8015378:	2100      	movs	r1, #0
 801537a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	0018      	movs	r0, r3
 8015380:	f7ff f8f3 	bl	801456a <HAL_I2C_SlaveRxCpltCallback>
}
 8015384:	46c0      	nop			@ (mov r8, r8)
 8015386:	46bd      	mov	sp, r7
 8015388:	b004      	add	sp, #16
 801538a:	bd80      	pop	{r7, pc}
 801538c:	ffffbfff 	.word	0xffffbfff
 8015390:	ffff7fff 	.word	0xffff7fff

08015394 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b086      	sub	sp, #24
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
 801539c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801539e:	683b      	ldr	r3, [r7, #0]
 80153a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	2220      	movs	r2, #32
 80153a8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2241      	movs	r2, #65	@ 0x41
 80153ae:	5c9b      	ldrb	r3, [r3, r2]
 80153b0:	b2db      	uxtb	r3, r3
 80153b2:	2b21      	cmp	r3, #33	@ 0x21
 80153b4:	d108      	bne.n	80153c8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2101      	movs	r1, #1
 80153ba:	0018      	movs	r0, r3
 80153bc:	f000 ff70 	bl	80162a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2211      	movs	r2, #17
 80153c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80153c6:	e00d      	b.n	80153e4 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	2241      	movs	r2, #65	@ 0x41
 80153cc:	5c9b      	ldrb	r3, [r3, r2]
 80153ce:	b2db      	uxtb	r3, r3
 80153d0:	2b22      	cmp	r3, #34	@ 0x22
 80153d2:	d107      	bne.n	80153e4 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	2102      	movs	r1, #2
 80153d8:	0018      	movs	r0, r3
 80153da:	f000 ff61 	bl	80162a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2212      	movs	r2, #18
 80153e2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	685a      	ldr	r2, [r3, #4]
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	494e      	ldr	r1, [pc, #312]	@ (8015528 <I2C_ITMasterCplt+0x194>)
 80153f0:	400a      	ands	r2, r1
 80153f2:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2200      	movs	r2, #0
 80153f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	4a4b      	ldr	r2, [pc, #300]	@ (801552c <I2C_ITMasterCplt+0x198>)
 80153fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8015400:	697b      	ldr	r3, [r7, #20]
 8015402:	2210      	movs	r2, #16
 8015404:	4013      	ands	r3, r2
 8015406:	d009      	beq.n	801541c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	2210      	movs	r2, #16
 801540e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015414:	2204      	movs	r2, #4
 8015416:	431a      	orrs	r2, r3
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2241      	movs	r2, #65	@ 0x41
 8015420:	5c9b      	ldrb	r3, [r3, r2]
 8015422:	b2db      	uxtb	r3, r3
 8015424:	2b60      	cmp	r3, #96	@ 0x60
 8015426:	d109      	bne.n	801543c <I2C_ITMasterCplt+0xa8>
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	2204      	movs	r2, #4
 801542c:	4013      	ands	r3, r2
 801542e:	d005      	beq.n	801543c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015436:	b2db      	uxtb	r3, r3
 8015438:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 801543a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	0018      	movs	r0, r3
 8015440:	f000 fb19 	bl	8015a76 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015448:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2241      	movs	r2, #65	@ 0x41
 801544e:	5c9b      	ldrb	r3, [r3, r2]
 8015450:	b2db      	uxtb	r3, r3
 8015452:	2b60      	cmp	r3, #96	@ 0x60
 8015454:	d002      	beq.n	801545c <I2C_ITMasterCplt+0xc8>
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d007      	beq.n	801546c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	0011      	movs	r1, r2
 8015464:	0018      	movs	r0, r3
 8015466:	f000 f9db 	bl	8015820 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 801546a:	e058      	b.n	801551e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2241      	movs	r2, #65	@ 0x41
 8015470:	5c9b      	ldrb	r3, [r3, r2]
 8015472:	b2db      	uxtb	r3, r3
 8015474:	2b21      	cmp	r3, #33	@ 0x21
 8015476:	d126      	bne.n	80154c6 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2241      	movs	r2, #65	@ 0x41
 801547c:	2120      	movs	r1, #32
 801547e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2200      	movs	r2, #0
 8015484:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	2242      	movs	r2, #66	@ 0x42
 801548a:	5c9b      	ldrb	r3, [r3, r2]
 801548c:	b2db      	uxtb	r3, r3
 801548e:	2b40      	cmp	r3, #64	@ 0x40
 8015490:	d10c      	bne.n	80154ac <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2242      	movs	r2, #66	@ 0x42
 8015496:	2100      	movs	r1, #0
 8015498:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	2240      	movs	r2, #64	@ 0x40
 801549e:	2100      	movs	r1, #0
 80154a0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	0018      	movs	r0, r3
 80154a6:	f7ff f880 	bl	80145aa <HAL_I2C_MemTxCpltCallback>
}
 80154aa:	e038      	b.n	801551e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2242      	movs	r2, #66	@ 0x42
 80154b0:	2100      	movs	r1, #0
 80154b2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	2240      	movs	r2, #64	@ 0x40
 80154b8:	2100      	movs	r1, #0
 80154ba:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	0018      	movs	r0, r3
 80154c0:	f7ff f83b 	bl	801453a <HAL_I2C_MasterTxCpltCallback>
}
 80154c4:	e02b      	b.n	801551e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	2241      	movs	r2, #65	@ 0x41
 80154ca:	5c9b      	ldrb	r3, [r3, r2]
 80154cc:	b2db      	uxtb	r3, r3
 80154ce:	2b22      	cmp	r3, #34	@ 0x22
 80154d0:	d125      	bne.n	801551e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	2241      	movs	r2, #65	@ 0x41
 80154d6:	2120      	movs	r1, #32
 80154d8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	2200      	movs	r2, #0
 80154de:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2242      	movs	r2, #66	@ 0x42
 80154e4:	5c9b      	ldrb	r3, [r3, r2]
 80154e6:	b2db      	uxtb	r3, r3
 80154e8:	2b40      	cmp	r3, #64	@ 0x40
 80154ea:	d10c      	bne.n	8015506 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	2242      	movs	r2, #66	@ 0x42
 80154f0:	2100      	movs	r1, #0
 80154f2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	2240      	movs	r2, #64	@ 0x40
 80154f8:	2100      	movs	r1, #0
 80154fa:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	0018      	movs	r0, r3
 8015500:	f7ff f85b 	bl	80145ba <HAL_I2C_MemRxCpltCallback>
}
 8015504:	e00b      	b.n	801551e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	2242      	movs	r2, #66	@ 0x42
 801550a:	2100      	movs	r1, #0
 801550c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2240      	movs	r2, #64	@ 0x40
 8015512:	2100      	movs	r1, #0
 8015514:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	0018      	movs	r0, r3
 801551a:	f7ff f816 	bl	801454a <HAL_I2C_MasterRxCpltCallback>
}
 801551e:	46c0      	nop			@ (mov r8, r8)
 8015520:	46bd      	mov	sp, r7
 8015522:	b006      	add	sp, #24
 8015524:	bd80      	pop	{r7, pc}
 8015526:	46c0      	nop			@ (mov r8, r8)
 8015528:	fe00e800 	.word	0xfe00e800
 801552c:	ffff0000 	.word	0xffff0000

08015530 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b086      	sub	sp, #24
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8015546:	200f      	movs	r0, #15
 8015548:	183b      	adds	r3, r7, r0
 801554a:	687a      	ldr	r2, [r7, #4]
 801554c:	2141      	movs	r1, #65	@ 0x41
 801554e:	5c52      	ldrb	r2, [r2, r1]
 8015550:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	2220      	movs	r2, #32
 8015558:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801555a:	183b      	adds	r3, r7, r0
 801555c:	781b      	ldrb	r3, [r3, #0]
 801555e:	2b21      	cmp	r3, #33	@ 0x21
 8015560:	d003      	beq.n	801556a <I2C_ITSlaveCplt+0x3a>
 8015562:	183b      	adds	r3, r7, r0
 8015564:	781b      	ldrb	r3, [r3, #0]
 8015566:	2b29      	cmp	r3, #41	@ 0x29
 8015568:	d109      	bne.n	801557e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801556a:	4a7b      	ldr	r2, [pc, #492]	@ (8015758 <I2C_ITSlaveCplt+0x228>)
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	0011      	movs	r1, r2
 8015570:	0018      	movs	r0, r3
 8015572:	f000 fe95 	bl	80162a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	2221      	movs	r2, #33	@ 0x21
 801557a:	631a      	str	r2, [r3, #48]	@ 0x30
 801557c:	e011      	b.n	80155a2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801557e:	220f      	movs	r2, #15
 8015580:	18bb      	adds	r3, r7, r2
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	2b22      	cmp	r3, #34	@ 0x22
 8015586:	d003      	beq.n	8015590 <I2C_ITSlaveCplt+0x60>
 8015588:	18bb      	adds	r3, r7, r2
 801558a:	781b      	ldrb	r3, [r3, #0]
 801558c:	2b2a      	cmp	r3, #42	@ 0x2a
 801558e:	d108      	bne.n	80155a2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8015590:	4a72      	ldr	r2, [pc, #456]	@ (801575c <I2C_ITSlaveCplt+0x22c>)
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	0011      	movs	r1, r2
 8015596:	0018      	movs	r0, r3
 8015598:	f000 fe82 	bl	80162a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2222      	movs	r2, #34	@ 0x22
 80155a0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	685a      	ldr	r2, [r3, #4]
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	2180      	movs	r1, #128	@ 0x80
 80155ae:	0209      	lsls	r1, r1, #8
 80155b0:	430a      	orrs	r2, r1
 80155b2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	685a      	ldr	r2, [r3, #4]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	4968      	ldr	r1, [pc, #416]	@ (8015760 <I2C_ITSlaveCplt+0x230>)
 80155c0:	400a      	ands	r2, r1
 80155c2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	0018      	movs	r0, r3
 80155c8:	f000 fa55 	bl	8015a76 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80155cc:	693a      	ldr	r2, [r7, #16]
 80155ce:	2380      	movs	r3, #128	@ 0x80
 80155d0:	01db      	lsls	r3, r3, #7
 80155d2:	4013      	ands	r3, r2
 80155d4:	d013      	beq.n	80155fe <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	681a      	ldr	r2, [r3, #0]
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	4960      	ldr	r1, [pc, #384]	@ (8015764 <I2C_ITSlaveCplt+0x234>)
 80155e2:	400a      	ands	r2, r1
 80155e4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d01f      	beq.n	801562e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	b29a      	uxth	r2, r3
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80155fc:	e017      	b.n	801562e <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80155fe:	693a      	ldr	r2, [r7, #16]
 8015600:	2380      	movs	r3, #128	@ 0x80
 8015602:	021b      	lsls	r3, r3, #8
 8015604:	4013      	ands	r3, r2
 8015606:	d012      	beq.n	801562e <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	4955      	ldr	r1, [pc, #340]	@ (8015768 <I2C_ITSlaveCplt+0x238>)
 8015614:	400a      	ands	r2, r1
 8015616:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801561c:	2b00      	cmp	r3, #0
 801561e:	d006      	beq.n	801562e <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	685b      	ldr	r3, [r3, #4]
 8015628:	b29a      	uxth	r2, r3
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801562e:	697b      	ldr	r3, [r7, #20]
 8015630:	2204      	movs	r2, #4
 8015632:	4013      	ands	r3, r2
 8015634:	d020      	beq.n	8015678 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8015636:	697b      	ldr	r3, [r7, #20]
 8015638:	2204      	movs	r2, #4
 801563a:	4393      	bics	r3, r2
 801563c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015648:	b2d2      	uxtb	r2, r2
 801564a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015650:	1c5a      	adds	r2, r3, #1
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801565a:	2b00      	cmp	r3, #0
 801565c:	d00c      	beq.n	8015678 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015662:	3b01      	subs	r3, #1
 8015664:	b29a      	uxth	r2, r3
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801566e:	b29b      	uxth	r3, r3
 8015670:	3b01      	subs	r3, #1
 8015672:	b29a      	uxth	r2, r3
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801567c:	b29b      	uxth	r3, r3
 801567e:	2b00      	cmp	r3, #0
 8015680:	d005      	beq.n	801568e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015686:	2204      	movs	r2, #4
 8015688:	431a      	orrs	r2, r3
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2242      	movs	r2, #66	@ 0x42
 8015692:	2100      	movs	r1, #0
 8015694:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2200      	movs	r2, #0
 801569a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d013      	beq.n	80156cc <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	0011      	movs	r1, r2
 80156ac:	0018      	movs	r0, r3
 80156ae:	f000 f8b7 	bl	8015820 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2241      	movs	r2, #65	@ 0x41
 80156b6:	5c9b      	ldrb	r3, [r3, r2]
 80156b8:	b2db      	uxtb	r3, r3
 80156ba:	2b28      	cmp	r3, #40	@ 0x28
 80156bc:	d147      	bne.n	801574e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80156be:	697a      	ldr	r2, [r7, #20]
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	0011      	movs	r1, r2
 80156c4:	0018      	movs	r0, r3
 80156c6:	f000 f853 	bl	8015770 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80156ca:	e040      	b.n	801574e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156d0:	4a26      	ldr	r2, [pc, #152]	@ (801576c <I2C_ITSlaveCplt+0x23c>)
 80156d2:	4293      	cmp	r3, r2
 80156d4:	d016      	beq.n	8015704 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	0018      	movs	r0, r3
 80156da:	f7ff fdf7 	bl	80152cc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	4a22      	ldr	r2, [pc, #136]	@ (801576c <I2C_ITSlaveCplt+0x23c>)
 80156e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	2241      	movs	r2, #65	@ 0x41
 80156e8:	2120      	movs	r1, #32
 80156ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	2200      	movs	r2, #0
 80156f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	2240      	movs	r2, #64	@ 0x40
 80156f6:	2100      	movs	r1, #0
 80156f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	0018      	movs	r0, r3
 80156fe:	f7fe ff4c 	bl	801459a <HAL_I2C_ListenCpltCallback>
}
 8015702:	e024      	b.n	801574e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	2241      	movs	r2, #65	@ 0x41
 8015708:	5c9b      	ldrb	r3, [r3, r2]
 801570a:	b2db      	uxtb	r3, r3
 801570c:	2b22      	cmp	r3, #34	@ 0x22
 801570e:	d10f      	bne.n	8015730 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	2241      	movs	r2, #65	@ 0x41
 8015714:	2120      	movs	r1, #32
 8015716:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	2200      	movs	r2, #0
 801571c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2240      	movs	r2, #64	@ 0x40
 8015722:	2100      	movs	r1, #0
 8015724:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	0018      	movs	r0, r3
 801572a:	f7fe ff1e 	bl	801456a <HAL_I2C_SlaveRxCpltCallback>
}
 801572e:	e00e      	b.n	801574e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2241      	movs	r2, #65	@ 0x41
 8015734:	2120      	movs	r1, #32
 8015736:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2200      	movs	r2, #0
 801573c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2240      	movs	r2, #64	@ 0x40
 8015742:	2100      	movs	r1, #0
 8015744:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	0018      	movs	r0, r3
 801574a:	f7fe ff06 	bl	801455a <HAL_I2C_SlaveTxCpltCallback>
}
 801574e:	46c0      	nop			@ (mov r8, r8)
 8015750:	46bd      	mov	sp, r7
 8015752:	b006      	add	sp, #24
 8015754:	bd80      	pop	{r7, pc}
 8015756:	46c0      	nop			@ (mov r8, r8)
 8015758:	00008001 	.word	0x00008001
 801575c:	00008002 	.word	0x00008002
 8015760:	fe00e800 	.word	0xfe00e800
 8015764:	ffffbfff 	.word	0xffffbfff
 8015768:	ffff7fff 	.word	0xffff7fff
 801576c:	ffff0000 	.word	0xffff0000

08015770 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	4a26      	ldr	r2, [pc, #152]	@ (8015818 <I2C_ITListenCplt+0xa8>)
 801577e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	2200      	movs	r2, #0
 8015784:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2241      	movs	r2, #65	@ 0x41
 801578a:	2120      	movs	r1, #32
 801578c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	2242      	movs	r2, #66	@ 0x42
 8015792:	2100      	movs	r1, #0
 8015794:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2200      	movs	r2, #0
 801579a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	2204      	movs	r2, #4
 80157a0:	4013      	ands	r3, r2
 80157a2:	d022      	beq.n	80157ea <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157ae:	b2d2      	uxtb	r2, r2
 80157b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157b6:	1c5a      	adds	r2, r3, #1
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d012      	beq.n	80157ea <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157c8:	3b01      	subs	r3, #1
 80157ca:	b29a      	uxth	r2, r3
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157d4:	b29b      	uxth	r3, r3
 80157d6:	3b01      	subs	r3, #1
 80157d8:	b29a      	uxth	r2, r3
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157e2:	2204      	movs	r2, #4
 80157e4:	431a      	orrs	r2, r3
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80157ea:	4a0c      	ldr	r2, [pc, #48]	@ (801581c <I2C_ITListenCplt+0xac>)
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	0011      	movs	r1, r2
 80157f0:	0018      	movs	r0, r3
 80157f2:	f000 fd55 	bl	80162a0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	2210      	movs	r2, #16
 80157fc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	2240      	movs	r2, #64	@ 0x40
 8015802:	2100      	movs	r1, #0
 8015804:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	0018      	movs	r0, r3
 801580a:	f7fe fec6 	bl	801459a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801580e:	46c0      	nop			@ (mov r8, r8)
 8015810:	46bd      	mov	sp, r7
 8015812:	b002      	add	sp, #8
 8015814:	bd80      	pop	{r7, pc}
 8015816:	46c0      	nop			@ (mov r8, r8)
 8015818:	ffff0000 	.word	0xffff0000
 801581c:	00008003 	.word	0x00008003

08015820 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b084      	sub	sp, #16
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
 8015828:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801582a:	200f      	movs	r0, #15
 801582c:	183b      	adds	r3, r7, r0
 801582e:	687a      	ldr	r2, [r7, #4]
 8015830:	2141      	movs	r1, #65	@ 0x41
 8015832:	5c52      	ldrb	r2, [r2, r1]
 8015834:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2242      	movs	r2, #66	@ 0x42
 801583a:	2100      	movs	r1, #0
 801583c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	4a72      	ldr	r2, [pc, #456]	@ (8015a0c <I2C_ITError+0x1ec>)
 8015842:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2200      	movs	r2, #0
 8015848:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	431a      	orrs	r2, r3
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8015856:	183b      	adds	r3, r7, r0
 8015858:	781b      	ldrb	r3, [r3, #0]
 801585a:	2b28      	cmp	r3, #40	@ 0x28
 801585c:	d007      	beq.n	801586e <I2C_ITError+0x4e>
 801585e:	183b      	adds	r3, r7, r0
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	2b29      	cmp	r3, #41	@ 0x29
 8015864:	d003      	beq.n	801586e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8015866:	183b      	adds	r3, r7, r0
 8015868:	781b      	ldrb	r3, [r3, #0]
 801586a:	2b2a      	cmp	r3, #42	@ 0x2a
 801586c:	d10c      	bne.n	8015888 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	2103      	movs	r1, #3
 8015872:	0018      	movs	r0, r3
 8015874:	f000 fd14 	bl	80162a0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	2241      	movs	r2, #65	@ 0x41
 801587c:	2128      	movs	r1, #40	@ 0x28
 801587e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	4a63      	ldr	r2, [pc, #396]	@ (8015a10 <I2C_ITError+0x1f0>)
 8015884:	635a      	str	r2, [r3, #52]	@ 0x34
 8015886:	e032      	b.n	80158ee <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8015888:	4a62      	ldr	r2, [pc, #392]	@ (8015a14 <I2C_ITError+0x1f4>)
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	0011      	movs	r1, r2
 801588e:	0018      	movs	r0, r3
 8015890:	f000 fd06 	bl	80162a0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	0018      	movs	r0, r3
 8015898:	f000 f8ed 	bl	8015a76 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2241      	movs	r2, #65	@ 0x41
 80158a0:	5c9b      	ldrb	r3, [r3, r2]
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	2b60      	cmp	r3, #96	@ 0x60
 80158a6:	d01f      	beq.n	80158e8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	2241      	movs	r2, #65	@ 0x41
 80158ac:	2120      	movs	r1, #32
 80158ae:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	699b      	ldr	r3, [r3, #24]
 80158b6:	2220      	movs	r2, #32
 80158b8:	4013      	ands	r3, r2
 80158ba:	2b20      	cmp	r3, #32
 80158bc:	d114      	bne.n	80158e8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	699b      	ldr	r3, [r3, #24]
 80158c4:	2210      	movs	r2, #16
 80158c6:	4013      	ands	r3, r2
 80158c8:	2b10      	cmp	r3, #16
 80158ca:	d109      	bne.n	80158e0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	2210      	movs	r2, #16
 80158d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80158d8:	2204      	movs	r2, #4
 80158da:	431a      	orrs	r2, r3
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	2220      	movs	r2, #32
 80158e6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2200      	movs	r2, #0
 80158ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80158f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d03b      	beq.n	8015974 <I2C_ITError+0x154>
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	2b11      	cmp	r3, #17
 8015900:	d002      	beq.n	8015908 <I2C_ITError+0xe8>
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	2b21      	cmp	r3, #33	@ 0x21
 8015906:	d135      	bne.n	8015974 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	681a      	ldr	r2, [r3, #0]
 801590e:	2380      	movs	r3, #128	@ 0x80
 8015910:	01db      	lsls	r3, r3, #7
 8015912:	401a      	ands	r2, r3
 8015914:	2380      	movs	r3, #128	@ 0x80
 8015916:	01db      	lsls	r3, r3, #7
 8015918:	429a      	cmp	r2, r3
 801591a:	d107      	bne.n	801592c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	681a      	ldr	r2, [r3, #0]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	493c      	ldr	r1, [pc, #240]	@ (8015a18 <I2C_ITError+0x1f8>)
 8015928:	400a      	ands	r2, r1
 801592a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015930:	0018      	movs	r0, r3
 8015932:	f7fd faca 	bl	8012eca <HAL_DMA_GetState>
 8015936:	0003      	movs	r3, r0
 8015938:	2b01      	cmp	r3, #1
 801593a:	d016      	beq.n	801596a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015940:	4a36      	ldr	r2, [pc, #216]	@ (8015a1c <I2C_ITError+0x1fc>)
 8015942:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	2240      	movs	r2, #64	@ 0x40
 8015948:	2100      	movs	r1, #0
 801594a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015950:	0018      	movs	r0, r3
 8015952:	f7fd f9c5 	bl	8012ce0 <HAL_DMA_Abort_IT>
 8015956:	1e03      	subs	r3, r0, #0
 8015958:	d051      	beq.n	80159fe <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801595e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015964:	0018      	movs	r0, r3
 8015966:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015968:	e049      	b.n	80159fe <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	0018      	movs	r0, r3
 801596e:	f000 f859 	bl	8015a24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015972:	e044      	b.n	80159fe <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015978:	2b00      	cmp	r3, #0
 801597a:	d03b      	beq.n	80159f4 <I2C_ITError+0x1d4>
 801597c:	68bb      	ldr	r3, [r7, #8]
 801597e:	2b12      	cmp	r3, #18
 8015980:	d002      	beq.n	8015988 <I2C_ITError+0x168>
 8015982:	68bb      	ldr	r3, [r7, #8]
 8015984:	2b22      	cmp	r3, #34	@ 0x22
 8015986:	d135      	bne.n	80159f4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	681a      	ldr	r2, [r3, #0]
 801598e:	2380      	movs	r3, #128	@ 0x80
 8015990:	021b      	lsls	r3, r3, #8
 8015992:	401a      	ands	r2, r3
 8015994:	2380      	movs	r3, #128	@ 0x80
 8015996:	021b      	lsls	r3, r3, #8
 8015998:	429a      	cmp	r2, r3
 801599a:	d107      	bne.n	80159ac <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	681a      	ldr	r2, [r3, #0]
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	491e      	ldr	r1, [pc, #120]	@ (8015a20 <I2C_ITError+0x200>)
 80159a8:	400a      	ands	r2, r1
 80159aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159b0:	0018      	movs	r0, r3
 80159b2:	f7fd fa8a 	bl	8012eca <HAL_DMA_GetState>
 80159b6:	0003      	movs	r3, r0
 80159b8:	2b01      	cmp	r3, #1
 80159ba:	d016      	beq.n	80159ea <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159c0:	4a16      	ldr	r2, [pc, #88]	@ (8015a1c <I2C_ITError+0x1fc>)
 80159c2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	2240      	movs	r2, #64	@ 0x40
 80159c8:	2100      	movs	r1, #0
 80159ca:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159d0:	0018      	movs	r0, r3
 80159d2:	f7fd f985 	bl	8012ce0 <HAL_DMA_Abort_IT>
 80159d6:	1e03      	subs	r3, r0, #0
 80159d8:	d013      	beq.n	8015a02 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159e4:	0018      	movs	r0, r3
 80159e6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80159e8:	e00b      	b.n	8015a02 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	0018      	movs	r0, r3
 80159ee:	f000 f819 	bl	8015a24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80159f2:	e006      	b.n	8015a02 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	0018      	movs	r0, r3
 80159f8:	f000 f814 	bl	8015a24 <I2C_TreatErrorCallback>
  }
}
 80159fc:	e002      	b.n	8015a04 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80159fe:	46c0      	nop			@ (mov r8, r8)
 8015a00:	e000      	b.n	8015a04 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015a02:	46c0      	nop			@ (mov r8, r8)
}
 8015a04:	46c0      	nop			@ (mov r8, r8)
 8015a06:	46bd      	mov	sp, r7
 8015a08:	b004      	add	sp, #16
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	ffff0000 	.word	0xffff0000
 8015a10:	08014841 	.word	0x08014841
 8015a14:	00008003 	.word	0x00008003
 8015a18:	ffffbfff 	.word	0xffffbfff
 8015a1c:	08015c2f 	.word	0x08015c2f
 8015a20:	ffff7fff 	.word	0xffff7fff

08015a24 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b082      	sub	sp, #8
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	2241      	movs	r2, #65	@ 0x41
 8015a30:	5c9b      	ldrb	r3, [r3, r2]
 8015a32:	b2db      	uxtb	r3, r3
 8015a34:	2b60      	cmp	r3, #96	@ 0x60
 8015a36:	d10f      	bne.n	8015a58 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2241      	movs	r2, #65	@ 0x41
 8015a3c:	2120      	movs	r1, #32
 8015a3e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2200      	movs	r2, #0
 8015a44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2240      	movs	r2, #64	@ 0x40
 8015a4a:	2100      	movs	r1, #0
 8015a4c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	0018      	movs	r0, r3
 8015a52:	f7fe fdc2 	bl	80145da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8015a56:	e00a      	b.n	8015a6e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2240      	movs	r2, #64	@ 0x40
 8015a62:	2100      	movs	r1, #0
 8015a64:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	0018      	movs	r0, r3
 8015a6a:	f7fe fdae 	bl	80145ca <HAL_I2C_ErrorCallback>
}
 8015a6e:	46c0      	nop			@ (mov r8, r8)
 8015a70:	46bd      	mov	sp, r7
 8015a72:	b002      	add	sp, #8
 8015a74:	bd80      	pop	{r7, pc}

08015a76 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8015a76:	b580      	push	{r7, lr}
 8015a78:	b082      	sub	sp, #8
 8015a7a:	af00      	add	r7, sp, #0
 8015a7c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	699b      	ldr	r3, [r3, #24]
 8015a84:	2202      	movs	r2, #2
 8015a86:	4013      	ands	r3, r2
 8015a88:	2b02      	cmp	r3, #2
 8015a8a:	d103      	bne.n	8015a94 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	2200      	movs	r2, #0
 8015a92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	699b      	ldr	r3, [r3, #24]
 8015a9a:	2201      	movs	r2, #1
 8015a9c:	4013      	ands	r3, r2
 8015a9e:	2b01      	cmp	r3, #1
 8015aa0:	d007      	beq.n	8015ab2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	699a      	ldr	r2, [r3, #24]
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	2101      	movs	r1, #1
 8015aae:	430a      	orrs	r2, r1
 8015ab0:	619a      	str	r2, [r3, #24]
  }
}
 8015ab2:	46c0      	nop			@ (mov r8, r8)
 8015ab4:	46bd      	mov	sp, r7
 8015ab6:	b002      	add	sp, #8
 8015ab8:	bd80      	pop	{r7, pc}
	...

08015abc <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b084      	sub	sp, #16
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ac8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	681a      	ldr	r2, [r3, #0]
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	4920      	ldr	r1, [pc, #128]	@ (8015b58 <I2C_DMAMasterTransmitCplt+0x9c>)
 8015ad6:	400a      	ands	r2, r1
 8015ad8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ade:	b29b      	uxth	r3, r3
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d105      	bne.n	8015af0 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	2120      	movs	r1, #32
 8015ae8:	0018      	movs	r0, r3
 8015aea:	f000 fb4b 	bl	8016184 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8015aee:	e02e      	b.n	8015b4e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015af4:	68fa      	ldr	r2, [r7, #12]
 8015af6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015af8:	189a      	adds	r2, r3, r2
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b02:	b29b      	uxth	r3, r3
 8015b04:	2bff      	cmp	r3, #255	@ 0xff
 8015b06:	d903      	bls.n	8015b10 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	22ff      	movs	r2, #255	@ 0xff
 8015b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015b0e:	e004      	b.n	8015b1a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b14:	b29a      	uxth	r2, r3
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b22:	0019      	movs	r1, r3
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	3328      	adds	r3, #40	@ 0x28
 8015b2a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8015b30:	f7fd f830 	bl	8012b94 <HAL_DMA_Start_IT>
 8015b34:	1e03      	subs	r3, r0, #0
 8015b36:	d005      	beq.n	8015b44 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	2110      	movs	r1, #16
 8015b3c:	0018      	movs	r0, r3
 8015b3e:	f7ff fe6f 	bl	8015820 <I2C_ITError>
}
 8015b42:	e004      	b.n	8015b4e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	2140      	movs	r1, #64	@ 0x40
 8015b48:	0018      	movs	r0, r3
 8015b4a:	f000 fb1b 	bl	8016184 <I2C_Enable_IRQ>
}
 8015b4e:	46c0      	nop			@ (mov r8, r8)
 8015b50:	46bd      	mov	sp, r7
 8015b52:	b004      	add	sp, #16
 8015b54:	bd80      	pop	{r7, pc}
 8015b56:	46c0      	nop			@ (mov r8, r8)
 8015b58:	ffffbfff 	.word	0xffffbfff

08015b5c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b084      	sub	sp, #16
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b68:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	681a      	ldr	r2, [r3, #0]
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	4920      	ldr	r1, [pc, #128]	@ (8015bf8 <I2C_DMAMasterReceiveCplt+0x9c>)
 8015b76:	400a      	ands	r2, r1
 8015b78:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d105      	bne.n	8015b90 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	2120      	movs	r1, #32
 8015b88:	0018      	movs	r0, r3
 8015b8a:	f000 fafb 	bl	8016184 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8015b8e:	e02e      	b.n	8015bee <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b94:	68fa      	ldr	r2, [r7, #12]
 8015b96:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015b98:	189a      	adds	r2, r3, r2
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ba2:	b29b      	uxth	r3, r3
 8015ba4:	2bff      	cmp	r3, #255	@ 0xff
 8015ba6:	d903      	bls.n	8015bb0 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	22ff      	movs	r2, #255	@ 0xff
 8015bac:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015bae:	e004      	b.n	8015bba <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015bb4:	b29a      	uxth	r2, r3
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	3324      	adds	r3, #36	@ 0x24
 8015bc4:	0019      	movs	r1, r3
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bca:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8015bd0:	f7fc ffe0 	bl	8012b94 <HAL_DMA_Start_IT>
 8015bd4:	1e03      	subs	r3, r0, #0
 8015bd6:	d005      	beq.n	8015be4 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	2110      	movs	r1, #16
 8015bdc:	0018      	movs	r0, r3
 8015bde:	f7ff fe1f 	bl	8015820 <I2C_ITError>
}
 8015be2:	e004      	b.n	8015bee <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	2140      	movs	r1, #64	@ 0x40
 8015be8:	0018      	movs	r0, r3
 8015bea:	f000 facb 	bl	8016184 <I2C_Enable_IRQ>
}
 8015bee:	46c0      	nop			@ (mov r8, r8)
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	b004      	add	sp, #16
 8015bf4:	bd80      	pop	{r7, pc}
 8015bf6:	46c0      	nop			@ (mov r8, r8)
 8015bf8:	ffff7fff 	.word	0xffff7fff

08015bfc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b084      	sub	sp, #16
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c08:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	685a      	ldr	r2, [r3, #4]
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	2180      	movs	r1, #128	@ 0x80
 8015c16:	0209      	lsls	r1, r1, #8
 8015c18:	430a      	orrs	r2, r1
 8015c1a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	2110      	movs	r1, #16
 8015c20:	0018      	movs	r0, r3
 8015c22:	f7ff fdfd 	bl	8015820 <I2C_ITError>
}
 8015c26:	46c0      	nop			@ (mov r8, r8)
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	b004      	add	sp, #16
 8015c2c:	bd80      	pop	{r7, pc}

08015c2e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8015c2e:	b580      	push	{r7, lr}
 8015c30:	b084      	sub	sp, #16
 8015c32:	af00      	add	r7, sp, #0
 8015c34:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c3a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d003      	beq.n	8015c4c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c48:	2200      	movs	r2, #0
 8015c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d003      	beq.n	8015c5c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015c58:	2200      	movs	r2, #0
 8015c5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	0018      	movs	r0, r3
 8015c60:	f7ff fee0 	bl	8015a24 <I2C_TreatErrorCallback>
}
 8015c64:	46c0      	nop			@ (mov r8, r8)
 8015c66:	46bd      	mov	sp, r7
 8015c68:	b004      	add	sp, #16
 8015c6a:	bd80      	pop	{r7, pc}

08015c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b084      	sub	sp, #16
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	603b      	str	r3, [r7, #0]
 8015c78:	1dfb      	adds	r3, r7, #7
 8015c7a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015c7c:	e030      	b.n	8015ce0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	3301      	adds	r3, #1
 8015c82:	d02d      	beq.n	8015ce0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015c84:	f7fc fa34 	bl	80120f0 <HAL_GetTick>
 8015c88:	0002      	movs	r2, r0
 8015c8a:	69bb      	ldr	r3, [r7, #24]
 8015c8c:	1ad3      	subs	r3, r2, r3
 8015c8e:	683a      	ldr	r2, [r7, #0]
 8015c90:	429a      	cmp	r2, r3
 8015c92:	d302      	bcc.n	8015c9a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d122      	bne.n	8015ce0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	699b      	ldr	r3, [r3, #24]
 8015ca0:	68ba      	ldr	r2, [r7, #8]
 8015ca2:	4013      	ands	r3, r2
 8015ca4:	68ba      	ldr	r2, [r7, #8]
 8015ca6:	1ad3      	subs	r3, r2, r3
 8015ca8:	425a      	negs	r2, r3
 8015caa:	4153      	adcs	r3, r2
 8015cac:	b2db      	uxtb	r3, r3
 8015cae:	001a      	movs	r2, r3
 8015cb0:	1dfb      	adds	r3, r7, #7
 8015cb2:	781b      	ldrb	r3, [r3, #0]
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d113      	bne.n	8015ce0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015cbc:	2220      	movs	r2, #32
 8015cbe:	431a      	orrs	r2, r3
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	2241      	movs	r2, #65	@ 0x41
 8015cc8:	2120      	movs	r1, #32
 8015cca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	2242      	movs	r2, #66	@ 0x42
 8015cd0:	2100      	movs	r1, #0
 8015cd2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	2240      	movs	r2, #64	@ 0x40
 8015cd8:	2100      	movs	r1, #0
 8015cda:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8015cdc:	2301      	movs	r3, #1
 8015cde:	e00f      	b.n	8015d00 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	699b      	ldr	r3, [r3, #24]
 8015ce6:	68ba      	ldr	r2, [r7, #8]
 8015ce8:	4013      	ands	r3, r2
 8015cea:	68ba      	ldr	r2, [r7, #8]
 8015cec:	1ad3      	subs	r3, r2, r3
 8015cee:	425a      	negs	r2, r3
 8015cf0:	4153      	adcs	r3, r2
 8015cf2:	b2db      	uxtb	r3, r3
 8015cf4:	001a      	movs	r2, r3
 8015cf6:	1dfb      	adds	r3, r7, #7
 8015cf8:	781b      	ldrb	r3, [r3, #0]
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d0bf      	beq.n	8015c7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015cfe:	2300      	movs	r3, #0
}
 8015d00:	0018      	movs	r0, r3
 8015d02:	46bd      	mov	sp, r7
 8015d04:	b004      	add	sp, #16
 8015d06:	bd80      	pop	{r7, pc}

08015d08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	60f8      	str	r0, [r7, #12]
 8015d10:	60b9      	str	r1, [r7, #8]
 8015d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015d14:	e032      	b.n	8015d7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015d16:	687a      	ldr	r2, [r7, #4]
 8015d18:	68b9      	ldr	r1, [r7, #8]
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	0018      	movs	r0, r3
 8015d1e:	f000 f8ff 	bl	8015f20 <I2C_IsErrorOccurred>
 8015d22:	1e03      	subs	r3, r0, #0
 8015d24:	d001      	beq.n	8015d2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015d26:	2301      	movs	r3, #1
 8015d28:	e030      	b.n	8015d8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	3301      	adds	r3, #1
 8015d2e:	d025      	beq.n	8015d7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015d30:	f7fc f9de 	bl	80120f0 <HAL_GetTick>
 8015d34:	0002      	movs	r2, r0
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	1ad3      	subs	r3, r2, r3
 8015d3a:	68ba      	ldr	r2, [r7, #8]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d302      	bcc.n	8015d46 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d11a      	bne.n	8015d7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	699b      	ldr	r3, [r3, #24]
 8015d4c:	2202      	movs	r2, #2
 8015d4e:	4013      	ands	r3, r2
 8015d50:	2b02      	cmp	r3, #2
 8015d52:	d013      	beq.n	8015d7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d58:	2220      	movs	r2, #32
 8015d5a:	431a      	orrs	r2, r3
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	2241      	movs	r2, #65	@ 0x41
 8015d64:	2120      	movs	r1, #32
 8015d66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	2242      	movs	r2, #66	@ 0x42
 8015d6c:	2100      	movs	r1, #0
 8015d6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	2240      	movs	r2, #64	@ 0x40
 8015d74:	2100      	movs	r1, #0
 8015d76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8015d78:	2301      	movs	r3, #1
 8015d7a:	e007      	b.n	8015d8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	699b      	ldr	r3, [r3, #24]
 8015d82:	2202      	movs	r2, #2
 8015d84:	4013      	ands	r3, r2
 8015d86:	2b02      	cmp	r3, #2
 8015d88:	d1c5      	bne.n	8015d16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8015d8a:	2300      	movs	r3, #0
}
 8015d8c:	0018      	movs	r0, r3
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	b004      	add	sp, #16
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	60f8      	str	r0, [r7, #12]
 8015d9c:	60b9      	str	r1, [r7, #8]
 8015d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015da0:	e02f      	b.n	8015e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015da2:	687a      	ldr	r2, [r7, #4]
 8015da4:	68b9      	ldr	r1, [r7, #8]
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	0018      	movs	r0, r3
 8015daa:	f000 f8b9 	bl	8015f20 <I2C_IsErrorOccurred>
 8015dae:	1e03      	subs	r3, r0, #0
 8015db0:	d001      	beq.n	8015db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015db2:	2301      	movs	r3, #1
 8015db4:	e02d      	b.n	8015e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015db6:	f7fc f99b 	bl	80120f0 <HAL_GetTick>
 8015dba:	0002      	movs	r2, r0
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	1ad3      	subs	r3, r2, r3
 8015dc0:	68ba      	ldr	r2, [r7, #8]
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	d302      	bcc.n	8015dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8015dc6:	68bb      	ldr	r3, [r7, #8]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d11a      	bne.n	8015e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	699b      	ldr	r3, [r3, #24]
 8015dd2:	2220      	movs	r2, #32
 8015dd4:	4013      	ands	r3, r2
 8015dd6:	2b20      	cmp	r3, #32
 8015dd8:	d013      	beq.n	8015e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015dde:	2220      	movs	r2, #32
 8015de0:	431a      	orrs	r2, r3
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	2241      	movs	r2, #65	@ 0x41
 8015dea:	2120      	movs	r1, #32
 8015dec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	2242      	movs	r2, #66	@ 0x42
 8015df2:	2100      	movs	r1, #0
 8015df4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	2240      	movs	r2, #64	@ 0x40
 8015dfa:	2100      	movs	r1, #0
 8015dfc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015dfe:	2301      	movs	r3, #1
 8015e00:	e007      	b.n	8015e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	699b      	ldr	r3, [r3, #24]
 8015e08:	2220      	movs	r2, #32
 8015e0a:	4013      	ands	r3, r2
 8015e0c:	2b20      	cmp	r3, #32
 8015e0e:	d1c8      	bne.n	8015da2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8015e10:	2300      	movs	r3, #0
}
 8015e12:	0018      	movs	r0, r3
 8015e14:	46bd      	mov	sp, r7
 8015e16:	b004      	add	sp, #16
 8015e18:	bd80      	pop	{r7, pc}
	...

08015e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b084      	sub	sp, #16
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	60f8      	str	r0, [r7, #12]
 8015e24:	60b9      	str	r1, [r7, #8]
 8015e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8015e28:	e06b      	b.n	8015f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015e2a:	687a      	ldr	r2, [r7, #4]
 8015e2c:	68b9      	ldr	r1, [r7, #8]
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	0018      	movs	r0, r3
 8015e32:	f000 f875 	bl	8015f20 <I2C_IsErrorOccurred>
 8015e36:	1e03      	subs	r3, r0, #0
 8015e38:	d001      	beq.n	8015e3e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015e3a:	2301      	movs	r3, #1
 8015e3c:	e069      	b.n	8015f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	699b      	ldr	r3, [r3, #24]
 8015e44:	2220      	movs	r2, #32
 8015e46:	4013      	ands	r3, r2
 8015e48:	2b20      	cmp	r3, #32
 8015e4a:	d138      	bne.n	8015ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	699b      	ldr	r3, [r3, #24]
 8015e52:	2204      	movs	r2, #4
 8015e54:	4013      	ands	r3, r2
 8015e56:	2b04      	cmp	r3, #4
 8015e58:	d105      	bne.n	8015e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d001      	beq.n	8015e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8015e62:	2300      	movs	r3, #0
 8015e64:	e055      	b.n	8015f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	699b      	ldr	r3, [r3, #24]
 8015e6c:	2210      	movs	r2, #16
 8015e6e:	4013      	ands	r3, r2
 8015e70:	2b10      	cmp	r3, #16
 8015e72:	d107      	bne.n	8015e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	2210      	movs	r2, #16
 8015e7a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	2204      	movs	r2, #4
 8015e80:	645a      	str	r2, [r3, #68]	@ 0x44
 8015e82:	e002      	b.n	8015e8a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	2200      	movs	r2, #0
 8015e88:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	2220      	movs	r2, #32
 8015e90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	685a      	ldr	r2, [r3, #4]
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	491f      	ldr	r1, [pc, #124]	@ (8015f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8015e9e:	400a      	ands	r2, r1
 8015ea0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	2241      	movs	r2, #65	@ 0x41
 8015ea6:	2120      	movs	r1, #32
 8015ea8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015eaa:	68fb      	ldr	r3, [r7, #12]
 8015eac:	2242      	movs	r2, #66	@ 0x42
 8015eae:	2100      	movs	r1, #0
 8015eb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	2240      	movs	r2, #64	@ 0x40
 8015eb6:	2100      	movs	r1, #0
 8015eb8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015eba:	2301      	movs	r3, #1
 8015ebc:	e029      	b.n	8015f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015ebe:	f7fc f917 	bl	80120f0 <HAL_GetTick>
 8015ec2:	0002      	movs	r2, r0
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	1ad3      	subs	r3, r2, r3
 8015ec8:	68ba      	ldr	r2, [r7, #8]
 8015eca:	429a      	cmp	r2, r3
 8015ecc:	d302      	bcc.n	8015ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8015ece:	68bb      	ldr	r3, [r7, #8]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d116      	bne.n	8015f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	699b      	ldr	r3, [r3, #24]
 8015eda:	2204      	movs	r2, #4
 8015edc:	4013      	ands	r3, r2
 8015ede:	2b04      	cmp	r3, #4
 8015ee0:	d00f      	beq.n	8015f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ee6:	2220      	movs	r2, #32
 8015ee8:	431a      	orrs	r2, r3
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	2241      	movs	r2, #65	@ 0x41
 8015ef2:	2120      	movs	r1, #32
 8015ef4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	2240      	movs	r2, #64	@ 0x40
 8015efa:	2100      	movs	r1, #0
 8015efc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015efe:	2301      	movs	r3, #1
 8015f00:	e007      	b.n	8015f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	699b      	ldr	r3, [r3, #24]
 8015f08:	2204      	movs	r2, #4
 8015f0a:	4013      	ands	r3, r2
 8015f0c:	2b04      	cmp	r3, #4
 8015f0e:	d18c      	bne.n	8015e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8015f10:	2300      	movs	r3, #0
}
 8015f12:	0018      	movs	r0, r3
 8015f14:	46bd      	mov	sp, r7
 8015f16:	b004      	add	sp, #16
 8015f18:	bd80      	pop	{r7, pc}
 8015f1a:	46c0      	nop			@ (mov r8, r8)
 8015f1c:	fe00e800 	.word	0xfe00e800

08015f20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b08a      	sub	sp, #40	@ 0x28
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015f2c:	2327      	movs	r3, #39	@ 0x27
 8015f2e:	18fb      	adds	r3, r7, r3
 8015f30:	2200      	movs	r2, #0
 8015f32:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	699b      	ldr	r3, [r3, #24]
 8015f3a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8015f44:	69bb      	ldr	r3, [r7, #24]
 8015f46:	2210      	movs	r2, #16
 8015f48:	4013      	ands	r3, r2
 8015f4a:	d100      	bne.n	8015f4e <I2C_IsErrorOccurred+0x2e>
 8015f4c:	e079      	b.n	8016042 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	2210      	movs	r2, #16
 8015f54:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8015f56:	e057      	b.n	8016008 <I2C_IsErrorOccurred+0xe8>
 8015f58:	2227      	movs	r2, #39	@ 0x27
 8015f5a:	18bb      	adds	r3, r7, r2
 8015f5c:	18ba      	adds	r2, r7, r2
 8015f5e:	7812      	ldrb	r2, [r2, #0]
 8015f60:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	3301      	adds	r3, #1
 8015f66:	d04f      	beq.n	8016008 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015f68:	f7fc f8c2 	bl	80120f0 <HAL_GetTick>
 8015f6c:	0002      	movs	r2, r0
 8015f6e:	69fb      	ldr	r3, [r7, #28]
 8015f70:	1ad3      	subs	r3, r2, r3
 8015f72:	68ba      	ldr	r2, [r7, #8]
 8015f74:	429a      	cmp	r2, r3
 8015f76:	d302      	bcc.n	8015f7e <I2C_IsErrorOccurred+0x5e>
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d144      	bne.n	8016008 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	685a      	ldr	r2, [r3, #4]
 8015f84:	2380      	movs	r3, #128	@ 0x80
 8015f86:	01db      	lsls	r3, r3, #7
 8015f88:	4013      	ands	r3, r2
 8015f8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8015f8c:	2013      	movs	r0, #19
 8015f8e:	183b      	adds	r3, r7, r0
 8015f90:	68fa      	ldr	r2, [r7, #12]
 8015f92:	2142      	movs	r1, #66	@ 0x42
 8015f94:	5c52      	ldrb	r2, [r2, r1]
 8015f96:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	699a      	ldr	r2, [r3, #24]
 8015f9e:	2380      	movs	r3, #128	@ 0x80
 8015fa0:	021b      	lsls	r3, r3, #8
 8015fa2:	401a      	ands	r2, r3
 8015fa4:	2380      	movs	r3, #128	@ 0x80
 8015fa6:	021b      	lsls	r3, r3, #8
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d126      	bne.n	8015ffa <I2C_IsErrorOccurred+0xda>
 8015fac:	697a      	ldr	r2, [r7, #20]
 8015fae:	2380      	movs	r3, #128	@ 0x80
 8015fb0:	01db      	lsls	r3, r3, #7
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d021      	beq.n	8015ffa <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8015fb6:	183b      	adds	r3, r7, r0
 8015fb8:	781b      	ldrb	r3, [r3, #0]
 8015fba:	2b20      	cmp	r3, #32
 8015fbc:	d01d      	beq.n	8015ffa <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	685a      	ldr	r2, [r3, #4]
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	2180      	movs	r1, #128	@ 0x80
 8015fca:	01c9      	lsls	r1, r1, #7
 8015fcc:	430a      	orrs	r2, r1
 8015fce:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8015fd0:	f7fc f88e 	bl	80120f0 <HAL_GetTick>
 8015fd4:	0003      	movs	r3, r0
 8015fd6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015fd8:	e00f      	b.n	8015ffa <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8015fda:	f7fc f889 	bl	80120f0 <HAL_GetTick>
 8015fde:	0002      	movs	r2, r0
 8015fe0:	69fb      	ldr	r3, [r7, #28]
 8015fe2:	1ad3      	subs	r3, r2, r3
 8015fe4:	2b19      	cmp	r3, #25
 8015fe6:	d908      	bls.n	8015ffa <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8015fe8:	6a3b      	ldr	r3, [r7, #32]
 8015fea:	2220      	movs	r2, #32
 8015fec:	4313      	orrs	r3, r2
 8015fee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8015ff0:	2327      	movs	r3, #39	@ 0x27
 8015ff2:	18fb      	adds	r3, r7, r3
 8015ff4:	2201      	movs	r2, #1
 8015ff6:	701a      	strb	r2, [r3, #0]

              break;
 8015ff8:	e006      	b.n	8016008 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	699b      	ldr	r3, [r3, #24]
 8016000:	2220      	movs	r2, #32
 8016002:	4013      	ands	r3, r2
 8016004:	2b20      	cmp	r3, #32
 8016006:	d1e8      	bne.n	8015fda <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	699b      	ldr	r3, [r3, #24]
 801600e:	2220      	movs	r2, #32
 8016010:	4013      	ands	r3, r2
 8016012:	2b20      	cmp	r3, #32
 8016014:	d004      	beq.n	8016020 <I2C_IsErrorOccurred+0x100>
 8016016:	2327      	movs	r3, #39	@ 0x27
 8016018:	18fb      	adds	r3, r7, r3
 801601a:	781b      	ldrb	r3, [r3, #0]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d09b      	beq.n	8015f58 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8016020:	2327      	movs	r3, #39	@ 0x27
 8016022:	18fb      	adds	r3, r7, r3
 8016024:	781b      	ldrb	r3, [r3, #0]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d103      	bne.n	8016032 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	2220      	movs	r2, #32
 8016030:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8016032:	6a3b      	ldr	r3, [r7, #32]
 8016034:	2204      	movs	r2, #4
 8016036:	4313      	orrs	r3, r2
 8016038:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801603a:	2327      	movs	r3, #39	@ 0x27
 801603c:	18fb      	adds	r3, r7, r3
 801603e:	2201      	movs	r2, #1
 8016040:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	699b      	ldr	r3, [r3, #24]
 8016048:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801604a:	69ba      	ldr	r2, [r7, #24]
 801604c:	2380      	movs	r3, #128	@ 0x80
 801604e:	005b      	lsls	r3, r3, #1
 8016050:	4013      	ands	r3, r2
 8016052:	d00c      	beq.n	801606e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8016054:	6a3b      	ldr	r3, [r7, #32]
 8016056:	2201      	movs	r2, #1
 8016058:	4313      	orrs	r3, r2
 801605a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	2280      	movs	r2, #128	@ 0x80
 8016062:	0052      	lsls	r2, r2, #1
 8016064:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016066:	2327      	movs	r3, #39	@ 0x27
 8016068:	18fb      	adds	r3, r7, r3
 801606a:	2201      	movs	r2, #1
 801606c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801606e:	69ba      	ldr	r2, [r7, #24]
 8016070:	2380      	movs	r3, #128	@ 0x80
 8016072:	00db      	lsls	r3, r3, #3
 8016074:	4013      	ands	r3, r2
 8016076:	d00c      	beq.n	8016092 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8016078:	6a3b      	ldr	r3, [r7, #32]
 801607a:	2208      	movs	r2, #8
 801607c:	4313      	orrs	r3, r2
 801607e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2280      	movs	r2, #128	@ 0x80
 8016086:	00d2      	lsls	r2, r2, #3
 8016088:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801608a:	2327      	movs	r3, #39	@ 0x27
 801608c:	18fb      	adds	r3, r7, r3
 801608e:	2201      	movs	r2, #1
 8016090:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8016092:	69ba      	ldr	r2, [r7, #24]
 8016094:	2380      	movs	r3, #128	@ 0x80
 8016096:	009b      	lsls	r3, r3, #2
 8016098:	4013      	ands	r3, r2
 801609a:	d00c      	beq.n	80160b6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801609c:	6a3b      	ldr	r3, [r7, #32]
 801609e:	2202      	movs	r2, #2
 80160a0:	4313      	orrs	r3, r2
 80160a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	681b      	ldr	r3, [r3, #0]
 80160a8:	2280      	movs	r2, #128	@ 0x80
 80160aa:	0092      	lsls	r2, r2, #2
 80160ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80160ae:	2327      	movs	r3, #39	@ 0x27
 80160b0:	18fb      	adds	r3, r7, r3
 80160b2:	2201      	movs	r2, #1
 80160b4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80160b6:	2327      	movs	r3, #39	@ 0x27
 80160b8:	18fb      	adds	r3, r7, r3
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d01d      	beq.n	80160fc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	0018      	movs	r0, r3
 80160c4:	f7ff fcd7 	bl	8015a76 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	685a      	ldr	r2, [r3, #4]
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	490e      	ldr	r1, [pc, #56]	@ (801610c <I2C_IsErrorOccurred+0x1ec>)
 80160d4:	400a      	ands	r2, r1
 80160d6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80160dc:	6a3b      	ldr	r3, [r7, #32]
 80160de:	431a      	orrs	r2, r3
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	2241      	movs	r2, #65	@ 0x41
 80160e8:	2120      	movs	r1, #32
 80160ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	2242      	movs	r2, #66	@ 0x42
 80160f0:	2100      	movs	r1, #0
 80160f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2240      	movs	r2, #64	@ 0x40
 80160f8:	2100      	movs	r1, #0
 80160fa:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80160fc:	2327      	movs	r3, #39	@ 0x27
 80160fe:	18fb      	adds	r3, r7, r3
 8016100:	781b      	ldrb	r3, [r3, #0]
}
 8016102:	0018      	movs	r0, r3
 8016104:	46bd      	mov	sp, r7
 8016106:	b00a      	add	sp, #40	@ 0x28
 8016108:	bd80      	pop	{r7, pc}
 801610a:	46c0      	nop			@ (mov r8, r8)
 801610c:	fe00e800 	.word	0xfe00e800

08016110 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016110:	b590      	push	{r4, r7, lr}
 8016112:	b087      	sub	sp, #28
 8016114:	af00      	add	r7, sp, #0
 8016116:	60f8      	str	r0, [r7, #12]
 8016118:	0008      	movs	r0, r1
 801611a:	0011      	movs	r1, r2
 801611c:	607b      	str	r3, [r7, #4]
 801611e:	240a      	movs	r4, #10
 8016120:	193b      	adds	r3, r7, r4
 8016122:	1c02      	adds	r2, r0, #0
 8016124:	801a      	strh	r2, [r3, #0]
 8016126:	2009      	movs	r0, #9
 8016128:	183b      	adds	r3, r7, r0
 801612a:	1c0a      	adds	r2, r1, #0
 801612c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801612e:	193b      	adds	r3, r7, r4
 8016130:	881b      	ldrh	r3, [r3, #0]
 8016132:	059b      	lsls	r3, r3, #22
 8016134:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016136:	183b      	adds	r3, r7, r0
 8016138:	781b      	ldrb	r3, [r3, #0]
 801613a:	0419      	lsls	r1, r3, #16
 801613c:	23ff      	movs	r3, #255	@ 0xff
 801613e:	041b      	lsls	r3, r3, #16
 8016140:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016142:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801614a:	4313      	orrs	r3, r2
 801614c:	005b      	lsls	r3, r3, #1
 801614e:	085b      	lsrs	r3, r3, #1
 8016150:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	685b      	ldr	r3, [r3, #4]
 8016158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801615a:	0d51      	lsrs	r1, r2, #21
 801615c:	2280      	movs	r2, #128	@ 0x80
 801615e:	00d2      	lsls	r2, r2, #3
 8016160:	400a      	ands	r2, r1
 8016162:	4907      	ldr	r1, [pc, #28]	@ (8016180 <I2C_TransferConfig+0x70>)
 8016164:	430a      	orrs	r2, r1
 8016166:	43d2      	mvns	r2, r2
 8016168:	401a      	ands	r2, r3
 801616a:	0011      	movs	r1, r2
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	697a      	ldr	r2, [r7, #20]
 8016172:	430a      	orrs	r2, r1
 8016174:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8016176:	46c0      	nop			@ (mov r8, r8)
 8016178:	46bd      	mov	sp, r7
 801617a:	b007      	add	sp, #28
 801617c:	bd90      	pop	{r4, r7, pc}
 801617e:	46c0      	nop			@ (mov r8, r8)
 8016180:	03ff63ff 	.word	0x03ff63ff

08016184 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b084      	sub	sp, #16
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
 801618c:	000a      	movs	r2, r1
 801618e:	1cbb      	adds	r3, r7, #2
 8016190:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8016192:	2300      	movs	r3, #0
 8016194:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801619a:	4b3e      	ldr	r3, [pc, #248]	@ (8016294 <I2C_Enable_IRQ+0x110>)
 801619c:	429a      	cmp	r2, r3
 801619e:	d035      	beq.n	801620c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80161a4:	4b3c      	ldr	r3, [pc, #240]	@ (8016298 <I2C_Enable_IRQ+0x114>)
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d030      	beq.n	801620c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80161ae:	4b3b      	ldr	r3, [pc, #236]	@ (801629c <I2C_Enable_IRQ+0x118>)
 80161b0:	429a      	cmp	r2, r3
 80161b2:	d02b      	beq.n	801620c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80161b4:	1cbb      	adds	r3, r7, #2
 80161b6:	2200      	movs	r2, #0
 80161b8:	5e9b      	ldrsh	r3, [r3, r2]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	da03      	bge.n	80161c6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	22b8      	movs	r2, #184	@ 0xb8
 80161c2:	4313      	orrs	r3, r2
 80161c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80161c6:	1cbb      	adds	r3, r7, #2
 80161c8:	881b      	ldrh	r3, [r3, #0]
 80161ca:	2201      	movs	r2, #1
 80161cc:	4013      	ands	r3, r2
 80161ce:	d003      	beq.n	80161d8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	22f2      	movs	r2, #242	@ 0xf2
 80161d4:	4313      	orrs	r3, r2
 80161d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80161d8:	1cbb      	adds	r3, r7, #2
 80161da:	881b      	ldrh	r3, [r3, #0]
 80161dc:	2202      	movs	r2, #2
 80161de:	4013      	ands	r3, r2
 80161e0:	d003      	beq.n	80161ea <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	22f4      	movs	r2, #244	@ 0xf4
 80161e6:	4313      	orrs	r3, r2
 80161e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80161ea:	1cbb      	adds	r3, r7, #2
 80161ec:	881b      	ldrh	r3, [r3, #0]
 80161ee:	2b10      	cmp	r3, #16
 80161f0:	d103      	bne.n	80161fa <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	2290      	movs	r2, #144	@ 0x90
 80161f6:	4313      	orrs	r3, r2
 80161f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80161fa:	1cbb      	adds	r3, r7, #2
 80161fc:	881b      	ldrh	r3, [r3, #0]
 80161fe:	2b20      	cmp	r3, #32
 8016200:	d13c      	bne.n	801627c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	2220      	movs	r2, #32
 8016206:	4313      	orrs	r3, r2
 8016208:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801620a:	e037      	b.n	801627c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801620c:	1cbb      	adds	r3, r7, #2
 801620e:	2200      	movs	r2, #0
 8016210:	5e9b      	ldrsh	r3, [r3, r2]
 8016212:	2b00      	cmp	r3, #0
 8016214:	da03      	bge.n	801621e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	22b8      	movs	r2, #184	@ 0xb8
 801621a:	4313      	orrs	r3, r2
 801621c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801621e:	1cbb      	adds	r3, r7, #2
 8016220:	881b      	ldrh	r3, [r3, #0]
 8016222:	2201      	movs	r2, #1
 8016224:	4013      	ands	r3, r2
 8016226:	d003      	beq.n	8016230 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	22f2      	movs	r2, #242	@ 0xf2
 801622c:	4313      	orrs	r3, r2
 801622e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8016230:	1cbb      	adds	r3, r7, #2
 8016232:	881b      	ldrh	r3, [r3, #0]
 8016234:	2202      	movs	r2, #2
 8016236:	4013      	ands	r3, r2
 8016238:	d003      	beq.n	8016242 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	22f4      	movs	r2, #244	@ 0xf4
 801623e:	4313      	orrs	r3, r2
 8016240:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8016242:	1cbb      	adds	r3, r7, #2
 8016244:	881b      	ldrh	r3, [r3, #0]
 8016246:	2b10      	cmp	r3, #16
 8016248:	d103      	bne.n	8016252 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	2290      	movs	r2, #144	@ 0x90
 801624e:	4313      	orrs	r3, r2
 8016250:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8016252:	1cbb      	adds	r3, r7, #2
 8016254:	881b      	ldrh	r3, [r3, #0]
 8016256:	2b20      	cmp	r3, #32
 8016258:	d103      	bne.n	8016262 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	2260      	movs	r2, #96	@ 0x60
 801625e:	4313      	orrs	r3, r2
 8016260:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016266:	4b0d      	ldr	r3, [pc, #52]	@ (801629c <I2C_Enable_IRQ+0x118>)
 8016268:	429a      	cmp	r2, r3
 801626a:	d007      	beq.n	801627c <I2C_Enable_IRQ+0xf8>
 801626c:	1cbb      	adds	r3, r7, #2
 801626e:	881b      	ldrh	r3, [r3, #0]
 8016270:	2b40      	cmp	r3, #64	@ 0x40
 8016272:	d103      	bne.n	801627c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	2240      	movs	r2, #64	@ 0x40
 8016278:	4313      	orrs	r3, r2
 801627a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	6819      	ldr	r1, [r3, #0]
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	68fa      	ldr	r2, [r7, #12]
 8016288:	430a      	orrs	r2, r1
 801628a:	601a      	str	r2, [r3, #0]
}
 801628c:	46c0      	nop			@ (mov r8, r8)
 801628e:	46bd      	mov	sp, r7
 8016290:	b004      	add	sp, #16
 8016292:	bd80      	pop	{r7, pc}
 8016294:	08014a41 	.word	0x08014a41
 8016298:	08014e71 	.word	0x08014e71
 801629c:	08014c39 	.word	0x08014c39

080162a0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b084      	sub	sp, #16
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
 80162a8:	000a      	movs	r2, r1
 80162aa:	1cbb      	adds	r3, r7, #2
 80162ac:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80162ae:	2300      	movs	r3, #0
 80162b0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80162b2:	1cbb      	adds	r3, r7, #2
 80162b4:	881b      	ldrh	r3, [r3, #0]
 80162b6:	2201      	movs	r2, #1
 80162b8:	4013      	ands	r3, r2
 80162ba:	d010      	beq.n	80162de <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	2242      	movs	r2, #66	@ 0x42
 80162c0:	4313      	orrs	r3, r2
 80162c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2241      	movs	r2, #65	@ 0x41
 80162c8:	5c9b      	ldrb	r3, [r3, r2]
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	001a      	movs	r2, r3
 80162ce:	2328      	movs	r3, #40	@ 0x28
 80162d0:	4013      	ands	r3, r2
 80162d2:	2b28      	cmp	r3, #40	@ 0x28
 80162d4:	d003      	beq.n	80162de <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	22b0      	movs	r2, #176	@ 0xb0
 80162da:	4313      	orrs	r3, r2
 80162dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80162de:	1cbb      	adds	r3, r7, #2
 80162e0:	881b      	ldrh	r3, [r3, #0]
 80162e2:	2202      	movs	r2, #2
 80162e4:	4013      	ands	r3, r2
 80162e6:	d010      	beq.n	801630a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	2244      	movs	r2, #68	@ 0x44
 80162ec:	4313      	orrs	r3, r2
 80162ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2241      	movs	r2, #65	@ 0x41
 80162f4:	5c9b      	ldrb	r3, [r3, r2]
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	001a      	movs	r2, r3
 80162fa:	2328      	movs	r3, #40	@ 0x28
 80162fc:	4013      	ands	r3, r2
 80162fe:	2b28      	cmp	r3, #40	@ 0x28
 8016300:	d003      	beq.n	801630a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	22b0      	movs	r2, #176	@ 0xb0
 8016306:	4313      	orrs	r3, r2
 8016308:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801630a:	1cbb      	adds	r3, r7, #2
 801630c:	2200      	movs	r2, #0
 801630e:	5e9b      	ldrsh	r3, [r3, r2]
 8016310:	2b00      	cmp	r3, #0
 8016312:	da03      	bge.n	801631c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	22b8      	movs	r2, #184	@ 0xb8
 8016318:	4313      	orrs	r3, r2
 801631a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801631c:	1cbb      	adds	r3, r7, #2
 801631e:	881b      	ldrh	r3, [r3, #0]
 8016320:	2b10      	cmp	r3, #16
 8016322:	d103      	bne.n	801632c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	2290      	movs	r2, #144	@ 0x90
 8016328:	4313      	orrs	r3, r2
 801632a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801632c:	1cbb      	adds	r3, r7, #2
 801632e:	881b      	ldrh	r3, [r3, #0]
 8016330:	2b20      	cmp	r3, #32
 8016332:	d103      	bne.n	801633c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	2220      	movs	r2, #32
 8016338:	4313      	orrs	r3, r2
 801633a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 801633c:	1cbb      	adds	r3, r7, #2
 801633e:	881b      	ldrh	r3, [r3, #0]
 8016340:	2b40      	cmp	r3, #64	@ 0x40
 8016342:	d103      	bne.n	801634c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	2240      	movs	r2, #64	@ 0x40
 8016348:	4313      	orrs	r3, r2
 801634a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	681a      	ldr	r2, [r3, #0]
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	43d9      	mvns	r1, r3
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	400a      	ands	r2, r1
 801635c:	601a      	str	r2, [r3, #0]
}
 801635e:	46c0      	nop			@ (mov r8, r8)
 8016360:	46bd      	mov	sp, r7
 8016362:	b004      	add	sp, #16
 8016364:	bd80      	pop	{r7, pc}
	...

08016368 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2241      	movs	r2, #65	@ 0x41
 8016376:	5c9b      	ldrb	r3, [r3, r2]
 8016378:	b2db      	uxtb	r3, r3
 801637a:	2b20      	cmp	r3, #32
 801637c:	d138      	bne.n	80163f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2240      	movs	r2, #64	@ 0x40
 8016382:	5c9b      	ldrb	r3, [r3, r2]
 8016384:	2b01      	cmp	r3, #1
 8016386:	d101      	bne.n	801638c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8016388:	2302      	movs	r3, #2
 801638a:	e032      	b.n	80163f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2240      	movs	r2, #64	@ 0x40
 8016390:	2101      	movs	r1, #1
 8016392:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2241      	movs	r2, #65	@ 0x41
 8016398:	2124      	movs	r1, #36	@ 0x24
 801639a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	681a      	ldr	r2, [r3, #0]
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	2101      	movs	r1, #1
 80163a8:	438a      	bics	r2, r1
 80163aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	4911      	ldr	r1, [pc, #68]	@ (80163fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80163b8:	400a      	ands	r2, r1
 80163ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	6819      	ldr	r1, [r3, #0]
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	683a      	ldr	r2, [r7, #0]
 80163c8:	430a      	orrs	r2, r1
 80163ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	681a      	ldr	r2, [r3, #0]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	2101      	movs	r1, #1
 80163d8:	430a      	orrs	r2, r1
 80163da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2241      	movs	r2, #65	@ 0x41
 80163e0:	2120      	movs	r1, #32
 80163e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2240      	movs	r2, #64	@ 0x40
 80163e8:	2100      	movs	r1, #0
 80163ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80163ec:	2300      	movs	r3, #0
 80163ee:	e000      	b.n	80163f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80163f0:	2302      	movs	r3, #2
  }
}
 80163f2:	0018      	movs	r0, r3
 80163f4:	46bd      	mov	sp, r7
 80163f6:	b002      	add	sp, #8
 80163f8:	bd80      	pop	{r7, pc}
 80163fa:	46c0      	nop			@ (mov r8, r8)
 80163fc:	ffffefff 	.word	0xffffefff

08016400 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b084      	sub	sp, #16
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
 8016408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	2241      	movs	r2, #65	@ 0x41
 801640e:	5c9b      	ldrb	r3, [r3, r2]
 8016410:	b2db      	uxtb	r3, r3
 8016412:	2b20      	cmp	r3, #32
 8016414:	d139      	bne.n	801648a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2240      	movs	r2, #64	@ 0x40
 801641a:	5c9b      	ldrb	r3, [r3, r2]
 801641c:	2b01      	cmp	r3, #1
 801641e:	d101      	bne.n	8016424 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8016420:	2302      	movs	r3, #2
 8016422:	e033      	b.n	801648c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	2240      	movs	r2, #64	@ 0x40
 8016428:	2101      	movs	r1, #1
 801642a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	2241      	movs	r2, #65	@ 0x41
 8016430:	2124      	movs	r1, #36	@ 0x24
 8016432:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	681a      	ldr	r2, [r3, #0]
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	2101      	movs	r1, #1
 8016440:	438a      	bics	r2, r1
 8016442:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	4a11      	ldr	r2, [pc, #68]	@ (8016494 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8016450:	4013      	ands	r3, r2
 8016452:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8016454:	683b      	ldr	r3, [r7, #0]
 8016456:	021b      	lsls	r3, r3, #8
 8016458:	68fa      	ldr	r2, [r7, #12]
 801645a:	4313      	orrs	r3, r2
 801645c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	68fa      	ldr	r2, [r7, #12]
 8016464:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	681a      	ldr	r2, [r3, #0]
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	2101      	movs	r1, #1
 8016472:	430a      	orrs	r2, r1
 8016474:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	2241      	movs	r2, #65	@ 0x41
 801647a:	2120      	movs	r1, #32
 801647c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2240      	movs	r2, #64	@ 0x40
 8016482:	2100      	movs	r1, #0
 8016484:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016486:	2300      	movs	r3, #0
 8016488:	e000      	b.n	801648c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801648a:	2302      	movs	r3, #2
  }
}
 801648c:	0018      	movs	r0, r3
 801648e:	46bd      	mov	sp, r7
 8016490:	b004      	add	sp, #16
 8016492:	bd80      	pop	{r7, pc}
 8016494:	fffff0ff 	.word	0xfffff0ff

08016498 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b088      	sub	sp, #32
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d101      	bne.n	80164aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80164a6:	2301      	movs	r3, #1
 80164a8:	e0e1      	b.n	801666e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	2235      	movs	r2, #53	@ 0x35
 80164ae:	5c9b      	ldrb	r3, [r3, r2]
 80164b0:	b2db      	uxtb	r3, r3
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d107      	bne.n	80164c6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2234      	movs	r2, #52	@ 0x34
 80164ba:	2100      	movs	r1, #0
 80164bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	0018      	movs	r0, r3
 80164c2:	f7f4 facd 	bl	800aa60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2235      	movs	r2, #53	@ 0x35
 80164ca:	2102      	movs	r1, #2
 80164cc:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	69da      	ldr	r2, [r3, #28]
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	4967      	ldr	r1, [pc, #412]	@ (8016678 <HAL_I2S_Init+0x1e0>)
 80164da:	400a      	ands	r2, r1
 80164dc:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	2202      	movs	r2, #2
 80164e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	695b      	ldr	r3, [r3, #20]
 80164ea:	2b02      	cmp	r3, #2
 80164ec:	d073      	beq.n	80165d6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	68db      	ldr	r3, [r3, #12]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d102      	bne.n	80164fc <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80164f6:	2310      	movs	r3, #16
 80164f8:	617b      	str	r3, [r7, #20]
 80164fa:	e001      	b.n	8016500 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80164fc:	2320      	movs	r3, #32
 80164fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	689b      	ldr	r3, [r3, #8]
 8016504:	2b20      	cmp	r3, #32
 8016506:	d802      	bhi.n	801650e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8016508:	697b      	ldr	r3, [r7, #20]
 801650a:	005b      	lsls	r3, r3, #1
 801650c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801650e:	f002 fed3 	bl	80192b8 <HAL_RCC_GetSysClockFreq>
 8016512:	0003      	movs	r3, r0
 8016514:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	691a      	ldr	r2, [r3, #16]
 801651a:	2380      	movs	r3, #128	@ 0x80
 801651c:	009b      	lsls	r3, r3, #2
 801651e:	429a      	cmp	r2, r3
 8016520:	d131      	bne.n	8016586 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	68db      	ldr	r3, [r3, #12]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d016      	beq.n	8016558 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801652a:	697b      	ldr	r3, [r7, #20]
 801652c:	009b      	lsls	r3, r3, #2
 801652e:	0019      	movs	r1, r3
 8016530:	68f8      	ldr	r0, [r7, #12]
 8016532:	f7e9 fe37 	bl	80001a4 <__udivsi3>
 8016536:	0003      	movs	r3, r0
 8016538:	001a      	movs	r2, r3
 801653a:	0013      	movs	r3, r2
 801653c:	009b      	lsls	r3, r3, #2
 801653e:	189b      	adds	r3, r3, r2
 8016540:	005b      	lsls	r3, r3, #1
 8016542:	001a      	movs	r2, r3
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	695b      	ldr	r3, [r3, #20]
 8016548:	0019      	movs	r1, r3
 801654a:	0010      	movs	r0, r2
 801654c:	f7e9 fe2a 	bl	80001a4 <__udivsi3>
 8016550:	0003      	movs	r3, r0
 8016552:	3305      	adds	r3, #5
 8016554:	613b      	str	r3, [r7, #16]
 8016556:	e02a      	b.n	80165ae <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	00db      	lsls	r3, r3, #3
 801655c:	0019      	movs	r1, r3
 801655e:	68f8      	ldr	r0, [r7, #12]
 8016560:	f7e9 fe20 	bl	80001a4 <__udivsi3>
 8016564:	0003      	movs	r3, r0
 8016566:	001a      	movs	r2, r3
 8016568:	0013      	movs	r3, r2
 801656a:	009b      	lsls	r3, r3, #2
 801656c:	189b      	adds	r3, r3, r2
 801656e:	005b      	lsls	r3, r3, #1
 8016570:	001a      	movs	r2, r3
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	695b      	ldr	r3, [r3, #20]
 8016576:	0019      	movs	r1, r3
 8016578:	0010      	movs	r0, r2
 801657a:	f7e9 fe13 	bl	80001a4 <__udivsi3>
 801657e:	0003      	movs	r3, r0
 8016580:	3305      	adds	r3, #5
 8016582:	613b      	str	r3, [r7, #16]
 8016584:	e013      	b.n	80165ae <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8016586:	6979      	ldr	r1, [r7, #20]
 8016588:	68f8      	ldr	r0, [r7, #12]
 801658a:	f7e9 fe0b 	bl	80001a4 <__udivsi3>
 801658e:	0003      	movs	r3, r0
 8016590:	001a      	movs	r2, r3
 8016592:	0013      	movs	r3, r2
 8016594:	009b      	lsls	r3, r3, #2
 8016596:	189b      	adds	r3, r3, r2
 8016598:	005b      	lsls	r3, r3, #1
 801659a:	001a      	movs	r2, r3
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	695b      	ldr	r3, [r3, #20]
 80165a0:	0019      	movs	r1, r3
 80165a2:	0010      	movs	r0, r2
 80165a4:	f7e9 fdfe 	bl	80001a4 <__udivsi3>
 80165a8:	0003      	movs	r3, r0
 80165aa:	3305      	adds	r3, #5
 80165ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80165ae:	693b      	ldr	r3, [r7, #16]
 80165b0:	210a      	movs	r1, #10
 80165b2:	0018      	movs	r0, r3
 80165b4:	f7e9 fdf6 	bl	80001a4 <__udivsi3>
 80165b8:	0003      	movs	r3, r0
 80165ba:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80165bc:	693b      	ldr	r3, [r7, #16]
 80165be:	2201      	movs	r2, #1
 80165c0:	4013      	ands	r3, r2
 80165c2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80165c4:	693a      	ldr	r2, [r7, #16]
 80165c6:	69bb      	ldr	r3, [r7, #24]
 80165c8:	1ad3      	subs	r3, r2, r3
 80165ca:	085b      	lsrs	r3, r3, #1
 80165cc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80165ce:	69bb      	ldr	r3, [r7, #24]
 80165d0:	021b      	lsls	r3, r3, #8
 80165d2:	61bb      	str	r3, [r7, #24]
 80165d4:	e003      	b.n	80165de <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80165d6:	2302      	movs	r3, #2
 80165d8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80165da:	2300      	movs	r3, #0
 80165dc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80165de:	69fb      	ldr	r3, [r7, #28]
 80165e0:	2b01      	cmp	r3, #1
 80165e2:	d902      	bls.n	80165ea <HAL_I2S_Init+0x152>
 80165e4:	69fb      	ldr	r3, [r7, #28]
 80165e6:	2bff      	cmp	r3, #255	@ 0xff
 80165e8:	d907      	bls.n	80165fa <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80165ee:	2210      	movs	r2, #16
 80165f0:	431a      	orrs	r2, r3
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80165f6:	2301      	movs	r3, #1
 80165f8:	e039      	b.n	801666e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	691a      	ldr	r2, [r3, #16]
 80165fe:	69bb      	ldr	r3, [r7, #24]
 8016600:	431a      	orrs	r2, r3
 8016602:	0011      	movs	r1, r2
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	69fa      	ldr	r2, [r7, #28]
 801660a:	430a      	orrs	r2, r1
 801660c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	69db      	ldr	r3, [r3, #28]
 8016614:	4a18      	ldr	r2, [pc, #96]	@ (8016678 <HAL_I2S_Init+0x1e0>)
 8016616:	401a      	ands	r2, r3
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	6859      	ldr	r1, [r3, #4]
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	689b      	ldr	r3, [r3, #8]
 8016620:	4319      	orrs	r1, r3
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	68db      	ldr	r3, [r3, #12]
 8016626:	4319      	orrs	r1, r3
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	699b      	ldr	r3, [r3, #24]
 801662c:	430b      	orrs	r3, r1
 801662e:	431a      	orrs	r2, r3
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	2180      	movs	r1, #128	@ 0x80
 8016636:	0109      	lsls	r1, r1, #4
 8016638:	430a      	orrs	r2, r1
 801663a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	689b      	ldr	r3, [r3, #8]
 8016640:	2b30      	cmp	r3, #48	@ 0x30
 8016642:	d003      	beq.n	801664c <HAL_I2S_Init+0x1b4>
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	689b      	ldr	r3, [r3, #8]
 8016648:	2bb0      	cmp	r3, #176	@ 0xb0
 801664a:	d108      	bne.n	801665e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	69da      	ldr	r2, [r3, #28]
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	2180      	movs	r1, #128	@ 0x80
 8016658:	0149      	lsls	r1, r1, #5
 801665a:	430a      	orrs	r2, r1
 801665c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	2200      	movs	r2, #0
 8016662:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2235      	movs	r2, #53	@ 0x35
 8016668:	2101      	movs	r1, #1
 801666a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801666c:	2300      	movs	r3, #0
}
 801666e:	0018      	movs	r0, r3
 8016670:	46bd      	mov	sp, r7
 8016672:	b008      	add	sp, #32
 8016674:	bd80      	pop	{r7, pc}
 8016676:	46c0      	nop			@ (mov r8, r8)
 8016678:	fffff040 	.word	0xfffff040

0801667c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b086      	sub	sp, #24
 8016680:	af00      	add	r7, sp, #0
 8016682:	60f8      	str	r0, [r7, #12]
 8016684:	60b9      	str	r1, [r7, #8]
 8016686:	1dbb      	adds	r3, r7, #6
 8016688:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 801668a:	68bb      	ldr	r3, [r7, #8]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d003      	beq.n	8016698 <HAL_I2S_Receive_DMA+0x1c>
 8016690:	1dbb      	adds	r3, r7, #6
 8016692:	881b      	ldrh	r3, [r3, #0]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d101      	bne.n	801669c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8016698:	2301      	movs	r3, #1
 801669a:	e0a6      	b.n	80167ea <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	2234      	movs	r2, #52	@ 0x34
 80166a0:	5c9b      	ldrb	r3, [r3, r2]
 80166a2:	b2db      	uxtb	r3, r3
 80166a4:	2b01      	cmp	r3, #1
 80166a6:	d101      	bne.n	80166ac <HAL_I2S_Receive_DMA+0x30>
 80166a8:	2302      	movs	r3, #2
 80166aa:	e09e      	b.n	80167ea <HAL_I2S_Receive_DMA+0x16e>
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	2234      	movs	r2, #52	@ 0x34
 80166b0:	2101      	movs	r1, #1
 80166b2:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	2235      	movs	r2, #53	@ 0x35
 80166b8:	5c9b      	ldrb	r3, [r3, r2]
 80166ba:	b2db      	uxtb	r3, r3
 80166bc:	2b01      	cmp	r3, #1
 80166be:	d005      	beq.n	80166cc <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	2234      	movs	r2, #52	@ 0x34
 80166c4:	2100      	movs	r1, #0
 80166c6:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80166c8:	2302      	movs	r3, #2
 80166ca:	e08e      	b.n	80167ea <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	2235      	movs	r2, #53	@ 0x35
 80166d0:	2104      	movs	r1, #4
 80166d2:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	2200      	movs	r2, #0
 80166d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	68ba      	ldr	r2, [r7, #8]
 80166de:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	69db      	ldr	r3, [r3, #28]
 80166e6:	2207      	movs	r2, #7
 80166e8:	4013      	ands	r3, r2
 80166ea:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80166ec:	697b      	ldr	r3, [r7, #20]
 80166ee:	2b03      	cmp	r3, #3
 80166f0:	d002      	beq.n	80166f8 <HAL_I2S_Receive_DMA+0x7c>
 80166f2:	697b      	ldr	r3, [r7, #20]
 80166f4:	2b05      	cmp	r3, #5
 80166f6:	d10c      	bne.n	8016712 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80166f8:	1dbb      	adds	r3, r7, #6
 80166fa:	881b      	ldrh	r3, [r3, #0]
 80166fc:	18db      	adds	r3, r3, r3
 80166fe:	b29a      	uxth	r2, r3
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8016704:	1dbb      	adds	r3, r7, #6
 8016706:	881b      	ldrh	r3, [r3, #0]
 8016708:	18db      	adds	r3, r3, r3
 801670a:	b29a      	uxth	r2, r3
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016710:	e007      	b.n	8016722 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	1dba      	adds	r2, r7, #6
 8016716:	8812      	ldrh	r2, [r2, #0]
 8016718:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	1dba      	adds	r2, r7, #6
 801671e:	8812      	ldrh	r2, [r2, #0]
 8016720:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016726:	4a33      	ldr	r2, [pc, #204]	@ (80167f4 <HAL_I2S_Receive_DMA+0x178>)
 8016728:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801672e:	4a32      	ldr	r2, [pc, #200]	@ (80167f8 <HAL_I2S_Receive_DMA+0x17c>)
 8016730:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016736:	4a31      	ldr	r2, [pc, #196]	@ (80167fc <HAL_I2S_Receive_DMA+0x180>)
 8016738:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	69da      	ldr	r2, [r3, #28]
 8016740:	23c0      	movs	r3, #192	@ 0xc0
 8016742:	009b      	lsls	r3, r3, #2
 8016744:	401a      	ands	r2, r3
 8016746:	23c0      	movs	r3, #192	@ 0xc0
 8016748:	009b      	lsls	r3, r3, #2
 801674a:	429a      	cmp	r2, r3
 801674c:	d10a      	bne.n	8016764 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801674e:	2300      	movs	r3, #0
 8016750:	613b      	str	r3, [r7, #16]
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	68db      	ldr	r3, [r3, #12]
 8016758:	613b      	str	r3, [r7, #16]
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	689b      	ldr	r3, [r3, #8]
 8016760:	613b      	str	r3, [r7, #16]
 8016762:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	330c      	adds	r3, #12
 801676e:	0019      	movs	r1, r3
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016774:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801677a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 801677c:	f7fc fa0a 	bl	8012b94 <HAL_DMA_Start_IT>
 8016780:	1e03      	subs	r3, r0, #0
 8016782:	d00f      	beq.n	80167a4 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016788:	2208      	movs	r2, #8
 801678a:	431a      	orrs	r2, r3
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	2235      	movs	r2, #53	@ 0x35
 8016794:	2101      	movs	r1, #1
 8016796:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	2234      	movs	r2, #52	@ 0x34
 801679c:	2100      	movs	r1, #0
 801679e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80167a0:	2301      	movs	r3, #1
 80167a2:	e022      	b.n	80167ea <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	69da      	ldr	r2, [r3, #28]
 80167aa:	2380      	movs	r3, #128	@ 0x80
 80167ac:	00db      	lsls	r3, r3, #3
 80167ae:	4013      	ands	r3, r2
 80167b0:	d108      	bne.n	80167c4 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	69da      	ldr	r2, [r3, #28]
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	2180      	movs	r1, #128	@ 0x80
 80167be:	00c9      	lsls	r1, r1, #3
 80167c0:	430a      	orrs	r2, r1
 80167c2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	685b      	ldr	r3, [r3, #4]
 80167ca:	2201      	movs	r2, #1
 80167cc:	4013      	ands	r3, r2
 80167ce:	d107      	bne.n	80167e0 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	685a      	ldr	r2, [r3, #4]
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	2101      	movs	r1, #1
 80167dc:	430a      	orrs	r2, r1
 80167de:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	2234      	movs	r2, #52	@ 0x34
 80167e4:	2100      	movs	r1, #0
 80167e6:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80167e8:	2300      	movs	r3, #0
}
 80167ea:	0018      	movs	r0, r3
 80167ec:	46bd      	mov	sp, r7
 80167ee:	b006      	add	sp, #24
 80167f0:	bd80      	pop	{r7, pc}
 80167f2:	46c0      	nop			@ (mov r8, r8)
 80167f4:	080169dd 	.word	0x080169dd
 80167f8:	08016999 	.word	0x08016999
 80167fc:	080169fb 	.word	0x080169fb

08016800 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b086      	sub	sp, #24
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016808:	2317      	movs	r3, #23
 801680a:	18fb      	adds	r3, r7, r3
 801680c:	2200      	movs	r2, #0
 801680e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	685a      	ldr	r2, [r3, #4]
 8016814:	2380      	movs	r3, #128	@ 0x80
 8016816:	009b      	lsls	r3, r3, #2
 8016818:	429a      	cmp	r2, r3
 801681a:	d003      	beq.n	8016824 <HAL_I2S_DMAStop+0x24>
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	685b      	ldr	r3, [r3, #4]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d158      	bne.n	80168d6 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016828:	2b00      	cmp	r3, #0
 801682a:	d010      	beq.n	801684e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016830:	0018      	movs	r0, r3
 8016832:	f7fc fa15 	bl	8012c60 <HAL_DMA_Abort>
 8016836:	1e03      	subs	r3, r0, #0
 8016838:	d009      	beq.n	801684e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801683e:	2208      	movs	r2, #8
 8016840:	431a      	orrs	r2, r3
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8016846:	2317      	movs	r3, #23
 8016848:	18fb      	adds	r3, r7, r3
 801684a:	2201      	movs	r2, #1
 801684c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801684e:	6878      	ldr	r0, [r7, #4]
 8016850:	2364      	movs	r3, #100	@ 0x64
 8016852:	2201      	movs	r2, #1
 8016854:	2102      	movs	r1, #2
 8016856:	f000 f8f7 	bl	8016a48 <I2S_WaitFlagStateUntilTimeout>
 801685a:	1e03      	subs	r3, r0, #0
 801685c:	d00d      	beq.n	801687a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016862:	2201      	movs	r2, #1
 8016864:	431a      	orrs	r2, r3
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	2235      	movs	r2, #53	@ 0x35
 801686e:	2101      	movs	r1, #1
 8016870:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8016872:	2317      	movs	r3, #23
 8016874:	18fb      	adds	r3, r7, r3
 8016876:	2201      	movs	r2, #1
 8016878:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801687a:	6878      	ldr	r0, [r7, #4]
 801687c:	2364      	movs	r3, #100	@ 0x64
 801687e:	2200      	movs	r2, #0
 8016880:	2180      	movs	r1, #128	@ 0x80
 8016882:	f000 f8e1 	bl	8016a48 <I2S_WaitFlagStateUntilTimeout>
 8016886:	1e03      	subs	r3, r0, #0
 8016888:	d00d      	beq.n	80168a6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801688e:	2201      	movs	r2, #1
 8016890:	431a      	orrs	r2, r3
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	2235      	movs	r2, #53	@ 0x35
 801689a:	2101      	movs	r1, #1
 801689c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801689e:	2317      	movs	r3, #23
 80168a0:	18fb      	adds	r3, r7, r3
 80168a2:	2201      	movs	r2, #1
 80168a4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	69da      	ldr	r2, [r3, #28]
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	4938      	ldr	r1, [pc, #224]	@ (8016994 <HAL_I2S_DMAStop+0x194>)
 80168b2:	400a      	ands	r2, r1
 80168b4:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80168b6:	2300      	movs	r3, #0
 80168b8:	613b      	str	r3, [r7, #16]
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	689b      	ldr	r3, [r3, #8]
 80168c0:	613b      	str	r3, [r7, #16]
 80168c2:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	685a      	ldr	r2, [r3, #4]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	2102      	movs	r1, #2
 80168d0:	438a      	bics	r2, r1
 80168d2:	605a      	str	r2, [r3, #4]
 80168d4:	e053      	b.n	801697e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	685a      	ldr	r2, [r3, #4]
 80168da:	23c0      	movs	r3, #192	@ 0xc0
 80168dc:	009b      	lsls	r3, r3, #2
 80168de:	429a      	cmp	r2, r3
 80168e0:	d005      	beq.n	80168ee <HAL_I2S_DMAStop+0xee>
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	685a      	ldr	r2, [r3, #4]
 80168e6:	2380      	movs	r3, #128	@ 0x80
 80168e8:	005b      	lsls	r3, r3, #1
 80168ea:	429a      	cmp	r2, r3
 80168ec:	d147      	bne.n	801697e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d010      	beq.n	8016918 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168fa:	0018      	movs	r0, r3
 80168fc:	f7fc f9b0 	bl	8012c60 <HAL_DMA_Abort>
 8016900:	1e03      	subs	r3, r0, #0
 8016902:	d009      	beq.n	8016918 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016908:	2208      	movs	r2, #8
 801690a:	431a      	orrs	r2, r3
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8016910:	2317      	movs	r3, #23
 8016912:	18fb      	adds	r3, r7, r3
 8016914:	2201      	movs	r2, #1
 8016916:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	69da      	ldr	r2, [r3, #28]
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	491c      	ldr	r1, [pc, #112]	@ (8016994 <HAL_I2S_DMAStop+0x194>)
 8016924:	400a      	ands	r2, r1
 8016926:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8016928:	2300      	movs	r3, #0
 801692a:	60fb      	str	r3, [r7, #12]
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	68db      	ldr	r3, [r3, #12]
 8016932:	60fb      	str	r3, [r7, #12]
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	689b      	ldr	r3, [r3, #8]
 801693a:	60fb      	str	r3, [r7, #12]
 801693c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	685a      	ldr	r2, [r3, #4]
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	2101      	movs	r1, #1
 801694a:	438a      	bics	r2, r1
 801694c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	685a      	ldr	r2, [r3, #4]
 8016952:	2380      	movs	r3, #128	@ 0x80
 8016954:	005b      	lsls	r3, r3, #1
 8016956:	429a      	cmp	r2, r3
 8016958:	d10e      	bne.n	8016978 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801695e:	2240      	movs	r2, #64	@ 0x40
 8016960:	431a      	orrs	r2, r3
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	2235      	movs	r2, #53	@ 0x35
 801696a:	2101      	movs	r1, #1
 801696c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 801696e:	2317      	movs	r3, #23
 8016970:	18fb      	adds	r3, r7, r3
 8016972:	2201      	movs	r2, #1
 8016974:	701a      	strb	r2, [r3, #0]
 8016976:	e002      	b.n	801697e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2235      	movs	r2, #53	@ 0x35
 8016982:	2101      	movs	r1, #1
 8016984:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8016986:	2317      	movs	r3, #23
 8016988:	18fb      	adds	r3, r7, r3
 801698a:	781b      	ldrb	r3, [r3, #0]
}
 801698c:	0018      	movs	r0, r3
 801698e:	46bd      	mov	sp, r7
 8016990:	b006      	add	sp, #24
 8016992:	bd80      	pop	{r7, pc}
 8016994:	fffffbff 	.word	0xfffffbff

08016998 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b084      	sub	sp, #16
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169a4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	69db      	ldr	r3, [r3, #28]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d10e      	bne.n	80169cc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	685a      	ldr	r2, [r3, #4]
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	2101      	movs	r1, #1
 80169ba:	438a      	bics	r2, r1
 80169bc:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	2200      	movs	r2, #0
 80169c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	2235      	movs	r2, #53	@ 0x35
 80169c8:	2101      	movs	r1, #1
 80169ca:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	0018      	movs	r0, r3
 80169d0:	f7f8 fea8 	bl	800f724 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80169d4:	46c0      	nop			@ (mov r8, r8)
 80169d6:	46bd      	mov	sp, r7
 80169d8:	b004      	add	sp, #16
 80169da:	bd80      	pop	{r7, pc}

080169dc <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b084      	sub	sp, #16
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169e8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	0018      	movs	r0, r3
 80169ee:	f7f8 fe87 	bl	800f700 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80169f2:	46c0      	nop			@ (mov r8, r8)
 80169f4:	46bd      	mov	sp, r7
 80169f6:	b004      	add	sp, #16
 80169f8:	bd80      	pop	{r7, pc}

080169fa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80169fa:	b580      	push	{r7, lr}
 80169fc:	b084      	sub	sp, #16
 80169fe:	af00      	add	r7, sp, #0
 8016a00:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a06:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	685a      	ldr	r2, [r3, #4]
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	2103      	movs	r1, #3
 8016a14:	438a      	bics	r2, r1
 8016a16:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	2200      	movs	r2, #0
 8016a22:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	2235      	movs	r2, #53	@ 0x35
 8016a28:	2101      	movs	r1, #1
 8016a2a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a30:	2208      	movs	r2, #8
 8016a32:	431a      	orrs	r2, r3
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	0018      	movs	r0, r3
 8016a3c:	f7f8 fec0 	bl	800f7c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8016a40:	46c0      	nop			@ (mov r8, r8)
 8016a42:	46bd      	mov	sp, r7
 8016a44:	b004      	add	sp, #16
 8016a46:	bd80      	pop	{r7, pc}

08016a48 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b086      	sub	sp, #24
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	60f8      	str	r0, [r7, #12]
 8016a50:	60b9      	str	r1, [r7, #8]
 8016a52:	603b      	str	r3, [r7, #0]
 8016a54:	1dfb      	adds	r3, r7, #7
 8016a56:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8016a58:	f7fb fb4a 	bl	80120f0 <HAL_GetTick>
 8016a5c:	0003      	movs	r3, r0
 8016a5e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8016a60:	e017      	b.n	8016a92 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8016a62:	683b      	ldr	r3, [r7, #0]
 8016a64:	3301      	adds	r3, #1
 8016a66:	d014      	beq.n	8016a92 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8016a68:	f7fb fb42 	bl	80120f0 <HAL_GetTick>
 8016a6c:	0002      	movs	r2, r0
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	1ad3      	subs	r3, r2, r3
 8016a72:	683a      	ldr	r2, [r7, #0]
 8016a74:	429a      	cmp	r2, r3
 8016a76:	d902      	bls.n	8016a7e <I2S_WaitFlagStateUntilTimeout+0x36>
 8016a78:	683b      	ldr	r3, [r7, #0]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d109      	bne.n	8016a92 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	2235      	movs	r2, #53	@ 0x35
 8016a82:	2101      	movs	r1, #1
 8016a84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	2234      	movs	r2, #52	@ 0x34
 8016a8a:	2100      	movs	r1, #0
 8016a8c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8016a8e:	2303      	movs	r3, #3
 8016a90:	e00f      	b.n	8016ab2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	689b      	ldr	r3, [r3, #8]
 8016a98:	68ba      	ldr	r2, [r7, #8]
 8016a9a:	4013      	ands	r3, r2
 8016a9c:	68ba      	ldr	r2, [r7, #8]
 8016a9e:	1ad3      	subs	r3, r2, r3
 8016aa0:	425a      	negs	r2, r3
 8016aa2:	4153      	adcs	r3, r2
 8016aa4:	b2db      	uxtb	r3, r3
 8016aa6:	001a      	movs	r2, r3
 8016aa8:	1dfb      	adds	r3, r7, #7
 8016aaa:	781b      	ldrb	r3, [r3, #0]
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d1d8      	bne.n	8016a62 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8016ab0:	2300      	movs	r3, #0
}
 8016ab2:	0018      	movs	r0, r3
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	b006      	add	sp, #24
 8016ab8:	bd80      	pop	{r7, pc}
	...

08016abc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8016abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016abe:	b08b      	sub	sp, #44	@ 0x2c
 8016ac0:	af06      	add	r7, sp, #24
 8016ac2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d101      	bne.n	8016ace <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8016aca:	2301      	movs	r3, #1
 8016acc:	e0f0      	b.n	8016cb0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	4a79      	ldr	r2, [pc, #484]	@ (8016cb8 <HAL_PCD_Init+0x1fc>)
 8016ad2:	5c9b      	ldrb	r3, [r3, r2]
 8016ad4:	b2db      	uxtb	r3, r3
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d108      	bne.n	8016aec <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8016ada:	687a      	ldr	r2, [r7, #4]
 8016adc:	23aa      	movs	r3, #170	@ 0xaa
 8016ade:	009b      	lsls	r3, r3, #2
 8016ae0:	2100      	movs	r1, #0
 8016ae2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	0018      	movs	r0, r3
 8016ae8:	f009 ff4a 	bl	8020980 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	4a72      	ldr	r2, [pc, #456]	@ (8016cb8 <HAL_PCD_Init+0x1fc>)
 8016af0:	2103      	movs	r1, #3
 8016af2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	0018      	movs	r0, r3
 8016afa:	f005 fefd 	bl	801c8f8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016afe:	230f      	movs	r3, #15
 8016b00:	18fb      	adds	r3, r7, r3
 8016b02:	2200      	movs	r2, #0
 8016b04:	701a      	strb	r2, [r3, #0]
 8016b06:	e049      	b.n	8016b9c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8016b08:	200f      	movs	r0, #15
 8016b0a:	183b      	adds	r3, r7, r0
 8016b0c:	781b      	ldrb	r3, [r3, #0]
 8016b0e:	6879      	ldr	r1, [r7, #4]
 8016b10:	1c5a      	adds	r2, r3, #1
 8016b12:	0013      	movs	r3, r2
 8016b14:	009b      	lsls	r3, r3, #2
 8016b16:	189b      	adds	r3, r3, r2
 8016b18:	00db      	lsls	r3, r3, #3
 8016b1a:	18cb      	adds	r3, r1, r3
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	2201      	movs	r2, #1
 8016b20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8016b22:	183b      	adds	r3, r7, r0
 8016b24:	781b      	ldrb	r3, [r3, #0]
 8016b26:	6879      	ldr	r1, [r7, #4]
 8016b28:	1c5a      	adds	r2, r3, #1
 8016b2a:	0013      	movs	r3, r2
 8016b2c:	009b      	lsls	r3, r3, #2
 8016b2e:	189b      	adds	r3, r3, r2
 8016b30:	00db      	lsls	r3, r3, #3
 8016b32:	183a      	adds	r2, r7, r0
 8016b34:	7812      	ldrb	r2, [r2, #0]
 8016b36:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016b38:	183b      	adds	r3, r7, r0
 8016b3a:	781b      	ldrb	r3, [r3, #0]
 8016b3c:	6879      	ldr	r1, [r7, #4]
 8016b3e:	1c5a      	adds	r2, r3, #1
 8016b40:	0013      	movs	r3, r2
 8016b42:	009b      	lsls	r3, r3, #2
 8016b44:	189b      	adds	r3, r3, r2
 8016b46:	00db      	lsls	r3, r3, #3
 8016b48:	18cb      	adds	r3, r1, r3
 8016b4a:	3303      	adds	r3, #3
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8016b50:	183b      	adds	r3, r7, r0
 8016b52:	781a      	ldrb	r2, [r3, #0]
 8016b54:	6879      	ldr	r1, [r7, #4]
 8016b56:	0013      	movs	r3, r2
 8016b58:	009b      	lsls	r3, r3, #2
 8016b5a:	189b      	adds	r3, r3, r2
 8016b5c:	00db      	lsls	r3, r3, #3
 8016b5e:	18cb      	adds	r3, r1, r3
 8016b60:	3338      	adds	r3, #56	@ 0x38
 8016b62:	2200      	movs	r2, #0
 8016b64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8016b66:	183b      	adds	r3, r7, r0
 8016b68:	781a      	ldrb	r2, [r3, #0]
 8016b6a:	6879      	ldr	r1, [r7, #4]
 8016b6c:	0013      	movs	r3, r2
 8016b6e:	009b      	lsls	r3, r3, #2
 8016b70:	189b      	adds	r3, r3, r2
 8016b72:	00db      	lsls	r3, r3, #3
 8016b74:	18cb      	adds	r3, r1, r3
 8016b76:	333c      	adds	r3, #60	@ 0x3c
 8016b78:	2200      	movs	r2, #0
 8016b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8016b7c:	183b      	adds	r3, r7, r0
 8016b7e:	781a      	ldrb	r2, [r3, #0]
 8016b80:	6879      	ldr	r1, [r7, #4]
 8016b82:	0013      	movs	r3, r2
 8016b84:	009b      	lsls	r3, r3, #2
 8016b86:	189b      	adds	r3, r3, r2
 8016b88:	00db      	lsls	r3, r3, #3
 8016b8a:	18cb      	adds	r3, r1, r3
 8016b8c:	3340      	adds	r3, #64	@ 0x40
 8016b8e:	2200      	movs	r2, #0
 8016b90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016b92:	183b      	adds	r3, r7, r0
 8016b94:	781a      	ldrb	r2, [r3, #0]
 8016b96:	183b      	adds	r3, r7, r0
 8016b98:	3201      	adds	r2, #1
 8016b9a:	701a      	strb	r2, [r3, #0]
 8016b9c:	210f      	movs	r1, #15
 8016b9e:	187b      	adds	r3, r7, r1
 8016ba0:	781a      	ldrb	r2, [r3, #0]
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	685b      	ldr	r3, [r3, #4]
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d3ae      	bcc.n	8016b08 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016baa:	187b      	adds	r3, r7, r1
 8016bac:	2200      	movs	r2, #0
 8016bae:	701a      	strb	r2, [r3, #0]
 8016bb0:	e056      	b.n	8016c60 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8016bb2:	240f      	movs	r4, #15
 8016bb4:	193b      	adds	r3, r7, r4
 8016bb6:	781a      	ldrb	r2, [r3, #0]
 8016bb8:	6878      	ldr	r0, [r7, #4]
 8016bba:	236a      	movs	r3, #106	@ 0x6a
 8016bbc:	33ff      	adds	r3, #255	@ 0xff
 8016bbe:	0019      	movs	r1, r3
 8016bc0:	0013      	movs	r3, r2
 8016bc2:	009b      	lsls	r3, r3, #2
 8016bc4:	189b      	adds	r3, r3, r2
 8016bc6:	00db      	lsls	r3, r3, #3
 8016bc8:	18c3      	adds	r3, r0, r3
 8016bca:	185b      	adds	r3, r3, r1
 8016bcc:	2200      	movs	r2, #0
 8016bce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8016bd0:	193b      	adds	r3, r7, r4
 8016bd2:	781a      	ldrb	r2, [r3, #0]
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	23b4      	movs	r3, #180	@ 0xb4
 8016bd8:	0059      	lsls	r1, r3, #1
 8016bda:	0013      	movs	r3, r2
 8016bdc:	009b      	lsls	r3, r3, #2
 8016bde:	189b      	adds	r3, r3, r2
 8016be0:	00db      	lsls	r3, r3, #3
 8016be2:	18c3      	adds	r3, r0, r3
 8016be4:	185b      	adds	r3, r3, r1
 8016be6:	193a      	adds	r2, r7, r4
 8016be8:	7812      	ldrb	r2, [r2, #0]
 8016bea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8016bec:	193b      	adds	r3, r7, r4
 8016bee:	781a      	ldrb	r2, [r3, #0]
 8016bf0:	6878      	ldr	r0, [r7, #4]
 8016bf2:	236c      	movs	r3, #108	@ 0x6c
 8016bf4:	33ff      	adds	r3, #255	@ 0xff
 8016bf6:	0019      	movs	r1, r3
 8016bf8:	0013      	movs	r3, r2
 8016bfa:	009b      	lsls	r3, r3, #2
 8016bfc:	189b      	adds	r3, r3, r2
 8016bfe:	00db      	lsls	r3, r3, #3
 8016c00:	18c3      	adds	r3, r0, r3
 8016c02:	185b      	adds	r3, r3, r1
 8016c04:	2200      	movs	r2, #0
 8016c06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8016c08:	193b      	adds	r3, r7, r4
 8016c0a:	781a      	ldrb	r2, [r3, #0]
 8016c0c:	6878      	ldr	r0, [r7, #4]
 8016c0e:	23bc      	movs	r3, #188	@ 0xbc
 8016c10:	0059      	lsls	r1, r3, #1
 8016c12:	0013      	movs	r3, r2
 8016c14:	009b      	lsls	r3, r3, #2
 8016c16:	189b      	adds	r3, r3, r2
 8016c18:	00db      	lsls	r3, r3, #3
 8016c1a:	18c3      	adds	r3, r0, r3
 8016c1c:	185b      	adds	r3, r3, r1
 8016c1e:	2200      	movs	r2, #0
 8016c20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016c22:	193b      	adds	r3, r7, r4
 8016c24:	781a      	ldrb	r2, [r3, #0]
 8016c26:	6878      	ldr	r0, [r7, #4]
 8016c28:	23be      	movs	r3, #190	@ 0xbe
 8016c2a:	0059      	lsls	r1, r3, #1
 8016c2c:	0013      	movs	r3, r2
 8016c2e:	009b      	lsls	r3, r3, #2
 8016c30:	189b      	adds	r3, r3, r2
 8016c32:	00db      	lsls	r3, r3, #3
 8016c34:	18c3      	adds	r3, r0, r3
 8016c36:	185b      	adds	r3, r3, r1
 8016c38:	2200      	movs	r2, #0
 8016c3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8016c3c:	193b      	adds	r3, r7, r4
 8016c3e:	781a      	ldrb	r2, [r3, #0]
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	23c0      	movs	r3, #192	@ 0xc0
 8016c44:	0059      	lsls	r1, r3, #1
 8016c46:	0013      	movs	r3, r2
 8016c48:	009b      	lsls	r3, r3, #2
 8016c4a:	189b      	adds	r3, r3, r2
 8016c4c:	00db      	lsls	r3, r3, #3
 8016c4e:	18c3      	adds	r3, r0, r3
 8016c50:	185b      	adds	r3, r3, r1
 8016c52:	2200      	movs	r2, #0
 8016c54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016c56:	193b      	adds	r3, r7, r4
 8016c58:	781a      	ldrb	r2, [r3, #0]
 8016c5a:	193b      	adds	r3, r7, r4
 8016c5c:	3201      	adds	r2, #1
 8016c5e:	701a      	strb	r2, [r3, #0]
 8016c60:	230f      	movs	r3, #15
 8016c62:	18fb      	adds	r3, r7, r3
 8016c64:	781a      	ldrb	r2, [r3, #0]
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	685b      	ldr	r3, [r3, #4]
 8016c6a:	429a      	cmp	r2, r3
 8016c6c:	d3a1      	bcc.n	8016bb2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	6818      	ldr	r0, [r3, #0]
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	466a      	mov	r2, sp
 8016c76:	0011      	movs	r1, r2
 8016c78:	001a      	movs	r2, r3
 8016c7a:	3210      	adds	r2, #16
 8016c7c:	ca70      	ldmia	r2!, {r4, r5, r6}
 8016c7e:	c170      	stmia	r1!, {r4, r5, r6}
 8016c80:	ca30      	ldmia	r2!, {r4, r5}
 8016c82:	c130      	stmia	r1!, {r4, r5}
 8016c84:	6859      	ldr	r1, [r3, #4]
 8016c86:	689a      	ldr	r2, [r3, #8]
 8016c88:	68db      	ldr	r3, [r3, #12]
 8016c8a:	f005 fe4f 	bl	801c92c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	2224      	movs	r2, #36	@ 0x24
 8016c92:	2100      	movs	r1, #0
 8016c94:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	4a07      	ldr	r2, [pc, #28]	@ (8016cb8 <HAL_PCD_Init+0x1fc>)
 8016c9a:	2101      	movs	r1, #1
 8016c9c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	69db      	ldr	r3, [r3, #28]
 8016ca2:	2b01      	cmp	r3, #1
 8016ca4:	d103      	bne.n	8016cae <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	0018      	movs	r0, r3
 8016caa:	f001 fd23 	bl	80186f4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8016cae:	2300      	movs	r3, #0
}
 8016cb0:	0018      	movs	r0, r3
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	b005      	add	sp, #20
 8016cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cb8:	000002a9 	.word	0x000002a9

08016cbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b082      	sub	sp, #8
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8016cc4:	687a      	ldr	r2, [r7, #4]
 8016cc6:	23aa      	movs	r3, #170	@ 0xaa
 8016cc8:	009b      	lsls	r3, r3, #2
 8016cca:	5cd3      	ldrb	r3, [r2, r3]
 8016ccc:	2b01      	cmp	r3, #1
 8016cce:	d101      	bne.n	8016cd4 <HAL_PCD_Start+0x18>
 8016cd0:	2302      	movs	r3, #2
 8016cd2:	e014      	b.n	8016cfe <HAL_PCD_Start+0x42>
 8016cd4:	687a      	ldr	r2, [r7, #4]
 8016cd6:	23aa      	movs	r3, #170	@ 0xaa
 8016cd8:	009b      	lsls	r3, r3, #2
 8016cda:	2101      	movs	r1, #1
 8016cdc:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	0018      	movs	r0, r3
 8016ce4:	f005 fdf2 	bl	801c8cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	0018      	movs	r0, r3
 8016cee:	f007 fdf5 	bl	801e8dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8016cf2:	687a      	ldr	r2, [r7, #4]
 8016cf4:	23aa      	movs	r3, #170	@ 0xaa
 8016cf6:	009b      	lsls	r3, r3, #2
 8016cf8:	2100      	movs	r1, #0
 8016cfa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8016cfc:	2300      	movs	r3, #0
}
 8016cfe:	0018      	movs	r0, r3
 8016d00:	46bd      	mov	sp, r7
 8016d02:	b002      	add	sp, #8
 8016d04:	bd80      	pop	{r7, pc}
	...

08016d08 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b084      	sub	sp, #16
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	0018      	movs	r0, r3
 8016d16:	f007 fdf7 	bl	801e908 <USB_ReadInterrupts>
 8016d1a:	0003      	movs	r3, r0
 8016d1c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8016d1e:	68fa      	ldr	r2, [r7, #12]
 8016d20:	2380      	movs	r3, #128	@ 0x80
 8016d22:	021b      	lsls	r3, r3, #8
 8016d24:	4013      	ands	r3, r2
 8016d26:	d004      	beq.n	8016d32 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	0018      	movs	r0, r3
 8016d2c:	f000 fb62 	bl	80173f4 <PCD_EP_ISR_Handler>

    return;
 8016d30:	e11d      	b.n	8016f6e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8016d32:	68fa      	ldr	r2, [r7, #12]
 8016d34:	2380      	movs	r3, #128	@ 0x80
 8016d36:	00db      	lsls	r3, r3, #3
 8016d38:	4013      	ands	r3, r2
 8016d3a:	d015      	beq.n	8016d68 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	2244      	movs	r2, #68	@ 0x44
 8016d42:	5a9b      	ldrh	r3, [r3, r2]
 8016d44:	b29a      	uxth	r2, r3
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	498a      	ldr	r1, [pc, #552]	@ (8016f74 <HAL_PCD_IRQHandler+0x26c>)
 8016d4c:	400a      	ands	r2, r1
 8016d4e:	b291      	uxth	r1, r2
 8016d50:	2244      	movs	r2, #68	@ 0x44
 8016d52:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	0018      	movs	r0, r3
 8016d58:	f009 fe95 	bl	8020a86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2100      	movs	r1, #0
 8016d60:	0018      	movs	r0, r3
 8016d62:	f000 f915 	bl	8016f90 <HAL_PCD_SetAddress>

    return;
 8016d66:	e102      	b.n	8016f6e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8016d68:	68fa      	ldr	r2, [r7, #12]
 8016d6a:	2380      	movs	r3, #128	@ 0x80
 8016d6c:	01db      	lsls	r3, r3, #7
 8016d6e:	4013      	ands	r3, r2
 8016d70:	d00c      	beq.n	8016d8c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	2244      	movs	r2, #68	@ 0x44
 8016d78:	5a9b      	ldrh	r3, [r3, r2]
 8016d7a:	b29a      	uxth	r2, r3
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	497d      	ldr	r1, [pc, #500]	@ (8016f78 <HAL_PCD_IRQHandler+0x270>)
 8016d82:	400a      	ands	r2, r1
 8016d84:	b291      	uxth	r1, r2
 8016d86:	2244      	movs	r2, #68	@ 0x44
 8016d88:	5299      	strh	r1, [r3, r2]

    return;
 8016d8a:	e0f0      	b.n	8016f6e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8016d8c:	68fa      	ldr	r2, [r7, #12]
 8016d8e:	2380      	movs	r3, #128	@ 0x80
 8016d90:	019b      	lsls	r3, r3, #6
 8016d92:	4013      	ands	r3, r2
 8016d94:	d00c      	beq.n	8016db0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	2244      	movs	r2, #68	@ 0x44
 8016d9c:	5a9b      	ldrh	r3, [r3, r2]
 8016d9e:	b29a      	uxth	r2, r3
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	4975      	ldr	r1, [pc, #468]	@ (8016f7c <HAL_PCD_IRQHandler+0x274>)
 8016da6:	400a      	ands	r2, r1
 8016da8:	b291      	uxth	r1, r2
 8016daa:	2244      	movs	r2, #68	@ 0x44
 8016dac:	5299      	strh	r1, [r3, r2]

    return;
 8016dae:	e0de      	b.n	8016f6e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8016db0:	68fa      	ldr	r2, [r7, #12]
 8016db2:	2380      	movs	r3, #128	@ 0x80
 8016db4:	015b      	lsls	r3, r3, #5
 8016db6:	4013      	ands	r3, r2
 8016db8:	d038      	beq.n	8016e2c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	2240      	movs	r2, #64	@ 0x40
 8016dc0:	5a9b      	ldrh	r3, [r3, r2]
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	2104      	movs	r1, #4
 8016dca:	438a      	bics	r2, r1
 8016dcc:	b291      	uxth	r1, r2
 8016dce:	2240      	movs	r2, #64	@ 0x40
 8016dd0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	2240      	movs	r2, #64	@ 0x40
 8016dd8:	5a9b      	ldrh	r3, [r3, r2]
 8016dda:	b29a      	uxth	r2, r3
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	2108      	movs	r1, #8
 8016de2:	438a      	bics	r2, r1
 8016de4:	b291      	uxth	r1, r2
 8016de6:	2240      	movs	r2, #64	@ 0x40
 8016de8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8016dea:	687a      	ldr	r2, [r7, #4]
 8016dec:	23b8      	movs	r3, #184	@ 0xb8
 8016dee:	009b      	lsls	r3, r3, #2
 8016df0:	5cd3      	ldrb	r3, [r2, r3]
 8016df2:	2b01      	cmp	r3, #1
 8016df4:	d109      	bne.n	8016e0a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8016df6:	687a      	ldr	r2, [r7, #4]
 8016df8:	23b8      	movs	r3, #184	@ 0xb8
 8016dfa:	009b      	lsls	r3, r3, #2
 8016dfc:	2100      	movs	r1, #0
 8016dfe:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	2100      	movs	r1, #0
 8016e04:	0018      	movs	r0, r3
 8016e06:	f001 fc9f 	bl	8018748 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	0018      	movs	r0, r3
 8016e0e:	f009 fe7b 	bl	8020b08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	2244      	movs	r2, #68	@ 0x44
 8016e18:	5a9b      	ldrh	r3, [r3, r2]
 8016e1a:	b29a      	uxth	r2, r3
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	4957      	ldr	r1, [pc, #348]	@ (8016f80 <HAL_PCD_IRQHandler+0x278>)
 8016e22:	400a      	ands	r2, r1
 8016e24:	b291      	uxth	r1, r2
 8016e26:	2244      	movs	r2, #68	@ 0x44
 8016e28:	5299      	strh	r1, [r3, r2]

    return;
 8016e2a:	e0a0      	b.n	8016f6e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8016e2c:	68fa      	ldr	r2, [r7, #12]
 8016e2e:	2380      	movs	r3, #128	@ 0x80
 8016e30:	011b      	lsls	r3, r3, #4
 8016e32:	4013      	ands	r3, r2
 8016e34:	d028      	beq.n	8016e88 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	2240      	movs	r2, #64	@ 0x40
 8016e3c:	5a9b      	ldrh	r3, [r3, r2]
 8016e3e:	b29a      	uxth	r2, r3
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	2108      	movs	r1, #8
 8016e46:	430a      	orrs	r2, r1
 8016e48:	b291      	uxth	r1, r2
 8016e4a:	2240      	movs	r2, #64	@ 0x40
 8016e4c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	2244      	movs	r2, #68	@ 0x44
 8016e54:	5a9b      	ldrh	r3, [r3, r2]
 8016e56:	b29a      	uxth	r2, r3
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	4949      	ldr	r1, [pc, #292]	@ (8016f84 <HAL_PCD_IRQHandler+0x27c>)
 8016e5e:	400a      	ands	r2, r1
 8016e60:	b291      	uxth	r1, r2
 8016e62:	2244      	movs	r2, #68	@ 0x44
 8016e64:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	2240      	movs	r2, #64	@ 0x40
 8016e6c:	5a9b      	ldrh	r3, [r3, r2]
 8016e6e:	b29a      	uxth	r2, r3
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	2104      	movs	r1, #4
 8016e76:	430a      	orrs	r2, r1
 8016e78:	b291      	uxth	r1, r2
 8016e7a:	2240      	movs	r2, #64	@ 0x40
 8016e7c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	0018      	movs	r0, r3
 8016e82:	f009 fe25 	bl	8020ad0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8016e86:	e072      	b.n	8016f6e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	2280      	movs	r2, #128	@ 0x80
 8016e8c:	4013      	ands	r3, r2
 8016e8e:	d046      	beq.n	8016f1e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	2244      	movs	r2, #68	@ 0x44
 8016e96:	5a9b      	ldrh	r3, [r3, r2]
 8016e98:	b29a      	uxth	r2, r3
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	2180      	movs	r1, #128	@ 0x80
 8016ea0:	438a      	bics	r2, r1
 8016ea2:	b291      	uxth	r1, r2
 8016ea4:	2244      	movs	r2, #68	@ 0x44
 8016ea6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8016ea8:	687a      	ldr	r2, [r7, #4]
 8016eaa:	23b8      	movs	r3, #184	@ 0xb8
 8016eac:	009b      	lsls	r3, r3, #2
 8016eae:	5cd3      	ldrb	r3, [r2, r3]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d12f      	bne.n	8016f14 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	2240      	movs	r2, #64	@ 0x40
 8016eba:	5a9b      	ldrh	r3, [r3, r2]
 8016ebc:	b29a      	uxth	r2, r3
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	2104      	movs	r1, #4
 8016ec4:	430a      	orrs	r2, r1
 8016ec6:	b291      	uxth	r1, r2
 8016ec8:	2240      	movs	r2, #64	@ 0x40
 8016eca:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	2240      	movs	r2, #64	@ 0x40
 8016ed2:	5a9b      	ldrh	r3, [r3, r2]
 8016ed4:	b29a      	uxth	r2, r3
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	2108      	movs	r1, #8
 8016edc:	430a      	orrs	r2, r1
 8016ede:	b291      	uxth	r1, r2
 8016ee0:	2240      	movs	r2, #64	@ 0x40
 8016ee2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8016ee4:	687a      	ldr	r2, [r7, #4]
 8016ee6:	23b8      	movs	r3, #184	@ 0xb8
 8016ee8:	009b      	lsls	r3, r3, #2
 8016eea:	2101      	movs	r1, #1
 8016eec:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	2254      	movs	r2, #84	@ 0x54
 8016ef4:	5a9b      	ldrh	r3, [r3, r2]
 8016ef6:	b29b      	uxth	r3, r3
 8016ef8:	089b      	lsrs	r3, r3, #2
 8016efa:	223c      	movs	r2, #60	@ 0x3c
 8016efc:	4013      	ands	r3, r2
 8016efe:	0019      	movs	r1, r3
 8016f00:	687a      	ldr	r2, [r7, #4]
 8016f02:	23b9      	movs	r3, #185	@ 0xb9
 8016f04:	009b      	lsls	r3, r3, #2
 8016f06:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	2101      	movs	r1, #1
 8016f0c:	0018      	movs	r0, r3
 8016f0e:	f001 fc1b 	bl	8018748 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8016f12:	e02c      	b.n	8016f6e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	0018      	movs	r0, r3
 8016f18:	f009 fdda 	bl	8020ad0 <HAL_PCD_SuspendCallback>
    return;
 8016f1c:	e027      	b.n	8016f6e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8016f1e:	68fa      	ldr	r2, [r7, #12]
 8016f20:	2380      	movs	r3, #128	@ 0x80
 8016f22:	009b      	lsls	r3, r3, #2
 8016f24:	4013      	ands	r3, r2
 8016f26:	d010      	beq.n	8016f4a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	2244      	movs	r2, #68	@ 0x44
 8016f2e:	5a9b      	ldrh	r3, [r3, r2]
 8016f30:	b29a      	uxth	r2, r3
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	4914      	ldr	r1, [pc, #80]	@ (8016f88 <HAL_PCD_IRQHandler+0x280>)
 8016f38:	400a      	ands	r2, r1
 8016f3a:	b291      	uxth	r1, r2
 8016f3c:	2244      	movs	r2, #68	@ 0x44
 8016f3e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	0018      	movs	r0, r3
 8016f44:	f009 fd90 	bl	8020a68 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8016f48:	e011      	b.n	8016f6e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8016f4a:	68fa      	ldr	r2, [r7, #12]
 8016f4c:	2380      	movs	r3, #128	@ 0x80
 8016f4e:	005b      	lsls	r3, r3, #1
 8016f50:	4013      	ands	r3, r2
 8016f52:	d00c      	beq.n	8016f6e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	2244      	movs	r2, #68	@ 0x44
 8016f5a:	5a9b      	ldrh	r3, [r3, r2]
 8016f5c:	b29a      	uxth	r2, r3
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	490a      	ldr	r1, [pc, #40]	@ (8016f8c <HAL_PCD_IRQHandler+0x284>)
 8016f64:	400a      	ands	r2, r1
 8016f66:	b291      	uxth	r1, r2
 8016f68:	2244      	movs	r2, #68	@ 0x44
 8016f6a:	5299      	strh	r1, [r3, r2]

    return;
 8016f6c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	b004      	add	sp, #16
 8016f72:	bd80      	pop	{r7, pc}
 8016f74:	fffffbff 	.word	0xfffffbff
 8016f78:	ffffbfff 	.word	0xffffbfff
 8016f7c:	ffffdfff 	.word	0xffffdfff
 8016f80:	ffffefff 	.word	0xffffefff
 8016f84:	fffff7ff 	.word	0xfffff7ff
 8016f88:	fffffdff 	.word	0xfffffdff
 8016f8c:	fffffeff 	.word	0xfffffeff

08016f90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b082      	sub	sp, #8
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
 8016f98:	000a      	movs	r2, r1
 8016f9a:	1cfb      	adds	r3, r7, #3
 8016f9c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8016f9e:	687a      	ldr	r2, [r7, #4]
 8016fa0:	23aa      	movs	r3, #170	@ 0xaa
 8016fa2:	009b      	lsls	r3, r3, #2
 8016fa4:	5cd3      	ldrb	r3, [r2, r3]
 8016fa6:	2b01      	cmp	r3, #1
 8016fa8:	d101      	bne.n	8016fae <HAL_PCD_SetAddress+0x1e>
 8016faa:	2302      	movs	r3, #2
 8016fac:	e017      	b.n	8016fde <HAL_PCD_SetAddress+0x4e>
 8016fae:	687a      	ldr	r2, [r7, #4]
 8016fb0:	23aa      	movs	r3, #170	@ 0xaa
 8016fb2:	009b      	lsls	r3, r3, #2
 8016fb4:	2101      	movs	r1, #1
 8016fb6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	1cfa      	adds	r2, r7, #3
 8016fbc:	2124      	movs	r1, #36	@ 0x24
 8016fbe:	7812      	ldrb	r2, [r2, #0]
 8016fc0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	681a      	ldr	r2, [r3, #0]
 8016fc6:	1cfb      	adds	r3, r7, #3
 8016fc8:	781b      	ldrb	r3, [r3, #0]
 8016fca:	0019      	movs	r1, r3
 8016fcc:	0010      	movs	r0, r2
 8016fce:	f007 fc71 	bl	801e8b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8016fd2:	687a      	ldr	r2, [r7, #4]
 8016fd4:	23aa      	movs	r3, #170	@ 0xaa
 8016fd6:	009b      	lsls	r3, r3, #2
 8016fd8:	2100      	movs	r1, #0
 8016fda:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8016fdc:	2300      	movs	r3, #0
}
 8016fde:	0018      	movs	r0, r3
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	b002      	add	sp, #8
 8016fe4:	bd80      	pop	{r7, pc}

08016fe6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8016fe6:	b590      	push	{r4, r7, lr}
 8016fe8:	b085      	sub	sp, #20
 8016fea:	af00      	add	r7, sp, #0
 8016fec:	6078      	str	r0, [r7, #4]
 8016fee:	000c      	movs	r4, r1
 8016ff0:	0010      	movs	r0, r2
 8016ff2:	0019      	movs	r1, r3
 8016ff4:	1cfb      	adds	r3, r7, #3
 8016ff6:	1c22      	adds	r2, r4, #0
 8016ff8:	701a      	strb	r2, [r3, #0]
 8016ffa:	003b      	movs	r3, r7
 8016ffc:	1c02      	adds	r2, r0, #0
 8016ffe:	801a      	strh	r2, [r3, #0]
 8017000:	1cbb      	adds	r3, r7, #2
 8017002:	1c0a      	adds	r2, r1, #0
 8017004:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8017006:	230b      	movs	r3, #11
 8017008:	18fb      	adds	r3, r7, r3
 801700a:	2200      	movs	r2, #0
 801700c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801700e:	1cfb      	adds	r3, r7, #3
 8017010:	781b      	ldrb	r3, [r3, #0]
 8017012:	b25b      	sxtb	r3, r3
 8017014:	2b00      	cmp	r3, #0
 8017016:	da0f      	bge.n	8017038 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017018:	1cfb      	adds	r3, r7, #3
 801701a:	781b      	ldrb	r3, [r3, #0]
 801701c:	2207      	movs	r2, #7
 801701e:	4013      	ands	r3, r2
 8017020:	1c5a      	adds	r2, r3, #1
 8017022:	0013      	movs	r3, r2
 8017024:	009b      	lsls	r3, r3, #2
 8017026:	189b      	adds	r3, r3, r2
 8017028:	00db      	lsls	r3, r3, #3
 801702a:	687a      	ldr	r2, [r7, #4]
 801702c:	18d3      	adds	r3, r2, r3
 801702e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	2201      	movs	r2, #1
 8017034:	705a      	strb	r2, [r3, #1]
 8017036:	e00f      	b.n	8017058 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017038:	1cfb      	adds	r3, r7, #3
 801703a:	781b      	ldrb	r3, [r3, #0]
 801703c:	2207      	movs	r2, #7
 801703e:	401a      	ands	r2, r3
 8017040:	0013      	movs	r3, r2
 8017042:	009b      	lsls	r3, r3, #2
 8017044:	189b      	adds	r3, r3, r2
 8017046:	00db      	lsls	r3, r3, #3
 8017048:	3369      	adds	r3, #105	@ 0x69
 801704a:	33ff      	adds	r3, #255	@ 0xff
 801704c:	687a      	ldr	r2, [r7, #4]
 801704e:	18d3      	adds	r3, r2, r3
 8017050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	2200      	movs	r2, #0
 8017056:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8017058:	1cfb      	adds	r3, r7, #3
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	2207      	movs	r2, #7
 801705e:	4013      	ands	r3, r2
 8017060:	b2da      	uxtb	r2, r3
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8017066:	003b      	movs	r3, r7
 8017068:	881a      	ldrh	r2, [r3, #0]
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	1cba      	adds	r2, r7, #2
 8017072:	7812      	ldrb	r2, [r2, #0]
 8017074:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8017076:	1cbb      	adds	r3, r7, #2
 8017078:	781b      	ldrb	r3, [r3, #0]
 801707a:	2b02      	cmp	r3, #2
 801707c:	d102      	bne.n	8017084 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	2200      	movs	r2, #0
 8017082:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8017084:	687a      	ldr	r2, [r7, #4]
 8017086:	23aa      	movs	r3, #170	@ 0xaa
 8017088:	009b      	lsls	r3, r3, #2
 801708a:	5cd3      	ldrb	r3, [r2, r3]
 801708c:	2b01      	cmp	r3, #1
 801708e:	d101      	bne.n	8017094 <HAL_PCD_EP_Open+0xae>
 8017090:	2302      	movs	r3, #2
 8017092:	e013      	b.n	80170bc <HAL_PCD_EP_Open+0xd6>
 8017094:	687a      	ldr	r2, [r7, #4]
 8017096:	23aa      	movs	r3, #170	@ 0xaa
 8017098:	009b      	lsls	r3, r3, #2
 801709a:	2101      	movs	r1, #1
 801709c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	68fa      	ldr	r2, [r7, #12]
 80170a4:	0011      	movs	r1, r2
 80170a6:	0018      	movs	r0, r3
 80170a8:	f005 fc68 	bl	801c97c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80170ac:	687a      	ldr	r2, [r7, #4]
 80170ae:	23aa      	movs	r3, #170	@ 0xaa
 80170b0:	009b      	lsls	r3, r3, #2
 80170b2:	2100      	movs	r1, #0
 80170b4:	54d1      	strb	r1, [r2, r3]

  return ret;
 80170b6:	230b      	movs	r3, #11
 80170b8:	18fb      	adds	r3, r7, r3
 80170ba:	781b      	ldrb	r3, [r3, #0]
}
 80170bc:	0018      	movs	r0, r3
 80170be:	46bd      	mov	sp, r7
 80170c0:	b005      	add	sp, #20
 80170c2:	bd90      	pop	{r4, r7, pc}

080170c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b084      	sub	sp, #16
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	000a      	movs	r2, r1
 80170ce:	1cfb      	adds	r3, r7, #3
 80170d0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80170d2:	1cfb      	adds	r3, r7, #3
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	b25b      	sxtb	r3, r3
 80170d8:	2b00      	cmp	r3, #0
 80170da:	da0f      	bge.n	80170fc <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80170dc:	1cfb      	adds	r3, r7, #3
 80170de:	781b      	ldrb	r3, [r3, #0]
 80170e0:	2207      	movs	r2, #7
 80170e2:	4013      	ands	r3, r2
 80170e4:	1c5a      	adds	r2, r3, #1
 80170e6:	0013      	movs	r3, r2
 80170e8:	009b      	lsls	r3, r3, #2
 80170ea:	189b      	adds	r3, r3, r2
 80170ec:	00db      	lsls	r3, r3, #3
 80170ee:	687a      	ldr	r2, [r7, #4]
 80170f0:	18d3      	adds	r3, r2, r3
 80170f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	2201      	movs	r2, #1
 80170f8:	705a      	strb	r2, [r3, #1]
 80170fa:	e00f      	b.n	801711c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80170fc:	1cfb      	adds	r3, r7, #3
 80170fe:	781b      	ldrb	r3, [r3, #0]
 8017100:	2207      	movs	r2, #7
 8017102:	401a      	ands	r2, r3
 8017104:	0013      	movs	r3, r2
 8017106:	009b      	lsls	r3, r3, #2
 8017108:	189b      	adds	r3, r3, r2
 801710a:	00db      	lsls	r3, r3, #3
 801710c:	3369      	adds	r3, #105	@ 0x69
 801710e:	33ff      	adds	r3, #255	@ 0xff
 8017110:	687a      	ldr	r2, [r7, #4]
 8017112:	18d3      	adds	r3, r2, r3
 8017114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	2200      	movs	r2, #0
 801711a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 801711c:	1cfb      	adds	r3, r7, #3
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	2207      	movs	r2, #7
 8017122:	4013      	ands	r3, r2
 8017124:	b2da      	uxtb	r2, r3
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801712a:	687a      	ldr	r2, [r7, #4]
 801712c:	23aa      	movs	r3, #170	@ 0xaa
 801712e:	009b      	lsls	r3, r3, #2
 8017130:	5cd3      	ldrb	r3, [r2, r3]
 8017132:	2b01      	cmp	r3, #1
 8017134:	d101      	bne.n	801713a <HAL_PCD_EP_Close+0x76>
 8017136:	2302      	movs	r3, #2
 8017138:	e011      	b.n	801715e <HAL_PCD_EP_Close+0x9a>
 801713a:	687a      	ldr	r2, [r7, #4]
 801713c:	23aa      	movs	r3, #170	@ 0xaa
 801713e:	009b      	lsls	r3, r3, #2
 8017140:	2101      	movs	r1, #1
 8017142:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	68fa      	ldr	r2, [r7, #12]
 801714a:	0011      	movs	r1, r2
 801714c:	0018      	movs	r0, r3
 801714e:	f005 ffb7 	bl	801d0c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8017152:	687a      	ldr	r2, [r7, #4]
 8017154:	23aa      	movs	r3, #170	@ 0xaa
 8017156:	009b      	lsls	r3, r3, #2
 8017158:	2100      	movs	r1, #0
 801715a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 801715c:	2300      	movs	r3, #0
}
 801715e:	0018      	movs	r0, r3
 8017160:	46bd      	mov	sp, r7
 8017162:	b004      	add	sp, #16
 8017164:	bd80      	pop	{r7, pc}

08017166 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8017166:	b580      	push	{r7, lr}
 8017168:	b086      	sub	sp, #24
 801716a:	af00      	add	r7, sp, #0
 801716c:	60f8      	str	r0, [r7, #12]
 801716e:	607a      	str	r2, [r7, #4]
 8017170:	603b      	str	r3, [r7, #0]
 8017172:	200b      	movs	r0, #11
 8017174:	183b      	adds	r3, r7, r0
 8017176:	1c0a      	adds	r2, r1, #0
 8017178:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801717a:	0001      	movs	r1, r0
 801717c:	187b      	adds	r3, r7, r1
 801717e:	781b      	ldrb	r3, [r3, #0]
 8017180:	2207      	movs	r2, #7
 8017182:	401a      	ands	r2, r3
 8017184:	0013      	movs	r3, r2
 8017186:	009b      	lsls	r3, r3, #2
 8017188:	189b      	adds	r3, r3, r2
 801718a:	00db      	lsls	r3, r3, #3
 801718c:	3369      	adds	r3, #105	@ 0x69
 801718e:	33ff      	adds	r3, #255	@ 0xff
 8017190:	68fa      	ldr	r2, [r7, #12]
 8017192:	18d3      	adds	r3, r2, r3
 8017194:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8017196:	697b      	ldr	r3, [r7, #20]
 8017198:	687a      	ldr	r2, [r7, #4]
 801719a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801719c:	697b      	ldr	r3, [r7, #20]
 801719e:	683a      	ldr	r2, [r7, #0]
 80171a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80171a2:	697b      	ldr	r3, [r7, #20]
 80171a4:	2200      	movs	r2, #0
 80171a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80171a8:	697b      	ldr	r3, [r7, #20]
 80171aa:	2200      	movs	r2, #0
 80171ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80171ae:	187b      	adds	r3, r7, r1
 80171b0:	781b      	ldrb	r3, [r3, #0]
 80171b2:	2207      	movs	r2, #7
 80171b4:	4013      	ands	r3, r2
 80171b6:	b2da      	uxtb	r2, r3
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	697a      	ldr	r2, [r7, #20]
 80171c2:	0011      	movs	r1, r2
 80171c4:	0018      	movs	r0, r3
 80171c6:	f006 f93b 	bl	801d440 <USB_EPStartXfer>

  return HAL_OK;
 80171ca:	2300      	movs	r3, #0
}
 80171cc:	0018      	movs	r0, r3
 80171ce:	46bd      	mov	sp, r7
 80171d0:	b006      	add	sp, #24
 80171d2:	bd80      	pop	{r7, pc}

080171d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b082      	sub	sp, #8
 80171d8:	af00      	add	r7, sp, #0
 80171da:	6078      	str	r0, [r7, #4]
 80171dc:	000a      	movs	r2, r1
 80171de:	1cfb      	adds	r3, r7, #3
 80171e0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80171e2:	1cfb      	adds	r3, r7, #3
 80171e4:	781b      	ldrb	r3, [r3, #0]
 80171e6:	2207      	movs	r2, #7
 80171e8:	401a      	ands	r2, r3
 80171ea:	6878      	ldr	r0, [r7, #4]
 80171ec:	23c2      	movs	r3, #194	@ 0xc2
 80171ee:	0059      	lsls	r1, r3, #1
 80171f0:	0013      	movs	r3, r2
 80171f2:	009b      	lsls	r3, r3, #2
 80171f4:	189b      	adds	r3, r3, r2
 80171f6:	00db      	lsls	r3, r3, #3
 80171f8:	18c3      	adds	r3, r0, r3
 80171fa:	185b      	adds	r3, r3, r1
 80171fc:	681b      	ldr	r3, [r3, #0]
}
 80171fe:	0018      	movs	r0, r3
 8017200:	46bd      	mov	sp, r7
 8017202:	b002      	add	sp, #8
 8017204:	bd80      	pop	{r7, pc}

08017206 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8017206:	b580      	push	{r7, lr}
 8017208:	b086      	sub	sp, #24
 801720a:	af00      	add	r7, sp, #0
 801720c:	60f8      	str	r0, [r7, #12]
 801720e:	607a      	str	r2, [r7, #4]
 8017210:	603b      	str	r3, [r7, #0]
 8017212:	200b      	movs	r0, #11
 8017214:	183b      	adds	r3, r7, r0
 8017216:	1c0a      	adds	r2, r1, #0
 8017218:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801721a:	183b      	adds	r3, r7, r0
 801721c:	781b      	ldrb	r3, [r3, #0]
 801721e:	2207      	movs	r2, #7
 8017220:	4013      	ands	r3, r2
 8017222:	1c5a      	adds	r2, r3, #1
 8017224:	0013      	movs	r3, r2
 8017226:	009b      	lsls	r3, r3, #2
 8017228:	189b      	adds	r3, r3, r2
 801722a:	00db      	lsls	r3, r3, #3
 801722c:	68fa      	ldr	r2, [r7, #12]
 801722e:	18d3      	adds	r3, r2, r3
 8017230:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8017232:	697b      	ldr	r3, [r7, #20]
 8017234:	687a      	ldr	r2, [r7, #4]
 8017236:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8017238:	697b      	ldr	r3, [r7, #20]
 801723a:	683a      	ldr	r2, [r7, #0]
 801723c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 801723e:	697b      	ldr	r3, [r7, #20]
 8017240:	2224      	movs	r2, #36	@ 0x24
 8017242:	2101      	movs	r1, #1
 8017244:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8017246:	697b      	ldr	r3, [r7, #20]
 8017248:	683a      	ldr	r2, [r7, #0]
 801724a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 801724c:	697b      	ldr	r3, [r7, #20]
 801724e:	2200      	movs	r2, #0
 8017250:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8017252:	697b      	ldr	r3, [r7, #20]
 8017254:	2201      	movs	r2, #1
 8017256:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8017258:	183b      	adds	r3, r7, r0
 801725a:	781b      	ldrb	r3, [r3, #0]
 801725c:	2207      	movs	r2, #7
 801725e:	4013      	ands	r3, r2
 8017260:	b2da      	uxtb	r2, r3
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	697a      	ldr	r2, [r7, #20]
 801726c:	0011      	movs	r1, r2
 801726e:	0018      	movs	r0, r3
 8017270:	f006 f8e6 	bl	801d440 <USB_EPStartXfer>

  return HAL_OK;
 8017274:	2300      	movs	r3, #0
}
 8017276:	0018      	movs	r0, r3
 8017278:	46bd      	mov	sp, r7
 801727a:	b006      	add	sp, #24
 801727c:	bd80      	pop	{r7, pc}

0801727e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801727e:	b580      	push	{r7, lr}
 8017280:	b084      	sub	sp, #16
 8017282:	af00      	add	r7, sp, #0
 8017284:	6078      	str	r0, [r7, #4]
 8017286:	000a      	movs	r2, r1
 8017288:	1cfb      	adds	r3, r7, #3
 801728a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801728c:	1cfb      	adds	r3, r7, #3
 801728e:	781b      	ldrb	r3, [r3, #0]
 8017290:	2207      	movs	r2, #7
 8017292:	401a      	ands	r2, r3
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	685b      	ldr	r3, [r3, #4]
 8017298:	429a      	cmp	r2, r3
 801729a:	d901      	bls.n	80172a0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 801729c:	2301      	movs	r3, #1
 801729e:	e046      	b.n	801732e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80172a0:	1cfb      	adds	r3, r7, #3
 80172a2:	781b      	ldrb	r3, [r3, #0]
 80172a4:	b25b      	sxtb	r3, r3
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	da0f      	bge.n	80172ca <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80172aa:	1cfb      	adds	r3, r7, #3
 80172ac:	781b      	ldrb	r3, [r3, #0]
 80172ae:	2207      	movs	r2, #7
 80172b0:	4013      	ands	r3, r2
 80172b2:	1c5a      	adds	r2, r3, #1
 80172b4:	0013      	movs	r3, r2
 80172b6:	009b      	lsls	r3, r3, #2
 80172b8:	189b      	adds	r3, r3, r2
 80172ba:	00db      	lsls	r3, r3, #3
 80172bc:	687a      	ldr	r2, [r7, #4]
 80172be:	18d3      	adds	r3, r2, r3
 80172c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	2201      	movs	r2, #1
 80172c6:	705a      	strb	r2, [r3, #1]
 80172c8:	e00d      	b.n	80172e6 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80172ca:	1cfb      	adds	r3, r7, #3
 80172cc:	781a      	ldrb	r2, [r3, #0]
 80172ce:	0013      	movs	r3, r2
 80172d0:	009b      	lsls	r3, r3, #2
 80172d2:	189b      	adds	r3, r3, r2
 80172d4:	00db      	lsls	r3, r3, #3
 80172d6:	3369      	adds	r3, #105	@ 0x69
 80172d8:	33ff      	adds	r3, #255	@ 0xff
 80172da:	687a      	ldr	r2, [r7, #4]
 80172dc:	18d3      	adds	r3, r2, r3
 80172de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	2200      	movs	r2, #0
 80172e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	2201      	movs	r2, #1
 80172ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80172ec:	1cfb      	adds	r3, r7, #3
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	2207      	movs	r2, #7
 80172f2:	4013      	ands	r3, r2
 80172f4:	b2da      	uxtb	r2, r3
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80172fa:	687a      	ldr	r2, [r7, #4]
 80172fc:	23aa      	movs	r3, #170	@ 0xaa
 80172fe:	009b      	lsls	r3, r3, #2
 8017300:	5cd3      	ldrb	r3, [r2, r3]
 8017302:	2b01      	cmp	r3, #1
 8017304:	d101      	bne.n	801730a <HAL_PCD_EP_SetStall+0x8c>
 8017306:	2302      	movs	r3, #2
 8017308:	e011      	b.n	801732e <HAL_PCD_EP_SetStall+0xb0>
 801730a:	687a      	ldr	r2, [r7, #4]
 801730c:	23aa      	movs	r3, #170	@ 0xaa
 801730e:	009b      	lsls	r3, r3, #2
 8017310:	2101      	movs	r1, #1
 8017312:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	68fa      	ldr	r2, [r7, #12]
 801731a:	0011      	movs	r1, r2
 801731c:	0018      	movs	r0, r3
 801731e:	f007 f9c7 	bl	801e6b0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8017322:	687a      	ldr	r2, [r7, #4]
 8017324:	23aa      	movs	r3, #170	@ 0xaa
 8017326:	009b      	lsls	r3, r3, #2
 8017328:	2100      	movs	r1, #0
 801732a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801732c:	2300      	movs	r3, #0
}
 801732e:	0018      	movs	r0, r3
 8017330:	46bd      	mov	sp, r7
 8017332:	b004      	add	sp, #16
 8017334:	bd80      	pop	{r7, pc}

08017336 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8017336:	b580      	push	{r7, lr}
 8017338:	b084      	sub	sp, #16
 801733a:	af00      	add	r7, sp, #0
 801733c:	6078      	str	r0, [r7, #4]
 801733e:	000a      	movs	r2, r1
 8017340:	1cfb      	adds	r3, r7, #3
 8017342:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8017344:	1cfb      	adds	r3, r7, #3
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	220f      	movs	r2, #15
 801734a:	401a      	ands	r2, r3
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	685b      	ldr	r3, [r3, #4]
 8017350:	429a      	cmp	r2, r3
 8017352:	d901      	bls.n	8017358 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8017354:	2301      	movs	r3, #1
 8017356:	e048      	b.n	80173ea <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8017358:	1cfb      	adds	r3, r7, #3
 801735a:	781b      	ldrb	r3, [r3, #0]
 801735c:	b25b      	sxtb	r3, r3
 801735e:	2b00      	cmp	r3, #0
 8017360:	da0f      	bge.n	8017382 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8017362:	1cfb      	adds	r3, r7, #3
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	2207      	movs	r2, #7
 8017368:	4013      	ands	r3, r2
 801736a:	1c5a      	adds	r2, r3, #1
 801736c:	0013      	movs	r3, r2
 801736e:	009b      	lsls	r3, r3, #2
 8017370:	189b      	adds	r3, r3, r2
 8017372:	00db      	lsls	r3, r3, #3
 8017374:	687a      	ldr	r2, [r7, #4]
 8017376:	18d3      	adds	r3, r2, r3
 8017378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	2201      	movs	r2, #1
 801737e:	705a      	strb	r2, [r3, #1]
 8017380:	e00f      	b.n	80173a2 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8017382:	1cfb      	adds	r3, r7, #3
 8017384:	781b      	ldrb	r3, [r3, #0]
 8017386:	2207      	movs	r2, #7
 8017388:	401a      	ands	r2, r3
 801738a:	0013      	movs	r3, r2
 801738c:	009b      	lsls	r3, r3, #2
 801738e:	189b      	adds	r3, r3, r2
 8017390:	00db      	lsls	r3, r3, #3
 8017392:	3369      	adds	r3, #105	@ 0x69
 8017394:	33ff      	adds	r3, #255	@ 0xff
 8017396:	687a      	ldr	r2, [r7, #4]
 8017398:	18d3      	adds	r3, r2, r3
 801739a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	2200      	movs	r2, #0
 80173a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	2200      	movs	r2, #0
 80173a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80173a8:	1cfb      	adds	r3, r7, #3
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	2207      	movs	r2, #7
 80173ae:	4013      	ands	r3, r2
 80173b0:	b2da      	uxtb	r2, r3
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80173b6:	687a      	ldr	r2, [r7, #4]
 80173b8:	23aa      	movs	r3, #170	@ 0xaa
 80173ba:	009b      	lsls	r3, r3, #2
 80173bc:	5cd3      	ldrb	r3, [r2, r3]
 80173be:	2b01      	cmp	r3, #1
 80173c0:	d101      	bne.n	80173c6 <HAL_PCD_EP_ClrStall+0x90>
 80173c2:	2302      	movs	r3, #2
 80173c4:	e011      	b.n	80173ea <HAL_PCD_EP_ClrStall+0xb4>
 80173c6:	687a      	ldr	r2, [r7, #4]
 80173c8:	23aa      	movs	r3, #170	@ 0xaa
 80173ca:	009b      	lsls	r3, r3, #2
 80173cc:	2101      	movs	r1, #1
 80173ce:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	68fa      	ldr	r2, [r7, #12]
 80173d6:	0011      	movs	r1, r2
 80173d8:	0018      	movs	r0, r3
 80173da:	f007 f9b9 	bl	801e750 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80173de:	687a      	ldr	r2, [r7, #4]
 80173e0:	23aa      	movs	r3, #170	@ 0xaa
 80173e2:	009b      	lsls	r3, r3, #2
 80173e4:	2100      	movs	r1, #0
 80173e6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80173e8:	2300      	movs	r3, #0
}
 80173ea:	0018      	movs	r0, r3
 80173ec:	46bd      	mov	sp, r7
 80173ee:	b004      	add	sp, #16
 80173f0:	bd80      	pop	{r7, pc}
	...

080173f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80173f4:	b5b0      	push	{r4, r5, r7, lr}
 80173f6:	b096      	sub	sp, #88	@ 0x58
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80173fc:	f000 fbec 	bl	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	681a      	ldr	r2, [r3, #0]
 8017404:	204e      	movs	r0, #78	@ 0x4e
 8017406:	183b      	adds	r3, r7, r0
 8017408:	2144      	movs	r1, #68	@ 0x44
 801740a:	5a52      	ldrh	r2, [r2, r1]
 801740c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801740e:	183b      	adds	r3, r7, r0
 8017410:	881b      	ldrh	r3, [r3, #0]
 8017412:	b2da      	uxtb	r2, r3
 8017414:	244d      	movs	r4, #77	@ 0x4d
 8017416:	193b      	adds	r3, r7, r4
 8017418:	210f      	movs	r1, #15
 801741a:	400a      	ands	r2, r1
 801741c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801741e:	193b      	adds	r3, r7, r4
 8017420:	781b      	ldrb	r3, [r3, #0]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d000      	beq.n	8017428 <PCD_EP_ISR_Handler+0x34>
 8017426:	e18f      	b.n	8017748 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8017428:	183b      	adds	r3, r7, r0
 801742a:	881b      	ldrh	r3, [r3, #0]
 801742c:	2210      	movs	r2, #16
 801742e:	4013      	ands	r3, r2
 8017430:	d155      	bne.n	80174de <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	881b      	ldrh	r3, [r3, #0]
 8017438:	b29a      	uxth	r2, r3
 801743a:	200e      	movs	r0, #14
 801743c:	183b      	adds	r3, r7, r0
 801743e:	49bb      	ldr	r1, [pc, #748]	@ (801772c <PCD_EP_ISR_Handler+0x338>)
 8017440:	400a      	ands	r2, r1
 8017442:	801a      	strh	r2, [r3, #0]
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	183a      	adds	r2, r7, r0
 801744a:	8812      	ldrh	r2, [r2, #0]
 801744c:	49b8      	ldr	r1, [pc, #736]	@ (8017730 <PCD_EP_ISR_Handler+0x33c>)
 801744e:	430a      	orrs	r2, r1
 8017450:	b292      	uxth	r2, r2
 8017452:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	3328      	adds	r3, #40	@ 0x28
 8017458:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	2250      	movs	r2, #80	@ 0x50
 8017460:	5a9b      	ldrh	r3, [r3, r2]
 8017462:	b29b      	uxth	r3, r3
 8017464:	001a      	movs	r2, r3
 8017466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	00db      	lsls	r3, r3, #3
 801746c:	18d2      	adds	r2, r2, r3
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	18d3      	adds	r3, r2, r3
 8017474:	4aaf      	ldr	r2, [pc, #700]	@ (8017734 <PCD_EP_ISR_Handler+0x340>)
 8017476:	4694      	mov	ip, r2
 8017478:	4463      	add	r3, ip
 801747a:	881b      	ldrh	r3, [r3, #0]
 801747c:	059b      	lsls	r3, r3, #22
 801747e:	0d9a      	lsrs	r2, r3, #22
 8017480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017482:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8017484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017486:	695a      	ldr	r2, [r3, #20]
 8017488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801748a:	69db      	ldr	r3, [r3, #28]
 801748c:	18d2      	adds	r2, r2, r3
 801748e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017490:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	2100      	movs	r1, #0
 8017496:	0018      	movs	r0, r3
 8017498:	f009 fac8 	bl	8020a2c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	2224      	movs	r2, #36	@ 0x24
 80174a0:	5c9b      	ldrb	r3, [r3, r2]
 80174a2:	b2db      	uxtb	r3, r3
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d101      	bne.n	80174ac <PCD_EP_ISR_Handler+0xb8>
 80174a8:	f000 fb96 	bl	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
 80174ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80174ae:	699b      	ldr	r3, [r3, #24]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d001      	beq.n	80174b8 <PCD_EP_ISR_Handler+0xc4>
 80174b4:	f000 fb90 	bl	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	2224      	movs	r2, #36	@ 0x24
 80174bc:	5c9b      	ldrb	r3, [r3, r2]
 80174be:	b2db      	uxtb	r3, r3
 80174c0:	2280      	movs	r2, #128	@ 0x80
 80174c2:	4252      	negs	r2, r2
 80174c4:	4313      	orrs	r3, r2
 80174c6:	b2da      	uxtb	r2, r3
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	0011      	movs	r1, r2
 80174ce:	224c      	movs	r2, #76	@ 0x4c
 80174d0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	2224      	movs	r2, #36	@ 0x24
 80174d6:	2100      	movs	r1, #0
 80174d8:	5499      	strb	r1, [r3, r2]
 80174da:	f000 fb7d 	bl	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	3369      	adds	r3, #105	@ 0x69
 80174e2:	33ff      	adds	r3, #255	@ 0xff
 80174e4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	681a      	ldr	r2, [r3, #0]
 80174ea:	214a      	movs	r1, #74	@ 0x4a
 80174ec:	187b      	adds	r3, r7, r1
 80174ee:	8812      	ldrh	r2, [r2, #0]
 80174f0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80174f2:	187b      	adds	r3, r7, r1
 80174f4:	881a      	ldrh	r2, [r3, #0]
 80174f6:	2380      	movs	r3, #128	@ 0x80
 80174f8:	011b      	lsls	r3, r3, #4
 80174fa:	4013      	ands	r3, r2
 80174fc:	d037      	beq.n	801756e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	2250      	movs	r2, #80	@ 0x50
 8017504:	5a9b      	ldrh	r3, [r3, r2]
 8017506:	b29b      	uxth	r3, r3
 8017508:	001a      	movs	r2, r3
 801750a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801750c:	781b      	ldrb	r3, [r3, #0]
 801750e:	00db      	lsls	r3, r3, #3
 8017510:	18d2      	adds	r2, r2, r3
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	18d3      	adds	r3, r2, r3
 8017518:	4a87      	ldr	r2, [pc, #540]	@ (8017738 <PCD_EP_ISR_Handler+0x344>)
 801751a:	4694      	mov	ip, r2
 801751c:	4463      	add	r3, ip
 801751e:	881b      	ldrh	r3, [r3, #0]
 8017520:	059b      	lsls	r3, r3, #22
 8017522:	0d9a      	lsrs	r2, r3, #22
 8017524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017526:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	6818      	ldr	r0, [r3, #0]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	22ac      	movs	r2, #172	@ 0xac
 8017530:	0092      	lsls	r2, r2, #2
 8017532:	1899      	adds	r1, r3, r2
 8017534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017536:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8017538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801753a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801753c:	b29b      	uxth	r3, r3
 801753e:	f007 fa3a 	bl	801e9b6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	881b      	ldrh	r3, [r3, #0]
 8017548:	b29a      	uxth	r2, r3
 801754a:	2010      	movs	r0, #16
 801754c:	183b      	adds	r3, r7, r0
 801754e:	497b      	ldr	r1, [pc, #492]	@ (801773c <PCD_EP_ISR_Handler+0x348>)
 8017550:	400a      	ands	r2, r1
 8017552:	801a      	strh	r2, [r3, #0]
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	183a      	adds	r2, r7, r0
 801755a:	8812      	ldrh	r2, [r2, #0]
 801755c:	2180      	movs	r1, #128	@ 0x80
 801755e:	430a      	orrs	r2, r1
 8017560:	b292      	uxth	r2, r2
 8017562:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	0018      	movs	r0, r3
 8017568:	f009 fa2a 	bl	80209c0 <HAL_PCD_SetupStageCallback>
 801756c:	e334      	b.n	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801756e:	234a      	movs	r3, #74	@ 0x4a
 8017570:	18fb      	adds	r3, r7, r3
 8017572:	2200      	movs	r2, #0
 8017574:	5e9b      	ldrsh	r3, [r3, r2]
 8017576:	2b00      	cmp	r3, #0
 8017578:	db00      	blt.n	801757c <PCD_EP_ISR_Handler+0x188>
 801757a:	e32d      	b.n	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	881b      	ldrh	r3, [r3, #0]
 8017582:	b29a      	uxth	r2, r3
 8017584:	201e      	movs	r0, #30
 8017586:	183b      	adds	r3, r7, r0
 8017588:	496c      	ldr	r1, [pc, #432]	@ (801773c <PCD_EP_ISR_Handler+0x348>)
 801758a:	400a      	ands	r2, r1
 801758c:	801a      	strh	r2, [r3, #0]
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	183a      	adds	r2, r7, r0
 8017594:	8812      	ldrh	r2, [r2, #0]
 8017596:	2180      	movs	r1, #128	@ 0x80
 8017598:	430a      	orrs	r2, r1
 801759a:	b292      	uxth	r2, r2
 801759c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	2250      	movs	r2, #80	@ 0x50
 80175a4:	5a9b      	ldrh	r3, [r3, r2]
 80175a6:	b29b      	uxth	r3, r3
 80175a8:	001a      	movs	r2, r3
 80175aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175ac:	781b      	ldrb	r3, [r3, #0]
 80175ae:	00db      	lsls	r3, r3, #3
 80175b0:	18d2      	adds	r2, r2, r3
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	18d3      	adds	r3, r2, r3
 80175b8:	4a5f      	ldr	r2, [pc, #380]	@ (8017738 <PCD_EP_ISR_Handler+0x344>)
 80175ba:	4694      	mov	ip, r2
 80175bc:	4463      	add	r3, ip
 80175be:	881b      	ldrh	r3, [r3, #0]
 80175c0:	059b      	lsls	r3, r3, #22
 80175c2:	0d9a      	lsrs	r2, r3, #22
 80175c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175c6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80175c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175ca:	69db      	ldr	r3, [r3, #28]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d01a      	beq.n	8017606 <PCD_EP_ISR_Handler+0x212>
 80175d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175d2:	695b      	ldr	r3, [r3, #20]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d016      	beq.n	8017606 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6818      	ldr	r0, [r3, #0]
 80175dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175de:	6959      	ldr	r1, [r3, #20]
 80175e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175e2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80175e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175e6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80175e8:	b29b      	uxth	r3, r3
 80175ea:	f007 f9e4 	bl	801e9b6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80175ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175f0:	695a      	ldr	r2, [r3, #20]
 80175f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175f4:	69db      	ldr	r3, [r3, #28]
 80175f6:	18d2      	adds	r2, r2, r3
 80175f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175fa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2100      	movs	r1, #0
 8017600:	0018      	movs	r0, r3
 8017602:	f009 f9f2 	bl	80209ea <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	681a      	ldr	r2, [r3, #0]
 801760a:	214a      	movs	r1, #74	@ 0x4a
 801760c:	187b      	adds	r3, r7, r1
 801760e:	8812      	ldrh	r2, [r2, #0]
 8017610:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8017612:	187b      	adds	r3, r7, r1
 8017614:	881a      	ldrh	r2, [r3, #0]
 8017616:	2380      	movs	r3, #128	@ 0x80
 8017618:	011b      	lsls	r3, r3, #4
 801761a:	4013      	ands	r3, r2
 801761c:	d000      	beq.n	8017620 <PCD_EP_ISR_Handler+0x22c>
 801761e:	e2db      	b.n	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
 8017620:	187b      	adds	r3, r7, r1
 8017622:	881a      	ldrh	r2, [r3, #0]
 8017624:	23c0      	movs	r3, #192	@ 0xc0
 8017626:	019b      	lsls	r3, r3, #6
 8017628:	401a      	ands	r2, r3
 801762a:	23c0      	movs	r3, #192	@ 0xc0
 801762c:	019b      	lsls	r3, r3, #6
 801762e:	429a      	cmp	r2, r3
 8017630:	d100      	bne.n	8017634 <PCD_EP_ISR_Handler+0x240>
 8017632:	e2d1      	b.n	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	61bb      	str	r3, [r7, #24]
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	2250      	movs	r2, #80	@ 0x50
 8017640:	5a9b      	ldrh	r3, [r3, r2]
 8017642:	b29b      	uxth	r3, r3
 8017644:	001a      	movs	r2, r3
 8017646:	69bb      	ldr	r3, [r7, #24]
 8017648:	189b      	adds	r3, r3, r2
 801764a:	61bb      	str	r3, [r7, #24]
 801764c:	69bb      	ldr	r3, [r7, #24]
 801764e:	4a3a      	ldr	r2, [pc, #232]	@ (8017738 <PCD_EP_ISR_Handler+0x344>)
 8017650:	4694      	mov	ip, r2
 8017652:	4463      	add	r3, ip
 8017654:	617b      	str	r3, [r7, #20]
 8017656:	697b      	ldr	r3, [r7, #20]
 8017658:	881b      	ldrh	r3, [r3, #0]
 801765a:	b29b      	uxth	r3, r3
 801765c:	059b      	lsls	r3, r3, #22
 801765e:	0d9b      	lsrs	r3, r3, #22
 8017660:	b29a      	uxth	r2, r3
 8017662:	697b      	ldr	r3, [r7, #20]
 8017664:	801a      	strh	r2, [r3, #0]
 8017666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017668:	691b      	ldr	r3, [r3, #16]
 801766a:	2b3e      	cmp	r3, #62	@ 0x3e
 801766c:	d91a      	bls.n	80176a4 <PCD_EP_ISR_Handler+0x2b0>
 801766e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017670:	691b      	ldr	r3, [r3, #16]
 8017672:	095b      	lsrs	r3, r3, #5
 8017674:	647b      	str	r3, [r7, #68]	@ 0x44
 8017676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017678:	691b      	ldr	r3, [r3, #16]
 801767a:	221f      	movs	r2, #31
 801767c:	4013      	ands	r3, r2
 801767e:	d102      	bne.n	8017686 <PCD_EP_ISR_Handler+0x292>
 8017680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017682:	3b01      	subs	r3, #1
 8017684:	647b      	str	r3, [r7, #68]	@ 0x44
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	881b      	ldrh	r3, [r3, #0]
 801768a:	b29a      	uxth	r2, r3
 801768c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801768e:	b29b      	uxth	r3, r3
 8017690:	029b      	lsls	r3, r3, #10
 8017692:	b29b      	uxth	r3, r3
 8017694:	4313      	orrs	r3, r2
 8017696:	b29b      	uxth	r3, r3
 8017698:	4a25      	ldr	r2, [pc, #148]	@ (8017730 <PCD_EP_ISR_Handler+0x33c>)
 801769a:	4313      	orrs	r3, r2
 801769c:	b29a      	uxth	r2, r3
 801769e:	697b      	ldr	r3, [r7, #20]
 80176a0:	801a      	strh	r2, [r3, #0]
 80176a2:	e023      	b.n	80176ec <PCD_EP_ISR_Handler+0x2f8>
 80176a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176a6:	691b      	ldr	r3, [r3, #16]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d108      	bne.n	80176be <PCD_EP_ISR_Handler+0x2ca>
 80176ac:	697b      	ldr	r3, [r7, #20]
 80176ae:	881b      	ldrh	r3, [r3, #0]
 80176b0:	b29b      	uxth	r3, r3
 80176b2:	4a1f      	ldr	r2, [pc, #124]	@ (8017730 <PCD_EP_ISR_Handler+0x33c>)
 80176b4:	4313      	orrs	r3, r2
 80176b6:	b29a      	uxth	r2, r3
 80176b8:	697b      	ldr	r3, [r7, #20]
 80176ba:	801a      	strh	r2, [r3, #0]
 80176bc:	e016      	b.n	80176ec <PCD_EP_ISR_Handler+0x2f8>
 80176be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176c0:	691b      	ldr	r3, [r3, #16]
 80176c2:	085b      	lsrs	r3, r3, #1
 80176c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80176c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176c8:	691b      	ldr	r3, [r3, #16]
 80176ca:	2201      	movs	r2, #1
 80176cc:	4013      	ands	r3, r2
 80176ce:	d002      	beq.n	80176d6 <PCD_EP_ISR_Handler+0x2e2>
 80176d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80176d2:	3301      	adds	r3, #1
 80176d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80176d6:	697b      	ldr	r3, [r7, #20]
 80176d8:	881b      	ldrh	r3, [r3, #0]
 80176da:	b29a      	uxth	r2, r3
 80176dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80176de:	b29b      	uxth	r3, r3
 80176e0:	029b      	lsls	r3, r3, #10
 80176e2:	b29b      	uxth	r3, r3
 80176e4:	4313      	orrs	r3, r2
 80176e6:	b29a      	uxth	r2, r3
 80176e8:	697b      	ldr	r3, [r7, #20]
 80176ea:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	881b      	ldrh	r3, [r3, #0]
 80176f2:	b29a      	uxth	r2, r3
 80176f4:	2012      	movs	r0, #18
 80176f6:	183b      	adds	r3, r7, r0
 80176f8:	4911      	ldr	r1, [pc, #68]	@ (8017740 <PCD_EP_ISR_Handler+0x34c>)
 80176fa:	400a      	ands	r2, r1
 80176fc:	801a      	strh	r2, [r3, #0]
 80176fe:	183b      	adds	r3, r7, r0
 8017700:	183a      	adds	r2, r7, r0
 8017702:	8812      	ldrh	r2, [r2, #0]
 8017704:	2180      	movs	r1, #128	@ 0x80
 8017706:	0149      	lsls	r1, r1, #5
 8017708:	404a      	eors	r2, r1
 801770a:	801a      	strh	r2, [r3, #0]
 801770c:	183b      	adds	r3, r7, r0
 801770e:	183a      	adds	r2, r7, r0
 8017710:	8812      	ldrh	r2, [r2, #0]
 8017712:	2180      	movs	r1, #128	@ 0x80
 8017714:	0189      	lsls	r1, r1, #6
 8017716:	404a      	eors	r2, r1
 8017718:	801a      	strh	r2, [r3, #0]
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	183a      	adds	r2, r7, r0
 8017720:	8812      	ldrh	r2, [r2, #0]
 8017722:	4908      	ldr	r1, [pc, #32]	@ (8017744 <PCD_EP_ISR_Handler+0x350>)
 8017724:	430a      	orrs	r2, r1
 8017726:	b292      	uxth	r2, r2
 8017728:	801a      	strh	r2, [r3, #0]
 801772a:	e255      	b.n	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
 801772c:	ffff8f0f 	.word	0xffff8f0f
 8017730:	ffff8000 	.word	0xffff8000
 8017734:	00000402 	.word	0x00000402
 8017738:	00000406 	.word	0x00000406
 801773c:	00000f8f 	.word	0x00000f8f
 8017740:	ffffbf8f 	.word	0xffffbf8f
 8017744:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	001a      	movs	r2, r3
 801774e:	204d      	movs	r0, #77	@ 0x4d
 8017750:	183b      	adds	r3, r7, r0
 8017752:	781b      	ldrb	r3, [r3, #0]
 8017754:	009b      	lsls	r3, r3, #2
 8017756:	18d2      	adds	r2, r2, r3
 8017758:	214a      	movs	r1, #74	@ 0x4a
 801775a:	187b      	adds	r3, r7, r1
 801775c:	8812      	ldrh	r2, [r2, #0]
 801775e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8017760:	187b      	adds	r3, r7, r1
 8017762:	2200      	movs	r2, #0
 8017764:	5e9b      	ldrsh	r3, [r3, r2]
 8017766:	2b00      	cmp	r3, #0
 8017768:	db00      	blt.n	801776c <PCD_EP_ISR_Handler+0x378>
 801776a:	e0fa      	b.n	8017962 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	001a      	movs	r2, r3
 8017772:	183b      	adds	r3, r7, r0
 8017774:	781b      	ldrb	r3, [r3, #0]
 8017776:	009b      	lsls	r3, r3, #2
 8017778:	18d3      	adds	r3, r2, r3
 801777a:	881b      	ldrh	r3, [r3, #0]
 801777c:	b29a      	uxth	r2, r3
 801777e:	2448      	movs	r4, #72	@ 0x48
 8017780:	193b      	adds	r3, r7, r4
 8017782:	49d1      	ldr	r1, [pc, #836]	@ (8017ac8 <PCD_EP_ISR_Handler+0x6d4>)
 8017784:	400a      	ands	r2, r1
 8017786:	801a      	strh	r2, [r3, #0]
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	001a      	movs	r2, r3
 801778e:	183b      	adds	r3, r7, r0
 8017790:	781b      	ldrb	r3, [r3, #0]
 8017792:	009b      	lsls	r3, r3, #2
 8017794:	18d3      	adds	r3, r2, r3
 8017796:	193a      	adds	r2, r7, r4
 8017798:	8812      	ldrh	r2, [r2, #0]
 801779a:	2180      	movs	r1, #128	@ 0x80
 801779c:	430a      	orrs	r2, r1
 801779e:	b292      	uxth	r2, r2
 80177a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80177a2:	183b      	adds	r3, r7, r0
 80177a4:	781a      	ldrb	r2, [r3, #0]
 80177a6:	0013      	movs	r3, r2
 80177a8:	009b      	lsls	r3, r3, #2
 80177aa:	189b      	adds	r3, r3, r2
 80177ac:	00db      	lsls	r3, r3, #3
 80177ae:	3369      	adds	r3, #105	@ 0x69
 80177b0:	33ff      	adds	r3, #255	@ 0xff
 80177b2:	687a      	ldr	r2, [r7, #4]
 80177b4:	18d3      	adds	r3, r2, r3
 80177b6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80177b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177ba:	7b1b      	ldrb	r3, [r3, #12]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d125      	bne.n	801780c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	2250      	movs	r2, #80	@ 0x50
 80177c6:	5a9b      	ldrh	r3, [r3, r2]
 80177c8:	b29b      	uxth	r3, r3
 80177ca:	001a      	movs	r2, r3
 80177cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177ce:	781b      	ldrb	r3, [r3, #0]
 80177d0:	00db      	lsls	r3, r3, #3
 80177d2:	18d2      	adds	r2, r2, r3
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	18d3      	adds	r3, r2, r3
 80177da:	4abc      	ldr	r2, [pc, #752]	@ (8017acc <PCD_EP_ISR_Handler+0x6d8>)
 80177dc:	4694      	mov	ip, r2
 80177de:	4463      	add	r3, ip
 80177e0:	881a      	ldrh	r2, [r3, #0]
 80177e2:	2450      	movs	r4, #80	@ 0x50
 80177e4:	193b      	adds	r3, r7, r4
 80177e6:	0592      	lsls	r2, r2, #22
 80177e8:	0d92      	lsrs	r2, r2, #22
 80177ea:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80177ec:	193b      	adds	r3, r7, r4
 80177ee:	881b      	ldrh	r3, [r3, #0]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d100      	bne.n	80177f6 <PCD_EP_ISR_Handler+0x402>
 80177f4:	e08d      	b.n	8017912 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	6818      	ldr	r0, [r3, #0]
 80177fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177fc:	6959      	ldr	r1, [r3, #20]
 80177fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017800:	88da      	ldrh	r2, [r3, #6]
 8017802:	193b      	adds	r3, r7, r4
 8017804:	881b      	ldrh	r3, [r3, #0]
 8017806:	f007 f8d6 	bl	801e9b6 <USB_ReadPMA>
 801780a:	e082      	b.n	8017912 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801780c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801780e:	78db      	ldrb	r3, [r3, #3]
 8017810:	2b02      	cmp	r3, #2
 8017812:	d10c      	bne.n	801782e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8017814:	2350      	movs	r3, #80	@ 0x50
 8017816:	18fc      	adds	r4, r7, r3
 8017818:	234a      	movs	r3, #74	@ 0x4a
 801781a:	18fb      	adds	r3, r7, r3
 801781c:	881a      	ldrh	r2, [r3, #0]
 801781e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	0018      	movs	r0, r3
 8017824:	f000 f9ec 	bl	8017c00 <HAL_PCD_EP_DB_Receive>
 8017828:	0003      	movs	r3, r0
 801782a:	8023      	strh	r3, [r4, #0]
 801782c:	e071      	b.n	8017912 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	001a      	movs	r2, r3
 8017834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017836:	781b      	ldrb	r3, [r3, #0]
 8017838:	009b      	lsls	r3, r3, #2
 801783a:	18d3      	adds	r3, r2, r3
 801783c:	881b      	ldrh	r3, [r3, #0]
 801783e:	b29a      	uxth	r2, r3
 8017840:	2052      	movs	r0, #82	@ 0x52
 8017842:	183b      	adds	r3, r7, r0
 8017844:	49a2      	ldr	r1, [pc, #648]	@ (8017ad0 <PCD_EP_ISR_Handler+0x6dc>)
 8017846:	400a      	ands	r2, r1
 8017848:	801a      	strh	r2, [r3, #0]
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	001a      	movs	r2, r3
 8017850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017852:	781b      	ldrb	r3, [r3, #0]
 8017854:	009b      	lsls	r3, r3, #2
 8017856:	18d3      	adds	r3, r2, r3
 8017858:	183a      	adds	r2, r7, r0
 801785a:	8812      	ldrh	r2, [r2, #0]
 801785c:	499d      	ldr	r1, [pc, #628]	@ (8017ad4 <PCD_EP_ISR_Handler+0x6e0>)
 801785e:	430a      	orrs	r2, r1
 8017860:	b292      	uxth	r2, r2
 8017862:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	001a      	movs	r2, r3
 801786a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801786c:	781b      	ldrb	r3, [r3, #0]
 801786e:	009b      	lsls	r3, r3, #2
 8017870:	18d3      	adds	r3, r2, r3
 8017872:	881b      	ldrh	r3, [r3, #0]
 8017874:	b29b      	uxth	r3, r3
 8017876:	001a      	movs	r2, r3
 8017878:	2380      	movs	r3, #128	@ 0x80
 801787a:	01db      	lsls	r3, r3, #7
 801787c:	4013      	ands	r3, r2
 801787e:	d024      	beq.n	80178ca <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	2250      	movs	r2, #80	@ 0x50
 8017886:	5a9b      	ldrh	r3, [r3, r2]
 8017888:	b29b      	uxth	r3, r3
 801788a:	001a      	movs	r2, r3
 801788c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801788e:	781b      	ldrb	r3, [r3, #0]
 8017890:	00db      	lsls	r3, r3, #3
 8017892:	18d2      	adds	r2, r2, r3
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	18d3      	adds	r3, r2, r3
 801789a:	4a8f      	ldr	r2, [pc, #572]	@ (8017ad8 <PCD_EP_ISR_Handler+0x6e4>)
 801789c:	4694      	mov	ip, r2
 801789e:	4463      	add	r3, ip
 80178a0:	881a      	ldrh	r2, [r3, #0]
 80178a2:	2450      	movs	r4, #80	@ 0x50
 80178a4:	193b      	adds	r3, r7, r4
 80178a6:	0592      	lsls	r2, r2, #22
 80178a8:	0d92      	lsrs	r2, r2, #22
 80178aa:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80178ac:	193b      	adds	r3, r7, r4
 80178ae:	881b      	ldrh	r3, [r3, #0]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d02e      	beq.n	8017912 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	6818      	ldr	r0, [r3, #0]
 80178b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178ba:	6959      	ldr	r1, [r3, #20]
 80178bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178be:	891a      	ldrh	r2, [r3, #8]
 80178c0:	193b      	adds	r3, r7, r4
 80178c2:	881b      	ldrh	r3, [r3, #0]
 80178c4:	f007 f877 	bl	801e9b6 <USB_ReadPMA>
 80178c8:	e023      	b.n	8017912 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	2250      	movs	r2, #80	@ 0x50
 80178d0:	5a9b      	ldrh	r3, [r3, r2]
 80178d2:	b29b      	uxth	r3, r3
 80178d4:	001a      	movs	r2, r3
 80178d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178d8:	781b      	ldrb	r3, [r3, #0]
 80178da:	00db      	lsls	r3, r3, #3
 80178dc:	18d2      	adds	r2, r2, r3
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	18d3      	adds	r3, r2, r3
 80178e4:	4a79      	ldr	r2, [pc, #484]	@ (8017acc <PCD_EP_ISR_Handler+0x6d8>)
 80178e6:	4694      	mov	ip, r2
 80178e8:	4463      	add	r3, ip
 80178ea:	881a      	ldrh	r2, [r3, #0]
 80178ec:	2450      	movs	r4, #80	@ 0x50
 80178ee:	193b      	adds	r3, r7, r4
 80178f0:	0592      	lsls	r2, r2, #22
 80178f2:	0d92      	lsrs	r2, r2, #22
 80178f4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80178f6:	193b      	adds	r3, r7, r4
 80178f8:	881b      	ldrh	r3, [r3, #0]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d009      	beq.n	8017912 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	6818      	ldr	r0, [r3, #0]
 8017902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017904:	6959      	ldr	r1, [r3, #20]
 8017906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017908:	895a      	ldrh	r2, [r3, #10]
 801790a:	193b      	adds	r3, r7, r4
 801790c:	881b      	ldrh	r3, [r3, #0]
 801790e:	f007 f852 	bl	801e9b6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8017912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017914:	69da      	ldr	r2, [r3, #28]
 8017916:	2150      	movs	r1, #80	@ 0x50
 8017918:	187b      	adds	r3, r7, r1
 801791a:	881b      	ldrh	r3, [r3, #0]
 801791c:	18d2      	adds	r2, r2, r3
 801791e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017920:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8017922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017924:	695a      	ldr	r2, [r3, #20]
 8017926:	187b      	adds	r3, r7, r1
 8017928:	881b      	ldrh	r3, [r3, #0]
 801792a:	18d2      	adds	r2, r2, r3
 801792c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801792e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8017930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017932:	699b      	ldr	r3, [r3, #24]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d005      	beq.n	8017944 <PCD_EP_ISR_Handler+0x550>
 8017938:	187b      	adds	r3, r7, r1
 801793a:	881a      	ldrh	r2, [r3, #0]
 801793c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801793e:	691b      	ldr	r3, [r3, #16]
 8017940:	429a      	cmp	r2, r3
 8017942:	d207      	bcs.n	8017954 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8017944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017946:	781a      	ldrb	r2, [r3, #0]
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	0011      	movs	r1, r2
 801794c:	0018      	movs	r0, r3
 801794e:	f009 f84c 	bl	80209ea <HAL_PCD_DataOutStageCallback>
 8017952:	e006      	b.n	8017962 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801795a:	0011      	movs	r1, r2
 801795c:	0018      	movs	r0, r3
 801795e:	f005 fd6f 	bl	801d440 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8017962:	244a      	movs	r4, #74	@ 0x4a
 8017964:	193b      	adds	r3, r7, r4
 8017966:	881b      	ldrh	r3, [r3, #0]
 8017968:	2280      	movs	r2, #128	@ 0x80
 801796a:	4013      	ands	r3, r2
 801796c:	d100      	bne.n	8017970 <PCD_EP_ISR_Handler+0x57c>
 801796e:	e133      	b.n	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8017970:	204d      	movs	r0, #77	@ 0x4d
 8017972:	183b      	adds	r3, r7, r0
 8017974:	781b      	ldrb	r3, [r3, #0]
 8017976:	1c5a      	adds	r2, r3, #1
 8017978:	0013      	movs	r3, r2
 801797a:	009b      	lsls	r3, r3, #2
 801797c:	189b      	adds	r3, r3, r2
 801797e:	00db      	lsls	r3, r3, #3
 8017980:	687a      	ldr	r2, [r7, #4]
 8017982:	18d3      	adds	r3, r2, r3
 8017984:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	001a      	movs	r2, r3
 801798c:	183b      	adds	r3, r7, r0
 801798e:	781b      	ldrb	r3, [r3, #0]
 8017990:	009b      	lsls	r3, r3, #2
 8017992:	18d3      	adds	r3, r2, r3
 8017994:	881b      	ldrh	r3, [r3, #0]
 8017996:	b29a      	uxth	r2, r3
 8017998:	2542      	movs	r5, #66	@ 0x42
 801799a:	197b      	adds	r3, r7, r5
 801799c:	494f      	ldr	r1, [pc, #316]	@ (8017adc <PCD_EP_ISR_Handler+0x6e8>)
 801799e:	400a      	ands	r2, r1
 80179a0:	801a      	strh	r2, [r3, #0]
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	001a      	movs	r2, r3
 80179a8:	183b      	adds	r3, r7, r0
 80179aa:	781b      	ldrb	r3, [r3, #0]
 80179ac:	009b      	lsls	r3, r3, #2
 80179ae:	18d3      	adds	r3, r2, r3
 80179b0:	197a      	adds	r2, r7, r5
 80179b2:	8812      	ldrh	r2, [r2, #0]
 80179b4:	494a      	ldr	r1, [pc, #296]	@ (8017ae0 <PCD_EP_ISR_Handler+0x6ec>)
 80179b6:	430a      	orrs	r2, r1
 80179b8:	b292      	uxth	r2, r2
 80179ba:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80179bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179be:	78db      	ldrb	r3, [r3, #3]
 80179c0:	2b01      	cmp	r3, #1
 80179c2:	d000      	beq.n	80179c6 <PCD_EP_ISR_Handler+0x5d2>
 80179c4:	e0af      	b.n	8017b26 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80179c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179c8:	2200      	movs	r2, #0
 80179ca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80179cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179ce:	7b1b      	ldrb	r3, [r3, #12]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d100      	bne.n	80179d6 <PCD_EP_ISR_Handler+0x5e2>
 80179d4:	e09f      	b.n	8017b16 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80179d6:	193b      	adds	r3, r7, r4
 80179d8:	881b      	ldrh	r3, [r3, #0]
 80179da:	2240      	movs	r2, #64	@ 0x40
 80179dc:	4013      	ands	r3, r2
 80179de:	d046      	beq.n	8017a6e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80179e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179e2:	785b      	ldrb	r3, [r3, #1]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d125      	bne.n	8017a34 <PCD_EP_ISR_Handler+0x640>
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	2250      	movs	r2, #80	@ 0x50
 80179f4:	5a9b      	ldrh	r3, [r3, r2]
 80179f6:	b29b      	uxth	r3, r3
 80179f8:	001a      	movs	r2, r3
 80179fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179fc:	189b      	adds	r3, r3, r2
 80179fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8017a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a02:	781b      	ldrb	r3, [r3, #0]
 8017a04:	00da      	lsls	r2, r3, #3
 8017a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a08:	18d3      	adds	r3, r2, r3
 8017a0a:	4a33      	ldr	r2, [pc, #204]	@ (8017ad8 <PCD_EP_ISR_Handler+0x6e4>)
 8017a0c:	4694      	mov	ip, r2
 8017a0e:	4463      	add	r3, ip
 8017a10:	623b      	str	r3, [r7, #32]
 8017a12:	6a3b      	ldr	r3, [r7, #32]
 8017a14:	881b      	ldrh	r3, [r3, #0]
 8017a16:	b29b      	uxth	r3, r3
 8017a18:	059b      	lsls	r3, r3, #22
 8017a1a:	0d9b      	lsrs	r3, r3, #22
 8017a1c:	b29a      	uxth	r2, r3
 8017a1e:	6a3b      	ldr	r3, [r7, #32]
 8017a20:	801a      	strh	r2, [r3, #0]
 8017a22:	6a3b      	ldr	r3, [r7, #32]
 8017a24:	881b      	ldrh	r3, [r3, #0]
 8017a26:	b29b      	uxth	r3, r3
 8017a28:	4a2d      	ldr	r2, [pc, #180]	@ (8017ae0 <PCD_EP_ISR_Handler+0x6ec>)
 8017a2a:	4313      	orrs	r3, r2
 8017a2c:	b29a      	uxth	r2, r3
 8017a2e:	6a3b      	ldr	r3, [r7, #32]
 8017a30:	801a      	strh	r2, [r3, #0]
 8017a32:	e070      	b.n	8017b16 <PCD_EP_ISR_Handler+0x722>
 8017a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a36:	785b      	ldrb	r3, [r3, #1]
 8017a38:	2b01      	cmp	r3, #1
 8017a3a:	d16c      	bne.n	8017b16 <PCD_EP_ISR_Handler+0x722>
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	2250      	movs	r2, #80	@ 0x50
 8017a48:	5a9b      	ldrh	r3, [r3, r2]
 8017a4a:	b29b      	uxth	r3, r3
 8017a4c:	001a      	movs	r2, r3
 8017a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a50:	189b      	adds	r3, r3, r2
 8017a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a56:	781b      	ldrb	r3, [r3, #0]
 8017a58:	00da      	lsls	r2, r3, #3
 8017a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a5c:	18d3      	adds	r3, r2, r3
 8017a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8017ad8 <PCD_EP_ISR_Handler+0x6e4>)
 8017a60:	4694      	mov	ip, r2
 8017a62:	4463      	add	r3, ip
 8017a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a68:	2200      	movs	r2, #0
 8017a6a:	801a      	strh	r2, [r3, #0]
 8017a6c:	e053      	b.n	8017b16 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a76:	785b      	ldrb	r3, [r3, #1]
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d133      	bne.n	8017ae4 <PCD_EP_ISR_Handler+0x6f0>
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	2250      	movs	r2, #80	@ 0x50
 8017a88:	5a9b      	ldrh	r3, [r3, r2]
 8017a8a:	b29b      	uxth	r3, r3
 8017a8c:	001a      	movs	r2, r3
 8017a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a90:	189b      	adds	r3, r3, r2
 8017a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8017a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a96:	781b      	ldrb	r3, [r3, #0]
 8017a98:	00da      	lsls	r2, r3, #3
 8017a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a9c:	18d3      	adds	r3, r2, r3
 8017a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8017acc <PCD_EP_ISR_Handler+0x6d8>)
 8017aa0:	4694      	mov	ip, r2
 8017aa2:	4463      	add	r3, ip
 8017aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8017aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017aa8:	881b      	ldrh	r3, [r3, #0]
 8017aaa:	b29b      	uxth	r3, r3
 8017aac:	059b      	lsls	r3, r3, #22
 8017aae:	0d9b      	lsrs	r3, r3, #22
 8017ab0:	b29a      	uxth	r2, r3
 8017ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ab4:	801a      	strh	r2, [r3, #0]
 8017ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ab8:	881b      	ldrh	r3, [r3, #0]
 8017aba:	b29b      	uxth	r3, r3
 8017abc:	4a08      	ldr	r2, [pc, #32]	@ (8017ae0 <PCD_EP_ISR_Handler+0x6ec>)
 8017abe:	4313      	orrs	r3, r2
 8017ac0:	b29a      	uxth	r2, r3
 8017ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ac4:	801a      	strh	r2, [r3, #0]
 8017ac6:	e026      	b.n	8017b16 <PCD_EP_ISR_Handler+0x722>
 8017ac8:	00000f8f 	.word	0x00000f8f
 8017acc:	00000406 	.word	0x00000406
 8017ad0:	ffff8f8f 	.word	0xffff8f8f
 8017ad4:	ffff80c0 	.word	0xffff80c0
 8017ad8:	00000402 	.word	0x00000402
 8017adc:	ffff8f0f 	.word	0xffff8f0f
 8017ae0:	ffff8000 	.word	0xffff8000
 8017ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017ae6:	785b      	ldrb	r3, [r3, #1]
 8017ae8:	2b01      	cmp	r3, #1
 8017aea:	d114      	bne.n	8017b16 <PCD_EP_ISR_Handler+0x722>
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	2250      	movs	r2, #80	@ 0x50
 8017af2:	5a9b      	ldrh	r3, [r3, r2]
 8017af4:	b29b      	uxth	r3, r3
 8017af6:	001a      	movs	r2, r3
 8017af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017afa:	189b      	adds	r3, r3, r2
 8017afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b00:	781b      	ldrb	r3, [r3, #0]
 8017b02:	00da      	lsls	r2, r3, #3
 8017b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b06:	18d3      	adds	r3, r2, r3
 8017b08:	4a3b      	ldr	r2, [pc, #236]	@ (8017bf8 <PCD_EP_ISR_Handler+0x804>)
 8017b0a:	4694      	mov	ip, r2
 8017b0c:	4463      	add	r3, ip
 8017b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b12:	2200      	movs	r2, #0
 8017b14:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8017b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b18:	781a      	ldrb	r2, [r3, #0]
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	0011      	movs	r1, r2
 8017b1e:	0018      	movs	r0, r3
 8017b20:	f008 ff84 	bl	8020a2c <HAL_PCD_DataInStageCallback>
 8017b24:	e058      	b.n	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8017b26:	234a      	movs	r3, #74	@ 0x4a
 8017b28:	18fb      	adds	r3, r7, r3
 8017b2a:	881a      	ldrh	r2, [r3, #0]
 8017b2c:	2380      	movs	r3, #128	@ 0x80
 8017b2e:	005b      	lsls	r3, r3, #1
 8017b30:	4013      	ands	r3, r2
 8017b32:	d149      	bne.n	8017bc8 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	2250      	movs	r2, #80	@ 0x50
 8017b3a:	5a9b      	ldrh	r3, [r3, r2]
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	001a      	movs	r2, r3
 8017b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b42:	781b      	ldrb	r3, [r3, #0]
 8017b44:	00db      	lsls	r3, r3, #3
 8017b46:	18d2      	adds	r2, r2, r3
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	18d3      	adds	r3, r2, r3
 8017b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8017bfc <PCD_EP_ISR_Handler+0x808>)
 8017b50:	4694      	mov	ip, r2
 8017b52:	4463      	add	r3, ip
 8017b54:	881a      	ldrh	r2, [r3, #0]
 8017b56:	2140      	movs	r1, #64	@ 0x40
 8017b58:	187b      	adds	r3, r7, r1
 8017b5a:	0592      	lsls	r2, r2, #22
 8017b5c:	0d92      	lsrs	r2, r2, #22
 8017b5e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8017b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b62:	699a      	ldr	r2, [r3, #24]
 8017b64:	187b      	adds	r3, r7, r1
 8017b66:	881b      	ldrh	r3, [r3, #0]
 8017b68:	429a      	cmp	r2, r3
 8017b6a:	d907      	bls.n	8017b7c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8017b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b6e:	699a      	ldr	r2, [r3, #24]
 8017b70:	187b      	adds	r3, r7, r1
 8017b72:	881b      	ldrh	r3, [r3, #0]
 8017b74:	1ad2      	subs	r2, r2, r3
 8017b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b78:	619a      	str	r2, [r3, #24]
 8017b7a:	e002      	b.n	8017b82 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8017b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b7e:	2200      	movs	r2, #0
 8017b80:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8017b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b84:	699b      	ldr	r3, [r3, #24]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d107      	bne.n	8017b9a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8017b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b8c:	781a      	ldrb	r2, [r3, #0]
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	0011      	movs	r1, r2
 8017b92:	0018      	movs	r0, r3
 8017b94:	f008 ff4a 	bl	8020a2c <HAL_PCD_DataInStageCallback>
 8017b98:	e01e      	b.n	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8017b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b9c:	695a      	ldr	r2, [r3, #20]
 8017b9e:	2140      	movs	r1, #64	@ 0x40
 8017ba0:	187b      	adds	r3, r7, r1
 8017ba2:	881b      	ldrh	r3, [r3, #0]
 8017ba4:	18d2      	adds	r2, r2, r3
 8017ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017ba8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8017baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017bac:	69da      	ldr	r2, [r3, #28]
 8017bae:	187b      	adds	r3, r7, r1
 8017bb0:	881b      	ldrh	r3, [r3, #0]
 8017bb2:	18d2      	adds	r2, r2, r3
 8017bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017bb6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017bbe:	0011      	movs	r1, r2
 8017bc0:	0018      	movs	r0, r3
 8017bc2:	f005 fc3d 	bl	801d440 <USB_EPStartXfer>
 8017bc6:	e007      	b.n	8017bd8 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8017bc8:	234a      	movs	r3, #74	@ 0x4a
 8017bca:	18fb      	adds	r3, r7, r3
 8017bcc:	881a      	ldrh	r2, [r3, #0]
 8017bce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	0018      	movs	r0, r3
 8017bd4:	f000 f930 	bl	8017e38 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	2244      	movs	r2, #68	@ 0x44
 8017bde:	5a9b      	ldrh	r3, [r3, r2]
 8017be0:	b29b      	uxth	r3, r3
 8017be2:	b21b      	sxth	r3, r3
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	da01      	bge.n	8017bec <PCD_EP_ISR_Handler+0x7f8>
 8017be8:	f7ff fc0a 	bl	8017400 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8017bec:	2300      	movs	r3, #0
}
 8017bee:	0018      	movs	r0, r3
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	b016      	add	sp, #88	@ 0x58
 8017bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8017bf6:	46c0      	nop			@ (mov r8, r8)
 8017bf8:	00000406 	.word	0x00000406
 8017bfc:	00000402 	.word	0x00000402

08017c00 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8017c00:	b590      	push	{r4, r7, lr}
 8017c02:	b089      	sub	sp, #36	@ 0x24
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	60f8      	str	r0, [r7, #12]
 8017c08:	60b9      	str	r1, [r7, #8]
 8017c0a:	1dbb      	adds	r3, r7, #6
 8017c0c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8017c0e:	1dbb      	adds	r3, r7, #6
 8017c10:	881a      	ldrh	r2, [r3, #0]
 8017c12:	2380      	movs	r3, #128	@ 0x80
 8017c14:	01db      	lsls	r3, r3, #7
 8017c16:	4013      	ands	r3, r2
 8017c18:	d100      	bne.n	8017c1c <HAL_PCD_EP_DB_Receive+0x1c>
 8017c1a:	e07d      	b.n	8017d18 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	2250      	movs	r2, #80	@ 0x50
 8017c22:	5a9b      	ldrh	r3, [r3, r2]
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	001a      	movs	r2, r3
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	781b      	ldrb	r3, [r3, #0]
 8017c2c:	00db      	lsls	r3, r3, #3
 8017c2e:	18d2      	adds	r2, r2, r3
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	18d3      	adds	r3, r2, r3
 8017c36:	4a7a      	ldr	r2, [pc, #488]	@ (8017e20 <HAL_PCD_EP_DB_Receive+0x220>)
 8017c38:	4694      	mov	ip, r2
 8017c3a:	4463      	add	r3, ip
 8017c3c:	881a      	ldrh	r2, [r3, #0]
 8017c3e:	211a      	movs	r1, #26
 8017c40:	187b      	adds	r3, r7, r1
 8017c42:	0592      	lsls	r2, r2, #22
 8017c44:	0d92      	lsrs	r2, r2, #22
 8017c46:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8017c48:	68bb      	ldr	r3, [r7, #8]
 8017c4a:	699a      	ldr	r2, [r3, #24]
 8017c4c:	187b      	adds	r3, r7, r1
 8017c4e:	881b      	ldrh	r3, [r3, #0]
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d307      	bcc.n	8017c64 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8017c54:	68bb      	ldr	r3, [r7, #8]
 8017c56:	699a      	ldr	r2, [r3, #24]
 8017c58:	187b      	adds	r3, r7, r1
 8017c5a:	881b      	ldrh	r3, [r3, #0]
 8017c5c:	1ad2      	subs	r2, r2, r3
 8017c5e:	68bb      	ldr	r3, [r7, #8]
 8017c60:	619a      	str	r2, [r3, #24]
 8017c62:	e002      	b.n	8017c6a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	2200      	movs	r2, #0
 8017c68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8017c6a:	68bb      	ldr	r3, [r7, #8]
 8017c6c:	699b      	ldr	r3, [r3, #24]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d121      	bne.n	8017cb6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	001a      	movs	r2, r3
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	781b      	ldrb	r3, [r3, #0]
 8017c7c:	009b      	lsls	r3, r3, #2
 8017c7e:	18d3      	adds	r3, r2, r3
 8017c80:	881b      	ldrh	r3, [r3, #0]
 8017c82:	b29a      	uxth	r2, r3
 8017c84:	2018      	movs	r0, #24
 8017c86:	183b      	adds	r3, r7, r0
 8017c88:	4966      	ldr	r1, [pc, #408]	@ (8017e24 <HAL_PCD_EP_DB_Receive+0x224>)
 8017c8a:	400a      	ands	r2, r1
 8017c8c:	801a      	strh	r2, [r3, #0]
 8017c8e:	183b      	adds	r3, r7, r0
 8017c90:	183a      	adds	r2, r7, r0
 8017c92:	8812      	ldrh	r2, [r2, #0]
 8017c94:	2180      	movs	r1, #128	@ 0x80
 8017c96:	0189      	lsls	r1, r1, #6
 8017c98:	404a      	eors	r2, r1
 8017c9a:	801a      	strh	r2, [r3, #0]
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	001a      	movs	r2, r3
 8017ca2:	68bb      	ldr	r3, [r7, #8]
 8017ca4:	781b      	ldrb	r3, [r3, #0]
 8017ca6:	009b      	lsls	r3, r3, #2
 8017ca8:	18d3      	adds	r3, r2, r3
 8017caa:	183a      	adds	r2, r7, r0
 8017cac:	8812      	ldrh	r2, [r2, #0]
 8017cae:	495e      	ldr	r1, [pc, #376]	@ (8017e28 <HAL_PCD_EP_DB_Receive+0x228>)
 8017cb0:	430a      	orrs	r2, r1
 8017cb2:	b292      	uxth	r2, r2
 8017cb4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8017cb6:	1dbb      	adds	r3, r7, #6
 8017cb8:	881b      	ldrh	r3, [r3, #0]
 8017cba:	2240      	movs	r2, #64	@ 0x40
 8017cbc:	4013      	ands	r3, r2
 8017cbe:	d01a      	beq.n	8017cf6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	001a      	movs	r2, r3
 8017cc6:	68bb      	ldr	r3, [r7, #8]
 8017cc8:	781b      	ldrb	r3, [r3, #0]
 8017cca:	009b      	lsls	r3, r3, #2
 8017ccc:	18d3      	adds	r3, r2, r3
 8017cce:	881b      	ldrh	r3, [r3, #0]
 8017cd0:	b29a      	uxth	r2, r3
 8017cd2:	2016      	movs	r0, #22
 8017cd4:	183b      	adds	r3, r7, r0
 8017cd6:	4955      	ldr	r1, [pc, #340]	@ (8017e2c <HAL_PCD_EP_DB_Receive+0x22c>)
 8017cd8:	400a      	ands	r2, r1
 8017cda:	801a      	strh	r2, [r3, #0]
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	001a      	movs	r2, r3
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	781b      	ldrb	r3, [r3, #0]
 8017ce6:	009b      	lsls	r3, r3, #2
 8017ce8:	18d3      	adds	r3, r2, r3
 8017cea:	183a      	adds	r2, r7, r0
 8017cec:	8812      	ldrh	r2, [r2, #0]
 8017cee:	4950      	ldr	r1, [pc, #320]	@ (8017e30 <HAL_PCD_EP_DB_Receive+0x230>)
 8017cf0:	430a      	orrs	r2, r1
 8017cf2:	b292      	uxth	r2, r2
 8017cf4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8017cf6:	241a      	movs	r4, #26
 8017cf8:	193b      	adds	r3, r7, r4
 8017cfa:	881b      	ldrh	r3, [r3, #0]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d100      	bne.n	8017d02 <HAL_PCD_EP_DB_Receive+0x102>
 8017d00:	e086      	b.n	8017e10 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	6818      	ldr	r0, [r3, #0]
 8017d06:	68bb      	ldr	r3, [r7, #8]
 8017d08:	6959      	ldr	r1, [r3, #20]
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	891a      	ldrh	r2, [r3, #8]
 8017d0e:	193b      	adds	r3, r7, r4
 8017d10:	881b      	ldrh	r3, [r3, #0]
 8017d12:	f006 fe50 	bl	801e9b6 <USB_ReadPMA>
 8017d16:	e07b      	b.n	8017e10 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	2250      	movs	r2, #80	@ 0x50
 8017d1e:	5a9b      	ldrh	r3, [r3, r2]
 8017d20:	b29b      	uxth	r3, r3
 8017d22:	001a      	movs	r2, r3
 8017d24:	68bb      	ldr	r3, [r7, #8]
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	00db      	lsls	r3, r3, #3
 8017d2a:	18d2      	adds	r2, r2, r3
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	18d3      	adds	r3, r2, r3
 8017d32:	4a40      	ldr	r2, [pc, #256]	@ (8017e34 <HAL_PCD_EP_DB_Receive+0x234>)
 8017d34:	4694      	mov	ip, r2
 8017d36:	4463      	add	r3, ip
 8017d38:	881a      	ldrh	r2, [r3, #0]
 8017d3a:	211a      	movs	r1, #26
 8017d3c:	187b      	adds	r3, r7, r1
 8017d3e:	0592      	lsls	r2, r2, #22
 8017d40:	0d92      	lsrs	r2, r2, #22
 8017d42:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	699a      	ldr	r2, [r3, #24]
 8017d48:	187b      	adds	r3, r7, r1
 8017d4a:	881b      	ldrh	r3, [r3, #0]
 8017d4c:	429a      	cmp	r2, r3
 8017d4e:	d307      	bcc.n	8017d60 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8017d50:	68bb      	ldr	r3, [r7, #8]
 8017d52:	699a      	ldr	r2, [r3, #24]
 8017d54:	187b      	adds	r3, r7, r1
 8017d56:	881b      	ldrh	r3, [r3, #0]
 8017d58:	1ad2      	subs	r2, r2, r3
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	619a      	str	r2, [r3, #24]
 8017d5e:	e002      	b.n	8017d66 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8017d60:	68bb      	ldr	r3, [r7, #8]
 8017d62:	2200      	movs	r2, #0
 8017d64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	699b      	ldr	r3, [r3, #24]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d121      	bne.n	8017db2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	001a      	movs	r2, r3
 8017d74:	68bb      	ldr	r3, [r7, #8]
 8017d76:	781b      	ldrb	r3, [r3, #0]
 8017d78:	009b      	lsls	r3, r3, #2
 8017d7a:	18d3      	adds	r3, r2, r3
 8017d7c:	881b      	ldrh	r3, [r3, #0]
 8017d7e:	b29a      	uxth	r2, r3
 8017d80:	201e      	movs	r0, #30
 8017d82:	183b      	adds	r3, r7, r0
 8017d84:	4927      	ldr	r1, [pc, #156]	@ (8017e24 <HAL_PCD_EP_DB_Receive+0x224>)
 8017d86:	400a      	ands	r2, r1
 8017d88:	801a      	strh	r2, [r3, #0]
 8017d8a:	183b      	adds	r3, r7, r0
 8017d8c:	183a      	adds	r2, r7, r0
 8017d8e:	8812      	ldrh	r2, [r2, #0]
 8017d90:	2180      	movs	r1, #128	@ 0x80
 8017d92:	0189      	lsls	r1, r1, #6
 8017d94:	404a      	eors	r2, r1
 8017d96:	801a      	strh	r2, [r3, #0]
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	001a      	movs	r2, r3
 8017d9e:	68bb      	ldr	r3, [r7, #8]
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	009b      	lsls	r3, r3, #2
 8017da4:	18d3      	adds	r3, r2, r3
 8017da6:	183a      	adds	r2, r7, r0
 8017da8:	8812      	ldrh	r2, [r2, #0]
 8017daa:	491f      	ldr	r1, [pc, #124]	@ (8017e28 <HAL_PCD_EP_DB_Receive+0x228>)
 8017dac:	430a      	orrs	r2, r1
 8017dae:	b292      	uxth	r2, r2
 8017db0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8017db2:	1dbb      	adds	r3, r7, #6
 8017db4:	881b      	ldrh	r3, [r3, #0]
 8017db6:	2240      	movs	r2, #64	@ 0x40
 8017db8:	4013      	ands	r3, r2
 8017dba:	d11a      	bne.n	8017df2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	001a      	movs	r2, r3
 8017dc2:	68bb      	ldr	r3, [r7, #8]
 8017dc4:	781b      	ldrb	r3, [r3, #0]
 8017dc6:	009b      	lsls	r3, r3, #2
 8017dc8:	18d3      	adds	r3, r2, r3
 8017dca:	881b      	ldrh	r3, [r3, #0]
 8017dcc:	b29a      	uxth	r2, r3
 8017dce:	201c      	movs	r0, #28
 8017dd0:	183b      	adds	r3, r7, r0
 8017dd2:	4916      	ldr	r1, [pc, #88]	@ (8017e2c <HAL_PCD_EP_DB_Receive+0x22c>)
 8017dd4:	400a      	ands	r2, r1
 8017dd6:	801a      	strh	r2, [r3, #0]
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	001a      	movs	r2, r3
 8017dde:	68bb      	ldr	r3, [r7, #8]
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	009b      	lsls	r3, r3, #2
 8017de4:	18d3      	adds	r3, r2, r3
 8017de6:	183a      	adds	r2, r7, r0
 8017de8:	8812      	ldrh	r2, [r2, #0]
 8017dea:	4911      	ldr	r1, [pc, #68]	@ (8017e30 <HAL_PCD_EP_DB_Receive+0x230>)
 8017dec:	430a      	orrs	r2, r1
 8017dee:	b292      	uxth	r2, r2
 8017df0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8017df2:	241a      	movs	r4, #26
 8017df4:	193b      	adds	r3, r7, r4
 8017df6:	881b      	ldrh	r3, [r3, #0]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d009      	beq.n	8017e10 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	6818      	ldr	r0, [r3, #0]
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	6959      	ldr	r1, [r3, #20]
 8017e04:	68bb      	ldr	r3, [r7, #8]
 8017e06:	895a      	ldrh	r2, [r3, #10]
 8017e08:	193b      	adds	r3, r7, r4
 8017e0a:	881b      	ldrh	r3, [r3, #0]
 8017e0c:	f006 fdd3 	bl	801e9b6 <USB_ReadPMA>
    }
  }

  return count;
 8017e10:	231a      	movs	r3, #26
 8017e12:	18fb      	adds	r3, r7, r3
 8017e14:	881b      	ldrh	r3, [r3, #0]
}
 8017e16:	0018      	movs	r0, r3
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	b009      	add	sp, #36	@ 0x24
 8017e1c:	bd90      	pop	{r4, r7, pc}
 8017e1e:	46c0      	nop			@ (mov r8, r8)
 8017e20:	00000402 	.word	0x00000402
 8017e24:	ffffbf8f 	.word	0xffffbf8f
 8017e28:	ffff8080 	.word	0xffff8080
 8017e2c:	ffff8f8f 	.word	0xffff8f8f
 8017e30:	ffff80c0 	.word	0xffff80c0
 8017e34:	00000406 	.word	0x00000406

08017e38 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8017e38:	b580      	push	{r7, lr}
 8017e3a:	b0a4      	sub	sp, #144	@ 0x90
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	60f8      	str	r0, [r7, #12]
 8017e40:	60b9      	str	r1, [r7, #8]
 8017e42:	1dbb      	adds	r3, r7, #6
 8017e44:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8017e46:	1dbb      	adds	r3, r7, #6
 8017e48:	881b      	ldrh	r3, [r3, #0]
 8017e4a:	2240      	movs	r2, #64	@ 0x40
 8017e4c:	4013      	ands	r3, r2
 8017e4e:	d100      	bne.n	8017e52 <HAL_PCD_EP_DB_Transmit+0x1a>
 8017e50:	e1e4      	b.n	801821c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	2250      	movs	r2, #80	@ 0x50
 8017e58:	5a9b      	ldrh	r3, [r3, r2]
 8017e5a:	b29b      	uxth	r3, r3
 8017e5c:	001a      	movs	r2, r3
 8017e5e:	68bb      	ldr	r3, [r7, #8]
 8017e60:	781b      	ldrb	r3, [r3, #0]
 8017e62:	00db      	lsls	r3, r3, #3
 8017e64:	18d2      	adds	r2, r2, r3
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	18d3      	adds	r3, r2, r3
 8017e6c:	4ad0      	ldr	r2, [pc, #832]	@ (80181b0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8017e6e:	4694      	mov	ip, r2
 8017e70:	4463      	add	r3, ip
 8017e72:	881a      	ldrh	r2, [r3, #0]
 8017e74:	2186      	movs	r1, #134	@ 0x86
 8017e76:	187b      	adds	r3, r7, r1
 8017e78:	0592      	lsls	r2, r2, #22
 8017e7a:	0d92      	lsrs	r2, r2, #22
 8017e7c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8017e7e:	68bb      	ldr	r3, [r7, #8]
 8017e80:	699a      	ldr	r2, [r3, #24]
 8017e82:	187b      	adds	r3, r7, r1
 8017e84:	881b      	ldrh	r3, [r3, #0]
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d907      	bls.n	8017e9a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	699a      	ldr	r2, [r3, #24]
 8017e8e:	187b      	adds	r3, r7, r1
 8017e90:	881b      	ldrh	r3, [r3, #0]
 8017e92:	1ad2      	subs	r2, r2, r3
 8017e94:	68bb      	ldr	r3, [r7, #8]
 8017e96:	619a      	str	r2, [r3, #24]
 8017e98:	e002      	b.n	8017ea0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8017e9a:	68bb      	ldr	r3, [r7, #8]
 8017e9c:	2200      	movs	r2, #0
 8017e9e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	699b      	ldr	r3, [r3, #24]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d000      	beq.n	8017eaa <HAL_PCD_EP_DB_Transmit+0x72>
 8017ea8:	e0b5      	b.n	8018016 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	785b      	ldrb	r3, [r3, #1]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d125      	bne.n	8017efe <HAL_PCD_EP_DB_Transmit+0xc6>
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	2250      	movs	r2, #80	@ 0x50
 8017ebe:	5a9b      	ldrh	r3, [r3, r2]
 8017ec0:	b29b      	uxth	r3, r3
 8017ec2:	001a      	movs	r2, r3
 8017ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ec6:	189b      	adds	r3, r3, r2
 8017ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017eca:	68bb      	ldr	r3, [r7, #8]
 8017ecc:	781b      	ldrb	r3, [r3, #0]
 8017ece:	00da      	lsls	r2, r3, #3
 8017ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ed2:	18d3      	adds	r3, r2, r3
 8017ed4:	4ab6      	ldr	r2, [pc, #728]	@ (80181b0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8017ed6:	4694      	mov	ip, r2
 8017ed8:	4463      	add	r3, ip
 8017eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ede:	881b      	ldrh	r3, [r3, #0]
 8017ee0:	b29b      	uxth	r3, r3
 8017ee2:	059b      	lsls	r3, r3, #22
 8017ee4:	0d9b      	lsrs	r3, r3, #22
 8017ee6:	b29a      	uxth	r2, r3
 8017ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eea:	801a      	strh	r2, [r3, #0]
 8017eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eee:	881b      	ldrh	r3, [r3, #0]
 8017ef0:	b29b      	uxth	r3, r3
 8017ef2:	4ab0      	ldr	r2, [pc, #704]	@ (80181b4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8017ef4:	4313      	orrs	r3, r2
 8017ef6:	b29a      	uxth	r2, r3
 8017ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017efa:	801a      	strh	r2, [r3, #0]
 8017efc:	e01b      	b.n	8017f36 <HAL_PCD_EP_DB_Transmit+0xfe>
 8017efe:	68bb      	ldr	r3, [r7, #8]
 8017f00:	785b      	ldrb	r3, [r3, #1]
 8017f02:	2b01      	cmp	r3, #1
 8017f04:	d117      	bne.n	8017f36 <HAL_PCD_EP_DB_Transmit+0xfe>
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	2250      	movs	r2, #80	@ 0x50
 8017f12:	5a9b      	ldrh	r3, [r3, r2]
 8017f14:	b29b      	uxth	r3, r3
 8017f16:	001a      	movs	r2, r3
 8017f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f1a:	189b      	adds	r3, r3, r2
 8017f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8017f1e:	68bb      	ldr	r3, [r7, #8]
 8017f20:	781b      	ldrb	r3, [r3, #0]
 8017f22:	00da      	lsls	r2, r3, #3
 8017f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f26:	18d3      	adds	r3, r2, r3
 8017f28:	4aa1      	ldr	r2, [pc, #644]	@ (80181b0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8017f2a:	4694      	mov	ip, r2
 8017f2c:	4463      	add	r3, ip
 8017f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8017f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f32:	2200      	movs	r2, #0
 8017f34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8017f3c:	68bb      	ldr	r3, [r7, #8]
 8017f3e:	785b      	ldrb	r3, [r3, #1]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d125      	bne.n	8017f90 <HAL_PCD_EP_DB_Transmit+0x158>
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	61fb      	str	r3, [r7, #28]
 8017f4a:	68fb      	ldr	r3, [r7, #12]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	2250      	movs	r2, #80	@ 0x50
 8017f50:	5a9b      	ldrh	r3, [r3, r2]
 8017f52:	b29b      	uxth	r3, r3
 8017f54:	001a      	movs	r2, r3
 8017f56:	69fb      	ldr	r3, [r7, #28]
 8017f58:	189b      	adds	r3, r3, r2
 8017f5a:	61fb      	str	r3, [r7, #28]
 8017f5c:	68bb      	ldr	r3, [r7, #8]
 8017f5e:	781b      	ldrb	r3, [r3, #0]
 8017f60:	00da      	lsls	r2, r3, #3
 8017f62:	69fb      	ldr	r3, [r7, #28]
 8017f64:	18d3      	adds	r3, r2, r3
 8017f66:	4a94      	ldr	r2, [pc, #592]	@ (80181b8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8017f68:	4694      	mov	ip, r2
 8017f6a:	4463      	add	r3, ip
 8017f6c:	61bb      	str	r3, [r7, #24]
 8017f6e:	69bb      	ldr	r3, [r7, #24]
 8017f70:	881b      	ldrh	r3, [r3, #0]
 8017f72:	b29b      	uxth	r3, r3
 8017f74:	059b      	lsls	r3, r3, #22
 8017f76:	0d9b      	lsrs	r3, r3, #22
 8017f78:	b29a      	uxth	r2, r3
 8017f7a:	69bb      	ldr	r3, [r7, #24]
 8017f7c:	801a      	strh	r2, [r3, #0]
 8017f7e:	69bb      	ldr	r3, [r7, #24]
 8017f80:	881b      	ldrh	r3, [r3, #0]
 8017f82:	b29b      	uxth	r3, r3
 8017f84:	4a8b      	ldr	r2, [pc, #556]	@ (80181b4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8017f86:	4313      	orrs	r3, r2
 8017f88:	b29a      	uxth	r2, r3
 8017f8a:	69bb      	ldr	r3, [r7, #24]
 8017f8c:	801a      	strh	r2, [r3, #0]
 8017f8e:	e018      	b.n	8017fc2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	785b      	ldrb	r3, [r3, #1]
 8017f94:	2b01      	cmp	r3, #1
 8017f96:	d114      	bne.n	8017fc2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	2250      	movs	r2, #80	@ 0x50
 8017f9e:	5a9b      	ldrh	r3, [r3, r2]
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	001a      	movs	r2, r3
 8017fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fa6:	189b      	adds	r3, r3, r2
 8017fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	781b      	ldrb	r3, [r3, #0]
 8017fae:	00da      	lsls	r2, r3, #3
 8017fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fb2:	18d3      	adds	r3, r2, r3
 8017fb4:	4a80      	ldr	r2, [pc, #512]	@ (80181b8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8017fb6:	4694      	mov	ip, r2
 8017fb8:	4463      	add	r3, ip
 8017fba:	623b      	str	r3, [r7, #32]
 8017fbc:	6a3b      	ldr	r3, [r7, #32]
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8017fc2:	68bb      	ldr	r3, [r7, #8]
 8017fc4:	781a      	ldrb	r2, [r3, #0]
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	0011      	movs	r1, r2
 8017fca:	0018      	movs	r0, r3
 8017fcc:	f008 fd2e 	bl	8020a2c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8017fd0:	1dbb      	adds	r3, r7, #6
 8017fd2:	881a      	ldrh	r2, [r3, #0]
 8017fd4:	2380      	movs	r3, #128	@ 0x80
 8017fd6:	01db      	lsls	r3, r3, #7
 8017fd8:	4013      	ands	r3, r2
 8017fda:	d100      	bne.n	8017fde <HAL_PCD_EP_DB_Transmit+0x1a6>
 8017fdc:	e309      	b.n	80185f2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	001a      	movs	r2, r3
 8017fe4:	68bb      	ldr	r3, [r7, #8]
 8017fe6:	781b      	ldrb	r3, [r3, #0]
 8017fe8:	009b      	lsls	r3, r3, #2
 8017fea:	18d3      	adds	r3, r2, r3
 8017fec:	881b      	ldrh	r3, [r3, #0]
 8017fee:	b29a      	uxth	r2, r3
 8017ff0:	2016      	movs	r0, #22
 8017ff2:	183b      	adds	r3, r7, r0
 8017ff4:	4971      	ldr	r1, [pc, #452]	@ (80181bc <HAL_PCD_EP_DB_Transmit+0x384>)
 8017ff6:	400a      	ands	r2, r1
 8017ff8:	801a      	strh	r2, [r3, #0]
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	001a      	movs	r2, r3
 8018000:	68bb      	ldr	r3, [r7, #8]
 8018002:	781b      	ldrb	r3, [r3, #0]
 8018004:	009b      	lsls	r3, r3, #2
 8018006:	18d3      	adds	r3, r2, r3
 8018008:	183a      	adds	r2, r7, r0
 801800a:	8812      	ldrh	r2, [r2, #0]
 801800c:	496c      	ldr	r1, [pc, #432]	@ (80181c0 <HAL_PCD_EP_DB_Transmit+0x388>)
 801800e:	430a      	orrs	r2, r1
 8018010:	b292      	uxth	r2, r2
 8018012:	801a      	strh	r2, [r3, #0]
 8018014:	e2ed      	b.n	80185f2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8018016:	1dbb      	adds	r3, r7, #6
 8018018:	881a      	ldrh	r2, [r3, #0]
 801801a:	2380      	movs	r3, #128	@ 0x80
 801801c:	01db      	lsls	r3, r3, #7
 801801e:	4013      	ands	r3, r2
 8018020:	d01a      	beq.n	8018058 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	001a      	movs	r2, r3
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	781b      	ldrb	r3, [r3, #0]
 801802c:	009b      	lsls	r3, r3, #2
 801802e:	18d3      	adds	r3, r2, r3
 8018030:	881b      	ldrh	r3, [r3, #0]
 8018032:	b29a      	uxth	r2, r3
 8018034:	208a      	movs	r0, #138	@ 0x8a
 8018036:	183b      	adds	r3, r7, r0
 8018038:	4960      	ldr	r1, [pc, #384]	@ (80181bc <HAL_PCD_EP_DB_Transmit+0x384>)
 801803a:	400a      	ands	r2, r1
 801803c:	801a      	strh	r2, [r3, #0]
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	001a      	movs	r2, r3
 8018044:	68bb      	ldr	r3, [r7, #8]
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	009b      	lsls	r3, r3, #2
 801804a:	18d3      	adds	r3, r2, r3
 801804c:	183a      	adds	r2, r7, r0
 801804e:	8812      	ldrh	r2, [r2, #0]
 8018050:	495b      	ldr	r1, [pc, #364]	@ (80181c0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8018052:	430a      	orrs	r2, r1
 8018054:	b292      	uxth	r2, r2
 8018056:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	2224      	movs	r2, #36	@ 0x24
 801805c:	5c9b      	ldrb	r3, [r3, r2]
 801805e:	2b01      	cmp	r3, #1
 8018060:	d000      	beq.n	8018064 <HAL_PCD_EP_DB_Transmit+0x22c>
 8018062:	e2c6      	b.n	80185f2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8018064:	68bb      	ldr	r3, [r7, #8]
 8018066:	695a      	ldr	r2, [r3, #20]
 8018068:	2186      	movs	r1, #134	@ 0x86
 801806a:	187b      	adds	r3, r7, r1
 801806c:	881b      	ldrh	r3, [r3, #0]
 801806e:	18d2      	adds	r2, r2, r3
 8018070:	68bb      	ldr	r3, [r7, #8]
 8018072:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8018074:	68bb      	ldr	r3, [r7, #8]
 8018076:	69da      	ldr	r2, [r3, #28]
 8018078:	187b      	adds	r3, r7, r1
 801807a:	881b      	ldrh	r3, [r3, #0]
 801807c:	18d2      	adds	r2, r2, r3
 801807e:	68bb      	ldr	r3, [r7, #8]
 8018080:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	6a1a      	ldr	r2, [r3, #32]
 8018086:	68bb      	ldr	r3, [r7, #8]
 8018088:	691b      	ldr	r3, [r3, #16]
 801808a:	429a      	cmp	r2, r3
 801808c:	d30c      	bcc.n	80180a8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801808e:	68bb      	ldr	r3, [r7, #8]
 8018090:	691b      	ldr	r3, [r3, #16]
 8018092:	218c      	movs	r1, #140	@ 0x8c
 8018094:	187a      	adds	r2, r7, r1
 8018096:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8018098:	68bb      	ldr	r3, [r7, #8]
 801809a:	6a1a      	ldr	r2, [r3, #32]
 801809c:	187b      	adds	r3, r7, r1
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	1ad2      	subs	r2, r2, r3
 80180a2:	68bb      	ldr	r3, [r7, #8]
 80180a4:	621a      	str	r2, [r3, #32]
 80180a6:	e01a      	b.n	80180de <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	6a1b      	ldr	r3, [r3, #32]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d10a      	bne.n	80180c6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80180b0:	2386      	movs	r3, #134	@ 0x86
 80180b2:	18fb      	adds	r3, r7, r3
 80180b4:	881b      	ldrh	r3, [r3, #0]
 80180b6:	228c      	movs	r2, #140	@ 0x8c
 80180b8:	18ba      	adds	r2, r7, r2
 80180ba:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80180bc:	68bb      	ldr	r3, [r7, #8]
 80180be:	2224      	movs	r2, #36	@ 0x24
 80180c0:	2100      	movs	r1, #0
 80180c2:	5499      	strb	r1, [r3, r2]
 80180c4:	e00b      	b.n	80180de <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80180c6:	68bb      	ldr	r3, [r7, #8]
 80180c8:	2224      	movs	r2, #36	@ 0x24
 80180ca:	2100      	movs	r1, #0
 80180cc:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80180ce:	68bb      	ldr	r3, [r7, #8]
 80180d0:	6a1b      	ldr	r3, [r3, #32]
 80180d2:	228c      	movs	r2, #140	@ 0x8c
 80180d4:	18ba      	adds	r2, r7, r2
 80180d6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80180d8:	68bb      	ldr	r3, [r7, #8]
 80180da:	2200      	movs	r2, #0
 80180dc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80180de:	68bb      	ldr	r3, [r7, #8]
 80180e0:	785b      	ldrb	r3, [r3, #1]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d000      	beq.n	80180e8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80180e6:	e06d      	b.n	80181c4 <HAL_PCD_EP_DB_Transmit+0x38c>
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	2250      	movs	r2, #80	@ 0x50
 80180f4:	5a9b      	ldrh	r3, [r3, r2]
 80180f6:	b29b      	uxth	r3, r3
 80180f8:	001a      	movs	r2, r3
 80180fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180fc:	189b      	adds	r3, r3, r2
 80180fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018100:	68bb      	ldr	r3, [r7, #8]
 8018102:	781b      	ldrb	r3, [r3, #0]
 8018104:	00da      	lsls	r2, r3, #3
 8018106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018108:	18d3      	adds	r3, r2, r3
 801810a:	4a29      	ldr	r2, [pc, #164]	@ (80181b0 <HAL_PCD_EP_DB_Transmit+0x378>)
 801810c:	4694      	mov	ip, r2
 801810e:	4463      	add	r3, ip
 8018110:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018114:	881b      	ldrh	r3, [r3, #0]
 8018116:	b29b      	uxth	r3, r3
 8018118:	059b      	lsls	r3, r3, #22
 801811a:	0d9b      	lsrs	r3, r3, #22
 801811c:	b29a      	uxth	r2, r3
 801811e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018120:	801a      	strh	r2, [r3, #0]
 8018122:	228c      	movs	r2, #140	@ 0x8c
 8018124:	18bb      	adds	r3, r7, r2
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	2b3e      	cmp	r3, #62	@ 0x3e
 801812a:	d91a      	bls.n	8018162 <HAL_PCD_EP_DB_Transmit+0x32a>
 801812c:	18bb      	adds	r3, r7, r2
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	095b      	lsrs	r3, r3, #5
 8018132:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018134:	18bb      	adds	r3, r7, r2
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	221f      	movs	r2, #31
 801813a:	4013      	ands	r3, r2
 801813c:	d102      	bne.n	8018144 <HAL_PCD_EP_DB_Transmit+0x30c>
 801813e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018140:	3b01      	subs	r3, #1
 8018142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018146:	881b      	ldrh	r3, [r3, #0]
 8018148:	b29a      	uxth	r2, r3
 801814a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801814c:	b29b      	uxth	r3, r3
 801814e:	029b      	lsls	r3, r3, #10
 8018150:	b29b      	uxth	r3, r3
 8018152:	4313      	orrs	r3, r2
 8018154:	b29b      	uxth	r3, r3
 8018156:	4a17      	ldr	r2, [pc, #92]	@ (80181b4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8018158:	4313      	orrs	r3, r2
 801815a:	b29a      	uxth	r2, r3
 801815c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801815e:	801a      	strh	r2, [r3, #0]
 8018160:	e04f      	b.n	8018202 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8018162:	238c      	movs	r3, #140	@ 0x8c
 8018164:	18fb      	adds	r3, r7, r3
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d108      	bne.n	801817e <HAL_PCD_EP_DB_Transmit+0x346>
 801816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801816e:	881b      	ldrh	r3, [r3, #0]
 8018170:	b29b      	uxth	r3, r3
 8018172:	4a10      	ldr	r2, [pc, #64]	@ (80181b4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8018174:	4313      	orrs	r3, r2
 8018176:	b29a      	uxth	r2, r3
 8018178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801817a:	801a      	strh	r2, [r3, #0]
 801817c:	e041      	b.n	8018202 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801817e:	228c      	movs	r2, #140	@ 0x8c
 8018180:	18bb      	adds	r3, r7, r2
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	085b      	lsrs	r3, r3, #1
 8018186:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018188:	18bb      	adds	r3, r7, r2
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	2201      	movs	r2, #1
 801818e:	4013      	ands	r3, r2
 8018190:	d002      	beq.n	8018198 <HAL_PCD_EP_DB_Transmit+0x360>
 8018192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018194:	3301      	adds	r3, #1
 8018196:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801819a:	881b      	ldrh	r3, [r3, #0]
 801819c:	b29a      	uxth	r2, r3
 801819e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80181a0:	b29b      	uxth	r3, r3
 80181a2:	029b      	lsls	r3, r3, #10
 80181a4:	b29b      	uxth	r3, r3
 80181a6:	4313      	orrs	r3, r2
 80181a8:	b29a      	uxth	r2, r3
 80181aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181ac:	801a      	strh	r2, [r3, #0]
 80181ae:	e028      	b.n	8018202 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80181b0:	00000402 	.word	0x00000402
 80181b4:	ffff8000 	.word	0xffff8000
 80181b8:	00000406 	.word	0x00000406
 80181bc:	ffff8f8f 	.word	0xffff8f8f
 80181c0:	ffffc080 	.word	0xffffc080
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	785b      	ldrb	r3, [r3, #1]
 80181c8:	2b01      	cmp	r3, #1
 80181ca:	d11a      	bne.n	8018202 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	2250      	movs	r2, #80	@ 0x50
 80181d8:	5a9b      	ldrh	r3, [r3, r2]
 80181da:	b29b      	uxth	r3, r3
 80181dc:	001a      	movs	r2, r3
 80181de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181e0:	189b      	adds	r3, r3, r2
 80181e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80181e4:	68bb      	ldr	r3, [r7, #8]
 80181e6:	781b      	ldrb	r3, [r3, #0]
 80181e8:	00da      	lsls	r2, r3, #3
 80181ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181ec:	18d3      	adds	r3, r2, r3
 80181ee:	4adb      	ldr	r2, [pc, #876]	@ (801855c <HAL_PCD_EP_DB_Transmit+0x724>)
 80181f0:	4694      	mov	ip, r2
 80181f2:	4463      	add	r3, ip
 80181f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80181f6:	238c      	movs	r3, #140	@ 0x8c
 80181f8:	18fb      	adds	r3, r7, r3
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	b29a      	uxth	r2, r3
 80181fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018200:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	6818      	ldr	r0, [r3, #0]
 8018206:	68bb      	ldr	r3, [r7, #8]
 8018208:	6959      	ldr	r1, [r3, #20]
 801820a:	68bb      	ldr	r3, [r7, #8]
 801820c:	891a      	ldrh	r2, [r3, #8]
 801820e:	238c      	movs	r3, #140	@ 0x8c
 8018210:	18fb      	adds	r3, r7, r3
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	b29b      	uxth	r3, r3
 8018216:	f006 fb85 	bl	801e924 <USB_WritePMA>
 801821a:	e1ea      	b.n	80185f2 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2250      	movs	r2, #80	@ 0x50
 8018222:	5a9b      	ldrh	r3, [r3, r2]
 8018224:	b29b      	uxth	r3, r3
 8018226:	001a      	movs	r2, r3
 8018228:	68bb      	ldr	r3, [r7, #8]
 801822a:	781b      	ldrb	r3, [r3, #0]
 801822c:	00db      	lsls	r3, r3, #3
 801822e:	18d2      	adds	r2, r2, r3
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	18d3      	adds	r3, r2, r3
 8018236:	4aca      	ldr	r2, [pc, #808]	@ (8018560 <HAL_PCD_EP_DB_Transmit+0x728>)
 8018238:	4694      	mov	ip, r2
 801823a:	4463      	add	r3, ip
 801823c:	881a      	ldrh	r2, [r3, #0]
 801823e:	2186      	movs	r1, #134	@ 0x86
 8018240:	187b      	adds	r3, r7, r1
 8018242:	0592      	lsls	r2, r2, #22
 8018244:	0d92      	lsrs	r2, r2, #22
 8018246:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8018248:	68bb      	ldr	r3, [r7, #8]
 801824a:	699a      	ldr	r2, [r3, #24]
 801824c:	187b      	adds	r3, r7, r1
 801824e:	881b      	ldrh	r3, [r3, #0]
 8018250:	429a      	cmp	r2, r3
 8018252:	d307      	bcc.n	8018264 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	699a      	ldr	r2, [r3, #24]
 8018258:	187b      	adds	r3, r7, r1
 801825a:	881b      	ldrh	r3, [r3, #0]
 801825c:	1ad2      	subs	r2, r2, r3
 801825e:	68bb      	ldr	r3, [r7, #8]
 8018260:	619a      	str	r2, [r3, #24]
 8018262:	e002      	b.n	801826a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8018264:	68bb      	ldr	r3, [r7, #8]
 8018266:	2200      	movs	r2, #0
 8018268:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801826a:	68bb      	ldr	r3, [r7, #8]
 801826c:	699b      	ldr	r3, [r3, #24]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d000      	beq.n	8018274 <HAL_PCD_EP_DB_Transmit+0x43c>
 8018272:	e0bb      	b.n	80183ec <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8018274:	68bb      	ldr	r3, [r7, #8]
 8018276:	785b      	ldrb	r3, [r3, #1]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d125      	bne.n	80182c8 <HAL_PCD_EP_DB_Transmit+0x490>
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	2250      	movs	r2, #80	@ 0x50
 8018288:	5a9b      	ldrh	r3, [r3, r2]
 801828a:	b29b      	uxth	r3, r3
 801828c:	001a      	movs	r2, r3
 801828e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018290:	189b      	adds	r3, r3, r2
 8018292:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018294:	68bb      	ldr	r3, [r7, #8]
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	00da      	lsls	r2, r3, #3
 801829a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801829c:	18d3      	adds	r3, r2, r3
 801829e:	4aaf      	ldr	r2, [pc, #700]	@ (801855c <HAL_PCD_EP_DB_Transmit+0x724>)
 80182a0:	4694      	mov	ip, r2
 80182a2:	4463      	add	r3, ip
 80182a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80182a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80182a8:	881b      	ldrh	r3, [r3, #0]
 80182aa:	b29b      	uxth	r3, r3
 80182ac:	059b      	lsls	r3, r3, #22
 80182ae:	0d9b      	lsrs	r3, r3, #22
 80182b0:	b29a      	uxth	r2, r3
 80182b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80182b4:	801a      	strh	r2, [r3, #0]
 80182b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80182b8:	881b      	ldrh	r3, [r3, #0]
 80182ba:	b29b      	uxth	r3, r3
 80182bc:	4aa9      	ldr	r2, [pc, #676]	@ (8018564 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80182be:	4313      	orrs	r3, r2
 80182c0:	b29a      	uxth	r2, r3
 80182c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80182c4:	801a      	strh	r2, [r3, #0]
 80182c6:	e01b      	b.n	8018300 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80182c8:	68bb      	ldr	r3, [r7, #8]
 80182ca:	785b      	ldrb	r3, [r3, #1]
 80182cc:	2b01      	cmp	r3, #1
 80182ce:	d117      	bne.n	8018300 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	2250      	movs	r2, #80	@ 0x50
 80182dc:	5a9b      	ldrh	r3, [r3, r2]
 80182de:	b29b      	uxth	r3, r3
 80182e0:	001a      	movs	r2, r3
 80182e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80182e4:	189b      	adds	r3, r3, r2
 80182e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80182e8:	68bb      	ldr	r3, [r7, #8]
 80182ea:	781b      	ldrb	r3, [r3, #0]
 80182ec:	00da      	lsls	r2, r3, #3
 80182ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80182f0:	18d3      	adds	r3, r2, r3
 80182f2:	4a9a      	ldr	r2, [pc, #616]	@ (801855c <HAL_PCD_EP_DB_Transmit+0x724>)
 80182f4:	4694      	mov	ip, r2
 80182f6:	4463      	add	r3, ip
 80182f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80182fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80182fc:	2200      	movs	r2, #0
 80182fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	677b      	str	r3, [r7, #116]	@ 0x74
 8018306:	68bb      	ldr	r3, [r7, #8]
 8018308:	785b      	ldrb	r3, [r3, #1]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d12b      	bne.n	8018366 <HAL_PCD_EP_DB_Transmit+0x52e>
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	2250      	movs	r2, #80	@ 0x50
 801831a:	5a9b      	ldrh	r3, [r3, r2]
 801831c:	b29b      	uxth	r3, r3
 801831e:	001a      	movs	r2, r3
 8018320:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018322:	189b      	adds	r3, r3, r2
 8018324:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	781b      	ldrb	r3, [r3, #0]
 801832a:	00da      	lsls	r2, r3, #3
 801832c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801832e:	18d3      	adds	r3, r2, r3
 8018330:	4a8b      	ldr	r2, [pc, #556]	@ (8018560 <HAL_PCD_EP_DB_Transmit+0x728>)
 8018332:	4694      	mov	ip, r2
 8018334:	4463      	add	r3, ip
 8018336:	2180      	movs	r1, #128	@ 0x80
 8018338:	187a      	adds	r2, r7, r1
 801833a:	6013      	str	r3, [r2, #0]
 801833c:	187b      	adds	r3, r7, r1
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	881b      	ldrh	r3, [r3, #0]
 8018342:	b29b      	uxth	r3, r3
 8018344:	059b      	lsls	r3, r3, #22
 8018346:	0d9b      	lsrs	r3, r3, #22
 8018348:	b29a      	uxth	r2, r3
 801834a:	187b      	adds	r3, r7, r1
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	801a      	strh	r2, [r3, #0]
 8018350:	187b      	adds	r3, r7, r1
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	881b      	ldrh	r3, [r3, #0]
 8018356:	b29b      	uxth	r3, r3
 8018358:	4a82      	ldr	r2, [pc, #520]	@ (8018564 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801835a:	4313      	orrs	r3, r2
 801835c:	b29a      	uxth	r2, r3
 801835e:	187b      	adds	r3, r7, r1
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	801a      	strh	r2, [r3, #0]
 8018364:	e018      	b.n	8018398 <HAL_PCD_EP_DB_Transmit+0x560>
 8018366:	68bb      	ldr	r3, [r7, #8]
 8018368:	785b      	ldrb	r3, [r3, #1]
 801836a:	2b01      	cmp	r3, #1
 801836c:	d114      	bne.n	8018398 <HAL_PCD_EP_DB_Transmit+0x560>
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	2250      	movs	r2, #80	@ 0x50
 8018374:	5a9b      	ldrh	r3, [r3, r2]
 8018376:	b29b      	uxth	r3, r3
 8018378:	001a      	movs	r2, r3
 801837a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801837c:	189b      	adds	r3, r3, r2
 801837e:	677b      	str	r3, [r7, #116]	@ 0x74
 8018380:	68bb      	ldr	r3, [r7, #8]
 8018382:	781b      	ldrb	r3, [r3, #0]
 8018384:	00da      	lsls	r2, r3, #3
 8018386:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018388:	18d3      	adds	r3, r2, r3
 801838a:	4a75      	ldr	r2, [pc, #468]	@ (8018560 <HAL_PCD_EP_DB_Transmit+0x728>)
 801838c:	4694      	mov	ip, r2
 801838e:	4463      	add	r3, ip
 8018390:	673b      	str	r3, [r7, #112]	@ 0x70
 8018392:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018394:	2200      	movs	r2, #0
 8018396:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8018398:	68bb      	ldr	r3, [r7, #8]
 801839a:	781a      	ldrb	r2, [r3, #0]
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	0011      	movs	r1, r2
 80183a0:	0018      	movs	r0, r3
 80183a2:	f008 fb43 	bl	8020a2c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80183a6:	1dbb      	adds	r3, r7, #6
 80183a8:	881a      	ldrh	r2, [r3, #0]
 80183aa:	2380      	movs	r3, #128	@ 0x80
 80183ac:	01db      	lsls	r3, r3, #7
 80183ae:	4013      	ands	r3, r2
 80183b0:	d000      	beq.n	80183b4 <HAL_PCD_EP_DB_Transmit+0x57c>
 80183b2:	e11e      	b.n	80185f2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	001a      	movs	r2, r3
 80183ba:	68bb      	ldr	r3, [r7, #8]
 80183bc:	781b      	ldrb	r3, [r3, #0]
 80183be:	009b      	lsls	r3, r3, #2
 80183c0:	18d3      	adds	r3, r2, r3
 80183c2:	881b      	ldrh	r3, [r3, #0]
 80183c4:	b29a      	uxth	r2, r3
 80183c6:	2088      	movs	r0, #136	@ 0x88
 80183c8:	183b      	adds	r3, r7, r0
 80183ca:	4967      	ldr	r1, [pc, #412]	@ (8018568 <HAL_PCD_EP_DB_Transmit+0x730>)
 80183cc:	400a      	ands	r2, r1
 80183ce:	801a      	strh	r2, [r3, #0]
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	001a      	movs	r2, r3
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	009b      	lsls	r3, r3, #2
 80183dc:	18d3      	adds	r3, r2, r3
 80183de:	183a      	adds	r2, r7, r0
 80183e0:	8812      	ldrh	r2, [r2, #0]
 80183e2:	4962      	ldr	r1, [pc, #392]	@ (801856c <HAL_PCD_EP_DB_Transmit+0x734>)
 80183e4:	430a      	orrs	r2, r1
 80183e6:	b292      	uxth	r2, r2
 80183e8:	801a      	strh	r2, [r3, #0]
 80183ea:	e102      	b.n	80185f2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80183ec:	1dbb      	adds	r3, r7, #6
 80183ee:	881a      	ldrh	r2, [r3, #0]
 80183f0:	2380      	movs	r3, #128	@ 0x80
 80183f2:	01db      	lsls	r3, r3, #7
 80183f4:	4013      	ands	r3, r2
 80183f6:	d11a      	bne.n	801842e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	681b      	ldr	r3, [r3, #0]
 80183fc:	001a      	movs	r2, r3
 80183fe:	68bb      	ldr	r3, [r7, #8]
 8018400:	781b      	ldrb	r3, [r3, #0]
 8018402:	009b      	lsls	r3, r3, #2
 8018404:	18d3      	adds	r3, r2, r3
 8018406:	881b      	ldrh	r3, [r3, #0]
 8018408:	b29a      	uxth	r2, r3
 801840a:	204e      	movs	r0, #78	@ 0x4e
 801840c:	183b      	adds	r3, r7, r0
 801840e:	4956      	ldr	r1, [pc, #344]	@ (8018568 <HAL_PCD_EP_DB_Transmit+0x730>)
 8018410:	400a      	ands	r2, r1
 8018412:	801a      	strh	r2, [r3, #0]
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	001a      	movs	r2, r3
 801841a:	68bb      	ldr	r3, [r7, #8]
 801841c:	781b      	ldrb	r3, [r3, #0]
 801841e:	009b      	lsls	r3, r3, #2
 8018420:	18d3      	adds	r3, r2, r3
 8018422:	183a      	adds	r2, r7, r0
 8018424:	8812      	ldrh	r2, [r2, #0]
 8018426:	4951      	ldr	r1, [pc, #324]	@ (801856c <HAL_PCD_EP_DB_Transmit+0x734>)
 8018428:	430a      	orrs	r2, r1
 801842a:	b292      	uxth	r2, r2
 801842c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801842e:	68bb      	ldr	r3, [r7, #8]
 8018430:	2224      	movs	r2, #36	@ 0x24
 8018432:	5c9b      	ldrb	r3, [r3, r2]
 8018434:	2b01      	cmp	r3, #1
 8018436:	d000      	beq.n	801843a <HAL_PCD_EP_DB_Transmit+0x602>
 8018438:	e0db      	b.n	80185f2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801843a:	68bb      	ldr	r3, [r7, #8]
 801843c:	695a      	ldr	r2, [r3, #20]
 801843e:	2186      	movs	r1, #134	@ 0x86
 8018440:	187b      	adds	r3, r7, r1
 8018442:	881b      	ldrh	r3, [r3, #0]
 8018444:	18d2      	adds	r2, r2, r3
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801844a:	68bb      	ldr	r3, [r7, #8]
 801844c:	69da      	ldr	r2, [r3, #28]
 801844e:	187b      	adds	r3, r7, r1
 8018450:	881b      	ldrh	r3, [r3, #0]
 8018452:	18d2      	adds	r2, r2, r3
 8018454:	68bb      	ldr	r3, [r7, #8]
 8018456:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	6a1a      	ldr	r2, [r3, #32]
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	691b      	ldr	r3, [r3, #16]
 8018460:	429a      	cmp	r2, r3
 8018462:	d30c      	bcc.n	801847e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8018464:	68bb      	ldr	r3, [r7, #8]
 8018466:	691b      	ldr	r3, [r3, #16]
 8018468:	218c      	movs	r1, #140	@ 0x8c
 801846a:	187a      	adds	r2, r7, r1
 801846c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801846e:	68bb      	ldr	r3, [r7, #8]
 8018470:	6a1a      	ldr	r2, [r3, #32]
 8018472:	187b      	adds	r3, r7, r1
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	1ad2      	subs	r2, r2, r3
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	621a      	str	r2, [r3, #32]
 801847c:	e01a      	b.n	80184b4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801847e:	68bb      	ldr	r3, [r7, #8]
 8018480:	6a1b      	ldr	r3, [r3, #32]
 8018482:	2b00      	cmp	r3, #0
 8018484:	d10a      	bne.n	801849c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8018486:	2386      	movs	r3, #134	@ 0x86
 8018488:	18fb      	adds	r3, r7, r3
 801848a:	881b      	ldrh	r3, [r3, #0]
 801848c:	228c      	movs	r2, #140	@ 0x8c
 801848e:	18ba      	adds	r2, r7, r2
 8018490:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8018492:	68bb      	ldr	r3, [r7, #8]
 8018494:	2224      	movs	r2, #36	@ 0x24
 8018496:	2100      	movs	r1, #0
 8018498:	5499      	strb	r1, [r3, r2]
 801849a:	e00b      	b.n	80184b4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801849c:	68bb      	ldr	r3, [r7, #8]
 801849e:	6a1b      	ldr	r3, [r3, #32]
 80184a0:	228c      	movs	r2, #140	@ 0x8c
 80184a2:	18ba      	adds	r2, r7, r2
 80184a4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80184a6:	68bb      	ldr	r3, [r7, #8]
 80184a8:	2200      	movs	r2, #0
 80184aa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	2224      	movs	r2, #36	@ 0x24
 80184b0:	2100      	movs	r1, #0
 80184b2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80184ba:	68bb      	ldr	r3, [r7, #8]
 80184bc:	785b      	ldrb	r3, [r3, #1]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d000      	beq.n	80184c4 <HAL_PCD_EP_DB_Transmit+0x68c>
 80184c2:	e06e      	b.n	80185a2 <HAL_PCD_EP_DB_Transmit+0x76a>
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	2250      	movs	r2, #80	@ 0x50
 80184d0:	5a9b      	ldrh	r3, [r3, r2]
 80184d2:	b29b      	uxth	r3, r3
 80184d4:	001a      	movs	r2, r3
 80184d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80184d8:	189b      	adds	r3, r3, r2
 80184da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80184dc:	68bb      	ldr	r3, [r7, #8]
 80184de:	781b      	ldrb	r3, [r3, #0]
 80184e0:	00da      	lsls	r2, r3, #3
 80184e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80184e4:	18d3      	adds	r3, r2, r3
 80184e6:	4a1e      	ldr	r2, [pc, #120]	@ (8018560 <HAL_PCD_EP_DB_Transmit+0x728>)
 80184e8:	4694      	mov	ip, r2
 80184ea:	4463      	add	r3, ip
 80184ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80184ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184f0:	881b      	ldrh	r3, [r3, #0]
 80184f2:	b29b      	uxth	r3, r3
 80184f4:	059b      	lsls	r3, r3, #22
 80184f6:	0d9b      	lsrs	r3, r3, #22
 80184f8:	b29a      	uxth	r2, r3
 80184fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80184fc:	801a      	strh	r2, [r3, #0]
 80184fe:	228c      	movs	r2, #140	@ 0x8c
 8018500:	18bb      	adds	r3, r7, r2
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	2b3e      	cmp	r3, #62	@ 0x3e
 8018506:	d91a      	bls.n	801853e <HAL_PCD_EP_DB_Transmit+0x706>
 8018508:	18bb      	adds	r3, r7, r2
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	095b      	lsrs	r3, r3, #5
 801850e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018510:	18bb      	adds	r3, r7, r2
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	221f      	movs	r2, #31
 8018516:	4013      	ands	r3, r2
 8018518:	d102      	bne.n	8018520 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801851a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801851c:	3b01      	subs	r3, #1
 801851e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018520:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018522:	881b      	ldrh	r3, [r3, #0]
 8018524:	b29a      	uxth	r2, r3
 8018526:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018528:	b29b      	uxth	r3, r3
 801852a:	029b      	lsls	r3, r3, #10
 801852c:	b29b      	uxth	r3, r3
 801852e:	4313      	orrs	r3, r2
 8018530:	b29b      	uxth	r3, r3
 8018532:	4a0c      	ldr	r2, [pc, #48]	@ (8018564 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8018534:	4313      	orrs	r3, r2
 8018536:	b29a      	uxth	r2, r3
 8018538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801853a:	801a      	strh	r2, [r3, #0]
 801853c:	e04d      	b.n	80185da <HAL_PCD_EP_DB_Transmit+0x7a2>
 801853e:	238c      	movs	r3, #140	@ 0x8c
 8018540:	18fb      	adds	r3, r7, r3
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d113      	bne.n	8018570 <HAL_PCD_EP_DB_Transmit+0x738>
 8018548:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801854a:	881b      	ldrh	r3, [r3, #0]
 801854c:	b29b      	uxth	r3, r3
 801854e:	4a05      	ldr	r2, [pc, #20]	@ (8018564 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8018550:	4313      	orrs	r3, r2
 8018552:	b29a      	uxth	r2, r3
 8018554:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018556:	801a      	strh	r2, [r3, #0]
 8018558:	e03f      	b.n	80185da <HAL_PCD_EP_DB_Transmit+0x7a2>
 801855a:	46c0      	nop			@ (mov r8, r8)
 801855c:	00000402 	.word	0x00000402
 8018560:	00000406 	.word	0x00000406
 8018564:	ffff8000 	.word	0xffff8000
 8018568:	ffff8f8f 	.word	0xffff8f8f
 801856c:	ffffc080 	.word	0xffffc080
 8018570:	228c      	movs	r2, #140	@ 0x8c
 8018572:	18bb      	adds	r3, r7, r2
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	085b      	lsrs	r3, r3, #1
 8018578:	66bb      	str	r3, [r7, #104]	@ 0x68
 801857a:	18bb      	adds	r3, r7, r2
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	2201      	movs	r2, #1
 8018580:	4013      	ands	r3, r2
 8018582:	d002      	beq.n	801858a <HAL_PCD_EP_DB_Transmit+0x752>
 8018584:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018586:	3301      	adds	r3, #1
 8018588:	66bb      	str	r3, [r7, #104]	@ 0x68
 801858a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801858c:	881b      	ldrh	r3, [r3, #0]
 801858e:	b29a      	uxth	r2, r3
 8018590:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018592:	b29b      	uxth	r3, r3
 8018594:	029b      	lsls	r3, r3, #10
 8018596:	b29b      	uxth	r3, r3
 8018598:	4313      	orrs	r3, r2
 801859a:	b29a      	uxth	r2, r3
 801859c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801859e:	801a      	strh	r2, [r3, #0]
 80185a0:	e01b      	b.n	80185da <HAL_PCD_EP_DB_Transmit+0x7a2>
 80185a2:	68bb      	ldr	r3, [r7, #8]
 80185a4:	785b      	ldrb	r3, [r3, #1]
 80185a6:	2b01      	cmp	r3, #1
 80185a8:	d117      	bne.n	80185da <HAL_PCD_EP_DB_Transmit+0x7a2>
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	2250      	movs	r2, #80	@ 0x50
 80185b0:	5a9b      	ldrh	r3, [r3, r2]
 80185b2:	b29b      	uxth	r3, r3
 80185b4:	001a      	movs	r2, r3
 80185b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80185b8:	189b      	adds	r3, r3, r2
 80185ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80185bc:	68bb      	ldr	r3, [r7, #8]
 80185be:	781b      	ldrb	r3, [r3, #0]
 80185c0:	00da      	lsls	r2, r3, #3
 80185c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80185c4:	18d3      	adds	r3, r2, r3
 80185c6:	4a21      	ldr	r2, [pc, #132]	@ (801864c <HAL_PCD_EP_DB_Transmit+0x814>)
 80185c8:	4694      	mov	ip, r2
 80185ca:	4463      	add	r3, ip
 80185cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80185ce:	238c      	movs	r3, #140	@ 0x8c
 80185d0:	18fb      	adds	r3, r7, r3
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	b29a      	uxth	r2, r3
 80185d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185d8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	6818      	ldr	r0, [r3, #0]
 80185de:	68bb      	ldr	r3, [r7, #8]
 80185e0:	6959      	ldr	r1, [r3, #20]
 80185e2:	68bb      	ldr	r3, [r7, #8]
 80185e4:	895a      	ldrh	r2, [r3, #10]
 80185e6:	238c      	movs	r3, #140	@ 0x8c
 80185e8:	18fb      	adds	r3, r7, r3
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	b29b      	uxth	r3, r3
 80185ee:	f006 f999 	bl	801e924 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	001a      	movs	r2, r3
 80185f8:	68bb      	ldr	r3, [r7, #8]
 80185fa:	781b      	ldrb	r3, [r3, #0]
 80185fc:	009b      	lsls	r3, r3, #2
 80185fe:	18d3      	adds	r3, r2, r3
 8018600:	881b      	ldrh	r3, [r3, #0]
 8018602:	b29a      	uxth	r2, r3
 8018604:	2014      	movs	r0, #20
 8018606:	183b      	adds	r3, r7, r0
 8018608:	4911      	ldr	r1, [pc, #68]	@ (8018650 <HAL_PCD_EP_DB_Transmit+0x818>)
 801860a:	400a      	ands	r2, r1
 801860c:	801a      	strh	r2, [r3, #0]
 801860e:	183b      	adds	r3, r7, r0
 8018610:	183a      	adds	r2, r7, r0
 8018612:	8812      	ldrh	r2, [r2, #0]
 8018614:	2110      	movs	r1, #16
 8018616:	404a      	eors	r2, r1
 8018618:	801a      	strh	r2, [r3, #0]
 801861a:	183b      	adds	r3, r7, r0
 801861c:	183a      	adds	r2, r7, r0
 801861e:	8812      	ldrh	r2, [r2, #0]
 8018620:	2120      	movs	r1, #32
 8018622:	404a      	eors	r2, r1
 8018624:	801a      	strh	r2, [r3, #0]
 8018626:	68fb      	ldr	r3, [r7, #12]
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	001a      	movs	r2, r3
 801862c:	68bb      	ldr	r3, [r7, #8]
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	009b      	lsls	r3, r3, #2
 8018632:	18d3      	adds	r3, r2, r3
 8018634:	183a      	adds	r2, r7, r0
 8018636:	8812      	ldrh	r2, [r2, #0]
 8018638:	4906      	ldr	r1, [pc, #24]	@ (8018654 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801863a:	430a      	orrs	r2, r1
 801863c:	b292      	uxth	r2, r2
 801863e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8018640:	2300      	movs	r3, #0
}
 8018642:	0018      	movs	r0, r3
 8018644:	46bd      	mov	sp, r7
 8018646:	b024      	add	sp, #144	@ 0x90
 8018648:	bd80      	pop	{r7, pc}
 801864a:	46c0      	nop			@ (mov r8, r8)
 801864c:	00000406 	.word	0x00000406
 8018650:	ffff8fbf 	.word	0xffff8fbf
 8018654:	ffff8080 	.word	0xffff8080

08018658 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8018658:	b590      	push	{r4, r7, lr}
 801865a:	b087      	sub	sp, #28
 801865c:	af00      	add	r7, sp, #0
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	0008      	movs	r0, r1
 8018662:	0011      	movs	r1, r2
 8018664:	607b      	str	r3, [r7, #4]
 8018666:	240a      	movs	r4, #10
 8018668:	193b      	adds	r3, r7, r4
 801866a:	1c02      	adds	r2, r0, #0
 801866c:	801a      	strh	r2, [r3, #0]
 801866e:	2308      	movs	r3, #8
 8018670:	18fb      	adds	r3, r7, r3
 8018672:	1c0a      	adds	r2, r1, #0
 8018674:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8018676:	0021      	movs	r1, r4
 8018678:	187b      	adds	r3, r7, r1
 801867a:	881b      	ldrh	r3, [r3, #0]
 801867c:	2280      	movs	r2, #128	@ 0x80
 801867e:	4013      	ands	r3, r2
 8018680:	b29b      	uxth	r3, r3
 8018682:	2b00      	cmp	r3, #0
 8018684:	d00c      	beq.n	80186a0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018686:	187b      	adds	r3, r7, r1
 8018688:	881b      	ldrh	r3, [r3, #0]
 801868a:	2207      	movs	r2, #7
 801868c:	4013      	ands	r3, r2
 801868e:	1c5a      	adds	r2, r3, #1
 8018690:	0013      	movs	r3, r2
 8018692:	009b      	lsls	r3, r3, #2
 8018694:	189b      	adds	r3, r3, r2
 8018696:	00db      	lsls	r3, r3, #3
 8018698:	68fa      	ldr	r2, [r7, #12]
 801869a:	18d3      	adds	r3, r2, r3
 801869c:	617b      	str	r3, [r7, #20]
 801869e:	e00b      	b.n	80186b8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80186a0:	230a      	movs	r3, #10
 80186a2:	18fb      	adds	r3, r7, r3
 80186a4:	881a      	ldrh	r2, [r3, #0]
 80186a6:	0013      	movs	r3, r2
 80186a8:	009b      	lsls	r3, r3, #2
 80186aa:	189b      	adds	r3, r3, r2
 80186ac:	00db      	lsls	r3, r3, #3
 80186ae:	3369      	adds	r3, #105	@ 0x69
 80186b0:	33ff      	adds	r3, #255	@ 0xff
 80186b2:	68fa      	ldr	r2, [r7, #12]
 80186b4:	18d3      	adds	r3, r2, r3
 80186b6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80186b8:	2308      	movs	r3, #8
 80186ba:	18fb      	adds	r3, r7, r3
 80186bc:	881b      	ldrh	r3, [r3, #0]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d107      	bne.n	80186d2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80186c2:	697b      	ldr	r3, [r7, #20]
 80186c4:	2200      	movs	r2, #0
 80186c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	b29a      	uxth	r2, r3
 80186cc:	697b      	ldr	r3, [r7, #20]
 80186ce:	80da      	strh	r2, [r3, #6]
 80186d0:	e00b      	b.n	80186ea <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80186d2:	697b      	ldr	r3, [r7, #20]
 80186d4:	2201      	movs	r2, #1
 80186d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	b29a      	uxth	r2, r3
 80186dc:	697b      	ldr	r3, [r7, #20]
 80186de:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	0c1b      	lsrs	r3, r3, #16
 80186e4:	b29a      	uxth	r2, r3
 80186e6:	697b      	ldr	r3, [r7, #20]
 80186e8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80186ea:	2300      	movs	r3, #0
}
 80186ec:	0018      	movs	r0, r3
 80186ee:	46bd      	mov	sp, r7
 80186f0:	b007      	add	sp, #28
 80186f2:	bd90      	pop	{r4, r7, pc}

080186f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b084      	sub	sp, #16
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8018702:	687a      	ldr	r2, [r7, #4]
 8018704:	23ba      	movs	r3, #186	@ 0xba
 8018706:	009b      	lsls	r3, r3, #2
 8018708:	2101      	movs	r1, #1
 801870a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801870c:	687a      	ldr	r2, [r7, #4]
 801870e:	23b8      	movs	r3, #184	@ 0xb8
 8018710:	009b      	lsls	r3, r3, #2
 8018712:	2100      	movs	r1, #0
 8018714:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	2254      	movs	r2, #84	@ 0x54
 801871a:	5a9b      	ldrh	r3, [r3, r2]
 801871c:	b29b      	uxth	r3, r3
 801871e:	2201      	movs	r2, #1
 8018720:	4313      	orrs	r3, r2
 8018722:	b299      	uxth	r1, r3
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	2254      	movs	r2, #84	@ 0x54
 8018728:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	2254      	movs	r2, #84	@ 0x54
 801872e:	5a9b      	ldrh	r3, [r3, r2]
 8018730:	b29b      	uxth	r3, r3
 8018732:	2202      	movs	r2, #2
 8018734:	4313      	orrs	r3, r2
 8018736:	b299      	uxth	r1, r3
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	2254      	movs	r2, #84	@ 0x54
 801873c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801873e:	2300      	movs	r3, #0
}
 8018740:	0018      	movs	r0, r3
 8018742:	46bd      	mov	sp, r7
 8018744:	b004      	add	sp, #16
 8018746:	bd80      	pop	{r7, pc}

08018748 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b082      	sub	sp, #8
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
 8018750:	000a      	movs	r2, r1
 8018752:	1cfb      	adds	r3, r7, #3
 8018754:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8018756:	46c0      	nop			@ (mov r8, r8)
 8018758:	46bd      	mov	sp, r7
 801875a:	b002      	add	sp, #8
 801875c:	bd80      	pop	{r7, pc}
	...

08018760 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8018760:	b580      	push	{r7, lr}
 8018762:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8018764:	4b04      	ldr	r3, [pc, #16]	@ (8018778 <HAL_PWR_EnableBkUpAccess+0x18>)
 8018766:	681a      	ldr	r2, [r3, #0]
 8018768:	4b03      	ldr	r3, [pc, #12]	@ (8018778 <HAL_PWR_EnableBkUpAccess+0x18>)
 801876a:	2180      	movs	r1, #128	@ 0x80
 801876c:	0049      	lsls	r1, r1, #1
 801876e:	430a      	orrs	r2, r1
 8018770:	601a      	str	r2, [r3, #0]
}
 8018772:	46c0      	nop			@ (mov r8, r8)
 8018774:	46bd      	mov	sp, r7
 8018776:	bd80      	pop	{r7, pc}
 8018778:	40007000 	.word	0x40007000

0801877c <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801877c:	b580      	push	{r7, lr}
 801877e:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8018780:	4b04      	ldr	r3, [pc, #16]	@ (8018794 <HAL_PWR_DisableBkUpAccess+0x18>)
 8018782:	681a      	ldr	r2, [r3, #0]
 8018784:	4b03      	ldr	r3, [pc, #12]	@ (8018794 <HAL_PWR_DisableBkUpAccess+0x18>)
 8018786:	4904      	ldr	r1, [pc, #16]	@ (8018798 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8018788:	400a      	ands	r2, r1
 801878a:	601a      	str	r2, [r3, #0]
}
 801878c:	46c0      	nop			@ (mov r8, r8)
 801878e:	46bd      	mov	sp, r7
 8018790:	bd80      	pop	{r7, pc}
 8018792:	46c0      	nop			@ (mov r8, r8)
 8018794:	40007000 	.word	0x40007000
 8018798:	fffffeff 	.word	0xfffffeff

0801879c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b086      	sub	sp, #24
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
 80187a4:	000a      	movs	r2, r1
 80187a6:	1cfb      	adds	r3, r7, #3
 80187a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80187aa:	2300      	movs	r3, #0
 80187ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80187ae:	4b25      	ldr	r3, [pc, #148]	@ (8018844 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187b0:	681a      	ldr	r2, [r3, #0]
 80187b2:	2380      	movs	r3, #128	@ 0x80
 80187b4:	009b      	lsls	r3, r3, #2
 80187b6:	4013      	ands	r3, r2
 80187b8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80187ba:	4b23      	ldr	r3, [pc, #140]	@ (8018848 <HAL_PWR_EnterSTOPMode+0xac>)
 80187bc:	6a1b      	ldr	r3, [r3, #32]
 80187be:	2201      	movs	r2, #1
 80187c0:	4013      	ands	r3, r2
 80187c2:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80187c4:	693b      	ldr	r3, [r7, #16]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d008      	beq.n	80187dc <HAL_PWR_EnterSTOPMode+0x40>
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d005      	beq.n	80187dc <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80187d0:	4b1c      	ldr	r3, [pc, #112]	@ (8018844 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187d2:	681a      	ldr	r2, [r3, #0]
 80187d4:	4b1b      	ldr	r3, [pc, #108]	@ (8018844 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187d6:	491d      	ldr	r1, [pc, #116]	@ (801884c <HAL_PWR_EnterSTOPMode+0xb0>)
 80187d8:	400a      	ands	r2, r1
 80187da:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80187dc:	4b19      	ldr	r3, [pc, #100]	@ (8018844 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80187e2:	697b      	ldr	r3, [r7, #20]
 80187e4:	2203      	movs	r2, #3
 80187e6:	4393      	bics	r3, r2
 80187e8:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80187ea:	697a      	ldr	r2, [r7, #20]
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	4313      	orrs	r3, r2
 80187f0:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80187f2:	4b14      	ldr	r3, [pc, #80]	@ (8018844 <HAL_PWR_EnterSTOPMode+0xa8>)
 80187f4:	697a      	ldr	r2, [r7, #20]
 80187f6:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80187f8:	4b15      	ldr	r3, [pc, #84]	@ (8018850 <HAL_PWR_EnterSTOPMode+0xb4>)
 80187fa:	691a      	ldr	r2, [r3, #16]
 80187fc:	4b14      	ldr	r3, [pc, #80]	@ (8018850 <HAL_PWR_EnterSTOPMode+0xb4>)
 80187fe:	2104      	movs	r1, #4
 8018800:	430a      	orrs	r2, r1
 8018802:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8018804:	1cfb      	adds	r3, r7, #3
 8018806:	781b      	ldrb	r3, [r3, #0]
 8018808:	2b01      	cmp	r3, #1
 801880a:	d101      	bne.n	8018810 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801880c:	bf30      	wfi
 801880e:	e002      	b.n	8018816 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8018810:	bf40      	sev
    __WFE();
 8018812:	bf20      	wfe
    __WFE();
 8018814:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8018816:	4b0e      	ldr	r3, [pc, #56]	@ (8018850 <HAL_PWR_EnterSTOPMode+0xb4>)
 8018818:	691a      	ldr	r2, [r3, #16]
 801881a:	4b0d      	ldr	r3, [pc, #52]	@ (8018850 <HAL_PWR_EnterSTOPMode+0xb4>)
 801881c:	2104      	movs	r1, #4
 801881e:	438a      	bics	r2, r1
 8018820:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d009      	beq.n	801883c <HAL_PWR_EnterSTOPMode+0xa0>
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d006      	beq.n	801883c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801882e:	4b05      	ldr	r3, [pc, #20]	@ (8018844 <HAL_PWR_EnterSTOPMode+0xa8>)
 8018830:	681a      	ldr	r2, [r3, #0]
 8018832:	4b04      	ldr	r3, [pc, #16]	@ (8018844 <HAL_PWR_EnterSTOPMode+0xa8>)
 8018834:	2180      	movs	r1, #128	@ 0x80
 8018836:	0089      	lsls	r1, r1, #2
 8018838:	430a      	orrs	r2, r1
 801883a:	601a      	str	r2, [r3, #0]
  }
}
 801883c:	46c0      	nop			@ (mov r8, r8)
 801883e:	46bd      	mov	sp, r7
 8018840:	b006      	add	sp, #24
 8018842:	bd80      	pop	{r7, pc}
 8018844:	40007000 	.word	0x40007000
 8018848:	40010000 	.word	0x40010000
 801884c:	fffffdff 	.word	0xfffffdff
 8018850:	e000ed00 	.word	0xe000ed00

08018854 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8018858:	4b07      	ldr	r3, [pc, #28]	@ (8018878 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801885a:	681a      	ldr	r2, [r3, #0]
 801885c:	4b06      	ldr	r3, [pc, #24]	@ (8018878 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801885e:	2102      	movs	r1, #2
 8018860:	430a      	orrs	r2, r1
 8018862:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8018864:	4b05      	ldr	r3, [pc, #20]	@ (801887c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8018866:	691a      	ldr	r2, [r3, #16]
 8018868:	4b04      	ldr	r3, [pc, #16]	@ (801887c <HAL_PWR_EnterSTANDBYMode+0x28>)
 801886a:	2104      	movs	r1, #4
 801886c:	430a      	orrs	r2, r1
 801886e:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8018870:	bf30      	wfi
}
 8018872:	46c0      	nop			@ (mov r8, r8)
 8018874:	46bd      	mov	sp, r7
 8018876:	bd80      	pop	{r7, pc}
 8018878:	40007000 	.word	0x40007000
 801887c:	e000ed00 	.word	0xe000ed00

08018880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8018880:	b5b0      	push	{r4, r5, r7, lr}
 8018882:	b08a      	sub	sp, #40	@ 0x28
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d102      	bne.n	8018894 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801888e:	2301      	movs	r3, #1
 8018890:	f000 fbbf 	bl	8019012 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8018894:	4bc9      	ldr	r3, [pc, #804]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018896:	68db      	ldr	r3, [r3, #12]
 8018898:	220c      	movs	r2, #12
 801889a:	4013      	ands	r3, r2
 801889c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801889e:	4bc7      	ldr	r3, [pc, #796]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 80188a0:	68da      	ldr	r2, [r3, #12]
 80188a2:	2380      	movs	r3, #128	@ 0x80
 80188a4:	025b      	lsls	r3, r3, #9
 80188a6:	4013      	ands	r3, r2
 80188a8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	2201      	movs	r2, #1
 80188b0:	4013      	ands	r3, r2
 80188b2:	d100      	bne.n	80188b6 <HAL_RCC_OscConfig+0x36>
 80188b4:	e07e      	b.n	80189b4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80188b6:	69fb      	ldr	r3, [r7, #28]
 80188b8:	2b08      	cmp	r3, #8
 80188ba:	d007      	beq.n	80188cc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80188bc:	69fb      	ldr	r3, [r7, #28]
 80188be:	2b0c      	cmp	r3, #12
 80188c0:	d112      	bne.n	80188e8 <HAL_RCC_OscConfig+0x68>
 80188c2:	69ba      	ldr	r2, [r7, #24]
 80188c4:	2380      	movs	r3, #128	@ 0x80
 80188c6:	025b      	lsls	r3, r3, #9
 80188c8:	429a      	cmp	r2, r3
 80188ca:	d10d      	bne.n	80188e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80188cc:	4bbb      	ldr	r3, [pc, #748]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 80188ce:	681a      	ldr	r2, [r3, #0]
 80188d0:	2380      	movs	r3, #128	@ 0x80
 80188d2:	029b      	lsls	r3, r3, #10
 80188d4:	4013      	ands	r3, r2
 80188d6:	d100      	bne.n	80188da <HAL_RCC_OscConfig+0x5a>
 80188d8:	e06b      	b.n	80189b2 <HAL_RCC_OscConfig+0x132>
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	685b      	ldr	r3, [r3, #4]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d167      	bne.n	80189b2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80188e2:	2301      	movs	r3, #1
 80188e4:	f000 fb95 	bl	8019012 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	685a      	ldr	r2, [r3, #4]
 80188ec:	2380      	movs	r3, #128	@ 0x80
 80188ee:	025b      	lsls	r3, r3, #9
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d107      	bne.n	8018904 <HAL_RCC_OscConfig+0x84>
 80188f4:	4bb1      	ldr	r3, [pc, #708]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 80188f6:	681a      	ldr	r2, [r3, #0]
 80188f8:	4bb0      	ldr	r3, [pc, #704]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 80188fa:	2180      	movs	r1, #128	@ 0x80
 80188fc:	0249      	lsls	r1, r1, #9
 80188fe:	430a      	orrs	r2, r1
 8018900:	601a      	str	r2, [r3, #0]
 8018902:	e027      	b.n	8018954 <HAL_RCC_OscConfig+0xd4>
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	685a      	ldr	r2, [r3, #4]
 8018908:	23a0      	movs	r3, #160	@ 0xa0
 801890a:	02db      	lsls	r3, r3, #11
 801890c:	429a      	cmp	r2, r3
 801890e:	d10e      	bne.n	801892e <HAL_RCC_OscConfig+0xae>
 8018910:	4baa      	ldr	r3, [pc, #680]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018912:	681a      	ldr	r2, [r3, #0]
 8018914:	4ba9      	ldr	r3, [pc, #676]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018916:	2180      	movs	r1, #128	@ 0x80
 8018918:	02c9      	lsls	r1, r1, #11
 801891a:	430a      	orrs	r2, r1
 801891c:	601a      	str	r2, [r3, #0]
 801891e:	4ba7      	ldr	r3, [pc, #668]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018920:	681a      	ldr	r2, [r3, #0]
 8018922:	4ba6      	ldr	r3, [pc, #664]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018924:	2180      	movs	r1, #128	@ 0x80
 8018926:	0249      	lsls	r1, r1, #9
 8018928:	430a      	orrs	r2, r1
 801892a:	601a      	str	r2, [r3, #0]
 801892c:	e012      	b.n	8018954 <HAL_RCC_OscConfig+0xd4>
 801892e:	4ba3      	ldr	r3, [pc, #652]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018930:	681a      	ldr	r2, [r3, #0]
 8018932:	4ba2      	ldr	r3, [pc, #648]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018934:	49a2      	ldr	r1, [pc, #648]	@ (8018bc0 <HAL_RCC_OscConfig+0x340>)
 8018936:	400a      	ands	r2, r1
 8018938:	601a      	str	r2, [r3, #0]
 801893a:	4ba0      	ldr	r3, [pc, #640]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 801893c:	681a      	ldr	r2, [r3, #0]
 801893e:	2380      	movs	r3, #128	@ 0x80
 8018940:	025b      	lsls	r3, r3, #9
 8018942:	4013      	ands	r3, r2
 8018944:	60fb      	str	r3, [r7, #12]
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	4b9c      	ldr	r3, [pc, #624]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 801894a:	681a      	ldr	r2, [r3, #0]
 801894c:	4b9b      	ldr	r3, [pc, #620]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 801894e:	499d      	ldr	r1, [pc, #628]	@ (8018bc4 <HAL_RCC_OscConfig+0x344>)
 8018950:	400a      	ands	r2, r1
 8018952:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	685b      	ldr	r3, [r3, #4]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d015      	beq.n	8018988 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801895c:	f7f9 fbc8 	bl	80120f0 <HAL_GetTick>
 8018960:	0003      	movs	r3, r0
 8018962:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8018964:	e009      	b.n	801897a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8018966:	f7f9 fbc3 	bl	80120f0 <HAL_GetTick>
 801896a:	0002      	movs	r2, r0
 801896c:	697b      	ldr	r3, [r7, #20]
 801896e:	1ad3      	subs	r3, r2, r3
 8018970:	2b64      	cmp	r3, #100	@ 0x64
 8018972:	d902      	bls.n	801897a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8018974:	2303      	movs	r3, #3
 8018976:	f000 fb4c 	bl	8019012 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801897a:	4b90      	ldr	r3, [pc, #576]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 801897c:	681a      	ldr	r2, [r3, #0]
 801897e:	2380      	movs	r3, #128	@ 0x80
 8018980:	029b      	lsls	r3, r3, #10
 8018982:	4013      	ands	r3, r2
 8018984:	d0ef      	beq.n	8018966 <HAL_RCC_OscConfig+0xe6>
 8018986:	e015      	b.n	80189b4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018988:	f7f9 fbb2 	bl	80120f0 <HAL_GetTick>
 801898c:	0003      	movs	r3, r0
 801898e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8018990:	e008      	b.n	80189a4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8018992:	f7f9 fbad 	bl	80120f0 <HAL_GetTick>
 8018996:	0002      	movs	r2, r0
 8018998:	697b      	ldr	r3, [r7, #20]
 801899a:	1ad3      	subs	r3, r2, r3
 801899c:	2b64      	cmp	r3, #100	@ 0x64
 801899e:	d901      	bls.n	80189a4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80189a0:	2303      	movs	r3, #3
 80189a2:	e336      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80189a4:	4b85      	ldr	r3, [pc, #532]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 80189a6:	681a      	ldr	r2, [r3, #0]
 80189a8:	2380      	movs	r3, #128	@ 0x80
 80189aa:	029b      	lsls	r3, r3, #10
 80189ac:	4013      	ands	r3, r2
 80189ae:	d1f0      	bne.n	8018992 <HAL_RCC_OscConfig+0x112>
 80189b0:	e000      	b.n	80189b4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80189b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	2202      	movs	r2, #2
 80189ba:	4013      	ands	r3, r2
 80189bc:	d100      	bne.n	80189c0 <HAL_RCC_OscConfig+0x140>
 80189be:	e099      	b.n	8018af4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	68db      	ldr	r3, [r3, #12]
 80189c4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80189c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189c8:	2220      	movs	r2, #32
 80189ca:	4013      	ands	r3, r2
 80189cc:	d009      	beq.n	80189e2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80189ce:	4b7b      	ldr	r3, [pc, #492]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 80189d0:	681a      	ldr	r2, [r3, #0]
 80189d2:	4b7a      	ldr	r3, [pc, #488]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 80189d4:	2120      	movs	r1, #32
 80189d6:	430a      	orrs	r2, r1
 80189d8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80189da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189dc:	2220      	movs	r2, #32
 80189de:	4393      	bics	r3, r2
 80189e0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80189e2:	69fb      	ldr	r3, [r7, #28]
 80189e4:	2b04      	cmp	r3, #4
 80189e6:	d005      	beq.n	80189f4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80189e8:	69fb      	ldr	r3, [r7, #28]
 80189ea:	2b0c      	cmp	r3, #12
 80189ec:	d13e      	bne.n	8018a6c <HAL_RCC_OscConfig+0x1ec>
 80189ee:	69bb      	ldr	r3, [r7, #24]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d13b      	bne.n	8018a6c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80189f4:	4b71      	ldr	r3, [pc, #452]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 80189f6:	681b      	ldr	r3, [r3, #0]
 80189f8:	2204      	movs	r2, #4
 80189fa:	4013      	ands	r3, r2
 80189fc:	d004      	beq.n	8018a08 <HAL_RCC_OscConfig+0x188>
 80189fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d101      	bne.n	8018a08 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8018a04:	2301      	movs	r3, #1
 8018a06:	e304      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018a08:	4b6c      	ldr	r3, [pc, #432]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018a0a:	685b      	ldr	r3, [r3, #4]
 8018a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8018bc8 <HAL_RCC_OscConfig+0x348>)
 8018a0e:	4013      	ands	r3, r2
 8018a10:	0019      	movs	r1, r3
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	691b      	ldr	r3, [r3, #16]
 8018a16:	021a      	lsls	r2, r3, #8
 8018a18:	4b68      	ldr	r3, [pc, #416]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018a1a:	430a      	orrs	r2, r1
 8018a1c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8018a1e:	4b67      	ldr	r3, [pc, #412]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	2209      	movs	r2, #9
 8018a24:	4393      	bics	r3, r2
 8018a26:	0019      	movs	r1, r3
 8018a28:	4b64      	ldr	r3, [pc, #400]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018a2c:	430a      	orrs	r2, r1
 8018a2e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8018a30:	f000 fc42 	bl	80192b8 <HAL_RCC_GetSysClockFreq>
 8018a34:	0001      	movs	r1, r0
 8018a36:	4b61      	ldr	r3, [pc, #388]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018a38:	68db      	ldr	r3, [r3, #12]
 8018a3a:	091b      	lsrs	r3, r3, #4
 8018a3c:	220f      	movs	r2, #15
 8018a3e:	4013      	ands	r3, r2
 8018a40:	4a62      	ldr	r2, [pc, #392]	@ (8018bcc <HAL_RCC_OscConfig+0x34c>)
 8018a42:	5cd3      	ldrb	r3, [r2, r3]
 8018a44:	000a      	movs	r2, r1
 8018a46:	40da      	lsrs	r2, r3
 8018a48:	4b61      	ldr	r3, [pc, #388]	@ (8018bd0 <HAL_RCC_OscConfig+0x350>)
 8018a4a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8018a4c:	4b61      	ldr	r3, [pc, #388]	@ (8018bd4 <HAL_RCC_OscConfig+0x354>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	2513      	movs	r5, #19
 8018a52:	197c      	adds	r4, r7, r5
 8018a54:	0018      	movs	r0, r3
 8018a56:	f7f9 fb05 	bl	8012064 <HAL_InitTick>
 8018a5a:	0003      	movs	r3, r0
 8018a5c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8018a5e:	197b      	adds	r3, r7, r5
 8018a60:	781b      	ldrb	r3, [r3, #0]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d046      	beq.n	8018af4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8018a66:	197b      	adds	r3, r7, r5
 8018a68:	781b      	ldrb	r3, [r3, #0]
 8018a6a:	e2d2      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8018a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d027      	beq.n	8018ac2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8018a72:	4b52      	ldr	r3, [pc, #328]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	2209      	movs	r2, #9
 8018a78:	4393      	bics	r3, r2
 8018a7a:	0019      	movs	r1, r3
 8018a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018a80:	430a      	orrs	r2, r1
 8018a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018a84:	f7f9 fb34 	bl	80120f0 <HAL_GetTick>
 8018a88:	0003      	movs	r3, r0
 8018a8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8018a8c:	e008      	b.n	8018aa0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8018a8e:	f7f9 fb2f 	bl	80120f0 <HAL_GetTick>
 8018a92:	0002      	movs	r2, r0
 8018a94:	697b      	ldr	r3, [r7, #20]
 8018a96:	1ad3      	subs	r3, r2, r3
 8018a98:	2b02      	cmp	r3, #2
 8018a9a:	d901      	bls.n	8018aa0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8018a9c:	2303      	movs	r3, #3
 8018a9e:	e2b8      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8018aa0:	4b46      	ldr	r3, [pc, #280]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	2204      	movs	r2, #4
 8018aa6:	4013      	ands	r3, r2
 8018aa8:	d0f1      	beq.n	8018a8e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018aaa:	4b44      	ldr	r3, [pc, #272]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018aac:	685b      	ldr	r3, [r3, #4]
 8018aae:	4a46      	ldr	r2, [pc, #280]	@ (8018bc8 <HAL_RCC_OscConfig+0x348>)
 8018ab0:	4013      	ands	r3, r2
 8018ab2:	0019      	movs	r1, r3
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	691b      	ldr	r3, [r3, #16]
 8018ab8:	021a      	lsls	r2, r3, #8
 8018aba:	4b40      	ldr	r3, [pc, #256]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018abc:	430a      	orrs	r2, r1
 8018abe:	605a      	str	r2, [r3, #4]
 8018ac0:	e018      	b.n	8018af4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018ac4:	681a      	ldr	r2, [r3, #0]
 8018ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018ac8:	2101      	movs	r1, #1
 8018aca:	438a      	bics	r2, r1
 8018acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018ace:	f7f9 fb0f 	bl	80120f0 <HAL_GetTick>
 8018ad2:	0003      	movs	r3, r0
 8018ad4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8018ad6:	e008      	b.n	8018aea <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8018ad8:	f7f9 fb0a 	bl	80120f0 <HAL_GetTick>
 8018adc:	0002      	movs	r2, r0
 8018ade:	697b      	ldr	r3, [r7, #20]
 8018ae0:	1ad3      	subs	r3, r2, r3
 8018ae2:	2b02      	cmp	r3, #2
 8018ae4:	d901      	bls.n	8018aea <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8018ae6:	2303      	movs	r3, #3
 8018ae8:	e293      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8018aea:	4b34      	ldr	r3, [pc, #208]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	2204      	movs	r2, #4
 8018af0:	4013      	ands	r3, r2
 8018af2:	d1f1      	bne.n	8018ad8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	2210      	movs	r2, #16
 8018afa:	4013      	ands	r3, r2
 8018afc:	d100      	bne.n	8018b00 <HAL_RCC_OscConfig+0x280>
 8018afe:	e0a2      	b.n	8018c46 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8018b00:	69fb      	ldr	r3, [r7, #28]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d140      	bne.n	8018b88 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8018b06:	4b2d      	ldr	r3, [pc, #180]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018b08:	681a      	ldr	r2, [r3, #0]
 8018b0a:	2380      	movs	r3, #128	@ 0x80
 8018b0c:	009b      	lsls	r3, r3, #2
 8018b0e:	4013      	ands	r3, r2
 8018b10:	d005      	beq.n	8018b1e <HAL_RCC_OscConfig+0x29e>
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	69db      	ldr	r3, [r3, #28]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d101      	bne.n	8018b1e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8018b1a:	2301      	movs	r3, #1
 8018b1c:	e279      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8018b1e:	4b27      	ldr	r3, [pc, #156]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018b20:	685b      	ldr	r3, [r3, #4]
 8018b22:	4a2d      	ldr	r2, [pc, #180]	@ (8018bd8 <HAL_RCC_OscConfig+0x358>)
 8018b24:	4013      	ands	r3, r2
 8018b26:	0019      	movs	r1, r3
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018b2c:	4b23      	ldr	r3, [pc, #140]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018b2e:	430a      	orrs	r2, r1
 8018b30:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8018b32:	4b22      	ldr	r3, [pc, #136]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018b34:	685b      	ldr	r3, [r3, #4]
 8018b36:	021b      	lsls	r3, r3, #8
 8018b38:	0a19      	lsrs	r1, r3, #8
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	6a1b      	ldr	r3, [r3, #32]
 8018b3e:	061a      	lsls	r2, r3, #24
 8018b40:	4b1e      	ldr	r3, [pc, #120]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018b42:	430a      	orrs	r2, r1
 8018b44:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b4a:	0b5b      	lsrs	r3, r3, #13
 8018b4c:	3301      	adds	r3, #1
 8018b4e:	2280      	movs	r2, #128	@ 0x80
 8018b50:	0212      	lsls	r2, r2, #8
 8018b52:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8018b54:	4b19      	ldr	r3, [pc, #100]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018b56:	68db      	ldr	r3, [r3, #12]
 8018b58:	091b      	lsrs	r3, r3, #4
 8018b5a:	210f      	movs	r1, #15
 8018b5c:	400b      	ands	r3, r1
 8018b5e:	491b      	ldr	r1, [pc, #108]	@ (8018bcc <HAL_RCC_OscConfig+0x34c>)
 8018b60:	5ccb      	ldrb	r3, [r1, r3]
 8018b62:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8018b64:	4b1a      	ldr	r3, [pc, #104]	@ (8018bd0 <HAL_RCC_OscConfig+0x350>)
 8018b66:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8018b68:	4b1a      	ldr	r3, [pc, #104]	@ (8018bd4 <HAL_RCC_OscConfig+0x354>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	2513      	movs	r5, #19
 8018b6e:	197c      	adds	r4, r7, r5
 8018b70:	0018      	movs	r0, r3
 8018b72:	f7f9 fa77 	bl	8012064 <HAL_InitTick>
 8018b76:	0003      	movs	r3, r0
 8018b78:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8018b7a:	197b      	adds	r3, r7, r5
 8018b7c:	781b      	ldrb	r3, [r3, #0]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d061      	beq.n	8018c46 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8018b82:	197b      	adds	r3, r7, r5
 8018b84:	781b      	ldrb	r3, [r3, #0]
 8018b86:	e244      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	69db      	ldr	r3, [r3, #28]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d040      	beq.n	8018c12 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8018b90:	4b0a      	ldr	r3, [pc, #40]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018b92:	681a      	ldr	r2, [r3, #0]
 8018b94:	4b09      	ldr	r3, [pc, #36]	@ (8018bbc <HAL_RCC_OscConfig+0x33c>)
 8018b96:	2180      	movs	r1, #128	@ 0x80
 8018b98:	0049      	lsls	r1, r1, #1
 8018b9a:	430a      	orrs	r2, r1
 8018b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018b9e:	f7f9 faa7 	bl	80120f0 <HAL_GetTick>
 8018ba2:	0003      	movs	r3, r0
 8018ba4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8018ba6:	e019      	b.n	8018bdc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8018ba8:	f7f9 faa2 	bl	80120f0 <HAL_GetTick>
 8018bac:	0002      	movs	r2, r0
 8018bae:	697b      	ldr	r3, [r7, #20]
 8018bb0:	1ad3      	subs	r3, r2, r3
 8018bb2:	2b02      	cmp	r3, #2
 8018bb4:	d912      	bls.n	8018bdc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8018bb6:	2303      	movs	r3, #3
 8018bb8:	e22b      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
 8018bba:	46c0      	nop			@ (mov r8, r8)
 8018bbc:	40021000 	.word	0x40021000
 8018bc0:	fffeffff 	.word	0xfffeffff
 8018bc4:	fffbffff 	.word	0xfffbffff
 8018bc8:	ffffe0ff 	.word	0xffffe0ff
 8018bcc:	0802b238 	.word	0x0802b238
 8018bd0:	200000e0 	.word	0x200000e0
 8018bd4:	200000f0 	.word	0x200000f0
 8018bd8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8018bdc:	4bca      	ldr	r3, [pc, #808]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018bde:	681a      	ldr	r2, [r3, #0]
 8018be0:	2380      	movs	r3, #128	@ 0x80
 8018be2:	009b      	lsls	r3, r3, #2
 8018be4:	4013      	ands	r3, r2
 8018be6:	d0df      	beq.n	8018ba8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8018be8:	4bc7      	ldr	r3, [pc, #796]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018bea:	685b      	ldr	r3, [r3, #4]
 8018bec:	4ac7      	ldr	r2, [pc, #796]	@ (8018f0c <HAL_RCC_OscConfig+0x68c>)
 8018bee:	4013      	ands	r3, r2
 8018bf0:	0019      	movs	r1, r3
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018bf6:	4bc4      	ldr	r3, [pc, #784]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018bf8:	430a      	orrs	r2, r1
 8018bfa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8018bfc:	4bc2      	ldr	r3, [pc, #776]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018bfe:	685b      	ldr	r3, [r3, #4]
 8018c00:	021b      	lsls	r3, r3, #8
 8018c02:	0a19      	lsrs	r1, r3, #8
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	6a1b      	ldr	r3, [r3, #32]
 8018c08:	061a      	lsls	r2, r3, #24
 8018c0a:	4bbf      	ldr	r3, [pc, #764]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018c0c:	430a      	orrs	r2, r1
 8018c0e:	605a      	str	r2, [r3, #4]
 8018c10:	e019      	b.n	8018c46 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8018c12:	4bbd      	ldr	r3, [pc, #756]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018c14:	681a      	ldr	r2, [r3, #0]
 8018c16:	4bbc      	ldr	r3, [pc, #752]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018c18:	49bd      	ldr	r1, [pc, #756]	@ (8018f10 <HAL_RCC_OscConfig+0x690>)
 8018c1a:	400a      	ands	r2, r1
 8018c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018c1e:	f7f9 fa67 	bl	80120f0 <HAL_GetTick>
 8018c22:	0003      	movs	r3, r0
 8018c24:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8018c26:	e008      	b.n	8018c3a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8018c28:	f7f9 fa62 	bl	80120f0 <HAL_GetTick>
 8018c2c:	0002      	movs	r2, r0
 8018c2e:	697b      	ldr	r3, [r7, #20]
 8018c30:	1ad3      	subs	r3, r2, r3
 8018c32:	2b02      	cmp	r3, #2
 8018c34:	d901      	bls.n	8018c3a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8018c36:	2303      	movs	r3, #3
 8018c38:	e1eb      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8018c3a:	4bb3      	ldr	r3, [pc, #716]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018c3c:	681a      	ldr	r2, [r3, #0]
 8018c3e:	2380      	movs	r3, #128	@ 0x80
 8018c40:	009b      	lsls	r3, r3, #2
 8018c42:	4013      	ands	r3, r2
 8018c44:	d1f0      	bne.n	8018c28 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	2208      	movs	r2, #8
 8018c4c:	4013      	ands	r3, r2
 8018c4e:	d036      	beq.n	8018cbe <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	695b      	ldr	r3, [r3, #20]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d019      	beq.n	8018c8c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018c58:	4bab      	ldr	r3, [pc, #684]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018c5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018c5c:	4baa      	ldr	r3, [pc, #680]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018c5e:	2101      	movs	r1, #1
 8018c60:	430a      	orrs	r2, r1
 8018c62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018c64:	f7f9 fa44 	bl	80120f0 <HAL_GetTick>
 8018c68:	0003      	movs	r3, r0
 8018c6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8018c6c:	e008      	b.n	8018c80 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018c6e:	f7f9 fa3f 	bl	80120f0 <HAL_GetTick>
 8018c72:	0002      	movs	r2, r0
 8018c74:	697b      	ldr	r3, [r7, #20]
 8018c76:	1ad3      	subs	r3, r2, r3
 8018c78:	2b02      	cmp	r3, #2
 8018c7a:	d901      	bls.n	8018c80 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8018c7c:	2303      	movs	r3, #3
 8018c7e:	e1c8      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8018c80:	4ba1      	ldr	r3, [pc, #644]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018c84:	2202      	movs	r2, #2
 8018c86:	4013      	ands	r3, r2
 8018c88:	d0f1      	beq.n	8018c6e <HAL_RCC_OscConfig+0x3ee>
 8018c8a:	e018      	b.n	8018cbe <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018c8c:	4b9e      	ldr	r3, [pc, #632]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018c8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018c90:	4b9d      	ldr	r3, [pc, #628]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018c92:	2101      	movs	r1, #1
 8018c94:	438a      	bics	r2, r1
 8018c96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018c98:	f7f9 fa2a 	bl	80120f0 <HAL_GetTick>
 8018c9c:	0003      	movs	r3, r0
 8018c9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8018ca0:	e008      	b.n	8018cb4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018ca2:	f7f9 fa25 	bl	80120f0 <HAL_GetTick>
 8018ca6:	0002      	movs	r2, r0
 8018ca8:	697b      	ldr	r3, [r7, #20]
 8018caa:	1ad3      	subs	r3, r2, r3
 8018cac:	2b02      	cmp	r3, #2
 8018cae:	d901      	bls.n	8018cb4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8018cb0:	2303      	movs	r3, #3
 8018cb2:	e1ae      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8018cb4:	4b94      	ldr	r3, [pc, #592]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018cb8:	2202      	movs	r2, #2
 8018cba:	4013      	ands	r3, r2
 8018cbc:	d1f1      	bne.n	8018ca2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	2204      	movs	r2, #4
 8018cc4:	4013      	ands	r3, r2
 8018cc6:	d100      	bne.n	8018cca <HAL_RCC_OscConfig+0x44a>
 8018cc8:	e0ae      	b.n	8018e28 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8018cca:	2023      	movs	r0, #35	@ 0x23
 8018ccc:	183b      	adds	r3, r7, r0
 8018cce:	2200      	movs	r2, #0
 8018cd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018cd2:	4b8d      	ldr	r3, [pc, #564]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018cd6:	2380      	movs	r3, #128	@ 0x80
 8018cd8:	055b      	lsls	r3, r3, #21
 8018cda:	4013      	ands	r3, r2
 8018cdc:	d109      	bne.n	8018cf2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018cde:	4b8a      	ldr	r3, [pc, #552]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018ce2:	4b89      	ldr	r3, [pc, #548]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018ce4:	2180      	movs	r1, #128	@ 0x80
 8018ce6:	0549      	lsls	r1, r1, #21
 8018ce8:	430a      	orrs	r2, r1
 8018cea:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8018cec:	183b      	adds	r3, r7, r0
 8018cee:	2201      	movs	r2, #1
 8018cf0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018cf2:	4b88      	ldr	r3, [pc, #544]	@ (8018f14 <HAL_RCC_OscConfig+0x694>)
 8018cf4:	681a      	ldr	r2, [r3, #0]
 8018cf6:	2380      	movs	r3, #128	@ 0x80
 8018cf8:	005b      	lsls	r3, r3, #1
 8018cfa:	4013      	ands	r3, r2
 8018cfc:	d11a      	bne.n	8018d34 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8018cfe:	4b85      	ldr	r3, [pc, #532]	@ (8018f14 <HAL_RCC_OscConfig+0x694>)
 8018d00:	681a      	ldr	r2, [r3, #0]
 8018d02:	4b84      	ldr	r3, [pc, #528]	@ (8018f14 <HAL_RCC_OscConfig+0x694>)
 8018d04:	2180      	movs	r1, #128	@ 0x80
 8018d06:	0049      	lsls	r1, r1, #1
 8018d08:	430a      	orrs	r2, r1
 8018d0a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018d0c:	f7f9 f9f0 	bl	80120f0 <HAL_GetTick>
 8018d10:	0003      	movs	r3, r0
 8018d12:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018d14:	e008      	b.n	8018d28 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018d16:	f7f9 f9eb 	bl	80120f0 <HAL_GetTick>
 8018d1a:	0002      	movs	r2, r0
 8018d1c:	697b      	ldr	r3, [r7, #20]
 8018d1e:	1ad3      	subs	r3, r2, r3
 8018d20:	2b64      	cmp	r3, #100	@ 0x64
 8018d22:	d901      	bls.n	8018d28 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8018d24:	2303      	movs	r3, #3
 8018d26:	e174      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018d28:	4b7a      	ldr	r3, [pc, #488]	@ (8018f14 <HAL_RCC_OscConfig+0x694>)
 8018d2a:	681a      	ldr	r2, [r3, #0]
 8018d2c:	2380      	movs	r3, #128	@ 0x80
 8018d2e:	005b      	lsls	r3, r3, #1
 8018d30:	4013      	ands	r3, r2
 8018d32:	d0f0      	beq.n	8018d16 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	689a      	ldr	r2, [r3, #8]
 8018d38:	2380      	movs	r3, #128	@ 0x80
 8018d3a:	005b      	lsls	r3, r3, #1
 8018d3c:	429a      	cmp	r2, r3
 8018d3e:	d107      	bne.n	8018d50 <HAL_RCC_OscConfig+0x4d0>
 8018d40:	4b71      	ldr	r3, [pc, #452]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018d42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d44:	4b70      	ldr	r3, [pc, #448]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018d46:	2180      	movs	r1, #128	@ 0x80
 8018d48:	0049      	lsls	r1, r1, #1
 8018d4a:	430a      	orrs	r2, r1
 8018d4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d4e:	e031      	b.n	8018db4 <HAL_RCC_OscConfig+0x534>
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	689b      	ldr	r3, [r3, #8]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d10c      	bne.n	8018d72 <HAL_RCC_OscConfig+0x4f2>
 8018d58:	4b6b      	ldr	r3, [pc, #428]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018d5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d5c:	4b6a      	ldr	r3, [pc, #424]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018d5e:	496c      	ldr	r1, [pc, #432]	@ (8018f10 <HAL_RCC_OscConfig+0x690>)
 8018d60:	400a      	ands	r2, r1
 8018d62:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d64:	4b68      	ldr	r3, [pc, #416]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018d66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d68:	4b67      	ldr	r3, [pc, #412]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018d6a:	496b      	ldr	r1, [pc, #428]	@ (8018f18 <HAL_RCC_OscConfig+0x698>)
 8018d6c:	400a      	ands	r2, r1
 8018d6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d70:	e020      	b.n	8018db4 <HAL_RCC_OscConfig+0x534>
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	689a      	ldr	r2, [r3, #8]
 8018d76:	23a0      	movs	r3, #160	@ 0xa0
 8018d78:	00db      	lsls	r3, r3, #3
 8018d7a:	429a      	cmp	r2, r3
 8018d7c:	d10e      	bne.n	8018d9c <HAL_RCC_OscConfig+0x51c>
 8018d7e:	4b62      	ldr	r3, [pc, #392]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018d80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d82:	4b61      	ldr	r3, [pc, #388]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018d84:	2180      	movs	r1, #128	@ 0x80
 8018d86:	00c9      	lsls	r1, r1, #3
 8018d88:	430a      	orrs	r2, r1
 8018d8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018d8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d90:	4b5d      	ldr	r3, [pc, #372]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018d92:	2180      	movs	r1, #128	@ 0x80
 8018d94:	0049      	lsls	r1, r1, #1
 8018d96:	430a      	orrs	r2, r1
 8018d98:	651a      	str	r2, [r3, #80]	@ 0x50
 8018d9a:	e00b      	b.n	8018db4 <HAL_RCC_OscConfig+0x534>
 8018d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018d9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018da0:	4b59      	ldr	r3, [pc, #356]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018da2:	495b      	ldr	r1, [pc, #364]	@ (8018f10 <HAL_RCC_OscConfig+0x690>)
 8018da4:	400a      	ands	r2, r1
 8018da6:	651a      	str	r2, [r3, #80]	@ 0x50
 8018da8:	4b57      	ldr	r3, [pc, #348]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018daa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018dac:	4b56      	ldr	r3, [pc, #344]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018dae:	495a      	ldr	r1, [pc, #360]	@ (8018f18 <HAL_RCC_OscConfig+0x698>)
 8018db0:	400a      	ands	r2, r1
 8018db2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	689b      	ldr	r3, [r3, #8]
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d015      	beq.n	8018de8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018dbc:	f7f9 f998 	bl	80120f0 <HAL_GetTick>
 8018dc0:	0003      	movs	r3, r0
 8018dc2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018dc4:	e009      	b.n	8018dda <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018dc6:	f7f9 f993 	bl	80120f0 <HAL_GetTick>
 8018dca:	0002      	movs	r2, r0
 8018dcc:	697b      	ldr	r3, [r7, #20]
 8018dce:	1ad3      	subs	r3, r2, r3
 8018dd0:	4a52      	ldr	r2, [pc, #328]	@ (8018f1c <HAL_RCC_OscConfig+0x69c>)
 8018dd2:	4293      	cmp	r3, r2
 8018dd4:	d901      	bls.n	8018dda <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8018dd6:	2303      	movs	r3, #3
 8018dd8:	e11b      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8018dda:	4b4b      	ldr	r3, [pc, #300]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018ddc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018dde:	2380      	movs	r3, #128	@ 0x80
 8018de0:	009b      	lsls	r3, r3, #2
 8018de2:	4013      	ands	r3, r2
 8018de4:	d0ef      	beq.n	8018dc6 <HAL_RCC_OscConfig+0x546>
 8018de6:	e014      	b.n	8018e12 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018de8:	f7f9 f982 	bl	80120f0 <HAL_GetTick>
 8018dec:	0003      	movs	r3, r0
 8018dee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8018df0:	e009      	b.n	8018e06 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018df2:	f7f9 f97d 	bl	80120f0 <HAL_GetTick>
 8018df6:	0002      	movs	r2, r0
 8018df8:	697b      	ldr	r3, [r7, #20]
 8018dfa:	1ad3      	subs	r3, r2, r3
 8018dfc:	4a47      	ldr	r2, [pc, #284]	@ (8018f1c <HAL_RCC_OscConfig+0x69c>)
 8018dfe:	4293      	cmp	r3, r2
 8018e00:	d901      	bls.n	8018e06 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8018e02:	2303      	movs	r3, #3
 8018e04:	e105      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8018e06:	4b40      	ldr	r3, [pc, #256]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018e0a:	2380      	movs	r3, #128	@ 0x80
 8018e0c:	009b      	lsls	r3, r3, #2
 8018e0e:	4013      	ands	r3, r2
 8018e10:	d1ef      	bne.n	8018df2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8018e12:	2323      	movs	r3, #35	@ 0x23
 8018e14:	18fb      	adds	r3, r7, r3
 8018e16:	781b      	ldrb	r3, [r3, #0]
 8018e18:	2b01      	cmp	r3, #1
 8018e1a:	d105      	bne.n	8018e28 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018e1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018e20:	4b39      	ldr	r3, [pc, #228]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018e22:	493f      	ldr	r1, [pc, #252]	@ (8018f20 <HAL_RCC_OscConfig+0x6a0>)
 8018e24:	400a      	ands	r2, r1
 8018e26:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	2220      	movs	r2, #32
 8018e2e:	4013      	ands	r3, r2
 8018e30:	d049      	beq.n	8018ec6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	699b      	ldr	r3, [r3, #24]
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d026      	beq.n	8018e88 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8018e3a:	4b33      	ldr	r3, [pc, #204]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018e3c:	689a      	ldr	r2, [r3, #8]
 8018e3e:	4b32      	ldr	r3, [pc, #200]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018e40:	2101      	movs	r1, #1
 8018e42:	430a      	orrs	r2, r1
 8018e44:	609a      	str	r2, [r3, #8]
 8018e46:	4b30      	ldr	r3, [pc, #192]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018e4c:	2101      	movs	r1, #1
 8018e4e:	430a      	orrs	r2, r1
 8018e50:	635a      	str	r2, [r3, #52]	@ 0x34
 8018e52:	4b34      	ldr	r3, [pc, #208]	@ (8018f24 <HAL_RCC_OscConfig+0x6a4>)
 8018e54:	6a1a      	ldr	r2, [r3, #32]
 8018e56:	4b33      	ldr	r3, [pc, #204]	@ (8018f24 <HAL_RCC_OscConfig+0x6a4>)
 8018e58:	2180      	movs	r1, #128	@ 0x80
 8018e5a:	0189      	lsls	r1, r1, #6
 8018e5c:	430a      	orrs	r2, r1
 8018e5e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018e60:	f7f9 f946 	bl	80120f0 <HAL_GetTick>
 8018e64:	0003      	movs	r3, r0
 8018e66:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8018e68:	e008      	b.n	8018e7c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018e6a:	f7f9 f941 	bl	80120f0 <HAL_GetTick>
 8018e6e:	0002      	movs	r2, r0
 8018e70:	697b      	ldr	r3, [r7, #20]
 8018e72:	1ad3      	subs	r3, r2, r3
 8018e74:	2b02      	cmp	r3, #2
 8018e76:	d901      	bls.n	8018e7c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8018e78:	2303      	movs	r3, #3
 8018e7a:	e0ca      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8018e7c:	4b22      	ldr	r3, [pc, #136]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018e7e:	689b      	ldr	r3, [r3, #8]
 8018e80:	2202      	movs	r2, #2
 8018e82:	4013      	ands	r3, r2
 8018e84:	d0f1      	beq.n	8018e6a <HAL_RCC_OscConfig+0x5ea>
 8018e86:	e01e      	b.n	8018ec6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8018e88:	4b1f      	ldr	r3, [pc, #124]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018e8a:	689a      	ldr	r2, [r3, #8]
 8018e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018e8e:	2101      	movs	r1, #1
 8018e90:	438a      	bics	r2, r1
 8018e92:	609a      	str	r2, [r3, #8]
 8018e94:	4b23      	ldr	r3, [pc, #140]	@ (8018f24 <HAL_RCC_OscConfig+0x6a4>)
 8018e96:	6a1a      	ldr	r2, [r3, #32]
 8018e98:	4b22      	ldr	r3, [pc, #136]	@ (8018f24 <HAL_RCC_OscConfig+0x6a4>)
 8018e9a:	4923      	ldr	r1, [pc, #140]	@ (8018f28 <HAL_RCC_OscConfig+0x6a8>)
 8018e9c:	400a      	ands	r2, r1
 8018e9e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018ea0:	f7f9 f926 	bl	80120f0 <HAL_GetTick>
 8018ea4:	0003      	movs	r3, r0
 8018ea6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8018ea8:	e008      	b.n	8018ebc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8018eaa:	f7f9 f921 	bl	80120f0 <HAL_GetTick>
 8018eae:	0002      	movs	r2, r0
 8018eb0:	697b      	ldr	r3, [r7, #20]
 8018eb2:	1ad3      	subs	r3, r2, r3
 8018eb4:	2b02      	cmp	r3, #2
 8018eb6:	d901      	bls.n	8018ebc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8018eb8:	2303      	movs	r3, #3
 8018eba:	e0aa      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8018ebc:	4b12      	ldr	r3, [pc, #72]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018ebe:	689b      	ldr	r3, [r3, #8]
 8018ec0:	2202      	movs	r2, #2
 8018ec2:	4013      	ands	r3, r2
 8018ec4:	d1f1      	bne.n	8018eaa <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d100      	bne.n	8018ed0 <HAL_RCC_OscConfig+0x650>
 8018ece:	e09f      	b.n	8019010 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018ed0:	69fb      	ldr	r3, [r7, #28]
 8018ed2:	2b0c      	cmp	r3, #12
 8018ed4:	d100      	bne.n	8018ed8 <HAL_RCC_OscConfig+0x658>
 8018ed6:	e078      	b.n	8018fca <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018edc:	2b02      	cmp	r3, #2
 8018ede:	d159      	bne.n	8018f94 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018ee0:	4b09      	ldr	r3, [pc, #36]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018ee2:	681a      	ldr	r2, [r3, #0]
 8018ee4:	4b08      	ldr	r3, [pc, #32]	@ (8018f08 <HAL_RCC_OscConfig+0x688>)
 8018ee6:	4911      	ldr	r1, [pc, #68]	@ (8018f2c <HAL_RCC_OscConfig+0x6ac>)
 8018ee8:	400a      	ands	r2, r1
 8018eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018eec:	f7f9 f900 	bl	80120f0 <HAL_GetTick>
 8018ef0:	0003      	movs	r3, r0
 8018ef2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018ef4:	e01c      	b.n	8018f30 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018ef6:	f7f9 f8fb 	bl	80120f0 <HAL_GetTick>
 8018efa:	0002      	movs	r2, r0
 8018efc:	697b      	ldr	r3, [r7, #20]
 8018efe:	1ad3      	subs	r3, r2, r3
 8018f00:	2b02      	cmp	r3, #2
 8018f02:	d915      	bls.n	8018f30 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8018f04:	2303      	movs	r3, #3
 8018f06:	e084      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
 8018f08:	40021000 	.word	0x40021000
 8018f0c:	ffff1fff 	.word	0xffff1fff
 8018f10:	fffffeff 	.word	0xfffffeff
 8018f14:	40007000 	.word	0x40007000
 8018f18:	fffffbff 	.word	0xfffffbff
 8018f1c:	00001388 	.word	0x00001388
 8018f20:	efffffff 	.word	0xefffffff
 8018f24:	40010000 	.word	0x40010000
 8018f28:	ffffdfff 	.word	0xffffdfff
 8018f2c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018f30:	4b3a      	ldr	r3, [pc, #232]	@ (801901c <HAL_RCC_OscConfig+0x79c>)
 8018f32:	681a      	ldr	r2, [r3, #0]
 8018f34:	2380      	movs	r3, #128	@ 0x80
 8018f36:	049b      	lsls	r3, r3, #18
 8018f38:	4013      	ands	r3, r2
 8018f3a:	d1dc      	bne.n	8018ef6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018f3c:	4b37      	ldr	r3, [pc, #220]	@ (801901c <HAL_RCC_OscConfig+0x79c>)
 8018f3e:	68db      	ldr	r3, [r3, #12]
 8018f40:	4a37      	ldr	r2, [pc, #220]	@ (8019020 <HAL_RCC_OscConfig+0x7a0>)
 8018f42:	4013      	ands	r3, r2
 8018f44:	0019      	movs	r1, r3
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018f4e:	431a      	orrs	r2, r3
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018f54:	431a      	orrs	r2, r3
 8018f56:	4b31      	ldr	r3, [pc, #196]	@ (801901c <HAL_RCC_OscConfig+0x79c>)
 8018f58:	430a      	orrs	r2, r1
 8018f5a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8018f5c:	4b2f      	ldr	r3, [pc, #188]	@ (801901c <HAL_RCC_OscConfig+0x79c>)
 8018f5e:	681a      	ldr	r2, [r3, #0]
 8018f60:	4b2e      	ldr	r3, [pc, #184]	@ (801901c <HAL_RCC_OscConfig+0x79c>)
 8018f62:	2180      	movs	r1, #128	@ 0x80
 8018f64:	0449      	lsls	r1, r1, #17
 8018f66:	430a      	orrs	r2, r1
 8018f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018f6a:	f7f9 f8c1 	bl	80120f0 <HAL_GetTick>
 8018f6e:	0003      	movs	r3, r0
 8018f70:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8018f72:	e008      	b.n	8018f86 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018f74:	f7f9 f8bc 	bl	80120f0 <HAL_GetTick>
 8018f78:	0002      	movs	r2, r0
 8018f7a:	697b      	ldr	r3, [r7, #20]
 8018f7c:	1ad3      	subs	r3, r2, r3
 8018f7e:	2b02      	cmp	r3, #2
 8018f80:	d901      	bls.n	8018f86 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8018f82:	2303      	movs	r3, #3
 8018f84:	e045      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8018f86:	4b25      	ldr	r3, [pc, #148]	@ (801901c <HAL_RCC_OscConfig+0x79c>)
 8018f88:	681a      	ldr	r2, [r3, #0]
 8018f8a:	2380      	movs	r3, #128	@ 0x80
 8018f8c:	049b      	lsls	r3, r3, #18
 8018f8e:	4013      	ands	r3, r2
 8018f90:	d0f0      	beq.n	8018f74 <HAL_RCC_OscConfig+0x6f4>
 8018f92:	e03d      	b.n	8019010 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018f94:	4b21      	ldr	r3, [pc, #132]	@ (801901c <HAL_RCC_OscConfig+0x79c>)
 8018f96:	681a      	ldr	r2, [r3, #0]
 8018f98:	4b20      	ldr	r3, [pc, #128]	@ (801901c <HAL_RCC_OscConfig+0x79c>)
 8018f9a:	4922      	ldr	r1, [pc, #136]	@ (8019024 <HAL_RCC_OscConfig+0x7a4>)
 8018f9c:	400a      	ands	r2, r1
 8018f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018fa0:	f7f9 f8a6 	bl	80120f0 <HAL_GetTick>
 8018fa4:	0003      	movs	r3, r0
 8018fa6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018fa8:	e008      	b.n	8018fbc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018faa:	f7f9 f8a1 	bl	80120f0 <HAL_GetTick>
 8018fae:	0002      	movs	r2, r0
 8018fb0:	697b      	ldr	r3, [r7, #20]
 8018fb2:	1ad3      	subs	r3, r2, r3
 8018fb4:	2b02      	cmp	r3, #2
 8018fb6:	d901      	bls.n	8018fbc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8018fb8:	2303      	movs	r3, #3
 8018fba:	e02a      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8018fbc:	4b17      	ldr	r3, [pc, #92]	@ (801901c <HAL_RCC_OscConfig+0x79c>)
 8018fbe:	681a      	ldr	r2, [r3, #0]
 8018fc0:	2380      	movs	r3, #128	@ 0x80
 8018fc2:	049b      	lsls	r3, r3, #18
 8018fc4:	4013      	ands	r3, r2
 8018fc6:	d1f0      	bne.n	8018faa <HAL_RCC_OscConfig+0x72a>
 8018fc8:	e022      	b.n	8019010 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018fce:	2b01      	cmp	r3, #1
 8018fd0:	d101      	bne.n	8018fd6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8018fd2:	2301      	movs	r3, #1
 8018fd4:	e01d      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8018fd6:	4b11      	ldr	r3, [pc, #68]	@ (801901c <HAL_RCC_OscConfig+0x79c>)
 8018fd8:	68db      	ldr	r3, [r3, #12]
 8018fda:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018fdc:	69ba      	ldr	r2, [r7, #24]
 8018fde:	2380      	movs	r3, #128	@ 0x80
 8018fe0:	025b      	lsls	r3, r3, #9
 8018fe2:	401a      	ands	r2, r3
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018fe8:	429a      	cmp	r2, r3
 8018fea:	d10f      	bne.n	801900c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8018fec:	69ba      	ldr	r2, [r7, #24]
 8018fee:	23f0      	movs	r3, #240	@ 0xf0
 8018ff0:	039b      	lsls	r3, r3, #14
 8018ff2:	401a      	ands	r2, r3
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018ff8:	429a      	cmp	r2, r3
 8018ffa:	d107      	bne.n	801900c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8018ffc:	69ba      	ldr	r2, [r7, #24]
 8018ffe:	23c0      	movs	r3, #192	@ 0xc0
 8019000:	041b      	lsls	r3, r3, #16
 8019002:	401a      	ands	r2, r3
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8019008:	429a      	cmp	r2, r3
 801900a:	d001      	beq.n	8019010 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801900c:	2301      	movs	r3, #1
 801900e:	e000      	b.n	8019012 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8019010:	2300      	movs	r3, #0
}
 8019012:	0018      	movs	r0, r3
 8019014:	46bd      	mov	sp, r7
 8019016:	b00a      	add	sp, #40	@ 0x28
 8019018:	bdb0      	pop	{r4, r5, r7, pc}
 801901a:	46c0      	nop			@ (mov r8, r8)
 801901c:	40021000 	.word	0x40021000
 8019020:	ff02ffff 	.word	0xff02ffff
 8019024:	feffffff 	.word	0xfeffffff

08019028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8019028:	b5b0      	push	{r4, r5, r7, lr}
 801902a:	b084      	sub	sp, #16
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
 8019030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d101      	bne.n	801903c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8019038:	2301      	movs	r3, #1
 801903a:	e128      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801903c:	4b96      	ldr	r3, [pc, #600]	@ (8019298 <HAL_RCC_ClockConfig+0x270>)
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	2201      	movs	r2, #1
 8019042:	4013      	ands	r3, r2
 8019044:	683a      	ldr	r2, [r7, #0]
 8019046:	429a      	cmp	r2, r3
 8019048:	d91e      	bls.n	8019088 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801904a:	4b93      	ldr	r3, [pc, #588]	@ (8019298 <HAL_RCC_ClockConfig+0x270>)
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	2201      	movs	r2, #1
 8019050:	4393      	bics	r3, r2
 8019052:	0019      	movs	r1, r3
 8019054:	4b90      	ldr	r3, [pc, #576]	@ (8019298 <HAL_RCC_ClockConfig+0x270>)
 8019056:	683a      	ldr	r2, [r7, #0]
 8019058:	430a      	orrs	r2, r1
 801905a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801905c:	f7f9 f848 	bl	80120f0 <HAL_GetTick>
 8019060:	0003      	movs	r3, r0
 8019062:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8019064:	e009      	b.n	801907a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019066:	f7f9 f843 	bl	80120f0 <HAL_GetTick>
 801906a:	0002      	movs	r2, r0
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	1ad3      	subs	r3, r2, r3
 8019070:	4a8a      	ldr	r2, [pc, #552]	@ (801929c <HAL_RCC_ClockConfig+0x274>)
 8019072:	4293      	cmp	r3, r2
 8019074:	d901      	bls.n	801907a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8019076:	2303      	movs	r3, #3
 8019078:	e109      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801907a:	4b87      	ldr	r3, [pc, #540]	@ (8019298 <HAL_RCC_ClockConfig+0x270>)
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	2201      	movs	r2, #1
 8019080:	4013      	ands	r3, r2
 8019082:	683a      	ldr	r2, [r7, #0]
 8019084:	429a      	cmp	r2, r3
 8019086:	d1ee      	bne.n	8019066 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	2202      	movs	r2, #2
 801908e:	4013      	ands	r3, r2
 8019090:	d009      	beq.n	80190a6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8019092:	4b83      	ldr	r3, [pc, #524]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 8019094:	68db      	ldr	r3, [r3, #12]
 8019096:	22f0      	movs	r2, #240	@ 0xf0
 8019098:	4393      	bics	r3, r2
 801909a:	0019      	movs	r1, r3
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	689a      	ldr	r2, [r3, #8]
 80190a0:	4b7f      	ldr	r3, [pc, #508]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 80190a2:	430a      	orrs	r2, r1
 80190a4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	2201      	movs	r2, #1
 80190ac:	4013      	ands	r3, r2
 80190ae:	d100      	bne.n	80190b2 <HAL_RCC_ClockConfig+0x8a>
 80190b0:	e089      	b.n	80191c6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	685b      	ldr	r3, [r3, #4]
 80190b6:	2b02      	cmp	r3, #2
 80190b8:	d107      	bne.n	80190ca <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80190ba:	4b79      	ldr	r3, [pc, #484]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 80190bc:	681a      	ldr	r2, [r3, #0]
 80190be:	2380      	movs	r3, #128	@ 0x80
 80190c0:	029b      	lsls	r3, r3, #10
 80190c2:	4013      	ands	r3, r2
 80190c4:	d120      	bne.n	8019108 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80190c6:	2301      	movs	r3, #1
 80190c8:	e0e1      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	685b      	ldr	r3, [r3, #4]
 80190ce:	2b03      	cmp	r3, #3
 80190d0:	d107      	bne.n	80190e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80190d2:	4b73      	ldr	r3, [pc, #460]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 80190d4:	681a      	ldr	r2, [r3, #0]
 80190d6:	2380      	movs	r3, #128	@ 0x80
 80190d8:	049b      	lsls	r3, r3, #18
 80190da:	4013      	ands	r3, r2
 80190dc:	d114      	bne.n	8019108 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80190de:	2301      	movs	r3, #1
 80190e0:	e0d5      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	685b      	ldr	r3, [r3, #4]
 80190e6:	2b01      	cmp	r3, #1
 80190e8:	d106      	bne.n	80190f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80190ea:	4b6d      	ldr	r3, [pc, #436]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	2204      	movs	r2, #4
 80190f0:	4013      	ands	r3, r2
 80190f2:	d109      	bne.n	8019108 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80190f4:	2301      	movs	r3, #1
 80190f6:	e0ca      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80190f8:	4b69      	ldr	r3, [pc, #420]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 80190fa:	681a      	ldr	r2, [r3, #0]
 80190fc:	2380      	movs	r3, #128	@ 0x80
 80190fe:	009b      	lsls	r3, r3, #2
 8019100:	4013      	ands	r3, r2
 8019102:	d101      	bne.n	8019108 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8019104:	2301      	movs	r3, #1
 8019106:	e0c2      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8019108:	4b65      	ldr	r3, [pc, #404]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 801910a:	68db      	ldr	r3, [r3, #12]
 801910c:	2203      	movs	r2, #3
 801910e:	4393      	bics	r3, r2
 8019110:	0019      	movs	r1, r3
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	685a      	ldr	r2, [r3, #4]
 8019116:	4b62      	ldr	r3, [pc, #392]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 8019118:	430a      	orrs	r2, r1
 801911a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801911c:	f7f8 ffe8 	bl	80120f0 <HAL_GetTick>
 8019120:	0003      	movs	r3, r0
 8019122:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	685b      	ldr	r3, [r3, #4]
 8019128:	2b02      	cmp	r3, #2
 801912a:	d111      	bne.n	8019150 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801912c:	e009      	b.n	8019142 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801912e:	f7f8 ffdf 	bl	80120f0 <HAL_GetTick>
 8019132:	0002      	movs	r2, r0
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	1ad3      	subs	r3, r2, r3
 8019138:	4a58      	ldr	r2, [pc, #352]	@ (801929c <HAL_RCC_ClockConfig+0x274>)
 801913a:	4293      	cmp	r3, r2
 801913c:	d901      	bls.n	8019142 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801913e:	2303      	movs	r3, #3
 8019140:	e0a5      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8019142:	4b57      	ldr	r3, [pc, #348]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 8019144:	68db      	ldr	r3, [r3, #12]
 8019146:	220c      	movs	r2, #12
 8019148:	4013      	ands	r3, r2
 801914a:	2b08      	cmp	r3, #8
 801914c:	d1ef      	bne.n	801912e <HAL_RCC_ClockConfig+0x106>
 801914e:	e03a      	b.n	80191c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	685b      	ldr	r3, [r3, #4]
 8019154:	2b03      	cmp	r3, #3
 8019156:	d111      	bne.n	801917c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8019158:	e009      	b.n	801916e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801915a:	f7f8 ffc9 	bl	80120f0 <HAL_GetTick>
 801915e:	0002      	movs	r2, r0
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	1ad3      	subs	r3, r2, r3
 8019164:	4a4d      	ldr	r2, [pc, #308]	@ (801929c <HAL_RCC_ClockConfig+0x274>)
 8019166:	4293      	cmp	r3, r2
 8019168:	d901      	bls.n	801916e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801916a:	2303      	movs	r3, #3
 801916c:	e08f      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801916e:	4b4c      	ldr	r3, [pc, #304]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 8019170:	68db      	ldr	r3, [r3, #12]
 8019172:	220c      	movs	r2, #12
 8019174:	4013      	ands	r3, r2
 8019176:	2b0c      	cmp	r3, #12
 8019178:	d1ef      	bne.n	801915a <HAL_RCC_ClockConfig+0x132>
 801917a:	e024      	b.n	80191c6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	685b      	ldr	r3, [r3, #4]
 8019180:	2b01      	cmp	r3, #1
 8019182:	d11b      	bne.n	80191bc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8019184:	e009      	b.n	801919a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019186:	f7f8 ffb3 	bl	80120f0 <HAL_GetTick>
 801918a:	0002      	movs	r2, r0
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	1ad3      	subs	r3, r2, r3
 8019190:	4a42      	ldr	r2, [pc, #264]	@ (801929c <HAL_RCC_ClockConfig+0x274>)
 8019192:	4293      	cmp	r3, r2
 8019194:	d901      	bls.n	801919a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8019196:	2303      	movs	r3, #3
 8019198:	e079      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801919a:	4b41      	ldr	r3, [pc, #260]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 801919c:	68db      	ldr	r3, [r3, #12]
 801919e:	220c      	movs	r2, #12
 80191a0:	4013      	ands	r3, r2
 80191a2:	2b04      	cmp	r3, #4
 80191a4:	d1ef      	bne.n	8019186 <HAL_RCC_ClockConfig+0x15e>
 80191a6:	e00e      	b.n	80191c6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80191a8:	f7f8 ffa2 	bl	80120f0 <HAL_GetTick>
 80191ac:	0002      	movs	r2, r0
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	1ad3      	subs	r3, r2, r3
 80191b2:	4a3a      	ldr	r2, [pc, #232]	@ (801929c <HAL_RCC_ClockConfig+0x274>)
 80191b4:	4293      	cmp	r3, r2
 80191b6:	d901      	bls.n	80191bc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80191b8:	2303      	movs	r3, #3
 80191ba:	e068      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80191bc:	4b38      	ldr	r3, [pc, #224]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 80191be:	68db      	ldr	r3, [r3, #12]
 80191c0:	220c      	movs	r2, #12
 80191c2:	4013      	ands	r3, r2
 80191c4:	d1f0      	bne.n	80191a8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80191c6:	4b34      	ldr	r3, [pc, #208]	@ (8019298 <HAL_RCC_ClockConfig+0x270>)
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	2201      	movs	r2, #1
 80191cc:	4013      	ands	r3, r2
 80191ce:	683a      	ldr	r2, [r7, #0]
 80191d0:	429a      	cmp	r2, r3
 80191d2:	d21e      	bcs.n	8019212 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80191d4:	4b30      	ldr	r3, [pc, #192]	@ (8019298 <HAL_RCC_ClockConfig+0x270>)
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	2201      	movs	r2, #1
 80191da:	4393      	bics	r3, r2
 80191dc:	0019      	movs	r1, r3
 80191de:	4b2e      	ldr	r3, [pc, #184]	@ (8019298 <HAL_RCC_ClockConfig+0x270>)
 80191e0:	683a      	ldr	r2, [r7, #0]
 80191e2:	430a      	orrs	r2, r1
 80191e4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80191e6:	f7f8 ff83 	bl	80120f0 <HAL_GetTick>
 80191ea:	0003      	movs	r3, r0
 80191ec:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80191ee:	e009      	b.n	8019204 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80191f0:	f7f8 ff7e 	bl	80120f0 <HAL_GetTick>
 80191f4:	0002      	movs	r2, r0
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	1ad3      	subs	r3, r2, r3
 80191fa:	4a28      	ldr	r2, [pc, #160]	@ (801929c <HAL_RCC_ClockConfig+0x274>)
 80191fc:	4293      	cmp	r3, r2
 80191fe:	d901      	bls.n	8019204 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8019200:	2303      	movs	r3, #3
 8019202:	e044      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8019204:	4b24      	ldr	r3, [pc, #144]	@ (8019298 <HAL_RCC_ClockConfig+0x270>)
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	2201      	movs	r2, #1
 801920a:	4013      	ands	r3, r2
 801920c:	683a      	ldr	r2, [r7, #0]
 801920e:	429a      	cmp	r2, r3
 8019210:	d1ee      	bne.n	80191f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	2204      	movs	r2, #4
 8019218:	4013      	ands	r3, r2
 801921a:	d009      	beq.n	8019230 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801921c:	4b20      	ldr	r3, [pc, #128]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 801921e:	68db      	ldr	r3, [r3, #12]
 8019220:	4a20      	ldr	r2, [pc, #128]	@ (80192a4 <HAL_RCC_ClockConfig+0x27c>)
 8019222:	4013      	ands	r3, r2
 8019224:	0019      	movs	r1, r3
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	68da      	ldr	r2, [r3, #12]
 801922a:	4b1d      	ldr	r3, [pc, #116]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 801922c:	430a      	orrs	r2, r1
 801922e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	2208      	movs	r2, #8
 8019236:	4013      	ands	r3, r2
 8019238:	d00a      	beq.n	8019250 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801923a:	4b19      	ldr	r3, [pc, #100]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 801923c:	68db      	ldr	r3, [r3, #12]
 801923e:	4a1a      	ldr	r2, [pc, #104]	@ (80192a8 <HAL_RCC_ClockConfig+0x280>)
 8019240:	4013      	ands	r3, r2
 8019242:	0019      	movs	r1, r3
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	691b      	ldr	r3, [r3, #16]
 8019248:	00da      	lsls	r2, r3, #3
 801924a:	4b15      	ldr	r3, [pc, #84]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 801924c:	430a      	orrs	r2, r1
 801924e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8019250:	f000 f832 	bl	80192b8 <HAL_RCC_GetSysClockFreq>
 8019254:	0001      	movs	r1, r0
 8019256:	4b12      	ldr	r3, [pc, #72]	@ (80192a0 <HAL_RCC_ClockConfig+0x278>)
 8019258:	68db      	ldr	r3, [r3, #12]
 801925a:	091b      	lsrs	r3, r3, #4
 801925c:	220f      	movs	r2, #15
 801925e:	4013      	ands	r3, r2
 8019260:	4a12      	ldr	r2, [pc, #72]	@ (80192ac <HAL_RCC_ClockConfig+0x284>)
 8019262:	5cd3      	ldrb	r3, [r2, r3]
 8019264:	000a      	movs	r2, r1
 8019266:	40da      	lsrs	r2, r3
 8019268:	4b11      	ldr	r3, [pc, #68]	@ (80192b0 <HAL_RCC_ClockConfig+0x288>)
 801926a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801926c:	4b11      	ldr	r3, [pc, #68]	@ (80192b4 <HAL_RCC_ClockConfig+0x28c>)
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	250b      	movs	r5, #11
 8019272:	197c      	adds	r4, r7, r5
 8019274:	0018      	movs	r0, r3
 8019276:	f7f8 fef5 	bl	8012064 <HAL_InitTick>
 801927a:	0003      	movs	r3, r0
 801927c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801927e:	197b      	adds	r3, r7, r5
 8019280:	781b      	ldrb	r3, [r3, #0]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d002      	beq.n	801928c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8019286:	197b      	adds	r3, r7, r5
 8019288:	781b      	ldrb	r3, [r3, #0]
 801928a:	e000      	b.n	801928e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801928c:	2300      	movs	r3, #0
}
 801928e:	0018      	movs	r0, r3
 8019290:	46bd      	mov	sp, r7
 8019292:	b004      	add	sp, #16
 8019294:	bdb0      	pop	{r4, r5, r7, pc}
 8019296:	46c0      	nop			@ (mov r8, r8)
 8019298:	40022000 	.word	0x40022000
 801929c:	00001388 	.word	0x00001388
 80192a0:	40021000 	.word	0x40021000
 80192a4:	fffff8ff 	.word	0xfffff8ff
 80192a8:	ffffc7ff 	.word	0xffffc7ff
 80192ac:	0802b238 	.word	0x0802b238
 80192b0:	200000e0 	.word	0x200000e0
 80192b4:	200000f0 	.word	0x200000f0

080192b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80192b8:	b5b0      	push	{r4, r5, r7, lr}
 80192ba:	b08e      	sub	sp, #56	@ 0x38
 80192bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80192be:	4b4c      	ldr	r3, [pc, #304]	@ (80193f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80192c0:	68db      	ldr	r3, [r3, #12]
 80192c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80192c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80192c6:	230c      	movs	r3, #12
 80192c8:	4013      	ands	r3, r2
 80192ca:	2b0c      	cmp	r3, #12
 80192cc:	d014      	beq.n	80192f8 <HAL_RCC_GetSysClockFreq+0x40>
 80192ce:	d900      	bls.n	80192d2 <HAL_RCC_GetSysClockFreq+0x1a>
 80192d0:	e07b      	b.n	80193ca <HAL_RCC_GetSysClockFreq+0x112>
 80192d2:	2b04      	cmp	r3, #4
 80192d4:	d002      	beq.n	80192dc <HAL_RCC_GetSysClockFreq+0x24>
 80192d6:	2b08      	cmp	r3, #8
 80192d8:	d00b      	beq.n	80192f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80192da:	e076      	b.n	80193ca <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80192dc:	4b44      	ldr	r3, [pc, #272]	@ (80193f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	2210      	movs	r2, #16
 80192e2:	4013      	ands	r3, r2
 80192e4:	d002      	beq.n	80192ec <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80192e6:	4b43      	ldr	r3, [pc, #268]	@ (80193f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80192e8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80192ea:	e07c      	b.n	80193e6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80192ec:	4b42      	ldr	r3, [pc, #264]	@ (80193f8 <HAL_RCC_GetSysClockFreq+0x140>)
 80192ee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80192f0:	e079      	b.n	80193e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80192f2:	4b42      	ldr	r3, [pc, #264]	@ (80193fc <HAL_RCC_GetSysClockFreq+0x144>)
 80192f4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80192f6:	e076      	b.n	80193e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80192f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80192fa:	0c9a      	lsrs	r2, r3, #18
 80192fc:	230f      	movs	r3, #15
 80192fe:	401a      	ands	r2, r3
 8019300:	4b3f      	ldr	r3, [pc, #252]	@ (8019400 <HAL_RCC_GetSysClockFreq+0x148>)
 8019302:	5c9b      	ldrb	r3, [r3, r2]
 8019304:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8019306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019308:	0d9a      	lsrs	r2, r3, #22
 801930a:	2303      	movs	r3, #3
 801930c:	4013      	ands	r3, r2
 801930e:	3301      	adds	r3, #1
 8019310:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8019312:	4b37      	ldr	r3, [pc, #220]	@ (80193f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8019314:	68da      	ldr	r2, [r3, #12]
 8019316:	2380      	movs	r3, #128	@ 0x80
 8019318:	025b      	lsls	r3, r3, #9
 801931a:	4013      	ands	r3, r2
 801931c:	d01a      	beq.n	8019354 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801931e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019320:	61bb      	str	r3, [r7, #24]
 8019322:	2300      	movs	r3, #0
 8019324:	61fb      	str	r3, [r7, #28]
 8019326:	4a35      	ldr	r2, [pc, #212]	@ (80193fc <HAL_RCC_GetSysClockFreq+0x144>)
 8019328:	2300      	movs	r3, #0
 801932a:	69b8      	ldr	r0, [r7, #24]
 801932c:	69f9      	ldr	r1, [r7, #28]
 801932e:	f7e7 f947 	bl	80005c0 <__aeabi_lmul>
 8019332:	0002      	movs	r2, r0
 8019334:	000b      	movs	r3, r1
 8019336:	0010      	movs	r0, r2
 8019338:	0019      	movs	r1, r3
 801933a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801933c:	613b      	str	r3, [r7, #16]
 801933e:	2300      	movs	r3, #0
 8019340:	617b      	str	r3, [r7, #20]
 8019342:	693a      	ldr	r2, [r7, #16]
 8019344:	697b      	ldr	r3, [r7, #20]
 8019346:	f7e7 f91b 	bl	8000580 <__aeabi_uldivmod>
 801934a:	0002      	movs	r2, r0
 801934c:	000b      	movs	r3, r1
 801934e:	0013      	movs	r3, r2
 8019350:	637b      	str	r3, [r7, #52]	@ 0x34
 8019352:	e037      	b.n	80193c4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8019354:	4b26      	ldr	r3, [pc, #152]	@ (80193f0 <HAL_RCC_GetSysClockFreq+0x138>)
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	2210      	movs	r2, #16
 801935a:	4013      	ands	r3, r2
 801935c:	d01a      	beq.n	8019394 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801935e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019360:	60bb      	str	r3, [r7, #8]
 8019362:	2300      	movs	r3, #0
 8019364:	60fb      	str	r3, [r7, #12]
 8019366:	4a23      	ldr	r2, [pc, #140]	@ (80193f4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8019368:	2300      	movs	r3, #0
 801936a:	68b8      	ldr	r0, [r7, #8]
 801936c:	68f9      	ldr	r1, [r7, #12]
 801936e:	f7e7 f927 	bl	80005c0 <__aeabi_lmul>
 8019372:	0002      	movs	r2, r0
 8019374:	000b      	movs	r3, r1
 8019376:	0010      	movs	r0, r2
 8019378:	0019      	movs	r1, r3
 801937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801937c:	603b      	str	r3, [r7, #0]
 801937e:	2300      	movs	r3, #0
 8019380:	607b      	str	r3, [r7, #4]
 8019382:	683a      	ldr	r2, [r7, #0]
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	f7e7 f8fb 	bl	8000580 <__aeabi_uldivmod>
 801938a:	0002      	movs	r2, r0
 801938c:	000b      	movs	r3, r1
 801938e:	0013      	movs	r3, r2
 8019390:	637b      	str	r3, [r7, #52]	@ 0x34
 8019392:	e017      	b.n	80193c4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8019394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019396:	0018      	movs	r0, r3
 8019398:	2300      	movs	r3, #0
 801939a:	0019      	movs	r1, r3
 801939c:	4a16      	ldr	r2, [pc, #88]	@ (80193f8 <HAL_RCC_GetSysClockFreq+0x140>)
 801939e:	2300      	movs	r3, #0
 80193a0:	f7e7 f90e 	bl	80005c0 <__aeabi_lmul>
 80193a4:	0002      	movs	r2, r0
 80193a6:	000b      	movs	r3, r1
 80193a8:	0010      	movs	r0, r2
 80193aa:	0019      	movs	r1, r3
 80193ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80193ae:	001c      	movs	r4, r3
 80193b0:	2300      	movs	r3, #0
 80193b2:	001d      	movs	r5, r3
 80193b4:	0022      	movs	r2, r4
 80193b6:	002b      	movs	r3, r5
 80193b8:	f7e7 f8e2 	bl	8000580 <__aeabi_uldivmod>
 80193bc:	0002      	movs	r2, r0
 80193be:	000b      	movs	r3, r1
 80193c0:	0013      	movs	r3, r2
 80193c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80193c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80193c6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80193c8:	e00d      	b.n	80193e6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80193ca:	4b09      	ldr	r3, [pc, #36]	@ (80193f0 <HAL_RCC_GetSysClockFreq+0x138>)
 80193cc:	685b      	ldr	r3, [r3, #4]
 80193ce:	0b5b      	lsrs	r3, r3, #13
 80193d0:	2207      	movs	r2, #7
 80193d2:	4013      	ands	r3, r2
 80193d4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80193d6:	6a3b      	ldr	r3, [r7, #32]
 80193d8:	3301      	adds	r3, #1
 80193da:	2280      	movs	r2, #128	@ 0x80
 80193dc:	0212      	lsls	r2, r2, #8
 80193de:	409a      	lsls	r2, r3
 80193e0:	0013      	movs	r3, r2
 80193e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80193e4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80193e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80193e8:	0018      	movs	r0, r3
 80193ea:	46bd      	mov	sp, r7
 80193ec:	b00e      	add	sp, #56	@ 0x38
 80193ee:	bdb0      	pop	{r4, r5, r7, pc}
 80193f0:	40021000 	.word	0x40021000
 80193f4:	003d0900 	.word	0x003d0900
 80193f8:	00f42400 	.word	0x00f42400
 80193fc:	007a1200 	.word	0x007a1200
 8019400:	0802b250 	.word	0x0802b250

08019404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019404:	b580      	push	{r7, lr}
 8019406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019408:	4b02      	ldr	r3, [pc, #8]	@ (8019414 <HAL_RCC_GetHCLKFreq+0x10>)
 801940a:	681b      	ldr	r3, [r3, #0]
}
 801940c:	0018      	movs	r0, r3
 801940e:	46bd      	mov	sp, r7
 8019410:	bd80      	pop	{r7, pc}
 8019412:	46c0      	nop			@ (mov r8, r8)
 8019414:	200000e0 	.word	0x200000e0

08019418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801941c:	f7ff fff2 	bl	8019404 <HAL_RCC_GetHCLKFreq>
 8019420:	0001      	movs	r1, r0
 8019422:	4b06      	ldr	r3, [pc, #24]	@ (801943c <HAL_RCC_GetPCLK1Freq+0x24>)
 8019424:	68db      	ldr	r3, [r3, #12]
 8019426:	0a1b      	lsrs	r3, r3, #8
 8019428:	2207      	movs	r2, #7
 801942a:	4013      	ands	r3, r2
 801942c:	4a04      	ldr	r2, [pc, #16]	@ (8019440 <HAL_RCC_GetPCLK1Freq+0x28>)
 801942e:	5cd3      	ldrb	r3, [r2, r3]
 8019430:	40d9      	lsrs	r1, r3
 8019432:	000b      	movs	r3, r1
}
 8019434:	0018      	movs	r0, r3
 8019436:	46bd      	mov	sp, r7
 8019438:	bd80      	pop	{r7, pc}
 801943a:	46c0      	nop			@ (mov r8, r8)
 801943c:	40021000 	.word	0x40021000
 8019440:	0802b248 	.word	0x0802b248

08019444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019444:	b580      	push	{r7, lr}
 8019446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8019448:	f7ff ffdc 	bl	8019404 <HAL_RCC_GetHCLKFreq>
 801944c:	0001      	movs	r1, r0
 801944e:	4b06      	ldr	r3, [pc, #24]	@ (8019468 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019450:	68db      	ldr	r3, [r3, #12]
 8019452:	0adb      	lsrs	r3, r3, #11
 8019454:	2207      	movs	r2, #7
 8019456:	4013      	ands	r3, r2
 8019458:	4a04      	ldr	r2, [pc, #16]	@ (801946c <HAL_RCC_GetPCLK2Freq+0x28>)
 801945a:	5cd3      	ldrb	r3, [r2, r3]
 801945c:	40d9      	lsrs	r1, r3
 801945e:	000b      	movs	r3, r1
}
 8019460:	0018      	movs	r0, r3
 8019462:	46bd      	mov	sp, r7
 8019464:	bd80      	pop	{r7, pc}
 8019466:	46c0      	nop			@ (mov r8, r8)
 8019468:	40021000 	.word	0x40021000
 801946c:	0802b248 	.word	0x0802b248

08019470 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b086      	sub	sp, #24
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8019478:	2017      	movs	r0, #23
 801947a:	183b      	adds	r3, r7, r0
 801947c:	2200      	movs	r2, #0
 801947e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	2220      	movs	r2, #32
 8019486:	4013      	ands	r3, r2
 8019488:	d100      	bne.n	801948c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801948a:	e0c7      	b.n	801961c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801948c:	4b9b      	ldr	r3, [pc, #620]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801948e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019490:	2380      	movs	r3, #128	@ 0x80
 8019492:	055b      	lsls	r3, r3, #21
 8019494:	4013      	ands	r3, r2
 8019496:	d109      	bne.n	80194ac <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8019498:	4b98      	ldr	r3, [pc, #608]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801949a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801949c:	4b97      	ldr	r3, [pc, #604]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801949e:	2180      	movs	r1, #128	@ 0x80
 80194a0:	0549      	lsls	r1, r1, #21
 80194a2:	430a      	orrs	r2, r1
 80194a4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80194a6:	183b      	adds	r3, r7, r0
 80194a8:	2201      	movs	r2, #1
 80194aa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80194ac:	4b94      	ldr	r3, [pc, #592]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80194ae:	681a      	ldr	r2, [r3, #0]
 80194b0:	2380      	movs	r3, #128	@ 0x80
 80194b2:	005b      	lsls	r3, r3, #1
 80194b4:	4013      	ands	r3, r2
 80194b6:	d11a      	bne.n	80194ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80194b8:	4b91      	ldr	r3, [pc, #580]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80194ba:	681a      	ldr	r2, [r3, #0]
 80194bc:	4b90      	ldr	r3, [pc, #576]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80194be:	2180      	movs	r1, #128	@ 0x80
 80194c0:	0049      	lsls	r1, r1, #1
 80194c2:	430a      	orrs	r2, r1
 80194c4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80194c6:	f7f8 fe13 	bl	80120f0 <HAL_GetTick>
 80194ca:	0003      	movs	r3, r0
 80194cc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80194ce:	e008      	b.n	80194e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80194d0:	f7f8 fe0e 	bl	80120f0 <HAL_GetTick>
 80194d4:	0002      	movs	r2, r0
 80194d6:	693b      	ldr	r3, [r7, #16]
 80194d8:	1ad3      	subs	r3, r2, r3
 80194da:	2b64      	cmp	r3, #100	@ 0x64
 80194dc:	d901      	bls.n	80194e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80194de:	2303      	movs	r3, #3
 80194e0:	e107      	b.n	80196f2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80194e2:	4b87      	ldr	r3, [pc, #540]	@ (8019700 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80194e4:	681a      	ldr	r2, [r3, #0]
 80194e6:	2380      	movs	r3, #128	@ 0x80
 80194e8:	005b      	lsls	r3, r3, #1
 80194ea:	4013      	ands	r3, r2
 80194ec:	d0f0      	beq.n	80194d0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80194ee:	4b83      	ldr	r3, [pc, #524]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80194f0:	681a      	ldr	r2, [r3, #0]
 80194f2:	23c0      	movs	r3, #192	@ 0xc0
 80194f4:	039b      	lsls	r3, r3, #14
 80194f6:	4013      	ands	r3, r2
 80194f8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	685a      	ldr	r2, [r3, #4]
 80194fe:	23c0      	movs	r3, #192	@ 0xc0
 8019500:	039b      	lsls	r3, r3, #14
 8019502:	4013      	ands	r3, r2
 8019504:	68fa      	ldr	r2, [r7, #12]
 8019506:	429a      	cmp	r2, r3
 8019508:	d013      	beq.n	8019532 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	685a      	ldr	r2, [r3, #4]
 801950e:	23c0      	movs	r3, #192	@ 0xc0
 8019510:	029b      	lsls	r3, r3, #10
 8019512:	401a      	ands	r2, r3
 8019514:	23c0      	movs	r3, #192	@ 0xc0
 8019516:	029b      	lsls	r3, r3, #10
 8019518:	429a      	cmp	r2, r3
 801951a:	d10a      	bne.n	8019532 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801951c:	4b77      	ldr	r3, [pc, #476]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801951e:	681a      	ldr	r2, [r3, #0]
 8019520:	2380      	movs	r3, #128	@ 0x80
 8019522:	029b      	lsls	r3, r3, #10
 8019524:	401a      	ands	r2, r3
 8019526:	2380      	movs	r3, #128	@ 0x80
 8019528:	029b      	lsls	r3, r3, #10
 801952a:	429a      	cmp	r2, r3
 801952c:	d101      	bne.n	8019532 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801952e:	2301      	movs	r3, #1
 8019530:	e0df      	b.n	80196f2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8019532:	4b72      	ldr	r3, [pc, #456]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019534:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019536:	23c0      	movs	r3, #192	@ 0xc0
 8019538:	029b      	lsls	r3, r3, #10
 801953a:	4013      	ands	r3, r2
 801953c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d03b      	beq.n	80195bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	685a      	ldr	r2, [r3, #4]
 8019548:	23c0      	movs	r3, #192	@ 0xc0
 801954a:	029b      	lsls	r3, r3, #10
 801954c:	4013      	ands	r3, r2
 801954e:	68fa      	ldr	r2, [r7, #12]
 8019550:	429a      	cmp	r2, r3
 8019552:	d033      	beq.n	80195bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	2220      	movs	r2, #32
 801955a:	4013      	ands	r3, r2
 801955c:	d02e      	beq.n	80195bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801955e:	4b67      	ldr	r3, [pc, #412]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019562:	4a68      	ldr	r2, [pc, #416]	@ (8019704 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8019564:	4013      	ands	r3, r2
 8019566:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8019568:	4b64      	ldr	r3, [pc, #400]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801956a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801956c:	4b63      	ldr	r3, [pc, #396]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801956e:	2180      	movs	r1, #128	@ 0x80
 8019570:	0309      	lsls	r1, r1, #12
 8019572:	430a      	orrs	r2, r1
 8019574:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8019576:	4b61      	ldr	r3, [pc, #388]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019578:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801957a:	4b60      	ldr	r3, [pc, #384]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801957c:	4962      	ldr	r1, [pc, #392]	@ (8019708 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801957e:	400a      	ands	r2, r1
 8019580:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8019582:	4b5e      	ldr	r3, [pc, #376]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019584:	68fa      	ldr	r2, [r7, #12]
 8019586:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8019588:	68fa      	ldr	r2, [r7, #12]
 801958a:	2380      	movs	r3, #128	@ 0x80
 801958c:	005b      	lsls	r3, r3, #1
 801958e:	4013      	ands	r3, r2
 8019590:	d014      	beq.n	80195bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8019592:	f7f8 fdad 	bl	80120f0 <HAL_GetTick>
 8019596:	0003      	movs	r3, r0
 8019598:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801959a:	e009      	b.n	80195b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801959c:	f7f8 fda8 	bl	80120f0 <HAL_GetTick>
 80195a0:	0002      	movs	r2, r0
 80195a2:	693b      	ldr	r3, [r7, #16]
 80195a4:	1ad3      	subs	r3, r2, r3
 80195a6:	4a59      	ldr	r2, [pc, #356]	@ (801970c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80195a8:	4293      	cmp	r3, r2
 80195aa:	d901      	bls.n	80195b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80195ac:	2303      	movs	r3, #3
 80195ae:	e0a0      	b.n	80196f2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80195b0:	4b52      	ldr	r3, [pc, #328]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80195b4:	2380      	movs	r3, #128	@ 0x80
 80195b6:	009b      	lsls	r3, r3, #2
 80195b8:	4013      	ands	r3, r2
 80195ba:	d0ef      	beq.n	801959c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	2220      	movs	r2, #32
 80195c2:	4013      	ands	r3, r2
 80195c4:	d01f      	beq.n	8019606 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	685a      	ldr	r2, [r3, #4]
 80195ca:	23c0      	movs	r3, #192	@ 0xc0
 80195cc:	029b      	lsls	r3, r3, #10
 80195ce:	401a      	ands	r2, r3
 80195d0:	23c0      	movs	r3, #192	@ 0xc0
 80195d2:	029b      	lsls	r3, r3, #10
 80195d4:	429a      	cmp	r2, r3
 80195d6:	d10c      	bne.n	80195f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80195d8:	4b48      	ldr	r3, [pc, #288]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	4a4c      	ldr	r2, [pc, #304]	@ (8019710 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80195de:	4013      	ands	r3, r2
 80195e0:	0019      	movs	r1, r3
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	685a      	ldr	r2, [r3, #4]
 80195e6:	23c0      	movs	r3, #192	@ 0xc0
 80195e8:	039b      	lsls	r3, r3, #14
 80195ea:	401a      	ands	r2, r3
 80195ec:	4b43      	ldr	r3, [pc, #268]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195ee:	430a      	orrs	r2, r1
 80195f0:	601a      	str	r2, [r3, #0]
 80195f2:	4b42      	ldr	r3, [pc, #264]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80195f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	685a      	ldr	r2, [r3, #4]
 80195fa:	23c0      	movs	r3, #192	@ 0xc0
 80195fc:	029b      	lsls	r3, r3, #10
 80195fe:	401a      	ands	r2, r3
 8019600:	4b3e      	ldr	r3, [pc, #248]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019602:	430a      	orrs	r2, r1
 8019604:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8019606:	2317      	movs	r3, #23
 8019608:	18fb      	adds	r3, r7, r3
 801960a:	781b      	ldrb	r3, [r3, #0]
 801960c:	2b01      	cmp	r3, #1
 801960e:	d105      	bne.n	801961c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019610:	4b3a      	ldr	r3, [pc, #232]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019614:	4b39      	ldr	r3, [pc, #228]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019616:	493f      	ldr	r1, [pc, #252]	@ (8019714 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8019618:	400a      	ands	r2, r1
 801961a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	2201      	movs	r2, #1
 8019622:	4013      	ands	r3, r2
 8019624:	d009      	beq.n	801963a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8019626:	4b35      	ldr	r3, [pc, #212]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801962a:	2203      	movs	r2, #3
 801962c:	4393      	bics	r3, r2
 801962e:	0019      	movs	r1, r3
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	689a      	ldr	r2, [r3, #8]
 8019634:	4b31      	ldr	r3, [pc, #196]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019636:	430a      	orrs	r2, r1
 8019638:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	2202      	movs	r2, #2
 8019640:	4013      	ands	r3, r2
 8019642:	d009      	beq.n	8019658 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8019644:	4b2d      	ldr	r3, [pc, #180]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019648:	220c      	movs	r2, #12
 801964a:	4393      	bics	r3, r2
 801964c:	0019      	movs	r1, r3
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	68da      	ldr	r2, [r3, #12]
 8019652:	4b2a      	ldr	r3, [pc, #168]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019654:	430a      	orrs	r2, r1
 8019656:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	2204      	movs	r2, #4
 801965e:	4013      	ands	r3, r2
 8019660:	d009      	beq.n	8019676 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8019662:	4b26      	ldr	r3, [pc, #152]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019666:	4a2c      	ldr	r2, [pc, #176]	@ (8019718 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8019668:	4013      	ands	r3, r2
 801966a:	0019      	movs	r1, r3
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	691a      	ldr	r2, [r3, #16]
 8019670:	4b22      	ldr	r3, [pc, #136]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019672:	430a      	orrs	r2, r1
 8019674:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	2208      	movs	r2, #8
 801967c:	4013      	ands	r3, r2
 801967e:	d009      	beq.n	8019694 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8019680:	4b1e      	ldr	r3, [pc, #120]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019684:	4a25      	ldr	r2, [pc, #148]	@ (801971c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8019686:	4013      	ands	r3, r2
 8019688:	0019      	movs	r1, r3
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	695a      	ldr	r2, [r3, #20]
 801968e:	4b1b      	ldr	r3, [pc, #108]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8019690:	430a      	orrs	r2, r1
 8019692:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	681a      	ldr	r2, [r3, #0]
 8019698:	2380      	movs	r3, #128	@ 0x80
 801969a:	005b      	lsls	r3, r3, #1
 801969c:	4013      	ands	r3, r2
 801969e:	d009      	beq.n	80196b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80196a0:	4b16      	ldr	r3, [pc, #88]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80196a4:	4a17      	ldr	r2, [pc, #92]	@ (8019704 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80196a6:	4013      	ands	r3, r2
 80196a8:	0019      	movs	r1, r3
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	699a      	ldr	r2, [r3, #24]
 80196ae:	4b13      	ldr	r3, [pc, #76]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196b0:	430a      	orrs	r2, r1
 80196b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	2240      	movs	r2, #64	@ 0x40
 80196ba:	4013      	ands	r3, r2
 80196bc:	d009      	beq.n	80196d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80196be:	4b0f      	ldr	r3, [pc, #60]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80196c2:	4a17      	ldr	r2, [pc, #92]	@ (8019720 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80196c4:	4013      	ands	r3, r2
 80196c6:	0019      	movs	r1, r3
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	6a1a      	ldr	r2, [r3, #32]
 80196cc:	4b0b      	ldr	r3, [pc, #44]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196ce:	430a      	orrs	r2, r1
 80196d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	681b      	ldr	r3, [r3, #0]
 80196d6:	2280      	movs	r2, #128	@ 0x80
 80196d8:	4013      	ands	r3, r2
 80196da:	d009      	beq.n	80196f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80196dc:	4b07      	ldr	r3, [pc, #28]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80196e0:	4a10      	ldr	r2, [pc, #64]	@ (8019724 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80196e2:	4013      	ands	r3, r2
 80196e4:	0019      	movs	r1, r3
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	69da      	ldr	r2, [r3, #28]
 80196ea:	4b04      	ldr	r3, [pc, #16]	@ (80196fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80196ec:	430a      	orrs	r2, r1
 80196ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80196f0:	2300      	movs	r3, #0
}
 80196f2:	0018      	movs	r0, r3
 80196f4:	46bd      	mov	sp, r7
 80196f6:	b006      	add	sp, #24
 80196f8:	bd80      	pop	{r7, pc}
 80196fa:	46c0      	nop			@ (mov r8, r8)
 80196fc:	40021000 	.word	0x40021000
 8019700:	40007000 	.word	0x40007000
 8019704:	fffcffff 	.word	0xfffcffff
 8019708:	fff7ffff 	.word	0xfff7ffff
 801970c:	00001388 	.word	0x00001388
 8019710:	ffcfffff 	.word	0xffcfffff
 8019714:	efffffff 	.word	0xefffffff
 8019718:	fffff3ff 	.word	0xfffff3ff
 801971c:	ffffcfff 	.word	0xffffcfff
 8019720:	fbffffff 	.word	0xfbffffff
 8019724:	fff3ffff 	.word	0xfff3ffff

08019728 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8019728:	b5b0      	push	{r4, r5, r7, lr}
 801972a:	b084      	sub	sp, #16
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8019730:	230f      	movs	r3, #15
 8019732:	18fb      	adds	r3, r7, r3
 8019734:	2201      	movs	r2, #1
 8019736:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d101      	bne.n	8019742 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801973e:	2301      	movs	r3, #1
 8019740:	e088      	b.n	8019854 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	2221      	movs	r2, #33	@ 0x21
 8019746:	5c9b      	ldrb	r3, [r3, r2]
 8019748:	b2db      	uxtb	r3, r3
 801974a:	2b00      	cmp	r3, #0
 801974c:	d107      	bne.n	801975e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	2220      	movs	r2, #32
 8019752:	2100      	movs	r1, #0
 8019754:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	0018      	movs	r0, r3
 801975a:	f7f2 fd7f 	bl	800c25c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	2221      	movs	r2, #33	@ 0x21
 8019762:	2102      	movs	r1, #2
 8019764:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	68db      	ldr	r3, [r3, #12]
 801976c:	2210      	movs	r2, #16
 801976e:	4013      	ands	r3, r2
 8019770:	2b10      	cmp	r3, #16
 8019772:	d05f      	beq.n	8019834 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	22ca      	movs	r2, #202	@ 0xca
 801977a:	625a      	str	r2, [r3, #36]	@ 0x24
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	2253      	movs	r2, #83	@ 0x53
 8019782:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8019784:	250f      	movs	r5, #15
 8019786:	197c      	adds	r4, r7, r5
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	0018      	movs	r0, r3
 801978c:	f000 fa7c 	bl	8019c88 <RTC_EnterInitMode>
 8019790:	0003      	movs	r3, r0
 8019792:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8019794:	0028      	movs	r0, r5
 8019796:	183b      	adds	r3, r7, r0
 8019798:	781b      	ldrb	r3, [r3, #0]
 801979a:	2b00      	cmp	r3, #0
 801979c:	d12c      	bne.n	80197f8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	689a      	ldr	r2, [r3, #8]
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	492c      	ldr	r1, [pc, #176]	@ (801985c <HAL_RTC_Init+0x134>)
 80197aa:	400a      	ands	r2, r1
 80197ac:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	6899      	ldr	r1, [r3, #8]
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	685a      	ldr	r2, [r3, #4]
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	691b      	ldr	r3, [r3, #16]
 80197bc:	431a      	orrs	r2, r3
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	699b      	ldr	r3, [r3, #24]
 80197c2:	431a      	orrs	r2, r3
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	430a      	orrs	r2, r1
 80197ca:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	687a      	ldr	r2, [r7, #4]
 80197d2:	68d2      	ldr	r2, [r2, #12]
 80197d4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	6919      	ldr	r1, [r3, #16]
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	689b      	ldr	r3, [r3, #8]
 80197e0:	041a      	lsls	r2, r3, #16
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	430a      	orrs	r2, r1
 80197e8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80197ea:	183c      	adds	r4, r7, r0
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	0018      	movs	r0, r3
 80197f0:	f000 fa8e 	bl	8019d10 <RTC_ExitInitMode>
 80197f4:	0003      	movs	r3, r0
 80197f6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80197f8:	230f      	movs	r3, #15
 80197fa:	18fb      	adds	r3, r7, r3
 80197fc:	781b      	ldrb	r3, [r3, #0]
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d113      	bne.n	801982a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	2103      	movs	r1, #3
 801980e:	438a      	bics	r2, r1
 8019810:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	69da      	ldr	r2, [r3, #28]
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	695b      	ldr	r3, [r3, #20]
 8019820:	431a      	orrs	r2, r3
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	430a      	orrs	r2, r1
 8019828:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	22ff      	movs	r2, #255	@ 0xff
 8019830:	625a      	str	r2, [r3, #36]	@ 0x24
 8019832:	e003      	b.n	801983c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8019834:	230f      	movs	r3, #15
 8019836:	18fb      	adds	r3, r7, r3
 8019838:	2200      	movs	r2, #0
 801983a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801983c:	230f      	movs	r3, #15
 801983e:	18fb      	adds	r3, r7, r3
 8019840:	781b      	ldrb	r3, [r3, #0]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d103      	bne.n	801984e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	2221      	movs	r2, #33	@ 0x21
 801984a:	2101      	movs	r1, #1
 801984c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801984e:	230f      	movs	r3, #15
 8019850:	18fb      	adds	r3, r7, r3
 8019852:	781b      	ldrb	r3, [r3, #0]
}
 8019854:	0018      	movs	r0, r3
 8019856:	46bd      	mov	sp, r7
 8019858:	b004      	add	sp, #16
 801985a:	bdb0      	pop	{r4, r5, r7, pc}
 801985c:	ff8fffbf 	.word	0xff8fffbf

08019860 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8019860:	b5b0      	push	{r4, r5, r7, lr}
 8019862:	b086      	sub	sp, #24
 8019864:	af00      	add	r7, sp, #0
 8019866:	60f8      	str	r0, [r7, #12]
 8019868:	60b9      	str	r1, [r7, #8]
 801986a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801986c:	2300      	movs	r3, #0
 801986e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	2220      	movs	r2, #32
 8019874:	5c9b      	ldrb	r3, [r3, r2]
 8019876:	2b01      	cmp	r3, #1
 8019878:	d101      	bne.n	801987e <HAL_RTC_SetTime+0x1e>
 801987a:	2302      	movs	r3, #2
 801987c:	e092      	b.n	80199a4 <HAL_RTC_SetTime+0x144>
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	2220      	movs	r2, #32
 8019882:	2101      	movs	r1, #1
 8019884:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	2221      	movs	r2, #33	@ 0x21
 801988a:	2102      	movs	r1, #2
 801988c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	2b00      	cmp	r3, #0
 8019892:	d125      	bne.n	80198e0 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	689b      	ldr	r3, [r3, #8]
 801989a:	2240      	movs	r2, #64	@ 0x40
 801989c:	4013      	ands	r3, r2
 801989e:	d102      	bne.n	80198a6 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80198a0:	68bb      	ldr	r3, [r7, #8]
 80198a2:	2200      	movs	r2, #0
 80198a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80198a6:	68bb      	ldr	r3, [r7, #8]
 80198a8:	781b      	ldrb	r3, [r3, #0]
 80198aa:	0018      	movs	r0, r3
 80198ac:	f000 fa5a 	bl	8019d64 <RTC_ByteToBcd2>
 80198b0:	0003      	movs	r3, r0
 80198b2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80198b4:	68bb      	ldr	r3, [r7, #8]
 80198b6:	785b      	ldrb	r3, [r3, #1]
 80198b8:	0018      	movs	r0, r3
 80198ba:	f000 fa53 	bl	8019d64 <RTC_ByteToBcd2>
 80198be:	0003      	movs	r3, r0
 80198c0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80198c2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80198c4:	68bb      	ldr	r3, [r7, #8]
 80198c6:	789b      	ldrb	r3, [r3, #2]
 80198c8:	0018      	movs	r0, r3
 80198ca:	f000 fa4b 	bl	8019d64 <RTC_ByteToBcd2>
 80198ce:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80198d0:	0022      	movs	r2, r4
 80198d2:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80198d4:	68bb      	ldr	r3, [r7, #8]
 80198d6:	78db      	ldrb	r3, [r3, #3]
 80198d8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80198da:	4313      	orrs	r3, r2
 80198dc:	617b      	str	r3, [r7, #20]
 80198de:	e017      	b.n	8019910 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	689b      	ldr	r3, [r3, #8]
 80198e6:	2240      	movs	r2, #64	@ 0x40
 80198e8:	4013      	ands	r3, r2
 80198ea:	d102      	bne.n	80198f2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80198ec:	68bb      	ldr	r3, [r7, #8]
 80198ee:	2200      	movs	r2, #0
 80198f0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80198f2:	68bb      	ldr	r3, [r7, #8]
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80198f8:	68bb      	ldr	r3, [r7, #8]
 80198fa:	785b      	ldrb	r3, [r3, #1]
 80198fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80198fe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8019900:	68ba      	ldr	r2, [r7, #8]
 8019902:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8019904:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8019906:	68bb      	ldr	r3, [r7, #8]
 8019908:	78db      	ldrb	r3, [r3, #3]
 801990a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801990c:	4313      	orrs	r3, r2
 801990e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	22ca      	movs	r2, #202	@ 0xca
 8019916:	625a      	str	r2, [r3, #36]	@ 0x24
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	2253      	movs	r2, #83	@ 0x53
 801991e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8019920:	2513      	movs	r5, #19
 8019922:	197c      	adds	r4, r7, r5
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	0018      	movs	r0, r3
 8019928:	f000 f9ae 	bl	8019c88 <RTC_EnterInitMode>
 801992c:	0003      	movs	r3, r0
 801992e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8019930:	0028      	movs	r0, r5
 8019932:	183b      	adds	r3, r7, r0
 8019934:	781b      	ldrb	r3, [r3, #0]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d120      	bne.n	801997c <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	697a      	ldr	r2, [r7, #20]
 8019940:	491a      	ldr	r1, [pc, #104]	@ (80199ac <HAL_RTC_SetTime+0x14c>)
 8019942:	400a      	ands	r2, r1
 8019944:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	689a      	ldr	r2, [r3, #8]
 801994c:	68fb      	ldr	r3, [r7, #12]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	4917      	ldr	r1, [pc, #92]	@ (80199b0 <HAL_RTC_SetTime+0x150>)
 8019952:	400a      	ands	r2, r1
 8019954:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	6899      	ldr	r1, [r3, #8]
 801995c:	68bb      	ldr	r3, [r7, #8]
 801995e:	68da      	ldr	r2, [r3, #12]
 8019960:	68bb      	ldr	r3, [r7, #8]
 8019962:	691b      	ldr	r3, [r3, #16]
 8019964:	431a      	orrs	r2, r3
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	430a      	orrs	r2, r1
 801996c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801996e:	183c      	adds	r4, r7, r0
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	0018      	movs	r0, r3
 8019974:	f000 f9cc 	bl	8019d10 <RTC_ExitInitMode>
 8019978:	0003      	movs	r3, r0
 801997a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801997c:	2313      	movs	r3, #19
 801997e:	18fb      	adds	r3, r7, r3
 8019980:	781b      	ldrb	r3, [r3, #0]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d103      	bne.n	801998e <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	2221      	movs	r2, #33	@ 0x21
 801998a:	2101      	movs	r1, #1
 801998c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	22ff      	movs	r2, #255	@ 0xff
 8019994:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	2220      	movs	r2, #32
 801999a:	2100      	movs	r1, #0
 801999c:	5499      	strb	r1, [r3, r2]

  return status;
 801999e:	2313      	movs	r3, #19
 80199a0:	18fb      	adds	r3, r7, r3
 80199a2:	781b      	ldrb	r3, [r3, #0]
}
 80199a4:	0018      	movs	r0, r3
 80199a6:	46bd      	mov	sp, r7
 80199a8:	b006      	add	sp, #24
 80199aa:	bdb0      	pop	{r4, r5, r7, pc}
 80199ac:	007f7f7f 	.word	0x007f7f7f
 80199b0:	fffbffff 	.word	0xfffbffff

080199b4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b086      	sub	sp, #24
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	60f8      	str	r0, [r7, #12]
 80199bc:	60b9      	str	r1, [r7, #8]
 80199be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80199c0:	2300      	movs	r3, #0
 80199c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80199ca:	68bb      	ldr	r3, [r7, #8]
 80199cc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	691b      	ldr	r3, [r3, #16]
 80199d4:	045b      	lsls	r3, r3, #17
 80199d6:	0c5a      	lsrs	r2, r3, #17
 80199d8:	68bb      	ldr	r3, [r7, #8]
 80199da:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	4a22      	ldr	r2, [pc, #136]	@ (8019a6c <HAL_RTC_GetTime+0xb8>)
 80199e4:	4013      	ands	r3, r2
 80199e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80199e8:	697b      	ldr	r3, [r7, #20]
 80199ea:	0c1b      	lsrs	r3, r3, #16
 80199ec:	b2db      	uxtb	r3, r3
 80199ee:	223f      	movs	r2, #63	@ 0x3f
 80199f0:	4013      	ands	r3, r2
 80199f2:	b2da      	uxtb	r2, r3
 80199f4:	68bb      	ldr	r3, [r7, #8]
 80199f6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80199f8:	697b      	ldr	r3, [r7, #20]
 80199fa:	0a1b      	lsrs	r3, r3, #8
 80199fc:	b2db      	uxtb	r3, r3
 80199fe:	227f      	movs	r2, #127	@ 0x7f
 8019a00:	4013      	ands	r3, r2
 8019a02:	b2da      	uxtb	r2, r3
 8019a04:	68bb      	ldr	r3, [r7, #8]
 8019a06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8019a08:	697b      	ldr	r3, [r7, #20]
 8019a0a:	b2db      	uxtb	r3, r3
 8019a0c:	227f      	movs	r2, #127	@ 0x7f
 8019a0e:	4013      	ands	r3, r2
 8019a10:	b2da      	uxtb	r2, r3
 8019a12:	68bb      	ldr	r3, [r7, #8]
 8019a14:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8019a16:	697b      	ldr	r3, [r7, #20]
 8019a18:	0d9b      	lsrs	r3, r3, #22
 8019a1a:	b2db      	uxtb	r3, r3
 8019a1c:	2201      	movs	r2, #1
 8019a1e:	4013      	ands	r3, r2
 8019a20:	b2da      	uxtb	r2, r3
 8019a22:	68bb      	ldr	r3, [r7, #8]
 8019a24:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d11a      	bne.n	8019a62 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	781b      	ldrb	r3, [r3, #0]
 8019a30:	0018      	movs	r0, r3
 8019a32:	f000 f9b8 	bl	8019da6 <RTC_Bcd2ToByte>
 8019a36:	0003      	movs	r3, r0
 8019a38:	001a      	movs	r2, r3
 8019a3a:	68bb      	ldr	r3, [r7, #8]
 8019a3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8019a3e:	68bb      	ldr	r3, [r7, #8]
 8019a40:	785b      	ldrb	r3, [r3, #1]
 8019a42:	0018      	movs	r0, r3
 8019a44:	f000 f9af 	bl	8019da6 <RTC_Bcd2ToByte>
 8019a48:	0003      	movs	r3, r0
 8019a4a:	001a      	movs	r2, r3
 8019a4c:	68bb      	ldr	r3, [r7, #8]
 8019a4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8019a50:	68bb      	ldr	r3, [r7, #8]
 8019a52:	789b      	ldrb	r3, [r3, #2]
 8019a54:	0018      	movs	r0, r3
 8019a56:	f000 f9a6 	bl	8019da6 <RTC_Bcd2ToByte>
 8019a5a:	0003      	movs	r3, r0
 8019a5c:	001a      	movs	r2, r3
 8019a5e:	68bb      	ldr	r3, [r7, #8]
 8019a60:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8019a62:	2300      	movs	r3, #0
}
 8019a64:	0018      	movs	r0, r3
 8019a66:	46bd      	mov	sp, r7
 8019a68:	b006      	add	sp, #24
 8019a6a:	bd80      	pop	{r7, pc}
 8019a6c:	007f7f7f 	.word	0x007f7f7f

08019a70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8019a70:	b5b0      	push	{r4, r5, r7, lr}
 8019a72:	b086      	sub	sp, #24
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	60f8      	str	r0, [r7, #12]
 8019a78:	60b9      	str	r1, [r7, #8]
 8019a7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8019a7c:	2300      	movs	r3, #0
 8019a7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	2220      	movs	r2, #32
 8019a84:	5c9b      	ldrb	r3, [r3, r2]
 8019a86:	2b01      	cmp	r3, #1
 8019a88:	d101      	bne.n	8019a8e <HAL_RTC_SetDate+0x1e>
 8019a8a:	2302      	movs	r3, #2
 8019a8c:	e07e      	b.n	8019b8c <HAL_RTC_SetDate+0x11c>
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	2220      	movs	r2, #32
 8019a92:	2101      	movs	r1, #1
 8019a94:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	2221      	movs	r2, #33	@ 0x21
 8019a9a:	2102      	movs	r1, #2
 8019a9c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d10e      	bne.n	8019ac2 <HAL_RTC_SetDate+0x52>
 8019aa4:	68bb      	ldr	r3, [r7, #8]
 8019aa6:	785b      	ldrb	r3, [r3, #1]
 8019aa8:	001a      	movs	r2, r3
 8019aaa:	2310      	movs	r3, #16
 8019aac:	4013      	ands	r3, r2
 8019aae:	d008      	beq.n	8019ac2 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8019ab0:	68bb      	ldr	r3, [r7, #8]
 8019ab2:	785b      	ldrb	r3, [r3, #1]
 8019ab4:	2210      	movs	r2, #16
 8019ab6:	4393      	bics	r3, r2
 8019ab8:	b2db      	uxtb	r3, r3
 8019aba:	330a      	adds	r3, #10
 8019abc:	b2da      	uxtb	r2, r3
 8019abe:	68bb      	ldr	r3, [r7, #8]
 8019ac0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d11c      	bne.n	8019b02 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	78db      	ldrb	r3, [r3, #3]
 8019acc:	0018      	movs	r0, r3
 8019ace:	f000 f949 	bl	8019d64 <RTC_ByteToBcd2>
 8019ad2:	0003      	movs	r3, r0
 8019ad4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8019ad6:	68bb      	ldr	r3, [r7, #8]
 8019ad8:	785b      	ldrb	r3, [r3, #1]
 8019ada:	0018      	movs	r0, r3
 8019adc:	f000 f942 	bl	8019d64 <RTC_ByteToBcd2>
 8019ae0:	0003      	movs	r3, r0
 8019ae2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8019ae4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8019ae6:	68bb      	ldr	r3, [r7, #8]
 8019ae8:	789b      	ldrb	r3, [r3, #2]
 8019aea:	0018      	movs	r0, r3
 8019aec:	f000 f93a 	bl	8019d64 <RTC_ByteToBcd2>
 8019af0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8019af2:	0022      	movs	r2, r4
 8019af4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8019af6:	68bb      	ldr	r3, [r7, #8]
 8019af8:	781b      	ldrb	r3, [r3, #0]
 8019afa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8019afc:	4313      	orrs	r3, r2
 8019afe:	617b      	str	r3, [r7, #20]
 8019b00:	e00e      	b.n	8019b20 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8019b02:	68bb      	ldr	r3, [r7, #8]
 8019b04:	78db      	ldrb	r3, [r3, #3]
 8019b06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8019b08:	68bb      	ldr	r3, [r7, #8]
 8019b0a:	785b      	ldrb	r3, [r3, #1]
 8019b0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8019b0e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8019b10:	68ba      	ldr	r2, [r7, #8]
 8019b12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8019b14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8019b16:	68bb      	ldr	r3, [r7, #8]
 8019b18:	781b      	ldrb	r3, [r3, #0]
 8019b1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8019b1c:	4313      	orrs	r3, r2
 8019b1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	22ca      	movs	r2, #202	@ 0xca
 8019b26:	625a      	str	r2, [r3, #36]	@ 0x24
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	2253      	movs	r2, #83	@ 0x53
 8019b2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8019b30:	2513      	movs	r5, #19
 8019b32:	197c      	adds	r4, r7, r5
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	0018      	movs	r0, r3
 8019b38:	f000 f8a6 	bl	8019c88 <RTC_EnterInitMode>
 8019b3c:	0003      	movs	r3, r0
 8019b3e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8019b40:	0028      	movs	r0, r5
 8019b42:	183b      	adds	r3, r7, r0
 8019b44:	781b      	ldrb	r3, [r3, #0]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d10c      	bne.n	8019b64 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	697a      	ldr	r2, [r7, #20]
 8019b50:	4910      	ldr	r1, [pc, #64]	@ (8019b94 <HAL_RTC_SetDate+0x124>)
 8019b52:	400a      	ands	r2, r1
 8019b54:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8019b56:	183c      	adds	r4, r7, r0
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	0018      	movs	r0, r3
 8019b5c:	f000 f8d8 	bl	8019d10 <RTC_ExitInitMode>
 8019b60:	0003      	movs	r3, r0
 8019b62:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8019b64:	2313      	movs	r3, #19
 8019b66:	18fb      	adds	r3, r7, r3
 8019b68:	781b      	ldrb	r3, [r3, #0]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d103      	bne.n	8019b76 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	2221      	movs	r2, #33	@ 0x21
 8019b72:	2101      	movs	r1, #1
 8019b74:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	22ff      	movs	r2, #255	@ 0xff
 8019b7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	2220      	movs	r2, #32
 8019b82:	2100      	movs	r1, #0
 8019b84:	5499      	strb	r1, [r3, r2]

  return status;
 8019b86:	2313      	movs	r3, #19
 8019b88:	18fb      	adds	r3, r7, r3
 8019b8a:	781b      	ldrb	r3, [r3, #0]
}
 8019b8c:	0018      	movs	r0, r3
 8019b8e:	46bd      	mov	sp, r7
 8019b90:	b006      	add	sp, #24
 8019b92:	bdb0      	pop	{r4, r5, r7, pc}
 8019b94:	00ffff3f 	.word	0x00ffff3f

08019b98 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b086      	sub	sp, #24
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	60f8      	str	r0, [r7, #12]
 8019ba0:	60b9      	str	r1, [r7, #8]
 8019ba2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	685b      	ldr	r3, [r3, #4]
 8019bae:	4a21      	ldr	r2, [pc, #132]	@ (8019c34 <HAL_RTC_GetDate+0x9c>)
 8019bb0:	4013      	ands	r3, r2
 8019bb2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8019bb4:	697b      	ldr	r3, [r7, #20]
 8019bb6:	0c1b      	lsrs	r3, r3, #16
 8019bb8:	b2da      	uxtb	r2, r3
 8019bba:	68bb      	ldr	r3, [r7, #8]
 8019bbc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8019bbe:	697b      	ldr	r3, [r7, #20]
 8019bc0:	0a1b      	lsrs	r3, r3, #8
 8019bc2:	b2db      	uxtb	r3, r3
 8019bc4:	221f      	movs	r2, #31
 8019bc6:	4013      	ands	r3, r2
 8019bc8:	b2da      	uxtb	r2, r3
 8019bca:	68bb      	ldr	r3, [r7, #8]
 8019bcc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8019bce:	697b      	ldr	r3, [r7, #20]
 8019bd0:	b2db      	uxtb	r3, r3
 8019bd2:	223f      	movs	r2, #63	@ 0x3f
 8019bd4:	4013      	ands	r3, r2
 8019bd6:	b2da      	uxtb	r2, r3
 8019bd8:	68bb      	ldr	r3, [r7, #8]
 8019bda:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8019bdc:	697b      	ldr	r3, [r7, #20]
 8019bde:	0b5b      	lsrs	r3, r3, #13
 8019be0:	b2db      	uxtb	r3, r3
 8019be2:	2207      	movs	r2, #7
 8019be4:	4013      	ands	r3, r2
 8019be6:	b2da      	uxtb	r2, r3
 8019be8:	68bb      	ldr	r3, [r7, #8]
 8019bea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d11a      	bne.n	8019c28 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8019bf2:	68bb      	ldr	r3, [r7, #8]
 8019bf4:	78db      	ldrb	r3, [r3, #3]
 8019bf6:	0018      	movs	r0, r3
 8019bf8:	f000 f8d5 	bl	8019da6 <RTC_Bcd2ToByte>
 8019bfc:	0003      	movs	r3, r0
 8019bfe:	001a      	movs	r2, r3
 8019c00:	68bb      	ldr	r3, [r7, #8]
 8019c02:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8019c04:	68bb      	ldr	r3, [r7, #8]
 8019c06:	785b      	ldrb	r3, [r3, #1]
 8019c08:	0018      	movs	r0, r3
 8019c0a:	f000 f8cc 	bl	8019da6 <RTC_Bcd2ToByte>
 8019c0e:	0003      	movs	r3, r0
 8019c10:	001a      	movs	r2, r3
 8019c12:	68bb      	ldr	r3, [r7, #8]
 8019c14:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8019c16:	68bb      	ldr	r3, [r7, #8]
 8019c18:	789b      	ldrb	r3, [r3, #2]
 8019c1a:	0018      	movs	r0, r3
 8019c1c:	f000 f8c3 	bl	8019da6 <RTC_Bcd2ToByte>
 8019c20:	0003      	movs	r3, r0
 8019c22:	001a      	movs	r2, r3
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8019c28:	2300      	movs	r3, #0
}
 8019c2a:	0018      	movs	r0, r3
 8019c2c:	46bd      	mov	sp, r7
 8019c2e:	b006      	add	sp, #24
 8019c30:	bd80      	pop	{r7, pc}
 8019c32:	46c0      	nop			@ (mov r8, r8)
 8019c34:	00ffff3f 	.word	0x00ffff3f

08019c38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b084      	sub	sp, #16
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019c40:	2300      	movs	r3, #0
 8019c42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	4a0e      	ldr	r2, [pc, #56]	@ (8019c84 <HAL_RTC_WaitForSynchro+0x4c>)
 8019c4a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019c4c:	f7f8 fa50 	bl	80120f0 <HAL_GetTick>
 8019c50:	0003      	movs	r3, r0
 8019c52:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8019c54:	e00a      	b.n	8019c6c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019c56:	f7f8 fa4b 	bl	80120f0 <HAL_GetTick>
 8019c5a:	0002      	movs	r2, r0
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	1ad2      	subs	r2, r2, r3
 8019c60:	23fa      	movs	r3, #250	@ 0xfa
 8019c62:	009b      	lsls	r3, r3, #2
 8019c64:	429a      	cmp	r2, r3
 8019c66:	d901      	bls.n	8019c6c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8019c68:	2303      	movs	r3, #3
 8019c6a:	e006      	b.n	8019c7a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	68db      	ldr	r3, [r3, #12]
 8019c72:	2220      	movs	r2, #32
 8019c74:	4013      	ands	r3, r2
 8019c76:	d0ee      	beq.n	8019c56 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8019c78:	2300      	movs	r3, #0
}
 8019c7a:	0018      	movs	r0, r3
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	b004      	add	sp, #16
 8019c80:	bd80      	pop	{r7, pc}
 8019c82:	46c0      	nop			@ (mov r8, r8)
 8019c84:	0001ff5f 	.word	0x0001ff5f

08019c88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b084      	sub	sp, #16
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019c90:	2300      	movs	r3, #0
 8019c92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8019c94:	230f      	movs	r3, #15
 8019c96:	18fb      	adds	r3, r7, r3
 8019c98:	2200      	movs	r2, #0
 8019c9a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	68db      	ldr	r3, [r3, #12]
 8019ca2:	2240      	movs	r2, #64	@ 0x40
 8019ca4:	4013      	ands	r3, r2
 8019ca6:	d12c      	bne.n	8019d02 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	68da      	ldr	r2, [r3, #12]
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	2180      	movs	r1, #128	@ 0x80
 8019cb4:	430a      	orrs	r2, r1
 8019cb6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019cb8:	f7f8 fa1a 	bl	80120f0 <HAL_GetTick>
 8019cbc:	0003      	movs	r3, r0
 8019cbe:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8019cc0:	e014      	b.n	8019cec <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019cc2:	f7f8 fa15 	bl	80120f0 <HAL_GetTick>
 8019cc6:	0002      	movs	r2, r0
 8019cc8:	68bb      	ldr	r3, [r7, #8]
 8019cca:	1ad2      	subs	r2, r2, r3
 8019ccc:	200f      	movs	r0, #15
 8019cce:	183b      	adds	r3, r7, r0
 8019cd0:	1839      	adds	r1, r7, r0
 8019cd2:	7809      	ldrb	r1, [r1, #0]
 8019cd4:	7019      	strb	r1, [r3, #0]
 8019cd6:	23fa      	movs	r3, #250	@ 0xfa
 8019cd8:	009b      	lsls	r3, r3, #2
 8019cda:	429a      	cmp	r2, r3
 8019cdc:	d906      	bls.n	8019cec <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	2221      	movs	r2, #33	@ 0x21
 8019ce2:	2104      	movs	r1, #4
 8019ce4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8019ce6:	183b      	adds	r3, r7, r0
 8019ce8:	2201      	movs	r2, #1
 8019cea:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	68db      	ldr	r3, [r3, #12]
 8019cf2:	2240      	movs	r2, #64	@ 0x40
 8019cf4:	4013      	ands	r3, r2
 8019cf6:	d104      	bne.n	8019d02 <RTC_EnterInitMode+0x7a>
 8019cf8:	230f      	movs	r3, #15
 8019cfa:	18fb      	adds	r3, r7, r3
 8019cfc:	781b      	ldrb	r3, [r3, #0]
 8019cfe:	2b01      	cmp	r3, #1
 8019d00:	d1df      	bne.n	8019cc2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8019d02:	230f      	movs	r3, #15
 8019d04:	18fb      	adds	r3, r7, r3
 8019d06:	781b      	ldrb	r3, [r3, #0]
}
 8019d08:	0018      	movs	r0, r3
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	b004      	add	sp, #16
 8019d0e:	bd80      	pop	{r7, pc}

08019d10 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8019d10:	b590      	push	{r4, r7, lr}
 8019d12:	b085      	sub	sp, #20
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019d18:	240f      	movs	r4, #15
 8019d1a:	193b      	adds	r3, r7, r4
 8019d1c:	2200      	movs	r2, #0
 8019d1e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	68da      	ldr	r2, [r3, #12]
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	2180      	movs	r1, #128	@ 0x80
 8019d2c:	438a      	bics	r2, r1
 8019d2e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	689b      	ldr	r3, [r3, #8]
 8019d36:	2220      	movs	r2, #32
 8019d38:	4013      	ands	r3, r2
 8019d3a:	d10c      	bne.n	8019d56 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	0018      	movs	r0, r3
 8019d40:	f7ff ff7a 	bl	8019c38 <HAL_RTC_WaitForSynchro>
 8019d44:	1e03      	subs	r3, r0, #0
 8019d46:	d006      	beq.n	8019d56 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	2221      	movs	r2, #33	@ 0x21
 8019d4c:	2104      	movs	r1, #4
 8019d4e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8019d50:	193b      	adds	r3, r7, r4
 8019d52:	2201      	movs	r2, #1
 8019d54:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8019d56:	230f      	movs	r3, #15
 8019d58:	18fb      	adds	r3, r7, r3
 8019d5a:	781b      	ldrb	r3, [r3, #0]
}
 8019d5c:	0018      	movs	r0, r3
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	b005      	add	sp, #20
 8019d62:	bd90      	pop	{r4, r7, pc}

08019d64 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b084      	sub	sp, #16
 8019d68:	af00      	add	r7, sp, #0
 8019d6a:	0002      	movs	r2, r0
 8019d6c:	1dfb      	adds	r3, r7, #7
 8019d6e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8019d70:	2300      	movs	r3, #0
 8019d72:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8019d74:	e007      	b.n	8019d86 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	3301      	adds	r3, #1
 8019d7a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8019d7c:	1dfb      	adds	r3, r7, #7
 8019d7e:	1dfa      	adds	r2, r7, #7
 8019d80:	7812      	ldrb	r2, [r2, #0]
 8019d82:	3a0a      	subs	r2, #10
 8019d84:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8019d86:	1dfb      	adds	r3, r7, #7
 8019d88:	781b      	ldrb	r3, [r3, #0]
 8019d8a:	2b09      	cmp	r3, #9
 8019d8c:	d8f3      	bhi.n	8019d76 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	b2db      	uxtb	r3, r3
 8019d92:	011b      	lsls	r3, r3, #4
 8019d94:	b2da      	uxtb	r2, r3
 8019d96:	1dfb      	adds	r3, r7, #7
 8019d98:	781b      	ldrb	r3, [r3, #0]
 8019d9a:	4313      	orrs	r3, r2
 8019d9c:	b2db      	uxtb	r3, r3
}
 8019d9e:	0018      	movs	r0, r3
 8019da0:	46bd      	mov	sp, r7
 8019da2:	b004      	add	sp, #16
 8019da4:	bd80      	pop	{r7, pc}

08019da6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8019da6:	b580      	push	{r7, lr}
 8019da8:	b084      	sub	sp, #16
 8019daa:	af00      	add	r7, sp, #0
 8019dac:	0002      	movs	r2, r0
 8019dae:	1dfb      	adds	r3, r7, #7
 8019db0:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8019db2:	2300      	movs	r3, #0
 8019db4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8019db6:	1dfb      	adds	r3, r7, #7
 8019db8:	781b      	ldrb	r3, [r3, #0]
 8019dba:	091b      	lsrs	r3, r3, #4
 8019dbc:	b2db      	uxtb	r3, r3
 8019dbe:	001a      	movs	r2, r3
 8019dc0:	0013      	movs	r3, r2
 8019dc2:	009b      	lsls	r3, r3, #2
 8019dc4:	189b      	adds	r3, r3, r2
 8019dc6:	005b      	lsls	r3, r3, #1
 8019dc8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	b2da      	uxtb	r2, r3
 8019dce:	1dfb      	adds	r3, r7, #7
 8019dd0:	781b      	ldrb	r3, [r3, #0]
 8019dd2:	210f      	movs	r1, #15
 8019dd4:	400b      	ands	r3, r1
 8019dd6:	b2db      	uxtb	r3, r3
 8019dd8:	18d3      	adds	r3, r2, r3
 8019dda:	b2db      	uxtb	r3, r3
}
 8019ddc:	0018      	movs	r0, r3
 8019dde:	46bd      	mov	sp, r7
 8019de0:	b004      	add	sp, #16
 8019de2:	bd80      	pop	{r7, pc}

08019de4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	b086      	sub	sp, #24
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	60f8      	str	r0, [r7, #12]
 8019dec:	60b9      	str	r1, [r7, #8]
 8019dee:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8019df0:	4b64      	ldr	r3, [pc, #400]	@ (8019f84 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	22fa      	movs	r2, #250	@ 0xfa
 8019df6:	01d1      	lsls	r1, r2, #7
 8019df8:	0018      	movs	r0, r3
 8019dfa:	f7e6 f9d3 	bl	80001a4 <__udivsi3>
 8019dfe:	0003      	movs	r3, r0
 8019e00:	001a      	movs	r2, r3
 8019e02:	0013      	movs	r3, r2
 8019e04:	015b      	lsls	r3, r3, #5
 8019e06:	1a9b      	subs	r3, r3, r2
 8019e08:	009b      	lsls	r3, r3, #2
 8019e0a:	189b      	adds	r3, r3, r2
 8019e0c:	00db      	lsls	r3, r3, #3
 8019e0e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	2220      	movs	r2, #32
 8019e14:	5c9b      	ldrb	r3, [r3, r2]
 8019e16:	2b01      	cmp	r3, #1
 8019e18:	d101      	bne.n	8019e1e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8019e1a:	2302      	movs	r3, #2
 8019e1c:	e0ad      	b.n	8019f7a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	2220      	movs	r2, #32
 8019e22:	2101      	movs	r1, #1
 8019e24:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	2221      	movs	r2, #33	@ 0x21
 8019e2a:	2102      	movs	r1, #2
 8019e2c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	22ca      	movs	r2, #202	@ 0xca
 8019e34:	625a      	str	r2, [r3, #36]	@ 0x24
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	2253      	movs	r2, #83	@ 0x53
 8019e3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	681b      	ldr	r3, [r3, #0]
 8019e42:	689a      	ldr	r2, [r3, #8]
 8019e44:	2380      	movs	r3, #128	@ 0x80
 8019e46:	00db      	lsls	r3, r3, #3
 8019e48:	4013      	ands	r3, r2
 8019e4a:	d019      	beq.n	8019e80 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	3b01      	subs	r3, #1
 8019e50:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8019e52:	697b      	ldr	r3, [r7, #20]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d10d      	bne.n	8019e74 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	22ff      	movs	r2, #255	@ 0xff
 8019e5e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	2221      	movs	r2, #33	@ 0x21
 8019e64:	2103      	movs	r1, #3
 8019e66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	2220      	movs	r2, #32
 8019e6c:	2100      	movs	r1, #0
 8019e6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8019e70:	2303      	movs	r3, #3
 8019e72:	e082      	b.n	8019f7a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	68db      	ldr	r3, [r3, #12]
 8019e7a:	2204      	movs	r2, #4
 8019e7c:	4013      	ands	r3, r2
 8019e7e:	d1e5      	bne.n	8019e4c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	689a      	ldr	r2, [r3, #8]
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	493f      	ldr	r1, [pc, #252]	@ (8019f88 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8019e8c:	400a      	ands	r2, r1
 8019e8e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	68db      	ldr	r3, [r3, #12]
 8019e96:	22ff      	movs	r2, #255	@ 0xff
 8019e98:	401a      	ands	r2, r3
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	493b      	ldr	r1, [pc, #236]	@ (8019f8c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8019ea0:	430a      	orrs	r2, r1
 8019ea2:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8019ea4:	4b37      	ldr	r3, [pc, #220]	@ (8019f84 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	22fa      	movs	r2, #250	@ 0xfa
 8019eaa:	01d1      	lsls	r1, r2, #7
 8019eac:	0018      	movs	r0, r3
 8019eae:	f7e6 f979 	bl	80001a4 <__udivsi3>
 8019eb2:	0003      	movs	r3, r0
 8019eb4:	001a      	movs	r2, r3
 8019eb6:	0013      	movs	r3, r2
 8019eb8:	015b      	lsls	r3, r3, #5
 8019eba:	1a9b      	subs	r3, r3, r2
 8019ebc:	009b      	lsls	r3, r3, #2
 8019ebe:	189b      	adds	r3, r3, r2
 8019ec0:	00db      	lsls	r3, r3, #3
 8019ec2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8019ec4:	697b      	ldr	r3, [r7, #20]
 8019ec6:	3b01      	subs	r3, #1
 8019ec8:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8019eca:	697b      	ldr	r3, [r7, #20]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d10d      	bne.n	8019eec <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	22ff      	movs	r2, #255	@ 0xff
 8019ed6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	2221      	movs	r2, #33	@ 0x21
 8019edc:	2103      	movs	r1, #3
 8019ede:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	2220      	movs	r2, #32
 8019ee4:	2100      	movs	r1, #0
 8019ee6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8019ee8:	2303      	movs	r3, #3
 8019eea:	e046      	b.n	8019f7a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8019eec:	68fb      	ldr	r3, [r7, #12]
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	68db      	ldr	r3, [r3, #12]
 8019ef2:	2204      	movs	r2, #4
 8019ef4:	4013      	ands	r3, r2
 8019ef6:	d0e5      	beq.n	8019ec4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	689a      	ldr	r2, [r3, #8]
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	2107      	movs	r1, #7
 8019f04:	438a      	bics	r2, r1
 8019f06:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	6899      	ldr	r1, [r3, #8]
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	687a      	ldr	r2, [r7, #4]
 8019f14:	430a      	orrs	r2, r1
 8019f16:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	68ba      	ldr	r2, [r7, #8]
 8019f1e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8019f20:	4b1b      	ldr	r3, [pc, #108]	@ (8019f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019f22:	681a      	ldr	r2, [r3, #0]
 8019f24:	4b1a      	ldr	r3, [pc, #104]	@ (8019f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019f26:	2180      	movs	r1, #128	@ 0x80
 8019f28:	0349      	lsls	r1, r1, #13
 8019f2a:	430a      	orrs	r2, r1
 8019f2c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8019f2e:	4b18      	ldr	r3, [pc, #96]	@ (8019f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019f30:	689a      	ldr	r2, [r3, #8]
 8019f32:	4b17      	ldr	r3, [pc, #92]	@ (8019f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8019f34:	2180      	movs	r1, #128	@ 0x80
 8019f36:	0349      	lsls	r1, r1, #13
 8019f38:	430a      	orrs	r2, r1
 8019f3a:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	689a      	ldr	r2, [r3, #8]
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	2180      	movs	r1, #128	@ 0x80
 8019f48:	01c9      	lsls	r1, r1, #7
 8019f4a:	430a      	orrs	r2, r1
 8019f4c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	689a      	ldr	r2, [r3, #8]
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	2180      	movs	r1, #128	@ 0x80
 8019f5a:	00c9      	lsls	r1, r1, #3
 8019f5c:	430a      	orrs	r2, r1
 8019f5e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	22ff      	movs	r2, #255	@ 0xff
 8019f66:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	2221      	movs	r2, #33	@ 0x21
 8019f6c:	2101      	movs	r1, #1
 8019f6e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8019f70:	68fb      	ldr	r3, [r7, #12]
 8019f72:	2220      	movs	r2, #32
 8019f74:	2100      	movs	r1, #0
 8019f76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8019f78:	2300      	movs	r3, #0
}
 8019f7a:	0018      	movs	r0, r3
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	b006      	add	sp, #24
 8019f80:	bd80      	pop	{r7, pc}
 8019f82:	46c0      	nop			@ (mov r8, r8)
 8019f84:	200000e0 	.word	0x200000e0
 8019f88:	fffffbff 	.word	0xfffffbff
 8019f8c:	fffffb7f 	.word	0xfffffb7f
 8019f90:	40010400 	.word	0x40010400

08019f94 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b084      	sub	sp, #16
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	2220      	movs	r2, #32
 8019fa4:	5c9b      	ldrb	r3, [r3, r2]
 8019fa6:	2b01      	cmp	r3, #1
 8019fa8:	d101      	bne.n	8019fae <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8019faa:	2302      	movs	r3, #2
 8019fac:	e04e      	b.n	801a04c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	2220      	movs	r2, #32
 8019fb2:	2101      	movs	r1, #1
 8019fb4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	2221      	movs	r2, #33	@ 0x21
 8019fba:	2102      	movs	r1, #2
 8019fbc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	22ca      	movs	r2, #202	@ 0xca
 8019fc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	2253      	movs	r2, #83	@ 0x53
 8019fcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	689a      	ldr	r2, [r3, #8]
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	491e      	ldr	r1, [pc, #120]	@ (801a054 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8019fda:	400a      	ands	r2, r1
 8019fdc:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	689a      	ldr	r2, [r3, #8]
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	491b      	ldr	r1, [pc, #108]	@ (801a058 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8019fea:	400a      	ands	r2, r1
 8019fec:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019fee:	f7f8 f87f 	bl	80120f0 <HAL_GetTick>
 8019ff2:	0003      	movs	r3, r0
 8019ff4:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8019ff6:	e016      	b.n	801a026 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8019ff8:	f7f8 f87a 	bl	80120f0 <HAL_GetTick>
 8019ffc:	0002      	movs	r2, r0
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	1ad2      	subs	r2, r2, r3
 801a002:	23fa      	movs	r3, #250	@ 0xfa
 801a004:	009b      	lsls	r3, r3, #2
 801a006:	429a      	cmp	r2, r3
 801a008:	d90d      	bls.n	801a026 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	22ff      	movs	r2, #255	@ 0xff
 801a010:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	2221      	movs	r2, #33	@ 0x21
 801a016:	2103      	movs	r1, #3
 801a018:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	2220      	movs	r2, #32
 801a01e:	2100      	movs	r1, #0
 801a020:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801a022:	2303      	movs	r3, #3
 801a024:	e012      	b.n	801a04c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	68db      	ldr	r3, [r3, #12]
 801a02c:	2204      	movs	r2, #4
 801a02e:	4013      	ands	r3, r2
 801a030:	d0e2      	beq.n	8019ff8 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	22ff      	movs	r2, #255	@ 0xff
 801a038:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2221      	movs	r2, #33	@ 0x21
 801a03e:	2101      	movs	r1, #1
 801a040:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	2220      	movs	r2, #32
 801a046:	2100      	movs	r1, #0
 801a048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a04a:	2300      	movs	r3, #0
}
 801a04c:	0018      	movs	r0, r3
 801a04e:	46bd      	mov	sp, r7
 801a050:	b004      	add	sp, #16
 801a052:	bd80      	pop	{r7, pc}
 801a054:	fffffbff 	.word	0xfffffbff
 801a058:	ffffbfff 	.word	0xffffbfff

0801a05c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b082      	sub	sp, #8
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801a064:	4b13      	ldr	r3, [pc, #76]	@ (801a0b4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801a066:	2280      	movs	r2, #128	@ 0x80
 801a068:	0352      	lsls	r2, r2, #13
 801a06a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	689a      	ldr	r2, [r3, #8]
 801a072:	2380      	movs	r3, #128	@ 0x80
 801a074:	01db      	lsls	r3, r3, #7
 801a076:	4013      	ands	r3, r2
 801a078:	d014      	beq.n	801a0a4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	68da      	ldr	r2, [r3, #12]
 801a080:	2380      	movs	r3, #128	@ 0x80
 801a082:	00db      	lsls	r3, r3, #3
 801a084:	4013      	ands	r3, r2
 801a086:	d00d      	beq.n	801a0a4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	68db      	ldr	r3, [r3, #12]
 801a08e:	22ff      	movs	r2, #255	@ 0xff
 801a090:	401a      	ands	r2, r3
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	4908      	ldr	r1, [pc, #32]	@ (801a0b8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801a098:	430a      	orrs	r2, r1
 801a09a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	0018      	movs	r0, r3
 801a0a0:	f000 f80c 	bl	801a0bc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	2221      	movs	r2, #33	@ 0x21
 801a0a8:	2101      	movs	r1, #1
 801a0aa:	5499      	strb	r1, [r3, r2]
}
 801a0ac:	46c0      	nop			@ (mov r8, r8)
 801a0ae:	46bd      	mov	sp, r7
 801a0b0:	b002      	add	sp, #8
 801a0b2:	bd80      	pop	{r7, pc}
 801a0b4:	40010400 	.word	0x40010400
 801a0b8:	fffffb7f 	.word	0xfffffb7f

0801a0bc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801a0bc:	b580      	push	{r7, lr}
 801a0be:	b082      	sub	sp, #8
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801a0c4:	46c0      	nop			@ (mov r8, r8)
 801a0c6:	46bd      	mov	sp, r7
 801a0c8:	b002      	add	sp, #8
 801a0ca:	bd80      	pop	{r7, pc}

0801a0cc <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801a0cc:	b580      	push	{r7, lr}
 801a0ce:	b086      	sub	sp, #24
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	60f8      	str	r0, [r7, #12]
 801a0d4:	60b9      	str	r1, [r7, #8]
 801a0d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801a0d8:	2300      	movs	r3, #0
 801a0da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	3350      	adds	r3, #80	@ 0x50
 801a0e2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801a0e4:	68bb      	ldr	r3, [r7, #8]
 801a0e6:	009b      	lsls	r3, r3, #2
 801a0e8:	697a      	ldr	r2, [r7, #20]
 801a0ea:	18d3      	adds	r3, r2, r3
 801a0ec:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801a0ee:	697b      	ldr	r3, [r7, #20]
 801a0f0:	687a      	ldr	r2, [r7, #4]
 801a0f2:	601a      	str	r2, [r3, #0]
}
 801a0f4:	46c0      	nop			@ (mov r8, r8)
 801a0f6:	46bd      	mov	sp, r7
 801a0f8:	b006      	add	sp, #24
 801a0fa:	bd80      	pop	{r7, pc}

0801a0fc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b084      	sub	sp, #16
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
 801a104:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801a106:	2300      	movs	r3, #0
 801a108:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	3350      	adds	r3, #80	@ 0x50
 801a110:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801a112:	683b      	ldr	r3, [r7, #0]
 801a114:	009b      	lsls	r3, r3, #2
 801a116:	68fa      	ldr	r2, [r7, #12]
 801a118:	18d3      	adds	r3, r2, r3
 801a11a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801a11c:	68fb      	ldr	r3, [r7, #12]
 801a11e:	681b      	ldr	r3, [r3, #0]
}
 801a120:	0018      	movs	r0, r3
 801a122:	46bd      	mov	sp, r7
 801a124:	b004      	add	sp, #16
 801a126:	bd80      	pop	{r7, pc}

0801a128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a128:	b580      	push	{r7, lr}
 801a12a:	b082      	sub	sp, #8
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d101      	bne.n	801a13a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a136:	2301      	movs	r3, #1
 801a138:	e032      	b.n	801a1a0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	2239      	movs	r2, #57	@ 0x39
 801a13e:	5c9b      	ldrb	r3, [r3, r2]
 801a140:	b2db      	uxtb	r3, r3
 801a142:	2b00      	cmp	r3, #0
 801a144:	d107      	bne.n	801a156 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	2238      	movs	r2, #56	@ 0x38
 801a14a:	2100      	movs	r1, #0
 801a14c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	0018      	movs	r0, r3
 801a152:	f7f7 f8dd 	bl	8011310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	2239      	movs	r2, #57	@ 0x39
 801a15a:	2102      	movs	r1, #2
 801a15c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	681a      	ldr	r2, [r3, #0]
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	3304      	adds	r3, #4
 801a166:	0019      	movs	r1, r3
 801a168:	0010      	movs	r0, r2
 801a16a:	f000 fa1d 	bl	801a5a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	223e      	movs	r2, #62	@ 0x3e
 801a172:	2101      	movs	r1, #1
 801a174:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	223a      	movs	r2, #58	@ 0x3a
 801a17a:	2101      	movs	r1, #1
 801a17c:	5499      	strb	r1, [r3, r2]
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	223b      	movs	r2, #59	@ 0x3b
 801a182:	2101      	movs	r1, #1
 801a184:	5499      	strb	r1, [r3, r2]
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	223c      	movs	r2, #60	@ 0x3c
 801a18a:	2101      	movs	r1, #1
 801a18c:	5499      	strb	r1, [r3, r2]
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	223d      	movs	r2, #61	@ 0x3d
 801a192:	2101      	movs	r1, #1
 801a194:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	2239      	movs	r2, #57	@ 0x39
 801a19a:	2101      	movs	r1, #1
 801a19c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a19e:	2300      	movs	r3, #0
}
 801a1a0:	0018      	movs	r0, r3
 801a1a2:	46bd      	mov	sp, r7
 801a1a4:	b002      	add	sp, #8
 801a1a6:	bd80      	pop	{r7, pc}

0801a1a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b084      	sub	sp, #16
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	2239      	movs	r2, #57	@ 0x39
 801a1b4:	5c9b      	ldrb	r3, [r3, r2]
 801a1b6:	b2db      	uxtb	r3, r3
 801a1b8:	2b01      	cmp	r3, #1
 801a1ba:	d001      	beq.n	801a1c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801a1bc:	2301      	movs	r3, #1
 801a1be:	e033      	b.n	801a228 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	2239      	movs	r2, #57	@ 0x39
 801a1c4:	2102      	movs	r1, #2
 801a1c6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681a      	ldr	r2, [r3, #0]
 801a1cc:	2380      	movs	r3, #128	@ 0x80
 801a1ce:	05db      	lsls	r3, r3, #23
 801a1d0:	429a      	cmp	r2, r3
 801a1d2:	d00e      	beq.n	801a1f2 <HAL_TIM_Base_Start+0x4a>
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	4a15      	ldr	r2, [pc, #84]	@ (801a230 <HAL_TIM_Base_Start+0x88>)
 801a1da:	4293      	cmp	r3, r2
 801a1dc:	d009      	beq.n	801a1f2 <HAL_TIM_Base_Start+0x4a>
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	4a14      	ldr	r2, [pc, #80]	@ (801a234 <HAL_TIM_Base_Start+0x8c>)
 801a1e4:	4293      	cmp	r3, r2
 801a1e6:	d004      	beq.n	801a1f2 <HAL_TIM_Base_Start+0x4a>
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	4a12      	ldr	r2, [pc, #72]	@ (801a238 <HAL_TIM_Base_Start+0x90>)
 801a1ee:	4293      	cmp	r3, r2
 801a1f0:	d111      	bne.n	801a216 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	689b      	ldr	r3, [r3, #8]
 801a1f8:	2207      	movs	r2, #7
 801a1fa:	4013      	ands	r3, r2
 801a1fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a1fe:	68fb      	ldr	r3, [r7, #12]
 801a200:	2b06      	cmp	r3, #6
 801a202:	d010      	beq.n	801a226 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	681a      	ldr	r2, [r3, #0]
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	2101      	movs	r1, #1
 801a210:	430a      	orrs	r2, r1
 801a212:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a214:	e007      	b.n	801a226 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	681a      	ldr	r2, [r3, #0]
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	2101      	movs	r1, #1
 801a222:	430a      	orrs	r2, r1
 801a224:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a226:	2300      	movs	r3, #0
}
 801a228:	0018      	movs	r0, r3
 801a22a:	46bd      	mov	sp, r7
 801a22c:	b004      	add	sp, #16
 801a22e:	bd80      	pop	{r7, pc}
 801a230:	40000400 	.word	0x40000400
 801a234:	40010800 	.word	0x40010800
 801a238:	40011400 	.word	0x40011400

0801a23c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801a23c:	b580      	push	{r7, lr}
 801a23e:	b082      	sub	sp, #8
 801a240:	af00      	add	r7, sp, #0
 801a242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	6a1b      	ldr	r3, [r3, #32]
 801a24a:	4a0a      	ldr	r2, [pc, #40]	@ (801a274 <HAL_TIM_Base_Stop+0x38>)
 801a24c:	4013      	ands	r3, r2
 801a24e:	d107      	bne.n	801a260 <HAL_TIM_Base_Stop+0x24>
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	681a      	ldr	r2, [r3, #0]
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	2101      	movs	r1, #1
 801a25c:	438a      	bics	r2, r1
 801a25e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	2239      	movs	r2, #57	@ 0x39
 801a264:	2101      	movs	r1, #1
 801a266:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801a268:	2300      	movs	r3, #0
}
 801a26a:	0018      	movs	r0, r3
 801a26c:	46bd      	mov	sp, r7
 801a26e:	b002      	add	sp, #8
 801a270:	bd80      	pop	{r7, pc}
 801a272:	46c0      	nop			@ (mov r8, r8)
 801a274:	00001111 	.word	0x00001111

0801a278 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a278:	b580      	push	{r7, lr}
 801a27a:	b082      	sub	sp, #8
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d101      	bne.n	801a28a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a286:	2301      	movs	r3, #1
 801a288:	e032      	b.n	801a2f0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	2239      	movs	r2, #57	@ 0x39
 801a28e:	5c9b      	ldrb	r3, [r3, r2]
 801a290:	b2db      	uxtb	r3, r3
 801a292:	2b00      	cmp	r3, #0
 801a294:	d107      	bne.n	801a2a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	2238      	movs	r2, #56	@ 0x38
 801a29a:	2100      	movs	r1, #0
 801a29c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	0018      	movs	r0, r3
 801a2a2:	f7f7 f811 	bl	80112c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	2239      	movs	r2, #57	@ 0x39
 801a2aa:	2102      	movs	r1, #2
 801a2ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	681a      	ldr	r2, [r3, #0]
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	3304      	adds	r3, #4
 801a2b6:	0019      	movs	r1, r3
 801a2b8:	0010      	movs	r0, r2
 801a2ba:	f000 f975 	bl	801a5a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	223e      	movs	r2, #62	@ 0x3e
 801a2c2:	2101      	movs	r1, #1
 801a2c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	223a      	movs	r2, #58	@ 0x3a
 801a2ca:	2101      	movs	r1, #1
 801a2cc:	5499      	strb	r1, [r3, r2]
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	223b      	movs	r2, #59	@ 0x3b
 801a2d2:	2101      	movs	r1, #1
 801a2d4:	5499      	strb	r1, [r3, r2]
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	223c      	movs	r2, #60	@ 0x3c
 801a2da:	2101      	movs	r1, #1
 801a2dc:	5499      	strb	r1, [r3, r2]
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	223d      	movs	r2, #61	@ 0x3d
 801a2e2:	2101      	movs	r1, #1
 801a2e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	2239      	movs	r2, #57	@ 0x39
 801a2ea:	2101      	movs	r1, #1
 801a2ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a2ee:	2300      	movs	r3, #0
}
 801a2f0:	0018      	movs	r0, r3
 801a2f2:	46bd      	mov	sp, r7
 801a2f4:	b002      	add	sp, #8
 801a2f6:	bd80      	pop	{r7, pc}

0801a2f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b084      	sub	sp, #16
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
 801a300:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801a302:	683b      	ldr	r3, [r7, #0]
 801a304:	2b00      	cmp	r3, #0
 801a306:	d108      	bne.n	801a31a <HAL_TIM_PWM_Start+0x22>
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	223a      	movs	r2, #58	@ 0x3a
 801a30c:	5c9b      	ldrb	r3, [r3, r2]
 801a30e:	b2db      	uxtb	r3, r3
 801a310:	3b01      	subs	r3, #1
 801a312:	1e5a      	subs	r2, r3, #1
 801a314:	4193      	sbcs	r3, r2
 801a316:	b2db      	uxtb	r3, r3
 801a318:	e01f      	b.n	801a35a <HAL_TIM_PWM_Start+0x62>
 801a31a:	683b      	ldr	r3, [r7, #0]
 801a31c:	2b04      	cmp	r3, #4
 801a31e:	d108      	bne.n	801a332 <HAL_TIM_PWM_Start+0x3a>
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	223b      	movs	r2, #59	@ 0x3b
 801a324:	5c9b      	ldrb	r3, [r3, r2]
 801a326:	b2db      	uxtb	r3, r3
 801a328:	3b01      	subs	r3, #1
 801a32a:	1e5a      	subs	r2, r3, #1
 801a32c:	4193      	sbcs	r3, r2
 801a32e:	b2db      	uxtb	r3, r3
 801a330:	e013      	b.n	801a35a <HAL_TIM_PWM_Start+0x62>
 801a332:	683b      	ldr	r3, [r7, #0]
 801a334:	2b08      	cmp	r3, #8
 801a336:	d108      	bne.n	801a34a <HAL_TIM_PWM_Start+0x52>
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	223c      	movs	r2, #60	@ 0x3c
 801a33c:	5c9b      	ldrb	r3, [r3, r2]
 801a33e:	b2db      	uxtb	r3, r3
 801a340:	3b01      	subs	r3, #1
 801a342:	1e5a      	subs	r2, r3, #1
 801a344:	4193      	sbcs	r3, r2
 801a346:	b2db      	uxtb	r3, r3
 801a348:	e007      	b.n	801a35a <HAL_TIM_PWM_Start+0x62>
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	223d      	movs	r2, #61	@ 0x3d
 801a34e:	5c9b      	ldrb	r3, [r3, r2]
 801a350:	b2db      	uxtb	r3, r3
 801a352:	3b01      	subs	r3, #1
 801a354:	1e5a      	subs	r2, r3, #1
 801a356:	4193      	sbcs	r3, r2
 801a358:	b2db      	uxtb	r3, r3
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d001      	beq.n	801a362 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801a35e:	2301      	movs	r3, #1
 801a360:	e052      	b.n	801a408 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801a362:	683b      	ldr	r3, [r7, #0]
 801a364:	2b00      	cmp	r3, #0
 801a366:	d104      	bne.n	801a372 <HAL_TIM_PWM_Start+0x7a>
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	223a      	movs	r2, #58	@ 0x3a
 801a36c:	2102      	movs	r1, #2
 801a36e:	5499      	strb	r1, [r3, r2]
 801a370:	e013      	b.n	801a39a <HAL_TIM_PWM_Start+0xa2>
 801a372:	683b      	ldr	r3, [r7, #0]
 801a374:	2b04      	cmp	r3, #4
 801a376:	d104      	bne.n	801a382 <HAL_TIM_PWM_Start+0x8a>
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	223b      	movs	r2, #59	@ 0x3b
 801a37c:	2102      	movs	r1, #2
 801a37e:	5499      	strb	r1, [r3, r2]
 801a380:	e00b      	b.n	801a39a <HAL_TIM_PWM_Start+0xa2>
 801a382:	683b      	ldr	r3, [r7, #0]
 801a384:	2b08      	cmp	r3, #8
 801a386:	d104      	bne.n	801a392 <HAL_TIM_PWM_Start+0x9a>
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	223c      	movs	r2, #60	@ 0x3c
 801a38c:	2102      	movs	r1, #2
 801a38e:	5499      	strb	r1, [r3, r2]
 801a390:	e003      	b.n	801a39a <HAL_TIM_PWM_Start+0xa2>
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	223d      	movs	r2, #61	@ 0x3d
 801a396:	2102      	movs	r1, #2
 801a398:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	6839      	ldr	r1, [r7, #0]
 801a3a0:	2201      	movs	r2, #1
 801a3a2:	0018      	movs	r0, r3
 801a3a4:	f000 fa62 	bl	801a86c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	681a      	ldr	r2, [r3, #0]
 801a3ac:	2380      	movs	r3, #128	@ 0x80
 801a3ae:	05db      	lsls	r3, r3, #23
 801a3b0:	429a      	cmp	r2, r3
 801a3b2:	d00e      	beq.n	801a3d2 <HAL_TIM_PWM_Start+0xda>
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	4a15      	ldr	r2, [pc, #84]	@ (801a410 <HAL_TIM_PWM_Start+0x118>)
 801a3ba:	4293      	cmp	r3, r2
 801a3bc:	d009      	beq.n	801a3d2 <HAL_TIM_PWM_Start+0xda>
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	4a14      	ldr	r2, [pc, #80]	@ (801a414 <HAL_TIM_PWM_Start+0x11c>)
 801a3c4:	4293      	cmp	r3, r2
 801a3c6:	d004      	beq.n	801a3d2 <HAL_TIM_PWM_Start+0xda>
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	4a12      	ldr	r2, [pc, #72]	@ (801a418 <HAL_TIM_PWM_Start+0x120>)
 801a3ce:	4293      	cmp	r3, r2
 801a3d0:	d111      	bne.n	801a3f6 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	689b      	ldr	r3, [r3, #8]
 801a3d8:	2207      	movs	r2, #7
 801a3da:	4013      	ands	r3, r2
 801a3dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	2b06      	cmp	r3, #6
 801a3e2:	d010      	beq.n	801a406 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	681a      	ldr	r2, [r3, #0]
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	681b      	ldr	r3, [r3, #0]
 801a3ee:	2101      	movs	r1, #1
 801a3f0:	430a      	orrs	r2, r1
 801a3f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a3f4:	e007      	b.n	801a406 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	681a      	ldr	r2, [r3, #0]
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	2101      	movs	r1, #1
 801a402:	430a      	orrs	r2, r1
 801a404:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a406:	2300      	movs	r3, #0
}
 801a408:	0018      	movs	r0, r3
 801a40a:	46bd      	mov	sp, r7
 801a40c:	b004      	add	sp, #16
 801a40e:	bd80      	pop	{r7, pc}
 801a410:	40000400 	.word	0x40000400
 801a414:	40010800 	.word	0x40010800
 801a418:	40011400 	.word	0x40011400

0801a41c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b086      	sub	sp, #24
 801a420:	af00      	add	r7, sp, #0
 801a422:	60f8      	str	r0, [r7, #12]
 801a424:	60b9      	str	r1, [r7, #8]
 801a426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a428:	2317      	movs	r3, #23
 801a42a:	18fb      	adds	r3, r7, r3
 801a42c:	2200      	movs	r2, #0
 801a42e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	2238      	movs	r2, #56	@ 0x38
 801a434:	5c9b      	ldrb	r3, [r3, r2]
 801a436:	2b01      	cmp	r3, #1
 801a438:	d101      	bne.n	801a43e <HAL_TIM_PWM_ConfigChannel+0x22>
 801a43a:	2302      	movs	r3, #2
 801a43c:	e0ad      	b.n	801a59a <HAL_TIM_PWM_ConfigChannel+0x17e>
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	2238      	movs	r2, #56	@ 0x38
 801a442:	2101      	movs	r1, #1
 801a444:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	2b0c      	cmp	r3, #12
 801a44a:	d100      	bne.n	801a44e <HAL_TIM_PWM_ConfigChannel+0x32>
 801a44c:	e076      	b.n	801a53c <HAL_TIM_PWM_ConfigChannel+0x120>
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	2b0c      	cmp	r3, #12
 801a452:	d900      	bls.n	801a456 <HAL_TIM_PWM_ConfigChannel+0x3a>
 801a454:	e095      	b.n	801a582 <HAL_TIM_PWM_ConfigChannel+0x166>
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	2b08      	cmp	r3, #8
 801a45a:	d04e      	beq.n	801a4fa <HAL_TIM_PWM_ConfigChannel+0xde>
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	2b08      	cmp	r3, #8
 801a460:	d900      	bls.n	801a464 <HAL_TIM_PWM_ConfigChannel+0x48>
 801a462:	e08e      	b.n	801a582 <HAL_TIM_PWM_ConfigChannel+0x166>
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	2b00      	cmp	r3, #0
 801a468:	d003      	beq.n	801a472 <HAL_TIM_PWM_ConfigChannel+0x56>
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	2b04      	cmp	r3, #4
 801a46e:	d021      	beq.n	801a4b4 <HAL_TIM_PWM_ConfigChannel+0x98>
 801a470:	e087      	b.n	801a582 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	68ba      	ldr	r2, [r7, #8]
 801a478:	0011      	movs	r1, r2
 801a47a:	0018      	movs	r0, r3
 801a47c:	f000 f8f2 	bl	801a664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	699a      	ldr	r2, [r3, #24]
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	681b      	ldr	r3, [r3, #0]
 801a48a:	2108      	movs	r1, #8
 801a48c:	430a      	orrs	r2, r1
 801a48e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	699a      	ldr	r2, [r3, #24]
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	2104      	movs	r1, #4
 801a49c:	438a      	bics	r2, r1
 801a49e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	6999      	ldr	r1, [r3, #24]
 801a4a6:	68bb      	ldr	r3, [r7, #8]
 801a4a8:	68da      	ldr	r2, [r3, #12]
 801a4aa:	68fb      	ldr	r3, [r7, #12]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	430a      	orrs	r2, r1
 801a4b0:	619a      	str	r2, [r3, #24]
      break;
 801a4b2:	e06b      	b.n	801a58c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	68ba      	ldr	r2, [r7, #8]
 801a4ba:	0011      	movs	r1, r2
 801a4bc:	0018      	movs	r0, r3
 801a4be:	f000 f90d 	bl	801a6dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	699a      	ldr	r2, [r3, #24]
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	681b      	ldr	r3, [r3, #0]
 801a4cc:	2180      	movs	r1, #128	@ 0x80
 801a4ce:	0109      	lsls	r1, r1, #4
 801a4d0:	430a      	orrs	r2, r1
 801a4d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	699a      	ldr	r2, [r3, #24]
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	4931      	ldr	r1, [pc, #196]	@ (801a5a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801a4e0:	400a      	ands	r2, r1
 801a4e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	6999      	ldr	r1, [r3, #24]
 801a4ea:	68bb      	ldr	r3, [r7, #8]
 801a4ec:	68db      	ldr	r3, [r3, #12]
 801a4ee:	021a      	lsls	r2, r3, #8
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	430a      	orrs	r2, r1
 801a4f6:	619a      	str	r2, [r3, #24]
      break;
 801a4f8:	e048      	b.n	801a58c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	68ba      	ldr	r2, [r7, #8]
 801a500:	0011      	movs	r1, r2
 801a502:	0018      	movs	r0, r3
 801a504:	f000 f92c 	bl	801a760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	69da      	ldr	r2, [r3, #28]
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	2108      	movs	r1, #8
 801a514:	430a      	orrs	r2, r1
 801a516:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	69da      	ldr	r2, [r3, #28]
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	2104      	movs	r1, #4
 801a524:	438a      	bics	r2, r1
 801a526:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	69d9      	ldr	r1, [r3, #28]
 801a52e:	68bb      	ldr	r3, [r7, #8]
 801a530:	68da      	ldr	r2, [r3, #12]
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	430a      	orrs	r2, r1
 801a538:	61da      	str	r2, [r3, #28]
      break;
 801a53a:	e027      	b.n	801a58c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801a53c:	68fb      	ldr	r3, [r7, #12]
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	68ba      	ldr	r2, [r7, #8]
 801a542:	0011      	movs	r1, r2
 801a544:	0018      	movs	r0, r3
 801a546:	f000 f94b 	bl	801a7e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801a54a:	68fb      	ldr	r3, [r7, #12]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	69da      	ldr	r2, [r3, #28]
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	2180      	movs	r1, #128	@ 0x80
 801a556:	0109      	lsls	r1, r1, #4
 801a558:	430a      	orrs	r2, r1
 801a55a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	69da      	ldr	r2, [r3, #28]
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	490f      	ldr	r1, [pc, #60]	@ (801a5a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801a568:	400a      	ands	r2, r1
 801a56a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	69d9      	ldr	r1, [r3, #28]
 801a572:	68bb      	ldr	r3, [r7, #8]
 801a574:	68db      	ldr	r3, [r3, #12]
 801a576:	021a      	lsls	r2, r3, #8
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	430a      	orrs	r2, r1
 801a57e:	61da      	str	r2, [r3, #28]
      break;
 801a580:	e004      	b.n	801a58c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801a582:	2317      	movs	r3, #23
 801a584:	18fb      	adds	r3, r7, r3
 801a586:	2201      	movs	r2, #1
 801a588:	701a      	strb	r2, [r3, #0]
      break;
 801a58a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	2238      	movs	r2, #56	@ 0x38
 801a590:	2100      	movs	r1, #0
 801a592:	5499      	strb	r1, [r3, r2]

  return status;
 801a594:	2317      	movs	r3, #23
 801a596:	18fb      	adds	r3, r7, r3
 801a598:	781b      	ldrb	r3, [r3, #0]
}
 801a59a:	0018      	movs	r0, r3
 801a59c:	46bd      	mov	sp, r7
 801a59e:	b006      	add	sp, #24
 801a5a0:	bd80      	pop	{r7, pc}
 801a5a2:	46c0      	nop			@ (mov r8, r8)
 801a5a4:	fffffbff 	.word	0xfffffbff

0801a5a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801a5a8:	b580      	push	{r7, lr}
 801a5aa:	b084      	sub	sp, #16
 801a5ac:	af00      	add	r7, sp, #0
 801a5ae:	6078      	str	r0, [r7, #4]
 801a5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a5b8:	687a      	ldr	r2, [r7, #4]
 801a5ba:	2380      	movs	r3, #128	@ 0x80
 801a5bc:	05db      	lsls	r3, r3, #23
 801a5be:	429a      	cmp	r2, r3
 801a5c0:	d00b      	beq.n	801a5da <TIM_Base_SetConfig+0x32>
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	4a23      	ldr	r2, [pc, #140]	@ (801a654 <TIM_Base_SetConfig+0xac>)
 801a5c6:	4293      	cmp	r3, r2
 801a5c8:	d007      	beq.n	801a5da <TIM_Base_SetConfig+0x32>
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	4a22      	ldr	r2, [pc, #136]	@ (801a658 <TIM_Base_SetConfig+0xb0>)
 801a5ce:	4293      	cmp	r3, r2
 801a5d0:	d003      	beq.n	801a5da <TIM_Base_SetConfig+0x32>
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	4a21      	ldr	r2, [pc, #132]	@ (801a65c <TIM_Base_SetConfig+0xb4>)
 801a5d6:	4293      	cmp	r3, r2
 801a5d8:	d108      	bne.n	801a5ec <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a5da:	68fb      	ldr	r3, [r7, #12]
 801a5dc:	2270      	movs	r2, #112	@ 0x70
 801a5de:	4393      	bics	r3, r2
 801a5e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a5e2:	683b      	ldr	r3, [r7, #0]
 801a5e4:	685b      	ldr	r3, [r3, #4]
 801a5e6:	68fa      	ldr	r2, [r7, #12]
 801a5e8:	4313      	orrs	r3, r2
 801a5ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a5ec:	687a      	ldr	r2, [r7, #4]
 801a5ee:	2380      	movs	r3, #128	@ 0x80
 801a5f0:	05db      	lsls	r3, r3, #23
 801a5f2:	429a      	cmp	r2, r3
 801a5f4:	d00b      	beq.n	801a60e <TIM_Base_SetConfig+0x66>
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	4a16      	ldr	r2, [pc, #88]	@ (801a654 <TIM_Base_SetConfig+0xac>)
 801a5fa:	4293      	cmp	r3, r2
 801a5fc:	d007      	beq.n	801a60e <TIM_Base_SetConfig+0x66>
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	4a15      	ldr	r2, [pc, #84]	@ (801a658 <TIM_Base_SetConfig+0xb0>)
 801a602:	4293      	cmp	r3, r2
 801a604:	d003      	beq.n	801a60e <TIM_Base_SetConfig+0x66>
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	4a14      	ldr	r2, [pc, #80]	@ (801a65c <TIM_Base_SetConfig+0xb4>)
 801a60a:	4293      	cmp	r3, r2
 801a60c:	d108      	bne.n	801a620 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801a60e:	68fb      	ldr	r3, [r7, #12]
 801a610:	4a13      	ldr	r2, [pc, #76]	@ (801a660 <TIM_Base_SetConfig+0xb8>)
 801a612:	4013      	ands	r3, r2
 801a614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801a616:	683b      	ldr	r3, [r7, #0]
 801a618:	68db      	ldr	r3, [r3, #12]
 801a61a:	68fa      	ldr	r2, [r7, #12]
 801a61c:	4313      	orrs	r3, r2
 801a61e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	2280      	movs	r2, #128	@ 0x80
 801a624:	4393      	bics	r3, r2
 801a626:	001a      	movs	r2, r3
 801a628:	683b      	ldr	r3, [r7, #0]
 801a62a:	691b      	ldr	r3, [r3, #16]
 801a62c:	4313      	orrs	r3, r2
 801a62e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	68fa      	ldr	r2, [r7, #12]
 801a634:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801a636:	683b      	ldr	r3, [r7, #0]
 801a638:	689a      	ldr	r2, [r3, #8]
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801a63e:	683b      	ldr	r3, [r7, #0]
 801a640:	681a      	ldr	r2, [r3, #0]
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	2201      	movs	r2, #1
 801a64a:	615a      	str	r2, [r3, #20]
}
 801a64c:	46c0      	nop			@ (mov r8, r8)
 801a64e:	46bd      	mov	sp, r7
 801a650:	b004      	add	sp, #16
 801a652:	bd80      	pop	{r7, pc}
 801a654:	40000400 	.word	0x40000400
 801a658:	40010800 	.word	0x40010800
 801a65c:	40011400 	.word	0x40011400
 801a660:	fffffcff 	.word	0xfffffcff

0801a664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a664:	b580      	push	{r7, lr}
 801a666:	b086      	sub	sp, #24
 801a668:	af00      	add	r7, sp, #0
 801a66a:	6078      	str	r0, [r7, #4]
 801a66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	6a1b      	ldr	r3, [r3, #32]
 801a672:	2201      	movs	r2, #1
 801a674:	4393      	bics	r3, r2
 801a676:	001a      	movs	r2, r3
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	6a1b      	ldr	r3, [r3, #32]
 801a680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	685b      	ldr	r3, [r3, #4]
 801a686:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	699b      	ldr	r3, [r3, #24]
 801a68c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	2270      	movs	r2, #112	@ 0x70
 801a692:	4393      	bics	r3, r2
 801a694:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	2203      	movs	r2, #3
 801a69a:	4393      	bics	r3, r2
 801a69c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a69e:	683b      	ldr	r3, [r7, #0]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	68fa      	ldr	r2, [r7, #12]
 801a6a4:	4313      	orrs	r3, r2
 801a6a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801a6a8:	697b      	ldr	r3, [r7, #20]
 801a6aa:	2202      	movs	r2, #2
 801a6ac:	4393      	bics	r3, r2
 801a6ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801a6b0:	683b      	ldr	r3, [r7, #0]
 801a6b2:	689b      	ldr	r3, [r3, #8]
 801a6b4:	697a      	ldr	r2, [r7, #20]
 801a6b6:	4313      	orrs	r3, r2
 801a6b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	693a      	ldr	r2, [r7, #16]
 801a6be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	68fa      	ldr	r2, [r7, #12]
 801a6c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801a6c6:	683b      	ldr	r3, [r7, #0]
 801a6c8:	685a      	ldr	r2, [r3, #4]
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	697a      	ldr	r2, [r7, #20]
 801a6d2:	621a      	str	r2, [r3, #32]
}
 801a6d4:	46c0      	nop			@ (mov r8, r8)
 801a6d6:	46bd      	mov	sp, r7
 801a6d8:	b006      	add	sp, #24
 801a6da:	bd80      	pop	{r7, pc}

0801a6dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a6dc:	b580      	push	{r7, lr}
 801a6de:	b086      	sub	sp, #24
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	6078      	str	r0, [r7, #4]
 801a6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	6a1b      	ldr	r3, [r3, #32]
 801a6ea:	2210      	movs	r2, #16
 801a6ec:	4393      	bics	r3, r2
 801a6ee:	001a      	movs	r2, r3
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	6a1b      	ldr	r3, [r3, #32]
 801a6f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	685b      	ldr	r3, [r3, #4]
 801a6fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	699b      	ldr	r3, [r3, #24]
 801a704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	4a13      	ldr	r2, [pc, #76]	@ (801a758 <TIM_OC2_SetConfig+0x7c>)
 801a70a:	4013      	ands	r3, r2
 801a70c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	4a12      	ldr	r2, [pc, #72]	@ (801a75c <TIM_OC2_SetConfig+0x80>)
 801a712:	4013      	ands	r3, r2
 801a714:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a716:	683b      	ldr	r3, [r7, #0]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	021b      	lsls	r3, r3, #8
 801a71c:	68fa      	ldr	r2, [r7, #12]
 801a71e:	4313      	orrs	r3, r2
 801a720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801a722:	697b      	ldr	r3, [r7, #20]
 801a724:	2220      	movs	r2, #32
 801a726:	4393      	bics	r3, r2
 801a728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801a72a:	683b      	ldr	r3, [r7, #0]
 801a72c:	689b      	ldr	r3, [r3, #8]
 801a72e:	011b      	lsls	r3, r3, #4
 801a730:	697a      	ldr	r2, [r7, #20]
 801a732:	4313      	orrs	r3, r2
 801a734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	693a      	ldr	r2, [r7, #16]
 801a73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	68fa      	ldr	r2, [r7, #12]
 801a740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801a742:	683b      	ldr	r3, [r7, #0]
 801a744:	685a      	ldr	r2, [r3, #4]
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	697a      	ldr	r2, [r7, #20]
 801a74e:	621a      	str	r2, [r3, #32]
}
 801a750:	46c0      	nop			@ (mov r8, r8)
 801a752:	46bd      	mov	sp, r7
 801a754:	b006      	add	sp, #24
 801a756:	bd80      	pop	{r7, pc}
 801a758:	ffff8fff 	.word	0xffff8fff
 801a75c:	fffffcff 	.word	0xfffffcff

0801a760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a760:	b580      	push	{r7, lr}
 801a762:	b086      	sub	sp, #24
 801a764:	af00      	add	r7, sp, #0
 801a766:	6078      	str	r0, [r7, #4]
 801a768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	6a1b      	ldr	r3, [r3, #32]
 801a76e:	4a1a      	ldr	r2, [pc, #104]	@ (801a7d8 <TIM_OC3_SetConfig+0x78>)
 801a770:	401a      	ands	r2, r3
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	6a1b      	ldr	r3, [r3, #32]
 801a77a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	685b      	ldr	r3, [r3, #4]
 801a780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	69db      	ldr	r3, [r3, #28]
 801a786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	2270      	movs	r2, #112	@ 0x70
 801a78c:	4393      	bics	r3, r2
 801a78e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	2203      	movs	r2, #3
 801a794:	4393      	bics	r3, r2
 801a796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801a798:	683b      	ldr	r3, [r7, #0]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	68fa      	ldr	r2, [r7, #12]
 801a79e:	4313      	orrs	r3, r2
 801a7a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801a7a2:	697b      	ldr	r3, [r7, #20]
 801a7a4:	4a0d      	ldr	r2, [pc, #52]	@ (801a7dc <TIM_OC3_SetConfig+0x7c>)
 801a7a6:	4013      	ands	r3, r2
 801a7a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801a7aa:	683b      	ldr	r3, [r7, #0]
 801a7ac:	689b      	ldr	r3, [r3, #8]
 801a7ae:	021b      	lsls	r3, r3, #8
 801a7b0:	697a      	ldr	r2, [r7, #20]
 801a7b2:	4313      	orrs	r3, r2
 801a7b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	693a      	ldr	r2, [r7, #16]
 801a7ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	68fa      	ldr	r2, [r7, #12]
 801a7c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801a7c2:	683b      	ldr	r3, [r7, #0]
 801a7c4:	685a      	ldr	r2, [r3, #4]
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	697a      	ldr	r2, [r7, #20]
 801a7ce:	621a      	str	r2, [r3, #32]
}
 801a7d0:	46c0      	nop			@ (mov r8, r8)
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	b006      	add	sp, #24
 801a7d6:	bd80      	pop	{r7, pc}
 801a7d8:	fffffeff 	.word	0xfffffeff
 801a7dc:	fffffdff 	.word	0xfffffdff

0801a7e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801a7e0:	b580      	push	{r7, lr}
 801a7e2:	b086      	sub	sp, #24
 801a7e4:	af00      	add	r7, sp, #0
 801a7e6:	6078      	str	r0, [r7, #4]
 801a7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	6a1b      	ldr	r3, [r3, #32]
 801a7ee:	4a1b      	ldr	r2, [pc, #108]	@ (801a85c <TIM_OC4_SetConfig+0x7c>)
 801a7f0:	401a      	ands	r2, r3
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	6a1b      	ldr	r3, [r3, #32]
 801a7fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	685b      	ldr	r3, [r3, #4]
 801a800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	69db      	ldr	r3, [r3, #28]
 801a806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	4a15      	ldr	r2, [pc, #84]	@ (801a860 <TIM_OC4_SetConfig+0x80>)
 801a80c:	4013      	ands	r3, r2
 801a80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	4a14      	ldr	r2, [pc, #80]	@ (801a864 <TIM_OC4_SetConfig+0x84>)
 801a814:	4013      	ands	r3, r2
 801a816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a818:	683b      	ldr	r3, [r7, #0]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	021b      	lsls	r3, r3, #8
 801a81e:	68fa      	ldr	r2, [r7, #12]
 801a820:	4313      	orrs	r3, r2
 801a822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801a824:	697b      	ldr	r3, [r7, #20]
 801a826:	4a10      	ldr	r2, [pc, #64]	@ (801a868 <TIM_OC4_SetConfig+0x88>)
 801a828:	4013      	ands	r3, r2
 801a82a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801a82c:	683b      	ldr	r3, [r7, #0]
 801a82e:	689b      	ldr	r3, [r3, #8]
 801a830:	031b      	lsls	r3, r3, #12
 801a832:	697a      	ldr	r2, [r7, #20]
 801a834:	4313      	orrs	r3, r2
 801a836:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	693a      	ldr	r2, [r7, #16]
 801a83c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	68fa      	ldr	r2, [r7, #12]
 801a842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801a844:	683b      	ldr	r3, [r7, #0]
 801a846:	685a      	ldr	r2, [r3, #4]
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	697a      	ldr	r2, [r7, #20]
 801a850:	621a      	str	r2, [r3, #32]
}
 801a852:	46c0      	nop			@ (mov r8, r8)
 801a854:	46bd      	mov	sp, r7
 801a856:	b006      	add	sp, #24
 801a858:	bd80      	pop	{r7, pc}
 801a85a:	46c0      	nop			@ (mov r8, r8)
 801a85c:	ffffefff 	.word	0xffffefff
 801a860:	ffff8fff 	.word	0xffff8fff
 801a864:	fffffcff 	.word	0xfffffcff
 801a868:	ffffdfff 	.word	0xffffdfff

0801a86c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	b086      	sub	sp, #24
 801a870:	af00      	add	r7, sp, #0
 801a872:	60f8      	str	r0, [r7, #12]
 801a874:	60b9      	str	r1, [r7, #8]
 801a876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801a878:	68bb      	ldr	r3, [r7, #8]
 801a87a:	221f      	movs	r2, #31
 801a87c:	4013      	ands	r3, r2
 801a87e:	2201      	movs	r2, #1
 801a880:	409a      	lsls	r2, r3
 801a882:	0013      	movs	r3, r2
 801a884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	6a1b      	ldr	r3, [r3, #32]
 801a88a:	697a      	ldr	r2, [r7, #20]
 801a88c:	43d2      	mvns	r2, r2
 801a88e:	401a      	ands	r2, r3
 801a890:	68fb      	ldr	r3, [r7, #12]
 801a892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	6a1a      	ldr	r2, [r3, #32]
 801a898:	68bb      	ldr	r3, [r7, #8]
 801a89a:	211f      	movs	r1, #31
 801a89c:	400b      	ands	r3, r1
 801a89e:	6879      	ldr	r1, [r7, #4]
 801a8a0:	4099      	lsls	r1, r3
 801a8a2:	000b      	movs	r3, r1
 801a8a4:	431a      	orrs	r2, r3
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	621a      	str	r2, [r3, #32]
}
 801a8aa:	46c0      	nop			@ (mov r8, r8)
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	b006      	add	sp, #24
 801a8b0:	bd80      	pop	{r7, pc}
	...

0801a8b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801a8b4:	b580      	push	{r7, lr}
 801a8b6:	b084      	sub	sp, #16
 801a8b8:	af00      	add	r7, sp, #0
 801a8ba:	6078      	str	r0, [r7, #4]
 801a8bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	2238      	movs	r2, #56	@ 0x38
 801a8c2:	5c9b      	ldrb	r3, [r3, r2]
 801a8c4:	2b01      	cmp	r3, #1
 801a8c6:	d101      	bne.n	801a8cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801a8c8:	2302      	movs	r3, #2
 801a8ca:	e047      	b.n	801a95c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	2238      	movs	r2, #56	@ 0x38
 801a8d0:	2101      	movs	r1, #1
 801a8d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	2239      	movs	r2, #57	@ 0x39
 801a8d8:	2102      	movs	r1, #2
 801a8da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	685b      	ldr	r3, [r3, #4]
 801a8e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	689b      	ldr	r3, [r3, #8]
 801a8ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	2270      	movs	r2, #112	@ 0x70
 801a8f0:	4393      	bics	r3, r2
 801a8f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801a8f4:	683b      	ldr	r3, [r7, #0]
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	68fa      	ldr	r2, [r7, #12]
 801a8fa:	4313      	orrs	r3, r2
 801a8fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	68fa      	ldr	r2, [r7, #12]
 801a904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	681a      	ldr	r2, [r3, #0]
 801a90a:	2380      	movs	r3, #128	@ 0x80
 801a90c:	05db      	lsls	r3, r3, #23
 801a90e:	429a      	cmp	r2, r3
 801a910:	d00e      	beq.n	801a930 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	4a13      	ldr	r2, [pc, #76]	@ (801a964 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801a918:	4293      	cmp	r3, r2
 801a91a:	d009      	beq.n	801a930 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	4a11      	ldr	r2, [pc, #68]	@ (801a968 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801a922:	4293      	cmp	r3, r2
 801a924:	d004      	beq.n	801a930 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	4a10      	ldr	r2, [pc, #64]	@ (801a96c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801a92c:	4293      	cmp	r3, r2
 801a92e:	d10c      	bne.n	801a94a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801a930:	68bb      	ldr	r3, [r7, #8]
 801a932:	2280      	movs	r2, #128	@ 0x80
 801a934:	4393      	bics	r3, r2
 801a936:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801a938:	683b      	ldr	r3, [r7, #0]
 801a93a:	685b      	ldr	r3, [r3, #4]
 801a93c:	68ba      	ldr	r2, [r7, #8]
 801a93e:	4313      	orrs	r3, r2
 801a940:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	68ba      	ldr	r2, [r7, #8]
 801a948:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	2239      	movs	r2, #57	@ 0x39
 801a94e:	2101      	movs	r1, #1
 801a950:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	2238      	movs	r2, #56	@ 0x38
 801a956:	2100      	movs	r1, #0
 801a958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a95a:	2300      	movs	r3, #0
}
 801a95c:	0018      	movs	r0, r3
 801a95e:	46bd      	mov	sp, r7
 801a960:	b004      	add	sp, #16
 801a962:	bd80      	pop	{r7, pc}
 801a964:	40000400 	.word	0x40000400
 801a968:	40010800 	.word	0x40010800
 801a96c:	40011400 	.word	0x40011400

0801a970 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801a970:	b580      	push	{r7, lr}
 801a972:	b082      	sub	sp, #8
 801a974:	af00      	add	r7, sp, #0
 801a976:	6078      	str	r0, [r7, #4]
 801a978:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	2238      	movs	r2, #56	@ 0x38
 801a97e:	5c9b      	ldrb	r3, [r3, r2]
 801a980:	2b01      	cmp	r3, #1
 801a982:	d101      	bne.n	801a988 <HAL_TIMEx_RemapConfig+0x18>
 801a984:	2302      	movs	r3, #2
 801a986:	e00c      	b.n	801a9a2 <HAL_TIMEx_RemapConfig+0x32>
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	2238      	movs	r2, #56	@ 0x38
 801a98c:	2101      	movs	r1, #1
 801a98e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	683a      	ldr	r2, [r7, #0]
 801a996:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	2238      	movs	r2, #56	@ 0x38
 801a99c:	2100      	movs	r1, #0
 801a99e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801a9a0:	2300      	movs	r3, #0
}
 801a9a2:	0018      	movs	r0, r3
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	b002      	add	sp, #8
 801a9a8:	bd80      	pop	{r7, pc}
	...

0801a9ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b082      	sub	sp, #8
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d101      	bne.n	801a9be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a9ba:	2301      	movs	r3, #1
 801a9bc:	e053      	b.n	801aa66 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d116      	bne.n	801a9f4 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	2278      	movs	r2, #120	@ 0x78
 801a9ca:	2100      	movs	r1, #0
 801a9cc:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	0018      	movs	r0, r3
 801a9d2:	f000 fd65 	bl	801b4a0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	22b0      	movs	r2, #176	@ 0xb0
 801a9da:	589b      	ldr	r3, [r3, r2]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d103      	bne.n	801a9e8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	21b0      	movs	r1, #176	@ 0xb0
 801a9e4:	4a22      	ldr	r2, [pc, #136]	@ (801aa70 <HAL_UART_Init+0xc4>)
 801a9e6:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	22b0      	movs	r2, #176	@ 0xb0
 801a9ec:	589b      	ldr	r3, [r3, r2]
 801a9ee:	687a      	ldr	r2, [r7, #4]
 801a9f0:	0010      	movs	r0, r2
 801a9f2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	2224      	movs	r2, #36	@ 0x24
 801a9f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	681a      	ldr	r2, [r3, #0]
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	2101      	movs	r1, #1
 801aa06:	438a      	bics	r2, r1
 801aa08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	0018      	movs	r0, r3
 801aa0e:	f000 fd8b 	bl	801b528 <UART_SetConfig>
 801aa12:	0003      	movs	r3, r0
 801aa14:	2b01      	cmp	r3, #1
 801aa16:	d101      	bne.n	801aa1c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801aa18:	2301      	movs	r3, #1
 801aa1a:	e024      	b.n	801aa66 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d003      	beq.n	801aa2c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	0018      	movs	r0, r3
 801aa28:	f001 f81c 	bl	801ba64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	685a      	ldr	r2, [r3, #4]
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	490f      	ldr	r1, [pc, #60]	@ (801aa74 <HAL_UART_Init+0xc8>)
 801aa38:	400a      	ands	r2, r1
 801aa3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	689a      	ldr	r2, [r3, #8]
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	212a      	movs	r1, #42	@ 0x2a
 801aa48:	438a      	bics	r2, r1
 801aa4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	681a      	ldr	r2, [r3, #0]
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	2101      	movs	r1, #1
 801aa58:	430a      	orrs	r2, r1
 801aa5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	0018      	movs	r0, r3
 801aa60:	f001 f8b4 	bl	801bbcc <UART_CheckIdleState>
 801aa64:	0003      	movs	r3, r0
}
 801aa66:	0018      	movs	r0, r3
 801aa68:	46bd      	mov	sp, r7
 801aa6a:	b002      	add	sp, #8
 801aa6c:	bd80      	pop	{r7, pc}
 801aa6e:	46c0      	nop			@ (mov r8, r8)
 801aa70:	0801153d 	.word	0x0801153d
 801aa74:	ffffb7ff 	.word	0xffffb7ff

0801aa78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	b08a      	sub	sp, #40	@ 0x28
 801aa7c:	af02      	add	r7, sp, #8
 801aa7e:	60f8      	str	r0, [r7, #12]
 801aa80:	60b9      	str	r1, [r7, #8]
 801aa82:	603b      	str	r3, [r7, #0]
 801aa84:	1dbb      	adds	r3, r7, #6
 801aa86:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801aa8c:	2b20      	cmp	r3, #32
 801aa8e:	d000      	beq.n	801aa92 <HAL_UART_Transmit+0x1a>
 801aa90:	e08c      	b.n	801abac <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801aa92:	68bb      	ldr	r3, [r7, #8]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d003      	beq.n	801aaa0 <HAL_UART_Transmit+0x28>
 801aa98:	1dbb      	adds	r3, r7, #6
 801aa9a:	881b      	ldrh	r3, [r3, #0]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d101      	bne.n	801aaa4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801aaa0:	2301      	movs	r3, #1
 801aaa2:	e084      	b.n	801abae <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801aaa4:	68fb      	ldr	r3, [r7, #12]
 801aaa6:	689a      	ldr	r2, [r3, #8]
 801aaa8:	2380      	movs	r3, #128	@ 0x80
 801aaaa:	015b      	lsls	r3, r3, #5
 801aaac:	429a      	cmp	r2, r3
 801aaae:	d109      	bne.n	801aac4 <HAL_UART_Transmit+0x4c>
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	691b      	ldr	r3, [r3, #16]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d105      	bne.n	801aac4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801aab8:	68bb      	ldr	r3, [r7, #8]
 801aaba:	2201      	movs	r2, #1
 801aabc:	4013      	ands	r3, r2
 801aabe:	d001      	beq.n	801aac4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801aac0:	2301      	movs	r3, #1
 801aac2:	e074      	b.n	801abae <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	2284      	movs	r2, #132	@ 0x84
 801aac8:	2100      	movs	r1, #0
 801aaca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	2221      	movs	r2, #33	@ 0x21
 801aad0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801aad2:	f7f7 fb0d 	bl	80120f0 <HAL_GetTick>
 801aad6:	0003      	movs	r3, r0
 801aad8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	1dba      	adds	r2, r7, #6
 801aade:	2150      	movs	r1, #80	@ 0x50
 801aae0:	8812      	ldrh	r2, [r2, #0]
 801aae2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	1dba      	adds	r2, r7, #6
 801aae8:	2152      	movs	r1, #82	@ 0x52
 801aaea:	8812      	ldrh	r2, [r2, #0]
 801aaec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	689a      	ldr	r2, [r3, #8]
 801aaf2:	2380      	movs	r3, #128	@ 0x80
 801aaf4:	015b      	lsls	r3, r3, #5
 801aaf6:	429a      	cmp	r2, r3
 801aaf8:	d108      	bne.n	801ab0c <HAL_UART_Transmit+0x94>
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	691b      	ldr	r3, [r3, #16]
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d104      	bne.n	801ab0c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801ab02:	2300      	movs	r3, #0
 801ab04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801ab06:	68bb      	ldr	r3, [r7, #8]
 801ab08:	61bb      	str	r3, [r7, #24]
 801ab0a:	e003      	b.n	801ab14 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801ab0c:	68bb      	ldr	r3, [r7, #8]
 801ab0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801ab10:	2300      	movs	r3, #0
 801ab12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801ab14:	e02f      	b.n	801ab76 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801ab16:	697a      	ldr	r2, [r7, #20]
 801ab18:	68f8      	ldr	r0, [r7, #12]
 801ab1a:	683b      	ldr	r3, [r7, #0]
 801ab1c:	9300      	str	r3, [sp, #0]
 801ab1e:	0013      	movs	r3, r2
 801ab20:	2200      	movs	r2, #0
 801ab22:	2180      	movs	r1, #128	@ 0x80
 801ab24:	f001 f8fa 	bl	801bd1c <UART_WaitOnFlagUntilTimeout>
 801ab28:	1e03      	subs	r3, r0, #0
 801ab2a:	d004      	beq.n	801ab36 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	2220      	movs	r2, #32
 801ab30:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801ab32:	2303      	movs	r3, #3
 801ab34:	e03b      	b.n	801abae <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801ab36:	69fb      	ldr	r3, [r7, #28]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d10b      	bne.n	801ab54 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801ab3c:	69bb      	ldr	r3, [r7, #24]
 801ab3e:	881b      	ldrh	r3, [r3, #0]
 801ab40:	001a      	movs	r2, r3
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	05d2      	lsls	r2, r2, #23
 801ab48:	0dd2      	lsrs	r2, r2, #23
 801ab4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801ab4c:	69bb      	ldr	r3, [r7, #24]
 801ab4e:	3302      	adds	r3, #2
 801ab50:	61bb      	str	r3, [r7, #24]
 801ab52:	e007      	b.n	801ab64 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801ab54:	69fb      	ldr	r3, [r7, #28]
 801ab56:	781a      	ldrb	r2, [r3, #0]
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801ab5e:	69fb      	ldr	r3, [r7, #28]
 801ab60:	3301      	adds	r3, #1
 801ab62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	2252      	movs	r2, #82	@ 0x52
 801ab68:	5a9b      	ldrh	r3, [r3, r2]
 801ab6a:	b29b      	uxth	r3, r3
 801ab6c:	3b01      	subs	r3, #1
 801ab6e:	b299      	uxth	r1, r3
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	2252      	movs	r2, #82	@ 0x52
 801ab74:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	2252      	movs	r2, #82	@ 0x52
 801ab7a:	5a9b      	ldrh	r3, [r3, r2]
 801ab7c:	b29b      	uxth	r3, r3
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d1c9      	bne.n	801ab16 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801ab82:	697a      	ldr	r2, [r7, #20]
 801ab84:	68f8      	ldr	r0, [r7, #12]
 801ab86:	683b      	ldr	r3, [r7, #0]
 801ab88:	9300      	str	r3, [sp, #0]
 801ab8a:	0013      	movs	r3, r2
 801ab8c:	2200      	movs	r2, #0
 801ab8e:	2140      	movs	r1, #64	@ 0x40
 801ab90:	f001 f8c4 	bl	801bd1c <UART_WaitOnFlagUntilTimeout>
 801ab94:	1e03      	subs	r3, r0, #0
 801ab96:	d004      	beq.n	801aba2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	2220      	movs	r2, #32
 801ab9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801ab9e:	2303      	movs	r3, #3
 801aba0:	e005      	b.n	801abae <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	2220      	movs	r2, #32
 801aba6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801aba8:	2300      	movs	r3, #0
 801abaa:	e000      	b.n	801abae <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801abac:	2302      	movs	r3, #2
  }
}
 801abae:	0018      	movs	r0, r3
 801abb0:	46bd      	mov	sp, r7
 801abb2:	b008      	add	sp, #32
 801abb4:	bd80      	pop	{r7, pc}
	...

0801abb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801abb8:	b580      	push	{r7, lr}
 801abba:	b088      	sub	sp, #32
 801abbc:	af00      	add	r7, sp, #0
 801abbe:	60f8      	str	r0, [r7, #12]
 801abc0:	60b9      	str	r1, [r7, #8]
 801abc2:	1dbb      	adds	r3, r7, #6
 801abc4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	2280      	movs	r2, #128	@ 0x80
 801abca:	589b      	ldr	r3, [r3, r2]
 801abcc:	2b20      	cmp	r3, #32
 801abce:	d14a      	bne.n	801ac66 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801abd0:	68bb      	ldr	r3, [r7, #8]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d003      	beq.n	801abde <HAL_UART_Receive_IT+0x26>
 801abd6:	1dbb      	adds	r3, r7, #6
 801abd8:	881b      	ldrh	r3, [r3, #0]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d101      	bne.n	801abe2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801abde:	2301      	movs	r3, #1
 801abe0:	e042      	b.n	801ac68 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	689a      	ldr	r2, [r3, #8]
 801abe6:	2380      	movs	r3, #128	@ 0x80
 801abe8:	015b      	lsls	r3, r3, #5
 801abea:	429a      	cmp	r2, r3
 801abec:	d109      	bne.n	801ac02 <HAL_UART_Receive_IT+0x4a>
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	691b      	ldr	r3, [r3, #16]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d105      	bne.n	801ac02 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801abf6:	68bb      	ldr	r3, [r7, #8]
 801abf8:	2201      	movs	r2, #1
 801abfa:	4013      	ands	r3, r2
 801abfc:	d001      	beq.n	801ac02 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801abfe:	2301      	movs	r3, #1
 801ac00:	e032      	b.n	801ac68 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	2200      	movs	r2, #0
 801ac06:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	4a18      	ldr	r2, [pc, #96]	@ (801ac70 <HAL_UART_Receive_IT+0xb8>)
 801ac0e:	4293      	cmp	r3, r2
 801ac10:	d020      	beq.n	801ac54 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	685a      	ldr	r2, [r3, #4]
 801ac18:	2380      	movs	r3, #128	@ 0x80
 801ac1a:	041b      	lsls	r3, r3, #16
 801ac1c:	4013      	ands	r3, r2
 801ac1e:	d019      	beq.n	801ac54 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac20:	f3ef 8310 	mrs	r3, PRIMASK
 801ac24:	613b      	str	r3, [r7, #16]
  return(result);
 801ac26:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ac28:	61fb      	str	r3, [r7, #28]
 801ac2a:	2301      	movs	r3, #1
 801ac2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac2e:	697b      	ldr	r3, [r7, #20]
 801ac30:	f383 8810 	msr	PRIMASK, r3
}
 801ac34:	46c0      	nop			@ (mov r8, r8)
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	681a      	ldr	r2, [r3, #0]
 801ac3c:	68fb      	ldr	r3, [r7, #12]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	2180      	movs	r1, #128	@ 0x80
 801ac42:	04c9      	lsls	r1, r1, #19
 801ac44:	430a      	orrs	r2, r1
 801ac46:	601a      	str	r2, [r3, #0]
 801ac48:	69fb      	ldr	r3, [r7, #28]
 801ac4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac4c:	69bb      	ldr	r3, [r7, #24]
 801ac4e:	f383 8810 	msr	PRIMASK, r3
}
 801ac52:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801ac54:	1dbb      	adds	r3, r7, #6
 801ac56:	881a      	ldrh	r2, [r3, #0]
 801ac58:	68b9      	ldr	r1, [r7, #8]
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	0018      	movs	r0, r3
 801ac5e:	f001 f8c7 	bl	801bdf0 <UART_Start_Receive_IT>
 801ac62:	0003      	movs	r3, r0
 801ac64:	e000      	b.n	801ac68 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801ac66:	2302      	movs	r3, #2
  }
}
 801ac68:	0018      	movs	r0, r3
 801ac6a:	46bd      	mov	sp, r7
 801ac6c:	b008      	add	sp, #32
 801ac6e:	bd80      	pop	{r7, pc}
 801ac70:	40004800 	.word	0x40004800

0801ac74 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801ac74:	b580      	push	{r7, lr}
 801ac76:	b088      	sub	sp, #32
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	60f8      	str	r0, [r7, #12]
 801ac7c:	60b9      	str	r1, [r7, #8]
 801ac7e:	1dbb      	adds	r3, r7, #6
 801ac80:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ac86:	2b20      	cmp	r3, #32
 801ac88:	d000      	beq.n	801ac8c <HAL_UART_Transmit_DMA+0x18>
 801ac8a:	e077      	b.n	801ad7c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801ac8c:	68bb      	ldr	r3, [r7, #8]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d003      	beq.n	801ac9a <HAL_UART_Transmit_DMA+0x26>
 801ac92:	1dbb      	adds	r3, r7, #6
 801ac94:	881b      	ldrh	r3, [r3, #0]
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d101      	bne.n	801ac9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801ac9a:	2301      	movs	r3, #1
 801ac9c:	e06f      	b.n	801ad7e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	689a      	ldr	r2, [r3, #8]
 801aca2:	2380      	movs	r3, #128	@ 0x80
 801aca4:	015b      	lsls	r3, r3, #5
 801aca6:	429a      	cmp	r2, r3
 801aca8:	d109      	bne.n	801acbe <HAL_UART_Transmit_DMA+0x4a>
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	691b      	ldr	r3, [r3, #16]
 801acae:	2b00      	cmp	r3, #0
 801acb0:	d105      	bne.n	801acbe <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801acb2:	68bb      	ldr	r3, [r7, #8]
 801acb4:	2201      	movs	r2, #1
 801acb6:	4013      	ands	r3, r2
 801acb8:	d001      	beq.n	801acbe <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801acba:	2301      	movs	r3, #1
 801acbc:	e05f      	b.n	801ad7e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	68ba      	ldr	r2, [r7, #8]
 801acc2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	1dba      	adds	r2, r7, #6
 801acc8:	2150      	movs	r1, #80	@ 0x50
 801acca:	8812      	ldrh	r2, [r2, #0]
 801accc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	1dba      	adds	r2, r7, #6
 801acd2:	2152      	movs	r1, #82	@ 0x52
 801acd4:	8812      	ldrh	r2, [r2, #0]
 801acd6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	2284      	movs	r2, #132	@ 0x84
 801acdc:	2100      	movs	r1, #0
 801acde:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	2221      	movs	r2, #33	@ 0x21
 801ace4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801acea:	2b00      	cmp	r3, #0
 801acec:	d027      	beq.n	801ad3e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801acf2:	4a25      	ldr	r2, [pc, #148]	@ (801ad88 <HAL_UART_Transmit_DMA+0x114>)
 801acf4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801acfa:	4a24      	ldr	r2, [pc, #144]	@ (801ad8c <HAL_UART_Transmit_DMA+0x118>)
 801acfc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801acfe:	68fb      	ldr	r3, [r7, #12]
 801ad00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ad02:	4a23      	ldr	r2, [pc, #140]	@ (801ad90 <HAL_UART_Transmit_DMA+0x11c>)
 801ad04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ad0a:	2200      	movs	r2, #0
 801ad0c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801ad12:	68fb      	ldr	r3, [r7, #12]
 801ad14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ad16:	0019      	movs	r1, r3
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	3328      	adds	r3, #40	@ 0x28
 801ad1e:	001a      	movs	r2, r3
 801ad20:	1dbb      	adds	r3, r7, #6
 801ad22:	881b      	ldrh	r3, [r3, #0]
 801ad24:	f7f7 ff36 	bl	8012b94 <HAL_DMA_Start_IT>
 801ad28:	1e03      	subs	r3, r0, #0
 801ad2a:	d008      	beq.n	801ad3e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	2284      	movs	r2, #132	@ 0x84
 801ad30:	2110      	movs	r1, #16
 801ad32:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801ad34:	68fb      	ldr	r3, [r7, #12]
 801ad36:	2220      	movs	r2, #32
 801ad38:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801ad3a:	2301      	movs	r3, #1
 801ad3c:	e01f      	b.n	801ad7e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	2240      	movs	r2, #64	@ 0x40
 801ad44:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ad46:	f3ef 8310 	mrs	r3, PRIMASK
 801ad4a:	613b      	str	r3, [r7, #16]
  return(result);
 801ad4c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ad4e:	61fb      	str	r3, [r7, #28]
 801ad50:	2301      	movs	r3, #1
 801ad52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad54:	697b      	ldr	r3, [r7, #20]
 801ad56:	f383 8810 	msr	PRIMASK, r3
}
 801ad5a:	46c0      	nop			@ (mov r8, r8)
 801ad5c:	68fb      	ldr	r3, [r7, #12]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	689a      	ldr	r2, [r3, #8]
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	2180      	movs	r1, #128	@ 0x80
 801ad68:	430a      	orrs	r2, r1
 801ad6a:	609a      	str	r2, [r3, #8]
 801ad6c:	69fb      	ldr	r3, [r7, #28]
 801ad6e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ad70:	69bb      	ldr	r3, [r7, #24]
 801ad72:	f383 8810 	msr	PRIMASK, r3
}
 801ad76:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801ad78:	2300      	movs	r3, #0
 801ad7a:	e000      	b.n	801ad7e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801ad7c:	2302      	movs	r3, #2
  }
}
 801ad7e:	0018      	movs	r0, r3
 801ad80:	46bd      	mov	sp, r7
 801ad82:	b008      	add	sp, #32
 801ad84:	bd80      	pop	{r7, pc}
 801ad86:	46c0      	nop			@ (mov r8, r8)
 801ad88:	0801c1d5 	.word	0x0801c1d5
 801ad8c:	0801c271 	.word	0x0801c271
 801ad90:	0801c411 	.word	0x0801c411

0801ad94 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801ad94:	b580      	push	{r7, lr}
 801ad96:	b088      	sub	sp, #32
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	60f8      	str	r0, [r7, #12]
 801ad9c:	60b9      	str	r1, [r7, #8]
 801ad9e:	1dbb      	adds	r3, r7, #6
 801ada0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801ada2:	68fb      	ldr	r3, [r7, #12]
 801ada4:	2280      	movs	r2, #128	@ 0x80
 801ada6:	589b      	ldr	r3, [r3, r2]
 801ada8:	2b20      	cmp	r3, #32
 801adaa:	d14a      	bne.n	801ae42 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801adac:	68bb      	ldr	r3, [r7, #8]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d003      	beq.n	801adba <HAL_UART_Receive_DMA+0x26>
 801adb2:	1dbb      	adds	r3, r7, #6
 801adb4:	881b      	ldrh	r3, [r3, #0]
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d101      	bne.n	801adbe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801adba:	2301      	movs	r3, #1
 801adbc:	e042      	b.n	801ae44 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	689a      	ldr	r2, [r3, #8]
 801adc2:	2380      	movs	r3, #128	@ 0x80
 801adc4:	015b      	lsls	r3, r3, #5
 801adc6:	429a      	cmp	r2, r3
 801adc8:	d109      	bne.n	801adde <HAL_UART_Receive_DMA+0x4a>
 801adca:	68fb      	ldr	r3, [r7, #12]
 801adcc:	691b      	ldr	r3, [r3, #16]
 801adce:	2b00      	cmp	r3, #0
 801add0:	d105      	bne.n	801adde <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801add2:	68bb      	ldr	r3, [r7, #8]
 801add4:	2201      	movs	r2, #1
 801add6:	4013      	ands	r3, r2
 801add8:	d001      	beq.n	801adde <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801adda:	2301      	movs	r3, #1
 801addc:	e032      	b.n	801ae44 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801adde:	68fb      	ldr	r3, [r7, #12]
 801ade0:	2200      	movs	r2, #0
 801ade2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	4a18      	ldr	r2, [pc, #96]	@ (801ae4c <HAL_UART_Receive_DMA+0xb8>)
 801adea:	4293      	cmp	r3, r2
 801adec:	d020      	beq.n	801ae30 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	685a      	ldr	r2, [r3, #4]
 801adf4:	2380      	movs	r3, #128	@ 0x80
 801adf6:	041b      	lsls	r3, r3, #16
 801adf8:	4013      	ands	r3, r2
 801adfa:	d019      	beq.n	801ae30 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adfc:	f3ef 8310 	mrs	r3, PRIMASK
 801ae00:	613b      	str	r3, [r7, #16]
  return(result);
 801ae02:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ae04:	61fb      	str	r3, [r7, #28]
 801ae06:	2301      	movs	r3, #1
 801ae08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae0a:	697b      	ldr	r3, [r7, #20]
 801ae0c:	f383 8810 	msr	PRIMASK, r3
}
 801ae10:	46c0      	nop			@ (mov r8, r8)
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	681a      	ldr	r2, [r3, #0]
 801ae18:	68fb      	ldr	r3, [r7, #12]
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	2180      	movs	r1, #128	@ 0x80
 801ae1e:	04c9      	lsls	r1, r1, #19
 801ae20:	430a      	orrs	r2, r1
 801ae22:	601a      	str	r2, [r3, #0]
 801ae24:	69fb      	ldr	r3, [r7, #28]
 801ae26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae28:	69bb      	ldr	r3, [r7, #24]
 801ae2a:	f383 8810 	msr	PRIMASK, r3
}
 801ae2e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801ae30:	1dbb      	adds	r3, r7, #6
 801ae32:	881a      	ldrh	r2, [r3, #0]
 801ae34:	68b9      	ldr	r1, [r7, #8]
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	0018      	movs	r0, r3
 801ae3a:	f001 f8a3 	bl	801bf84 <UART_Start_Receive_DMA>
 801ae3e:	0003      	movs	r3, r0
 801ae40:	e000      	b.n	801ae44 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801ae42:	2302      	movs	r3, #2
  }
}
 801ae44:	0018      	movs	r0, r3
 801ae46:	46bd      	mov	sp, r7
 801ae48:	b008      	add	sp, #32
 801ae4a:	bd80      	pop	{r7, pc}
 801ae4c:	40004800 	.word	0x40004800

0801ae50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801ae50:	b590      	push	{r4, r7, lr}
 801ae52:	b0ab      	sub	sp, #172	@ 0xac
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	69db      	ldr	r3, [r3, #28]
 801ae5e:	22a4      	movs	r2, #164	@ 0xa4
 801ae60:	18b9      	adds	r1, r7, r2
 801ae62:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	20a0      	movs	r0, #160	@ 0xa0
 801ae6c:	1839      	adds	r1, r7, r0
 801ae6e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	689b      	ldr	r3, [r3, #8]
 801ae76:	219c      	movs	r1, #156	@ 0x9c
 801ae78:	1879      	adds	r1, r7, r1
 801ae7a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801ae7c:	0011      	movs	r1, r2
 801ae7e:	18bb      	adds	r3, r7, r2
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	4a9c      	ldr	r2, [pc, #624]	@ (801b0f4 <HAL_UART_IRQHandler+0x2a4>)
 801ae84:	4013      	ands	r3, r2
 801ae86:	2298      	movs	r2, #152	@ 0x98
 801ae88:	18bc      	adds	r4, r7, r2
 801ae8a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801ae8c:	18bb      	adds	r3, r7, r2
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	2b00      	cmp	r3, #0
 801ae92:	d114      	bne.n	801aebe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801ae94:	187b      	adds	r3, r7, r1
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	2220      	movs	r2, #32
 801ae9a:	4013      	ands	r3, r2
 801ae9c:	d00f      	beq.n	801aebe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801ae9e:	183b      	adds	r3, r7, r0
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	2220      	movs	r2, #32
 801aea4:	4013      	ands	r3, r2
 801aea6:	d00a      	beq.n	801aebe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d100      	bne.n	801aeb2 <HAL_UART_IRQHandler+0x62>
 801aeb0:	e2aa      	b.n	801b408 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801aeb6:	687a      	ldr	r2, [r7, #4]
 801aeb8:	0010      	movs	r0, r2
 801aeba:	4798      	blx	r3
      }
      return;
 801aebc:	e2a4      	b.n	801b408 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801aebe:	2398      	movs	r3, #152	@ 0x98
 801aec0:	18fb      	adds	r3, r7, r3
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d100      	bne.n	801aeca <HAL_UART_IRQHandler+0x7a>
 801aec8:	e11a      	b.n	801b100 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801aeca:	239c      	movs	r3, #156	@ 0x9c
 801aecc:	18fb      	adds	r3, r7, r3
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	2201      	movs	r2, #1
 801aed2:	4013      	ands	r3, r2
 801aed4:	d106      	bne.n	801aee4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801aed6:	23a0      	movs	r3, #160	@ 0xa0
 801aed8:	18fb      	adds	r3, r7, r3
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	4a86      	ldr	r2, [pc, #536]	@ (801b0f8 <HAL_UART_IRQHandler+0x2a8>)
 801aede:	4013      	ands	r3, r2
 801aee0:	d100      	bne.n	801aee4 <HAL_UART_IRQHandler+0x94>
 801aee2:	e10d      	b.n	801b100 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801aee4:	23a4      	movs	r3, #164	@ 0xa4
 801aee6:	18fb      	adds	r3, r7, r3
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	2201      	movs	r2, #1
 801aeec:	4013      	ands	r3, r2
 801aeee:	d012      	beq.n	801af16 <HAL_UART_IRQHandler+0xc6>
 801aef0:	23a0      	movs	r3, #160	@ 0xa0
 801aef2:	18fb      	adds	r3, r7, r3
 801aef4:	681a      	ldr	r2, [r3, #0]
 801aef6:	2380      	movs	r3, #128	@ 0x80
 801aef8:	005b      	lsls	r3, r3, #1
 801aefa:	4013      	ands	r3, r2
 801aefc:	d00b      	beq.n	801af16 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	2201      	movs	r2, #1
 801af04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	2284      	movs	r2, #132	@ 0x84
 801af0a:	589b      	ldr	r3, [r3, r2]
 801af0c:	2201      	movs	r2, #1
 801af0e:	431a      	orrs	r2, r3
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	2184      	movs	r1, #132	@ 0x84
 801af14:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801af16:	23a4      	movs	r3, #164	@ 0xa4
 801af18:	18fb      	adds	r3, r7, r3
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	2202      	movs	r2, #2
 801af1e:	4013      	ands	r3, r2
 801af20:	d011      	beq.n	801af46 <HAL_UART_IRQHandler+0xf6>
 801af22:	239c      	movs	r3, #156	@ 0x9c
 801af24:	18fb      	adds	r3, r7, r3
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	2201      	movs	r2, #1
 801af2a:	4013      	ands	r3, r2
 801af2c:	d00b      	beq.n	801af46 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	2202      	movs	r2, #2
 801af34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	2284      	movs	r2, #132	@ 0x84
 801af3a:	589b      	ldr	r3, [r3, r2]
 801af3c:	2204      	movs	r2, #4
 801af3e:	431a      	orrs	r2, r3
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	2184      	movs	r1, #132	@ 0x84
 801af44:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801af46:	23a4      	movs	r3, #164	@ 0xa4
 801af48:	18fb      	adds	r3, r7, r3
 801af4a:	681b      	ldr	r3, [r3, #0]
 801af4c:	2204      	movs	r2, #4
 801af4e:	4013      	ands	r3, r2
 801af50:	d011      	beq.n	801af76 <HAL_UART_IRQHandler+0x126>
 801af52:	239c      	movs	r3, #156	@ 0x9c
 801af54:	18fb      	adds	r3, r7, r3
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	2201      	movs	r2, #1
 801af5a:	4013      	ands	r3, r2
 801af5c:	d00b      	beq.n	801af76 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	2204      	movs	r2, #4
 801af64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	2284      	movs	r2, #132	@ 0x84
 801af6a:	589b      	ldr	r3, [r3, r2]
 801af6c:	2202      	movs	r2, #2
 801af6e:	431a      	orrs	r2, r3
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	2184      	movs	r1, #132	@ 0x84
 801af74:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801af76:	23a4      	movs	r3, #164	@ 0xa4
 801af78:	18fb      	adds	r3, r7, r3
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	2208      	movs	r2, #8
 801af7e:	4013      	ands	r3, r2
 801af80:	d017      	beq.n	801afb2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801af82:	23a0      	movs	r3, #160	@ 0xa0
 801af84:	18fb      	adds	r3, r7, r3
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	2220      	movs	r2, #32
 801af8a:	4013      	ands	r3, r2
 801af8c:	d105      	bne.n	801af9a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801af8e:	239c      	movs	r3, #156	@ 0x9c
 801af90:	18fb      	adds	r3, r7, r3
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	2201      	movs	r2, #1
 801af96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801af98:	d00b      	beq.n	801afb2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	2208      	movs	r2, #8
 801afa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	2284      	movs	r2, #132	@ 0x84
 801afa6:	589b      	ldr	r3, [r3, r2]
 801afa8:	2208      	movs	r2, #8
 801afaa:	431a      	orrs	r2, r3
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	2184      	movs	r1, #132	@ 0x84
 801afb0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801afb2:	23a4      	movs	r3, #164	@ 0xa4
 801afb4:	18fb      	adds	r3, r7, r3
 801afb6:	681a      	ldr	r2, [r3, #0]
 801afb8:	2380      	movs	r3, #128	@ 0x80
 801afba:	011b      	lsls	r3, r3, #4
 801afbc:	4013      	ands	r3, r2
 801afbe:	d013      	beq.n	801afe8 <HAL_UART_IRQHandler+0x198>
 801afc0:	23a0      	movs	r3, #160	@ 0xa0
 801afc2:	18fb      	adds	r3, r7, r3
 801afc4:	681a      	ldr	r2, [r3, #0]
 801afc6:	2380      	movs	r3, #128	@ 0x80
 801afc8:	04db      	lsls	r3, r3, #19
 801afca:	4013      	ands	r3, r2
 801afcc:	d00c      	beq.n	801afe8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	2280      	movs	r2, #128	@ 0x80
 801afd4:	0112      	lsls	r2, r2, #4
 801afd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	2284      	movs	r2, #132	@ 0x84
 801afdc:	589b      	ldr	r3, [r3, r2]
 801afde:	2220      	movs	r2, #32
 801afe0:	431a      	orrs	r2, r3
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	2184      	movs	r1, #132	@ 0x84
 801afe6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	2284      	movs	r2, #132	@ 0x84
 801afec:	589b      	ldr	r3, [r3, r2]
 801afee:	2b00      	cmp	r3, #0
 801aff0:	d100      	bne.n	801aff4 <HAL_UART_IRQHandler+0x1a4>
 801aff2:	e20b      	b.n	801b40c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801aff4:	23a4      	movs	r3, #164	@ 0xa4
 801aff6:	18fb      	adds	r3, r7, r3
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	2220      	movs	r2, #32
 801affc:	4013      	ands	r3, r2
 801affe:	d00e      	beq.n	801b01e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b000:	23a0      	movs	r3, #160	@ 0xa0
 801b002:	18fb      	adds	r3, r7, r3
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	2220      	movs	r2, #32
 801b008:	4013      	ands	r3, r2
 801b00a:	d008      	beq.n	801b01e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b010:	2b00      	cmp	r3, #0
 801b012:	d004      	beq.n	801b01e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b018:	687a      	ldr	r2, [r7, #4]
 801b01a:	0010      	movs	r0, r2
 801b01c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	2284      	movs	r2, #132	@ 0x84
 801b022:	589b      	ldr	r3, [r3, r2]
 801b024:	2194      	movs	r1, #148	@ 0x94
 801b026:	187a      	adds	r2, r7, r1
 801b028:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	689b      	ldr	r3, [r3, #8]
 801b030:	2240      	movs	r2, #64	@ 0x40
 801b032:	4013      	ands	r3, r2
 801b034:	2b40      	cmp	r3, #64	@ 0x40
 801b036:	d004      	beq.n	801b042 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b038:	187b      	adds	r3, r7, r1
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	2228      	movs	r2, #40	@ 0x28
 801b03e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b040:	d04b      	beq.n	801b0da <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	0018      	movs	r0, r3
 801b046:	f001 f861 	bl	801c10c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	689b      	ldr	r3, [r3, #8]
 801b050:	2240      	movs	r2, #64	@ 0x40
 801b052:	4013      	ands	r3, r2
 801b054:	2b40      	cmp	r3, #64	@ 0x40
 801b056:	d139      	bne.n	801b0cc <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b058:	f3ef 8310 	mrs	r3, PRIMASK
 801b05c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801b05e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b060:	2090      	movs	r0, #144	@ 0x90
 801b062:	183a      	adds	r2, r7, r0
 801b064:	6013      	str	r3, [r2, #0]
 801b066:	2301      	movs	r3, #1
 801b068:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b06a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b06c:	f383 8810 	msr	PRIMASK, r3
}
 801b070:	46c0      	nop			@ (mov r8, r8)
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	689a      	ldr	r2, [r3, #8]
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	2140      	movs	r1, #64	@ 0x40
 801b07e:	438a      	bics	r2, r1
 801b080:	609a      	str	r2, [r3, #8]
 801b082:	183b      	adds	r3, r7, r0
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b088:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b08a:	f383 8810 	msr	PRIMASK, r3
}
 801b08e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b094:	2b00      	cmp	r3, #0
 801b096:	d012      	beq.n	801b0be <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b09c:	4a17      	ldr	r2, [pc, #92]	@ (801b0fc <HAL_UART_IRQHandler+0x2ac>)
 801b09e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0a4:	0018      	movs	r0, r3
 801b0a6:	f7f7 fe1b 	bl	8012ce0 <HAL_DMA_Abort_IT>
 801b0aa:	1e03      	subs	r3, r0, #0
 801b0ac:	d020      	beq.n	801b0f0 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b0b8:	0018      	movs	r0, r3
 801b0ba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b0bc:	e018      	b.n	801b0f0 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	2298      	movs	r2, #152	@ 0x98
 801b0c2:	589b      	ldr	r3, [r3, r2]
 801b0c4:	687a      	ldr	r2, [r7, #4]
 801b0c6:	0010      	movs	r0, r2
 801b0c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b0ca:	e011      	b.n	801b0f0 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	2298      	movs	r2, #152	@ 0x98
 801b0d0:	589b      	ldr	r3, [r3, r2]
 801b0d2:	687a      	ldr	r2, [r7, #4]
 801b0d4:	0010      	movs	r0, r2
 801b0d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b0d8:	e00a      	b.n	801b0f0 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	2298      	movs	r2, #152	@ 0x98
 801b0de:	589b      	ldr	r3, [r3, r2]
 801b0e0:	687a      	ldr	r2, [r7, #4]
 801b0e2:	0010      	movs	r0, r2
 801b0e4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	2284      	movs	r2, #132	@ 0x84
 801b0ea:	2100      	movs	r1, #0
 801b0ec:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801b0ee:	e18d      	b.n	801b40c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b0f0:	46c0      	nop			@ (mov r8, r8)
    return;
 801b0f2:	e18b      	b.n	801b40c <HAL_UART_IRQHandler+0x5bc>
 801b0f4:	0000080f 	.word	0x0000080f
 801b0f8:	04000120 	.word	0x04000120
 801b0fc:	0801c499 	.word	0x0801c499

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b104:	2b01      	cmp	r3, #1
 801b106:	d000      	beq.n	801b10a <HAL_UART_IRQHandler+0x2ba>
 801b108:	e13d      	b.n	801b386 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b10a:	23a4      	movs	r3, #164	@ 0xa4
 801b10c:	18fb      	adds	r3, r7, r3
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	2210      	movs	r2, #16
 801b112:	4013      	ands	r3, r2
 801b114:	d100      	bne.n	801b118 <HAL_UART_IRQHandler+0x2c8>
 801b116:	e136      	b.n	801b386 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b118:	23a0      	movs	r3, #160	@ 0xa0
 801b11a:	18fb      	adds	r3, r7, r3
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	2210      	movs	r2, #16
 801b120:	4013      	ands	r3, r2
 801b122:	d100      	bne.n	801b126 <HAL_UART_IRQHandler+0x2d6>
 801b124:	e12f      	b.n	801b386 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	2210      	movs	r2, #16
 801b12c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	689b      	ldr	r3, [r3, #8]
 801b134:	2240      	movs	r2, #64	@ 0x40
 801b136:	4013      	ands	r3, r2
 801b138:	2b40      	cmp	r3, #64	@ 0x40
 801b13a:	d000      	beq.n	801b13e <HAL_UART_IRQHandler+0x2ee>
 801b13c:	e0a2      	b.n	801b284 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	685a      	ldr	r2, [r3, #4]
 801b146:	217e      	movs	r1, #126	@ 0x7e
 801b148:	187b      	adds	r3, r7, r1
 801b14a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801b14c:	187b      	adds	r3, r7, r1
 801b14e:	881b      	ldrh	r3, [r3, #0]
 801b150:	2b00      	cmp	r3, #0
 801b152:	d100      	bne.n	801b156 <HAL_UART_IRQHandler+0x306>
 801b154:	e15c      	b.n	801b410 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	2258      	movs	r2, #88	@ 0x58
 801b15a:	5a9b      	ldrh	r3, [r3, r2]
 801b15c:	187a      	adds	r2, r7, r1
 801b15e:	8812      	ldrh	r2, [r2, #0]
 801b160:	429a      	cmp	r2, r3
 801b162:	d300      	bcc.n	801b166 <HAL_UART_IRQHandler+0x316>
 801b164:	e154      	b.n	801b410 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	187a      	adds	r2, r7, r1
 801b16a:	215a      	movs	r1, #90	@ 0x5a
 801b16c:	8812      	ldrh	r2, [r2, #0]
 801b16e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	2220      	movs	r2, #32
 801b17a:	4013      	ands	r3, r2
 801b17c:	d16f      	bne.n	801b25e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b17e:	f3ef 8310 	mrs	r3, PRIMASK
 801b182:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801b184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b186:	67bb      	str	r3, [r7, #120]	@ 0x78
 801b188:	2301      	movs	r3, #1
 801b18a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b18c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b18e:	f383 8810 	msr	PRIMASK, r3
}
 801b192:	46c0      	nop			@ (mov r8, r8)
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	681a      	ldr	r2, [r3, #0]
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	49a0      	ldr	r1, [pc, #640]	@ (801b420 <HAL_UART_IRQHandler+0x5d0>)
 801b1a0:	400a      	ands	r2, r1
 801b1a2:	601a      	str	r2, [r3, #0]
 801b1a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b1a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b1aa:	f383 8810 	msr	PRIMASK, r3
}
 801b1ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1b0:	f3ef 8310 	mrs	r3, PRIMASK
 801b1b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801b1b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b1b8:	677b      	str	r3, [r7, #116]	@ 0x74
 801b1ba:	2301      	movs	r3, #1
 801b1bc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b1c0:	f383 8810 	msr	PRIMASK, r3
}
 801b1c4:	46c0      	nop			@ (mov r8, r8)
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	689a      	ldr	r2, [r3, #8]
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	2101      	movs	r1, #1
 801b1d2:	438a      	bics	r2, r1
 801b1d4:	609a      	str	r2, [r3, #8]
 801b1d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b1d8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b1dc:	f383 8810 	msr	PRIMASK, r3
}
 801b1e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1e2:	f3ef 8310 	mrs	r3, PRIMASK
 801b1e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801b1e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b1ea:	673b      	str	r3, [r7, #112]	@ 0x70
 801b1ec:	2301      	movs	r3, #1
 801b1ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1f2:	f383 8810 	msr	PRIMASK, r3
}
 801b1f6:	46c0      	nop			@ (mov r8, r8)
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	689a      	ldr	r2, [r3, #8]
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	2140      	movs	r1, #64	@ 0x40
 801b204:	438a      	bics	r2, r1
 801b206:	609a      	str	r2, [r3, #8]
 801b208:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b20a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b20c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b20e:	f383 8810 	msr	PRIMASK, r3
}
 801b212:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	2280      	movs	r2, #128	@ 0x80
 801b218:	2120      	movs	r1, #32
 801b21a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	2200      	movs	r2, #0
 801b220:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b222:	f3ef 8310 	mrs	r3, PRIMASK
 801b226:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801b228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b22a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801b22c:	2301      	movs	r3, #1
 801b22e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b232:	f383 8810 	msr	PRIMASK, r3
}
 801b236:	46c0      	nop			@ (mov r8, r8)
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	681a      	ldr	r2, [r3, #0]
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	2110      	movs	r1, #16
 801b244:	438a      	bics	r2, r1
 801b246:	601a      	str	r2, [r3, #0]
 801b248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b24a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b24c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b24e:	f383 8810 	msr	PRIMASK, r3
}
 801b252:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b258:	0018      	movs	r0, r3
 801b25a:	f7f7 fd01 	bl	8012c60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	2202      	movs	r2, #2
 801b262:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	22ac      	movs	r2, #172	@ 0xac
 801b268:	589b      	ldr	r3, [r3, r2]
 801b26a:	687a      	ldr	r2, [r7, #4]
 801b26c:	2158      	movs	r1, #88	@ 0x58
 801b26e:	5a51      	ldrh	r1, [r2, r1]
 801b270:	687a      	ldr	r2, [r7, #4]
 801b272:	205a      	movs	r0, #90	@ 0x5a
 801b274:	5a12      	ldrh	r2, [r2, r0]
 801b276:	b292      	uxth	r2, r2
 801b278:	1a8a      	subs	r2, r1, r2
 801b27a:	b291      	uxth	r1, r2
 801b27c:	687a      	ldr	r2, [r7, #4]
 801b27e:	0010      	movs	r0, r2
 801b280:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b282:	e0c5      	b.n	801b410 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	2258      	movs	r2, #88	@ 0x58
 801b288:	5a99      	ldrh	r1, [r3, r2]
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	225a      	movs	r2, #90	@ 0x5a
 801b28e:	5a9b      	ldrh	r3, [r3, r2]
 801b290:	b29a      	uxth	r2, r3
 801b292:	208e      	movs	r0, #142	@ 0x8e
 801b294:	183b      	adds	r3, r7, r0
 801b296:	1a8a      	subs	r2, r1, r2
 801b298:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	225a      	movs	r2, #90	@ 0x5a
 801b29e:	5a9b      	ldrh	r3, [r3, r2]
 801b2a0:	b29b      	uxth	r3, r3
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d100      	bne.n	801b2a8 <HAL_UART_IRQHandler+0x458>
 801b2a6:	e0b5      	b.n	801b414 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801b2a8:	183b      	adds	r3, r7, r0
 801b2aa:	881b      	ldrh	r3, [r3, #0]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d100      	bne.n	801b2b2 <HAL_UART_IRQHandler+0x462>
 801b2b0:	e0b0      	b.n	801b414 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2b2:	f3ef 8310 	mrs	r3, PRIMASK
 801b2b6:	60fb      	str	r3, [r7, #12]
  return(result);
 801b2b8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b2ba:	2488      	movs	r4, #136	@ 0x88
 801b2bc:	193a      	adds	r2, r7, r4
 801b2be:	6013      	str	r3, [r2, #0]
 801b2c0:	2301      	movs	r3, #1
 801b2c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2c4:	693b      	ldr	r3, [r7, #16]
 801b2c6:	f383 8810 	msr	PRIMASK, r3
}
 801b2ca:	46c0      	nop			@ (mov r8, r8)
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	681a      	ldr	r2, [r3, #0]
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	4953      	ldr	r1, [pc, #332]	@ (801b424 <HAL_UART_IRQHandler+0x5d4>)
 801b2d8:	400a      	ands	r2, r1
 801b2da:	601a      	str	r2, [r3, #0]
 801b2dc:	193b      	adds	r3, r7, r4
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2e2:	697b      	ldr	r3, [r7, #20]
 801b2e4:	f383 8810 	msr	PRIMASK, r3
}
 801b2e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b2ea:	f3ef 8310 	mrs	r3, PRIMASK
 801b2ee:	61bb      	str	r3, [r7, #24]
  return(result);
 801b2f0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b2f2:	2484      	movs	r4, #132	@ 0x84
 801b2f4:	193a      	adds	r2, r7, r4
 801b2f6:	6013      	str	r3, [r2, #0]
 801b2f8:	2301      	movs	r3, #1
 801b2fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2fc:	69fb      	ldr	r3, [r7, #28]
 801b2fe:	f383 8810 	msr	PRIMASK, r3
}
 801b302:	46c0      	nop			@ (mov r8, r8)
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	689a      	ldr	r2, [r3, #8]
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	2101      	movs	r1, #1
 801b310:	438a      	bics	r2, r1
 801b312:	609a      	str	r2, [r3, #8]
 801b314:	193b      	adds	r3, r7, r4
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b31a:	6a3b      	ldr	r3, [r7, #32]
 801b31c:	f383 8810 	msr	PRIMASK, r3
}
 801b320:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	2280      	movs	r2, #128	@ 0x80
 801b326:	2120      	movs	r1, #32
 801b328:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	2200      	movs	r2, #0
 801b32e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	2200      	movs	r2, #0
 801b334:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b336:	f3ef 8310 	mrs	r3, PRIMASK
 801b33a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b33e:	2480      	movs	r4, #128	@ 0x80
 801b340:	193a      	adds	r2, r7, r4
 801b342:	6013      	str	r3, [r2, #0]
 801b344:	2301      	movs	r3, #1
 801b346:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b34a:	f383 8810 	msr	PRIMASK, r3
}
 801b34e:	46c0      	nop			@ (mov r8, r8)
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	681a      	ldr	r2, [r3, #0]
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	2110      	movs	r1, #16
 801b35c:	438a      	bics	r2, r1
 801b35e:	601a      	str	r2, [r3, #0]
 801b360:	193b      	adds	r3, r7, r4
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b368:	f383 8810 	msr	PRIMASK, r3
}
 801b36c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	2202      	movs	r2, #2
 801b372:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	22ac      	movs	r2, #172	@ 0xac
 801b378:	589b      	ldr	r3, [r3, r2]
 801b37a:	183a      	adds	r2, r7, r0
 801b37c:	8811      	ldrh	r1, [r2, #0]
 801b37e:	687a      	ldr	r2, [r7, #4]
 801b380:	0010      	movs	r0, r2
 801b382:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b384:	e046      	b.n	801b414 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801b386:	23a4      	movs	r3, #164	@ 0xa4
 801b388:	18fb      	adds	r3, r7, r3
 801b38a:	681a      	ldr	r2, [r3, #0]
 801b38c:	2380      	movs	r3, #128	@ 0x80
 801b38e:	035b      	lsls	r3, r3, #13
 801b390:	4013      	ands	r3, r2
 801b392:	d012      	beq.n	801b3ba <HAL_UART_IRQHandler+0x56a>
 801b394:	239c      	movs	r3, #156	@ 0x9c
 801b396:	18fb      	adds	r3, r7, r3
 801b398:	681a      	ldr	r2, [r3, #0]
 801b39a:	2380      	movs	r3, #128	@ 0x80
 801b39c:	03db      	lsls	r3, r3, #15
 801b39e:	4013      	ands	r3, r2
 801b3a0:	d00b      	beq.n	801b3ba <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	2280      	movs	r2, #128	@ 0x80
 801b3a8:	0352      	lsls	r2, r2, #13
 801b3aa:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	22a8      	movs	r2, #168	@ 0xa8
 801b3b0:	589b      	ldr	r3, [r3, r2]
 801b3b2:	687a      	ldr	r2, [r7, #4]
 801b3b4:	0010      	movs	r0, r2
 801b3b6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801b3b8:	e02f      	b.n	801b41a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801b3ba:	23a4      	movs	r3, #164	@ 0xa4
 801b3bc:	18fb      	adds	r3, r7, r3
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	2280      	movs	r2, #128	@ 0x80
 801b3c2:	4013      	ands	r3, r2
 801b3c4:	d00f      	beq.n	801b3e6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801b3c6:	23a0      	movs	r3, #160	@ 0xa0
 801b3c8:	18fb      	adds	r3, r7, r3
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	2280      	movs	r2, #128	@ 0x80
 801b3ce:	4013      	ands	r3, r2
 801b3d0:	d009      	beq.n	801b3e6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d01e      	beq.n	801b418 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b3de:	687a      	ldr	r2, [r7, #4]
 801b3e0:	0010      	movs	r0, r2
 801b3e2:	4798      	blx	r3
    }
    return;
 801b3e4:	e018      	b.n	801b418 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801b3e6:	23a4      	movs	r3, #164	@ 0xa4
 801b3e8:	18fb      	adds	r3, r7, r3
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	2240      	movs	r2, #64	@ 0x40
 801b3ee:	4013      	ands	r3, r2
 801b3f0:	d013      	beq.n	801b41a <HAL_UART_IRQHandler+0x5ca>
 801b3f2:	23a0      	movs	r3, #160	@ 0xa0
 801b3f4:	18fb      	adds	r3, r7, r3
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	2240      	movs	r2, #64	@ 0x40
 801b3fa:	4013      	ands	r3, r2
 801b3fc:	d00d      	beq.n	801b41a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	0018      	movs	r0, r3
 801b402:	f001 f862 	bl	801c4ca <UART_EndTransmit_IT>
    return;
 801b406:	e008      	b.n	801b41a <HAL_UART_IRQHandler+0x5ca>
      return;
 801b408:	46c0      	nop			@ (mov r8, r8)
 801b40a:	e006      	b.n	801b41a <HAL_UART_IRQHandler+0x5ca>
    return;
 801b40c:	46c0      	nop			@ (mov r8, r8)
 801b40e:	e004      	b.n	801b41a <HAL_UART_IRQHandler+0x5ca>
      return;
 801b410:	46c0      	nop			@ (mov r8, r8)
 801b412:	e002      	b.n	801b41a <HAL_UART_IRQHandler+0x5ca>
      return;
 801b414:	46c0      	nop			@ (mov r8, r8)
 801b416:	e000      	b.n	801b41a <HAL_UART_IRQHandler+0x5ca>
    return;
 801b418:	46c0      	nop			@ (mov r8, r8)
  }

}
 801b41a:	46bd      	mov	sp, r7
 801b41c:	b02b      	add	sp, #172	@ 0xac
 801b41e:	bd90      	pop	{r4, r7, pc}
 801b420:	fffffeff 	.word	0xfffffeff
 801b424:	fffffedf 	.word	0xfffffedf

0801b428 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b082      	sub	sp, #8
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801b430:	46c0      	nop			@ (mov r8, r8)
 801b432:	46bd      	mov	sp, r7
 801b434:	b002      	add	sp, #8
 801b436:	bd80      	pop	{r7, pc}

0801b438 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b082      	sub	sp, #8
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801b440:	46c0      	nop			@ (mov r8, r8)
 801b442:	46bd      	mov	sp, r7
 801b444:	b002      	add	sp, #8
 801b446:	bd80      	pop	{r7, pc}

0801b448 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b448:	b580      	push	{r7, lr}
 801b44a:	b082      	sub	sp, #8
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801b450:	46c0      	nop			@ (mov r8, r8)
 801b452:	46bd      	mov	sp, r7
 801b454:	b002      	add	sp, #8
 801b456:	bd80      	pop	{r7, pc}

0801b458 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801b458:	b580      	push	{r7, lr}
 801b45a:	b082      	sub	sp, #8
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801b460:	46c0      	nop			@ (mov r8, r8)
 801b462:	46bd      	mov	sp, r7
 801b464:	b002      	add	sp, #8
 801b466:	bd80      	pop	{r7, pc}

0801b468 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801b468:	b580      	push	{r7, lr}
 801b46a:	b082      	sub	sp, #8
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801b470:	46c0      	nop			@ (mov r8, r8)
 801b472:	46bd      	mov	sp, r7
 801b474:	b002      	add	sp, #8
 801b476:	bd80      	pop	{r7, pc}

0801b478 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801b478:	b580      	push	{r7, lr}
 801b47a:	b082      	sub	sp, #8
 801b47c:	af00      	add	r7, sp, #0
 801b47e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801b480:	46c0      	nop			@ (mov r8, r8)
 801b482:	46bd      	mov	sp, r7
 801b484:	b002      	add	sp, #8
 801b486:	bd80      	pop	{r7, pc}

0801b488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801b488:	b580      	push	{r7, lr}
 801b48a:	b082      	sub	sp, #8
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	6078      	str	r0, [r7, #4]
 801b490:	000a      	movs	r2, r1
 801b492:	1cbb      	adds	r3, r7, #2
 801b494:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801b496:	46c0      	nop			@ (mov r8, r8)
 801b498:	46bd      	mov	sp, r7
 801b49a:	b002      	add	sp, #8
 801b49c:	bd80      	pop	{r7, pc}
	...

0801b4a0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801b4a0:	b580      	push	{r7, lr}
 801b4a2:	b082      	sub	sp, #8
 801b4a4:	af00      	add	r7, sp, #0
 801b4a6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	2188      	movs	r1, #136	@ 0x88
 801b4ac:	4a14      	ldr	r2, [pc, #80]	@ (801b500 <UART_InitCallbacksToDefault+0x60>)
 801b4ae:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	218c      	movs	r1, #140	@ 0x8c
 801b4b4:	4a13      	ldr	r2, [pc, #76]	@ (801b504 <UART_InitCallbacksToDefault+0x64>)
 801b4b6:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	2190      	movs	r1, #144	@ 0x90
 801b4bc:	4a12      	ldr	r2, [pc, #72]	@ (801b508 <UART_InitCallbacksToDefault+0x68>)
 801b4be:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	2194      	movs	r1, #148	@ 0x94
 801b4c4:	4a11      	ldr	r2, [pc, #68]	@ (801b50c <UART_InitCallbacksToDefault+0x6c>)
 801b4c6:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	2198      	movs	r1, #152	@ 0x98
 801b4cc:	4a10      	ldr	r2, [pc, #64]	@ (801b510 <UART_InitCallbacksToDefault+0x70>)
 801b4ce:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	219c      	movs	r1, #156	@ 0x9c
 801b4d4:	4a0f      	ldr	r2, [pc, #60]	@ (801b514 <UART_InitCallbacksToDefault+0x74>)
 801b4d6:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	21a0      	movs	r1, #160	@ 0xa0
 801b4dc:	4a0e      	ldr	r2, [pc, #56]	@ (801b518 <UART_InitCallbacksToDefault+0x78>)
 801b4de:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	21a4      	movs	r1, #164	@ 0xa4
 801b4e4:	4a0d      	ldr	r2, [pc, #52]	@ (801b51c <UART_InitCallbacksToDefault+0x7c>)
 801b4e6:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	21a8      	movs	r1, #168	@ 0xa8
 801b4ec:	4a0c      	ldr	r2, [pc, #48]	@ (801b520 <UART_InitCallbacksToDefault+0x80>)
 801b4ee:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	21ac      	movs	r1, #172	@ 0xac
 801b4f4:	4a0b      	ldr	r2, [pc, #44]	@ (801b524 <UART_InitCallbacksToDefault+0x84>)
 801b4f6:	505a      	str	r2, [r3, r1]

}
 801b4f8:	46c0      	nop			@ (mov r8, r8)
 801b4fa:	46bd      	mov	sp, r7
 801b4fc:	b002      	add	sp, #8
 801b4fe:	bd80      	pop	{r7, pc}
 801b500:	0801b439 	.word	0x0801b439
 801b504:	0801b429 	.word	0x0801b429
 801b508:	0801b449 	.word	0x0801b449
 801b50c:	0800b241 	.word	0x0800b241
 801b510:	080049f5 	.word	0x080049f5
 801b514:	0801b459 	.word	0x0801b459
 801b518:	0801b469 	.word	0x0801b469
 801b51c:	0801b479 	.word	0x0801b479
 801b520:	0801c8bd 	.word	0x0801c8bd
 801b524:	0801b489 	.word	0x0801b489

0801b528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b528:	b5b0      	push	{r4, r5, r7, lr}
 801b52a:	b08e      	sub	sp, #56	@ 0x38
 801b52c:	af00      	add	r7, sp, #0
 801b52e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801b530:	231a      	movs	r3, #26
 801b532:	2218      	movs	r2, #24
 801b534:	189b      	adds	r3, r3, r2
 801b536:	19db      	adds	r3, r3, r7
 801b538:	2200      	movs	r2, #0
 801b53a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801b53c:	69fb      	ldr	r3, [r7, #28]
 801b53e:	689a      	ldr	r2, [r3, #8]
 801b540:	69fb      	ldr	r3, [r7, #28]
 801b542:	691b      	ldr	r3, [r3, #16]
 801b544:	431a      	orrs	r2, r3
 801b546:	69fb      	ldr	r3, [r7, #28]
 801b548:	695b      	ldr	r3, [r3, #20]
 801b54a:	431a      	orrs	r2, r3
 801b54c:	69fb      	ldr	r3, [r7, #28]
 801b54e:	69db      	ldr	r3, [r3, #28]
 801b550:	4313      	orrs	r3, r2
 801b552:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801b554:	69fb      	ldr	r3, [r7, #28]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	4ac3      	ldr	r2, [pc, #780]	@ (801b868 <UART_SetConfig+0x340>)
 801b55c:	4013      	ands	r3, r2
 801b55e:	0019      	movs	r1, r3
 801b560:	69fb      	ldr	r3, [r7, #28]
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b566:	430a      	orrs	r2, r1
 801b568:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b56a:	69fb      	ldr	r3, [r7, #28]
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	685b      	ldr	r3, [r3, #4]
 801b570:	4abe      	ldr	r2, [pc, #760]	@ (801b86c <UART_SetConfig+0x344>)
 801b572:	4013      	ands	r3, r2
 801b574:	0019      	movs	r1, r3
 801b576:	69fb      	ldr	r3, [r7, #28]
 801b578:	68da      	ldr	r2, [r3, #12]
 801b57a:	69fb      	ldr	r3, [r7, #28]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	430a      	orrs	r2, r1
 801b580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801b582:	69fb      	ldr	r3, [r7, #28]
 801b584:	699b      	ldr	r3, [r3, #24]
 801b586:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801b588:	69fb      	ldr	r3, [r7, #28]
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	4ab8      	ldr	r2, [pc, #736]	@ (801b870 <UART_SetConfig+0x348>)
 801b58e:	4293      	cmp	r3, r2
 801b590:	d004      	beq.n	801b59c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801b592:	69fb      	ldr	r3, [r7, #28]
 801b594:	6a1b      	ldr	r3, [r3, #32]
 801b596:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b598:	4313      	orrs	r3, r2
 801b59a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801b59c:	69fb      	ldr	r3, [r7, #28]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	689b      	ldr	r3, [r3, #8]
 801b5a2:	4ab4      	ldr	r2, [pc, #720]	@ (801b874 <UART_SetConfig+0x34c>)
 801b5a4:	4013      	ands	r3, r2
 801b5a6:	0019      	movs	r1, r3
 801b5a8:	69fb      	ldr	r3, [r7, #28]
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b5ae:	430a      	orrs	r2, r1
 801b5b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801b5b2:	69fb      	ldr	r3, [r7, #28]
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	4ab0      	ldr	r2, [pc, #704]	@ (801b878 <UART_SetConfig+0x350>)
 801b5b8:	4293      	cmp	r3, r2
 801b5ba:	d131      	bne.n	801b620 <UART_SetConfig+0xf8>
 801b5bc:	4baf      	ldr	r3, [pc, #700]	@ (801b87c <UART_SetConfig+0x354>)
 801b5be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b5c0:	2203      	movs	r2, #3
 801b5c2:	4013      	ands	r3, r2
 801b5c4:	2b03      	cmp	r3, #3
 801b5c6:	d01d      	beq.n	801b604 <UART_SetConfig+0xdc>
 801b5c8:	d823      	bhi.n	801b612 <UART_SetConfig+0xea>
 801b5ca:	2b02      	cmp	r3, #2
 801b5cc:	d00c      	beq.n	801b5e8 <UART_SetConfig+0xc0>
 801b5ce:	d820      	bhi.n	801b612 <UART_SetConfig+0xea>
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d002      	beq.n	801b5da <UART_SetConfig+0xb2>
 801b5d4:	2b01      	cmp	r3, #1
 801b5d6:	d00e      	beq.n	801b5f6 <UART_SetConfig+0xce>
 801b5d8:	e01b      	b.n	801b612 <UART_SetConfig+0xea>
 801b5da:	231b      	movs	r3, #27
 801b5dc:	2218      	movs	r2, #24
 801b5de:	189b      	adds	r3, r3, r2
 801b5e0:	19db      	adds	r3, r3, r7
 801b5e2:	2201      	movs	r2, #1
 801b5e4:	701a      	strb	r2, [r3, #0]
 801b5e6:	e0b4      	b.n	801b752 <UART_SetConfig+0x22a>
 801b5e8:	231b      	movs	r3, #27
 801b5ea:	2218      	movs	r2, #24
 801b5ec:	189b      	adds	r3, r3, r2
 801b5ee:	19db      	adds	r3, r3, r7
 801b5f0:	2202      	movs	r2, #2
 801b5f2:	701a      	strb	r2, [r3, #0]
 801b5f4:	e0ad      	b.n	801b752 <UART_SetConfig+0x22a>
 801b5f6:	231b      	movs	r3, #27
 801b5f8:	2218      	movs	r2, #24
 801b5fa:	189b      	adds	r3, r3, r2
 801b5fc:	19db      	adds	r3, r3, r7
 801b5fe:	2204      	movs	r2, #4
 801b600:	701a      	strb	r2, [r3, #0]
 801b602:	e0a6      	b.n	801b752 <UART_SetConfig+0x22a>
 801b604:	231b      	movs	r3, #27
 801b606:	2218      	movs	r2, #24
 801b608:	189b      	adds	r3, r3, r2
 801b60a:	19db      	adds	r3, r3, r7
 801b60c:	2208      	movs	r2, #8
 801b60e:	701a      	strb	r2, [r3, #0]
 801b610:	e09f      	b.n	801b752 <UART_SetConfig+0x22a>
 801b612:	231b      	movs	r3, #27
 801b614:	2218      	movs	r2, #24
 801b616:	189b      	adds	r3, r3, r2
 801b618:	19db      	adds	r3, r3, r7
 801b61a:	2210      	movs	r2, #16
 801b61c:	701a      	strb	r2, [r3, #0]
 801b61e:	e098      	b.n	801b752 <UART_SetConfig+0x22a>
 801b620:	69fb      	ldr	r3, [r7, #28]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	4a96      	ldr	r2, [pc, #600]	@ (801b880 <UART_SetConfig+0x358>)
 801b626:	4293      	cmp	r3, r2
 801b628:	d131      	bne.n	801b68e <UART_SetConfig+0x166>
 801b62a:	4b94      	ldr	r3, [pc, #592]	@ (801b87c <UART_SetConfig+0x354>)
 801b62c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b62e:	220c      	movs	r2, #12
 801b630:	4013      	ands	r3, r2
 801b632:	2b0c      	cmp	r3, #12
 801b634:	d01d      	beq.n	801b672 <UART_SetConfig+0x14a>
 801b636:	d823      	bhi.n	801b680 <UART_SetConfig+0x158>
 801b638:	2b08      	cmp	r3, #8
 801b63a:	d00c      	beq.n	801b656 <UART_SetConfig+0x12e>
 801b63c:	d820      	bhi.n	801b680 <UART_SetConfig+0x158>
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d002      	beq.n	801b648 <UART_SetConfig+0x120>
 801b642:	2b04      	cmp	r3, #4
 801b644:	d00e      	beq.n	801b664 <UART_SetConfig+0x13c>
 801b646:	e01b      	b.n	801b680 <UART_SetConfig+0x158>
 801b648:	231b      	movs	r3, #27
 801b64a:	2218      	movs	r2, #24
 801b64c:	189b      	adds	r3, r3, r2
 801b64e:	19db      	adds	r3, r3, r7
 801b650:	2200      	movs	r2, #0
 801b652:	701a      	strb	r2, [r3, #0]
 801b654:	e07d      	b.n	801b752 <UART_SetConfig+0x22a>
 801b656:	231b      	movs	r3, #27
 801b658:	2218      	movs	r2, #24
 801b65a:	189b      	adds	r3, r3, r2
 801b65c:	19db      	adds	r3, r3, r7
 801b65e:	2202      	movs	r2, #2
 801b660:	701a      	strb	r2, [r3, #0]
 801b662:	e076      	b.n	801b752 <UART_SetConfig+0x22a>
 801b664:	231b      	movs	r3, #27
 801b666:	2218      	movs	r2, #24
 801b668:	189b      	adds	r3, r3, r2
 801b66a:	19db      	adds	r3, r3, r7
 801b66c:	2204      	movs	r2, #4
 801b66e:	701a      	strb	r2, [r3, #0]
 801b670:	e06f      	b.n	801b752 <UART_SetConfig+0x22a>
 801b672:	231b      	movs	r3, #27
 801b674:	2218      	movs	r2, #24
 801b676:	189b      	adds	r3, r3, r2
 801b678:	19db      	adds	r3, r3, r7
 801b67a:	2208      	movs	r2, #8
 801b67c:	701a      	strb	r2, [r3, #0]
 801b67e:	e068      	b.n	801b752 <UART_SetConfig+0x22a>
 801b680:	231b      	movs	r3, #27
 801b682:	2218      	movs	r2, #24
 801b684:	189b      	adds	r3, r3, r2
 801b686:	19db      	adds	r3, r3, r7
 801b688:	2210      	movs	r2, #16
 801b68a:	701a      	strb	r2, [r3, #0]
 801b68c:	e061      	b.n	801b752 <UART_SetConfig+0x22a>
 801b68e:	69fb      	ldr	r3, [r7, #28]
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	4a7c      	ldr	r2, [pc, #496]	@ (801b884 <UART_SetConfig+0x35c>)
 801b694:	4293      	cmp	r3, r2
 801b696:	d106      	bne.n	801b6a6 <UART_SetConfig+0x17e>
 801b698:	231b      	movs	r3, #27
 801b69a:	2218      	movs	r2, #24
 801b69c:	189b      	adds	r3, r3, r2
 801b69e:	19db      	adds	r3, r3, r7
 801b6a0:	2200      	movs	r2, #0
 801b6a2:	701a      	strb	r2, [r3, #0]
 801b6a4:	e055      	b.n	801b752 <UART_SetConfig+0x22a>
 801b6a6:	69fb      	ldr	r3, [r7, #28]
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	4a77      	ldr	r2, [pc, #476]	@ (801b888 <UART_SetConfig+0x360>)
 801b6ac:	4293      	cmp	r3, r2
 801b6ae:	d106      	bne.n	801b6be <UART_SetConfig+0x196>
 801b6b0:	231b      	movs	r3, #27
 801b6b2:	2218      	movs	r2, #24
 801b6b4:	189b      	adds	r3, r3, r2
 801b6b6:	19db      	adds	r3, r3, r7
 801b6b8:	2200      	movs	r2, #0
 801b6ba:	701a      	strb	r2, [r3, #0]
 801b6bc:	e049      	b.n	801b752 <UART_SetConfig+0x22a>
 801b6be:	69fb      	ldr	r3, [r7, #28]
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	4a6b      	ldr	r2, [pc, #428]	@ (801b870 <UART_SetConfig+0x348>)
 801b6c4:	4293      	cmp	r3, r2
 801b6c6:	d13e      	bne.n	801b746 <UART_SetConfig+0x21e>
 801b6c8:	4b6c      	ldr	r3, [pc, #432]	@ (801b87c <UART_SetConfig+0x354>)
 801b6ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b6cc:	23c0      	movs	r3, #192	@ 0xc0
 801b6ce:	011b      	lsls	r3, r3, #4
 801b6d0:	4013      	ands	r3, r2
 801b6d2:	22c0      	movs	r2, #192	@ 0xc0
 801b6d4:	0112      	lsls	r2, r2, #4
 801b6d6:	4293      	cmp	r3, r2
 801b6d8:	d027      	beq.n	801b72a <UART_SetConfig+0x202>
 801b6da:	22c0      	movs	r2, #192	@ 0xc0
 801b6dc:	0112      	lsls	r2, r2, #4
 801b6de:	4293      	cmp	r3, r2
 801b6e0:	d82a      	bhi.n	801b738 <UART_SetConfig+0x210>
 801b6e2:	2280      	movs	r2, #128	@ 0x80
 801b6e4:	0112      	lsls	r2, r2, #4
 801b6e6:	4293      	cmp	r3, r2
 801b6e8:	d011      	beq.n	801b70e <UART_SetConfig+0x1e6>
 801b6ea:	2280      	movs	r2, #128	@ 0x80
 801b6ec:	0112      	lsls	r2, r2, #4
 801b6ee:	4293      	cmp	r3, r2
 801b6f0:	d822      	bhi.n	801b738 <UART_SetConfig+0x210>
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d004      	beq.n	801b700 <UART_SetConfig+0x1d8>
 801b6f6:	2280      	movs	r2, #128	@ 0x80
 801b6f8:	00d2      	lsls	r2, r2, #3
 801b6fa:	4293      	cmp	r3, r2
 801b6fc:	d00e      	beq.n	801b71c <UART_SetConfig+0x1f4>
 801b6fe:	e01b      	b.n	801b738 <UART_SetConfig+0x210>
 801b700:	231b      	movs	r3, #27
 801b702:	2218      	movs	r2, #24
 801b704:	189b      	adds	r3, r3, r2
 801b706:	19db      	adds	r3, r3, r7
 801b708:	2200      	movs	r2, #0
 801b70a:	701a      	strb	r2, [r3, #0]
 801b70c:	e021      	b.n	801b752 <UART_SetConfig+0x22a>
 801b70e:	231b      	movs	r3, #27
 801b710:	2218      	movs	r2, #24
 801b712:	189b      	adds	r3, r3, r2
 801b714:	19db      	adds	r3, r3, r7
 801b716:	2202      	movs	r2, #2
 801b718:	701a      	strb	r2, [r3, #0]
 801b71a:	e01a      	b.n	801b752 <UART_SetConfig+0x22a>
 801b71c:	231b      	movs	r3, #27
 801b71e:	2218      	movs	r2, #24
 801b720:	189b      	adds	r3, r3, r2
 801b722:	19db      	adds	r3, r3, r7
 801b724:	2204      	movs	r2, #4
 801b726:	701a      	strb	r2, [r3, #0]
 801b728:	e013      	b.n	801b752 <UART_SetConfig+0x22a>
 801b72a:	231b      	movs	r3, #27
 801b72c:	2218      	movs	r2, #24
 801b72e:	189b      	adds	r3, r3, r2
 801b730:	19db      	adds	r3, r3, r7
 801b732:	2208      	movs	r2, #8
 801b734:	701a      	strb	r2, [r3, #0]
 801b736:	e00c      	b.n	801b752 <UART_SetConfig+0x22a>
 801b738:	231b      	movs	r3, #27
 801b73a:	2218      	movs	r2, #24
 801b73c:	189b      	adds	r3, r3, r2
 801b73e:	19db      	adds	r3, r3, r7
 801b740:	2210      	movs	r2, #16
 801b742:	701a      	strb	r2, [r3, #0]
 801b744:	e005      	b.n	801b752 <UART_SetConfig+0x22a>
 801b746:	231b      	movs	r3, #27
 801b748:	2218      	movs	r2, #24
 801b74a:	189b      	adds	r3, r3, r2
 801b74c:	19db      	adds	r3, r3, r7
 801b74e:	2210      	movs	r2, #16
 801b750:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801b752:	69fb      	ldr	r3, [r7, #28]
 801b754:	681b      	ldr	r3, [r3, #0]
 801b756:	4a46      	ldr	r2, [pc, #280]	@ (801b870 <UART_SetConfig+0x348>)
 801b758:	4293      	cmp	r3, r2
 801b75a:	d000      	beq.n	801b75e <UART_SetConfig+0x236>
 801b75c:	e09a      	b.n	801b894 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801b75e:	231b      	movs	r3, #27
 801b760:	2218      	movs	r2, #24
 801b762:	189b      	adds	r3, r3, r2
 801b764:	19db      	adds	r3, r3, r7
 801b766:	781b      	ldrb	r3, [r3, #0]
 801b768:	2b08      	cmp	r3, #8
 801b76a:	d01d      	beq.n	801b7a8 <UART_SetConfig+0x280>
 801b76c:	dc20      	bgt.n	801b7b0 <UART_SetConfig+0x288>
 801b76e:	2b04      	cmp	r3, #4
 801b770:	d015      	beq.n	801b79e <UART_SetConfig+0x276>
 801b772:	dc1d      	bgt.n	801b7b0 <UART_SetConfig+0x288>
 801b774:	2b00      	cmp	r3, #0
 801b776:	d002      	beq.n	801b77e <UART_SetConfig+0x256>
 801b778:	2b02      	cmp	r3, #2
 801b77a:	d005      	beq.n	801b788 <UART_SetConfig+0x260>
 801b77c:	e018      	b.n	801b7b0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b77e:	f7fd fe4b 	bl	8019418 <HAL_RCC_GetPCLK1Freq>
 801b782:	0003      	movs	r3, r0
 801b784:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b786:	e01c      	b.n	801b7c2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b788:	4b3c      	ldr	r3, [pc, #240]	@ (801b87c <UART_SetConfig+0x354>)
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	2210      	movs	r2, #16
 801b78e:	4013      	ands	r3, r2
 801b790:	d002      	beq.n	801b798 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801b792:	4b3e      	ldr	r3, [pc, #248]	@ (801b88c <UART_SetConfig+0x364>)
 801b794:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b796:	e014      	b.n	801b7c2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801b798:	4b3d      	ldr	r3, [pc, #244]	@ (801b890 <UART_SetConfig+0x368>)
 801b79a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b79c:	e011      	b.n	801b7c2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b79e:	f7fd fd8b 	bl	80192b8 <HAL_RCC_GetSysClockFreq>
 801b7a2:	0003      	movs	r3, r0
 801b7a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b7a6:	e00c      	b.n	801b7c2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b7a8:	2380      	movs	r3, #128	@ 0x80
 801b7aa:	021b      	lsls	r3, r3, #8
 801b7ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b7ae:	e008      	b.n	801b7c2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801b7b4:	231a      	movs	r3, #26
 801b7b6:	2218      	movs	r2, #24
 801b7b8:	189b      	adds	r3, r3, r2
 801b7ba:	19db      	adds	r3, r3, r7
 801b7bc:	2201      	movs	r2, #1
 801b7be:	701a      	strb	r2, [r3, #0]
        break;
 801b7c0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801b7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d100      	bne.n	801b7ca <UART_SetConfig+0x2a2>
 801b7c8:	e133      	b.n	801ba32 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801b7ca:	69fb      	ldr	r3, [r7, #28]
 801b7cc:	685a      	ldr	r2, [r3, #4]
 801b7ce:	0013      	movs	r3, r2
 801b7d0:	005b      	lsls	r3, r3, #1
 801b7d2:	189b      	adds	r3, r3, r2
 801b7d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b7d6:	429a      	cmp	r2, r3
 801b7d8:	d305      	bcc.n	801b7e6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801b7da:	69fb      	ldr	r3, [r7, #28]
 801b7dc:	685b      	ldr	r3, [r3, #4]
 801b7de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801b7e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b7e2:	429a      	cmp	r2, r3
 801b7e4:	d906      	bls.n	801b7f4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801b7e6:	231a      	movs	r3, #26
 801b7e8:	2218      	movs	r2, #24
 801b7ea:	189b      	adds	r3, r3, r2
 801b7ec:	19db      	adds	r3, r3, r7
 801b7ee:	2201      	movs	r2, #1
 801b7f0:	701a      	strb	r2, [r3, #0]
 801b7f2:	e11e      	b.n	801ba32 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801b7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b7f6:	613b      	str	r3, [r7, #16]
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	617b      	str	r3, [r7, #20]
 801b7fc:	6939      	ldr	r1, [r7, #16]
 801b7fe:	697a      	ldr	r2, [r7, #20]
 801b800:	000b      	movs	r3, r1
 801b802:	0e1b      	lsrs	r3, r3, #24
 801b804:	0010      	movs	r0, r2
 801b806:	0205      	lsls	r5, r0, #8
 801b808:	431d      	orrs	r5, r3
 801b80a:	000b      	movs	r3, r1
 801b80c:	021c      	lsls	r4, r3, #8
 801b80e:	69fb      	ldr	r3, [r7, #28]
 801b810:	685b      	ldr	r3, [r3, #4]
 801b812:	085b      	lsrs	r3, r3, #1
 801b814:	60bb      	str	r3, [r7, #8]
 801b816:	2300      	movs	r3, #0
 801b818:	60fb      	str	r3, [r7, #12]
 801b81a:	68b8      	ldr	r0, [r7, #8]
 801b81c:	68f9      	ldr	r1, [r7, #12]
 801b81e:	1900      	adds	r0, r0, r4
 801b820:	4169      	adcs	r1, r5
 801b822:	69fb      	ldr	r3, [r7, #28]
 801b824:	685b      	ldr	r3, [r3, #4]
 801b826:	603b      	str	r3, [r7, #0]
 801b828:	2300      	movs	r3, #0
 801b82a:	607b      	str	r3, [r7, #4]
 801b82c:	683a      	ldr	r2, [r7, #0]
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	f7e4 fea6 	bl	8000580 <__aeabi_uldivmod>
 801b834:	0002      	movs	r2, r0
 801b836:	000b      	movs	r3, r1
 801b838:	0013      	movs	r3, r2
 801b83a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801b83c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b83e:	23c0      	movs	r3, #192	@ 0xc0
 801b840:	009b      	lsls	r3, r3, #2
 801b842:	429a      	cmp	r2, r3
 801b844:	d309      	bcc.n	801b85a <UART_SetConfig+0x332>
 801b846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b848:	2380      	movs	r3, #128	@ 0x80
 801b84a:	035b      	lsls	r3, r3, #13
 801b84c:	429a      	cmp	r2, r3
 801b84e:	d204      	bcs.n	801b85a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801b850:	69fb      	ldr	r3, [r7, #28]
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b856:	60da      	str	r2, [r3, #12]
 801b858:	e0eb      	b.n	801ba32 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801b85a:	231a      	movs	r3, #26
 801b85c:	2218      	movs	r2, #24
 801b85e:	189b      	adds	r3, r3, r2
 801b860:	19db      	adds	r3, r3, r7
 801b862:	2201      	movs	r2, #1
 801b864:	701a      	strb	r2, [r3, #0]
 801b866:	e0e4      	b.n	801ba32 <UART_SetConfig+0x50a>
 801b868:	efff69f3 	.word	0xefff69f3
 801b86c:	ffffcfff 	.word	0xffffcfff
 801b870:	40004800 	.word	0x40004800
 801b874:	fffff4ff 	.word	0xfffff4ff
 801b878:	40013800 	.word	0x40013800
 801b87c:	40021000 	.word	0x40021000
 801b880:	40004400 	.word	0x40004400
 801b884:	40004c00 	.word	0x40004c00
 801b888:	40005000 	.word	0x40005000
 801b88c:	003d0900 	.word	0x003d0900
 801b890:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b894:	69fb      	ldr	r3, [r7, #28]
 801b896:	69da      	ldr	r2, [r3, #28]
 801b898:	2380      	movs	r3, #128	@ 0x80
 801b89a:	021b      	lsls	r3, r3, #8
 801b89c:	429a      	cmp	r2, r3
 801b89e:	d000      	beq.n	801b8a2 <UART_SetConfig+0x37a>
 801b8a0:	e070      	b.n	801b984 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801b8a2:	231b      	movs	r3, #27
 801b8a4:	2218      	movs	r2, #24
 801b8a6:	189b      	adds	r3, r3, r2
 801b8a8:	19db      	adds	r3, r3, r7
 801b8aa:	781b      	ldrb	r3, [r3, #0]
 801b8ac:	2b08      	cmp	r3, #8
 801b8ae:	d822      	bhi.n	801b8f6 <UART_SetConfig+0x3ce>
 801b8b0:	009a      	lsls	r2, r3, #2
 801b8b2:	4b67      	ldr	r3, [pc, #412]	@ (801ba50 <UART_SetConfig+0x528>)
 801b8b4:	18d3      	adds	r3, r2, r3
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b8ba:	f7fd fdad 	bl	8019418 <HAL_RCC_GetPCLK1Freq>
 801b8be:	0003      	movs	r3, r0
 801b8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b8c2:	e021      	b.n	801b908 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b8c4:	f7fd fdbe 	bl	8019444 <HAL_RCC_GetPCLK2Freq>
 801b8c8:	0003      	movs	r3, r0
 801b8ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b8cc:	e01c      	b.n	801b908 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b8ce:	4b61      	ldr	r3, [pc, #388]	@ (801ba54 <UART_SetConfig+0x52c>)
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	2210      	movs	r2, #16
 801b8d4:	4013      	ands	r3, r2
 801b8d6:	d002      	beq.n	801b8de <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801b8d8:	4b5f      	ldr	r3, [pc, #380]	@ (801ba58 <UART_SetConfig+0x530>)
 801b8da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b8dc:	e014      	b.n	801b908 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801b8de:	4b5f      	ldr	r3, [pc, #380]	@ (801ba5c <UART_SetConfig+0x534>)
 801b8e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b8e2:	e011      	b.n	801b908 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b8e4:	f7fd fce8 	bl	80192b8 <HAL_RCC_GetSysClockFreq>
 801b8e8:	0003      	movs	r3, r0
 801b8ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b8ec:	e00c      	b.n	801b908 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b8ee:	2380      	movs	r3, #128	@ 0x80
 801b8f0:	021b      	lsls	r3, r3, #8
 801b8f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b8f4:	e008      	b.n	801b908 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801b8fa:	231a      	movs	r3, #26
 801b8fc:	2218      	movs	r2, #24
 801b8fe:	189b      	adds	r3, r3, r2
 801b900:	19db      	adds	r3, r3, r7
 801b902:	2201      	movs	r2, #1
 801b904:	701a      	strb	r2, [r3, #0]
        break;
 801b906:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801b908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d100      	bne.n	801b910 <UART_SetConfig+0x3e8>
 801b90e:	e090      	b.n	801ba32 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801b910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b912:	005a      	lsls	r2, r3, #1
 801b914:	69fb      	ldr	r3, [r7, #28]
 801b916:	685b      	ldr	r3, [r3, #4]
 801b918:	085b      	lsrs	r3, r3, #1
 801b91a:	18d2      	adds	r2, r2, r3
 801b91c:	69fb      	ldr	r3, [r7, #28]
 801b91e:	685b      	ldr	r3, [r3, #4]
 801b920:	0019      	movs	r1, r3
 801b922:	0010      	movs	r0, r2
 801b924:	f7e4 fc3e 	bl	80001a4 <__udivsi3>
 801b928:	0003      	movs	r3, r0
 801b92a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801b92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b92e:	2b0f      	cmp	r3, #15
 801b930:	d921      	bls.n	801b976 <UART_SetConfig+0x44e>
 801b932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b934:	2380      	movs	r3, #128	@ 0x80
 801b936:	025b      	lsls	r3, r3, #9
 801b938:	429a      	cmp	r2, r3
 801b93a:	d21c      	bcs.n	801b976 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801b93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b93e:	b29a      	uxth	r2, r3
 801b940:	200e      	movs	r0, #14
 801b942:	2418      	movs	r4, #24
 801b944:	1903      	adds	r3, r0, r4
 801b946:	19db      	adds	r3, r3, r7
 801b948:	210f      	movs	r1, #15
 801b94a:	438a      	bics	r2, r1
 801b94c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801b94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b950:	085b      	lsrs	r3, r3, #1
 801b952:	b29b      	uxth	r3, r3
 801b954:	2207      	movs	r2, #7
 801b956:	4013      	ands	r3, r2
 801b958:	b299      	uxth	r1, r3
 801b95a:	1903      	adds	r3, r0, r4
 801b95c:	19db      	adds	r3, r3, r7
 801b95e:	1902      	adds	r2, r0, r4
 801b960:	19d2      	adds	r2, r2, r7
 801b962:	8812      	ldrh	r2, [r2, #0]
 801b964:	430a      	orrs	r2, r1
 801b966:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801b968:	69fb      	ldr	r3, [r7, #28]
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	1902      	adds	r2, r0, r4
 801b96e:	19d2      	adds	r2, r2, r7
 801b970:	8812      	ldrh	r2, [r2, #0]
 801b972:	60da      	str	r2, [r3, #12]
 801b974:	e05d      	b.n	801ba32 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801b976:	231a      	movs	r3, #26
 801b978:	2218      	movs	r2, #24
 801b97a:	189b      	adds	r3, r3, r2
 801b97c:	19db      	adds	r3, r3, r7
 801b97e:	2201      	movs	r2, #1
 801b980:	701a      	strb	r2, [r3, #0]
 801b982:	e056      	b.n	801ba32 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801b984:	231b      	movs	r3, #27
 801b986:	2218      	movs	r2, #24
 801b988:	189b      	adds	r3, r3, r2
 801b98a:	19db      	adds	r3, r3, r7
 801b98c:	781b      	ldrb	r3, [r3, #0]
 801b98e:	2b08      	cmp	r3, #8
 801b990:	d822      	bhi.n	801b9d8 <UART_SetConfig+0x4b0>
 801b992:	009a      	lsls	r2, r3, #2
 801b994:	4b32      	ldr	r3, [pc, #200]	@ (801ba60 <UART_SetConfig+0x538>)
 801b996:	18d3      	adds	r3, r2, r3
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b99c:	f7fd fd3c 	bl	8019418 <HAL_RCC_GetPCLK1Freq>
 801b9a0:	0003      	movs	r3, r0
 801b9a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b9a4:	e021      	b.n	801b9ea <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b9a6:	f7fd fd4d 	bl	8019444 <HAL_RCC_GetPCLK2Freq>
 801b9aa:	0003      	movs	r3, r0
 801b9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b9ae:	e01c      	b.n	801b9ea <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b9b0:	4b28      	ldr	r3, [pc, #160]	@ (801ba54 <UART_SetConfig+0x52c>)
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	2210      	movs	r2, #16
 801b9b6:	4013      	ands	r3, r2
 801b9b8:	d002      	beq.n	801b9c0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801b9ba:	4b27      	ldr	r3, [pc, #156]	@ (801ba58 <UART_SetConfig+0x530>)
 801b9bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801b9be:	e014      	b.n	801b9ea <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801b9c0:	4b26      	ldr	r3, [pc, #152]	@ (801ba5c <UART_SetConfig+0x534>)
 801b9c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b9c4:	e011      	b.n	801b9ea <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b9c6:	f7fd fc77 	bl	80192b8 <HAL_RCC_GetSysClockFreq>
 801b9ca:	0003      	movs	r3, r0
 801b9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b9ce:	e00c      	b.n	801b9ea <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b9d0:	2380      	movs	r3, #128	@ 0x80
 801b9d2:	021b      	lsls	r3, r3, #8
 801b9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801b9d6:	e008      	b.n	801b9ea <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801b9d8:	2300      	movs	r3, #0
 801b9da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801b9dc:	231a      	movs	r3, #26
 801b9de:	2218      	movs	r2, #24
 801b9e0:	189b      	adds	r3, r3, r2
 801b9e2:	19db      	adds	r3, r3, r7
 801b9e4:	2201      	movs	r2, #1
 801b9e6:	701a      	strb	r2, [r3, #0]
        break;
 801b9e8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801b9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d020      	beq.n	801ba32 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801b9f0:	69fb      	ldr	r3, [r7, #28]
 801b9f2:	685b      	ldr	r3, [r3, #4]
 801b9f4:	085a      	lsrs	r2, r3, #1
 801b9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b9f8:	18d2      	adds	r2, r2, r3
 801b9fa:	69fb      	ldr	r3, [r7, #28]
 801b9fc:	685b      	ldr	r3, [r3, #4]
 801b9fe:	0019      	movs	r1, r3
 801ba00:	0010      	movs	r0, r2
 801ba02:	f7e4 fbcf 	bl	80001a4 <__udivsi3>
 801ba06:	0003      	movs	r3, r0
 801ba08:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ba0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba0c:	2b0f      	cmp	r3, #15
 801ba0e:	d90a      	bls.n	801ba26 <UART_SetConfig+0x4fe>
 801ba10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ba12:	2380      	movs	r3, #128	@ 0x80
 801ba14:	025b      	lsls	r3, r3, #9
 801ba16:	429a      	cmp	r2, r3
 801ba18:	d205      	bcs.n	801ba26 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ba1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ba1c:	b29a      	uxth	r2, r3
 801ba1e:	69fb      	ldr	r3, [r7, #28]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	60da      	str	r2, [r3, #12]
 801ba24:	e005      	b.n	801ba32 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801ba26:	231a      	movs	r3, #26
 801ba28:	2218      	movs	r2, #24
 801ba2a:	189b      	adds	r3, r3, r2
 801ba2c:	19db      	adds	r3, r3, r7
 801ba2e:	2201      	movs	r2, #1
 801ba30:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801ba32:	69fb      	ldr	r3, [r7, #28]
 801ba34:	2200      	movs	r2, #0
 801ba36:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801ba38:	69fb      	ldr	r3, [r7, #28]
 801ba3a:	2200      	movs	r2, #0
 801ba3c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801ba3e:	231a      	movs	r3, #26
 801ba40:	2218      	movs	r2, #24
 801ba42:	189b      	adds	r3, r3, r2
 801ba44:	19db      	adds	r3, r3, r7
 801ba46:	781b      	ldrb	r3, [r3, #0]
}
 801ba48:	0018      	movs	r0, r3
 801ba4a:	46bd      	mov	sp, r7
 801ba4c:	b00e      	add	sp, #56	@ 0x38
 801ba4e:	bdb0      	pop	{r4, r5, r7, pc}
 801ba50:	0802b284 	.word	0x0802b284
 801ba54:	40021000 	.word	0x40021000
 801ba58:	003d0900 	.word	0x003d0900
 801ba5c:	00f42400 	.word	0x00f42400
 801ba60:	0802b2a8 	.word	0x0802b2a8

0801ba64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801ba64:	b580      	push	{r7, lr}
 801ba66:	b082      	sub	sp, #8
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba70:	2201      	movs	r2, #1
 801ba72:	4013      	ands	r3, r2
 801ba74:	d00b      	beq.n	801ba8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	685b      	ldr	r3, [r3, #4]
 801ba7c:	4a4a      	ldr	r2, [pc, #296]	@ (801bba8 <UART_AdvFeatureConfig+0x144>)
 801ba7e:	4013      	ands	r3, r2
 801ba80:	0019      	movs	r1, r3
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	430a      	orrs	r2, r1
 801ba8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba92:	2202      	movs	r2, #2
 801ba94:	4013      	ands	r3, r2
 801ba96:	d00b      	beq.n	801bab0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	685b      	ldr	r3, [r3, #4]
 801ba9e:	4a43      	ldr	r2, [pc, #268]	@ (801bbac <UART_AdvFeatureConfig+0x148>)
 801baa0:	4013      	ands	r3, r2
 801baa2:	0019      	movs	r1, r3
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	430a      	orrs	r2, r1
 801baae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bab4:	2204      	movs	r2, #4
 801bab6:	4013      	ands	r3, r2
 801bab8:	d00b      	beq.n	801bad2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	685b      	ldr	r3, [r3, #4]
 801bac0:	4a3b      	ldr	r2, [pc, #236]	@ (801bbb0 <UART_AdvFeatureConfig+0x14c>)
 801bac2:	4013      	ands	r3, r2
 801bac4:	0019      	movs	r1, r3
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	430a      	orrs	r2, r1
 801bad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bad6:	2208      	movs	r2, #8
 801bad8:	4013      	ands	r3, r2
 801bada:	d00b      	beq.n	801baf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	685b      	ldr	r3, [r3, #4]
 801bae2:	4a34      	ldr	r2, [pc, #208]	@ (801bbb4 <UART_AdvFeatureConfig+0x150>)
 801bae4:	4013      	ands	r3, r2
 801bae6:	0019      	movs	r1, r3
 801bae8:	687b      	ldr	r3, [r7, #4]
 801baea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	430a      	orrs	r2, r1
 801baf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801baf8:	2210      	movs	r2, #16
 801bafa:	4013      	ands	r3, r2
 801bafc:	d00b      	beq.n	801bb16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	689b      	ldr	r3, [r3, #8]
 801bb04:	4a2c      	ldr	r2, [pc, #176]	@ (801bbb8 <UART_AdvFeatureConfig+0x154>)
 801bb06:	4013      	ands	r3, r2
 801bb08:	0019      	movs	r1, r3
 801bb0a:	687b      	ldr	r3, [r7, #4]
 801bb0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	430a      	orrs	r2, r1
 801bb14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb1a:	2220      	movs	r2, #32
 801bb1c:	4013      	ands	r3, r2
 801bb1e:	d00b      	beq.n	801bb38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	689b      	ldr	r3, [r3, #8]
 801bb26:	4a25      	ldr	r2, [pc, #148]	@ (801bbbc <UART_AdvFeatureConfig+0x158>)
 801bb28:	4013      	ands	r3, r2
 801bb2a:	0019      	movs	r1, r3
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	430a      	orrs	r2, r1
 801bb36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb3c:	2240      	movs	r2, #64	@ 0x40
 801bb3e:	4013      	ands	r3, r2
 801bb40:	d01d      	beq.n	801bb7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	685b      	ldr	r3, [r3, #4]
 801bb48:	4a1d      	ldr	r2, [pc, #116]	@ (801bbc0 <UART_AdvFeatureConfig+0x15c>)
 801bb4a:	4013      	ands	r3, r2
 801bb4c:	0019      	movs	r1, r3
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	430a      	orrs	r2, r1
 801bb58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801bb5e:	2380      	movs	r3, #128	@ 0x80
 801bb60:	035b      	lsls	r3, r3, #13
 801bb62:	429a      	cmp	r2, r3
 801bb64:	d10b      	bne.n	801bb7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	681b      	ldr	r3, [r3, #0]
 801bb6a:	685b      	ldr	r3, [r3, #4]
 801bb6c:	4a15      	ldr	r2, [pc, #84]	@ (801bbc4 <UART_AdvFeatureConfig+0x160>)
 801bb6e:	4013      	ands	r3, r2
 801bb70:	0019      	movs	r1, r3
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	430a      	orrs	r2, r1
 801bb7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb82:	2280      	movs	r2, #128	@ 0x80
 801bb84:	4013      	ands	r3, r2
 801bb86:	d00b      	beq.n	801bba0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	685b      	ldr	r3, [r3, #4]
 801bb8e:	4a0e      	ldr	r2, [pc, #56]	@ (801bbc8 <UART_AdvFeatureConfig+0x164>)
 801bb90:	4013      	ands	r3, r2
 801bb92:	0019      	movs	r1, r3
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	430a      	orrs	r2, r1
 801bb9e:	605a      	str	r2, [r3, #4]
  }
}
 801bba0:	46c0      	nop			@ (mov r8, r8)
 801bba2:	46bd      	mov	sp, r7
 801bba4:	b002      	add	sp, #8
 801bba6:	bd80      	pop	{r7, pc}
 801bba8:	fffdffff 	.word	0xfffdffff
 801bbac:	fffeffff 	.word	0xfffeffff
 801bbb0:	fffbffff 	.word	0xfffbffff
 801bbb4:	ffff7fff 	.word	0xffff7fff
 801bbb8:	ffffefff 	.word	0xffffefff
 801bbbc:	ffffdfff 	.word	0xffffdfff
 801bbc0:	ffefffff 	.word	0xffefffff
 801bbc4:	ff9fffff 	.word	0xff9fffff
 801bbc8:	fff7ffff 	.word	0xfff7ffff

0801bbcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801bbcc:	b580      	push	{r7, lr}
 801bbce:	b092      	sub	sp, #72	@ 0x48
 801bbd0:	af02      	add	r7, sp, #8
 801bbd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	2284      	movs	r2, #132	@ 0x84
 801bbd8:	2100      	movs	r1, #0
 801bbda:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801bbdc:	f7f6 fa88 	bl	80120f0 <HAL_GetTick>
 801bbe0:	0003      	movs	r3, r0
 801bbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	2208      	movs	r2, #8
 801bbec:	4013      	ands	r3, r2
 801bbee:	2b08      	cmp	r3, #8
 801bbf0:	d12c      	bne.n	801bc4c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bbf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bbf4:	2280      	movs	r2, #128	@ 0x80
 801bbf6:	0391      	lsls	r1, r2, #14
 801bbf8:	6878      	ldr	r0, [r7, #4]
 801bbfa:	4a46      	ldr	r2, [pc, #280]	@ (801bd14 <UART_CheckIdleState+0x148>)
 801bbfc:	9200      	str	r2, [sp, #0]
 801bbfe:	2200      	movs	r2, #0
 801bc00:	f000 f88c 	bl	801bd1c <UART_WaitOnFlagUntilTimeout>
 801bc04:	1e03      	subs	r3, r0, #0
 801bc06:	d021      	beq.n	801bc4c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc08:	f3ef 8310 	mrs	r3, PRIMASK
 801bc0c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801bc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801bc10:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bc12:	2301      	movs	r3, #1
 801bc14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc18:	f383 8810 	msr	PRIMASK, r3
}
 801bc1c:	46c0      	nop			@ (mov r8, r8)
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	681a      	ldr	r2, [r3, #0]
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	2180      	movs	r1, #128	@ 0x80
 801bc2a:	438a      	bics	r2, r1
 801bc2c:	601a      	str	r2, [r3, #0]
 801bc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc34:	f383 8810 	msr	PRIMASK, r3
}
 801bc38:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	2220      	movs	r2, #32
 801bc3e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801bc40:	687b      	ldr	r3, [r7, #4]
 801bc42:	2278      	movs	r2, #120	@ 0x78
 801bc44:	2100      	movs	r1, #0
 801bc46:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bc48:	2303      	movs	r3, #3
 801bc4a:	e05f      	b.n	801bd0c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	2204      	movs	r2, #4
 801bc54:	4013      	ands	r3, r2
 801bc56:	2b04      	cmp	r3, #4
 801bc58:	d146      	bne.n	801bce8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bc5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bc5c:	2280      	movs	r2, #128	@ 0x80
 801bc5e:	03d1      	lsls	r1, r2, #15
 801bc60:	6878      	ldr	r0, [r7, #4]
 801bc62:	4a2c      	ldr	r2, [pc, #176]	@ (801bd14 <UART_CheckIdleState+0x148>)
 801bc64:	9200      	str	r2, [sp, #0]
 801bc66:	2200      	movs	r2, #0
 801bc68:	f000 f858 	bl	801bd1c <UART_WaitOnFlagUntilTimeout>
 801bc6c:	1e03      	subs	r3, r0, #0
 801bc6e:	d03b      	beq.n	801bce8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc70:	f3ef 8310 	mrs	r3, PRIMASK
 801bc74:	60fb      	str	r3, [r7, #12]
  return(result);
 801bc76:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bc78:	637b      	str	r3, [r7, #52]	@ 0x34
 801bc7a:	2301      	movs	r3, #1
 801bc7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc7e:	693b      	ldr	r3, [r7, #16]
 801bc80:	f383 8810 	msr	PRIMASK, r3
}
 801bc84:	46c0      	nop			@ (mov r8, r8)
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	681a      	ldr	r2, [r3, #0]
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	4921      	ldr	r1, [pc, #132]	@ (801bd18 <UART_CheckIdleState+0x14c>)
 801bc92:	400a      	ands	r2, r1
 801bc94:	601a      	str	r2, [r3, #0]
 801bc96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bc98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc9a:	697b      	ldr	r3, [r7, #20]
 801bc9c:	f383 8810 	msr	PRIMASK, r3
}
 801bca0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bca2:	f3ef 8310 	mrs	r3, PRIMASK
 801bca6:	61bb      	str	r3, [r7, #24]
  return(result);
 801bca8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bcaa:	633b      	str	r3, [r7, #48]	@ 0x30
 801bcac:	2301      	movs	r3, #1
 801bcae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcb0:	69fb      	ldr	r3, [r7, #28]
 801bcb2:	f383 8810 	msr	PRIMASK, r3
}
 801bcb6:	46c0      	nop			@ (mov r8, r8)
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	689a      	ldr	r2, [r3, #8]
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	2101      	movs	r1, #1
 801bcc4:	438a      	bics	r2, r1
 801bcc6:	609a      	str	r2, [r3, #8]
 801bcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bccc:	6a3b      	ldr	r3, [r7, #32]
 801bcce:	f383 8810 	msr	PRIMASK, r3
}
 801bcd2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	2280      	movs	r2, #128	@ 0x80
 801bcd8:	2120      	movs	r1, #32
 801bcda:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	2278      	movs	r2, #120	@ 0x78
 801bce0:	2100      	movs	r1, #0
 801bce2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bce4:	2303      	movs	r3, #3
 801bce6:	e011      	b.n	801bd0c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	2220      	movs	r2, #32
 801bcec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	2280      	movs	r2, #128	@ 0x80
 801bcf2:	2120      	movs	r1, #32
 801bcf4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	2200      	movs	r2, #0
 801bcfa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	2200      	movs	r2, #0
 801bd00:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	2278      	movs	r2, #120	@ 0x78
 801bd06:	2100      	movs	r1, #0
 801bd08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bd0a:	2300      	movs	r3, #0
}
 801bd0c:	0018      	movs	r0, r3
 801bd0e:	46bd      	mov	sp, r7
 801bd10:	b010      	add	sp, #64	@ 0x40
 801bd12:	bd80      	pop	{r7, pc}
 801bd14:	01ffffff 	.word	0x01ffffff
 801bd18:	fffffedf 	.word	0xfffffedf

0801bd1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	b084      	sub	sp, #16
 801bd20:	af00      	add	r7, sp, #0
 801bd22:	60f8      	str	r0, [r7, #12]
 801bd24:	60b9      	str	r1, [r7, #8]
 801bd26:	603b      	str	r3, [r7, #0]
 801bd28:	1dfb      	adds	r3, r7, #7
 801bd2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bd2c:	e04b      	b.n	801bdc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bd2e:	69bb      	ldr	r3, [r7, #24]
 801bd30:	3301      	adds	r3, #1
 801bd32:	d048      	beq.n	801bdc6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bd34:	f7f6 f9dc 	bl	80120f0 <HAL_GetTick>
 801bd38:	0002      	movs	r2, r0
 801bd3a:	683b      	ldr	r3, [r7, #0]
 801bd3c:	1ad3      	subs	r3, r2, r3
 801bd3e:	69ba      	ldr	r2, [r7, #24]
 801bd40:	429a      	cmp	r2, r3
 801bd42:	d302      	bcc.n	801bd4a <UART_WaitOnFlagUntilTimeout+0x2e>
 801bd44:	69bb      	ldr	r3, [r7, #24]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d101      	bne.n	801bd4e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801bd4a:	2303      	movs	r3, #3
 801bd4c:	e04b      	b.n	801bde6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801bd4e:	68fb      	ldr	r3, [r7, #12]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	2204      	movs	r2, #4
 801bd56:	4013      	ands	r3, r2
 801bd58:	d035      	beq.n	801bdc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801bd5a:	68fb      	ldr	r3, [r7, #12]
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	69db      	ldr	r3, [r3, #28]
 801bd60:	2208      	movs	r2, #8
 801bd62:	4013      	ands	r3, r2
 801bd64:	2b08      	cmp	r3, #8
 801bd66:	d111      	bne.n	801bd8c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801bd68:	68fb      	ldr	r3, [r7, #12]
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	2208      	movs	r2, #8
 801bd6e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801bd70:	68fb      	ldr	r3, [r7, #12]
 801bd72:	0018      	movs	r0, r3
 801bd74:	f000 f9ca 	bl	801c10c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	2284      	movs	r2, #132	@ 0x84
 801bd7c:	2108      	movs	r1, #8
 801bd7e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801bd80:	68fb      	ldr	r3, [r7, #12]
 801bd82:	2278      	movs	r2, #120	@ 0x78
 801bd84:	2100      	movs	r1, #0
 801bd86:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801bd88:	2301      	movs	r3, #1
 801bd8a:	e02c      	b.n	801bde6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	69da      	ldr	r2, [r3, #28]
 801bd92:	2380      	movs	r3, #128	@ 0x80
 801bd94:	011b      	lsls	r3, r3, #4
 801bd96:	401a      	ands	r2, r3
 801bd98:	2380      	movs	r3, #128	@ 0x80
 801bd9a:	011b      	lsls	r3, r3, #4
 801bd9c:	429a      	cmp	r2, r3
 801bd9e:	d112      	bne.n	801bdc6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bda0:	68fb      	ldr	r3, [r7, #12]
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	2280      	movs	r2, #128	@ 0x80
 801bda6:	0112      	lsls	r2, r2, #4
 801bda8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	0018      	movs	r0, r3
 801bdae:	f000 f9ad 	bl	801c10c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	2284      	movs	r2, #132	@ 0x84
 801bdb6:	2120      	movs	r1, #32
 801bdb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	2278      	movs	r2, #120	@ 0x78
 801bdbe:	2100      	movs	r1, #0
 801bdc0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801bdc2:	2303      	movs	r3, #3
 801bdc4:	e00f      	b.n	801bde6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	69db      	ldr	r3, [r3, #28]
 801bdcc:	68ba      	ldr	r2, [r7, #8]
 801bdce:	4013      	ands	r3, r2
 801bdd0:	68ba      	ldr	r2, [r7, #8]
 801bdd2:	1ad3      	subs	r3, r2, r3
 801bdd4:	425a      	negs	r2, r3
 801bdd6:	4153      	adcs	r3, r2
 801bdd8:	b2db      	uxtb	r3, r3
 801bdda:	001a      	movs	r2, r3
 801bddc:	1dfb      	adds	r3, r7, #7
 801bdde:	781b      	ldrb	r3, [r3, #0]
 801bde0:	429a      	cmp	r2, r3
 801bde2:	d0a4      	beq.n	801bd2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801bde4:	2300      	movs	r3, #0
}
 801bde6:	0018      	movs	r0, r3
 801bde8:	46bd      	mov	sp, r7
 801bdea:	b004      	add	sp, #16
 801bdec:	bd80      	pop	{r7, pc}
	...

0801bdf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bdf0:	b580      	push	{r7, lr}
 801bdf2:	b090      	sub	sp, #64	@ 0x40
 801bdf4:	af00      	add	r7, sp, #0
 801bdf6:	60f8      	str	r0, [r7, #12]
 801bdf8:	60b9      	str	r1, [r7, #8]
 801bdfa:	1dbb      	adds	r3, r7, #6
 801bdfc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801bdfe:	68fb      	ldr	r3, [r7, #12]
 801be00:	68ba      	ldr	r2, [r7, #8]
 801be02:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	1dba      	adds	r2, r7, #6
 801be08:	2158      	movs	r1, #88	@ 0x58
 801be0a:	8812      	ldrh	r2, [r2, #0]
 801be0c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	1dba      	adds	r2, r7, #6
 801be12:	215a      	movs	r1, #90	@ 0x5a
 801be14:	8812      	ldrh	r2, [r2, #0]
 801be16:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801be18:	68fb      	ldr	r3, [r7, #12]
 801be1a:	2200      	movs	r2, #0
 801be1c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	689a      	ldr	r2, [r3, #8]
 801be22:	2380      	movs	r3, #128	@ 0x80
 801be24:	015b      	lsls	r3, r3, #5
 801be26:	429a      	cmp	r2, r3
 801be28:	d10d      	bne.n	801be46 <UART_Start_Receive_IT+0x56>
 801be2a:	68fb      	ldr	r3, [r7, #12]
 801be2c:	691b      	ldr	r3, [r3, #16]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d104      	bne.n	801be3c <UART_Start_Receive_IT+0x4c>
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	225c      	movs	r2, #92	@ 0x5c
 801be36:	4950      	ldr	r1, [pc, #320]	@ (801bf78 <UART_Start_Receive_IT+0x188>)
 801be38:	5299      	strh	r1, [r3, r2]
 801be3a:	e02e      	b.n	801be9a <UART_Start_Receive_IT+0xaa>
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	225c      	movs	r2, #92	@ 0x5c
 801be40:	21ff      	movs	r1, #255	@ 0xff
 801be42:	5299      	strh	r1, [r3, r2]
 801be44:	e029      	b.n	801be9a <UART_Start_Receive_IT+0xaa>
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	689b      	ldr	r3, [r3, #8]
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d10d      	bne.n	801be6a <UART_Start_Receive_IT+0x7a>
 801be4e:	68fb      	ldr	r3, [r7, #12]
 801be50:	691b      	ldr	r3, [r3, #16]
 801be52:	2b00      	cmp	r3, #0
 801be54:	d104      	bne.n	801be60 <UART_Start_Receive_IT+0x70>
 801be56:	68fb      	ldr	r3, [r7, #12]
 801be58:	225c      	movs	r2, #92	@ 0x5c
 801be5a:	21ff      	movs	r1, #255	@ 0xff
 801be5c:	5299      	strh	r1, [r3, r2]
 801be5e:	e01c      	b.n	801be9a <UART_Start_Receive_IT+0xaa>
 801be60:	68fb      	ldr	r3, [r7, #12]
 801be62:	225c      	movs	r2, #92	@ 0x5c
 801be64:	217f      	movs	r1, #127	@ 0x7f
 801be66:	5299      	strh	r1, [r3, r2]
 801be68:	e017      	b.n	801be9a <UART_Start_Receive_IT+0xaa>
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	689a      	ldr	r2, [r3, #8]
 801be6e:	2380      	movs	r3, #128	@ 0x80
 801be70:	055b      	lsls	r3, r3, #21
 801be72:	429a      	cmp	r2, r3
 801be74:	d10d      	bne.n	801be92 <UART_Start_Receive_IT+0xa2>
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	691b      	ldr	r3, [r3, #16]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d104      	bne.n	801be88 <UART_Start_Receive_IT+0x98>
 801be7e:	68fb      	ldr	r3, [r7, #12]
 801be80:	225c      	movs	r2, #92	@ 0x5c
 801be82:	217f      	movs	r1, #127	@ 0x7f
 801be84:	5299      	strh	r1, [r3, r2]
 801be86:	e008      	b.n	801be9a <UART_Start_Receive_IT+0xaa>
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	225c      	movs	r2, #92	@ 0x5c
 801be8c:	213f      	movs	r1, #63	@ 0x3f
 801be8e:	5299      	strh	r1, [r3, r2]
 801be90:	e003      	b.n	801be9a <UART_Start_Receive_IT+0xaa>
 801be92:	68fb      	ldr	r3, [r7, #12]
 801be94:	225c      	movs	r2, #92	@ 0x5c
 801be96:	2100      	movs	r1, #0
 801be98:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	2284      	movs	r2, #132	@ 0x84
 801be9e:	2100      	movs	r1, #0
 801bea0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	2280      	movs	r2, #128	@ 0x80
 801bea6:	2122      	movs	r1, #34	@ 0x22
 801bea8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801beaa:	f3ef 8310 	mrs	r3, PRIMASK
 801beae:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801beb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801beb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801beb4:	2301      	movs	r3, #1
 801beb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801beb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801beba:	f383 8810 	msr	PRIMASK, r3
}
 801bebe:	46c0      	nop			@ (mov r8, r8)
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	689a      	ldr	r2, [r3, #8]
 801bec6:	68fb      	ldr	r3, [r7, #12]
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	2101      	movs	r1, #1
 801becc:	430a      	orrs	r2, r1
 801bece:	609a      	str	r2, [r3, #8]
 801bed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bed2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bed6:	f383 8810 	msr	PRIMASK, r3
}
 801beda:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	689a      	ldr	r2, [r3, #8]
 801bee0:	2380      	movs	r3, #128	@ 0x80
 801bee2:	015b      	lsls	r3, r3, #5
 801bee4:	429a      	cmp	r2, r3
 801bee6:	d107      	bne.n	801bef8 <UART_Start_Receive_IT+0x108>
 801bee8:	68fb      	ldr	r3, [r7, #12]
 801beea:	691b      	ldr	r3, [r3, #16]
 801beec:	2b00      	cmp	r3, #0
 801beee:	d103      	bne.n	801bef8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	4a22      	ldr	r2, [pc, #136]	@ (801bf7c <UART_Start_Receive_IT+0x18c>)
 801bef4:	669a      	str	r2, [r3, #104]	@ 0x68
 801bef6:	e002      	b.n	801befe <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	4a21      	ldr	r2, [pc, #132]	@ (801bf80 <UART_Start_Receive_IT+0x190>)
 801befc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801befe:	68fb      	ldr	r3, [r7, #12]
 801bf00:	691b      	ldr	r3, [r3, #16]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d019      	beq.n	801bf3a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf06:	f3ef 8310 	mrs	r3, PRIMASK
 801bf0a:	61fb      	str	r3, [r7, #28]
  return(result);
 801bf0c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801bf0e:	637b      	str	r3, [r7, #52]	@ 0x34
 801bf10:	2301      	movs	r3, #1
 801bf12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf14:	6a3b      	ldr	r3, [r7, #32]
 801bf16:	f383 8810 	msr	PRIMASK, r3
}
 801bf1a:	46c0      	nop			@ (mov r8, r8)
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	681b      	ldr	r3, [r3, #0]
 801bf20:	681a      	ldr	r2, [r3, #0]
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	2190      	movs	r1, #144	@ 0x90
 801bf28:	0049      	lsls	r1, r1, #1
 801bf2a:	430a      	orrs	r2, r1
 801bf2c:	601a      	str	r2, [r3, #0]
 801bf2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bf30:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf34:	f383 8810 	msr	PRIMASK, r3
}
 801bf38:	e018      	b.n	801bf6c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf3a:	f3ef 8310 	mrs	r3, PRIMASK
 801bf3e:	613b      	str	r3, [r7, #16]
  return(result);
 801bf40:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801bf42:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bf44:	2301      	movs	r3, #1
 801bf46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf48:	697b      	ldr	r3, [r7, #20]
 801bf4a:	f383 8810 	msr	PRIMASK, r3
}
 801bf4e:	46c0      	nop			@ (mov r8, r8)
 801bf50:	68fb      	ldr	r3, [r7, #12]
 801bf52:	681b      	ldr	r3, [r3, #0]
 801bf54:	681a      	ldr	r2, [r3, #0]
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	2120      	movs	r1, #32
 801bf5c:	430a      	orrs	r2, r1
 801bf5e:	601a      	str	r2, [r3, #0]
 801bf60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bf62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf64:	69bb      	ldr	r3, [r7, #24]
 801bf66:	f383 8810 	msr	PRIMASK, r3
}
 801bf6a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801bf6c:	2300      	movs	r3, #0
}
 801bf6e:	0018      	movs	r0, r3
 801bf70:	46bd      	mov	sp, r7
 801bf72:	b010      	add	sp, #64	@ 0x40
 801bf74:	bd80      	pop	{r7, pc}
 801bf76:	46c0      	nop			@ (mov r8, r8)
 801bf78:	000001ff 	.word	0x000001ff
 801bf7c:	0801c6f1 	.word	0x0801c6f1
 801bf80:	0801c525 	.word	0x0801c525

0801bf84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801bf84:	b580      	push	{r7, lr}
 801bf86:	b090      	sub	sp, #64	@ 0x40
 801bf88:	af00      	add	r7, sp, #0
 801bf8a:	60f8      	str	r0, [r7, #12]
 801bf8c:	60b9      	str	r1, [r7, #8]
 801bf8e:	1dbb      	adds	r3, r7, #6
 801bf90:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	68ba      	ldr	r2, [r7, #8]
 801bf96:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	1dba      	adds	r2, r7, #6
 801bf9c:	2158      	movs	r1, #88	@ 0x58
 801bf9e:	8812      	ldrh	r2, [r2, #0]
 801bfa0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bfa2:	68fb      	ldr	r3, [r7, #12]
 801bfa4:	2284      	movs	r2, #132	@ 0x84
 801bfa6:	2100      	movs	r1, #0
 801bfa8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801bfaa:	68fb      	ldr	r3, [r7, #12]
 801bfac:	2280      	movs	r2, #128	@ 0x80
 801bfae:	2122      	movs	r1, #34	@ 0x22
 801bfb0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d028      	beq.n	801c00c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801bfba:	68fb      	ldr	r3, [r7, #12]
 801bfbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bfbe:	4a3e      	ldr	r2, [pc, #248]	@ (801c0b8 <UART_Start_Receive_DMA+0x134>)
 801bfc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801bfc2:	68fb      	ldr	r3, [r7, #12]
 801bfc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bfc6:	4a3d      	ldr	r2, [pc, #244]	@ (801c0bc <UART_Start_Receive_DMA+0x138>)
 801bfc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bfce:	4a3c      	ldr	r2, [pc, #240]	@ (801c0c0 <UART_Start_Receive_DMA+0x13c>)
 801bfd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801bfd2:	68fb      	ldr	r3, [r7, #12]
 801bfd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bfd6:	2200      	movs	r2, #0
 801bfd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	3324      	adds	r3, #36	@ 0x24
 801bfe4:	0019      	movs	r1, r3
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bfea:	001a      	movs	r2, r3
 801bfec:	1dbb      	adds	r3, r7, #6
 801bfee:	881b      	ldrh	r3, [r3, #0]
 801bff0:	f7f6 fdd0 	bl	8012b94 <HAL_DMA_Start_IT>
 801bff4:	1e03      	subs	r3, r0, #0
 801bff6:	d009      	beq.n	801c00c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801bff8:	68fb      	ldr	r3, [r7, #12]
 801bffa:	2284      	movs	r2, #132	@ 0x84
 801bffc:	2110      	movs	r1, #16
 801bffe:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	2280      	movs	r2, #128	@ 0x80
 801c004:	2120      	movs	r1, #32
 801c006:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801c008:	2301      	movs	r3, #1
 801c00a:	e050      	b.n	801c0ae <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801c00c:	68fb      	ldr	r3, [r7, #12]
 801c00e:	691b      	ldr	r3, [r3, #16]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d019      	beq.n	801c048 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c014:	f3ef 8310 	mrs	r3, PRIMASK
 801c018:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801c01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c01e:	2301      	movs	r3, #1
 801c020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c024:	f383 8810 	msr	PRIMASK, r3
}
 801c028:	46c0      	nop			@ (mov r8, r8)
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	681b      	ldr	r3, [r3, #0]
 801c02e:	681a      	ldr	r2, [r3, #0]
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	2180      	movs	r1, #128	@ 0x80
 801c036:	0049      	lsls	r1, r1, #1
 801c038:	430a      	orrs	r2, r1
 801c03a:	601a      	str	r2, [r3, #0]
 801c03c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c03e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c042:	f383 8810 	msr	PRIMASK, r3
}
 801c046:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c048:	f3ef 8310 	mrs	r3, PRIMASK
 801c04c:	613b      	str	r3, [r7, #16]
  return(result);
 801c04e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c050:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c052:	2301      	movs	r3, #1
 801c054:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c056:	697b      	ldr	r3, [r7, #20]
 801c058:	f383 8810 	msr	PRIMASK, r3
}
 801c05c:	46c0      	nop			@ (mov r8, r8)
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	689a      	ldr	r2, [r3, #8]
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	681b      	ldr	r3, [r3, #0]
 801c068:	2101      	movs	r1, #1
 801c06a:	430a      	orrs	r2, r1
 801c06c:	609a      	str	r2, [r3, #8]
 801c06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c070:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c072:	69bb      	ldr	r3, [r7, #24]
 801c074:	f383 8810 	msr	PRIMASK, r3
}
 801c078:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c07a:	f3ef 8310 	mrs	r3, PRIMASK
 801c07e:	61fb      	str	r3, [r7, #28]
  return(result);
 801c080:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c082:	637b      	str	r3, [r7, #52]	@ 0x34
 801c084:	2301      	movs	r3, #1
 801c086:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c088:	6a3b      	ldr	r3, [r7, #32]
 801c08a:	f383 8810 	msr	PRIMASK, r3
}
 801c08e:	46c0      	nop			@ (mov r8, r8)
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	689a      	ldr	r2, [r3, #8]
 801c096:	68fb      	ldr	r3, [r7, #12]
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	2140      	movs	r1, #64	@ 0x40
 801c09c:	430a      	orrs	r2, r1
 801c09e:	609a      	str	r2, [r3, #8]
 801c0a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c0a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0a6:	f383 8810 	msr	PRIMASK, r3
}
 801c0aa:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801c0ac:	2300      	movs	r3, #0
}
 801c0ae:	0018      	movs	r0, r3
 801c0b0:	46bd      	mov	sp, r7
 801c0b2:	b010      	add	sp, #64	@ 0x40
 801c0b4:	bd80      	pop	{r7, pc}
 801c0b6:	46c0      	nop			@ (mov r8, r8)
 801c0b8:	0801c295 	.word	0x0801c295
 801c0bc:	0801c3c9 	.word	0x0801c3c9
 801c0c0:	0801c411 	.word	0x0801c411

0801c0c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801c0c4:	b580      	push	{r7, lr}
 801c0c6:	b086      	sub	sp, #24
 801c0c8:	af00      	add	r7, sp, #0
 801c0ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0cc:	f3ef 8310 	mrs	r3, PRIMASK
 801c0d0:	60bb      	str	r3, [r7, #8]
  return(result);
 801c0d2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801c0d4:	617b      	str	r3, [r7, #20]
 801c0d6:	2301      	movs	r3, #1
 801c0d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	f383 8810 	msr	PRIMASK, r3
}
 801c0e0:	46c0      	nop			@ (mov r8, r8)
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	681a      	ldr	r2, [r3, #0]
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	21c0      	movs	r1, #192	@ 0xc0
 801c0ee:	438a      	bics	r2, r1
 801c0f0:	601a      	str	r2, [r3, #0]
 801c0f2:	697b      	ldr	r3, [r7, #20]
 801c0f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0f6:	693b      	ldr	r3, [r7, #16]
 801c0f8:	f383 8810 	msr	PRIMASK, r3
}
 801c0fc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	2220      	movs	r2, #32
 801c102:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801c104:	46c0      	nop			@ (mov r8, r8)
 801c106:	46bd      	mov	sp, r7
 801c108:	b006      	add	sp, #24
 801c10a:	bd80      	pop	{r7, pc}

0801c10c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c10c:	b580      	push	{r7, lr}
 801c10e:	b08e      	sub	sp, #56	@ 0x38
 801c110:	af00      	add	r7, sp, #0
 801c112:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c114:	f3ef 8310 	mrs	r3, PRIMASK
 801c118:	617b      	str	r3, [r7, #20]
  return(result);
 801c11a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c11c:	637b      	str	r3, [r7, #52]	@ 0x34
 801c11e:	2301      	movs	r3, #1
 801c120:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c122:	69bb      	ldr	r3, [r7, #24]
 801c124:	f383 8810 	msr	PRIMASK, r3
}
 801c128:	46c0      	nop			@ (mov r8, r8)
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	681a      	ldr	r2, [r3, #0]
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	4926      	ldr	r1, [pc, #152]	@ (801c1d0 <UART_EndRxTransfer+0xc4>)
 801c136:	400a      	ands	r2, r1
 801c138:	601a      	str	r2, [r3, #0]
 801c13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c13c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c13e:	69fb      	ldr	r3, [r7, #28]
 801c140:	f383 8810 	msr	PRIMASK, r3
}
 801c144:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c146:	f3ef 8310 	mrs	r3, PRIMASK
 801c14a:	623b      	str	r3, [r7, #32]
  return(result);
 801c14c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c14e:	633b      	str	r3, [r7, #48]	@ 0x30
 801c150:	2301      	movs	r3, #1
 801c152:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c156:	f383 8810 	msr	PRIMASK, r3
}
 801c15a:	46c0      	nop			@ (mov r8, r8)
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	689a      	ldr	r2, [r3, #8]
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	2101      	movs	r1, #1
 801c168:	438a      	bics	r2, r1
 801c16a:	609a      	str	r2, [r3, #8]
 801c16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c16e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c172:	f383 8810 	msr	PRIMASK, r3
}
 801c176:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c17c:	2b01      	cmp	r3, #1
 801c17e:	d118      	bne.n	801c1b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c180:	f3ef 8310 	mrs	r3, PRIMASK
 801c184:	60bb      	str	r3, [r7, #8]
  return(result);
 801c186:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c18a:	2301      	movs	r3, #1
 801c18c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	f383 8810 	msr	PRIMASK, r3
}
 801c194:	46c0      	nop			@ (mov r8, r8)
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	681a      	ldr	r2, [r3, #0]
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	2110      	movs	r1, #16
 801c1a2:	438a      	bics	r2, r1
 801c1a4:	601a      	str	r2, [r3, #0]
 801c1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1aa:	693b      	ldr	r3, [r7, #16]
 801c1ac:	f383 8810 	msr	PRIMASK, r3
}
 801c1b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	2280      	movs	r2, #128	@ 0x80
 801c1b6:	2120      	movs	r1, #32
 801c1b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	2200      	movs	r2, #0
 801c1be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	2200      	movs	r2, #0
 801c1c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801c1c6:	46c0      	nop			@ (mov r8, r8)
 801c1c8:	46bd      	mov	sp, r7
 801c1ca:	b00e      	add	sp, #56	@ 0x38
 801c1cc:	bd80      	pop	{r7, pc}
 801c1ce:	46c0      	nop			@ (mov r8, r8)
 801c1d0:	fffffedf 	.word	0xfffffedf

0801c1d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801c1d4:	b580      	push	{r7, lr}
 801c1d6:	b08c      	sub	sp, #48	@ 0x30
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	2220      	movs	r2, #32
 801c1ea:	4013      	ands	r3, r2
 801c1ec:	d135      	bne.n	801c25a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801c1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1f0:	2252      	movs	r2, #82	@ 0x52
 801c1f2:	2100      	movs	r1, #0
 801c1f4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1f6:	f3ef 8310 	mrs	r3, PRIMASK
 801c1fa:	60fb      	str	r3, [r7, #12]
  return(result);
 801c1fc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801c1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c200:	2301      	movs	r3, #1
 801c202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c204:	693b      	ldr	r3, [r7, #16]
 801c206:	f383 8810 	msr	PRIMASK, r3
}
 801c20a:	46c0      	nop			@ (mov r8, r8)
 801c20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c20e:	681b      	ldr	r3, [r3, #0]
 801c210:	689a      	ldr	r2, [r3, #8]
 801c212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c214:	681b      	ldr	r3, [r3, #0]
 801c216:	2180      	movs	r1, #128	@ 0x80
 801c218:	438a      	bics	r2, r1
 801c21a:	609a      	str	r2, [r3, #8]
 801c21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c21e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c220:	697b      	ldr	r3, [r7, #20]
 801c222:	f383 8810 	msr	PRIMASK, r3
}
 801c226:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c228:	f3ef 8310 	mrs	r3, PRIMASK
 801c22c:	61bb      	str	r3, [r7, #24]
  return(result);
 801c22e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c230:	627b      	str	r3, [r7, #36]	@ 0x24
 801c232:	2301      	movs	r3, #1
 801c234:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c236:	69fb      	ldr	r3, [r7, #28]
 801c238:	f383 8810 	msr	PRIMASK, r3
}
 801c23c:	46c0      	nop			@ (mov r8, r8)
 801c23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c240:	681b      	ldr	r3, [r3, #0]
 801c242:	681a      	ldr	r2, [r3, #0]
 801c244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	2140      	movs	r1, #64	@ 0x40
 801c24a:	430a      	orrs	r2, r1
 801c24c:	601a      	str	r2, [r3, #0]
 801c24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c250:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c252:	6a3b      	ldr	r3, [r7, #32]
 801c254:	f383 8810 	msr	PRIMASK, r3
}
 801c258:	e006      	b.n	801c268 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801c25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c25c:	228c      	movs	r2, #140	@ 0x8c
 801c25e:	589b      	ldr	r3, [r3, r2]
 801c260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c262:	0010      	movs	r0, r2
 801c264:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c266:	46c0      	nop			@ (mov r8, r8)
 801c268:	46c0      	nop			@ (mov r8, r8)
 801c26a:	46bd      	mov	sp, r7
 801c26c:	b00c      	add	sp, #48	@ 0x30
 801c26e:	bd80      	pop	{r7, pc}

0801c270 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b084      	sub	sp, #16
 801c274:	af00      	add	r7, sp, #0
 801c276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c27c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	2288      	movs	r2, #136	@ 0x88
 801c282:	589b      	ldr	r3, [r3, r2]
 801c284:	68fa      	ldr	r2, [r7, #12]
 801c286:	0010      	movs	r0, r2
 801c288:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c28a:	46c0      	nop			@ (mov r8, r8)
 801c28c:	46bd      	mov	sp, r7
 801c28e:	b004      	add	sp, #16
 801c290:	bd80      	pop	{r7, pc}
	...

0801c294 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801c294:	b580      	push	{r7, lr}
 801c296:	b094      	sub	sp, #80	@ 0x50
 801c298:	af00      	add	r7, sp, #0
 801c29a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	2220      	movs	r2, #32
 801c2aa:	4013      	ands	r3, r2
 801c2ac:	d16f      	bne.n	801c38e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801c2ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2b0:	225a      	movs	r2, #90	@ 0x5a
 801c2b2:	2100      	movs	r1, #0
 801c2b4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2b6:	f3ef 8310 	mrs	r3, PRIMASK
 801c2ba:	61bb      	str	r3, [r7, #24]
  return(result);
 801c2bc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801c2be:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c2c0:	2301      	movs	r3, #1
 801c2c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2c4:	69fb      	ldr	r3, [r7, #28]
 801c2c6:	f383 8810 	msr	PRIMASK, r3
}
 801c2ca:	46c0      	nop			@ (mov r8, r8)
 801c2cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	681a      	ldr	r2, [r3, #0]
 801c2d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	493b      	ldr	r1, [pc, #236]	@ (801c3c4 <UART_DMAReceiveCplt+0x130>)
 801c2d8:	400a      	ands	r2, r1
 801c2da:	601a      	str	r2, [r3, #0]
 801c2dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c2de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2e0:	6a3b      	ldr	r3, [r7, #32]
 801c2e2:	f383 8810 	msr	PRIMASK, r3
}
 801c2e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2e8:	f3ef 8310 	mrs	r3, PRIMASK
 801c2ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c2f0:	647b      	str	r3, [r7, #68]	@ 0x44
 801c2f2:	2301      	movs	r3, #1
 801c2f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2f8:	f383 8810 	msr	PRIMASK, r3
}
 801c2fc:	46c0      	nop			@ (mov r8, r8)
 801c2fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	689a      	ldr	r2, [r3, #8]
 801c304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	2101      	movs	r1, #1
 801c30a:	438a      	bics	r2, r1
 801c30c:	609a      	str	r2, [r3, #8]
 801c30e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c314:	f383 8810 	msr	PRIMASK, r3
}
 801c318:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c31a:	f3ef 8310 	mrs	r3, PRIMASK
 801c31e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801c320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801c322:	643b      	str	r3, [r7, #64]	@ 0x40
 801c324:	2301      	movs	r3, #1
 801c326:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c32a:	f383 8810 	msr	PRIMASK, r3
}
 801c32e:	46c0      	nop			@ (mov r8, r8)
 801c330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	689a      	ldr	r2, [r3, #8]
 801c336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	2140      	movs	r1, #64	@ 0x40
 801c33c:	438a      	bics	r2, r1
 801c33e:	609a      	str	r2, [r3, #8]
 801c340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c342:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c346:	f383 8810 	msr	PRIMASK, r3
}
 801c34a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801c34c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c34e:	2280      	movs	r2, #128	@ 0x80
 801c350:	2120      	movs	r1, #32
 801c352:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c358:	2b01      	cmp	r3, #1
 801c35a:	d118      	bne.n	801c38e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c35c:	f3ef 8310 	mrs	r3, PRIMASK
 801c360:	60fb      	str	r3, [r7, #12]
  return(result);
 801c362:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c366:	2301      	movs	r3, #1
 801c368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c36a:	693b      	ldr	r3, [r7, #16]
 801c36c:	f383 8810 	msr	PRIMASK, r3
}
 801c370:	46c0      	nop			@ (mov r8, r8)
 801c372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	681a      	ldr	r2, [r3, #0]
 801c378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	2110      	movs	r1, #16
 801c37e:	438a      	bics	r2, r1
 801c380:	601a      	str	r2, [r3, #0]
 801c382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c384:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c386:	697b      	ldr	r3, [r7, #20]
 801c388:	f383 8810 	msr	PRIMASK, r3
}
 801c38c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c38e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c390:	2200      	movs	r2, #0
 801c392:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c398:	2b01      	cmp	r3, #1
 801c39a:	d109      	bne.n	801c3b0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801c39c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c39e:	22ac      	movs	r2, #172	@ 0xac
 801c3a0:	589b      	ldr	r3, [r3, r2]
 801c3a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c3a4:	2158      	movs	r1, #88	@ 0x58
 801c3a6:	5a51      	ldrh	r1, [r2, r1]
 801c3a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c3aa:	0010      	movs	r0, r2
 801c3ac:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c3ae:	e005      	b.n	801c3bc <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801c3b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c3b2:	2294      	movs	r2, #148	@ 0x94
 801c3b4:	589b      	ldr	r3, [r3, r2]
 801c3b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c3b8:	0010      	movs	r0, r2
 801c3ba:	4798      	blx	r3
}
 801c3bc:	46c0      	nop			@ (mov r8, r8)
 801c3be:	46bd      	mov	sp, r7
 801c3c0:	b014      	add	sp, #80	@ 0x50
 801c3c2:	bd80      	pop	{r7, pc}
 801c3c4:	fffffeff 	.word	0xfffffeff

0801c3c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801c3c8:	b580      	push	{r7, lr}
 801c3ca:	b084      	sub	sp, #16
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c3d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	2201      	movs	r2, #1
 801c3da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c3dc:	68fb      	ldr	r3, [r7, #12]
 801c3de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c3e0:	2b01      	cmp	r3, #1
 801c3e2:	d10b      	bne.n	801c3fc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801c3e4:	68fb      	ldr	r3, [r7, #12]
 801c3e6:	22ac      	movs	r2, #172	@ 0xac
 801c3e8:	589b      	ldr	r3, [r3, r2]
 801c3ea:	68fa      	ldr	r2, [r7, #12]
 801c3ec:	2158      	movs	r1, #88	@ 0x58
 801c3ee:	5a52      	ldrh	r2, [r2, r1]
 801c3f0:	0852      	lsrs	r2, r2, #1
 801c3f2:	b291      	uxth	r1, r2
 801c3f4:	68fa      	ldr	r2, [r7, #12]
 801c3f6:	0010      	movs	r0, r2
 801c3f8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801c3fa:	e005      	b.n	801c408 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	2290      	movs	r2, #144	@ 0x90
 801c400:	589b      	ldr	r3, [r3, r2]
 801c402:	68fa      	ldr	r2, [r7, #12]
 801c404:	0010      	movs	r0, r2
 801c406:	4798      	blx	r3
}
 801c408:	46c0      	nop			@ (mov r8, r8)
 801c40a:	46bd      	mov	sp, r7
 801c40c:	b004      	add	sp, #16
 801c40e:	bd80      	pop	{r7, pc}

0801c410 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801c410:	b580      	push	{r7, lr}
 801c412:	b086      	sub	sp, #24
 801c414:	af00      	add	r7, sp, #0
 801c416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c41c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801c41e:	697b      	ldr	r3, [r7, #20]
 801c420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c422:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801c424:	697b      	ldr	r3, [r7, #20]
 801c426:	2280      	movs	r2, #128	@ 0x80
 801c428:	589b      	ldr	r3, [r3, r2]
 801c42a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801c42c:	697b      	ldr	r3, [r7, #20]
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	689b      	ldr	r3, [r3, #8]
 801c432:	2280      	movs	r2, #128	@ 0x80
 801c434:	4013      	ands	r3, r2
 801c436:	2b80      	cmp	r3, #128	@ 0x80
 801c438:	d10a      	bne.n	801c450 <UART_DMAError+0x40>
 801c43a:	693b      	ldr	r3, [r7, #16]
 801c43c:	2b21      	cmp	r3, #33	@ 0x21
 801c43e:	d107      	bne.n	801c450 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801c440:	697b      	ldr	r3, [r7, #20]
 801c442:	2252      	movs	r2, #82	@ 0x52
 801c444:	2100      	movs	r1, #0
 801c446:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801c448:	697b      	ldr	r3, [r7, #20]
 801c44a:	0018      	movs	r0, r3
 801c44c:	f7ff fe3a 	bl	801c0c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801c450:	697b      	ldr	r3, [r7, #20]
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	689b      	ldr	r3, [r3, #8]
 801c456:	2240      	movs	r2, #64	@ 0x40
 801c458:	4013      	ands	r3, r2
 801c45a:	2b40      	cmp	r3, #64	@ 0x40
 801c45c:	d10a      	bne.n	801c474 <UART_DMAError+0x64>
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	2b22      	cmp	r3, #34	@ 0x22
 801c462:	d107      	bne.n	801c474 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801c464:	697b      	ldr	r3, [r7, #20]
 801c466:	225a      	movs	r2, #90	@ 0x5a
 801c468:	2100      	movs	r1, #0
 801c46a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801c46c:	697b      	ldr	r3, [r7, #20]
 801c46e:	0018      	movs	r0, r3
 801c470:	f7ff fe4c 	bl	801c10c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801c474:	697b      	ldr	r3, [r7, #20]
 801c476:	2284      	movs	r2, #132	@ 0x84
 801c478:	589b      	ldr	r3, [r3, r2]
 801c47a:	2210      	movs	r2, #16
 801c47c:	431a      	orrs	r2, r3
 801c47e:	697b      	ldr	r3, [r7, #20]
 801c480:	2184      	movs	r1, #132	@ 0x84
 801c482:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c484:	697b      	ldr	r3, [r7, #20]
 801c486:	2298      	movs	r2, #152	@ 0x98
 801c488:	589b      	ldr	r3, [r3, r2]
 801c48a:	697a      	ldr	r2, [r7, #20]
 801c48c:	0010      	movs	r0, r2
 801c48e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c490:	46c0      	nop			@ (mov r8, r8)
 801c492:	46bd      	mov	sp, r7
 801c494:	b006      	add	sp, #24
 801c496:	bd80      	pop	{r7, pc}

0801c498 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c498:	b580      	push	{r7, lr}
 801c49a:	b084      	sub	sp, #16
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c4a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c4a6:	68fb      	ldr	r3, [r7, #12]
 801c4a8:	225a      	movs	r2, #90	@ 0x5a
 801c4aa:	2100      	movs	r1, #0
 801c4ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	2252      	movs	r2, #82	@ 0x52
 801c4b2:	2100      	movs	r1, #0
 801c4b4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	2298      	movs	r2, #152	@ 0x98
 801c4ba:	589b      	ldr	r3, [r3, r2]
 801c4bc:	68fa      	ldr	r2, [r7, #12]
 801c4be:	0010      	movs	r0, r2
 801c4c0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c4c2:	46c0      	nop			@ (mov r8, r8)
 801c4c4:	46bd      	mov	sp, r7
 801c4c6:	b004      	add	sp, #16
 801c4c8:	bd80      	pop	{r7, pc}

0801c4ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c4ca:	b580      	push	{r7, lr}
 801c4cc:	b086      	sub	sp, #24
 801c4ce:	af00      	add	r7, sp, #0
 801c4d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4d2:	f3ef 8310 	mrs	r3, PRIMASK
 801c4d6:	60bb      	str	r3, [r7, #8]
  return(result);
 801c4d8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c4da:	617b      	str	r3, [r7, #20]
 801c4dc:	2301      	movs	r3, #1
 801c4de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	f383 8810 	msr	PRIMASK, r3
}
 801c4e6:	46c0      	nop			@ (mov r8, r8)
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	681a      	ldr	r2, [r3, #0]
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	2140      	movs	r1, #64	@ 0x40
 801c4f4:	438a      	bics	r2, r1
 801c4f6:	601a      	str	r2, [r3, #0]
 801c4f8:	697b      	ldr	r3, [r7, #20]
 801c4fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4fc:	693b      	ldr	r3, [r7, #16]
 801c4fe:	f383 8810 	msr	PRIMASK, r3
}
 801c502:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	2220      	movs	r2, #32
 801c508:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	2200      	movs	r2, #0
 801c50e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	228c      	movs	r2, #140	@ 0x8c
 801c514:	589b      	ldr	r3, [r3, r2]
 801c516:	687a      	ldr	r2, [r7, #4]
 801c518:	0010      	movs	r0, r2
 801c51a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c51c:	46c0      	nop			@ (mov r8, r8)
 801c51e:	46bd      	mov	sp, r7
 801c520:	b006      	add	sp, #24
 801c522:	bd80      	pop	{r7, pc}

0801c524 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c524:	b580      	push	{r7, lr}
 801c526:	b094      	sub	sp, #80	@ 0x50
 801c528:	af00      	add	r7, sp, #0
 801c52a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c52c:	204e      	movs	r0, #78	@ 0x4e
 801c52e:	183b      	adds	r3, r7, r0
 801c530:	687a      	ldr	r2, [r7, #4]
 801c532:	215c      	movs	r1, #92	@ 0x5c
 801c534:	5a52      	ldrh	r2, [r2, r1]
 801c536:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	2280      	movs	r2, #128	@ 0x80
 801c53c:	589b      	ldr	r3, [r3, r2]
 801c53e:	2b22      	cmp	r3, #34	@ 0x22
 801c540:	d000      	beq.n	801c544 <UART_RxISR_8BIT+0x20>
 801c542:	e0c2      	b.n	801c6ca <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c54a:	214c      	movs	r1, #76	@ 0x4c
 801c54c:	187b      	adds	r3, r7, r1
 801c54e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c550:	187b      	adds	r3, r7, r1
 801c552:	881b      	ldrh	r3, [r3, #0]
 801c554:	b2da      	uxtb	r2, r3
 801c556:	183b      	adds	r3, r7, r0
 801c558:	881b      	ldrh	r3, [r3, #0]
 801c55a:	b2d9      	uxtb	r1, r3
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c560:	400a      	ands	r2, r1
 801c562:	b2d2      	uxtb	r2, r2
 801c564:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c56a:	1c5a      	adds	r2, r3, #1
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	225a      	movs	r2, #90	@ 0x5a
 801c574:	5a9b      	ldrh	r3, [r3, r2]
 801c576:	b29b      	uxth	r3, r3
 801c578:	3b01      	subs	r3, #1
 801c57a:	b299      	uxth	r1, r3
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	225a      	movs	r2, #90	@ 0x5a
 801c580:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	225a      	movs	r2, #90	@ 0x5a
 801c586:	5a9b      	ldrh	r3, [r3, r2]
 801c588:	b29b      	uxth	r3, r3
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d000      	beq.n	801c590 <UART_RxISR_8BIT+0x6c>
 801c58e:	e0a4      	b.n	801c6da <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c590:	f3ef 8310 	mrs	r3, PRIMASK
 801c594:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801c596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c598:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c59a:	2301      	movs	r3, #1
 801c59c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c5a0:	f383 8810 	msr	PRIMASK, r3
}
 801c5a4:	46c0      	nop			@ (mov r8, r8)
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	681a      	ldr	r2, [r3, #0]
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	494c      	ldr	r1, [pc, #304]	@ (801c6e4 <UART_RxISR_8BIT+0x1c0>)
 801c5b2:	400a      	ands	r2, r1
 801c5b4:	601a      	str	r2, [r3, #0]
 801c5b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5bc:	f383 8810 	msr	PRIMASK, r3
}
 801c5c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5c2:	f3ef 8310 	mrs	r3, PRIMASK
 801c5c6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801c5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c5ca:	647b      	str	r3, [r7, #68]	@ 0x44
 801c5cc:	2301      	movs	r3, #1
 801c5ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c5d2:	f383 8810 	msr	PRIMASK, r3
}
 801c5d6:	46c0      	nop			@ (mov r8, r8)
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	689a      	ldr	r2, [r3, #8]
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	681b      	ldr	r3, [r3, #0]
 801c5e2:	2101      	movs	r1, #1
 801c5e4:	438a      	bics	r2, r1
 801c5e6:	609a      	str	r2, [r3, #8]
 801c5e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c5ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c5ee:	f383 8810 	msr	PRIMASK, r3
}
 801c5f2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	2280      	movs	r2, #128	@ 0x80
 801c5f8:	2120      	movs	r1, #32
 801c5fa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	2200      	movs	r2, #0
 801c600:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	2200      	movs	r2, #0
 801c606:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	681b      	ldr	r3, [r3, #0]
 801c60c:	4a36      	ldr	r2, [pc, #216]	@ (801c6e8 <UART_RxISR_8BIT+0x1c4>)
 801c60e:	4293      	cmp	r3, r2
 801c610:	d01f      	beq.n	801c652 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	685a      	ldr	r2, [r3, #4]
 801c618:	2380      	movs	r3, #128	@ 0x80
 801c61a:	041b      	lsls	r3, r3, #16
 801c61c:	4013      	ands	r3, r2
 801c61e:	d018      	beq.n	801c652 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c620:	f3ef 8310 	mrs	r3, PRIMASK
 801c624:	61bb      	str	r3, [r7, #24]
  return(result);
 801c626:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c628:	643b      	str	r3, [r7, #64]	@ 0x40
 801c62a:	2301      	movs	r3, #1
 801c62c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c62e:	69fb      	ldr	r3, [r7, #28]
 801c630:	f383 8810 	msr	PRIMASK, r3
}
 801c634:	46c0      	nop			@ (mov r8, r8)
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	681a      	ldr	r2, [r3, #0]
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	492a      	ldr	r1, [pc, #168]	@ (801c6ec <UART_RxISR_8BIT+0x1c8>)
 801c642:	400a      	ands	r2, r1
 801c644:	601a      	str	r2, [r3, #0]
 801c646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c648:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c64a:	6a3b      	ldr	r3, [r7, #32]
 801c64c:	f383 8810 	msr	PRIMASK, r3
}
 801c650:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c656:	2b01      	cmp	r3, #1
 801c658:	d130      	bne.n	801c6bc <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	2200      	movs	r2, #0
 801c65e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c660:	f3ef 8310 	mrs	r3, PRIMASK
 801c664:	60fb      	str	r3, [r7, #12]
  return(result);
 801c666:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c66a:	2301      	movs	r3, #1
 801c66c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c66e:	693b      	ldr	r3, [r7, #16]
 801c670:	f383 8810 	msr	PRIMASK, r3
}
 801c674:	46c0      	nop			@ (mov r8, r8)
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	681b      	ldr	r3, [r3, #0]
 801c67a:	681a      	ldr	r2, [r3, #0]
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	2110      	movs	r1, #16
 801c682:	438a      	bics	r2, r1
 801c684:	601a      	str	r2, [r3, #0]
 801c686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c688:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c68a:	697b      	ldr	r3, [r7, #20]
 801c68c:	f383 8810 	msr	PRIMASK, r3
}
 801c690:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	69db      	ldr	r3, [r3, #28]
 801c698:	2210      	movs	r2, #16
 801c69a:	4013      	ands	r3, r2
 801c69c:	2b10      	cmp	r3, #16
 801c69e:	d103      	bne.n	801c6a8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	681b      	ldr	r3, [r3, #0]
 801c6a4:	2210      	movs	r2, #16
 801c6a6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	22ac      	movs	r2, #172	@ 0xac
 801c6ac:	589b      	ldr	r3, [r3, r2]
 801c6ae:	687a      	ldr	r2, [r7, #4]
 801c6b0:	2158      	movs	r1, #88	@ 0x58
 801c6b2:	5a51      	ldrh	r1, [r2, r1]
 801c6b4:	687a      	ldr	r2, [r7, #4]
 801c6b6:	0010      	movs	r0, r2
 801c6b8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c6ba:	e00e      	b.n	801c6da <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	2294      	movs	r2, #148	@ 0x94
 801c6c0:	589b      	ldr	r3, [r3, r2]
 801c6c2:	687a      	ldr	r2, [r7, #4]
 801c6c4:	0010      	movs	r0, r2
 801c6c6:	4798      	blx	r3
}
 801c6c8:	e007      	b.n	801c6da <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	699a      	ldr	r2, [r3, #24]
 801c6d0:	687b      	ldr	r3, [r7, #4]
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	2108      	movs	r1, #8
 801c6d6:	430a      	orrs	r2, r1
 801c6d8:	619a      	str	r2, [r3, #24]
}
 801c6da:	46c0      	nop			@ (mov r8, r8)
 801c6dc:	46bd      	mov	sp, r7
 801c6de:	b014      	add	sp, #80	@ 0x50
 801c6e0:	bd80      	pop	{r7, pc}
 801c6e2:	46c0      	nop			@ (mov r8, r8)
 801c6e4:	fffffedf 	.word	0xfffffedf
 801c6e8:	40004800 	.word	0x40004800
 801c6ec:	fbffffff 	.word	0xfbffffff

0801c6f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c6f0:	b580      	push	{r7, lr}
 801c6f2:	b094      	sub	sp, #80	@ 0x50
 801c6f4:	af00      	add	r7, sp, #0
 801c6f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c6f8:	204e      	movs	r0, #78	@ 0x4e
 801c6fa:	183b      	adds	r3, r7, r0
 801c6fc:	687a      	ldr	r2, [r7, #4]
 801c6fe:	215c      	movs	r1, #92	@ 0x5c
 801c700:	5a52      	ldrh	r2, [r2, r1]
 801c702:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	2280      	movs	r2, #128	@ 0x80
 801c708:	589b      	ldr	r3, [r3, r2]
 801c70a:	2b22      	cmp	r3, #34	@ 0x22
 801c70c:	d000      	beq.n	801c710 <UART_RxISR_16BIT+0x20>
 801c70e:	e0c2      	b.n	801c896 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c716:	214c      	movs	r1, #76	@ 0x4c
 801c718:	187b      	adds	r3, r7, r1
 801c71a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c720:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801c722:	187b      	adds	r3, r7, r1
 801c724:	183a      	adds	r2, r7, r0
 801c726:	881b      	ldrh	r3, [r3, #0]
 801c728:	8812      	ldrh	r2, [r2, #0]
 801c72a:	4013      	ands	r3, r2
 801c72c:	b29a      	uxth	r2, r3
 801c72e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c730:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c736:	1c9a      	adds	r2, r3, #2
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	225a      	movs	r2, #90	@ 0x5a
 801c740:	5a9b      	ldrh	r3, [r3, r2]
 801c742:	b29b      	uxth	r3, r3
 801c744:	3b01      	subs	r3, #1
 801c746:	b299      	uxth	r1, r3
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	225a      	movs	r2, #90	@ 0x5a
 801c74c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	225a      	movs	r2, #90	@ 0x5a
 801c752:	5a9b      	ldrh	r3, [r3, r2]
 801c754:	b29b      	uxth	r3, r3
 801c756:	2b00      	cmp	r3, #0
 801c758:	d000      	beq.n	801c75c <UART_RxISR_16BIT+0x6c>
 801c75a:	e0a4      	b.n	801c8a6 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c75c:	f3ef 8310 	mrs	r3, PRIMASK
 801c760:	623b      	str	r3, [r7, #32]
  return(result);
 801c762:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c764:	647b      	str	r3, [r7, #68]	@ 0x44
 801c766:	2301      	movs	r3, #1
 801c768:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c76c:	f383 8810 	msr	PRIMASK, r3
}
 801c770:	46c0      	nop			@ (mov r8, r8)
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	681a      	ldr	r2, [r3, #0]
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	494c      	ldr	r1, [pc, #304]	@ (801c8b0 <UART_RxISR_16BIT+0x1c0>)
 801c77e:	400a      	ands	r2, r1
 801c780:	601a      	str	r2, [r3, #0]
 801c782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c784:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c788:	f383 8810 	msr	PRIMASK, r3
}
 801c78c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c78e:	f3ef 8310 	mrs	r3, PRIMASK
 801c792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801c794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c796:	643b      	str	r3, [r7, #64]	@ 0x40
 801c798:	2301      	movs	r3, #1
 801c79a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c79e:	f383 8810 	msr	PRIMASK, r3
}
 801c7a2:	46c0      	nop			@ (mov r8, r8)
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	689a      	ldr	r2, [r3, #8]
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	2101      	movs	r1, #1
 801c7b0:	438a      	bics	r2, r1
 801c7b2:	609a      	str	r2, [r3, #8]
 801c7b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c7b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c7ba:	f383 8810 	msr	PRIMASK, r3
}
 801c7be:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	2280      	movs	r2, #128	@ 0x80
 801c7c4:	2120      	movs	r1, #32
 801c7c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	2200      	movs	r2, #0
 801c7d2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	4a36      	ldr	r2, [pc, #216]	@ (801c8b4 <UART_RxISR_16BIT+0x1c4>)
 801c7da:	4293      	cmp	r3, r2
 801c7dc:	d01f      	beq.n	801c81e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	681b      	ldr	r3, [r3, #0]
 801c7e2:	685a      	ldr	r2, [r3, #4]
 801c7e4:	2380      	movs	r3, #128	@ 0x80
 801c7e6:	041b      	lsls	r3, r3, #16
 801c7e8:	4013      	ands	r3, r2
 801c7ea:	d018      	beq.n	801c81e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7ec:	f3ef 8310 	mrs	r3, PRIMASK
 801c7f0:	617b      	str	r3, [r7, #20]
  return(result);
 801c7f2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c7f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c7f6:	2301      	movs	r3, #1
 801c7f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7fa:	69bb      	ldr	r3, [r7, #24]
 801c7fc:	f383 8810 	msr	PRIMASK, r3
}
 801c800:	46c0      	nop			@ (mov r8, r8)
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	681a      	ldr	r2, [r3, #0]
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	492a      	ldr	r1, [pc, #168]	@ (801c8b8 <UART_RxISR_16BIT+0x1c8>)
 801c80e:	400a      	ands	r2, r1
 801c810:	601a      	str	r2, [r3, #0]
 801c812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c816:	69fb      	ldr	r3, [r7, #28]
 801c818:	f383 8810 	msr	PRIMASK, r3
}
 801c81c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c822:	2b01      	cmp	r3, #1
 801c824:	d130      	bne.n	801c888 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	2200      	movs	r2, #0
 801c82a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c82c:	f3ef 8310 	mrs	r3, PRIMASK
 801c830:	60bb      	str	r3, [r7, #8]
  return(result);
 801c832:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c834:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c836:	2301      	movs	r3, #1
 801c838:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c83a:	68fb      	ldr	r3, [r7, #12]
 801c83c:	f383 8810 	msr	PRIMASK, r3
}
 801c840:	46c0      	nop			@ (mov r8, r8)
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	681a      	ldr	r2, [r3, #0]
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	2110      	movs	r1, #16
 801c84e:	438a      	bics	r2, r1
 801c850:	601a      	str	r2, [r3, #0]
 801c852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c856:	693b      	ldr	r3, [r7, #16]
 801c858:	f383 8810 	msr	PRIMASK, r3
}
 801c85c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	69db      	ldr	r3, [r3, #28]
 801c864:	2210      	movs	r2, #16
 801c866:	4013      	ands	r3, r2
 801c868:	2b10      	cmp	r3, #16
 801c86a:	d103      	bne.n	801c874 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	2210      	movs	r2, #16
 801c872:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	22ac      	movs	r2, #172	@ 0xac
 801c878:	589b      	ldr	r3, [r3, r2]
 801c87a:	687a      	ldr	r2, [r7, #4]
 801c87c:	2158      	movs	r1, #88	@ 0x58
 801c87e:	5a51      	ldrh	r1, [r2, r1]
 801c880:	687a      	ldr	r2, [r7, #4]
 801c882:	0010      	movs	r0, r2
 801c884:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c886:	e00e      	b.n	801c8a6 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	2294      	movs	r2, #148	@ 0x94
 801c88c:	589b      	ldr	r3, [r3, r2]
 801c88e:	687a      	ldr	r2, [r7, #4]
 801c890:	0010      	movs	r0, r2
 801c892:	4798      	blx	r3
}
 801c894:	e007      	b.n	801c8a6 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	699a      	ldr	r2, [r3, #24]
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	2108      	movs	r1, #8
 801c8a2:	430a      	orrs	r2, r1
 801c8a4:	619a      	str	r2, [r3, #24]
}
 801c8a6:	46c0      	nop			@ (mov r8, r8)
 801c8a8:	46bd      	mov	sp, r7
 801c8aa:	b014      	add	sp, #80	@ 0x50
 801c8ac:	bd80      	pop	{r7, pc}
 801c8ae:	46c0      	nop			@ (mov r8, r8)
 801c8b0:	fffffedf 	.word	0xfffffedf
 801c8b4:	40004800 	.word	0x40004800
 801c8b8:	fbffffff 	.word	0xfbffffff

0801c8bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801c8bc:	b580      	push	{r7, lr}
 801c8be:	b082      	sub	sp, #8
 801c8c0:	af00      	add	r7, sp, #0
 801c8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801c8c4:	46c0      	nop			@ (mov r8, r8)
 801c8c6:	46bd      	mov	sp, r7
 801c8c8:	b002      	add	sp, #8
 801c8ca:	bd80      	pop	{r7, pc}

0801c8cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801c8cc:	b580      	push	{r7, lr}
 801c8ce:	b084      	sub	sp, #16
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801c8d4:	687b      	ldr	r3, [r7, #4]
 801c8d6:	2244      	movs	r2, #68	@ 0x44
 801c8d8:	2100      	movs	r1, #0
 801c8da:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801c8dc:	4b05      	ldr	r3, [pc, #20]	@ (801c8f4 <USB_EnableGlobalInt+0x28>)
 801c8de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	b299      	uxth	r1, r3
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	2240      	movs	r2, #64	@ 0x40
 801c8e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801c8ea:	2300      	movs	r3, #0
}
 801c8ec:	0018      	movs	r0, r3
 801c8ee:	46bd      	mov	sp, r7
 801c8f0:	b004      	add	sp, #16
 801c8f2:	bd80      	pop	{r7, pc}
 801c8f4:	0000bf80 	.word	0x0000bf80

0801c8f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801c8f8:	b580      	push	{r7, lr}
 801c8fa:	b084      	sub	sp, #16
 801c8fc:	af00      	add	r7, sp, #0
 801c8fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801c900:	4b09      	ldr	r3, [pc, #36]	@ (801c928 <USB_DisableGlobalInt+0x30>)
 801c902:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	2240      	movs	r2, #64	@ 0x40
 801c908:	5a9b      	ldrh	r3, [r3, r2]
 801c90a:	b29b      	uxth	r3, r3
 801c90c:	68fa      	ldr	r2, [r7, #12]
 801c90e:	b292      	uxth	r2, r2
 801c910:	43d2      	mvns	r2, r2
 801c912:	b292      	uxth	r2, r2
 801c914:	4013      	ands	r3, r2
 801c916:	b299      	uxth	r1, r3
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	2240      	movs	r2, #64	@ 0x40
 801c91c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801c91e:	2300      	movs	r3, #0
}
 801c920:	0018      	movs	r0, r3
 801c922:	46bd      	mov	sp, r7
 801c924:	b004      	add	sp, #16
 801c926:	bd80      	pop	{r7, pc}
 801c928:	0000bf80 	.word	0x0000bf80

0801c92c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801c92c:	b084      	sub	sp, #16
 801c92e:	b590      	push	{r4, r7, lr}
 801c930:	b083      	sub	sp, #12
 801c932:	af00      	add	r7, sp, #0
 801c934:	6078      	str	r0, [r7, #4]
 801c936:	2004      	movs	r0, #4
 801c938:	2410      	movs	r4, #16
 801c93a:	1900      	adds	r0, r0, r4
 801c93c:	2408      	movs	r4, #8
 801c93e:	46a4      	mov	ip, r4
 801c940:	44bc      	add	ip, r7
 801c942:	4460      	add	r0, ip
 801c944:	6001      	str	r1, [r0, #0]
 801c946:	6042      	str	r2, [r0, #4]
 801c948:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	2240      	movs	r2, #64	@ 0x40
 801c94e:	2101      	movs	r1, #1
 801c950:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801c952:	687b      	ldr	r3, [r7, #4]
 801c954:	2240      	movs	r2, #64	@ 0x40
 801c956:	2100      	movs	r1, #0
 801c958:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	2244      	movs	r2, #68	@ 0x44
 801c95e:	2100      	movs	r1, #0
 801c960:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	2250      	movs	r2, #80	@ 0x50
 801c966:	2100      	movs	r1, #0
 801c968:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801c96a:	2300      	movs	r3, #0
}
 801c96c:	0018      	movs	r0, r3
 801c96e:	46bd      	mov	sp, r7
 801c970:	b003      	add	sp, #12
 801c972:	bc90      	pop	{r4, r7}
 801c974:	bc08      	pop	{r3}
 801c976:	b004      	add	sp, #16
 801c978:	4718      	bx	r3
	...

0801c97c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801c97c:	b580      	push	{r7, lr}
 801c97e:	b09c      	sub	sp, #112	@ 0x70
 801c980:	af00      	add	r7, sp, #0
 801c982:	6078      	str	r0, [r7, #4]
 801c984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801c986:	236f      	movs	r3, #111	@ 0x6f
 801c988:	18fb      	adds	r3, r7, r3
 801c98a:	2200      	movs	r2, #0
 801c98c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801c98e:	687a      	ldr	r2, [r7, #4]
 801c990:	683b      	ldr	r3, [r7, #0]
 801c992:	781b      	ldrb	r3, [r3, #0]
 801c994:	009b      	lsls	r3, r3, #2
 801c996:	18d3      	adds	r3, r2, r3
 801c998:	881b      	ldrh	r3, [r3, #0]
 801c99a:	b29a      	uxth	r2, r3
 801c99c:	236c      	movs	r3, #108	@ 0x6c
 801c99e:	18fb      	adds	r3, r7, r3
 801c9a0:	49a3      	ldr	r1, [pc, #652]	@ (801cc30 <USB_ActivateEndpoint+0x2b4>)
 801c9a2:	400a      	ands	r2, r1
 801c9a4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801c9a6:	683b      	ldr	r3, [r7, #0]
 801c9a8:	78db      	ldrb	r3, [r3, #3]
 801c9aa:	2b03      	cmp	r3, #3
 801c9ac:	d017      	beq.n	801c9de <USB_ActivateEndpoint+0x62>
 801c9ae:	dc28      	bgt.n	801ca02 <USB_ActivateEndpoint+0x86>
 801c9b0:	2b02      	cmp	r3, #2
 801c9b2:	d00e      	beq.n	801c9d2 <USB_ActivateEndpoint+0x56>
 801c9b4:	dc25      	bgt.n	801ca02 <USB_ActivateEndpoint+0x86>
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d002      	beq.n	801c9c0 <USB_ActivateEndpoint+0x44>
 801c9ba:	2b01      	cmp	r3, #1
 801c9bc:	d018      	beq.n	801c9f0 <USB_ActivateEndpoint+0x74>
 801c9be:	e020      	b.n	801ca02 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801c9c0:	226c      	movs	r2, #108	@ 0x6c
 801c9c2:	18bb      	adds	r3, r7, r2
 801c9c4:	18ba      	adds	r2, r7, r2
 801c9c6:	8812      	ldrh	r2, [r2, #0]
 801c9c8:	2180      	movs	r1, #128	@ 0x80
 801c9ca:	0089      	lsls	r1, r1, #2
 801c9cc:	430a      	orrs	r2, r1
 801c9ce:	801a      	strh	r2, [r3, #0]
      break;
 801c9d0:	e01c      	b.n	801ca0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801c9d2:	226c      	movs	r2, #108	@ 0x6c
 801c9d4:	18bb      	adds	r3, r7, r2
 801c9d6:	18ba      	adds	r2, r7, r2
 801c9d8:	8812      	ldrh	r2, [r2, #0]
 801c9da:	801a      	strh	r2, [r3, #0]
      break;
 801c9dc:	e016      	b.n	801ca0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801c9de:	226c      	movs	r2, #108	@ 0x6c
 801c9e0:	18bb      	adds	r3, r7, r2
 801c9e2:	18ba      	adds	r2, r7, r2
 801c9e4:	8812      	ldrh	r2, [r2, #0]
 801c9e6:	21c0      	movs	r1, #192	@ 0xc0
 801c9e8:	00c9      	lsls	r1, r1, #3
 801c9ea:	430a      	orrs	r2, r1
 801c9ec:	801a      	strh	r2, [r3, #0]
      break;
 801c9ee:	e00d      	b.n	801ca0c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801c9f0:	226c      	movs	r2, #108	@ 0x6c
 801c9f2:	18bb      	adds	r3, r7, r2
 801c9f4:	18ba      	adds	r2, r7, r2
 801c9f6:	8812      	ldrh	r2, [r2, #0]
 801c9f8:	2180      	movs	r1, #128	@ 0x80
 801c9fa:	00c9      	lsls	r1, r1, #3
 801c9fc:	430a      	orrs	r2, r1
 801c9fe:	801a      	strh	r2, [r3, #0]
      break;
 801ca00:	e004      	b.n	801ca0c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801ca02:	236f      	movs	r3, #111	@ 0x6f
 801ca04:	18fb      	adds	r3, r7, r3
 801ca06:	2201      	movs	r2, #1
 801ca08:	701a      	strb	r2, [r3, #0]
      break;
 801ca0a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801ca0c:	687a      	ldr	r2, [r7, #4]
 801ca0e:	683b      	ldr	r3, [r7, #0]
 801ca10:	781b      	ldrb	r3, [r3, #0]
 801ca12:	009b      	lsls	r3, r3, #2
 801ca14:	18d3      	adds	r3, r2, r3
 801ca16:	226c      	movs	r2, #108	@ 0x6c
 801ca18:	18ba      	adds	r2, r7, r2
 801ca1a:	8812      	ldrh	r2, [r2, #0]
 801ca1c:	4985      	ldr	r1, [pc, #532]	@ (801cc34 <USB_ActivateEndpoint+0x2b8>)
 801ca1e:	430a      	orrs	r2, r1
 801ca20:	b292      	uxth	r2, r2
 801ca22:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801ca24:	687a      	ldr	r2, [r7, #4]
 801ca26:	683b      	ldr	r3, [r7, #0]
 801ca28:	781b      	ldrb	r3, [r3, #0]
 801ca2a:	009b      	lsls	r3, r3, #2
 801ca2c:	18d3      	adds	r3, r2, r3
 801ca2e:	881b      	ldrh	r3, [r3, #0]
 801ca30:	b29b      	uxth	r3, r3
 801ca32:	b21b      	sxth	r3, r3
 801ca34:	4a80      	ldr	r2, [pc, #512]	@ (801cc38 <USB_ActivateEndpoint+0x2bc>)
 801ca36:	4013      	ands	r3, r2
 801ca38:	b21a      	sxth	r2, r3
 801ca3a:	683b      	ldr	r3, [r7, #0]
 801ca3c:	781b      	ldrb	r3, [r3, #0]
 801ca3e:	b21b      	sxth	r3, r3
 801ca40:	4313      	orrs	r3, r2
 801ca42:	b21a      	sxth	r2, r3
 801ca44:	2166      	movs	r1, #102	@ 0x66
 801ca46:	187b      	adds	r3, r7, r1
 801ca48:	801a      	strh	r2, [r3, #0]
 801ca4a:	687a      	ldr	r2, [r7, #4]
 801ca4c:	683b      	ldr	r3, [r7, #0]
 801ca4e:	781b      	ldrb	r3, [r3, #0]
 801ca50:	009b      	lsls	r3, r3, #2
 801ca52:	18d3      	adds	r3, r2, r3
 801ca54:	187a      	adds	r2, r7, r1
 801ca56:	8812      	ldrh	r2, [r2, #0]
 801ca58:	4976      	ldr	r1, [pc, #472]	@ (801cc34 <USB_ActivateEndpoint+0x2b8>)
 801ca5a:	430a      	orrs	r2, r1
 801ca5c:	b292      	uxth	r2, r2
 801ca5e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801ca60:	683b      	ldr	r3, [r7, #0]
 801ca62:	7b1b      	ldrb	r3, [r3, #12]
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d000      	beq.n	801ca6a <USB_ActivateEndpoint+0xee>
 801ca68:	e178      	b.n	801cd5c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801ca6a:	683b      	ldr	r3, [r7, #0]
 801ca6c:	785b      	ldrb	r3, [r3, #1]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d100      	bne.n	801ca74 <USB_ActivateEndpoint+0xf8>
 801ca72:	e07a      	b.n	801cb6a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	61bb      	str	r3, [r7, #24]
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	2250      	movs	r2, #80	@ 0x50
 801ca7c:	5a9b      	ldrh	r3, [r3, r2]
 801ca7e:	b29b      	uxth	r3, r3
 801ca80:	001a      	movs	r2, r3
 801ca82:	69bb      	ldr	r3, [r7, #24]
 801ca84:	189b      	adds	r3, r3, r2
 801ca86:	61bb      	str	r3, [r7, #24]
 801ca88:	683b      	ldr	r3, [r7, #0]
 801ca8a:	781b      	ldrb	r3, [r3, #0]
 801ca8c:	00da      	lsls	r2, r3, #3
 801ca8e:	69bb      	ldr	r3, [r7, #24]
 801ca90:	18d3      	adds	r3, r2, r3
 801ca92:	2280      	movs	r2, #128	@ 0x80
 801ca94:	00d2      	lsls	r2, r2, #3
 801ca96:	4694      	mov	ip, r2
 801ca98:	4463      	add	r3, ip
 801ca9a:	617b      	str	r3, [r7, #20]
 801ca9c:	683b      	ldr	r3, [r7, #0]
 801ca9e:	88db      	ldrh	r3, [r3, #6]
 801caa0:	085b      	lsrs	r3, r3, #1
 801caa2:	b29b      	uxth	r3, r3
 801caa4:	18db      	adds	r3, r3, r3
 801caa6:	b29a      	uxth	r2, r3
 801caa8:	697b      	ldr	r3, [r7, #20]
 801caaa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801caac:	687a      	ldr	r2, [r7, #4]
 801caae:	683b      	ldr	r3, [r7, #0]
 801cab0:	781b      	ldrb	r3, [r3, #0]
 801cab2:	009b      	lsls	r3, r3, #2
 801cab4:	18d2      	adds	r2, r2, r3
 801cab6:	2112      	movs	r1, #18
 801cab8:	187b      	adds	r3, r7, r1
 801caba:	8812      	ldrh	r2, [r2, #0]
 801cabc:	801a      	strh	r2, [r3, #0]
 801cabe:	187b      	adds	r3, r7, r1
 801cac0:	881b      	ldrh	r3, [r3, #0]
 801cac2:	2240      	movs	r2, #64	@ 0x40
 801cac4:	4013      	ands	r3, r2
 801cac6:	d016      	beq.n	801caf6 <USB_ActivateEndpoint+0x17a>
 801cac8:	687a      	ldr	r2, [r7, #4]
 801caca:	683b      	ldr	r3, [r7, #0]
 801cacc:	781b      	ldrb	r3, [r3, #0]
 801cace:	009b      	lsls	r3, r3, #2
 801cad0:	18d3      	adds	r3, r2, r3
 801cad2:	881b      	ldrh	r3, [r3, #0]
 801cad4:	b29a      	uxth	r2, r3
 801cad6:	2010      	movs	r0, #16
 801cad8:	183b      	adds	r3, r7, r0
 801cada:	4957      	ldr	r1, [pc, #348]	@ (801cc38 <USB_ActivateEndpoint+0x2bc>)
 801cadc:	400a      	ands	r2, r1
 801cade:	801a      	strh	r2, [r3, #0]
 801cae0:	687a      	ldr	r2, [r7, #4]
 801cae2:	683b      	ldr	r3, [r7, #0]
 801cae4:	781b      	ldrb	r3, [r3, #0]
 801cae6:	009b      	lsls	r3, r3, #2
 801cae8:	18d3      	adds	r3, r2, r3
 801caea:	183a      	adds	r2, r7, r0
 801caec:	8812      	ldrh	r2, [r2, #0]
 801caee:	4953      	ldr	r1, [pc, #332]	@ (801cc3c <USB_ActivateEndpoint+0x2c0>)
 801caf0:	430a      	orrs	r2, r1
 801caf2:	b292      	uxth	r2, r2
 801caf4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801caf6:	683b      	ldr	r3, [r7, #0]
 801caf8:	78db      	ldrb	r3, [r3, #3]
 801cafa:	2b01      	cmp	r3, #1
 801cafc:	d01d      	beq.n	801cb3a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801cafe:	687a      	ldr	r2, [r7, #4]
 801cb00:	683b      	ldr	r3, [r7, #0]
 801cb02:	781b      	ldrb	r3, [r3, #0]
 801cb04:	009b      	lsls	r3, r3, #2
 801cb06:	18d3      	adds	r3, r2, r3
 801cb08:	881b      	ldrh	r3, [r3, #0]
 801cb0a:	b29a      	uxth	r2, r3
 801cb0c:	200c      	movs	r0, #12
 801cb0e:	183b      	adds	r3, r7, r0
 801cb10:	494b      	ldr	r1, [pc, #300]	@ (801cc40 <USB_ActivateEndpoint+0x2c4>)
 801cb12:	400a      	ands	r2, r1
 801cb14:	801a      	strh	r2, [r3, #0]
 801cb16:	183b      	adds	r3, r7, r0
 801cb18:	183a      	adds	r2, r7, r0
 801cb1a:	8812      	ldrh	r2, [r2, #0]
 801cb1c:	2120      	movs	r1, #32
 801cb1e:	404a      	eors	r2, r1
 801cb20:	801a      	strh	r2, [r3, #0]
 801cb22:	687a      	ldr	r2, [r7, #4]
 801cb24:	683b      	ldr	r3, [r7, #0]
 801cb26:	781b      	ldrb	r3, [r3, #0]
 801cb28:	009b      	lsls	r3, r3, #2
 801cb2a:	18d3      	adds	r3, r2, r3
 801cb2c:	183a      	adds	r2, r7, r0
 801cb2e:	8812      	ldrh	r2, [r2, #0]
 801cb30:	4940      	ldr	r1, [pc, #256]	@ (801cc34 <USB_ActivateEndpoint+0x2b8>)
 801cb32:	430a      	orrs	r2, r1
 801cb34:	b292      	uxth	r2, r2
 801cb36:	801a      	strh	r2, [r3, #0]
 801cb38:	e2b4      	b.n	801d0a4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801cb3a:	687a      	ldr	r2, [r7, #4]
 801cb3c:	683b      	ldr	r3, [r7, #0]
 801cb3e:	781b      	ldrb	r3, [r3, #0]
 801cb40:	009b      	lsls	r3, r3, #2
 801cb42:	18d3      	adds	r3, r2, r3
 801cb44:	881b      	ldrh	r3, [r3, #0]
 801cb46:	b29a      	uxth	r2, r3
 801cb48:	200e      	movs	r0, #14
 801cb4a:	183b      	adds	r3, r7, r0
 801cb4c:	493c      	ldr	r1, [pc, #240]	@ (801cc40 <USB_ActivateEndpoint+0x2c4>)
 801cb4e:	400a      	ands	r2, r1
 801cb50:	801a      	strh	r2, [r3, #0]
 801cb52:	687a      	ldr	r2, [r7, #4]
 801cb54:	683b      	ldr	r3, [r7, #0]
 801cb56:	781b      	ldrb	r3, [r3, #0]
 801cb58:	009b      	lsls	r3, r3, #2
 801cb5a:	18d3      	adds	r3, r2, r3
 801cb5c:	183a      	adds	r2, r7, r0
 801cb5e:	8812      	ldrh	r2, [r2, #0]
 801cb60:	4934      	ldr	r1, [pc, #208]	@ (801cc34 <USB_ActivateEndpoint+0x2b8>)
 801cb62:	430a      	orrs	r2, r1
 801cb64:	b292      	uxth	r2, r2
 801cb66:	801a      	strh	r2, [r3, #0]
 801cb68:	e29c      	b.n	801d0a4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	633b      	str	r3, [r7, #48]	@ 0x30
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	2250      	movs	r2, #80	@ 0x50
 801cb72:	5a9b      	ldrh	r3, [r3, r2]
 801cb74:	b29b      	uxth	r3, r3
 801cb76:	001a      	movs	r2, r3
 801cb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb7a:	189b      	adds	r3, r3, r2
 801cb7c:	633b      	str	r3, [r7, #48]	@ 0x30
 801cb7e:	683b      	ldr	r3, [r7, #0]
 801cb80:	781b      	ldrb	r3, [r3, #0]
 801cb82:	00da      	lsls	r2, r3, #3
 801cb84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb86:	18d3      	adds	r3, r2, r3
 801cb88:	4a2e      	ldr	r2, [pc, #184]	@ (801cc44 <USB_ActivateEndpoint+0x2c8>)
 801cb8a:	4694      	mov	ip, r2
 801cb8c:	4463      	add	r3, ip
 801cb8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cb90:	683b      	ldr	r3, [r7, #0]
 801cb92:	88db      	ldrh	r3, [r3, #6]
 801cb94:	085b      	lsrs	r3, r3, #1
 801cb96:	b29b      	uxth	r3, r3
 801cb98:	18db      	adds	r3, r3, r3
 801cb9a:	b29a      	uxth	r2, r3
 801cb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb9e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	2250      	movs	r2, #80	@ 0x50
 801cba8:	5a9b      	ldrh	r3, [r3, r2]
 801cbaa:	b29b      	uxth	r3, r3
 801cbac:	001a      	movs	r2, r3
 801cbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbb0:	189b      	adds	r3, r3, r2
 801cbb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cbb4:	683b      	ldr	r3, [r7, #0]
 801cbb6:	781b      	ldrb	r3, [r3, #0]
 801cbb8:	00da      	lsls	r2, r3, #3
 801cbba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbbc:	18d3      	adds	r3, r2, r3
 801cbbe:	4a22      	ldr	r2, [pc, #136]	@ (801cc48 <USB_ActivateEndpoint+0x2cc>)
 801cbc0:	4694      	mov	ip, r2
 801cbc2:	4463      	add	r3, ip
 801cbc4:	627b      	str	r3, [r7, #36]	@ 0x24
 801cbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbc8:	881b      	ldrh	r3, [r3, #0]
 801cbca:	b29b      	uxth	r3, r3
 801cbcc:	059b      	lsls	r3, r3, #22
 801cbce:	0d9b      	lsrs	r3, r3, #22
 801cbd0:	b29a      	uxth	r2, r3
 801cbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbd4:	801a      	strh	r2, [r3, #0]
 801cbd6:	683b      	ldr	r3, [r7, #0]
 801cbd8:	691b      	ldr	r3, [r3, #16]
 801cbda:	2b3e      	cmp	r3, #62	@ 0x3e
 801cbdc:	d91a      	bls.n	801cc14 <USB_ActivateEndpoint+0x298>
 801cbde:	683b      	ldr	r3, [r7, #0]
 801cbe0:	691b      	ldr	r3, [r3, #16]
 801cbe2:	095b      	lsrs	r3, r3, #5
 801cbe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cbe6:	683b      	ldr	r3, [r7, #0]
 801cbe8:	691b      	ldr	r3, [r3, #16]
 801cbea:	221f      	movs	r2, #31
 801cbec:	4013      	ands	r3, r2
 801cbee:	d102      	bne.n	801cbf6 <USB_ActivateEndpoint+0x27a>
 801cbf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cbf2:	3b01      	subs	r3, #1
 801cbf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbf8:	881b      	ldrh	r3, [r3, #0]
 801cbfa:	b29a      	uxth	r2, r3
 801cbfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cbfe:	b29b      	uxth	r3, r3
 801cc00:	029b      	lsls	r3, r3, #10
 801cc02:	b29b      	uxth	r3, r3
 801cc04:	4313      	orrs	r3, r2
 801cc06:	b29b      	uxth	r3, r3
 801cc08:	4a10      	ldr	r2, [pc, #64]	@ (801cc4c <USB_ActivateEndpoint+0x2d0>)
 801cc0a:	4313      	orrs	r3, r2
 801cc0c:	b29a      	uxth	r2, r3
 801cc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc10:	801a      	strh	r2, [r3, #0]
 801cc12:	e034      	b.n	801cc7e <USB_ActivateEndpoint+0x302>
 801cc14:	683b      	ldr	r3, [r7, #0]
 801cc16:	691b      	ldr	r3, [r3, #16]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d119      	bne.n	801cc50 <USB_ActivateEndpoint+0x2d4>
 801cc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc1e:	881b      	ldrh	r3, [r3, #0]
 801cc20:	b29b      	uxth	r3, r3
 801cc22:	4a0a      	ldr	r2, [pc, #40]	@ (801cc4c <USB_ActivateEndpoint+0x2d0>)
 801cc24:	4313      	orrs	r3, r2
 801cc26:	b29a      	uxth	r2, r3
 801cc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc2a:	801a      	strh	r2, [r3, #0]
 801cc2c:	e027      	b.n	801cc7e <USB_ActivateEndpoint+0x302>
 801cc2e:	46c0      	nop			@ (mov r8, r8)
 801cc30:	ffff898f 	.word	0xffff898f
 801cc34:	ffff8080 	.word	0xffff8080
 801cc38:	ffff8f8f 	.word	0xffff8f8f
 801cc3c:	ffff80c0 	.word	0xffff80c0
 801cc40:	ffff8fbf 	.word	0xffff8fbf
 801cc44:	00000404 	.word	0x00000404
 801cc48:	00000406 	.word	0x00000406
 801cc4c:	ffff8000 	.word	0xffff8000
 801cc50:	683b      	ldr	r3, [r7, #0]
 801cc52:	691b      	ldr	r3, [r3, #16]
 801cc54:	085b      	lsrs	r3, r3, #1
 801cc56:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cc58:	683b      	ldr	r3, [r7, #0]
 801cc5a:	691b      	ldr	r3, [r3, #16]
 801cc5c:	2201      	movs	r2, #1
 801cc5e:	4013      	ands	r3, r2
 801cc60:	d002      	beq.n	801cc68 <USB_ActivateEndpoint+0x2ec>
 801cc62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cc64:	3301      	adds	r3, #1
 801cc66:	66bb      	str	r3, [r7, #104]	@ 0x68
 801cc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc6a:	881b      	ldrh	r3, [r3, #0]
 801cc6c:	b29a      	uxth	r2, r3
 801cc6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cc70:	b29b      	uxth	r3, r3
 801cc72:	029b      	lsls	r3, r3, #10
 801cc74:	b29b      	uxth	r3, r3
 801cc76:	4313      	orrs	r3, r2
 801cc78:	b29a      	uxth	r2, r3
 801cc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801cc7e:	687a      	ldr	r2, [r7, #4]
 801cc80:	683b      	ldr	r3, [r7, #0]
 801cc82:	781b      	ldrb	r3, [r3, #0]
 801cc84:	009b      	lsls	r3, r3, #2
 801cc86:	18d2      	adds	r2, r2, r3
 801cc88:	2122      	movs	r1, #34	@ 0x22
 801cc8a:	187b      	adds	r3, r7, r1
 801cc8c:	8812      	ldrh	r2, [r2, #0]
 801cc8e:	801a      	strh	r2, [r3, #0]
 801cc90:	187b      	adds	r3, r7, r1
 801cc92:	881a      	ldrh	r2, [r3, #0]
 801cc94:	2380      	movs	r3, #128	@ 0x80
 801cc96:	01db      	lsls	r3, r3, #7
 801cc98:	4013      	ands	r3, r2
 801cc9a:	d016      	beq.n	801ccca <USB_ActivateEndpoint+0x34e>
 801cc9c:	687a      	ldr	r2, [r7, #4]
 801cc9e:	683b      	ldr	r3, [r7, #0]
 801cca0:	781b      	ldrb	r3, [r3, #0]
 801cca2:	009b      	lsls	r3, r3, #2
 801cca4:	18d3      	adds	r3, r2, r3
 801cca6:	881b      	ldrh	r3, [r3, #0]
 801cca8:	b29a      	uxth	r2, r3
 801ccaa:	2020      	movs	r0, #32
 801ccac:	183b      	adds	r3, r7, r0
 801ccae:	49dd      	ldr	r1, [pc, #884]	@ (801d024 <USB_ActivateEndpoint+0x6a8>)
 801ccb0:	400a      	ands	r2, r1
 801ccb2:	801a      	strh	r2, [r3, #0]
 801ccb4:	687a      	ldr	r2, [r7, #4]
 801ccb6:	683b      	ldr	r3, [r7, #0]
 801ccb8:	781b      	ldrb	r3, [r3, #0]
 801ccba:	009b      	lsls	r3, r3, #2
 801ccbc:	18d3      	adds	r3, r2, r3
 801ccbe:	183a      	adds	r2, r7, r0
 801ccc0:	8812      	ldrh	r2, [r2, #0]
 801ccc2:	49d9      	ldr	r1, [pc, #868]	@ (801d028 <USB_ActivateEndpoint+0x6ac>)
 801ccc4:	430a      	orrs	r2, r1
 801ccc6:	b292      	uxth	r2, r2
 801ccc8:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801ccca:	683b      	ldr	r3, [r7, #0]
 801cccc:	781b      	ldrb	r3, [r3, #0]
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d125      	bne.n	801cd1e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ccd2:	687a      	ldr	r2, [r7, #4]
 801ccd4:	683b      	ldr	r3, [r7, #0]
 801ccd6:	781b      	ldrb	r3, [r3, #0]
 801ccd8:	009b      	lsls	r3, r3, #2
 801ccda:	18d3      	adds	r3, r2, r3
 801ccdc:	881b      	ldrh	r3, [r3, #0]
 801ccde:	b29a      	uxth	r2, r3
 801cce0:	201c      	movs	r0, #28
 801cce2:	183b      	adds	r3, r7, r0
 801cce4:	49d1      	ldr	r1, [pc, #836]	@ (801d02c <USB_ActivateEndpoint+0x6b0>)
 801cce6:	400a      	ands	r2, r1
 801cce8:	801a      	strh	r2, [r3, #0]
 801ccea:	183b      	adds	r3, r7, r0
 801ccec:	183a      	adds	r2, r7, r0
 801ccee:	8812      	ldrh	r2, [r2, #0]
 801ccf0:	2180      	movs	r1, #128	@ 0x80
 801ccf2:	0149      	lsls	r1, r1, #5
 801ccf4:	404a      	eors	r2, r1
 801ccf6:	801a      	strh	r2, [r3, #0]
 801ccf8:	183b      	adds	r3, r7, r0
 801ccfa:	183a      	adds	r2, r7, r0
 801ccfc:	8812      	ldrh	r2, [r2, #0]
 801ccfe:	2180      	movs	r1, #128	@ 0x80
 801cd00:	0189      	lsls	r1, r1, #6
 801cd02:	404a      	eors	r2, r1
 801cd04:	801a      	strh	r2, [r3, #0]
 801cd06:	687a      	ldr	r2, [r7, #4]
 801cd08:	683b      	ldr	r3, [r7, #0]
 801cd0a:	781b      	ldrb	r3, [r3, #0]
 801cd0c:	009b      	lsls	r3, r3, #2
 801cd0e:	18d3      	adds	r3, r2, r3
 801cd10:	183a      	adds	r2, r7, r0
 801cd12:	8812      	ldrh	r2, [r2, #0]
 801cd14:	49c6      	ldr	r1, [pc, #792]	@ (801d030 <USB_ActivateEndpoint+0x6b4>)
 801cd16:	430a      	orrs	r2, r1
 801cd18:	b292      	uxth	r2, r2
 801cd1a:	801a      	strh	r2, [r3, #0]
 801cd1c:	e1c2      	b.n	801d0a4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801cd1e:	687a      	ldr	r2, [r7, #4]
 801cd20:	683b      	ldr	r3, [r7, #0]
 801cd22:	781b      	ldrb	r3, [r3, #0]
 801cd24:	009b      	lsls	r3, r3, #2
 801cd26:	18d3      	adds	r3, r2, r3
 801cd28:	881b      	ldrh	r3, [r3, #0]
 801cd2a:	b29a      	uxth	r2, r3
 801cd2c:	201e      	movs	r0, #30
 801cd2e:	183b      	adds	r3, r7, r0
 801cd30:	49be      	ldr	r1, [pc, #760]	@ (801d02c <USB_ActivateEndpoint+0x6b0>)
 801cd32:	400a      	ands	r2, r1
 801cd34:	801a      	strh	r2, [r3, #0]
 801cd36:	183b      	adds	r3, r7, r0
 801cd38:	183a      	adds	r2, r7, r0
 801cd3a:	8812      	ldrh	r2, [r2, #0]
 801cd3c:	2180      	movs	r1, #128	@ 0x80
 801cd3e:	0189      	lsls	r1, r1, #6
 801cd40:	404a      	eors	r2, r1
 801cd42:	801a      	strh	r2, [r3, #0]
 801cd44:	687a      	ldr	r2, [r7, #4]
 801cd46:	683b      	ldr	r3, [r7, #0]
 801cd48:	781b      	ldrb	r3, [r3, #0]
 801cd4a:	009b      	lsls	r3, r3, #2
 801cd4c:	18d3      	adds	r3, r2, r3
 801cd4e:	183a      	adds	r2, r7, r0
 801cd50:	8812      	ldrh	r2, [r2, #0]
 801cd52:	49b7      	ldr	r1, [pc, #732]	@ (801d030 <USB_ActivateEndpoint+0x6b4>)
 801cd54:	430a      	orrs	r2, r1
 801cd56:	b292      	uxth	r2, r2
 801cd58:	801a      	strh	r2, [r3, #0]
 801cd5a:	e1a3      	b.n	801d0a4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801cd5c:	683b      	ldr	r3, [r7, #0]
 801cd5e:	78db      	ldrb	r3, [r3, #3]
 801cd60:	2b02      	cmp	r3, #2
 801cd62:	d117      	bne.n	801cd94 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801cd64:	687a      	ldr	r2, [r7, #4]
 801cd66:	683b      	ldr	r3, [r7, #0]
 801cd68:	781b      	ldrb	r3, [r3, #0]
 801cd6a:	009b      	lsls	r3, r3, #2
 801cd6c:	18d3      	adds	r3, r2, r3
 801cd6e:	881b      	ldrh	r3, [r3, #0]
 801cd70:	b29a      	uxth	r2, r3
 801cd72:	2062      	movs	r0, #98	@ 0x62
 801cd74:	183b      	adds	r3, r7, r0
 801cd76:	49ab      	ldr	r1, [pc, #684]	@ (801d024 <USB_ActivateEndpoint+0x6a8>)
 801cd78:	400a      	ands	r2, r1
 801cd7a:	801a      	strh	r2, [r3, #0]
 801cd7c:	687a      	ldr	r2, [r7, #4]
 801cd7e:	683b      	ldr	r3, [r7, #0]
 801cd80:	781b      	ldrb	r3, [r3, #0]
 801cd82:	009b      	lsls	r3, r3, #2
 801cd84:	18d3      	adds	r3, r2, r3
 801cd86:	183a      	adds	r2, r7, r0
 801cd88:	8812      	ldrh	r2, [r2, #0]
 801cd8a:	49aa      	ldr	r1, [pc, #680]	@ (801d034 <USB_ActivateEndpoint+0x6b8>)
 801cd8c:	430a      	orrs	r2, r1
 801cd8e:	b292      	uxth	r2, r2
 801cd90:	801a      	strh	r2, [r3, #0]
 801cd92:	e016      	b.n	801cdc2 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801cd94:	687a      	ldr	r2, [r7, #4]
 801cd96:	683b      	ldr	r3, [r7, #0]
 801cd98:	781b      	ldrb	r3, [r3, #0]
 801cd9a:	009b      	lsls	r3, r3, #2
 801cd9c:	18d3      	adds	r3, r2, r3
 801cd9e:	881b      	ldrh	r3, [r3, #0]
 801cda0:	b29a      	uxth	r2, r3
 801cda2:	2064      	movs	r0, #100	@ 0x64
 801cda4:	183b      	adds	r3, r7, r0
 801cda6:	49a4      	ldr	r1, [pc, #656]	@ (801d038 <USB_ActivateEndpoint+0x6bc>)
 801cda8:	400a      	ands	r2, r1
 801cdaa:	801a      	strh	r2, [r3, #0]
 801cdac:	687a      	ldr	r2, [r7, #4]
 801cdae:	683b      	ldr	r3, [r7, #0]
 801cdb0:	781b      	ldrb	r3, [r3, #0]
 801cdb2:	009b      	lsls	r3, r3, #2
 801cdb4:	18d3      	adds	r3, r2, r3
 801cdb6:	183a      	adds	r2, r7, r0
 801cdb8:	8812      	ldrh	r2, [r2, #0]
 801cdba:	499d      	ldr	r1, [pc, #628]	@ (801d030 <USB_ActivateEndpoint+0x6b4>)
 801cdbc:	430a      	orrs	r2, r1
 801cdbe:	b292      	uxth	r2, r2
 801cdc0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	2250      	movs	r2, #80	@ 0x50
 801cdca:	5a9b      	ldrh	r3, [r3, r2]
 801cdcc:	b29b      	uxth	r3, r3
 801cdce:	001a      	movs	r2, r3
 801cdd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cdd2:	189b      	adds	r3, r3, r2
 801cdd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801cdd6:	683b      	ldr	r3, [r7, #0]
 801cdd8:	781b      	ldrb	r3, [r3, #0]
 801cdda:	00da      	lsls	r2, r3, #3
 801cddc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cdde:	18d3      	adds	r3, r2, r3
 801cde0:	2280      	movs	r2, #128	@ 0x80
 801cde2:	00d2      	lsls	r2, r2, #3
 801cde4:	4694      	mov	ip, r2
 801cde6:	4463      	add	r3, ip
 801cde8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801cdea:	683b      	ldr	r3, [r7, #0]
 801cdec:	891b      	ldrh	r3, [r3, #8]
 801cdee:	085b      	lsrs	r3, r3, #1
 801cdf0:	b29b      	uxth	r3, r3
 801cdf2:	18db      	adds	r3, r3, r3
 801cdf4:	b29a      	uxth	r2, r3
 801cdf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cdf8:	801a      	strh	r2, [r3, #0]
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	657b      	str	r3, [r7, #84]	@ 0x54
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	2250      	movs	r2, #80	@ 0x50
 801ce02:	5a9b      	ldrh	r3, [r3, r2]
 801ce04:	b29b      	uxth	r3, r3
 801ce06:	001a      	movs	r2, r3
 801ce08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ce0a:	189b      	adds	r3, r3, r2
 801ce0c:	657b      	str	r3, [r7, #84]	@ 0x54
 801ce0e:	683b      	ldr	r3, [r7, #0]
 801ce10:	781b      	ldrb	r3, [r3, #0]
 801ce12:	00da      	lsls	r2, r3, #3
 801ce14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ce16:	18d3      	adds	r3, r2, r3
 801ce18:	4a88      	ldr	r2, [pc, #544]	@ (801d03c <USB_ActivateEndpoint+0x6c0>)
 801ce1a:	4694      	mov	ip, r2
 801ce1c:	4463      	add	r3, ip
 801ce1e:	653b      	str	r3, [r7, #80]	@ 0x50
 801ce20:	683b      	ldr	r3, [r7, #0]
 801ce22:	895b      	ldrh	r3, [r3, #10]
 801ce24:	085b      	lsrs	r3, r3, #1
 801ce26:	b29b      	uxth	r3, r3
 801ce28:	18db      	adds	r3, r3, r3
 801ce2a:	b29a      	uxth	r2, r3
 801ce2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ce2e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801ce30:	683b      	ldr	r3, [r7, #0]
 801ce32:	785b      	ldrb	r3, [r3, #1]
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	d000      	beq.n	801ce3a <USB_ActivateEndpoint+0x4be>
 801ce38:	e087      	b.n	801cf4a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ce3a:	687a      	ldr	r2, [r7, #4]
 801ce3c:	683b      	ldr	r3, [r7, #0]
 801ce3e:	781b      	ldrb	r3, [r3, #0]
 801ce40:	009b      	lsls	r3, r3, #2
 801ce42:	18d2      	adds	r2, r2, r3
 801ce44:	2140      	movs	r1, #64	@ 0x40
 801ce46:	187b      	adds	r3, r7, r1
 801ce48:	8812      	ldrh	r2, [r2, #0]
 801ce4a:	801a      	strh	r2, [r3, #0]
 801ce4c:	187b      	adds	r3, r7, r1
 801ce4e:	881a      	ldrh	r2, [r3, #0]
 801ce50:	2380      	movs	r3, #128	@ 0x80
 801ce52:	01db      	lsls	r3, r3, #7
 801ce54:	4013      	ands	r3, r2
 801ce56:	d016      	beq.n	801ce86 <USB_ActivateEndpoint+0x50a>
 801ce58:	687a      	ldr	r2, [r7, #4]
 801ce5a:	683b      	ldr	r3, [r7, #0]
 801ce5c:	781b      	ldrb	r3, [r3, #0]
 801ce5e:	009b      	lsls	r3, r3, #2
 801ce60:	18d3      	adds	r3, r2, r3
 801ce62:	881b      	ldrh	r3, [r3, #0]
 801ce64:	b29a      	uxth	r2, r3
 801ce66:	203e      	movs	r0, #62	@ 0x3e
 801ce68:	183b      	adds	r3, r7, r0
 801ce6a:	496e      	ldr	r1, [pc, #440]	@ (801d024 <USB_ActivateEndpoint+0x6a8>)
 801ce6c:	400a      	ands	r2, r1
 801ce6e:	801a      	strh	r2, [r3, #0]
 801ce70:	687a      	ldr	r2, [r7, #4]
 801ce72:	683b      	ldr	r3, [r7, #0]
 801ce74:	781b      	ldrb	r3, [r3, #0]
 801ce76:	009b      	lsls	r3, r3, #2
 801ce78:	18d3      	adds	r3, r2, r3
 801ce7a:	183a      	adds	r2, r7, r0
 801ce7c:	8812      	ldrh	r2, [r2, #0]
 801ce7e:	496a      	ldr	r1, [pc, #424]	@ (801d028 <USB_ActivateEndpoint+0x6ac>)
 801ce80:	430a      	orrs	r2, r1
 801ce82:	b292      	uxth	r2, r2
 801ce84:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ce86:	687a      	ldr	r2, [r7, #4]
 801ce88:	683b      	ldr	r3, [r7, #0]
 801ce8a:	781b      	ldrb	r3, [r3, #0]
 801ce8c:	009b      	lsls	r3, r3, #2
 801ce8e:	18d2      	adds	r2, r2, r3
 801ce90:	213c      	movs	r1, #60	@ 0x3c
 801ce92:	187b      	adds	r3, r7, r1
 801ce94:	8812      	ldrh	r2, [r2, #0]
 801ce96:	801a      	strh	r2, [r3, #0]
 801ce98:	187b      	adds	r3, r7, r1
 801ce9a:	881b      	ldrh	r3, [r3, #0]
 801ce9c:	2240      	movs	r2, #64	@ 0x40
 801ce9e:	4013      	ands	r3, r2
 801cea0:	d016      	beq.n	801ced0 <USB_ActivateEndpoint+0x554>
 801cea2:	687a      	ldr	r2, [r7, #4]
 801cea4:	683b      	ldr	r3, [r7, #0]
 801cea6:	781b      	ldrb	r3, [r3, #0]
 801cea8:	009b      	lsls	r3, r3, #2
 801ceaa:	18d3      	adds	r3, r2, r3
 801ceac:	881b      	ldrh	r3, [r3, #0]
 801ceae:	b29a      	uxth	r2, r3
 801ceb0:	203a      	movs	r0, #58	@ 0x3a
 801ceb2:	183b      	adds	r3, r7, r0
 801ceb4:	495b      	ldr	r1, [pc, #364]	@ (801d024 <USB_ActivateEndpoint+0x6a8>)
 801ceb6:	400a      	ands	r2, r1
 801ceb8:	801a      	strh	r2, [r3, #0]
 801ceba:	687a      	ldr	r2, [r7, #4]
 801cebc:	683b      	ldr	r3, [r7, #0]
 801cebe:	781b      	ldrb	r3, [r3, #0]
 801cec0:	009b      	lsls	r3, r3, #2
 801cec2:	18d3      	adds	r3, r2, r3
 801cec4:	183a      	adds	r2, r7, r0
 801cec6:	8812      	ldrh	r2, [r2, #0]
 801cec8:	495d      	ldr	r1, [pc, #372]	@ (801d040 <USB_ActivateEndpoint+0x6c4>)
 801ceca:	430a      	orrs	r2, r1
 801cecc:	b292      	uxth	r2, r2
 801cece:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ced0:	687a      	ldr	r2, [r7, #4]
 801ced2:	683b      	ldr	r3, [r7, #0]
 801ced4:	781b      	ldrb	r3, [r3, #0]
 801ced6:	009b      	lsls	r3, r3, #2
 801ced8:	18d3      	adds	r3, r2, r3
 801ceda:	881b      	ldrh	r3, [r3, #0]
 801cedc:	b29a      	uxth	r2, r3
 801cede:	2038      	movs	r0, #56	@ 0x38
 801cee0:	183b      	adds	r3, r7, r0
 801cee2:	4952      	ldr	r1, [pc, #328]	@ (801d02c <USB_ActivateEndpoint+0x6b0>)
 801cee4:	400a      	ands	r2, r1
 801cee6:	801a      	strh	r2, [r3, #0]
 801cee8:	183b      	adds	r3, r7, r0
 801ceea:	183a      	adds	r2, r7, r0
 801ceec:	8812      	ldrh	r2, [r2, #0]
 801ceee:	2180      	movs	r1, #128	@ 0x80
 801cef0:	0149      	lsls	r1, r1, #5
 801cef2:	404a      	eors	r2, r1
 801cef4:	801a      	strh	r2, [r3, #0]
 801cef6:	183b      	adds	r3, r7, r0
 801cef8:	183a      	adds	r2, r7, r0
 801cefa:	8812      	ldrh	r2, [r2, #0]
 801cefc:	2180      	movs	r1, #128	@ 0x80
 801cefe:	0189      	lsls	r1, r1, #6
 801cf00:	404a      	eors	r2, r1
 801cf02:	801a      	strh	r2, [r3, #0]
 801cf04:	687a      	ldr	r2, [r7, #4]
 801cf06:	683b      	ldr	r3, [r7, #0]
 801cf08:	781b      	ldrb	r3, [r3, #0]
 801cf0a:	009b      	lsls	r3, r3, #2
 801cf0c:	18d3      	adds	r3, r2, r3
 801cf0e:	183a      	adds	r2, r7, r0
 801cf10:	8812      	ldrh	r2, [r2, #0]
 801cf12:	4947      	ldr	r1, [pc, #284]	@ (801d030 <USB_ActivateEndpoint+0x6b4>)
 801cf14:	430a      	orrs	r2, r1
 801cf16:	b292      	uxth	r2, r2
 801cf18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801cf1a:	687a      	ldr	r2, [r7, #4]
 801cf1c:	683b      	ldr	r3, [r7, #0]
 801cf1e:	781b      	ldrb	r3, [r3, #0]
 801cf20:	009b      	lsls	r3, r3, #2
 801cf22:	18d3      	adds	r3, r2, r3
 801cf24:	881b      	ldrh	r3, [r3, #0]
 801cf26:	b29a      	uxth	r2, r3
 801cf28:	2036      	movs	r0, #54	@ 0x36
 801cf2a:	183b      	adds	r3, r7, r0
 801cf2c:	4945      	ldr	r1, [pc, #276]	@ (801d044 <USB_ActivateEndpoint+0x6c8>)
 801cf2e:	400a      	ands	r2, r1
 801cf30:	801a      	strh	r2, [r3, #0]
 801cf32:	687a      	ldr	r2, [r7, #4]
 801cf34:	683b      	ldr	r3, [r7, #0]
 801cf36:	781b      	ldrb	r3, [r3, #0]
 801cf38:	009b      	lsls	r3, r3, #2
 801cf3a:	18d3      	adds	r3, r2, r3
 801cf3c:	183a      	adds	r2, r7, r0
 801cf3e:	8812      	ldrh	r2, [r2, #0]
 801cf40:	493b      	ldr	r1, [pc, #236]	@ (801d030 <USB_ActivateEndpoint+0x6b4>)
 801cf42:	430a      	orrs	r2, r1
 801cf44:	b292      	uxth	r2, r2
 801cf46:	801a      	strh	r2, [r3, #0]
 801cf48:	e0ac      	b.n	801d0a4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801cf4a:	687a      	ldr	r2, [r7, #4]
 801cf4c:	683b      	ldr	r3, [r7, #0]
 801cf4e:	781b      	ldrb	r3, [r3, #0]
 801cf50:	009b      	lsls	r3, r3, #2
 801cf52:	18d2      	adds	r2, r2, r3
 801cf54:	214e      	movs	r1, #78	@ 0x4e
 801cf56:	187b      	adds	r3, r7, r1
 801cf58:	8812      	ldrh	r2, [r2, #0]
 801cf5a:	801a      	strh	r2, [r3, #0]
 801cf5c:	187b      	adds	r3, r7, r1
 801cf5e:	881a      	ldrh	r2, [r3, #0]
 801cf60:	2380      	movs	r3, #128	@ 0x80
 801cf62:	01db      	lsls	r3, r3, #7
 801cf64:	4013      	ands	r3, r2
 801cf66:	d016      	beq.n	801cf96 <USB_ActivateEndpoint+0x61a>
 801cf68:	687a      	ldr	r2, [r7, #4]
 801cf6a:	683b      	ldr	r3, [r7, #0]
 801cf6c:	781b      	ldrb	r3, [r3, #0]
 801cf6e:	009b      	lsls	r3, r3, #2
 801cf70:	18d3      	adds	r3, r2, r3
 801cf72:	881b      	ldrh	r3, [r3, #0]
 801cf74:	b29a      	uxth	r2, r3
 801cf76:	204c      	movs	r0, #76	@ 0x4c
 801cf78:	183b      	adds	r3, r7, r0
 801cf7a:	492a      	ldr	r1, [pc, #168]	@ (801d024 <USB_ActivateEndpoint+0x6a8>)
 801cf7c:	400a      	ands	r2, r1
 801cf7e:	801a      	strh	r2, [r3, #0]
 801cf80:	687a      	ldr	r2, [r7, #4]
 801cf82:	683b      	ldr	r3, [r7, #0]
 801cf84:	781b      	ldrb	r3, [r3, #0]
 801cf86:	009b      	lsls	r3, r3, #2
 801cf88:	18d3      	adds	r3, r2, r3
 801cf8a:	183a      	adds	r2, r7, r0
 801cf8c:	8812      	ldrh	r2, [r2, #0]
 801cf8e:	4926      	ldr	r1, [pc, #152]	@ (801d028 <USB_ActivateEndpoint+0x6ac>)
 801cf90:	430a      	orrs	r2, r1
 801cf92:	b292      	uxth	r2, r2
 801cf94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801cf96:	687a      	ldr	r2, [r7, #4]
 801cf98:	683b      	ldr	r3, [r7, #0]
 801cf9a:	781b      	ldrb	r3, [r3, #0]
 801cf9c:	009b      	lsls	r3, r3, #2
 801cf9e:	18d2      	adds	r2, r2, r3
 801cfa0:	214a      	movs	r1, #74	@ 0x4a
 801cfa2:	187b      	adds	r3, r7, r1
 801cfa4:	8812      	ldrh	r2, [r2, #0]
 801cfa6:	801a      	strh	r2, [r3, #0]
 801cfa8:	187b      	adds	r3, r7, r1
 801cfaa:	881b      	ldrh	r3, [r3, #0]
 801cfac:	2240      	movs	r2, #64	@ 0x40
 801cfae:	4013      	ands	r3, r2
 801cfb0:	d016      	beq.n	801cfe0 <USB_ActivateEndpoint+0x664>
 801cfb2:	687a      	ldr	r2, [r7, #4]
 801cfb4:	683b      	ldr	r3, [r7, #0]
 801cfb6:	781b      	ldrb	r3, [r3, #0]
 801cfb8:	009b      	lsls	r3, r3, #2
 801cfba:	18d3      	adds	r3, r2, r3
 801cfbc:	881b      	ldrh	r3, [r3, #0]
 801cfbe:	b29a      	uxth	r2, r3
 801cfc0:	2048      	movs	r0, #72	@ 0x48
 801cfc2:	183b      	adds	r3, r7, r0
 801cfc4:	4917      	ldr	r1, [pc, #92]	@ (801d024 <USB_ActivateEndpoint+0x6a8>)
 801cfc6:	400a      	ands	r2, r1
 801cfc8:	801a      	strh	r2, [r3, #0]
 801cfca:	687a      	ldr	r2, [r7, #4]
 801cfcc:	683b      	ldr	r3, [r7, #0]
 801cfce:	781b      	ldrb	r3, [r3, #0]
 801cfd0:	009b      	lsls	r3, r3, #2
 801cfd2:	18d3      	adds	r3, r2, r3
 801cfd4:	183a      	adds	r2, r7, r0
 801cfd6:	8812      	ldrh	r2, [r2, #0]
 801cfd8:	4919      	ldr	r1, [pc, #100]	@ (801d040 <USB_ActivateEndpoint+0x6c4>)
 801cfda:	430a      	orrs	r2, r1
 801cfdc:	b292      	uxth	r2, r2
 801cfde:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801cfe0:	683b      	ldr	r3, [r7, #0]
 801cfe2:	78db      	ldrb	r3, [r3, #3]
 801cfe4:	2b01      	cmp	r3, #1
 801cfe6:	d02f      	beq.n	801d048 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801cfe8:	687a      	ldr	r2, [r7, #4]
 801cfea:	683b      	ldr	r3, [r7, #0]
 801cfec:	781b      	ldrb	r3, [r3, #0]
 801cfee:	009b      	lsls	r3, r3, #2
 801cff0:	18d3      	adds	r3, r2, r3
 801cff2:	881b      	ldrh	r3, [r3, #0]
 801cff4:	b29a      	uxth	r2, r3
 801cff6:	2044      	movs	r0, #68	@ 0x44
 801cff8:	183b      	adds	r3, r7, r0
 801cffa:	4912      	ldr	r1, [pc, #72]	@ (801d044 <USB_ActivateEndpoint+0x6c8>)
 801cffc:	400a      	ands	r2, r1
 801cffe:	801a      	strh	r2, [r3, #0]
 801d000:	183b      	adds	r3, r7, r0
 801d002:	183a      	adds	r2, r7, r0
 801d004:	8812      	ldrh	r2, [r2, #0]
 801d006:	2120      	movs	r1, #32
 801d008:	404a      	eors	r2, r1
 801d00a:	801a      	strh	r2, [r3, #0]
 801d00c:	687a      	ldr	r2, [r7, #4]
 801d00e:	683b      	ldr	r3, [r7, #0]
 801d010:	781b      	ldrb	r3, [r3, #0]
 801d012:	009b      	lsls	r3, r3, #2
 801d014:	18d3      	adds	r3, r2, r3
 801d016:	183a      	adds	r2, r7, r0
 801d018:	8812      	ldrh	r2, [r2, #0]
 801d01a:	4905      	ldr	r1, [pc, #20]	@ (801d030 <USB_ActivateEndpoint+0x6b4>)
 801d01c:	430a      	orrs	r2, r1
 801d01e:	b292      	uxth	r2, r2
 801d020:	801a      	strh	r2, [r3, #0]
 801d022:	e028      	b.n	801d076 <USB_ActivateEndpoint+0x6fa>
 801d024:	ffff8f8f 	.word	0xffff8f8f
 801d028:	ffffc080 	.word	0xffffc080
 801d02c:	ffffbf8f 	.word	0xffffbf8f
 801d030:	ffff8080 	.word	0xffff8080
 801d034:	ffff8180 	.word	0xffff8180
 801d038:	ffff8e8f 	.word	0xffff8e8f
 801d03c:	00000404 	.word	0x00000404
 801d040:	ffff80c0 	.word	0xffff80c0
 801d044:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801d048:	687a      	ldr	r2, [r7, #4]
 801d04a:	683b      	ldr	r3, [r7, #0]
 801d04c:	781b      	ldrb	r3, [r3, #0]
 801d04e:	009b      	lsls	r3, r3, #2
 801d050:	18d3      	adds	r3, r2, r3
 801d052:	881b      	ldrh	r3, [r3, #0]
 801d054:	b29a      	uxth	r2, r3
 801d056:	2046      	movs	r0, #70	@ 0x46
 801d058:	183b      	adds	r3, r7, r0
 801d05a:	4916      	ldr	r1, [pc, #88]	@ (801d0b4 <USB_ActivateEndpoint+0x738>)
 801d05c:	400a      	ands	r2, r1
 801d05e:	801a      	strh	r2, [r3, #0]
 801d060:	687a      	ldr	r2, [r7, #4]
 801d062:	683b      	ldr	r3, [r7, #0]
 801d064:	781b      	ldrb	r3, [r3, #0]
 801d066:	009b      	lsls	r3, r3, #2
 801d068:	18d3      	adds	r3, r2, r3
 801d06a:	183a      	adds	r2, r7, r0
 801d06c:	8812      	ldrh	r2, [r2, #0]
 801d06e:	4912      	ldr	r1, [pc, #72]	@ (801d0b8 <USB_ActivateEndpoint+0x73c>)
 801d070:	430a      	orrs	r2, r1
 801d072:	b292      	uxth	r2, r2
 801d074:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801d076:	687a      	ldr	r2, [r7, #4]
 801d078:	683b      	ldr	r3, [r7, #0]
 801d07a:	781b      	ldrb	r3, [r3, #0]
 801d07c:	009b      	lsls	r3, r3, #2
 801d07e:	18d3      	adds	r3, r2, r3
 801d080:	881b      	ldrh	r3, [r3, #0]
 801d082:	b29a      	uxth	r2, r3
 801d084:	2042      	movs	r0, #66	@ 0x42
 801d086:	183b      	adds	r3, r7, r0
 801d088:	490c      	ldr	r1, [pc, #48]	@ (801d0bc <USB_ActivateEndpoint+0x740>)
 801d08a:	400a      	ands	r2, r1
 801d08c:	801a      	strh	r2, [r3, #0]
 801d08e:	687a      	ldr	r2, [r7, #4]
 801d090:	683b      	ldr	r3, [r7, #0]
 801d092:	781b      	ldrb	r3, [r3, #0]
 801d094:	009b      	lsls	r3, r3, #2
 801d096:	18d3      	adds	r3, r2, r3
 801d098:	183a      	adds	r2, r7, r0
 801d09a:	8812      	ldrh	r2, [r2, #0]
 801d09c:	4906      	ldr	r1, [pc, #24]	@ (801d0b8 <USB_ActivateEndpoint+0x73c>)
 801d09e:	430a      	orrs	r2, r1
 801d0a0:	b292      	uxth	r2, r2
 801d0a2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801d0a4:	236f      	movs	r3, #111	@ 0x6f
 801d0a6:	18fb      	adds	r3, r7, r3
 801d0a8:	781b      	ldrb	r3, [r3, #0]
}
 801d0aa:	0018      	movs	r0, r3
 801d0ac:	46bd      	mov	sp, r7
 801d0ae:	b01c      	add	sp, #112	@ 0x70
 801d0b0:	bd80      	pop	{r7, pc}
 801d0b2:	46c0      	nop			@ (mov r8, r8)
 801d0b4:	ffff8fbf 	.word	0xffff8fbf
 801d0b8:	ffff8080 	.word	0xffff8080
 801d0bc:	ffffbf8f 	.word	0xffffbf8f

0801d0c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d0c0:	b580      	push	{r7, lr}
 801d0c2:	b08c      	sub	sp, #48	@ 0x30
 801d0c4:	af00      	add	r7, sp, #0
 801d0c6:	6078      	str	r0, [r7, #4]
 801d0c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801d0ca:	683b      	ldr	r3, [r7, #0]
 801d0cc:	7b1b      	ldrb	r3, [r3, #12]
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	d000      	beq.n	801d0d4 <USB_DeactivateEndpoint+0x14>
 801d0d2:	e07e      	b.n	801d1d2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801d0d4:	683b      	ldr	r3, [r7, #0]
 801d0d6:	785b      	ldrb	r3, [r3, #1]
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	d03c      	beq.n	801d156 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d0dc:	687a      	ldr	r2, [r7, #4]
 801d0de:	683b      	ldr	r3, [r7, #0]
 801d0e0:	781b      	ldrb	r3, [r3, #0]
 801d0e2:	009b      	lsls	r3, r3, #2
 801d0e4:	18d2      	adds	r2, r2, r3
 801d0e6:	210c      	movs	r1, #12
 801d0e8:	187b      	adds	r3, r7, r1
 801d0ea:	8812      	ldrh	r2, [r2, #0]
 801d0ec:	801a      	strh	r2, [r3, #0]
 801d0ee:	187b      	adds	r3, r7, r1
 801d0f0:	881b      	ldrh	r3, [r3, #0]
 801d0f2:	2240      	movs	r2, #64	@ 0x40
 801d0f4:	4013      	ands	r3, r2
 801d0f6:	d016      	beq.n	801d126 <USB_DeactivateEndpoint+0x66>
 801d0f8:	687a      	ldr	r2, [r7, #4]
 801d0fa:	683b      	ldr	r3, [r7, #0]
 801d0fc:	781b      	ldrb	r3, [r3, #0]
 801d0fe:	009b      	lsls	r3, r3, #2
 801d100:	18d3      	adds	r3, r2, r3
 801d102:	881b      	ldrh	r3, [r3, #0]
 801d104:	b29a      	uxth	r2, r3
 801d106:	200a      	movs	r0, #10
 801d108:	183b      	adds	r3, r7, r0
 801d10a:	49c7      	ldr	r1, [pc, #796]	@ (801d428 <USB_DeactivateEndpoint+0x368>)
 801d10c:	400a      	ands	r2, r1
 801d10e:	801a      	strh	r2, [r3, #0]
 801d110:	687a      	ldr	r2, [r7, #4]
 801d112:	683b      	ldr	r3, [r7, #0]
 801d114:	781b      	ldrb	r3, [r3, #0]
 801d116:	009b      	lsls	r3, r3, #2
 801d118:	18d3      	adds	r3, r2, r3
 801d11a:	183a      	adds	r2, r7, r0
 801d11c:	8812      	ldrh	r2, [r2, #0]
 801d11e:	49c3      	ldr	r1, [pc, #780]	@ (801d42c <USB_DeactivateEndpoint+0x36c>)
 801d120:	430a      	orrs	r2, r1
 801d122:	b292      	uxth	r2, r2
 801d124:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801d126:	687a      	ldr	r2, [r7, #4]
 801d128:	683b      	ldr	r3, [r7, #0]
 801d12a:	781b      	ldrb	r3, [r3, #0]
 801d12c:	009b      	lsls	r3, r3, #2
 801d12e:	18d3      	adds	r3, r2, r3
 801d130:	881b      	ldrh	r3, [r3, #0]
 801d132:	b29a      	uxth	r2, r3
 801d134:	2008      	movs	r0, #8
 801d136:	183b      	adds	r3, r7, r0
 801d138:	49bd      	ldr	r1, [pc, #756]	@ (801d430 <USB_DeactivateEndpoint+0x370>)
 801d13a:	400a      	ands	r2, r1
 801d13c:	801a      	strh	r2, [r3, #0]
 801d13e:	687a      	ldr	r2, [r7, #4]
 801d140:	683b      	ldr	r3, [r7, #0]
 801d142:	781b      	ldrb	r3, [r3, #0]
 801d144:	009b      	lsls	r3, r3, #2
 801d146:	18d3      	adds	r3, r2, r3
 801d148:	183a      	adds	r2, r7, r0
 801d14a:	8812      	ldrh	r2, [r2, #0]
 801d14c:	49b9      	ldr	r1, [pc, #740]	@ (801d434 <USB_DeactivateEndpoint+0x374>)
 801d14e:	430a      	orrs	r2, r1
 801d150:	b292      	uxth	r2, r2
 801d152:	801a      	strh	r2, [r3, #0]
 801d154:	e163      	b.n	801d41e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d156:	687a      	ldr	r2, [r7, #4]
 801d158:	683b      	ldr	r3, [r7, #0]
 801d15a:	781b      	ldrb	r3, [r3, #0]
 801d15c:	009b      	lsls	r3, r3, #2
 801d15e:	18d2      	adds	r2, r2, r3
 801d160:	2112      	movs	r1, #18
 801d162:	187b      	adds	r3, r7, r1
 801d164:	8812      	ldrh	r2, [r2, #0]
 801d166:	801a      	strh	r2, [r3, #0]
 801d168:	187b      	adds	r3, r7, r1
 801d16a:	881a      	ldrh	r2, [r3, #0]
 801d16c:	2380      	movs	r3, #128	@ 0x80
 801d16e:	01db      	lsls	r3, r3, #7
 801d170:	4013      	ands	r3, r2
 801d172:	d016      	beq.n	801d1a2 <USB_DeactivateEndpoint+0xe2>
 801d174:	687a      	ldr	r2, [r7, #4]
 801d176:	683b      	ldr	r3, [r7, #0]
 801d178:	781b      	ldrb	r3, [r3, #0]
 801d17a:	009b      	lsls	r3, r3, #2
 801d17c:	18d3      	adds	r3, r2, r3
 801d17e:	881b      	ldrh	r3, [r3, #0]
 801d180:	b29a      	uxth	r2, r3
 801d182:	2010      	movs	r0, #16
 801d184:	183b      	adds	r3, r7, r0
 801d186:	49a8      	ldr	r1, [pc, #672]	@ (801d428 <USB_DeactivateEndpoint+0x368>)
 801d188:	400a      	ands	r2, r1
 801d18a:	801a      	strh	r2, [r3, #0]
 801d18c:	687a      	ldr	r2, [r7, #4]
 801d18e:	683b      	ldr	r3, [r7, #0]
 801d190:	781b      	ldrb	r3, [r3, #0]
 801d192:	009b      	lsls	r3, r3, #2
 801d194:	18d3      	adds	r3, r2, r3
 801d196:	183a      	adds	r2, r7, r0
 801d198:	8812      	ldrh	r2, [r2, #0]
 801d19a:	49a7      	ldr	r1, [pc, #668]	@ (801d438 <USB_DeactivateEndpoint+0x378>)
 801d19c:	430a      	orrs	r2, r1
 801d19e:	b292      	uxth	r2, r2
 801d1a0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801d1a2:	687a      	ldr	r2, [r7, #4]
 801d1a4:	683b      	ldr	r3, [r7, #0]
 801d1a6:	781b      	ldrb	r3, [r3, #0]
 801d1a8:	009b      	lsls	r3, r3, #2
 801d1aa:	18d3      	adds	r3, r2, r3
 801d1ac:	881b      	ldrh	r3, [r3, #0]
 801d1ae:	b29a      	uxth	r2, r3
 801d1b0:	200e      	movs	r0, #14
 801d1b2:	183b      	adds	r3, r7, r0
 801d1b4:	49a1      	ldr	r1, [pc, #644]	@ (801d43c <USB_DeactivateEndpoint+0x37c>)
 801d1b6:	400a      	ands	r2, r1
 801d1b8:	801a      	strh	r2, [r3, #0]
 801d1ba:	687a      	ldr	r2, [r7, #4]
 801d1bc:	683b      	ldr	r3, [r7, #0]
 801d1be:	781b      	ldrb	r3, [r3, #0]
 801d1c0:	009b      	lsls	r3, r3, #2
 801d1c2:	18d3      	adds	r3, r2, r3
 801d1c4:	183a      	adds	r2, r7, r0
 801d1c6:	8812      	ldrh	r2, [r2, #0]
 801d1c8:	499a      	ldr	r1, [pc, #616]	@ (801d434 <USB_DeactivateEndpoint+0x374>)
 801d1ca:	430a      	orrs	r2, r1
 801d1cc:	b292      	uxth	r2, r2
 801d1ce:	801a      	strh	r2, [r3, #0]
 801d1d0:	e125      	b.n	801d41e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801d1d2:	683b      	ldr	r3, [r7, #0]
 801d1d4:	785b      	ldrb	r3, [r3, #1]
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	d000      	beq.n	801d1dc <USB_DeactivateEndpoint+0x11c>
 801d1da:	e090      	b.n	801d2fe <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d1dc:	687a      	ldr	r2, [r7, #4]
 801d1de:	683b      	ldr	r3, [r7, #0]
 801d1e0:	781b      	ldrb	r3, [r3, #0]
 801d1e2:	009b      	lsls	r3, r3, #2
 801d1e4:	18d2      	adds	r2, r2, r3
 801d1e6:	2120      	movs	r1, #32
 801d1e8:	187b      	adds	r3, r7, r1
 801d1ea:	8812      	ldrh	r2, [r2, #0]
 801d1ec:	801a      	strh	r2, [r3, #0]
 801d1ee:	187b      	adds	r3, r7, r1
 801d1f0:	881a      	ldrh	r2, [r3, #0]
 801d1f2:	2380      	movs	r3, #128	@ 0x80
 801d1f4:	01db      	lsls	r3, r3, #7
 801d1f6:	4013      	ands	r3, r2
 801d1f8:	d016      	beq.n	801d228 <USB_DeactivateEndpoint+0x168>
 801d1fa:	687a      	ldr	r2, [r7, #4]
 801d1fc:	683b      	ldr	r3, [r7, #0]
 801d1fe:	781b      	ldrb	r3, [r3, #0]
 801d200:	009b      	lsls	r3, r3, #2
 801d202:	18d3      	adds	r3, r2, r3
 801d204:	881b      	ldrh	r3, [r3, #0]
 801d206:	b29a      	uxth	r2, r3
 801d208:	201e      	movs	r0, #30
 801d20a:	183b      	adds	r3, r7, r0
 801d20c:	4986      	ldr	r1, [pc, #536]	@ (801d428 <USB_DeactivateEndpoint+0x368>)
 801d20e:	400a      	ands	r2, r1
 801d210:	801a      	strh	r2, [r3, #0]
 801d212:	687a      	ldr	r2, [r7, #4]
 801d214:	683b      	ldr	r3, [r7, #0]
 801d216:	781b      	ldrb	r3, [r3, #0]
 801d218:	009b      	lsls	r3, r3, #2
 801d21a:	18d3      	adds	r3, r2, r3
 801d21c:	183a      	adds	r2, r7, r0
 801d21e:	8812      	ldrh	r2, [r2, #0]
 801d220:	4985      	ldr	r1, [pc, #532]	@ (801d438 <USB_DeactivateEndpoint+0x378>)
 801d222:	430a      	orrs	r2, r1
 801d224:	b292      	uxth	r2, r2
 801d226:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d228:	687a      	ldr	r2, [r7, #4]
 801d22a:	683b      	ldr	r3, [r7, #0]
 801d22c:	781b      	ldrb	r3, [r3, #0]
 801d22e:	009b      	lsls	r3, r3, #2
 801d230:	18d2      	adds	r2, r2, r3
 801d232:	211c      	movs	r1, #28
 801d234:	187b      	adds	r3, r7, r1
 801d236:	8812      	ldrh	r2, [r2, #0]
 801d238:	801a      	strh	r2, [r3, #0]
 801d23a:	187b      	adds	r3, r7, r1
 801d23c:	881b      	ldrh	r3, [r3, #0]
 801d23e:	2240      	movs	r2, #64	@ 0x40
 801d240:	4013      	ands	r3, r2
 801d242:	d016      	beq.n	801d272 <USB_DeactivateEndpoint+0x1b2>
 801d244:	687a      	ldr	r2, [r7, #4]
 801d246:	683b      	ldr	r3, [r7, #0]
 801d248:	781b      	ldrb	r3, [r3, #0]
 801d24a:	009b      	lsls	r3, r3, #2
 801d24c:	18d3      	adds	r3, r2, r3
 801d24e:	881b      	ldrh	r3, [r3, #0]
 801d250:	b29a      	uxth	r2, r3
 801d252:	201a      	movs	r0, #26
 801d254:	183b      	adds	r3, r7, r0
 801d256:	4974      	ldr	r1, [pc, #464]	@ (801d428 <USB_DeactivateEndpoint+0x368>)
 801d258:	400a      	ands	r2, r1
 801d25a:	801a      	strh	r2, [r3, #0]
 801d25c:	687a      	ldr	r2, [r7, #4]
 801d25e:	683b      	ldr	r3, [r7, #0]
 801d260:	781b      	ldrb	r3, [r3, #0]
 801d262:	009b      	lsls	r3, r3, #2
 801d264:	18d3      	adds	r3, r2, r3
 801d266:	183a      	adds	r2, r7, r0
 801d268:	8812      	ldrh	r2, [r2, #0]
 801d26a:	4970      	ldr	r1, [pc, #448]	@ (801d42c <USB_DeactivateEndpoint+0x36c>)
 801d26c:	430a      	orrs	r2, r1
 801d26e:	b292      	uxth	r2, r2
 801d270:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801d272:	687a      	ldr	r2, [r7, #4]
 801d274:	683b      	ldr	r3, [r7, #0]
 801d276:	781b      	ldrb	r3, [r3, #0]
 801d278:	009b      	lsls	r3, r3, #2
 801d27a:	18d3      	adds	r3, r2, r3
 801d27c:	881b      	ldrh	r3, [r3, #0]
 801d27e:	b29a      	uxth	r2, r3
 801d280:	2018      	movs	r0, #24
 801d282:	183b      	adds	r3, r7, r0
 801d284:	4968      	ldr	r1, [pc, #416]	@ (801d428 <USB_DeactivateEndpoint+0x368>)
 801d286:	400a      	ands	r2, r1
 801d288:	801a      	strh	r2, [r3, #0]
 801d28a:	687a      	ldr	r2, [r7, #4]
 801d28c:	683b      	ldr	r3, [r7, #0]
 801d28e:	781b      	ldrb	r3, [r3, #0]
 801d290:	009b      	lsls	r3, r3, #2
 801d292:	18d3      	adds	r3, r2, r3
 801d294:	183a      	adds	r2, r7, r0
 801d296:	8812      	ldrh	r2, [r2, #0]
 801d298:	4964      	ldr	r1, [pc, #400]	@ (801d42c <USB_DeactivateEndpoint+0x36c>)
 801d29a:	430a      	orrs	r2, r1
 801d29c:	b292      	uxth	r2, r2
 801d29e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801d2a0:	687a      	ldr	r2, [r7, #4]
 801d2a2:	683b      	ldr	r3, [r7, #0]
 801d2a4:	781b      	ldrb	r3, [r3, #0]
 801d2a6:	009b      	lsls	r3, r3, #2
 801d2a8:	18d3      	adds	r3, r2, r3
 801d2aa:	881b      	ldrh	r3, [r3, #0]
 801d2ac:	b29a      	uxth	r2, r3
 801d2ae:	2016      	movs	r0, #22
 801d2b0:	183b      	adds	r3, r7, r0
 801d2b2:	4962      	ldr	r1, [pc, #392]	@ (801d43c <USB_DeactivateEndpoint+0x37c>)
 801d2b4:	400a      	ands	r2, r1
 801d2b6:	801a      	strh	r2, [r3, #0]
 801d2b8:	687a      	ldr	r2, [r7, #4]
 801d2ba:	683b      	ldr	r3, [r7, #0]
 801d2bc:	781b      	ldrb	r3, [r3, #0]
 801d2be:	009b      	lsls	r3, r3, #2
 801d2c0:	18d3      	adds	r3, r2, r3
 801d2c2:	183a      	adds	r2, r7, r0
 801d2c4:	8812      	ldrh	r2, [r2, #0]
 801d2c6:	495b      	ldr	r1, [pc, #364]	@ (801d434 <USB_DeactivateEndpoint+0x374>)
 801d2c8:	430a      	orrs	r2, r1
 801d2ca:	b292      	uxth	r2, r2
 801d2cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801d2ce:	687a      	ldr	r2, [r7, #4]
 801d2d0:	683b      	ldr	r3, [r7, #0]
 801d2d2:	781b      	ldrb	r3, [r3, #0]
 801d2d4:	009b      	lsls	r3, r3, #2
 801d2d6:	18d3      	adds	r3, r2, r3
 801d2d8:	881b      	ldrh	r3, [r3, #0]
 801d2da:	b29a      	uxth	r2, r3
 801d2dc:	2014      	movs	r0, #20
 801d2de:	183b      	adds	r3, r7, r0
 801d2e0:	4953      	ldr	r1, [pc, #332]	@ (801d430 <USB_DeactivateEndpoint+0x370>)
 801d2e2:	400a      	ands	r2, r1
 801d2e4:	801a      	strh	r2, [r3, #0]
 801d2e6:	687a      	ldr	r2, [r7, #4]
 801d2e8:	683b      	ldr	r3, [r7, #0]
 801d2ea:	781b      	ldrb	r3, [r3, #0]
 801d2ec:	009b      	lsls	r3, r3, #2
 801d2ee:	18d3      	adds	r3, r2, r3
 801d2f0:	183a      	adds	r2, r7, r0
 801d2f2:	8812      	ldrh	r2, [r2, #0]
 801d2f4:	494f      	ldr	r1, [pc, #316]	@ (801d434 <USB_DeactivateEndpoint+0x374>)
 801d2f6:	430a      	orrs	r2, r1
 801d2f8:	b292      	uxth	r2, r2
 801d2fa:	801a      	strh	r2, [r3, #0]
 801d2fc:	e08f      	b.n	801d41e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801d2fe:	687a      	ldr	r2, [r7, #4]
 801d300:	683b      	ldr	r3, [r7, #0]
 801d302:	781b      	ldrb	r3, [r3, #0]
 801d304:	009b      	lsls	r3, r3, #2
 801d306:	18d2      	adds	r2, r2, r3
 801d308:	212e      	movs	r1, #46	@ 0x2e
 801d30a:	187b      	adds	r3, r7, r1
 801d30c:	8812      	ldrh	r2, [r2, #0]
 801d30e:	801a      	strh	r2, [r3, #0]
 801d310:	187b      	adds	r3, r7, r1
 801d312:	881a      	ldrh	r2, [r3, #0]
 801d314:	2380      	movs	r3, #128	@ 0x80
 801d316:	01db      	lsls	r3, r3, #7
 801d318:	4013      	ands	r3, r2
 801d31a:	d016      	beq.n	801d34a <USB_DeactivateEndpoint+0x28a>
 801d31c:	687a      	ldr	r2, [r7, #4]
 801d31e:	683b      	ldr	r3, [r7, #0]
 801d320:	781b      	ldrb	r3, [r3, #0]
 801d322:	009b      	lsls	r3, r3, #2
 801d324:	18d3      	adds	r3, r2, r3
 801d326:	881b      	ldrh	r3, [r3, #0]
 801d328:	b29a      	uxth	r2, r3
 801d32a:	202c      	movs	r0, #44	@ 0x2c
 801d32c:	183b      	adds	r3, r7, r0
 801d32e:	493e      	ldr	r1, [pc, #248]	@ (801d428 <USB_DeactivateEndpoint+0x368>)
 801d330:	400a      	ands	r2, r1
 801d332:	801a      	strh	r2, [r3, #0]
 801d334:	687a      	ldr	r2, [r7, #4]
 801d336:	683b      	ldr	r3, [r7, #0]
 801d338:	781b      	ldrb	r3, [r3, #0]
 801d33a:	009b      	lsls	r3, r3, #2
 801d33c:	18d3      	adds	r3, r2, r3
 801d33e:	183a      	adds	r2, r7, r0
 801d340:	8812      	ldrh	r2, [r2, #0]
 801d342:	493d      	ldr	r1, [pc, #244]	@ (801d438 <USB_DeactivateEndpoint+0x378>)
 801d344:	430a      	orrs	r2, r1
 801d346:	b292      	uxth	r2, r2
 801d348:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801d34a:	687a      	ldr	r2, [r7, #4]
 801d34c:	683b      	ldr	r3, [r7, #0]
 801d34e:	781b      	ldrb	r3, [r3, #0]
 801d350:	009b      	lsls	r3, r3, #2
 801d352:	18d2      	adds	r2, r2, r3
 801d354:	212a      	movs	r1, #42	@ 0x2a
 801d356:	187b      	adds	r3, r7, r1
 801d358:	8812      	ldrh	r2, [r2, #0]
 801d35a:	801a      	strh	r2, [r3, #0]
 801d35c:	187b      	adds	r3, r7, r1
 801d35e:	881b      	ldrh	r3, [r3, #0]
 801d360:	2240      	movs	r2, #64	@ 0x40
 801d362:	4013      	ands	r3, r2
 801d364:	d016      	beq.n	801d394 <USB_DeactivateEndpoint+0x2d4>
 801d366:	687a      	ldr	r2, [r7, #4]
 801d368:	683b      	ldr	r3, [r7, #0]
 801d36a:	781b      	ldrb	r3, [r3, #0]
 801d36c:	009b      	lsls	r3, r3, #2
 801d36e:	18d3      	adds	r3, r2, r3
 801d370:	881b      	ldrh	r3, [r3, #0]
 801d372:	b29a      	uxth	r2, r3
 801d374:	2028      	movs	r0, #40	@ 0x28
 801d376:	183b      	adds	r3, r7, r0
 801d378:	492b      	ldr	r1, [pc, #172]	@ (801d428 <USB_DeactivateEndpoint+0x368>)
 801d37a:	400a      	ands	r2, r1
 801d37c:	801a      	strh	r2, [r3, #0]
 801d37e:	687a      	ldr	r2, [r7, #4]
 801d380:	683b      	ldr	r3, [r7, #0]
 801d382:	781b      	ldrb	r3, [r3, #0]
 801d384:	009b      	lsls	r3, r3, #2
 801d386:	18d3      	adds	r3, r2, r3
 801d388:	183a      	adds	r2, r7, r0
 801d38a:	8812      	ldrh	r2, [r2, #0]
 801d38c:	4927      	ldr	r1, [pc, #156]	@ (801d42c <USB_DeactivateEndpoint+0x36c>)
 801d38e:	430a      	orrs	r2, r1
 801d390:	b292      	uxth	r2, r2
 801d392:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801d394:	687a      	ldr	r2, [r7, #4]
 801d396:	683b      	ldr	r3, [r7, #0]
 801d398:	781b      	ldrb	r3, [r3, #0]
 801d39a:	009b      	lsls	r3, r3, #2
 801d39c:	18d3      	adds	r3, r2, r3
 801d39e:	881b      	ldrh	r3, [r3, #0]
 801d3a0:	b29a      	uxth	r2, r3
 801d3a2:	2026      	movs	r0, #38	@ 0x26
 801d3a4:	183b      	adds	r3, r7, r0
 801d3a6:	4920      	ldr	r1, [pc, #128]	@ (801d428 <USB_DeactivateEndpoint+0x368>)
 801d3a8:	400a      	ands	r2, r1
 801d3aa:	801a      	strh	r2, [r3, #0]
 801d3ac:	687a      	ldr	r2, [r7, #4]
 801d3ae:	683b      	ldr	r3, [r7, #0]
 801d3b0:	781b      	ldrb	r3, [r3, #0]
 801d3b2:	009b      	lsls	r3, r3, #2
 801d3b4:	18d3      	adds	r3, r2, r3
 801d3b6:	183a      	adds	r2, r7, r0
 801d3b8:	8812      	ldrh	r2, [r2, #0]
 801d3ba:	491f      	ldr	r1, [pc, #124]	@ (801d438 <USB_DeactivateEndpoint+0x378>)
 801d3bc:	430a      	orrs	r2, r1
 801d3be:	b292      	uxth	r2, r2
 801d3c0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801d3c2:	687a      	ldr	r2, [r7, #4]
 801d3c4:	683b      	ldr	r3, [r7, #0]
 801d3c6:	781b      	ldrb	r3, [r3, #0]
 801d3c8:	009b      	lsls	r3, r3, #2
 801d3ca:	18d3      	adds	r3, r2, r3
 801d3cc:	881b      	ldrh	r3, [r3, #0]
 801d3ce:	b29a      	uxth	r2, r3
 801d3d0:	2024      	movs	r0, #36	@ 0x24
 801d3d2:	183b      	adds	r3, r7, r0
 801d3d4:	4916      	ldr	r1, [pc, #88]	@ (801d430 <USB_DeactivateEndpoint+0x370>)
 801d3d6:	400a      	ands	r2, r1
 801d3d8:	801a      	strh	r2, [r3, #0]
 801d3da:	687a      	ldr	r2, [r7, #4]
 801d3dc:	683b      	ldr	r3, [r7, #0]
 801d3de:	781b      	ldrb	r3, [r3, #0]
 801d3e0:	009b      	lsls	r3, r3, #2
 801d3e2:	18d3      	adds	r3, r2, r3
 801d3e4:	183a      	adds	r2, r7, r0
 801d3e6:	8812      	ldrh	r2, [r2, #0]
 801d3e8:	4912      	ldr	r1, [pc, #72]	@ (801d434 <USB_DeactivateEndpoint+0x374>)
 801d3ea:	430a      	orrs	r2, r1
 801d3ec:	b292      	uxth	r2, r2
 801d3ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801d3f0:	687a      	ldr	r2, [r7, #4]
 801d3f2:	683b      	ldr	r3, [r7, #0]
 801d3f4:	781b      	ldrb	r3, [r3, #0]
 801d3f6:	009b      	lsls	r3, r3, #2
 801d3f8:	18d3      	adds	r3, r2, r3
 801d3fa:	881b      	ldrh	r3, [r3, #0]
 801d3fc:	b29a      	uxth	r2, r3
 801d3fe:	2022      	movs	r0, #34	@ 0x22
 801d400:	183b      	adds	r3, r7, r0
 801d402:	490e      	ldr	r1, [pc, #56]	@ (801d43c <USB_DeactivateEndpoint+0x37c>)
 801d404:	400a      	ands	r2, r1
 801d406:	801a      	strh	r2, [r3, #0]
 801d408:	687a      	ldr	r2, [r7, #4]
 801d40a:	683b      	ldr	r3, [r7, #0]
 801d40c:	781b      	ldrb	r3, [r3, #0]
 801d40e:	009b      	lsls	r3, r3, #2
 801d410:	18d3      	adds	r3, r2, r3
 801d412:	183a      	adds	r2, r7, r0
 801d414:	8812      	ldrh	r2, [r2, #0]
 801d416:	4907      	ldr	r1, [pc, #28]	@ (801d434 <USB_DeactivateEndpoint+0x374>)
 801d418:	430a      	orrs	r2, r1
 801d41a:	b292      	uxth	r2, r2
 801d41c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801d41e:	2300      	movs	r3, #0
}
 801d420:	0018      	movs	r0, r3
 801d422:	46bd      	mov	sp, r7
 801d424:	b00c      	add	sp, #48	@ 0x30
 801d426:	bd80      	pop	{r7, pc}
 801d428:	ffff8f8f 	.word	0xffff8f8f
 801d42c:	ffff80c0 	.word	0xffff80c0
 801d430:	ffff8fbf 	.word	0xffff8fbf
 801d434:	ffff8080 	.word	0xffff8080
 801d438:	ffffc080 	.word	0xffffc080
 801d43c:	ffffbf8f 	.word	0xffffbf8f

0801d440 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801d440:	b590      	push	{r4, r7, lr}
 801d442:	b0c3      	sub	sp, #268	@ 0x10c
 801d444:	af00      	add	r7, sp, #0
 801d446:	6078      	str	r0, [r7, #4]
 801d448:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801d44a:	683b      	ldr	r3, [r7, #0]
 801d44c:	785b      	ldrb	r3, [r3, #1]
 801d44e:	2b01      	cmp	r3, #1
 801d450:	d001      	beq.n	801d456 <USB_EPStartXfer+0x16>
 801d452:	f000 fd2d 	bl	801deb0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801d456:	683b      	ldr	r3, [r7, #0]
 801d458:	699a      	ldr	r2, [r3, #24]
 801d45a:	683b      	ldr	r3, [r7, #0]
 801d45c:	691b      	ldr	r3, [r3, #16]
 801d45e:	429a      	cmp	r2, r3
 801d460:	d905      	bls.n	801d46e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801d462:	683b      	ldr	r3, [r7, #0]
 801d464:	691b      	ldr	r3, [r3, #16]
 801d466:	1d7a      	adds	r2, r7, #5
 801d468:	32ff      	adds	r2, #255	@ 0xff
 801d46a:	6013      	str	r3, [r2, #0]
 801d46c:	e004      	b.n	801d478 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801d46e:	683b      	ldr	r3, [r7, #0]
 801d470:	699b      	ldr	r3, [r3, #24]
 801d472:	1d7a      	adds	r2, r7, #5
 801d474:	32ff      	adds	r2, #255	@ 0xff
 801d476:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801d478:	683b      	ldr	r3, [r7, #0]
 801d47a:	7b1b      	ldrb	r3, [r3, #12]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d125      	bne.n	801d4cc <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801d480:	683b      	ldr	r3, [r7, #0]
 801d482:	6959      	ldr	r1, [r3, #20]
 801d484:	683b      	ldr	r3, [r7, #0]
 801d486:	88da      	ldrh	r2, [r3, #6]
 801d488:	1d7b      	adds	r3, r7, #5
 801d48a:	33ff      	adds	r3, #255	@ 0xff
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	b29b      	uxth	r3, r3
 801d490:	6878      	ldr	r0, [r7, #4]
 801d492:	f001 fa47 	bl	801e924 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801d496:	687b      	ldr	r3, [r7, #4]
 801d498:	613b      	str	r3, [r7, #16]
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	2250      	movs	r2, #80	@ 0x50
 801d49e:	5a9b      	ldrh	r3, [r3, r2]
 801d4a0:	b29b      	uxth	r3, r3
 801d4a2:	001a      	movs	r2, r3
 801d4a4:	693b      	ldr	r3, [r7, #16]
 801d4a6:	189b      	adds	r3, r3, r2
 801d4a8:	613b      	str	r3, [r7, #16]
 801d4aa:	683b      	ldr	r3, [r7, #0]
 801d4ac:	781b      	ldrb	r3, [r3, #0]
 801d4ae:	00da      	lsls	r2, r3, #3
 801d4b0:	693b      	ldr	r3, [r7, #16]
 801d4b2:	18d3      	adds	r3, r2, r3
 801d4b4:	4ad7      	ldr	r2, [pc, #860]	@ (801d814 <USB_EPStartXfer+0x3d4>)
 801d4b6:	4694      	mov	ip, r2
 801d4b8:	4463      	add	r3, ip
 801d4ba:	60fb      	str	r3, [r7, #12]
 801d4bc:	1d7b      	adds	r3, r7, #5
 801d4be:	33ff      	adds	r3, #255	@ 0xff
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	b29a      	uxth	r2, r3
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	801a      	strh	r2, [r3, #0]
 801d4c8:	f000 fccd 	bl	801de66 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801d4cc:	683b      	ldr	r3, [r7, #0]
 801d4ce:	78db      	ldrb	r3, [r3, #3]
 801d4d0:	2b02      	cmp	r3, #2
 801d4d2:	d000      	beq.n	801d4d6 <USB_EPStartXfer+0x96>
 801d4d4:	e362      	b.n	801db9c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801d4d6:	683b      	ldr	r3, [r7, #0]
 801d4d8:	6a1a      	ldr	r2, [r3, #32]
 801d4da:	683b      	ldr	r3, [r7, #0]
 801d4dc:	691b      	ldr	r3, [r3, #16]
 801d4de:	429a      	cmp	r2, r3
 801d4e0:	d800      	bhi.n	801d4e4 <USB_EPStartXfer+0xa4>
 801d4e2:	e309      	b.n	801daf8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801d4e4:	687a      	ldr	r2, [r7, #4]
 801d4e6:	683b      	ldr	r3, [r7, #0]
 801d4e8:	781b      	ldrb	r3, [r3, #0]
 801d4ea:	009b      	lsls	r3, r3, #2
 801d4ec:	18d3      	adds	r3, r2, r3
 801d4ee:	881b      	ldrh	r3, [r3, #0]
 801d4f0:	b29a      	uxth	r2, r3
 801d4f2:	2056      	movs	r0, #86	@ 0x56
 801d4f4:	183b      	adds	r3, r7, r0
 801d4f6:	49c8      	ldr	r1, [pc, #800]	@ (801d818 <USB_EPStartXfer+0x3d8>)
 801d4f8:	400a      	ands	r2, r1
 801d4fa:	801a      	strh	r2, [r3, #0]
 801d4fc:	687a      	ldr	r2, [r7, #4]
 801d4fe:	683b      	ldr	r3, [r7, #0]
 801d500:	781b      	ldrb	r3, [r3, #0]
 801d502:	009b      	lsls	r3, r3, #2
 801d504:	18d3      	adds	r3, r2, r3
 801d506:	183a      	adds	r2, r7, r0
 801d508:	8812      	ldrh	r2, [r2, #0]
 801d50a:	49c4      	ldr	r1, [pc, #784]	@ (801d81c <USB_EPStartXfer+0x3dc>)
 801d50c:	430a      	orrs	r2, r1
 801d50e:	b292      	uxth	r2, r2
 801d510:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801d512:	683b      	ldr	r3, [r7, #0]
 801d514:	6a1a      	ldr	r2, [r3, #32]
 801d516:	1d7b      	adds	r3, r7, #5
 801d518:	33ff      	adds	r3, #255	@ 0xff
 801d51a:	681b      	ldr	r3, [r3, #0]
 801d51c:	1ad2      	subs	r2, r2, r3
 801d51e:	683b      	ldr	r3, [r7, #0]
 801d520:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801d522:	687a      	ldr	r2, [r7, #4]
 801d524:	683b      	ldr	r3, [r7, #0]
 801d526:	781b      	ldrb	r3, [r3, #0]
 801d528:	009b      	lsls	r3, r3, #2
 801d52a:	18d3      	adds	r3, r2, r3
 801d52c:	881b      	ldrh	r3, [r3, #0]
 801d52e:	b29b      	uxth	r3, r3
 801d530:	001a      	movs	r2, r3
 801d532:	2340      	movs	r3, #64	@ 0x40
 801d534:	4013      	ands	r3, r2
 801d536:	d100      	bne.n	801d53a <USB_EPStartXfer+0xfa>
 801d538:	e176      	b.n	801d828 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	633b      	str	r3, [r7, #48]	@ 0x30
 801d53e:	683b      	ldr	r3, [r7, #0]
 801d540:	785b      	ldrb	r3, [r3, #1]
 801d542:	2b00      	cmp	r3, #0
 801d544:	d000      	beq.n	801d548 <USB_EPStartXfer+0x108>
 801d546:	e074      	b.n	801d632 <USB_EPStartXfer+0x1f2>
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	2250      	movs	r2, #80	@ 0x50
 801d550:	5a9b      	ldrh	r3, [r3, r2]
 801d552:	b29b      	uxth	r3, r3
 801d554:	001a      	movs	r2, r3
 801d556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d558:	189b      	adds	r3, r3, r2
 801d55a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d55c:	683b      	ldr	r3, [r7, #0]
 801d55e:	781b      	ldrb	r3, [r3, #0]
 801d560:	00da      	lsls	r2, r3, #3
 801d562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d564:	18d3      	adds	r3, r2, r3
 801d566:	4aae      	ldr	r2, [pc, #696]	@ (801d820 <USB_EPStartXfer+0x3e0>)
 801d568:	4694      	mov	ip, r2
 801d56a:	4463      	add	r3, ip
 801d56c:	627b      	str	r3, [r7, #36]	@ 0x24
 801d56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d570:	881b      	ldrh	r3, [r3, #0]
 801d572:	b29b      	uxth	r3, r3
 801d574:	059b      	lsls	r3, r3, #22
 801d576:	0d9b      	lsrs	r3, r3, #22
 801d578:	b29a      	uxth	r2, r3
 801d57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d57c:	801a      	strh	r2, [r3, #0]
 801d57e:	1d7b      	adds	r3, r7, #5
 801d580:	33ff      	adds	r3, #255	@ 0xff
 801d582:	681b      	ldr	r3, [r3, #0]
 801d584:	2b3e      	cmp	r3, #62	@ 0x3e
 801d586:	d924      	bls.n	801d5d2 <USB_EPStartXfer+0x192>
 801d588:	1d7b      	adds	r3, r7, #5
 801d58a:	33ff      	adds	r3, #255	@ 0xff
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	095b      	lsrs	r3, r3, #5
 801d590:	1c7a      	adds	r2, r7, #1
 801d592:	32ff      	adds	r2, #255	@ 0xff
 801d594:	6013      	str	r3, [r2, #0]
 801d596:	1d7b      	adds	r3, r7, #5
 801d598:	33ff      	adds	r3, #255	@ 0xff
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	221f      	movs	r2, #31
 801d59e:	4013      	ands	r3, r2
 801d5a0:	d106      	bne.n	801d5b0 <USB_EPStartXfer+0x170>
 801d5a2:	1c7b      	adds	r3, r7, #1
 801d5a4:	33ff      	adds	r3, #255	@ 0xff
 801d5a6:	681b      	ldr	r3, [r3, #0]
 801d5a8:	3b01      	subs	r3, #1
 801d5aa:	1c7a      	adds	r2, r7, #1
 801d5ac:	32ff      	adds	r2, #255	@ 0xff
 801d5ae:	6013      	str	r3, [r2, #0]
 801d5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5b2:	881b      	ldrh	r3, [r3, #0]
 801d5b4:	b29a      	uxth	r2, r3
 801d5b6:	1c7b      	adds	r3, r7, #1
 801d5b8:	33ff      	adds	r3, #255	@ 0xff
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	b29b      	uxth	r3, r3
 801d5be:	029b      	lsls	r3, r3, #10
 801d5c0:	b29b      	uxth	r3, r3
 801d5c2:	4313      	orrs	r3, r2
 801d5c4:	b29b      	uxth	r3, r3
 801d5c6:	4a97      	ldr	r2, [pc, #604]	@ (801d824 <USB_EPStartXfer+0x3e4>)
 801d5c8:	4313      	orrs	r3, r2
 801d5ca:	b29a      	uxth	r2, r3
 801d5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5ce:	801a      	strh	r2, [r3, #0]
 801d5d0:	e04a      	b.n	801d668 <USB_EPStartXfer+0x228>
 801d5d2:	1d7b      	adds	r3, r7, #5
 801d5d4:	33ff      	adds	r3, #255	@ 0xff
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d108      	bne.n	801d5ee <USB_EPStartXfer+0x1ae>
 801d5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5de:	881b      	ldrh	r3, [r3, #0]
 801d5e0:	b29b      	uxth	r3, r3
 801d5e2:	4a90      	ldr	r2, [pc, #576]	@ (801d824 <USB_EPStartXfer+0x3e4>)
 801d5e4:	4313      	orrs	r3, r2
 801d5e6:	b29a      	uxth	r2, r3
 801d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5ea:	801a      	strh	r2, [r3, #0]
 801d5ec:	e03c      	b.n	801d668 <USB_EPStartXfer+0x228>
 801d5ee:	1d7b      	adds	r3, r7, #5
 801d5f0:	33ff      	adds	r3, #255	@ 0xff
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	085b      	lsrs	r3, r3, #1
 801d5f6:	1c7a      	adds	r2, r7, #1
 801d5f8:	32ff      	adds	r2, #255	@ 0xff
 801d5fa:	6013      	str	r3, [r2, #0]
 801d5fc:	1d7b      	adds	r3, r7, #5
 801d5fe:	33ff      	adds	r3, #255	@ 0xff
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	2201      	movs	r2, #1
 801d604:	4013      	ands	r3, r2
 801d606:	d006      	beq.n	801d616 <USB_EPStartXfer+0x1d6>
 801d608:	1c7b      	adds	r3, r7, #1
 801d60a:	33ff      	adds	r3, #255	@ 0xff
 801d60c:	681b      	ldr	r3, [r3, #0]
 801d60e:	3301      	adds	r3, #1
 801d610:	1c7a      	adds	r2, r7, #1
 801d612:	32ff      	adds	r2, #255	@ 0xff
 801d614:	6013      	str	r3, [r2, #0]
 801d616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d618:	881b      	ldrh	r3, [r3, #0]
 801d61a:	b29a      	uxth	r2, r3
 801d61c:	1c7b      	adds	r3, r7, #1
 801d61e:	33ff      	adds	r3, #255	@ 0xff
 801d620:	681b      	ldr	r3, [r3, #0]
 801d622:	b29b      	uxth	r3, r3
 801d624:	029b      	lsls	r3, r3, #10
 801d626:	b29b      	uxth	r3, r3
 801d628:	4313      	orrs	r3, r2
 801d62a:	b29a      	uxth	r2, r3
 801d62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d62e:	801a      	strh	r2, [r3, #0]
 801d630:	e01a      	b.n	801d668 <USB_EPStartXfer+0x228>
 801d632:	683b      	ldr	r3, [r7, #0]
 801d634:	785b      	ldrb	r3, [r3, #1]
 801d636:	2b01      	cmp	r3, #1
 801d638:	d116      	bne.n	801d668 <USB_EPStartXfer+0x228>
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	2250      	movs	r2, #80	@ 0x50
 801d63e:	5a9b      	ldrh	r3, [r3, r2]
 801d640:	b29b      	uxth	r3, r3
 801d642:	001a      	movs	r2, r3
 801d644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d646:	189b      	adds	r3, r3, r2
 801d648:	633b      	str	r3, [r7, #48]	@ 0x30
 801d64a:	683b      	ldr	r3, [r7, #0]
 801d64c:	781b      	ldrb	r3, [r3, #0]
 801d64e:	00da      	lsls	r2, r3, #3
 801d650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d652:	18d3      	adds	r3, r2, r3
 801d654:	4a72      	ldr	r2, [pc, #456]	@ (801d820 <USB_EPStartXfer+0x3e0>)
 801d656:	4694      	mov	ip, r2
 801d658:	4463      	add	r3, ip
 801d65a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d65c:	1d7b      	adds	r3, r7, #5
 801d65e:	33ff      	adds	r3, #255	@ 0xff
 801d660:	681b      	ldr	r3, [r3, #0]
 801d662:	b29a      	uxth	r2, r3
 801d664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d666:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801d668:	2076      	movs	r0, #118	@ 0x76
 801d66a:	183b      	adds	r3, r7, r0
 801d66c:	683a      	ldr	r2, [r7, #0]
 801d66e:	8952      	ldrh	r2, [r2, #10]
 801d670:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801d672:	683b      	ldr	r3, [r7, #0]
 801d674:	6959      	ldr	r1, [r3, #20]
 801d676:	1d7b      	adds	r3, r7, #5
 801d678:	33ff      	adds	r3, #255	@ 0xff
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	b29c      	uxth	r4, r3
 801d67e:	183b      	adds	r3, r7, r0
 801d680:	881a      	ldrh	r2, [r3, #0]
 801d682:	6878      	ldr	r0, [r7, #4]
 801d684:	0023      	movs	r3, r4
 801d686:	f001 f94d 	bl	801e924 <USB_WritePMA>
            ep->xfer_buff += len;
 801d68a:	683b      	ldr	r3, [r7, #0]
 801d68c:	695a      	ldr	r2, [r3, #20]
 801d68e:	1d7b      	adds	r3, r7, #5
 801d690:	33ff      	adds	r3, #255	@ 0xff
 801d692:	681b      	ldr	r3, [r3, #0]
 801d694:	18d2      	adds	r2, r2, r3
 801d696:	683b      	ldr	r3, [r7, #0]
 801d698:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801d69a:	683b      	ldr	r3, [r7, #0]
 801d69c:	6a1a      	ldr	r2, [r3, #32]
 801d69e:	683b      	ldr	r3, [r7, #0]
 801d6a0:	691b      	ldr	r3, [r3, #16]
 801d6a2:	429a      	cmp	r2, r3
 801d6a4:	d908      	bls.n	801d6b8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801d6a6:	683b      	ldr	r3, [r7, #0]
 801d6a8:	6a1a      	ldr	r2, [r3, #32]
 801d6aa:	1d7b      	adds	r3, r7, #5
 801d6ac:	33ff      	adds	r3, #255	@ 0xff
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	1ad2      	subs	r2, r2, r3
 801d6b2:	683b      	ldr	r3, [r7, #0]
 801d6b4:	621a      	str	r2, [r3, #32]
 801d6b6:	e007      	b.n	801d6c8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801d6b8:	683b      	ldr	r3, [r7, #0]
 801d6ba:	6a1b      	ldr	r3, [r3, #32]
 801d6bc:	1d7a      	adds	r2, r7, #5
 801d6be:	32ff      	adds	r2, #255	@ 0xff
 801d6c0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801d6c2:	683b      	ldr	r3, [r7, #0]
 801d6c4:	2200      	movs	r2, #0
 801d6c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801d6c8:	683b      	ldr	r3, [r7, #0]
 801d6ca:	785b      	ldrb	r3, [r3, #1]
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d000      	beq.n	801d6d2 <USB_EPStartXfer+0x292>
 801d6d0:	e070      	b.n	801d7b4 <USB_EPStartXfer+0x374>
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	61bb      	str	r3, [r7, #24]
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	2250      	movs	r2, #80	@ 0x50
 801d6da:	5a9b      	ldrh	r3, [r3, r2]
 801d6dc:	b29b      	uxth	r3, r3
 801d6de:	001a      	movs	r2, r3
 801d6e0:	69bb      	ldr	r3, [r7, #24]
 801d6e2:	189b      	adds	r3, r3, r2
 801d6e4:	61bb      	str	r3, [r7, #24]
 801d6e6:	683b      	ldr	r3, [r7, #0]
 801d6e8:	781b      	ldrb	r3, [r3, #0]
 801d6ea:	00da      	lsls	r2, r3, #3
 801d6ec:	69bb      	ldr	r3, [r7, #24]
 801d6ee:	18d3      	adds	r3, r2, r3
 801d6f0:	4a48      	ldr	r2, [pc, #288]	@ (801d814 <USB_EPStartXfer+0x3d4>)
 801d6f2:	4694      	mov	ip, r2
 801d6f4:	4463      	add	r3, ip
 801d6f6:	617b      	str	r3, [r7, #20]
 801d6f8:	697b      	ldr	r3, [r7, #20]
 801d6fa:	881b      	ldrh	r3, [r3, #0]
 801d6fc:	b29b      	uxth	r3, r3
 801d6fe:	059b      	lsls	r3, r3, #22
 801d700:	0d9b      	lsrs	r3, r3, #22
 801d702:	b29a      	uxth	r2, r3
 801d704:	697b      	ldr	r3, [r7, #20]
 801d706:	801a      	strh	r2, [r3, #0]
 801d708:	1d7b      	adds	r3, r7, #5
 801d70a:	33ff      	adds	r3, #255	@ 0xff
 801d70c:	681b      	ldr	r3, [r3, #0]
 801d70e:	2b3e      	cmp	r3, #62	@ 0x3e
 801d710:	d922      	bls.n	801d758 <USB_EPStartXfer+0x318>
 801d712:	1d7b      	adds	r3, r7, #5
 801d714:	33ff      	adds	r3, #255	@ 0xff
 801d716:	681b      	ldr	r3, [r3, #0]
 801d718:	095b      	lsrs	r3, r3, #5
 801d71a:	21fc      	movs	r1, #252	@ 0xfc
 801d71c:	187a      	adds	r2, r7, r1
 801d71e:	6013      	str	r3, [r2, #0]
 801d720:	1d7b      	adds	r3, r7, #5
 801d722:	33ff      	adds	r3, #255	@ 0xff
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	221f      	movs	r2, #31
 801d728:	4013      	ands	r3, r2
 801d72a:	d104      	bne.n	801d736 <USB_EPStartXfer+0x2f6>
 801d72c:	187b      	adds	r3, r7, r1
 801d72e:	681b      	ldr	r3, [r3, #0]
 801d730:	3b01      	subs	r3, #1
 801d732:	187a      	adds	r2, r7, r1
 801d734:	6013      	str	r3, [r2, #0]
 801d736:	697b      	ldr	r3, [r7, #20]
 801d738:	881b      	ldrh	r3, [r3, #0]
 801d73a:	b29a      	uxth	r2, r3
 801d73c:	23fc      	movs	r3, #252	@ 0xfc
 801d73e:	18fb      	adds	r3, r7, r3
 801d740:	681b      	ldr	r3, [r3, #0]
 801d742:	b29b      	uxth	r3, r3
 801d744:	029b      	lsls	r3, r3, #10
 801d746:	b29b      	uxth	r3, r3
 801d748:	4313      	orrs	r3, r2
 801d74a:	b29b      	uxth	r3, r3
 801d74c:	4a35      	ldr	r2, [pc, #212]	@ (801d824 <USB_EPStartXfer+0x3e4>)
 801d74e:	4313      	orrs	r3, r2
 801d750:	b29a      	uxth	r2, r3
 801d752:	697b      	ldr	r3, [r7, #20]
 801d754:	801a      	strh	r2, [r3, #0]
 801d756:	e04a      	b.n	801d7ee <USB_EPStartXfer+0x3ae>
 801d758:	1d7b      	adds	r3, r7, #5
 801d75a:	33ff      	adds	r3, #255	@ 0xff
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	2b00      	cmp	r3, #0
 801d760:	d108      	bne.n	801d774 <USB_EPStartXfer+0x334>
 801d762:	697b      	ldr	r3, [r7, #20]
 801d764:	881b      	ldrh	r3, [r3, #0]
 801d766:	b29b      	uxth	r3, r3
 801d768:	4a2e      	ldr	r2, [pc, #184]	@ (801d824 <USB_EPStartXfer+0x3e4>)
 801d76a:	4313      	orrs	r3, r2
 801d76c:	b29a      	uxth	r2, r3
 801d76e:	697b      	ldr	r3, [r7, #20]
 801d770:	801a      	strh	r2, [r3, #0]
 801d772:	e03c      	b.n	801d7ee <USB_EPStartXfer+0x3ae>
 801d774:	1d7b      	adds	r3, r7, #5
 801d776:	33ff      	adds	r3, #255	@ 0xff
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	085b      	lsrs	r3, r3, #1
 801d77c:	21fc      	movs	r1, #252	@ 0xfc
 801d77e:	187a      	adds	r2, r7, r1
 801d780:	6013      	str	r3, [r2, #0]
 801d782:	1d7b      	adds	r3, r7, #5
 801d784:	33ff      	adds	r3, #255	@ 0xff
 801d786:	681b      	ldr	r3, [r3, #0]
 801d788:	2201      	movs	r2, #1
 801d78a:	4013      	ands	r3, r2
 801d78c:	d004      	beq.n	801d798 <USB_EPStartXfer+0x358>
 801d78e:	187b      	adds	r3, r7, r1
 801d790:	681b      	ldr	r3, [r3, #0]
 801d792:	3301      	adds	r3, #1
 801d794:	187a      	adds	r2, r7, r1
 801d796:	6013      	str	r3, [r2, #0]
 801d798:	697b      	ldr	r3, [r7, #20]
 801d79a:	881b      	ldrh	r3, [r3, #0]
 801d79c:	b29a      	uxth	r2, r3
 801d79e:	23fc      	movs	r3, #252	@ 0xfc
 801d7a0:	18fb      	adds	r3, r7, r3
 801d7a2:	681b      	ldr	r3, [r3, #0]
 801d7a4:	b29b      	uxth	r3, r3
 801d7a6:	029b      	lsls	r3, r3, #10
 801d7a8:	b29b      	uxth	r3, r3
 801d7aa:	4313      	orrs	r3, r2
 801d7ac:	b29a      	uxth	r2, r3
 801d7ae:	697b      	ldr	r3, [r7, #20]
 801d7b0:	801a      	strh	r2, [r3, #0]
 801d7b2:	e01c      	b.n	801d7ee <USB_EPStartXfer+0x3ae>
 801d7b4:	683b      	ldr	r3, [r7, #0]
 801d7b6:	785b      	ldrb	r3, [r3, #1]
 801d7b8:	2b01      	cmp	r3, #1
 801d7ba:	d118      	bne.n	801d7ee <USB_EPStartXfer+0x3ae>
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	623b      	str	r3, [r7, #32]
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	2250      	movs	r2, #80	@ 0x50
 801d7c4:	5a9b      	ldrh	r3, [r3, r2]
 801d7c6:	b29b      	uxth	r3, r3
 801d7c8:	001a      	movs	r2, r3
 801d7ca:	6a3b      	ldr	r3, [r7, #32]
 801d7cc:	189b      	adds	r3, r3, r2
 801d7ce:	623b      	str	r3, [r7, #32]
 801d7d0:	683b      	ldr	r3, [r7, #0]
 801d7d2:	781b      	ldrb	r3, [r3, #0]
 801d7d4:	00da      	lsls	r2, r3, #3
 801d7d6:	6a3b      	ldr	r3, [r7, #32]
 801d7d8:	18d3      	adds	r3, r2, r3
 801d7da:	4a0e      	ldr	r2, [pc, #56]	@ (801d814 <USB_EPStartXfer+0x3d4>)
 801d7dc:	4694      	mov	ip, r2
 801d7de:	4463      	add	r3, ip
 801d7e0:	61fb      	str	r3, [r7, #28]
 801d7e2:	1d7b      	adds	r3, r7, #5
 801d7e4:	33ff      	adds	r3, #255	@ 0xff
 801d7e6:	681b      	ldr	r3, [r3, #0]
 801d7e8:	b29a      	uxth	r2, r3
 801d7ea:	69fb      	ldr	r3, [r7, #28]
 801d7ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801d7ee:	2076      	movs	r0, #118	@ 0x76
 801d7f0:	183b      	adds	r3, r7, r0
 801d7f2:	683a      	ldr	r2, [r7, #0]
 801d7f4:	8912      	ldrh	r2, [r2, #8]
 801d7f6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801d7f8:	683b      	ldr	r3, [r7, #0]
 801d7fa:	6959      	ldr	r1, [r3, #20]
 801d7fc:	1d7b      	adds	r3, r7, #5
 801d7fe:	33ff      	adds	r3, #255	@ 0xff
 801d800:	681b      	ldr	r3, [r3, #0]
 801d802:	b29c      	uxth	r4, r3
 801d804:	183b      	adds	r3, r7, r0
 801d806:	881a      	ldrh	r2, [r3, #0]
 801d808:	6878      	ldr	r0, [r7, #4]
 801d80a:	0023      	movs	r3, r4
 801d80c:	f001 f88a 	bl	801e924 <USB_WritePMA>
 801d810:	e329      	b.n	801de66 <USB_EPStartXfer+0xa26>
 801d812:	46c0      	nop			@ (mov r8, r8)
 801d814:	00000402 	.word	0x00000402
 801d818:	ffff8f8f 	.word	0xffff8f8f
 801d81c:	ffff8180 	.word	0xffff8180
 801d820:	00000406 	.word	0x00000406
 801d824:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801d828:	683b      	ldr	r3, [r7, #0]
 801d82a:	785b      	ldrb	r3, [r3, #1]
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d000      	beq.n	801d832 <USB_EPStartXfer+0x3f2>
 801d830:	e070      	b.n	801d914 <USB_EPStartXfer+0x4d4>
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	2250      	movs	r2, #80	@ 0x50
 801d83a:	5a9b      	ldrh	r3, [r3, r2]
 801d83c:	b29b      	uxth	r3, r3
 801d83e:	001a      	movs	r2, r3
 801d840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d842:	189b      	adds	r3, r3, r2
 801d844:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d846:	683b      	ldr	r3, [r7, #0]
 801d848:	781b      	ldrb	r3, [r3, #0]
 801d84a:	00da      	lsls	r2, r3, #3
 801d84c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d84e:	18d3      	adds	r3, r2, r3
 801d850:	4acd      	ldr	r2, [pc, #820]	@ (801db88 <USB_EPStartXfer+0x748>)
 801d852:	4694      	mov	ip, r2
 801d854:	4463      	add	r3, ip
 801d856:	647b      	str	r3, [r7, #68]	@ 0x44
 801d858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d85a:	881b      	ldrh	r3, [r3, #0]
 801d85c:	b29b      	uxth	r3, r3
 801d85e:	059b      	lsls	r3, r3, #22
 801d860:	0d9b      	lsrs	r3, r3, #22
 801d862:	b29a      	uxth	r2, r3
 801d864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d866:	801a      	strh	r2, [r3, #0]
 801d868:	1d7b      	adds	r3, r7, #5
 801d86a:	33ff      	adds	r3, #255	@ 0xff
 801d86c:	681b      	ldr	r3, [r3, #0]
 801d86e:	2b3e      	cmp	r3, #62	@ 0x3e
 801d870:	d922      	bls.n	801d8b8 <USB_EPStartXfer+0x478>
 801d872:	1d7b      	adds	r3, r7, #5
 801d874:	33ff      	adds	r3, #255	@ 0xff
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	095b      	lsrs	r3, r3, #5
 801d87a:	21f8      	movs	r1, #248	@ 0xf8
 801d87c:	187a      	adds	r2, r7, r1
 801d87e:	6013      	str	r3, [r2, #0]
 801d880:	1d7b      	adds	r3, r7, #5
 801d882:	33ff      	adds	r3, #255	@ 0xff
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	221f      	movs	r2, #31
 801d888:	4013      	ands	r3, r2
 801d88a:	d104      	bne.n	801d896 <USB_EPStartXfer+0x456>
 801d88c:	187b      	adds	r3, r7, r1
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	3b01      	subs	r3, #1
 801d892:	187a      	adds	r2, r7, r1
 801d894:	6013      	str	r3, [r2, #0]
 801d896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d898:	881b      	ldrh	r3, [r3, #0]
 801d89a:	b29a      	uxth	r2, r3
 801d89c:	23f8      	movs	r3, #248	@ 0xf8
 801d89e:	18fb      	adds	r3, r7, r3
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	b29b      	uxth	r3, r3
 801d8a4:	029b      	lsls	r3, r3, #10
 801d8a6:	b29b      	uxth	r3, r3
 801d8a8:	4313      	orrs	r3, r2
 801d8aa:	b29b      	uxth	r3, r3
 801d8ac:	4ab7      	ldr	r2, [pc, #732]	@ (801db8c <USB_EPStartXfer+0x74c>)
 801d8ae:	4313      	orrs	r3, r2
 801d8b0:	b29a      	uxth	r2, r3
 801d8b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d8b4:	801a      	strh	r2, [r3, #0]
 801d8b6:	e04a      	b.n	801d94e <USB_EPStartXfer+0x50e>
 801d8b8:	1d7b      	adds	r3, r7, #5
 801d8ba:	33ff      	adds	r3, #255	@ 0xff
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d108      	bne.n	801d8d4 <USB_EPStartXfer+0x494>
 801d8c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d8c4:	881b      	ldrh	r3, [r3, #0]
 801d8c6:	b29b      	uxth	r3, r3
 801d8c8:	4ab0      	ldr	r2, [pc, #704]	@ (801db8c <USB_EPStartXfer+0x74c>)
 801d8ca:	4313      	orrs	r3, r2
 801d8cc:	b29a      	uxth	r2, r3
 801d8ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d8d0:	801a      	strh	r2, [r3, #0]
 801d8d2:	e03c      	b.n	801d94e <USB_EPStartXfer+0x50e>
 801d8d4:	1d7b      	adds	r3, r7, #5
 801d8d6:	33ff      	adds	r3, #255	@ 0xff
 801d8d8:	681b      	ldr	r3, [r3, #0]
 801d8da:	085b      	lsrs	r3, r3, #1
 801d8dc:	21f8      	movs	r1, #248	@ 0xf8
 801d8de:	187a      	adds	r2, r7, r1
 801d8e0:	6013      	str	r3, [r2, #0]
 801d8e2:	1d7b      	adds	r3, r7, #5
 801d8e4:	33ff      	adds	r3, #255	@ 0xff
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	2201      	movs	r2, #1
 801d8ea:	4013      	ands	r3, r2
 801d8ec:	d004      	beq.n	801d8f8 <USB_EPStartXfer+0x4b8>
 801d8ee:	187b      	adds	r3, r7, r1
 801d8f0:	681b      	ldr	r3, [r3, #0]
 801d8f2:	3301      	adds	r3, #1
 801d8f4:	187a      	adds	r2, r7, r1
 801d8f6:	6013      	str	r3, [r2, #0]
 801d8f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d8fa:	881b      	ldrh	r3, [r3, #0]
 801d8fc:	b29a      	uxth	r2, r3
 801d8fe:	23f8      	movs	r3, #248	@ 0xf8
 801d900:	18fb      	adds	r3, r7, r3
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	b29b      	uxth	r3, r3
 801d906:	029b      	lsls	r3, r3, #10
 801d908:	b29b      	uxth	r3, r3
 801d90a:	4313      	orrs	r3, r2
 801d90c:	b29a      	uxth	r2, r3
 801d90e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d910:	801a      	strh	r2, [r3, #0]
 801d912:	e01c      	b.n	801d94e <USB_EPStartXfer+0x50e>
 801d914:	683b      	ldr	r3, [r7, #0]
 801d916:	785b      	ldrb	r3, [r3, #1]
 801d918:	2b01      	cmp	r3, #1
 801d91a:	d118      	bne.n	801d94e <USB_EPStartXfer+0x50e>
 801d91c:	687b      	ldr	r3, [r7, #4]
 801d91e:	653b      	str	r3, [r7, #80]	@ 0x50
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	2250      	movs	r2, #80	@ 0x50
 801d924:	5a9b      	ldrh	r3, [r3, r2]
 801d926:	b29b      	uxth	r3, r3
 801d928:	001a      	movs	r2, r3
 801d92a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d92c:	189b      	adds	r3, r3, r2
 801d92e:	653b      	str	r3, [r7, #80]	@ 0x50
 801d930:	683b      	ldr	r3, [r7, #0]
 801d932:	781b      	ldrb	r3, [r3, #0]
 801d934:	00da      	lsls	r2, r3, #3
 801d936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d938:	18d3      	adds	r3, r2, r3
 801d93a:	4a93      	ldr	r2, [pc, #588]	@ (801db88 <USB_EPStartXfer+0x748>)
 801d93c:	4694      	mov	ip, r2
 801d93e:	4463      	add	r3, ip
 801d940:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d942:	1d7b      	adds	r3, r7, #5
 801d944:	33ff      	adds	r3, #255	@ 0xff
 801d946:	681b      	ldr	r3, [r3, #0]
 801d948:	b29a      	uxth	r2, r3
 801d94a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d94c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801d94e:	2076      	movs	r0, #118	@ 0x76
 801d950:	183b      	adds	r3, r7, r0
 801d952:	683a      	ldr	r2, [r7, #0]
 801d954:	8912      	ldrh	r2, [r2, #8]
 801d956:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801d958:	683b      	ldr	r3, [r7, #0]
 801d95a:	6959      	ldr	r1, [r3, #20]
 801d95c:	1d7b      	adds	r3, r7, #5
 801d95e:	33ff      	adds	r3, #255	@ 0xff
 801d960:	681b      	ldr	r3, [r3, #0]
 801d962:	b29c      	uxth	r4, r3
 801d964:	183b      	adds	r3, r7, r0
 801d966:	881a      	ldrh	r2, [r3, #0]
 801d968:	6878      	ldr	r0, [r7, #4]
 801d96a:	0023      	movs	r3, r4
 801d96c:	f000 ffda 	bl	801e924 <USB_WritePMA>
            ep->xfer_buff += len;
 801d970:	683b      	ldr	r3, [r7, #0]
 801d972:	695a      	ldr	r2, [r3, #20]
 801d974:	1d7b      	adds	r3, r7, #5
 801d976:	33ff      	adds	r3, #255	@ 0xff
 801d978:	681b      	ldr	r3, [r3, #0]
 801d97a:	18d2      	adds	r2, r2, r3
 801d97c:	683b      	ldr	r3, [r7, #0]
 801d97e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801d980:	683b      	ldr	r3, [r7, #0]
 801d982:	6a1a      	ldr	r2, [r3, #32]
 801d984:	683b      	ldr	r3, [r7, #0]
 801d986:	691b      	ldr	r3, [r3, #16]
 801d988:	429a      	cmp	r2, r3
 801d98a:	d908      	bls.n	801d99e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801d98c:	683b      	ldr	r3, [r7, #0]
 801d98e:	6a1a      	ldr	r2, [r3, #32]
 801d990:	1d7b      	adds	r3, r7, #5
 801d992:	33ff      	adds	r3, #255	@ 0xff
 801d994:	681b      	ldr	r3, [r3, #0]
 801d996:	1ad2      	subs	r2, r2, r3
 801d998:	683b      	ldr	r3, [r7, #0]
 801d99a:	621a      	str	r2, [r3, #32]
 801d99c:	e007      	b.n	801d9ae <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801d99e:	683b      	ldr	r3, [r7, #0]
 801d9a0:	6a1b      	ldr	r3, [r3, #32]
 801d9a2:	1d7a      	adds	r2, r7, #5
 801d9a4:	32ff      	adds	r2, #255	@ 0xff
 801d9a6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801d9a8:	683b      	ldr	r3, [r7, #0]
 801d9aa:	2200      	movs	r2, #0
 801d9ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	643b      	str	r3, [r7, #64]	@ 0x40
 801d9b2:	683b      	ldr	r3, [r7, #0]
 801d9b4:	785b      	ldrb	r3, [r3, #1]
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	d000      	beq.n	801d9bc <USB_EPStartXfer+0x57c>
 801d9ba:	e070      	b.n	801da9e <USB_EPStartXfer+0x65e>
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	2250      	movs	r2, #80	@ 0x50
 801d9c4:	5a9b      	ldrh	r3, [r3, r2]
 801d9c6:	b29b      	uxth	r3, r3
 801d9c8:	001a      	movs	r2, r3
 801d9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9cc:	189b      	adds	r3, r3, r2
 801d9ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d9d0:	683b      	ldr	r3, [r7, #0]
 801d9d2:	781b      	ldrb	r3, [r3, #0]
 801d9d4:	00da      	lsls	r2, r3, #3
 801d9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d9d8:	18d3      	adds	r3, r2, r3
 801d9da:	4a6d      	ldr	r2, [pc, #436]	@ (801db90 <USB_EPStartXfer+0x750>)
 801d9dc:	4694      	mov	ip, r2
 801d9de:	4463      	add	r3, ip
 801d9e0:	637b      	str	r3, [r7, #52]	@ 0x34
 801d9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d9e4:	881b      	ldrh	r3, [r3, #0]
 801d9e6:	b29b      	uxth	r3, r3
 801d9e8:	059b      	lsls	r3, r3, #22
 801d9ea:	0d9b      	lsrs	r3, r3, #22
 801d9ec:	b29a      	uxth	r2, r3
 801d9ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d9f0:	801a      	strh	r2, [r3, #0]
 801d9f2:	1d7b      	adds	r3, r7, #5
 801d9f4:	33ff      	adds	r3, #255	@ 0xff
 801d9f6:	681b      	ldr	r3, [r3, #0]
 801d9f8:	2b3e      	cmp	r3, #62	@ 0x3e
 801d9fa:	d922      	bls.n	801da42 <USB_EPStartXfer+0x602>
 801d9fc:	1d7b      	adds	r3, r7, #5
 801d9fe:	33ff      	adds	r3, #255	@ 0xff
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	095b      	lsrs	r3, r3, #5
 801da04:	21f4      	movs	r1, #244	@ 0xf4
 801da06:	187a      	adds	r2, r7, r1
 801da08:	6013      	str	r3, [r2, #0]
 801da0a:	1d7b      	adds	r3, r7, #5
 801da0c:	33ff      	adds	r3, #255	@ 0xff
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	221f      	movs	r2, #31
 801da12:	4013      	ands	r3, r2
 801da14:	d104      	bne.n	801da20 <USB_EPStartXfer+0x5e0>
 801da16:	187b      	adds	r3, r7, r1
 801da18:	681b      	ldr	r3, [r3, #0]
 801da1a:	3b01      	subs	r3, #1
 801da1c:	187a      	adds	r2, r7, r1
 801da1e:	6013      	str	r3, [r2, #0]
 801da20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da22:	881b      	ldrh	r3, [r3, #0]
 801da24:	b29a      	uxth	r2, r3
 801da26:	23f4      	movs	r3, #244	@ 0xf4
 801da28:	18fb      	adds	r3, r7, r3
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	b29b      	uxth	r3, r3
 801da2e:	029b      	lsls	r3, r3, #10
 801da30:	b29b      	uxth	r3, r3
 801da32:	4313      	orrs	r3, r2
 801da34:	b29b      	uxth	r3, r3
 801da36:	4a55      	ldr	r2, [pc, #340]	@ (801db8c <USB_EPStartXfer+0x74c>)
 801da38:	4313      	orrs	r3, r2
 801da3a:	b29a      	uxth	r2, r3
 801da3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da3e:	801a      	strh	r2, [r3, #0]
 801da40:	e048      	b.n	801dad4 <USB_EPStartXfer+0x694>
 801da42:	1d7b      	adds	r3, r7, #5
 801da44:	33ff      	adds	r3, #255	@ 0xff
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d108      	bne.n	801da5e <USB_EPStartXfer+0x61e>
 801da4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da4e:	881b      	ldrh	r3, [r3, #0]
 801da50:	b29b      	uxth	r3, r3
 801da52:	4a4e      	ldr	r2, [pc, #312]	@ (801db8c <USB_EPStartXfer+0x74c>)
 801da54:	4313      	orrs	r3, r2
 801da56:	b29a      	uxth	r2, r3
 801da58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da5a:	801a      	strh	r2, [r3, #0]
 801da5c:	e03a      	b.n	801dad4 <USB_EPStartXfer+0x694>
 801da5e:	1d7b      	adds	r3, r7, #5
 801da60:	33ff      	adds	r3, #255	@ 0xff
 801da62:	681b      	ldr	r3, [r3, #0]
 801da64:	085b      	lsrs	r3, r3, #1
 801da66:	21f4      	movs	r1, #244	@ 0xf4
 801da68:	187a      	adds	r2, r7, r1
 801da6a:	6013      	str	r3, [r2, #0]
 801da6c:	1d7b      	adds	r3, r7, #5
 801da6e:	33ff      	adds	r3, #255	@ 0xff
 801da70:	681b      	ldr	r3, [r3, #0]
 801da72:	2201      	movs	r2, #1
 801da74:	4013      	ands	r3, r2
 801da76:	d004      	beq.n	801da82 <USB_EPStartXfer+0x642>
 801da78:	187b      	adds	r3, r7, r1
 801da7a:	681b      	ldr	r3, [r3, #0]
 801da7c:	3301      	adds	r3, #1
 801da7e:	187a      	adds	r2, r7, r1
 801da80:	6013      	str	r3, [r2, #0]
 801da82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da84:	881b      	ldrh	r3, [r3, #0]
 801da86:	b29a      	uxth	r2, r3
 801da88:	23f4      	movs	r3, #244	@ 0xf4
 801da8a:	18fb      	adds	r3, r7, r3
 801da8c:	681b      	ldr	r3, [r3, #0]
 801da8e:	b29b      	uxth	r3, r3
 801da90:	029b      	lsls	r3, r3, #10
 801da92:	b29b      	uxth	r3, r3
 801da94:	4313      	orrs	r3, r2
 801da96:	b29a      	uxth	r2, r3
 801da98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da9a:	801a      	strh	r2, [r3, #0]
 801da9c:	e01a      	b.n	801dad4 <USB_EPStartXfer+0x694>
 801da9e:	683b      	ldr	r3, [r7, #0]
 801daa0:	785b      	ldrb	r3, [r3, #1]
 801daa2:	2b01      	cmp	r3, #1
 801daa4:	d116      	bne.n	801dad4 <USB_EPStartXfer+0x694>
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	2250      	movs	r2, #80	@ 0x50
 801daaa:	5a9b      	ldrh	r3, [r3, r2]
 801daac:	b29b      	uxth	r3, r3
 801daae:	001a      	movs	r2, r3
 801dab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dab2:	189b      	adds	r3, r3, r2
 801dab4:	643b      	str	r3, [r7, #64]	@ 0x40
 801dab6:	683b      	ldr	r3, [r7, #0]
 801dab8:	781b      	ldrb	r3, [r3, #0]
 801daba:	00da      	lsls	r2, r3, #3
 801dabc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dabe:	18d3      	adds	r3, r2, r3
 801dac0:	4a33      	ldr	r2, [pc, #204]	@ (801db90 <USB_EPStartXfer+0x750>)
 801dac2:	4694      	mov	ip, r2
 801dac4:	4463      	add	r3, ip
 801dac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dac8:	1d7b      	adds	r3, r7, #5
 801daca:	33ff      	adds	r3, #255	@ 0xff
 801dacc:	681b      	ldr	r3, [r3, #0]
 801dace:	b29a      	uxth	r2, r3
 801dad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dad2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801dad4:	2076      	movs	r0, #118	@ 0x76
 801dad6:	183b      	adds	r3, r7, r0
 801dad8:	683a      	ldr	r2, [r7, #0]
 801dada:	8952      	ldrh	r2, [r2, #10]
 801dadc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801dade:	683b      	ldr	r3, [r7, #0]
 801dae0:	6959      	ldr	r1, [r3, #20]
 801dae2:	1d7b      	adds	r3, r7, #5
 801dae4:	33ff      	adds	r3, #255	@ 0xff
 801dae6:	681b      	ldr	r3, [r3, #0]
 801dae8:	b29c      	uxth	r4, r3
 801daea:	183b      	adds	r3, r7, r0
 801daec:	881a      	ldrh	r2, [r3, #0]
 801daee:	6878      	ldr	r0, [r7, #4]
 801daf0:	0023      	movs	r3, r4
 801daf2:	f000 ff17 	bl	801e924 <USB_WritePMA>
 801daf6:	e1b6      	b.n	801de66 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801daf8:	683b      	ldr	r3, [r7, #0]
 801dafa:	6a1b      	ldr	r3, [r3, #32]
 801dafc:	1d7a      	adds	r2, r7, #5
 801dafe:	32ff      	adds	r2, #255	@ 0xff
 801db00:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801db02:	687a      	ldr	r2, [r7, #4]
 801db04:	683b      	ldr	r3, [r7, #0]
 801db06:	781b      	ldrb	r3, [r3, #0]
 801db08:	009b      	lsls	r3, r3, #2
 801db0a:	18d3      	adds	r3, r2, r3
 801db0c:	881b      	ldrh	r3, [r3, #0]
 801db0e:	b29a      	uxth	r2, r3
 801db10:	2062      	movs	r0, #98	@ 0x62
 801db12:	183b      	adds	r3, r7, r0
 801db14:	491f      	ldr	r1, [pc, #124]	@ (801db94 <USB_EPStartXfer+0x754>)
 801db16:	400a      	ands	r2, r1
 801db18:	801a      	strh	r2, [r3, #0]
 801db1a:	687a      	ldr	r2, [r7, #4]
 801db1c:	683b      	ldr	r3, [r7, #0]
 801db1e:	781b      	ldrb	r3, [r3, #0]
 801db20:	009b      	lsls	r3, r3, #2
 801db22:	18d3      	adds	r3, r2, r3
 801db24:	183a      	adds	r2, r7, r0
 801db26:	8812      	ldrh	r2, [r2, #0]
 801db28:	491b      	ldr	r1, [pc, #108]	@ (801db98 <USB_EPStartXfer+0x758>)
 801db2a:	430a      	orrs	r2, r1
 801db2c:	b292      	uxth	r2, r2
 801db2e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	2250      	movs	r2, #80	@ 0x50
 801db38:	5a9b      	ldrh	r3, [r3, r2]
 801db3a:	b29b      	uxth	r3, r3
 801db3c:	001a      	movs	r2, r3
 801db3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801db40:	189b      	adds	r3, r3, r2
 801db42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801db44:	683b      	ldr	r3, [r7, #0]
 801db46:	781b      	ldrb	r3, [r3, #0]
 801db48:	00da      	lsls	r2, r3, #3
 801db4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801db4c:	18d3      	adds	r3, r2, r3
 801db4e:	4a0e      	ldr	r2, [pc, #56]	@ (801db88 <USB_EPStartXfer+0x748>)
 801db50:	4694      	mov	ip, r2
 801db52:	4463      	add	r3, ip
 801db54:	65bb      	str	r3, [r7, #88]	@ 0x58
 801db56:	1d7b      	adds	r3, r7, #5
 801db58:	33ff      	adds	r3, #255	@ 0xff
 801db5a:	681b      	ldr	r3, [r3, #0]
 801db5c:	b29a      	uxth	r2, r3
 801db5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801db60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801db62:	2076      	movs	r0, #118	@ 0x76
 801db64:	183b      	adds	r3, r7, r0
 801db66:	683a      	ldr	r2, [r7, #0]
 801db68:	8912      	ldrh	r2, [r2, #8]
 801db6a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801db6c:	683b      	ldr	r3, [r7, #0]
 801db6e:	6959      	ldr	r1, [r3, #20]
 801db70:	1d7b      	adds	r3, r7, #5
 801db72:	33ff      	adds	r3, #255	@ 0xff
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	b29c      	uxth	r4, r3
 801db78:	183b      	adds	r3, r7, r0
 801db7a:	881a      	ldrh	r2, [r3, #0]
 801db7c:	6878      	ldr	r0, [r7, #4]
 801db7e:	0023      	movs	r3, r4
 801db80:	f000 fed0 	bl	801e924 <USB_WritePMA>
 801db84:	e16f      	b.n	801de66 <USB_EPStartXfer+0xa26>
 801db86:	46c0      	nop			@ (mov r8, r8)
 801db88:	00000402 	.word	0x00000402
 801db8c:	ffff8000 	.word	0xffff8000
 801db90:	00000406 	.word	0x00000406
 801db94:	ffff8e8f 	.word	0xffff8e8f
 801db98:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801db9c:	683b      	ldr	r3, [r7, #0]
 801db9e:	6a1a      	ldr	r2, [r3, #32]
 801dba0:	1d7b      	adds	r3, r7, #5
 801dba2:	33ff      	adds	r3, #255	@ 0xff
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	1ad2      	subs	r2, r2, r3
 801dba8:	683b      	ldr	r3, [r7, #0]
 801dbaa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801dbac:	687a      	ldr	r2, [r7, #4]
 801dbae:	683b      	ldr	r3, [r7, #0]
 801dbb0:	781b      	ldrb	r3, [r3, #0]
 801dbb2:	009b      	lsls	r3, r3, #2
 801dbb4:	18d3      	adds	r3, r2, r3
 801dbb6:	881b      	ldrh	r3, [r3, #0]
 801dbb8:	b29b      	uxth	r3, r3
 801dbba:	001a      	movs	r2, r3
 801dbbc:	2340      	movs	r3, #64	@ 0x40
 801dbbe:	4013      	ands	r3, r2
 801dbc0:	d100      	bne.n	801dbc4 <USB_EPStartXfer+0x784>
 801dbc2:	e0a4      	b.n	801dd0e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801dbc4:	687b      	ldr	r3, [r7, #4]
 801dbc6:	673b      	str	r3, [r7, #112]	@ 0x70
 801dbc8:	683b      	ldr	r3, [r7, #0]
 801dbca:	785b      	ldrb	r3, [r3, #1]
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	d000      	beq.n	801dbd2 <USB_EPStartXfer+0x792>
 801dbd0:	e070      	b.n	801dcb4 <USB_EPStartXfer+0x874>
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	2250      	movs	r2, #80	@ 0x50
 801dbda:	5a9b      	ldrh	r3, [r3, r2]
 801dbdc:	b29b      	uxth	r3, r3
 801dbde:	001a      	movs	r2, r3
 801dbe0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dbe2:	189b      	adds	r3, r3, r2
 801dbe4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801dbe6:	683b      	ldr	r3, [r7, #0]
 801dbe8:	781b      	ldrb	r3, [r3, #0]
 801dbea:	00da      	lsls	r2, r3, #3
 801dbec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dbee:	18d3      	adds	r3, r2, r3
 801dbf0:	4abc      	ldr	r2, [pc, #752]	@ (801dee4 <USB_EPStartXfer+0xaa4>)
 801dbf2:	4694      	mov	ip, r2
 801dbf4:	4463      	add	r3, ip
 801dbf6:	667b      	str	r3, [r7, #100]	@ 0x64
 801dbf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dbfa:	881b      	ldrh	r3, [r3, #0]
 801dbfc:	b29b      	uxth	r3, r3
 801dbfe:	059b      	lsls	r3, r3, #22
 801dc00:	0d9b      	lsrs	r3, r3, #22
 801dc02:	b29a      	uxth	r2, r3
 801dc04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc06:	801a      	strh	r2, [r3, #0]
 801dc08:	1d7b      	adds	r3, r7, #5
 801dc0a:	33ff      	adds	r3, #255	@ 0xff
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	2b3e      	cmp	r3, #62	@ 0x3e
 801dc10:	d922      	bls.n	801dc58 <USB_EPStartXfer+0x818>
 801dc12:	1d7b      	adds	r3, r7, #5
 801dc14:	33ff      	adds	r3, #255	@ 0xff
 801dc16:	681b      	ldr	r3, [r3, #0]
 801dc18:	095b      	lsrs	r3, r3, #5
 801dc1a:	21f0      	movs	r1, #240	@ 0xf0
 801dc1c:	187a      	adds	r2, r7, r1
 801dc1e:	6013      	str	r3, [r2, #0]
 801dc20:	1d7b      	adds	r3, r7, #5
 801dc22:	33ff      	adds	r3, #255	@ 0xff
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	221f      	movs	r2, #31
 801dc28:	4013      	ands	r3, r2
 801dc2a:	d104      	bne.n	801dc36 <USB_EPStartXfer+0x7f6>
 801dc2c:	187b      	adds	r3, r7, r1
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	3b01      	subs	r3, #1
 801dc32:	187a      	adds	r2, r7, r1
 801dc34:	6013      	str	r3, [r2, #0]
 801dc36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc38:	881b      	ldrh	r3, [r3, #0]
 801dc3a:	b29a      	uxth	r2, r3
 801dc3c:	23f0      	movs	r3, #240	@ 0xf0
 801dc3e:	18fb      	adds	r3, r7, r3
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	b29b      	uxth	r3, r3
 801dc44:	029b      	lsls	r3, r3, #10
 801dc46:	b29b      	uxth	r3, r3
 801dc48:	4313      	orrs	r3, r2
 801dc4a:	b29b      	uxth	r3, r3
 801dc4c:	4aa6      	ldr	r2, [pc, #664]	@ (801dee8 <USB_EPStartXfer+0xaa8>)
 801dc4e:	4313      	orrs	r3, r2
 801dc50:	b29a      	uxth	r2, r3
 801dc52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc54:	801a      	strh	r2, [r3, #0]
 801dc56:	e048      	b.n	801dcea <USB_EPStartXfer+0x8aa>
 801dc58:	1d7b      	adds	r3, r7, #5
 801dc5a:	33ff      	adds	r3, #255	@ 0xff
 801dc5c:	681b      	ldr	r3, [r3, #0]
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	d108      	bne.n	801dc74 <USB_EPStartXfer+0x834>
 801dc62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc64:	881b      	ldrh	r3, [r3, #0]
 801dc66:	b29b      	uxth	r3, r3
 801dc68:	4a9f      	ldr	r2, [pc, #636]	@ (801dee8 <USB_EPStartXfer+0xaa8>)
 801dc6a:	4313      	orrs	r3, r2
 801dc6c:	b29a      	uxth	r2, r3
 801dc6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc70:	801a      	strh	r2, [r3, #0]
 801dc72:	e03a      	b.n	801dcea <USB_EPStartXfer+0x8aa>
 801dc74:	1d7b      	adds	r3, r7, #5
 801dc76:	33ff      	adds	r3, #255	@ 0xff
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	085b      	lsrs	r3, r3, #1
 801dc7c:	21f0      	movs	r1, #240	@ 0xf0
 801dc7e:	187a      	adds	r2, r7, r1
 801dc80:	6013      	str	r3, [r2, #0]
 801dc82:	1d7b      	adds	r3, r7, #5
 801dc84:	33ff      	adds	r3, #255	@ 0xff
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	2201      	movs	r2, #1
 801dc8a:	4013      	ands	r3, r2
 801dc8c:	d004      	beq.n	801dc98 <USB_EPStartXfer+0x858>
 801dc8e:	187b      	adds	r3, r7, r1
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	3301      	adds	r3, #1
 801dc94:	187a      	adds	r2, r7, r1
 801dc96:	6013      	str	r3, [r2, #0]
 801dc98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dc9a:	881b      	ldrh	r3, [r3, #0]
 801dc9c:	b29a      	uxth	r2, r3
 801dc9e:	23f0      	movs	r3, #240	@ 0xf0
 801dca0:	18fb      	adds	r3, r7, r3
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	b29b      	uxth	r3, r3
 801dca6:	029b      	lsls	r3, r3, #10
 801dca8:	b29b      	uxth	r3, r3
 801dcaa:	4313      	orrs	r3, r2
 801dcac:	b29a      	uxth	r2, r3
 801dcae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dcb0:	801a      	strh	r2, [r3, #0]
 801dcb2:	e01a      	b.n	801dcea <USB_EPStartXfer+0x8aa>
 801dcb4:	683b      	ldr	r3, [r7, #0]
 801dcb6:	785b      	ldrb	r3, [r3, #1]
 801dcb8:	2b01      	cmp	r3, #1
 801dcba:	d116      	bne.n	801dcea <USB_EPStartXfer+0x8aa>
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	2250      	movs	r2, #80	@ 0x50
 801dcc0:	5a9b      	ldrh	r3, [r3, r2]
 801dcc2:	b29b      	uxth	r3, r3
 801dcc4:	001a      	movs	r2, r3
 801dcc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dcc8:	189b      	adds	r3, r3, r2
 801dcca:	673b      	str	r3, [r7, #112]	@ 0x70
 801dccc:	683b      	ldr	r3, [r7, #0]
 801dcce:	781b      	ldrb	r3, [r3, #0]
 801dcd0:	00da      	lsls	r2, r3, #3
 801dcd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dcd4:	18d3      	adds	r3, r2, r3
 801dcd6:	4a83      	ldr	r2, [pc, #524]	@ (801dee4 <USB_EPStartXfer+0xaa4>)
 801dcd8:	4694      	mov	ip, r2
 801dcda:	4463      	add	r3, ip
 801dcdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801dcde:	1d7b      	adds	r3, r7, #5
 801dce0:	33ff      	adds	r3, #255	@ 0xff
 801dce2:	681b      	ldr	r3, [r3, #0]
 801dce4:	b29a      	uxth	r2, r3
 801dce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801dce8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801dcea:	2076      	movs	r0, #118	@ 0x76
 801dcec:	183b      	adds	r3, r7, r0
 801dcee:	683a      	ldr	r2, [r7, #0]
 801dcf0:	8952      	ldrh	r2, [r2, #10]
 801dcf2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801dcf4:	683b      	ldr	r3, [r7, #0]
 801dcf6:	6959      	ldr	r1, [r3, #20]
 801dcf8:	1d7b      	adds	r3, r7, #5
 801dcfa:	33ff      	adds	r3, #255	@ 0xff
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	b29c      	uxth	r4, r3
 801dd00:	183b      	adds	r3, r7, r0
 801dd02:	881a      	ldrh	r2, [r3, #0]
 801dd04:	6878      	ldr	r0, [r7, #4]
 801dd06:	0023      	movs	r3, r4
 801dd08:	f000 fe0c 	bl	801e924 <USB_WritePMA>
 801dd0c:	e0ab      	b.n	801de66 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801dd0e:	683b      	ldr	r3, [r7, #0]
 801dd10:	785b      	ldrb	r3, [r3, #1]
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	d000      	beq.n	801dd18 <USB_EPStartXfer+0x8d8>
 801dd16:	e070      	b.n	801ddfa <USB_EPStartXfer+0x9ba>
 801dd18:	687b      	ldr	r3, [r7, #4]
 801dd1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	2250      	movs	r2, #80	@ 0x50
 801dd20:	5a9b      	ldrh	r3, [r3, r2]
 801dd22:	b29b      	uxth	r3, r3
 801dd24:	001a      	movs	r2, r3
 801dd26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dd28:	189b      	adds	r3, r3, r2
 801dd2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801dd2c:	683b      	ldr	r3, [r7, #0]
 801dd2e:	781b      	ldrb	r3, [r3, #0]
 801dd30:	00da      	lsls	r2, r3, #3
 801dd32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801dd34:	18d3      	adds	r3, r2, r3
 801dd36:	4a6d      	ldr	r2, [pc, #436]	@ (801deec <USB_EPStartXfer+0xaac>)
 801dd38:	4694      	mov	ip, r2
 801dd3a:	4463      	add	r3, ip
 801dd3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801dd3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd40:	881b      	ldrh	r3, [r3, #0]
 801dd42:	b29b      	uxth	r3, r3
 801dd44:	059b      	lsls	r3, r3, #22
 801dd46:	0d9b      	lsrs	r3, r3, #22
 801dd48:	b29a      	uxth	r2, r3
 801dd4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd4c:	801a      	strh	r2, [r3, #0]
 801dd4e:	1d7b      	adds	r3, r7, #5
 801dd50:	33ff      	adds	r3, #255	@ 0xff
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	2b3e      	cmp	r3, #62	@ 0x3e
 801dd56:	d922      	bls.n	801dd9e <USB_EPStartXfer+0x95e>
 801dd58:	1d7b      	adds	r3, r7, #5
 801dd5a:	33ff      	adds	r3, #255	@ 0xff
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	095b      	lsrs	r3, r3, #5
 801dd60:	21ec      	movs	r1, #236	@ 0xec
 801dd62:	187a      	adds	r2, r7, r1
 801dd64:	6013      	str	r3, [r2, #0]
 801dd66:	1d7b      	adds	r3, r7, #5
 801dd68:	33ff      	adds	r3, #255	@ 0xff
 801dd6a:	681b      	ldr	r3, [r3, #0]
 801dd6c:	221f      	movs	r2, #31
 801dd6e:	4013      	ands	r3, r2
 801dd70:	d104      	bne.n	801dd7c <USB_EPStartXfer+0x93c>
 801dd72:	187b      	adds	r3, r7, r1
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	3b01      	subs	r3, #1
 801dd78:	187a      	adds	r2, r7, r1
 801dd7a:	6013      	str	r3, [r2, #0]
 801dd7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd7e:	881b      	ldrh	r3, [r3, #0]
 801dd80:	b29a      	uxth	r2, r3
 801dd82:	23ec      	movs	r3, #236	@ 0xec
 801dd84:	18fb      	adds	r3, r7, r3
 801dd86:	681b      	ldr	r3, [r3, #0]
 801dd88:	b29b      	uxth	r3, r3
 801dd8a:	029b      	lsls	r3, r3, #10
 801dd8c:	b29b      	uxth	r3, r3
 801dd8e:	4313      	orrs	r3, r2
 801dd90:	b29b      	uxth	r3, r3
 801dd92:	4a55      	ldr	r2, [pc, #340]	@ (801dee8 <USB_EPStartXfer+0xaa8>)
 801dd94:	4313      	orrs	r3, r2
 801dd96:	b29a      	uxth	r2, r3
 801dd98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd9a:	801a      	strh	r2, [r3, #0]
 801dd9c:	e052      	b.n	801de44 <USB_EPStartXfer+0xa04>
 801dd9e:	1d7b      	adds	r3, r7, #5
 801dda0:	33ff      	adds	r3, #255	@ 0xff
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d108      	bne.n	801ddba <USB_EPStartXfer+0x97a>
 801dda8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddaa:	881b      	ldrh	r3, [r3, #0]
 801ddac:	b29b      	uxth	r3, r3
 801ddae:	4a4e      	ldr	r2, [pc, #312]	@ (801dee8 <USB_EPStartXfer+0xaa8>)
 801ddb0:	4313      	orrs	r3, r2
 801ddb2:	b29a      	uxth	r2, r3
 801ddb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddb6:	801a      	strh	r2, [r3, #0]
 801ddb8:	e044      	b.n	801de44 <USB_EPStartXfer+0xa04>
 801ddba:	1d7b      	adds	r3, r7, #5
 801ddbc:	33ff      	adds	r3, #255	@ 0xff
 801ddbe:	681b      	ldr	r3, [r3, #0]
 801ddc0:	085b      	lsrs	r3, r3, #1
 801ddc2:	21ec      	movs	r1, #236	@ 0xec
 801ddc4:	187a      	adds	r2, r7, r1
 801ddc6:	6013      	str	r3, [r2, #0]
 801ddc8:	1d7b      	adds	r3, r7, #5
 801ddca:	33ff      	adds	r3, #255	@ 0xff
 801ddcc:	681b      	ldr	r3, [r3, #0]
 801ddce:	2201      	movs	r2, #1
 801ddd0:	4013      	ands	r3, r2
 801ddd2:	d004      	beq.n	801ddde <USB_EPStartXfer+0x99e>
 801ddd4:	187b      	adds	r3, r7, r1
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	3301      	adds	r3, #1
 801ddda:	187a      	adds	r2, r7, r1
 801dddc:	6013      	str	r3, [r2, #0]
 801ddde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dde0:	881b      	ldrh	r3, [r3, #0]
 801dde2:	b29a      	uxth	r2, r3
 801dde4:	23ec      	movs	r3, #236	@ 0xec
 801dde6:	18fb      	adds	r3, r7, r3
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	b29b      	uxth	r3, r3
 801ddec:	029b      	lsls	r3, r3, #10
 801ddee:	b29b      	uxth	r3, r3
 801ddf0:	4313      	orrs	r3, r2
 801ddf2:	b29a      	uxth	r2, r3
 801ddf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ddf6:	801a      	strh	r2, [r3, #0]
 801ddf8:	e024      	b.n	801de44 <USB_EPStartXfer+0xa04>
 801ddfa:	683b      	ldr	r3, [r7, #0]
 801ddfc:	785b      	ldrb	r3, [r3, #1]
 801ddfe:	2b01      	cmp	r3, #1
 801de00:	d120      	bne.n	801de44 <USB_EPStartXfer+0xa04>
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	2184      	movs	r1, #132	@ 0x84
 801de06:	187a      	adds	r2, r7, r1
 801de08:	6013      	str	r3, [r2, #0]
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	2250      	movs	r2, #80	@ 0x50
 801de0e:	5a9b      	ldrh	r3, [r3, r2]
 801de10:	b29b      	uxth	r3, r3
 801de12:	001a      	movs	r2, r3
 801de14:	187b      	adds	r3, r7, r1
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	189b      	adds	r3, r3, r2
 801de1a:	187a      	adds	r2, r7, r1
 801de1c:	6013      	str	r3, [r2, #0]
 801de1e:	683b      	ldr	r3, [r7, #0]
 801de20:	781b      	ldrb	r3, [r3, #0]
 801de22:	00da      	lsls	r2, r3, #3
 801de24:	187b      	adds	r3, r7, r1
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	18d3      	adds	r3, r2, r3
 801de2a:	4a30      	ldr	r2, [pc, #192]	@ (801deec <USB_EPStartXfer+0xaac>)
 801de2c:	4694      	mov	ip, r2
 801de2e:	4463      	add	r3, ip
 801de30:	2180      	movs	r1, #128	@ 0x80
 801de32:	187a      	adds	r2, r7, r1
 801de34:	6013      	str	r3, [r2, #0]
 801de36:	1d7b      	adds	r3, r7, #5
 801de38:	33ff      	adds	r3, #255	@ 0xff
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	b29a      	uxth	r2, r3
 801de3e:	187b      	adds	r3, r7, r1
 801de40:	681b      	ldr	r3, [r3, #0]
 801de42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801de44:	2076      	movs	r0, #118	@ 0x76
 801de46:	183b      	adds	r3, r7, r0
 801de48:	683a      	ldr	r2, [r7, #0]
 801de4a:	8912      	ldrh	r2, [r2, #8]
 801de4c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801de4e:	683b      	ldr	r3, [r7, #0]
 801de50:	6959      	ldr	r1, [r3, #20]
 801de52:	1d7b      	adds	r3, r7, #5
 801de54:	33ff      	adds	r3, #255	@ 0xff
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	b29c      	uxth	r4, r3
 801de5a:	183b      	adds	r3, r7, r0
 801de5c:	881a      	ldrh	r2, [r3, #0]
 801de5e:	6878      	ldr	r0, [r7, #4]
 801de60:	0023      	movs	r3, r4
 801de62:	f000 fd5f 	bl	801e924 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801de66:	687a      	ldr	r2, [r7, #4]
 801de68:	683b      	ldr	r3, [r7, #0]
 801de6a:	781b      	ldrb	r3, [r3, #0]
 801de6c:	009b      	lsls	r3, r3, #2
 801de6e:	18d3      	adds	r3, r2, r3
 801de70:	881b      	ldrh	r3, [r3, #0]
 801de72:	b29a      	uxth	r2, r3
 801de74:	200a      	movs	r0, #10
 801de76:	183b      	adds	r3, r7, r0
 801de78:	491d      	ldr	r1, [pc, #116]	@ (801def0 <USB_EPStartXfer+0xab0>)
 801de7a:	400a      	ands	r2, r1
 801de7c:	801a      	strh	r2, [r3, #0]
 801de7e:	183b      	adds	r3, r7, r0
 801de80:	183a      	adds	r2, r7, r0
 801de82:	8812      	ldrh	r2, [r2, #0]
 801de84:	2110      	movs	r1, #16
 801de86:	404a      	eors	r2, r1
 801de88:	801a      	strh	r2, [r3, #0]
 801de8a:	183b      	adds	r3, r7, r0
 801de8c:	183a      	adds	r2, r7, r0
 801de8e:	8812      	ldrh	r2, [r2, #0]
 801de90:	2120      	movs	r1, #32
 801de92:	404a      	eors	r2, r1
 801de94:	801a      	strh	r2, [r3, #0]
 801de96:	687a      	ldr	r2, [r7, #4]
 801de98:	683b      	ldr	r3, [r7, #0]
 801de9a:	781b      	ldrb	r3, [r3, #0]
 801de9c:	009b      	lsls	r3, r3, #2
 801de9e:	18d3      	adds	r3, r2, r3
 801dea0:	183a      	adds	r2, r7, r0
 801dea2:	8812      	ldrh	r2, [r2, #0]
 801dea4:	4913      	ldr	r1, [pc, #76]	@ (801def4 <USB_EPStartXfer+0xab4>)
 801dea6:	430a      	orrs	r2, r1
 801dea8:	b292      	uxth	r2, r2
 801deaa:	801a      	strh	r2, [r3, #0]
 801deac:	f000 fbf4 	bl	801e698 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801deb0:	683b      	ldr	r3, [r7, #0]
 801deb2:	7b1b      	ldrb	r3, [r3, #12]
 801deb4:	2b00      	cmp	r3, #0
 801deb6:	d000      	beq.n	801deba <USB_EPStartXfer+0xa7a>
 801deb8:	e0a9      	b.n	801e00e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801deba:	683b      	ldr	r3, [r7, #0]
 801debc:	699a      	ldr	r2, [r3, #24]
 801debe:	683b      	ldr	r3, [r7, #0]
 801dec0:	691b      	ldr	r3, [r3, #16]
 801dec2:	429a      	cmp	r2, r3
 801dec4:	d918      	bls.n	801def8 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801dec6:	683b      	ldr	r3, [r7, #0]
 801dec8:	691b      	ldr	r3, [r3, #16]
 801deca:	1d7a      	adds	r2, r7, #5
 801decc:	32ff      	adds	r2, #255	@ 0xff
 801dece:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801ded0:	683b      	ldr	r3, [r7, #0]
 801ded2:	699a      	ldr	r2, [r3, #24]
 801ded4:	1d7b      	adds	r3, r7, #5
 801ded6:	33ff      	adds	r3, #255	@ 0xff
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	1ad2      	subs	r2, r2, r3
 801dedc:	683b      	ldr	r3, [r7, #0]
 801dede:	619a      	str	r2, [r3, #24]
 801dee0:	e012      	b.n	801df08 <USB_EPStartXfer+0xac8>
 801dee2:	46c0      	nop			@ (mov r8, r8)
 801dee4:	00000406 	.word	0x00000406
 801dee8:	ffff8000 	.word	0xffff8000
 801deec:	00000402 	.word	0x00000402
 801def0:	ffff8fbf 	.word	0xffff8fbf
 801def4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801def8:	683b      	ldr	r3, [r7, #0]
 801defa:	699b      	ldr	r3, [r3, #24]
 801defc:	1d7a      	adds	r2, r7, #5
 801defe:	32ff      	adds	r2, #255	@ 0xff
 801df00:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801df02:	683b      	ldr	r3, [r7, #0]
 801df04:	2200      	movs	r2, #0
 801df06:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	2190      	movs	r1, #144	@ 0x90
 801df0c:	187a      	adds	r2, r7, r1
 801df0e:	6013      	str	r3, [r2, #0]
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	2250      	movs	r2, #80	@ 0x50
 801df14:	5a9b      	ldrh	r3, [r3, r2]
 801df16:	b29b      	uxth	r3, r3
 801df18:	001a      	movs	r2, r3
 801df1a:	187b      	adds	r3, r7, r1
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	189b      	adds	r3, r3, r2
 801df20:	187a      	adds	r2, r7, r1
 801df22:	6013      	str	r3, [r2, #0]
 801df24:	683b      	ldr	r3, [r7, #0]
 801df26:	781b      	ldrb	r3, [r3, #0]
 801df28:	00da      	lsls	r2, r3, #3
 801df2a:	187b      	adds	r3, r7, r1
 801df2c:	681b      	ldr	r3, [r3, #0]
 801df2e:	18d3      	adds	r3, r2, r3
 801df30:	4acf      	ldr	r2, [pc, #828]	@ (801e270 <USB_EPStartXfer+0xe30>)
 801df32:	4694      	mov	ip, r2
 801df34:	4463      	add	r3, ip
 801df36:	218c      	movs	r1, #140	@ 0x8c
 801df38:	187a      	adds	r2, r7, r1
 801df3a:	6013      	str	r3, [r2, #0]
 801df3c:	187b      	adds	r3, r7, r1
 801df3e:	681b      	ldr	r3, [r3, #0]
 801df40:	881b      	ldrh	r3, [r3, #0]
 801df42:	b29b      	uxth	r3, r3
 801df44:	059b      	lsls	r3, r3, #22
 801df46:	0d9b      	lsrs	r3, r3, #22
 801df48:	b29a      	uxth	r2, r3
 801df4a:	187b      	adds	r3, r7, r1
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	801a      	strh	r2, [r3, #0]
 801df50:	1d7b      	adds	r3, r7, #5
 801df52:	33ff      	adds	r3, #255	@ 0xff
 801df54:	681b      	ldr	r3, [r3, #0]
 801df56:	2b3e      	cmp	r3, #62	@ 0x3e
 801df58:	d925      	bls.n	801dfa6 <USB_EPStartXfer+0xb66>
 801df5a:	1d7b      	adds	r3, r7, #5
 801df5c:	33ff      	adds	r3, #255	@ 0xff
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	095b      	lsrs	r3, r3, #5
 801df62:	21e8      	movs	r1, #232	@ 0xe8
 801df64:	187a      	adds	r2, r7, r1
 801df66:	6013      	str	r3, [r2, #0]
 801df68:	1d7b      	adds	r3, r7, #5
 801df6a:	33ff      	adds	r3, #255	@ 0xff
 801df6c:	681b      	ldr	r3, [r3, #0]
 801df6e:	221f      	movs	r2, #31
 801df70:	4013      	ands	r3, r2
 801df72:	d104      	bne.n	801df7e <USB_EPStartXfer+0xb3e>
 801df74:	187b      	adds	r3, r7, r1
 801df76:	681b      	ldr	r3, [r3, #0]
 801df78:	3b01      	subs	r3, #1
 801df7a:	187a      	adds	r2, r7, r1
 801df7c:	6013      	str	r3, [r2, #0]
 801df7e:	218c      	movs	r1, #140	@ 0x8c
 801df80:	187b      	adds	r3, r7, r1
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	881b      	ldrh	r3, [r3, #0]
 801df86:	b29a      	uxth	r2, r3
 801df88:	23e8      	movs	r3, #232	@ 0xe8
 801df8a:	18fb      	adds	r3, r7, r3
 801df8c:	681b      	ldr	r3, [r3, #0]
 801df8e:	b29b      	uxth	r3, r3
 801df90:	029b      	lsls	r3, r3, #10
 801df92:	b29b      	uxth	r3, r3
 801df94:	4313      	orrs	r3, r2
 801df96:	b29b      	uxth	r3, r3
 801df98:	4ab6      	ldr	r2, [pc, #728]	@ (801e274 <USB_EPStartXfer+0xe34>)
 801df9a:	4313      	orrs	r3, r2
 801df9c:	b29a      	uxth	r2, r3
 801df9e:	187b      	adds	r3, r7, r1
 801dfa0:	681b      	ldr	r3, [r3, #0]
 801dfa2:	801a      	strh	r2, [r3, #0]
 801dfa4:	e353      	b.n	801e64e <USB_EPStartXfer+0x120e>
 801dfa6:	1d7b      	adds	r3, r7, #5
 801dfa8:	33ff      	adds	r3, #255	@ 0xff
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	d10b      	bne.n	801dfc8 <USB_EPStartXfer+0xb88>
 801dfb0:	218c      	movs	r1, #140	@ 0x8c
 801dfb2:	187b      	adds	r3, r7, r1
 801dfb4:	681b      	ldr	r3, [r3, #0]
 801dfb6:	881b      	ldrh	r3, [r3, #0]
 801dfb8:	b29b      	uxth	r3, r3
 801dfba:	4aae      	ldr	r2, [pc, #696]	@ (801e274 <USB_EPStartXfer+0xe34>)
 801dfbc:	4313      	orrs	r3, r2
 801dfbe:	b29a      	uxth	r2, r3
 801dfc0:	187b      	adds	r3, r7, r1
 801dfc2:	681b      	ldr	r3, [r3, #0]
 801dfc4:	801a      	strh	r2, [r3, #0]
 801dfc6:	e342      	b.n	801e64e <USB_EPStartXfer+0x120e>
 801dfc8:	1d7b      	adds	r3, r7, #5
 801dfca:	33ff      	adds	r3, #255	@ 0xff
 801dfcc:	681b      	ldr	r3, [r3, #0]
 801dfce:	085b      	lsrs	r3, r3, #1
 801dfd0:	21e8      	movs	r1, #232	@ 0xe8
 801dfd2:	187a      	adds	r2, r7, r1
 801dfd4:	6013      	str	r3, [r2, #0]
 801dfd6:	1d7b      	adds	r3, r7, #5
 801dfd8:	33ff      	adds	r3, #255	@ 0xff
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	2201      	movs	r2, #1
 801dfde:	4013      	ands	r3, r2
 801dfe0:	d004      	beq.n	801dfec <USB_EPStartXfer+0xbac>
 801dfe2:	187b      	adds	r3, r7, r1
 801dfe4:	681b      	ldr	r3, [r3, #0]
 801dfe6:	3301      	adds	r3, #1
 801dfe8:	187a      	adds	r2, r7, r1
 801dfea:	6013      	str	r3, [r2, #0]
 801dfec:	218c      	movs	r1, #140	@ 0x8c
 801dfee:	187b      	adds	r3, r7, r1
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	881b      	ldrh	r3, [r3, #0]
 801dff4:	b29a      	uxth	r2, r3
 801dff6:	23e8      	movs	r3, #232	@ 0xe8
 801dff8:	18fb      	adds	r3, r7, r3
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	b29b      	uxth	r3, r3
 801dffe:	029b      	lsls	r3, r3, #10
 801e000:	b29b      	uxth	r3, r3
 801e002:	4313      	orrs	r3, r2
 801e004:	b29a      	uxth	r2, r3
 801e006:	187b      	adds	r3, r7, r1
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	801a      	strh	r2, [r3, #0]
 801e00c:	e31f      	b.n	801e64e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801e00e:	683b      	ldr	r3, [r7, #0]
 801e010:	78db      	ldrb	r3, [r3, #3]
 801e012:	2b02      	cmp	r3, #2
 801e014:	d000      	beq.n	801e018 <USB_EPStartXfer+0xbd8>
 801e016:	e191      	b.n	801e33c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801e018:	683b      	ldr	r3, [r7, #0]
 801e01a:	785b      	ldrb	r3, [r3, #1]
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	d000      	beq.n	801e022 <USB_EPStartXfer+0xbe2>
 801e020:	e07c      	b.n	801e11c <USB_EPStartXfer+0xcdc>
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	21ac      	movs	r1, #172	@ 0xac
 801e026:	187a      	adds	r2, r7, r1
 801e028:	6013      	str	r3, [r2, #0]
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	2250      	movs	r2, #80	@ 0x50
 801e02e:	5a9b      	ldrh	r3, [r3, r2]
 801e030:	b29b      	uxth	r3, r3
 801e032:	001a      	movs	r2, r3
 801e034:	187b      	adds	r3, r7, r1
 801e036:	681b      	ldr	r3, [r3, #0]
 801e038:	189b      	adds	r3, r3, r2
 801e03a:	187a      	adds	r2, r7, r1
 801e03c:	6013      	str	r3, [r2, #0]
 801e03e:	683b      	ldr	r3, [r7, #0]
 801e040:	781b      	ldrb	r3, [r3, #0]
 801e042:	00da      	lsls	r2, r3, #3
 801e044:	187b      	adds	r3, r7, r1
 801e046:	681b      	ldr	r3, [r3, #0]
 801e048:	18d3      	adds	r3, r2, r3
 801e04a:	4a8b      	ldr	r2, [pc, #556]	@ (801e278 <USB_EPStartXfer+0xe38>)
 801e04c:	4694      	mov	ip, r2
 801e04e:	4463      	add	r3, ip
 801e050:	21a8      	movs	r1, #168	@ 0xa8
 801e052:	187a      	adds	r2, r7, r1
 801e054:	6013      	str	r3, [r2, #0]
 801e056:	187b      	adds	r3, r7, r1
 801e058:	681b      	ldr	r3, [r3, #0]
 801e05a:	881b      	ldrh	r3, [r3, #0]
 801e05c:	b29b      	uxth	r3, r3
 801e05e:	059b      	lsls	r3, r3, #22
 801e060:	0d9b      	lsrs	r3, r3, #22
 801e062:	b29a      	uxth	r2, r3
 801e064:	187b      	adds	r3, r7, r1
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	801a      	strh	r2, [r3, #0]
 801e06a:	683b      	ldr	r3, [r7, #0]
 801e06c:	691b      	ldr	r3, [r3, #16]
 801e06e:	2b3e      	cmp	r3, #62	@ 0x3e
 801e070:	d923      	bls.n	801e0ba <USB_EPStartXfer+0xc7a>
 801e072:	683b      	ldr	r3, [r7, #0]
 801e074:	691b      	ldr	r3, [r3, #16]
 801e076:	095b      	lsrs	r3, r3, #5
 801e078:	21e4      	movs	r1, #228	@ 0xe4
 801e07a:	187a      	adds	r2, r7, r1
 801e07c:	6013      	str	r3, [r2, #0]
 801e07e:	683b      	ldr	r3, [r7, #0]
 801e080:	691b      	ldr	r3, [r3, #16]
 801e082:	221f      	movs	r2, #31
 801e084:	4013      	ands	r3, r2
 801e086:	d104      	bne.n	801e092 <USB_EPStartXfer+0xc52>
 801e088:	187b      	adds	r3, r7, r1
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	3b01      	subs	r3, #1
 801e08e:	187a      	adds	r2, r7, r1
 801e090:	6013      	str	r3, [r2, #0]
 801e092:	21a8      	movs	r1, #168	@ 0xa8
 801e094:	187b      	adds	r3, r7, r1
 801e096:	681b      	ldr	r3, [r3, #0]
 801e098:	881b      	ldrh	r3, [r3, #0]
 801e09a:	b29a      	uxth	r2, r3
 801e09c:	23e4      	movs	r3, #228	@ 0xe4
 801e09e:	18fb      	adds	r3, r7, r3
 801e0a0:	681b      	ldr	r3, [r3, #0]
 801e0a2:	b29b      	uxth	r3, r3
 801e0a4:	029b      	lsls	r3, r3, #10
 801e0a6:	b29b      	uxth	r3, r3
 801e0a8:	4313      	orrs	r3, r2
 801e0aa:	b29b      	uxth	r3, r3
 801e0ac:	4a71      	ldr	r2, [pc, #452]	@ (801e274 <USB_EPStartXfer+0xe34>)
 801e0ae:	4313      	orrs	r3, r2
 801e0b0:	b29a      	uxth	r2, r3
 801e0b2:	187b      	adds	r3, r7, r1
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	801a      	strh	r2, [r3, #0]
 801e0b8:	e054      	b.n	801e164 <USB_EPStartXfer+0xd24>
 801e0ba:	683b      	ldr	r3, [r7, #0]
 801e0bc:	691b      	ldr	r3, [r3, #16]
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d10b      	bne.n	801e0da <USB_EPStartXfer+0xc9a>
 801e0c2:	21a8      	movs	r1, #168	@ 0xa8
 801e0c4:	187b      	adds	r3, r7, r1
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	881b      	ldrh	r3, [r3, #0]
 801e0ca:	b29b      	uxth	r3, r3
 801e0cc:	4a69      	ldr	r2, [pc, #420]	@ (801e274 <USB_EPStartXfer+0xe34>)
 801e0ce:	4313      	orrs	r3, r2
 801e0d0:	b29a      	uxth	r2, r3
 801e0d2:	187b      	adds	r3, r7, r1
 801e0d4:	681b      	ldr	r3, [r3, #0]
 801e0d6:	801a      	strh	r2, [r3, #0]
 801e0d8:	e044      	b.n	801e164 <USB_EPStartXfer+0xd24>
 801e0da:	683b      	ldr	r3, [r7, #0]
 801e0dc:	691b      	ldr	r3, [r3, #16]
 801e0de:	085b      	lsrs	r3, r3, #1
 801e0e0:	21e4      	movs	r1, #228	@ 0xe4
 801e0e2:	187a      	adds	r2, r7, r1
 801e0e4:	6013      	str	r3, [r2, #0]
 801e0e6:	683b      	ldr	r3, [r7, #0]
 801e0e8:	691b      	ldr	r3, [r3, #16]
 801e0ea:	2201      	movs	r2, #1
 801e0ec:	4013      	ands	r3, r2
 801e0ee:	d004      	beq.n	801e0fa <USB_EPStartXfer+0xcba>
 801e0f0:	187b      	adds	r3, r7, r1
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	3301      	adds	r3, #1
 801e0f6:	187a      	adds	r2, r7, r1
 801e0f8:	6013      	str	r3, [r2, #0]
 801e0fa:	21a8      	movs	r1, #168	@ 0xa8
 801e0fc:	187b      	adds	r3, r7, r1
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	881b      	ldrh	r3, [r3, #0]
 801e102:	b29a      	uxth	r2, r3
 801e104:	23e4      	movs	r3, #228	@ 0xe4
 801e106:	18fb      	adds	r3, r7, r3
 801e108:	681b      	ldr	r3, [r3, #0]
 801e10a:	b29b      	uxth	r3, r3
 801e10c:	029b      	lsls	r3, r3, #10
 801e10e:	b29b      	uxth	r3, r3
 801e110:	4313      	orrs	r3, r2
 801e112:	b29a      	uxth	r2, r3
 801e114:	187b      	adds	r3, r7, r1
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	801a      	strh	r2, [r3, #0]
 801e11a:	e023      	b.n	801e164 <USB_EPStartXfer+0xd24>
 801e11c:	683b      	ldr	r3, [r7, #0]
 801e11e:	785b      	ldrb	r3, [r3, #1]
 801e120:	2b01      	cmp	r3, #1
 801e122:	d11f      	bne.n	801e164 <USB_EPStartXfer+0xd24>
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	21b4      	movs	r1, #180	@ 0xb4
 801e128:	187a      	adds	r2, r7, r1
 801e12a:	6013      	str	r3, [r2, #0]
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	2250      	movs	r2, #80	@ 0x50
 801e130:	5a9b      	ldrh	r3, [r3, r2]
 801e132:	b29b      	uxth	r3, r3
 801e134:	001a      	movs	r2, r3
 801e136:	187b      	adds	r3, r7, r1
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	189b      	adds	r3, r3, r2
 801e13c:	187a      	adds	r2, r7, r1
 801e13e:	6013      	str	r3, [r2, #0]
 801e140:	683b      	ldr	r3, [r7, #0]
 801e142:	781b      	ldrb	r3, [r3, #0]
 801e144:	00da      	lsls	r2, r3, #3
 801e146:	187b      	adds	r3, r7, r1
 801e148:	681b      	ldr	r3, [r3, #0]
 801e14a:	18d3      	adds	r3, r2, r3
 801e14c:	4a4a      	ldr	r2, [pc, #296]	@ (801e278 <USB_EPStartXfer+0xe38>)
 801e14e:	4694      	mov	ip, r2
 801e150:	4463      	add	r3, ip
 801e152:	21b0      	movs	r1, #176	@ 0xb0
 801e154:	187a      	adds	r2, r7, r1
 801e156:	6013      	str	r3, [r2, #0]
 801e158:	683b      	ldr	r3, [r7, #0]
 801e15a:	691b      	ldr	r3, [r3, #16]
 801e15c:	b29a      	uxth	r2, r3
 801e15e:	187b      	adds	r3, r7, r1
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	801a      	strh	r2, [r3, #0]
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	22a4      	movs	r2, #164	@ 0xa4
 801e168:	18ba      	adds	r2, r7, r2
 801e16a:	6013      	str	r3, [r2, #0]
 801e16c:	683b      	ldr	r3, [r7, #0]
 801e16e:	785b      	ldrb	r3, [r3, #1]
 801e170:	2b00      	cmp	r3, #0
 801e172:	d000      	beq.n	801e176 <USB_EPStartXfer+0xd36>
 801e174:	e082      	b.n	801e27c <USB_EPStartXfer+0xe3c>
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	219c      	movs	r1, #156	@ 0x9c
 801e17a:	187a      	adds	r2, r7, r1
 801e17c:	6013      	str	r3, [r2, #0]
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	2250      	movs	r2, #80	@ 0x50
 801e182:	5a9b      	ldrh	r3, [r3, r2]
 801e184:	b29b      	uxth	r3, r3
 801e186:	001a      	movs	r2, r3
 801e188:	187b      	adds	r3, r7, r1
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	189b      	adds	r3, r3, r2
 801e18e:	187a      	adds	r2, r7, r1
 801e190:	6013      	str	r3, [r2, #0]
 801e192:	683b      	ldr	r3, [r7, #0]
 801e194:	781b      	ldrb	r3, [r3, #0]
 801e196:	00da      	lsls	r2, r3, #3
 801e198:	187b      	adds	r3, r7, r1
 801e19a:	681b      	ldr	r3, [r3, #0]
 801e19c:	18d3      	adds	r3, r2, r3
 801e19e:	4a34      	ldr	r2, [pc, #208]	@ (801e270 <USB_EPStartXfer+0xe30>)
 801e1a0:	4694      	mov	ip, r2
 801e1a2:	4463      	add	r3, ip
 801e1a4:	2198      	movs	r1, #152	@ 0x98
 801e1a6:	187a      	adds	r2, r7, r1
 801e1a8:	6013      	str	r3, [r2, #0]
 801e1aa:	187b      	adds	r3, r7, r1
 801e1ac:	681b      	ldr	r3, [r3, #0]
 801e1ae:	881b      	ldrh	r3, [r3, #0]
 801e1b0:	b29b      	uxth	r3, r3
 801e1b2:	059b      	lsls	r3, r3, #22
 801e1b4:	0d9b      	lsrs	r3, r3, #22
 801e1b6:	b29a      	uxth	r2, r3
 801e1b8:	187b      	adds	r3, r7, r1
 801e1ba:	681b      	ldr	r3, [r3, #0]
 801e1bc:	801a      	strh	r2, [r3, #0]
 801e1be:	683b      	ldr	r3, [r7, #0]
 801e1c0:	691b      	ldr	r3, [r3, #16]
 801e1c2:	2b3e      	cmp	r3, #62	@ 0x3e
 801e1c4:	d923      	bls.n	801e20e <USB_EPStartXfer+0xdce>
 801e1c6:	683b      	ldr	r3, [r7, #0]
 801e1c8:	691b      	ldr	r3, [r3, #16]
 801e1ca:	095b      	lsrs	r3, r3, #5
 801e1cc:	21e0      	movs	r1, #224	@ 0xe0
 801e1ce:	187a      	adds	r2, r7, r1
 801e1d0:	6013      	str	r3, [r2, #0]
 801e1d2:	683b      	ldr	r3, [r7, #0]
 801e1d4:	691b      	ldr	r3, [r3, #16]
 801e1d6:	221f      	movs	r2, #31
 801e1d8:	4013      	ands	r3, r2
 801e1da:	d104      	bne.n	801e1e6 <USB_EPStartXfer+0xda6>
 801e1dc:	187b      	adds	r3, r7, r1
 801e1de:	681b      	ldr	r3, [r3, #0]
 801e1e0:	3b01      	subs	r3, #1
 801e1e2:	187a      	adds	r2, r7, r1
 801e1e4:	6013      	str	r3, [r2, #0]
 801e1e6:	2198      	movs	r1, #152	@ 0x98
 801e1e8:	187b      	adds	r3, r7, r1
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	881b      	ldrh	r3, [r3, #0]
 801e1ee:	b29a      	uxth	r2, r3
 801e1f0:	23e0      	movs	r3, #224	@ 0xe0
 801e1f2:	18fb      	adds	r3, r7, r3
 801e1f4:	681b      	ldr	r3, [r3, #0]
 801e1f6:	b29b      	uxth	r3, r3
 801e1f8:	029b      	lsls	r3, r3, #10
 801e1fa:	b29b      	uxth	r3, r3
 801e1fc:	4313      	orrs	r3, r2
 801e1fe:	b29b      	uxth	r3, r3
 801e200:	4a1c      	ldr	r2, [pc, #112]	@ (801e274 <USB_EPStartXfer+0xe34>)
 801e202:	4313      	orrs	r3, r2
 801e204:	b29a      	uxth	r2, r3
 801e206:	187b      	adds	r3, r7, r1
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	801a      	strh	r2, [r3, #0]
 801e20c:	e057      	b.n	801e2be <USB_EPStartXfer+0xe7e>
 801e20e:	683b      	ldr	r3, [r7, #0]
 801e210:	691b      	ldr	r3, [r3, #16]
 801e212:	2b00      	cmp	r3, #0
 801e214:	d10b      	bne.n	801e22e <USB_EPStartXfer+0xdee>
 801e216:	2198      	movs	r1, #152	@ 0x98
 801e218:	187b      	adds	r3, r7, r1
 801e21a:	681b      	ldr	r3, [r3, #0]
 801e21c:	881b      	ldrh	r3, [r3, #0]
 801e21e:	b29b      	uxth	r3, r3
 801e220:	4a14      	ldr	r2, [pc, #80]	@ (801e274 <USB_EPStartXfer+0xe34>)
 801e222:	4313      	orrs	r3, r2
 801e224:	b29a      	uxth	r2, r3
 801e226:	187b      	adds	r3, r7, r1
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	801a      	strh	r2, [r3, #0]
 801e22c:	e047      	b.n	801e2be <USB_EPStartXfer+0xe7e>
 801e22e:	683b      	ldr	r3, [r7, #0]
 801e230:	691b      	ldr	r3, [r3, #16]
 801e232:	085b      	lsrs	r3, r3, #1
 801e234:	21e0      	movs	r1, #224	@ 0xe0
 801e236:	187a      	adds	r2, r7, r1
 801e238:	6013      	str	r3, [r2, #0]
 801e23a:	683b      	ldr	r3, [r7, #0]
 801e23c:	691b      	ldr	r3, [r3, #16]
 801e23e:	2201      	movs	r2, #1
 801e240:	4013      	ands	r3, r2
 801e242:	d004      	beq.n	801e24e <USB_EPStartXfer+0xe0e>
 801e244:	187b      	adds	r3, r7, r1
 801e246:	681b      	ldr	r3, [r3, #0]
 801e248:	3301      	adds	r3, #1
 801e24a:	187a      	adds	r2, r7, r1
 801e24c:	6013      	str	r3, [r2, #0]
 801e24e:	2198      	movs	r1, #152	@ 0x98
 801e250:	187b      	adds	r3, r7, r1
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	881b      	ldrh	r3, [r3, #0]
 801e256:	b29a      	uxth	r2, r3
 801e258:	23e0      	movs	r3, #224	@ 0xe0
 801e25a:	18fb      	adds	r3, r7, r3
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	b29b      	uxth	r3, r3
 801e260:	029b      	lsls	r3, r3, #10
 801e262:	b29b      	uxth	r3, r3
 801e264:	4313      	orrs	r3, r2
 801e266:	b29a      	uxth	r2, r3
 801e268:	187b      	adds	r3, r7, r1
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	801a      	strh	r2, [r3, #0]
 801e26e:	e026      	b.n	801e2be <USB_EPStartXfer+0xe7e>
 801e270:	00000406 	.word	0x00000406
 801e274:	ffff8000 	.word	0xffff8000
 801e278:	00000402 	.word	0x00000402
 801e27c:	683b      	ldr	r3, [r7, #0]
 801e27e:	785b      	ldrb	r3, [r3, #1]
 801e280:	2b01      	cmp	r3, #1
 801e282:	d11c      	bne.n	801e2be <USB_EPStartXfer+0xe7e>
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	2250      	movs	r2, #80	@ 0x50
 801e288:	5a9b      	ldrh	r3, [r3, r2]
 801e28a:	b29b      	uxth	r3, r3
 801e28c:	001a      	movs	r2, r3
 801e28e:	21a4      	movs	r1, #164	@ 0xa4
 801e290:	187b      	adds	r3, r7, r1
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	189b      	adds	r3, r3, r2
 801e296:	187a      	adds	r2, r7, r1
 801e298:	6013      	str	r3, [r2, #0]
 801e29a:	683b      	ldr	r3, [r7, #0]
 801e29c:	781b      	ldrb	r3, [r3, #0]
 801e29e:	00da      	lsls	r2, r3, #3
 801e2a0:	187b      	adds	r3, r7, r1
 801e2a2:	681b      	ldr	r3, [r3, #0]
 801e2a4:	18d3      	adds	r3, r2, r3
 801e2a6:	4ad2      	ldr	r2, [pc, #840]	@ (801e5f0 <USB_EPStartXfer+0x11b0>)
 801e2a8:	4694      	mov	ip, r2
 801e2aa:	4463      	add	r3, ip
 801e2ac:	21a0      	movs	r1, #160	@ 0xa0
 801e2ae:	187a      	adds	r2, r7, r1
 801e2b0:	6013      	str	r3, [r2, #0]
 801e2b2:	683b      	ldr	r3, [r7, #0]
 801e2b4:	691b      	ldr	r3, [r3, #16]
 801e2b6:	b29a      	uxth	r2, r3
 801e2b8:	187b      	adds	r3, r7, r1
 801e2ba:	681b      	ldr	r3, [r3, #0]
 801e2bc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801e2be:	683b      	ldr	r3, [r7, #0]
 801e2c0:	69db      	ldr	r3, [r3, #28]
 801e2c2:	2b00      	cmp	r3, #0
 801e2c4:	d100      	bne.n	801e2c8 <USB_EPStartXfer+0xe88>
 801e2c6:	e1c2      	b.n	801e64e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801e2c8:	687a      	ldr	r2, [r7, #4]
 801e2ca:	683b      	ldr	r3, [r7, #0]
 801e2cc:	781b      	ldrb	r3, [r3, #0]
 801e2ce:	009b      	lsls	r3, r3, #2
 801e2d0:	18d2      	adds	r2, r2, r3
 801e2d2:	2196      	movs	r1, #150	@ 0x96
 801e2d4:	187b      	adds	r3, r7, r1
 801e2d6:	8812      	ldrh	r2, [r2, #0]
 801e2d8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801e2da:	187b      	adds	r3, r7, r1
 801e2dc:	881a      	ldrh	r2, [r3, #0]
 801e2de:	2380      	movs	r3, #128	@ 0x80
 801e2e0:	01db      	lsls	r3, r3, #7
 801e2e2:	4013      	ands	r3, r2
 801e2e4:	d004      	beq.n	801e2f0 <USB_EPStartXfer+0xeb0>
 801e2e6:	187b      	adds	r3, r7, r1
 801e2e8:	881b      	ldrh	r3, [r3, #0]
 801e2ea:	2240      	movs	r2, #64	@ 0x40
 801e2ec:	4013      	ands	r3, r2
 801e2ee:	d10d      	bne.n	801e30c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801e2f0:	2196      	movs	r1, #150	@ 0x96
 801e2f2:	187b      	adds	r3, r7, r1
 801e2f4:	881a      	ldrh	r2, [r3, #0]
 801e2f6:	2380      	movs	r3, #128	@ 0x80
 801e2f8:	01db      	lsls	r3, r3, #7
 801e2fa:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801e2fc:	d000      	beq.n	801e300 <USB_EPStartXfer+0xec0>
 801e2fe:	e1a6      	b.n	801e64e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801e300:	187b      	adds	r3, r7, r1
 801e302:	881b      	ldrh	r3, [r3, #0]
 801e304:	2240      	movs	r2, #64	@ 0x40
 801e306:	4013      	ands	r3, r2
 801e308:	d000      	beq.n	801e30c <USB_EPStartXfer+0xecc>
 801e30a:	e1a0      	b.n	801e64e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801e30c:	687a      	ldr	r2, [r7, #4]
 801e30e:	683b      	ldr	r3, [r7, #0]
 801e310:	781b      	ldrb	r3, [r3, #0]
 801e312:	009b      	lsls	r3, r3, #2
 801e314:	18d3      	adds	r3, r2, r3
 801e316:	881b      	ldrh	r3, [r3, #0]
 801e318:	b29a      	uxth	r2, r3
 801e31a:	2094      	movs	r0, #148	@ 0x94
 801e31c:	183b      	adds	r3, r7, r0
 801e31e:	49b5      	ldr	r1, [pc, #724]	@ (801e5f4 <USB_EPStartXfer+0x11b4>)
 801e320:	400a      	ands	r2, r1
 801e322:	801a      	strh	r2, [r3, #0]
 801e324:	687a      	ldr	r2, [r7, #4]
 801e326:	683b      	ldr	r3, [r7, #0]
 801e328:	781b      	ldrb	r3, [r3, #0]
 801e32a:	009b      	lsls	r3, r3, #2
 801e32c:	18d3      	adds	r3, r2, r3
 801e32e:	183a      	adds	r2, r7, r0
 801e330:	8812      	ldrh	r2, [r2, #0]
 801e332:	49b1      	ldr	r1, [pc, #708]	@ (801e5f8 <USB_EPStartXfer+0x11b8>)
 801e334:	430a      	orrs	r2, r1
 801e336:	b292      	uxth	r2, r2
 801e338:	801a      	strh	r2, [r3, #0]
 801e33a:	e188      	b.n	801e64e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801e33c:	683b      	ldr	r3, [r7, #0]
 801e33e:	78db      	ldrb	r3, [r3, #3]
 801e340:	2b01      	cmp	r3, #1
 801e342:	d000      	beq.n	801e346 <USB_EPStartXfer+0xf06>
 801e344:	e181      	b.n	801e64a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801e346:	683b      	ldr	r3, [r7, #0]
 801e348:	699a      	ldr	r2, [r3, #24]
 801e34a:	683b      	ldr	r3, [r7, #0]
 801e34c:	691b      	ldr	r3, [r3, #16]
 801e34e:	429a      	cmp	r2, r3
 801e350:	d90d      	bls.n	801e36e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801e352:	683b      	ldr	r3, [r7, #0]
 801e354:	691b      	ldr	r3, [r3, #16]
 801e356:	1d7a      	adds	r2, r7, #5
 801e358:	32ff      	adds	r2, #255	@ 0xff
 801e35a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801e35c:	683b      	ldr	r3, [r7, #0]
 801e35e:	699a      	ldr	r2, [r3, #24]
 801e360:	1d7b      	adds	r3, r7, #5
 801e362:	33ff      	adds	r3, #255	@ 0xff
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	1ad2      	subs	r2, r2, r3
 801e368:	683b      	ldr	r3, [r7, #0]
 801e36a:	619a      	str	r2, [r3, #24]
 801e36c:	e007      	b.n	801e37e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801e36e:	683b      	ldr	r3, [r7, #0]
 801e370:	699b      	ldr	r3, [r3, #24]
 801e372:	1d7a      	adds	r2, r7, #5
 801e374:	32ff      	adds	r2, #255	@ 0xff
 801e376:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801e378:	683b      	ldr	r3, [r7, #0]
 801e37a:	2200      	movs	r2, #0
 801e37c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801e37e:	683b      	ldr	r3, [r7, #0]
 801e380:	785b      	ldrb	r3, [r3, #1]
 801e382:	2b00      	cmp	r3, #0
 801e384:	d000      	beq.n	801e388 <USB_EPStartXfer+0xf48>
 801e386:	e082      	b.n	801e48e <USB_EPStartXfer+0x104e>
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	21cc      	movs	r1, #204	@ 0xcc
 801e38c:	187a      	adds	r2, r7, r1
 801e38e:	6013      	str	r3, [r2, #0]
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	2250      	movs	r2, #80	@ 0x50
 801e394:	5a9b      	ldrh	r3, [r3, r2]
 801e396:	b29b      	uxth	r3, r3
 801e398:	001a      	movs	r2, r3
 801e39a:	187b      	adds	r3, r7, r1
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	189b      	adds	r3, r3, r2
 801e3a0:	187a      	adds	r2, r7, r1
 801e3a2:	6013      	str	r3, [r2, #0]
 801e3a4:	683b      	ldr	r3, [r7, #0]
 801e3a6:	781b      	ldrb	r3, [r3, #0]
 801e3a8:	00da      	lsls	r2, r3, #3
 801e3aa:	187b      	adds	r3, r7, r1
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	18d3      	adds	r3, r2, r3
 801e3b0:	4a92      	ldr	r2, [pc, #584]	@ (801e5fc <USB_EPStartXfer+0x11bc>)
 801e3b2:	4694      	mov	ip, r2
 801e3b4:	4463      	add	r3, ip
 801e3b6:	21c8      	movs	r1, #200	@ 0xc8
 801e3b8:	187a      	adds	r2, r7, r1
 801e3ba:	6013      	str	r3, [r2, #0]
 801e3bc:	187b      	adds	r3, r7, r1
 801e3be:	681b      	ldr	r3, [r3, #0]
 801e3c0:	881b      	ldrh	r3, [r3, #0]
 801e3c2:	b29b      	uxth	r3, r3
 801e3c4:	059b      	lsls	r3, r3, #22
 801e3c6:	0d9b      	lsrs	r3, r3, #22
 801e3c8:	b29a      	uxth	r2, r3
 801e3ca:	187b      	adds	r3, r7, r1
 801e3cc:	681b      	ldr	r3, [r3, #0]
 801e3ce:	801a      	strh	r2, [r3, #0]
 801e3d0:	1d7b      	adds	r3, r7, #5
 801e3d2:	33ff      	adds	r3, #255	@ 0xff
 801e3d4:	681b      	ldr	r3, [r3, #0]
 801e3d6:	2b3e      	cmp	r3, #62	@ 0x3e
 801e3d8:	d925      	bls.n	801e426 <USB_EPStartXfer+0xfe6>
 801e3da:	1d7b      	adds	r3, r7, #5
 801e3dc:	33ff      	adds	r3, #255	@ 0xff
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	095b      	lsrs	r3, r3, #5
 801e3e2:	21dc      	movs	r1, #220	@ 0xdc
 801e3e4:	187a      	adds	r2, r7, r1
 801e3e6:	6013      	str	r3, [r2, #0]
 801e3e8:	1d7b      	adds	r3, r7, #5
 801e3ea:	33ff      	adds	r3, #255	@ 0xff
 801e3ec:	681b      	ldr	r3, [r3, #0]
 801e3ee:	221f      	movs	r2, #31
 801e3f0:	4013      	ands	r3, r2
 801e3f2:	d104      	bne.n	801e3fe <USB_EPStartXfer+0xfbe>
 801e3f4:	187b      	adds	r3, r7, r1
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	3b01      	subs	r3, #1
 801e3fa:	187a      	adds	r2, r7, r1
 801e3fc:	6013      	str	r3, [r2, #0]
 801e3fe:	21c8      	movs	r1, #200	@ 0xc8
 801e400:	187b      	adds	r3, r7, r1
 801e402:	681b      	ldr	r3, [r3, #0]
 801e404:	881b      	ldrh	r3, [r3, #0]
 801e406:	b29a      	uxth	r2, r3
 801e408:	23dc      	movs	r3, #220	@ 0xdc
 801e40a:	18fb      	adds	r3, r7, r3
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	b29b      	uxth	r3, r3
 801e410:	029b      	lsls	r3, r3, #10
 801e412:	b29b      	uxth	r3, r3
 801e414:	4313      	orrs	r3, r2
 801e416:	b29b      	uxth	r3, r3
 801e418:	4a79      	ldr	r2, [pc, #484]	@ (801e600 <USB_EPStartXfer+0x11c0>)
 801e41a:	4313      	orrs	r3, r2
 801e41c:	b29a      	uxth	r2, r3
 801e41e:	187b      	adds	r3, r7, r1
 801e420:	681b      	ldr	r3, [r3, #0]
 801e422:	801a      	strh	r2, [r3, #0]
 801e424:	e058      	b.n	801e4d8 <USB_EPStartXfer+0x1098>
 801e426:	1d7b      	adds	r3, r7, #5
 801e428:	33ff      	adds	r3, #255	@ 0xff
 801e42a:	681b      	ldr	r3, [r3, #0]
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	d10b      	bne.n	801e448 <USB_EPStartXfer+0x1008>
 801e430:	21c8      	movs	r1, #200	@ 0xc8
 801e432:	187b      	adds	r3, r7, r1
 801e434:	681b      	ldr	r3, [r3, #0]
 801e436:	881b      	ldrh	r3, [r3, #0]
 801e438:	b29b      	uxth	r3, r3
 801e43a:	4a71      	ldr	r2, [pc, #452]	@ (801e600 <USB_EPStartXfer+0x11c0>)
 801e43c:	4313      	orrs	r3, r2
 801e43e:	b29a      	uxth	r2, r3
 801e440:	187b      	adds	r3, r7, r1
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	801a      	strh	r2, [r3, #0]
 801e446:	e047      	b.n	801e4d8 <USB_EPStartXfer+0x1098>
 801e448:	1d7b      	adds	r3, r7, #5
 801e44a:	33ff      	adds	r3, #255	@ 0xff
 801e44c:	681b      	ldr	r3, [r3, #0]
 801e44e:	085b      	lsrs	r3, r3, #1
 801e450:	21dc      	movs	r1, #220	@ 0xdc
 801e452:	187a      	adds	r2, r7, r1
 801e454:	6013      	str	r3, [r2, #0]
 801e456:	1d7b      	adds	r3, r7, #5
 801e458:	33ff      	adds	r3, #255	@ 0xff
 801e45a:	681b      	ldr	r3, [r3, #0]
 801e45c:	2201      	movs	r2, #1
 801e45e:	4013      	ands	r3, r2
 801e460:	d004      	beq.n	801e46c <USB_EPStartXfer+0x102c>
 801e462:	187b      	adds	r3, r7, r1
 801e464:	681b      	ldr	r3, [r3, #0]
 801e466:	3301      	adds	r3, #1
 801e468:	187a      	adds	r2, r7, r1
 801e46a:	6013      	str	r3, [r2, #0]
 801e46c:	21c8      	movs	r1, #200	@ 0xc8
 801e46e:	187b      	adds	r3, r7, r1
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	881b      	ldrh	r3, [r3, #0]
 801e474:	b29a      	uxth	r2, r3
 801e476:	23dc      	movs	r3, #220	@ 0xdc
 801e478:	18fb      	adds	r3, r7, r3
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	b29b      	uxth	r3, r3
 801e47e:	029b      	lsls	r3, r3, #10
 801e480:	b29b      	uxth	r3, r3
 801e482:	4313      	orrs	r3, r2
 801e484:	b29a      	uxth	r2, r3
 801e486:	187b      	adds	r3, r7, r1
 801e488:	681b      	ldr	r3, [r3, #0]
 801e48a:	801a      	strh	r2, [r3, #0]
 801e48c:	e024      	b.n	801e4d8 <USB_EPStartXfer+0x1098>
 801e48e:	683b      	ldr	r3, [r7, #0]
 801e490:	785b      	ldrb	r3, [r3, #1]
 801e492:	2b01      	cmp	r3, #1
 801e494:	d120      	bne.n	801e4d8 <USB_EPStartXfer+0x1098>
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	21d4      	movs	r1, #212	@ 0xd4
 801e49a:	187a      	adds	r2, r7, r1
 801e49c:	6013      	str	r3, [r2, #0]
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	2250      	movs	r2, #80	@ 0x50
 801e4a2:	5a9b      	ldrh	r3, [r3, r2]
 801e4a4:	b29b      	uxth	r3, r3
 801e4a6:	001a      	movs	r2, r3
 801e4a8:	187b      	adds	r3, r7, r1
 801e4aa:	681b      	ldr	r3, [r3, #0]
 801e4ac:	189b      	adds	r3, r3, r2
 801e4ae:	187a      	adds	r2, r7, r1
 801e4b0:	6013      	str	r3, [r2, #0]
 801e4b2:	683b      	ldr	r3, [r7, #0]
 801e4b4:	781b      	ldrb	r3, [r3, #0]
 801e4b6:	00da      	lsls	r2, r3, #3
 801e4b8:	187b      	adds	r3, r7, r1
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	18d3      	adds	r3, r2, r3
 801e4be:	4a4f      	ldr	r2, [pc, #316]	@ (801e5fc <USB_EPStartXfer+0x11bc>)
 801e4c0:	4694      	mov	ip, r2
 801e4c2:	4463      	add	r3, ip
 801e4c4:	21d0      	movs	r1, #208	@ 0xd0
 801e4c6:	187a      	adds	r2, r7, r1
 801e4c8:	6013      	str	r3, [r2, #0]
 801e4ca:	1d7b      	adds	r3, r7, #5
 801e4cc:	33ff      	adds	r3, #255	@ 0xff
 801e4ce:	681b      	ldr	r3, [r3, #0]
 801e4d0:	b29a      	uxth	r2, r3
 801e4d2:	187b      	adds	r3, r7, r1
 801e4d4:	681b      	ldr	r3, [r3, #0]
 801e4d6:	801a      	strh	r2, [r3, #0]
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	22c4      	movs	r2, #196	@ 0xc4
 801e4dc:	18ba      	adds	r2, r7, r2
 801e4de:	6013      	str	r3, [r2, #0]
 801e4e0:	683b      	ldr	r3, [r7, #0]
 801e4e2:	785b      	ldrb	r3, [r3, #1]
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	d000      	beq.n	801e4ea <USB_EPStartXfer+0x10aa>
 801e4e8:	e08c      	b.n	801e604 <USB_EPStartXfer+0x11c4>
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	21bc      	movs	r1, #188	@ 0xbc
 801e4ee:	187a      	adds	r2, r7, r1
 801e4f0:	6013      	str	r3, [r2, #0]
 801e4f2:	687b      	ldr	r3, [r7, #4]
 801e4f4:	2250      	movs	r2, #80	@ 0x50
 801e4f6:	5a9b      	ldrh	r3, [r3, r2]
 801e4f8:	b29b      	uxth	r3, r3
 801e4fa:	001a      	movs	r2, r3
 801e4fc:	187b      	adds	r3, r7, r1
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	189b      	adds	r3, r3, r2
 801e502:	187a      	adds	r2, r7, r1
 801e504:	6013      	str	r3, [r2, #0]
 801e506:	683b      	ldr	r3, [r7, #0]
 801e508:	781b      	ldrb	r3, [r3, #0]
 801e50a:	00da      	lsls	r2, r3, #3
 801e50c:	187b      	adds	r3, r7, r1
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	18d3      	adds	r3, r2, r3
 801e512:	4a37      	ldr	r2, [pc, #220]	@ (801e5f0 <USB_EPStartXfer+0x11b0>)
 801e514:	4694      	mov	ip, r2
 801e516:	4463      	add	r3, ip
 801e518:	21b8      	movs	r1, #184	@ 0xb8
 801e51a:	187a      	adds	r2, r7, r1
 801e51c:	6013      	str	r3, [r2, #0]
 801e51e:	187b      	adds	r3, r7, r1
 801e520:	681b      	ldr	r3, [r3, #0]
 801e522:	881b      	ldrh	r3, [r3, #0]
 801e524:	b29b      	uxth	r3, r3
 801e526:	059b      	lsls	r3, r3, #22
 801e528:	0d9b      	lsrs	r3, r3, #22
 801e52a:	b29a      	uxth	r2, r3
 801e52c:	187b      	adds	r3, r7, r1
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	801a      	strh	r2, [r3, #0]
 801e532:	1d7b      	adds	r3, r7, #5
 801e534:	33ff      	adds	r3, #255	@ 0xff
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	2b3e      	cmp	r3, #62	@ 0x3e
 801e53a:	d925      	bls.n	801e588 <USB_EPStartXfer+0x1148>
 801e53c:	1d7b      	adds	r3, r7, #5
 801e53e:	33ff      	adds	r3, #255	@ 0xff
 801e540:	681b      	ldr	r3, [r3, #0]
 801e542:	095b      	lsrs	r3, r3, #5
 801e544:	21d8      	movs	r1, #216	@ 0xd8
 801e546:	187a      	adds	r2, r7, r1
 801e548:	6013      	str	r3, [r2, #0]
 801e54a:	1d7b      	adds	r3, r7, #5
 801e54c:	33ff      	adds	r3, #255	@ 0xff
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	221f      	movs	r2, #31
 801e552:	4013      	ands	r3, r2
 801e554:	d104      	bne.n	801e560 <USB_EPStartXfer+0x1120>
 801e556:	187b      	adds	r3, r7, r1
 801e558:	681b      	ldr	r3, [r3, #0]
 801e55a:	3b01      	subs	r3, #1
 801e55c:	187a      	adds	r2, r7, r1
 801e55e:	6013      	str	r3, [r2, #0]
 801e560:	21b8      	movs	r1, #184	@ 0xb8
 801e562:	187b      	adds	r3, r7, r1
 801e564:	681b      	ldr	r3, [r3, #0]
 801e566:	881b      	ldrh	r3, [r3, #0]
 801e568:	b29a      	uxth	r2, r3
 801e56a:	23d8      	movs	r3, #216	@ 0xd8
 801e56c:	18fb      	adds	r3, r7, r3
 801e56e:	681b      	ldr	r3, [r3, #0]
 801e570:	b29b      	uxth	r3, r3
 801e572:	029b      	lsls	r3, r3, #10
 801e574:	b29b      	uxth	r3, r3
 801e576:	4313      	orrs	r3, r2
 801e578:	b29b      	uxth	r3, r3
 801e57a:	4a21      	ldr	r2, [pc, #132]	@ (801e600 <USB_EPStartXfer+0x11c0>)
 801e57c:	4313      	orrs	r3, r2
 801e57e:	b29a      	uxth	r2, r3
 801e580:	187b      	adds	r3, r7, r1
 801e582:	681b      	ldr	r3, [r3, #0]
 801e584:	801a      	strh	r2, [r3, #0]
 801e586:	e062      	b.n	801e64e <USB_EPStartXfer+0x120e>
 801e588:	1d7b      	adds	r3, r7, #5
 801e58a:	33ff      	adds	r3, #255	@ 0xff
 801e58c:	681b      	ldr	r3, [r3, #0]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d10b      	bne.n	801e5aa <USB_EPStartXfer+0x116a>
 801e592:	21b8      	movs	r1, #184	@ 0xb8
 801e594:	187b      	adds	r3, r7, r1
 801e596:	681b      	ldr	r3, [r3, #0]
 801e598:	881b      	ldrh	r3, [r3, #0]
 801e59a:	b29b      	uxth	r3, r3
 801e59c:	4a18      	ldr	r2, [pc, #96]	@ (801e600 <USB_EPStartXfer+0x11c0>)
 801e59e:	4313      	orrs	r3, r2
 801e5a0:	b29a      	uxth	r2, r3
 801e5a2:	187b      	adds	r3, r7, r1
 801e5a4:	681b      	ldr	r3, [r3, #0]
 801e5a6:	801a      	strh	r2, [r3, #0]
 801e5a8:	e051      	b.n	801e64e <USB_EPStartXfer+0x120e>
 801e5aa:	1d7b      	adds	r3, r7, #5
 801e5ac:	33ff      	adds	r3, #255	@ 0xff
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	085b      	lsrs	r3, r3, #1
 801e5b2:	21d8      	movs	r1, #216	@ 0xd8
 801e5b4:	187a      	adds	r2, r7, r1
 801e5b6:	6013      	str	r3, [r2, #0]
 801e5b8:	1d7b      	adds	r3, r7, #5
 801e5ba:	33ff      	adds	r3, #255	@ 0xff
 801e5bc:	681b      	ldr	r3, [r3, #0]
 801e5be:	2201      	movs	r2, #1
 801e5c0:	4013      	ands	r3, r2
 801e5c2:	d004      	beq.n	801e5ce <USB_EPStartXfer+0x118e>
 801e5c4:	187b      	adds	r3, r7, r1
 801e5c6:	681b      	ldr	r3, [r3, #0]
 801e5c8:	3301      	adds	r3, #1
 801e5ca:	187a      	adds	r2, r7, r1
 801e5cc:	6013      	str	r3, [r2, #0]
 801e5ce:	21b8      	movs	r1, #184	@ 0xb8
 801e5d0:	187b      	adds	r3, r7, r1
 801e5d2:	681b      	ldr	r3, [r3, #0]
 801e5d4:	881b      	ldrh	r3, [r3, #0]
 801e5d6:	b29a      	uxth	r2, r3
 801e5d8:	23d8      	movs	r3, #216	@ 0xd8
 801e5da:	18fb      	adds	r3, r7, r3
 801e5dc:	681b      	ldr	r3, [r3, #0]
 801e5de:	b29b      	uxth	r3, r3
 801e5e0:	029b      	lsls	r3, r3, #10
 801e5e2:	b29b      	uxth	r3, r3
 801e5e4:	4313      	orrs	r3, r2
 801e5e6:	b29a      	uxth	r2, r3
 801e5e8:	187b      	adds	r3, r7, r1
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	801a      	strh	r2, [r3, #0]
 801e5ee:	e02e      	b.n	801e64e <USB_EPStartXfer+0x120e>
 801e5f0:	00000406 	.word	0x00000406
 801e5f4:	ffff8f8f 	.word	0xffff8f8f
 801e5f8:	ffff80c0 	.word	0xffff80c0
 801e5fc:	00000402 	.word	0x00000402
 801e600:	ffff8000 	.word	0xffff8000
 801e604:	683b      	ldr	r3, [r7, #0]
 801e606:	785b      	ldrb	r3, [r3, #1]
 801e608:	2b01      	cmp	r3, #1
 801e60a:	d120      	bne.n	801e64e <USB_EPStartXfer+0x120e>
 801e60c:	687b      	ldr	r3, [r7, #4]
 801e60e:	2250      	movs	r2, #80	@ 0x50
 801e610:	5a9b      	ldrh	r3, [r3, r2]
 801e612:	b29b      	uxth	r3, r3
 801e614:	001a      	movs	r2, r3
 801e616:	21c4      	movs	r1, #196	@ 0xc4
 801e618:	187b      	adds	r3, r7, r1
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	189b      	adds	r3, r3, r2
 801e61e:	187a      	adds	r2, r7, r1
 801e620:	6013      	str	r3, [r2, #0]
 801e622:	683b      	ldr	r3, [r7, #0]
 801e624:	781b      	ldrb	r3, [r3, #0]
 801e626:	00da      	lsls	r2, r3, #3
 801e628:	187b      	adds	r3, r7, r1
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	18d3      	adds	r3, r2, r3
 801e62e:	4a1d      	ldr	r2, [pc, #116]	@ (801e6a4 <USB_EPStartXfer+0x1264>)
 801e630:	4694      	mov	ip, r2
 801e632:	4463      	add	r3, ip
 801e634:	21c0      	movs	r1, #192	@ 0xc0
 801e636:	187a      	adds	r2, r7, r1
 801e638:	6013      	str	r3, [r2, #0]
 801e63a:	1d7b      	adds	r3, r7, #5
 801e63c:	33ff      	adds	r3, #255	@ 0xff
 801e63e:	681b      	ldr	r3, [r3, #0]
 801e640:	b29a      	uxth	r2, r3
 801e642:	187b      	adds	r3, r7, r1
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	801a      	strh	r2, [r3, #0]
 801e648:	e001      	b.n	801e64e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801e64a:	2301      	movs	r3, #1
 801e64c:	e025      	b.n	801e69a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e64e:	687a      	ldr	r2, [r7, #4]
 801e650:	683b      	ldr	r3, [r7, #0]
 801e652:	781b      	ldrb	r3, [r3, #0]
 801e654:	009b      	lsls	r3, r3, #2
 801e656:	18d3      	adds	r3, r2, r3
 801e658:	881b      	ldrh	r3, [r3, #0]
 801e65a:	b29a      	uxth	r2, r3
 801e65c:	208a      	movs	r0, #138	@ 0x8a
 801e65e:	183b      	adds	r3, r7, r0
 801e660:	4911      	ldr	r1, [pc, #68]	@ (801e6a8 <USB_EPStartXfer+0x1268>)
 801e662:	400a      	ands	r2, r1
 801e664:	801a      	strh	r2, [r3, #0]
 801e666:	183b      	adds	r3, r7, r0
 801e668:	183a      	adds	r2, r7, r0
 801e66a:	8812      	ldrh	r2, [r2, #0]
 801e66c:	2180      	movs	r1, #128	@ 0x80
 801e66e:	0149      	lsls	r1, r1, #5
 801e670:	404a      	eors	r2, r1
 801e672:	801a      	strh	r2, [r3, #0]
 801e674:	183b      	adds	r3, r7, r0
 801e676:	183a      	adds	r2, r7, r0
 801e678:	8812      	ldrh	r2, [r2, #0]
 801e67a:	2180      	movs	r1, #128	@ 0x80
 801e67c:	0189      	lsls	r1, r1, #6
 801e67e:	404a      	eors	r2, r1
 801e680:	801a      	strh	r2, [r3, #0]
 801e682:	687a      	ldr	r2, [r7, #4]
 801e684:	683b      	ldr	r3, [r7, #0]
 801e686:	781b      	ldrb	r3, [r3, #0]
 801e688:	009b      	lsls	r3, r3, #2
 801e68a:	18d3      	adds	r3, r2, r3
 801e68c:	183a      	adds	r2, r7, r0
 801e68e:	8812      	ldrh	r2, [r2, #0]
 801e690:	4906      	ldr	r1, [pc, #24]	@ (801e6ac <USB_EPStartXfer+0x126c>)
 801e692:	430a      	orrs	r2, r1
 801e694:	b292      	uxth	r2, r2
 801e696:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801e698:	2300      	movs	r3, #0
}
 801e69a:	0018      	movs	r0, r3
 801e69c:	46bd      	mov	sp, r7
 801e69e:	b043      	add	sp, #268	@ 0x10c
 801e6a0:	bd90      	pop	{r4, r7, pc}
 801e6a2:	46c0      	nop			@ (mov r8, r8)
 801e6a4:	00000406 	.word	0x00000406
 801e6a8:	ffffbf8f 	.word	0xffffbf8f
 801e6ac:	ffff8080 	.word	0xffff8080

0801e6b0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e6b0:	b580      	push	{r7, lr}
 801e6b2:	b084      	sub	sp, #16
 801e6b4:	af00      	add	r7, sp, #0
 801e6b6:	6078      	str	r0, [r7, #4]
 801e6b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801e6ba:	683b      	ldr	r3, [r7, #0]
 801e6bc:	785b      	ldrb	r3, [r3, #1]
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d01d      	beq.n	801e6fe <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801e6c2:	687a      	ldr	r2, [r7, #4]
 801e6c4:	683b      	ldr	r3, [r7, #0]
 801e6c6:	781b      	ldrb	r3, [r3, #0]
 801e6c8:	009b      	lsls	r3, r3, #2
 801e6ca:	18d3      	adds	r3, r2, r3
 801e6cc:	881b      	ldrh	r3, [r3, #0]
 801e6ce:	b29a      	uxth	r2, r3
 801e6d0:	200c      	movs	r0, #12
 801e6d2:	183b      	adds	r3, r7, r0
 801e6d4:	491b      	ldr	r1, [pc, #108]	@ (801e744 <USB_EPSetStall+0x94>)
 801e6d6:	400a      	ands	r2, r1
 801e6d8:	801a      	strh	r2, [r3, #0]
 801e6da:	183b      	adds	r3, r7, r0
 801e6dc:	183a      	adds	r2, r7, r0
 801e6de:	8812      	ldrh	r2, [r2, #0]
 801e6e0:	2110      	movs	r1, #16
 801e6e2:	404a      	eors	r2, r1
 801e6e4:	801a      	strh	r2, [r3, #0]
 801e6e6:	687a      	ldr	r2, [r7, #4]
 801e6e8:	683b      	ldr	r3, [r7, #0]
 801e6ea:	781b      	ldrb	r3, [r3, #0]
 801e6ec:	009b      	lsls	r3, r3, #2
 801e6ee:	18d3      	adds	r3, r2, r3
 801e6f0:	183a      	adds	r2, r7, r0
 801e6f2:	8812      	ldrh	r2, [r2, #0]
 801e6f4:	4914      	ldr	r1, [pc, #80]	@ (801e748 <USB_EPSetStall+0x98>)
 801e6f6:	430a      	orrs	r2, r1
 801e6f8:	b292      	uxth	r2, r2
 801e6fa:	801a      	strh	r2, [r3, #0]
 801e6fc:	e01d      	b.n	801e73a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801e6fe:	687a      	ldr	r2, [r7, #4]
 801e700:	683b      	ldr	r3, [r7, #0]
 801e702:	781b      	ldrb	r3, [r3, #0]
 801e704:	009b      	lsls	r3, r3, #2
 801e706:	18d3      	adds	r3, r2, r3
 801e708:	881b      	ldrh	r3, [r3, #0]
 801e70a:	b29a      	uxth	r2, r3
 801e70c:	200e      	movs	r0, #14
 801e70e:	183b      	adds	r3, r7, r0
 801e710:	490e      	ldr	r1, [pc, #56]	@ (801e74c <USB_EPSetStall+0x9c>)
 801e712:	400a      	ands	r2, r1
 801e714:	801a      	strh	r2, [r3, #0]
 801e716:	183b      	adds	r3, r7, r0
 801e718:	183a      	adds	r2, r7, r0
 801e71a:	8812      	ldrh	r2, [r2, #0]
 801e71c:	2180      	movs	r1, #128	@ 0x80
 801e71e:	0149      	lsls	r1, r1, #5
 801e720:	404a      	eors	r2, r1
 801e722:	801a      	strh	r2, [r3, #0]
 801e724:	687a      	ldr	r2, [r7, #4]
 801e726:	683b      	ldr	r3, [r7, #0]
 801e728:	781b      	ldrb	r3, [r3, #0]
 801e72a:	009b      	lsls	r3, r3, #2
 801e72c:	18d3      	adds	r3, r2, r3
 801e72e:	183a      	adds	r2, r7, r0
 801e730:	8812      	ldrh	r2, [r2, #0]
 801e732:	4905      	ldr	r1, [pc, #20]	@ (801e748 <USB_EPSetStall+0x98>)
 801e734:	430a      	orrs	r2, r1
 801e736:	b292      	uxth	r2, r2
 801e738:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801e73a:	2300      	movs	r3, #0
}
 801e73c:	0018      	movs	r0, r3
 801e73e:	46bd      	mov	sp, r7
 801e740:	b004      	add	sp, #16
 801e742:	bd80      	pop	{r7, pc}
 801e744:	ffff8fbf 	.word	0xffff8fbf
 801e748:	ffff8080 	.word	0xffff8080
 801e74c:	ffffbf8f 	.word	0xffffbf8f

0801e750 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e750:	b580      	push	{r7, lr}
 801e752:	b086      	sub	sp, #24
 801e754:	af00      	add	r7, sp, #0
 801e756:	6078      	str	r0, [r7, #4]
 801e758:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801e75a:	683b      	ldr	r3, [r7, #0]
 801e75c:	7b1b      	ldrb	r3, [r3, #12]
 801e75e:	2b00      	cmp	r3, #0
 801e760:	d000      	beq.n	801e764 <USB_EPClearStall+0x14>
 801e762:	e095      	b.n	801e890 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801e764:	683b      	ldr	r3, [r7, #0]
 801e766:	785b      	ldrb	r3, [r3, #1]
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d046      	beq.n	801e7fa <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e76c:	687a      	ldr	r2, [r7, #4]
 801e76e:	683b      	ldr	r3, [r7, #0]
 801e770:	781b      	ldrb	r3, [r3, #0]
 801e772:	009b      	lsls	r3, r3, #2
 801e774:	18d2      	adds	r2, r2, r3
 801e776:	2110      	movs	r1, #16
 801e778:	187b      	adds	r3, r7, r1
 801e77a:	8812      	ldrh	r2, [r2, #0]
 801e77c:	801a      	strh	r2, [r3, #0]
 801e77e:	187b      	adds	r3, r7, r1
 801e780:	881b      	ldrh	r3, [r3, #0]
 801e782:	2240      	movs	r2, #64	@ 0x40
 801e784:	4013      	ands	r3, r2
 801e786:	d016      	beq.n	801e7b6 <USB_EPClearStall+0x66>
 801e788:	687a      	ldr	r2, [r7, #4]
 801e78a:	683b      	ldr	r3, [r7, #0]
 801e78c:	781b      	ldrb	r3, [r3, #0]
 801e78e:	009b      	lsls	r3, r3, #2
 801e790:	18d3      	adds	r3, r2, r3
 801e792:	881b      	ldrh	r3, [r3, #0]
 801e794:	b29a      	uxth	r2, r3
 801e796:	200e      	movs	r0, #14
 801e798:	183b      	adds	r3, r7, r0
 801e79a:	4940      	ldr	r1, [pc, #256]	@ (801e89c <USB_EPClearStall+0x14c>)
 801e79c:	400a      	ands	r2, r1
 801e79e:	801a      	strh	r2, [r3, #0]
 801e7a0:	687a      	ldr	r2, [r7, #4]
 801e7a2:	683b      	ldr	r3, [r7, #0]
 801e7a4:	781b      	ldrb	r3, [r3, #0]
 801e7a6:	009b      	lsls	r3, r3, #2
 801e7a8:	18d3      	adds	r3, r2, r3
 801e7aa:	183a      	adds	r2, r7, r0
 801e7ac:	8812      	ldrh	r2, [r2, #0]
 801e7ae:	493c      	ldr	r1, [pc, #240]	@ (801e8a0 <USB_EPClearStall+0x150>)
 801e7b0:	430a      	orrs	r2, r1
 801e7b2:	b292      	uxth	r2, r2
 801e7b4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e7b6:	683b      	ldr	r3, [r7, #0]
 801e7b8:	78db      	ldrb	r3, [r3, #3]
 801e7ba:	2b01      	cmp	r3, #1
 801e7bc:	d068      	beq.n	801e890 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801e7be:	687a      	ldr	r2, [r7, #4]
 801e7c0:	683b      	ldr	r3, [r7, #0]
 801e7c2:	781b      	ldrb	r3, [r3, #0]
 801e7c4:	009b      	lsls	r3, r3, #2
 801e7c6:	18d3      	adds	r3, r2, r3
 801e7c8:	881b      	ldrh	r3, [r3, #0]
 801e7ca:	b29a      	uxth	r2, r3
 801e7cc:	200c      	movs	r0, #12
 801e7ce:	183b      	adds	r3, r7, r0
 801e7d0:	4934      	ldr	r1, [pc, #208]	@ (801e8a4 <USB_EPClearStall+0x154>)
 801e7d2:	400a      	ands	r2, r1
 801e7d4:	801a      	strh	r2, [r3, #0]
 801e7d6:	183b      	adds	r3, r7, r0
 801e7d8:	183a      	adds	r2, r7, r0
 801e7da:	8812      	ldrh	r2, [r2, #0]
 801e7dc:	2120      	movs	r1, #32
 801e7de:	404a      	eors	r2, r1
 801e7e0:	801a      	strh	r2, [r3, #0]
 801e7e2:	687a      	ldr	r2, [r7, #4]
 801e7e4:	683b      	ldr	r3, [r7, #0]
 801e7e6:	781b      	ldrb	r3, [r3, #0]
 801e7e8:	009b      	lsls	r3, r3, #2
 801e7ea:	18d3      	adds	r3, r2, r3
 801e7ec:	183a      	adds	r2, r7, r0
 801e7ee:	8812      	ldrh	r2, [r2, #0]
 801e7f0:	492d      	ldr	r1, [pc, #180]	@ (801e8a8 <USB_EPClearStall+0x158>)
 801e7f2:	430a      	orrs	r2, r1
 801e7f4:	b292      	uxth	r2, r2
 801e7f6:	801a      	strh	r2, [r3, #0]
 801e7f8:	e04a      	b.n	801e890 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e7fa:	687a      	ldr	r2, [r7, #4]
 801e7fc:	683b      	ldr	r3, [r7, #0]
 801e7fe:	781b      	ldrb	r3, [r3, #0]
 801e800:	009b      	lsls	r3, r3, #2
 801e802:	18d2      	adds	r2, r2, r3
 801e804:	2116      	movs	r1, #22
 801e806:	187b      	adds	r3, r7, r1
 801e808:	8812      	ldrh	r2, [r2, #0]
 801e80a:	801a      	strh	r2, [r3, #0]
 801e80c:	187b      	adds	r3, r7, r1
 801e80e:	881a      	ldrh	r2, [r3, #0]
 801e810:	2380      	movs	r3, #128	@ 0x80
 801e812:	01db      	lsls	r3, r3, #7
 801e814:	4013      	ands	r3, r2
 801e816:	d016      	beq.n	801e846 <USB_EPClearStall+0xf6>
 801e818:	687a      	ldr	r2, [r7, #4]
 801e81a:	683b      	ldr	r3, [r7, #0]
 801e81c:	781b      	ldrb	r3, [r3, #0]
 801e81e:	009b      	lsls	r3, r3, #2
 801e820:	18d3      	adds	r3, r2, r3
 801e822:	881b      	ldrh	r3, [r3, #0]
 801e824:	b29a      	uxth	r2, r3
 801e826:	2014      	movs	r0, #20
 801e828:	183b      	adds	r3, r7, r0
 801e82a:	491c      	ldr	r1, [pc, #112]	@ (801e89c <USB_EPClearStall+0x14c>)
 801e82c:	400a      	ands	r2, r1
 801e82e:	801a      	strh	r2, [r3, #0]
 801e830:	687a      	ldr	r2, [r7, #4]
 801e832:	683b      	ldr	r3, [r7, #0]
 801e834:	781b      	ldrb	r3, [r3, #0]
 801e836:	009b      	lsls	r3, r3, #2
 801e838:	18d3      	adds	r3, r2, r3
 801e83a:	183a      	adds	r2, r7, r0
 801e83c:	8812      	ldrh	r2, [r2, #0]
 801e83e:	491b      	ldr	r1, [pc, #108]	@ (801e8ac <USB_EPClearStall+0x15c>)
 801e840:	430a      	orrs	r2, r1
 801e842:	b292      	uxth	r2, r2
 801e844:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e846:	687a      	ldr	r2, [r7, #4]
 801e848:	683b      	ldr	r3, [r7, #0]
 801e84a:	781b      	ldrb	r3, [r3, #0]
 801e84c:	009b      	lsls	r3, r3, #2
 801e84e:	18d3      	adds	r3, r2, r3
 801e850:	881b      	ldrh	r3, [r3, #0]
 801e852:	b29a      	uxth	r2, r3
 801e854:	2012      	movs	r0, #18
 801e856:	183b      	adds	r3, r7, r0
 801e858:	4915      	ldr	r1, [pc, #84]	@ (801e8b0 <USB_EPClearStall+0x160>)
 801e85a:	400a      	ands	r2, r1
 801e85c:	801a      	strh	r2, [r3, #0]
 801e85e:	183b      	adds	r3, r7, r0
 801e860:	183a      	adds	r2, r7, r0
 801e862:	8812      	ldrh	r2, [r2, #0]
 801e864:	2180      	movs	r1, #128	@ 0x80
 801e866:	0149      	lsls	r1, r1, #5
 801e868:	404a      	eors	r2, r1
 801e86a:	801a      	strh	r2, [r3, #0]
 801e86c:	183b      	adds	r3, r7, r0
 801e86e:	183a      	adds	r2, r7, r0
 801e870:	8812      	ldrh	r2, [r2, #0]
 801e872:	2180      	movs	r1, #128	@ 0x80
 801e874:	0189      	lsls	r1, r1, #6
 801e876:	404a      	eors	r2, r1
 801e878:	801a      	strh	r2, [r3, #0]
 801e87a:	687a      	ldr	r2, [r7, #4]
 801e87c:	683b      	ldr	r3, [r7, #0]
 801e87e:	781b      	ldrb	r3, [r3, #0]
 801e880:	009b      	lsls	r3, r3, #2
 801e882:	18d3      	adds	r3, r2, r3
 801e884:	183a      	adds	r2, r7, r0
 801e886:	8812      	ldrh	r2, [r2, #0]
 801e888:	4907      	ldr	r1, [pc, #28]	@ (801e8a8 <USB_EPClearStall+0x158>)
 801e88a:	430a      	orrs	r2, r1
 801e88c:	b292      	uxth	r2, r2
 801e88e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801e890:	2300      	movs	r3, #0
}
 801e892:	0018      	movs	r0, r3
 801e894:	46bd      	mov	sp, r7
 801e896:	b006      	add	sp, #24
 801e898:	bd80      	pop	{r7, pc}
 801e89a:	46c0      	nop			@ (mov r8, r8)
 801e89c:	ffff8f8f 	.word	0xffff8f8f
 801e8a0:	ffff80c0 	.word	0xffff80c0
 801e8a4:	ffff8fbf 	.word	0xffff8fbf
 801e8a8:	ffff8080 	.word	0xffff8080
 801e8ac:	ffffc080 	.word	0xffffc080
 801e8b0:	ffffbf8f 	.word	0xffffbf8f

0801e8b4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801e8b4:	b580      	push	{r7, lr}
 801e8b6:	b082      	sub	sp, #8
 801e8b8:	af00      	add	r7, sp, #0
 801e8ba:	6078      	str	r0, [r7, #4]
 801e8bc:	000a      	movs	r2, r1
 801e8be:	1cfb      	adds	r3, r7, #3
 801e8c0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801e8c2:	1cfb      	adds	r3, r7, #3
 801e8c4:	781b      	ldrb	r3, [r3, #0]
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d103      	bne.n	801e8d2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	224c      	movs	r2, #76	@ 0x4c
 801e8ce:	2180      	movs	r1, #128	@ 0x80
 801e8d0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801e8d2:	2300      	movs	r3, #0
}
 801e8d4:	0018      	movs	r0, r3
 801e8d6:	46bd      	mov	sp, r7
 801e8d8:	b002      	add	sp, #8
 801e8da:	bd80      	pop	{r7, pc}

0801e8dc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801e8dc:	b580      	push	{r7, lr}
 801e8de:	b082      	sub	sp, #8
 801e8e0:	af00      	add	r7, sp, #0
 801e8e2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	2258      	movs	r2, #88	@ 0x58
 801e8e8:	5a9b      	ldrh	r3, [r3, r2]
 801e8ea:	b29b      	uxth	r3, r3
 801e8ec:	4a05      	ldr	r2, [pc, #20]	@ (801e904 <USB_DevConnect+0x28>)
 801e8ee:	4313      	orrs	r3, r2
 801e8f0:	b299      	uxth	r1, r3
 801e8f2:	687b      	ldr	r3, [r7, #4]
 801e8f4:	2258      	movs	r2, #88	@ 0x58
 801e8f6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e8f8:	2300      	movs	r3, #0
}
 801e8fa:	0018      	movs	r0, r3
 801e8fc:	46bd      	mov	sp, r7
 801e8fe:	b002      	add	sp, #8
 801e900:	bd80      	pop	{r7, pc}
 801e902:	46c0      	nop			@ (mov r8, r8)
 801e904:	ffff8000 	.word	0xffff8000

0801e908 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801e908:	b580      	push	{r7, lr}
 801e90a:	b084      	sub	sp, #16
 801e90c:	af00      	add	r7, sp, #0
 801e90e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	2244      	movs	r2, #68	@ 0x44
 801e914:	5a9b      	ldrh	r3, [r3, r2]
 801e916:	b29b      	uxth	r3, r3
 801e918:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801e91a:	68fb      	ldr	r3, [r7, #12]
}
 801e91c:	0018      	movs	r0, r3
 801e91e:	46bd      	mov	sp, r7
 801e920:	b004      	add	sp, #16
 801e922:	bd80      	pop	{r7, pc}

0801e924 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801e924:	b580      	push	{r7, lr}
 801e926:	b08a      	sub	sp, #40	@ 0x28
 801e928:	af00      	add	r7, sp, #0
 801e92a:	60f8      	str	r0, [r7, #12]
 801e92c:	60b9      	str	r1, [r7, #8]
 801e92e:	0019      	movs	r1, r3
 801e930:	1dbb      	adds	r3, r7, #6
 801e932:	801a      	strh	r2, [r3, #0]
 801e934:	1d3b      	adds	r3, r7, #4
 801e936:	1c0a      	adds	r2, r1, #0
 801e938:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801e93a:	1d3b      	adds	r3, r7, #4
 801e93c:	881b      	ldrh	r3, [r3, #0]
 801e93e:	3301      	adds	r3, #1
 801e940:	085b      	lsrs	r3, r3, #1
 801e942:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801e944:	68fb      	ldr	r3, [r7, #12]
 801e946:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801e948:	68bb      	ldr	r3, [r7, #8]
 801e94a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801e94c:	1dbb      	adds	r3, r7, #6
 801e94e:	881a      	ldrh	r2, [r3, #0]
 801e950:	697b      	ldr	r3, [r7, #20]
 801e952:	18d3      	adds	r3, r2, r3
 801e954:	2280      	movs	r2, #128	@ 0x80
 801e956:	00d2      	lsls	r2, r2, #3
 801e958:	4694      	mov	ip, r2
 801e95a:	4463      	add	r3, ip
 801e95c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801e95e:	69bb      	ldr	r3, [r7, #24]
 801e960:	627b      	str	r3, [r7, #36]	@ 0x24
 801e962:	e020      	b.n	801e9a6 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801e964:	69fb      	ldr	r3, [r7, #28]
 801e966:	781a      	ldrb	r2, [r3, #0]
 801e968:	2112      	movs	r1, #18
 801e96a:	187b      	adds	r3, r7, r1
 801e96c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801e96e:	69fb      	ldr	r3, [r7, #28]
 801e970:	3301      	adds	r3, #1
 801e972:	781b      	ldrb	r3, [r3, #0]
 801e974:	021b      	lsls	r3, r3, #8
 801e976:	b21a      	sxth	r2, r3
 801e978:	187b      	adds	r3, r7, r1
 801e97a:	2000      	movs	r0, #0
 801e97c:	5e1b      	ldrsh	r3, [r3, r0]
 801e97e:	4313      	orrs	r3, r2
 801e980:	b21a      	sxth	r2, r3
 801e982:	187b      	adds	r3, r7, r1
 801e984:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801e986:	6a3b      	ldr	r3, [r7, #32]
 801e988:	187a      	adds	r2, r7, r1
 801e98a:	8812      	ldrh	r2, [r2, #0]
 801e98c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801e98e:	6a3b      	ldr	r3, [r7, #32]
 801e990:	3302      	adds	r3, #2
 801e992:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801e994:	69fb      	ldr	r3, [r7, #28]
 801e996:	3301      	adds	r3, #1
 801e998:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801e99a:	69fb      	ldr	r3, [r7, #28]
 801e99c:	3301      	adds	r3, #1
 801e99e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801e9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9a2:	3b01      	subs	r3, #1
 801e9a4:	627b      	str	r3, [r7, #36]	@ 0x24
 801e9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	d1db      	bne.n	801e964 <USB_WritePMA+0x40>
  }
}
 801e9ac:	46c0      	nop			@ (mov r8, r8)
 801e9ae:	46c0      	nop			@ (mov r8, r8)
 801e9b0:	46bd      	mov	sp, r7
 801e9b2:	b00a      	add	sp, #40	@ 0x28
 801e9b4:	bd80      	pop	{r7, pc}

0801e9b6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801e9b6:	b580      	push	{r7, lr}
 801e9b8:	b08a      	sub	sp, #40	@ 0x28
 801e9ba:	af00      	add	r7, sp, #0
 801e9bc:	60f8      	str	r0, [r7, #12]
 801e9be:	60b9      	str	r1, [r7, #8]
 801e9c0:	0019      	movs	r1, r3
 801e9c2:	1dbb      	adds	r3, r7, #6
 801e9c4:	801a      	strh	r2, [r3, #0]
 801e9c6:	1d3b      	adds	r3, r7, #4
 801e9c8:	1c0a      	adds	r2, r1, #0
 801e9ca:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801e9cc:	1d3b      	adds	r3, r7, #4
 801e9ce:	881b      	ldrh	r3, [r3, #0]
 801e9d0:	085b      	lsrs	r3, r3, #1
 801e9d2:	b29b      	uxth	r3, r3
 801e9d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801e9d6:	68fb      	ldr	r3, [r7, #12]
 801e9d8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801e9da:	68bb      	ldr	r3, [r7, #8]
 801e9dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801e9de:	1dbb      	adds	r3, r7, #6
 801e9e0:	881a      	ldrh	r2, [r3, #0]
 801e9e2:	697b      	ldr	r3, [r7, #20]
 801e9e4:	18d3      	adds	r3, r2, r3
 801e9e6:	2280      	movs	r2, #128	@ 0x80
 801e9e8:	00d2      	lsls	r2, r2, #3
 801e9ea:	4694      	mov	ip, r2
 801e9ec:	4463      	add	r3, ip
 801e9ee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801e9f0:	69bb      	ldr	r3, [r7, #24]
 801e9f2:	627b      	str	r3, [r7, #36]	@ 0x24
 801e9f4:	e018      	b.n	801ea28 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801e9f6:	6a3b      	ldr	r3, [r7, #32]
 801e9f8:	881b      	ldrh	r3, [r3, #0]
 801e9fa:	b29b      	uxth	r3, r3
 801e9fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801e9fe:	6a3b      	ldr	r3, [r7, #32]
 801ea00:	3302      	adds	r3, #2
 801ea02:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801ea04:	693b      	ldr	r3, [r7, #16]
 801ea06:	b2da      	uxtb	r2, r3
 801ea08:	69fb      	ldr	r3, [r7, #28]
 801ea0a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801ea0c:	69fb      	ldr	r3, [r7, #28]
 801ea0e:	3301      	adds	r3, #1
 801ea10:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801ea12:	693b      	ldr	r3, [r7, #16]
 801ea14:	0a1b      	lsrs	r3, r3, #8
 801ea16:	b2da      	uxtb	r2, r3
 801ea18:	69fb      	ldr	r3, [r7, #28]
 801ea1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801ea1c:	69fb      	ldr	r3, [r7, #28]
 801ea1e:	3301      	adds	r3, #1
 801ea20:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801ea22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea24:	3b01      	subs	r3, #1
 801ea26:	627b      	str	r3, [r7, #36]	@ 0x24
 801ea28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea2a:	2b00      	cmp	r3, #0
 801ea2c:	d1e3      	bne.n	801e9f6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801ea2e:	1d3b      	adds	r3, r7, #4
 801ea30:	881b      	ldrh	r3, [r3, #0]
 801ea32:	2201      	movs	r2, #1
 801ea34:	4013      	ands	r3, r2
 801ea36:	b29b      	uxth	r3, r3
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	d007      	beq.n	801ea4c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801ea3c:	6a3b      	ldr	r3, [r7, #32]
 801ea3e:	881b      	ldrh	r3, [r3, #0]
 801ea40:	b29b      	uxth	r3, r3
 801ea42:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801ea44:	693b      	ldr	r3, [r7, #16]
 801ea46:	b2da      	uxtb	r2, r3
 801ea48:	69fb      	ldr	r3, [r7, #28]
 801ea4a:	701a      	strb	r2, [r3, #0]
  }
}
 801ea4c:	46c0      	nop			@ (mov r8, r8)
 801ea4e:	46bd      	mov	sp, r7
 801ea50:	b00a      	add	sp, #40	@ 0x28
 801ea52:	bd80      	pop	{r7, pc}

0801ea54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801ea54:	b580      	push	{r7, lr}
 801ea56:	b084      	sub	sp, #16
 801ea58:	af00      	add	r7, sp, #0
 801ea5a:	6078      	str	r0, [r7, #4]
 801ea5c:	000a      	movs	r2, r1
 801ea5e:	1cfb      	adds	r3, r7, #3
 801ea60:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801ea62:	230f      	movs	r3, #15
 801ea64:	18fb      	adds	r3, r7, r3
 801ea66:	2200      	movs	r2, #0
 801ea68:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	7c1b      	ldrb	r3, [r3, #16]
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	d116      	bne.n	801eaa0 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801ea72:	2380      	movs	r3, #128	@ 0x80
 801ea74:	009b      	lsls	r3, r3, #2
 801ea76:	6878      	ldr	r0, [r7, #4]
 801ea78:	2202      	movs	r2, #2
 801ea7a:	2181      	movs	r1, #129	@ 0x81
 801ea7c:	f002 f8eb 	bl	8020c56 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	2201      	movs	r2, #1
 801ea84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801ea86:	2380      	movs	r3, #128	@ 0x80
 801ea88:	009b      	lsls	r3, r3, #2
 801ea8a:	6878      	ldr	r0, [r7, #4]
 801ea8c:	2202      	movs	r2, #2
 801ea8e:	2101      	movs	r1, #1
 801ea90:	f002 f8e1 	bl	8020c56 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801ea94:	687a      	ldr	r2, [r7, #4]
 801ea96:	23b6      	movs	r3, #182	@ 0xb6
 801ea98:	005b      	lsls	r3, r3, #1
 801ea9a:	2101      	movs	r1, #1
 801ea9c:	50d1      	str	r1, [r2, r3]
 801ea9e:	e013      	b.n	801eac8 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801eaa0:	6878      	ldr	r0, [r7, #4]
 801eaa2:	2340      	movs	r3, #64	@ 0x40
 801eaa4:	2202      	movs	r2, #2
 801eaa6:	2181      	movs	r1, #129	@ 0x81
 801eaa8:	f002 f8d5 	bl	8020c56 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	2201      	movs	r2, #1
 801eab0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801eab2:	6878      	ldr	r0, [r7, #4]
 801eab4:	2340      	movs	r3, #64	@ 0x40
 801eab6:	2202      	movs	r2, #2
 801eab8:	2101      	movs	r1, #1
 801eaba:	f002 f8cc 	bl	8020c56 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801eabe:	687a      	ldr	r2, [r7, #4]
 801eac0:	23b6      	movs	r3, #182	@ 0xb6
 801eac2:	005b      	lsls	r3, r3, #1
 801eac4:	2101      	movs	r1, #1
 801eac6:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801eac8:	6878      	ldr	r0, [r7, #4]
 801eaca:	2308      	movs	r3, #8
 801eacc:	2203      	movs	r2, #3
 801eace:	2182      	movs	r1, #130	@ 0x82
 801ead0:	f002 f8c1 	bl	8020c56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	2201      	movs	r2, #1
 801ead8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801eada:	2387      	movs	r3, #135	@ 0x87
 801eadc:	009b      	lsls	r3, r3, #2
 801eade:	0018      	movs	r0, r3
 801eae0:	f002 fa52 	bl	8020f88 <USBD_static_malloc>
 801eae4:	0001      	movs	r1, r0
 801eae6:	687a      	ldr	r2, [r7, #4]
 801eae8:	23ae      	movs	r3, #174	@ 0xae
 801eaea:	009b      	lsls	r3, r3, #2
 801eaec:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801eaee:	687a      	ldr	r2, [r7, #4]
 801eaf0:	23ae      	movs	r3, #174	@ 0xae
 801eaf2:	009b      	lsls	r3, r3, #2
 801eaf4:	58d3      	ldr	r3, [r2, r3]
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	d104      	bne.n	801eb04 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801eafa:	230f      	movs	r3, #15
 801eafc:	18fb      	adds	r3, r7, r3
 801eafe:	2201      	movs	r2, #1
 801eb00:	701a      	strb	r2, [r3, #0]
 801eb02:	e02c      	b.n	801eb5e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801eb04:	687a      	ldr	r2, [r7, #4]
 801eb06:	23ae      	movs	r3, #174	@ 0xae
 801eb08:	009b      	lsls	r3, r3, #2
 801eb0a:	58d3      	ldr	r3, [r2, r3]
 801eb0c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801eb0e:	687a      	ldr	r2, [r7, #4]
 801eb10:	23af      	movs	r3, #175	@ 0xaf
 801eb12:	009b      	lsls	r3, r3, #2
 801eb14:	58d3      	ldr	r3, [r2, r3]
 801eb16:	681b      	ldr	r3, [r3, #0]
 801eb18:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801eb1a:	68ba      	ldr	r2, [r7, #8]
 801eb1c:	2385      	movs	r3, #133	@ 0x85
 801eb1e:	009b      	lsls	r3, r3, #2
 801eb20:	2100      	movs	r1, #0
 801eb22:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801eb24:	68ba      	ldr	r2, [r7, #8]
 801eb26:	2386      	movs	r3, #134	@ 0x86
 801eb28:	009b      	lsls	r3, r3, #2
 801eb2a:	2100      	movs	r1, #0
 801eb2c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801eb2e:	687b      	ldr	r3, [r7, #4]
 801eb30:	7c1b      	ldrb	r3, [r3, #16]
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	d10a      	bne.n	801eb4c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801eb36:	68ba      	ldr	r2, [r7, #8]
 801eb38:	2381      	movs	r3, #129	@ 0x81
 801eb3a:	009b      	lsls	r3, r3, #2
 801eb3c:	58d2      	ldr	r2, [r2, r3]
 801eb3e:	2380      	movs	r3, #128	@ 0x80
 801eb40:	009b      	lsls	r3, r3, #2
 801eb42:	6878      	ldr	r0, [r7, #4]
 801eb44:	2101      	movs	r1, #1
 801eb46:	f002 f9d1 	bl	8020eec <USBD_LL_PrepareReceive>
 801eb4a:	e008      	b.n	801eb5e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801eb4c:	68ba      	ldr	r2, [r7, #8]
 801eb4e:	2381      	movs	r3, #129	@ 0x81
 801eb50:	009b      	lsls	r3, r3, #2
 801eb52:	58d2      	ldr	r2, [r2, r3]
 801eb54:	6878      	ldr	r0, [r7, #4]
 801eb56:	2340      	movs	r3, #64	@ 0x40
 801eb58:	2101      	movs	r1, #1
 801eb5a:	f002 f9c7 	bl	8020eec <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801eb5e:	230f      	movs	r3, #15
 801eb60:	18fb      	adds	r3, r7, r3
 801eb62:	781b      	ldrb	r3, [r3, #0]
}
 801eb64:	0018      	movs	r0, r3
 801eb66:	46bd      	mov	sp, r7
 801eb68:	b004      	add	sp, #16
 801eb6a:	bd80      	pop	{r7, pc}

0801eb6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801eb6c:	b580      	push	{r7, lr}
 801eb6e:	b084      	sub	sp, #16
 801eb70:	af00      	add	r7, sp, #0
 801eb72:	6078      	str	r0, [r7, #4]
 801eb74:	000a      	movs	r2, r1
 801eb76:	1cfb      	adds	r3, r7, #3
 801eb78:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801eb7a:	230f      	movs	r3, #15
 801eb7c:	18fb      	adds	r3, r7, r3
 801eb7e:	2200      	movs	r2, #0
 801eb80:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	2181      	movs	r1, #129	@ 0x81
 801eb86:	0018      	movs	r0, r3
 801eb88:	f002 f89c 	bl	8020cc4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	2200      	movs	r2, #0
 801eb90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	2101      	movs	r1, #1
 801eb96:	0018      	movs	r0, r3
 801eb98:	f002 f894 	bl	8020cc4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801eb9c:	687a      	ldr	r2, [r7, #4]
 801eb9e:	23b6      	movs	r3, #182	@ 0xb6
 801eba0:	005b      	lsls	r3, r3, #1
 801eba2:	2100      	movs	r1, #0
 801eba4:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801eba6:	687b      	ldr	r3, [r7, #4]
 801eba8:	2182      	movs	r1, #130	@ 0x82
 801ebaa:	0018      	movs	r0, r3
 801ebac:	f002 f88a 	bl	8020cc4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	2200      	movs	r2, #0
 801ebb4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801ebb6:	687a      	ldr	r2, [r7, #4]
 801ebb8:	23ae      	movs	r3, #174	@ 0xae
 801ebba:	009b      	lsls	r3, r3, #2
 801ebbc:	58d3      	ldr	r3, [r2, r3]
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	d011      	beq.n	801ebe6 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801ebc2:	687a      	ldr	r2, [r7, #4]
 801ebc4:	23af      	movs	r3, #175	@ 0xaf
 801ebc6:	009b      	lsls	r3, r3, #2
 801ebc8:	58d3      	ldr	r3, [r2, r3]
 801ebca:	685b      	ldr	r3, [r3, #4]
 801ebcc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801ebce:	687a      	ldr	r2, [r7, #4]
 801ebd0:	23ae      	movs	r3, #174	@ 0xae
 801ebd2:	009b      	lsls	r3, r3, #2
 801ebd4:	58d3      	ldr	r3, [r2, r3]
 801ebd6:	0018      	movs	r0, r3
 801ebd8:	f002 f9e2 	bl	8020fa0 <USBD_static_free>
    pdev->pClassData = NULL;
 801ebdc:	687a      	ldr	r2, [r7, #4]
 801ebde:	23ae      	movs	r3, #174	@ 0xae
 801ebe0:	009b      	lsls	r3, r3, #2
 801ebe2:	2100      	movs	r1, #0
 801ebe4:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801ebe6:	230f      	movs	r3, #15
 801ebe8:	18fb      	adds	r3, r7, r3
 801ebea:	781b      	ldrb	r3, [r3, #0]
}
 801ebec:	0018      	movs	r0, r3
 801ebee:	46bd      	mov	sp, r7
 801ebf0:	b004      	add	sp, #16
 801ebf2:	bd80      	pop	{r7, pc}

0801ebf4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801ebf4:	b580      	push	{r7, lr}
 801ebf6:	b086      	sub	sp, #24
 801ebf8:	af00      	add	r7, sp, #0
 801ebfa:	6078      	str	r0, [r7, #4]
 801ebfc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ebfe:	687a      	ldr	r2, [r7, #4]
 801ec00:	23ae      	movs	r3, #174	@ 0xae
 801ec02:	009b      	lsls	r3, r3, #2
 801ec04:	58d3      	ldr	r3, [r2, r3]
 801ec06:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801ec08:	230f      	movs	r3, #15
 801ec0a:	18fb      	adds	r3, r7, r3
 801ec0c:	2200      	movs	r2, #0
 801ec0e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801ec10:	230c      	movs	r3, #12
 801ec12:	18fb      	adds	r3, r7, r3
 801ec14:	2200      	movs	r2, #0
 801ec16:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801ec18:	2317      	movs	r3, #23
 801ec1a:	18fb      	adds	r3, r7, r3
 801ec1c:	2200      	movs	r2, #0
 801ec1e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ec20:	683b      	ldr	r3, [r7, #0]
 801ec22:	781b      	ldrb	r3, [r3, #0]
 801ec24:	001a      	movs	r2, r3
 801ec26:	2360      	movs	r3, #96	@ 0x60
 801ec28:	4013      	ands	r3, r2
 801ec2a:	d03d      	beq.n	801eca8 <USBD_CDC_Setup+0xb4>
 801ec2c:	2b20      	cmp	r3, #32
 801ec2e:	d000      	beq.n	801ec32 <USBD_CDC_Setup+0x3e>
 801ec30:	e094      	b.n	801ed5c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801ec32:	683b      	ldr	r3, [r7, #0]
 801ec34:	88db      	ldrh	r3, [r3, #6]
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	d02b      	beq.n	801ec92 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801ec3a:	683b      	ldr	r3, [r7, #0]
 801ec3c:	781b      	ldrb	r3, [r3, #0]
 801ec3e:	b25b      	sxtb	r3, r3
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	da12      	bge.n	801ec6a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ec44:	687a      	ldr	r2, [r7, #4]
 801ec46:	23af      	movs	r3, #175	@ 0xaf
 801ec48:	009b      	lsls	r3, r3, #2
 801ec4a:	58d3      	ldr	r3, [r2, r3]
 801ec4c:	689b      	ldr	r3, [r3, #8]
 801ec4e:	683a      	ldr	r2, [r7, #0]
 801ec50:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801ec52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ec54:	683a      	ldr	r2, [r7, #0]
 801ec56:	88d2      	ldrh	r2, [r2, #6]
 801ec58:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801ec5a:	6939      	ldr	r1, [r7, #16]
 801ec5c:	683b      	ldr	r3, [r7, #0]
 801ec5e:	88da      	ldrh	r2, [r3, #6]
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	0018      	movs	r0, r3
 801ec64:	f001 fbaf 	bl	80203c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801ec68:	e083      	b.n	801ed72 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801ec6a:	683b      	ldr	r3, [r7, #0]
 801ec6c:	7859      	ldrb	r1, [r3, #1]
 801ec6e:	693a      	ldr	r2, [r7, #16]
 801ec70:	2380      	movs	r3, #128	@ 0x80
 801ec72:	009b      	lsls	r3, r3, #2
 801ec74:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801ec76:	683b      	ldr	r3, [r7, #0]
 801ec78:	88db      	ldrh	r3, [r3, #6]
 801ec7a:	b2d9      	uxtb	r1, r3
 801ec7c:	693b      	ldr	r3, [r7, #16]
 801ec7e:	4a40      	ldr	r2, [pc, #256]	@ (801ed80 <USBD_CDC_Setup+0x18c>)
 801ec80:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801ec82:	6939      	ldr	r1, [r7, #16]
 801ec84:	683b      	ldr	r3, [r7, #0]
 801ec86:	88da      	ldrh	r2, [r3, #6]
 801ec88:	687b      	ldr	r3, [r7, #4]
 801ec8a:	0018      	movs	r0, r3
 801ec8c:	f001 fbce 	bl	802042c <USBD_CtlPrepareRx>
      break;
 801ec90:	e06f      	b.n	801ed72 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801ec92:	687a      	ldr	r2, [r7, #4]
 801ec94:	23af      	movs	r3, #175	@ 0xaf
 801ec96:	009b      	lsls	r3, r3, #2
 801ec98:	58d3      	ldr	r3, [r2, r3]
 801ec9a:	689b      	ldr	r3, [r3, #8]
 801ec9c:	683a      	ldr	r2, [r7, #0]
 801ec9e:	7850      	ldrb	r0, [r2, #1]
 801eca0:	6839      	ldr	r1, [r7, #0]
 801eca2:	2200      	movs	r2, #0
 801eca4:	4798      	blx	r3
      break;
 801eca6:	e064      	b.n	801ed72 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801eca8:	683b      	ldr	r3, [r7, #0]
 801ecaa:	785b      	ldrb	r3, [r3, #1]
 801ecac:	2b0b      	cmp	r3, #11
 801ecae:	d037      	beq.n	801ed20 <USBD_CDC_Setup+0x12c>
 801ecb0:	dc47      	bgt.n	801ed42 <USBD_CDC_Setup+0x14e>
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d002      	beq.n	801ecbc <USBD_CDC_Setup+0xc8>
 801ecb6:	2b0a      	cmp	r3, #10
 801ecb8:	d019      	beq.n	801ecee <USBD_CDC_Setup+0xfa>
 801ecba:	e042      	b.n	801ed42 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ecbc:	687a      	ldr	r2, [r7, #4]
 801ecbe:	23a7      	movs	r3, #167	@ 0xa7
 801ecc0:	009b      	lsls	r3, r3, #2
 801ecc2:	5cd3      	ldrb	r3, [r2, r3]
 801ecc4:	2b03      	cmp	r3, #3
 801ecc6:	d107      	bne.n	801ecd8 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801ecc8:	230c      	movs	r3, #12
 801ecca:	18f9      	adds	r1, r7, r3
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	2202      	movs	r2, #2
 801ecd0:	0018      	movs	r0, r3
 801ecd2:	f001 fb78 	bl	80203c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801ecd6:	e040      	b.n	801ed5a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801ecd8:	683a      	ldr	r2, [r7, #0]
 801ecda:	687b      	ldr	r3, [r7, #4]
 801ecdc:	0011      	movs	r1, r2
 801ecde:	0018      	movs	r0, r3
 801ece0:	f001 faf3 	bl	80202ca <USBD_CtlError>
            ret = USBD_FAIL;
 801ece4:	2317      	movs	r3, #23
 801ece6:	18fb      	adds	r3, r7, r3
 801ece8:	2202      	movs	r2, #2
 801ecea:	701a      	strb	r2, [r3, #0]
          break;
 801ecec:	e035      	b.n	801ed5a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ecee:	687a      	ldr	r2, [r7, #4]
 801ecf0:	23a7      	movs	r3, #167	@ 0xa7
 801ecf2:	009b      	lsls	r3, r3, #2
 801ecf4:	5cd3      	ldrb	r3, [r2, r3]
 801ecf6:	2b03      	cmp	r3, #3
 801ecf8:	d107      	bne.n	801ed0a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801ecfa:	230f      	movs	r3, #15
 801ecfc:	18f9      	adds	r1, r7, r3
 801ecfe:	687b      	ldr	r3, [r7, #4]
 801ed00:	2201      	movs	r2, #1
 801ed02:	0018      	movs	r0, r3
 801ed04:	f001 fb5f 	bl	80203c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801ed08:	e027      	b.n	801ed5a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801ed0a:	683a      	ldr	r2, [r7, #0]
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	0011      	movs	r1, r2
 801ed10:	0018      	movs	r0, r3
 801ed12:	f001 fada 	bl	80202ca <USBD_CtlError>
            ret = USBD_FAIL;
 801ed16:	2317      	movs	r3, #23
 801ed18:	18fb      	adds	r3, r7, r3
 801ed1a:	2202      	movs	r2, #2
 801ed1c:	701a      	strb	r2, [r3, #0]
          break;
 801ed1e:	e01c      	b.n	801ed5a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801ed20:	687a      	ldr	r2, [r7, #4]
 801ed22:	23a7      	movs	r3, #167	@ 0xa7
 801ed24:	009b      	lsls	r3, r3, #2
 801ed26:	5cd3      	ldrb	r3, [r2, r3]
 801ed28:	2b03      	cmp	r3, #3
 801ed2a:	d015      	beq.n	801ed58 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801ed2c:	683a      	ldr	r2, [r7, #0]
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	0011      	movs	r1, r2
 801ed32:	0018      	movs	r0, r3
 801ed34:	f001 fac9 	bl	80202ca <USBD_CtlError>
            ret = USBD_FAIL;
 801ed38:	2317      	movs	r3, #23
 801ed3a:	18fb      	adds	r3, r7, r3
 801ed3c:	2202      	movs	r2, #2
 801ed3e:	701a      	strb	r2, [r3, #0]
          }
          break;
 801ed40:	e00a      	b.n	801ed58 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801ed42:	683a      	ldr	r2, [r7, #0]
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	0011      	movs	r1, r2
 801ed48:	0018      	movs	r0, r3
 801ed4a:	f001 fabe 	bl	80202ca <USBD_CtlError>
          ret = USBD_FAIL;
 801ed4e:	2317      	movs	r3, #23
 801ed50:	18fb      	adds	r3, r7, r3
 801ed52:	2202      	movs	r2, #2
 801ed54:	701a      	strb	r2, [r3, #0]
          break;
 801ed56:	e000      	b.n	801ed5a <USBD_CDC_Setup+0x166>
          break;
 801ed58:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801ed5a:	e00a      	b.n	801ed72 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801ed5c:	683a      	ldr	r2, [r7, #0]
 801ed5e:	687b      	ldr	r3, [r7, #4]
 801ed60:	0011      	movs	r1, r2
 801ed62:	0018      	movs	r0, r3
 801ed64:	f001 fab1 	bl	80202ca <USBD_CtlError>
      ret = USBD_FAIL;
 801ed68:	2317      	movs	r3, #23
 801ed6a:	18fb      	adds	r3, r7, r3
 801ed6c:	2202      	movs	r2, #2
 801ed6e:	701a      	strb	r2, [r3, #0]
      break;
 801ed70:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801ed72:	2317      	movs	r3, #23
 801ed74:	18fb      	adds	r3, r7, r3
 801ed76:	781b      	ldrb	r3, [r3, #0]
}
 801ed78:	0018      	movs	r0, r3
 801ed7a:	46bd      	mov	sp, r7
 801ed7c:	b006      	add	sp, #24
 801ed7e:	bd80      	pop	{r7, pc}
 801ed80:	00000201 	.word	0x00000201

0801ed84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ed84:	b580      	push	{r7, lr}
 801ed86:	b084      	sub	sp, #16
 801ed88:	af00      	add	r7, sp, #0
 801ed8a:	6078      	str	r0, [r7, #4]
 801ed8c:	000a      	movs	r2, r1
 801ed8e:	1cfb      	adds	r3, r7, #3
 801ed90:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801ed92:	687a      	ldr	r2, [r7, #4]
 801ed94:	23ae      	movs	r3, #174	@ 0xae
 801ed96:	009b      	lsls	r3, r3, #2
 801ed98:	58d3      	ldr	r3, [r2, r3]
 801ed9a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801ed9c:	687a      	ldr	r2, [r7, #4]
 801ed9e:	23b0      	movs	r3, #176	@ 0xb0
 801eda0:	009b      	lsls	r3, r3, #2
 801eda2:	58d3      	ldr	r3, [r2, r3]
 801eda4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801eda6:	687a      	ldr	r2, [r7, #4]
 801eda8:	23ae      	movs	r3, #174	@ 0xae
 801edaa:	009b      	lsls	r3, r3, #2
 801edac:	58d3      	ldr	r3, [r2, r3]
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d03e      	beq.n	801ee30 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801edb2:	1cfb      	adds	r3, r7, #3
 801edb4:	781a      	ldrb	r2, [r3, #0]
 801edb6:	6879      	ldr	r1, [r7, #4]
 801edb8:	0013      	movs	r3, r2
 801edba:	009b      	lsls	r3, r3, #2
 801edbc:	189b      	adds	r3, r3, r2
 801edbe:	009b      	lsls	r3, r3, #2
 801edc0:	18cb      	adds	r3, r1, r3
 801edc2:	331c      	adds	r3, #28
 801edc4:	681b      	ldr	r3, [r3, #0]
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	d02b      	beq.n	801ee22 <USBD_CDC_DataIn+0x9e>
 801edca:	1cfb      	adds	r3, r7, #3
 801edcc:	781a      	ldrb	r2, [r3, #0]
 801edce:	6879      	ldr	r1, [r7, #4]
 801edd0:	0013      	movs	r3, r2
 801edd2:	009b      	lsls	r3, r3, #2
 801edd4:	189b      	adds	r3, r3, r2
 801edd6:	009b      	lsls	r3, r3, #2
 801edd8:	18cb      	adds	r3, r1, r3
 801edda:	331c      	adds	r3, #28
 801eddc:	6818      	ldr	r0, [r3, #0]
 801edde:	1cfb      	adds	r3, r7, #3
 801ede0:	781a      	ldrb	r2, [r3, #0]
 801ede2:	68b9      	ldr	r1, [r7, #8]
 801ede4:	0013      	movs	r3, r2
 801ede6:	009b      	lsls	r3, r3, #2
 801ede8:	189b      	adds	r3, r3, r2
 801edea:	00db      	lsls	r3, r3, #3
 801edec:	18cb      	adds	r3, r1, r3
 801edee:	3338      	adds	r3, #56	@ 0x38
 801edf0:	681b      	ldr	r3, [r3, #0]
 801edf2:	0019      	movs	r1, r3
 801edf4:	f7e1 fa5c 	bl	80002b0 <__aeabi_uidivmod>
 801edf8:	1e0b      	subs	r3, r1, #0
 801edfa:	d112      	bne.n	801ee22 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801edfc:	1cfb      	adds	r3, r7, #3
 801edfe:	781a      	ldrb	r2, [r3, #0]
 801ee00:	6879      	ldr	r1, [r7, #4]
 801ee02:	0013      	movs	r3, r2
 801ee04:	009b      	lsls	r3, r3, #2
 801ee06:	189b      	adds	r3, r3, r2
 801ee08:	009b      	lsls	r3, r3, #2
 801ee0a:	18cb      	adds	r3, r1, r3
 801ee0c:	331c      	adds	r3, #28
 801ee0e:	2200      	movs	r2, #0
 801ee10:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801ee12:	1cfb      	adds	r3, r7, #3
 801ee14:	7819      	ldrb	r1, [r3, #0]
 801ee16:	6878      	ldr	r0, [r7, #4]
 801ee18:	2300      	movs	r3, #0
 801ee1a:	2200      	movs	r2, #0
 801ee1c:	f002 f82f 	bl	8020e7e <USBD_LL_Transmit>
 801ee20:	e004      	b.n	801ee2c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801ee22:	68fa      	ldr	r2, [r7, #12]
 801ee24:	2385      	movs	r3, #133	@ 0x85
 801ee26:	009b      	lsls	r3, r3, #2
 801ee28:	2100      	movs	r1, #0
 801ee2a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801ee2c:	2300      	movs	r3, #0
 801ee2e:	e000      	b.n	801ee32 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801ee30:	2302      	movs	r3, #2
  }
}
 801ee32:	0018      	movs	r0, r3
 801ee34:	46bd      	mov	sp, r7
 801ee36:	b004      	add	sp, #16
 801ee38:	bd80      	pop	{r7, pc}

0801ee3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801ee3a:	b580      	push	{r7, lr}
 801ee3c:	b084      	sub	sp, #16
 801ee3e:	af00      	add	r7, sp, #0
 801ee40:	6078      	str	r0, [r7, #4]
 801ee42:	000a      	movs	r2, r1
 801ee44:	1cfb      	adds	r3, r7, #3
 801ee46:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ee48:	687a      	ldr	r2, [r7, #4]
 801ee4a:	23ae      	movs	r3, #174	@ 0xae
 801ee4c:	009b      	lsls	r3, r3, #2
 801ee4e:	58d3      	ldr	r3, [r2, r3]
 801ee50:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801ee52:	1cfb      	adds	r3, r7, #3
 801ee54:	781a      	ldrb	r2, [r3, #0]
 801ee56:	687b      	ldr	r3, [r7, #4]
 801ee58:	0011      	movs	r1, r2
 801ee5a:	0018      	movs	r0, r3
 801ee5c:	f002 f87d 	bl	8020f5a <USBD_LL_GetRxDataSize>
 801ee60:	0001      	movs	r1, r0
 801ee62:	68fa      	ldr	r2, [r7, #12]
 801ee64:	2383      	movs	r3, #131	@ 0x83
 801ee66:	009b      	lsls	r3, r3, #2
 801ee68:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801ee6a:	687a      	ldr	r2, [r7, #4]
 801ee6c:	23ae      	movs	r3, #174	@ 0xae
 801ee6e:	009b      	lsls	r3, r3, #2
 801ee70:	58d3      	ldr	r3, [r2, r3]
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d011      	beq.n	801ee9a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801ee76:	687a      	ldr	r2, [r7, #4]
 801ee78:	23af      	movs	r3, #175	@ 0xaf
 801ee7a:	009b      	lsls	r3, r3, #2
 801ee7c:	58d3      	ldr	r3, [r2, r3]
 801ee7e:	68da      	ldr	r2, [r3, #12]
 801ee80:	68f9      	ldr	r1, [r7, #12]
 801ee82:	2381      	movs	r3, #129	@ 0x81
 801ee84:	009b      	lsls	r3, r3, #2
 801ee86:	58c8      	ldr	r0, [r1, r3]
 801ee88:	68fb      	ldr	r3, [r7, #12]
 801ee8a:	2183      	movs	r1, #131	@ 0x83
 801ee8c:	0089      	lsls	r1, r1, #2
 801ee8e:	468c      	mov	ip, r1
 801ee90:	4463      	add	r3, ip
 801ee92:	0019      	movs	r1, r3
 801ee94:	4790      	blx	r2

    return USBD_OK;
 801ee96:	2300      	movs	r3, #0
 801ee98:	e000      	b.n	801ee9c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801ee9a:	2302      	movs	r3, #2
  }
}
 801ee9c:	0018      	movs	r0, r3
 801ee9e:	46bd      	mov	sp, r7
 801eea0:	b004      	add	sp, #16
 801eea2:	bd80      	pop	{r7, pc}

0801eea4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801eea4:	b590      	push	{r4, r7, lr}
 801eea6:	b085      	sub	sp, #20
 801eea8:	af00      	add	r7, sp, #0
 801eeaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801eeac:	687a      	ldr	r2, [r7, #4]
 801eeae:	23ae      	movs	r3, #174	@ 0xae
 801eeb0:	009b      	lsls	r3, r3, #2
 801eeb2:	58d3      	ldr	r3, [r2, r3]
 801eeb4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801eeb6:	687a      	ldr	r2, [r7, #4]
 801eeb8:	23af      	movs	r3, #175	@ 0xaf
 801eeba:	009b      	lsls	r3, r3, #2
 801eebc:	58d3      	ldr	r3, [r2, r3]
 801eebe:	2b00      	cmp	r3, #0
 801eec0:	d018      	beq.n	801eef4 <USBD_CDC_EP0_RxReady+0x50>
 801eec2:	68fa      	ldr	r2, [r7, #12]
 801eec4:	2380      	movs	r3, #128	@ 0x80
 801eec6:	009b      	lsls	r3, r3, #2
 801eec8:	5cd3      	ldrb	r3, [r2, r3]
 801eeca:	2bff      	cmp	r3, #255	@ 0xff
 801eecc:	d012      	beq.n	801eef4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801eece:	687a      	ldr	r2, [r7, #4]
 801eed0:	23af      	movs	r3, #175	@ 0xaf
 801eed2:	009b      	lsls	r3, r3, #2
 801eed4:	58d3      	ldr	r3, [r2, r3]
 801eed6:	689b      	ldr	r3, [r3, #8]
 801eed8:	68f9      	ldr	r1, [r7, #12]
 801eeda:	2280      	movs	r2, #128	@ 0x80
 801eedc:	0092      	lsls	r2, r2, #2
 801eede:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801eee0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801eee2:	68fa      	ldr	r2, [r7, #12]
 801eee4:	4c06      	ldr	r4, [pc, #24]	@ (801ef00 <USBD_CDC_EP0_RxReady+0x5c>)
 801eee6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801eee8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801eeea:	68fa      	ldr	r2, [r7, #12]
 801eeec:	2380      	movs	r3, #128	@ 0x80
 801eeee:	009b      	lsls	r3, r3, #2
 801eef0:	21ff      	movs	r1, #255	@ 0xff
 801eef2:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801eef4:	2300      	movs	r3, #0
}
 801eef6:	0018      	movs	r0, r3
 801eef8:	46bd      	mov	sp, r7
 801eefa:	b005      	add	sp, #20
 801eefc:	bd90      	pop	{r4, r7, pc}
 801eefe:	46c0      	nop			@ (mov r8, r8)
 801ef00:	00000201 	.word	0x00000201

0801ef04 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801ef04:	b580      	push	{r7, lr}
 801ef06:	b082      	sub	sp, #8
 801ef08:	af00      	add	r7, sp, #0
 801ef0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	2243      	movs	r2, #67	@ 0x43
 801ef10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801ef12:	4b02      	ldr	r3, [pc, #8]	@ (801ef1c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801ef14:	0018      	movs	r0, r3
 801ef16:	46bd      	mov	sp, r7
 801ef18:	b002      	add	sp, #8
 801ef1a:	bd80      	pop	{r7, pc}
 801ef1c:	20000180 	.word	0x20000180

0801ef20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801ef20:	b580      	push	{r7, lr}
 801ef22:	b082      	sub	sp, #8
 801ef24:	af00      	add	r7, sp, #0
 801ef26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	2243      	movs	r2, #67	@ 0x43
 801ef2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801ef2e:	4b02      	ldr	r3, [pc, #8]	@ (801ef38 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801ef30:	0018      	movs	r0, r3
 801ef32:	46bd      	mov	sp, r7
 801ef34:	b002      	add	sp, #8
 801ef36:	bd80      	pop	{r7, pc}
 801ef38:	2000013c 	.word	0x2000013c

0801ef3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801ef3c:	b580      	push	{r7, lr}
 801ef3e:	b082      	sub	sp, #8
 801ef40:	af00      	add	r7, sp, #0
 801ef42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	2243      	movs	r2, #67	@ 0x43
 801ef48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801ef4a:	4b02      	ldr	r3, [pc, #8]	@ (801ef54 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801ef4c:	0018      	movs	r0, r3
 801ef4e:	46bd      	mov	sp, r7
 801ef50:	b002      	add	sp, #8
 801ef52:	bd80      	pop	{r7, pc}
 801ef54:	200001c4 	.word	0x200001c4

0801ef58 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801ef58:	b580      	push	{r7, lr}
 801ef5a:	b082      	sub	sp, #8
 801ef5c:	af00      	add	r7, sp, #0
 801ef5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	220a      	movs	r2, #10
 801ef64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801ef66:	4b02      	ldr	r3, [pc, #8]	@ (801ef70 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801ef68:	0018      	movs	r0, r3
 801ef6a:	46bd      	mov	sp, r7
 801ef6c:	b002      	add	sp, #8
 801ef6e:	bd80      	pop	{r7, pc}
 801ef70:	200000f8 	.word	0x200000f8

0801ef74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801ef74:	b580      	push	{r7, lr}
 801ef76:	b084      	sub	sp, #16
 801ef78:	af00      	add	r7, sp, #0
 801ef7a:	6078      	str	r0, [r7, #4]
 801ef7c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801ef7e:	200f      	movs	r0, #15
 801ef80:	183b      	adds	r3, r7, r0
 801ef82:	2202      	movs	r2, #2
 801ef84:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801ef86:	683b      	ldr	r3, [r7, #0]
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d007      	beq.n	801ef9c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801ef8c:	687a      	ldr	r2, [r7, #4]
 801ef8e:	23af      	movs	r3, #175	@ 0xaf
 801ef90:	009b      	lsls	r3, r3, #2
 801ef92:	6839      	ldr	r1, [r7, #0]
 801ef94:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801ef96:	183b      	adds	r3, r7, r0
 801ef98:	2200      	movs	r2, #0
 801ef9a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801ef9c:	230f      	movs	r3, #15
 801ef9e:	18fb      	adds	r3, r7, r3
 801efa0:	781b      	ldrb	r3, [r3, #0]
}
 801efa2:	0018      	movs	r0, r3
 801efa4:	46bd      	mov	sp, r7
 801efa6:	b004      	add	sp, #16
 801efa8:	bd80      	pop	{r7, pc}

0801efaa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801efaa:	b580      	push	{r7, lr}
 801efac:	b086      	sub	sp, #24
 801efae:	af00      	add	r7, sp, #0
 801efb0:	60f8      	str	r0, [r7, #12]
 801efb2:	60b9      	str	r1, [r7, #8]
 801efb4:	1dbb      	adds	r3, r7, #6
 801efb6:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801efb8:	68fa      	ldr	r2, [r7, #12]
 801efba:	23ae      	movs	r3, #174	@ 0xae
 801efbc:	009b      	lsls	r3, r3, #2
 801efbe:	58d3      	ldr	r3, [r2, r3]
 801efc0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801efc2:	697a      	ldr	r2, [r7, #20]
 801efc4:	2382      	movs	r3, #130	@ 0x82
 801efc6:	009b      	lsls	r3, r3, #2
 801efc8:	68b9      	ldr	r1, [r7, #8]
 801efca:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801efcc:	1dbb      	adds	r3, r7, #6
 801efce:	8819      	ldrh	r1, [r3, #0]
 801efd0:	697a      	ldr	r2, [r7, #20]
 801efd2:	2384      	movs	r3, #132	@ 0x84
 801efd4:	009b      	lsls	r3, r3, #2
 801efd6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801efd8:	2300      	movs	r3, #0
}
 801efda:	0018      	movs	r0, r3
 801efdc:	46bd      	mov	sp, r7
 801efde:	b006      	add	sp, #24
 801efe0:	bd80      	pop	{r7, pc}

0801efe2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801efe2:	b580      	push	{r7, lr}
 801efe4:	b084      	sub	sp, #16
 801efe6:	af00      	add	r7, sp, #0
 801efe8:	6078      	str	r0, [r7, #4]
 801efea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801efec:	687a      	ldr	r2, [r7, #4]
 801efee:	23ae      	movs	r3, #174	@ 0xae
 801eff0:	009b      	lsls	r3, r3, #2
 801eff2:	58d3      	ldr	r3, [r2, r3]
 801eff4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801eff6:	68fa      	ldr	r2, [r7, #12]
 801eff8:	2381      	movs	r3, #129	@ 0x81
 801effa:	009b      	lsls	r3, r3, #2
 801effc:	6839      	ldr	r1, [r7, #0]
 801effe:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801f000:	2300      	movs	r3, #0
}
 801f002:	0018      	movs	r0, r3
 801f004:	46bd      	mov	sp, r7
 801f006:	b004      	add	sp, #16
 801f008:	bd80      	pop	{r7, pc}

0801f00a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801f00a:	b580      	push	{r7, lr}
 801f00c:	b084      	sub	sp, #16
 801f00e:	af00      	add	r7, sp, #0
 801f010:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801f012:	687a      	ldr	r2, [r7, #4]
 801f014:	23ae      	movs	r3, #174	@ 0xae
 801f016:	009b      	lsls	r3, r3, #2
 801f018:	58d3      	ldr	r3, [r2, r3]
 801f01a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801f01c:	687a      	ldr	r2, [r7, #4]
 801f01e:	23ae      	movs	r3, #174	@ 0xae
 801f020:	009b      	lsls	r3, r3, #2
 801f022:	58d3      	ldr	r3, [r2, r3]
 801f024:	2b00      	cmp	r3, #0
 801f026:	d022      	beq.n	801f06e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801f028:	68fa      	ldr	r2, [r7, #12]
 801f02a:	2385      	movs	r3, #133	@ 0x85
 801f02c:	009b      	lsls	r3, r3, #2
 801f02e:	58d3      	ldr	r3, [r2, r3]
 801f030:	2b00      	cmp	r3, #0
 801f032:	d11a      	bne.n	801f06a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801f034:	68fa      	ldr	r2, [r7, #12]
 801f036:	2385      	movs	r3, #133	@ 0x85
 801f038:	009b      	lsls	r3, r3, #2
 801f03a:	2101      	movs	r1, #1
 801f03c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801f03e:	68fa      	ldr	r2, [r7, #12]
 801f040:	2384      	movs	r3, #132	@ 0x84
 801f042:	009b      	lsls	r3, r3, #2
 801f044:	58d2      	ldr	r2, [r2, r3]
 801f046:	687b      	ldr	r3, [r7, #4]
 801f048:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801f04a:	68fa      	ldr	r2, [r7, #12]
 801f04c:	2382      	movs	r3, #130	@ 0x82
 801f04e:	009b      	lsls	r3, r3, #2
 801f050:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801f052:	68fa      	ldr	r2, [r7, #12]
 801f054:	2384      	movs	r3, #132	@ 0x84
 801f056:	009b      	lsls	r3, r3, #2
 801f058:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801f05a:	b29b      	uxth	r3, r3
 801f05c:	6878      	ldr	r0, [r7, #4]
 801f05e:	000a      	movs	r2, r1
 801f060:	2181      	movs	r1, #129	@ 0x81
 801f062:	f001 ff0c 	bl	8020e7e <USBD_LL_Transmit>

      return USBD_OK;
 801f066:	2300      	movs	r3, #0
 801f068:	e002      	b.n	801f070 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801f06a:	2301      	movs	r3, #1
 801f06c:	e000      	b.n	801f070 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801f06e:	2302      	movs	r3, #2
  }
}
 801f070:	0018      	movs	r0, r3
 801f072:	46bd      	mov	sp, r7
 801f074:	b004      	add	sp, #16
 801f076:	bd80      	pop	{r7, pc}

0801f078 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801f078:	b580      	push	{r7, lr}
 801f07a:	b084      	sub	sp, #16
 801f07c:	af00      	add	r7, sp, #0
 801f07e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801f080:	687a      	ldr	r2, [r7, #4]
 801f082:	23ae      	movs	r3, #174	@ 0xae
 801f084:	009b      	lsls	r3, r3, #2
 801f086:	58d3      	ldr	r3, [r2, r3]
 801f088:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801f08a:	687a      	ldr	r2, [r7, #4]
 801f08c:	23ae      	movs	r3, #174	@ 0xae
 801f08e:	009b      	lsls	r3, r3, #2
 801f090:	58d3      	ldr	r3, [r2, r3]
 801f092:	2b00      	cmp	r3, #0
 801f094:	d019      	beq.n	801f0ca <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f096:	687b      	ldr	r3, [r7, #4]
 801f098:	7c1b      	ldrb	r3, [r3, #16]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d10a      	bne.n	801f0b4 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801f09e:	68fa      	ldr	r2, [r7, #12]
 801f0a0:	2381      	movs	r3, #129	@ 0x81
 801f0a2:	009b      	lsls	r3, r3, #2
 801f0a4:	58d2      	ldr	r2, [r2, r3]
 801f0a6:	2380      	movs	r3, #128	@ 0x80
 801f0a8:	009b      	lsls	r3, r3, #2
 801f0aa:	6878      	ldr	r0, [r7, #4]
 801f0ac:	2101      	movs	r1, #1
 801f0ae:	f001 ff1d 	bl	8020eec <USBD_LL_PrepareReceive>
 801f0b2:	e008      	b.n	801f0c6 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801f0b4:	68fa      	ldr	r2, [r7, #12]
 801f0b6:	2381      	movs	r3, #129	@ 0x81
 801f0b8:	009b      	lsls	r3, r3, #2
 801f0ba:	58d2      	ldr	r2, [r2, r3]
 801f0bc:	6878      	ldr	r0, [r7, #4]
 801f0be:	2340      	movs	r3, #64	@ 0x40
 801f0c0:	2101      	movs	r1, #1
 801f0c2:	f001 ff13 	bl	8020eec <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801f0c6:	2300      	movs	r3, #0
 801f0c8:	e000      	b.n	801f0cc <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801f0ca:	2302      	movs	r3, #2
  }
}
 801f0cc:	0018      	movs	r0, r3
 801f0ce:	46bd      	mov	sp, r7
 801f0d0:	b004      	add	sp, #16
 801f0d2:	bd80      	pop	{r7, pc}

0801f0d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801f0d4:	b580      	push	{r7, lr}
 801f0d6:	b084      	sub	sp, #16
 801f0d8:	af00      	add	r7, sp, #0
 801f0da:	60f8      	str	r0, [r7, #12]
 801f0dc:	60b9      	str	r1, [r7, #8]
 801f0de:	1dfb      	adds	r3, r7, #7
 801f0e0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801f0e2:	68fb      	ldr	r3, [r7, #12]
 801f0e4:	2b00      	cmp	r3, #0
 801f0e6:	d101      	bne.n	801f0ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801f0e8:	2302      	movs	r3, #2
 801f0ea:	e020      	b.n	801f12e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801f0ec:	68fa      	ldr	r2, [r7, #12]
 801f0ee:	23ad      	movs	r3, #173	@ 0xad
 801f0f0:	009b      	lsls	r3, r3, #2
 801f0f2:	58d3      	ldr	r3, [r2, r3]
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	d004      	beq.n	801f102 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801f0f8:	68fa      	ldr	r2, [r7, #12]
 801f0fa:	23ad      	movs	r3, #173	@ 0xad
 801f0fc:	009b      	lsls	r3, r3, #2
 801f0fe:	2100      	movs	r1, #0
 801f100:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801f102:	68bb      	ldr	r3, [r7, #8]
 801f104:	2b00      	cmp	r3, #0
 801f106:	d004      	beq.n	801f112 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801f108:	68fa      	ldr	r2, [r7, #12]
 801f10a:	23ac      	movs	r3, #172	@ 0xac
 801f10c:	009b      	lsls	r3, r3, #2
 801f10e:	68b9      	ldr	r1, [r7, #8]
 801f110:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801f112:	68fa      	ldr	r2, [r7, #12]
 801f114:	23a7      	movs	r3, #167	@ 0xa7
 801f116:	009b      	lsls	r3, r3, #2
 801f118:	2101      	movs	r1, #1
 801f11a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801f11c:	68fb      	ldr	r3, [r7, #12]
 801f11e:	1dfa      	adds	r2, r7, #7
 801f120:	7812      	ldrb	r2, [r2, #0]
 801f122:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801f124:	68fb      	ldr	r3, [r7, #12]
 801f126:	0018      	movs	r0, r3
 801f128:	f001 fd0c 	bl	8020b44 <USBD_LL_Init>

  return USBD_OK;
 801f12c:	2300      	movs	r3, #0
}
 801f12e:	0018      	movs	r0, r3
 801f130:	46bd      	mov	sp, r7
 801f132:	b004      	add	sp, #16
 801f134:	bd80      	pop	{r7, pc}

0801f136 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801f136:	b580      	push	{r7, lr}
 801f138:	b084      	sub	sp, #16
 801f13a:	af00      	add	r7, sp, #0
 801f13c:	6078      	str	r0, [r7, #4]
 801f13e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801f140:	200f      	movs	r0, #15
 801f142:	183b      	adds	r3, r7, r0
 801f144:	2200      	movs	r2, #0
 801f146:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801f148:	683b      	ldr	r3, [r7, #0]
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d008      	beq.n	801f160 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801f14e:	687a      	ldr	r2, [r7, #4]
 801f150:	23ad      	movs	r3, #173	@ 0xad
 801f152:	009b      	lsls	r3, r3, #2
 801f154:	6839      	ldr	r1, [r7, #0]
 801f156:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801f158:	183b      	adds	r3, r7, r0
 801f15a:	2200      	movs	r2, #0
 801f15c:	701a      	strb	r2, [r3, #0]
 801f15e:	e003      	b.n	801f168 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801f160:	230f      	movs	r3, #15
 801f162:	18fb      	adds	r3, r7, r3
 801f164:	2202      	movs	r2, #2
 801f166:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801f168:	230f      	movs	r3, #15
 801f16a:	18fb      	adds	r3, r7, r3
 801f16c:	781b      	ldrb	r3, [r3, #0]
}
 801f16e:	0018      	movs	r0, r3
 801f170:	46bd      	mov	sp, r7
 801f172:	b004      	add	sp, #16
 801f174:	bd80      	pop	{r7, pc}

0801f176 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801f176:	b580      	push	{r7, lr}
 801f178:	b082      	sub	sp, #8
 801f17a:	af00      	add	r7, sp, #0
 801f17c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801f17e:	687b      	ldr	r3, [r7, #4]
 801f180:	0018      	movs	r0, r3
 801f182:	f001 fd43 	bl	8020c0c <USBD_LL_Start>

  return USBD_OK;
 801f186:	2300      	movs	r3, #0
}
 801f188:	0018      	movs	r0, r3
 801f18a:	46bd      	mov	sp, r7
 801f18c:	b002      	add	sp, #8
 801f18e:	bd80      	pop	{r7, pc}

0801f190 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801f190:	b580      	push	{r7, lr}
 801f192:	b082      	sub	sp, #8
 801f194:	af00      	add	r7, sp, #0
 801f196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801f198:	2300      	movs	r3, #0
}
 801f19a:	0018      	movs	r0, r3
 801f19c:	46bd      	mov	sp, r7
 801f19e:	b002      	add	sp, #8
 801f1a0:	bd80      	pop	{r7, pc}

0801f1a2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801f1a2:	b590      	push	{r4, r7, lr}
 801f1a4:	b085      	sub	sp, #20
 801f1a6:	af00      	add	r7, sp, #0
 801f1a8:	6078      	str	r0, [r7, #4]
 801f1aa:	000a      	movs	r2, r1
 801f1ac:	1cfb      	adds	r3, r7, #3
 801f1ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801f1b0:	240f      	movs	r4, #15
 801f1b2:	193b      	adds	r3, r7, r4
 801f1b4:	2202      	movs	r2, #2
 801f1b6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801f1b8:	687a      	ldr	r2, [r7, #4]
 801f1ba:	23ad      	movs	r3, #173	@ 0xad
 801f1bc:	009b      	lsls	r3, r3, #2
 801f1be:	58d3      	ldr	r3, [r2, r3]
 801f1c0:	2b00      	cmp	r3, #0
 801f1c2:	d00e      	beq.n	801f1e2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801f1c4:	687a      	ldr	r2, [r7, #4]
 801f1c6:	23ad      	movs	r3, #173	@ 0xad
 801f1c8:	009b      	lsls	r3, r3, #2
 801f1ca:	58d3      	ldr	r3, [r2, r3]
 801f1cc:	681b      	ldr	r3, [r3, #0]
 801f1ce:	1cfa      	adds	r2, r7, #3
 801f1d0:	7811      	ldrb	r1, [r2, #0]
 801f1d2:	687a      	ldr	r2, [r7, #4]
 801f1d4:	0010      	movs	r0, r2
 801f1d6:	4798      	blx	r3
 801f1d8:	1e03      	subs	r3, r0, #0
 801f1da:	d102      	bne.n	801f1e2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801f1dc:	193b      	adds	r3, r7, r4
 801f1de:	2200      	movs	r2, #0
 801f1e0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801f1e2:	230f      	movs	r3, #15
 801f1e4:	18fb      	adds	r3, r7, r3
 801f1e6:	781b      	ldrb	r3, [r3, #0]
}
 801f1e8:	0018      	movs	r0, r3
 801f1ea:	46bd      	mov	sp, r7
 801f1ec:	b005      	add	sp, #20
 801f1ee:	bd90      	pop	{r4, r7, pc}

0801f1f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801f1f0:	b580      	push	{r7, lr}
 801f1f2:	b082      	sub	sp, #8
 801f1f4:	af00      	add	r7, sp, #0
 801f1f6:	6078      	str	r0, [r7, #4]
 801f1f8:	000a      	movs	r2, r1
 801f1fa:	1cfb      	adds	r3, r7, #3
 801f1fc:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801f1fe:	687a      	ldr	r2, [r7, #4]
 801f200:	23ad      	movs	r3, #173	@ 0xad
 801f202:	009b      	lsls	r3, r3, #2
 801f204:	58d3      	ldr	r3, [r2, r3]
 801f206:	685b      	ldr	r3, [r3, #4]
 801f208:	1cfa      	adds	r2, r7, #3
 801f20a:	7811      	ldrb	r1, [r2, #0]
 801f20c:	687a      	ldr	r2, [r7, #4]
 801f20e:	0010      	movs	r0, r2
 801f210:	4798      	blx	r3

  return USBD_OK;
 801f212:	2300      	movs	r3, #0
}
 801f214:	0018      	movs	r0, r3
 801f216:	46bd      	mov	sp, r7
 801f218:	b002      	add	sp, #8
 801f21a:	bd80      	pop	{r7, pc}

0801f21c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801f21c:	b580      	push	{r7, lr}
 801f21e:	b082      	sub	sp, #8
 801f220:	af00      	add	r7, sp, #0
 801f222:	6078      	str	r0, [r7, #4]
 801f224:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	22aa      	movs	r2, #170	@ 0xaa
 801f22a:	0092      	lsls	r2, r2, #2
 801f22c:	4694      	mov	ip, r2
 801f22e:	4463      	add	r3, ip
 801f230:	683a      	ldr	r2, [r7, #0]
 801f232:	0011      	movs	r1, r2
 801f234:	0018      	movs	r0, r3
 801f236:	f001 f810 	bl	802025a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801f23a:	687a      	ldr	r2, [r7, #4]
 801f23c:	23a5      	movs	r3, #165	@ 0xa5
 801f23e:	009b      	lsls	r3, r3, #2
 801f240:	2101      	movs	r1, #1
 801f242:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	4a23      	ldr	r2, [pc, #140]	@ (801f2d4 <USBD_LL_SetupStage+0xb8>)
 801f248:	5a9b      	ldrh	r3, [r3, r2]
 801f24a:	0019      	movs	r1, r3
 801f24c:	687a      	ldr	r2, [r7, #4]
 801f24e:	23a6      	movs	r3, #166	@ 0xa6
 801f250:	009b      	lsls	r3, r3, #2
 801f252:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801f254:	687a      	ldr	r2, [r7, #4]
 801f256:	23aa      	movs	r3, #170	@ 0xaa
 801f258:	009b      	lsls	r3, r3, #2
 801f25a:	5cd3      	ldrb	r3, [r2, r3]
 801f25c:	001a      	movs	r2, r3
 801f25e:	231f      	movs	r3, #31
 801f260:	4013      	ands	r3, r2
 801f262:	2b02      	cmp	r3, #2
 801f264:	d019      	beq.n	801f29a <USBD_LL_SetupStage+0x7e>
 801f266:	d822      	bhi.n	801f2ae <USBD_LL_SetupStage+0x92>
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d002      	beq.n	801f272 <USBD_LL_SetupStage+0x56>
 801f26c:	2b01      	cmp	r3, #1
 801f26e:	d00a      	beq.n	801f286 <USBD_LL_SetupStage+0x6a>
 801f270:	e01d      	b.n	801f2ae <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	22aa      	movs	r2, #170	@ 0xaa
 801f276:	0092      	lsls	r2, r2, #2
 801f278:	189a      	adds	r2, r3, r2
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	0011      	movs	r1, r2
 801f27e:	0018      	movs	r0, r3
 801f280:	f000 fa10 	bl	801f6a4 <USBD_StdDevReq>
      break;
 801f284:	e020      	b.n	801f2c8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	22aa      	movs	r2, #170	@ 0xaa
 801f28a:	0092      	lsls	r2, r2, #2
 801f28c:	189a      	adds	r2, r3, r2
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	0011      	movs	r1, r2
 801f292:	0018      	movs	r0, r3
 801f294:	f000 fa78 	bl	801f788 <USBD_StdItfReq>
      break;
 801f298:	e016      	b.n	801f2c8 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801f29a:	687b      	ldr	r3, [r7, #4]
 801f29c:	22aa      	movs	r2, #170	@ 0xaa
 801f29e:	0092      	lsls	r2, r2, #2
 801f2a0:	189a      	adds	r2, r3, r2
 801f2a2:	687b      	ldr	r3, [r7, #4]
 801f2a4:	0011      	movs	r1, r2
 801f2a6:	0018      	movs	r0, r3
 801f2a8:	f000 fac5 	bl	801f836 <USBD_StdEPReq>
      break;
 801f2ac:	e00c      	b.n	801f2c8 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801f2ae:	687a      	ldr	r2, [r7, #4]
 801f2b0:	23aa      	movs	r3, #170	@ 0xaa
 801f2b2:	009b      	lsls	r3, r3, #2
 801f2b4:	5cd3      	ldrb	r3, [r2, r3]
 801f2b6:	227f      	movs	r2, #127	@ 0x7f
 801f2b8:	4393      	bics	r3, r2
 801f2ba:	b2da      	uxtb	r2, r3
 801f2bc:	687b      	ldr	r3, [r7, #4]
 801f2be:	0011      	movs	r1, r2
 801f2c0:	0018      	movs	r0, r3
 801f2c2:	f001 fd2a 	bl	8020d1a <USBD_LL_StallEP>
      break;
 801f2c6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801f2c8:	2300      	movs	r3, #0
}
 801f2ca:	0018      	movs	r0, r3
 801f2cc:	46bd      	mov	sp, r7
 801f2ce:	b002      	add	sp, #8
 801f2d0:	bd80      	pop	{r7, pc}
 801f2d2:	46c0      	nop			@ (mov r8, r8)
 801f2d4:	000002ae 	.word	0x000002ae

0801f2d8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801f2d8:	b580      	push	{r7, lr}
 801f2da:	b086      	sub	sp, #24
 801f2dc:	af00      	add	r7, sp, #0
 801f2de:	60f8      	str	r0, [r7, #12]
 801f2e0:	607a      	str	r2, [r7, #4]
 801f2e2:	200b      	movs	r0, #11
 801f2e4:	183b      	adds	r3, r7, r0
 801f2e6:	1c0a      	adds	r2, r1, #0
 801f2e8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801f2ea:	183b      	adds	r3, r7, r0
 801f2ec:	781b      	ldrb	r3, [r3, #0]
 801f2ee:	2b00      	cmp	r3, #0
 801f2f0:	d154      	bne.n	801f39c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801f2f2:	68fb      	ldr	r3, [r7, #12]
 801f2f4:	3355      	adds	r3, #85	@ 0x55
 801f2f6:	33ff      	adds	r3, #255	@ 0xff
 801f2f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801f2fa:	68fa      	ldr	r2, [r7, #12]
 801f2fc:	23a5      	movs	r3, #165	@ 0xa5
 801f2fe:	009b      	lsls	r3, r3, #2
 801f300:	58d3      	ldr	r3, [r2, r3]
 801f302:	2b03      	cmp	r3, #3
 801f304:	d139      	bne.n	801f37a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801f306:	697b      	ldr	r3, [r7, #20]
 801f308:	68da      	ldr	r2, [r3, #12]
 801f30a:	697b      	ldr	r3, [r7, #20]
 801f30c:	691b      	ldr	r3, [r3, #16]
 801f30e:	429a      	cmp	r2, r3
 801f310:	d919      	bls.n	801f346 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801f312:	697b      	ldr	r3, [r7, #20]
 801f314:	68da      	ldr	r2, [r3, #12]
 801f316:	697b      	ldr	r3, [r7, #20]
 801f318:	691b      	ldr	r3, [r3, #16]
 801f31a:	1ad2      	subs	r2, r2, r3
 801f31c:	697b      	ldr	r3, [r7, #20]
 801f31e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801f320:	697b      	ldr	r3, [r7, #20]
 801f322:	68da      	ldr	r2, [r3, #12]
 801f324:	697b      	ldr	r3, [r7, #20]
 801f326:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801f328:	429a      	cmp	r2, r3
 801f32a:	d203      	bcs.n	801f334 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801f32c:	697b      	ldr	r3, [r7, #20]
 801f32e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801f330:	b29b      	uxth	r3, r3
 801f332:	e002      	b.n	801f33a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801f334:	697b      	ldr	r3, [r7, #20]
 801f336:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801f338:	b29b      	uxth	r3, r3
 801f33a:	6879      	ldr	r1, [r7, #4]
 801f33c:	68f8      	ldr	r0, [r7, #12]
 801f33e:	001a      	movs	r2, r3
 801f340:	f001 f898 	bl	8020474 <USBD_CtlContinueRx>
 801f344:	e045      	b.n	801f3d2 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801f346:	68fa      	ldr	r2, [r7, #12]
 801f348:	23ad      	movs	r3, #173	@ 0xad
 801f34a:	009b      	lsls	r3, r3, #2
 801f34c:	58d3      	ldr	r3, [r2, r3]
 801f34e:	691b      	ldr	r3, [r3, #16]
 801f350:	2b00      	cmp	r3, #0
 801f352:	d00d      	beq.n	801f370 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f354:	68fa      	ldr	r2, [r7, #12]
 801f356:	23a7      	movs	r3, #167	@ 0xa7
 801f358:	009b      	lsls	r3, r3, #2
 801f35a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801f35c:	2b03      	cmp	r3, #3
 801f35e:	d107      	bne.n	801f370 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801f360:	68fa      	ldr	r2, [r7, #12]
 801f362:	23ad      	movs	r3, #173	@ 0xad
 801f364:	009b      	lsls	r3, r3, #2
 801f366:	58d3      	ldr	r3, [r2, r3]
 801f368:	691b      	ldr	r3, [r3, #16]
 801f36a:	68fa      	ldr	r2, [r7, #12]
 801f36c:	0010      	movs	r0, r2
 801f36e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801f370:	68fb      	ldr	r3, [r7, #12]
 801f372:	0018      	movs	r0, r3
 801f374:	f001 f891 	bl	802049a <USBD_CtlSendStatus>
 801f378:	e02b      	b.n	801f3d2 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801f37a:	68fa      	ldr	r2, [r7, #12]
 801f37c:	23a5      	movs	r3, #165	@ 0xa5
 801f37e:	009b      	lsls	r3, r3, #2
 801f380:	58d3      	ldr	r3, [r2, r3]
 801f382:	2b05      	cmp	r3, #5
 801f384:	d125      	bne.n	801f3d2 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801f386:	68fa      	ldr	r2, [r7, #12]
 801f388:	23a5      	movs	r3, #165	@ 0xa5
 801f38a:	009b      	lsls	r3, r3, #2
 801f38c:	2100      	movs	r1, #0
 801f38e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801f390:	68fb      	ldr	r3, [r7, #12]
 801f392:	2100      	movs	r1, #0
 801f394:	0018      	movs	r0, r3
 801f396:	f001 fcc0 	bl	8020d1a <USBD_LL_StallEP>
 801f39a:	e01a      	b.n	801f3d2 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801f39c:	68fa      	ldr	r2, [r7, #12]
 801f39e:	23ad      	movs	r3, #173	@ 0xad
 801f3a0:	009b      	lsls	r3, r3, #2
 801f3a2:	58d3      	ldr	r3, [r2, r3]
 801f3a4:	699b      	ldr	r3, [r3, #24]
 801f3a6:	2b00      	cmp	r3, #0
 801f3a8:	d011      	beq.n	801f3ce <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f3aa:	68fa      	ldr	r2, [r7, #12]
 801f3ac:	23a7      	movs	r3, #167	@ 0xa7
 801f3ae:	009b      	lsls	r3, r3, #2
 801f3b0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801f3b2:	2b03      	cmp	r3, #3
 801f3b4:	d10b      	bne.n	801f3ce <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801f3b6:	68fa      	ldr	r2, [r7, #12]
 801f3b8:	23ad      	movs	r3, #173	@ 0xad
 801f3ba:	009b      	lsls	r3, r3, #2
 801f3bc:	58d3      	ldr	r3, [r2, r3]
 801f3be:	699b      	ldr	r3, [r3, #24]
 801f3c0:	220b      	movs	r2, #11
 801f3c2:	18ba      	adds	r2, r7, r2
 801f3c4:	7811      	ldrb	r1, [r2, #0]
 801f3c6:	68fa      	ldr	r2, [r7, #12]
 801f3c8:	0010      	movs	r0, r2
 801f3ca:	4798      	blx	r3
 801f3cc:	e001      	b.n	801f3d2 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801f3ce:	2302      	movs	r3, #2
 801f3d0:	e000      	b.n	801f3d4 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801f3d2:	2300      	movs	r3, #0
}
 801f3d4:	0018      	movs	r0, r3
 801f3d6:	46bd      	mov	sp, r7
 801f3d8:	b006      	add	sp, #24
 801f3da:	bd80      	pop	{r7, pc}

0801f3dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801f3dc:	b580      	push	{r7, lr}
 801f3de:	b086      	sub	sp, #24
 801f3e0:	af00      	add	r7, sp, #0
 801f3e2:	60f8      	str	r0, [r7, #12]
 801f3e4:	607a      	str	r2, [r7, #4]
 801f3e6:	200b      	movs	r0, #11
 801f3e8:	183b      	adds	r3, r7, r0
 801f3ea:	1c0a      	adds	r2, r1, #0
 801f3ec:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801f3ee:	183b      	adds	r3, r7, r0
 801f3f0:	781b      	ldrb	r3, [r3, #0]
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d000      	beq.n	801f3f8 <USBD_LL_DataInStage+0x1c>
 801f3f6:	e08e      	b.n	801f516 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801f3f8:	68fb      	ldr	r3, [r7, #12]
 801f3fa:	3314      	adds	r3, #20
 801f3fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801f3fe:	68fa      	ldr	r2, [r7, #12]
 801f400:	23a5      	movs	r3, #165	@ 0xa5
 801f402:	009b      	lsls	r3, r3, #2
 801f404:	58d3      	ldr	r3, [r2, r3]
 801f406:	2b02      	cmp	r3, #2
 801f408:	d164      	bne.n	801f4d4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801f40a:	697b      	ldr	r3, [r7, #20]
 801f40c:	68da      	ldr	r2, [r3, #12]
 801f40e:	697b      	ldr	r3, [r7, #20]
 801f410:	691b      	ldr	r3, [r3, #16]
 801f412:	429a      	cmp	r2, r3
 801f414:	d915      	bls.n	801f442 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801f416:	697b      	ldr	r3, [r7, #20]
 801f418:	68da      	ldr	r2, [r3, #12]
 801f41a:	697b      	ldr	r3, [r7, #20]
 801f41c:	691b      	ldr	r3, [r3, #16]
 801f41e:	1ad2      	subs	r2, r2, r3
 801f420:	697b      	ldr	r3, [r7, #20]
 801f422:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801f424:	697b      	ldr	r3, [r7, #20]
 801f426:	68db      	ldr	r3, [r3, #12]
 801f428:	b29a      	uxth	r2, r3
 801f42a:	6879      	ldr	r1, [r7, #4]
 801f42c:	68fb      	ldr	r3, [r7, #12]
 801f42e:	0018      	movs	r0, r3
 801f430:	f000 ffe9 	bl	8020406 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801f434:	68f8      	ldr	r0, [r7, #12]
 801f436:	2300      	movs	r3, #0
 801f438:	2200      	movs	r2, #0
 801f43a:	2100      	movs	r1, #0
 801f43c:	f001 fd56 	bl	8020eec <USBD_LL_PrepareReceive>
 801f440:	e059      	b.n	801f4f6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801f442:	697b      	ldr	r3, [r7, #20]
 801f444:	689a      	ldr	r2, [r3, #8]
 801f446:	697b      	ldr	r3, [r7, #20]
 801f448:	691b      	ldr	r3, [r3, #16]
 801f44a:	0019      	movs	r1, r3
 801f44c:	0010      	movs	r0, r2
 801f44e:	f7e0 ff2f 	bl	80002b0 <__aeabi_uidivmod>
 801f452:	1e0b      	subs	r3, r1, #0
 801f454:	d11f      	bne.n	801f496 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801f456:	697b      	ldr	r3, [r7, #20]
 801f458:	689a      	ldr	r2, [r3, #8]
 801f45a:	697b      	ldr	r3, [r7, #20]
 801f45c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801f45e:	429a      	cmp	r2, r3
 801f460:	d319      	bcc.n	801f496 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801f462:	697b      	ldr	r3, [r7, #20]
 801f464:	689a      	ldr	r2, [r3, #8]
 801f466:	68f9      	ldr	r1, [r7, #12]
 801f468:	23a6      	movs	r3, #166	@ 0xa6
 801f46a:	009b      	lsls	r3, r3, #2
 801f46c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801f46e:	429a      	cmp	r2, r3
 801f470:	d211      	bcs.n	801f496 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801f472:	68fb      	ldr	r3, [r7, #12]
 801f474:	2200      	movs	r2, #0
 801f476:	2100      	movs	r1, #0
 801f478:	0018      	movs	r0, r3
 801f47a:	f000 ffc4 	bl	8020406 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801f47e:	68fa      	ldr	r2, [r7, #12]
 801f480:	23a6      	movs	r3, #166	@ 0xa6
 801f482:	009b      	lsls	r3, r3, #2
 801f484:	2100      	movs	r1, #0
 801f486:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801f488:	68f8      	ldr	r0, [r7, #12]
 801f48a:	2300      	movs	r3, #0
 801f48c:	2200      	movs	r2, #0
 801f48e:	2100      	movs	r1, #0
 801f490:	f001 fd2c 	bl	8020eec <USBD_LL_PrepareReceive>
 801f494:	e02f      	b.n	801f4f6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801f496:	68fa      	ldr	r2, [r7, #12]
 801f498:	23ad      	movs	r3, #173	@ 0xad
 801f49a:	009b      	lsls	r3, r3, #2
 801f49c:	58d3      	ldr	r3, [r2, r3]
 801f49e:	68db      	ldr	r3, [r3, #12]
 801f4a0:	2b00      	cmp	r3, #0
 801f4a2:	d00d      	beq.n	801f4c0 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f4a4:	68fa      	ldr	r2, [r7, #12]
 801f4a6:	23a7      	movs	r3, #167	@ 0xa7
 801f4a8:	009b      	lsls	r3, r3, #2
 801f4aa:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801f4ac:	2b03      	cmp	r3, #3
 801f4ae:	d107      	bne.n	801f4c0 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801f4b0:	68fa      	ldr	r2, [r7, #12]
 801f4b2:	23ad      	movs	r3, #173	@ 0xad
 801f4b4:	009b      	lsls	r3, r3, #2
 801f4b6:	58d3      	ldr	r3, [r2, r3]
 801f4b8:	68db      	ldr	r3, [r3, #12]
 801f4ba:	68fa      	ldr	r2, [r7, #12]
 801f4bc:	0010      	movs	r0, r2
 801f4be:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801f4c0:	68fb      	ldr	r3, [r7, #12]
 801f4c2:	2180      	movs	r1, #128	@ 0x80
 801f4c4:	0018      	movs	r0, r3
 801f4c6:	f001 fc28 	bl	8020d1a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801f4ca:	68fb      	ldr	r3, [r7, #12]
 801f4cc:	0018      	movs	r0, r3
 801f4ce:	f000 fff8 	bl	80204c2 <USBD_CtlReceiveStatus>
 801f4d2:	e010      	b.n	801f4f6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801f4d4:	68fa      	ldr	r2, [r7, #12]
 801f4d6:	23a5      	movs	r3, #165	@ 0xa5
 801f4d8:	009b      	lsls	r3, r3, #2
 801f4da:	58d3      	ldr	r3, [r2, r3]
 801f4dc:	2b04      	cmp	r3, #4
 801f4de:	d005      	beq.n	801f4ec <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801f4e0:	68fa      	ldr	r2, [r7, #12]
 801f4e2:	23a5      	movs	r3, #165	@ 0xa5
 801f4e4:	009b      	lsls	r3, r3, #2
 801f4e6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	d104      	bne.n	801f4f6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801f4ec:	68fb      	ldr	r3, [r7, #12]
 801f4ee:	2180      	movs	r1, #128	@ 0x80
 801f4f0:	0018      	movs	r0, r3
 801f4f2:	f001 fc12 	bl	8020d1a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801f4f6:	68fa      	ldr	r2, [r7, #12]
 801f4f8:	23a8      	movs	r3, #168	@ 0xa8
 801f4fa:	009b      	lsls	r3, r3, #2
 801f4fc:	5cd3      	ldrb	r3, [r2, r3]
 801f4fe:	2b01      	cmp	r3, #1
 801f500:	d124      	bne.n	801f54c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801f502:	68fb      	ldr	r3, [r7, #12]
 801f504:	0018      	movs	r0, r3
 801f506:	f7ff fe43 	bl	801f190 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801f50a:	68fa      	ldr	r2, [r7, #12]
 801f50c:	23a8      	movs	r3, #168	@ 0xa8
 801f50e:	009b      	lsls	r3, r3, #2
 801f510:	2100      	movs	r1, #0
 801f512:	54d1      	strb	r1, [r2, r3]
 801f514:	e01a      	b.n	801f54c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801f516:	68fa      	ldr	r2, [r7, #12]
 801f518:	23ad      	movs	r3, #173	@ 0xad
 801f51a:	009b      	lsls	r3, r3, #2
 801f51c:	58d3      	ldr	r3, [r2, r3]
 801f51e:	695b      	ldr	r3, [r3, #20]
 801f520:	2b00      	cmp	r3, #0
 801f522:	d011      	beq.n	801f548 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801f524:	68fa      	ldr	r2, [r7, #12]
 801f526:	23a7      	movs	r3, #167	@ 0xa7
 801f528:	009b      	lsls	r3, r3, #2
 801f52a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801f52c:	2b03      	cmp	r3, #3
 801f52e:	d10b      	bne.n	801f548 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801f530:	68fa      	ldr	r2, [r7, #12]
 801f532:	23ad      	movs	r3, #173	@ 0xad
 801f534:	009b      	lsls	r3, r3, #2
 801f536:	58d3      	ldr	r3, [r2, r3]
 801f538:	695b      	ldr	r3, [r3, #20]
 801f53a:	220b      	movs	r2, #11
 801f53c:	18ba      	adds	r2, r7, r2
 801f53e:	7811      	ldrb	r1, [r2, #0]
 801f540:	68fa      	ldr	r2, [r7, #12]
 801f542:	0010      	movs	r0, r2
 801f544:	4798      	blx	r3
 801f546:	e001      	b.n	801f54c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801f548:	2302      	movs	r3, #2
 801f54a:	e000      	b.n	801f54e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801f54c:	2300      	movs	r3, #0
}
 801f54e:	0018      	movs	r0, r3
 801f550:	46bd      	mov	sp, r7
 801f552:	b006      	add	sp, #24
 801f554:	bd80      	pop	{r7, pc}

0801f556 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801f556:	b580      	push	{r7, lr}
 801f558:	b082      	sub	sp, #8
 801f55a:	af00      	add	r7, sp, #0
 801f55c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801f55e:	6878      	ldr	r0, [r7, #4]
 801f560:	2340      	movs	r3, #64	@ 0x40
 801f562:	2200      	movs	r2, #0
 801f564:	2100      	movs	r1, #0
 801f566:	f001 fb76 	bl	8020c56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801f56a:	687a      	ldr	r2, [r7, #4]
 801f56c:	23ac      	movs	r3, #172	@ 0xac
 801f56e:	005b      	lsls	r3, r3, #1
 801f570:	2101      	movs	r1, #1
 801f572:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801f574:	687a      	ldr	r2, [r7, #4]
 801f576:	23b2      	movs	r3, #178	@ 0xb2
 801f578:	005b      	lsls	r3, r3, #1
 801f57a:	2140      	movs	r1, #64	@ 0x40
 801f57c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801f57e:	6878      	ldr	r0, [r7, #4]
 801f580:	2340      	movs	r3, #64	@ 0x40
 801f582:	2200      	movs	r2, #0
 801f584:	2180      	movs	r1, #128	@ 0x80
 801f586:	f001 fb66 	bl	8020c56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	2201      	movs	r2, #1
 801f58e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801f590:	687b      	ldr	r3, [r7, #4]
 801f592:	2240      	movs	r2, #64	@ 0x40
 801f594:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801f596:	687a      	ldr	r2, [r7, #4]
 801f598:	23a7      	movs	r3, #167	@ 0xa7
 801f59a:	009b      	lsls	r3, r3, #2
 801f59c:	2101      	movs	r1, #1
 801f59e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801f5a0:	687a      	ldr	r2, [r7, #4]
 801f5a2:	23a5      	movs	r3, #165	@ 0xa5
 801f5a4:	009b      	lsls	r3, r3, #2
 801f5a6:	2100      	movs	r1, #0
 801f5a8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	2200      	movs	r2, #0
 801f5ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801f5b0:	687a      	ldr	r2, [r7, #4]
 801f5b2:	23a9      	movs	r3, #169	@ 0xa9
 801f5b4:	009b      	lsls	r3, r3, #2
 801f5b6:	2100      	movs	r1, #0
 801f5b8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801f5ba:	687a      	ldr	r2, [r7, #4]
 801f5bc:	23ae      	movs	r3, #174	@ 0xae
 801f5be:	009b      	lsls	r3, r3, #2
 801f5c0:	58d3      	ldr	r3, [r2, r3]
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	d00a      	beq.n	801f5dc <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801f5c6:	687a      	ldr	r2, [r7, #4]
 801f5c8:	23ad      	movs	r3, #173	@ 0xad
 801f5ca:	009b      	lsls	r3, r3, #2
 801f5cc:	58d3      	ldr	r3, [r2, r3]
 801f5ce:	685a      	ldr	r2, [r3, #4]
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	685b      	ldr	r3, [r3, #4]
 801f5d4:	b2d9      	uxtb	r1, r3
 801f5d6:	687b      	ldr	r3, [r7, #4]
 801f5d8:	0018      	movs	r0, r3
 801f5da:	4790      	blx	r2
  }

  return USBD_OK;
 801f5dc:	2300      	movs	r3, #0
}
 801f5de:	0018      	movs	r0, r3
 801f5e0:	46bd      	mov	sp, r7
 801f5e2:	b002      	add	sp, #8
 801f5e4:	bd80      	pop	{r7, pc}

0801f5e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801f5e6:	b580      	push	{r7, lr}
 801f5e8:	b082      	sub	sp, #8
 801f5ea:	af00      	add	r7, sp, #0
 801f5ec:	6078      	str	r0, [r7, #4]
 801f5ee:	000a      	movs	r2, r1
 801f5f0:	1cfb      	adds	r3, r7, #3
 801f5f2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	1cfa      	adds	r2, r7, #3
 801f5f8:	7812      	ldrb	r2, [r2, #0]
 801f5fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801f5fc:	2300      	movs	r3, #0
}
 801f5fe:	0018      	movs	r0, r3
 801f600:	46bd      	mov	sp, r7
 801f602:	b002      	add	sp, #8
 801f604:	bd80      	pop	{r7, pc}
	...

0801f608 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801f608:	b580      	push	{r7, lr}
 801f60a:	b082      	sub	sp, #8
 801f60c:	af00      	add	r7, sp, #0
 801f60e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801f610:	687a      	ldr	r2, [r7, #4]
 801f612:	23a7      	movs	r3, #167	@ 0xa7
 801f614:	009b      	lsls	r3, r3, #2
 801f616:	5cd1      	ldrb	r1, [r2, r3]
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	4a06      	ldr	r2, [pc, #24]	@ (801f634 <USBD_LL_Suspend+0x2c>)
 801f61c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801f61e:	687a      	ldr	r2, [r7, #4]
 801f620:	23a7      	movs	r3, #167	@ 0xa7
 801f622:	009b      	lsls	r3, r3, #2
 801f624:	2104      	movs	r1, #4
 801f626:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801f628:	2300      	movs	r3, #0
}
 801f62a:	0018      	movs	r0, r3
 801f62c:	46bd      	mov	sp, r7
 801f62e:	b002      	add	sp, #8
 801f630:	bd80      	pop	{r7, pc}
 801f632:	46c0      	nop			@ (mov r8, r8)
 801f634:	0000029d 	.word	0x0000029d

0801f638 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801f638:	b580      	push	{r7, lr}
 801f63a:	b082      	sub	sp, #8
 801f63c:	af00      	add	r7, sp, #0
 801f63e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801f640:	687a      	ldr	r2, [r7, #4]
 801f642:	23a7      	movs	r3, #167	@ 0xa7
 801f644:	009b      	lsls	r3, r3, #2
 801f646:	5cd3      	ldrb	r3, [r2, r3]
 801f648:	2b04      	cmp	r3, #4
 801f64a:	d106      	bne.n	801f65a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	4a05      	ldr	r2, [pc, #20]	@ (801f664 <USBD_LL_Resume+0x2c>)
 801f650:	5c99      	ldrb	r1, [r3, r2]
 801f652:	687a      	ldr	r2, [r7, #4]
 801f654:	23a7      	movs	r3, #167	@ 0xa7
 801f656:	009b      	lsls	r3, r3, #2
 801f658:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801f65a:	2300      	movs	r3, #0
}
 801f65c:	0018      	movs	r0, r3
 801f65e:	46bd      	mov	sp, r7
 801f660:	b002      	add	sp, #8
 801f662:	bd80      	pop	{r7, pc}
 801f664:	0000029d 	.word	0x0000029d

0801f668 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801f668:	b580      	push	{r7, lr}
 801f66a:	b082      	sub	sp, #8
 801f66c:	af00      	add	r7, sp, #0
 801f66e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801f670:	687a      	ldr	r2, [r7, #4]
 801f672:	23a7      	movs	r3, #167	@ 0xa7
 801f674:	009b      	lsls	r3, r3, #2
 801f676:	5cd3      	ldrb	r3, [r2, r3]
 801f678:	2b03      	cmp	r3, #3
 801f67a:	d10e      	bne.n	801f69a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801f67c:	687a      	ldr	r2, [r7, #4]
 801f67e:	23ad      	movs	r3, #173	@ 0xad
 801f680:	009b      	lsls	r3, r3, #2
 801f682:	58d3      	ldr	r3, [r2, r3]
 801f684:	69db      	ldr	r3, [r3, #28]
 801f686:	2b00      	cmp	r3, #0
 801f688:	d007      	beq.n	801f69a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801f68a:	687a      	ldr	r2, [r7, #4]
 801f68c:	23ad      	movs	r3, #173	@ 0xad
 801f68e:	009b      	lsls	r3, r3, #2
 801f690:	58d3      	ldr	r3, [r2, r3]
 801f692:	69db      	ldr	r3, [r3, #28]
 801f694:	687a      	ldr	r2, [r7, #4]
 801f696:	0010      	movs	r0, r2
 801f698:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801f69a:	2300      	movs	r3, #0
}
 801f69c:	0018      	movs	r0, r3
 801f69e:	46bd      	mov	sp, r7
 801f6a0:	b002      	add	sp, #8
 801f6a2:	bd80      	pop	{r7, pc}

0801f6a4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801f6a4:	b580      	push	{r7, lr}
 801f6a6:	b084      	sub	sp, #16
 801f6a8:	af00      	add	r7, sp, #0
 801f6aa:	6078      	str	r0, [r7, #4]
 801f6ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801f6ae:	230f      	movs	r3, #15
 801f6b0:	18fb      	adds	r3, r7, r3
 801f6b2:	2200      	movs	r2, #0
 801f6b4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f6b6:	683b      	ldr	r3, [r7, #0]
 801f6b8:	781b      	ldrb	r3, [r3, #0]
 801f6ba:	001a      	movs	r2, r3
 801f6bc:	2360      	movs	r3, #96	@ 0x60
 801f6be:	4013      	ands	r3, r2
 801f6c0:	2b40      	cmp	r3, #64	@ 0x40
 801f6c2:	d004      	beq.n	801f6ce <USBD_StdDevReq+0x2a>
 801f6c4:	d84f      	bhi.n	801f766 <USBD_StdDevReq+0xc2>
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	d00b      	beq.n	801f6e2 <USBD_StdDevReq+0x3e>
 801f6ca:	2b20      	cmp	r3, #32
 801f6cc:	d14b      	bne.n	801f766 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801f6ce:	687a      	ldr	r2, [r7, #4]
 801f6d0:	23ad      	movs	r3, #173	@ 0xad
 801f6d2:	009b      	lsls	r3, r3, #2
 801f6d4:	58d3      	ldr	r3, [r2, r3]
 801f6d6:	689b      	ldr	r3, [r3, #8]
 801f6d8:	6839      	ldr	r1, [r7, #0]
 801f6da:	687a      	ldr	r2, [r7, #4]
 801f6dc:	0010      	movs	r0, r2
 801f6de:	4798      	blx	r3
      break;
 801f6e0:	e048      	b.n	801f774 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801f6e2:	683b      	ldr	r3, [r7, #0]
 801f6e4:	785b      	ldrb	r3, [r3, #1]
 801f6e6:	2b09      	cmp	r3, #9
 801f6e8:	d835      	bhi.n	801f756 <USBD_StdDevReq+0xb2>
 801f6ea:	009a      	lsls	r2, r3, #2
 801f6ec:	4b25      	ldr	r3, [pc, #148]	@ (801f784 <USBD_StdDevReq+0xe0>)
 801f6ee:	18d3      	adds	r3, r2, r3
 801f6f0:	681b      	ldr	r3, [r3, #0]
 801f6f2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801f6f4:	683a      	ldr	r2, [r7, #0]
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	0011      	movs	r1, r2
 801f6fa:	0018      	movs	r0, r3
 801f6fc:	f000 fa52 	bl	801fba4 <USBD_GetDescriptor>
          break;
 801f700:	e030      	b.n	801f764 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801f702:	683a      	ldr	r2, [r7, #0]
 801f704:	687b      	ldr	r3, [r7, #4]
 801f706:	0011      	movs	r1, r2
 801f708:	0018      	movs	r0, r3
 801f70a:	f000 fbfd 	bl	801ff08 <USBD_SetAddress>
          break;
 801f70e:	e029      	b.n	801f764 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801f710:	683a      	ldr	r2, [r7, #0]
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	0011      	movs	r1, r2
 801f716:	0018      	movs	r0, r3
 801f718:	f000 fc4a 	bl	801ffb0 <USBD_SetConfig>
          break;
 801f71c:	e022      	b.n	801f764 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801f71e:	683a      	ldr	r2, [r7, #0]
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	0011      	movs	r1, r2
 801f724:	0018      	movs	r0, r3
 801f726:	f000 fce7 	bl	80200f8 <USBD_GetConfig>
          break;
 801f72a:	e01b      	b.n	801f764 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801f72c:	683a      	ldr	r2, [r7, #0]
 801f72e:	687b      	ldr	r3, [r7, #4]
 801f730:	0011      	movs	r1, r2
 801f732:	0018      	movs	r0, r3
 801f734:	f000 fd1b 	bl	802016e <USBD_GetStatus>
          break;
 801f738:	e014      	b.n	801f764 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801f73a:	683a      	ldr	r2, [r7, #0]
 801f73c:	687b      	ldr	r3, [r7, #4]
 801f73e:	0011      	movs	r1, r2
 801f740:	0018      	movs	r0, r3
 801f742:	f000 fd4e 	bl	80201e2 <USBD_SetFeature>
          break;
 801f746:	e00d      	b.n	801f764 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801f748:	683a      	ldr	r2, [r7, #0]
 801f74a:	687b      	ldr	r3, [r7, #4]
 801f74c:	0011      	movs	r1, r2
 801f74e:	0018      	movs	r0, r3
 801f750:	f000 fd5d 	bl	802020e <USBD_ClrFeature>
          break;
 801f754:	e006      	b.n	801f764 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801f756:	683a      	ldr	r2, [r7, #0]
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	0011      	movs	r1, r2
 801f75c:	0018      	movs	r0, r3
 801f75e:	f000 fdb4 	bl	80202ca <USBD_CtlError>
          break;
 801f762:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801f764:	e006      	b.n	801f774 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801f766:	683a      	ldr	r2, [r7, #0]
 801f768:	687b      	ldr	r3, [r7, #4]
 801f76a:	0011      	movs	r1, r2
 801f76c:	0018      	movs	r0, r3
 801f76e:	f000 fdac 	bl	80202ca <USBD_CtlError>
      break;
 801f772:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801f774:	230f      	movs	r3, #15
 801f776:	18fb      	adds	r3, r7, r3
 801f778:	781b      	ldrb	r3, [r3, #0]
}
 801f77a:	0018      	movs	r0, r3
 801f77c:	46bd      	mov	sp, r7
 801f77e:	b004      	add	sp, #16
 801f780:	bd80      	pop	{r7, pc}
 801f782:	46c0      	nop			@ (mov r8, r8)
 801f784:	0802b2cc 	.word	0x0802b2cc

0801f788 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801f788:	b5b0      	push	{r4, r5, r7, lr}
 801f78a:	b084      	sub	sp, #16
 801f78c:	af00      	add	r7, sp, #0
 801f78e:	6078      	str	r0, [r7, #4]
 801f790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801f792:	230f      	movs	r3, #15
 801f794:	18fb      	adds	r3, r7, r3
 801f796:	2200      	movs	r2, #0
 801f798:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f79a:	683b      	ldr	r3, [r7, #0]
 801f79c:	781b      	ldrb	r3, [r3, #0]
 801f79e:	001a      	movs	r2, r3
 801f7a0:	2360      	movs	r3, #96	@ 0x60
 801f7a2:	4013      	ands	r3, r2
 801f7a4:	2b40      	cmp	r3, #64	@ 0x40
 801f7a6:	d004      	beq.n	801f7b2 <USBD_StdItfReq+0x2a>
 801f7a8:	d839      	bhi.n	801f81e <USBD_StdItfReq+0x96>
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	d001      	beq.n	801f7b2 <USBD_StdItfReq+0x2a>
 801f7ae:	2b20      	cmp	r3, #32
 801f7b0:	d135      	bne.n	801f81e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801f7b2:	687a      	ldr	r2, [r7, #4]
 801f7b4:	23a7      	movs	r3, #167	@ 0xa7
 801f7b6:	009b      	lsls	r3, r3, #2
 801f7b8:	5cd3      	ldrb	r3, [r2, r3]
 801f7ba:	3b01      	subs	r3, #1
 801f7bc:	2b02      	cmp	r3, #2
 801f7be:	d825      	bhi.n	801f80c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801f7c0:	683b      	ldr	r3, [r7, #0]
 801f7c2:	889b      	ldrh	r3, [r3, #4]
 801f7c4:	b2db      	uxtb	r3, r3
 801f7c6:	2b01      	cmp	r3, #1
 801f7c8:	d819      	bhi.n	801f7fe <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801f7ca:	687a      	ldr	r2, [r7, #4]
 801f7cc:	23ad      	movs	r3, #173	@ 0xad
 801f7ce:	009b      	lsls	r3, r3, #2
 801f7d0:	58d3      	ldr	r3, [r2, r3]
 801f7d2:	689b      	ldr	r3, [r3, #8]
 801f7d4:	250f      	movs	r5, #15
 801f7d6:	197c      	adds	r4, r7, r5
 801f7d8:	6839      	ldr	r1, [r7, #0]
 801f7da:	687a      	ldr	r2, [r7, #4]
 801f7dc:	0010      	movs	r0, r2
 801f7de:	4798      	blx	r3
 801f7e0:	0003      	movs	r3, r0
 801f7e2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801f7e4:	683b      	ldr	r3, [r7, #0]
 801f7e6:	88db      	ldrh	r3, [r3, #6]
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	d116      	bne.n	801f81a <USBD_StdItfReq+0x92>
 801f7ec:	197b      	adds	r3, r7, r5
 801f7ee:	781b      	ldrb	r3, [r3, #0]
 801f7f0:	2b00      	cmp	r3, #0
 801f7f2:	d112      	bne.n	801f81a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801f7f4:	687b      	ldr	r3, [r7, #4]
 801f7f6:	0018      	movs	r0, r3
 801f7f8:	f000 fe4f 	bl	802049a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801f7fc:	e00d      	b.n	801f81a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801f7fe:	683a      	ldr	r2, [r7, #0]
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	0011      	movs	r1, r2
 801f804:	0018      	movs	r0, r3
 801f806:	f000 fd60 	bl	80202ca <USBD_CtlError>
          break;
 801f80a:	e006      	b.n	801f81a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801f80c:	683a      	ldr	r2, [r7, #0]
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	0011      	movs	r1, r2
 801f812:	0018      	movs	r0, r3
 801f814:	f000 fd59 	bl	80202ca <USBD_CtlError>
          break;
 801f818:	e000      	b.n	801f81c <USBD_StdItfReq+0x94>
          break;
 801f81a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801f81c:	e006      	b.n	801f82c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801f81e:	683a      	ldr	r2, [r7, #0]
 801f820:	687b      	ldr	r3, [r7, #4]
 801f822:	0011      	movs	r1, r2
 801f824:	0018      	movs	r0, r3
 801f826:	f000 fd50 	bl	80202ca <USBD_CtlError>
      break;
 801f82a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801f82c:	2300      	movs	r3, #0
}
 801f82e:	0018      	movs	r0, r3
 801f830:	46bd      	mov	sp, r7
 801f832:	b004      	add	sp, #16
 801f834:	bdb0      	pop	{r4, r5, r7, pc}

0801f836 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801f836:	b5b0      	push	{r4, r5, r7, lr}
 801f838:	b084      	sub	sp, #16
 801f83a:	af00      	add	r7, sp, #0
 801f83c:	6078      	str	r0, [r7, #4]
 801f83e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801f840:	230f      	movs	r3, #15
 801f842:	18fb      	adds	r3, r7, r3
 801f844:	2200      	movs	r2, #0
 801f846:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801f848:	683b      	ldr	r3, [r7, #0]
 801f84a:	889a      	ldrh	r2, [r3, #4]
 801f84c:	230e      	movs	r3, #14
 801f84e:	18fb      	adds	r3, r7, r3
 801f850:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801f852:	683b      	ldr	r3, [r7, #0]
 801f854:	781b      	ldrb	r3, [r3, #0]
 801f856:	001a      	movs	r2, r3
 801f858:	2360      	movs	r3, #96	@ 0x60
 801f85a:	4013      	ands	r3, r2
 801f85c:	2b40      	cmp	r3, #64	@ 0x40
 801f85e:	d006      	beq.n	801f86e <USBD_StdEPReq+0x38>
 801f860:	d900      	bls.n	801f864 <USBD_StdEPReq+0x2e>
 801f862:	e190      	b.n	801fb86 <USBD_StdEPReq+0x350>
 801f864:	2b00      	cmp	r3, #0
 801f866:	d00c      	beq.n	801f882 <USBD_StdEPReq+0x4c>
 801f868:	2b20      	cmp	r3, #32
 801f86a:	d000      	beq.n	801f86e <USBD_StdEPReq+0x38>
 801f86c:	e18b      	b.n	801fb86 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801f86e:	687a      	ldr	r2, [r7, #4]
 801f870:	23ad      	movs	r3, #173	@ 0xad
 801f872:	009b      	lsls	r3, r3, #2
 801f874:	58d3      	ldr	r3, [r2, r3]
 801f876:	689b      	ldr	r3, [r3, #8]
 801f878:	6839      	ldr	r1, [r7, #0]
 801f87a:	687a      	ldr	r2, [r7, #4]
 801f87c:	0010      	movs	r0, r2
 801f87e:	4798      	blx	r3
      break;
 801f880:	e188      	b.n	801fb94 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801f882:	683b      	ldr	r3, [r7, #0]
 801f884:	781b      	ldrb	r3, [r3, #0]
 801f886:	001a      	movs	r2, r3
 801f888:	2360      	movs	r3, #96	@ 0x60
 801f88a:	4013      	ands	r3, r2
 801f88c:	2b20      	cmp	r3, #32
 801f88e:	d10f      	bne.n	801f8b0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801f890:	687a      	ldr	r2, [r7, #4]
 801f892:	23ad      	movs	r3, #173	@ 0xad
 801f894:	009b      	lsls	r3, r3, #2
 801f896:	58d3      	ldr	r3, [r2, r3]
 801f898:	689b      	ldr	r3, [r3, #8]
 801f89a:	250f      	movs	r5, #15
 801f89c:	197c      	adds	r4, r7, r5
 801f89e:	6839      	ldr	r1, [r7, #0]
 801f8a0:	687a      	ldr	r2, [r7, #4]
 801f8a2:	0010      	movs	r0, r2
 801f8a4:	4798      	blx	r3
 801f8a6:	0003      	movs	r3, r0
 801f8a8:	7023      	strb	r3, [r4, #0]

        return ret;
 801f8aa:	197b      	adds	r3, r7, r5
 801f8ac:	781b      	ldrb	r3, [r3, #0]
 801f8ae:	e174      	b.n	801fb9a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801f8b0:	683b      	ldr	r3, [r7, #0]
 801f8b2:	785b      	ldrb	r3, [r3, #1]
 801f8b4:	2b03      	cmp	r3, #3
 801f8b6:	d007      	beq.n	801f8c8 <USBD_StdEPReq+0x92>
 801f8b8:	dd00      	ble.n	801f8bc <USBD_StdEPReq+0x86>
 801f8ba:	e15c      	b.n	801fb76 <USBD_StdEPReq+0x340>
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	d100      	bne.n	801f8c2 <USBD_StdEPReq+0x8c>
 801f8c0:	e092      	b.n	801f9e8 <USBD_StdEPReq+0x1b2>
 801f8c2:	2b01      	cmp	r3, #1
 801f8c4:	d04b      	beq.n	801f95e <USBD_StdEPReq+0x128>
 801f8c6:	e156      	b.n	801fb76 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801f8c8:	687a      	ldr	r2, [r7, #4]
 801f8ca:	23a7      	movs	r3, #167	@ 0xa7
 801f8cc:	009b      	lsls	r3, r3, #2
 801f8ce:	5cd3      	ldrb	r3, [r2, r3]
 801f8d0:	2b02      	cmp	r3, #2
 801f8d2:	d002      	beq.n	801f8da <USBD_StdEPReq+0xa4>
 801f8d4:	2b03      	cmp	r3, #3
 801f8d6:	d01d      	beq.n	801f914 <USBD_StdEPReq+0xde>
 801f8d8:	e039      	b.n	801f94e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801f8da:	220e      	movs	r2, #14
 801f8dc:	18bb      	adds	r3, r7, r2
 801f8de:	781b      	ldrb	r3, [r3, #0]
 801f8e0:	2b00      	cmp	r3, #0
 801f8e2:	d010      	beq.n	801f906 <USBD_StdEPReq+0xd0>
 801f8e4:	18bb      	adds	r3, r7, r2
 801f8e6:	781b      	ldrb	r3, [r3, #0]
 801f8e8:	2b80      	cmp	r3, #128	@ 0x80
 801f8ea:	d00c      	beq.n	801f906 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801f8ec:	18bb      	adds	r3, r7, r2
 801f8ee:	781a      	ldrb	r2, [r3, #0]
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	0011      	movs	r1, r2
 801f8f4:	0018      	movs	r0, r3
 801f8f6:	f001 fa10 	bl	8020d1a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	2180      	movs	r1, #128	@ 0x80
 801f8fe:	0018      	movs	r0, r3
 801f900:	f001 fa0b 	bl	8020d1a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801f904:	e02a      	b.n	801f95c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801f906:	683a      	ldr	r2, [r7, #0]
 801f908:	687b      	ldr	r3, [r7, #4]
 801f90a:	0011      	movs	r1, r2
 801f90c:	0018      	movs	r0, r3
 801f90e:	f000 fcdc 	bl	80202ca <USBD_CtlError>
              break;
 801f912:	e023      	b.n	801f95c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801f914:	683b      	ldr	r3, [r7, #0]
 801f916:	885b      	ldrh	r3, [r3, #2]
 801f918:	2b00      	cmp	r3, #0
 801f91a:	d113      	bne.n	801f944 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801f91c:	220e      	movs	r2, #14
 801f91e:	18bb      	adds	r3, r7, r2
 801f920:	781b      	ldrb	r3, [r3, #0]
 801f922:	2b00      	cmp	r3, #0
 801f924:	d00e      	beq.n	801f944 <USBD_StdEPReq+0x10e>
 801f926:	18bb      	adds	r3, r7, r2
 801f928:	781b      	ldrb	r3, [r3, #0]
 801f92a:	2b80      	cmp	r3, #128	@ 0x80
 801f92c:	d00a      	beq.n	801f944 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801f92e:	683b      	ldr	r3, [r7, #0]
 801f930:	88db      	ldrh	r3, [r3, #6]
 801f932:	2b00      	cmp	r3, #0
 801f934:	d106      	bne.n	801f944 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801f936:	18bb      	adds	r3, r7, r2
 801f938:	781a      	ldrb	r2, [r3, #0]
 801f93a:	687b      	ldr	r3, [r7, #4]
 801f93c:	0011      	movs	r1, r2
 801f93e:	0018      	movs	r0, r3
 801f940:	f001 f9eb 	bl	8020d1a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	0018      	movs	r0, r3
 801f948:	f000 fda7 	bl	802049a <USBD_CtlSendStatus>

              break;
 801f94c:	e006      	b.n	801f95c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801f94e:	683a      	ldr	r2, [r7, #0]
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	0011      	movs	r1, r2
 801f954:	0018      	movs	r0, r3
 801f956:	f000 fcb8 	bl	80202ca <USBD_CtlError>
              break;
 801f95a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801f95c:	e112      	b.n	801fb84 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801f95e:	687a      	ldr	r2, [r7, #4]
 801f960:	23a7      	movs	r3, #167	@ 0xa7
 801f962:	009b      	lsls	r3, r3, #2
 801f964:	5cd3      	ldrb	r3, [r2, r3]
 801f966:	2b02      	cmp	r3, #2
 801f968:	d002      	beq.n	801f970 <USBD_StdEPReq+0x13a>
 801f96a:	2b03      	cmp	r3, #3
 801f96c:	d01d      	beq.n	801f9aa <USBD_StdEPReq+0x174>
 801f96e:	e032      	b.n	801f9d6 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801f970:	220e      	movs	r2, #14
 801f972:	18bb      	adds	r3, r7, r2
 801f974:	781b      	ldrb	r3, [r3, #0]
 801f976:	2b00      	cmp	r3, #0
 801f978:	d010      	beq.n	801f99c <USBD_StdEPReq+0x166>
 801f97a:	18bb      	adds	r3, r7, r2
 801f97c:	781b      	ldrb	r3, [r3, #0]
 801f97e:	2b80      	cmp	r3, #128	@ 0x80
 801f980:	d00c      	beq.n	801f99c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801f982:	18bb      	adds	r3, r7, r2
 801f984:	781a      	ldrb	r2, [r3, #0]
 801f986:	687b      	ldr	r3, [r7, #4]
 801f988:	0011      	movs	r1, r2
 801f98a:	0018      	movs	r0, r3
 801f98c:	f001 f9c5 	bl	8020d1a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801f990:	687b      	ldr	r3, [r7, #4]
 801f992:	2180      	movs	r1, #128	@ 0x80
 801f994:	0018      	movs	r0, r3
 801f996:	f001 f9c0 	bl	8020d1a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801f99a:	e024      	b.n	801f9e6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801f99c:	683a      	ldr	r2, [r7, #0]
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	0011      	movs	r1, r2
 801f9a2:	0018      	movs	r0, r3
 801f9a4:	f000 fc91 	bl	80202ca <USBD_CtlError>
              break;
 801f9a8:	e01d      	b.n	801f9e6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801f9aa:	683b      	ldr	r3, [r7, #0]
 801f9ac:	885b      	ldrh	r3, [r3, #2]
 801f9ae:	2b00      	cmp	r3, #0
 801f9b0:	d118      	bne.n	801f9e4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801f9b2:	210e      	movs	r1, #14
 801f9b4:	187b      	adds	r3, r7, r1
 801f9b6:	781b      	ldrb	r3, [r3, #0]
 801f9b8:	227f      	movs	r2, #127	@ 0x7f
 801f9ba:	4013      	ands	r3, r2
 801f9bc:	d006      	beq.n	801f9cc <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801f9be:	187b      	adds	r3, r7, r1
 801f9c0:	781a      	ldrb	r2, [r3, #0]
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	0011      	movs	r1, r2
 801f9c6:	0018      	movs	r0, r3
 801f9c8:	f001 f9d2 	bl	8020d70 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801f9cc:	687b      	ldr	r3, [r7, #4]
 801f9ce:	0018      	movs	r0, r3
 801f9d0:	f000 fd63 	bl	802049a <USBD_CtlSendStatus>
              }
              break;
 801f9d4:	e006      	b.n	801f9e4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801f9d6:	683a      	ldr	r2, [r7, #0]
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	0011      	movs	r1, r2
 801f9dc:	0018      	movs	r0, r3
 801f9de:	f000 fc74 	bl	80202ca <USBD_CtlError>
              break;
 801f9e2:	e000      	b.n	801f9e6 <USBD_StdEPReq+0x1b0>
              break;
 801f9e4:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801f9e6:	e0cd      	b.n	801fb84 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801f9e8:	687a      	ldr	r2, [r7, #4]
 801f9ea:	23a7      	movs	r3, #167	@ 0xa7
 801f9ec:	009b      	lsls	r3, r3, #2
 801f9ee:	5cd3      	ldrb	r3, [r2, r3]
 801f9f0:	2b02      	cmp	r3, #2
 801f9f2:	d002      	beq.n	801f9fa <USBD_StdEPReq+0x1c4>
 801f9f4:	2b03      	cmp	r3, #3
 801f9f6:	d03c      	beq.n	801fa72 <USBD_StdEPReq+0x23c>
 801f9f8:	e0b5      	b.n	801fb66 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801f9fa:	220e      	movs	r2, #14
 801f9fc:	18bb      	adds	r3, r7, r2
 801f9fe:	781b      	ldrb	r3, [r3, #0]
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	d00a      	beq.n	801fa1a <USBD_StdEPReq+0x1e4>
 801fa04:	18bb      	adds	r3, r7, r2
 801fa06:	781b      	ldrb	r3, [r3, #0]
 801fa08:	2b80      	cmp	r3, #128	@ 0x80
 801fa0a:	d006      	beq.n	801fa1a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801fa0c:	683a      	ldr	r2, [r7, #0]
 801fa0e:	687b      	ldr	r3, [r7, #4]
 801fa10:	0011      	movs	r1, r2
 801fa12:	0018      	movs	r0, r3
 801fa14:	f000 fc59 	bl	80202ca <USBD_CtlError>
                break;
 801fa18:	e0ac      	b.n	801fb74 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801fa1a:	220e      	movs	r2, #14
 801fa1c:	18bb      	adds	r3, r7, r2
 801fa1e:	781b      	ldrb	r3, [r3, #0]
 801fa20:	b25b      	sxtb	r3, r3
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	da0c      	bge.n	801fa40 <USBD_StdEPReq+0x20a>
 801fa26:	18bb      	adds	r3, r7, r2
 801fa28:	781b      	ldrb	r3, [r3, #0]
 801fa2a:	227f      	movs	r2, #127	@ 0x7f
 801fa2c:	401a      	ands	r2, r3
 801fa2e:	0013      	movs	r3, r2
 801fa30:	009b      	lsls	r3, r3, #2
 801fa32:	189b      	adds	r3, r3, r2
 801fa34:	009b      	lsls	r3, r3, #2
 801fa36:	3310      	adds	r3, #16
 801fa38:	687a      	ldr	r2, [r7, #4]
 801fa3a:	18d3      	adds	r3, r2, r3
 801fa3c:	3304      	adds	r3, #4
 801fa3e:	e00d      	b.n	801fa5c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801fa40:	230e      	movs	r3, #14
 801fa42:	18fb      	adds	r3, r7, r3
 801fa44:	781b      	ldrb	r3, [r3, #0]
 801fa46:	227f      	movs	r2, #127	@ 0x7f
 801fa48:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801fa4a:	0013      	movs	r3, r2
 801fa4c:	009b      	lsls	r3, r3, #2
 801fa4e:	189b      	adds	r3, r3, r2
 801fa50:	009b      	lsls	r3, r3, #2
 801fa52:	3351      	adds	r3, #81	@ 0x51
 801fa54:	33ff      	adds	r3, #255	@ 0xff
 801fa56:	687a      	ldr	r2, [r7, #4]
 801fa58:	18d3      	adds	r3, r2, r3
 801fa5a:	3304      	adds	r3, #4
 801fa5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801fa5e:	68bb      	ldr	r3, [r7, #8]
 801fa60:	2200      	movs	r2, #0
 801fa62:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801fa64:	68b9      	ldr	r1, [r7, #8]
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	2202      	movs	r2, #2
 801fa6a:	0018      	movs	r0, r3
 801fa6c:	f000 fcab 	bl	80203c6 <USBD_CtlSendData>
              break;
 801fa70:	e080      	b.n	801fb74 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801fa72:	220e      	movs	r2, #14
 801fa74:	18bb      	adds	r3, r7, r2
 801fa76:	781b      	ldrb	r3, [r3, #0]
 801fa78:	b25b      	sxtb	r3, r3
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	da14      	bge.n	801faa8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801fa7e:	18bb      	adds	r3, r7, r2
 801fa80:	781b      	ldrb	r3, [r3, #0]
 801fa82:	220f      	movs	r2, #15
 801fa84:	401a      	ands	r2, r3
 801fa86:	6879      	ldr	r1, [r7, #4]
 801fa88:	0013      	movs	r3, r2
 801fa8a:	009b      	lsls	r3, r3, #2
 801fa8c:	189b      	adds	r3, r3, r2
 801fa8e:	009b      	lsls	r3, r3, #2
 801fa90:	18cb      	adds	r3, r1, r3
 801fa92:	3318      	adds	r3, #24
 801fa94:	681b      	ldr	r3, [r3, #0]
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d11e      	bne.n	801fad8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801fa9a:	683a      	ldr	r2, [r7, #0]
 801fa9c:	687b      	ldr	r3, [r7, #4]
 801fa9e:	0011      	movs	r1, r2
 801faa0:	0018      	movs	r0, r3
 801faa2:	f000 fc12 	bl	80202ca <USBD_CtlError>
                  break;
 801faa6:	e065      	b.n	801fb74 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801faa8:	230e      	movs	r3, #14
 801faaa:	18fb      	adds	r3, r7, r3
 801faac:	781b      	ldrb	r3, [r3, #0]
 801faae:	220f      	movs	r2, #15
 801fab0:	401a      	ands	r2, r3
 801fab2:	6878      	ldr	r0, [r7, #4]
 801fab4:	23ac      	movs	r3, #172	@ 0xac
 801fab6:	0059      	lsls	r1, r3, #1
 801fab8:	0013      	movs	r3, r2
 801faba:	009b      	lsls	r3, r3, #2
 801fabc:	189b      	adds	r3, r3, r2
 801fabe:	009b      	lsls	r3, r3, #2
 801fac0:	18c3      	adds	r3, r0, r3
 801fac2:	185b      	adds	r3, r3, r1
 801fac4:	681b      	ldr	r3, [r3, #0]
 801fac6:	2b00      	cmp	r3, #0
 801fac8:	d106      	bne.n	801fad8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801faca:	683a      	ldr	r2, [r7, #0]
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	0011      	movs	r1, r2
 801fad0:	0018      	movs	r0, r3
 801fad2:	f000 fbfa 	bl	80202ca <USBD_CtlError>
                  break;
 801fad6:	e04d      	b.n	801fb74 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801fad8:	220e      	movs	r2, #14
 801fada:	18bb      	adds	r3, r7, r2
 801fadc:	781b      	ldrb	r3, [r3, #0]
 801fade:	b25b      	sxtb	r3, r3
 801fae0:	2b00      	cmp	r3, #0
 801fae2:	da0c      	bge.n	801fafe <USBD_StdEPReq+0x2c8>
 801fae4:	18bb      	adds	r3, r7, r2
 801fae6:	781b      	ldrb	r3, [r3, #0]
 801fae8:	227f      	movs	r2, #127	@ 0x7f
 801faea:	401a      	ands	r2, r3
 801faec:	0013      	movs	r3, r2
 801faee:	009b      	lsls	r3, r3, #2
 801faf0:	189b      	adds	r3, r3, r2
 801faf2:	009b      	lsls	r3, r3, #2
 801faf4:	3310      	adds	r3, #16
 801faf6:	687a      	ldr	r2, [r7, #4]
 801faf8:	18d3      	adds	r3, r2, r3
 801fafa:	3304      	adds	r3, #4
 801fafc:	e00d      	b.n	801fb1a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801fafe:	230e      	movs	r3, #14
 801fb00:	18fb      	adds	r3, r7, r3
 801fb02:	781b      	ldrb	r3, [r3, #0]
 801fb04:	227f      	movs	r2, #127	@ 0x7f
 801fb06:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801fb08:	0013      	movs	r3, r2
 801fb0a:	009b      	lsls	r3, r3, #2
 801fb0c:	189b      	adds	r3, r3, r2
 801fb0e:	009b      	lsls	r3, r3, #2
 801fb10:	3351      	adds	r3, #81	@ 0x51
 801fb12:	33ff      	adds	r3, #255	@ 0xff
 801fb14:	687a      	ldr	r2, [r7, #4]
 801fb16:	18d3      	adds	r3, r2, r3
 801fb18:	3304      	adds	r3, #4
 801fb1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801fb1c:	220e      	movs	r2, #14
 801fb1e:	18bb      	adds	r3, r7, r2
 801fb20:	781b      	ldrb	r3, [r3, #0]
 801fb22:	2b00      	cmp	r3, #0
 801fb24:	d003      	beq.n	801fb2e <USBD_StdEPReq+0x2f8>
 801fb26:	18bb      	adds	r3, r7, r2
 801fb28:	781b      	ldrb	r3, [r3, #0]
 801fb2a:	2b80      	cmp	r3, #128	@ 0x80
 801fb2c:	d103      	bne.n	801fb36 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801fb2e:	68bb      	ldr	r3, [r7, #8]
 801fb30:	2200      	movs	r2, #0
 801fb32:	601a      	str	r2, [r3, #0]
 801fb34:	e010      	b.n	801fb58 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801fb36:	230e      	movs	r3, #14
 801fb38:	18fb      	adds	r3, r7, r3
 801fb3a:	781a      	ldrb	r2, [r3, #0]
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	0011      	movs	r1, r2
 801fb40:	0018      	movs	r0, r3
 801fb42:	f001 f940 	bl	8020dc6 <USBD_LL_IsStallEP>
 801fb46:	1e03      	subs	r3, r0, #0
 801fb48:	d003      	beq.n	801fb52 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801fb4a:	68bb      	ldr	r3, [r7, #8]
 801fb4c:	2201      	movs	r2, #1
 801fb4e:	601a      	str	r2, [r3, #0]
 801fb50:	e002      	b.n	801fb58 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801fb52:	68bb      	ldr	r3, [r7, #8]
 801fb54:	2200      	movs	r2, #0
 801fb56:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801fb58:	68b9      	ldr	r1, [r7, #8]
 801fb5a:	687b      	ldr	r3, [r7, #4]
 801fb5c:	2202      	movs	r2, #2
 801fb5e:	0018      	movs	r0, r3
 801fb60:	f000 fc31 	bl	80203c6 <USBD_CtlSendData>
              break;
 801fb64:	e006      	b.n	801fb74 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801fb66:	683a      	ldr	r2, [r7, #0]
 801fb68:	687b      	ldr	r3, [r7, #4]
 801fb6a:	0011      	movs	r1, r2
 801fb6c:	0018      	movs	r0, r3
 801fb6e:	f000 fbac 	bl	80202ca <USBD_CtlError>
              break;
 801fb72:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801fb74:	e006      	b.n	801fb84 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801fb76:	683a      	ldr	r2, [r7, #0]
 801fb78:	687b      	ldr	r3, [r7, #4]
 801fb7a:	0011      	movs	r1, r2
 801fb7c:	0018      	movs	r0, r3
 801fb7e:	f000 fba4 	bl	80202ca <USBD_CtlError>
          break;
 801fb82:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801fb84:	e006      	b.n	801fb94 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801fb86:	683a      	ldr	r2, [r7, #0]
 801fb88:	687b      	ldr	r3, [r7, #4]
 801fb8a:	0011      	movs	r1, r2
 801fb8c:	0018      	movs	r0, r3
 801fb8e:	f000 fb9c 	bl	80202ca <USBD_CtlError>
      break;
 801fb92:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801fb94:	230f      	movs	r3, #15
 801fb96:	18fb      	adds	r3, r7, r3
 801fb98:	781b      	ldrb	r3, [r3, #0]
}
 801fb9a:	0018      	movs	r0, r3
 801fb9c:	46bd      	mov	sp, r7
 801fb9e:	b004      	add	sp, #16
 801fba0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801fba4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801fba4:	b580      	push	{r7, lr}
 801fba6:	b084      	sub	sp, #16
 801fba8:	af00      	add	r7, sp, #0
 801fbaa:	6078      	str	r0, [r7, #4]
 801fbac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801fbae:	2308      	movs	r3, #8
 801fbb0:	18fb      	adds	r3, r7, r3
 801fbb2:	2200      	movs	r2, #0
 801fbb4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801fbb6:	2300      	movs	r3, #0
 801fbb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801fbba:	230b      	movs	r3, #11
 801fbbc:	18fb      	adds	r3, r7, r3
 801fbbe:	2200      	movs	r2, #0
 801fbc0:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801fbc2:	683b      	ldr	r3, [r7, #0]
 801fbc4:	885b      	ldrh	r3, [r3, #2]
 801fbc6:	0a1b      	lsrs	r3, r3, #8
 801fbc8:	b29b      	uxth	r3, r3
 801fbca:	2b07      	cmp	r3, #7
 801fbcc:	d900      	bls.n	801fbd0 <USBD_GetDescriptor+0x2c>
 801fbce:	e159      	b.n	801fe84 <USBD_GetDescriptor+0x2e0>
 801fbd0:	009a      	lsls	r2, r3, #2
 801fbd2:	4bcb      	ldr	r3, [pc, #812]	@ (801ff00 <USBD_GetDescriptor+0x35c>)
 801fbd4:	18d3      	adds	r3, r2, r3
 801fbd6:	681b      	ldr	r3, [r3, #0]
 801fbd8:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801fbda:	687a      	ldr	r2, [r7, #4]
 801fbdc:	23ac      	movs	r3, #172	@ 0xac
 801fbde:	009b      	lsls	r3, r3, #2
 801fbe0:	58d3      	ldr	r3, [r2, r3]
 801fbe2:	681b      	ldr	r3, [r3, #0]
 801fbe4:	687a      	ldr	r2, [r7, #4]
 801fbe6:	7c12      	ldrb	r2, [r2, #16]
 801fbe8:	2108      	movs	r1, #8
 801fbea:	1879      	adds	r1, r7, r1
 801fbec:	0010      	movs	r0, r2
 801fbee:	4798      	blx	r3
 801fbf0:	0003      	movs	r3, r0
 801fbf2:	60fb      	str	r3, [r7, #12]
      break;
 801fbf4:	e153      	b.n	801fe9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	7c1b      	ldrb	r3, [r3, #16]
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	d10f      	bne.n	801fc1e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801fbfe:	687a      	ldr	r2, [r7, #4]
 801fc00:	23ad      	movs	r3, #173	@ 0xad
 801fc02:	009b      	lsls	r3, r3, #2
 801fc04:	58d3      	ldr	r3, [r2, r3]
 801fc06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc08:	2208      	movs	r2, #8
 801fc0a:	18ba      	adds	r2, r7, r2
 801fc0c:	0010      	movs	r0, r2
 801fc0e:	4798      	blx	r3
 801fc10:	0003      	movs	r3, r0
 801fc12:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801fc14:	68fb      	ldr	r3, [r7, #12]
 801fc16:	3301      	adds	r3, #1
 801fc18:	2202      	movs	r2, #2
 801fc1a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801fc1c:	e13f      	b.n	801fe9e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801fc1e:	687a      	ldr	r2, [r7, #4]
 801fc20:	23ad      	movs	r3, #173	@ 0xad
 801fc22:	009b      	lsls	r3, r3, #2
 801fc24:	58d3      	ldr	r3, [r2, r3]
 801fc26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fc28:	2208      	movs	r2, #8
 801fc2a:	18ba      	adds	r2, r7, r2
 801fc2c:	0010      	movs	r0, r2
 801fc2e:	4798      	blx	r3
 801fc30:	0003      	movs	r3, r0
 801fc32:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801fc34:	68fb      	ldr	r3, [r7, #12]
 801fc36:	3301      	adds	r3, #1
 801fc38:	2202      	movs	r2, #2
 801fc3a:	701a      	strb	r2, [r3, #0]
      break;
 801fc3c:	e12f      	b.n	801fe9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801fc3e:	683b      	ldr	r3, [r7, #0]
 801fc40:	885b      	ldrh	r3, [r3, #2]
 801fc42:	b2db      	uxtb	r3, r3
 801fc44:	2b05      	cmp	r3, #5
 801fc46:	d900      	bls.n	801fc4a <USBD_GetDescriptor+0xa6>
 801fc48:	e0d0      	b.n	801fdec <USBD_GetDescriptor+0x248>
 801fc4a:	009a      	lsls	r2, r3, #2
 801fc4c:	4bad      	ldr	r3, [pc, #692]	@ (801ff04 <USBD_GetDescriptor+0x360>)
 801fc4e:	18d3      	adds	r3, r2, r3
 801fc50:	681b      	ldr	r3, [r3, #0]
 801fc52:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801fc54:	687a      	ldr	r2, [r7, #4]
 801fc56:	23ac      	movs	r3, #172	@ 0xac
 801fc58:	009b      	lsls	r3, r3, #2
 801fc5a:	58d3      	ldr	r3, [r2, r3]
 801fc5c:	685b      	ldr	r3, [r3, #4]
 801fc5e:	2b00      	cmp	r3, #0
 801fc60:	d00d      	beq.n	801fc7e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801fc62:	687a      	ldr	r2, [r7, #4]
 801fc64:	23ac      	movs	r3, #172	@ 0xac
 801fc66:	009b      	lsls	r3, r3, #2
 801fc68:	58d3      	ldr	r3, [r2, r3]
 801fc6a:	685b      	ldr	r3, [r3, #4]
 801fc6c:	687a      	ldr	r2, [r7, #4]
 801fc6e:	7c12      	ldrb	r2, [r2, #16]
 801fc70:	2108      	movs	r1, #8
 801fc72:	1879      	adds	r1, r7, r1
 801fc74:	0010      	movs	r0, r2
 801fc76:	4798      	blx	r3
 801fc78:	0003      	movs	r3, r0
 801fc7a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fc7c:	e0c3      	b.n	801fe06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fc7e:	683a      	ldr	r2, [r7, #0]
 801fc80:	687b      	ldr	r3, [r7, #4]
 801fc82:	0011      	movs	r1, r2
 801fc84:	0018      	movs	r0, r3
 801fc86:	f000 fb20 	bl	80202ca <USBD_CtlError>
            err++;
 801fc8a:	210b      	movs	r1, #11
 801fc8c:	187b      	adds	r3, r7, r1
 801fc8e:	781a      	ldrb	r2, [r3, #0]
 801fc90:	187b      	adds	r3, r7, r1
 801fc92:	3201      	adds	r2, #1
 801fc94:	701a      	strb	r2, [r3, #0]
          break;
 801fc96:	e0b6      	b.n	801fe06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801fc98:	687a      	ldr	r2, [r7, #4]
 801fc9a:	23ac      	movs	r3, #172	@ 0xac
 801fc9c:	009b      	lsls	r3, r3, #2
 801fc9e:	58d3      	ldr	r3, [r2, r3]
 801fca0:	689b      	ldr	r3, [r3, #8]
 801fca2:	2b00      	cmp	r3, #0
 801fca4:	d00d      	beq.n	801fcc2 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801fca6:	687a      	ldr	r2, [r7, #4]
 801fca8:	23ac      	movs	r3, #172	@ 0xac
 801fcaa:	009b      	lsls	r3, r3, #2
 801fcac:	58d3      	ldr	r3, [r2, r3]
 801fcae:	689b      	ldr	r3, [r3, #8]
 801fcb0:	687a      	ldr	r2, [r7, #4]
 801fcb2:	7c12      	ldrb	r2, [r2, #16]
 801fcb4:	2108      	movs	r1, #8
 801fcb6:	1879      	adds	r1, r7, r1
 801fcb8:	0010      	movs	r0, r2
 801fcba:	4798      	blx	r3
 801fcbc:	0003      	movs	r3, r0
 801fcbe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fcc0:	e0a1      	b.n	801fe06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fcc2:	683a      	ldr	r2, [r7, #0]
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	0011      	movs	r1, r2
 801fcc8:	0018      	movs	r0, r3
 801fcca:	f000 fafe 	bl	80202ca <USBD_CtlError>
            err++;
 801fcce:	210b      	movs	r1, #11
 801fcd0:	187b      	adds	r3, r7, r1
 801fcd2:	781a      	ldrb	r2, [r3, #0]
 801fcd4:	187b      	adds	r3, r7, r1
 801fcd6:	3201      	adds	r2, #1
 801fcd8:	701a      	strb	r2, [r3, #0]
          break;
 801fcda:	e094      	b.n	801fe06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801fcdc:	687a      	ldr	r2, [r7, #4]
 801fcde:	23ac      	movs	r3, #172	@ 0xac
 801fce0:	009b      	lsls	r3, r3, #2
 801fce2:	58d3      	ldr	r3, [r2, r3]
 801fce4:	68db      	ldr	r3, [r3, #12]
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	d00d      	beq.n	801fd06 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801fcea:	687a      	ldr	r2, [r7, #4]
 801fcec:	23ac      	movs	r3, #172	@ 0xac
 801fcee:	009b      	lsls	r3, r3, #2
 801fcf0:	58d3      	ldr	r3, [r2, r3]
 801fcf2:	68db      	ldr	r3, [r3, #12]
 801fcf4:	687a      	ldr	r2, [r7, #4]
 801fcf6:	7c12      	ldrb	r2, [r2, #16]
 801fcf8:	2108      	movs	r1, #8
 801fcfa:	1879      	adds	r1, r7, r1
 801fcfc:	0010      	movs	r0, r2
 801fcfe:	4798      	blx	r3
 801fd00:	0003      	movs	r3, r0
 801fd02:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fd04:	e07f      	b.n	801fe06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fd06:	683a      	ldr	r2, [r7, #0]
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	0011      	movs	r1, r2
 801fd0c:	0018      	movs	r0, r3
 801fd0e:	f000 fadc 	bl	80202ca <USBD_CtlError>
            err++;
 801fd12:	210b      	movs	r1, #11
 801fd14:	187b      	adds	r3, r7, r1
 801fd16:	781a      	ldrb	r2, [r3, #0]
 801fd18:	187b      	adds	r3, r7, r1
 801fd1a:	3201      	adds	r2, #1
 801fd1c:	701a      	strb	r2, [r3, #0]
          break;
 801fd1e:	e072      	b.n	801fe06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801fd20:	687a      	ldr	r2, [r7, #4]
 801fd22:	23ac      	movs	r3, #172	@ 0xac
 801fd24:	009b      	lsls	r3, r3, #2
 801fd26:	58d3      	ldr	r3, [r2, r3]
 801fd28:	691b      	ldr	r3, [r3, #16]
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d00d      	beq.n	801fd4a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801fd2e:	687a      	ldr	r2, [r7, #4]
 801fd30:	23ac      	movs	r3, #172	@ 0xac
 801fd32:	009b      	lsls	r3, r3, #2
 801fd34:	58d3      	ldr	r3, [r2, r3]
 801fd36:	691b      	ldr	r3, [r3, #16]
 801fd38:	687a      	ldr	r2, [r7, #4]
 801fd3a:	7c12      	ldrb	r2, [r2, #16]
 801fd3c:	2108      	movs	r1, #8
 801fd3e:	1879      	adds	r1, r7, r1
 801fd40:	0010      	movs	r0, r2
 801fd42:	4798      	blx	r3
 801fd44:	0003      	movs	r3, r0
 801fd46:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fd48:	e05d      	b.n	801fe06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fd4a:	683a      	ldr	r2, [r7, #0]
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	0011      	movs	r1, r2
 801fd50:	0018      	movs	r0, r3
 801fd52:	f000 faba 	bl	80202ca <USBD_CtlError>
            err++;
 801fd56:	210b      	movs	r1, #11
 801fd58:	187b      	adds	r3, r7, r1
 801fd5a:	781a      	ldrb	r2, [r3, #0]
 801fd5c:	187b      	adds	r3, r7, r1
 801fd5e:	3201      	adds	r2, #1
 801fd60:	701a      	strb	r2, [r3, #0]
          break;
 801fd62:	e050      	b.n	801fe06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801fd64:	687a      	ldr	r2, [r7, #4]
 801fd66:	23ac      	movs	r3, #172	@ 0xac
 801fd68:	009b      	lsls	r3, r3, #2
 801fd6a:	58d3      	ldr	r3, [r2, r3]
 801fd6c:	695b      	ldr	r3, [r3, #20]
 801fd6e:	2b00      	cmp	r3, #0
 801fd70:	d00d      	beq.n	801fd8e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801fd72:	687a      	ldr	r2, [r7, #4]
 801fd74:	23ac      	movs	r3, #172	@ 0xac
 801fd76:	009b      	lsls	r3, r3, #2
 801fd78:	58d3      	ldr	r3, [r2, r3]
 801fd7a:	695b      	ldr	r3, [r3, #20]
 801fd7c:	687a      	ldr	r2, [r7, #4]
 801fd7e:	7c12      	ldrb	r2, [r2, #16]
 801fd80:	2108      	movs	r1, #8
 801fd82:	1879      	adds	r1, r7, r1
 801fd84:	0010      	movs	r0, r2
 801fd86:	4798      	blx	r3
 801fd88:	0003      	movs	r3, r0
 801fd8a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fd8c:	e03b      	b.n	801fe06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fd8e:	683a      	ldr	r2, [r7, #0]
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	0011      	movs	r1, r2
 801fd94:	0018      	movs	r0, r3
 801fd96:	f000 fa98 	bl	80202ca <USBD_CtlError>
            err++;
 801fd9a:	210b      	movs	r1, #11
 801fd9c:	187b      	adds	r3, r7, r1
 801fd9e:	781a      	ldrb	r2, [r3, #0]
 801fda0:	187b      	adds	r3, r7, r1
 801fda2:	3201      	adds	r2, #1
 801fda4:	701a      	strb	r2, [r3, #0]
          break;
 801fda6:	e02e      	b.n	801fe06 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801fda8:	687a      	ldr	r2, [r7, #4]
 801fdaa:	23ac      	movs	r3, #172	@ 0xac
 801fdac:	009b      	lsls	r3, r3, #2
 801fdae:	58d3      	ldr	r3, [r2, r3]
 801fdb0:	699b      	ldr	r3, [r3, #24]
 801fdb2:	2b00      	cmp	r3, #0
 801fdb4:	d00d      	beq.n	801fdd2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801fdb6:	687a      	ldr	r2, [r7, #4]
 801fdb8:	23ac      	movs	r3, #172	@ 0xac
 801fdba:	009b      	lsls	r3, r3, #2
 801fdbc:	58d3      	ldr	r3, [r2, r3]
 801fdbe:	699b      	ldr	r3, [r3, #24]
 801fdc0:	687a      	ldr	r2, [r7, #4]
 801fdc2:	7c12      	ldrb	r2, [r2, #16]
 801fdc4:	2108      	movs	r1, #8
 801fdc6:	1879      	adds	r1, r7, r1
 801fdc8:	0010      	movs	r0, r2
 801fdca:	4798      	blx	r3
 801fdcc:	0003      	movs	r3, r0
 801fdce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801fdd0:	e019      	b.n	801fe06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801fdd2:	683a      	ldr	r2, [r7, #0]
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	0011      	movs	r1, r2
 801fdd8:	0018      	movs	r0, r3
 801fdda:	f000 fa76 	bl	80202ca <USBD_CtlError>
            err++;
 801fdde:	210b      	movs	r1, #11
 801fde0:	187b      	adds	r3, r7, r1
 801fde2:	781a      	ldrb	r2, [r3, #0]
 801fde4:	187b      	adds	r3, r7, r1
 801fde6:	3201      	adds	r2, #1
 801fde8:	701a      	strb	r2, [r3, #0]
          break;
 801fdea:	e00c      	b.n	801fe06 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801fdec:	683a      	ldr	r2, [r7, #0]
 801fdee:	687b      	ldr	r3, [r7, #4]
 801fdf0:	0011      	movs	r1, r2
 801fdf2:	0018      	movs	r0, r3
 801fdf4:	f000 fa69 	bl	80202ca <USBD_CtlError>
          err++;
 801fdf8:	210b      	movs	r1, #11
 801fdfa:	187b      	adds	r3, r7, r1
 801fdfc:	781a      	ldrb	r2, [r3, #0]
 801fdfe:	187b      	adds	r3, r7, r1
 801fe00:	3201      	adds	r2, #1
 801fe02:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801fe04:	e04b      	b.n	801fe9e <USBD_GetDescriptor+0x2fa>
 801fe06:	e04a      	b.n	801fe9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	7c1b      	ldrb	r3, [r3, #16]
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	d10b      	bne.n	801fe28 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801fe10:	687a      	ldr	r2, [r7, #4]
 801fe12:	23ad      	movs	r3, #173	@ 0xad
 801fe14:	009b      	lsls	r3, r3, #2
 801fe16:	58d3      	ldr	r3, [r2, r3]
 801fe18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fe1a:	2208      	movs	r2, #8
 801fe1c:	18ba      	adds	r2, r7, r2
 801fe1e:	0010      	movs	r0, r2
 801fe20:	4798      	blx	r3
 801fe22:	0003      	movs	r3, r0
 801fe24:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801fe26:	e03a      	b.n	801fe9e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801fe28:	683a      	ldr	r2, [r7, #0]
 801fe2a:	687b      	ldr	r3, [r7, #4]
 801fe2c:	0011      	movs	r1, r2
 801fe2e:	0018      	movs	r0, r3
 801fe30:	f000 fa4b 	bl	80202ca <USBD_CtlError>
        err++;
 801fe34:	210b      	movs	r1, #11
 801fe36:	187b      	adds	r3, r7, r1
 801fe38:	781a      	ldrb	r2, [r3, #0]
 801fe3a:	187b      	adds	r3, r7, r1
 801fe3c:	3201      	adds	r2, #1
 801fe3e:	701a      	strb	r2, [r3, #0]
      break;
 801fe40:	e02d      	b.n	801fe9e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	7c1b      	ldrb	r3, [r3, #16]
 801fe46:	2b00      	cmp	r3, #0
 801fe48:	d10f      	bne.n	801fe6a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801fe4a:	687a      	ldr	r2, [r7, #4]
 801fe4c:	23ad      	movs	r3, #173	@ 0xad
 801fe4e:	009b      	lsls	r3, r3, #2
 801fe50:	58d3      	ldr	r3, [r2, r3]
 801fe52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801fe54:	2208      	movs	r2, #8
 801fe56:	18ba      	adds	r2, r7, r2
 801fe58:	0010      	movs	r0, r2
 801fe5a:	4798      	blx	r3
 801fe5c:	0003      	movs	r3, r0
 801fe5e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801fe60:	68fb      	ldr	r3, [r7, #12]
 801fe62:	3301      	adds	r3, #1
 801fe64:	2207      	movs	r2, #7
 801fe66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801fe68:	e019      	b.n	801fe9e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801fe6a:	683a      	ldr	r2, [r7, #0]
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	0011      	movs	r1, r2
 801fe70:	0018      	movs	r0, r3
 801fe72:	f000 fa2a 	bl	80202ca <USBD_CtlError>
        err++;
 801fe76:	210b      	movs	r1, #11
 801fe78:	187b      	adds	r3, r7, r1
 801fe7a:	781a      	ldrb	r2, [r3, #0]
 801fe7c:	187b      	adds	r3, r7, r1
 801fe7e:	3201      	adds	r2, #1
 801fe80:	701a      	strb	r2, [r3, #0]
      break;
 801fe82:	e00c      	b.n	801fe9e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801fe84:	683a      	ldr	r2, [r7, #0]
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	0011      	movs	r1, r2
 801fe8a:	0018      	movs	r0, r3
 801fe8c:	f000 fa1d 	bl	80202ca <USBD_CtlError>
      err++;
 801fe90:	210b      	movs	r1, #11
 801fe92:	187b      	adds	r3, r7, r1
 801fe94:	781a      	ldrb	r2, [r3, #0]
 801fe96:	187b      	adds	r3, r7, r1
 801fe98:	3201      	adds	r2, #1
 801fe9a:	701a      	strb	r2, [r3, #0]
      break;
 801fe9c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801fe9e:	230b      	movs	r3, #11
 801fea0:	18fb      	adds	r3, r7, r3
 801fea2:	781b      	ldrb	r3, [r3, #0]
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	d127      	bne.n	801fef8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801fea8:	2108      	movs	r1, #8
 801feaa:	187b      	adds	r3, r7, r1
 801feac:	881b      	ldrh	r3, [r3, #0]
 801feae:	2b00      	cmp	r3, #0
 801feb0:	d019      	beq.n	801fee6 <USBD_GetDescriptor+0x342>
 801feb2:	683b      	ldr	r3, [r7, #0]
 801feb4:	88db      	ldrh	r3, [r3, #6]
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	d015      	beq.n	801fee6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801feba:	683b      	ldr	r3, [r7, #0]
 801febc:	88da      	ldrh	r2, [r3, #6]
 801febe:	187b      	adds	r3, r7, r1
 801fec0:	881b      	ldrh	r3, [r3, #0]
 801fec2:	1c18      	adds	r0, r3, #0
 801fec4:	1c11      	adds	r1, r2, #0
 801fec6:	b28a      	uxth	r2, r1
 801fec8:	b283      	uxth	r3, r0
 801feca:	429a      	cmp	r2, r3
 801fecc:	d900      	bls.n	801fed0 <USBD_GetDescriptor+0x32c>
 801fece:	1c01      	adds	r1, r0, #0
 801fed0:	b28a      	uxth	r2, r1
 801fed2:	2108      	movs	r1, #8
 801fed4:	187b      	adds	r3, r7, r1
 801fed6:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801fed8:	187b      	adds	r3, r7, r1
 801feda:	881a      	ldrh	r2, [r3, #0]
 801fedc:	68f9      	ldr	r1, [r7, #12]
 801fede:	687b      	ldr	r3, [r7, #4]
 801fee0:	0018      	movs	r0, r3
 801fee2:	f000 fa70 	bl	80203c6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801fee6:	683b      	ldr	r3, [r7, #0]
 801fee8:	88db      	ldrh	r3, [r3, #6]
 801feea:	2b00      	cmp	r3, #0
 801feec:	d105      	bne.n	801fefa <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801feee:	687b      	ldr	r3, [r7, #4]
 801fef0:	0018      	movs	r0, r3
 801fef2:	f000 fad2 	bl	802049a <USBD_CtlSendStatus>
 801fef6:	e000      	b.n	801fefa <USBD_GetDescriptor+0x356>
    return;
 801fef8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801fefa:	46bd      	mov	sp, r7
 801fefc:	b004      	add	sp, #16
 801fefe:	bd80      	pop	{r7, pc}
 801ff00:	0802b2f4 	.word	0x0802b2f4
 801ff04:	0802b314 	.word	0x0802b314

0801ff08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ff08:	b590      	push	{r4, r7, lr}
 801ff0a:	b085      	sub	sp, #20
 801ff0c:	af00      	add	r7, sp, #0
 801ff0e:	6078      	str	r0, [r7, #4]
 801ff10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801ff12:	683b      	ldr	r3, [r7, #0]
 801ff14:	889b      	ldrh	r3, [r3, #4]
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	d13d      	bne.n	801ff96 <USBD_SetAddress+0x8e>
 801ff1a:	683b      	ldr	r3, [r7, #0]
 801ff1c:	88db      	ldrh	r3, [r3, #6]
 801ff1e:	2b00      	cmp	r3, #0
 801ff20:	d139      	bne.n	801ff96 <USBD_SetAddress+0x8e>
 801ff22:	683b      	ldr	r3, [r7, #0]
 801ff24:	885b      	ldrh	r3, [r3, #2]
 801ff26:	2b7f      	cmp	r3, #127	@ 0x7f
 801ff28:	d835      	bhi.n	801ff96 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ff2a:	683b      	ldr	r3, [r7, #0]
 801ff2c:	885b      	ldrh	r3, [r3, #2]
 801ff2e:	b2da      	uxtb	r2, r3
 801ff30:	230f      	movs	r3, #15
 801ff32:	18fb      	adds	r3, r7, r3
 801ff34:	217f      	movs	r1, #127	@ 0x7f
 801ff36:	400a      	ands	r2, r1
 801ff38:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ff3a:	687a      	ldr	r2, [r7, #4]
 801ff3c:	23a7      	movs	r3, #167	@ 0xa7
 801ff3e:	009b      	lsls	r3, r3, #2
 801ff40:	5cd3      	ldrb	r3, [r2, r3]
 801ff42:	2b03      	cmp	r3, #3
 801ff44:	d106      	bne.n	801ff54 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801ff46:	683a      	ldr	r2, [r7, #0]
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	0011      	movs	r1, r2
 801ff4c:	0018      	movs	r0, r3
 801ff4e:	f000 f9bc 	bl	80202ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ff52:	e027      	b.n	801ffa4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	240f      	movs	r4, #15
 801ff58:	193a      	adds	r2, r7, r4
 801ff5a:	4914      	ldr	r1, [pc, #80]	@ (801ffac <USBD_SetAddress+0xa4>)
 801ff5c:	7812      	ldrb	r2, [r2, #0]
 801ff5e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801ff60:	193b      	adds	r3, r7, r4
 801ff62:	781a      	ldrb	r2, [r3, #0]
 801ff64:	687b      	ldr	r3, [r7, #4]
 801ff66:	0011      	movs	r1, r2
 801ff68:	0018      	movs	r0, r3
 801ff6a:	f000 ff5d 	bl	8020e28 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801ff6e:	687b      	ldr	r3, [r7, #4]
 801ff70:	0018      	movs	r0, r3
 801ff72:	f000 fa92 	bl	802049a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801ff76:	193b      	adds	r3, r7, r4
 801ff78:	781b      	ldrb	r3, [r3, #0]
 801ff7a:	2b00      	cmp	r3, #0
 801ff7c:	d005      	beq.n	801ff8a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ff7e:	687a      	ldr	r2, [r7, #4]
 801ff80:	23a7      	movs	r3, #167	@ 0xa7
 801ff82:	009b      	lsls	r3, r3, #2
 801ff84:	2102      	movs	r1, #2
 801ff86:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ff88:	e00c      	b.n	801ffa4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ff8a:	687a      	ldr	r2, [r7, #4]
 801ff8c:	23a7      	movs	r3, #167	@ 0xa7
 801ff8e:	009b      	lsls	r3, r3, #2
 801ff90:	2101      	movs	r1, #1
 801ff92:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ff94:	e006      	b.n	801ffa4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ff96:	683a      	ldr	r2, [r7, #0]
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	0011      	movs	r1, r2
 801ff9c:	0018      	movs	r0, r3
 801ff9e:	f000 f994 	bl	80202ca <USBD_CtlError>
  }
}
 801ffa2:	46c0      	nop			@ (mov r8, r8)
 801ffa4:	46c0      	nop			@ (mov r8, r8)
 801ffa6:	46bd      	mov	sp, r7
 801ffa8:	b005      	add	sp, #20
 801ffaa:	bd90      	pop	{r4, r7, pc}
 801ffac:	0000029e 	.word	0x0000029e

0801ffb0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ffb0:	b580      	push	{r7, lr}
 801ffb2:	b082      	sub	sp, #8
 801ffb4:	af00      	add	r7, sp, #0
 801ffb6:	6078      	str	r0, [r7, #4]
 801ffb8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ffba:	683b      	ldr	r3, [r7, #0]
 801ffbc:	885b      	ldrh	r3, [r3, #2]
 801ffbe:	b2da      	uxtb	r2, r3
 801ffc0:	4b4c      	ldr	r3, [pc, #304]	@ (80200f4 <USBD_SetConfig+0x144>)
 801ffc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ffc4:	4b4b      	ldr	r3, [pc, #300]	@ (80200f4 <USBD_SetConfig+0x144>)
 801ffc6:	781b      	ldrb	r3, [r3, #0]
 801ffc8:	2b01      	cmp	r3, #1
 801ffca:	d906      	bls.n	801ffda <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801ffcc:	683a      	ldr	r2, [r7, #0]
 801ffce:	687b      	ldr	r3, [r7, #4]
 801ffd0:	0011      	movs	r1, r2
 801ffd2:	0018      	movs	r0, r3
 801ffd4:	f000 f979 	bl	80202ca <USBD_CtlError>
 801ffd8:	e088      	b.n	80200ec <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801ffda:	687a      	ldr	r2, [r7, #4]
 801ffdc:	23a7      	movs	r3, #167	@ 0xa7
 801ffde:	009b      	lsls	r3, r3, #2
 801ffe0:	5cd3      	ldrb	r3, [r2, r3]
 801ffe2:	2b02      	cmp	r3, #2
 801ffe4:	d002      	beq.n	801ffec <USBD_SetConfig+0x3c>
 801ffe6:	2b03      	cmp	r3, #3
 801ffe8:	d029      	beq.n	802003e <USBD_SetConfig+0x8e>
 801ffea:	e071      	b.n	80200d0 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801ffec:	4b41      	ldr	r3, [pc, #260]	@ (80200f4 <USBD_SetConfig+0x144>)
 801ffee:	781b      	ldrb	r3, [r3, #0]
 801fff0:	2b00      	cmp	r3, #0
 801fff2:	d01f      	beq.n	8020034 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801fff4:	4b3f      	ldr	r3, [pc, #252]	@ (80200f4 <USBD_SetConfig+0x144>)
 801fff6:	781b      	ldrb	r3, [r3, #0]
 801fff8:	001a      	movs	r2, r3
 801fffa:	687b      	ldr	r3, [r7, #4]
 801fffc:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801fffe:	687a      	ldr	r2, [r7, #4]
 8020000:	23a7      	movs	r3, #167	@ 0xa7
 8020002:	009b      	lsls	r3, r3, #2
 8020004:	2103      	movs	r1, #3
 8020006:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8020008:	4b3a      	ldr	r3, [pc, #232]	@ (80200f4 <USBD_SetConfig+0x144>)
 802000a:	781a      	ldrb	r2, [r3, #0]
 802000c:	687b      	ldr	r3, [r7, #4]
 802000e:	0011      	movs	r1, r2
 8020010:	0018      	movs	r0, r3
 8020012:	f7ff f8c6 	bl	801f1a2 <USBD_SetClassConfig>
 8020016:	0003      	movs	r3, r0
 8020018:	2b02      	cmp	r3, #2
 802001a:	d106      	bne.n	802002a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 802001c:	683a      	ldr	r2, [r7, #0]
 802001e:	687b      	ldr	r3, [r7, #4]
 8020020:	0011      	movs	r1, r2
 8020022:	0018      	movs	r0, r3
 8020024:	f000 f951 	bl	80202ca <USBD_CtlError>
            return;
 8020028:	e060      	b.n	80200ec <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 802002a:	687b      	ldr	r3, [r7, #4]
 802002c:	0018      	movs	r0, r3
 802002e:	f000 fa34 	bl	802049a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8020032:	e05b      	b.n	80200ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	0018      	movs	r0, r3
 8020038:	f000 fa2f 	bl	802049a <USBD_CtlSendStatus>
        break;
 802003c:	e056      	b.n	80200ec <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 802003e:	4b2d      	ldr	r3, [pc, #180]	@ (80200f4 <USBD_SetConfig+0x144>)
 8020040:	781b      	ldrb	r3, [r3, #0]
 8020042:	2b00      	cmp	r3, #0
 8020044:	d115      	bne.n	8020072 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8020046:	687a      	ldr	r2, [r7, #4]
 8020048:	23a7      	movs	r3, #167	@ 0xa7
 802004a:	009b      	lsls	r3, r3, #2
 802004c:	2102      	movs	r1, #2
 802004e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8020050:	4b28      	ldr	r3, [pc, #160]	@ (80200f4 <USBD_SetConfig+0x144>)
 8020052:	781b      	ldrb	r3, [r3, #0]
 8020054:	001a      	movs	r2, r3
 8020056:	687b      	ldr	r3, [r7, #4]
 8020058:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 802005a:	4b26      	ldr	r3, [pc, #152]	@ (80200f4 <USBD_SetConfig+0x144>)
 802005c:	781a      	ldrb	r2, [r3, #0]
 802005e:	687b      	ldr	r3, [r7, #4]
 8020060:	0011      	movs	r1, r2
 8020062:	0018      	movs	r0, r3
 8020064:	f7ff f8c4 	bl	801f1f0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8020068:	687b      	ldr	r3, [r7, #4]
 802006a:	0018      	movs	r0, r3
 802006c:	f000 fa15 	bl	802049a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8020070:	e03c      	b.n	80200ec <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8020072:	4b20      	ldr	r3, [pc, #128]	@ (80200f4 <USBD_SetConfig+0x144>)
 8020074:	781b      	ldrb	r3, [r3, #0]
 8020076:	001a      	movs	r2, r3
 8020078:	687b      	ldr	r3, [r7, #4]
 802007a:	685b      	ldr	r3, [r3, #4]
 802007c:	429a      	cmp	r2, r3
 802007e:	d022      	beq.n	80200c6 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	685b      	ldr	r3, [r3, #4]
 8020084:	b2da      	uxtb	r2, r3
 8020086:	687b      	ldr	r3, [r7, #4]
 8020088:	0011      	movs	r1, r2
 802008a:	0018      	movs	r0, r3
 802008c:	f7ff f8b0 	bl	801f1f0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8020090:	4b18      	ldr	r3, [pc, #96]	@ (80200f4 <USBD_SetConfig+0x144>)
 8020092:	781b      	ldrb	r3, [r3, #0]
 8020094:	001a      	movs	r2, r3
 8020096:	687b      	ldr	r3, [r7, #4]
 8020098:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 802009a:	4b16      	ldr	r3, [pc, #88]	@ (80200f4 <USBD_SetConfig+0x144>)
 802009c:	781a      	ldrb	r2, [r3, #0]
 802009e:	687b      	ldr	r3, [r7, #4]
 80200a0:	0011      	movs	r1, r2
 80200a2:	0018      	movs	r0, r3
 80200a4:	f7ff f87d 	bl	801f1a2 <USBD_SetClassConfig>
 80200a8:	0003      	movs	r3, r0
 80200aa:	2b02      	cmp	r3, #2
 80200ac:	d106      	bne.n	80200bc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80200ae:	683a      	ldr	r2, [r7, #0]
 80200b0:	687b      	ldr	r3, [r7, #4]
 80200b2:	0011      	movs	r1, r2
 80200b4:	0018      	movs	r0, r3
 80200b6:	f000 f908 	bl	80202ca <USBD_CtlError>
            return;
 80200ba:	e017      	b.n	80200ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80200bc:	687b      	ldr	r3, [r7, #4]
 80200be:	0018      	movs	r0, r3
 80200c0:	f000 f9eb 	bl	802049a <USBD_CtlSendStatus>
        break;
 80200c4:	e012      	b.n	80200ec <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	0018      	movs	r0, r3
 80200ca:	f000 f9e6 	bl	802049a <USBD_CtlSendStatus>
        break;
 80200ce:	e00d      	b.n	80200ec <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80200d0:	683a      	ldr	r2, [r7, #0]
 80200d2:	687b      	ldr	r3, [r7, #4]
 80200d4:	0011      	movs	r1, r2
 80200d6:	0018      	movs	r0, r3
 80200d8:	f000 f8f7 	bl	80202ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80200dc:	4b05      	ldr	r3, [pc, #20]	@ (80200f4 <USBD_SetConfig+0x144>)
 80200de:	781a      	ldrb	r2, [r3, #0]
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	0011      	movs	r1, r2
 80200e4:	0018      	movs	r0, r3
 80200e6:	f7ff f883 	bl	801f1f0 <USBD_ClrClassConfig>
        break;
 80200ea:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80200ec:	46bd      	mov	sp, r7
 80200ee:	b002      	add	sp, #8
 80200f0:	bd80      	pop	{r7, pc}
 80200f2:	46c0      	nop			@ (mov r8, r8)
 80200f4:	20002208 	.word	0x20002208

080200f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80200f8:	b580      	push	{r7, lr}
 80200fa:	b082      	sub	sp, #8
 80200fc:	af00      	add	r7, sp, #0
 80200fe:	6078      	str	r0, [r7, #4]
 8020100:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8020102:	683b      	ldr	r3, [r7, #0]
 8020104:	88db      	ldrh	r3, [r3, #6]
 8020106:	2b01      	cmp	r3, #1
 8020108:	d006      	beq.n	8020118 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 802010a:	683a      	ldr	r2, [r7, #0]
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	0011      	movs	r1, r2
 8020110:	0018      	movs	r0, r3
 8020112:	f000 f8da 	bl	80202ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8020116:	e026      	b.n	8020166 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8020118:	687a      	ldr	r2, [r7, #4]
 802011a:	23a7      	movs	r3, #167	@ 0xa7
 802011c:	009b      	lsls	r3, r3, #2
 802011e:	5cd3      	ldrb	r3, [r2, r3]
 8020120:	2b02      	cmp	r3, #2
 8020122:	dc02      	bgt.n	802012a <USBD_GetConfig+0x32>
 8020124:	2b00      	cmp	r3, #0
 8020126:	dc03      	bgt.n	8020130 <USBD_GetConfig+0x38>
 8020128:	e016      	b.n	8020158 <USBD_GetConfig+0x60>
 802012a:	2b03      	cmp	r3, #3
 802012c:	d00c      	beq.n	8020148 <USBD_GetConfig+0x50>
 802012e:	e013      	b.n	8020158 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8020130:	687b      	ldr	r3, [r7, #4]
 8020132:	2200      	movs	r2, #0
 8020134:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8020136:	687b      	ldr	r3, [r7, #4]
 8020138:	3308      	adds	r3, #8
 802013a:	0019      	movs	r1, r3
 802013c:	687b      	ldr	r3, [r7, #4]
 802013e:	2201      	movs	r2, #1
 8020140:	0018      	movs	r0, r3
 8020142:	f000 f940 	bl	80203c6 <USBD_CtlSendData>
        break;
 8020146:	e00e      	b.n	8020166 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8020148:	687b      	ldr	r3, [r7, #4]
 802014a:	1d19      	adds	r1, r3, #4
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	2201      	movs	r2, #1
 8020150:	0018      	movs	r0, r3
 8020152:	f000 f938 	bl	80203c6 <USBD_CtlSendData>
        break;
 8020156:	e006      	b.n	8020166 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8020158:	683a      	ldr	r2, [r7, #0]
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	0011      	movs	r1, r2
 802015e:	0018      	movs	r0, r3
 8020160:	f000 f8b3 	bl	80202ca <USBD_CtlError>
        break;
 8020164:	46c0      	nop			@ (mov r8, r8)
}
 8020166:	46c0      	nop			@ (mov r8, r8)
 8020168:	46bd      	mov	sp, r7
 802016a:	b002      	add	sp, #8
 802016c:	bd80      	pop	{r7, pc}

0802016e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802016e:	b580      	push	{r7, lr}
 8020170:	b082      	sub	sp, #8
 8020172:	af00      	add	r7, sp, #0
 8020174:	6078      	str	r0, [r7, #4]
 8020176:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8020178:	687a      	ldr	r2, [r7, #4]
 802017a:	23a7      	movs	r3, #167	@ 0xa7
 802017c:	009b      	lsls	r3, r3, #2
 802017e:	5cd3      	ldrb	r3, [r2, r3]
 8020180:	3b01      	subs	r3, #1
 8020182:	2b02      	cmp	r3, #2
 8020184:	d822      	bhi.n	80201cc <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8020186:	683b      	ldr	r3, [r7, #0]
 8020188:	88db      	ldrh	r3, [r3, #6]
 802018a:	2b02      	cmp	r3, #2
 802018c:	d006      	beq.n	802019c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 802018e:	683a      	ldr	r2, [r7, #0]
 8020190:	687b      	ldr	r3, [r7, #4]
 8020192:	0011      	movs	r1, r2
 8020194:	0018      	movs	r0, r3
 8020196:	f000 f898 	bl	80202ca <USBD_CtlError>
        break;
 802019a:	e01e      	b.n	80201da <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 802019c:	687b      	ldr	r3, [r7, #4]
 802019e:	2201      	movs	r2, #1
 80201a0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80201a2:	687a      	ldr	r2, [r7, #4]
 80201a4:	23a9      	movs	r3, #169	@ 0xa9
 80201a6:	009b      	lsls	r3, r3, #2
 80201a8:	58d3      	ldr	r3, [r2, r3]
 80201aa:	2b00      	cmp	r3, #0
 80201ac:	d005      	beq.n	80201ba <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80201ae:	687b      	ldr	r3, [r7, #4]
 80201b0:	68db      	ldr	r3, [r3, #12]
 80201b2:	2202      	movs	r2, #2
 80201b4:	431a      	orrs	r2, r3
 80201b6:	687b      	ldr	r3, [r7, #4]
 80201b8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80201ba:	687b      	ldr	r3, [r7, #4]
 80201bc:	330c      	adds	r3, #12
 80201be:	0019      	movs	r1, r3
 80201c0:	687b      	ldr	r3, [r7, #4]
 80201c2:	2202      	movs	r2, #2
 80201c4:	0018      	movs	r0, r3
 80201c6:	f000 f8fe 	bl	80203c6 <USBD_CtlSendData>
      break;
 80201ca:	e006      	b.n	80201da <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80201cc:	683a      	ldr	r2, [r7, #0]
 80201ce:	687b      	ldr	r3, [r7, #4]
 80201d0:	0011      	movs	r1, r2
 80201d2:	0018      	movs	r0, r3
 80201d4:	f000 f879 	bl	80202ca <USBD_CtlError>
      break;
 80201d8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80201da:	46c0      	nop			@ (mov r8, r8)
 80201dc:	46bd      	mov	sp, r7
 80201de:	b002      	add	sp, #8
 80201e0:	bd80      	pop	{r7, pc}

080201e2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80201e2:	b580      	push	{r7, lr}
 80201e4:	b082      	sub	sp, #8
 80201e6:	af00      	add	r7, sp, #0
 80201e8:	6078      	str	r0, [r7, #4]
 80201ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80201ec:	683b      	ldr	r3, [r7, #0]
 80201ee:	885b      	ldrh	r3, [r3, #2]
 80201f0:	2b01      	cmp	r3, #1
 80201f2:	d108      	bne.n	8020206 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80201f4:	687a      	ldr	r2, [r7, #4]
 80201f6:	23a9      	movs	r3, #169	@ 0xa9
 80201f8:	009b      	lsls	r3, r3, #2
 80201fa:	2101      	movs	r1, #1
 80201fc:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80201fe:	687b      	ldr	r3, [r7, #4]
 8020200:	0018      	movs	r0, r3
 8020202:	f000 f94a 	bl	802049a <USBD_CtlSendStatus>
  }
}
 8020206:	46c0      	nop			@ (mov r8, r8)
 8020208:	46bd      	mov	sp, r7
 802020a:	b002      	add	sp, #8
 802020c:	bd80      	pop	{r7, pc}

0802020e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 802020e:	b580      	push	{r7, lr}
 8020210:	b082      	sub	sp, #8
 8020212:	af00      	add	r7, sp, #0
 8020214:	6078      	str	r0, [r7, #4]
 8020216:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8020218:	687a      	ldr	r2, [r7, #4]
 802021a:	23a7      	movs	r3, #167	@ 0xa7
 802021c:	009b      	lsls	r3, r3, #2
 802021e:	5cd3      	ldrb	r3, [r2, r3]
 8020220:	3b01      	subs	r3, #1
 8020222:	2b02      	cmp	r3, #2
 8020224:	d80d      	bhi.n	8020242 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8020226:	683b      	ldr	r3, [r7, #0]
 8020228:	885b      	ldrh	r3, [r3, #2]
 802022a:	2b01      	cmp	r3, #1
 802022c:	d110      	bne.n	8020250 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 802022e:	687a      	ldr	r2, [r7, #4]
 8020230:	23a9      	movs	r3, #169	@ 0xa9
 8020232:	009b      	lsls	r3, r3, #2
 8020234:	2100      	movs	r1, #0
 8020236:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	0018      	movs	r0, r3
 802023c:	f000 f92d 	bl	802049a <USBD_CtlSendStatus>
      }
      break;
 8020240:	e006      	b.n	8020250 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8020242:	683a      	ldr	r2, [r7, #0]
 8020244:	687b      	ldr	r3, [r7, #4]
 8020246:	0011      	movs	r1, r2
 8020248:	0018      	movs	r0, r3
 802024a:	f000 f83e 	bl	80202ca <USBD_CtlError>
      break;
 802024e:	e000      	b.n	8020252 <USBD_ClrFeature+0x44>
      break;
 8020250:	46c0      	nop			@ (mov r8, r8)
  }
}
 8020252:	46c0      	nop			@ (mov r8, r8)
 8020254:	46bd      	mov	sp, r7
 8020256:	b002      	add	sp, #8
 8020258:	bd80      	pop	{r7, pc}

0802025a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 802025a:	b580      	push	{r7, lr}
 802025c:	b082      	sub	sp, #8
 802025e:	af00      	add	r7, sp, #0
 8020260:	6078      	str	r0, [r7, #4]
 8020262:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8020264:	683b      	ldr	r3, [r7, #0]
 8020266:	781a      	ldrb	r2, [r3, #0]
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 802026c:	683b      	ldr	r3, [r7, #0]
 802026e:	785a      	ldrb	r2, [r3, #1]
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8020274:	683b      	ldr	r3, [r7, #0]
 8020276:	3302      	adds	r3, #2
 8020278:	781b      	ldrb	r3, [r3, #0]
 802027a:	001a      	movs	r2, r3
 802027c:	683b      	ldr	r3, [r7, #0]
 802027e:	3303      	adds	r3, #3
 8020280:	781b      	ldrb	r3, [r3, #0]
 8020282:	021b      	lsls	r3, r3, #8
 8020284:	b29b      	uxth	r3, r3
 8020286:	18d3      	adds	r3, r2, r3
 8020288:	b29a      	uxth	r2, r3
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 802028e:	683b      	ldr	r3, [r7, #0]
 8020290:	3304      	adds	r3, #4
 8020292:	781b      	ldrb	r3, [r3, #0]
 8020294:	001a      	movs	r2, r3
 8020296:	683b      	ldr	r3, [r7, #0]
 8020298:	3305      	adds	r3, #5
 802029a:	781b      	ldrb	r3, [r3, #0]
 802029c:	021b      	lsls	r3, r3, #8
 802029e:	b29b      	uxth	r3, r3
 80202a0:	18d3      	adds	r3, r2, r3
 80202a2:	b29a      	uxth	r2, r3
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80202a8:	683b      	ldr	r3, [r7, #0]
 80202aa:	3306      	adds	r3, #6
 80202ac:	781b      	ldrb	r3, [r3, #0]
 80202ae:	001a      	movs	r2, r3
 80202b0:	683b      	ldr	r3, [r7, #0]
 80202b2:	3307      	adds	r3, #7
 80202b4:	781b      	ldrb	r3, [r3, #0]
 80202b6:	021b      	lsls	r3, r3, #8
 80202b8:	b29b      	uxth	r3, r3
 80202ba:	18d3      	adds	r3, r2, r3
 80202bc:	b29a      	uxth	r2, r3
 80202be:	687b      	ldr	r3, [r7, #4]
 80202c0:	80da      	strh	r2, [r3, #6]

}
 80202c2:	46c0      	nop			@ (mov r8, r8)
 80202c4:	46bd      	mov	sp, r7
 80202c6:	b002      	add	sp, #8
 80202c8:	bd80      	pop	{r7, pc}

080202ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80202ca:	b580      	push	{r7, lr}
 80202cc:	b082      	sub	sp, #8
 80202ce:	af00      	add	r7, sp, #0
 80202d0:	6078      	str	r0, [r7, #4]
 80202d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	2180      	movs	r1, #128	@ 0x80
 80202d8:	0018      	movs	r0, r3
 80202da:	f000 fd1e 	bl	8020d1a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80202de:	687b      	ldr	r3, [r7, #4]
 80202e0:	2100      	movs	r1, #0
 80202e2:	0018      	movs	r0, r3
 80202e4:	f000 fd19 	bl	8020d1a <USBD_LL_StallEP>
}
 80202e8:	46c0      	nop			@ (mov r8, r8)
 80202ea:	46bd      	mov	sp, r7
 80202ec:	b002      	add	sp, #8
 80202ee:	bd80      	pop	{r7, pc}

080202f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80202f0:	b590      	push	{r4, r7, lr}
 80202f2:	b087      	sub	sp, #28
 80202f4:	af00      	add	r7, sp, #0
 80202f6:	60f8      	str	r0, [r7, #12]
 80202f8:	60b9      	str	r1, [r7, #8]
 80202fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80202fc:	2417      	movs	r4, #23
 80202fe:	193b      	adds	r3, r7, r4
 8020300:	2200      	movs	r2, #0
 8020302:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8020304:	68fb      	ldr	r3, [r7, #12]
 8020306:	2b00      	cmp	r3, #0
 8020308:	d03c      	beq.n	8020384 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 802030a:	68fb      	ldr	r3, [r7, #12]
 802030c:	0018      	movs	r0, r3
 802030e:	f000 f83d 	bl	802038c <USBD_GetLen>
 8020312:	0003      	movs	r3, r0
 8020314:	3301      	adds	r3, #1
 8020316:	b29b      	uxth	r3, r3
 8020318:	18db      	adds	r3, r3, r3
 802031a:	b29a      	uxth	r2, r3
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8020320:	193b      	adds	r3, r7, r4
 8020322:	781b      	ldrb	r3, [r3, #0]
 8020324:	193a      	adds	r2, r7, r4
 8020326:	1c59      	adds	r1, r3, #1
 8020328:	7011      	strb	r1, [r2, #0]
 802032a:	001a      	movs	r2, r3
 802032c:	68bb      	ldr	r3, [r7, #8]
 802032e:	189b      	adds	r3, r3, r2
 8020330:	687a      	ldr	r2, [r7, #4]
 8020332:	7812      	ldrb	r2, [r2, #0]
 8020334:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8020336:	193b      	adds	r3, r7, r4
 8020338:	781b      	ldrb	r3, [r3, #0]
 802033a:	193a      	adds	r2, r7, r4
 802033c:	1c59      	adds	r1, r3, #1
 802033e:	7011      	strb	r1, [r2, #0]
 8020340:	001a      	movs	r2, r3
 8020342:	68bb      	ldr	r3, [r7, #8]
 8020344:	189b      	adds	r3, r3, r2
 8020346:	2203      	movs	r2, #3
 8020348:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 802034a:	e017      	b.n	802037c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 802034c:	68fb      	ldr	r3, [r7, #12]
 802034e:	1c5a      	adds	r2, r3, #1
 8020350:	60fa      	str	r2, [r7, #12]
 8020352:	2417      	movs	r4, #23
 8020354:	193a      	adds	r2, r7, r4
 8020356:	7812      	ldrb	r2, [r2, #0]
 8020358:	1939      	adds	r1, r7, r4
 802035a:	1c50      	adds	r0, r2, #1
 802035c:	7008      	strb	r0, [r1, #0]
 802035e:	0011      	movs	r1, r2
 8020360:	68ba      	ldr	r2, [r7, #8]
 8020362:	1852      	adds	r2, r2, r1
 8020364:	781b      	ldrb	r3, [r3, #0]
 8020366:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8020368:	193b      	adds	r3, r7, r4
 802036a:	781b      	ldrb	r3, [r3, #0]
 802036c:	193a      	adds	r2, r7, r4
 802036e:	1c59      	adds	r1, r3, #1
 8020370:	7011      	strb	r1, [r2, #0]
 8020372:	001a      	movs	r2, r3
 8020374:	68bb      	ldr	r3, [r7, #8]
 8020376:	189b      	adds	r3, r3, r2
 8020378:	2200      	movs	r2, #0
 802037a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 802037c:	68fb      	ldr	r3, [r7, #12]
 802037e:	781b      	ldrb	r3, [r3, #0]
 8020380:	2b00      	cmp	r3, #0
 8020382:	d1e3      	bne.n	802034c <USBD_GetString+0x5c>
    }
  }
}
 8020384:	46c0      	nop			@ (mov r8, r8)
 8020386:	46bd      	mov	sp, r7
 8020388:	b007      	add	sp, #28
 802038a:	bd90      	pop	{r4, r7, pc}

0802038c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 802038c:	b580      	push	{r7, lr}
 802038e:	b084      	sub	sp, #16
 8020390:	af00      	add	r7, sp, #0
 8020392:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8020394:	230f      	movs	r3, #15
 8020396:	18fb      	adds	r3, r7, r3
 8020398:	2200      	movs	r2, #0
 802039a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 802039c:	e008      	b.n	80203b0 <USBD_GetLen+0x24>
  {
    len++;
 802039e:	210f      	movs	r1, #15
 80203a0:	187b      	adds	r3, r7, r1
 80203a2:	781a      	ldrb	r2, [r3, #0]
 80203a4:	187b      	adds	r3, r7, r1
 80203a6:	3201      	adds	r2, #1
 80203a8:	701a      	strb	r2, [r3, #0]
    buf++;
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	3301      	adds	r3, #1
 80203ae:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80203b0:	687b      	ldr	r3, [r7, #4]
 80203b2:	781b      	ldrb	r3, [r3, #0]
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	d1f2      	bne.n	802039e <USBD_GetLen+0x12>
  }

  return len;
 80203b8:	230f      	movs	r3, #15
 80203ba:	18fb      	adds	r3, r7, r3
 80203bc:	781b      	ldrb	r3, [r3, #0]
}
 80203be:	0018      	movs	r0, r3
 80203c0:	46bd      	mov	sp, r7
 80203c2:	b004      	add	sp, #16
 80203c4:	bd80      	pop	{r7, pc}

080203c6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80203c6:	b580      	push	{r7, lr}
 80203c8:	b084      	sub	sp, #16
 80203ca:	af00      	add	r7, sp, #0
 80203cc:	60f8      	str	r0, [r7, #12]
 80203ce:	60b9      	str	r1, [r7, #8]
 80203d0:	1dbb      	adds	r3, r7, #6
 80203d2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80203d4:	68fa      	ldr	r2, [r7, #12]
 80203d6:	23a5      	movs	r3, #165	@ 0xa5
 80203d8:	009b      	lsls	r3, r3, #2
 80203da:	2102      	movs	r1, #2
 80203dc:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80203de:	1dbb      	adds	r3, r7, #6
 80203e0:	881a      	ldrh	r2, [r3, #0]
 80203e2:	68fb      	ldr	r3, [r7, #12]
 80203e4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80203e6:	1dbb      	adds	r3, r7, #6
 80203e8:	881a      	ldrh	r2, [r3, #0]
 80203ea:	68fb      	ldr	r3, [r7, #12]
 80203ec:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80203ee:	1dbb      	adds	r3, r7, #6
 80203f0:	881b      	ldrh	r3, [r3, #0]
 80203f2:	68ba      	ldr	r2, [r7, #8]
 80203f4:	68f8      	ldr	r0, [r7, #12]
 80203f6:	2100      	movs	r1, #0
 80203f8:	f000 fd41 	bl	8020e7e <USBD_LL_Transmit>

  return USBD_OK;
 80203fc:	2300      	movs	r3, #0
}
 80203fe:	0018      	movs	r0, r3
 8020400:	46bd      	mov	sp, r7
 8020402:	b004      	add	sp, #16
 8020404:	bd80      	pop	{r7, pc}

08020406 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8020406:	b580      	push	{r7, lr}
 8020408:	b084      	sub	sp, #16
 802040a:	af00      	add	r7, sp, #0
 802040c:	60f8      	str	r0, [r7, #12]
 802040e:	60b9      	str	r1, [r7, #8]
 8020410:	1dbb      	adds	r3, r7, #6
 8020412:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8020414:	1dbb      	adds	r3, r7, #6
 8020416:	881b      	ldrh	r3, [r3, #0]
 8020418:	68ba      	ldr	r2, [r7, #8]
 802041a:	68f8      	ldr	r0, [r7, #12]
 802041c:	2100      	movs	r1, #0
 802041e:	f000 fd2e 	bl	8020e7e <USBD_LL_Transmit>

  return USBD_OK;
 8020422:	2300      	movs	r3, #0
}
 8020424:	0018      	movs	r0, r3
 8020426:	46bd      	mov	sp, r7
 8020428:	b004      	add	sp, #16
 802042a:	bd80      	pop	{r7, pc}

0802042c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 802042c:	b580      	push	{r7, lr}
 802042e:	b084      	sub	sp, #16
 8020430:	af00      	add	r7, sp, #0
 8020432:	60f8      	str	r0, [r7, #12]
 8020434:	60b9      	str	r1, [r7, #8]
 8020436:	1dbb      	adds	r3, r7, #6
 8020438:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 802043a:	68fa      	ldr	r2, [r7, #12]
 802043c:	23a5      	movs	r3, #165	@ 0xa5
 802043e:	009b      	lsls	r3, r3, #2
 8020440:	2103      	movs	r1, #3
 8020442:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8020444:	1dbb      	adds	r3, r7, #6
 8020446:	8819      	ldrh	r1, [r3, #0]
 8020448:	68fa      	ldr	r2, [r7, #12]
 802044a:	23ae      	movs	r3, #174	@ 0xae
 802044c:	005b      	lsls	r3, r3, #1
 802044e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8020450:	1dbb      	adds	r3, r7, #6
 8020452:	8819      	ldrh	r1, [r3, #0]
 8020454:	68fa      	ldr	r2, [r7, #12]
 8020456:	23b0      	movs	r3, #176	@ 0xb0
 8020458:	005b      	lsls	r3, r3, #1
 802045a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 802045c:	1dbb      	adds	r3, r7, #6
 802045e:	881b      	ldrh	r3, [r3, #0]
 8020460:	68ba      	ldr	r2, [r7, #8]
 8020462:	68f8      	ldr	r0, [r7, #12]
 8020464:	2100      	movs	r1, #0
 8020466:	f000 fd41 	bl	8020eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 802046a:	2300      	movs	r3, #0
}
 802046c:	0018      	movs	r0, r3
 802046e:	46bd      	mov	sp, r7
 8020470:	b004      	add	sp, #16
 8020472:	bd80      	pop	{r7, pc}

08020474 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8020474:	b580      	push	{r7, lr}
 8020476:	b084      	sub	sp, #16
 8020478:	af00      	add	r7, sp, #0
 802047a:	60f8      	str	r0, [r7, #12]
 802047c:	60b9      	str	r1, [r7, #8]
 802047e:	1dbb      	adds	r3, r7, #6
 8020480:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8020482:	1dbb      	adds	r3, r7, #6
 8020484:	881b      	ldrh	r3, [r3, #0]
 8020486:	68ba      	ldr	r2, [r7, #8]
 8020488:	68f8      	ldr	r0, [r7, #12]
 802048a:	2100      	movs	r1, #0
 802048c:	f000 fd2e 	bl	8020eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8020490:	2300      	movs	r3, #0
}
 8020492:	0018      	movs	r0, r3
 8020494:	46bd      	mov	sp, r7
 8020496:	b004      	add	sp, #16
 8020498:	bd80      	pop	{r7, pc}

0802049a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 802049a:	b580      	push	{r7, lr}
 802049c:	b082      	sub	sp, #8
 802049e:	af00      	add	r7, sp, #0
 80204a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80204a2:	687a      	ldr	r2, [r7, #4]
 80204a4:	23a5      	movs	r3, #165	@ 0xa5
 80204a6:	009b      	lsls	r3, r3, #2
 80204a8:	2104      	movs	r1, #4
 80204aa:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80204ac:	6878      	ldr	r0, [r7, #4]
 80204ae:	2300      	movs	r3, #0
 80204b0:	2200      	movs	r2, #0
 80204b2:	2100      	movs	r1, #0
 80204b4:	f000 fce3 	bl	8020e7e <USBD_LL_Transmit>

  return USBD_OK;
 80204b8:	2300      	movs	r3, #0
}
 80204ba:	0018      	movs	r0, r3
 80204bc:	46bd      	mov	sp, r7
 80204be:	b002      	add	sp, #8
 80204c0:	bd80      	pop	{r7, pc}

080204c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80204c2:	b580      	push	{r7, lr}
 80204c4:	b082      	sub	sp, #8
 80204c6:	af00      	add	r7, sp, #0
 80204c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80204ca:	687a      	ldr	r2, [r7, #4]
 80204cc:	23a5      	movs	r3, #165	@ 0xa5
 80204ce:	009b      	lsls	r3, r3, #2
 80204d0:	2105      	movs	r1, #5
 80204d2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80204d4:	6878      	ldr	r0, [r7, #4]
 80204d6:	2300      	movs	r3, #0
 80204d8:	2200      	movs	r2, #0
 80204da:	2100      	movs	r1, #0
 80204dc:	f000 fd06 	bl	8020eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80204e0:	2300      	movs	r3, #0
}
 80204e2:	0018      	movs	r0, r3
 80204e4:	46bd      	mov	sp, r7
 80204e6:	b002      	add	sp, #8
 80204e8:	bd80      	pop	{r7, pc}
	...

080204ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80204ec:	b580      	push	{r7, lr}
 80204ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80204f0:	4914      	ldr	r1, [pc, #80]	@ (8020544 <MX_USB_DEVICE_Init+0x58>)
 80204f2:	4b15      	ldr	r3, [pc, #84]	@ (8020548 <MX_USB_DEVICE_Init+0x5c>)
 80204f4:	2200      	movs	r2, #0
 80204f6:	0018      	movs	r0, r3
 80204f8:	f7fe fdec 	bl	801f0d4 <USBD_Init>
 80204fc:	1e03      	subs	r3, r0, #0
 80204fe:	d001      	beq.n	8020504 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8020500:	f7ea fed4 	bl	800b2ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8020504:	4a11      	ldr	r2, [pc, #68]	@ (802054c <MX_USB_DEVICE_Init+0x60>)
 8020506:	4b10      	ldr	r3, [pc, #64]	@ (8020548 <MX_USB_DEVICE_Init+0x5c>)
 8020508:	0011      	movs	r1, r2
 802050a:	0018      	movs	r0, r3
 802050c:	f7fe fe13 	bl	801f136 <USBD_RegisterClass>
 8020510:	1e03      	subs	r3, r0, #0
 8020512:	d001      	beq.n	8020518 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8020514:	f7ea feca 	bl	800b2ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8020518:	4a0d      	ldr	r2, [pc, #52]	@ (8020550 <MX_USB_DEVICE_Init+0x64>)
 802051a:	4b0b      	ldr	r3, [pc, #44]	@ (8020548 <MX_USB_DEVICE_Init+0x5c>)
 802051c:	0011      	movs	r1, r2
 802051e:	0018      	movs	r0, r3
 8020520:	f7fe fd28 	bl	801ef74 <USBD_CDC_RegisterInterface>
 8020524:	1e03      	subs	r3, r0, #0
 8020526:	d001      	beq.n	802052c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8020528:	f7ea fec0 	bl	800b2ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 802052c:	4b06      	ldr	r3, [pc, #24]	@ (8020548 <MX_USB_DEVICE_Init+0x5c>)
 802052e:	0018      	movs	r0, r3
 8020530:	f7fe fe21 	bl	801f176 <USBD_Start>
 8020534:	1e03      	subs	r3, r0, #0
 8020536:	d001      	beq.n	802053c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8020538:	f7ea feb8 	bl	800b2ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802053c:	46c0      	nop			@ (mov r8, r8)
 802053e:	46bd      	mov	sp, r7
 8020540:	bd80      	pop	{r7, pc}
 8020542:	46c0      	nop			@ (mov r8, r8)
 8020544:	20000218 	.word	0x20000218
 8020548:	2000220c 	.word	0x2000220c
 802054c:	20000104 	.word	0x20000104
 8020550:	20000208 	.word	0x20000208

08020554 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8020554:	b580      	push	{r7, lr}
 8020556:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8020558:	4907      	ldr	r1, [pc, #28]	@ (8020578 <CDC_Init_FS+0x24>)
 802055a:	4b08      	ldr	r3, [pc, #32]	@ (802057c <CDC_Init_FS+0x28>)
 802055c:	2200      	movs	r2, #0
 802055e:	0018      	movs	r0, r3
 8020560:	f7fe fd23 	bl	801efaa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8020564:	4a06      	ldr	r2, [pc, #24]	@ (8020580 <CDC_Init_FS+0x2c>)
 8020566:	4b05      	ldr	r3, [pc, #20]	@ (802057c <CDC_Init_FS+0x28>)
 8020568:	0011      	movs	r1, r2
 802056a:	0018      	movs	r0, r3
 802056c:	f7fe fd39 	bl	801efe2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8020570:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8020572:	0018      	movs	r0, r3
 8020574:	46bd      	mov	sp, r7
 8020576:	bd80      	pop	{r7, pc}
 8020578:	20002990 	.word	0x20002990
 802057c:	2000220c 	.word	0x2000220c
 8020580:	20002590 	.word	0x20002590

08020584 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8020584:	b580      	push	{r7, lr}
 8020586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8020588:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802058a:	0018      	movs	r0, r3
 802058c:	46bd      	mov	sp, r7
 802058e:	bd80      	pop	{r7, pc}

08020590 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8020590:	b580      	push	{r7, lr}
 8020592:	b082      	sub	sp, #8
 8020594:	af00      	add	r7, sp, #0
 8020596:	6039      	str	r1, [r7, #0]
 8020598:	0011      	movs	r1, r2
 802059a:	1dfb      	adds	r3, r7, #7
 802059c:	1c02      	adds	r2, r0, #0
 802059e:	701a      	strb	r2, [r3, #0]
 80205a0:	1d3b      	adds	r3, r7, #4
 80205a2:	1c0a      	adds	r2, r1, #0
 80205a4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80205a6:	1dfb      	adds	r3, r7, #7
 80205a8:	781b      	ldrb	r3, [r3, #0]
 80205aa:	2b23      	cmp	r3, #35	@ 0x23
 80205ac:	d804      	bhi.n	80205b8 <CDC_Control_FS+0x28>
 80205ae:	009a      	lsls	r2, r3, #2
 80205b0:	4b04      	ldr	r3, [pc, #16]	@ (80205c4 <CDC_Control_FS+0x34>)
 80205b2:	18d3      	adds	r3, r2, r3
 80205b4:	681b      	ldr	r3, [r3, #0]
 80205b6:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80205b8:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80205ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80205bc:	0018      	movs	r0, r3
 80205be:	46bd      	mov	sp, r7
 80205c0:	b002      	add	sp, #8
 80205c2:	bd80      	pop	{r7, pc}
 80205c4:	0802b32c 	.word	0x0802b32c

080205c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80205c8:	b580      	push	{r7, lr}
 80205ca:	b082      	sub	sp, #8
 80205cc:	af00      	add	r7, sp, #0
 80205ce:	6078      	str	r0, [r7, #4]
 80205d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 80205d2:	4b12      	ldr	r3, [pc, #72]	@ (802061c <CDC_Receive_FS+0x54>)
 80205d4:	781b      	ldrb	r3, [r3, #0]
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	d013      	beq.n	8020602 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 80205da:	683b      	ldr	r3, [r7, #0]
 80205dc:	681b      	ldr	r3, [r3, #0]
 80205de:	b29a      	uxth	r2, r3
 80205e0:	2301      	movs	r3, #1
 80205e2:	425b      	negs	r3, r3
 80205e4:	6879      	ldr	r1, [r7, #4]
 80205e6:	480e      	ldr	r0, [pc, #56]	@ (8020620 <CDC_Receive_FS+0x58>)
 80205e8:	f7fa fa46 	bl	801aa78 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80205ec:	687a      	ldr	r2, [r7, #4]
 80205ee:	4b0d      	ldr	r3, [pc, #52]	@ (8020624 <CDC_Receive_FS+0x5c>)
 80205f0:	0011      	movs	r1, r2
 80205f2:	0018      	movs	r0, r3
 80205f4:	f7fe fcf5 	bl	801efe2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80205f8:	4b0a      	ldr	r3, [pc, #40]	@ (8020624 <CDC_Receive_FS+0x5c>)
 80205fa:	0018      	movs	r0, r3
 80205fc:	f7fe fd3c 	bl	801f078 <USBD_CDC_ReceivePacket>
 8020600:	e006      	b.n	8020610 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 8020602:	683b      	ldr	r3, [r7, #0]
 8020604:	681a      	ldr	r2, [r3, #0]
 8020606:	4b08      	ldr	r3, [pc, #32]	@ (8020628 <CDC_Receive_FS+0x60>)
 8020608:	681b      	ldr	r3, [r3, #0]
 802060a:	18d2      	adds	r2, r2, r3
 802060c:	4b06      	ldr	r3, [pc, #24]	@ (8020628 <CDC_Receive_FS+0x60>)
 802060e:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8020610:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8020612:	0018      	movs	r0, r3
 8020614:	46bd      	mov	sp, r7
 8020616:	b002      	add	sp, #8
 8020618:	bd80      	pop	{r7, pc}
 802061a:	46c0      	nop			@ (mov r8, r8)
 802061c:	200024d0 	.word	0x200024d0
 8020620:	200024d4 	.word	0x200024d4
 8020624:	2000220c 	.word	0x2000220c
 8020628:	2000258c 	.word	0x2000258c

0802062c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 802062c:	b5b0      	push	{r4, r5, r7, lr}
 802062e:	b084      	sub	sp, #16
 8020630:	af00      	add	r7, sp, #0
 8020632:	6078      	str	r0, [r7, #4]
 8020634:	000a      	movs	r2, r1
 8020636:	1cbb      	adds	r3, r7, #2
 8020638:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 802063a:	230f      	movs	r3, #15
 802063c:	18fb      	adds	r3, r7, r3
 802063e:	2200      	movs	r2, #0
 8020640:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8020642:	4a11      	ldr	r2, [pc, #68]	@ (8020688 <CDC_Transmit_FS+0x5c>)
 8020644:	23ae      	movs	r3, #174	@ 0xae
 8020646:	009b      	lsls	r3, r3, #2
 8020648:	58d3      	ldr	r3, [r2, r3]
 802064a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 802064c:	68ba      	ldr	r2, [r7, #8]
 802064e:	2385      	movs	r3, #133	@ 0x85
 8020650:	009b      	lsls	r3, r3, #2
 8020652:	58d3      	ldr	r3, [r2, r3]
 8020654:	2b00      	cmp	r3, #0
 8020656:	d001      	beq.n	802065c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8020658:	2301      	movs	r3, #1
 802065a:	e010      	b.n	802067e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 802065c:	1cbb      	adds	r3, r7, #2
 802065e:	881a      	ldrh	r2, [r3, #0]
 8020660:	6879      	ldr	r1, [r7, #4]
 8020662:	4b09      	ldr	r3, [pc, #36]	@ (8020688 <CDC_Transmit_FS+0x5c>)
 8020664:	0018      	movs	r0, r3
 8020666:	f7fe fca0 	bl	801efaa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802066a:	250f      	movs	r5, #15
 802066c:	197c      	adds	r4, r7, r5
 802066e:	4b06      	ldr	r3, [pc, #24]	@ (8020688 <CDC_Transmit_FS+0x5c>)
 8020670:	0018      	movs	r0, r3
 8020672:	f7fe fcca 	bl	801f00a <USBD_CDC_TransmitPacket>
 8020676:	0003      	movs	r3, r0
 8020678:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 802067a:	197b      	adds	r3, r7, r5
 802067c:	781b      	ldrb	r3, [r3, #0]
}
 802067e:	0018      	movs	r0, r3
 8020680:	46bd      	mov	sp, r7
 8020682:	b004      	add	sp, #16
 8020684:	bdb0      	pop	{r4, r5, r7, pc}
 8020686:	46c0      	nop			@ (mov r8, r8)
 8020688:	2000220c 	.word	0x2000220c

0802068c <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 802068c:	b580      	push	{r7, lr}
 802068e:	af00      	add	r7, sp, #0
  ESPProg = true;
 8020690:	4b02      	ldr	r3, [pc, #8]	@ (802069c <EnableESPProg+0x10>)
 8020692:	2201      	movs	r2, #1
 8020694:	701a      	strb	r2, [r3, #0]
}
 8020696:	46c0      	nop			@ (mov r8, r8)
 8020698:	46bd      	mov	sp, r7
 802069a:	bd80      	pop	{r7, pc}
 802069c:	200024d0 	.word	0x200024d0

080206a0 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80206a0:	b580      	push	{r7, lr}
 80206a2:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80206a4:	4b01      	ldr	r3, [pc, #4]	@ (80206ac <GetUsbRxPointer+0xc>)
}
 80206a6:	0018      	movs	r0, r3
 80206a8:	46bd      	mov	sp, r7
 80206aa:	bd80      	pop	{r7, pc}
 80206ac:	20002590 	.word	0x20002590

080206b0 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80206b0:	b580      	push	{r7, lr}
 80206b2:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80206b4:	4b07      	ldr	r3, [pc, #28]	@ (80206d4 <ResetUsbRxDataSize+0x24>)
 80206b6:	2200      	movs	r2, #0
 80206b8:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80206ba:	4a07      	ldr	r2, [pc, #28]	@ (80206d8 <ResetUsbRxDataSize+0x28>)
 80206bc:	4b07      	ldr	r3, [pc, #28]	@ (80206dc <ResetUsbRxDataSize+0x2c>)
 80206be:	0011      	movs	r1, r2
 80206c0:	0018      	movs	r0, r3
 80206c2:	f7fe fc8e 	bl	801efe2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80206c6:	4b05      	ldr	r3, [pc, #20]	@ (80206dc <ResetUsbRxDataSize+0x2c>)
 80206c8:	0018      	movs	r0, r3
 80206ca:	f7fe fcd5 	bl	801f078 <USBD_CDC_ReceivePacket>
}
 80206ce:	46c0      	nop			@ (mov r8, r8)
 80206d0:	46bd      	mov	sp, r7
 80206d2:	bd80      	pop	{r7, pc}
 80206d4:	2000258c 	.word	0x2000258c
 80206d8:	20002590 	.word	0x20002590
 80206dc:	2000220c 	.word	0x2000220c

080206e0 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 80206e0:	b580      	push	{r7, lr}
 80206e2:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 80206e4:	4b02      	ldr	r3, [pc, #8]	@ (80206f0 <GetUsbRxDataSize+0x10>)
 80206e6:	681b      	ldr	r3, [r3, #0]
}
 80206e8:	0018      	movs	r0, r3
 80206ea:	46bd      	mov	sp, r7
 80206ec:	bd80      	pop	{r7, pc}
 80206ee:	46c0      	nop			@ (mov r8, r8)
 80206f0:	2000258c 	.word	0x2000258c

080206f4 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 80206f4:	b580      	push	{r7, lr}
 80206f6:	b082      	sub	sp, #8
 80206f8:	af00      	add	r7, sp, #0
 80206fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 80206fc:	687a      	ldr	r2, [r7, #4]
 80206fe:	4b07      	ldr	r3, [pc, #28]	@ (802071c <GetUsbRxNextChunk+0x28>)
 8020700:	18d2      	adds	r2, r2, r3
 8020702:	4b07      	ldr	r3, [pc, #28]	@ (8020720 <GetUsbRxNextChunk+0x2c>)
 8020704:	0011      	movs	r1, r2
 8020706:	0018      	movs	r0, r3
 8020708:	f7fe fc6b 	bl	801efe2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802070c:	4b04      	ldr	r3, [pc, #16]	@ (8020720 <GetUsbRxNextChunk+0x2c>)
 802070e:	0018      	movs	r0, r3
 8020710:	f7fe fcb2 	bl	801f078 <USBD_CDC_ReceivePacket>
}
 8020714:	46c0      	nop			@ (mov r8, r8)
 8020716:	46bd      	mov	sp, r7
 8020718:	b002      	add	sp, #8
 802071a:	bd80      	pop	{r7, pc}
 802071c:	20002590 	.word	0x20002590
 8020720:	2000220c 	.word	0x2000220c

08020724 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020724:	b580      	push	{r7, lr}
 8020726:	b082      	sub	sp, #8
 8020728:	af00      	add	r7, sp, #0
 802072a:	0002      	movs	r2, r0
 802072c:	6039      	str	r1, [r7, #0]
 802072e:	1dfb      	adds	r3, r7, #7
 8020730:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8020732:	683b      	ldr	r3, [r7, #0]
 8020734:	2212      	movs	r2, #18
 8020736:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8020738:	4b02      	ldr	r3, [pc, #8]	@ (8020744 <USBD_FS_DeviceDescriptor+0x20>)
}
 802073a:	0018      	movs	r0, r3
 802073c:	46bd      	mov	sp, r7
 802073e:	b002      	add	sp, #8
 8020740:	bd80      	pop	{r7, pc}
 8020742:	46c0      	nop			@ (mov r8, r8)
 8020744:	20000234 	.word	0x20000234

08020748 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020748:	b580      	push	{r7, lr}
 802074a:	b082      	sub	sp, #8
 802074c:	af00      	add	r7, sp, #0
 802074e:	0002      	movs	r2, r0
 8020750:	6039      	str	r1, [r7, #0]
 8020752:	1dfb      	adds	r3, r7, #7
 8020754:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8020756:	683b      	ldr	r3, [r7, #0]
 8020758:	2204      	movs	r2, #4
 802075a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 802075c:	4b02      	ldr	r3, [pc, #8]	@ (8020768 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 802075e:	0018      	movs	r0, r3
 8020760:	46bd      	mov	sp, r7
 8020762:	b002      	add	sp, #8
 8020764:	bd80      	pop	{r7, pc}
 8020766:	46c0      	nop			@ (mov r8, r8)
 8020768:	20000248 	.word	0x20000248

0802076c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802076c:	b580      	push	{r7, lr}
 802076e:	b082      	sub	sp, #8
 8020770:	af00      	add	r7, sp, #0
 8020772:	0002      	movs	r2, r0
 8020774:	6039      	str	r1, [r7, #0]
 8020776:	1dfb      	adds	r3, r7, #7
 8020778:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802077a:	1dfb      	adds	r3, r7, #7
 802077c:	781b      	ldrb	r3, [r3, #0]
 802077e:	2b00      	cmp	r3, #0
 8020780:	d106      	bne.n	8020790 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020782:	683a      	ldr	r2, [r7, #0]
 8020784:	4908      	ldr	r1, [pc, #32]	@ (80207a8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8020786:	4b09      	ldr	r3, [pc, #36]	@ (80207ac <USBD_FS_ProductStrDescriptor+0x40>)
 8020788:	0018      	movs	r0, r3
 802078a:	f7ff fdb1 	bl	80202f0 <USBD_GetString>
 802078e:	e005      	b.n	802079c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020790:	683a      	ldr	r2, [r7, #0]
 8020792:	4905      	ldr	r1, [pc, #20]	@ (80207a8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8020794:	4b05      	ldr	r3, [pc, #20]	@ (80207ac <USBD_FS_ProductStrDescriptor+0x40>)
 8020796:	0018      	movs	r0, r3
 8020798:	f7ff fdaa 	bl	80202f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 802079c:	4b02      	ldr	r3, [pc, #8]	@ (80207a8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 802079e:	0018      	movs	r0, r3
 80207a0:	46bd      	mov	sp, r7
 80207a2:	b002      	add	sp, #8
 80207a4:	bd80      	pop	{r7, pc}
 80207a6:	46c0      	nop			@ (mov r8, r8)
 80207a8:	20002d90 	.word	0x20002d90
 80207ac:	0802ad20 	.word	0x0802ad20

080207b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80207b0:	b580      	push	{r7, lr}
 80207b2:	b082      	sub	sp, #8
 80207b4:	af00      	add	r7, sp, #0
 80207b6:	0002      	movs	r2, r0
 80207b8:	6039      	str	r1, [r7, #0]
 80207ba:	1dfb      	adds	r3, r7, #7
 80207bc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80207be:	683a      	ldr	r2, [r7, #0]
 80207c0:	4904      	ldr	r1, [pc, #16]	@ (80207d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80207c2:	4b05      	ldr	r3, [pc, #20]	@ (80207d8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80207c4:	0018      	movs	r0, r3
 80207c6:	f7ff fd93 	bl	80202f0 <USBD_GetString>
  return USBD_StrDesc;
 80207ca:	4b02      	ldr	r3, [pc, #8]	@ (80207d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80207cc:	0018      	movs	r0, r3
 80207ce:	46bd      	mov	sp, r7
 80207d0:	b002      	add	sp, #8
 80207d2:	bd80      	pop	{r7, pc}
 80207d4:	20002d90 	.word	0x20002d90
 80207d8:	0802ad38 	.word	0x0802ad38

080207dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80207dc:	b580      	push	{r7, lr}
 80207de:	b082      	sub	sp, #8
 80207e0:	af00      	add	r7, sp, #0
 80207e2:	0002      	movs	r2, r0
 80207e4:	6039      	str	r1, [r7, #0]
 80207e6:	1dfb      	adds	r3, r7, #7
 80207e8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80207ea:	683b      	ldr	r3, [r7, #0]
 80207ec:	221a      	movs	r2, #26
 80207ee:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80207f0:	f000 f84c 	bl	802088c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80207f4:	4b02      	ldr	r3, [pc, #8]	@ (8020800 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80207f6:	0018      	movs	r0, r3
 80207f8:	46bd      	mov	sp, r7
 80207fa:	b002      	add	sp, #8
 80207fc:	bd80      	pop	{r7, pc}
 80207fe:	46c0      	nop			@ (mov r8, r8)
 8020800:	2000024c 	.word	0x2000024c

08020804 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020804:	b580      	push	{r7, lr}
 8020806:	b082      	sub	sp, #8
 8020808:	af00      	add	r7, sp, #0
 802080a:	0002      	movs	r2, r0
 802080c:	6039      	str	r1, [r7, #0]
 802080e:	1dfb      	adds	r3, r7, #7
 8020810:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8020812:	1dfb      	adds	r3, r7, #7
 8020814:	781b      	ldrb	r3, [r3, #0]
 8020816:	2b00      	cmp	r3, #0
 8020818:	d106      	bne.n	8020828 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802081a:	683a      	ldr	r2, [r7, #0]
 802081c:	4908      	ldr	r1, [pc, #32]	@ (8020840 <USBD_FS_ConfigStrDescriptor+0x3c>)
 802081e:	4b09      	ldr	r3, [pc, #36]	@ (8020844 <USBD_FS_ConfigStrDescriptor+0x40>)
 8020820:	0018      	movs	r0, r3
 8020822:	f7ff fd65 	bl	80202f0 <USBD_GetString>
 8020826:	e005      	b.n	8020834 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8020828:	683a      	ldr	r2, [r7, #0]
 802082a:	4905      	ldr	r1, [pc, #20]	@ (8020840 <USBD_FS_ConfigStrDescriptor+0x3c>)
 802082c:	4b05      	ldr	r3, [pc, #20]	@ (8020844 <USBD_FS_ConfigStrDescriptor+0x40>)
 802082e:	0018      	movs	r0, r3
 8020830:	f7ff fd5e 	bl	80202f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8020834:	4b02      	ldr	r3, [pc, #8]	@ (8020840 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8020836:	0018      	movs	r0, r3
 8020838:	46bd      	mov	sp, r7
 802083a:	b002      	add	sp, #8
 802083c:	bd80      	pop	{r7, pc}
 802083e:	46c0      	nop			@ (mov r8, r8)
 8020840:	20002d90 	.word	0x20002d90
 8020844:	0802ad4c 	.word	0x0802ad4c

08020848 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020848:	b580      	push	{r7, lr}
 802084a:	b082      	sub	sp, #8
 802084c:	af00      	add	r7, sp, #0
 802084e:	0002      	movs	r2, r0
 8020850:	6039      	str	r1, [r7, #0]
 8020852:	1dfb      	adds	r3, r7, #7
 8020854:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8020856:	1dfb      	adds	r3, r7, #7
 8020858:	781b      	ldrb	r3, [r3, #0]
 802085a:	2b00      	cmp	r3, #0
 802085c:	d106      	bne.n	802086c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802085e:	683a      	ldr	r2, [r7, #0]
 8020860:	4908      	ldr	r1, [pc, #32]	@ (8020884 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8020862:	4b09      	ldr	r3, [pc, #36]	@ (8020888 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8020864:	0018      	movs	r0, r3
 8020866:	f7ff fd43 	bl	80202f0 <USBD_GetString>
 802086a:	e005      	b.n	8020878 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 802086c:	683a      	ldr	r2, [r7, #0]
 802086e:	4905      	ldr	r1, [pc, #20]	@ (8020884 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8020870:	4b05      	ldr	r3, [pc, #20]	@ (8020888 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8020872:	0018      	movs	r0, r3
 8020874:	f7ff fd3c 	bl	80202f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8020878:	4b02      	ldr	r3, [pc, #8]	@ (8020884 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 802087a:	0018      	movs	r0, r3
 802087c:	46bd      	mov	sp, r7
 802087e:	b002      	add	sp, #8
 8020880:	bd80      	pop	{r7, pc}
 8020882:	46c0      	nop			@ (mov r8, r8)
 8020884:	20002d90 	.word	0x20002d90
 8020888:	0802ad58 	.word	0x0802ad58

0802088c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 802088c:	b580      	push	{r7, lr}
 802088e:	b084      	sub	sp, #16
 8020890:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8020892:	4b10      	ldr	r3, [pc, #64]	@ (80208d4 <Get_SerialNum+0x48>)
 8020894:	681b      	ldr	r3, [r3, #0]
 8020896:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8020898:	4b0f      	ldr	r3, [pc, #60]	@ (80208d8 <Get_SerialNum+0x4c>)
 802089a:	681b      	ldr	r3, [r3, #0]
 802089c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802089e:	4b0f      	ldr	r3, [pc, #60]	@ (80208dc <Get_SerialNum+0x50>)
 80208a0:	681b      	ldr	r3, [r3, #0]
 80208a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80208a4:	68fa      	ldr	r2, [r7, #12]
 80208a6:	687b      	ldr	r3, [r7, #4]
 80208a8:	18d3      	adds	r3, r2, r3
 80208aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80208ac:	68fb      	ldr	r3, [r7, #12]
 80208ae:	2b00      	cmp	r3, #0
 80208b0:	d00b      	beq.n	80208ca <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80208b2:	490b      	ldr	r1, [pc, #44]	@ (80208e0 <Get_SerialNum+0x54>)
 80208b4:	68fb      	ldr	r3, [r7, #12]
 80208b6:	2208      	movs	r2, #8
 80208b8:	0018      	movs	r0, r3
 80208ba:	f000 f815 	bl	80208e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80208be:	4909      	ldr	r1, [pc, #36]	@ (80208e4 <Get_SerialNum+0x58>)
 80208c0:	68bb      	ldr	r3, [r7, #8]
 80208c2:	2204      	movs	r2, #4
 80208c4:	0018      	movs	r0, r3
 80208c6:	f000 f80f 	bl	80208e8 <IntToUnicode>
  }
}
 80208ca:	46c0      	nop			@ (mov r8, r8)
 80208cc:	46bd      	mov	sp, r7
 80208ce:	b004      	add	sp, #16
 80208d0:	bd80      	pop	{r7, pc}
 80208d2:	46c0      	nop			@ (mov r8, r8)
 80208d4:	1ff80050 	.word	0x1ff80050
 80208d8:	1ff80054 	.word	0x1ff80054
 80208dc:	1ff80058 	.word	0x1ff80058
 80208e0:	2000024e 	.word	0x2000024e
 80208e4:	2000025e 	.word	0x2000025e

080208e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80208e8:	b580      	push	{r7, lr}
 80208ea:	b086      	sub	sp, #24
 80208ec:	af00      	add	r7, sp, #0
 80208ee:	60f8      	str	r0, [r7, #12]
 80208f0:	60b9      	str	r1, [r7, #8]
 80208f2:	1dfb      	adds	r3, r7, #7
 80208f4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80208f6:	2117      	movs	r1, #23
 80208f8:	187b      	adds	r3, r7, r1
 80208fa:	2200      	movs	r2, #0
 80208fc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80208fe:	187b      	adds	r3, r7, r1
 8020900:	2200      	movs	r2, #0
 8020902:	701a      	strb	r2, [r3, #0]
 8020904:	e02f      	b.n	8020966 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8020906:	68fb      	ldr	r3, [r7, #12]
 8020908:	0f1b      	lsrs	r3, r3, #28
 802090a:	2b09      	cmp	r3, #9
 802090c:	d80d      	bhi.n	802092a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802090e:	68fb      	ldr	r3, [r7, #12]
 8020910:	0f1b      	lsrs	r3, r3, #28
 8020912:	b2da      	uxtb	r2, r3
 8020914:	2317      	movs	r3, #23
 8020916:	18fb      	adds	r3, r7, r3
 8020918:	781b      	ldrb	r3, [r3, #0]
 802091a:	005b      	lsls	r3, r3, #1
 802091c:	0019      	movs	r1, r3
 802091e:	68bb      	ldr	r3, [r7, #8]
 8020920:	185b      	adds	r3, r3, r1
 8020922:	3230      	adds	r2, #48	@ 0x30
 8020924:	b2d2      	uxtb	r2, r2
 8020926:	701a      	strb	r2, [r3, #0]
 8020928:	e00c      	b.n	8020944 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802092a:	68fb      	ldr	r3, [r7, #12]
 802092c:	0f1b      	lsrs	r3, r3, #28
 802092e:	b2da      	uxtb	r2, r3
 8020930:	2317      	movs	r3, #23
 8020932:	18fb      	adds	r3, r7, r3
 8020934:	781b      	ldrb	r3, [r3, #0]
 8020936:	005b      	lsls	r3, r3, #1
 8020938:	0019      	movs	r1, r3
 802093a:	68bb      	ldr	r3, [r7, #8]
 802093c:	185b      	adds	r3, r3, r1
 802093e:	3237      	adds	r2, #55	@ 0x37
 8020940:	b2d2      	uxtb	r2, r2
 8020942:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8020944:	68fb      	ldr	r3, [r7, #12]
 8020946:	011b      	lsls	r3, r3, #4
 8020948:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 802094a:	2117      	movs	r1, #23
 802094c:	187b      	adds	r3, r7, r1
 802094e:	781b      	ldrb	r3, [r3, #0]
 8020950:	005b      	lsls	r3, r3, #1
 8020952:	3301      	adds	r3, #1
 8020954:	68ba      	ldr	r2, [r7, #8]
 8020956:	18d3      	adds	r3, r2, r3
 8020958:	2200      	movs	r2, #0
 802095a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802095c:	187b      	adds	r3, r7, r1
 802095e:	781a      	ldrb	r2, [r3, #0]
 8020960:	187b      	adds	r3, r7, r1
 8020962:	3201      	adds	r2, #1
 8020964:	701a      	strb	r2, [r3, #0]
 8020966:	2317      	movs	r3, #23
 8020968:	18fa      	adds	r2, r7, r3
 802096a:	1dfb      	adds	r3, r7, #7
 802096c:	7812      	ldrb	r2, [r2, #0]
 802096e:	781b      	ldrb	r3, [r3, #0]
 8020970:	429a      	cmp	r2, r3
 8020972:	d3c8      	bcc.n	8020906 <IntToUnicode+0x1e>
  }
}
 8020974:	46c0      	nop			@ (mov r8, r8)
 8020976:	46c0      	nop			@ (mov r8, r8)
 8020978:	46bd      	mov	sp, r7
 802097a:	b006      	add	sp, #24
 802097c:	bd80      	pop	{r7, pc}
	...

08020980 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8020980:	b580      	push	{r7, lr}
 8020982:	b082      	sub	sp, #8
 8020984:	af00      	add	r7, sp, #0
 8020986:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8020988:	687b      	ldr	r3, [r7, #4]
 802098a:	681b      	ldr	r3, [r3, #0]
 802098c:	4a0a      	ldr	r2, [pc, #40]	@ (80209b8 <HAL_PCD_MspInit+0x38>)
 802098e:	4293      	cmp	r3, r2
 8020990:	d10e      	bne.n	80209b0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8020992:	4b0a      	ldr	r3, [pc, #40]	@ (80209bc <HAL_PCD_MspInit+0x3c>)
 8020994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8020996:	4b09      	ldr	r3, [pc, #36]	@ (80209bc <HAL_PCD_MspInit+0x3c>)
 8020998:	2180      	movs	r1, #128	@ 0x80
 802099a:	0409      	lsls	r1, r1, #16
 802099c:	430a      	orrs	r2, r1
 802099e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80209a0:	2200      	movs	r2, #0
 80209a2:	2100      	movs	r1, #0
 80209a4:	201f      	movs	r0, #31
 80209a6:	f7f2 f847 	bl	8012a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80209aa:	201f      	movs	r0, #31
 80209ac:	f7f2 f859 	bl	8012a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80209b0:	46c0      	nop			@ (mov r8, r8)
 80209b2:	46bd      	mov	sp, r7
 80209b4:	b002      	add	sp, #8
 80209b6:	bd80      	pop	{r7, pc}
 80209b8:	40005c00 	.word	0x40005c00
 80209bc:	40021000 	.word	0x40021000

080209c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80209c0:	b580      	push	{r7, lr}
 80209c2:	b082      	sub	sp, #8
 80209c4:	af00      	add	r7, sp, #0
 80209c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80209c8:	687a      	ldr	r2, [r7, #4]
 80209ca:	23bc      	movs	r3, #188	@ 0xbc
 80209cc:	009b      	lsls	r3, r3, #2
 80209ce:	58d2      	ldr	r2, [r2, r3]
 80209d0:	687b      	ldr	r3, [r7, #4]
 80209d2:	21ac      	movs	r1, #172	@ 0xac
 80209d4:	0089      	lsls	r1, r1, #2
 80209d6:	468c      	mov	ip, r1
 80209d8:	4463      	add	r3, ip
 80209da:	0019      	movs	r1, r3
 80209dc:	0010      	movs	r0, r2
 80209de:	f7fe fc1d 	bl	801f21c <USBD_LL_SetupStage>
}
 80209e2:	46c0      	nop			@ (mov r8, r8)
 80209e4:	46bd      	mov	sp, r7
 80209e6:	b002      	add	sp, #8
 80209e8:	bd80      	pop	{r7, pc}

080209ea <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80209ea:	b590      	push	{r4, r7, lr}
 80209ec:	b083      	sub	sp, #12
 80209ee:	af00      	add	r7, sp, #0
 80209f0:	6078      	str	r0, [r7, #4]
 80209f2:	000a      	movs	r2, r1
 80209f4:	1cfb      	adds	r3, r7, #3
 80209f6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80209f8:	687a      	ldr	r2, [r7, #4]
 80209fa:	23bc      	movs	r3, #188	@ 0xbc
 80209fc:	009b      	lsls	r3, r3, #2
 80209fe:	58d4      	ldr	r4, [r2, r3]
 8020a00:	1cfb      	adds	r3, r7, #3
 8020a02:	781a      	ldrb	r2, [r3, #0]
 8020a04:	6878      	ldr	r0, [r7, #4]
 8020a06:	23be      	movs	r3, #190	@ 0xbe
 8020a08:	0059      	lsls	r1, r3, #1
 8020a0a:	0013      	movs	r3, r2
 8020a0c:	009b      	lsls	r3, r3, #2
 8020a0e:	189b      	adds	r3, r3, r2
 8020a10:	00db      	lsls	r3, r3, #3
 8020a12:	18c3      	adds	r3, r0, r3
 8020a14:	185b      	adds	r3, r3, r1
 8020a16:	681a      	ldr	r2, [r3, #0]
 8020a18:	1cfb      	adds	r3, r7, #3
 8020a1a:	781b      	ldrb	r3, [r3, #0]
 8020a1c:	0019      	movs	r1, r3
 8020a1e:	0020      	movs	r0, r4
 8020a20:	f7fe fc5a 	bl	801f2d8 <USBD_LL_DataOutStage>
}
 8020a24:	46c0      	nop			@ (mov r8, r8)
 8020a26:	46bd      	mov	sp, r7
 8020a28:	b003      	add	sp, #12
 8020a2a:	bd90      	pop	{r4, r7, pc}

08020a2c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a2c:	b580      	push	{r7, lr}
 8020a2e:	b082      	sub	sp, #8
 8020a30:	af00      	add	r7, sp, #0
 8020a32:	6078      	str	r0, [r7, #4]
 8020a34:	000a      	movs	r2, r1
 8020a36:	1cfb      	adds	r3, r7, #3
 8020a38:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8020a3a:	687a      	ldr	r2, [r7, #4]
 8020a3c:	23bc      	movs	r3, #188	@ 0xbc
 8020a3e:	009b      	lsls	r3, r3, #2
 8020a40:	58d0      	ldr	r0, [r2, r3]
 8020a42:	1cfb      	adds	r3, r7, #3
 8020a44:	781a      	ldrb	r2, [r3, #0]
 8020a46:	6879      	ldr	r1, [r7, #4]
 8020a48:	0013      	movs	r3, r2
 8020a4a:	009b      	lsls	r3, r3, #2
 8020a4c:	189b      	adds	r3, r3, r2
 8020a4e:	00db      	lsls	r3, r3, #3
 8020a50:	18cb      	adds	r3, r1, r3
 8020a52:	333c      	adds	r3, #60	@ 0x3c
 8020a54:	681a      	ldr	r2, [r3, #0]
 8020a56:	1cfb      	adds	r3, r7, #3
 8020a58:	781b      	ldrb	r3, [r3, #0]
 8020a5a:	0019      	movs	r1, r3
 8020a5c:	f7fe fcbe 	bl	801f3dc <USBD_LL_DataInStage>
}
 8020a60:	46c0      	nop			@ (mov r8, r8)
 8020a62:	46bd      	mov	sp, r7
 8020a64:	b002      	add	sp, #8
 8020a66:	bd80      	pop	{r7, pc}

08020a68 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a68:	b580      	push	{r7, lr}
 8020a6a:	b082      	sub	sp, #8
 8020a6c:	af00      	add	r7, sp, #0
 8020a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8020a70:	687a      	ldr	r2, [r7, #4]
 8020a72:	23bc      	movs	r3, #188	@ 0xbc
 8020a74:	009b      	lsls	r3, r3, #2
 8020a76:	58d3      	ldr	r3, [r2, r3]
 8020a78:	0018      	movs	r0, r3
 8020a7a:	f7fe fdf5 	bl	801f668 <USBD_LL_SOF>
}
 8020a7e:	46c0      	nop			@ (mov r8, r8)
 8020a80:	46bd      	mov	sp, r7
 8020a82:	b002      	add	sp, #8
 8020a84:	bd80      	pop	{r7, pc}

08020a86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a86:	b580      	push	{r7, lr}
 8020a88:	b084      	sub	sp, #16
 8020a8a:	af00      	add	r7, sp, #0
 8020a8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8020a8e:	230f      	movs	r3, #15
 8020a90:	18fb      	adds	r3, r7, r3
 8020a92:	2201      	movs	r2, #1
 8020a94:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	689b      	ldr	r3, [r3, #8]
 8020a9a:	2b02      	cmp	r3, #2
 8020a9c:	d001      	beq.n	8020aa2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8020a9e:	f7ea fc05 	bl	800b2ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8020aa2:	687a      	ldr	r2, [r7, #4]
 8020aa4:	23bc      	movs	r3, #188	@ 0xbc
 8020aa6:	009b      	lsls	r3, r3, #2
 8020aa8:	58d2      	ldr	r2, [r2, r3]
 8020aaa:	230f      	movs	r3, #15
 8020aac:	18fb      	adds	r3, r7, r3
 8020aae:	781b      	ldrb	r3, [r3, #0]
 8020ab0:	0019      	movs	r1, r3
 8020ab2:	0010      	movs	r0, r2
 8020ab4:	f7fe fd97 	bl	801f5e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8020ab8:	687a      	ldr	r2, [r7, #4]
 8020aba:	23bc      	movs	r3, #188	@ 0xbc
 8020abc:	009b      	lsls	r3, r3, #2
 8020abe:	58d3      	ldr	r3, [r2, r3]
 8020ac0:	0018      	movs	r0, r3
 8020ac2:	f7fe fd48 	bl	801f556 <USBD_LL_Reset>
}
 8020ac6:	46c0      	nop			@ (mov r8, r8)
 8020ac8:	46bd      	mov	sp, r7
 8020aca:	b004      	add	sp, #16
 8020acc:	bd80      	pop	{r7, pc}
	...

08020ad0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020ad0:	b580      	push	{r7, lr}
 8020ad2:	b082      	sub	sp, #8
 8020ad4:	af00      	add	r7, sp, #0
 8020ad6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8020ad8:	687a      	ldr	r2, [r7, #4]
 8020ada:	23bc      	movs	r3, #188	@ 0xbc
 8020adc:	009b      	lsls	r3, r3, #2
 8020ade:	58d3      	ldr	r3, [r2, r3]
 8020ae0:	0018      	movs	r0, r3
 8020ae2:	f7fe fd91 	bl	801f608 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	699b      	ldr	r3, [r3, #24]
 8020aea:	2b00      	cmp	r3, #0
 8020aec:	d005      	beq.n	8020afa <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020aee:	4b05      	ldr	r3, [pc, #20]	@ (8020b04 <HAL_PCD_SuspendCallback+0x34>)
 8020af0:	691a      	ldr	r2, [r3, #16]
 8020af2:	4b04      	ldr	r3, [pc, #16]	@ (8020b04 <HAL_PCD_SuspendCallback+0x34>)
 8020af4:	2106      	movs	r1, #6
 8020af6:	430a      	orrs	r2, r1
 8020af8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8020afa:	46c0      	nop			@ (mov r8, r8)
 8020afc:	46bd      	mov	sp, r7
 8020afe:	b002      	add	sp, #8
 8020b00:	bd80      	pop	{r7, pc}
 8020b02:	46c0      	nop			@ (mov r8, r8)
 8020b04:	e000ed00 	.word	0xe000ed00

08020b08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020b08:	b580      	push	{r7, lr}
 8020b0a:	b082      	sub	sp, #8
 8020b0c:	af00      	add	r7, sp, #0
 8020b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8020b10:	687b      	ldr	r3, [r7, #4]
 8020b12:	699b      	ldr	r3, [r3, #24]
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d007      	beq.n	8020b28 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020b18:	4b09      	ldr	r3, [pc, #36]	@ (8020b40 <HAL_PCD_ResumeCallback+0x38>)
 8020b1a:	691a      	ldr	r2, [r3, #16]
 8020b1c:	4b08      	ldr	r3, [pc, #32]	@ (8020b40 <HAL_PCD_ResumeCallback+0x38>)
 8020b1e:	2106      	movs	r1, #6
 8020b20:	438a      	bics	r2, r1
 8020b22:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8020b24:	f000 fa44 	bl	8020fb0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8020b28:	687a      	ldr	r2, [r7, #4]
 8020b2a:	23bc      	movs	r3, #188	@ 0xbc
 8020b2c:	009b      	lsls	r3, r3, #2
 8020b2e:	58d3      	ldr	r3, [r2, r3]
 8020b30:	0018      	movs	r0, r3
 8020b32:	f7fe fd81 	bl	801f638 <USBD_LL_Resume>
}
 8020b36:	46c0      	nop			@ (mov r8, r8)
 8020b38:	46bd      	mov	sp, r7
 8020b3a:	b002      	add	sp, #8
 8020b3c:	bd80      	pop	{r7, pc}
 8020b3e:	46c0      	nop			@ (mov r8, r8)
 8020b40:	e000ed00 	.word	0xe000ed00

08020b44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8020b44:	b580      	push	{r7, lr}
 8020b46:	b082      	sub	sp, #8
 8020b48:	af00      	add	r7, sp, #0
 8020b4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8020b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8020c04 <USBD_LL_Init+0xc0>)
 8020b4e:	23bc      	movs	r3, #188	@ 0xbc
 8020b50:	009b      	lsls	r3, r3, #2
 8020b52:	6879      	ldr	r1, [r7, #4]
 8020b54:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8020b56:	687a      	ldr	r2, [r7, #4]
 8020b58:	23b0      	movs	r3, #176	@ 0xb0
 8020b5a:	009b      	lsls	r3, r3, #2
 8020b5c:	4929      	ldr	r1, [pc, #164]	@ (8020c04 <USBD_LL_Init+0xc0>)
 8020b5e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8020b60:	4b28      	ldr	r3, [pc, #160]	@ (8020c04 <USBD_LL_Init+0xc0>)
 8020b62:	4a29      	ldr	r2, [pc, #164]	@ (8020c08 <USBD_LL_Init+0xc4>)
 8020b64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8020b66:	4b27      	ldr	r3, [pc, #156]	@ (8020c04 <USBD_LL_Init+0xc0>)
 8020b68:	2208      	movs	r2, #8
 8020b6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8020b6c:	4b25      	ldr	r3, [pc, #148]	@ (8020c04 <USBD_LL_Init+0xc0>)
 8020b6e:	2202      	movs	r2, #2
 8020b70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020b72:	4b24      	ldr	r3, [pc, #144]	@ (8020c04 <USBD_LL_Init+0xc0>)
 8020b74:	2202      	movs	r2, #2
 8020b76:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8020b78:	4b22      	ldr	r3, [pc, #136]	@ (8020c04 <USBD_LL_Init+0xc0>)
 8020b7a:	2200      	movs	r2, #0
 8020b7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8020b7e:	4b21      	ldr	r3, [pc, #132]	@ (8020c04 <USBD_LL_Init+0xc0>)
 8020b80:	2200      	movs	r2, #0
 8020b82:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8020b84:	4b1f      	ldr	r3, [pc, #124]	@ (8020c04 <USBD_LL_Init+0xc0>)
 8020b86:	2200      	movs	r2, #0
 8020b88:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8020b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8020c04 <USBD_LL_Init+0xc0>)
 8020b8c:	0018      	movs	r0, r3
 8020b8e:	f7f5 ff95 	bl	8016abc <HAL_PCD_Init>
 8020b92:	1e03      	subs	r3, r0, #0
 8020b94:	d001      	beq.n	8020b9a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8020b96:	f7ea fb89 	bl	800b2ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8020b9a:	687a      	ldr	r2, [r7, #4]
 8020b9c:	23b0      	movs	r3, #176	@ 0xb0
 8020b9e:	009b      	lsls	r3, r3, #2
 8020ba0:	58d0      	ldr	r0, [r2, r3]
 8020ba2:	2318      	movs	r3, #24
 8020ba4:	2200      	movs	r2, #0
 8020ba6:	2100      	movs	r1, #0
 8020ba8:	f7f7 fd56 	bl	8018658 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8020bac:	687a      	ldr	r2, [r7, #4]
 8020bae:	23b0      	movs	r3, #176	@ 0xb0
 8020bb0:	009b      	lsls	r3, r3, #2
 8020bb2:	58d0      	ldr	r0, [r2, r3]
 8020bb4:	2358      	movs	r3, #88	@ 0x58
 8020bb6:	2200      	movs	r2, #0
 8020bb8:	2180      	movs	r1, #128	@ 0x80
 8020bba:	f7f7 fd4d 	bl	8018658 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8020bbe:	687a      	ldr	r2, [r7, #4]
 8020bc0:	23b0      	movs	r3, #176	@ 0xb0
 8020bc2:	009b      	lsls	r3, r3, #2
 8020bc4:	58d0      	ldr	r0, [r2, r3]
 8020bc6:	23c0      	movs	r3, #192	@ 0xc0
 8020bc8:	2200      	movs	r2, #0
 8020bca:	2181      	movs	r1, #129	@ 0x81
 8020bcc:	f7f7 fd44 	bl	8018658 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8020bd0:	687a      	ldr	r2, [r7, #4]
 8020bd2:	23b0      	movs	r3, #176	@ 0xb0
 8020bd4:	009b      	lsls	r3, r3, #2
 8020bd6:	58d0      	ldr	r0, [r2, r3]
 8020bd8:	2388      	movs	r3, #136	@ 0x88
 8020bda:	005b      	lsls	r3, r3, #1
 8020bdc:	2200      	movs	r2, #0
 8020bde:	2101      	movs	r1, #1
 8020be0:	f7f7 fd3a 	bl	8018658 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8020be4:	687a      	ldr	r2, [r7, #4]
 8020be6:	23b0      	movs	r3, #176	@ 0xb0
 8020be8:	009b      	lsls	r3, r3, #2
 8020bea:	58d0      	ldr	r0, [r2, r3]
 8020bec:	2380      	movs	r3, #128	@ 0x80
 8020bee:	005b      	lsls	r3, r3, #1
 8020bf0:	2200      	movs	r2, #0
 8020bf2:	2182      	movs	r1, #130	@ 0x82
 8020bf4:	f7f7 fd30 	bl	8018658 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8020bf8:	2300      	movs	r3, #0
}
 8020bfa:	0018      	movs	r0, r3
 8020bfc:	46bd      	mov	sp, r7
 8020bfe:	b002      	add	sp, #8
 8020c00:	bd80      	pop	{r7, pc}
 8020c02:	46c0      	nop			@ (mov r8, r8)
 8020c04:	20002f90 	.word	0x20002f90
 8020c08:	40005c00 	.word	0x40005c00

08020c0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8020c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c0e:	b085      	sub	sp, #20
 8020c10:	af00      	add	r7, sp, #0
 8020c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c14:	210f      	movs	r1, #15
 8020c16:	187b      	adds	r3, r7, r1
 8020c18:	2200      	movs	r2, #0
 8020c1a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020c1c:	260e      	movs	r6, #14
 8020c1e:	19bb      	adds	r3, r7, r6
 8020c20:	2200      	movs	r2, #0
 8020c22:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8020c24:	687a      	ldr	r2, [r7, #4]
 8020c26:	23b0      	movs	r3, #176	@ 0xb0
 8020c28:	009b      	lsls	r3, r3, #2
 8020c2a:	58d3      	ldr	r3, [r2, r3]
 8020c2c:	000d      	movs	r5, r1
 8020c2e:	187c      	adds	r4, r7, r1
 8020c30:	0018      	movs	r0, r3
 8020c32:	f7f6 f843 	bl	8016cbc <HAL_PCD_Start>
 8020c36:	0003      	movs	r3, r0
 8020c38:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020c3a:	19bc      	adds	r4, r7, r6
 8020c3c:	197b      	adds	r3, r7, r5
 8020c3e:	781b      	ldrb	r3, [r3, #0]
 8020c40:	0018      	movs	r0, r3
 8020c42:	f000 f9bc 	bl	8020fbe <USBD_Get_USB_Status>
 8020c46:	0003      	movs	r3, r0
 8020c48:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020c4a:	19bb      	adds	r3, r7, r6
 8020c4c:	781b      	ldrb	r3, [r3, #0]
}
 8020c4e:	0018      	movs	r0, r3
 8020c50:	46bd      	mov	sp, r7
 8020c52:	b005      	add	sp, #20
 8020c54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020c56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8020c56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c58:	b085      	sub	sp, #20
 8020c5a:	af00      	add	r7, sp, #0
 8020c5c:	6078      	str	r0, [r7, #4]
 8020c5e:	000c      	movs	r4, r1
 8020c60:	0010      	movs	r0, r2
 8020c62:	0019      	movs	r1, r3
 8020c64:	1cfb      	adds	r3, r7, #3
 8020c66:	1c22      	adds	r2, r4, #0
 8020c68:	701a      	strb	r2, [r3, #0]
 8020c6a:	1cbb      	adds	r3, r7, #2
 8020c6c:	1c02      	adds	r2, r0, #0
 8020c6e:	701a      	strb	r2, [r3, #0]
 8020c70:	003b      	movs	r3, r7
 8020c72:	1c0a      	adds	r2, r1, #0
 8020c74:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020c76:	260f      	movs	r6, #15
 8020c78:	19bb      	adds	r3, r7, r6
 8020c7a:	2200      	movs	r2, #0
 8020c7c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020c7e:	250e      	movs	r5, #14
 8020c80:	197b      	adds	r3, r7, r5
 8020c82:	2200      	movs	r2, #0
 8020c84:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8020c86:	687a      	ldr	r2, [r7, #4]
 8020c88:	23b0      	movs	r3, #176	@ 0xb0
 8020c8a:	009b      	lsls	r3, r3, #2
 8020c8c:	58d0      	ldr	r0, [r2, r3]
 8020c8e:	19bc      	adds	r4, r7, r6
 8020c90:	1cbb      	adds	r3, r7, #2
 8020c92:	781d      	ldrb	r5, [r3, #0]
 8020c94:	003b      	movs	r3, r7
 8020c96:	881a      	ldrh	r2, [r3, #0]
 8020c98:	1cfb      	adds	r3, r7, #3
 8020c9a:	7819      	ldrb	r1, [r3, #0]
 8020c9c:	002b      	movs	r3, r5
 8020c9e:	f7f6 f9a2 	bl	8016fe6 <HAL_PCD_EP_Open>
 8020ca2:	0003      	movs	r3, r0
 8020ca4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020ca6:	250e      	movs	r5, #14
 8020ca8:	197c      	adds	r4, r7, r5
 8020caa:	19bb      	adds	r3, r7, r6
 8020cac:	781b      	ldrb	r3, [r3, #0]
 8020cae:	0018      	movs	r0, r3
 8020cb0:	f000 f985 	bl	8020fbe <USBD_Get_USB_Status>
 8020cb4:	0003      	movs	r3, r0
 8020cb6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020cb8:	197b      	adds	r3, r7, r5
 8020cba:	781b      	ldrb	r3, [r3, #0]
}
 8020cbc:	0018      	movs	r0, r3
 8020cbe:	46bd      	mov	sp, r7
 8020cc0:	b005      	add	sp, #20
 8020cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020cc4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020cc6:	b085      	sub	sp, #20
 8020cc8:	af00      	add	r7, sp, #0
 8020cca:	6078      	str	r0, [r7, #4]
 8020ccc:	000a      	movs	r2, r1
 8020cce:	1cfb      	adds	r3, r7, #3
 8020cd0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020cd2:	210f      	movs	r1, #15
 8020cd4:	187b      	adds	r3, r7, r1
 8020cd6:	2200      	movs	r2, #0
 8020cd8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020cda:	260e      	movs	r6, #14
 8020cdc:	19bb      	adds	r3, r7, r6
 8020cde:	2200      	movs	r2, #0
 8020ce0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8020ce2:	687a      	ldr	r2, [r7, #4]
 8020ce4:	23b0      	movs	r3, #176	@ 0xb0
 8020ce6:	009b      	lsls	r3, r3, #2
 8020ce8:	58d2      	ldr	r2, [r2, r3]
 8020cea:	000d      	movs	r5, r1
 8020cec:	187c      	adds	r4, r7, r1
 8020cee:	1cfb      	adds	r3, r7, #3
 8020cf0:	781b      	ldrb	r3, [r3, #0]
 8020cf2:	0019      	movs	r1, r3
 8020cf4:	0010      	movs	r0, r2
 8020cf6:	f7f6 f9e5 	bl	80170c4 <HAL_PCD_EP_Close>
 8020cfa:	0003      	movs	r3, r0
 8020cfc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020cfe:	19bc      	adds	r4, r7, r6
 8020d00:	197b      	adds	r3, r7, r5
 8020d02:	781b      	ldrb	r3, [r3, #0]
 8020d04:	0018      	movs	r0, r3
 8020d06:	f000 f95a 	bl	8020fbe <USBD_Get_USB_Status>
 8020d0a:	0003      	movs	r3, r0
 8020d0c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020d0e:	19bb      	adds	r3, r7, r6
 8020d10:	781b      	ldrb	r3, [r3, #0]
}
 8020d12:	0018      	movs	r0, r3
 8020d14:	46bd      	mov	sp, r7
 8020d16:	b005      	add	sp, #20
 8020d18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020d1a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d1c:	b085      	sub	sp, #20
 8020d1e:	af00      	add	r7, sp, #0
 8020d20:	6078      	str	r0, [r7, #4]
 8020d22:	000a      	movs	r2, r1
 8020d24:	1cfb      	adds	r3, r7, #3
 8020d26:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d28:	210f      	movs	r1, #15
 8020d2a:	187b      	adds	r3, r7, r1
 8020d2c:	2200      	movs	r2, #0
 8020d2e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d30:	260e      	movs	r6, #14
 8020d32:	19bb      	adds	r3, r7, r6
 8020d34:	2200      	movs	r2, #0
 8020d36:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8020d38:	687a      	ldr	r2, [r7, #4]
 8020d3a:	23b0      	movs	r3, #176	@ 0xb0
 8020d3c:	009b      	lsls	r3, r3, #2
 8020d3e:	58d2      	ldr	r2, [r2, r3]
 8020d40:	000d      	movs	r5, r1
 8020d42:	187c      	adds	r4, r7, r1
 8020d44:	1cfb      	adds	r3, r7, #3
 8020d46:	781b      	ldrb	r3, [r3, #0]
 8020d48:	0019      	movs	r1, r3
 8020d4a:	0010      	movs	r0, r2
 8020d4c:	f7f6 fa97 	bl	801727e <HAL_PCD_EP_SetStall>
 8020d50:	0003      	movs	r3, r0
 8020d52:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020d54:	19bc      	adds	r4, r7, r6
 8020d56:	197b      	adds	r3, r7, r5
 8020d58:	781b      	ldrb	r3, [r3, #0]
 8020d5a:	0018      	movs	r0, r3
 8020d5c:	f000 f92f 	bl	8020fbe <USBD_Get_USB_Status>
 8020d60:	0003      	movs	r3, r0
 8020d62:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020d64:	19bb      	adds	r3, r7, r6
 8020d66:	781b      	ldrb	r3, [r3, #0]
}
 8020d68:	0018      	movs	r0, r3
 8020d6a:	46bd      	mov	sp, r7
 8020d6c:	b005      	add	sp, #20
 8020d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020d70 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d72:	b085      	sub	sp, #20
 8020d74:	af00      	add	r7, sp, #0
 8020d76:	6078      	str	r0, [r7, #4]
 8020d78:	000a      	movs	r2, r1
 8020d7a:	1cfb      	adds	r3, r7, #3
 8020d7c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d7e:	210f      	movs	r1, #15
 8020d80:	187b      	adds	r3, r7, r1
 8020d82:	2200      	movs	r2, #0
 8020d84:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d86:	260e      	movs	r6, #14
 8020d88:	19bb      	adds	r3, r7, r6
 8020d8a:	2200      	movs	r2, #0
 8020d8c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8020d8e:	687a      	ldr	r2, [r7, #4]
 8020d90:	23b0      	movs	r3, #176	@ 0xb0
 8020d92:	009b      	lsls	r3, r3, #2
 8020d94:	58d2      	ldr	r2, [r2, r3]
 8020d96:	000d      	movs	r5, r1
 8020d98:	187c      	adds	r4, r7, r1
 8020d9a:	1cfb      	adds	r3, r7, #3
 8020d9c:	781b      	ldrb	r3, [r3, #0]
 8020d9e:	0019      	movs	r1, r3
 8020da0:	0010      	movs	r0, r2
 8020da2:	f7f6 fac8 	bl	8017336 <HAL_PCD_EP_ClrStall>
 8020da6:	0003      	movs	r3, r0
 8020da8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020daa:	19bc      	adds	r4, r7, r6
 8020dac:	197b      	adds	r3, r7, r5
 8020dae:	781b      	ldrb	r3, [r3, #0]
 8020db0:	0018      	movs	r0, r3
 8020db2:	f000 f904 	bl	8020fbe <USBD_Get_USB_Status>
 8020db6:	0003      	movs	r3, r0
 8020db8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020dba:	19bb      	adds	r3, r7, r6
 8020dbc:	781b      	ldrb	r3, [r3, #0]
}
 8020dbe:	0018      	movs	r0, r3
 8020dc0:	46bd      	mov	sp, r7
 8020dc2:	b005      	add	sp, #20
 8020dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020dc6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020dc6:	b580      	push	{r7, lr}
 8020dc8:	b084      	sub	sp, #16
 8020dca:	af00      	add	r7, sp, #0
 8020dcc:	6078      	str	r0, [r7, #4]
 8020dce:	000a      	movs	r2, r1
 8020dd0:	1cfb      	adds	r3, r7, #3
 8020dd2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8020dd4:	687a      	ldr	r2, [r7, #4]
 8020dd6:	23b0      	movs	r3, #176	@ 0xb0
 8020dd8:	009b      	lsls	r3, r3, #2
 8020dda:	58d3      	ldr	r3, [r2, r3]
 8020ddc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8020dde:	1cfb      	adds	r3, r7, #3
 8020de0:	781b      	ldrb	r3, [r3, #0]
 8020de2:	b25b      	sxtb	r3, r3
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	da0d      	bge.n	8020e04 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8020de8:	1cfb      	adds	r3, r7, #3
 8020dea:	781b      	ldrb	r3, [r3, #0]
 8020dec:	227f      	movs	r2, #127	@ 0x7f
 8020dee:	4013      	ands	r3, r2
 8020df0:	68f9      	ldr	r1, [r7, #12]
 8020df2:	1c5a      	adds	r2, r3, #1
 8020df4:	0013      	movs	r3, r2
 8020df6:	009b      	lsls	r3, r3, #2
 8020df8:	189b      	adds	r3, r3, r2
 8020dfa:	00db      	lsls	r3, r3, #3
 8020dfc:	18cb      	adds	r3, r1, r3
 8020dfe:	3302      	adds	r3, #2
 8020e00:	781b      	ldrb	r3, [r3, #0]
 8020e02:	e00d      	b.n	8020e20 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8020e04:	1cfb      	adds	r3, r7, #3
 8020e06:	781b      	ldrb	r3, [r3, #0]
 8020e08:	227f      	movs	r2, #127	@ 0x7f
 8020e0a:	401a      	ands	r2, r3
 8020e0c:	68f8      	ldr	r0, [r7, #12]
 8020e0e:	23b5      	movs	r3, #181	@ 0xb5
 8020e10:	0059      	lsls	r1, r3, #1
 8020e12:	0013      	movs	r3, r2
 8020e14:	009b      	lsls	r3, r3, #2
 8020e16:	189b      	adds	r3, r3, r2
 8020e18:	00db      	lsls	r3, r3, #3
 8020e1a:	18c3      	adds	r3, r0, r3
 8020e1c:	185b      	adds	r3, r3, r1
 8020e1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020e20:	0018      	movs	r0, r3
 8020e22:	46bd      	mov	sp, r7
 8020e24:	b004      	add	sp, #16
 8020e26:	bd80      	pop	{r7, pc}

08020e28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8020e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e2a:	b085      	sub	sp, #20
 8020e2c:	af00      	add	r7, sp, #0
 8020e2e:	6078      	str	r0, [r7, #4]
 8020e30:	000a      	movs	r2, r1
 8020e32:	1cfb      	adds	r3, r7, #3
 8020e34:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020e36:	210f      	movs	r1, #15
 8020e38:	187b      	adds	r3, r7, r1
 8020e3a:	2200      	movs	r2, #0
 8020e3c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020e3e:	260e      	movs	r6, #14
 8020e40:	19bb      	adds	r3, r7, r6
 8020e42:	2200      	movs	r2, #0
 8020e44:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8020e46:	687a      	ldr	r2, [r7, #4]
 8020e48:	23b0      	movs	r3, #176	@ 0xb0
 8020e4a:	009b      	lsls	r3, r3, #2
 8020e4c:	58d2      	ldr	r2, [r2, r3]
 8020e4e:	000d      	movs	r5, r1
 8020e50:	187c      	adds	r4, r7, r1
 8020e52:	1cfb      	adds	r3, r7, #3
 8020e54:	781b      	ldrb	r3, [r3, #0]
 8020e56:	0019      	movs	r1, r3
 8020e58:	0010      	movs	r0, r2
 8020e5a:	f7f6 f899 	bl	8016f90 <HAL_PCD_SetAddress>
 8020e5e:	0003      	movs	r3, r0
 8020e60:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020e62:	19bc      	adds	r4, r7, r6
 8020e64:	197b      	adds	r3, r7, r5
 8020e66:	781b      	ldrb	r3, [r3, #0]
 8020e68:	0018      	movs	r0, r3
 8020e6a:	f000 f8a8 	bl	8020fbe <USBD_Get_USB_Status>
 8020e6e:	0003      	movs	r3, r0
 8020e70:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020e72:	19bb      	adds	r3, r7, r6
 8020e74:	781b      	ldrb	r3, [r3, #0]
}
 8020e76:	0018      	movs	r0, r3
 8020e78:	46bd      	mov	sp, r7
 8020e7a:	b005      	add	sp, #20
 8020e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020e7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8020e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e80:	b087      	sub	sp, #28
 8020e82:	af00      	add	r7, sp, #0
 8020e84:	60f8      	str	r0, [r7, #12]
 8020e86:	0008      	movs	r0, r1
 8020e88:	607a      	str	r2, [r7, #4]
 8020e8a:	0019      	movs	r1, r3
 8020e8c:	230b      	movs	r3, #11
 8020e8e:	18fb      	adds	r3, r7, r3
 8020e90:	1c02      	adds	r2, r0, #0
 8020e92:	701a      	strb	r2, [r3, #0]
 8020e94:	2408      	movs	r4, #8
 8020e96:	193b      	adds	r3, r7, r4
 8020e98:	1c0a      	adds	r2, r1, #0
 8020e9a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020e9c:	2117      	movs	r1, #23
 8020e9e:	187b      	adds	r3, r7, r1
 8020ea0:	2200      	movs	r2, #0
 8020ea2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020ea4:	2516      	movs	r5, #22
 8020ea6:	197b      	adds	r3, r7, r5
 8020ea8:	2200      	movs	r2, #0
 8020eaa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8020eac:	68fa      	ldr	r2, [r7, #12]
 8020eae:	23b0      	movs	r3, #176	@ 0xb0
 8020eb0:	009b      	lsls	r3, r3, #2
 8020eb2:	58d0      	ldr	r0, [r2, r3]
 8020eb4:	193b      	adds	r3, r7, r4
 8020eb6:	881d      	ldrh	r5, [r3, #0]
 8020eb8:	000e      	movs	r6, r1
 8020eba:	187c      	adds	r4, r7, r1
 8020ebc:	687a      	ldr	r2, [r7, #4]
 8020ebe:	230b      	movs	r3, #11
 8020ec0:	18fb      	adds	r3, r7, r3
 8020ec2:	7819      	ldrb	r1, [r3, #0]
 8020ec4:	002b      	movs	r3, r5
 8020ec6:	f7f6 f99e 	bl	8017206 <HAL_PCD_EP_Transmit>
 8020eca:	0003      	movs	r3, r0
 8020ecc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020ece:	2516      	movs	r5, #22
 8020ed0:	197c      	adds	r4, r7, r5
 8020ed2:	19bb      	adds	r3, r7, r6
 8020ed4:	781b      	ldrb	r3, [r3, #0]
 8020ed6:	0018      	movs	r0, r3
 8020ed8:	f000 f871 	bl	8020fbe <USBD_Get_USB_Status>
 8020edc:	0003      	movs	r3, r0
 8020ede:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020ee0:	197b      	adds	r3, r7, r5
 8020ee2:	781b      	ldrb	r3, [r3, #0]
}
 8020ee4:	0018      	movs	r0, r3
 8020ee6:	46bd      	mov	sp, r7
 8020ee8:	b007      	add	sp, #28
 8020eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020eec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8020eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020eee:	b087      	sub	sp, #28
 8020ef0:	af00      	add	r7, sp, #0
 8020ef2:	60f8      	str	r0, [r7, #12]
 8020ef4:	0008      	movs	r0, r1
 8020ef6:	607a      	str	r2, [r7, #4]
 8020ef8:	0019      	movs	r1, r3
 8020efa:	230b      	movs	r3, #11
 8020efc:	18fb      	adds	r3, r7, r3
 8020efe:	1c02      	adds	r2, r0, #0
 8020f00:	701a      	strb	r2, [r3, #0]
 8020f02:	2408      	movs	r4, #8
 8020f04:	193b      	adds	r3, r7, r4
 8020f06:	1c0a      	adds	r2, r1, #0
 8020f08:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020f0a:	2117      	movs	r1, #23
 8020f0c:	187b      	adds	r3, r7, r1
 8020f0e:	2200      	movs	r2, #0
 8020f10:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020f12:	2516      	movs	r5, #22
 8020f14:	197b      	adds	r3, r7, r5
 8020f16:	2200      	movs	r2, #0
 8020f18:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8020f1a:	68fa      	ldr	r2, [r7, #12]
 8020f1c:	23b0      	movs	r3, #176	@ 0xb0
 8020f1e:	009b      	lsls	r3, r3, #2
 8020f20:	58d0      	ldr	r0, [r2, r3]
 8020f22:	193b      	adds	r3, r7, r4
 8020f24:	881d      	ldrh	r5, [r3, #0]
 8020f26:	000e      	movs	r6, r1
 8020f28:	187c      	adds	r4, r7, r1
 8020f2a:	687a      	ldr	r2, [r7, #4]
 8020f2c:	230b      	movs	r3, #11
 8020f2e:	18fb      	adds	r3, r7, r3
 8020f30:	7819      	ldrb	r1, [r3, #0]
 8020f32:	002b      	movs	r3, r5
 8020f34:	f7f6 f917 	bl	8017166 <HAL_PCD_EP_Receive>
 8020f38:	0003      	movs	r3, r0
 8020f3a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020f3c:	2516      	movs	r5, #22
 8020f3e:	197c      	adds	r4, r7, r5
 8020f40:	19bb      	adds	r3, r7, r6
 8020f42:	781b      	ldrb	r3, [r3, #0]
 8020f44:	0018      	movs	r0, r3
 8020f46:	f000 f83a 	bl	8020fbe <USBD_Get_USB_Status>
 8020f4a:	0003      	movs	r3, r0
 8020f4c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8020f4e:	197b      	adds	r3, r7, r5
 8020f50:	781b      	ldrb	r3, [r3, #0]
}
 8020f52:	0018      	movs	r0, r3
 8020f54:	46bd      	mov	sp, r7
 8020f56:	b007      	add	sp, #28
 8020f58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020f5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020f5a:	b580      	push	{r7, lr}
 8020f5c:	b082      	sub	sp, #8
 8020f5e:	af00      	add	r7, sp, #0
 8020f60:	6078      	str	r0, [r7, #4]
 8020f62:	000a      	movs	r2, r1
 8020f64:	1cfb      	adds	r3, r7, #3
 8020f66:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8020f68:	687a      	ldr	r2, [r7, #4]
 8020f6a:	23b0      	movs	r3, #176	@ 0xb0
 8020f6c:	009b      	lsls	r3, r3, #2
 8020f6e:	58d2      	ldr	r2, [r2, r3]
 8020f70:	1cfb      	adds	r3, r7, #3
 8020f72:	781b      	ldrb	r3, [r3, #0]
 8020f74:	0019      	movs	r1, r3
 8020f76:	0010      	movs	r0, r2
 8020f78:	f7f6 f92c 	bl	80171d4 <HAL_PCD_EP_GetRxCount>
 8020f7c:	0003      	movs	r3, r0
}
 8020f7e:	0018      	movs	r0, r3
 8020f80:	46bd      	mov	sp, r7
 8020f82:	b002      	add	sp, #8
 8020f84:	bd80      	pop	{r7, pc}
	...

08020f88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8020f88:	b580      	push	{r7, lr}
 8020f8a:	b082      	sub	sp, #8
 8020f8c:	af00      	add	r7, sp, #0
 8020f8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8020f90:	4b02      	ldr	r3, [pc, #8]	@ (8020f9c <USBD_static_malloc+0x14>)
}
 8020f92:	0018      	movs	r0, r3
 8020f94:	46bd      	mov	sp, r7
 8020f96:	b002      	add	sp, #8
 8020f98:	bd80      	pop	{r7, pc}
 8020f9a:	46c0      	nop			@ (mov r8, r8)
 8020f9c:	20003284 	.word	0x20003284

08020fa0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8020fa0:	b580      	push	{r7, lr}
 8020fa2:	b082      	sub	sp, #8
 8020fa4:	af00      	add	r7, sp, #0
 8020fa6:	6078      	str	r0, [r7, #4]

}
 8020fa8:	46c0      	nop			@ (mov r8, r8)
 8020faa:	46bd      	mov	sp, r7
 8020fac:	b002      	add	sp, #8
 8020fae:	bd80      	pop	{r7, pc}

08020fb0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8020fb0:	b580      	push	{r7, lr}
 8020fb2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8020fb4:	f7ea f82a 	bl	800b00c <SystemClock_Config>
}
 8020fb8:	46c0      	nop			@ (mov r8, r8)
 8020fba:	46bd      	mov	sp, r7
 8020fbc:	bd80      	pop	{r7, pc}

08020fbe <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8020fbe:	b580      	push	{r7, lr}
 8020fc0:	b084      	sub	sp, #16
 8020fc2:	af00      	add	r7, sp, #0
 8020fc4:	0002      	movs	r2, r0
 8020fc6:	1dfb      	adds	r3, r7, #7
 8020fc8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020fca:	230f      	movs	r3, #15
 8020fcc:	18fb      	adds	r3, r7, r3
 8020fce:	2200      	movs	r2, #0
 8020fd0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8020fd2:	1dfb      	adds	r3, r7, #7
 8020fd4:	781b      	ldrb	r3, [r3, #0]
 8020fd6:	2b03      	cmp	r3, #3
 8020fd8:	d017      	beq.n	802100a <USBD_Get_USB_Status+0x4c>
 8020fda:	dc1b      	bgt.n	8021014 <USBD_Get_USB_Status+0x56>
 8020fdc:	2b02      	cmp	r3, #2
 8020fde:	d00f      	beq.n	8021000 <USBD_Get_USB_Status+0x42>
 8020fe0:	dc18      	bgt.n	8021014 <USBD_Get_USB_Status+0x56>
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	d002      	beq.n	8020fec <USBD_Get_USB_Status+0x2e>
 8020fe6:	2b01      	cmp	r3, #1
 8020fe8:	d005      	beq.n	8020ff6 <USBD_Get_USB_Status+0x38>
 8020fea:	e013      	b.n	8021014 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8020fec:	230f      	movs	r3, #15
 8020fee:	18fb      	adds	r3, r7, r3
 8020ff0:	2200      	movs	r2, #0
 8020ff2:	701a      	strb	r2, [r3, #0]
    break;
 8020ff4:	e013      	b.n	802101e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8020ff6:	230f      	movs	r3, #15
 8020ff8:	18fb      	adds	r3, r7, r3
 8020ffa:	2202      	movs	r2, #2
 8020ffc:	701a      	strb	r2, [r3, #0]
    break;
 8020ffe:	e00e      	b.n	802101e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8021000:	230f      	movs	r3, #15
 8021002:	18fb      	adds	r3, r7, r3
 8021004:	2201      	movs	r2, #1
 8021006:	701a      	strb	r2, [r3, #0]
    break;
 8021008:	e009      	b.n	802101e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 802100a:	230f      	movs	r3, #15
 802100c:	18fb      	adds	r3, r7, r3
 802100e:	2202      	movs	r2, #2
 8021010:	701a      	strb	r2, [r3, #0]
    break;
 8021012:	e004      	b.n	802101e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8021014:	230f      	movs	r3, #15
 8021016:	18fb      	adds	r3, r7, r3
 8021018:	2202      	movs	r2, #2
 802101a:	701a      	strb	r2, [r3, #0]
    break;
 802101c:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 802101e:	230f      	movs	r3, #15
 8021020:	18fb      	adds	r3, r7, r3
 8021022:	781b      	ldrb	r3, [r3, #0]
}
 8021024:	0018      	movs	r0, r3
 8021026:	46bd      	mov	sp, r7
 8021028:	b004      	add	sp, #16
 802102a:	bd80      	pop	{r7, pc}

0802102c <arm_cfft_radix4by2_q31>:
 802102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802102e:	465f      	mov	r7, fp
 8021030:	4656      	mov	r6, sl
 8021032:	464d      	mov	r5, r9
 8021034:	4644      	mov	r4, r8
 8021036:	000b      	movs	r3, r1
 8021038:	b4f0      	push	{r4, r5, r6, r7}
 802103a:	085b      	lsrs	r3, r3, #1
 802103c:	b08f      	sub	sp, #60	@ 0x3c
 802103e:	910a      	str	r1, [sp, #40]	@ 0x28
 8021040:	0007      	movs	r7, r0
 8021042:	9009      	str	r0, [sp, #36]	@ 0x24
 8021044:	0011      	movs	r1, r2
 8021046:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021048:	930c      	str	r3, [sp, #48]	@ 0x30
 802104a:	2b00      	cmp	r3, #0
 802104c:	d100      	bne.n	8021050 <arm_cfft_radix4by2_q31+0x24>
 802104e:	e0a0      	b.n	8021192 <arm_cfft_radix4by2_q31+0x166>
 8021050:	0002      	movs	r2, r0
 8021052:	00db      	lsls	r3, r3, #3
 8021054:	3204      	adds	r2, #4
 8021056:	4691      	mov	r9, r2
 8021058:	4698      	mov	r8, r3
 802105a:	000a      	movs	r2, r1
 802105c:	464e      	mov	r6, r9
 802105e:	4442      	add	r2, r8
 8021060:	4699      	mov	r9, r3
 8021062:	4688      	mov	r8, r1
 8021064:	9208      	str	r2, [sp, #32]
 8021066:	900d      	str	r0, [sp, #52]	@ 0x34
 8021068:	4643      	mov	r3, r8
 802106a:	681b      	ldr	r3, [r3, #0]
 802106c:	469b      	mov	fp, r3
 802106e:	4643      	mov	r3, r8
 8021070:	685b      	ldr	r3, [r3, #4]
 8021072:	469a      	mov	sl, r3
 8021074:	683b      	ldr	r3, [r7, #0]
 8021076:	109c      	asrs	r4, r3, #2
 8021078:	464b      	mov	r3, r9
 802107a:	58fb      	ldr	r3, [r7, r3]
 802107c:	109a      	asrs	r2, r3, #2
 802107e:	18a3      	adds	r3, r4, r2
 8021080:	603b      	str	r3, [r7, #0]
 8021082:	6833      	ldr	r3, [r6, #0]
 8021084:	1aa4      	subs	r4, r4, r2
 8021086:	109d      	asrs	r5, r3, #2
 8021088:	464b      	mov	r3, r9
 802108a:	58f3      	ldr	r3, [r6, r3]
 802108c:	17e2      	asrs	r2, r4, #31
 802108e:	109b      	asrs	r3, r3, #2
 8021090:	18e9      	adds	r1, r5, r3
 8021092:	6031      	str	r1, [r6, #0]
 8021094:	0011      	movs	r1, r2
 8021096:	465a      	mov	r2, fp
 8021098:	17d2      	asrs	r2, r2, #31
 802109a:	0010      	movs	r0, r2
 802109c:	4652      	mov	r2, sl
 802109e:	1aed      	subs	r5, r5, r3
 80210a0:	17eb      	asrs	r3, r5, #31
 80210a2:	17d2      	asrs	r2, r2, #31
 80210a4:	9307      	str	r3, [sp, #28]
 80210a6:	9204      	str	r2, [sp, #16]
 80210a8:	0003      	movs	r3, r0
 80210aa:	465a      	mov	r2, fp
 80210ac:	9006      	str	r0, [sp, #24]
 80210ae:	0020      	movs	r0, r4
 80210b0:	9105      	str	r1, [sp, #20]
 80210b2:	f7df fa85 	bl	80005c0 <__aeabi_lmul>
 80210b6:	2280      	movs	r2, #128	@ 0x80
 80210b8:	2300      	movs	r3, #0
 80210ba:	0612      	lsls	r2, r2, #24
 80210bc:	1880      	adds	r0, r0, r2
 80210be:	4159      	adcs	r1, r3
 80210c0:	2300      	movs	r3, #0
 80210c2:	9101      	str	r1, [sp, #4]
 80210c4:	9300      	str	r3, [sp, #0]
 80210c6:	4652      	mov	r2, sl
 80210c8:	9b04      	ldr	r3, [sp, #16]
 80210ca:	0028      	movs	r0, r5
 80210cc:	17e9      	asrs	r1, r5, #31
 80210ce:	f7df fa77 	bl	80005c0 <__aeabi_lmul>
 80210d2:	9a00      	ldr	r2, [sp, #0]
 80210d4:	9b01      	ldr	r3, [sp, #4]
 80210d6:	1880      	adds	r0, r0, r2
 80210d8:	4159      	adcs	r1, r3
 80210da:	2280      	movs	r2, #128	@ 0x80
 80210dc:	2300      	movs	r3, #0
 80210de:	0612      	lsls	r2, r2, #24
 80210e0:	1880      	adds	r0, r0, r2
 80210e2:	4159      	adcs	r1, r3
 80210e4:	464a      	mov	r2, r9
 80210e6:	004b      	lsls	r3, r1, #1
 80210e8:	50bb      	str	r3, [r7, r2]
 80210ea:	4658      	mov	r0, fp
 80210ec:	002a      	movs	r2, r5
 80210ee:	9b07      	ldr	r3, [sp, #28]
 80210f0:	9906      	ldr	r1, [sp, #24]
 80210f2:	f7df fa65 	bl	80005c0 <__aeabi_lmul>
 80210f6:	2280      	movs	r2, #128	@ 0x80
 80210f8:	2300      	movs	r3, #0
 80210fa:	0612      	lsls	r2, r2, #24
 80210fc:	1880      	adds	r0, r0, r2
 80210fe:	4159      	adcs	r1, r3
 8021100:	2000      	movs	r0, #0
 8021102:	9103      	str	r1, [sp, #12]
 8021104:	9002      	str	r0, [sp, #8]
 8021106:	4652      	mov	r2, sl
 8021108:	9b04      	ldr	r3, [sp, #16]
 802110a:	0020      	movs	r0, r4
 802110c:	9905      	ldr	r1, [sp, #20]
 802110e:	f7df fa57 	bl	80005c0 <__aeabi_lmul>
 8021112:	9a02      	ldr	r2, [sp, #8]
 8021114:	9b03      	ldr	r3, [sp, #12]
 8021116:	1a12      	subs	r2, r2, r0
 8021118:	418b      	sbcs	r3, r1
 802111a:	2080      	movs	r0, #128	@ 0x80
 802111c:	2100      	movs	r1, #0
 802111e:	0600      	lsls	r0, r0, #24
 8021120:	1812      	adds	r2, r2, r0
 8021122:	414b      	adcs	r3, r1
 8021124:	464a      	mov	r2, r9
 8021126:	005b      	lsls	r3, r3, #1
 8021128:	50b3      	str	r3, [r6, r2]
 802112a:	2308      	movs	r3, #8
 802112c:	469c      	mov	ip, r3
 802112e:	9b08      	ldr	r3, [sp, #32]
 8021130:	44e0      	add	r8, ip
 8021132:	3708      	adds	r7, #8
 8021134:	3608      	adds	r6, #8
 8021136:	4598      	cmp	r8, r3
 8021138:	d196      	bne.n	8021068 <arm_cfft_radix4by2_q31+0x3c>
 802113a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802113c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802113e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8021140:	2302      	movs	r3, #2
 8021142:	003a      	movs	r2, r7
 8021144:	0029      	movs	r1, r5
 8021146:	0020      	movs	r0, r4
 8021148:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 802114a:	f000 f957 	bl	80213fc <arm_radix4_butterfly_q31>
 802114e:	46a4      	mov	ip, r4
 8021150:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021152:	2302      	movs	r3, #2
 8021154:	0088      	lsls	r0, r1, #2
 8021156:	4460      	add	r0, ip
 8021158:	003a      	movs	r2, r7
 802115a:	0029      	movs	r1, r5
 802115c:	f000 f94e 	bl	80213fc <arm_radix4_butterfly_q31>
 8021160:	46a4      	mov	ip, r4
 8021162:	0128      	lsls	r0, r5, #4
 8021164:	4460      	add	r0, ip
 8021166:	6833      	ldr	r3, [r6, #0]
 8021168:	005b      	lsls	r3, r3, #1
 802116a:	6033      	str	r3, [r6, #0]
 802116c:	6873      	ldr	r3, [r6, #4]
 802116e:	005b      	lsls	r3, r3, #1
 8021170:	6073      	str	r3, [r6, #4]
 8021172:	68b3      	ldr	r3, [r6, #8]
 8021174:	005b      	lsls	r3, r3, #1
 8021176:	60b3      	str	r3, [r6, #8]
 8021178:	68f3      	ldr	r3, [r6, #12]
 802117a:	005b      	lsls	r3, r3, #1
 802117c:	60f3      	str	r3, [r6, #12]
 802117e:	3610      	adds	r6, #16
 8021180:	42b0      	cmp	r0, r6
 8021182:	d1f0      	bne.n	8021166 <arm_cfft_radix4by2_q31+0x13a>
 8021184:	b00f      	add	sp, #60	@ 0x3c
 8021186:	bc3c      	pop	{r2, r3, r4, r5}
 8021188:	4690      	mov	r8, r2
 802118a:	4699      	mov	r9, r3
 802118c:	46a2      	mov	sl, r4
 802118e:	46ab      	mov	fp, r5
 8021190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021192:	2302      	movs	r3, #2
 8021194:	2100      	movs	r1, #0
 8021196:	0015      	movs	r5, r2
 8021198:	f000 f930 	bl	80213fc <arm_radix4_butterfly_q31>
 802119c:	46bc      	mov	ip, r7
 802119e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80211a0:	002a      	movs	r2, r5
 80211a2:	0098      	lsls	r0, r3, #2
 80211a4:	4460      	add	r0, ip
 80211a6:	2302      	movs	r3, #2
 80211a8:	2100      	movs	r1, #0
 80211aa:	f000 f927 	bl	80213fc <arm_radix4_butterfly_q31>
 80211ae:	e7e9      	b.n	8021184 <arm_cfft_radix4by2_q31+0x158>

080211b0 <arm_cfft_radix4by2_inverse_q31>:
 80211b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80211b2:	465f      	mov	r7, fp
 80211b4:	4656      	mov	r6, sl
 80211b6:	464d      	mov	r5, r9
 80211b8:	4644      	mov	r4, r8
 80211ba:	000b      	movs	r3, r1
 80211bc:	b4f0      	push	{r4, r5, r6, r7}
 80211be:	085b      	lsrs	r3, r3, #1
 80211c0:	b08f      	sub	sp, #60	@ 0x3c
 80211c2:	910a      	str	r1, [sp, #40]	@ 0x28
 80211c4:	0007      	movs	r7, r0
 80211c6:	9009      	str	r0, [sp, #36]	@ 0x24
 80211c8:	0011      	movs	r1, r2
 80211ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80211cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80211ce:	2b00      	cmp	r3, #0
 80211d0:	d100      	bne.n	80211d4 <arm_cfft_radix4by2_inverse_q31+0x24>
 80211d2:	e0a0      	b.n	8021316 <arm_cfft_radix4by2_inverse_q31+0x166>
 80211d4:	0002      	movs	r2, r0
 80211d6:	00db      	lsls	r3, r3, #3
 80211d8:	3204      	adds	r2, #4
 80211da:	4691      	mov	r9, r2
 80211dc:	4698      	mov	r8, r3
 80211de:	000a      	movs	r2, r1
 80211e0:	464e      	mov	r6, r9
 80211e2:	4442      	add	r2, r8
 80211e4:	4699      	mov	r9, r3
 80211e6:	4688      	mov	r8, r1
 80211e8:	9208      	str	r2, [sp, #32]
 80211ea:	900d      	str	r0, [sp, #52]	@ 0x34
 80211ec:	4643      	mov	r3, r8
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	469b      	mov	fp, r3
 80211f2:	4643      	mov	r3, r8
 80211f4:	685b      	ldr	r3, [r3, #4]
 80211f6:	469a      	mov	sl, r3
 80211f8:	683b      	ldr	r3, [r7, #0]
 80211fa:	109c      	asrs	r4, r3, #2
 80211fc:	464b      	mov	r3, r9
 80211fe:	58fb      	ldr	r3, [r7, r3]
 8021200:	109a      	asrs	r2, r3, #2
 8021202:	18a3      	adds	r3, r4, r2
 8021204:	603b      	str	r3, [r7, #0]
 8021206:	6833      	ldr	r3, [r6, #0]
 8021208:	1aa4      	subs	r4, r4, r2
 802120a:	109d      	asrs	r5, r3, #2
 802120c:	464b      	mov	r3, r9
 802120e:	58f3      	ldr	r3, [r6, r3]
 8021210:	17e2      	asrs	r2, r4, #31
 8021212:	109b      	asrs	r3, r3, #2
 8021214:	18e9      	adds	r1, r5, r3
 8021216:	6031      	str	r1, [r6, #0]
 8021218:	0011      	movs	r1, r2
 802121a:	465a      	mov	r2, fp
 802121c:	17d2      	asrs	r2, r2, #31
 802121e:	0010      	movs	r0, r2
 8021220:	4652      	mov	r2, sl
 8021222:	1aed      	subs	r5, r5, r3
 8021224:	17eb      	asrs	r3, r5, #31
 8021226:	17d2      	asrs	r2, r2, #31
 8021228:	9307      	str	r3, [sp, #28]
 802122a:	9204      	str	r2, [sp, #16]
 802122c:	0003      	movs	r3, r0
 802122e:	465a      	mov	r2, fp
 8021230:	9006      	str	r0, [sp, #24]
 8021232:	0020      	movs	r0, r4
 8021234:	9105      	str	r1, [sp, #20]
 8021236:	f7df f9c3 	bl	80005c0 <__aeabi_lmul>
 802123a:	2280      	movs	r2, #128	@ 0x80
 802123c:	2300      	movs	r3, #0
 802123e:	0612      	lsls	r2, r2, #24
 8021240:	1880      	adds	r0, r0, r2
 8021242:	4159      	adcs	r1, r3
 8021244:	2300      	movs	r3, #0
 8021246:	9101      	str	r1, [sp, #4]
 8021248:	9300      	str	r3, [sp, #0]
 802124a:	4652      	mov	r2, sl
 802124c:	9b04      	ldr	r3, [sp, #16]
 802124e:	0028      	movs	r0, r5
 8021250:	17e9      	asrs	r1, r5, #31
 8021252:	f7df f9b5 	bl	80005c0 <__aeabi_lmul>
 8021256:	9a00      	ldr	r2, [sp, #0]
 8021258:	9b01      	ldr	r3, [sp, #4]
 802125a:	1a12      	subs	r2, r2, r0
 802125c:	418b      	sbcs	r3, r1
 802125e:	2080      	movs	r0, #128	@ 0x80
 8021260:	2100      	movs	r1, #0
 8021262:	0600      	lsls	r0, r0, #24
 8021264:	1812      	adds	r2, r2, r0
 8021266:	414b      	adcs	r3, r1
 8021268:	464a      	mov	r2, r9
 802126a:	005b      	lsls	r3, r3, #1
 802126c:	50bb      	str	r3, [r7, r2]
 802126e:	4658      	mov	r0, fp
 8021270:	002a      	movs	r2, r5
 8021272:	9b07      	ldr	r3, [sp, #28]
 8021274:	9906      	ldr	r1, [sp, #24]
 8021276:	f7df f9a3 	bl	80005c0 <__aeabi_lmul>
 802127a:	2280      	movs	r2, #128	@ 0x80
 802127c:	2300      	movs	r3, #0
 802127e:	0612      	lsls	r2, r2, #24
 8021280:	1880      	adds	r0, r0, r2
 8021282:	4159      	adcs	r1, r3
 8021284:	2000      	movs	r0, #0
 8021286:	9103      	str	r1, [sp, #12]
 8021288:	9002      	str	r0, [sp, #8]
 802128a:	4652      	mov	r2, sl
 802128c:	9b04      	ldr	r3, [sp, #16]
 802128e:	0020      	movs	r0, r4
 8021290:	9905      	ldr	r1, [sp, #20]
 8021292:	f7df f995 	bl	80005c0 <__aeabi_lmul>
 8021296:	9b02      	ldr	r3, [sp, #8]
 8021298:	9c03      	ldr	r4, [sp, #12]
 802129a:	18c0      	adds	r0, r0, r3
 802129c:	4161      	adcs	r1, r4
 802129e:	2380      	movs	r3, #128	@ 0x80
 80212a0:	2400      	movs	r4, #0
 80212a2:	061b      	lsls	r3, r3, #24
 80212a4:	18c0      	adds	r0, r0, r3
 80212a6:	4161      	adcs	r1, r4
 80212a8:	464a      	mov	r2, r9
 80212aa:	004b      	lsls	r3, r1, #1
 80212ac:	50b3      	str	r3, [r6, r2]
 80212ae:	2308      	movs	r3, #8
 80212b0:	469c      	mov	ip, r3
 80212b2:	9b08      	ldr	r3, [sp, #32]
 80212b4:	44e0      	add	r8, ip
 80212b6:	3708      	adds	r7, #8
 80212b8:	3608      	adds	r6, #8
 80212ba:	4598      	cmp	r8, r3
 80212bc:	d196      	bne.n	80211ec <arm_cfft_radix4by2_inverse_q31+0x3c>
 80212be:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80212c0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80212c2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80212c4:	2302      	movs	r3, #2
 80212c6:	003a      	movs	r2, r7
 80212c8:	0029      	movs	r1, r5
 80212ca:	0020      	movs	r0, r4
 80212cc:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 80212ce:	f000 fb3b 	bl	8021948 <arm_radix4_butterfly_inverse_q31>
 80212d2:	46a4      	mov	ip, r4
 80212d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80212d6:	2302      	movs	r3, #2
 80212d8:	0088      	lsls	r0, r1, #2
 80212da:	4460      	add	r0, ip
 80212dc:	003a      	movs	r2, r7
 80212de:	0029      	movs	r1, r5
 80212e0:	f000 fb32 	bl	8021948 <arm_radix4_butterfly_inverse_q31>
 80212e4:	46a4      	mov	ip, r4
 80212e6:	0128      	lsls	r0, r5, #4
 80212e8:	4460      	add	r0, ip
 80212ea:	6833      	ldr	r3, [r6, #0]
 80212ec:	005b      	lsls	r3, r3, #1
 80212ee:	6033      	str	r3, [r6, #0]
 80212f0:	6873      	ldr	r3, [r6, #4]
 80212f2:	005b      	lsls	r3, r3, #1
 80212f4:	6073      	str	r3, [r6, #4]
 80212f6:	68b3      	ldr	r3, [r6, #8]
 80212f8:	005b      	lsls	r3, r3, #1
 80212fa:	60b3      	str	r3, [r6, #8]
 80212fc:	68f3      	ldr	r3, [r6, #12]
 80212fe:	005b      	lsls	r3, r3, #1
 8021300:	60f3      	str	r3, [r6, #12]
 8021302:	3610      	adds	r6, #16
 8021304:	42b0      	cmp	r0, r6
 8021306:	d1f0      	bne.n	80212ea <arm_cfft_radix4by2_inverse_q31+0x13a>
 8021308:	b00f      	add	sp, #60	@ 0x3c
 802130a:	bc3c      	pop	{r2, r3, r4, r5}
 802130c:	4690      	mov	r8, r2
 802130e:	4699      	mov	r9, r3
 8021310:	46a2      	mov	sl, r4
 8021312:	46ab      	mov	fp, r5
 8021314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021316:	2302      	movs	r3, #2
 8021318:	2100      	movs	r1, #0
 802131a:	0015      	movs	r5, r2
 802131c:	f000 fb14 	bl	8021948 <arm_radix4_butterfly_inverse_q31>
 8021320:	46bc      	mov	ip, r7
 8021322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021324:	002a      	movs	r2, r5
 8021326:	0098      	lsls	r0, r3, #2
 8021328:	4460      	add	r0, ip
 802132a:	2302      	movs	r3, #2
 802132c:	2100      	movs	r1, #0
 802132e:	f000 fb0b 	bl	8021948 <arm_radix4_butterfly_inverse_q31>
 8021332:	e7e9      	b.n	8021308 <arm_cfft_radix4by2_inverse_q31+0x158>

08021334 <arm_cfft_q31>:
 8021334:	b570      	push	{r4, r5, r6, lr}
 8021336:	001e      	movs	r6, r3
 8021338:	2380      	movs	r3, #128	@ 0x80
 802133a:	000d      	movs	r5, r1
 802133c:	0004      	movs	r4, r0
 802133e:	8801      	ldrh	r1, [r0, #0]
 8021340:	005b      	lsls	r3, r3, #1
 8021342:	2a01      	cmp	r2, #1
 8021344:	d028      	beq.n	8021398 <arm_cfft_q31+0x64>
 8021346:	4299      	cmp	r1, r3
 8021348:	d020      	beq.n	802138c <arm_cfft_q31+0x58>
 802134a:	d812      	bhi.n	8021372 <arm_cfft_q31+0x3e>
 802134c:	2920      	cmp	r1, #32
 802134e:	d004      	beq.n	802135a <arm_cfft_q31+0x26>
 8021350:	d949      	bls.n	80213e6 <arm_cfft_q31+0xb2>
 8021352:	2940      	cmp	r1, #64	@ 0x40
 8021354:	d01a      	beq.n	802138c <arm_cfft_q31+0x58>
 8021356:	2980      	cmp	r1, #128	@ 0x80
 8021358:	d103      	bne.n	8021362 <arm_cfft_q31+0x2e>
 802135a:	6862      	ldr	r2, [r4, #4]
 802135c:	0028      	movs	r0, r5
 802135e:	f7ff fe65 	bl	802102c <arm_cfft_radix4by2_q31>
 8021362:	2e00      	cmp	r6, #0
 8021364:	d004      	beq.n	8021370 <arm_cfft_q31+0x3c>
 8021366:	68a2      	ldr	r2, [r4, #8]
 8021368:	89a1      	ldrh	r1, [r4, #12]
 802136a:	0028      	movs	r0, r5
 802136c:	f7de fecc 	bl	8000108 <arm_bitreversal_32>
 8021370:	bd70      	pop	{r4, r5, r6, pc}
 8021372:	2380      	movs	r3, #128	@ 0x80
 8021374:	00db      	lsls	r3, r3, #3
 8021376:	4299      	cmp	r1, r3
 8021378:	d008      	beq.n	802138c <arm_cfft_q31+0x58>
 802137a:	d92f      	bls.n	80213dc <arm_cfft_q31+0xa8>
 802137c:	2380      	movs	r3, #128	@ 0x80
 802137e:	011b      	lsls	r3, r3, #4
 8021380:	4299      	cmp	r1, r3
 8021382:	d0ea      	beq.n	802135a <arm_cfft_q31+0x26>
 8021384:	2380      	movs	r3, #128	@ 0x80
 8021386:	015b      	lsls	r3, r3, #5
 8021388:	4299      	cmp	r1, r3
 802138a:	d1ea      	bne.n	8021362 <arm_cfft_q31+0x2e>
 802138c:	2301      	movs	r3, #1
 802138e:	6862      	ldr	r2, [r4, #4]
 8021390:	0028      	movs	r0, r5
 8021392:	f000 f833 	bl	80213fc <arm_radix4_butterfly_q31>
 8021396:	e7e4      	b.n	8021362 <arm_cfft_q31+0x2e>
 8021398:	4299      	cmp	r1, r3
 802139a:	d019      	beq.n	80213d0 <arm_cfft_q31+0x9c>
 802139c:	d80b      	bhi.n	80213b6 <arm_cfft_q31+0x82>
 802139e:	2920      	cmp	r1, #32
 80213a0:	d004      	beq.n	80213ac <arm_cfft_q31+0x78>
 80213a2:	d928      	bls.n	80213f6 <arm_cfft_q31+0xc2>
 80213a4:	2940      	cmp	r1, #64	@ 0x40
 80213a6:	d013      	beq.n	80213d0 <arm_cfft_q31+0x9c>
 80213a8:	2980      	cmp	r1, #128	@ 0x80
 80213aa:	d1da      	bne.n	8021362 <arm_cfft_q31+0x2e>
 80213ac:	6862      	ldr	r2, [r4, #4]
 80213ae:	0028      	movs	r0, r5
 80213b0:	f7ff fefe 	bl	80211b0 <arm_cfft_radix4by2_inverse_q31>
 80213b4:	e7d5      	b.n	8021362 <arm_cfft_q31+0x2e>
 80213b6:	2380      	movs	r3, #128	@ 0x80
 80213b8:	00db      	lsls	r3, r3, #3
 80213ba:	4299      	cmp	r1, r3
 80213bc:	d008      	beq.n	80213d0 <arm_cfft_q31+0x9c>
 80213be:	d915      	bls.n	80213ec <arm_cfft_q31+0xb8>
 80213c0:	2380      	movs	r3, #128	@ 0x80
 80213c2:	011b      	lsls	r3, r3, #4
 80213c4:	4299      	cmp	r1, r3
 80213c6:	d0f1      	beq.n	80213ac <arm_cfft_q31+0x78>
 80213c8:	2380      	movs	r3, #128	@ 0x80
 80213ca:	015b      	lsls	r3, r3, #5
 80213cc:	4299      	cmp	r1, r3
 80213ce:	d1c8      	bne.n	8021362 <arm_cfft_q31+0x2e>
 80213d0:	2301      	movs	r3, #1
 80213d2:	6862      	ldr	r2, [r4, #4]
 80213d4:	0028      	movs	r0, r5
 80213d6:	f000 fab7 	bl	8021948 <arm_radix4_butterfly_inverse_q31>
 80213da:	e7c2      	b.n	8021362 <arm_cfft_q31+0x2e>
 80213dc:	2380      	movs	r3, #128	@ 0x80
 80213de:	009b      	lsls	r3, r3, #2
 80213e0:	4299      	cmp	r1, r3
 80213e2:	d0ba      	beq.n	802135a <arm_cfft_q31+0x26>
 80213e4:	e7bd      	b.n	8021362 <arm_cfft_q31+0x2e>
 80213e6:	2910      	cmp	r1, #16
 80213e8:	d1bb      	bne.n	8021362 <arm_cfft_q31+0x2e>
 80213ea:	e7cf      	b.n	802138c <arm_cfft_q31+0x58>
 80213ec:	2380      	movs	r3, #128	@ 0x80
 80213ee:	009b      	lsls	r3, r3, #2
 80213f0:	4299      	cmp	r1, r3
 80213f2:	d0db      	beq.n	80213ac <arm_cfft_q31+0x78>
 80213f4:	e7b5      	b.n	8021362 <arm_cfft_q31+0x2e>
 80213f6:	2910      	cmp	r1, #16
 80213f8:	d1b3      	bne.n	8021362 <arm_cfft_q31+0x2e>
 80213fa:	e7e9      	b.n	80213d0 <arm_cfft_q31+0x9c>

080213fc <arm_radix4_butterfly_q31>:
 80213fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80213fe:	464d      	mov	r5, r9
 8021400:	4644      	mov	r4, r8
 8021402:	465f      	mov	r7, fp
 8021404:	4656      	mov	r6, sl
 8021406:	469c      	mov	ip, r3
 8021408:	b4f0      	push	{r4, r5, r6, r7}
 802140a:	b0a7      	sub	sp, #156	@ 0x9c
 802140c:	9114      	str	r1, [sp, #80]	@ 0x50
 802140e:	0889      	lsrs	r1, r1, #2
 8021410:	9310      	str	r3, [sp, #64]	@ 0x40
 8021412:	00cb      	lsls	r3, r1, #3
 8021414:	0015      	movs	r5, r2
 8021416:	9223      	str	r2, [sp, #140]	@ 0x8c
 8021418:	18c2      	adds	r2, r0, r3
 802141a:	000c      	movs	r4, r1
 802141c:	469a      	mov	sl, r3
 802141e:	9124      	str	r1, [sp, #144]	@ 0x90
 8021420:	18d1      	adds	r1, r2, r3
 8021422:	4663      	mov	r3, ip
 8021424:	468b      	mov	fp, r1
 8021426:	0119      	lsls	r1, r3, #4
 8021428:	910d      	str	r1, [sp, #52]	@ 0x34
 802142a:	00d9      	lsls	r1, r3, #3
 802142c:	005b      	lsls	r3, r3, #1
 802142e:	4463      	add	r3, ip
 8021430:	910e      	str	r1, [sp, #56]	@ 0x38
 8021432:	00d9      	lsls	r1, r3, #3
 8021434:	465b      	mov	r3, fp
 8021436:	44da      	add	sl, fp
 8021438:	4690      	mov	r8, r2
 802143a:	4683      	mov	fp, r0
 802143c:	4699      	mov	r9, r3
 802143e:	9022      	str	r0, [sp, #136]	@ 0x88
 8021440:	9025      	str	r0, [sp, #148]	@ 0x94
 8021442:	910f      	str	r1, [sp, #60]	@ 0x3c
 8021444:	9502      	str	r5, [sp, #8]
 8021446:	9500      	str	r5, [sp, #0]
 8021448:	9501      	str	r5, [sp, #4]
 802144a:	9407      	str	r4, [sp, #28]
 802144c:	465b      	mov	r3, fp
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	4642      	mov	r2, r8
 8021452:	111c      	asrs	r4, r3, #4
 8021454:	464b      	mov	r3, r9
 8021456:	4658      	mov	r0, fp
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	6812      	ldr	r2, [r2, #0]
 802145c:	111b      	asrs	r3, r3, #4
 802145e:	18e7      	adds	r7, r4, r3
 8021460:	1ae3      	subs	r3, r4, r3
 8021462:	1114      	asrs	r4, r2, #4
 8021464:	4652      	mov	r2, sl
 8021466:	6840      	ldr	r0, [r0, #4]
 8021468:	6812      	ldr	r2, [r2, #0]
 802146a:	1105      	asrs	r5, r0, #4
 802146c:	4648      	mov	r0, r9
 802146e:	9303      	str	r3, [sp, #12]
 8021470:	1113      	asrs	r3, r2, #4
 8021472:	18e2      	adds	r2, r4, r3
 8021474:	465c      	mov	r4, fp
 8021476:	6840      	ldr	r0, [r0, #4]
 8021478:	1103      	asrs	r3, r0, #4
 802147a:	18ee      	adds	r6, r5, r3
 802147c:	1ae8      	subs	r0, r5, r3
 802147e:	18bb      	adds	r3, r7, r2
 8021480:	6023      	str	r3, [r4, #0]
 8021482:	4644      	mov	r4, r8
 8021484:	6864      	ldr	r4, [r4, #4]
 8021486:	9004      	str	r0, [sp, #16]
 8021488:	1125      	asrs	r5, r4, #4
 802148a:	4654      	mov	r4, sl
 802148c:	6864      	ldr	r4, [r4, #4]
 802148e:	1123      	asrs	r3, r4, #4
 8021490:	465c      	mov	r4, fp
 8021492:	18eb      	adds	r3, r5, r3
 8021494:	18f1      	adds	r1, r6, r3
 8021496:	6061      	str	r1, [r4, #4]
 8021498:	4655      	mov	r5, sl
 802149a:	4644      	mov	r4, r8
 802149c:	686d      	ldr	r5, [r5, #4]
 802149e:	6864      	ldr	r4, [r4, #4]
 80214a0:	1129      	asrs	r1, r5, #4
 80214a2:	1124      	asrs	r4, r4, #4
 80214a4:	1a64      	subs	r4, r4, r1
 80214a6:	4641      	mov	r1, r8
 80214a8:	6809      	ldr	r1, [r1, #0]
 80214aa:	9405      	str	r4, [sp, #20]
 80214ac:	1108      	asrs	r0, r1, #4
 80214ae:	4651      	mov	r1, sl
 80214b0:	6809      	ldr	r1, [r1, #0]
 80214b2:	1abc      	subs	r4, r7, r2
 80214b4:	1109      	asrs	r1, r1, #4
 80214b6:	1a41      	subs	r1, r0, r1
 80214b8:	17e2      	asrs	r2, r4, #31
 80214ba:	9106      	str	r1, [sp, #24]
 80214bc:	0011      	movs	r1, r2
 80214be:	9a01      	ldr	r2, [sp, #4]
 80214c0:	9108      	str	r1, [sp, #32]
 80214c2:	6817      	ldr	r7, [r2, #0]
 80214c4:	17fd      	asrs	r5, r7, #31
 80214c6:	0028      	movs	r0, r5
 80214c8:	1af5      	subs	r5, r6, r3
 80214ca:	17ee      	asrs	r6, r5, #31
 80214cc:	960a      	str	r6, [sp, #40]	@ 0x28
 80214ce:	6856      	ldr	r6, [r2, #4]
 80214d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80214d2:	17f3      	asrs	r3, r6, #31
 80214d4:	003a      	movs	r2, r7
 80214d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80214d8:	0003      	movs	r3, r0
 80214da:	0020      	movs	r0, r4
 80214dc:	f7df f870 	bl	80005c0 <__aeabi_lmul>
 80214e0:	0032      	movs	r2, r6
 80214e2:	17f3      	asrs	r3, r6, #31
 80214e4:	910c      	str	r1, [sp, #48]	@ 0x30
 80214e6:	0028      	movs	r0, r5
 80214e8:	17e9      	asrs	r1, r5, #31
 80214ea:	f7df f869 	bl	80005c0 <__aeabi_lmul>
 80214ee:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80214f0:	002a      	movs	r2, r5
 80214f2:	4684      	mov	ip, r0
 80214f4:	4640      	mov	r0, r8
 80214f6:	4461      	add	r1, ip
 80214f8:	0049      	lsls	r1, r1, #1
 80214fa:	6001      	str	r1, [r0, #0]
 80214fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80214fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021500:	0038      	movs	r0, r7
 8021502:	f7df f85d 	bl	80005c0 <__aeabi_lmul>
 8021506:	0032      	movs	r2, r6
 8021508:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802150a:	000d      	movs	r5, r1
 802150c:	0020      	movs	r0, r4
 802150e:	9908      	ldr	r1, [sp, #32]
 8021510:	f7df f856 	bl	80005c0 <__aeabi_lmul>
 8021514:	4646      	mov	r6, r8
 8021516:	1a6d      	subs	r5, r5, r1
 8021518:	006d      	lsls	r5, r5, #1
 802151a:	6075      	str	r5, [r6, #4]
 802151c:	9903      	ldr	r1, [sp, #12]
 802151e:	9d05      	ldr	r5, [sp, #20]
 8021520:	000c      	movs	r4, r1
 8021522:	46ac      	mov	ip, r5
 8021524:	4464      	add	r4, ip
 8021526:	17e6      	asrs	r6, r4, #31
 8021528:	0031      	movs	r1, r6
 802152a:	9b00      	ldr	r3, [sp, #0]
 802152c:	9804      	ldr	r0, [sp, #16]
 802152e:	681e      	ldr	r6, [r3, #0]
 8021530:	17f7      	asrs	r7, r6, #31
 8021532:	9709      	str	r7, [sp, #36]	@ 0x24
 8021534:	9f06      	ldr	r7, [sp, #24]
 8021536:	0032      	movs	r2, r6
 8021538:	1bc7      	subs	r7, r0, r7
 802153a:	17fd      	asrs	r5, r7, #31
 802153c:	950a      	str	r5, [sp, #40]	@ 0x28
 802153e:	685d      	ldr	r5, [r3, #4]
 8021540:	17f3      	asrs	r3, r6, #31
 8021542:	17e8      	asrs	r0, r5, #31
 8021544:	900b      	str	r0, [sp, #44]	@ 0x2c
 8021546:	0020      	movs	r0, r4
 8021548:	9108      	str	r1, [sp, #32]
 802154a:	f7df f839 	bl	80005c0 <__aeabi_lmul>
 802154e:	002a      	movs	r2, r5
 8021550:	17eb      	asrs	r3, r5, #31
 8021552:	910c      	str	r1, [sp, #48]	@ 0x30
 8021554:	0038      	movs	r0, r7
 8021556:	17f9      	asrs	r1, r7, #31
 8021558:	f7df f832 	bl	80005c0 <__aeabi_lmul>
 802155c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802155e:	003a      	movs	r2, r7
 8021560:	4684      	mov	ip, r0
 8021562:	4648      	mov	r0, r9
 8021564:	4461      	add	r1, ip
 8021566:	0049      	lsls	r1, r1, #1
 8021568:	6001      	str	r1, [r0, #0]
 802156a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802156c:	0030      	movs	r0, r6
 802156e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021570:	f7df f826 	bl	80005c0 <__aeabi_lmul>
 8021574:	002a      	movs	r2, r5
 8021576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021578:	000e      	movs	r6, r1
 802157a:	0020      	movs	r0, r4
 802157c:	9908      	ldr	r1, [sp, #32]
 802157e:	f7df f81f 	bl	80005c0 <__aeabi_lmul>
 8021582:	464c      	mov	r4, r9
 8021584:	9d05      	ldr	r5, [sp, #20]
 8021586:	1a76      	subs	r6, r6, r1
 8021588:	9903      	ldr	r1, [sp, #12]
 802158a:	0076      	lsls	r6, r6, #1
 802158c:	6066      	str	r6, [r4, #4]
 802158e:	1b4c      	subs	r4, r1, r5
 8021590:	9e06      	ldr	r6, [sp, #24]
 8021592:	17e1      	asrs	r1, r4, #31
 8021594:	9103      	str	r1, [sp, #12]
 8021596:	9902      	ldr	r1, [sp, #8]
 8021598:	46b4      	mov	ip, r6
 802159a:	680f      	ldr	r7, [r1, #0]
 802159c:	9804      	ldr	r0, [sp, #16]
 802159e:	17fd      	asrs	r5, r7, #31
 80215a0:	002b      	movs	r3, r5
 80215a2:	684e      	ldr	r6, [r1, #4]
 80215a4:	4460      	add	r0, ip
 80215a6:	0005      	movs	r5, r0
 80215a8:	17c0      	asrs	r0, r0, #31
 80215aa:	9005      	str	r0, [sp, #20]
 80215ac:	17f0      	asrs	r0, r6, #31
 80215ae:	9006      	str	r0, [sp, #24]
 80215b0:	003a      	movs	r2, r7
 80215b2:	0020      	movs	r0, r4
 80215b4:	17e1      	asrs	r1, r4, #31
 80215b6:	9304      	str	r3, [sp, #16]
 80215b8:	f7df f802 	bl	80005c0 <__aeabi_lmul>
 80215bc:	0032      	movs	r2, r6
 80215be:	9108      	str	r1, [sp, #32]
 80215c0:	17f3      	asrs	r3, r6, #31
 80215c2:	0028      	movs	r0, r5
 80215c4:	17e9      	asrs	r1, r5, #31
 80215c6:	f7de fffb 	bl	80005c0 <__aeabi_lmul>
 80215ca:	9808      	ldr	r0, [sp, #32]
 80215cc:	002a      	movs	r2, r5
 80215ce:	4684      	mov	ip, r0
 80215d0:	4650      	mov	r0, sl
 80215d2:	4461      	add	r1, ip
 80215d4:	0049      	lsls	r1, r1, #1
 80215d6:	6001      	str	r1, [r0, #0]
 80215d8:	9b05      	ldr	r3, [sp, #20]
 80215da:	9904      	ldr	r1, [sp, #16]
 80215dc:	0038      	movs	r0, r7
 80215de:	f7de ffef 	bl	80005c0 <__aeabi_lmul>
 80215e2:	0020      	movs	r0, r4
 80215e4:	2408      	movs	r4, #8
 80215e6:	000d      	movs	r5, r1
 80215e8:	0032      	movs	r2, r6
 80215ea:	9b06      	ldr	r3, [sp, #24]
 80215ec:	9903      	ldr	r1, [sp, #12]
 80215ee:	f7de ffe7 	bl	80005c0 <__aeabi_lmul>
 80215f2:	46a4      	mov	ip, r4
 80215f4:	4650      	mov	r0, sl
 80215f6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80215f8:	44e3      	add	fp, ip
 80215fa:	44e0      	add	r8, ip
 80215fc:	44e1      	add	r9, ip
 80215fe:	44e2      	add	sl, ip
 8021600:	46a4      	mov	ip, r4
 8021602:	1a6d      	subs	r5, r5, r1
 8021604:	006d      	lsls	r5, r5, #1
 8021606:	9a01      	ldr	r2, [sp, #4]
 8021608:	6045      	str	r5, [r0, #4]
 802160a:	9807      	ldr	r0, [sp, #28]
 802160c:	4462      	add	r2, ip
 802160e:	3801      	subs	r0, #1
 8021610:	9201      	str	r2, [sp, #4]
 8021612:	9007      	str	r0, [sp, #28]
 8021614:	9b00      	ldr	r3, [sp, #0]
 8021616:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021618:	9902      	ldr	r1, [sp, #8]
 802161a:	4694      	mov	ip, r2
 802161c:	4463      	add	r3, ip
 802161e:	9300      	str	r3, [sp, #0]
 8021620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021622:	469c      	mov	ip, r3
 8021624:	4461      	add	r1, ip
 8021626:	9102      	str	r1, [sp, #8]
 8021628:	2800      	cmp	r0, #0
 802162a:	d000      	beq.n	802162e <arm_radix4_butterfly_q31+0x232>
 802162c:	e70e      	b.n	802144c <arm_radix4_butterfly_q31+0x50>
 802162e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021630:	009b      	lsls	r3, r3, #2
 8021632:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021634:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021636:	9320      	str	r3, [sp, #128]	@ 0x80
 8021638:	9313      	str	r3, [sp, #76]	@ 0x4c
 802163a:	2b04      	cmp	r3, #4
 802163c:	d800      	bhi.n	8021640 <arm_radix4_butterfly_q31+0x244>
 802163e:	e180      	b.n	8021942 <arm_radix4_butterfly_q31+0x546>
 8021640:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021642:	0893      	lsrs	r3, r2, #2
 8021644:	1e59      	subs	r1, r3, #1
 8021646:	9321      	str	r3, [sp, #132]	@ 0x84
 8021648:	00db      	lsls	r3, r3, #3
 802164a:	931b      	str	r3, [sp, #108]	@ 0x6c
 802164c:	00d3      	lsls	r3, r2, #3
 802164e:	9300      	str	r3, [sp, #0]
 8021650:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021652:	911a      	str	r1, [sp, #104]	@ 0x68
 8021654:	00da      	lsls	r2, r3, #3
 8021656:	921e      	str	r2, [sp, #120]	@ 0x78
 8021658:	011a      	lsls	r2, r3, #4
 802165a:	921d      	str	r2, [sp, #116]	@ 0x74
 802165c:	001a      	movs	r2, r3
 802165e:	4694      	mov	ip, r2
 8021660:	005b      	lsls	r3, r3, #1
 8021662:	4463      	add	r3, ip
 8021664:	00db      	lsls	r3, r3, #3
 8021666:	931c      	str	r3, [sp, #112]	@ 0x70
 8021668:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802166a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802166c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802166e:	9318      	str	r3, [sp, #96]	@ 0x60
 8021670:	9319      	str	r3, [sp, #100]	@ 0x64
 8021672:	9316      	str	r3, [sp, #88]	@ 0x58
 8021674:	2300      	movs	r3, #0
 8021676:	9315      	str	r3, [sp, #84]	@ 0x54
 8021678:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802167a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802167c:	681a      	ldr	r2, [r3, #0]
 802167e:	685b      	ldr	r3, [r3, #4]
 8021680:	9205      	str	r2, [sp, #20]
 8021682:	9306      	str	r3, [sp, #24]
 8021684:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021686:	468c      	mov	ip, r1
 8021688:	681a      	ldr	r2, [r3, #0]
 802168a:	685b      	ldr	r3, [r3, #4]
 802168c:	9207      	str	r2, [sp, #28]
 802168e:	9308      	str	r3, [sp, #32]
 8021690:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021692:	681a      	ldr	r2, [r3, #0]
 8021694:	685b      	ldr	r3, [r3, #4]
 8021696:	9209      	str	r2, [sp, #36]	@ 0x24
 8021698:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802169a:	930a      	str	r3, [sp, #40]	@ 0x28
 802169c:	0013      	movs	r3, r2
 802169e:	4463      	add	r3, ip
 80216a0:	4698      	mov	r8, r3
 80216a2:	0013      	movs	r3, r2
 80216a4:	4442      	add	r2, r8
 80216a6:	4691      	mov	r9, r2
 80216a8:	001a      	movs	r2, r3
 80216aa:	444a      	add	r2, r9
 80216ac:	4692      	mov	sl, r2
 80216ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80216b0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80216b2:	4293      	cmp	r3, r2
 80216b4:	d800      	bhi.n	80216b8 <arm_radix4_butterfly_q31+0x2bc>
 80216b6:	e0dd      	b.n	8021874 <arm_radix4_butterfly_q31+0x478>
 80216b8:	4694      	mov	ip, r2
 80216ba:	468b      	mov	fp, r1
 80216bc:	4644      	mov	r4, r8
 80216be:	4655      	mov	r5, sl
 80216c0:	9b07      	ldr	r3, [sp, #28]
 80216c2:	17db      	asrs	r3, r3, #31
 80216c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80216c6:	9b08      	ldr	r3, [sp, #32]
 80216c8:	17db      	asrs	r3, r3, #31
 80216ca:	930d      	str	r3, [sp, #52]	@ 0x34
 80216cc:	9b05      	ldr	r3, [sp, #20]
 80216ce:	17db      	asrs	r3, r3, #31
 80216d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80216d2:	9b06      	ldr	r3, [sp, #24]
 80216d4:	17db      	asrs	r3, r3, #31
 80216d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80216d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80216da:	17db      	asrs	r3, r3, #31
 80216dc:	9310      	str	r3, [sp, #64]	@ 0x40
 80216de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80216e0:	17db      	asrs	r3, r3, #31
 80216e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80216e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80216e6:	4463      	add	r3, ip
 80216e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80216ea:	465b      	mov	r3, fp
 80216ec:	4659      	mov	r1, fp
 80216ee:	681a      	ldr	r2, [r3, #0]
 80216f0:	464b      	mov	r3, r9
 80216f2:	684f      	ldr	r7, [r1, #4]
 80216f4:	4649      	mov	r1, r9
 80216f6:	681b      	ldr	r3, [r3, #0]
 80216f8:	18d6      	adds	r6, r2, r3
 80216fa:	1ad3      	subs	r3, r2, r3
 80216fc:	9301      	str	r3, [sp, #4]
 80216fe:	684b      	ldr	r3, [r1, #4]
 8021700:	18f8      	adds	r0, r7, r3
 8021702:	1af9      	subs	r1, r7, r3
 8021704:	6827      	ldr	r7, [r4, #0]
 8021706:	9102      	str	r1, [sp, #8]
 8021708:	003a      	movs	r2, r7
 802170a:	682f      	ldr	r7, [r5, #0]
 802170c:	46bc      	mov	ip, r7
 802170e:	465f      	mov	r7, fp
 8021710:	4462      	add	r2, ip
 8021712:	18b3      	adds	r3, r6, r2
 8021714:	109b      	asrs	r3, r3, #2
 8021716:	603b      	str	r3, [r7, #0]
 8021718:	6867      	ldr	r7, [r4, #4]
 802171a:	1ab6      	subs	r6, r6, r2
 802171c:	46b8      	mov	r8, r7
 802171e:	686f      	ldr	r7, [r5, #4]
 8021720:	17f2      	asrs	r2, r6, #31
 8021722:	46bc      	mov	ip, r7
 8021724:	44e0      	add	r8, ip
 8021726:	4643      	mov	r3, r8
 8021728:	465f      	mov	r7, fp
 802172a:	18c1      	adds	r1, r0, r3
 802172c:	1089      	asrs	r1, r1, #2
 802172e:	6079      	str	r1, [r7, #4]
 8021730:	9900      	ldr	r1, [sp, #0]
 8021732:	4690      	mov	r8, r2
 8021734:	468c      	mov	ip, r1
 8021736:	6867      	ldr	r7, [r4, #4]
 8021738:	6869      	ldr	r1, [r5, #4]
 802173a:	44e3      	add	fp, ip
 802173c:	1a7f      	subs	r7, r7, r1
 802173e:	9703      	str	r7, [sp, #12]
 8021740:	6829      	ldr	r1, [r5, #0]
 8021742:	6827      	ldr	r7, [r4, #0]
 8021744:	1a7f      	subs	r7, r7, r1
 8021746:	9704      	str	r7, [sp, #16]
 8021748:	1ac7      	subs	r7, r0, r3
 802174a:	17fa      	asrs	r2, r7, #31
 802174c:	4692      	mov	sl, r2
 802174e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021750:	9a07      	ldr	r2, [sp, #28]
 8021752:	0030      	movs	r0, r6
 8021754:	4641      	mov	r1, r8
 8021756:	f7de ff33 	bl	80005c0 <__aeabi_lmul>
 802175a:	9a08      	ldr	r2, [sp, #32]
 802175c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802175e:	9112      	str	r1, [sp, #72]	@ 0x48
 8021760:	0038      	movs	r0, r7
 8021762:	4651      	mov	r1, sl
 8021764:	f7de ff2c 	bl	80005c0 <__aeabi_lmul>
 8021768:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802176a:	9a07      	ldr	r2, [sp, #28]
 802176c:	4684      	mov	ip, r0
 802176e:	4461      	add	r1, ip
 8021770:	1049      	asrs	r1, r1, #1
 8021772:	6021      	str	r1, [r4, #0]
 8021774:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021776:	0038      	movs	r0, r7
 8021778:	4651      	mov	r1, sl
 802177a:	f7de ff21 	bl	80005c0 <__aeabi_lmul>
 802177e:	9a08      	ldr	r2, [sp, #32]
 8021780:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021782:	000f      	movs	r7, r1
 8021784:	0030      	movs	r0, r6
 8021786:	4641      	mov	r1, r8
 8021788:	f7de ff1a 	bl	80005c0 <__aeabi_lmul>
 802178c:	9b00      	ldr	r3, [sp, #0]
 802178e:	9a01      	ldr	r2, [sp, #4]
 8021790:	469c      	mov	ip, r3
 8021792:	9803      	ldr	r0, [sp, #12]
 8021794:	1a7f      	subs	r7, r7, r1
 8021796:	107f      	asrs	r7, r7, #1
 8021798:	6067      	str	r7, [r4, #4]
 802179a:	0016      	movs	r6, r2
 802179c:	4464      	add	r4, ip
 802179e:	4684      	mov	ip, r0
 80217a0:	4466      	add	r6, ip
 80217a2:	17f2      	asrs	r2, r6, #31
 80217a4:	4690      	mov	r8, r2
 80217a6:	9902      	ldr	r1, [sp, #8]
 80217a8:	9f04      	ldr	r7, [sp, #16]
 80217aa:	0030      	movs	r0, r6
 80217ac:	1bcf      	subs	r7, r1, r7
 80217ae:	17fa      	asrs	r2, r7, #31
 80217b0:	4692      	mov	sl, r2
 80217b2:	4641      	mov	r1, r8
 80217b4:	9a05      	ldr	r2, [sp, #20]
 80217b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80217b8:	f7de ff02 	bl	80005c0 <__aeabi_lmul>
 80217bc:	9a06      	ldr	r2, [sp, #24]
 80217be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80217c0:	9112      	str	r1, [sp, #72]	@ 0x48
 80217c2:	0038      	movs	r0, r7
 80217c4:	4651      	mov	r1, sl
 80217c6:	f7de fefb 	bl	80005c0 <__aeabi_lmul>
 80217ca:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80217cc:	9a05      	ldr	r2, [sp, #20]
 80217ce:	4684      	mov	ip, r0
 80217d0:	4648      	mov	r0, r9
 80217d2:	4461      	add	r1, ip
 80217d4:	1049      	asrs	r1, r1, #1
 80217d6:	6001      	str	r1, [r0, #0]
 80217d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80217da:	0038      	movs	r0, r7
 80217dc:	4651      	mov	r1, sl
 80217de:	f7de feef 	bl	80005c0 <__aeabi_lmul>
 80217e2:	9a06      	ldr	r2, [sp, #24]
 80217e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80217e6:	000f      	movs	r7, r1
 80217e8:	0030      	movs	r0, r6
 80217ea:	4641      	mov	r1, r8
 80217ec:	f7de fee8 	bl	80005c0 <__aeabi_lmul>
 80217f0:	464e      	mov	r6, r9
 80217f2:	9a00      	ldr	r2, [sp, #0]
 80217f4:	9b01      	ldr	r3, [sp, #4]
 80217f6:	4694      	mov	ip, r2
 80217f8:	9803      	ldr	r0, [sp, #12]
 80217fa:	1a7f      	subs	r7, r7, r1
 80217fc:	107f      	asrs	r7, r7, #1
 80217fe:	6077      	str	r7, [r6, #4]
 8021800:	1a1e      	subs	r6, r3, r0
 8021802:	9b04      	ldr	r3, [sp, #16]
 8021804:	44e1      	add	r9, ip
 8021806:	469c      	mov	ip, r3
 8021808:	17f0      	asrs	r0, r6, #31
 802180a:	4680      	mov	r8, r0
 802180c:	9902      	ldr	r1, [sp, #8]
 802180e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021810:	4461      	add	r1, ip
 8021812:	17cb      	asrs	r3, r1, #31
 8021814:	000f      	movs	r7, r1
 8021816:	469a      	mov	sl, r3
 8021818:	0030      	movs	r0, r6
 802181a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802181c:	4641      	mov	r1, r8
 802181e:	f7de fecf 	bl	80005c0 <__aeabi_lmul>
 8021822:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021824:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021826:	9101      	str	r1, [sp, #4]
 8021828:	0038      	movs	r0, r7
 802182a:	4651      	mov	r1, sl
 802182c:	f7de fec8 	bl	80005c0 <__aeabi_lmul>
 8021830:	9801      	ldr	r0, [sp, #4]
 8021832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021834:	4684      	mov	ip, r0
 8021836:	4461      	add	r1, ip
 8021838:	1049      	asrs	r1, r1, #1
 802183a:	6029      	str	r1, [r5, #0]
 802183c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802183e:	0038      	movs	r0, r7
 8021840:	4651      	mov	r1, sl
 8021842:	f7de febd 	bl	80005c0 <__aeabi_lmul>
 8021846:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021848:	000f      	movs	r7, r1
 802184a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802184c:	0030      	movs	r0, r6
 802184e:	4641      	mov	r1, r8
 8021850:	f7de feb6 	bl	80005c0 <__aeabi_lmul>
 8021854:	1a7f      	subs	r7, r7, r1
 8021856:	107f      	asrs	r7, r7, #1
 8021858:	606f      	str	r7, [r5, #4]
 802185a:	9a00      	ldr	r2, [sp, #0]
 802185c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802185e:	4694      	mov	ip, r2
 8021860:	4465      	add	r5, ip
 8021862:	468c      	mov	ip, r1
 8021864:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021866:	0013      	movs	r3, r2
 8021868:	4462      	add	r2, ip
 802186a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802186c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802186e:	429a      	cmp	r2, r3
 8021870:	d900      	bls.n	8021874 <arm_radix4_butterfly_q31+0x478>
 8021872:	e73a      	b.n	80216ea <arm_radix4_butterfly_q31+0x2ee>
 8021874:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021876:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021878:	468c      	mov	ip, r1
 802187a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 802187c:	4462      	add	r2, ip
 802187e:	468c      	mov	ip, r1
 8021880:	9216      	str	r2, [sp, #88]	@ 0x58
 8021882:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8021884:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8021886:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021888:	4462      	add	r2, ip
 802188a:	468c      	mov	ip, r1
 802188c:	9219      	str	r2, [sp, #100]	@ 0x64
 802188e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021890:	3301      	adds	r3, #1
 8021892:	4462      	add	r2, ip
 8021894:	9218      	str	r2, [sp, #96]	@ 0x60
 8021896:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8021898:	9315      	str	r3, [sp, #84]	@ 0x54
 802189a:	3208      	adds	r2, #8
 802189c:	9217      	str	r2, [sp, #92]	@ 0x5c
 802189e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80218a0:	4293      	cmp	r3, r2
 80218a2:	d800      	bhi.n	80218a6 <arm_radix4_butterfly_q31+0x4aa>
 80218a4:	e6e8      	b.n	8021678 <arm_radix4_butterfly_q31+0x27c>
 80218a6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80218a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80218aa:	009b      	lsls	r3, r3, #2
 80218ac:	931f      	str	r3, [sp, #124]	@ 0x7c
 80218ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80218b0:	9213      	str	r2, [sp, #76]	@ 0x4c
 80218b2:	089b      	lsrs	r3, r3, #2
 80218b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80218b6:	2b04      	cmp	r3, #4
 80218b8:	d900      	bls.n	80218bc <arm_radix4_butterfly_q31+0x4c0>
 80218ba:	e6c1      	b.n	8021640 <arm_radix4_butterfly_q31+0x244>
 80218bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80218be:	469a      	mov	sl, r3
 80218c0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80218c2:	691c      	ldr	r4, [r3, #16]
 80218c4:	685a      	ldr	r2, [r3, #4]
 80218c6:	46a1      	mov	r9, r4
 80218c8:	4690      	mov	r8, r2
 80218ca:	6819      	ldr	r1, [r3, #0]
 80218cc:	689a      	ldr	r2, [r3, #8]
 80218ce:	699f      	ldr	r7, [r3, #24]
 80218d0:	188d      	adds	r5, r1, r2
 80218d2:	444d      	add	r5, r9
 80218d4:	19ed      	adds	r5, r5, r7
 80218d6:	69de      	ldr	r6, [r3, #28]
 80218d8:	601d      	str	r5, [r3, #0]
 80218da:	4645      	mov	r5, r8
 80218dc:	46b4      	mov	ip, r6
 80218de:	68d8      	ldr	r0, [r3, #12]
 80218e0:	695c      	ldr	r4, [r3, #20]
 80218e2:	182d      	adds	r5, r5, r0
 80218e4:	192d      	adds	r5, r5, r4
 80218e6:	4465      	add	r5, ip
 80218e8:	605d      	str	r5, [r3, #4]
 80218ea:	1a8d      	subs	r5, r1, r2
 80218ec:	444d      	add	r5, r9
 80218ee:	1bed      	subs	r5, r5, r7
 80218f0:	609d      	str	r5, [r3, #8]
 80218f2:	4645      	mov	r5, r8
 80218f4:	1a2d      	subs	r5, r5, r0
 80218f6:	192d      	adds	r5, r5, r4
 80218f8:	1bad      	subs	r5, r5, r6
 80218fa:	464e      	mov	r6, r9
 80218fc:	60dd      	str	r5, [r3, #12]
 80218fe:	180d      	adds	r5, r1, r0
 8021900:	1bad      	subs	r5, r5, r6
 8021902:	4666      	mov	r6, ip
 8021904:	1bad      	subs	r5, r5, r6
 8021906:	611d      	str	r5, [r3, #16]
 8021908:	4645      	mov	r5, r8
 802190a:	1aad      	subs	r5, r5, r2
 802190c:	4442      	add	r2, r8
 802190e:	1b12      	subs	r2, r2, r4
 8021910:	1bd2      	subs	r2, r2, r7
 8021912:	1a08      	subs	r0, r1, r0
 8021914:	61da      	str	r2, [r3, #28]
 8021916:	4649      	mov	r1, r9
 8021918:	2201      	movs	r2, #1
 802191a:	1a41      	subs	r1, r0, r1
 802191c:	4252      	negs	r2, r2
 802191e:	4461      	add	r1, ip
 8021920:	4694      	mov	ip, r2
 8021922:	44e2      	add	sl, ip
 8021924:	4652      	mov	r2, sl
 8021926:	1b2d      	subs	r5, r5, r4
 8021928:	19ed      	adds	r5, r5, r7
 802192a:	615d      	str	r5, [r3, #20]
 802192c:	6199      	str	r1, [r3, #24]
 802192e:	3320      	adds	r3, #32
 8021930:	2a00      	cmp	r2, #0
 8021932:	d1c6      	bne.n	80218c2 <arm_radix4_butterfly_q31+0x4c6>
 8021934:	b027      	add	sp, #156	@ 0x9c
 8021936:	bc3c      	pop	{r2, r3, r4, r5}
 8021938:	4690      	mov	r8, r2
 802193a:	4699      	mov	r9, r3
 802193c:	46a2      	mov	sl, r4
 802193e:	46ab      	mov	fp, r5
 8021940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021942:	469a      	mov	sl, r3
 8021944:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021946:	e7bc      	b.n	80218c2 <arm_radix4_butterfly_q31+0x4c6>

08021948 <arm_radix4_butterfly_inverse_q31>:
 8021948:	b5f0      	push	{r4, r5, r6, r7, lr}
 802194a:	464d      	mov	r5, r9
 802194c:	4644      	mov	r4, r8
 802194e:	465f      	mov	r7, fp
 8021950:	4656      	mov	r6, sl
 8021952:	b4f0      	push	{r4, r5, r6, r7}
 8021954:	b0a7      	sub	sp, #156	@ 0x9c
 8021956:	469c      	mov	ip, r3
 8021958:	9114      	str	r1, [sp, #80]	@ 0x50
 802195a:	0889      	lsrs	r1, r1, #2
 802195c:	9310      	str	r3, [sp, #64]	@ 0x40
 802195e:	00cb      	lsls	r3, r1, #3
 8021960:	0015      	movs	r5, r2
 8021962:	9223      	str	r2, [sp, #140]	@ 0x8c
 8021964:	18c2      	adds	r2, r0, r3
 8021966:	000c      	movs	r4, r1
 8021968:	9124      	str	r1, [sp, #144]	@ 0x90
 802196a:	18d1      	adds	r1, r2, r3
 802196c:	468b      	mov	fp, r1
 802196e:	469a      	mov	sl, r3
 8021970:	4663      	mov	r3, ip
 8021972:	44da      	add	sl, fp
 8021974:	46d0      	mov	r8, sl
 8021976:	4681      	mov	r9, r0
 8021978:	4692      	mov	sl, r2
 802197a:	0119      	lsls	r1, r3, #4
 802197c:	910d      	str	r1, [sp, #52]	@ 0x34
 802197e:	00d9      	lsls	r1, r3, #3
 8021980:	005b      	lsls	r3, r3, #1
 8021982:	4463      	add	r3, ip
 8021984:	910e      	str	r1, [sp, #56]	@ 0x38
 8021986:	00d9      	lsls	r1, r3, #3
 8021988:	9022      	str	r0, [sp, #136]	@ 0x88
 802198a:	9025      	str	r0, [sp, #148]	@ 0x94
 802198c:	910f      	str	r1, [sp, #60]	@ 0x3c
 802198e:	9502      	str	r5, [sp, #8]
 8021990:	9500      	str	r5, [sp, #0]
 8021992:	9501      	str	r5, [sp, #4]
 8021994:	9409      	str	r4, [sp, #36]	@ 0x24
 8021996:	464b      	mov	r3, r9
 8021998:	681b      	ldr	r3, [r3, #0]
 802199a:	4652      	mov	r2, sl
 802199c:	111c      	asrs	r4, r3, #4
 802199e:	465b      	mov	r3, fp
 80219a0:	4648      	mov	r0, r9
 80219a2:	681b      	ldr	r3, [r3, #0]
 80219a4:	6812      	ldr	r2, [r2, #0]
 80219a6:	6840      	ldr	r0, [r0, #4]
 80219a8:	111b      	asrs	r3, r3, #4
 80219aa:	18e7      	adds	r7, r4, r3
 80219ac:	1ae3      	subs	r3, r4, r3
 80219ae:	1114      	asrs	r4, r2, #4
 80219b0:	4642      	mov	r2, r8
 80219b2:	1105      	asrs	r5, r0, #4
 80219b4:	4658      	mov	r0, fp
 80219b6:	6812      	ldr	r2, [r2, #0]
 80219b8:	6840      	ldr	r0, [r0, #4]
 80219ba:	9303      	str	r3, [sp, #12]
 80219bc:	1113      	asrs	r3, r2, #4
 80219be:	18e2      	adds	r2, r4, r3
 80219c0:	1103      	asrs	r3, r0, #4
 80219c2:	18ee      	adds	r6, r5, r3
 80219c4:	1ae8      	subs	r0, r5, r3
 80219c6:	464d      	mov	r5, r9
 80219c8:	18bb      	adds	r3, r7, r2
 80219ca:	602b      	str	r3, [r5, #0]
 80219cc:	4641      	mov	r1, r8
 80219ce:	4655      	mov	r5, sl
 80219d0:	6849      	ldr	r1, [r1, #4]
 80219d2:	686d      	ldr	r5, [r5, #4]
 80219d4:	110b      	asrs	r3, r1, #4
 80219d6:	112d      	asrs	r5, r5, #4
 80219d8:	18eb      	adds	r3, r5, r3
 80219da:	464d      	mov	r5, r9
 80219dc:	18f1      	adds	r1, r6, r3
 80219de:	6069      	str	r1, [r5, #4]
 80219e0:	4655      	mov	r5, sl
 80219e2:	686d      	ldr	r5, [r5, #4]
 80219e4:	9004      	str	r0, [sp, #16]
 80219e6:	112c      	asrs	r4, r5, #4
 80219e8:	4645      	mov	r5, r8
 80219ea:	686d      	ldr	r5, [r5, #4]
 80219ec:	1129      	asrs	r1, r5, #4
 80219ee:	1a65      	subs	r5, r4, r1
 80219f0:	4651      	mov	r1, sl
 80219f2:	6809      	ldr	r1, [r1, #0]
 80219f4:	1abc      	subs	r4, r7, r2
 80219f6:	1108      	asrs	r0, r1, #4
 80219f8:	4641      	mov	r1, r8
 80219fa:	17e2      	asrs	r2, r4, #31
 80219fc:	6809      	ldr	r1, [r1, #0]
 80219fe:	9207      	str	r2, [sp, #28]
 8021a00:	9a01      	ldr	r2, [sp, #4]
 8021a02:	1109      	asrs	r1, r1, #4
 8021a04:	6817      	ldr	r7, [r2, #0]
 8021a06:	1a41      	subs	r1, r0, r1
 8021a08:	9106      	str	r1, [sp, #24]
 8021a0a:	0039      	movs	r1, r7
 8021a0c:	17ff      	asrs	r7, r7, #31
 8021a0e:	0038      	movs	r0, r7
 8021a10:	9505      	str	r5, [sp, #20]
 8021a12:	1af5      	subs	r5, r6, r3
 8021a14:	17ef      	asrs	r7, r5, #31
 8021a16:	970b      	str	r7, [sp, #44]	@ 0x2c
 8021a18:	6857      	ldr	r7, [r2, #4]
 8021a1a:	0003      	movs	r3, r0
 8021a1c:	17fe      	asrs	r6, r7, #31
 8021a1e:	000a      	movs	r2, r1
 8021a20:	9108      	str	r1, [sp, #32]
 8021a22:	900a      	str	r0, [sp, #40]	@ 0x28
 8021a24:	17e1      	asrs	r1, r4, #31
 8021a26:	0020      	movs	r0, r4
 8021a28:	960c      	str	r6, [sp, #48]	@ 0x30
 8021a2a:	f7de fdc9 	bl	80005c0 <__aeabi_lmul>
 8021a2e:	003a      	movs	r2, r7
 8021a30:	17fb      	asrs	r3, r7, #31
 8021a32:	000e      	movs	r6, r1
 8021a34:	0028      	movs	r0, r5
 8021a36:	17e9      	asrs	r1, r5, #31
 8021a38:	f7de fdc2 	bl	80005c0 <__aeabi_lmul>
 8021a3c:	4653      	mov	r3, sl
 8021a3e:	1a76      	subs	r6, r6, r1
 8021a40:	0076      	lsls	r6, r6, #1
 8021a42:	601e      	str	r6, [r3, #0]
 8021a44:	002a      	movs	r2, r5
 8021a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021a48:	9808      	ldr	r0, [sp, #32]
 8021a4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021a4c:	f7de fdb8 	bl	80005c0 <__aeabi_lmul>
 8021a50:	003a      	movs	r2, r7
 8021a52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021a54:	000d      	movs	r5, r1
 8021a56:	0020      	movs	r0, r4
 8021a58:	9907      	ldr	r1, [sp, #28]
 8021a5a:	f7de fdb1 	bl	80005c0 <__aeabi_lmul>
 8021a5e:	4657      	mov	r7, sl
 8021a60:	186d      	adds	r5, r5, r1
 8021a62:	006d      	lsls	r5, r5, #1
 8021a64:	607d      	str	r5, [r7, #4]
 8021a66:	9b03      	ldr	r3, [sp, #12]
 8021a68:	9e06      	ldr	r6, [sp, #24]
 8021a6a:	9d05      	ldr	r5, [sp, #20]
 8021a6c:	46b4      	mov	ip, r6
 8021a6e:	1b5d      	subs	r5, r3, r5
 8021a70:	9b00      	ldr	r3, [sp, #0]
 8021a72:	17ef      	asrs	r7, r5, #31
 8021a74:	0039      	movs	r1, r7
 8021a76:	681f      	ldr	r7, [r3, #0]
 8021a78:	17fc      	asrs	r4, r7, #31
 8021a7a:	0020      	movs	r0, r4
 8021a7c:	9c04      	ldr	r4, [sp, #16]
 8021a7e:	4464      	add	r4, ip
 8021a80:	17e6      	asrs	r6, r4, #31
 8021a82:	9407      	str	r4, [sp, #28]
 8021a84:	9608      	str	r6, [sp, #32]
 8021a86:	685e      	ldr	r6, [r3, #4]
 8021a88:	900b      	str	r0, [sp, #44]	@ 0x2c
 8021a8a:	17f2      	asrs	r2, r6, #31
 8021a8c:	0003      	movs	r3, r0
 8021a8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8021a90:	0028      	movs	r0, r5
 8021a92:	003a      	movs	r2, r7
 8021a94:	910a      	str	r1, [sp, #40]	@ 0x28
 8021a96:	f7de fd93 	bl	80005c0 <__aeabi_lmul>
 8021a9a:	0032      	movs	r2, r6
 8021a9c:	17f3      	asrs	r3, r6, #31
 8021a9e:	9807      	ldr	r0, [sp, #28]
 8021aa0:	000c      	movs	r4, r1
 8021aa2:	9908      	ldr	r1, [sp, #32]
 8021aa4:	f7de fd8c 	bl	80005c0 <__aeabi_lmul>
 8021aa8:	4658      	mov	r0, fp
 8021aaa:	1a64      	subs	r4, r4, r1
 8021aac:	0064      	lsls	r4, r4, #1
 8021aae:	9a07      	ldr	r2, [sp, #28]
 8021ab0:	6004      	str	r4, [r0, #0]
 8021ab2:	9b08      	ldr	r3, [sp, #32]
 8021ab4:	0038      	movs	r0, r7
 8021ab6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021ab8:	f7de fd82 	bl	80005c0 <__aeabi_lmul>
 8021abc:	0032      	movs	r2, r6
 8021abe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ac0:	000c      	movs	r4, r1
 8021ac2:	0028      	movs	r0, r5
 8021ac4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8021ac6:	f7de fd7b 	bl	80005c0 <__aeabi_lmul>
 8021aca:	9d05      	ldr	r5, [sp, #20]
 8021acc:	465f      	mov	r7, fp
 8021ace:	46ac      	mov	ip, r5
 8021ad0:	1864      	adds	r4, r4, r1
 8021ad2:	9903      	ldr	r1, [sp, #12]
 8021ad4:	0064      	lsls	r4, r4, #1
 8021ad6:	4461      	add	r1, ip
 8021ad8:	607c      	str	r4, [r7, #4]
 8021ada:	000c      	movs	r4, r1
 8021adc:	17c9      	asrs	r1, r1, #31
 8021ade:	9105      	str	r1, [sp, #20]
 8021ae0:	9902      	ldr	r1, [sp, #8]
 8021ae2:	9804      	ldr	r0, [sp, #16]
 8021ae4:	680d      	ldr	r5, [r1, #0]
 8021ae6:	9e06      	ldr	r6, [sp, #24]
 8021ae8:	002b      	movs	r3, r5
 8021aea:	17ed      	asrs	r5, r5, #31
 8021aec:	684f      	ldr	r7, [r1, #4]
 8021aee:	9503      	str	r5, [sp, #12]
 8021af0:	1b85      	subs	r5, r0, r6
 8021af2:	17e8      	asrs	r0, r5, #31
 8021af4:	001a      	movs	r2, r3
 8021af6:	9006      	str	r0, [sp, #24]
 8021af8:	17fe      	asrs	r6, r7, #31
 8021afa:	9304      	str	r3, [sp, #16]
 8021afc:	0020      	movs	r0, r4
 8021afe:	9b03      	ldr	r3, [sp, #12]
 8021b00:	17e1      	asrs	r1, r4, #31
 8021b02:	9607      	str	r6, [sp, #28]
 8021b04:	f7de fd5c 	bl	80005c0 <__aeabi_lmul>
 8021b08:	003a      	movs	r2, r7
 8021b0a:	000e      	movs	r6, r1
 8021b0c:	17fb      	asrs	r3, r7, #31
 8021b0e:	0028      	movs	r0, r5
 8021b10:	17e9      	asrs	r1, r5, #31
 8021b12:	f7de fd55 	bl	80005c0 <__aeabi_lmul>
 8021b16:	4640      	mov	r0, r8
 8021b18:	1a76      	subs	r6, r6, r1
 8021b1a:	0076      	lsls	r6, r6, #1
 8021b1c:	002a      	movs	r2, r5
 8021b1e:	9b06      	ldr	r3, [sp, #24]
 8021b20:	6006      	str	r6, [r0, #0]
 8021b22:	9903      	ldr	r1, [sp, #12]
 8021b24:	9804      	ldr	r0, [sp, #16]
 8021b26:	f7de fd4b 	bl	80005c0 <__aeabi_lmul>
 8021b2a:	0020      	movs	r0, r4
 8021b2c:	2408      	movs	r4, #8
 8021b2e:	9b07      	ldr	r3, [sp, #28]
 8021b30:	000d      	movs	r5, r1
 8021b32:	003a      	movs	r2, r7
 8021b34:	9905      	ldr	r1, [sp, #20]
 8021b36:	f7de fd43 	bl	80005c0 <__aeabi_lmul>
 8021b3a:	4640      	mov	r0, r8
 8021b3c:	46a4      	mov	ip, r4
 8021b3e:	186d      	adds	r5, r5, r1
 8021b40:	006d      	lsls	r5, r5, #1
 8021b42:	6045      	str	r5, [r0, #4]
 8021b44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021b46:	44e1      	add	r9, ip
 8021b48:	3801      	subs	r0, #1
 8021b4a:	9009      	str	r0, [sp, #36]	@ 0x24
 8021b4c:	9a01      	ldr	r2, [sp, #4]
 8021b4e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021b50:	44e2      	add	sl, ip
 8021b52:	44e3      	add	fp, ip
 8021b54:	44e0      	add	r8, ip
 8021b56:	46a4      	mov	ip, r4
 8021b58:	4462      	add	r2, ip
 8021b5a:	9201      	str	r2, [sp, #4]
 8021b5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021b5e:	9b00      	ldr	r3, [sp, #0]
 8021b60:	4694      	mov	ip, r2
 8021b62:	4463      	add	r3, ip
 8021b64:	9300      	str	r3, [sp, #0]
 8021b66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021b68:	9902      	ldr	r1, [sp, #8]
 8021b6a:	469c      	mov	ip, r3
 8021b6c:	4461      	add	r1, ip
 8021b6e:	9102      	str	r1, [sp, #8]
 8021b70:	2800      	cmp	r0, #0
 8021b72:	d000      	beq.n	8021b76 <arm_radix4_butterfly_inverse_q31+0x22e>
 8021b74:	e70f      	b.n	8021996 <arm_radix4_butterfly_inverse_q31+0x4e>
 8021b76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021b78:	009b      	lsls	r3, r3, #2
 8021b7a:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021b7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021b7e:	9320      	str	r3, [sp, #128]	@ 0x80
 8021b80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021b82:	2b04      	cmp	r3, #4
 8021b84:	d800      	bhi.n	8021b88 <arm_radix4_butterfly_inverse_q31+0x240>
 8021b86:	e17c      	b.n	8021e82 <arm_radix4_butterfly_inverse_q31+0x53a>
 8021b88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8021b8a:	0893      	lsrs	r3, r2, #2
 8021b8c:	1e59      	subs	r1, r3, #1
 8021b8e:	9321      	str	r3, [sp, #132]	@ 0x84
 8021b90:	00db      	lsls	r3, r3, #3
 8021b92:	931b      	str	r3, [sp, #108]	@ 0x6c
 8021b94:	00d3      	lsls	r3, r2, #3
 8021b96:	9300      	str	r3, [sp, #0]
 8021b98:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021b9a:	911a      	str	r1, [sp, #104]	@ 0x68
 8021b9c:	00da      	lsls	r2, r3, #3
 8021b9e:	921e      	str	r2, [sp, #120]	@ 0x78
 8021ba0:	011a      	lsls	r2, r3, #4
 8021ba2:	921d      	str	r2, [sp, #116]	@ 0x74
 8021ba4:	001a      	movs	r2, r3
 8021ba6:	4694      	mov	ip, r2
 8021ba8:	005b      	lsls	r3, r3, #1
 8021baa:	4463      	add	r3, ip
 8021bac:	00db      	lsls	r3, r3, #3
 8021bae:	931c      	str	r3, [sp, #112]	@ 0x70
 8021bb0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021bb2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021bb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8021bb6:	9318      	str	r3, [sp, #96]	@ 0x60
 8021bb8:	9319      	str	r3, [sp, #100]	@ 0x64
 8021bba:	9316      	str	r3, [sp, #88]	@ 0x58
 8021bbc:	2300      	movs	r3, #0
 8021bbe:	9315      	str	r3, [sp, #84]	@ 0x54
 8021bc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021bc2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021bc4:	681a      	ldr	r2, [r3, #0]
 8021bc6:	685b      	ldr	r3, [r3, #4]
 8021bc8:	9205      	str	r2, [sp, #20]
 8021bca:	9306      	str	r3, [sp, #24]
 8021bcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8021bce:	468c      	mov	ip, r1
 8021bd0:	681a      	ldr	r2, [r3, #0]
 8021bd2:	685b      	ldr	r3, [r3, #4]
 8021bd4:	9207      	str	r2, [sp, #28]
 8021bd6:	9308      	str	r3, [sp, #32]
 8021bd8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021bda:	681a      	ldr	r2, [r3, #0]
 8021bdc:	685b      	ldr	r3, [r3, #4]
 8021bde:	9209      	str	r2, [sp, #36]	@ 0x24
 8021be0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8021be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8021be4:	0013      	movs	r3, r2
 8021be6:	4463      	add	r3, ip
 8021be8:	4698      	mov	r8, r3
 8021bea:	0013      	movs	r3, r2
 8021bec:	4442      	add	r2, r8
 8021bee:	4691      	mov	r9, r2
 8021bf0:	001a      	movs	r2, r3
 8021bf2:	444a      	add	r2, r9
 8021bf4:	4692      	mov	sl, r2
 8021bf6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021bf8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021bfa:	4293      	cmp	r3, r2
 8021bfc:	d800      	bhi.n	8021c00 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8021bfe:	e0d9      	b.n	8021db4 <arm_radix4_butterfly_inverse_q31+0x46c>
 8021c00:	4694      	mov	ip, r2
 8021c02:	4644      	mov	r4, r8
 8021c04:	4655      	mov	r5, sl
 8021c06:	4688      	mov	r8, r1
 8021c08:	9b07      	ldr	r3, [sp, #28]
 8021c0a:	17db      	asrs	r3, r3, #31
 8021c0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8021c0e:	9b08      	ldr	r3, [sp, #32]
 8021c10:	17db      	asrs	r3, r3, #31
 8021c12:	930d      	str	r3, [sp, #52]	@ 0x34
 8021c14:	9b05      	ldr	r3, [sp, #20]
 8021c16:	17db      	asrs	r3, r3, #31
 8021c18:	930e      	str	r3, [sp, #56]	@ 0x38
 8021c1a:	9b06      	ldr	r3, [sp, #24]
 8021c1c:	17db      	asrs	r3, r3, #31
 8021c1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c22:	17db      	asrs	r3, r3, #31
 8021c24:	9310      	str	r3, [sp, #64]	@ 0x40
 8021c26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021c28:	17db      	asrs	r3, r3, #31
 8021c2a:	9311      	str	r3, [sp, #68]	@ 0x44
 8021c2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021c2e:	4463      	add	r3, ip
 8021c30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021c32:	4643      	mov	r3, r8
 8021c34:	4641      	mov	r1, r8
 8021c36:	681a      	ldr	r2, [r3, #0]
 8021c38:	464b      	mov	r3, r9
 8021c3a:	684f      	ldr	r7, [r1, #4]
 8021c3c:	4649      	mov	r1, r9
 8021c3e:	681b      	ldr	r3, [r3, #0]
 8021c40:	18d6      	adds	r6, r2, r3
 8021c42:	1ad3      	subs	r3, r2, r3
 8021c44:	9301      	str	r3, [sp, #4]
 8021c46:	684b      	ldr	r3, [r1, #4]
 8021c48:	1af9      	subs	r1, r7, r3
 8021c4a:	9102      	str	r1, [sp, #8]
 8021c4c:	6829      	ldr	r1, [r5, #0]
 8021c4e:	18f8      	adds	r0, r7, r3
 8021c50:	468c      	mov	ip, r1
 8021c52:	6827      	ldr	r7, [r4, #0]
 8021c54:	4467      	add	r7, ip
 8021c56:	003a      	movs	r2, r7
 8021c58:	19f3      	adds	r3, r6, r7
 8021c5a:	4647      	mov	r7, r8
 8021c5c:	109b      	asrs	r3, r3, #2
 8021c5e:	603b      	str	r3, [r7, #0]
 8021c60:	6869      	ldr	r1, [r5, #4]
 8021c62:	6867      	ldr	r7, [r4, #4]
 8021c64:	468c      	mov	ip, r1
 8021c66:	4467      	add	r7, ip
 8021c68:	003b      	movs	r3, r7
 8021c6a:	19c1      	adds	r1, r0, r7
 8021c6c:	4647      	mov	r7, r8
 8021c6e:	1ab6      	subs	r6, r6, r2
 8021c70:	1089      	asrs	r1, r1, #2
 8021c72:	6079      	str	r1, [r7, #4]
 8021c74:	17f2      	asrs	r2, r6, #31
 8021c76:	9900      	ldr	r1, [sp, #0]
 8021c78:	4692      	mov	sl, r2
 8021c7a:	468c      	mov	ip, r1
 8021c7c:	6867      	ldr	r7, [r4, #4]
 8021c7e:	6869      	ldr	r1, [r5, #4]
 8021c80:	44e0      	add	r8, ip
 8021c82:	1a7f      	subs	r7, r7, r1
 8021c84:	9703      	str	r7, [sp, #12]
 8021c86:	6821      	ldr	r1, [r4, #0]
 8021c88:	682f      	ldr	r7, [r5, #0]
 8021c8a:	1bc9      	subs	r1, r1, r7
 8021c8c:	1ac7      	subs	r7, r0, r3
 8021c8e:	17fa      	asrs	r2, r7, #31
 8021c90:	4693      	mov	fp, r2
 8021c92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021c94:	9a07      	ldr	r2, [sp, #28]
 8021c96:	9104      	str	r1, [sp, #16]
 8021c98:	0030      	movs	r0, r6
 8021c9a:	4651      	mov	r1, sl
 8021c9c:	f7de fc90 	bl	80005c0 <__aeabi_lmul>
 8021ca0:	9a08      	ldr	r2, [sp, #32]
 8021ca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021ca4:	9112      	str	r1, [sp, #72]	@ 0x48
 8021ca6:	0038      	movs	r0, r7
 8021ca8:	4659      	mov	r1, fp
 8021caa:	f7de fc89 	bl	80005c0 <__aeabi_lmul>
 8021cae:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8021cb0:	9a07      	ldr	r2, [sp, #28]
 8021cb2:	1a41      	subs	r1, r0, r1
 8021cb4:	1049      	asrs	r1, r1, #1
 8021cb6:	6021      	str	r1, [r4, #0]
 8021cb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021cba:	0038      	movs	r0, r7
 8021cbc:	4659      	mov	r1, fp
 8021cbe:	f7de fc7f 	bl	80005c0 <__aeabi_lmul>
 8021cc2:	9a08      	ldr	r2, [sp, #32]
 8021cc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021cc6:	000f      	movs	r7, r1
 8021cc8:	0030      	movs	r0, r6
 8021cca:	4651      	mov	r1, sl
 8021ccc:	f7de fc78 	bl	80005c0 <__aeabi_lmul>
 8021cd0:	9b00      	ldr	r3, [sp, #0]
 8021cd2:	187f      	adds	r7, r7, r1
 8021cd4:	469c      	mov	ip, r3
 8021cd6:	107f      	asrs	r7, r7, #1
 8021cd8:	6067      	str	r7, [r4, #4]
 8021cda:	9a01      	ldr	r2, [sp, #4]
 8021cdc:	9f03      	ldr	r7, [sp, #12]
 8021cde:	9802      	ldr	r0, [sp, #8]
 8021ce0:	1bd7      	subs	r7, r2, r7
 8021ce2:	17fe      	asrs	r6, r7, #31
 8021ce4:	0031      	movs	r1, r6
 8021ce6:	9e04      	ldr	r6, [sp, #16]
 8021ce8:	4682      	mov	sl, r0
 8021cea:	4464      	add	r4, ip
 8021cec:	46b4      	mov	ip, r6
 8021cee:	44e2      	add	sl, ip
 8021cf0:	4652      	mov	r2, sl
 8021cf2:	17d2      	asrs	r2, r2, #31
 8021cf4:	4693      	mov	fp, r2
 8021cf6:	0038      	movs	r0, r7
 8021cf8:	9a05      	ldr	r2, [sp, #20]
 8021cfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021cfc:	9112      	str	r1, [sp, #72]	@ 0x48
 8021cfe:	f7de fc5f 	bl	80005c0 <__aeabi_lmul>
 8021d02:	9a06      	ldr	r2, [sp, #24]
 8021d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021d06:	000e      	movs	r6, r1
 8021d08:	4650      	mov	r0, sl
 8021d0a:	4659      	mov	r1, fp
 8021d0c:	f7de fc58 	bl	80005c0 <__aeabi_lmul>
 8021d10:	4648      	mov	r0, r9
 8021d12:	1a76      	subs	r6, r6, r1
 8021d14:	1076      	asrs	r6, r6, #1
 8021d16:	6006      	str	r6, [r0, #0]
 8021d18:	9a05      	ldr	r2, [sp, #20]
 8021d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021d1c:	4650      	mov	r0, sl
 8021d1e:	4659      	mov	r1, fp
 8021d20:	f7de fc4e 	bl	80005c0 <__aeabi_lmul>
 8021d24:	9a06      	ldr	r2, [sp, #24]
 8021d26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021d28:	000e      	movs	r6, r1
 8021d2a:	0038      	movs	r0, r7
 8021d2c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8021d2e:	f7de fc47 	bl	80005c0 <__aeabi_lmul>
 8021d32:	9a00      	ldr	r2, [sp, #0]
 8021d34:	9f03      	ldr	r7, [sp, #12]
 8021d36:	4694      	mov	ip, r2
 8021d38:	1876      	adds	r6, r6, r1
 8021d3a:	4649      	mov	r1, r9
 8021d3c:	44e1      	add	r9, ip
 8021d3e:	46bc      	mov	ip, r7
 8021d40:	9b01      	ldr	r3, [sp, #4]
 8021d42:	1076      	asrs	r6, r6, #1
 8021d44:	4463      	add	r3, ip
 8021d46:	17df      	asrs	r7, r3, #31
 8021d48:	604e      	str	r6, [r1, #4]
 8021d4a:	46ba      	mov	sl, r7
 8021d4c:	001e      	movs	r6, r3
 8021d4e:	9802      	ldr	r0, [sp, #8]
 8021d50:	9b04      	ldr	r3, [sp, #16]
 8021d52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021d54:	1ac7      	subs	r7, r0, r3
 8021d56:	17fb      	asrs	r3, r7, #31
 8021d58:	469b      	mov	fp, r3
 8021d5a:	0030      	movs	r0, r6
 8021d5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021d5e:	4651      	mov	r1, sl
 8021d60:	f7de fc2e 	bl	80005c0 <__aeabi_lmul>
 8021d64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021d66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021d68:	9101      	str	r1, [sp, #4]
 8021d6a:	0038      	movs	r0, r7
 8021d6c:	4659      	mov	r1, fp
 8021d6e:	f7de fc27 	bl	80005c0 <__aeabi_lmul>
 8021d72:	9801      	ldr	r0, [sp, #4]
 8021d74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021d76:	1a41      	subs	r1, r0, r1
 8021d78:	1049      	asrs	r1, r1, #1
 8021d7a:	6029      	str	r1, [r5, #0]
 8021d7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021d7e:	0038      	movs	r0, r7
 8021d80:	4659      	mov	r1, fp
 8021d82:	f7de fc1d 	bl	80005c0 <__aeabi_lmul>
 8021d86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021d88:	000f      	movs	r7, r1
 8021d8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021d8c:	0030      	movs	r0, r6
 8021d8e:	4651      	mov	r1, sl
 8021d90:	f7de fc16 	bl	80005c0 <__aeabi_lmul>
 8021d94:	187f      	adds	r7, r7, r1
 8021d96:	107f      	asrs	r7, r7, #1
 8021d98:	606f      	str	r7, [r5, #4]
 8021d9a:	9a00      	ldr	r2, [sp, #0]
 8021d9c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8021d9e:	4694      	mov	ip, r2
 8021da0:	4465      	add	r5, ip
 8021da2:	468c      	mov	ip, r1
 8021da4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021da6:	0013      	movs	r3, r2
 8021da8:	4462      	add	r2, ip
 8021daa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021dac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021dae:	429a      	cmp	r2, r3
 8021db0:	d900      	bls.n	8021db4 <arm_radix4_butterfly_inverse_q31+0x46c>
 8021db2:	e73e      	b.n	8021c32 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8021db4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021db6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021db8:	468c      	mov	ip, r1
 8021dba:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8021dbc:	4462      	add	r2, ip
 8021dbe:	468c      	mov	ip, r1
 8021dc0:	9216      	str	r2, [sp, #88]	@ 0x58
 8021dc2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8021dc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8021dc6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021dc8:	4462      	add	r2, ip
 8021dca:	468c      	mov	ip, r1
 8021dcc:	9219      	str	r2, [sp, #100]	@ 0x64
 8021dce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8021dd0:	3301      	adds	r3, #1
 8021dd2:	4462      	add	r2, ip
 8021dd4:	9218      	str	r2, [sp, #96]	@ 0x60
 8021dd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8021dd8:	9315      	str	r3, [sp, #84]	@ 0x54
 8021dda:	3208      	adds	r2, #8
 8021ddc:	9217      	str	r2, [sp, #92]	@ 0x5c
 8021dde:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8021de0:	4293      	cmp	r3, r2
 8021de2:	d800      	bhi.n	8021de6 <arm_radix4_butterfly_inverse_q31+0x49e>
 8021de4:	e6ec      	b.n	8021bc0 <arm_radix4_butterfly_inverse_q31+0x278>
 8021de6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021de8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8021dea:	009b      	lsls	r3, r3, #2
 8021dec:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021dee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021df0:	9213      	str	r2, [sp, #76]	@ 0x4c
 8021df2:	089b      	lsrs	r3, r3, #2
 8021df4:	9320      	str	r3, [sp, #128]	@ 0x80
 8021df6:	2b04      	cmp	r3, #4
 8021df8:	d900      	bls.n	8021dfc <arm_radix4_butterfly_inverse_q31+0x4b4>
 8021dfa:	e6c5      	b.n	8021b88 <arm_radix4_butterfly_inverse_q31+0x240>
 8021dfc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021dfe:	469a      	mov	sl, r3
 8021e00:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021e02:	681a      	ldr	r2, [r3, #0]
 8021e04:	6918      	ldr	r0, [r3, #16]
 8021e06:	4691      	mov	r9, r2
 8021e08:	464c      	mov	r4, r9
 8021e0a:	4680      	mov	r8, r0
 8021e0c:	69de      	ldr	r6, [r3, #28]
 8021e0e:	689d      	ldr	r5, [r3, #8]
 8021e10:	46b4      	mov	ip, r6
 8021e12:	6998      	ldr	r0, [r3, #24]
 8021e14:	1964      	adds	r4, r4, r5
 8021e16:	6859      	ldr	r1, [r3, #4]
 8021e18:	68da      	ldr	r2, [r3, #12]
 8021e1a:	4444      	add	r4, r8
 8021e1c:	695f      	ldr	r7, [r3, #20]
 8021e1e:	1824      	adds	r4, r4, r0
 8021e20:	601c      	str	r4, [r3, #0]
 8021e22:	188c      	adds	r4, r1, r2
 8021e24:	19e4      	adds	r4, r4, r7
 8021e26:	4464      	add	r4, ip
 8021e28:	605c      	str	r4, [r3, #4]
 8021e2a:	464c      	mov	r4, r9
 8021e2c:	1b64      	subs	r4, r4, r5
 8021e2e:	4444      	add	r4, r8
 8021e30:	1a24      	subs	r4, r4, r0
 8021e32:	609c      	str	r4, [r3, #8]
 8021e34:	1a8c      	subs	r4, r1, r2
 8021e36:	19e4      	adds	r4, r4, r7
 8021e38:	1ba4      	subs	r4, r4, r6
 8021e3a:	60dc      	str	r4, [r3, #12]
 8021e3c:	464c      	mov	r4, r9
 8021e3e:	4646      	mov	r6, r8
 8021e40:	1aa4      	subs	r4, r4, r2
 8021e42:	1ba4      	subs	r4, r4, r6
 8021e44:	4464      	add	r4, ip
 8021e46:	611c      	str	r4, [r3, #16]
 8021e48:	194c      	adds	r4, r1, r5
 8021e4a:	1be4      	subs	r4, r4, r7
 8021e4c:	1a24      	subs	r4, r4, r0
 8021e4e:	615c      	str	r4, [r3, #20]
 8021e50:	4644      	mov	r4, r8
 8021e52:	4666      	mov	r6, ip
 8021e54:	444a      	add	r2, r9
 8021e56:	1b12      	subs	r2, r2, r4
 8021e58:	1b92      	subs	r2, r2, r6
 8021e5a:	619a      	str	r2, [r3, #24]
 8021e5c:	1b4a      	subs	r2, r1, r5
 8021e5e:	1bd1      	subs	r1, r2, r7
 8021e60:	2201      	movs	r2, #1
 8021e62:	4252      	negs	r2, r2
 8021e64:	4694      	mov	ip, r2
 8021e66:	44e2      	add	sl, ip
 8021e68:	4652      	mov	r2, sl
 8021e6a:	1809      	adds	r1, r1, r0
 8021e6c:	61d9      	str	r1, [r3, #28]
 8021e6e:	3320      	adds	r3, #32
 8021e70:	2a00      	cmp	r2, #0
 8021e72:	d1c6      	bne.n	8021e02 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8021e74:	b027      	add	sp, #156	@ 0x9c
 8021e76:	bc3c      	pop	{r2, r3, r4, r5}
 8021e78:	4690      	mov	r8, r2
 8021e7a:	4699      	mov	r9, r3
 8021e7c:	46a2      	mov	sl, r4
 8021e7e:	46ab      	mov	fp, r5
 8021e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021e82:	469a      	mov	sl, r3
 8021e84:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021e86:	e7bc      	b.n	8021e02 <arm_radix4_butterfly_inverse_q31+0x4ba>

08021e88 <arm_cmplx_mag_squared_q31>:
 8021e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e8a:	464f      	mov	r7, r9
 8021e8c:	4646      	mov	r6, r8
 8021e8e:	0004      	movs	r4, r0
 8021e90:	b4c0      	push	{r6, r7}
 8021e92:	0016      	movs	r6, r2
 8021e94:	000f      	movs	r7, r1
 8021e96:	2a00      	cmp	r2, #0
 8021e98:	d018      	beq.n	8021ecc <arm_cmplx_mag_squared_q31+0x44>
 8021e9a:	6823      	ldr	r3, [r4, #0]
 8021e9c:	6822      	ldr	r2, [r4, #0]
 8021e9e:	17d9      	asrs	r1, r3, #31
 8021ea0:	6863      	ldr	r3, [r4, #4]
 8021ea2:	0010      	movs	r0, r2
 8021ea4:	4698      	mov	r8, r3
 8021ea6:	17db      	asrs	r3, r3, #31
 8021ea8:	4699      	mov	r9, r3
 8021eaa:	000b      	movs	r3, r1
 8021eac:	f7de fb88 	bl	80005c0 <__aeabi_lmul>
 8021eb0:	4642      	mov	r2, r8
 8021eb2:	104d      	asrs	r5, r1, #1
 8021eb4:	464b      	mov	r3, r9
 8021eb6:	4640      	mov	r0, r8
 8021eb8:	4649      	mov	r1, r9
 8021eba:	f7de fb81 	bl	80005c0 <__aeabi_lmul>
 8021ebe:	1049      	asrs	r1, r1, #1
 8021ec0:	1869      	adds	r1, r5, r1
 8021ec2:	3e01      	subs	r6, #1
 8021ec4:	c702      	stmia	r7!, {r1}
 8021ec6:	3408      	adds	r4, #8
 8021ec8:	2e00      	cmp	r6, #0
 8021eca:	d1e6      	bne.n	8021e9a <arm_cmplx_mag_squared_q31+0x12>
 8021ecc:	bc0c      	pop	{r2, r3}
 8021ece:	4690      	mov	r8, r2
 8021ed0:	4699      	mov	r9, r3
 8021ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021ed4 <arm_mult_q31>:
 8021ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ed6:	4646      	mov	r6, r8
 8021ed8:	464f      	mov	r7, r9
 8021eda:	4690      	mov	r8, r2
 8021edc:	b4c0      	push	{r6, r7}
 8021ede:	001d      	movs	r5, r3
 8021ee0:	0006      	movs	r6, r0
 8021ee2:	000f      	movs	r7, r1
 8021ee4:	2400      	movs	r4, #0
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	d020      	beq.n	8021f2c <arm_mult_q31+0x58>
 8021eea:	4b12      	ldr	r3, [pc, #72]	@ (8021f34 <arm_mult_q31+0x60>)
 8021eec:	4699      	mov	r9, r3
 8021eee:	e007      	b.n	8021f00 <arm_mult_q31+0x2c>
 8021ef0:	464b      	mov	r3, r9
 8021ef2:	4059      	eors	r1, r3
 8021ef4:	4643      	mov	r3, r8
 8021ef6:	3d01      	subs	r5, #1
 8021ef8:	5119      	str	r1, [r3, r4]
 8021efa:	3404      	adds	r4, #4
 8021efc:	2d00      	cmp	r5, #0
 8021efe:	d015      	beq.n	8021f2c <arm_mult_q31+0x58>
 8021f00:	5933      	ldr	r3, [r6, r4]
 8021f02:	593a      	ldr	r2, [r7, r4]
 8021f04:	17d9      	asrs	r1, r3, #31
 8021f06:	593b      	ldr	r3, [r7, r4]
 8021f08:	5930      	ldr	r0, [r6, r4]
 8021f0a:	17db      	asrs	r3, r3, #31
 8021f0c:	f7de fb58 	bl	80005c0 <__aeabi_lmul>
 8021f10:	004b      	lsls	r3, r1, #1
 8021f12:	0fc0      	lsrs	r0, r0, #31
 8021f14:	4318      	orrs	r0, r3
 8021f16:	17c9      	asrs	r1, r1, #31
 8021f18:	17c3      	asrs	r3, r0, #31
 8021f1a:	428b      	cmp	r3, r1
 8021f1c:	d1e8      	bne.n	8021ef0 <arm_mult_q31+0x1c>
 8021f1e:	0001      	movs	r1, r0
 8021f20:	4643      	mov	r3, r8
 8021f22:	3d01      	subs	r5, #1
 8021f24:	5119      	str	r1, [r3, r4]
 8021f26:	3404      	adds	r4, #4
 8021f28:	2d00      	cmp	r5, #0
 8021f2a:	d1e9      	bne.n	8021f00 <arm_mult_q31+0x2c>
 8021f2c:	bc0c      	pop	{r2, r3}
 8021f2e:	4690      	mov	r8, r2
 8021f30:	4699      	mov	r9, r3
 8021f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021f34:	7fffffff 	.word	0x7fffffff

08021f38 <arm_add_q31>:
 8021f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f3a:	465f      	mov	r7, fp
 8021f3c:	4656      	mov	r6, sl
 8021f3e:	464d      	mov	r5, r9
 8021f40:	4644      	mov	r4, r8
 8021f42:	b4f0      	push	{r4, r5, r6, r7}
 8021f44:	4693      	mov	fp, r2
 8021f46:	b083      	sub	sp, #12
 8021f48:	4681      	mov	r9, r0
 8021f4a:	468a      	mov	sl, r1
 8021f4c:	4698      	mov	r8, r3
 8021f4e:	2200      	movs	r2, #0
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	d020      	beq.n	8021f96 <arm_add_q31+0x5e>
 8021f54:	4649      	mov	r1, r9
 8021f56:	4653      	mov	r3, sl
 8021f58:	588e      	ldr	r6, [r1, r2]
 8021f5a:	589b      	ldr	r3, [r3, r2]
 8021f5c:	17f7      	asrs	r7, r6, #31
 8021f5e:	001c      	movs	r4, r3
 8021f60:	0030      	movs	r0, r6
 8021f62:	0039      	movs	r1, r7
 8021f64:	17dd      	asrs	r5, r3, #31
 8021f66:	46b4      	mov	ip, r6
 8021f68:	1900      	adds	r0, r0, r4
 8021f6a:	4169      	adcs	r1, r5
 8021f6c:	4463      	add	r3, ip
 8021f6e:	9000      	str	r0, [sp, #0]
 8021f70:	9101      	str	r1, [sp, #4]
 8021f72:	17d9      	asrs	r1, r3, #31
 8021f74:	468c      	mov	ip, r1
 8021f76:	9901      	ldr	r1, [sp, #4]
 8021f78:	458c      	cmp	ip, r1
 8021f7a:	d002      	beq.n	8021f82 <arm_add_q31+0x4a>
 8021f7c:	17cb      	asrs	r3, r1, #31
 8021f7e:	4909      	ldr	r1, [pc, #36]	@ (8021fa4 <arm_add_q31+0x6c>)
 8021f80:	404b      	eors	r3, r1
 8021f82:	4659      	mov	r1, fp
 8021f84:	508b      	str	r3, [r1, r2]
 8021f86:	2301      	movs	r3, #1
 8021f88:	425b      	negs	r3, r3
 8021f8a:	469c      	mov	ip, r3
 8021f8c:	44e0      	add	r8, ip
 8021f8e:	4643      	mov	r3, r8
 8021f90:	3204      	adds	r2, #4
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	d1de      	bne.n	8021f54 <arm_add_q31+0x1c>
 8021f96:	b003      	add	sp, #12
 8021f98:	bc3c      	pop	{r2, r3, r4, r5}
 8021f9a:	4690      	mov	r8, r2
 8021f9c:	4699      	mov	r9, r3
 8021f9e:	46a2      	mov	sl, r4
 8021fa0:	46ab      	mov	fp, r5
 8021fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021fa4:	7fffffff 	.word	0x7fffffff

08021fa8 <atof>:
 8021fa8:	b510      	push	{r4, lr}
 8021faa:	2100      	movs	r1, #0
 8021fac:	f000 fe12 	bl	8022bd4 <strtod>
 8021fb0:	bd10      	pop	{r4, pc}

08021fb2 <atoi>:
 8021fb2:	b510      	push	{r4, lr}
 8021fb4:	220a      	movs	r2, #10
 8021fb6:	2100      	movs	r1, #0
 8021fb8:	f000 fea4 	bl	8022d04 <strtol>
 8021fbc:	bd10      	pop	{r4, pc}
	...

08021fc0 <sulp>:
 8021fc0:	b570      	push	{r4, r5, r6, lr}
 8021fc2:	0016      	movs	r6, r2
 8021fc4:	000d      	movs	r5, r1
 8021fc6:	f003 fd15 	bl	80259f4 <__ulp>
 8021fca:	2e00      	cmp	r6, #0
 8021fcc:	d00d      	beq.n	8021fea <sulp+0x2a>
 8021fce:	236b      	movs	r3, #107	@ 0x6b
 8021fd0:	006a      	lsls	r2, r5, #1
 8021fd2:	0d52      	lsrs	r2, r2, #21
 8021fd4:	1a9b      	subs	r3, r3, r2
 8021fd6:	2b00      	cmp	r3, #0
 8021fd8:	dd07      	ble.n	8021fea <sulp+0x2a>
 8021fda:	2400      	movs	r4, #0
 8021fdc:	4a03      	ldr	r2, [pc, #12]	@ (8021fec <sulp+0x2c>)
 8021fde:	051b      	lsls	r3, r3, #20
 8021fe0:	189d      	adds	r5, r3, r2
 8021fe2:	002b      	movs	r3, r5
 8021fe4:	0022      	movs	r2, r4
 8021fe6:	f7e0 fb29 	bl	800263c <__aeabi_dmul>
 8021fea:	bd70      	pop	{r4, r5, r6, pc}
 8021fec:	3ff00000 	.word	0x3ff00000

08021ff0 <_strtod_l>:
 8021ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ff2:	b0a3      	sub	sp, #140	@ 0x8c
 8021ff4:	921b      	str	r2, [sp, #108]	@ 0x6c
 8021ff6:	2200      	movs	r2, #0
 8021ff8:	2600      	movs	r6, #0
 8021ffa:	2700      	movs	r7, #0
 8021ffc:	9005      	str	r0, [sp, #20]
 8021ffe:	9109      	str	r1, [sp, #36]	@ 0x24
 8022000:	921e      	str	r2, [sp, #120]	@ 0x78
 8022002:	911d      	str	r1, [sp, #116]	@ 0x74
 8022004:	780a      	ldrb	r2, [r1, #0]
 8022006:	2a2b      	cmp	r2, #43	@ 0x2b
 8022008:	d053      	beq.n	80220b2 <_strtod_l+0xc2>
 802200a:	d83f      	bhi.n	802208c <_strtod_l+0x9c>
 802200c:	2a0d      	cmp	r2, #13
 802200e:	d839      	bhi.n	8022084 <_strtod_l+0x94>
 8022010:	2a08      	cmp	r2, #8
 8022012:	d839      	bhi.n	8022088 <_strtod_l+0x98>
 8022014:	2a00      	cmp	r2, #0
 8022016:	d042      	beq.n	802209e <_strtod_l+0xae>
 8022018:	2200      	movs	r2, #0
 802201a:	9212      	str	r2, [sp, #72]	@ 0x48
 802201c:	2100      	movs	r1, #0
 802201e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8022020:	910c      	str	r1, [sp, #48]	@ 0x30
 8022022:	782a      	ldrb	r2, [r5, #0]
 8022024:	2a30      	cmp	r2, #48	@ 0x30
 8022026:	d000      	beq.n	802202a <_strtod_l+0x3a>
 8022028:	e083      	b.n	8022132 <_strtod_l+0x142>
 802202a:	786a      	ldrb	r2, [r5, #1]
 802202c:	3120      	adds	r1, #32
 802202e:	438a      	bics	r2, r1
 8022030:	2a58      	cmp	r2, #88	@ 0x58
 8022032:	d000      	beq.n	8022036 <_strtod_l+0x46>
 8022034:	e073      	b.n	802211e <_strtod_l+0x12e>
 8022036:	9302      	str	r3, [sp, #8]
 8022038:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802203a:	4a95      	ldr	r2, [pc, #596]	@ (8022290 <_strtod_l+0x2a0>)
 802203c:	9301      	str	r3, [sp, #4]
 802203e:	ab1e      	add	r3, sp, #120	@ 0x78
 8022040:	9300      	str	r3, [sp, #0]
 8022042:	9805      	ldr	r0, [sp, #20]
 8022044:	ab1f      	add	r3, sp, #124	@ 0x7c
 8022046:	a91d      	add	r1, sp, #116	@ 0x74
 8022048:	f002 fd84 	bl	8024b54 <__gethex>
 802204c:	230f      	movs	r3, #15
 802204e:	0002      	movs	r2, r0
 8022050:	401a      	ands	r2, r3
 8022052:	0004      	movs	r4, r0
 8022054:	9206      	str	r2, [sp, #24]
 8022056:	4218      	tst	r0, r3
 8022058:	d005      	beq.n	8022066 <_strtod_l+0x76>
 802205a:	2a06      	cmp	r2, #6
 802205c:	d12b      	bne.n	80220b6 <_strtod_l+0xc6>
 802205e:	2300      	movs	r3, #0
 8022060:	3501      	adds	r5, #1
 8022062:	951d      	str	r5, [sp, #116]	@ 0x74
 8022064:	9312      	str	r3, [sp, #72]	@ 0x48
 8022066:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8022068:	2b00      	cmp	r3, #0
 802206a:	d002      	beq.n	8022072 <_strtod_l+0x82>
 802206c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802206e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8022070:	6013      	str	r3, [r2, #0]
 8022072:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8022074:	2b00      	cmp	r3, #0
 8022076:	d019      	beq.n	80220ac <_strtod_l+0xbc>
 8022078:	2380      	movs	r3, #128	@ 0x80
 802207a:	0030      	movs	r0, r6
 802207c:	061b      	lsls	r3, r3, #24
 802207e:	18f9      	adds	r1, r7, r3
 8022080:	b023      	add	sp, #140	@ 0x8c
 8022082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022084:	2a20      	cmp	r2, #32
 8022086:	d1c7      	bne.n	8022018 <_strtod_l+0x28>
 8022088:	3101      	adds	r1, #1
 802208a:	e7ba      	b.n	8022002 <_strtod_l+0x12>
 802208c:	2a2d      	cmp	r2, #45	@ 0x2d
 802208e:	d1c3      	bne.n	8022018 <_strtod_l+0x28>
 8022090:	3a2c      	subs	r2, #44	@ 0x2c
 8022092:	9212      	str	r2, [sp, #72]	@ 0x48
 8022094:	1c4a      	adds	r2, r1, #1
 8022096:	921d      	str	r2, [sp, #116]	@ 0x74
 8022098:	784a      	ldrb	r2, [r1, #1]
 802209a:	2a00      	cmp	r2, #0
 802209c:	d1be      	bne.n	802201c <_strtod_l+0x2c>
 802209e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80220a0:	931d      	str	r3, [sp, #116]	@ 0x74
 80220a2:	2300      	movs	r3, #0
 80220a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80220a6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80220a8:	2b00      	cmp	r3, #0
 80220aa:	d1df      	bne.n	802206c <_strtod_l+0x7c>
 80220ac:	0030      	movs	r0, r6
 80220ae:	0039      	movs	r1, r7
 80220b0:	e7e6      	b.n	8022080 <_strtod_l+0x90>
 80220b2:	2200      	movs	r2, #0
 80220b4:	e7ed      	b.n	8022092 <_strtod_l+0xa2>
 80220b6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80220b8:	2a00      	cmp	r2, #0
 80220ba:	d007      	beq.n	80220cc <_strtod_l+0xdc>
 80220bc:	2135      	movs	r1, #53	@ 0x35
 80220be:	a820      	add	r0, sp, #128	@ 0x80
 80220c0:	f003 fd8e 	bl	8025be0 <__copybits>
 80220c4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80220c6:	9805      	ldr	r0, [sp, #20]
 80220c8:	f003 f948 	bl	802535c <_Bfree>
 80220cc:	9806      	ldr	r0, [sp, #24]
 80220ce:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80220d0:	3801      	subs	r0, #1
 80220d2:	2804      	cmp	r0, #4
 80220d4:	d806      	bhi.n	80220e4 <_strtod_l+0xf4>
 80220d6:	f7de f851 	bl	800017c <__gnu_thumb1_case_uqi>
 80220da:	0312      	.short	0x0312
 80220dc:	1e1c      	.short	0x1e1c
 80220de:	12          	.byte	0x12
 80220df:	00          	.byte	0x00
 80220e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80220e2:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 80220e4:	05e4      	lsls	r4, r4, #23
 80220e6:	d502      	bpl.n	80220ee <_strtod_l+0xfe>
 80220e8:	2380      	movs	r3, #128	@ 0x80
 80220ea:	061b      	lsls	r3, r3, #24
 80220ec:	431f      	orrs	r7, r3
 80220ee:	4b69      	ldr	r3, [pc, #420]	@ (8022294 <_strtod_l+0x2a4>)
 80220f0:	423b      	tst	r3, r7
 80220f2:	d1b8      	bne.n	8022066 <_strtod_l+0x76>
 80220f4:	f001 fdb2 	bl	8023c5c <__errno>
 80220f8:	2322      	movs	r3, #34	@ 0x22
 80220fa:	6003      	str	r3, [r0, #0]
 80220fc:	e7b3      	b.n	8022066 <_strtod_l+0x76>
 80220fe:	4966      	ldr	r1, [pc, #408]	@ (8022298 <_strtod_l+0x2a8>)
 8022100:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022102:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8022104:	400a      	ands	r2, r1
 8022106:	4965      	ldr	r1, [pc, #404]	@ (802229c <_strtod_l+0x2ac>)
 8022108:	185b      	adds	r3, r3, r1
 802210a:	051b      	lsls	r3, r3, #20
 802210c:	431a      	orrs	r2, r3
 802210e:	0017      	movs	r7, r2
 8022110:	e7e8      	b.n	80220e4 <_strtod_l+0xf4>
 8022112:	4f60      	ldr	r7, [pc, #384]	@ (8022294 <_strtod_l+0x2a4>)
 8022114:	e7e6      	b.n	80220e4 <_strtod_l+0xf4>
 8022116:	2601      	movs	r6, #1
 8022118:	4f61      	ldr	r7, [pc, #388]	@ (80222a0 <_strtod_l+0x2b0>)
 802211a:	4276      	negs	r6, r6
 802211c:	e7e2      	b.n	80220e4 <_strtod_l+0xf4>
 802211e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022120:	1c5a      	adds	r2, r3, #1
 8022122:	921d      	str	r2, [sp, #116]	@ 0x74
 8022124:	785b      	ldrb	r3, [r3, #1]
 8022126:	2b30      	cmp	r3, #48	@ 0x30
 8022128:	d0f9      	beq.n	802211e <_strtod_l+0x12e>
 802212a:	2b00      	cmp	r3, #0
 802212c:	d09b      	beq.n	8022066 <_strtod_l+0x76>
 802212e:	2301      	movs	r3, #1
 8022130:	930c      	str	r3, [sp, #48]	@ 0x30
 8022132:	2500      	movs	r5, #0
 8022134:	220a      	movs	r2, #10
 8022136:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022138:	950d      	str	r5, [sp, #52]	@ 0x34
 802213a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802213c:	9508      	str	r5, [sp, #32]
 802213e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8022140:	7804      	ldrb	r4, [r0, #0]
 8022142:	0023      	movs	r3, r4
 8022144:	3b30      	subs	r3, #48	@ 0x30
 8022146:	b2d9      	uxtb	r1, r3
 8022148:	2909      	cmp	r1, #9
 802214a:	d927      	bls.n	802219c <_strtod_l+0x1ac>
 802214c:	2201      	movs	r2, #1
 802214e:	4955      	ldr	r1, [pc, #340]	@ (80222a4 <_strtod_l+0x2b4>)
 8022150:	f001 fcf6 	bl	8023b40 <strncmp>
 8022154:	2800      	cmp	r0, #0
 8022156:	d031      	beq.n	80221bc <_strtod_l+0x1cc>
 8022158:	2000      	movs	r0, #0
 802215a:	0023      	movs	r3, r4
 802215c:	4684      	mov	ip, r0
 802215e:	9a08      	ldr	r2, [sp, #32]
 8022160:	900e      	str	r0, [sp, #56]	@ 0x38
 8022162:	9206      	str	r2, [sp, #24]
 8022164:	2220      	movs	r2, #32
 8022166:	0019      	movs	r1, r3
 8022168:	4391      	bics	r1, r2
 802216a:	000a      	movs	r2, r1
 802216c:	2100      	movs	r1, #0
 802216e:	9107      	str	r1, [sp, #28]
 8022170:	2a45      	cmp	r2, #69	@ 0x45
 8022172:	d000      	beq.n	8022176 <_strtod_l+0x186>
 8022174:	e0c0      	b.n	80222f8 <_strtod_l+0x308>
 8022176:	9b06      	ldr	r3, [sp, #24]
 8022178:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802217a:	4303      	orrs	r3, r0
 802217c:	4313      	orrs	r3, r2
 802217e:	428b      	cmp	r3, r1
 8022180:	d08d      	beq.n	802209e <_strtod_l+0xae>
 8022182:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022184:	9309      	str	r3, [sp, #36]	@ 0x24
 8022186:	3301      	adds	r3, #1
 8022188:	931d      	str	r3, [sp, #116]	@ 0x74
 802218a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802218c:	785b      	ldrb	r3, [r3, #1]
 802218e:	2b2b      	cmp	r3, #43	@ 0x2b
 8022190:	d070      	beq.n	8022274 <_strtod_l+0x284>
 8022192:	000c      	movs	r4, r1
 8022194:	2b2d      	cmp	r3, #45	@ 0x2d
 8022196:	d173      	bne.n	8022280 <_strtod_l+0x290>
 8022198:	2401      	movs	r4, #1
 802219a:	e06c      	b.n	8022276 <_strtod_l+0x286>
 802219c:	9908      	ldr	r1, [sp, #32]
 802219e:	2908      	cmp	r1, #8
 80221a0:	dc09      	bgt.n	80221b6 <_strtod_l+0x1c6>
 80221a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80221a4:	4351      	muls	r1, r2
 80221a6:	185b      	adds	r3, r3, r1
 80221a8:	930d      	str	r3, [sp, #52]	@ 0x34
 80221aa:	9b08      	ldr	r3, [sp, #32]
 80221ac:	3001      	adds	r0, #1
 80221ae:	3301      	adds	r3, #1
 80221b0:	9308      	str	r3, [sp, #32]
 80221b2:	901d      	str	r0, [sp, #116]	@ 0x74
 80221b4:	e7c3      	b.n	802213e <_strtod_l+0x14e>
 80221b6:	4355      	muls	r5, r2
 80221b8:	195d      	adds	r5, r3, r5
 80221ba:	e7f6      	b.n	80221aa <_strtod_l+0x1ba>
 80221bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80221be:	1c5a      	adds	r2, r3, #1
 80221c0:	921d      	str	r2, [sp, #116]	@ 0x74
 80221c2:	9a08      	ldr	r2, [sp, #32]
 80221c4:	785b      	ldrb	r3, [r3, #1]
 80221c6:	2a00      	cmp	r2, #0
 80221c8:	d03a      	beq.n	8022240 <_strtod_l+0x250>
 80221ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80221cc:	9206      	str	r2, [sp, #24]
 80221ce:	001a      	movs	r2, r3
 80221d0:	3a30      	subs	r2, #48	@ 0x30
 80221d2:	2a09      	cmp	r2, #9
 80221d4:	d912      	bls.n	80221fc <_strtod_l+0x20c>
 80221d6:	2201      	movs	r2, #1
 80221d8:	4694      	mov	ip, r2
 80221da:	e7c3      	b.n	8022164 <_strtod_l+0x174>
 80221dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80221de:	3001      	adds	r0, #1
 80221e0:	1c5a      	adds	r2, r3, #1
 80221e2:	921d      	str	r2, [sp, #116]	@ 0x74
 80221e4:	785b      	ldrb	r3, [r3, #1]
 80221e6:	2b30      	cmp	r3, #48	@ 0x30
 80221e8:	d0f8      	beq.n	80221dc <_strtod_l+0x1ec>
 80221ea:	001a      	movs	r2, r3
 80221ec:	3a31      	subs	r2, #49	@ 0x31
 80221ee:	2a08      	cmp	r2, #8
 80221f0:	d83b      	bhi.n	802226a <_strtod_l+0x27a>
 80221f2:	900e      	str	r0, [sp, #56]	@ 0x38
 80221f4:	2000      	movs	r0, #0
 80221f6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80221f8:	9006      	str	r0, [sp, #24]
 80221fa:	9213      	str	r2, [sp, #76]	@ 0x4c
 80221fc:	001a      	movs	r2, r3
 80221fe:	1c41      	adds	r1, r0, #1
 8022200:	3a30      	subs	r2, #48	@ 0x30
 8022202:	2b30      	cmp	r3, #48	@ 0x30
 8022204:	d016      	beq.n	8022234 <_strtod_l+0x244>
 8022206:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022208:	185b      	adds	r3, r3, r1
 802220a:	930e      	str	r3, [sp, #56]	@ 0x38
 802220c:	9b06      	ldr	r3, [sp, #24]
 802220e:	210a      	movs	r1, #10
 8022210:	469c      	mov	ip, r3
 8022212:	4484      	add	ip, r0
 8022214:	459c      	cmp	ip, r3
 8022216:	d115      	bne.n	8022244 <_strtod_l+0x254>
 8022218:	9906      	ldr	r1, [sp, #24]
 802221a:	9b06      	ldr	r3, [sp, #24]
 802221c:	3101      	adds	r1, #1
 802221e:	1809      	adds	r1, r1, r0
 8022220:	181b      	adds	r3, r3, r0
 8022222:	9106      	str	r1, [sp, #24]
 8022224:	2b08      	cmp	r3, #8
 8022226:	dc19      	bgt.n	802225c <_strtod_l+0x26c>
 8022228:	230a      	movs	r3, #10
 802222a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802222c:	434b      	muls	r3, r1
 802222e:	2100      	movs	r1, #0
 8022230:	18d3      	adds	r3, r2, r3
 8022232:	930d      	str	r3, [sp, #52]	@ 0x34
 8022234:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022236:	0008      	movs	r0, r1
 8022238:	1c5a      	adds	r2, r3, #1
 802223a:	921d      	str	r2, [sp, #116]	@ 0x74
 802223c:	785b      	ldrb	r3, [r3, #1]
 802223e:	e7c6      	b.n	80221ce <_strtod_l+0x1de>
 8022240:	9808      	ldr	r0, [sp, #32]
 8022242:	e7d0      	b.n	80221e6 <_strtod_l+0x1f6>
 8022244:	1c5c      	adds	r4, r3, #1
 8022246:	2b08      	cmp	r3, #8
 8022248:	dc04      	bgt.n	8022254 <_strtod_l+0x264>
 802224a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802224c:	434b      	muls	r3, r1
 802224e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022250:	0023      	movs	r3, r4
 8022252:	e7df      	b.n	8022214 <_strtod_l+0x224>
 8022254:	2c10      	cmp	r4, #16
 8022256:	dcfb      	bgt.n	8022250 <_strtod_l+0x260>
 8022258:	434d      	muls	r5, r1
 802225a:	e7f9      	b.n	8022250 <_strtod_l+0x260>
 802225c:	2100      	movs	r1, #0
 802225e:	2b0f      	cmp	r3, #15
 8022260:	dce8      	bgt.n	8022234 <_strtod_l+0x244>
 8022262:	230a      	movs	r3, #10
 8022264:	435d      	muls	r5, r3
 8022266:	1955      	adds	r5, r2, r5
 8022268:	e7e4      	b.n	8022234 <_strtod_l+0x244>
 802226a:	2200      	movs	r2, #0
 802226c:	920e      	str	r2, [sp, #56]	@ 0x38
 802226e:	9206      	str	r2, [sp, #24]
 8022270:	3201      	adds	r2, #1
 8022272:	e7b1      	b.n	80221d8 <_strtod_l+0x1e8>
 8022274:	2400      	movs	r4, #0
 8022276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022278:	3302      	adds	r3, #2
 802227a:	931d      	str	r3, [sp, #116]	@ 0x74
 802227c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802227e:	789b      	ldrb	r3, [r3, #2]
 8022280:	001a      	movs	r2, r3
 8022282:	3a30      	subs	r2, #48	@ 0x30
 8022284:	2a09      	cmp	r2, #9
 8022286:	d913      	bls.n	80222b0 <_strtod_l+0x2c0>
 8022288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802228a:	921d      	str	r2, [sp, #116]	@ 0x74
 802228c:	2200      	movs	r2, #0
 802228e:	e032      	b.n	80222f6 <_strtod_l+0x306>
 8022290:	0802b7c4 	.word	0x0802b7c4
 8022294:	7ff00000 	.word	0x7ff00000
 8022298:	ffefffff 	.word	0xffefffff
 802229c:	00000433 	.word	0x00000433
 80222a0:	7fffffff 	.word	0x7fffffff
 80222a4:	0802b7ac 	.word	0x0802b7ac
 80222a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80222aa:	1c5a      	adds	r2, r3, #1
 80222ac:	921d      	str	r2, [sp, #116]	@ 0x74
 80222ae:	785b      	ldrb	r3, [r3, #1]
 80222b0:	2b30      	cmp	r3, #48	@ 0x30
 80222b2:	d0f9      	beq.n	80222a8 <_strtod_l+0x2b8>
 80222b4:	2200      	movs	r2, #0
 80222b6:	9207      	str	r2, [sp, #28]
 80222b8:	001a      	movs	r2, r3
 80222ba:	3a31      	subs	r2, #49	@ 0x31
 80222bc:	2a08      	cmp	r2, #8
 80222be:	d81b      	bhi.n	80222f8 <_strtod_l+0x308>
 80222c0:	3b30      	subs	r3, #48	@ 0x30
 80222c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80222c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80222c6:	9307      	str	r3, [sp, #28]
 80222c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80222ca:	1c59      	adds	r1, r3, #1
 80222cc:	911d      	str	r1, [sp, #116]	@ 0x74
 80222ce:	785b      	ldrb	r3, [r3, #1]
 80222d0:	001a      	movs	r2, r3
 80222d2:	3a30      	subs	r2, #48	@ 0x30
 80222d4:	2a09      	cmp	r2, #9
 80222d6:	d93a      	bls.n	802234e <_strtod_l+0x35e>
 80222d8:	9a07      	ldr	r2, [sp, #28]
 80222da:	1a8a      	subs	r2, r1, r2
 80222dc:	49b4      	ldr	r1, [pc, #720]	@ (80225b0 <_strtod_l+0x5c0>)
 80222de:	9107      	str	r1, [sp, #28]
 80222e0:	2a08      	cmp	r2, #8
 80222e2:	dc04      	bgt.n	80222ee <_strtod_l+0x2fe>
 80222e4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80222e6:	9207      	str	r2, [sp, #28]
 80222e8:	428a      	cmp	r2, r1
 80222ea:	dd00      	ble.n	80222ee <_strtod_l+0x2fe>
 80222ec:	9107      	str	r1, [sp, #28]
 80222ee:	2c00      	cmp	r4, #0
 80222f0:	d002      	beq.n	80222f8 <_strtod_l+0x308>
 80222f2:	9a07      	ldr	r2, [sp, #28]
 80222f4:	4252      	negs	r2, r2
 80222f6:	9207      	str	r2, [sp, #28]
 80222f8:	9a06      	ldr	r2, [sp, #24]
 80222fa:	2a00      	cmp	r2, #0
 80222fc:	d14d      	bne.n	802239a <_strtod_l+0x3aa>
 80222fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022300:	4310      	orrs	r0, r2
 8022302:	d000      	beq.n	8022306 <_strtod_l+0x316>
 8022304:	e6af      	b.n	8022066 <_strtod_l+0x76>
 8022306:	4662      	mov	r2, ip
 8022308:	2a00      	cmp	r2, #0
 802230a:	d000      	beq.n	802230e <_strtod_l+0x31e>
 802230c:	e6c7      	b.n	802209e <_strtod_l+0xae>
 802230e:	2b69      	cmp	r3, #105	@ 0x69
 8022310:	d027      	beq.n	8022362 <_strtod_l+0x372>
 8022312:	dc23      	bgt.n	802235c <_strtod_l+0x36c>
 8022314:	2b49      	cmp	r3, #73	@ 0x49
 8022316:	d024      	beq.n	8022362 <_strtod_l+0x372>
 8022318:	2b4e      	cmp	r3, #78	@ 0x4e
 802231a:	d000      	beq.n	802231e <_strtod_l+0x32e>
 802231c:	e6bf      	b.n	802209e <_strtod_l+0xae>
 802231e:	49a5      	ldr	r1, [pc, #660]	@ (80225b4 <_strtod_l+0x5c4>)
 8022320:	a81d      	add	r0, sp, #116	@ 0x74
 8022322:	f002 fe4d 	bl	8024fc0 <__match>
 8022326:	2800      	cmp	r0, #0
 8022328:	d100      	bne.n	802232c <_strtod_l+0x33c>
 802232a:	e6b8      	b.n	802209e <_strtod_l+0xae>
 802232c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802232e:	781b      	ldrb	r3, [r3, #0]
 8022330:	2b28      	cmp	r3, #40	@ 0x28
 8022332:	d12c      	bne.n	802238e <_strtod_l+0x39e>
 8022334:	49a0      	ldr	r1, [pc, #640]	@ (80225b8 <_strtod_l+0x5c8>)
 8022336:	aa20      	add	r2, sp, #128	@ 0x80
 8022338:	a81d      	add	r0, sp, #116	@ 0x74
 802233a:	f002 fe55 	bl	8024fe8 <__hexnan>
 802233e:	2805      	cmp	r0, #5
 8022340:	d125      	bne.n	802238e <_strtod_l+0x39e>
 8022342:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8022344:	4a9d      	ldr	r2, [pc, #628]	@ (80225bc <_strtod_l+0x5cc>)
 8022346:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8022348:	431a      	orrs	r2, r3
 802234a:	0017      	movs	r7, r2
 802234c:	e68b      	b.n	8022066 <_strtod_l+0x76>
 802234e:	220a      	movs	r2, #10
 8022350:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8022352:	434a      	muls	r2, r1
 8022354:	18d2      	adds	r2, r2, r3
 8022356:	3a30      	subs	r2, #48	@ 0x30
 8022358:	9210      	str	r2, [sp, #64]	@ 0x40
 802235a:	e7b5      	b.n	80222c8 <_strtod_l+0x2d8>
 802235c:	2b6e      	cmp	r3, #110	@ 0x6e
 802235e:	d0de      	beq.n	802231e <_strtod_l+0x32e>
 8022360:	e69d      	b.n	802209e <_strtod_l+0xae>
 8022362:	4997      	ldr	r1, [pc, #604]	@ (80225c0 <_strtod_l+0x5d0>)
 8022364:	a81d      	add	r0, sp, #116	@ 0x74
 8022366:	f002 fe2b 	bl	8024fc0 <__match>
 802236a:	2800      	cmp	r0, #0
 802236c:	d100      	bne.n	8022370 <_strtod_l+0x380>
 802236e:	e696      	b.n	802209e <_strtod_l+0xae>
 8022370:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022372:	4994      	ldr	r1, [pc, #592]	@ (80225c4 <_strtod_l+0x5d4>)
 8022374:	3b01      	subs	r3, #1
 8022376:	a81d      	add	r0, sp, #116	@ 0x74
 8022378:	931d      	str	r3, [sp, #116]	@ 0x74
 802237a:	f002 fe21 	bl	8024fc0 <__match>
 802237e:	2800      	cmp	r0, #0
 8022380:	d102      	bne.n	8022388 <_strtod_l+0x398>
 8022382:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8022384:	3301      	adds	r3, #1
 8022386:	931d      	str	r3, [sp, #116]	@ 0x74
 8022388:	2600      	movs	r6, #0
 802238a:	4f8c      	ldr	r7, [pc, #560]	@ (80225bc <_strtod_l+0x5cc>)
 802238c:	e66b      	b.n	8022066 <_strtod_l+0x76>
 802238e:	488e      	ldr	r0, [pc, #568]	@ (80225c8 <_strtod_l+0x5d8>)
 8022390:	f001 fca6 	bl	8023ce0 <nan>
 8022394:	0006      	movs	r6, r0
 8022396:	000f      	movs	r7, r1
 8022398:	e665      	b.n	8022066 <_strtod_l+0x76>
 802239a:	9b07      	ldr	r3, [sp, #28]
 802239c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802239e:	1a9b      	subs	r3, r3, r2
 80223a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80223a2:	9b08      	ldr	r3, [sp, #32]
 80223a4:	2b00      	cmp	r3, #0
 80223a6:	d101      	bne.n	80223ac <_strtod_l+0x3bc>
 80223a8:	9b06      	ldr	r3, [sp, #24]
 80223aa:	9308      	str	r3, [sp, #32]
 80223ac:	9c06      	ldr	r4, [sp, #24]
 80223ae:	2c10      	cmp	r4, #16
 80223b0:	dd00      	ble.n	80223b4 <_strtod_l+0x3c4>
 80223b2:	2410      	movs	r4, #16
 80223b4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80223b6:	f7e1 f831 	bl	800341c <__aeabi_ui2d>
 80223ba:	9b06      	ldr	r3, [sp, #24]
 80223bc:	0006      	movs	r6, r0
 80223be:	000f      	movs	r7, r1
 80223c0:	2b09      	cmp	r3, #9
 80223c2:	dc13      	bgt.n	80223ec <_strtod_l+0x3fc>
 80223c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80223c6:	2b00      	cmp	r3, #0
 80223c8:	d100      	bne.n	80223cc <_strtod_l+0x3dc>
 80223ca:	e64c      	b.n	8022066 <_strtod_l+0x76>
 80223cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80223ce:	2b00      	cmp	r3, #0
 80223d0:	dc00      	bgt.n	80223d4 <_strtod_l+0x3e4>
 80223d2:	e07e      	b.n	80224d2 <_strtod_l+0x4e2>
 80223d4:	2b16      	cmp	r3, #22
 80223d6:	dc63      	bgt.n	80224a0 <_strtod_l+0x4b0>
 80223d8:	497c      	ldr	r1, [pc, #496]	@ (80225cc <_strtod_l+0x5dc>)
 80223da:	00db      	lsls	r3, r3, #3
 80223dc:	18c9      	adds	r1, r1, r3
 80223de:	0032      	movs	r2, r6
 80223e0:	6808      	ldr	r0, [r1, #0]
 80223e2:	6849      	ldr	r1, [r1, #4]
 80223e4:	003b      	movs	r3, r7
 80223e6:	f7e0 f929 	bl	800263c <__aeabi_dmul>
 80223ea:	e7d3      	b.n	8022394 <_strtod_l+0x3a4>
 80223ec:	0022      	movs	r2, r4
 80223ee:	4b77      	ldr	r3, [pc, #476]	@ (80225cc <_strtod_l+0x5dc>)
 80223f0:	3a09      	subs	r2, #9
 80223f2:	00d2      	lsls	r2, r2, #3
 80223f4:	189b      	adds	r3, r3, r2
 80223f6:	681a      	ldr	r2, [r3, #0]
 80223f8:	685b      	ldr	r3, [r3, #4]
 80223fa:	f7e0 f91f 	bl	800263c <__aeabi_dmul>
 80223fe:	0006      	movs	r6, r0
 8022400:	0028      	movs	r0, r5
 8022402:	000f      	movs	r7, r1
 8022404:	f7e1 f80a 	bl	800341c <__aeabi_ui2d>
 8022408:	000b      	movs	r3, r1
 802240a:	0002      	movs	r2, r0
 802240c:	0039      	movs	r1, r7
 802240e:	0030      	movs	r0, r6
 8022410:	f7df f96c 	bl	80016ec <__aeabi_dadd>
 8022414:	9b06      	ldr	r3, [sp, #24]
 8022416:	0006      	movs	r6, r0
 8022418:	000f      	movs	r7, r1
 802241a:	2b0f      	cmp	r3, #15
 802241c:	ddd2      	ble.n	80223c4 <_strtod_l+0x3d4>
 802241e:	9b06      	ldr	r3, [sp, #24]
 8022420:	1b1c      	subs	r4, r3, r4
 8022422:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022424:	18e4      	adds	r4, r4, r3
 8022426:	2c00      	cmp	r4, #0
 8022428:	dc00      	bgt.n	802242c <_strtod_l+0x43c>
 802242a:	e09b      	b.n	8022564 <_strtod_l+0x574>
 802242c:	220f      	movs	r2, #15
 802242e:	0023      	movs	r3, r4
 8022430:	4013      	ands	r3, r2
 8022432:	4214      	tst	r4, r2
 8022434:	d00a      	beq.n	802244c <_strtod_l+0x45c>
 8022436:	4965      	ldr	r1, [pc, #404]	@ (80225cc <_strtod_l+0x5dc>)
 8022438:	00db      	lsls	r3, r3, #3
 802243a:	18c9      	adds	r1, r1, r3
 802243c:	0032      	movs	r2, r6
 802243e:	6808      	ldr	r0, [r1, #0]
 8022440:	6849      	ldr	r1, [r1, #4]
 8022442:	003b      	movs	r3, r7
 8022444:	f7e0 f8fa 	bl	800263c <__aeabi_dmul>
 8022448:	0006      	movs	r6, r0
 802244a:	000f      	movs	r7, r1
 802244c:	230f      	movs	r3, #15
 802244e:	439c      	bics	r4, r3
 8022450:	d073      	beq.n	802253a <_strtod_l+0x54a>
 8022452:	3326      	adds	r3, #38	@ 0x26
 8022454:	33ff      	adds	r3, #255	@ 0xff
 8022456:	429c      	cmp	r4, r3
 8022458:	dd4b      	ble.n	80224f2 <_strtod_l+0x502>
 802245a:	2300      	movs	r3, #0
 802245c:	9306      	str	r3, [sp, #24]
 802245e:	9307      	str	r3, [sp, #28]
 8022460:	930d      	str	r3, [sp, #52]	@ 0x34
 8022462:	9308      	str	r3, [sp, #32]
 8022464:	2322      	movs	r3, #34	@ 0x22
 8022466:	2600      	movs	r6, #0
 8022468:	9a05      	ldr	r2, [sp, #20]
 802246a:	4f54      	ldr	r7, [pc, #336]	@ (80225bc <_strtod_l+0x5cc>)
 802246c:	6013      	str	r3, [r2, #0]
 802246e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022470:	42b3      	cmp	r3, r6
 8022472:	d100      	bne.n	8022476 <_strtod_l+0x486>
 8022474:	e5f7      	b.n	8022066 <_strtod_l+0x76>
 8022476:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8022478:	9805      	ldr	r0, [sp, #20]
 802247a:	f002 ff6f 	bl	802535c <_Bfree>
 802247e:	9908      	ldr	r1, [sp, #32]
 8022480:	9805      	ldr	r0, [sp, #20]
 8022482:	f002 ff6b 	bl	802535c <_Bfree>
 8022486:	9907      	ldr	r1, [sp, #28]
 8022488:	9805      	ldr	r0, [sp, #20]
 802248a:	f002 ff67 	bl	802535c <_Bfree>
 802248e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022490:	9805      	ldr	r0, [sp, #20]
 8022492:	f002 ff63 	bl	802535c <_Bfree>
 8022496:	9906      	ldr	r1, [sp, #24]
 8022498:	9805      	ldr	r0, [sp, #20]
 802249a:	f002 ff5f 	bl	802535c <_Bfree>
 802249e:	e5e2      	b.n	8022066 <_strtod_l+0x76>
 80224a0:	2325      	movs	r3, #37	@ 0x25
 80224a2:	9a06      	ldr	r2, [sp, #24]
 80224a4:	1a9b      	subs	r3, r3, r2
 80224a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80224a8:	4293      	cmp	r3, r2
 80224aa:	dbb8      	blt.n	802241e <_strtod_l+0x42e>
 80224ac:	240f      	movs	r4, #15
 80224ae:	9b06      	ldr	r3, [sp, #24]
 80224b0:	4d46      	ldr	r5, [pc, #280]	@ (80225cc <_strtod_l+0x5dc>)
 80224b2:	1ae4      	subs	r4, r4, r3
 80224b4:	00e1      	lsls	r1, r4, #3
 80224b6:	1869      	adds	r1, r5, r1
 80224b8:	0032      	movs	r2, r6
 80224ba:	6808      	ldr	r0, [r1, #0]
 80224bc:	6849      	ldr	r1, [r1, #4]
 80224be:	003b      	movs	r3, r7
 80224c0:	f7e0 f8bc 	bl	800263c <__aeabi_dmul>
 80224c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80224c6:	1b1c      	subs	r4, r3, r4
 80224c8:	00e4      	lsls	r4, r4, #3
 80224ca:	192d      	adds	r5, r5, r4
 80224cc:	682a      	ldr	r2, [r5, #0]
 80224ce:	686b      	ldr	r3, [r5, #4]
 80224d0:	e789      	b.n	80223e6 <_strtod_l+0x3f6>
 80224d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80224d4:	3316      	adds	r3, #22
 80224d6:	dba2      	blt.n	802241e <_strtod_l+0x42e>
 80224d8:	9907      	ldr	r1, [sp, #28]
 80224da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80224dc:	4b3b      	ldr	r3, [pc, #236]	@ (80225cc <_strtod_l+0x5dc>)
 80224de:	1a52      	subs	r2, r2, r1
 80224e0:	00d2      	lsls	r2, r2, #3
 80224e2:	189b      	adds	r3, r3, r2
 80224e4:	0030      	movs	r0, r6
 80224e6:	681a      	ldr	r2, [r3, #0]
 80224e8:	685b      	ldr	r3, [r3, #4]
 80224ea:	0039      	movs	r1, r7
 80224ec:	f7df fc62 	bl	8001db4 <__aeabi_ddiv>
 80224f0:	e750      	b.n	8022394 <_strtod_l+0x3a4>
 80224f2:	2300      	movs	r3, #0
 80224f4:	0030      	movs	r0, r6
 80224f6:	0039      	movs	r1, r7
 80224f8:	4d35      	ldr	r5, [pc, #212]	@ (80225d0 <_strtod_l+0x5e0>)
 80224fa:	1124      	asrs	r4, r4, #4
 80224fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80224fe:	2c01      	cmp	r4, #1
 8022500:	dc1e      	bgt.n	8022540 <_strtod_l+0x550>
 8022502:	2b00      	cmp	r3, #0
 8022504:	d001      	beq.n	802250a <_strtod_l+0x51a>
 8022506:	0006      	movs	r6, r0
 8022508:	000f      	movs	r7, r1
 802250a:	4b32      	ldr	r3, [pc, #200]	@ (80225d4 <_strtod_l+0x5e4>)
 802250c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802250e:	18ff      	adds	r7, r7, r3
 8022510:	4b2f      	ldr	r3, [pc, #188]	@ (80225d0 <_strtod_l+0x5e0>)
 8022512:	00d5      	lsls	r5, r2, #3
 8022514:	195d      	adds	r5, r3, r5
 8022516:	0032      	movs	r2, r6
 8022518:	6828      	ldr	r0, [r5, #0]
 802251a:	6869      	ldr	r1, [r5, #4]
 802251c:	003b      	movs	r3, r7
 802251e:	f7e0 f88d 	bl	800263c <__aeabi_dmul>
 8022522:	4b26      	ldr	r3, [pc, #152]	@ (80225bc <_strtod_l+0x5cc>)
 8022524:	4a2c      	ldr	r2, [pc, #176]	@ (80225d8 <_strtod_l+0x5e8>)
 8022526:	0006      	movs	r6, r0
 8022528:	400b      	ands	r3, r1
 802252a:	4293      	cmp	r3, r2
 802252c:	d895      	bhi.n	802245a <_strtod_l+0x46a>
 802252e:	4a2b      	ldr	r2, [pc, #172]	@ (80225dc <_strtod_l+0x5ec>)
 8022530:	4293      	cmp	r3, r2
 8022532:	d913      	bls.n	802255c <_strtod_l+0x56c>
 8022534:	2601      	movs	r6, #1
 8022536:	4f2a      	ldr	r7, [pc, #168]	@ (80225e0 <_strtod_l+0x5f0>)
 8022538:	4276      	negs	r6, r6
 802253a:	2300      	movs	r3, #0
 802253c:	9309      	str	r3, [sp, #36]	@ 0x24
 802253e:	e086      	b.n	802264e <_strtod_l+0x65e>
 8022540:	2201      	movs	r2, #1
 8022542:	4214      	tst	r4, r2
 8022544:	d004      	beq.n	8022550 <_strtod_l+0x560>
 8022546:	682a      	ldr	r2, [r5, #0]
 8022548:	686b      	ldr	r3, [r5, #4]
 802254a:	f7e0 f877 	bl	800263c <__aeabi_dmul>
 802254e:	2301      	movs	r3, #1
 8022550:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022552:	1064      	asrs	r4, r4, #1
 8022554:	3201      	adds	r2, #1
 8022556:	9209      	str	r2, [sp, #36]	@ 0x24
 8022558:	3508      	adds	r5, #8
 802255a:	e7d0      	b.n	80224fe <_strtod_l+0x50e>
 802255c:	23d4      	movs	r3, #212	@ 0xd4
 802255e:	049b      	lsls	r3, r3, #18
 8022560:	18cf      	adds	r7, r1, r3
 8022562:	e7ea      	b.n	802253a <_strtod_l+0x54a>
 8022564:	2c00      	cmp	r4, #0
 8022566:	d0e8      	beq.n	802253a <_strtod_l+0x54a>
 8022568:	4264      	negs	r4, r4
 802256a:	230f      	movs	r3, #15
 802256c:	0022      	movs	r2, r4
 802256e:	401a      	ands	r2, r3
 8022570:	421c      	tst	r4, r3
 8022572:	d00a      	beq.n	802258a <_strtod_l+0x59a>
 8022574:	4b15      	ldr	r3, [pc, #84]	@ (80225cc <_strtod_l+0x5dc>)
 8022576:	00d2      	lsls	r2, r2, #3
 8022578:	189b      	adds	r3, r3, r2
 802257a:	0030      	movs	r0, r6
 802257c:	681a      	ldr	r2, [r3, #0]
 802257e:	685b      	ldr	r3, [r3, #4]
 8022580:	0039      	movs	r1, r7
 8022582:	f7df fc17 	bl	8001db4 <__aeabi_ddiv>
 8022586:	0006      	movs	r6, r0
 8022588:	000f      	movs	r7, r1
 802258a:	1124      	asrs	r4, r4, #4
 802258c:	d0d5      	beq.n	802253a <_strtod_l+0x54a>
 802258e:	2c1f      	cmp	r4, #31
 8022590:	dd28      	ble.n	80225e4 <_strtod_l+0x5f4>
 8022592:	2300      	movs	r3, #0
 8022594:	9306      	str	r3, [sp, #24]
 8022596:	9307      	str	r3, [sp, #28]
 8022598:	930d      	str	r3, [sp, #52]	@ 0x34
 802259a:	9308      	str	r3, [sp, #32]
 802259c:	2322      	movs	r3, #34	@ 0x22
 802259e:	9a05      	ldr	r2, [sp, #20]
 80225a0:	2600      	movs	r6, #0
 80225a2:	6013      	str	r3, [r2, #0]
 80225a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80225a6:	2700      	movs	r7, #0
 80225a8:	2b00      	cmp	r3, #0
 80225aa:	d000      	beq.n	80225ae <_strtod_l+0x5be>
 80225ac:	e763      	b.n	8022476 <_strtod_l+0x486>
 80225ae:	e55a      	b.n	8022066 <_strtod_l+0x76>
 80225b0:	00004e1f 	.word	0x00004e1f
 80225b4:	0802b90e 	.word	0x0802b90e
 80225b8:	0802b7b0 	.word	0x0802b7b0
 80225bc:	7ff00000 	.word	0x7ff00000
 80225c0:	0802b906 	.word	0x0802b906
 80225c4:	0802b940 	.word	0x0802b940
 80225c8:	0802bbcc 	.word	0x0802bbcc
 80225cc:	0802bab8 	.word	0x0802bab8
 80225d0:	0802ba90 	.word	0x0802ba90
 80225d4:	fcb00000 	.word	0xfcb00000
 80225d8:	7ca00000 	.word	0x7ca00000
 80225dc:	7c900000 	.word	0x7c900000
 80225e0:	7fefffff 	.word	0x7fefffff
 80225e4:	2310      	movs	r3, #16
 80225e6:	0022      	movs	r2, r4
 80225e8:	401a      	ands	r2, r3
 80225ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80225ec:	421c      	tst	r4, r3
 80225ee:	d001      	beq.n	80225f4 <_strtod_l+0x604>
 80225f0:	335a      	adds	r3, #90	@ 0x5a
 80225f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80225f4:	0030      	movs	r0, r6
 80225f6:	0039      	movs	r1, r7
 80225f8:	2300      	movs	r3, #0
 80225fa:	4dbf      	ldr	r5, [pc, #764]	@ (80228f8 <_strtod_l+0x908>)
 80225fc:	2201      	movs	r2, #1
 80225fe:	4214      	tst	r4, r2
 8022600:	d004      	beq.n	802260c <_strtod_l+0x61c>
 8022602:	682a      	ldr	r2, [r5, #0]
 8022604:	686b      	ldr	r3, [r5, #4]
 8022606:	f7e0 f819 	bl	800263c <__aeabi_dmul>
 802260a:	2301      	movs	r3, #1
 802260c:	1064      	asrs	r4, r4, #1
 802260e:	3508      	adds	r5, #8
 8022610:	2c00      	cmp	r4, #0
 8022612:	d1f3      	bne.n	80225fc <_strtod_l+0x60c>
 8022614:	2b00      	cmp	r3, #0
 8022616:	d001      	beq.n	802261c <_strtod_l+0x62c>
 8022618:	0006      	movs	r6, r0
 802261a:	000f      	movs	r7, r1
 802261c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802261e:	2b00      	cmp	r3, #0
 8022620:	d00d      	beq.n	802263e <_strtod_l+0x64e>
 8022622:	236b      	movs	r3, #107	@ 0x6b
 8022624:	007a      	lsls	r2, r7, #1
 8022626:	0d52      	lsrs	r2, r2, #21
 8022628:	0039      	movs	r1, r7
 802262a:	1a9b      	subs	r3, r3, r2
 802262c:	2b00      	cmp	r3, #0
 802262e:	dd06      	ble.n	802263e <_strtod_l+0x64e>
 8022630:	2b1f      	cmp	r3, #31
 8022632:	dd5a      	ble.n	80226ea <_strtod_l+0x6fa>
 8022634:	2600      	movs	r6, #0
 8022636:	2b34      	cmp	r3, #52	@ 0x34
 8022638:	dd50      	ble.n	80226dc <_strtod_l+0x6ec>
 802263a:	27dc      	movs	r7, #220	@ 0xdc
 802263c:	04bf      	lsls	r7, r7, #18
 802263e:	2200      	movs	r2, #0
 8022640:	2300      	movs	r3, #0
 8022642:	0030      	movs	r0, r6
 8022644:	0039      	movs	r1, r7
 8022646:	f7dd ff33 	bl	80004b0 <__aeabi_dcmpeq>
 802264a:	2800      	cmp	r0, #0
 802264c:	d1a1      	bne.n	8022592 <_strtod_l+0x5a2>
 802264e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022650:	9a08      	ldr	r2, [sp, #32]
 8022652:	9300      	str	r3, [sp, #0]
 8022654:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022656:	9b06      	ldr	r3, [sp, #24]
 8022658:	9805      	ldr	r0, [sp, #20]
 802265a:	f002 fee7 	bl	802542c <__s2b>
 802265e:	900d      	str	r0, [sp, #52]	@ 0x34
 8022660:	2800      	cmp	r0, #0
 8022662:	d100      	bne.n	8022666 <_strtod_l+0x676>
 8022664:	e6f9      	b.n	802245a <_strtod_l+0x46a>
 8022666:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022668:	9907      	ldr	r1, [sp, #28]
 802266a:	17da      	asrs	r2, r3, #31
 802266c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802266e:	1a5b      	subs	r3, r3, r1
 8022670:	401a      	ands	r2, r3
 8022672:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022674:	9217      	str	r2, [sp, #92]	@ 0x5c
 8022676:	43db      	mvns	r3, r3
 8022678:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802267a:	17db      	asrs	r3, r3, #31
 802267c:	401a      	ands	r2, r3
 802267e:	2300      	movs	r3, #0
 8022680:	921a      	str	r2, [sp, #104]	@ 0x68
 8022682:	9306      	str	r3, [sp, #24]
 8022684:	9307      	str	r3, [sp, #28]
 8022686:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022688:	9805      	ldr	r0, [sp, #20]
 802268a:	6859      	ldr	r1, [r3, #4]
 802268c:	f002 fe22 	bl	80252d4 <_Balloc>
 8022690:	9008      	str	r0, [sp, #32]
 8022692:	2800      	cmp	r0, #0
 8022694:	d100      	bne.n	8022698 <_strtod_l+0x6a8>
 8022696:	e6e5      	b.n	8022464 <_strtod_l+0x474>
 8022698:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802269a:	300c      	adds	r0, #12
 802269c:	0019      	movs	r1, r3
 802269e:	691a      	ldr	r2, [r3, #16]
 80226a0:	310c      	adds	r1, #12
 80226a2:	3202      	adds	r2, #2
 80226a4:	0092      	lsls	r2, r2, #2
 80226a6:	f001 fb11 	bl	8023ccc <memcpy>
 80226aa:	ab20      	add	r3, sp, #128	@ 0x80
 80226ac:	9301      	str	r3, [sp, #4]
 80226ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80226b0:	9300      	str	r3, [sp, #0]
 80226b2:	0032      	movs	r2, r6
 80226b4:	003b      	movs	r3, r7
 80226b6:	9805      	ldr	r0, [sp, #20]
 80226b8:	9610      	str	r6, [sp, #64]	@ 0x40
 80226ba:	9711      	str	r7, [sp, #68]	@ 0x44
 80226bc:	f003 fa06 	bl	8025acc <__d2b>
 80226c0:	901e      	str	r0, [sp, #120]	@ 0x78
 80226c2:	2800      	cmp	r0, #0
 80226c4:	d100      	bne.n	80226c8 <_strtod_l+0x6d8>
 80226c6:	e6cd      	b.n	8022464 <_strtod_l+0x474>
 80226c8:	2101      	movs	r1, #1
 80226ca:	9805      	ldr	r0, [sp, #20]
 80226cc:	f002 ff4a 	bl	8025564 <__i2b>
 80226d0:	9007      	str	r0, [sp, #28]
 80226d2:	2800      	cmp	r0, #0
 80226d4:	d10e      	bne.n	80226f4 <_strtod_l+0x704>
 80226d6:	2300      	movs	r3, #0
 80226d8:	9307      	str	r3, [sp, #28]
 80226da:	e6c3      	b.n	8022464 <_strtod_l+0x474>
 80226dc:	234b      	movs	r3, #75	@ 0x4b
 80226de:	1a9a      	subs	r2, r3, r2
 80226e0:	3b4c      	subs	r3, #76	@ 0x4c
 80226e2:	4093      	lsls	r3, r2
 80226e4:	4019      	ands	r1, r3
 80226e6:	000f      	movs	r7, r1
 80226e8:	e7a9      	b.n	802263e <_strtod_l+0x64e>
 80226ea:	2201      	movs	r2, #1
 80226ec:	4252      	negs	r2, r2
 80226ee:	409a      	lsls	r2, r3
 80226f0:	4016      	ands	r6, r2
 80226f2:	e7a4      	b.n	802263e <_strtod_l+0x64e>
 80226f4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80226f6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80226f8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80226fa:	1ad4      	subs	r4, r2, r3
 80226fc:	2b00      	cmp	r3, #0
 80226fe:	db01      	blt.n	8022704 <_strtod_l+0x714>
 8022700:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8022702:	195d      	adds	r5, r3, r5
 8022704:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8022706:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8022708:	1a5b      	subs	r3, r3, r1
 802270a:	2136      	movs	r1, #54	@ 0x36
 802270c:	189b      	adds	r3, r3, r2
 802270e:	1a8a      	subs	r2, r1, r2
 8022710:	497a      	ldr	r1, [pc, #488]	@ (80228fc <_strtod_l+0x90c>)
 8022712:	2001      	movs	r0, #1
 8022714:	468c      	mov	ip, r1
 8022716:	2100      	movs	r1, #0
 8022718:	3b01      	subs	r3, #1
 802271a:	9116      	str	r1, [sp, #88]	@ 0x58
 802271c:	9014      	str	r0, [sp, #80]	@ 0x50
 802271e:	4563      	cmp	r3, ip
 8022720:	da06      	bge.n	8022730 <_strtod_l+0x740>
 8022722:	4661      	mov	r1, ip
 8022724:	1ac9      	subs	r1, r1, r3
 8022726:	1a52      	subs	r2, r2, r1
 8022728:	291f      	cmp	r1, #31
 802272a:	dc3f      	bgt.n	80227ac <_strtod_l+0x7bc>
 802272c:	4088      	lsls	r0, r1
 802272e:	9014      	str	r0, [sp, #80]	@ 0x50
 8022730:	18ab      	adds	r3, r5, r2
 8022732:	930e      	str	r3, [sp, #56]	@ 0x38
 8022734:	18a4      	adds	r4, r4, r2
 8022736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802273a:	191c      	adds	r4, r3, r4
 802273c:	002b      	movs	r3, r5
 802273e:	4295      	cmp	r5, r2
 8022740:	dd00      	ble.n	8022744 <_strtod_l+0x754>
 8022742:	0013      	movs	r3, r2
 8022744:	42a3      	cmp	r3, r4
 8022746:	dd00      	ble.n	802274a <_strtod_l+0x75a>
 8022748:	0023      	movs	r3, r4
 802274a:	2b00      	cmp	r3, #0
 802274c:	dd04      	ble.n	8022758 <_strtod_l+0x768>
 802274e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022750:	1ae4      	subs	r4, r4, r3
 8022752:	1ad2      	subs	r2, r2, r3
 8022754:	920e      	str	r2, [sp, #56]	@ 0x38
 8022756:	1aed      	subs	r5, r5, r3
 8022758:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802275a:	2b00      	cmp	r3, #0
 802275c:	dd16      	ble.n	802278c <_strtod_l+0x79c>
 802275e:	001a      	movs	r2, r3
 8022760:	9907      	ldr	r1, [sp, #28]
 8022762:	9805      	ldr	r0, [sp, #20]
 8022764:	f002 ffc8 	bl	80256f8 <__pow5mult>
 8022768:	9007      	str	r0, [sp, #28]
 802276a:	2800      	cmp	r0, #0
 802276c:	d0b3      	beq.n	80226d6 <_strtod_l+0x6e6>
 802276e:	0001      	movs	r1, r0
 8022770:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8022772:	9805      	ldr	r0, [sp, #20]
 8022774:	f002 ff0e 	bl	8025594 <__multiply>
 8022778:	9013      	str	r0, [sp, #76]	@ 0x4c
 802277a:	2800      	cmp	r0, #0
 802277c:	d100      	bne.n	8022780 <_strtod_l+0x790>
 802277e:	e671      	b.n	8022464 <_strtod_l+0x474>
 8022780:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8022782:	9805      	ldr	r0, [sp, #20]
 8022784:	f002 fdea 	bl	802535c <_Bfree>
 8022788:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802278a:	931e      	str	r3, [sp, #120]	@ 0x78
 802278c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802278e:	2b00      	cmp	r3, #0
 8022790:	dc12      	bgt.n	80227b8 <_strtod_l+0x7c8>
 8022792:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022794:	2b00      	cmp	r3, #0
 8022796:	dd18      	ble.n	80227ca <_strtod_l+0x7da>
 8022798:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802279a:	9908      	ldr	r1, [sp, #32]
 802279c:	9805      	ldr	r0, [sp, #20]
 802279e:	f002 ffab 	bl	80256f8 <__pow5mult>
 80227a2:	9008      	str	r0, [sp, #32]
 80227a4:	2800      	cmp	r0, #0
 80227a6:	d110      	bne.n	80227ca <_strtod_l+0x7da>
 80227a8:	2300      	movs	r3, #0
 80227aa:	e65a      	b.n	8022462 <_strtod_l+0x472>
 80227ac:	4954      	ldr	r1, [pc, #336]	@ (8022900 <_strtod_l+0x910>)
 80227ae:	1acb      	subs	r3, r1, r3
 80227b0:	0001      	movs	r1, r0
 80227b2:	4099      	lsls	r1, r3
 80227b4:	9116      	str	r1, [sp, #88]	@ 0x58
 80227b6:	e7ba      	b.n	802272e <_strtod_l+0x73e>
 80227b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80227ba:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80227bc:	9805      	ldr	r0, [sp, #20]
 80227be:	f002 fff7 	bl	80257b0 <__lshift>
 80227c2:	901e      	str	r0, [sp, #120]	@ 0x78
 80227c4:	2800      	cmp	r0, #0
 80227c6:	d1e4      	bne.n	8022792 <_strtod_l+0x7a2>
 80227c8:	e64c      	b.n	8022464 <_strtod_l+0x474>
 80227ca:	2c00      	cmp	r4, #0
 80227cc:	dd07      	ble.n	80227de <_strtod_l+0x7ee>
 80227ce:	0022      	movs	r2, r4
 80227d0:	9908      	ldr	r1, [sp, #32]
 80227d2:	9805      	ldr	r0, [sp, #20]
 80227d4:	f002 ffec 	bl	80257b0 <__lshift>
 80227d8:	9008      	str	r0, [sp, #32]
 80227da:	2800      	cmp	r0, #0
 80227dc:	d0e4      	beq.n	80227a8 <_strtod_l+0x7b8>
 80227de:	2d00      	cmp	r5, #0
 80227e0:	dd08      	ble.n	80227f4 <_strtod_l+0x804>
 80227e2:	002a      	movs	r2, r5
 80227e4:	9907      	ldr	r1, [sp, #28]
 80227e6:	9805      	ldr	r0, [sp, #20]
 80227e8:	f002 ffe2 	bl	80257b0 <__lshift>
 80227ec:	9007      	str	r0, [sp, #28]
 80227ee:	2800      	cmp	r0, #0
 80227f0:	d100      	bne.n	80227f4 <_strtod_l+0x804>
 80227f2:	e637      	b.n	8022464 <_strtod_l+0x474>
 80227f4:	9a08      	ldr	r2, [sp, #32]
 80227f6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80227f8:	9805      	ldr	r0, [sp, #20]
 80227fa:	f003 f861 	bl	80258c0 <__mdiff>
 80227fe:	9006      	str	r0, [sp, #24]
 8022800:	2800      	cmp	r0, #0
 8022802:	d100      	bne.n	8022806 <_strtod_l+0x816>
 8022804:	e62e      	b.n	8022464 <_strtod_l+0x474>
 8022806:	68c3      	ldr	r3, [r0, #12]
 8022808:	9907      	ldr	r1, [sp, #28]
 802280a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802280c:	2300      	movs	r3, #0
 802280e:	60c3      	str	r3, [r0, #12]
 8022810:	f003 f83a 	bl	8025888 <__mcmp>
 8022814:	2800      	cmp	r0, #0
 8022816:	da3b      	bge.n	8022890 <_strtod_l+0x8a0>
 8022818:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802281a:	4333      	orrs	r3, r6
 802281c:	d167      	bne.n	80228ee <_strtod_l+0x8fe>
 802281e:	033b      	lsls	r3, r7, #12
 8022820:	d165      	bne.n	80228ee <_strtod_l+0x8fe>
 8022822:	22d6      	movs	r2, #214	@ 0xd6
 8022824:	4b37      	ldr	r3, [pc, #220]	@ (8022904 <_strtod_l+0x914>)
 8022826:	04d2      	lsls	r2, r2, #19
 8022828:	403b      	ands	r3, r7
 802282a:	4293      	cmp	r3, r2
 802282c:	d95f      	bls.n	80228ee <_strtod_l+0x8fe>
 802282e:	9b06      	ldr	r3, [sp, #24]
 8022830:	695b      	ldr	r3, [r3, #20]
 8022832:	2b00      	cmp	r3, #0
 8022834:	d103      	bne.n	802283e <_strtod_l+0x84e>
 8022836:	9b06      	ldr	r3, [sp, #24]
 8022838:	691b      	ldr	r3, [r3, #16]
 802283a:	2b01      	cmp	r3, #1
 802283c:	dd57      	ble.n	80228ee <_strtod_l+0x8fe>
 802283e:	9906      	ldr	r1, [sp, #24]
 8022840:	2201      	movs	r2, #1
 8022842:	9805      	ldr	r0, [sp, #20]
 8022844:	f002 ffb4 	bl	80257b0 <__lshift>
 8022848:	9907      	ldr	r1, [sp, #28]
 802284a:	9006      	str	r0, [sp, #24]
 802284c:	f003 f81c 	bl	8025888 <__mcmp>
 8022850:	2800      	cmp	r0, #0
 8022852:	dd4c      	ble.n	80228ee <_strtod_l+0x8fe>
 8022854:	4b2b      	ldr	r3, [pc, #172]	@ (8022904 <_strtod_l+0x914>)
 8022856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022858:	403b      	ands	r3, r7
 802285a:	2a00      	cmp	r2, #0
 802285c:	d074      	beq.n	8022948 <_strtod_l+0x958>
 802285e:	22d6      	movs	r2, #214	@ 0xd6
 8022860:	04d2      	lsls	r2, r2, #19
 8022862:	4293      	cmp	r3, r2
 8022864:	d870      	bhi.n	8022948 <_strtod_l+0x958>
 8022866:	22dc      	movs	r2, #220	@ 0xdc
 8022868:	0492      	lsls	r2, r2, #18
 802286a:	4293      	cmp	r3, r2
 802286c:	d800      	bhi.n	8022870 <_strtod_l+0x880>
 802286e:	e695      	b.n	802259c <_strtod_l+0x5ac>
 8022870:	0030      	movs	r0, r6
 8022872:	0039      	movs	r1, r7
 8022874:	4b24      	ldr	r3, [pc, #144]	@ (8022908 <_strtod_l+0x918>)
 8022876:	2200      	movs	r2, #0
 8022878:	f7df fee0 	bl	800263c <__aeabi_dmul>
 802287c:	4b21      	ldr	r3, [pc, #132]	@ (8022904 <_strtod_l+0x914>)
 802287e:	0006      	movs	r6, r0
 8022880:	000f      	movs	r7, r1
 8022882:	420b      	tst	r3, r1
 8022884:	d000      	beq.n	8022888 <_strtod_l+0x898>
 8022886:	e5f6      	b.n	8022476 <_strtod_l+0x486>
 8022888:	2322      	movs	r3, #34	@ 0x22
 802288a:	9a05      	ldr	r2, [sp, #20]
 802288c:	6013      	str	r3, [r2, #0]
 802288e:	e5f2      	b.n	8022476 <_strtod_l+0x486>
 8022890:	970e      	str	r7, [sp, #56]	@ 0x38
 8022892:	2800      	cmp	r0, #0
 8022894:	d175      	bne.n	8022982 <_strtod_l+0x992>
 8022896:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022898:	033b      	lsls	r3, r7, #12
 802289a:	0b1b      	lsrs	r3, r3, #12
 802289c:	2a00      	cmp	r2, #0
 802289e:	d039      	beq.n	8022914 <_strtod_l+0x924>
 80228a0:	4a1a      	ldr	r2, [pc, #104]	@ (802290c <_strtod_l+0x91c>)
 80228a2:	4293      	cmp	r3, r2
 80228a4:	d138      	bne.n	8022918 <_strtod_l+0x928>
 80228a6:	2101      	movs	r1, #1
 80228a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228aa:	4249      	negs	r1, r1
 80228ac:	0032      	movs	r2, r6
 80228ae:	0008      	movs	r0, r1
 80228b0:	2b00      	cmp	r3, #0
 80228b2:	d00b      	beq.n	80228cc <_strtod_l+0x8dc>
 80228b4:	24d4      	movs	r4, #212	@ 0xd4
 80228b6:	4b13      	ldr	r3, [pc, #76]	@ (8022904 <_strtod_l+0x914>)
 80228b8:	0008      	movs	r0, r1
 80228ba:	403b      	ands	r3, r7
 80228bc:	04e4      	lsls	r4, r4, #19
 80228be:	42a3      	cmp	r3, r4
 80228c0:	d804      	bhi.n	80228cc <_strtod_l+0x8dc>
 80228c2:	306c      	adds	r0, #108	@ 0x6c
 80228c4:	0d1b      	lsrs	r3, r3, #20
 80228c6:	1ac3      	subs	r3, r0, r3
 80228c8:	4099      	lsls	r1, r3
 80228ca:	0008      	movs	r0, r1
 80228cc:	4282      	cmp	r2, r0
 80228ce:	d123      	bne.n	8022918 <_strtod_l+0x928>
 80228d0:	4b0f      	ldr	r3, [pc, #60]	@ (8022910 <_strtod_l+0x920>)
 80228d2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80228d4:	4299      	cmp	r1, r3
 80228d6:	d102      	bne.n	80228de <_strtod_l+0x8ee>
 80228d8:	3201      	adds	r2, #1
 80228da:	d100      	bne.n	80228de <_strtod_l+0x8ee>
 80228dc:	e5c2      	b.n	8022464 <_strtod_l+0x474>
 80228de:	4b09      	ldr	r3, [pc, #36]	@ (8022904 <_strtod_l+0x914>)
 80228e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80228e2:	2600      	movs	r6, #0
 80228e4:	401a      	ands	r2, r3
 80228e6:	0013      	movs	r3, r2
 80228e8:	2280      	movs	r2, #128	@ 0x80
 80228ea:	0352      	lsls	r2, r2, #13
 80228ec:	189f      	adds	r7, r3, r2
 80228ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80228f0:	2b00      	cmp	r3, #0
 80228f2:	d1bd      	bne.n	8022870 <_strtod_l+0x880>
 80228f4:	e5bf      	b.n	8022476 <_strtod_l+0x486>
 80228f6:	46c0      	nop			@ (mov r8, r8)
 80228f8:	0802b7d8 	.word	0x0802b7d8
 80228fc:	fffffc02 	.word	0xfffffc02
 8022900:	fffffbe2 	.word	0xfffffbe2
 8022904:	7ff00000 	.word	0x7ff00000
 8022908:	39500000 	.word	0x39500000
 802290c:	000fffff 	.word	0x000fffff
 8022910:	7fefffff 	.word	0x7fefffff
 8022914:	4333      	orrs	r3, r6
 8022916:	d09d      	beq.n	8022854 <_strtod_l+0x864>
 8022918:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802291a:	2b00      	cmp	r3, #0
 802291c:	d01c      	beq.n	8022958 <_strtod_l+0x968>
 802291e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022920:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022922:	4213      	tst	r3, r2
 8022924:	d0e3      	beq.n	80228ee <_strtod_l+0x8fe>
 8022926:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022928:	0030      	movs	r0, r6
 802292a:	0039      	movs	r1, r7
 802292c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802292e:	2b00      	cmp	r3, #0
 8022930:	d016      	beq.n	8022960 <_strtod_l+0x970>
 8022932:	f7ff fb45 	bl	8021fc0 <sulp>
 8022936:	0002      	movs	r2, r0
 8022938:	000b      	movs	r3, r1
 802293a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802293c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802293e:	f7de fed5 	bl	80016ec <__aeabi_dadd>
 8022942:	0006      	movs	r6, r0
 8022944:	000f      	movs	r7, r1
 8022946:	e7d2      	b.n	80228ee <_strtod_l+0x8fe>
 8022948:	2601      	movs	r6, #1
 802294a:	4a92      	ldr	r2, [pc, #584]	@ (8022b94 <_strtod_l+0xba4>)
 802294c:	4276      	negs	r6, r6
 802294e:	189b      	adds	r3, r3, r2
 8022950:	4a91      	ldr	r2, [pc, #580]	@ (8022b98 <_strtod_l+0xba8>)
 8022952:	431a      	orrs	r2, r3
 8022954:	0017      	movs	r7, r2
 8022956:	e7ca      	b.n	80228ee <_strtod_l+0x8fe>
 8022958:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802295a:	4233      	tst	r3, r6
 802295c:	d0c7      	beq.n	80228ee <_strtod_l+0x8fe>
 802295e:	e7e2      	b.n	8022926 <_strtod_l+0x936>
 8022960:	f7ff fb2e 	bl	8021fc0 <sulp>
 8022964:	0002      	movs	r2, r0
 8022966:	000b      	movs	r3, r1
 8022968:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802296a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802296c:	f7e0 f92e 	bl	8002bcc <__aeabi_dsub>
 8022970:	2200      	movs	r2, #0
 8022972:	2300      	movs	r3, #0
 8022974:	0006      	movs	r6, r0
 8022976:	000f      	movs	r7, r1
 8022978:	f7dd fd9a 	bl	80004b0 <__aeabi_dcmpeq>
 802297c:	2800      	cmp	r0, #0
 802297e:	d0b6      	beq.n	80228ee <_strtod_l+0x8fe>
 8022980:	e60c      	b.n	802259c <_strtod_l+0x5ac>
 8022982:	9907      	ldr	r1, [sp, #28]
 8022984:	9806      	ldr	r0, [sp, #24]
 8022986:	f003 f901 	bl	8025b8c <__ratio>
 802298a:	2380      	movs	r3, #128	@ 0x80
 802298c:	2200      	movs	r2, #0
 802298e:	05db      	lsls	r3, r3, #23
 8022990:	0004      	movs	r4, r0
 8022992:	000d      	movs	r5, r1
 8022994:	f7dd fd9c 	bl	80004d0 <__aeabi_dcmple>
 8022998:	2800      	cmp	r0, #0
 802299a:	d06c      	beq.n	8022a76 <_strtod_l+0xa86>
 802299c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802299e:	2b00      	cmp	r3, #0
 80229a0:	d177      	bne.n	8022a92 <_strtod_l+0xaa2>
 80229a2:	2e00      	cmp	r6, #0
 80229a4:	d157      	bne.n	8022a56 <_strtod_l+0xa66>
 80229a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80229a8:	031b      	lsls	r3, r3, #12
 80229aa:	d15a      	bne.n	8022a62 <_strtod_l+0xa72>
 80229ac:	2200      	movs	r2, #0
 80229ae:	0020      	movs	r0, r4
 80229b0:	0029      	movs	r1, r5
 80229b2:	4b7a      	ldr	r3, [pc, #488]	@ (8022b9c <_strtod_l+0xbac>)
 80229b4:	f7dd fd82 	bl	80004bc <__aeabi_dcmplt>
 80229b8:	2800      	cmp	r0, #0
 80229ba:	d159      	bne.n	8022a70 <_strtod_l+0xa80>
 80229bc:	0020      	movs	r0, r4
 80229be:	0029      	movs	r1, r5
 80229c0:	2200      	movs	r2, #0
 80229c2:	4b77      	ldr	r3, [pc, #476]	@ (8022ba0 <_strtod_l+0xbb0>)
 80229c4:	f7df fe3a 	bl	800263c <__aeabi_dmul>
 80229c8:	0004      	movs	r4, r0
 80229ca:	000d      	movs	r5, r1
 80229cc:	2380      	movs	r3, #128	@ 0x80
 80229ce:	061b      	lsls	r3, r3, #24
 80229d0:	18eb      	adds	r3, r5, r3
 80229d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80229d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80229d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80229d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80229da:	9214      	str	r2, [sp, #80]	@ 0x50
 80229dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80229de:	4a71      	ldr	r2, [pc, #452]	@ (8022ba4 <_strtod_l+0xbb4>)
 80229e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80229e2:	4013      	ands	r3, r2
 80229e4:	9316      	str	r3, [sp, #88]	@ 0x58
 80229e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80229e8:	4b6f      	ldr	r3, [pc, #444]	@ (8022ba8 <_strtod_l+0xbb8>)
 80229ea:	429a      	cmp	r2, r3
 80229ec:	d000      	beq.n	80229f0 <_strtod_l+0xa00>
 80229ee:	e087      	b.n	8022b00 <_strtod_l+0xb10>
 80229f0:	4a6e      	ldr	r2, [pc, #440]	@ (8022bac <_strtod_l+0xbbc>)
 80229f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80229f4:	4694      	mov	ip, r2
 80229f6:	4463      	add	r3, ip
 80229f8:	001f      	movs	r7, r3
 80229fa:	0030      	movs	r0, r6
 80229fc:	0019      	movs	r1, r3
 80229fe:	f002 fff9 	bl	80259f4 <__ulp>
 8022a02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022a04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022a06:	f7df fe19 	bl	800263c <__aeabi_dmul>
 8022a0a:	0032      	movs	r2, r6
 8022a0c:	003b      	movs	r3, r7
 8022a0e:	f7de fe6d 	bl	80016ec <__aeabi_dadd>
 8022a12:	4a64      	ldr	r2, [pc, #400]	@ (8022ba4 <_strtod_l+0xbb4>)
 8022a14:	4b66      	ldr	r3, [pc, #408]	@ (8022bb0 <_strtod_l+0xbc0>)
 8022a16:	0006      	movs	r6, r0
 8022a18:	400a      	ands	r2, r1
 8022a1a:	429a      	cmp	r2, r3
 8022a1c:	d940      	bls.n	8022aa0 <_strtod_l+0xab0>
 8022a1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022a20:	4a64      	ldr	r2, [pc, #400]	@ (8022bb4 <_strtod_l+0xbc4>)
 8022a22:	4293      	cmp	r3, r2
 8022a24:	d103      	bne.n	8022a2e <_strtod_l+0xa3e>
 8022a26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022a28:	3301      	adds	r3, #1
 8022a2a:	d100      	bne.n	8022a2e <_strtod_l+0xa3e>
 8022a2c:	e51a      	b.n	8022464 <_strtod_l+0x474>
 8022a2e:	2601      	movs	r6, #1
 8022a30:	4f60      	ldr	r7, [pc, #384]	@ (8022bb4 <_strtod_l+0xbc4>)
 8022a32:	4276      	negs	r6, r6
 8022a34:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8022a36:	9805      	ldr	r0, [sp, #20]
 8022a38:	f002 fc90 	bl	802535c <_Bfree>
 8022a3c:	9908      	ldr	r1, [sp, #32]
 8022a3e:	9805      	ldr	r0, [sp, #20]
 8022a40:	f002 fc8c 	bl	802535c <_Bfree>
 8022a44:	9907      	ldr	r1, [sp, #28]
 8022a46:	9805      	ldr	r0, [sp, #20]
 8022a48:	f002 fc88 	bl	802535c <_Bfree>
 8022a4c:	9906      	ldr	r1, [sp, #24]
 8022a4e:	9805      	ldr	r0, [sp, #20]
 8022a50:	f002 fc84 	bl	802535c <_Bfree>
 8022a54:	e617      	b.n	8022686 <_strtod_l+0x696>
 8022a56:	2e01      	cmp	r6, #1
 8022a58:	d103      	bne.n	8022a62 <_strtod_l+0xa72>
 8022a5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8022a5c:	2b00      	cmp	r3, #0
 8022a5e:	d100      	bne.n	8022a62 <_strtod_l+0xa72>
 8022a60:	e59c      	b.n	802259c <_strtod_l+0x5ac>
 8022a62:	2300      	movs	r3, #0
 8022a64:	4c54      	ldr	r4, [pc, #336]	@ (8022bb8 <_strtod_l+0xbc8>)
 8022a66:	4d4d      	ldr	r5, [pc, #308]	@ (8022b9c <_strtod_l+0xbac>)
 8022a68:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022a6c:	2400      	movs	r4, #0
 8022a6e:	e7b2      	b.n	80229d6 <_strtod_l+0x9e6>
 8022a70:	2400      	movs	r4, #0
 8022a72:	4d4b      	ldr	r5, [pc, #300]	@ (8022ba0 <_strtod_l+0xbb0>)
 8022a74:	e7aa      	b.n	80229cc <_strtod_l+0x9dc>
 8022a76:	0020      	movs	r0, r4
 8022a78:	0029      	movs	r1, r5
 8022a7a:	4b49      	ldr	r3, [pc, #292]	@ (8022ba0 <_strtod_l+0xbb0>)
 8022a7c:	2200      	movs	r2, #0
 8022a7e:	f7df fddd 	bl	800263c <__aeabi_dmul>
 8022a82:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022a84:	0004      	movs	r4, r0
 8022a86:	000d      	movs	r5, r1
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	d09f      	beq.n	80229cc <_strtod_l+0x9dc>
 8022a8c:	940a      	str	r4, [sp, #40]	@ 0x28
 8022a8e:	950b      	str	r5, [sp, #44]	@ 0x2c
 8022a90:	e7a1      	b.n	80229d6 <_strtod_l+0x9e6>
 8022a92:	2300      	movs	r3, #0
 8022a94:	4c41      	ldr	r4, [pc, #260]	@ (8022b9c <_strtod_l+0xbac>)
 8022a96:	0025      	movs	r5, r4
 8022a98:	930a      	str	r3, [sp, #40]	@ 0x28
 8022a9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022a9c:	001c      	movs	r4, r3
 8022a9e:	e79a      	b.n	80229d6 <_strtod_l+0x9e6>
 8022aa0:	23d4      	movs	r3, #212	@ 0xd4
 8022aa2:	049b      	lsls	r3, r3, #18
 8022aa4:	18cf      	adds	r7, r1, r3
 8022aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022aa8:	9710      	str	r7, [sp, #64]	@ 0x40
 8022aaa:	2b00      	cmp	r3, #0
 8022aac:	d1c2      	bne.n	8022a34 <_strtod_l+0xa44>
 8022aae:	4b3d      	ldr	r3, [pc, #244]	@ (8022ba4 <_strtod_l+0xbb4>)
 8022ab0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022ab2:	403b      	ands	r3, r7
 8022ab4:	429a      	cmp	r2, r3
 8022ab6:	d1bd      	bne.n	8022a34 <_strtod_l+0xa44>
 8022ab8:	0020      	movs	r0, r4
 8022aba:	0029      	movs	r1, r5
 8022abc:	f7dd fde4 	bl	8000688 <__aeabi_d2lz>
 8022ac0:	f7dd fe1c 	bl	80006fc <__aeabi_l2d>
 8022ac4:	0002      	movs	r2, r0
 8022ac6:	000b      	movs	r3, r1
 8022ac8:	0020      	movs	r0, r4
 8022aca:	0029      	movs	r1, r5
 8022acc:	f7e0 f87e 	bl	8002bcc <__aeabi_dsub>
 8022ad0:	033c      	lsls	r4, r7, #12
 8022ad2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022ad4:	0b24      	lsrs	r4, r4, #12
 8022ad6:	4334      	orrs	r4, r6
 8022ad8:	900e      	str	r0, [sp, #56]	@ 0x38
 8022ada:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022adc:	4a37      	ldr	r2, [pc, #220]	@ (8022bbc <_strtod_l+0xbcc>)
 8022ade:	431c      	orrs	r4, r3
 8022ae0:	d052      	beq.n	8022b88 <_strtod_l+0xb98>
 8022ae2:	4b37      	ldr	r3, [pc, #220]	@ (8022bc0 <_strtod_l+0xbd0>)
 8022ae4:	f7dd fcea 	bl	80004bc <__aeabi_dcmplt>
 8022ae8:	2800      	cmp	r0, #0
 8022aea:	d000      	beq.n	8022aee <_strtod_l+0xafe>
 8022aec:	e4c3      	b.n	8022476 <_strtod_l+0x486>
 8022aee:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022af0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022af2:	4a34      	ldr	r2, [pc, #208]	@ (8022bc4 <_strtod_l+0xbd4>)
 8022af4:	4b2a      	ldr	r3, [pc, #168]	@ (8022ba0 <_strtod_l+0xbb0>)
 8022af6:	f7dd fcf5 	bl	80004e4 <__aeabi_dcmpgt>
 8022afa:	2800      	cmp	r0, #0
 8022afc:	d09a      	beq.n	8022a34 <_strtod_l+0xa44>
 8022afe:	e4ba      	b.n	8022476 <_strtod_l+0x486>
 8022b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	d02a      	beq.n	8022b5c <_strtod_l+0xb6c>
 8022b06:	23d4      	movs	r3, #212	@ 0xd4
 8022b08:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022b0a:	04db      	lsls	r3, r3, #19
 8022b0c:	429a      	cmp	r2, r3
 8022b0e:	d825      	bhi.n	8022b5c <_strtod_l+0xb6c>
 8022b10:	0020      	movs	r0, r4
 8022b12:	0029      	movs	r1, r5
 8022b14:	4a2c      	ldr	r2, [pc, #176]	@ (8022bc8 <_strtod_l+0xbd8>)
 8022b16:	4b2d      	ldr	r3, [pc, #180]	@ (8022bcc <_strtod_l+0xbdc>)
 8022b18:	f7dd fcda 	bl	80004d0 <__aeabi_dcmple>
 8022b1c:	2800      	cmp	r0, #0
 8022b1e:	d016      	beq.n	8022b4e <_strtod_l+0xb5e>
 8022b20:	0020      	movs	r0, r4
 8022b22:	0029      	movs	r1, r5
 8022b24:	f7dd fd92 	bl	800064c <__aeabi_d2uiz>
 8022b28:	2800      	cmp	r0, #0
 8022b2a:	d100      	bne.n	8022b2e <_strtod_l+0xb3e>
 8022b2c:	3001      	adds	r0, #1
 8022b2e:	f7e0 fc75 	bl	800341c <__aeabi_ui2d>
 8022b32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022b34:	0004      	movs	r4, r0
 8022b36:	000d      	movs	r5, r1
 8022b38:	2b00      	cmp	r3, #0
 8022b3a:	d122      	bne.n	8022b82 <_strtod_l+0xb92>
 8022b3c:	2380      	movs	r3, #128	@ 0x80
 8022b3e:	061b      	lsls	r3, r3, #24
 8022b40:	18cb      	adds	r3, r1, r3
 8022b42:	9018      	str	r0, [sp, #96]	@ 0x60
 8022b44:	9319      	str	r3, [sp, #100]	@ 0x64
 8022b46:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022b48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8022b4a:	9214      	str	r2, [sp, #80]	@ 0x50
 8022b4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8022b4e:	22d6      	movs	r2, #214	@ 0xd6
 8022b50:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022b52:	04d2      	lsls	r2, r2, #19
 8022b54:	189b      	adds	r3, r3, r2
 8022b56:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022b58:	1a9b      	subs	r3, r3, r2
 8022b5a:	9315      	str	r3, [sp, #84]	@ 0x54
 8022b5c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022b5e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022b60:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8022b62:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8022b64:	f002 ff46 	bl	80259f4 <__ulp>
 8022b68:	0002      	movs	r2, r0
 8022b6a:	000b      	movs	r3, r1
 8022b6c:	0030      	movs	r0, r6
 8022b6e:	0039      	movs	r1, r7
 8022b70:	f7df fd64 	bl	800263c <__aeabi_dmul>
 8022b74:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022b76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022b78:	f7de fdb8 	bl	80016ec <__aeabi_dadd>
 8022b7c:	0006      	movs	r6, r0
 8022b7e:	000f      	movs	r7, r1
 8022b80:	e791      	b.n	8022aa6 <_strtod_l+0xab6>
 8022b82:	9418      	str	r4, [sp, #96]	@ 0x60
 8022b84:	9519      	str	r5, [sp, #100]	@ 0x64
 8022b86:	e7de      	b.n	8022b46 <_strtod_l+0xb56>
 8022b88:	4b11      	ldr	r3, [pc, #68]	@ (8022bd0 <_strtod_l+0xbe0>)
 8022b8a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8022b8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022b8e:	f7dd fc95 	bl	80004bc <__aeabi_dcmplt>
 8022b92:	e7b2      	b.n	8022afa <_strtod_l+0xb0a>
 8022b94:	fff00000 	.word	0xfff00000
 8022b98:	000fffff 	.word	0x000fffff
 8022b9c:	3ff00000 	.word	0x3ff00000
 8022ba0:	3fe00000 	.word	0x3fe00000
 8022ba4:	7ff00000 	.word	0x7ff00000
 8022ba8:	7fe00000 	.word	0x7fe00000
 8022bac:	fcb00000 	.word	0xfcb00000
 8022bb0:	7c9fffff 	.word	0x7c9fffff
 8022bb4:	7fefffff 	.word	0x7fefffff
 8022bb8:	bff00000 	.word	0xbff00000
 8022bbc:	94a03595 	.word	0x94a03595
 8022bc0:	3fdfffff 	.word	0x3fdfffff
 8022bc4:	35afe535 	.word	0x35afe535
 8022bc8:	ffc00000 	.word	0xffc00000
 8022bcc:	41dfffff 	.word	0x41dfffff
 8022bd0:	3fcfffff 	.word	0x3fcfffff

08022bd4 <strtod>:
 8022bd4:	b510      	push	{r4, lr}
 8022bd6:	4c04      	ldr	r4, [pc, #16]	@ (8022be8 <strtod+0x14>)
 8022bd8:	000a      	movs	r2, r1
 8022bda:	0001      	movs	r1, r0
 8022bdc:	4b03      	ldr	r3, [pc, #12]	@ (8022bec <strtod+0x18>)
 8022bde:	6820      	ldr	r0, [r4, #0]
 8022be0:	f7ff fa06 	bl	8021ff0 <_strtod_l>
 8022be4:	bd10      	pop	{r4, pc}
 8022be6:	46c0      	nop			@ (mov r8, r8)
 8022be8:	200003e0 	.word	0x200003e0
 8022bec:	20000274 	.word	0x20000274

08022bf0 <_strtol_l.constprop.0>:
 8022bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022bf2:	b085      	sub	sp, #20
 8022bf4:	0017      	movs	r7, r2
 8022bf6:	001e      	movs	r6, r3
 8022bf8:	9003      	str	r0, [sp, #12]
 8022bfa:	9101      	str	r1, [sp, #4]
 8022bfc:	2b24      	cmp	r3, #36	@ 0x24
 8022bfe:	d844      	bhi.n	8022c8a <_strtol_l.constprop.0+0x9a>
 8022c00:	000c      	movs	r4, r1
 8022c02:	2b01      	cmp	r3, #1
 8022c04:	d041      	beq.n	8022c8a <_strtol_l.constprop.0+0x9a>
 8022c06:	4b3d      	ldr	r3, [pc, #244]	@ (8022cfc <_strtol_l.constprop.0+0x10c>)
 8022c08:	2208      	movs	r2, #8
 8022c0a:	469c      	mov	ip, r3
 8022c0c:	0023      	movs	r3, r4
 8022c0e:	4661      	mov	r1, ip
 8022c10:	781d      	ldrb	r5, [r3, #0]
 8022c12:	3401      	adds	r4, #1
 8022c14:	5d48      	ldrb	r0, [r1, r5]
 8022c16:	0001      	movs	r1, r0
 8022c18:	4011      	ands	r1, r2
 8022c1a:	4210      	tst	r0, r2
 8022c1c:	d1f6      	bne.n	8022c0c <_strtol_l.constprop.0+0x1c>
 8022c1e:	2d2d      	cmp	r5, #45	@ 0x2d
 8022c20:	d13a      	bne.n	8022c98 <_strtol_l.constprop.0+0xa8>
 8022c22:	7825      	ldrb	r5, [r4, #0]
 8022c24:	1c9c      	adds	r4, r3, #2
 8022c26:	2301      	movs	r3, #1
 8022c28:	9300      	str	r3, [sp, #0]
 8022c2a:	2210      	movs	r2, #16
 8022c2c:	0033      	movs	r3, r6
 8022c2e:	4393      	bics	r3, r2
 8022c30:	d109      	bne.n	8022c46 <_strtol_l.constprop.0+0x56>
 8022c32:	2d30      	cmp	r5, #48	@ 0x30
 8022c34:	d136      	bne.n	8022ca4 <_strtol_l.constprop.0+0xb4>
 8022c36:	2120      	movs	r1, #32
 8022c38:	7823      	ldrb	r3, [r4, #0]
 8022c3a:	438b      	bics	r3, r1
 8022c3c:	2b58      	cmp	r3, #88	@ 0x58
 8022c3e:	d131      	bne.n	8022ca4 <_strtol_l.constprop.0+0xb4>
 8022c40:	0016      	movs	r6, r2
 8022c42:	7865      	ldrb	r5, [r4, #1]
 8022c44:	3402      	adds	r4, #2
 8022c46:	4a2e      	ldr	r2, [pc, #184]	@ (8022d00 <_strtol_l.constprop.0+0x110>)
 8022c48:	9b00      	ldr	r3, [sp, #0]
 8022c4a:	4694      	mov	ip, r2
 8022c4c:	4463      	add	r3, ip
 8022c4e:	0031      	movs	r1, r6
 8022c50:	0018      	movs	r0, r3
 8022c52:	9302      	str	r3, [sp, #8]
 8022c54:	f7dd fb2c 	bl	80002b0 <__aeabi_uidivmod>
 8022c58:	2200      	movs	r2, #0
 8022c5a:	4684      	mov	ip, r0
 8022c5c:	0010      	movs	r0, r2
 8022c5e:	002b      	movs	r3, r5
 8022c60:	3b30      	subs	r3, #48	@ 0x30
 8022c62:	2b09      	cmp	r3, #9
 8022c64:	d825      	bhi.n	8022cb2 <_strtol_l.constprop.0+0xc2>
 8022c66:	001d      	movs	r5, r3
 8022c68:	42ae      	cmp	r6, r5
 8022c6a:	dd31      	ble.n	8022cd0 <_strtol_l.constprop.0+0xe0>
 8022c6c:	1c53      	adds	r3, r2, #1
 8022c6e:	d009      	beq.n	8022c84 <_strtol_l.constprop.0+0x94>
 8022c70:	2201      	movs	r2, #1
 8022c72:	4252      	negs	r2, r2
 8022c74:	4584      	cmp	ip, r0
 8022c76:	d305      	bcc.n	8022c84 <_strtol_l.constprop.0+0x94>
 8022c78:	d101      	bne.n	8022c7e <_strtol_l.constprop.0+0x8e>
 8022c7a:	42a9      	cmp	r1, r5
 8022c7c:	db25      	blt.n	8022cca <_strtol_l.constprop.0+0xda>
 8022c7e:	2201      	movs	r2, #1
 8022c80:	4370      	muls	r0, r6
 8022c82:	1828      	adds	r0, r5, r0
 8022c84:	7825      	ldrb	r5, [r4, #0]
 8022c86:	3401      	adds	r4, #1
 8022c88:	e7e9      	b.n	8022c5e <_strtol_l.constprop.0+0x6e>
 8022c8a:	f000 ffe7 	bl	8023c5c <__errno>
 8022c8e:	2316      	movs	r3, #22
 8022c90:	6003      	str	r3, [r0, #0]
 8022c92:	2000      	movs	r0, #0
 8022c94:	b005      	add	sp, #20
 8022c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c98:	9100      	str	r1, [sp, #0]
 8022c9a:	2d2b      	cmp	r5, #43	@ 0x2b
 8022c9c:	d1c5      	bne.n	8022c2a <_strtol_l.constprop.0+0x3a>
 8022c9e:	7825      	ldrb	r5, [r4, #0]
 8022ca0:	1c9c      	adds	r4, r3, #2
 8022ca2:	e7c2      	b.n	8022c2a <_strtol_l.constprop.0+0x3a>
 8022ca4:	2e00      	cmp	r6, #0
 8022ca6:	d1ce      	bne.n	8022c46 <_strtol_l.constprop.0+0x56>
 8022ca8:	3608      	adds	r6, #8
 8022caa:	2d30      	cmp	r5, #48	@ 0x30
 8022cac:	d0cb      	beq.n	8022c46 <_strtol_l.constprop.0+0x56>
 8022cae:	3602      	adds	r6, #2
 8022cb0:	e7c9      	b.n	8022c46 <_strtol_l.constprop.0+0x56>
 8022cb2:	002b      	movs	r3, r5
 8022cb4:	3b41      	subs	r3, #65	@ 0x41
 8022cb6:	2b19      	cmp	r3, #25
 8022cb8:	d801      	bhi.n	8022cbe <_strtol_l.constprop.0+0xce>
 8022cba:	3d37      	subs	r5, #55	@ 0x37
 8022cbc:	e7d4      	b.n	8022c68 <_strtol_l.constprop.0+0x78>
 8022cbe:	002b      	movs	r3, r5
 8022cc0:	3b61      	subs	r3, #97	@ 0x61
 8022cc2:	2b19      	cmp	r3, #25
 8022cc4:	d804      	bhi.n	8022cd0 <_strtol_l.constprop.0+0xe0>
 8022cc6:	3d57      	subs	r5, #87	@ 0x57
 8022cc8:	e7ce      	b.n	8022c68 <_strtol_l.constprop.0+0x78>
 8022cca:	2201      	movs	r2, #1
 8022ccc:	4252      	negs	r2, r2
 8022cce:	e7d9      	b.n	8022c84 <_strtol_l.constprop.0+0x94>
 8022cd0:	1c53      	adds	r3, r2, #1
 8022cd2:	d108      	bne.n	8022ce6 <_strtol_l.constprop.0+0xf6>
 8022cd4:	2322      	movs	r3, #34	@ 0x22
 8022cd6:	9a03      	ldr	r2, [sp, #12]
 8022cd8:	9802      	ldr	r0, [sp, #8]
 8022cda:	6013      	str	r3, [r2, #0]
 8022cdc:	2f00      	cmp	r7, #0
 8022cde:	d0d9      	beq.n	8022c94 <_strtol_l.constprop.0+0xa4>
 8022ce0:	1e63      	subs	r3, r4, #1
 8022ce2:	9301      	str	r3, [sp, #4]
 8022ce4:	e007      	b.n	8022cf6 <_strtol_l.constprop.0+0x106>
 8022ce6:	9b00      	ldr	r3, [sp, #0]
 8022ce8:	2b00      	cmp	r3, #0
 8022cea:	d000      	beq.n	8022cee <_strtol_l.constprop.0+0xfe>
 8022cec:	4240      	negs	r0, r0
 8022cee:	2f00      	cmp	r7, #0
 8022cf0:	d0d0      	beq.n	8022c94 <_strtol_l.constprop.0+0xa4>
 8022cf2:	2a00      	cmp	r2, #0
 8022cf4:	d1f4      	bne.n	8022ce0 <_strtol_l.constprop.0+0xf0>
 8022cf6:	9b01      	ldr	r3, [sp, #4]
 8022cf8:	603b      	str	r3, [r7, #0]
 8022cfa:	e7cb      	b.n	8022c94 <_strtol_l.constprop.0+0xa4>
 8022cfc:	0802b801 	.word	0x0802b801
 8022d00:	7fffffff 	.word	0x7fffffff

08022d04 <strtol>:
 8022d04:	b510      	push	{r4, lr}
 8022d06:	4c04      	ldr	r4, [pc, #16]	@ (8022d18 <strtol+0x14>)
 8022d08:	0013      	movs	r3, r2
 8022d0a:	000a      	movs	r2, r1
 8022d0c:	0001      	movs	r1, r0
 8022d0e:	6820      	ldr	r0, [r4, #0]
 8022d10:	f7ff ff6e 	bl	8022bf0 <_strtol_l.constprop.0>
 8022d14:	bd10      	pop	{r4, pc}
 8022d16:	46c0      	nop			@ (mov r8, r8)
 8022d18:	200003e0 	.word	0x200003e0

08022d1c <__cvt>:
 8022d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022d1e:	001f      	movs	r7, r3
 8022d20:	2300      	movs	r3, #0
 8022d22:	0016      	movs	r6, r2
 8022d24:	b08b      	sub	sp, #44	@ 0x2c
 8022d26:	429f      	cmp	r7, r3
 8022d28:	da04      	bge.n	8022d34 <__cvt+0x18>
 8022d2a:	2180      	movs	r1, #128	@ 0x80
 8022d2c:	0609      	lsls	r1, r1, #24
 8022d2e:	187b      	adds	r3, r7, r1
 8022d30:	001f      	movs	r7, r3
 8022d32:	232d      	movs	r3, #45	@ 0x2d
 8022d34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8022d36:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8022d38:	7013      	strb	r3, [r2, #0]
 8022d3a:	2320      	movs	r3, #32
 8022d3c:	2203      	movs	r2, #3
 8022d3e:	439d      	bics	r5, r3
 8022d40:	2d46      	cmp	r5, #70	@ 0x46
 8022d42:	d007      	beq.n	8022d54 <__cvt+0x38>
 8022d44:	002b      	movs	r3, r5
 8022d46:	3b45      	subs	r3, #69	@ 0x45
 8022d48:	4259      	negs	r1, r3
 8022d4a:	414b      	adcs	r3, r1
 8022d4c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8022d4e:	3a01      	subs	r2, #1
 8022d50:	18cb      	adds	r3, r1, r3
 8022d52:	9310      	str	r3, [sp, #64]	@ 0x40
 8022d54:	ab09      	add	r3, sp, #36	@ 0x24
 8022d56:	9304      	str	r3, [sp, #16]
 8022d58:	ab08      	add	r3, sp, #32
 8022d5a:	9303      	str	r3, [sp, #12]
 8022d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022d5e:	9200      	str	r2, [sp, #0]
 8022d60:	9302      	str	r3, [sp, #8]
 8022d62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022d64:	0032      	movs	r2, r6
 8022d66:	9301      	str	r3, [sp, #4]
 8022d68:	003b      	movs	r3, r7
 8022d6a:	f001 f84d 	bl	8023e08 <_dtoa_r>
 8022d6e:	0004      	movs	r4, r0
 8022d70:	2d47      	cmp	r5, #71	@ 0x47
 8022d72:	d11b      	bne.n	8022dac <__cvt+0x90>
 8022d74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022d76:	07db      	lsls	r3, r3, #31
 8022d78:	d511      	bpl.n	8022d9e <__cvt+0x82>
 8022d7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022d7c:	18c3      	adds	r3, r0, r3
 8022d7e:	9307      	str	r3, [sp, #28]
 8022d80:	2200      	movs	r2, #0
 8022d82:	2300      	movs	r3, #0
 8022d84:	0030      	movs	r0, r6
 8022d86:	0039      	movs	r1, r7
 8022d88:	f7dd fb92 	bl	80004b0 <__aeabi_dcmpeq>
 8022d8c:	2800      	cmp	r0, #0
 8022d8e:	d001      	beq.n	8022d94 <__cvt+0x78>
 8022d90:	9b07      	ldr	r3, [sp, #28]
 8022d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d94:	2230      	movs	r2, #48	@ 0x30
 8022d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022d98:	9907      	ldr	r1, [sp, #28]
 8022d9a:	428b      	cmp	r3, r1
 8022d9c:	d320      	bcc.n	8022de0 <__cvt+0xc4>
 8022d9e:	0020      	movs	r0, r4
 8022da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022da2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8022da4:	1b1b      	subs	r3, r3, r4
 8022da6:	6013      	str	r3, [r2, #0]
 8022da8:	b00b      	add	sp, #44	@ 0x2c
 8022daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022dac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022dae:	18c3      	adds	r3, r0, r3
 8022db0:	9307      	str	r3, [sp, #28]
 8022db2:	2d46      	cmp	r5, #70	@ 0x46
 8022db4:	d1e4      	bne.n	8022d80 <__cvt+0x64>
 8022db6:	7803      	ldrb	r3, [r0, #0]
 8022db8:	2b30      	cmp	r3, #48	@ 0x30
 8022dba:	d10c      	bne.n	8022dd6 <__cvt+0xba>
 8022dbc:	2200      	movs	r2, #0
 8022dbe:	2300      	movs	r3, #0
 8022dc0:	0030      	movs	r0, r6
 8022dc2:	0039      	movs	r1, r7
 8022dc4:	f7dd fb74 	bl	80004b0 <__aeabi_dcmpeq>
 8022dc8:	2800      	cmp	r0, #0
 8022dca:	d104      	bne.n	8022dd6 <__cvt+0xba>
 8022dcc:	2301      	movs	r3, #1
 8022dce:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022dd0:	1a9b      	subs	r3, r3, r2
 8022dd2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022dd4:	6013      	str	r3, [r2, #0]
 8022dd6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8022dd8:	9a07      	ldr	r2, [sp, #28]
 8022dda:	681b      	ldr	r3, [r3, #0]
 8022ddc:	18d3      	adds	r3, r2, r3
 8022dde:	e7ce      	b.n	8022d7e <__cvt+0x62>
 8022de0:	1c59      	adds	r1, r3, #1
 8022de2:	9109      	str	r1, [sp, #36]	@ 0x24
 8022de4:	701a      	strb	r2, [r3, #0]
 8022de6:	e7d6      	b.n	8022d96 <__cvt+0x7a>

08022de8 <__exponent>:
 8022de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022dea:	232b      	movs	r3, #43	@ 0x2b
 8022dec:	0005      	movs	r5, r0
 8022dee:	000c      	movs	r4, r1
 8022df0:	b085      	sub	sp, #20
 8022df2:	7002      	strb	r2, [r0, #0]
 8022df4:	2900      	cmp	r1, #0
 8022df6:	da01      	bge.n	8022dfc <__exponent+0x14>
 8022df8:	424c      	negs	r4, r1
 8022dfa:	3302      	adds	r3, #2
 8022dfc:	706b      	strb	r3, [r5, #1]
 8022dfe:	2c09      	cmp	r4, #9
 8022e00:	dd2c      	ble.n	8022e5c <__exponent+0x74>
 8022e02:	ab02      	add	r3, sp, #8
 8022e04:	1dde      	adds	r6, r3, #7
 8022e06:	0020      	movs	r0, r4
 8022e08:	210a      	movs	r1, #10
 8022e0a:	f7dd fb3b 	bl	8000484 <__aeabi_idivmod>
 8022e0e:	0037      	movs	r7, r6
 8022e10:	3130      	adds	r1, #48	@ 0x30
 8022e12:	3e01      	subs	r6, #1
 8022e14:	0020      	movs	r0, r4
 8022e16:	7031      	strb	r1, [r6, #0]
 8022e18:	210a      	movs	r1, #10
 8022e1a:	9401      	str	r4, [sp, #4]
 8022e1c:	f7dd fa4c 	bl	80002b8 <__divsi3>
 8022e20:	9b01      	ldr	r3, [sp, #4]
 8022e22:	0004      	movs	r4, r0
 8022e24:	2b63      	cmp	r3, #99	@ 0x63
 8022e26:	dcee      	bgt.n	8022e06 <__exponent+0x1e>
 8022e28:	1eba      	subs	r2, r7, #2
 8022e2a:	1ca8      	adds	r0, r5, #2
 8022e2c:	0001      	movs	r1, r0
 8022e2e:	0013      	movs	r3, r2
 8022e30:	3430      	adds	r4, #48	@ 0x30
 8022e32:	7014      	strb	r4, [r2, #0]
 8022e34:	ac02      	add	r4, sp, #8
 8022e36:	3407      	adds	r4, #7
 8022e38:	429c      	cmp	r4, r3
 8022e3a:	d80a      	bhi.n	8022e52 <__exponent+0x6a>
 8022e3c:	2300      	movs	r3, #0
 8022e3e:	42a2      	cmp	r2, r4
 8022e40:	d803      	bhi.n	8022e4a <__exponent+0x62>
 8022e42:	3309      	adds	r3, #9
 8022e44:	aa02      	add	r2, sp, #8
 8022e46:	189b      	adds	r3, r3, r2
 8022e48:	1bdb      	subs	r3, r3, r7
 8022e4a:	18c0      	adds	r0, r0, r3
 8022e4c:	1b40      	subs	r0, r0, r5
 8022e4e:	b005      	add	sp, #20
 8022e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e52:	781c      	ldrb	r4, [r3, #0]
 8022e54:	3301      	adds	r3, #1
 8022e56:	700c      	strb	r4, [r1, #0]
 8022e58:	3101      	adds	r1, #1
 8022e5a:	e7eb      	b.n	8022e34 <__exponent+0x4c>
 8022e5c:	2330      	movs	r3, #48	@ 0x30
 8022e5e:	18e4      	adds	r4, r4, r3
 8022e60:	70ab      	strb	r3, [r5, #2]
 8022e62:	1d28      	adds	r0, r5, #4
 8022e64:	70ec      	strb	r4, [r5, #3]
 8022e66:	e7f1      	b.n	8022e4c <__exponent+0x64>

08022e68 <_printf_float>:
 8022e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e6a:	b097      	sub	sp, #92	@ 0x5c
 8022e6c:	000d      	movs	r5, r1
 8022e6e:	920a      	str	r2, [sp, #40]	@ 0x28
 8022e70:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8022e72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022e74:	9009      	str	r0, [sp, #36]	@ 0x24
 8022e76:	f000 fe9f 	bl	8023bb8 <_localeconv_r>
 8022e7a:	6803      	ldr	r3, [r0, #0]
 8022e7c:	0018      	movs	r0, r3
 8022e7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022e80:	f7dd f974 	bl	800016c <strlen>
 8022e84:	2300      	movs	r3, #0
 8022e86:	900f      	str	r0, [sp, #60]	@ 0x3c
 8022e88:	9314      	str	r3, [sp, #80]	@ 0x50
 8022e8a:	7e2b      	ldrb	r3, [r5, #24]
 8022e8c:	2207      	movs	r2, #7
 8022e8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8022e90:	682b      	ldr	r3, [r5, #0]
 8022e92:	930e      	str	r3, [sp, #56]	@ 0x38
 8022e94:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022e96:	6823      	ldr	r3, [r4, #0]
 8022e98:	05c9      	lsls	r1, r1, #23
 8022e9a:	d545      	bpl.n	8022f28 <_printf_float+0xc0>
 8022e9c:	189b      	adds	r3, r3, r2
 8022e9e:	4393      	bics	r3, r2
 8022ea0:	001a      	movs	r2, r3
 8022ea2:	3208      	adds	r2, #8
 8022ea4:	6022      	str	r2, [r4, #0]
 8022ea6:	2201      	movs	r2, #1
 8022ea8:	681e      	ldr	r6, [r3, #0]
 8022eaa:	685f      	ldr	r7, [r3, #4]
 8022eac:	007b      	lsls	r3, r7, #1
 8022eae:	085b      	lsrs	r3, r3, #1
 8022eb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8022eb2:	9610      	str	r6, [sp, #64]	@ 0x40
 8022eb4:	64ae      	str	r6, [r5, #72]	@ 0x48
 8022eb6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8022eb8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022eba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022ebc:	4ba7      	ldr	r3, [pc, #668]	@ (802315c <_printf_float+0x2f4>)
 8022ebe:	4252      	negs	r2, r2
 8022ec0:	f7e0 fa20 	bl	8003304 <__aeabi_dcmpun>
 8022ec4:	2800      	cmp	r0, #0
 8022ec6:	d131      	bne.n	8022f2c <_printf_float+0xc4>
 8022ec8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022eca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8022ecc:	2201      	movs	r2, #1
 8022ece:	4ba3      	ldr	r3, [pc, #652]	@ (802315c <_printf_float+0x2f4>)
 8022ed0:	4252      	negs	r2, r2
 8022ed2:	f7dd fafd 	bl	80004d0 <__aeabi_dcmple>
 8022ed6:	2800      	cmp	r0, #0
 8022ed8:	d128      	bne.n	8022f2c <_printf_float+0xc4>
 8022eda:	2200      	movs	r2, #0
 8022edc:	2300      	movs	r3, #0
 8022ede:	0030      	movs	r0, r6
 8022ee0:	0039      	movs	r1, r7
 8022ee2:	f7dd faeb 	bl	80004bc <__aeabi_dcmplt>
 8022ee6:	2800      	cmp	r0, #0
 8022ee8:	d003      	beq.n	8022ef2 <_printf_float+0x8a>
 8022eea:	002b      	movs	r3, r5
 8022eec:	222d      	movs	r2, #45	@ 0x2d
 8022eee:	3343      	adds	r3, #67	@ 0x43
 8022ef0:	701a      	strb	r2, [r3, #0]
 8022ef2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022ef4:	4f9a      	ldr	r7, [pc, #616]	@ (8023160 <_printf_float+0x2f8>)
 8022ef6:	2b47      	cmp	r3, #71	@ 0x47
 8022ef8:	d900      	bls.n	8022efc <_printf_float+0x94>
 8022efa:	4f9a      	ldr	r7, [pc, #616]	@ (8023164 <_printf_float+0x2fc>)
 8022efc:	2303      	movs	r3, #3
 8022efe:	2400      	movs	r4, #0
 8022f00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022f02:	612b      	str	r3, [r5, #16]
 8022f04:	3301      	adds	r3, #1
 8022f06:	439a      	bics	r2, r3
 8022f08:	602a      	str	r2, [r5, #0]
 8022f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022f0c:	0029      	movs	r1, r5
 8022f0e:	9300      	str	r3, [sp, #0]
 8022f10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022f12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022f14:	aa15      	add	r2, sp, #84	@ 0x54
 8022f16:	f000 f9e5 	bl	80232e4 <_printf_common>
 8022f1a:	3001      	adds	r0, #1
 8022f1c:	d000      	beq.n	8022f20 <_printf_float+0xb8>
 8022f1e:	e09f      	b.n	8023060 <_printf_float+0x1f8>
 8022f20:	2001      	movs	r0, #1
 8022f22:	4240      	negs	r0, r0
 8022f24:	b017      	add	sp, #92	@ 0x5c
 8022f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f28:	3307      	adds	r3, #7
 8022f2a:	e7b8      	b.n	8022e9e <_printf_float+0x36>
 8022f2c:	0032      	movs	r2, r6
 8022f2e:	003b      	movs	r3, r7
 8022f30:	0030      	movs	r0, r6
 8022f32:	0039      	movs	r1, r7
 8022f34:	f7e0 f9e6 	bl	8003304 <__aeabi_dcmpun>
 8022f38:	2800      	cmp	r0, #0
 8022f3a:	d00b      	beq.n	8022f54 <_printf_float+0xec>
 8022f3c:	2f00      	cmp	r7, #0
 8022f3e:	da03      	bge.n	8022f48 <_printf_float+0xe0>
 8022f40:	002b      	movs	r3, r5
 8022f42:	222d      	movs	r2, #45	@ 0x2d
 8022f44:	3343      	adds	r3, #67	@ 0x43
 8022f46:	701a      	strb	r2, [r3, #0]
 8022f48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022f4a:	4f87      	ldr	r7, [pc, #540]	@ (8023168 <_printf_float+0x300>)
 8022f4c:	2b47      	cmp	r3, #71	@ 0x47
 8022f4e:	d9d5      	bls.n	8022efc <_printf_float+0x94>
 8022f50:	4f86      	ldr	r7, [pc, #536]	@ (802316c <_printf_float+0x304>)
 8022f52:	e7d3      	b.n	8022efc <_printf_float+0x94>
 8022f54:	2220      	movs	r2, #32
 8022f56:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8022f58:	686b      	ldr	r3, [r5, #4]
 8022f5a:	4394      	bics	r4, r2
 8022f5c:	1c5a      	adds	r2, r3, #1
 8022f5e:	d146      	bne.n	8022fee <_printf_float+0x186>
 8022f60:	3307      	adds	r3, #7
 8022f62:	606b      	str	r3, [r5, #4]
 8022f64:	2380      	movs	r3, #128	@ 0x80
 8022f66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022f68:	00db      	lsls	r3, r3, #3
 8022f6a:	4313      	orrs	r3, r2
 8022f6c:	2200      	movs	r2, #0
 8022f6e:	602b      	str	r3, [r5, #0]
 8022f70:	9206      	str	r2, [sp, #24]
 8022f72:	aa14      	add	r2, sp, #80	@ 0x50
 8022f74:	9205      	str	r2, [sp, #20]
 8022f76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022f78:	a90a      	add	r1, sp, #40	@ 0x28
 8022f7a:	9204      	str	r2, [sp, #16]
 8022f7c:	aa13      	add	r2, sp, #76	@ 0x4c
 8022f7e:	9203      	str	r2, [sp, #12]
 8022f80:	2223      	movs	r2, #35	@ 0x23
 8022f82:	1852      	adds	r2, r2, r1
 8022f84:	9202      	str	r2, [sp, #8]
 8022f86:	9301      	str	r3, [sp, #4]
 8022f88:	686b      	ldr	r3, [r5, #4]
 8022f8a:	0032      	movs	r2, r6
 8022f8c:	9300      	str	r3, [sp, #0]
 8022f8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022f90:	003b      	movs	r3, r7
 8022f92:	f7ff fec3 	bl	8022d1c <__cvt>
 8022f96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022f98:	0007      	movs	r7, r0
 8022f9a:	2c47      	cmp	r4, #71	@ 0x47
 8022f9c:	d12d      	bne.n	8022ffa <_printf_float+0x192>
 8022f9e:	1cd3      	adds	r3, r2, #3
 8022fa0:	db02      	blt.n	8022fa8 <_printf_float+0x140>
 8022fa2:	686b      	ldr	r3, [r5, #4]
 8022fa4:	429a      	cmp	r2, r3
 8022fa6:	dd48      	ble.n	802303a <_printf_float+0x1d2>
 8022fa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022faa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8022fac:	3b02      	subs	r3, #2
 8022fae:	b2db      	uxtb	r3, r3
 8022fb0:	930c      	str	r3, [sp, #48]	@ 0x30
 8022fb2:	0028      	movs	r0, r5
 8022fb4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022fb6:	3901      	subs	r1, #1
 8022fb8:	3050      	adds	r0, #80	@ 0x50
 8022fba:	9113      	str	r1, [sp, #76]	@ 0x4c
 8022fbc:	f7ff ff14 	bl	8022de8 <__exponent>
 8022fc0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022fc2:	0004      	movs	r4, r0
 8022fc4:	1813      	adds	r3, r2, r0
 8022fc6:	612b      	str	r3, [r5, #16]
 8022fc8:	2a01      	cmp	r2, #1
 8022fca:	dc02      	bgt.n	8022fd2 <_printf_float+0x16a>
 8022fcc:	682a      	ldr	r2, [r5, #0]
 8022fce:	07d2      	lsls	r2, r2, #31
 8022fd0:	d501      	bpl.n	8022fd6 <_printf_float+0x16e>
 8022fd2:	3301      	adds	r3, #1
 8022fd4:	612b      	str	r3, [r5, #16]
 8022fd6:	2323      	movs	r3, #35	@ 0x23
 8022fd8:	aa0a      	add	r2, sp, #40	@ 0x28
 8022fda:	189b      	adds	r3, r3, r2
 8022fdc:	781b      	ldrb	r3, [r3, #0]
 8022fde:	2b00      	cmp	r3, #0
 8022fe0:	d100      	bne.n	8022fe4 <_printf_float+0x17c>
 8022fe2:	e792      	b.n	8022f0a <_printf_float+0xa2>
 8022fe4:	002b      	movs	r3, r5
 8022fe6:	222d      	movs	r2, #45	@ 0x2d
 8022fe8:	3343      	adds	r3, #67	@ 0x43
 8022fea:	701a      	strb	r2, [r3, #0]
 8022fec:	e78d      	b.n	8022f0a <_printf_float+0xa2>
 8022fee:	2c47      	cmp	r4, #71	@ 0x47
 8022ff0:	d1b8      	bne.n	8022f64 <_printf_float+0xfc>
 8022ff2:	2b00      	cmp	r3, #0
 8022ff4:	d1b6      	bne.n	8022f64 <_printf_float+0xfc>
 8022ff6:	3301      	adds	r3, #1
 8022ff8:	e7b3      	b.n	8022f62 <_printf_float+0xfa>
 8022ffa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022ffc:	0011      	movs	r1, r2
 8022ffe:	2b65      	cmp	r3, #101	@ 0x65
 8023000:	d9d7      	bls.n	8022fb2 <_printf_float+0x14a>
 8023002:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023004:	2b66      	cmp	r3, #102	@ 0x66
 8023006:	d11a      	bne.n	802303e <_printf_float+0x1d6>
 8023008:	686b      	ldr	r3, [r5, #4]
 802300a:	2a00      	cmp	r2, #0
 802300c:	dd09      	ble.n	8023022 <_printf_float+0x1ba>
 802300e:	612a      	str	r2, [r5, #16]
 8023010:	2b00      	cmp	r3, #0
 8023012:	d102      	bne.n	802301a <_printf_float+0x1b2>
 8023014:	6829      	ldr	r1, [r5, #0]
 8023016:	07c9      	lsls	r1, r1, #31
 8023018:	d50b      	bpl.n	8023032 <_printf_float+0x1ca>
 802301a:	3301      	adds	r3, #1
 802301c:	189b      	adds	r3, r3, r2
 802301e:	612b      	str	r3, [r5, #16]
 8023020:	e007      	b.n	8023032 <_printf_float+0x1ca>
 8023022:	2b00      	cmp	r3, #0
 8023024:	d103      	bne.n	802302e <_printf_float+0x1c6>
 8023026:	2201      	movs	r2, #1
 8023028:	6829      	ldr	r1, [r5, #0]
 802302a:	4211      	tst	r1, r2
 802302c:	d000      	beq.n	8023030 <_printf_float+0x1c8>
 802302e:	1c9a      	adds	r2, r3, #2
 8023030:	612a      	str	r2, [r5, #16]
 8023032:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023034:	2400      	movs	r4, #0
 8023036:	65ab      	str	r3, [r5, #88]	@ 0x58
 8023038:	e7cd      	b.n	8022fd6 <_printf_float+0x16e>
 802303a:	2367      	movs	r3, #103	@ 0x67
 802303c:	930c      	str	r3, [sp, #48]	@ 0x30
 802303e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023040:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023042:	4299      	cmp	r1, r3
 8023044:	db06      	blt.n	8023054 <_printf_float+0x1ec>
 8023046:	682b      	ldr	r3, [r5, #0]
 8023048:	6129      	str	r1, [r5, #16]
 802304a:	07db      	lsls	r3, r3, #31
 802304c:	d5f1      	bpl.n	8023032 <_printf_float+0x1ca>
 802304e:	3101      	adds	r1, #1
 8023050:	6129      	str	r1, [r5, #16]
 8023052:	e7ee      	b.n	8023032 <_printf_float+0x1ca>
 8023054:	2201      	movs	r2, #1
 8023056:	2900      	cmp	r1, #0
 8023058:	dce0      	bgt.n	802301c <_printf_float+0x1b4>
 802305a:	1892      	adds	r2, r2, r2
 802305c:	1a52      	subs	r2, r2, r1
 802305e:	e7dd      	b.n	802301c <_printf_float+0x1b4>
 8023060:	682a      	ldr	r2, [r5, #0]
 8023062:	0553      	lsls	r3, r2, #21
 8023064:	d408      	bmi.n	8023078 <_printf_float+0x210>
 8023066:	692b      	ldr	r3, [r5, #16]
 8023068:	003a      	movs	r2, r7
 802306a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802306c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802306e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023070:	47a0      	blx	r4
 8023072:	3001      	adds	r0, #1
 8023074:	d129      	bne.n	80230ca <_printf_float+0x262>
 8023076:	e753      	b.n	8022f20 <_printf_float+0xb8>
 8023078:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802307a:	2b65      	cmp	r3, #101	@ 0x65
 802307c:	d800      	bhi.n	8023080 <_printf_float+0x218>
 802307e:	e0da      	b.n	8023236 <_printf_float+0x3ce>
 8023080:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8023082:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8023084:	2200      	movs	r2, #0
 8023086:	2300      	movs	r3, #0
 8023088:	f7dd fa12 	bl	80004b0 <__aeabi_dcmpeq>
 802308c:	2800      	cmp	r0, #0
 802308e:	d033      	beq.n	80230f8 <_printf_float+0x290>
 8023090:	2301      	movs	r3, #1
 8023092:	4a37      	ldr	r2, [pc, #220]	@ (8023170 <_printf_float+0x308>)
 8023094:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023098:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802309a:	47a0      	blx	r4
 802309c:	3001      	adds	r0, #1
 802309e:	d100      	bne.n	80230a2 <_printf_float+0x23a>
 80230a0:	e73e      	b.n	8022f20 <_printf_float+0xb8>
 80230a2:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80230a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80230a6:	42b3      	cmp	r3, r6
 80230a8:	db02      	blt.n	80230b0 <_printf_float+0x248>
 80230aa:	682b      	ldr	r3, [r5, #0]
 80230ac:	07db      	lsls	r3, r3, #31
 80230ae:	d50c      	bpl.n	80230ca <_printf_float+0x262>
 80230b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80230b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80230b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80230b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80230b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80230ba:	47a0      	blx	r4
 80230bc:	2400      	movs	r4, #0
 80230be:	3001      	adds	r0, #1
 80230c0:	d100      	bne.n	80230c4 <_printf_float+0x25c>
 80230c2:	e72d      	b.n	8022f20 <_printf_float+0xb8>
 80230c4:	1e73      	subs	r3, r6, #1
 80230c6:	42a3      	cmp	r3, r4
 80230c8:	dc0a      	bgt.n	80230e0 <_printf_float+0x278>
 80230ca:	682b      	ldr	r3, [r5, #0]
 80230cc:	079b      	lsls	r3, r3, #30
 80230ce:	d500      	bpl.n	80230d2 <_printf_float+0x26a>
 80230d0:	e105      	b.n	80232de <_printf_float+0x476>
 80230d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80230d4:	68e8      	ldr	r0, [r5, #12]
 80230d6:	4298      	cmp	r0, r3
 80230d8:	db00      	blt.n	80230dc <_printf_float+0x274>
 80230da:	e723      	b.n	8022f24 <_printf_float+0xbc>
 80230dc:	0018      	movs	r0, r3
 80230de:	e721      	b.n	8022f24 <_printf_float+0xbc>
 80230e0:	002a      	movs	r2, r5
 80230e2:	2301      	movs	r3, #1
 80230e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80230e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80230e8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80230ea:	321a      	adds	r2, #26
 80230ec:	47b8      	blx	r7
 80230ee:	3001      	adds	r0, #1
 80230f0:	d100      	bne.n	80230f4 <_printf_float+0x28c>
 80230f2:	e715      	b.n	8022f20 <_printf_float+0xb8>
 80230f4:	3401      	adds	r4, #1
 80230f6:	e7e5      	b.n	80230c4 <_printf_float+0x25c>
 80230f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80230fa:	2b00      	cmp	r3, #0
 80230fc:	dc3a      	bgt.n	8023174 <_printf_float+0x30c>
 80230fe:	2301      	movs	r3, #1
 8023100:	4a1b      	ldr	r2, [pc, #108]	@ (8023170 <_printf_float+0x308>)
 8023102:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023104:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023106:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023108:	47a0      	blx	r4
 802310a:	3001      	adds	r0, #1
 802310c:	d100      	bne.n	8023110 <_printf_float+0x2a8>
 802310e:	e707      	b.n	8022f20 <_printf_float+0xb8>
 8023110:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8023112:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023114:	4333      	orrs	r3, r6
 8023116:	d102      	bne.n	802311e <_printf_float+0x2b6>
 8023118:	682b      	ldr	r3, [r5, #0]
 802311a:	07db      	lsls	r3, r3, #31
 802311c:	d5d5      	bpl.n	80230ca <_printf_float+0x262>
 802311e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023120:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023122:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023124:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023126:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023128:	47a0      	blx	r4
 802312a:	2300      	movs	r3, #0
 802312c:	3001      	adds	r0, #1
 802312e:	d100      	bne.n	8023132 <_printf_float+0x2ca>
 8023130:	e6f6      	b.n	8022f20 <_printf_float+0xb8>
 8023132:	930c      	str	r3, [sp, #48]	@ 0x30
 8023134:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023136:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023138:	425b      	negs	r3, r3
 802313a:	4293      	cmp	r3, r2
 802313c:	dc01      	bgt.n	8023142 <_printf_float+0x2da>
 802313e:	0033      	movs	r3, r6
 8023140:	e792      	b.n	8023068 <_printf_float+0x200>
 8023142:	002a      	movs	r2, r5
 8023144:	2301      	movs	r3, #1
 8023146:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023148:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802314a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802314c:	321a      	adds	r2, #26
 802314e:	47a0      	blx	r4
 8023150:	3001      	adds	r0, #1
 8023152:	d100      	bne.n	8023156 <_printf_float+0x2ee>
 8023154:	e6e4      	b.n	8022f20 <_printf_float+0xb8>
 8023156:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023158:	3301      	adds	r3, #1
 802315a:	e7ea      	b.n	8023132 <_printf_float+0x2ca>
 802315c:	7fefffff 	.word	0x7fefffff
 8023160:	0802b901 	.word	0x0802b901
 8023164:	0802b905 	.word	0x0802b905
 8023168:	0802b909 	.word	0x0802b909
 802316c:	0802b90d 	.word	0x0802b90d
 8023170:	0802b911 	.word	0x0802b911
 8023174:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023176:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8023178:	930c      	str	r3, [sp, #48]	@ 0x30
 802317a:	429e      	cmp	r6, r3
 802317c:	dd00      	ble.n	8023180 <_printf_float+0x318>
 802317e:	001e      	movs	r6, r3
 8023180:	2e00      	cmp	r6, #0
 8023182:	dc31      	bgt.n	80231e8 <_printf_float+0x380>
 8023184:	43f3      	mvns	r3, r6
 8023186:	2400      	movs	r4, #0
 8023188:	17db      	asrs	r3, r3, #31
 802318a:	4033      	ands	r3, r6
 802318c:	930e      	str	r3, [sp, #56]	@ 0x38
 802318e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8023190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023192:	1af3      	subs	r3, r6, r3
 8023194:	42a3      	cmp	r3, r4
 8023196:	dc30      	bgt.n	80231fa <_printf_float+0x392>
 8023198:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802319a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802319c:	429a      	cmp	r2, r3
 802319e:	dc38      	bgt.n	8023212 <_printf_float+0x3aa>
 80231a0:	682b      	ldr	r3, [r5, #0]
 80231a2:	07db      	lsls	r3, r3, #31
 80231a4:	d435      	bmi.n	8023212 <_printf_float+0x3aa>
 80231a6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80231a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80231aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80231ac:	1b9b      	subs	r3, r3, r6
 80231ae:	1b14      	subs	r4, r2, r4
 80231b0:	429c      	cmp	r4, r3
 80231b2:	dd00      	ble.n	80231b6 <_printf_float+0x34e>
 80231b4:	001c      	movs	r4, r3
 80231b6:	2c00      	cmp	r4, #0
 80231b8:	dc34      	bgt.n	8023224 <_printf_float+0x3bc>
 80231ba:	43e3      	mvns	r3, r4
 80231bc:	2600      	movs	r6, #0
 80231be:	17db      	asrs	r3, r3, #31
 80231c0:	401c      	ands	r4, r3
 80231c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80231c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80231c6:	1ad3      	subs	r3, r2, r3
 80231c8:	1b1b      	subs	r3, r3, r4
 80231ca:	42b3      	cmp	r3, r6
 80231cc:	dc00      	bgt.n	80231d0 <_printf_float+0x368>
 80231ce:	e77c      	b.n	80230ca <_printf_float+0x262>
 80231d0:	002a      	movs	r2, r5
 80231d2:	2301      	movs	r3, #1
 80231d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80231d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80231d8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80231da:	321a      	adds	r2, #26
 80231dc:	47b8      	blx	r7
 80231de:	3001      	adds	r0, #1
 80231e0:	d100      	bne.n	80231e4 <_printf_float+0x37c>
 80231e2:	e69d      	b.n	8022f20 <_printf_float+0xb8>
 80231e4:	3601      	adds	r6, #1
 80231e6:	e7ec      	b.n	80231c2 <_printf_float+0x35a>
 80231e8:	0033      	movs	r3, r6
 80231ea:	003a      	movs	r2, r7
 80231ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80231ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80231f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80231f2:	47a0      	blx	r4
 80231f4:	3001      	adds	r0, #1
 80231f6:	d1c5      	bne.n	8023184 <_printf_float+0x31c>
 80231f8:	e692      	b.n	8022f20 <_printf_float+0xb8>
 80231fa:	002a      	movs	r2, r5
 80231fc:	2301      	movs	r3, #1
 80231fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023200:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023202:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023204:	321a      	adds	r2, #26
 8023206:	47b0      	blx	r6
 8023208:	3001      	adds	r0, #1
 802320a:	d100      	bne.n	802320e <_printf_float+0x3a6>
 802320c:	e688      	b.n	8022f20 <_printf_float+0xb8>
 802320e:	3401      	adds	r4, #1
 8023210:	e7bd      	b.n	802318e <_printf_float+0x326>
 8023212:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023214:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023216:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023218:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802321a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802321c:	47a0      	blx	r4
 802321e:	3001      	adds	r0, #1
 8023220:	d1c1      	bne.n	80231a6 <_printf_float+0x33e>
 8023222:	e67d      	b.n	8022f20 <_printf_float+0xb8>
 8023224:	19ba      	adds	r2, r7, r6
 8023226:	0023      	movs	r3, r4
 8023228:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802322a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802322c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802322e:	47b0      	blx	r6
 8023230:	3001      	adds	r0, #1
 8023232:	d1c2      	bne.n	80231ba <_printf_float+0x352>
 8023234:	e674      	b.n	8022f20 <_printf_float+0xb8>
 8023236:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023238:	930c      	str	r3, [sp, #48]	@ 0x30
 802323a:	2b01      	cmp	r3, #1
 802323c:	dc02      	bgt.n	8023244 <_printf_float+0x3dc>
 802323e:	2301      	movs	r3, #1
 8023240:	421a      	tst	r2, r3
 8023242:	d039      	beq.n	80232b8 <_printf_float+0x450>
 8023244:	2301      	movs	r3, #1
 8023246:	003a      	movs	r2, r7
 8023248:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802324a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802324c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802324e:	47b0      	blx	r6
 8023250:	3001      	adds	r0, #1
 8023252:	d100      	bne.n	8023256 <_printf_float+0x3ee>
 8023254:	e664      	b.n	8022f20 <_printf_float+0xb8>
 8023256:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023258:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802325a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802325c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802325e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023260:	47b0      	blx	r6
 8023262:	3001      	adds	r0, #1
 8023264:	d100      	bne.n	8023268 <_printf_float+0x400>
 8023266:	e65b      	b.n	8022f20 <_printf_float+0xb8>
 8023268:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 802326a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 802326c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802326e:	2200      	movs	r2, #0
 8023270:	3b01      	subs	r3, #1
 8023272:	930c      	str	r3, [sp, #48]	@ 0x30
 8023274:	2300      	movs	r3, #0
 8023276:	f7dd f91b 	bl	80004b0 <__aeabi_dcmpeq>
 802327a:	2800      	cmp	r0, #0
 802327c:	d11a      	bne.n	80232b4 <_printf_float+0x44c>
 802327e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023280:	1c7a      	adds	r2, r7, #1
 8023282:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023284:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023286:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8023288:	47b0      	blx	r6
 802328a:	3001      	adds	r0, #1
 802328c:	d10e      	bne.n	80232ac <_printf_float+0x444>
 802328e:	e647      	b.n	8022f20 <_printf_float+0xb8>
 8023290:	002a      	movs	r2, r5
 8023292:	2301      	movs	r3, #1
 8023294:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023298:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802329a:	321a      	adds	r2, #26
 802329c:	47b8      	blx	r7
 802329e:	3001      	adds	r0, #1
 80232a0:	d100      	bne.n	80232a4 <_printf_float+0x43c>
 80232a2:	e63d      	b.n	8022f20 <_printf_float+0xb8>
 80232a4:	3601      	adds	r6, #1
 80232a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80232a8:	429e      	cmp	r6, r3
 80232aa:	dbf1      	blt.n	8023290 <_printf_float+0x428>
 80232ac:	002a      	movs	r2, r5
 80232ae:	0023      	movs	r3, r4
 80232b0:	3250      	adds	r2, #80	@ 0x50
 80232b2:	e6da      	b.n	802306a <_printf_float+0x202>
 80232b4:	2600      	movs	r6, #0
 80232b6:	e7f6      	b.n	80232a6 <_printf_float+0x43e>
 80232b8:	003a      	movs	r2, r7
 80232ba:	e7e2      	b.n	8023282 <_printf_float+0x41a>
 80232bc:	002a      	movs	r2, r5
 80232be:	2301      	movs	r3, #1
 80232c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80232c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80232c4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80232c6:	3219      	adds	r2, #25
 80232c8:	47b0      	blx	r6
 80232ca:	3001      	adds	r0, #1
 80232cc:	d100      	bne.n	80232d0 <_printf_float+0x468>
 80232ce:	e627      	b.n	8022f20 <_printf_float+0xb8>
 80232d0:	3401      	adds	r4, #1
 80232d2:	68eb      	ldr	r3, [r5, #12]
 80232d4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80232d6:	1a9b      	subs	r3, r3, r2
 80232d8:	42a3      	cmp	r3, r4
 80232da:	dcef      	bgt.n	80232bc <_printf_float+0x454>
 80232dc:	e6f9      	b.n	80230d2 <_printf_float+0x26a>
 80232de:	2400      	movs	r4, #0
 80232e0:	e7f7      	b.n	80232d2 <_printf_float+0x46a>
 80232e2:	46c0      	nop			@ (mov r8, r8)

080232e4 <_printf_common>:
 80232e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80232e6:	0016      	movs	r6, r2
 80232e8:	9301      	str	r3, [sp, #4]
 80232ea:	688a      	ldr	r2, [r1, #8]
 80232ec:	690b      	ldr	r3, [r1, #16]
 80232ee:	000c      	movs	r4, r1
 80232f0:	9000      	str	r0, [sp, #0]
 80232f2:	4293      	cmp	r3, r2
 80232f4:	da00      	bge.n	80232f8 <_printf_common+0x14>
 80232f6:	0013      	movs	r3, r2
 80232f8:	0022      	movs	r2, r4
 80232fa:	6033      	str	r3, [r6, #0]
 80232fc:	3243      	adds	r2, #67	@ 0x43
 80232fe:	7812      	ldrb	r2, [r2, #0]
 8023300:	2a00      	cmp	r2, #0
 8023302:	d001      	beq.n	8023308 <_printf_common+0x24>
 8023304:	3301      	adds	r3, #1
 8023306:	6033      	str	r3, [r6, #0]
 8023308:	6823      	ldr	r3, [r4, #0]
 802330a:	069b      	lsls	r3, r3, #26
 802330c:	d502      	bpl.n	8023314 <_printf_common+0x30>
 802330e:	6833      	ldr	r3, [r6, #0]
 8023310:	3302      	adds	r3, #2
 8023312:	6033      	str	r3, [r6, #0]
 8023314:	6822      	ldr	r2, [r4, #0]
 8023316:	2306      	movs	r3, #6
 8023318:	0015      	movs	r5, r2
 802331a:	401d      	ands	r5, r3
 802331c:	421a      	tst	r2, r3
 802331e:	d027      	beq.n	8023370 <_printf_common+0x8c>
 8023320:	0023      	movs	r3, r4
 8023322:	3343      	adds	r3, #67	@ 0x43
 8023324:	781b      	ldrb	r3, [r3, #0]
 8023326:	1e5a      	subs	r2, r3, #1
 8023328:	4193      	sbcs	r3, r2
 802332a:	6822      	ldr	r2, [r4, #0]
 802332c:	0692      	lsls	r2, r2, #26
 802332e:	d430      	bmi.n	8023392 <_printf_common+0xae>
 8023330:	0022      	movs	r2, r4
 8023332:	9901      	ldr	r1, [sp, #4]
 8023334:	9800      	ldr	r0, [sp, #0]
 8023336:	9d08      	ldr	r5, [sp, #32]
 8023338:	3243      	adds	r2, #67	@ 0x43
 802333a:	47a8      	blx	r5
 802333c:	3001      	adds	r0, #1
 802333e:	d025      	beq.n	802338c <_printf_common+0xa8>
 8023340:	2206      	movs	r2, #6
 8023342:	6823      	ldr	r3, [r4, #0]
 8023344:	2500      	movs	r5, #0
 8023346:	4013      	ands	r3, r2
 8023348:	2b04      	cmp	r3, #4
 802334a:	d105      	bne.n	8023358 <_printf_common+0x74>
 802334c:	6833      	ldr	r3, [r6, #0]
 802334e:	68e5      	ldr	r5, [r4, #12]
 8023350:	1aed      	subs	r5, r5, r3
 8023352:	43eb      	mvns	r3, r5
 8023354:	17db      	asrs	r3, r3, #31
 8023356:	401d      	ands	r5, r3
 8023358:	68a3      	ldr	r3, [r4, #8]
 802335a:	6922      	ldr	r2, [r4, #16]
 802335c:	4293      	cmp	r3, r2
 802335e:	dd01      	ble.n	8023364 <_printf_common+0x80>
 8023360:	1a9b      	subs	r3, r3, r2
 8023362:	18ed      	adds	r5, r5, r3
 8023364:	2600      	movs	r6, #0
 8023366:	42b5      	cmp	r5, r6
 8023368:	d120      	bne.n	80233ac <_printf_common+0xc8>
 802336a:	2000      	movs	r0, #0
 802336c:	e010      	b.n	8023390 <_printf_common+0xac>
 802336e:	3501      	adds	r5, #1
 8023370:	68e3      	ldr	r3, [r4, #12]
 8023372:	6832      	ldr	r2, [r6, #0]
 8023374:	1a9b      	subs	r3, r3, r2
 8023376:	42ab      	cmp	r3, r5
 8023378:	ddd2      	ble.n	8023320 <_printf_common+0x3c>
 802337a:	0022      	movs	r2, r4
 802337c:	2301      	movs	r3, #1
 802337e:	9901      	ldr	r1, [sp, #4]
 8023380:	9800      	ldr	r0, [sp, #0]
 8023382:	9f08      	ldr	r7, [sp, #32]
 8023384:	3219      	adds	r2, #25
 8023386:	47b8      	blx	r7
 8023388:	3001      	adds	r0, #1
 802338a:	d1f0      	bne.n	802336e <_printf_common+0x8a>
 802338c:	2001      	movs	r0, #1
 802338e:	4240      	negs	r0, r0
 8023390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023392:	2030      	movs	r0, #48	@ 0x30
 8023394:	18e1      	adds	r1, r4, r3
 8023396:	3143      	adds	r1, #67	@ 0x43
 8023398:	7008      	strb	r0, [r1, #0]
 802339a:	0021      	movs	r1, r4
 802339c:	1c5a      	adds	r2, r3, #1
 802339e:	3145      	adds	r1, #69	@ 0x45
 80233a0:	7809      	ldrb	r1, [r1, #0]
 80233a2:	18a2      	adds	r2, r4, r2
 80233a4:	3243      	adds	r2, #67	@ 0x43
 80233a6:	3302      	adds	r3, #2
 80233a8:	7011      	strb	r1, [r2, #0]
 80233aa:	e7c1      	b.n	8023330 <_printf_common+0x4c>
 80233ac:	0022      	movs	r2, r4
 80233ae:	2301      	movs	r3, #1
 80233b0:	9901      	ldr	r1, [sp, #4]
 80233b2:	9800      	ldr	r0, [sp, #0]
 80233b4:	9f08      	ldr	r7, [sp, #32]
 80233b6:	321a      	adds	r2, #26
 80233b8:	47b8      	blx	r7
 80233ba:	3001      	adds	r0, #1
 80233bc:	d0e6      	beq.n	802338c <_printf_common+0xa8>
 80233be:	3601      	adds	r6, #1
 80233c0:	e7d1      	b.n	8023366 <_printf_common+0x82>
	...

080233c4 <_printf_i>:
 80233c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80233c6:	b08b      	sub	sp, #44	@ 0x2c
 80233c8:	9206      	str	r2, [sp, #24]
 80233ca:	000a      	movs	r2, r1
 80233cc:	3243      	adds	r2, #67	@ 0x43
 80233ce:	9307      	str	r3, [sp, #28]
 80233d0:	9005      	str	r0, [sp, #20]
 80233d2:	9203      	str	r2, [sp, #12]
 80233d4:	7e0a      	ldrb	r2, [r1, #24]
 80233d6:	000c      	movs	r4, r1
 80233d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80233da:	2a78      	cmp	r2, #120	@ 0x78
 80233dc:	d809      	bhi.n	80233f2 <_printf_i+0x2e>
 80233de:	2a62      	cmp	r2, #98	@ 0x62
 80233e0:	d80b      	bhi.n	80233fa <_printf_i+0x36>
 80233e2:	2a00      	cmp	r2, #0
 80233e4:	d100      	bne.n	80233e8 <_printf_i+0x24>
 80233e6:	e0bc      	b.n	8023562 <_printf_i+0x19e>
 80233e8:	497b      	ldr	r1, [pc, #492]	@ (80235d8 <_printf_i+0x214>)
 80233ea:	9104      	str	r1, [sp, #16]
 80233ec:	2a58      	cmp	r2, #88	@ 0x58
 80233ee:	d100      	bne.n	80233f2 <_printf_i+0x2e>
 80233f0:	e090      	b.n	8023514 <_printf_i+0x150>
 80233f2:	0025      	movs	r5, r4
 80233f4:	3542      	adds	r5, #66	@ 0x42
 80233f6:	702a      	strb	r2, [r5, #0]
 80233f8:	e022      	b.n	8023440 <_printf_i+0x7c>
 80233fa:	0010      	movs	r0, r2
 80233fc:	3863      	subs	r0, #99	@ 0x63
 80233fe:	2815      	cmp	r0, #21
 8023400:	d8f7      	bhi.n	80233f2 <_printf_i+0x2e>
 8023402:	f7dc fec5 	bl	8000190 <__gnu_thumb1_case_shi>
 8023406:	0016      	.short	0x0016
 8023408:	fff6001f 	.word	0xfff6001f
 802340c:	fff6fff6 	.word	0xfff6fff6
 8023410:	001ffff6 	.word	0x001ffff6
 8023414:	fff6fff6 	.word	0xfff6fff6
 8023418:	fff6fff6 	.word	0xfff6fff6
 802341c:	003600a1 	.word	0x003600a1
 8023420:	fff60080 	.word	0xfff60080
 8023424:	00b2fff6 	.word	0x00b2fff6
 8023428:	0036fff6 	.word	0x0036fff6
 802342c:	fff6fff6 	.word	0xfff6fff6
 8023430:	0084      	.short	0x0084
 8023432:	0025      	movs	r5, r4
 8023434:	681a      	ldr	r2, [r3, #0]
 8023436:	3542      	adds	r5, #66	@ 0x42
 8023438:	1d11      	adds	r1, r2, #4
 802343a:	6019      	str	r1, [r3, #0]
 802343c:	6813      	ldr	r3, [r2, #0]
 802343e:	702b      	strb	r3, [r5, #0]
 8023440:	2301      	movs	r3, #1
 8023442:	e0a0      	b.n	8023586 <_printf_i+0x1c2>
 8023444:	6818      	ldr	r0, [r3, #0]
 8023446:	6809      	ldr	r1, [r1, #0]
 8023448:	1d02      	adds	r2, r0, #4
 802344a:	060d      	lsls	r5, r1, #24
 802344c:	d50b      	bpl.n	8023466 <_printf_i+0xa2>
 802344e:	6806      	ldr	r6, [r0, #0]
 8023450:	601a      	str	r2, [r3, #0]
 8023452:	2e00      	cmp	r6, #0
 8023454:	da03      	bge.n	802345e <_printf_i+0x9a>
 8023456:	232d      	movs	r3, #45	@ 0x2d
 8023458:	9a03      	ldr	r2, [sp, #12]
 802345a:	4276      	negs	r6, r6
 802345c:	7013      	strb	r3, [r2, #0]
 802345e:	4b5e      	ldr	r3, [pc, #376]	@ (80235d8 <_printf_i+0x214>)
 8023460:	270a      	movs	r7, #10
 8023462:	9304      	str	r3, [sp, #16]
 8023464:	e018      	b.n	8023498 <_printf_i+0xd4>
 8023466:	6806      	ldr	r6, [r0, #0]
 8023468:	601a      	str	r2, [r3, #0]
 802346a:	0649      	lsls	r1, r1, #25
 802346c:	d5f1      	bpl.n	8023452 <_printf_i+0x8e>
 802346e:	b236      	sxth	r6, r6
 8023470:	e7ef      	b.n	8023452 <_printf_i+0x8e>
 8023472:	6808      	ldr	r0, [r1, #0]
 8023474:	6819      	ldr	r1, [r3, #0]
 8023476:	c940      	ldmia	r1!, {r6}
 8023478:	0605      	lsls	r5, r0, #24
 802347a:	d402      	bmi.n	8023482 <_printf_i+0xbe>
 802347c:	0640      	lsls	r0, r0, #25
 802347e:	d500      	bpl.n	8023482 <_printf_i+0xbe>
 8023480:	b2b6      	uxth	r6, r6
 8023482:	6019      	str	r1, [r3, #0]
 8023484:	4b54      	ldr	r3, [pc, #336]	@ (80235d8 <_printf_i+0x214>)
 8023486:	270a      	movs	r7, #10
 8023488:	9304      	str	r3, [sp, #16]
 802348a:	2a6f      	cmp	r2, #111	@ 0x6f
 802348c:	d100      	bne.n	8023490 <_printf_i+0xcc>
 802348e:	3f02      	subs	r7, #2
 8023490:	0023      	movs	r3, r4
 8023492:	2200      	movs	r2, #0
 8023494:	3343      	adds	r3, #67	@ 0x43
 8023496:	701a      	strb	r2, [r3, #0]
 8023498:	6863      	ldr	r3, [r4, #4]
 802349a:	60a3      	str	r3, [r4, #8]
 802349c:	2b00      	cmp	r3, #0
 802349e:	db03      	blt.n	80234a8 <_printf_i+0xe4>
 80234a0:	2104      	movs	r1, #4
 80234a2:	6822      	ldr	r2, [r4, #0]
 80234a4:	438a      	bics	r2, r1
 80234a6:	6022      	str	r2, [r4, #0]
 80234a8:	2e00      	cmp	r6, #0
 80234aa:	d102      	bne.n	80234b2 <_printf_i+0xee>
 80234ac:	9d03      	ldr	r5, [sp, #12]
 80234ae:	2b00      	cmp	r3, #0
 80234b0:	d00c      	beq.n	80234cc <_printf_i+0x108>
 80234b2:	9d03      	ldr	r5, [sp, #12]
 80234b4:	0030      	movs	r0, r6
 80234b6:	0039      	movs	r1, r7
 80234b8:	f7dc fefa 	bl	80002b0 <__aeabi_uidivmod>
 80234bc:	9b04      	ldr	r3, [sp, #16]
 80234be:	3d01      	subs	r5, #1
 80234c0:	5c5b      	ldrb	r3, [r3, r1]
 80234c2:	702b      	strb	r3, [r5, #0]
 80234c4:	0033      	movs	r3, r6
 80234c6:	0006      	movs	r6, r0
 80234c8:	429f      	cmp	r7, r3
 80234ca:	d9f3      	bls.n	80234b4 <_printf_i+0xf0>
 80234cc:	2f08      	cmp	r7, #8
 80234ce:	d109      	bne.n	80234e4 <_printf_i+0x120>
 80234d0:	6823      	ldr	r3, [r4, #0]
 80234d2:	07db      	lsls	r3, r3, #31
 80234d4:	d506      	bpl.n	80234e4 <_printf_i+0x120>
 80234d6:	6862      	ldr	r2, [r4, #4]
 80234d8:	6923      	ldr	r3, [r4, #16]
 80234da:	429a      	cmp	r2, r3
 80234dc:	dc02      	bgt.n	80234e4 <_printf_i+0x120>
 80234de:	2330      	movs	r3, #48	@ 0x30
 80234e0:	3d01      	subs	r5, #1
 80234e2:	702b      	strb	r3, [r5, #0]
 80234e4:	9b03      	ldr	r3, [sp, #12]
 80234e6:	1b5b      	subs	r3, r3, r5
 80234e8:	6123      	str	r3, [r4, #16]
 80234ea:	9b07      	ldr	r3, [sp, #28]
 80234ec:	0021      	movs	r1, r4
 80234ee:	9300      	str	r3, [sp, #0]
 80234f0:	9805      	ldr	r0, [sp, #20]
 80234f2:	9b06      	ldr	r3, [sp, #24]
 80234f4:	aa09      	add	r2, sp, #36	@ 0x24
 80234f6:	f7ff fef5 	bl	80232e4 <_printf_common>
 80234fa:	3001      	adds	r0, #1
 80234fc:	d148      	bne.n	8023590 <_printf_i+0x1cc>
 80234fe:	2001      	movs	r0, #1
 8023500:	4240      	negs	r0, r0
 8023502:	b00b      	add	sp, #44	@ 0x2c
 8023504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023506:	2220      	movs	r2, #32
 8023508:	6809      	ldr	r1, [r1, #0]
 802350a:	430a      	orrs	r2, r1
 802350c:	6022      	str	r2, [r4, #0]
 802350e:	2278      	movs	r2, #120	@ 0x78
 8023510:	4932      	ldr	r1, [pc, #200]	@ (80235dc <_printf_i+0x218>)
 8023512:	9104      	str	r1, [sp, #16]
 8023514:	0021      	movs	r1, r4
 8023516:	3145      	adds	r1, #69	@ 0x45
 8023518:	700a      	strb	r2, [r1, #0]
 802351a:	6819      	ldr	r1, [r3, #0]
 802351c:	6822      	ldr	r2, [r4, #0]
 802351e:	c940      	ldmia	r1!, {r6}
 8023520:	0610      	lsls	r0, r2, #24
 8023522:	d402      	bmi.n	802352a <_printf_i+0x166>
 8023524:	0650      	lsls	r0, r2, #25
 8023526:	d500      	bpl.n	802352a <_printf_i+0x166>
 8023528:	b2b6      	uxth	r6, r6
 802352a:	6019      	str	r1, [r3, #0]
 802352c:	07d3      	lsls	r3, r2, #31
 802352e:	d502      	bpl.n	8023536 <_printf_i+0x172>
 8023530:	2320      	movs	r3, #32
 8023532:	4313      	orrs	r3, r2
 8023534:	6023      	str	r3, [r4, #0]
 8023536:	2e00      	cmp	r6, #0
 8023538:	d001      	beq.n	802353e <_printf_i+0x17a>
 802353a:	2710      	movs	r7, #16
 802353c:	e7a8      	b.n	8023490 <_printf_i+0xcc>
 802353e:	2220      	movs	r2, #32
 8023540:	6823      	ldr	r3, [r4, #0]
 8023542:	4393      	bics	r3, r2
 8023544:	6023      	str	r3, [r4, #0]
 8023546:	e7f8      	b.n	802353a <_printf_i+0x176>
 8023548:	681a      	ldr	r2, [r3, #0]
 802354a:	680d      	ldr	r5, [r1, #0]
 802354c:	1d10      	adds	r0, r2, #4
 802354e:	6949      	ldr	r1, [r1, #20]
 8023550:	6018      	str	r0, [r3, #0]
 8023552:	6813      	ldr	r3, [r2, #0]
 8023554:	062e      	lsls	r6, r5, #24
 8023556:	d501      	bpl.n	802355c <_printf_i+0x198>
 8023558:	6019      	str	r1, [r3, #0]
 802355a:	e002      	b.n	8023562 <_printf_i+0x19e>
 802355c:	066d      	lsls	r5, r5, #25
 802355e:	d5fb      	bpl.n	8023558 <_printf_i+0x194>
 8023560:	8019      	strh	r1, [r3, #0]
 8023562:	2300      	movs	r3, #0
 8023564:	9d03      	ldr	r5, [sp, #12]
 8023566:	6123      	str	r3, [r4, #16]
 8023568:	e7bf      	b.n	80234ea <_printf_i+0x126>
 802356a:	681a      	ldr	r2, [r3, #0]
 802356c:	1d11      	adds	r1, r2, #4
 802356e:	6019      	str	r1, [r3, #0]
 8023570:	6815      	ldr	r5, [r2, #0]
 8023572:	2100      	movs	r1, #0
 8023574:	0028      	movs	r0, r5
 8023576:	6862      	ldr	r2, [r4, #4]
 8023578:	f000 fb9d 	bl	8023cb6 <memchr>
 802357c:	2800      	cmp	r0, #0
 802357e:	d001      	beq.n	8023584 <_printf_i+0x1c0>
 8023580:	1b40      	subs	r0, r0, r5
 8023582:	6060      	str	r0, [r4, #4]
 8023584:	6863      	ldr	r3, [r4, #4]
 8023586:	6123      	str	r3, [r4, #16]
 8023588:	2300      	movs	r3, #0
 802358a:	9a03      	ldr	r2, [sp, #12]
 802358c:	7013      	strb	r3, [r2, #0]
 802358e:	e7ac      	b.n	80234ea <_printf_i+0x126>
 8023590:	002a      	movs	r2, r5
 8023592:	6923      	ldr	r3, [r4, #16]
 8023594:	9906      	ldr	r1, [sp, #24]
 8023596:	9805      	ldr	r0, [sp, #20]
 8023598:	9d07      	ldr	r5, [sp, #28]
 802359a:	47a8      	blx	r5
 802359c:	3001      	adds	r0, #1
 802359e:	d0ae      	beq.n	80234fe <_printf_i+0x13a>
 80235a0:	6823      	ldr	r3, [r4, #0]
 80235a2:	079b      	lsls	r3, r3, #30
 80235a4:	d415      	bmi.n	80235d2 <_printf_i+0x20e>
 80235a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80235a8:	68e0      	ldr	r0, [r4, #12]
 80235aa:	4298      	cmp	r0, r3
 80235ac:	daa9      	bge.n	8023502 <_printf_i+0x13e>
 80235ae:	0018      	movs	r0, r3
 80235b0:	e7a7      	b.n	8023502 <_printf_i+0x13e>
 80235b2:	0022      	movs	r2, r4
 80235b4:	2301      	movs	r3, #1
 80235b6:	9906      	ldr	r1, [sp, #24]
 80235b8:	9805      	ldr	r0, [sp, #20]
 80235ba:	9e07      	ldr	r6, [sp, #28]
 80235bc:	3219      	adds	r2, #25
 80235be:	47b0      	blx	r6
 80235c0:	3001      	adds	r0, #1
 80235c2:	d09c      	beq.n	80234fe <_printf_i+0x13a>
 80235c4:	3501      	adds	r5, #1
 80235c6:	68e3      	ldr	r3, [r4, #12]
 80235c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80235ca:	1a9b      	subs	r3, r3, r2
 80235cc:	42ab      	cmp	r3, r5
 80235ce:	dcf0      	bgt.n	80235b2 <_printf_i+0x1ee>
 80235d0:	e7e9      	b.n	80235a6 <_printf_i+0x1e2>
 80235d2:	2500      	movs	r5, #0
 80235d4:	e7f7      	b.n	80235c6 <_printf_i+0x202>
 80235d6:	46c0      	nop			@ (mov r8, r8)
 80235d8:	0802b913 	.word	0x0802b913
 80235dc:	0802b924 	.word	0x0802b924

080235e0 <std>:
 80235e0:	2300      	movs	r3, #0
 80235e2:	b510      	push	{r4, lr}
 80235e4:	0004      	movs	r4, r0
 80235e6:	6003      	str	r3, [r0, #0]
 80235e8:	6043      	str	r3, [r0, #4]
 80235ea:	6083      	str	r3, [r0, #8]
 80235ec:	8181      	strh	r1, [r0, #12]
 80235ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80235f0:	81c2      	strh	r2, [r0, #14]
 80235f2:	6103      	str	r3, [r0, #16]
 80235f4:	6143      	str	r3, [r0, #20]
 80235f6:	6183      	str	r3, [r0, #24]
 80235f8:	0019      	movs	r1, r3
 80235fa:	2208      	movs	r2, #8
 80235fc:	305c      	adds	r0, #92	@ 0x5c
 80235fe:	f000 fa89 	bl	8023b14 <memset>
 8023602:	4b0b      	ldr	r3, [pc, #44]	@ (8023630 <std+0x50>)
 8023604:	6224      	str	r4, [r4, #32]
 8023606:	6263      	str	r3, [r4, #36]	@ 0x24
 8023608:	4b0a      	ldr	r3, [pc, #40]	@ (8023634 <std+0x54>)
 802360a:	62a3      	str	r3, [r4, #40]	@ 0x28
 802360c:	4b0a      	ldr	r3, [pc, #40]	@ (8023638 <std+0x58>)
 802360e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8023610:	4b0a      	ldr	r3, [pc, #40]	@ (802363c <std+0x5c>)
 8023612:	6323      	str	r3, [r4, #48]	@ 0x30
 8023614:	4b0a      	ldr	r3, [pc, #40]	@ (8023640 <std+0x60>)
 8023616:	429c      	cmp	r4, r3
 8023618:	d005      	beq.n	8023626 <std+0x46>
 802361a:	4b0a      	ldr	r3, [pc, #40]	@ (8023644 <std+0x64>)
 802361c:	429c      	cmp	r4, r3
 802361e:	d002      	beq.n	8023626 <std+0x46>
 8023620:	4b09      	ldr	r3, [pc, #36]	@ (8023648 <std+0x68>)
 8023622:	429c      	cmp	r4, r3
 8023624:	d103      	bne.n	802362e <std+0x4e>
 8023626:	0020      	movs	r0, r4
 8023628:	3058      	adds	r0, #88	@ 0x58
 802362a:	f000 fb41 	bl	8023cb0 <__retarget_lock_init_recursive>
 802362e:	bd10      	pop	{r4, pc}
 8023630:	08023889 	.word	0x08023889
 8023634:	080238b1 	.word	0x080238b1
 8023638:	080238e9 	.word	0x080238e9
 802363c:	08023915 	.word	0x08023915
 8023640:	200034a4 	.word	0x200034a4
 8023644:	2000350c 	.word	0x2000350c
 8023648:	20003574 	.word	0x20003574

0802364c <stdio_exit_handler>:
 802364c:	b510      	push	{r4, lr}
 802364e:	4a03      	ldr	r2, [pc, #12]	@ (802365c <stdio_exit_handler+0x10>)
 8023650:	4903      	ldr	r1, [pc, #12]	@ (8023660 <stdio_exit_handler+0x14>)
 8023652:	4804      	ldr	r0, [pc, #16]	@ (8023664 <stdio_exit_handler+0x18>)
 8023654:	f000 f86c 	bl	8023730 <_fwalk_sglue>
 8023658:	bd10      	pop	{r4, pc}
 802365a:	46c0      	nop			@ (mov r8, r8)
 802365c:	20000268 	.word	0x20000268
 8023660:	080262d5 	.word	0x080262d5
 8023664:	200003e4 	.word	0x200003e4

08023668 <cleanup_stdio>:
 8023668:	6841      	ldr	r1, [r0, #4]
 802366a:	4b0b      	ldr	r3, [pc, #44]	@ (8023698 <cleanup_stdio+0x30>)
 802366c:	b510      	push	{r4, lr}
 802366e:	0004      	movs	r4, r0
 8023670:	4299      	cmp	r1, r3
 8023672:	d001      	beq.n	8023678 <cleanup_stdio+0x10>
 8023674:	f002 fe2e 	bl	80262d4 <_fflush_r>
 8023678:	68a1      	ldr	r1, [r4, #8]
 802367a:	4b08      	ldr	r3, [pc, #32]	@ (802369c <cleanup_stdio+0x34>)
 802367c:	4299      	cmp	r1, r3
 802367e:	d002      	beq.n	8023686 <cleanup_stdio+0x1e>
 8023680:	0020      	movs	r0, r4
 8023682:	f002 fe27 	bl	80262d4 <_fflush_r>
 8023686:	68e1      	ldr	r1, [r4, #12]
 8023688:	4b05      	ldr	r3, [pc, #20]	@ (80236a0 <cleanup_stdio+0x38>)
 802368a:	4299      	cmp	r1, r3
 802368c:	d002      	beq.n	8023694 <cleanup_stdio+0x2c>
 802368e:	0020      	movs	r0, r4
 8023690:	f002 fe20 	bl	80262d4 <_fflush_r>
 8023694:	bd10      	pop	{r4, pc}
 8023696:	46c0      	nop			@ (mov r8, r8)
 8023698:	200034a4 	.word	0x200034a4
 802369c:	2000350c 	.word	0x2000350c
 80236a0:	20003574 	.word	0x20003574

080236a4 <global_stdio_init.part.0>:
 80236a4:	b510      	push	{r4, lr}
 80236a6:	4b09      	ldr	r3, [pc, #36]	@ (80236cc <global_stdio_init.part.0+0x28>)
 80236a8:	4a09      	ldr	r2, [pc, #36]	@ (80236d0 <global_stdio_init.part.0+0x2c>)
 80236aa:	2104      	movs	r1, #4
 80236ac:	601a      	str	r2, [r3, #0]
 80236ae:	4809      	ldr	r0, [pc, #36]	@ (80236d4 <global_stdio_init.part.0+0x30>)
 80236b0:	2200      	movs	r2, #0
 80236b2:	f7ff ff95 	bl	80235e0 <std>
 80236b6:	2201      	movs	r2, #1
 80236b8:	2109      	movs	r1, #9
 80236ba:	4807      	ldr	r0, [pc, #28]	@ (80236d8 <global_stdio_init.part.0+0x34>)
 80236bc:	f7ff ff90 	bl	80235e0 <std>
 80236c0:	2202      	movs	r2, #2
 80236c2:	2112      	movs	r1, #18
 80236c4:	4805      	ldr	r0, [pc, #20]	@ (80236dc <global_stdio_init.part.0+0x38>)
 80236c6:	f7ff ff8b 	bl	80235e0 <std>
 80236ca:	bd10      	pop	{r4, pc}
 80236cc:	200035dc 	.word	0x200035dc
 80236d0:	0802364d 	.word	0x0802364d
 80236d4:	200034a4 	.word	0x200034a4
 80236d8:	2000350c 	.word	0x2000350c
 80236dc:	20003574 	.word	0x20003574

080236e0 <__sfp_lock_acquire>:
 80236e0:	b510      	push	{r4, lr}
 80236e2:	4802      	ldr	r0, [pc, #8]	@ (80236ec <__sfp_lock_acquire+0xc>)
 80236e4:	f000 fae5 	bl	8023cb2 <__retarget_lock_acquire_recursive>
 80236e8:	bd10      	pop	{r4, pc}
 80236ea:	46c0      	nop			@ (mov r8, r8)
 80236ec:	200035e5 	.word	0x200035e5

080236f0 <__sfp_lock_release>:
 80236f0:	b510      	push	{r4, lr}
 80236f2:	4802      	ldr	r0, [pc, #8]	@ (80236fc <__sfp_lock_release+0xc>)
 80236f4:	f000 fade 	bl	8023cb4 <__retarget_lock_release_recursive>
 80236f8:	bd10      	pop	{r4, pc}
 80236fa:	46c0      	nop			@ (mov r8, r8)
 80236fc:	200035e5 	.word	0x200035e5

08023700 <__sinit>:
 8023700:	b510      	push	{r4, lr}
 8023702:	0004      	movs	r4, r0
 8023704:	f7ff ffec 	bl	80236e0 <__sfp_lock_acquire>
 8023708:	6a23      	ldr	r3, [r4, #32]
 802370a:	2b00      	cmp	r3, #0
 802370c:	d002      	beq.n	8023714 <__sinit+0x14>
 802370e:	f7ff ffef 	bl	80236f0 <__sfp_lock_release>
 8023712:	bd10      	pop	{r4, pc}
 8023714:	4b04      	ldr	r3, [pc, #16]	@ (8023728 <__sinit+0x28>)
 8023716:	6223      	str	r3, [r4, #32]
 8023718:	4b04      	ldr	r3, [pc, #16]	@ (802372c <__sinit+0x2c>)
 802371a:	681b      	ldr	r3, [r3, #0]
 802371c:	2b00      	cmp	r3, #0
 802371e:	d1f6      	bne.n	802370e <__sinit+0xe>
 8023720:	f7ff ffc0 	bl	80236a4 <global_stdio_init.part.0>
 8023724:	e7f3      	b.n	802370e <__sinit+0xe>
 8023726:	46c0      	nop			@ (mov r8, r8)
 8023728:	08023669 	.word	0x08023669
 802372c:	200035dc 	.word	0x200035dc

08023730 <_fwalk_sglue>:
 8023730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023732:	0014      	movs	r4, r2
 8023734:	2600      	movs	r6, #0
 8023736:	9000      	str	r0, [sp, #0]
 8023738:	9101      	str	r1, [sp, #4]
 802373a:	68a5      	ldr	r5, [r4, #8]
 802373c:	6867      	ldr	r7, [r4, #4]
 802373e:	3f01      	subs	r7, #1
 8023740:	d504      	bpl.n	802374c <_fwalk_sglue+0x1c>
 8023742:	6824      	ldr	r4, [r4, #0]
 8023744:	2c00      	cmp	r4, #0
 8023746:	d1f8      	bne.n	802373a <_fwalk_sglue+0xa>
 8023748:	0030      	movs	r0, r6
 802374a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802374c:	89ab      	ldrh	r3, [r5, #12]
 802374e:	2b01      	cmp	r3, #1
 8023750:	d908      	bls.n	8023764 <_fwalk_sglue+0x34>
 8023752:	220e      	movs	r2, #14
 8023754:	5eab      	ldrsh	r3, [r5, r2]
 8023756:	3301      	adds	r3, #1
 8023758:	d004      	beq.n	8023764 <_fwalk_sglue+0x34>
 802375a:	0029      	movs	r1, r5
 802375c:	9800      	ldr	r0, [sp, #0]
 802375e:	9b01      	ldr	r3, [sp, #4]
 8023760:	4798      	blx	r3
 8023762:	4306      	orrs	r6, r0
 8023764:	3568      	adds	r5, #104	@ 0x68
 8023766:	e7ea      	b.n	802373e <_fwalk_sglue+0xe>

08023768 <iprintf>:
 8023768:	b40f      	push	{r0, r1, r2, r3}
 802376a:	b507      	push	{r0, r1, r2, lr}
 802376c:	4905      	ldr	r1, [pc, #20]	@ (8023784 <iprintf+0x1c>)
 802376e:	ab04      	add	r3, sp, #16
 8023770:	6808      	ldr	r0, [r1, #0]
 8023772:	cb04      	ldmia	r3!, {r2}
 8023774:	6881      	ldr	r1, [r0, #8]
 8023776:	9301      	str	r3, [sp, #4]
 8023778:	f002 fc0a 	bl	8025f90 <_vfiprintf_r>
 802377c:	b003      	add	sp, #12
 802377e:	bc08      	pop	{r3}
 8023780:	b004      	add	sp, #16
 8023782:	4718      	bx	r3
 8023784:	200003e0 	.word	0x200003e0

08023788 <_puts_r>:
 8023788:	6a03      	ldr	r3, [r0, #32]
 802378a:	b570      	push	{r4, r5, r6, lr}
 802378c:	0005      	movs	r5, r0
 802378e:	000e      	movs	r6, r1
 8023790:	6884      	ldr	r4, [r0, #8]
 8023792:	2b00      	cmp	r3, #0
 8023794:	d101      	bne.n	802379a <_puts_r+0x12>
 8023796:	f7ff ffb3 	bl	8023700 <__sinit>
 802379a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802379c:	07db      	lsls	r3, r3, #31
 802379e:	d405      	bmi.n	80237ac <_puts_r+0x24>
 80237a0:	89a3      	ldrh	r3, [r4, #12]
 80237a2:	059b      	lsls	r3, r3, #22
 80237a4:	d402      	bmi.n	80237ac <_puts_r+0x24>
 80237a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80237a8:	f000 fa83 	bl	8023cb2 <__retarget_lock_acquire_recursive>
 80237ac:	89a3      	ldrh	r3, [r4, #12]
 80237ae:	071b      	lsls	r3, r3, #28
 80237b0:	d502      	bpl.n	80237b8 <_puts_r+0x30>
 80237b2:	6923      	ldr	r3, [r4, #16]
 80237b4:	2b00      	cmp	r3, #0
 80237b6:	d11f      	bne.n	80237f8 <_puts_r+0x70>
 80237b8:	0021      	movs	r1, r4
 80237ba:	0028      	movs	r0, r5
 80237bc:	f000 f94c 	bl	8023a58 <__swsetup_r>
 80237c0:	2800      	cmp	r0, #0
 80237c2:	d019      	beq.n	80237f8 <_puts_r+0x70>
 80237c4:	2501      	movs	r5, #1
 80237c6:	426d      	negs	r5, r5
 80237c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80237ca:	07db      	lsls	r3, r3, #31
 80237cc:	d405      	bmi.n	80237da <_puts_r+0x52>
 80237ce:	89a3      	ldrh	r3, [r4, #12]
 80237d0:	059b      	lsls	r3, r3, #22
 80237d2:	d402      	bmi.n	80237da <_puts_r+0x52>
 80237d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80237d6:	f000 fa6d 	bl	8023cb4 <__retarget_lock_release_recursive>
 80237da:	0028      	movs	r0, r5
 80237dc:	bd70      	pop	{r4, r5, r6, pc}
 80237de:	3601      	adds	r6, #1
 80237e0:	60a3      	str	r3, [r4, #8]
 80237e2:	2b00      	cmp	r3, #0
 80237e4:	da04      	bge.n	80237f0 <_puts_r+0x68>
 80237e6:	69a2      	ldr	r2, [r4, #24]
 80237e8:	429a      	cmp	r2, r3
 80237ea:	dc16      	bgt.n	802381a <_puts_r+0x92>
 80237ec:	290a      	cmp	r1, #10
 80237ee:	d014      	beq.n	802381a <_puts_r+0x92>
 80237f0:	6823      	ldr	r3, [r4, #0]
 80237f2:	1c5a      	adds	r2, r3, #1
 80237f4:	6022      	str	r2, [r4, #0]
 80237f6:	7019      	strb	r1, [r3, #0]
 80237f8:	68a3      	ldr	r3, [r4, #8]
 80237fa:	7831      	ldrb	r1, [r6, #0]
 80237fc:	3b01      	subs	r3, #1
 80237fe:	2900      	cmp	r1, #0
 8023800:	d1ed      	bne.n	80237de <_puts_r+0x56>
 8023802:	60a3      	str	r3, [r4, #8]
 8023804:	2b00      	cmp	r3, #0
 8023806:	da0f      	bge.n	8023828 <_puts_r+0xa0>
 8023808:	0022      	movs	r2, r4
 802380a:	0028      	movs	r0, r5
 802380c:	310a      	adds	r1, #10
 802380e:	f000 f8e1 	bl	80239d4 <__swbuf_r>
 8023812:	3001      	adds	r0, #1
 8023814:	d0d6      	beq.n	80237c4 <_puts_r+0x3c>
 8023816:	250a      	movs	r5, #10
 8023818:	e7d6      	b.n	80237c8 <_puts_r+0x40>
 802381a:	0022      	movs	r2, r4
 802381c:	0028      	movs	r0, r5
 802381e:	f000 f8d9 	bl	80239d4 <__swbuf_r>
 8023822:	3001      	adds	r0, #1
 8023824:	d1e8      	bne.n	80237f8 <_puts_r+0x70>
 8023826:	e7cd      	b.n	80237c4 <_puts_r+0x3c>
 8023828:	6823      	ldr	r3, [r4, #0]
 802382a:	1c5a      	adds	r2, r3, #1
 802382c:	6022      	str	r2, [r4, #0]
 802382e:	220a      	movs	r2, #10
 8023830:	701a      	strb	r2, [r3, #0]
 8023832:	e7f0      	b.n	8023816 <_puts_r+0x8e>

08023834 <puts>:
 8023834:	b510      	push	{r4, lr}
 8023836:	4b03      	ldr	r3, [pc, #12]	@ (8023844 <puts+0x10>)
 8023838:	0001      	movs	r1, r0
 802383a:	6818      	ldr	r0, [r3, #0]
 802383c:	f7ff ffa4 	bl	8023788 <_puts_r>
 8023840:	bd10      	pop	{r4, pc}
 8023842:	46c0      	nop			@ (mov r8, r8)
 8023844:	200003e0 	.word	0x200003e0

08023848 <siprintf>:
 8023848:	b40e      	push	{r1, r2, r3}
 802384a:	b500      	push	{lr}
 802384c:	490b      	ldr	r1, [pc, #44]	@ (802387c <siprintf+0x34>)
 802384e:	b09c      	sub	sp, #112	@ 0x70
 8023850:	ab1d      	add	r3, sp, #116	@ 0x74
 8023852:	9002      	str	r0, [sp, #8]
 8023854:	9006      	str	r0, [sp, #24]
 8023856:	9107      	str	r1, [sp, #28]
 8023858:	9104      	str	r1, [sp, #16]
 802385a:	4809      	ldr	r0, [pc, #36]	@ (8023880 <siprintf+0x38>)
 802385c:	4909      	ldr	r1, [pc, #36]	@ (8023884 <siprintf+0x3c>)
 802385e:	cb04      	ldmia	r3!, {r2}
 8023860:	9105      	str	r1, [sp, #20]
 8023862:	6800      	ldr	r0, [r0, #0]
 8023864:	a902      	add	r1, sp, #8
 8023866:	9301      	str	r3, [sp, #4]
 8023868:	f002 fa6c 	bl	8025d44 <_svfiprintf_r>
 802386c:	2200      	movs	r2, #0
 802386e:	9b02      	ldr	r3, [sp, #8]
 8023870:	701a      	strb	r2, [r3, #0]
 8023872:	b01c      	add	sp, #112	@ 0x70
 8023874:	bc08      	pop	{r3}
 8023876:	b003      	add	sp, #12
 8023878:	4718      	bx	r3
 802387a:	46c0      	nop			@ (mov r8, r8)
 802387c:	7fffffff 	.word	0x7fffffff
 8023880:	200003e0 	.word	0x200003e0
 8023884:	ffff0208 	.word	0xffff0208

08023888 <__sread>:
 8023888:	b570      	push	{r4, r5, r6, lr}
 802388a:	000c      	movs	r4, r1
 802388c:	250e      	movs	r5, #14
 802388e:	5f49      	ldrsh	r1, [r1, r5]
 8023890:	f000 f9bc 	bl	8023c0c <_read_r>
 8023894:	2800      	cmp	r0, #0
 8023896:	db03      	blt.n	80238a0 <__sread+0x18>
 8023898:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802389a:	181b      	adds	r3, r3, r0
 802389c:	6563      	str	r3, [r4, #84]	@ 0x54
 802389e:	bd70      	pop	{r4, r5, r6, pc}
 80238a0:	89a3      	ldrh	r3, [r4, #12]
 80238a2:	4a02      	ldr	r2, [pc, #8]	@ (80238ac <__sread+0x24>)
 80238a4:	4013      	ands	r3, r2
 80238a6:	81a3      	strh	r3, [r4, #12]
 80238a8:	e7f9      	b.n	802389e <__sread+0x16>
 80238aa:	46c0      	nop			@ (mov r8, r8)
 80238ac:	ffffefff 	.word	0xffffefff

080238b0 <__swrite>:
 80238b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80238b2:	001f      	movs	r7, r3
 80238b4:	898b      	ldrh	r3, [r1, #12]
 80238b6:	0005      	movs	r5, r0
 80238b8:	000c      	movs	r4, r1
 80238ba:	0016      	movs	r6, r2
 80238bc:	05db      	lsls	r3, r3, #23
 80238be:	d505      	bpl.n	80238cc <__swrite+0x1c>
 80238c0:	230e      	movs	r3, #14
 80238c2:	5ec9      	ldrsh	r1, [r1, r3]
 80238c4:	2200      	movs	r2, #0
 80238c6:	2302      	movs	r3, #2
 80238c8:	f000 f98c 	bl	8023be4 <_lseek_r>
 80238cc:	89a3      	ldrh	r3, [r4, #12]
 80238ce:	4a05      	ldr	r2, [pc, #20]	@ (80238e4 <__swrite+0x34>)
 80238d0:	0028      	movs	r0, r5
 80238d2:	4013      	ands	r3, r2
 80238d4:	81a3      	strh	r3, [r4, #12]
 80238d6:	0032      	movs	r2, r6
 80238d8:	230e      	movs	r3, #14
 80238da:	5ee1      	ldrsh	r1, [r4, r3]
 80238dc:	003b      	movs	r3, r7
 80238de:	f000 f9a9 	bl	8023c34 <_write_r>
 80238e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80238e4:	ffffefff 	.word	0xffffefff

080238e8 <__sseek>:
 80238e8:	b570      	push	{r4, r5, r6, lr}
 80238ea:	000c      	movs	r4, r1
 80238ec:	250e      	movs	r5, #14
 80238ee:	5f49      	ldrsh	r1, [r1, r5]
 80238f0:	f000 f978 	bl	8023be4 <_lseek_r>
 80238f4:	89a3      	ldrh	r3, [r4, #12]
 80238f6:	1c42      	adds	r2, r0, #1
 80238f8:	d103      	bne.n	8023902 <__sseek+0x1a>
 80238fa:	4a05      	ldr	r2, [pc, #20]	@ (8023910 <__sseek+0x28>)
 80238fc:	4013      	ands	r3, r2
 80238fe:	81a3      	strh	r3, [r4, #12]
 8023900:	bd70      	pop	{r4, r5, r6, pc}
 8023902:	2280      	movs	r2, #128	@ 0x80
 8023904:	0152      	lsls	r2, r2, #5
 8023906:	4313      	orrs	r3, r2
 8023908:	81a3      	strh	r3, [r4, #12]
 802390a:	6560      	str	r0, [r4, #84]	@ 0x54
 802390c:	e7f8      	b.n	8023900 <__sseek+0x18>
 802390e:	46c0      	nop			@ (mov r8, r8)
 8023910:	ffffefff 	.word	0xffffefff

08023914 <__sclose>:
 8023914:	b510      	push	{r4, lr}
 8023916:	230e      	movs	r3, #14
 8023918:	5ec9      	ldrsh	r1, [r1, r3]
 802391a:	f000 f951 	bl	8023bc0 <_close_r>
 802391e:	bd10      	pop	{r4, pc}

08023920 <_vsniprintf_r>:
 8023920:	b530      	push	{r4, r5, lr}
 8023922:	0014      	movs	r4, r2
 8023924:	0005      	movs	r5, r0
 8023926:	001a      	movs	r2, r3
 8023928:	b09b      	sub	sp, #108	@ 0x6c
 802392a:	2c00      	cmp	r4, #0
 802392c:	da05      	bge.n	802393a <_vsniprintf_r+0x1a>
 802392e:	238b      	movs	r3, #139	@ 0x8b
 8023930:	6003      	str	r3, [r0, #0]
 8023932:	2001      	movs	r0, #1
 8023934:	4240      	negs	r0, r0
 8023936:	b01b      	add	sp, #108	@ 0x6c
 8023938:	bd30      	pop	{r4, r5, pc}
 802393a:	2382      	movs	r3, #130	@ 0x82
 802393c:	4668      	mov	r0, sp
 802393e:	009b      	lsls	r3, r3, #2
 8023940:	8183      	strh	r3, [r0, #12]
 8023942:	2300      	movs	r3, #0
 8023944:	9100      	str	r1, [sp, #0]
 8023946:	9104      	str	r1, [sp, #16]
 8023948:	429c      	cmp	r4, r3
 802394a:	d000      	beq.n	802394e <_vsniprintf_r+0x2e>
 802394c:	1e63      	subs	r3, r4, #1
 802394e:	9302      	str	r3, [sp, #8]
 8023950:	9305      	str	r3, [sp, #20]
 8023952:	2301      	movs	r3, #1
 8023954:	4669      	mov	r1, sp
 8023956:	425b      	negs	r3, r3
 8023958:	81cb      	strh	r3, [r1, #14]
 802395a:	0028      	movs	r0, r5
 802395c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802395e:	f002 f9f1 	bl	8025d44 <_svfiprintf_r>
 8023962:	1c43      	adds	r3, r0, #1
 8023964:	da01      	bge.n	802396a <_vsniprintf_r+0x4a>
 8023966:	238b      	movs	r3, #139	@ 0x8b
 8023968:	602b      	str	r3, [r5, #0]
 802396a:	2c00      	cmp	r4, #0
 802396c:	d0e3      	beq.n	8023936 <_vsniprintf_r+0x16>
 802396e:	2200      	movs	r2, #0
 8023970:	9b00      	ldr	r3, [sp, #0]
 8023972:	701a      	strb	r2, [r3, #0]
 8023974:	e7df      	b.n	8023936 <_vsniprintf_r+0x16>
	...

08023978 <vsniprintf>:
 8023978:	b513      	push	{r0, r1, r4, lr}
 802397a:	4c04      	ldr	r4, [pc, #16]	@ (802398c <vsniprintf+0x14>)
 802397c:	9300      	str	r3, [sp, #0]
 802397e:	0013      	movs	r3, r2
 8023980:	000a      	movs	r2, r1
 8023982:	0001      	movs	r1, r0
 8023984:	6820      	ldr	r0, [r4, #0]
 8023986:	f7ff ffcb 	bl	8023920 <_vsniprintf_r>
 802398a:	bd16      	pop	{r1, r2, r4, pc}
 802398c:	200003e0 	.word	0x200003e0

08023990 <_vsiprintf_r>:
 8023990:	b500      	push	{lr}
 8023992:	b09b      	sub	sp, #108	@ 0x6c
 8023994:	9100      	str	r1, [sp, #0]
 8023996:	9104      	str	r1, [sp, #16]
 8023998:	4906      	ldr	r1, [pc, #24]	@ (80239b4 <_vsiprintf_r+0x24>)
 802399a:	9105      	str	r1, [sp, #20]
 802399c:	9102      	str	r1, [sp, #8]
 802399e:	4906      	ldr	r1, [pc, #24]	@ (80239b8 <_vsiprintf_r+0x28>)
 80239a0:	9103      	str	r1, [sp, #12]
 80239a2:	4669      	mov	r1, sp
 80239a4:	f002 f9ce 	bl	8025d44 <_svfiprintf_r>
 80239a8:	2200      	movs	r2, #0
 80239aa:	9b00      	ldr	r3, [sp, #0]
 80239ac:	701a      	strb	r2, [r3, #0]
 80239ae:	b01b      	add	sp, #108	@ 0x6c
 80239b0:	bd00      	pop	{pc}
 80239b2:	46c0      	nop			@ (mov r8, r8)
 80239b4:	7fffffff 	.word	0x7fffffff
 80239b8:	ffff0208 	.word	0xffff0208

080239bc <vsiprintf>:
 80239bc:	b510      	push	{r4, lr}
 80239be:	4c04      	ldr	r4, [pc, #16]	@ (80239d0 <vsiprintf+0x14>)
 80239c0:	0013      	movs	r3, r2
 80239c2:	000a      	movs	r2, r1
 80239c4:	0001      	movs	r1, r0
 80239c6:	6820      	ldr	r0, [r4, #0]
 80239c8:	f7ff ffe2 	bl	8023990 <_vsiprintf_r>
 80239cc:	bd10      	pop	{r4, pc}
 80239ce:	46c0      	nop			@ (mov r8, r8)
 80239d0:	200003e0 	.word	0x200003e0

080239d4 <__swbuf_r>:
 80239d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239d6:	0006      	movs	r6, r0
 80239d8:	000d      	movs	r5, r1
 80239da:	0014      	movs	r4, r2
 80239dc:	2800      	cmp	r0, #0
 80239de:	d004      	beq.n	80239ea <__swbuf_r+0x16>
 80239e0:	6a03      	ldr	r3, [r0, #32]
 80239e2:	2b00      	cmp	r3, #0
 80239e4:	d101      	bne.n	80239ea <__swbuf_r+0x16>
 80239e6:	f7ff fe8b 	bl	8023700 <__sinit>
 80239ea:	69a3      	ldr	r3, [r4, #24]
 80239ec:	60a3      	str	r3, [r4, #8]
 80239ee:	89a3      	ldrh	r3, [r4, #12]
 80239f0:	071b      	lsls	r3, r3, #28
 80239f2:	d502      	bpl.n	80239fa <__swbuf_r+0x26>
 80239f4:	6923      	ldr	r3, [r4, #16]
 80239f6:	2b00      	cmp	r3, #0
 80239f8:	d109      	bne.n	8023a0e <__swbuf_r+0x3a>
 80239fa:	0021      	movs	r1, r4
 80239fc:	0030      	movs	r0, r6
 80239fe:	f000 f82b 	bl	8023a58 <__swsetup_r>
 8023a02:	2800      	cmp	r0, #0
 8023a04:	d003      	beq.n	8023a0e <__swbuf_r+0x3a>
 8023a06:	2501      	movs	r5, #1
 8023a08:	426d      	negs	r5, r5
 8023a0a:	0028      	movs	r0, r5
 8023a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023a0e:	6923      	ldr	r3, [r4, #16]
 8023a10:	6820      	ldr	r0, [r4, #0]
 8023a12:	b2ef      	uxtb	r7, r5
 8023a14:	1ac0      	subs	r0, r0, r3
 8023a16:	6963      	ldr	r3, [r4, #20]
 8023a18:	b2ed      	uxtb	r5, r5
 8023a1a:	4283      	cmp	r3, r0
 8023a1c:	dc05      	bgt.n	8023a2a <__swbuf_r+0x56>
 8023a1e:	0021      	movs	r1, r4
 8023a20:	0030      	movs	r0, r6
 8023a22:	f002 fc57 	bl	80262d4 <_fflush_r>
 8023a26:	2800      	cmp	r0, #0
 8023a28:	d1ed      	bne.n	8023a06 <__swbuf_r+0x32>
 8023a2a:	68a3      	ldr	r3, [r4, #8]
 8023a2c:	3001      	adds	r0, #1
 8023a2e:	3b01      	subs	r3, #1
 8023a30:	60a3      	str	r3, [r4, #8]
 8023a32:	6823      	ldr	r3, [r4, #0]
 8023a34:	1c5a      	adds	r2, r3, #1
 8023a36:	6022      	str	r2, [r4, #0]
 8023a38:	701f      	strb	r7, [r3, #0]
 8023a3a:	6963      	ldr	r3, [r4, #20]
 8023a3c:	4283      	cmp	r3, r0
 8023a3e:	d004      	beq.n	8023a4a <__swbuf_r+0x76>
 8023a40:	89a3      	ldrh	r3, [r4, #12]
 8023a42:	07db      	lsls	r3, r3, #31
 8023a44:	d5e1      	bpl.n	8023a0a <__swbuf_r+0x36>
 8023a46:	2d0a      	cmp	r5, #10
 8023a48:	d1df      	bne.n	8023a0a <__swbuf_r+0x36>
 8023a4a:	0021      	movs	r1, r4
 8023a4c:	0030      	movs	r0, r6
 8023a4e:	f002 fc41 	bl	80262d4 <_fflush_r>
 8023a52:	2800      	cmp	r0, #0
 8023a54:	d0d9      	beq.n	8023a0a <__swbuf_r+0x36>
 8023a56:	e7d6      	b.n	8023a06 <__swbuf_r+0x32>

08023a58 <__swsetup_r>:
 8023a58:	4b2d      	ldr	r3, [pc, #180]	@ (8023b10 <__swsetup_r+0xb8>)
 8023a5a:	b570      	push	{r4, r5, r6, lr}
 8023a5c:	0005      	movs	r5, r0
 8023a5e:	6818      	ldr	r0, [r3, #0]
 8023a60:	000c      	movs	r4, r1
 8023a62:	2800      	cmp	r0, #0
 8023a64:	d004      	beq.n	8023a70 <__swsetup_r+0x18>
 8023a66:	6a03      	ldr	r3, [r0, #32]
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	d101      	bne.n	8023a70 <__swsetup_r+0x18>
 8023a6c:	f7ff fe48 	bl	8023700 <__sinit>
 8023a70:	230c      	movs	r3, #12
 8023a72:	5ee2      	ldrsh	r2, [r4, r3]
 8023a74:	0713      	lsls	r3, r2, #28
 8023a76:	d423      	bmi.n	8023ac0 <__swsetup_r+0x68>
 8023a78:	06d3      	lsls	r3, r2, #27
 8023a7a:	d407      	bmi.n	8023a8c <__swsetup_r+0x34>
 8023a7c:	2309      	movs	r3, #9
 8023a7e:	602b      	str	r3, [r5, #0]
 8023a80:	2340      	movs	r3, #64	@ 0x40
 8023a82:	2001      	movs	r0, #1
 8023a84:	4313      	orrs	r3, r2
 8023a86:	81a3      	strh	r3, [r4, #12]
 8023a88:	4240      	negs	r0, r0
 8023a8a:	e03a      	b.n	8023b02 <__swsetup_r+0xaa>
 8023a8c:	0752      	lsls	r2, r2, #29
 8023a8e:	d513      	bpl.n	8023ab8 <__swsetup_r+0x60>
 8023a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023a92:	2900      	cmp	r1, #0
 8023a94:	d008      	beq.n	8023aa8 <__swsetup_r+0x50>
 8023a96:	0023      	movs	r3, r4
 8023a98:	3344      	adds	r3, #68	@ 0x44
 8023a9a:	4299      	cmp	r1, r3
 8023a9c:	d002      	beq.n	8023aa4 <__swsetup_r+0x4c>
 8023a9e:	0028      	movs	r0, r5
 8023aa0:	f000 ffa6 	bl	80249f0 <_free_r>
 8023aa4:	2300      	movs	r3, #0
 8023aa6:	6363      	str	r3, [r4, #52]	@ 0x34
 8023aa8:	2224      	movs	r2, #36	@ 0x24
 8023aaa:	89a3      	ldrh	r3, [r4, #12]
 8023aac:	4393      	bics	r3, r2
 8023aae:	81a3      	strh	r3, [r4, #12]
 8023ab0:	2300      	movs	r3, #0
 8023ab2:	6063      	str	r3, [r4, #4]
 8023ab4:	6923      	ldr	r3, [r4, #16]
 8023ab6:	6023      	str	r3, [r4, #0]
 8023ab8:	2308      	movs	r3, #8
 8023aba:	89a2      	ldrh	r2, [r4, #12]
 8023abc:	4313      	orrs	r3, r2
 8023abe:	81a3      	strh	r3, [r4, #12]
 8023ac0:	6923      	ldr	r3, [r4, #16]
 8023ac2:	2b00      	cmp	r3, #0
 8023ac4:	d10b      	bne.n	8023ade <__swsetup_r+0x86>
 8023ac6:	21a0      	movs	r1, #160	@ 0xa0
 8023ac8:	2280      	movs	r2, #128	@ 0x80
 8023aca:	89a3      	ldrh	r3, [r4, #12]
 8023acc:	0089      	lsls	r1, r1, #2
 8023ace:	0092      	lsls	r2, r2, #2
 8023ad0:	400b      	ands	r3, r1
 8023ad2:	4293      	cmp	r3, r2
 8023ad4:	d003      	beq.n	8023ade <__swsetup_r+0x86>
 8023ad6:	0021      	movs	r1, r4
 8023ad8:	0028      	movs	r0, r5
 8023ada:	f002 fc51 	bl	8026380 <__smakebuf_r>
 8023ade:	230c      	movs	r3, #12
 8023ae0:	5ee2      	ldrsh	r2, [r4, r3]
 8023ae2:	2101      	movs	r1, #1
 8023ae4:	0013      	movs	r3, r2
 8023ae6:	400b      	ands	r3, r1
 8023ae8:	420a      	tst	r2, r1
 8023aea:	d00b      	beq.n	8023b04 <__swsetup_r+0xac>
 8023aec:	2300      	movs	r3, #0
 8023aee:	60a3      	str	r3, [r4, #8]
 8023af0:	6963      	ldr	r3, [r4, #20]
 8023af2:	425b      	negs	r3, r3
 8023af4:	61a3      	str	r3, [r4, #24]
 8023af6:	2000      	movs	r0, #0
 8023af8:	6923      	ldr	r3, [r4, #16]
 8023afa:	4283      	cmp	r3, r0
 8023afc:	d101      	bne.n	8023b02 <__swsetup_r+0xaa>
 8023afe:	0613      	lsls	r3, r2, #24
 8023b00:	d4be      	bmi.n	8023a80 <__swsetup_r+0x28>
 8023b02:	bd70      	pop	{r4, r5, r6, pc}
 8023b04:	0791      	lsls	r1, r2, #30
 8023b06:	d400      	bmi.n	8023b0a <__swsetup_r+0xb2>
 8023b08:	6963      	ldr	r3, [r4, #20]
 8023b0a:	60a3      	str	r3, [r4, #8]
 8023b0c:	e7f3      	b.n	8023af6 <__swsetup_r+0x9e>
 8023b0e:	46c0      	nop			@ (mov r8, r8)
 8023b10:	200003e0 	.word	0x200003e0

08023b14 <memset>:
 8023b14:	0003      	movs	r3, r0
 8023b16:	1882      	adds	r2, r0, r2
 8023b18:	4293      	cmp	r3, r2
 8023b1a:	d100      	bne.n	8023b1e <memset+0xa>
 8023b1c:	4770      	bx	lr
 8023b1e:	7019      	strb	r1, [r3, #0]
 8023b20:	3301      	adds	r3, #1
 8023b22:	e7f9      	b.n	8023b18 <memset+0x4>

08023b24 <strchr>:
 8023b24:	b2c9      	uxtb	r1, r1
 8023b26:	7803      	ldrb	r3, [r0, #0]
 8023b28:	2b00      	cmp	r3, #0
 8023b2a:	d004      	beq.n	8023b36 <strchr+0x12>
 8023b2c:	428b      	cmp	r3, r1
 8023b2e:	d100      	bne.n	8023b32 <strchr+0xe>
 8023b30:	4770      	bx	lr
 8023b32:	3001      	adds	r0, #1
 8023b34:	e7f7      	b.n	8023b26 <strchr+0x2>
 8023b36:	424b      	negs	r3, r1
 8023b38:	4159      	adcs	r1, r3
 8023b3a:	4249      	negs	r1, r1
 8023b3c:	4008      	ands	r0, r1
 8023b3e:	e7f7      	b.n	8023b30 <strchr+0xc>

08023b40 <strncmp>:
 8023b40:	b530      	push	{r4, r5, lr}
 8023b42:	0005      	movs	r5, r0
 8023b44:	1e10      	subs	r0, r2, #0
 8023b46:	d00b      	beq.n	8023b60 <strncmp+0x20>
 8023b48:	2400      	movs	r4, #0
 8023b4a:	3a01      	subs	r2, #1
 8023b4c:	5d2b      	ldrb	r3, [r5, r4]
 8023b4e:	5d08      	ldrb	r0, [r1, r4]
 8023b50:	4283      	cmp	r3, r0
 8023b52:	d104      	bne.n	8023b5e <strncmp+0x1e>
 8023b54:	42a2      	cmp	r2, r4
 8023b56:	d002      	beq.n	8023b5e <strncmp+0x1e>
 8023b58:	3401      	adds	r4, #1
 8023b5a:	2b00      	cmp	r3, #0
 8023b5c:	d1f6      	bne.n	8023b4c <strncmp+0xc>
 8023b5e:	1a18      	subs	r0, r3, r0
 8023b60:	bd30      	pop	{r4, r5, pc}

08023b62 <strncpy>:
 8023b62:	0003      	movs	r3, r0
 8023b64:	b530      	push	{r4, r5, lr}
 8023b66:	001d      	movs	r5, r3
 8023b68:	2a00      	cmp	r2, #0
 8023b6a:	d006      	beq.n	8023b7a <strncpy+0x18>
 8023b6c:	780c      	ldrb	r4, [r1, #0]
 8023b6e:	3a01      	subs	r2, #1
 8023b70:	3301      	adds	r3, #1
 8023b72:	702c      	strb	r4, [r5, #0]
 8023b74:	3101      	adds	r1, #1
 8023b76:	2c00      	cmp	r4, #0
 8023b78:	d1f5      	bne.n	8023b66 <strncpy+0x4>
 8023b7a:	2100      	movs	r1, #0
 8023b7c:	189a      	adds	r2, r3, r2
 8023b7e:	4293      	cmp	r3, r2
 8023b80:	d100      	bne.n	8023b84 <strncpy+0x22>
 8023b82:	bd30      	pop	{r4, r5, pc}
 8023b84:	7019      	strb	r1, [r3, #0]
 8023b86:	3301      	adds	r3, #1
 8023b88:	e7f9      	b.n	8023b7e <strncpy+0x1c>

08023b8a <strstr>:
 8023b8a:	780a      	ldrb	r2, [r1, #0]
 8023b8c:	b530      	push	{r4, r5, lr}
 8023b8e:	2a00      	cmp	r2, #0
 8023b90:	d10c      	bne.n	8023bac <strstr+0x22>
 8023b92:	bd30      	pop	{r4, r5, pc}
 8023b94:	429a      	cmp	r2, r3
 8023b96:	d108      	bne.n	8023baa <strstr+0x20>
 8023b98:	2301      	movs	r3, #1
 8023b9a:	5ccc      	ldrb	r4, [r1, r3]
 8023b9c:	2c00      	cmp	r4, #0
 8023b9e:	d0f8      	beq.n	8023b92 <strstr+0x8>
 8023ba0:	5cc5      	ldrb	r5, [r0, r3]
 8023ba2:	42a5      	cmp	r5, r4
 8023ba4:	d101      	bne.n	8023baa <strstr+0x20>
 8023ba6:	3301      	adds	r3, #1
 8023ba8:	e7f7      	b.n	8023b9a <strstr+0x10>
 8023baa:	3001      	adds	r0, #1
 8023bac:	7803      	ldrb	r3, [r0, #0]
 8023bae:	2b00      	cmp	r3, #0
 8023bb0:	d1f0      	bne.n	8023b94 <strstr+0xa>
 8023bb2:	0018      	movs	r0, r3
 8023bb4:	e7ed      	b.n	8023b92 <strstr+0x8>
	...

08023bb8 <_localeconv_r>:
 8023bb8:	4800      	ldr	r0, [pc, #0]	@ (8023bbc <_localeconv_r+0x4>)
 8023bba:	4770      	bx	lr
 8023bbc:	20000364 	.word	0x20000364

08023bc0 <_close_r>:
 8023bc0:	2300      	movs	r3, #0
 8023bc2:	b570      	push	{r4, r5, r6, lr}
 8023bc4:	4d06      	ldr	r5, [pc, #24]	@ (8023be0 <_close_r+0x20>)
 8023bc6:	0004      	movs	r4, r0
 8023bc8:	0008      	movs	r0, r1
 8023bca:	602b      	str	r3, [r5, #0]
 8023bcc:	f7ed f9e6 	bl	8010f9c <_close>
 8023bd0:	1c43      	adds	r3, r0, #1
 8023bd2:	d103      	bne.n	8023bdc <_close_r+0x1c>
 8023bd4:	682b      	ldr	r3, [r5, #0]
 8023bd6:	2b00      	cmp	r3, #0
 8023bd8:	d000      	beq.n	8023bdc <_close_r+0x1c>
 8023bda:	6023      	str	r3, [r4, #0]
 8023bdc:	bd70      	pop	{r4, r5, r6, pc}
 8023bde:	46c0      	nop			@ (mov r8, r8)
 8023be0:	200035e0 	.word	0x200035e0

08023be4 <_lseek_r>:
 8023be4:	b570      	push	{r4, r5, r6, lr}
 8023be6:	0004      	movs	r4, r0
 8023be8:	0008      	movs	r0, r1
 8023bea:	0011      	movs	r1, r2
 8023bec:	001a      	movs	r2, r3
 8023bee:	2300      	movs	r3, #0
 8023bf0:	4d05      	ldr	r5, [pc, #20]	@ (8023c08 <_lseek_r+0x24>)
 8023bf2:	602b      	str	r3, [r5, #0]
 8023bf4:	f7ed f9f3 	bl	8010fde <_lseek>
 8023bf8:	1c43      	adds	r3, r0, #1
 8023bfa:	d103      	bne.n	8023c04 <_lseek_r+0x20>
 8023bfc:	682b      	ldr	r3, [r5, #0]
 8023bfe:	2b00      	cmp	r3, #0
 8023c00:	d000      	beq.n	8023c04 <_lseek_r+0x20>
 8023c02:	6023      	str	r3, [r4, #0]
 8023c04:	bd70      	pop	{r4, r5, r6, pc}
 8023c06:	46c0      	nop			@ (mov r8, r8)
 8023c08:	200035e0 	.word	0x200035e0

08023c0c <_read_r>:
 8023c0c:	b570      	push	{r4, r5, r6, lr}
 8023c0e:	0004      	movs	r4, r0
 8023c10:	0008      	movs	r0, r1
 8023c12:	0011      	movs	r1, r2
 8023c14:	001a      	movs	r2, r3
 8023c16:	2300      	movs	r3, #0
 8023c18:	4d05      	ldr	r5, [pc, #20]	@ (8023c30 <_read_r+0x24>)
 8023c1a:	602b      	str	r3, [r5, #0]
 8023c1c:	f7ed f9a1 	bl	8010f62 <_read>
 8023c20:	1c43      	adds	r3, r0, #1
 8023c22:	d103      	bne.n	8023c2c <_read_r+0x20>
 8023c24:	682b      	ldr	r3, [r5, #0]
 8023c26:	2b00      	cmp	r3, #0
 8023c28:	d000      	beq.n	8023c2c <_read_r+0x20>
 8023c2a:	6023      	str	r3, [r4, #0]
 8023c2c:	bd70      	pop	{r4, r5, r6, pc}
 8023c2e:	46c0      	nop			@ (mov r8, r8)
 8023c30:	200035e0 	.word	0x200035e0

08023c34 <_write_r>:
 8023c34:	b570      	push	{r4, r5, r6, lr}
 8023c36:	0004      	movs	r4, r0
 8023c38:	0008      	movs	r0, r1
 8023c3a:	0011      	movs	r1, r2
 8023c3c:	001a      	movs	r2, r3
 8023c3e:	2300      	movs	r3, #0
 8023c40:	4d05      	ldr	r5, [pc, #20]	@ (8023c58 <_write_r+0x24>)
 8023c42:	602b      	str	r3, [r5, #0]
 8023c44:	f7ed fe5e 	bl	8011904 <_write>
 8023c48:	1c43      	adds	r3, r0, #1
 8023c4a:	d103      	bne.n	8023c54 <_write_r+0x20>
 8023c4c:	682b      	ldr	r3, [r5, #0]
 8023c4e:	2b00      	cmp	r3, #0
 8023c50:	d000      	beq.n	8023c54 <_write_r+0x20>
 8023c52:	6023      	str	r3, [r4, #0]
 8023c54:	bd70      	pop	{r4, r5, r6, pc}
 8023c56:	46c0      	nop			@ (mov r8, r8)
 8023c58:	200035e0 	.word	0x200035e0

08023c5c <__errno>:
 8023c5c:	4b01      	ldr	r3, [pc, #4]	@ (8023c64 <__errno+0x8>)
 8023c5e:	6818      	ldr	r0, [r3, #0]
 8023c60:	4770      	bx	lr
 8023c62:	46c0      	nop			@ (mov r8, r8)
 8023c64:	200003e0 	.word	0x200003e0

08023c68 <__libc_init_array>:
 8023c68:	b570      	push	{r4, r5, r6, lr}
 8023c6a:	2600      	movs	r6, #0
 8023c6c:	4c0c      	ldr	r4, [pc, #48]	@ (8023ca0 <__libc_init_array+0x38>)
 8023c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8023ca4 <__libc_init_array+0x3c>)
 8023c70:	1b64      	subs	r4, r4, r5
 8023c72:	10a4      	asrs	r4, r4, #2
 8023c74:	42a6      	cmp	r6, r4
 8023c76:	d109      	bne.n	8023c8c <__libc_init_array+0x24>
 8023c78:	2600      	movs	r6, #0
 8023c7a:	f003 fe11 	bl	80278a0 <_init>
 8023c7e:	4c0a      	ldr	r4, [pc, #40]	@ (8023ca8 <__libc_init_array+0x40>)
 8023c80:	4d0a      	ldr	r5, [pc, #40]	@ (8023cac <__libc_init_array+0x44>)
 8023c82:	1b64      	subs	r4, r4, r5
 8023c84:	10a4      	asrs	r4, r4, #2
 8023c86:	42a6      	cmp	r6, r4
 8023c88:	d105      	bne.n	8023c96 <__libc_init_array+0x2e>
 8023c8a:	bd70      	pop	{r4, r5, r6, pc}
 8023c8c:	00b3      	lsls	r3, r6, #2
 8023c8e:	58eb      	ldr	r3, [r5, r3]
 8023c90:	4798      	blx	r3
 8023c92:	3601      	adds	r6, #1
 8023c94:	e7ee      	b.n	8023c74 <__libc_init_array+0xc>
 8023c96:	00b3      	lsls	r3, r6, #2
 8023c98:	58eb      	ldr	r3, [r5, r3]
 8023c9a:	4798      	blx	r3
 8023c9c:	3601      	adds	r6, #1
 8023c9e:	e7f2      	b.n	8023c86 <__libc_init_array+0x1e>
 8023ca0:	0802bc20 	.word	0x0802bc20
 8023ca4:	0802bc20 	.word	0x0802bc20
 8023ca8:	0802bc24 	.word	0x0802bc24
 8023cac:	0802bc20 	.word	0x0802bc20

08023cb0 <__retarget_lock_init_recursive>:
 8023cb0:	4770      	bx	lr

08023cb2 <__retarget_lock_acquire_recursive>:
 8023cb2:	4770      	bx	lr

08023cb4 <__retarget_lock_release_recursive>:
 8023cb4:	4770      	bx	lr

08023cb6 <memchr>:
 8023cb6:	b2c9      	uxtb	r1, r1
 8023cb8:	1882      	adds	r2, r0, r2
 8023cba:	4290      	cmp	r0, r2
 8023cbc:	d101      	bne.n	8023cc2 <memchr+0xc>
 8023cbe:	2000      	movs	r0, #0
 8023cc0:	4770      	bx	lr
 8023cc2:	7803      	ldrb	r3, [r0, #0]
 8023cc4:	428b      	cmp	r3, r1
 8023cc6:	d0fb      	beq.n	8023cc0 <memchr+0xa>
 8023cc8:	3001      	adds	r0, #1
 8023cca:	e7f6      	b.n	8023cba <memchr+0x4>

08023ccc <memcpy>:
 8023ccc:	2300      	movs	r3, #0
 8023cce:	b510      	push	{r4, lr}
 8023cd0:	429a      	cmp	r2, r3
 8023cd2:	d100      	bne.n	8023cd6 <memcpy+0xa>
 8023cd4:	bd10      	pop	{r4, pc}
 8023cd6:	5ccc      	ldrb	r4, [r1, r3]
 8023cd8:	54c4      	strb	r4, [r0, r3]
 8023cda:	3301      	adds	r3, #1
 8023cdc:	e7f8      	b.n	8023cd0 <memcpy+0x4>
	...

08023ce0 <nan>:
 8023ce0:	2000      	movs	r0, #0
 8023ce2:	4901      	ldr	r1, [pc, #4]	@ (8023ce8 <nan+0x8>)
 8023ce4:	4770      	bx	lr
 8023ce6:	46c0      	nop			@ (mov r8, r8)
 8023ce8:	7ff80000 	.word	0x7ff80000

08023cec <quorem>:
 8023cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023cee:	6902      	ldr	r2, [r0, #16]
 8023cf0:	690f      	ldr	r7, [r1, #16]
 8023cf2:	b087      	sub	sp, #28
 8023cf4:	0006      	movs	r6, r0
 8023cf6:	000b      	movs	r3, r1
 8023cf8:	2000      	movs	r0, #0
 8023cfa:	9102      	str	r1, [sp, #8]
 8023cfc:	42ba      	cmp	r2, r7
 8023cfe:	db6d      	blt.n	8023ddc <quorem+0xf0>
 8023d00:	3f01      	subs	r7, #1
 8023d02:	00bc      	lsls	r4, r7, #2
 8023d04:	3314      	adds	r3, #20
 8023d06:	9305      	str	r3, [sp, #20]
 8023d08:	191b      	adds	r3, r3, r4
 8023d0a:	9303      	str	r3, [sp, #12]
 8023d0c:	0033      	movs	r3, r6
 8023d0e:	3314      	adds	r3, #20
 8023d10:	191c      	adds	r4, r3, r4
 8023d12:	9301      	str	r3, [sp, #4]
 8023d14:	6823      	ldr	r3, [r4, #0]
 8023d16:	9304      	str	r3, [sp, #16]
 8023d18:	9b03      	ldr	r3, [sp, #12]
 8023d1a:	9804      	ldr	r0, [sp, #16]
 8023d1c:	681d      	ldr	r5, [r3, #0]
 8023d1e:	3501      	adds	r5, #1
 8023d20:	0029      	movs	r1, r5
 8023d22:	f7dc fa3f 	bl	80001a4 <__udivsi3>
 8023d26:	9b04      	ldr	r3, [sp, #16]
 8023d28:	9000      	str	r0, [sp, #0]
 8023d2a:	42ab      	cmp	r3, r5
 8023d2c:	d32b      	bcc.n	8023d86 <quorem+0x9a>
 8023d2e:	9b05      	ldr	r3, [sp, #20]
 8023d30:	9d01      	ldr	r5, [sp, #4]
 8023d32:	469c      	mov	ip, r3
 8023d34:	2300      	movs	r3, #0
 8023d36:	9305      	str	r3, [sp, #20]
 8023d38:	9304      	str	r3, [sp, #16]
 8023d3a:	4662      	mov	r2, ip
 8023d3c:	ca08      	ldmia	r2!, {r3}
 8023d3e:	6828      	ldr	r0, [r5, #0]
 8023d40:	4694      	mov	ip, r2
 8023d42:	9a00      	ldr	r2, [sp, #0]
 8023d44:	b299      	uxth	r1, r3
 8023d46:	4351      	muls	r1, r2
 8023d48:	9a05      	ldr	r2, [sp, #20]
 8023d4a:	0c1b      	lsrs	r3, r3, #16
 8023d4c:	1889      	adds	r1, r1, r2
 8023d4e:	9a00      	ldr	r2, [sp, #0]
 8023d50:	4353      	muls	r3, r2
 8023d52:	0c0a      	lsrs	r2, r1, #16
 8023d54:	189b      	adds	r3, r3, r2
 8023d56:	0c1a      	lsrs	r2, r3, #16
 8023d58:	b289      	uxth	r1, r1
 8023d5a:	9205      	str	r2, [sp, #20]
 8023d5c:	b282      	uxth	r2, r0
 8023d5e:	1a52      	subs	r2, r2, r1
 8023d60:	9904      	ldr	r1, [sp, #16]
 8023d62:	0c00      	lsrs	r0, r0, #16
 8023d64:	1852      	adds	r2, r2, r1
 8023d66:	b29b      	uxth	r3, r3
 8023d68:	1411      	asrs	r1, r2, #16
 8023d6a:	1ac3      	subs	r3, r0, r3
 8023d6c:	185b      	adds	r3, r3, r1
 8023d6e:	1419      	asrs	r1, r3, #16
 8023d70:	b292      	uxth	r2, r2
 8023d72:	041b      	lsls	r3, r3, #16
 8023d74:	431a      	orrs	r2, r3
 8023d76:	9b03      	ldr	r3, [sp, #12]
 8023d78:	9104      	str	r1, [sp, #16]
 8023d7a:	c504      	stmia	r5!, {r2}
 8023d7c:	4563      	cmp	r3, ip
 8023d7e:	d2dc      	bcs.n	8023d3a <quorem+0x4e>
 8023d80:	6823      	ldr	r3, [r4, #0]
 8023d82:	2b00      	cmp	r3, #0
 8023d84:	d030      	beq.n	8023de8 <quorem+0xfc>
 8023d86:	0030      	movs	r0, r6
 8023d88:	9902      	ldr	r1, [sp, #8]
 8023d8a:	f001 fd7d 	bl	8025888 <__mcmp>
 8023d8e:	2800      	cmp	r0, #0
 8023d90:	db23      	blt.n	8023dda <quorem+0xee>
 8023d92:	0034      	movs	r4, r6
 8023d94:	2500      	movs	r5, #0
 8023d96:	9902      	ldr	r1, [sp, #8]
 8023d98:	3414      	adds	r4, #20
 8023d9a:	3114      	adds	r1, #20
 8023d9c:	6823      	ldr	r3, [r4, #0]
 8023d9e:	c901      	ldmia	r1!, {r0}
 8023da0:	9302      	str	r3, [sp, #8]
 8023da2:	466b      	mov	r3, sp
 8023da4:	891b      	ldrh	r3, [r3, #8]
 8023da6:	b282      	uxth	r2, r0
 8023da8:	1a9a      	subs	r2, r3, r2
 8023daa:	9b02      	ldr	r3, [sp, #8]
 8023dac:	1952      	adds	r2, r2, r5
 8023dae:	0c00      	lsrs	r0, r0, #16
 8023db0:	0c1b      	lsrs	r3, r3, #16
 8023db2:	1a1b      	subs	r3, r3, r0
 8023db4:	1410      	asrs	r0, r2, #16
 8023db6:	181b      	adds	r3, r3, r0
 8023db8:	141d      	asrs	r5, r3, #16
 8023dba:	b292      	uxth	r2, r2
 8023dbc:	041b      	lsls	r3, r3, #16
 8023dbe:	431a      	orrs	r2, r3
 8023dc0:	9b03      	ldr	r3, [sp, #12]
 8023dc2:	c404      	stmia	r4!, {r2}
 8023dc4:	428b      	cmp	r3, r1
 8023dc6:	d2e9      	bcs.n	8023d9c <quorem+0xb0>
 8023dc8:	9a01      	ldr	r2, [sp, #4]
 8023dca:	00bb      	lsls	r3, r7, #2
 8023dcc:	18d3      	adds	r3, r2, r3
 8023dce:	681a      	ldr	r2, [r3, #0]
 8023dd0:	2a00      	cmp	r2, #0
 8023dd2:	d013      	beq.n	8023dfc <quorem+0x110>
 8023dd4:	9b00      	ldr	r3, [sp, #0]
 8023dd6:	3301      	adds	r3, #1
 8023dd8:	9300      	str	r3, [sp, #0]
 8023dda:	9800      	ldr	r0, [sp, #0]
 8023ddc:	b007      	add	sp, #28
 8023dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023de0:	6823      	ldr	r3, [r4, #0]
 8023de2:	2b00      	cmp	r3, #0
 8023de4:	d104      	bne.n	8023df0 <quorem+0x104>
 8023de6:	3f01      	subs	r7, #1
 8023de8:	9b01      	ldr	r3, [sp, #4]
 8023dea:	3c04      	subs	r4, #4
 8023dec:	42a3      	cmp	r3, r4
 8023dee:	d3f7      	bcc.n	8023de0 <quorem+0xf4>
 8023df0:	6137      	str	r7, [r6, #16]
 8023df2:	e7c8      	b.n	8023d86 <quorem+0x9a>
 8023df4:	681a      	ldr	r2, [r3, #0]
 8023df6:	2a00      	cmp	r2, #0
 8023df8:	d104      	bne.n	8023e04 <quorem+0x118>
 8023dfa:	3f01      	subs	r7, #1
 8023dfc:	9a01      	ldr	r2, [sp, #4]
 8023dfe:	3b04      	subs	r3, #4
 8023e00:	429a      	cmp	r2, r3
 8023e02:	d3f7      	bcc.n	8023df4 <quorem+0x108>
 8023e04:	6137      	str	r7, [r6, #16]
 8023e06:	e7e5      	b.n	8023dd4 <quorem+0xe8>

08023e08 <_dtoa_r>:
 8023e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023e0a:	0014      	movs	r4, r2
 8023e0c:	001d      	movs	r5, r3
 8023e0e:	69c6      	ldr	r6, [r0, #28]
 8023e10:	b09d      	sub	sp, #116	@ 0x74
 8023e12:	940a      	str	r4, [sp, #40]	@ 0x28
 8023e14:	950b      	str	r5, [sp, #44]	@ 0x2c
 8023e16:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8023e18:	9003      	str	r0, [sp, #12]
 8023e1a:	2e00      	cmp	r6, #0
 8023e1c:	d10f      	bne.n	8023e3e <_dtoa_r+0x36>
 8023e1e:	2010      	movs	r0, #16
 8023e20:	f001 f98a 	bl	8025138 <malloc>
 8023e24:	9b03      	ldr	r3, [sp, #12]
 8023e26:	1e02      	subs	r2, r0, #0
 8023e28:	61d8      	str	r0, [r3, #28]
 8023e2a:	d104      	bne.n	8023e36 <_dtoa_r+0x2e>
 8023e2c:	21ef      	movs	r1, #239	@ 0xef
 8023e2e:	4bc7      	ldr	r3, [pc, #796]	@ (802414c <_dtoa_r+0x344>)
 8023e30:	48c7      	ldr	r0, [pc, #796]	@ (8024150 <_dtoa_r+0x348>)
 8023e32:	f002 fb2f 	bl	8026494 <__assert_func>
 8023e36:	6046      	str	r6, [r0, #4]
 8023e38:	6086      	str	r6, [r0, #8]
 8023e3a:	6006      	str	r6, [r0, #0]
 8023e3c:	60c6      	str	r6, [r0, #12]
 8023e3e:	9b03      	ldr	r3, [sp, #12]
 8023e40:	69db      	ldr	r3, [r3, #28]
 8023e42:	6819      	ldr	r1, [r3, #0]
 8023e44:	2900      	cmp	r1, #0
 8023e46:	d00b      	beq.n	8023e60 <_dtoa_r+0x58>
 8023e48:	685a      	ldr	r2, [r3, #4]
 8023e4a:	2301      	movs	r3, #1
 8023e4c:	4093      	lsls	r3, r2
 8023e4e:	604a      	str	r2, [r1, #4]
 8023e50:	608b      	str	r3, [r1, #8]
 8023e52:	9803      	ldr	r0, [sp, #12]
 8023e54:	f001 fa82 	bl	802535c <_Bfree>
 8023e58:	2200      	movs	r2, #0
 8023e5a:	9b03      	ldr	r3, [sp, #12]
 8023e5c:	69db      	ldr	r3, [r3, #28]
 8023e5e:	601a      	str	r2, [r3, #0]
 8023e60:	2d00      	cmp	r5, #0
 8023e62:	da1e      	bge.n	8023ea2 <_dtoa_r+0x9a>
 8023e64:	2301      	movs	r3, #1
 8023e66:	603b      	str	r3, [r7, #0]
 8023e68:	006b      	lsls	r3, r5, #1
 8023e6a:	085b      	lsrs	r3, r3, #1
 8023e6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023e6e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023e70:	4bb8      	ldr	r3, [pc, #736]	@ (8024154 <_dtoa_r+0x34c>)
 8023e72:	4ab8      	ldr	r2, [pc, #736]	@ (8024154 <_dtoa_r+0x34c>)
 8023e74:	403b      	ands	r3, r7
 8023e76:	4293      	cmp	r3, r2
 8023e78:	d116      	bne.n	8023ea8 <_dtoa_r+0xa0>
 8023e7a:	4bb7      	ldr	r3, [pc, #732]	@ (8024158 <_dtoa_r+0x350>)
 8023e7c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023e7e:	6013      	str	r3, [r2, #0]
 8023e80:	033b      	lsls	r3, r7, #12
 8023e82:	0b1b      	lsrs	r3, r3, #12
 8023e84:	4323      	orrs	r3, r4
 8023e86:	d101      	bne.n	8023e8c <_dtoa_r+0x84>
 8023e88:	f000 fd83 	bl	8024992 <_dtoa_r+0xb8a>
 8023e8c:	4bb3      	ldr	r3, [pc, #716]	@ (802415c <_dtoa_r+0x354>)
 8023e8e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023e90:	9308      	str	r3, [sp, #32]
 8023e92:	2a00      	cmp	r2, #0
 8023e94:	d002      	beq.n	8023e9c <_dtoa_r+0x94>
 8023e96:	4bb2      	ldr	r3, [pc, #712]	@ (8024160 <_dtoa_r+0x358>)
 8023e98:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023e9a:	6013      	str	r3, [r2, #0]
 8023e9c:	9808      	ldr	r0, [sp, #32]
 8023e9e:	b01d      	add	sp, #116	@ 0x74
 8023ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ea2:	2300      	movs	r3, #0
 8023ea4:	603b      	str	r3, [r7, #0]
 8023ea6:	e7e2      	b.n	8023e6e <_dtoa_r+0x66>
 8023ea8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023eaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023eac:	9212      	str	r2, [sp, #72]	@ 0x48
 8023eae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023eb0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023eb2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023eb4:	2200      	movs	r2, #0
 8023eb6:	2300      	movs	r3, #0
 8023eb8:	f7dc fafa 	bl	80004b0 <__aeabi_dcmpeq>
 8023ebc:	1e06      	subs	r6, r0, #0
 8023ebe:	d00b      	beq.n	8023ed8 <_dtoa_r+0xd0>
 8023ec0:	2301      	movs	r3, #1
 8023ec2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8023ec4:	6013      	str	r3, [r2, #0]
 8023ec6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8023ec8:	2b00      	cmp	r3, #0
 8023eca:	d002      	beq.n	8023ed2 <_dtoa_r+0xca>
 8023ecc:	4ba5      	ldr	r3, [pc, #660]	@ (8024164 <_dtoa_r+0x35c>)
 8023ece:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8023ed0:	6013      	str	r3, [r2, #0]
 8023ed2:	4ba5      	ldr	r3, [pc, #660]	@ (8024168 <_dtoa_r+0x360>)
 8023ed4:	9308      	str	r3, [sp, #32]
 8023ed6:	e7e1      	b.n	8023e9c <_dtoa_r+0x94>
 8023ed8:	ab1a      	add	r3, sp, #104	@ 0x68
 8023eda:	9301      	str	r3, [sp, #4]
 8023edc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8023ede:	9300      	str	r3, [sp, #0]
 8023ee0:	9803      	ldr	r0, [sp, #12]
 8023ee2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023ee4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023ee6:	f001 fdf1 	bl	8025acc <__d2b>
 8023eea:	007a      	lsls	r2, r7, #1
 8023eec:	9005      	str	r0, [sp, #20]
 8023eee:	0d52      	lsrs	r2, r2, #21
 8023ef0:	d100      	bne.n	8023ef4 <_dtoa_r+0xec>
 8023ef2:	e07b      	b.n	8023fec <_dtoa_r+0x1e4>
 8023ef4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023ef6:	9618      	str	r6, [sp, #96]	@ 0x60
 8023ef8:	0319      	lsls	r1, r3, #12
 8023efa:	4b9c      	ldr	r3, [pc, #624]	@ (802416c <_dtoa_r+0x364>)
 8023efc:	0b09      	lsrs	r1, r1, #12
 8023efe:	430b      	orrs	r3, r1
 8023f00:	499b      	ldr	r1, [pc, #620]	@ (8024170 <_dtoa_r+0x368>)
 8023f02:	1857      	adds	r7, r2, r1
 8023f04:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023f06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023f08:	0019      	movs	r1, r3
 8023f0a:	2200      	movs	r2, #0
 8023f0c:	4b99      	ldr	r3, [pc, #612]	@ (8024174 <_dtoa_r+0x36c>)
 8023f0e:	f7de fe5d 	bl	8002bcc <__aeabi_dsub>
 8023f12:	4a99      	ldr	r2, [pc, #612]	@ (8024178 <_dtoa_r+0x370>)
 8023f14:	4b99      	ldr	r3, [pc, #612]	@ (802417c <_dtoa_r+0x374>)
 8023f16:	f7de fb91 	bl	800263c <__aeabi_dmul>
 8023f1a:	4a99      	ldr	r2, [pc, #612]	@ (8024180 <_dtoa_r+0x378>)
 8023f1c:	4b99      	ldr	r3, [pc, #612]	@ (8024184 <_dtoa_r+0x37c>)
 8023f1e:	f7dd fbe5 	bl	80016ec <__aeabi_dadd>
 8023f22:	0004      	movs	r4, r0
 8023f24:	0038      	movs	r0, r7
 8023f26:	000d      	movs	r5, r1
 8023f28:	f7df fa4a 	bl	80033c0 <__aeabi_i2d>
 8023f2c:	4a96      	ldr	r2, [pc, #600]	@ (8024188 <_dtoa_r+0x380>)
 8023f2e:	4b97      	ldr	r3, [pc, #604]	@ (802418c <_dtoa_r+0x384>)
 8023f30:	f7de fb84 	bl	800263c <__aeabi_dmul>
 8023f34:	0002      	movs	r2, r0
 8023f36:	000b      	movs	r3, r1
 8023f38:	0020      	movs	r0, r4
 8023f3a:	0029      	movs	r1, r5
 8023f3c:	f7dd fbd6 	bl	80016ec <__aeabi_dadd>
 8023f40:	0004      	movs	r4, r0
 8023f42:	000d      	movs	r5, r1
 8023f44:	f7df fa00 	bl	8003348 <__aeabi_d2iz>
 8023f48:	2200      	movs	r2, #0
 8023f4a:	9004      	str	r0, [sp, #16]
 8023f4c:	2300      	movs	r3, #0
 8023f4e:	0020      	movs	r0, r4
 8023f50:	0029      	movs	r1, r5
 8023f52:	f7dc fab3 	bl	80004bc <__aeabi_dcmplt>
 8023f56:	2800      	cmp	r0, #0
 8023f58:	d00b      	beq.n	8023f72 <_dtoa_r+0x16a>
 8023f5a:	9804      	ldr	r0, [sp, #16]
 8023f5c:	f7df fa30 	bl	80033c0 <__aeabi_i2d>
 8023f60:	002b      	movs	r3, r5
 8023f62:	0022      	movs	r2, r4
 8023f64:	f7dc faa4 	bl	80004b0 <__aeabi_dcmpeq>
 8023f68:	4243      	negs	r3, r0
 8023f6a:	4158      	adcs	r0, r3
 8023f6c:	9b04      	ldr	r3, [sp, #16]
 8023f6e:	1a1b      	subs	r3, r3, r0
 8023f70:	9304      	str	r3, [sp, #16]
 8023f72:	2301      	movs	r3, #1
 8023f74:	9315      	str	r3, [sp, #84]	@ 0x54
 8023f76:	9b04      	ldr	r3, [sp, #16]
 8023f78:	2b16      	cmp	r3, #22
 8023f7a:	d810      	bhi.n	8023f9e <_dtoa_r+0x196>
 8023f7c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023f7e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023f80:	9a04      	ldr	r2, [sp, #16]
 8023f82:	4b83      	ldr	r3, [pc, #524]	@ (8024190 <_dtoa_r+0x388>)
 8023f84:	00d2      	lsls	r2, r2, #3
 8023f86:	189b      	adds	r3, r3, r2
 8023f88:	681a      	ldr	r2, [r3, #0]
 8023f8a:	685b      	ldr	r3, [r3, #4]
 8023f8c:	f7dc fa96 	bl	80004bc <__aeabi_dcmplt>
 8023f90:	2800      	cmp	r0, #0
 8023f92:	d047      	beq.n	8024024 <_dtoa_r+0x21c>
 8023f94:	9b04      	ldr	r3, [sp, #16]
 8023f96:	3b01      	subs	r3, #1
 8023f98:	9304      	str	r3, [sp, #16]
 8023f9a:	2300      	movs	r3, #0
 8023f9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8023f9e:	2200      	movs	r2, #0
 8023fa0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8023fa2:	9206      	str	r2, [sp, #24]
 8023fa4:	1bdb      	subs	r3, r3, r7
 8023fa6:	1e5a      	subs	r2, r3, #1
 8023fa8:	d53e      	bpl.n	8024028 <_dtoa_r+0x220>
 8023faa:	2201      	movs	r2, #1
 8023fac:	1ad3      	subs	r3, r2, r3
 8023fae:	9306      	str	r3, [sp, #24]
 8023fb0:	2300      	movs	r3, #0
 8023fb2:	930d      	str	r3, [sp, #52]	@ 0x34
 8023fb4:	9b04      	ldr	r3, [sp, #16]
 8023fb6:	2b00      	cmp	r3, #0
 8023fb8:	db38      	blt.n	802402c <_dtoa_r+0x224>
 8023fba:	9a04      	ldr	r2, [sp, #16]
 8023fbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023fbe:	4694      	mov	ip, r2
 8023fc0:	4463      	add	r3, ip
 8023fc2:	930d      	str	r3, [sp, #52]	@ 0x34
 8023fc4:	2300      	movs	r3, #0
 8023fc6:	9214      	str	r2, [sp, #80]	@ 0x50
 8023fc8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023fca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023fcc:	2401      	movs	r4, #1
 8023fce:	2b09      	cmp	r3, #9
 8023fd0:	d867      	bhi.n	80240a2 <_dtoa_r+0x29a>
 8023fd2:	2b05      	cmp	r3, #5
 8023fd4:	dd02      	ble.n	8023fdc <_dtoa_r+0x1d4>
 8023fd6:	2400      	movs	r4, #0
 8023fd8:	3b04      	subs	r3, #4
 8023fda:	9322      	str	r3, [sp, #136]	@ 0x88
 8023fdc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023fde:	1e98      	subs	r0, r3, #2
 8023fe0:	2803      	cmp	r0, #3
 8023fe2:	d867      	bhi.n	80240b4 <_dtoa_r+0x2ac>
 8023fe4:	f7dc f8ca 	bl	800017c <__gnu_thumb1_case_uqi>
 8023fe8:	5b383a2b 	.word	0x5b383a2b
 8023fec:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023fee:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8023ff0:	18f6      	adds	r6, r6, r3
 8023ff2:	4b68      	ldr	r3, [pc, #416]	@ (8024194 <_dtoa_r+0x38c>)
 8023ff4:	18f2      	adds	r2, r6, r3
 8023ff6:	2a20      	cmp	r2, #32
 8023ff8:	dd0f      	ble.n	802401a <_dtoa_r+0x212>
 8023ffa:	2340      	movs	r3, #64	@ 0x40
 8023ffc:	1a9b      	subs	r3, r3, r2
 8023ffe:	409f      	lsls	r7, r3
 8024000:	4b65      	ldr	r3, [pc, #404]	@ (8024198 <_dtoa_r+0x390>)
 8024002:	0038      	movs	r0, r7
 8024004:	18f3      	adds	r3, r6, r3
 8024006:	40dc      	lsrs	r4, r3
 8024008:	4320      	orrs	r0, r4
 802400a:	f7df fa07 	bl	800341c <__aeabi_ui2d>
 802400e:	2201      	movs	r2, #1
 8024010:	4b62      	ldr	r3, [pc, #392]	@ (802419c <_dtoa_r+0x394>)
 8024012:	1e77      	subs	r7, r6, #1
 8024014:	18cb      	adds	r3, r1, r3
 8024016:	9218      	str	r2, [sp, #96]	@ 0x60
 8024018:	e776      	b.n	8023f08 <_dtoa_r+0x100>
 802401a:	2320      	movs	r3, #32
 802401c:	0020      	movs	r0, r4
 802401e:	1a9b      	subs	r3, r3, r2
 8024020:	4098      	lsls	r0, r3
 8024022:	e7f2      	b.n	802400a <_dtoa_r+0x202>
 8024024:	9015      	str	r0, [sp, #84]	@ 0x54
 8024026:	e7ba      	b.n	8023f9e <_dtoa_r+0x196>
 8024028:	920d      	str	r2, [sp, #52]	@ 0x34
 802402a:	e7c3      	b.n	8023fb4 <_dtoa_r+0x1ac>
 802402c:	9b06      	ldr	r3, [sp, #24]
 802402e:	9a04      	ldr	r2, [sp, #16]
 8024030:	1a9b      	subs	r3, r3, r2
 8024032:	9306      	str	r3, [sp, #24]
 8024034:	4253      	negs	r3, r2
 8024036:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024038:	2300      	movs	r3, #0
 802403a:	9314      	str	r3, [sp, #80]	@ 0x50
 802403c:	e7c5      	b.n	8023fca <_dtoa_r+0x1c2>
 802403e:	2300      	movs	r3, #0
 8024040:	9310      	str	r3, [sp, #64]	@ 0x40
 8024042:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024044:	930e      	str	r3, [sp, #56]	@ 0x38
 8024046:	9309      	str	r3, [sp, #36]	@ 0x24
 8024048:	2b00      	cmp	r3, #0
 802404a:	dc13      	bgt.n	8024074 <_dtoa_r+0x26c>
 802404c:	2301      	movs	r3, #1
 802404e:	001a      	movs	r2, r3
 8024050:	930e      	str	r3, [sp, #56]	@ 0x38
 8024052:	9309      	str	r3, [sp, #36]	@ 0x24
 8024054:	9223      	str	r2, [sp, #140]	@ 0x8c
 8024056:	e00d      	b.n	8024074 <_dtoa_r+0x26c>
 8024058:	2301      	movs	r3, #1
 802405a:	e7f1      	b.n	8024040 <_dtoa_r+0x238>
 802405c:	2300      	movs	r3, #0
 802405e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024060:	9310      	str	r3, [sp, #64]	@ 0x40
 8024062:	4694      	mov	ip, r2
 8024064:	9b04      	ldr	r3, [sp, #16]
 8024066:	4463      	add	r3, ip
 8024068:	930e      	str	r3, [sp, #56]	@ 0x38
 802406a:	3301      	adds	r3, #1
 802406c:	9309      	str	r3, [sp, #36]	@ 0x24
 802406e:	2b00      	cmp	r3, #0
 8024070:	dc00      	bgt.n	8024074 <_dtoa_r+0x26c>
 8024072:	2301      	movs	r3, #1
 8024074:	9a03      	ldr	r2, [sp, #12]
 8024076:	2100      	movs	r1, #0
 8024078:	69d0      	ldr	r0, [r2, #28]
 802407a:	2204      	movs	r2, #4
 802407c:	0015      	movs	r5, r2
 802407e:	3514      	adds	r5, #20
 8024080:	429d      	cmp	r5, r3
 8024082:	d91b      	bls.n	80240bc <_dtoa_r+0x2b4>
 8024084:	6041      	str	r1, [r0, #4]
 8024086:	9803      	ldr	r0, [sp, #12]
 8024088:	f001 f924 	bl	80252d4 <_Balloc>
 802408c:	9008      	str	r0, [sp, #32]
 802408e:	2800      	cmp	r0, #0
 8024090:	d117      	bne.n	80240c2 <_dtoa_r+0x2ba>
 8024092:	21b0      	movs	r1, #176	@ 0xb0
 8024094:	4b42      	ldr	r3, [pc, #264]	@ (80241a0 <_dtoa_r+0x398>)
 8024096:	482e      	ldr	r0, [pc, #184]	@ (8024150 <_dtoa_r+0x348>)
 8024098:	9a08      	ldr	r2, [sp, #32]
 802409a:	31ff      	adds	r1, #255	@ 0xff
 802409c:	e6c9      	b.n	8023e32 <_dtoa_r+0x2a>
 802409e:	2301      	movs	r3, #1
 80240a0:	e7dd      	b.n	802405e <_dtoa_r+0x256>
 80240a2:	2300      	movs	r3, #0
 80240a4:	9410      	str	r4, [sp, #64]	@ 0x40
 80240a6:	9322      	str	r3, [sp, #136]	@ 0x88
 80240a8:	3b01      	subs	r3, #1
 80240aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80240ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80240ae:	2200      	movs	r2, #0
 80240b0:	3313      	adds	r3, #19
 80240b2:	e7cf      	b.n	8024054 <_dtoa_r+0x24c>
 80240b4:	2301      	movs	r3, #1
 80240b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80240b8:	3b02      	subs	r3, #2
 80240ba:	e7f6      	b.n	80240aa <_dtoa_r+0x2a2>
 80240bc:	3101      	adds	r1, #1
 80240be:	0052      	lsls	r2, r2, #1
 80240c0:	e7dc      	b.n	802407c <_dtoa_r+0x274>
 80240c2:	9b03      	ldr	r3, [sp, #12]
 80240c4:	9a08      	ldr	r2, [sp, #32]
 80240c6:	69db      	ldr	r3, [r3, #28]
 80240c8:	601a      	str	r2, [r3, #0]
 80240ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240cc:	2b0e      	cmp	r3, #14
 80240ce:	d900      	bls.n	80240d2 <_dtoa_r+0x2ca>
 80240d0:	e0d9      	b.n	8024286 <_dtoa_r+0x47e>
 80240d2:	2c00      	cmp	r4, #0
 80240d4:	d100      	bne.n	80240d8 <_dtoa_r+0x2d0>
 80240d6:	e0d6      	b.n	8024286 <_dtoa_r+0x47e>
 80240d8:	9b04      	ldr	r3, [sp, #16]
 80240da:	2b00      	cmp	r3, #0
 80240dc:	dd64      	ble.n	80241a8 <_dtoa_r+0x3a0>
 80240de:	210f      	movs	r1, #15
 80240e0:	9a04      	ldr	r2, [sp, #16]
 80240e2:	4b2b      	ldr	r3, [pc, #172]	@ (8024190 <_dtoa_r+0x388>)
 80240e4:	400a      	ands	r2, r1
 80240e6:	00d2      	lsls	r2, r2, #3
 80240e8:	189b      	adds	r3, r3, r2
 80240ea:	681e      	ldr	r6, [r3, #0]
 80240ec:	685f      	ldr	r7, [r3, #4]
 80240ee:	9b04      	ldr	r3, [sp, #16]
 80240f0:	2402      	movs	r4, #2
 80240f2:	111d      	asrs	r5, r3, #4
 80240f4:	05db      	lsls	r3, r3, #23
 80240f6:	d50a      	bpl.n	802410e <_dtoa_r+0x306>
 80240f8:	4b2a      	ldr	r3, [pc, #168]	@ (80241a4 <_dtoa_r+0x39c>)
 80240fa:	400d      	ands	r5, r1
 80240fc:	6a1a      	ldr	r2, [r3, #32]
 80240fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024100:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024102:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024104:	f7dd fe56 	bl	8001db4 <__aeabi_ddiv>
 8024108:	900a      	str	r0, [sp, #40]	@ 0x28
 802410a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802410c:	3401      	adds	r4, #1
 802410e:	4b25      	ldr	r3, [pc, #148]	@ (80241a4 <_dtoa_r+0x39c>)
 8024110:	930c      	str	r3, [sp, #48]	@ 0x30
 8024112:	2d00      	cmp	r5, #0
 8024114:	d108      	bne.n	8024128 <_dtoa_r+0x320>
 8024116:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024118:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802411a:	0032      	movs	r2, r6
 802411c:	003b      	movs	r3, r7
 802411e:	f7dd fe49 	bl	8001db4 <__aeabi_ddiv>
 8024122:	900a      	str	r0, [sp, #40]	@ 0x28
 8024124:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024126:	e05a      	b.n	80241de <_dtoa_r+0x3d6>
 8024128:	2301      	movs	r3, #1
 802412a:	421d      	tst	r5, r3
 802412c:	d009      	beq.n	8024142 <_dtoa_r+0x33a>
 802412e:	18e4      	adds	r4, r4, r3
 8024130:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024132:	0030      	movs	r0, r6
 8024134:	681a      	ldr	r2, [r3, #0]
 8024136:	685b      	ldr	r3, [r3, #4]
 8024138:	0039      	movs	r1, r7
 802413a:	f7de fa7f 	bl	800263c <__aeabi_dmul>
 802413e:	0006      	movs	r6, r0
 8024140:	000f      	movs	r7, r1
 8024142:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024144:	106d      	asrs	r5, r5, #1
 8024146:	3308      	adds	r3, #8
 8024148:	e7e2      	b.n	8024110 <_dtoa_r+0x308>
 802414a:	46c0      	nop			@ (mov r8, r8)
 802414c:	0802b94a 	.word	0x0802b94a
 8024150:	0802b961 	.word	0x0802b961
 8024154:	7ff00000 	.word	0x7ff00000
 8024158:	0000270f 	.word	0x0000270f
 802415c:	0802b946 	.word	0x0802b946
 8024160:	0802b949 	.word	0x0802b949
 8024164:	0802b912 	.word	0x0802b912
 8024168:	0802b911 	.word	0x0802b911
 802416c:	3ff00000 	.word	0x3ff00000
 8024170:	fffffc01 	.word	0xfffffc01
 8024174:	3ff80000 	.word	0x3ff80000
 8024178:	636f4361 	.word	0x636f4361
 802417c:	3fd287a7 	.word	0x3fd287a7
 8024180:	8b60c8b3 	.word	0x8b60c8b3
 8024184:	3fc68a28 	.word	0x3fc68a28
 8024188:	509f79fb 	.word	0x509f79fb
 802418c:	3fd34413 	.word	0x3fd34413
 8024190:	0802bab8 	.word	0x0802bab8
 8024194:	00000432 	.word	0x00000432
 8024198:	00000412 	.word	0x00000412
 802419c:	fe100000 	.word	0xfe100000
 80241a0:	0802b9b9 	.word	0x0802b9b9
 80241a4:	0802ba90 	.word	0x0802ba90
 80241a8:	9b04      	ldr	r3, [sp, #16]
 80241aa:	2402      	movs	r4, #2
 80241ac:	2b00      	cmp	r3, #0
 80241ae:	d016      	beq.n	80241de <_dtoa_r+0x3d6>
 80241b0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80241b2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80241b4:	220f      	movs	r2, #15
 80241b6:	425d      	negs	r5, r3
 80241b8:	402a      	ands	r2, r5
 80241ba:	4bd7      	ldr	r3, [pc, #860]	@ (8024518 <_dtoa_r+0x710>)
 80241bc:	00d2      	lsls	r2, r2, #3
 80241be:	189b      	adds	r3, r3, r2
 80241c0:	681a      	ldr	r2, [r3, #0]
 80241c2:	685b      	ldr	r3, [r3, #4]
 80241c4:	f7de fa3a 	bl	800263c <__aeabi_dmul>
 80241c8:	2701      	movs	r7, #1
 80241ca:	2300      	movs	r3, #0
 80241cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80241ce:	910b      	str	r1, [sp, #44]	@ 0x2c
 80241d0:	4ed2      	ldr	r6, [pc, #840]	@ (802451c <_dtoa_r+0x714>)
 80241d2:	112d      	asrs	r5, r5, #4
 80241d4:	2d00      	cmp	r5, #0
 80241d6:	d000      	beq.n	80241da <_dtoa_r+0x3d2>
 80241d8:	e0ba      	b.n	8024350 <_dtoa_r+0x548>
 80241da:	2b00      	cmp	r3, #0
 80241dc:	d1a1      	bne.n	8024122 <_dtoa_r+0x31a>
 80241de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80241e0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80241e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80241e4:	2b00      	cmp	r3, #0
 80241e6:	d100      	bne.n	80241ea <_dtoa_r+0x3e2>
 80241e8:	e0bd      	b.n	8024366 <_dtoa_r+0x55e>
 80241ea:	2200      	movs	r2, #0
 80241ec:	0030      	movs	r0, r6
 80241ee:	0039      	movs	r1, r7
 80241f0:	4bcb      	ldr	r3, [pc, #812]	@ (8024520 <_dtoa_r+0x718>)
 80241f2:	f7dc f963 	bl	80004bc <__aeabi_dcmplt>
 80241f6:	2800      	cmp	r0, #0
 80241f8:	d100      	bne.n	80241fc <_dtoa_r+0x3f4>
 80241fa:	e0b4      	b.n	8024366 <_dtoa_r+0x55e>
 80241fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241fe:	2b00      	cmp	r3, #0
 8024200:	d100      	bne.n	8024204 <_dtoa_r+0x3fc>
 8024202:	e0b0      	b.n	8024366 <_dtoa_r+0x55e>
 8024204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024206:	2b00      	cmp	r3, #0
 8024208:	dd39      	ble.n	802427e <_dtoa_r+0x476>
 802420a:	9b04      	ldr	r3, [sp, #16]
 802420c:	2200      	movs	r2, #0
 802420e:	3b01      	subs	r3, #1
 8024210:	930c      	str	r3, [sp, #48]	@ 0x30
 8024212:	0030      	movs	r0, r6
 8024214:	4bc3      	ldr	r3, [pc, #780]	@ (8024524 <_dtoa_r+0x71c>)
 8024216:	0039      	movs	r1, r7
 8024218:	f7de fa10 	bl	800263c <__aeabi_dmul>
 802421c:	900a      	str	r0, [sp, #40]	@ 0x28
 802421e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8024220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024222:	3401      	adds	r4, #1
 8024224:	0020      	movs	r0, r4
 8024226:	9311      	str	r3, [sp, #68]	@ 0x44
 8024228:	f7df f8ca 	bl	80033c0 <__aeabi_i2d>
 802422c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802422e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024230:	f7de fa04 	bl	800263c <__aeabi_dmul>
 8024234:	4bbc      	ldr	r3, [pc, #752]	@ (8024528 <_dtoa_r+0x720>)
 8024236:	2200      	movs	r2, #0
 8024238:	f7dd fa58 	bl	80016ec <__aeabi_dadd>
 802423c:	4bbb      	ldr	r3, [pc, #748]	@ (802452c <_dtoa_r+0x724>)
 802423e:	0006      	movs	r6, r0
 8024240:	18cf      	adds	r7, r1, r3
 8024242:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024244:	2b00      	cmp	r3, #0
 8024246:	d000      	beq.n	802424a <_dtoa_r+0x442>
 8024248:	e091      	b.n	802436e <_dtoa_r+0x566>
 802424a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802424c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802424e:	2200      	movs	r2, #0
 8024250:	4bb7      	ldr	r3, [pc, #732]	@ (8024530 <_dtoa_r+0x728>)
 8024252:	f7de fcbb 	bl	8002bcc <__aeabi_dsub>
 8024256:	0032      	movs	r2, r6
 8024258:	003b      	movs	r3, r7
 802425a:	0004      	movs	r4, r0
 802425c:	000d      	movs	r5, r1
 802425e:	f7dc f941 	bl	80004e4 <__aeabi_dcmpgt>
 8024262:	2800      	cmp	r0, #0
 8024264:	d000      	beq.n	8024268 <_dtoa_r+0x460>
 8024266:	e29d      	b.n	80247a4 <_dtoa_r+0x99c>
 8024268:	2180      	movs	r1, #128	@ 0x80
 802426a:	0609      	lsls	r1, r1, #24
 802426c:	187b      	adds	r3, r7, r1
 802426e:	0032      	movs	r2, r6
 8024270:	0020      	movs	r0, r4
 8024272:	0029      	movs	r1, r5
 8024274:	f7dc f922 	bl	80004bc <__aeabi_dcmplt>
 8024278:	2800      	cmp	r0, #0
 802427a:	d000      	beq.n	802427e <_dtoa_r+0x476>
 802427c:	e130      	b.n	80244e0 <_dtoa_r+0x6d8>
 802427e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024280:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024282:	930a      	str	r3, [sp, #40]	@ 0x28
 8024284:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024286:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024288:	2b00      	cmp	r3, #0
 802428a:	da00      	bge.n	802428e <_dtoa_r+0x486>
 802428c:	e177      	b.n	802457e <_dtoa_r+0x776>
 802428e:	9a04      	ldr	r2, [sp, #16]
 8024290:	2a0e      	cmp	r2, #14
 8024292:	dd00      	ble.n	8024296 <_dtoa_r+0x48e>
 8024294:	e173      	b.n	802457e <_dtoa_r+0x776>
 8024296:	4ba0      	ldr	r3, [pc, #640]	@ (8024518 <_dtoa_r+0x710>)
 8024298:	00d2      	lsls	r2, r2, #3
 802429a:	189b      	adds	r3, r3, r2
 802429c:	685c      	ldr	r4, [r3, #4]
 802429e:	681b      	ldr	r3, [r3, #0]
 80242a0:	9306      	str	r3, [sp, #24]
 80242a2:	9407      	str	r4, [sp, #28]
 80242a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80242a6:	2b00      	cmp	r3, #0
 80242a8:	da03      	bge.n	80242b2 <_dtoa_r+0x4aa>
 80242aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242ac:	2b00      	cmp	r3, #0
 80242ae:	dc00      	bgt.n	80242b2 <_dtoa_r+0x4aa>
 80242b0:	e106      	b.n	80244c0 <_dtoa_r+0x6b8>
 80242b2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80242b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80242b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242b8:	9d08      	ldr	r5, [sp, #32]
 80242ba:	3b01      	subs	r3, #1
 80242bc:	195b      	adds	r3, r3, r5
 80242be:	930a      	str	r3, [sp, #40]	@ 0x28
 80242c0:	9a06      	ldr	r2, [sp, #24]
 80242c2:	9b07      	ldr	r3, [sp, #28]
 80242c4:	0030      	movs	r0, r6
 80242c6:	0039      	movs	r1, r7
 80242c8:	f7dd fd74 	bl	8001db4 <__aeabi_ddiv>
 80242cc:	f7df f83c 	bl	8003348 <__aeabi_d2iz>
 80242d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80242d2:	f7df f875 	bl	80033c0 <__aeabi_i2d>
 80242d6:	9a06      	ldr	r2, [sp, #24]
 80242d8:	9b07      	ldr	r3, [sp, #28]
 80242da:	f7de f9af 	bl	800263c <__aeabi_dmul>
 80242de:	0002      	movs	r2, r0
 80242e0:	000b      	movs	r3, r1
 80242e2:	0030      	movs	r0, r6
 80242e4:	0039      	movs	r1, r7
 80242e6:	f7de fc71 	bl	8002bcc <__aeabi_dsub>
 80242ea:	002b      	movs	r3, r5
 80242ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80242ee:	3501      	adds	r5, #1
 80242f0:	3230      	adds	r2, #48	@ 0x30
 80242f2:	701a      	strb	r2, [r3, #0]
 80242f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80242f6:	002c      	movs	r4, r5
 80242f8:	429a      	cmp	r2, r3
 80242fa:	d000      	beq.n	80242fe <_dtoa_r+0x4f6>
 80242fc:	e131      	b.n	8024562 <_dtoa_r+0x75a>
 80242fe:	0002      	movs	r2, r0
 8024300:	000b      	movs	r3, r1
 8024302:	f7dd f9f3 	bl	80016ec <__aeabi_dadd>
 8024306:	9a06      	ldr	r2, [sp, #24]
 8024308:	9b07      	ldr	r3, [sp, #28]
 802430a:	0006      	movs	r6, r0
 802430c:	000f      	movs	r7, r1
 802430e:	f7dc f8e9 	bl	80004e4 <__aeabi_dcmpgt>
 8024312:	2800      	cmp	r0, #0
 8024314:	d000      	beq.n	8024318 <_dtoa_r+0x510>
 8024316:	e10f      	b.n	8024538 <_dtoa_r+0x730>
 8024318:	9a06      	ldr	r2, [sp, #24]
 802431a:	9b07      	ldr	r3, [sp, #28]
 802431c:	0030      	movs	r0, r6
 802431e:	0039      	movs	r1, r7
 8024320:	f7dc f8c6 	bl	80004b0 <__aeabi_dcmpeq>
 8024324:	2800      	cmp	r0, #0
 8024326:	d003      	beq.n	8024330 <_dtoa_r+0x528>
 8024328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802432a:	07dd      	lsls	r5, r3, #31
 802432c:	d500      	bpl.n	8024330 <_dtoa_r+0x528>
 802432e:	e103      	b.n	8024538 <_dtoa_r+0x730>
 8024330:	9905      	ldr	r1, [sp, #20]
 8024332:	9803      	ldr	r0, [sp, #12]
 8024334:	f001 f812 	bl	802535c <_Bfree>
 8024338:	2300      	movs	r3, #0
 802433a:	7023      	strb	r3, [r4, #0]
 802433c:	9b04      	ldr	r3, [sp, #16]
 802433e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8024340:	3301      	adds	r3, #1
 8024342:	6013      	str	r3, [r2, #0]
 8024344:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024346:	2b00      	cmp	r3, #0
 8024348:	d100      	bne.n	802434c <_dtoa_r+0x544>
 802434a:	e5a7      	b.n	8023e9c <_dtoa_r+0x94>
 802434c:	601c      	str	r4, [r3, #0]
 802434e:	e5a5      	b.n	8023e9c <_dtoa_r+0x94>
 8024350:	423d      	tst	r5, r7
 8024352:	d005      	beq.n	8024360 <_dtoa_r+0x558>
 8024354:	6832      	ldr	r2, [r6, #0]
 8024356:	6873      	ldr	r3, [r6, #4]
 8024358:	f7de f970 	bl	800263c <__aeabi_dmul>
 802435c:	003b      	movs	r3, r7
 802435e:	3401      	adds	r4, #1
 8024360:	106d      	asrs	r5, r5, #1
 8024362:	3608      	adds	r6, #8
 8024364:	e736      	b.n	80241d4 <_dtoa_r+0x3cc>
 8024366:	9b04      	ldr	r3, [sp, #16]
 8024368:	930c      	str	r3, [sp, #48]	@ 0x30
 802436a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802436c:	e75a      	b.n	8024224 <_dtoa_r+0x41c>
 802436e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024370:	4b69      	ldr	r3, [pc, #420]	@ (8024518 <_dtoa_r+0x710>)
 8024372:	3a01      	subs	r2, #1
 8024374:	00d2      	lsls	r2, r2, #3
 8024376:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8024378:	189b      	adds	r3, r3, r2
 802437a:	681a      	ldr	r2, [r3, #0]
 802437c:	685b      	ldr	r3, [r3, #4]
 802437e:	2900      	cmp	r1, #0
 8024380:	d04c      	beq.n	802441c <_dtoa_r+0x614>
 8024382:	2000      	movs	r0, #0
 8024384:	496b      	ldr	r1, [pc, #428]	@ (8024534 <_dtoa_r+0x72c>)
 8024386:	f7dd fd15 	bl	8001db4 <__aeabi_ddiv>
 802438a:	0032      	movs	r2, r6
 802438c:	003b      	movs	r3, r7
 802438e:	f7de fc1d 	bl	8002bcc <__aeabi_dsub>
 8024392:	9a08      	ldr	r2, [sp, #32]
 8024394:	0006      	movs	r6, r0
 8024396:	4694      	mov	ip, r2
 8024398:	000f      	movs	r7, r1
 802439a:	9b08      	ldr	r3, [sp, #32]
 802439c:	9316      	str	r3, [sp, #88]	@ 0x58
 802439e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80243a0:	4463      	add	r3, ip
 80243a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80243a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80243a6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80243a8:	f7de ffce 	bl	8003348 <__aeabi_d2iz>
 80243ac:	0005      	movs	r5, r0
 80243ae:	f7df f807 	bl	80033c0 <__aeabi_i2d>
 80243b2:	0002      	movs	r2, r0
 80243b4:	000b      	movs	r3, r1
 80243b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80243b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80243ba:	f7de fc07 	bl	8002bcc <__aeabi_dsub>
 80243be:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80243c0:	3530      	adds	r5, #48	@ 0x30
 80243c2:	1c5c      	adds	r4, r3, #1
 80243c4:	701d      	strb	r5, [r3, #0]
 80243c6:	0032      	movs	r2, r6
 80243c8:	003b      	movs	r3, r7
 80243ca:	900a      	str	r0, [sp, #40]	@ 0x28
 80243cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80243ce:	f7dc f875 	bl	80004bc <__aeabi_dcmplt>
 80243d2:	2800      	cmp	r0, #0
 80243d4:	d16a      	bne.n	80244ac <_dtoa_r+0x6a4>
 80243d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80243d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80243da:	2000      	movs	r0, #0
 80243dc:	4950      	ldr	r1, [pc, #320]	@ (8024520 <_dtoa_r+0x718>)
 80243de:	f7de fbf5 	bl	8002bcc <__aeabi_dsub>
 80243e2:	0032      	movs	r2, r6
 80243e4:	003b      	movs	r3, r7
 80243e6:	f7dc f869 	bl	80004bc <__aeabi_dcmplt>
 80243ea:	2800      	cmp	r0, #0
 80243ec:	d000      	beq.n	80243f0 <_dtoa_r+0x5e8>
 80243ee:	e0a5      	b.n	802453c <_dtoa_r+0x734>
 80243f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80243f2:	42a3      	cmp	r3, r4
 80243f4:	d100      	bne.n	80243f8 <_dtoa_r+0x5f0>
 80243f6:	e742      	b.n	802427e <_dtoa_r+0x476>
 80243f8:	2200      	movs	r2, #0
 80243fa:	0030      	movs	r0, r6
 80243fc:	0039      	movs	r1, r7
 80243fe:	4b49      	ldr	r3, [pc, #292]	@ (8024524 <_dtoa_r+0x71c>)
 8024400:	f7de f91c 	bl	800263c <__aeabi_dmul>
 8024404:	2200      	movs	r2, #0
 8024406:	0006      	movs	r6, r0
 8024408:	000f      	movs	r7, r1
 802440a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802440c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802440e:	4b45      	ldr	r3, [pc, #276]	@ (8024524 <_dtoa_r+0x71c>)
 8024410:	f7de f914 	bl	800263c <__aeabi_dmul>
 8024414:	9416      	str	r4, [sp, #88]	@ 0x58
 8024416:	900a      	str	r0, [sp, #40]	@ 0x28
 8024418:	910b      	str	r1, [sp, #44]	@ 0x2c
 802441a:	e7c3      	b.n	80243a4 <_dtoa_r+0x59c>
 802441c:	0030      	movs	r0, r6
 802441e:	0039      	movs	r1, r7
 8024420:	f7de f90c 	bl	800263c <__aeabi_dmul>
 8024424:	9d08      	ldr	r5, [sp, #32]
 8024426:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8024428:	002b      	movs	r3, r5
 802442a:	4694      	mov	ip, r2
 802442c:	9016      	str	r0, [sp, #88]	@ 0x58
 802442e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8024430:	4463      	add	r3, ip
 8024432:	9319      	str	r3, [sp, #100]	@ 0x64
 8024434:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024436:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024438:	f7de ff86 	bl	8003348 <__aeabi_d2iz>
 802443c:	0004      	movs	r4, r0
 802443e:	f7de ffbf 	bl	80033c0 <__aeabi_i2d>
 8024442:	000b      	movs	r3, r1
 8024444:	0002      	movs	r2, r0
 8024446:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8024448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802444a:	f7de fbbf 	bl	8002bcc <__aeabi_dsub>
 802444e:	3430      	adds	r4, #48	@ 0x30
 8024450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024452:	702c      	strb	r4, [r5, #0]
 8024454:	3501      	adds	r5, #1
 8024456:	0006      	movs	r6, r0
 8024458:	000f      	movs	r7, r1
 802445a:	42ab      	cmp	r3, r5
 802445c:	d129      	bne.n	80244b2 <_dtoa_r+0x6aa>
 802445e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8024460:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024462:	9b08      	ldr	r3, [sp, #32]
 8024464:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8024466:	469c      	mov	ip, r3
 8024468:	2200      	movs	r2, #0
 802446a:	4b32      	ldr	r3, [pc, #200]	@ (8024534 <_dtoa_r+0x72c>)
 802446c:	4464      	add	r4, ip
 802446e:	f7dd f93d 	bl	80016ec <__aeabi_dadd>
 8024472:	0002      	movs	r2, r0
 8024474:	000b      	movs	r3, r1
 8024476:	0030      	movs	r0, r6
 8024478:	0039      	movs	r1, r7
 802447a:	f7dc f833 	bl	80004e4 <__aeabi_dcmpgt>
 802447e:	2800      	cmp	r0, #0
 8024480:	d15c      	bne.n	802453c <_dtoa_r+0x734>
 8024482:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8024484:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8024486:	2000      	movs	r0, #0
 8024488:	492a      	ldr	r1, [pc, #168]	@ (8024534 <_dtoa_r+0x72c>)
 802448a:	f7de fb9f 	bl	8002bcc <__aeabi_dsub>
 802448e:	0002      	movs	r2, r0
 8024490:	000b      	movs	r3, r1
 8024492:	0030      	movs	r0, r6
 8024494:	0039      	movs	r1, r7
 8024496:	f7dc f811 	bl	80004bc <__aeabi_dcmplt>
 802449a:	2800      	cmp	r0, #0
 802449c:	d100      	bne.n	80244a0 <_dtoa_r+0x698>
 802449e:	e6ee      	b.n	802427e <_dtoa_r+0x476>
 80244a0:	0023      	movs	r3, r4
 80244a2:	3c01      	subs	r4, #1
 80244a4:	7822      	ldrb	r2, [r4, #0]
 80244a6:	2a30      	cmp	r2, #48	@ 0x30
 80244a8:	d0fa      	beq.n	80244a0 <_dtoa_r+0x698>
 80244aa:	001c      	movs	r4, r3
 80244ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80244ae:	9304      	str	r3, [sp, #16]
 80244b0:	e73e      	b.n	8024330 <_dtoa_r+0x528>
 80244b2:	2200      	movs	r2, #0
 80244b4:	4b1b      	ldr	r3, [pc, #108]	@ (8024524 <_dtoa_r+0x71c>)
 80244b6:	f7de f8c1 	bl	800263c <__aeabi_dmul>
 80244ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80244bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80244be:	e7b9      	b.n	8024434 <_dtoa_r+0x62c>
 80244c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80244c2:	2b00      	cmp	r3, #0
 80244c4:	d10c      	bne.n	80244e0 <_dtoa_r+0x6d8>
 80244c6:	9806      	ldr	r0, [sp, #24]
 80244c8:	9907      	ldr	r1, [sp, #28]
 80244ca:	2200      	movs	r2, #0
 80244cc:	4b18      	ldr	r3, [pc, #96]	@ (8024530 <_dtoa_r+0x728>)
 80244ce:	f7de f8b5 	bl	800263c <__aeabi_dmul>
 80244d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80244d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80244d6:	f7dc f80f 	bl	80004f8 <__aeabi_dcmpge>
 80244da:	2800      	cmp	r0, #0
 80244dc:	d100      	bne.n	80244e0 <_dtoa_r+0x6d8>
 80244de:	e164      	b.n	80247aa <_dtoa_r+0x9a2>
 80244e0:	2600      	movs	r6, #0
 80244e2:	0037      	movs	r7, r6
 80244e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80244e6:	9c08      	ldr	r4, [sp, #32]
 80244e8:	43db      	mvns	r3, r3
 80244ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80244ec:	2300      	movs	r3, #0
 80244ee:	9304      	str	r3, [sp, #16]
 80244f0:	0031      	movs	r1, r6
 80244f2:	9803      	ldr	r0, [sp, #12]
 80244f4:	f000 ff32 	bl	802535c <_Bfree>
 80244f8:	2f00      	cmp	r7, #0
 80244fa:	d0d7      	beq.n	80244ac <_dtoa_r+0x6a4>
 80244fc:	9b04      	ldr	r3, [sp, #16]
 80244fe:	2b00      	cmp	r3, #0
 8024500:	d005      	beq.n	802450e <_dtoa_r+0x706>
 8024502:	42bb      	cmp	r3, r7
 8024504:	d003      	beq.n	802450e <_dtoa_r+0x706>
 8024506:	0019      	movs	r1, r3
 8024508:	9803      	ldr	r0, [sp, #12]
 802450a:	f000 ff27 	bl	802535c <_Bfree>
 802450e:	0039      	movs	r1, r7
 8024510:	9803      	ldr	r0, [sp, #12]
 8024512:	f000 ff23 	bl	802535c <_Bfree>
 8024516:	e7c9      	b.n	80244ac <_dtoa_r+0x6a4>
 8024518:	0802bab8 	.word	0x0802bab8
 802451c:	0802ba90 	.word	0x0802ba90
 8024520:	3ff00000 	.word	0x3ff00000
 8024524:	40240000 	.word	0x40240000
 8024528:	401c0000 	.word	0x401c0000
 802452c:	fcc00000 	.word	0xfcc00000
 8024530:	40140000 	.word	0x40140000
 8024534:	3fe00000 	.word	0x3fe00000
 8024538:	9b04      	ldr	r3, [sp, #16]
 802453a:	930c      	str	r3, [sp, #48]	@ 0x30
 802453c:	0023      	movs	r3, r4
 802453e:	001c      	movs	r4, r3
 8024540:	3b01      	subs	r3, #1
 8024542:	781a      	ldrb	r2, [r3, #0]
 8024544:	2a39      	cmp	r2, #57	@ 0x39
 8024546:	d108      	bne.n	802455a <_dtoa_r+0x752>
 8024548:	9a08      	ldr	r2, [sp, #32]
 802454a:	429a      	cmp	r2, r3
 802454c:	d1f7      	bne.n	802453e <_dtoa_r+0x736>
 802454e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024550:	9908      	ldr	r1, [sp, #32]
 8024552:	3201      	adds	r2, #1
 8024554:	920c      	str	r2, [sp, #48]	@ 0x30
 8024556:	2230      	movs	r2, #48	@ 0x30
 8024558:	700a      	strb	r2, [r1, #0]
 802455a:	781a      	ldrb	r2, [r3, #0]
 802455c:	3201      	adds	r2, #1
 802455e:	701a      	strb	r2, [r3, #0]
 8024560:	e7a4      	b.n	80244ac <_dtoa_r+0x6a4>
 8024562:	2200      	movs	r2, #0
 8024564:	4bc6      	ldr	r3, [pc, #792]	@ (8024880 <_dtoa_r+0xa78>)
 8024566:	f7de f869 	bl	800263c <__aeabi_dmul>
 802456a:	2200      	movs	r2, #0
 802456c:	2300      	movs	r3, #0
 802456e:	0006      	movs	r6, r0
 8024570:	000f      	movs	r7, r1
 8024572:	f7db ff9d 	bl	80004b0 <__aeabi_dcmpeq>
 8024576:	2800      	cmp	r0, #0
 8024578:	d100      	bne.n	802457c <_dtoa_r+0x774>
 802457a:	e6a1      	b.n	80242c0 <_dtoa_r+0x4b8>
 802457c:	e6d8      	b.n	8024330 <_dtoa_r+0x528>
 802457e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8024580:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8024582:	9c06      	ldr	r4, [sp, #24]
 8024584:	2f00      	cmp	r7, #0
 8024586:	d014      	beq.n	80245b2 <_dtoa_r+0x7aa>
 8024588:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802458a:	2a01      	cmp	r2, #1
 802458c:	dd00      	ble.n	8024590 <_dtoa_r+0x788>
 802458e:	e0c8      	b.n	8024722 <_dtoa_r+0x91a>
 8024590:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024592:	2a00      	cmp	r2, #0
 8024594:	d100      	bne.n	8024598 <_dtoa_r+0x790>
 8024596:	e0be      	b.n	8024716 <_dtoa_r+0x90e>
 8024598:	4aba      	ldr	r2, [pc, #744]	@ (8024884 <_dtoa_r+0xa7c>)
 802459a:	189b      	adds	r3, r3, r2
 802459c:	9a06      	ldr	r2, [sp, #24]
 802459e:	2101      	movs	r1, #1
 80245a0:	18d2      	adds	r2, r2, r3
 80245a2:	9206      	str	r2, [sp, #24]
 80245a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80245a6:	9803      	ldr	r0, [sp, #12]
 80245a8:	18d3      	adds	r3, r2, r3
 80245aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80245ac:	f000 ffda 	bl	8025564 <__i2b>
 80245b0:	0007      	movs	r7, r0
 80245b2:	2c00      	cmp	r4, #0
 80245b4:	d00e      	beq.n	80245d4 <_dtoa_r+0x7cc>
 80245b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80245b8:	2b00      	cmp	r3, #0
 80245ba:	dd0b      	ble.n	80245d4 <_dtoa_r+0x7cc>
 80245bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80245be:	0023      	movs	r3, r4
 80245c0:	4294      	cmp	r4, r2
 80245c2:	dd00      	ble.n	80245c6 <_dtoa_r+0x7be>
 80245c4:	0013      	movs	r3, r2
 80245c6:	9a06      	ldr	r2, [sp, #24]
 80245c8:	1ae4      	subs	r4, r4, r3
 80245ca:	1ad2      	subs	r2, r2, r3
 80245cc:	9206      	str	r2, [sp, #24]
 80245ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80245d0:	1ad3      	subs	r3, r2, r3
 80245d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80245d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80245d6:	2b00      	cmp	r3, #0
 80245d8:	d01f      	beq.n	802461a <_dtoa_r+0x812>
 80245da:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80245dc:	2b00      	cmp	r3, #0
 80245de:	d100      	bne.n	80245e2 <_dtoa_r+0x7da>
 80245e0:	e0b5      	b.n	802474e <_dtoa_r+0x946>
 80245e2:	2d00      	cmp	r5, #0
 80245e4:	d010      	beq.n	8024608 <_dtoa_r+0x800>
 80245e6:	0039      	movs	r1, r7
 80245e8:	002a      	movs	r2, r5
 80245ea:	9803      	ldr	r0, [sp, #12]
 80245ec:	f001 f884 	bl	80256f8 <__pow5mult>
 80245f0:	9a05      	ldr	r2, [sp, #20]
 80245f2:	0001      	movs	r1, r0
 80245f4:	0007      	movs	r7, r0
 80245f6:	9803      	ldr	r0, [sp, #12]
 80245f8:	f000 ffcc 	bl	8025594 <__multiply>
 80245fc:	0006      	movs	r6, r0
 80245fe:	9905      	ldr	r1, [sp, #20]
 8024600:	9803      	ldr	r0, [sp, #12]
 8024602:	f000 feab 	bl	802535c <_Bfree>
 8024606:	9605      	str	r6, [sp, #20]
 8024608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802460a:	1b5a      	subs	r2, r3, r5
 802460c:	42ab      	cmp	r3, r5
 802460e:	d004      	beq.n	802461a <_dtoa_r+0x812>
 8024610:	9905      	ldr	r1, [sp, #20]
 8024612:	9803      	ldr	r0, [sp, #12]
 8024614:	f001 f870 	bl	80256f8 <__pow5mult>
 8024618:	9005      	str	r0, [sp, #20]
 802461a:	2101      	movs	r1, #1
 802461c:	9803      	ldr	r0, [sp, #12]
 802461e:	f000 ffa1 	bl	8025564 <__i2b>
 8024622:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024624:	0006      	movs	r6, r0
 8024626:	2b00      	cmp	r3, #0
 8024628:	d100      	bne.n	802462c <_dtoa_r+0x824>
 802462a:	e1bc      	b.n	80249a6 <_dtoa_r+0xb9e>
 802462c:	001a      	movs	r2, r3
 802462e:	0001      	movs	r1, r0
 8024630:	9803      	ldr	r0, [sp, #12]
 8024632:	f001 f861 	bl	80256f8 <__pow5mult>
 8024636:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024638:	0006      	movs	r6, r0
 802463a:	2500      	movs	r5, #0
 802463c:	2b01      	cmp	r3, #1
 802463e:	dc16      	bgt.n	802466e <_dtoa_r+0x866>
 8024640:	2500      	movs	r5, #0
 8024642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024644:	42ab      	cmp	r3, r5
 8024646:	d10e      	bne.n	8024666 <_dtoa_r+0x85e>
 8024648:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802464a:	031b      	lsls	r3, r3, #12
 802464c:	42ab      	cmp	r3, r5
 802464e:	d10a      	bne.n	8024666 <_dtoa_r+0x85e>
 8024650:	4b8d      	ldr	r3, [pc, #564]	@ (8024888 <_dtoa_r+0xa80>)
 8024652:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024654:	4213      	tst	r3, r2
 8024656:	d006      	beq.n	8024666 <_dtoa_r+0x85e>
 8024658:	9b06      	ldr	r3, [sp, #24]
 802465a:	3501      	adds	r5, #1
 802465c:	3301      	adds	r3, #1
 802465e:	9306      	str	r3, [sp, #24]
 8024660:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024662:	3301      	adds	r3, #1
 8024664:	930d      	str	r3, [sp, #52]	@ 0x34
 8024666:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024668:	2001      	movs	r0, #1
 802466a:	2b00      	cmp	r3, #0
 802466c:	d008      	beq.n	8024680 <_dtoa_r+0x878>
 802466e:	6933      	ldr	r3, [r6, #16]
 8024670:	3303      	adds	r3, #3
 8024672:	009b      	lsls	r3, r3, #2
 8024674:	18f3      	adds	r3, r6, r3
 8024676:	6858      	ldr	r0, [r3, #4]
 8024678:	f000 ff24 	bl	80254c4 <__hi0bits>
 802467c:	2320      	movs	r3, #32
 802467e:	1a18      	subs	r0, r3, r0
 8024680:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024682:	1818      	adds	r0, r3, r0
 8024684:	0002      	movs	r2, r0
 8024686:	231f      	movs	r3, #31
 8024688:	401a      	ands	r2, r3
 802468a:	4218      	tst	r0, r3
 802468c:	d065      	beq.n	802475a <_dtoa_r+0x952>
 802468e:	3301      	adds	r3, #1
 8024690:	1a9b      	subs	r3, r3, r2
 8024692:	2b04      	cmp	r3, #4
 8024694:	dd5d      	ble.n	8024752 <_dtoa_r+0x94a>
 8024696:	231c      	movs	r3, #28
 8024698:	1a9b      	subs	r3, r3, r2
 802469a:	9a06      	ldr	r2, [sp, #24]
 802469c:	18e4      	adds	r4, r4, r3
 802469e:	18d2      	adds	r2, r2, r3
 80246a0:	9206      	str	r2, [sp, #24]
 80246a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80246a4:	18d3      	adds	r3, r2, r3
 80246a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80246a8:	9b06      	ldr	r3, [sp, #24]
 80246aa:	2b00      	cmp	r3, #0
 80246ac:	dd05      	ble.n	80246ba <_dtoa_r+0x8b2>
 80246ae:	001a      	movs	r2, r3
 80246b0:	9905      	ldr	r1, [sp, #20]
 80246b2:	9803      	ldr	r0, [sp, #12]
 80246b4:	f001 f87c 	bl	80257b0 <__lshift>
 80246b8:	9005      	str	r0, [sp, #20]
 80246ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80246bc:	2b00      	cmp	r3, #0
 80246be:	dd05      	ble.n	80246cc <_dtoa_r+0x8c4>
 80246c0:	0031      	movs	r1, r6
 80246c2:	001a      	movs	r2, r3
 80246c4:	9803      	ldr	r0, [sp, #12]
 80246c6:	f001 f873 	bl	80257b0 <__lshift>
 80246ca:	0006      	movs	r6, r0
 80246cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80246ce:	2b00      	cmp	r3, #0
 80246d0:	d045      	beq.n	802475e <_dtoa_r+0x956>
 80246d2:	0031      	movs	r1, r6
 80246d4:	9805      	ldr	r0, [sp, #20]
 80246d6:	f001 f8d7 	bl	8025888 <__mcmp>
 80246da:	2800      	cmp	r0, #0
 80246dc:	da3f      	bge.n	802475e <_dtoa_r+0x956>
 80246de:	9b04      	ldr	r3, [sp, #16]
 80246e0:	220a      	movs	r2, #10
 80246e2:	3b01      	subs	r3, #1
 80246e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80246e6:	9905      	ldr	r1, [sp, #20]
 80246e8:	2300      	movs	r3, #0
 80246ea:	9803      	ldr	r0, [sp, #12]
 80246ec:	f000 fe5a 	bl	80253a4 <__multadd>
 80246f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80246f2:	9005      	str	r0, [sp, #20]
 80246f4:	2b00      	cmp	r3, #0
 80246f6:	d100      	bne.n	80246fa <_dtoa_r+0x8f2>
 80246f8:	e15c      	b.n	80249b4 <_dtoa_r+0xbac>
 80246fa:	2300      	movs	r3, #0
 80246fc:	0039      	movs	r1, r7
 80246fe:	220a      	movs	r2, #10
 8024700:	9803      	ldr	r0, [sp, #12]
 8024702:	f000 fe4f 	bl	80253a4 <__multadd>
 8024706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024708:	0007      	movs	r7, r0
 802470a:	2b00      	cmp	r3, #0
 802470c:	dc55      	bgt.n	80247ba <_dtoa_r+0x9b2>
 802470e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024710:	2b02      	cmp	r3, #2
 8024712:	dc2d      	bgt.n	8024770 <_dtoa_r+0x968>
 8024714:	e051      	b.n	80247ba <_dtoa_r+0x9b2>
 8024716:	2336      	movs	r3, #54	@ 0x36
 8024718:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802471a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802471c:	9c06      	ldr	r4, [sp, #24]
 802471e:	1a9b      	subs	r3, r3, r2
 8024720:	e73c      	b.n	802459c <_dtoa_r+0x794>
 8024722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024724:	1e5d      	subs	r5, r3, #1
 8024726:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024728:	42ab      	cmp	r3, r5
 802472a:	db08      	blt.n	802473e <_dtoa_r+0x936>
 802472c:	1b5d      	subs	r5, r3, r5
 802472e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024730:	9c06      	ldr	r4, [sp, #24]
 8024732:	2b00      	cmp	r3, #0
 8024734:	db00      	blt.n	8024738 <_dtoa_r+0x930>
 8024736:	e731      	b.n	802459c <_dtoa_r+0x794>
 8024738:	1ae4      	subs	r4, r4, r3
 802473a:	2300      	movs	r3, #0
 802473c:	e72e      	b.n	802459c <_dtoa_r+0x794>
 802473e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024740:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024742:	1aeb      	subs	r3, r5, r3
 8024744:	18d3      	adds	r3, r2, r3
 8024746:	950f      	str	r5, [sp, #60]	@ 0x3c
 8024748:	9314      	str	r3, [sp, #80]	@ 0x50
 802474a:	2500      	movs	r5, #0
 802474c:	e7ef      	b.n	802472e <_dtoa_r+0x926>
 802474e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024750:	e75e      	b.n	8024610 <_dtoa_r+0x808>
 8024752:	2b04      	cmp	r3, #4
 8024754:	d0a8      	beq.n	80246a8 <_dtoa_r+0x8a0>
 8024756:	331c      	adds	r3, #28
 8024758:	e79f      	b.n	802469a <_dtoa_r+0x892>
 802475a:	0013      	movs	r3, r2
 802475c:	e7fb      	b.n	8024756 <_dtoa_r+0x94e>
 802475e:	9b04      	ldr	r3, [sp, #16]
 8024760:	930c      	str	r3, [sp, #48]	@ 0x30
 8024762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024764:	930e      	str	r3, [sp, #56]	@ 0x38
 8024766:	2b00      	cmp	r3, #0
 8024768:	dc23      	bgt.n	80247b2 <_dtoa_r+0x9aa>
 802476a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802476c:	2b02      	cmp	r3, #2
 802476e:	dd20      	ble.n	80247b2 <_dtoa_r+0x9aa>
 8024770:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024772:	2b00      	cmp	r3, #0
 8024774:	d000      	beq.n	8024778 <_dtoa_r+0x970>
 8024776:	e6b5      	b.n	80244e4 <_dtoa_r+0x6dc>
 8024778:	0031      	movs	r1, r6
 802477a:	2205      	movs	r2, #5
 802477c:	9803      	ldr	r0, [sp, #12]
 802477e:	f000 fe11 	bl	80253a4 <__multadd>
 8024782:	0006      	movs	r6, r0
 8024784:	0001      	movs	r1, r0
 8024786:	9805      	ldr	r0, [sp, #20]
 8024788:	f001 f87e 	bl	8025888 <__mcmp>
 802478c:	2800      	cmp	r0, #0
 802478e:	dc00      	bgt.n	8024792 <_dtoa_r+0x98a>
 8024790:	e6a8      	b.n	80244e4 <_dtoa_r+0x6dc>
 8024792:	9b08      	ldr	r3, [sp, #32]
 8024794:	9a08      	ldr	r2, [sp, #32]
 8024796:	1c5c      	adds	r4, r3, #1
 8024798:	2331      	movs	r3, #49	@ 0x31
 802479a:	7013      	strb	r3, [r2, #0]
 802479c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802479e:	3301      	adds	r3, #1
 80247a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80247a2:	e6a3      	b.n	80244ec <_dtoa_r+0x6e4>
 80247a4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80247a6:	0037      	movs	r7, r6
 80247a8:	e7f3      	b.n	8024792 <_dtoa_r+0x98a>
 80247aa:	9b04      	ldr	r3, [sp, #16]
 80247ac:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80247ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80247b0:	e7f9      	b.n	80247a6 <_dtoa_r+0x99e>
 80247b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80247b4:	2b00      	cmp	r3, #0
 80247b6:	d100      	bne.n	80247ba <_dtoa_r+0x9b2>
 80247b8:	e100      	b.n	80249bc <_dtoa_r+0xbb4>
 80247ba:	2c00      	cmp	r4, #0
 80247bc:	dd05      	ble.n	80247ca <_dtoa_r+0x9c2>
 80247be:	0039      	movs	r1, r7
 80247c0:	0022      	movs	r2, r4
 80247c2:	9803      	ldr	r0, [sp, #12]
 80247c4:	f000 fff4 	bl	80257b0 <__lshift>
 80247c8:	0007      	movs	r7, r0
 80247ca:	0038      	movs	r0, r7
 80247cc:	2d00      	cmp	r5, #0
 80247ce:	d018      	beq.n	8024802 <_dtoa_r+0x9fa>
 80247d0:	6879      	ldr	r1, [r7, #4]
 80247d2:	9803      	ldr	r0, [sp, #12]
 80247d4:	f000 fd7e 	bl	80252d4 <_Balloc>
 80247d8:	1e04      	subs	r4, r0, #0
 80247da:	d105      	bne.n	80247e8 <_dtoa_r+0x9e0>
 80247dc:	0022      	movs	r2, r4
 80247de:	4b2b      	ldr	r3, [pc, #172]	@ (802488c <_dtoa_r+0xa84>)
 80247e0:	482b      	ldr	r0, [pc, #172]	@ (8024890 <_dtoa_r+0xa88>)
 80247e2:	492c      	ldr	r1, [pc, #176]	@ (8024894 <_dtoa_r+0xa8c>)
 80247e4:	f7ff fb25 	bl	8023e32 <_dtoa_r+0x2a>
 80247e8:	0039      	movs	r1, r7
 80247ea:	693a      	ldr	r2, [r7, #16]
 80247ec:	310c      	adds	r1, #12
 80247ee:	3202      	adds	r2, #2
 80247f0:	0092      	lsls	r2, r2, #2
 80247f2:	300c      	adds	r0, #12
 80247f4:	f7ff fa6a 	bl	8023ccc <memcpy>
 80247f8:	2201      	movs	r2, #1
 80247fa:	0021      	movs	r1, r4
 80247fc:	9803      	ldr	r0, [sp, #12]
 80247fe:	f000 ffd7 	bl	80257b0 <__lshift>
 8024802:	9b08      	ldr	r3, [sp, #32]
 8024804:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024806:	9306      	str	r3, [sp, #24]
 8024808:	3b01      	subs	r3, #1
 802480a:	189b      	adds	r3, r3, r2
 802480c:	2201      	movs	r2, #1
 802480e:	9704      	str	r7, [sp, #16]
 8024810:	0007      	movs	r7, r0
 8024812:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024814:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024816:	4013      	ands	r3, r2
 8024818:	930e      	str	r3, [sp, #56]	@ 0x38
 802481a:	0031      	movs	r1, r6
 802481c:	9805      	ldr	r0, [sp, #20]
 802481e:	f7ff fa65 	bl	8023cec <quorem>
 8024822:	9904      	ldr	r1, [sp, #16]
 8024824:	0005      	movs	r5, r0
 8024826:	900a      	str	r0, [sp, #40]	@ 0x28
 8024828:	9805      	ldr	r0, [sp, #20]
 802482a:	f001 f82d 	bl	8025888 <__mcmp>
 802482e:	003a      	movs	r2, r7
 8024830:	900d      	str	r0, [sp, #52]	@ 0x34
 8024832:	0031      	movs	r1, r6
 8024834:	9803      	ldr	r0, [sp, #12]
 8024836:	f001 f843 	bl	80258c0 <__mdiff>
 802483a:	2201      	movs	r2, #1
 802483c:	68c3      	ldr	r3, [r0, #12]
 802483e:	0004      	movs	r4, r0
 8024840:	3530      	adds	r5, #48	@ 0x30
 8024842:	9209      	str	r2, [sp, #36]	@ 0x24
 8024844:	2b00      	cmp	r3, #0
 8024846:	d104      	bne.n	8024852 <_dtoa_r+0xa4a>
 8024848:	0001      	movs	r1, r0
 802484a:	9805      	ldr	r0, [sp, #20]
 802484c:	f001 f81c 	bl	8025888 <__mcmp>
 8024850:	9009      	str	r0, [sp, #36]	@ 0x24
 8024852:	0021      	movs	r1, r4
 8024854:	9803      	ldr	r0, [sp, #12]
 8024856:	f000 fd81 	bl	802535c <_Bfree>
 802485a:	9b06      	ldr	r3, [sp, #24]
 802485c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802485e:	1c5c      	adds	r4, r3, #1
 8024860:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024862:	4313      	orrs	r3, r2
 8024864:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024866:	4313      	orrs	r3, r2
 8024868:	d116      	bne.n	8024898 <_dtoa_r+0xa90>
 802486a:	2d39      	cmp	r5, #57	@ 0x39
 802486c:	d02f      	beq.n	80248ce <_dtoa_r+0xac6>
 802486e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024870:	2b00      	cmp	r3, #0
 8024872:	dd01      	ble.n	8024878 <_dtoa_r+0xa70>
 8024874:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8024876:	3531      	adds	r5, #49	@ 0x31
 8024878:	9b06      	ldr	r3, [sp, #24]
 802487a:	701d      	strb	r5, [r3, #0]
 802487c:	e638      	b.n	80244f0 <_dtoa_r+0x6e8>
 802487e:	46c0      	nop			@ (mov r8, r8)
 8024880:	40240000 	.word	0x40240000
 8024884:	00000433 	.word	0x00000433
 8024888:	7ff00000 	.word	0x7ff00000
 802488c:	0802b9b9 	.word	0x0802b9b9
 8024890:	0802b961 	.word	0x0802b961
 8024894:	000002ef 	.word	0x000002ef
 8024898:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802489a:	2b00      	cmp	r3, #0
 802489c:	db04      	blt.n	80248a8 <_dtoa_r+0xaa0>
 802489e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80248a0:	4313      	orrs	r3, r2
 80248a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80248a4:	4313      	orrs	r3, r2
 80248a6:	d11e      	bne.n	80248e6 <_dtoa_r+0xade>
 80248a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248aa:	2b00      	cmp	r3, #0
 80248ac:	dde4      	ble.n	8024878 <_dtoa_r+0xa70>
 80248ae:	9905      	ldr	r1, [sp, #20]
 80248b0:	2201      	movs	r2, #1
 80248b2:	9803      	ldr	r0, [sp, #12]
 80248b4:	f000 ff7c 	bl	80257b0 <__lshift>
 80248b8:	0031      	movs	r1, r6
 80248ba:	9005      	str	r0, [sp, #20]
 80248bc:	f000 ffe4 	bl	8025888 <__mcmp>
 80248c0:	2800      	cmp	r0, #0
 80248c2:	dc02      	bgt.n	80248ca <_dtoa_r+0xac2>
 80248c4:	d1d8      	bne.n	8024878 <_dtoa_r+0xa70>
 80248c6:	07eb      	lsls	r3, r5, #31
 80248c8:	d5d6      	bpl.n	8024878 <_dtoa_r+0xa70>
 80248ca:	2d39      	cmp	r5, #57	@ 0x39
 80248cc:	d1d2      	bne.n	8024874 <_dtoa_r+0xa6c>
 80248ce:	2339      	movs	r3, #57	@ 0x39
 80248d0:	9a06      	ldr	r2, [sp, #24]
 80248d2:	7013      	strb	r3, [r2, #0]
 80248d4:	0023      	movs	r3, r4
 80248d6:	001c      	movs	r4, r3
 80248d8:	3b01      	subs	r3, #1
 80248da:	781a      	ldrb	r2, [r3, #0]
 80248dc:	2a39      	cmp	r2, #57	@ 0x39
 80248de:	d04f      	beq.n	8024980 <_dtoa_r+0xb78>
 80248e0:	3201      	adds	r2, #1
 80248e2:	701a      	strb	r2, [r3, #0]
 80248e4:	e604      	b.n	80244f0 <_dtoa_r+0x6e8>
 80248e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248e8:	2b00      	cmp	r3, #0
 80248ea:	dd03      	ble.n	80248f4 <_dtoa_r+0xaec>
 80248ec:	2d39      	cmp	r5, #57	@ 0x39
 80248ee:	d0ee      	beq.n	80248ce <_dtoa_r+0xac6>
 80248f0:	3501      	adds	r5, #1
 80248f2:	e7c1      	b.n	8024878 <_dtoa_r+0xa70>
 80248f4:	9b06      	ldr	r3, [sp, #24]
 80248f6:	9a06      	ldr	r2, [sp, #24]
 80248f8:	701d      	strb	r5, [r3, #0]
 80248fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80248fc:	4293      	cmp	r3, r2
 80248fe:	d02a      	beq.n	8024956 <_dtoa_r+0xb4e>
 8024900:	2300      	movs	r3, #0
 8024902:	220a      	movs	r2, #10
 8024904:	9905      	ldr	r1, [sp, #20]
 8024906:	9803      	ldr	r0, [sp, #12]
 8024908:	f000 fd4c 	bl	80253a4 <__multadd>
 802490c:	9b04      	ldr	r3, [sp, #16]
 802490e:	9005      	str	r0, [sp, #20]
 8024910:	42bb      	cmp	r3, r7
 8024912:	d109      	bne.n	8024928 <_dtoa_r+0xb20>
 8024914:	2300      	movs	r3, #0
 8024916:	220a      	movs	r2, #10
 8024918:	9904      	ldr	r1, [sp, #16]
 802491a:	9803      	ldr	r0, [sp, #12]
 802491c:	f000 fd42 	bl	80253a4 <__multadd>
 8024920:	9004      	str	r0, [sp, #16]
 8024922:	0007      	movs	r7, r0
 8024924:	9406      	str	r4, [sp, #24]
 8024926:	e778      	b.n	802481a <_dtoa_r+0xa12>
 8024928:	9904      	ldr	r1, [sp, #16]
 802492a:	2300      	movs	r3, #0
 802492c:	220a      	movs	r2, #10
 802492e:	9803      	ldr	r0, [sp, #12]
 8024930:	f000 fd38 	bl	80253a4 <__multadd>
 8024934:	2300      	movs	r3, #0
 8024936:	9004      	str	r0, [sp, #16]
 8024938:	220a      	movs	r2, #10
 802493a:	0039      	movs	r1, r7
 802493c:	9803      	ldr	r0, [sp, #12]
 802493e:	f000 fd31 	bl	80253a4 <__multadd>
 8024942:	e7ee      	b.n	8024922 <_dtoa_r+0xb1a>
 8024944:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024946:	2401      	movs	r4, #1
 8024948:	2b00      	cmp	r3, #0
 802494a:	dd00      	ble.n	802494e <_dtoa_r+0xb46>
 802494c:	001c      	movs	r4, r3
 802494e:	9b08      	ldr	r3, [sp, #32]
 8024950:	191c      	adds	r4, r3, r4
 8024952:	2300      	movs	r3, #0
 8024954:	9304      	str	r3, [sp, #16]
 8024956:	9905      	ldr	r1, [sp, #20]
 8024958:	2201      	movs	r2, #1
 802495a:	9803      	ldr	r0, [sp, #12]
 802495c:	f000 ff28 	bl	80257b0 <__lshift>
 8024960:	0031      	movs	r1, r6
 8024962:	9005      	str	r0, [sp, #20]
 8024964:	f000 ff90 	bl	8025888 <__mcmp>
 8024968:	2800      	cmp	r0, #0
 802496a:	dcb3      	bgt.n	80248d4 <_dtoa_r+0xacc>
 802496c:	d101      	bne.n	8024972 <_dtoa_r+0xb6a>
 802496e:	07ed      	lsls	r5, r5, #31
 8024970:	d4b0      	bmi.n	80248d4 <_dtoa_r+0xacc>
 8024972:	0023      	movs	r3, r4
 8024974:	001c      	movs	r4, r3
 8024976:	3b01      	subs	r3, #1
 8024978:	781a      	ldrb	r2, [r3, #0]
 802497a:	2a30      	cmp	r2, #48	@ 0x30
 802497c:	d0fa      	beq.n	8024974 <_dtoa_r+0xb6c>
 802497e:	e5b7      	b.n	80244f0 <_dtoa_r+0x6e8>
 8024980:	9a08      	ldr	r2, [sp, #32]
 8024982:	429a      	cmp	r2, r3
 8024984:	d1a7      	bne.n	80248d6 <_dtoa_r+0xace>
 8024986:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024988:	3301      	adds	r3, #1
 802498a:	930c      	str	r3, [sp, #48]	@ 0x30
 802498c:	2331      	movs	r3, #49	@ 0x31
 802498e:	7013      	strb	r3, [r2, #0]
 8024990:	e5ae      	b.n	80244f0 <_dtoa_r+0x6e8>
 8024992:	4b15      	ldr	r3, [pc, #84]	@ (80249e8 <_dtoa_r+0xbe0>)
 8024994:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8024996:	9308      	str	r3, [sp, #32]
 8024998:	4b14      	ldr	r3, [pc, #80]	@ (80249ec <_dtoa_r+0xbe4>)
 802499a:	2a00      	cmp	r2, #0
 802499c:	d001      	beq.n	80249a2 <_dtoa_r+0xb9a>
 802499e:	f7ff fa7b 	bl	8023e98 <_dtoa_r+0x90>
 80249a2:	f7ff fa7b 	bl	8023e9c <_dtoa_r+0x94>
 80249a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80249a8:	2b01      	cmp	r3, #1
 80249aa:	dc00      	bgt.n	80249ae <_dtoa_r+0xba6>
 80249ac:	e648      	b.n	8024640 <_dtoa_r+0x838>
 80249ae:	2001      	movs	r0, #1
 80249b0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80249b2:	e665      	b.n	8024680 <_dtoa_r+0x878>
 80249b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80249b6:	2b00      	cmp	r3, #0
 80249b8:	dc00      	bgt.n	80249bc <_dtoa_r+0xbb4>
 80249ba:	e6d6      	b.n	802476a <_dtoa_r+0x962>
 80249bc:	2400      	movs	r4, #0
 80249be:	0031      	movs	r1, r6
 80249c0:	9805      	ldr	r0, [sp, #20]
 80249c2:	f7ff f993 	bl	8023cec <quorem>
 80249c6:	9b08      	ldr	r3, [sp, #32]
 80249c8:	3030      	adds	r0, #48	@ 0x30
 80249ca:	5518      	strb	r0, [r3, r4]
 80249cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80249ce:	3401      	adds	r4, #1
 80249d0:	0005      	movs	r5, r0
 80249d2:	429c      	cmp	r4, r3
 80249d4:	dab6      	bge.n	8024944 <_dtoa_r+0xb3c>
 80249d6:	2300      	movs	r3, #0
 80249d8:	220a      	movs	r2, #10
 80249da:	9905      	ldr	r1, [sp, #20]
 80249dc:	9803      	ldr	r0, [sp, #12]
 80249de:	f000 fce1 	bl	80253a4 <__multadd>
 80249e2:	9005      	str	r0, [sp, #20]
 80249e4:	e7eb      	b.n	80249be <_dtoa_r+0xbb6>
 80249e6:	46c0      	nop			@ (mov r8, r8)
 80249e8:	0802b93d 	.word	0x0802b93d
 80249ec:	0802b945 	.word	0x0802b945

080249f0 <_free_r>:
 80249f0:	b570      	push	{r4, r5, r6, lr}
 80249f2:	0005      	movs	r5, r0
 80249f4:	1e0c      	subs	r4, r1, #0
 80249f6:	d010      	beq.n	8024a1a <_free_r+0x2a>
 80249f8:	3c04      	subs	r4, #4
 80249fa:	6823      	ldr	r3, [r4, #0]
 80249fc:	2b00      	cmp	r3, #0
 80249fe:	da00      	bge.n	8024a02 <_free_r+0x12>
 8024a00:	18e4      	adds	r4, r4, r3
 8024a02:	0028      	movs	r0, r5
 8024a04:	f000 fc56 	bl	80252b4 <__malloc_lock>
 8024a08:	4a1d      	ldr	r2, [pc, #116]	@ (8024a80 <_free_r+0x90>)
 8024a0a:	6813      	ldr	r3, [r2, #0]
 8024a0c:	2b00      	cmp	r3, #0
 8024a0e:	d105      	bne.n	8024a1c <_free_r+0x2c>
 8024a10:	6063      	str	r3, [r4, #4]
 8024a12:	6014      	str	r4, [r2, #0]
 8024a14:	0028      	movs	r0, r5
 8024a16:	f000 fc55 	bl	80252c4 <__malloc_unlock>
 8024a1a:	bd70      	pop	{r4, r5, r6, pc}
 8024a1c:	42a3      	cmp	r3, r4
 8024a1e:	d908      	bls.n	8024a32 <_free_r+0x42>
 8024a20:	6820      	ldr	r0, [r4, #0]
 8024a22:	1821      	adds	r1, r4, r0
 8024a24:	428b      	cmp	r3, r1
 8024a26:	d1f3      	bne.n	8024a10 <_free_r+0x20>
 8024a28:	6819      	ldr	r1, [r3, #0]
 8024a2a:	685b      	ldr	r3, [r3, #4]
 8024a2c:	1809      	adds	r1, r1, r0
 8024a2e:	6021      	str	r1, [r4, #0]
 8024a30:	e7ee      	b.n	8024a10 <_free_r+0x20>
 8024a32:	001a      	movs	r2, r3
 8024a34:	685b      	ldr	r3, [r3, #4]
 8024a36:	2b00      	cmp	r3, #0
 8024a38:	d001      	beq.n	8024a3e <_free_r+0x4e>
 8024a3a:	42a3      	cmp	r3, r4
 8024a3c:	d9f9      	bls.n	8024a32 <_free_r+0x42>
 8024a3e:	6811      	ldr	r1, [r2, #0]
 8024a40:	1850      	adds	r0, r2, r1
 8024a42:	42a0      	cmp	r0, r4
 8024a44:	d10b      	bne.n	8024a5e <_free_r+0x6e>
 8024a46:	6820      	ldr	r0, [r4, #0]
 8024a48:	1809      	adds	r1, r1, r0
 8024a4a:	1850      	adds	r0, r2, r1
 8024a4c:	6011      	str	r1, [r2, #0]
 8024a4e:	4283      	cmp	r3, r0
 8024a50:	d1e0      	bne.n	8024a14 <_free_r+0x24>
 8024a52:	6818      	ldr	r0, [r3, #0]
 8024a54:	685b      	ldr	r3, [r3, #4]
 8024a56:	1841      	adds	r1, r0, r1
 8024a58:	6011      	str	r1, [r2, #0]
 8024a5a:	6053      	str	r3, [r2, #4]
 8024a5c:	e7da      	b.n	8024a14 <_free_r+0x24>
 8024a5e:	42a0      	cmp	r0, r4
 8024a60:	d902      	bls.n	8024a68 <_free_r+0x78>
 8024a62:	230c      	movs	r3, #12
 8024a64:	602b      	str	r3, [r5, #0]
 8024a66:	e7d5      	b.n	8024a14 <_free_r+0x24>
 8024a68:	6820      	ldr	r0, [r4, #0]
 8024a6a:	1821      	adds	r1, r4, r0
 8024a6c:	428b      	cmp	r3, r1
 8024a6e:	d103      	bne.n	8024a78 <_free_r+0x88>
 8024a70:	6819      	ldr	r1, [r3, #0]
 8024a72:	685b      	ldr	r3, [r3, #4]
 8024a74:	1809      	adds	r1, r1, r0
 8024a76:	6021      	str	r1, [r4, #0]
 8024a78:	6063      	str	r3, [r4, #4]
 8024a7a:	6054      	str	r4, [r2, #4]
 8024a7c:	e7ca      	b.n	8024a14 <_free_r+0x24>
 8024a7e:	46c0      	nop			@ (mov r8, r8)
 8024a80:	200035ec 	.word	0x200035ec

08024a84 <rshift>:
 8024a84:	0002      	movs	r2, r0
 8024a86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a88:	6904      	ldr	r4, [r0, #16]
 8024a8a:	b085      	sub	sp, #20
 8024a8c:	3214      	adds	r2, #20
 8024a8e:	114b      	asrs	r3, r1, #5
 8024a90:	0016      	movs	r6, r2
 8024a92:	9302      	str	r3, [sp, #8]
 8024a94:	429c      	cmp	r4, r3
 8024a96:	dd31      	ble.n	8024afc <rshift+0x78>
 8024a98:	261f      	movs	r6, #31
 8024a9a:	000f      	movs	r7, r1
 8024a9c:	009b      	lsls	r3, r3, #2
 8024a9e:	00a5      	lsls	r5, r4, #2
 8024aa0:	18d3      	adds	r3, r2, r3
 8024aa2:	4037      	ands	r7, r6
 8024aa4:	1955      	adds	r5, r2, r5
 8024aa6:	9300      	str	r3, [sp, #0]
 8024aa8:	9701      	str	r7, [sp, #4]
 8024aaa:	4231      	tst	r1, r6
 8024aac:	d10d      	bne.n	8024aca <rshift+0x46>
 8024aae:	0016      	movs	r6, r2
 8024ab0:	0019      	movs	r1, r3
 8024ab2:	428d      	cmp	r5, r1
 8024ab4:	d836      	bhi.n	8024b24 <rshift+0xa0>
 8024ab6:	9b00      	ldr	r3, [sp, #0]
 8024ab8:	2600      	movs	r6, #0
 8024aba:	3b03      	subs	r3, #3
 8024abc:	429d      	cmp	r5, r3
 8024abe:	d302      	bcc.n	8024ac6 <rshift+0x42>
 8024ac0:	9b02      	ldr	r3, [sp, #8]
 8024ac2:	1ae4      	subs	r4, r4, r3
 8024ac4:	00a6      	lsls	r6, r4, #2
 8024ac6:	1996      	adds	r6, r2, r6
 8024ac8:	e018      	b.n	8024afc <rshift+0x78>
 8024aca:	2120      	movs	r1, #32
 8024acc:	9e01      	ldr	r6, [sp, #4]
 8024ace:	9f01      	ldr	r7, [sp, #4]
 8024ad0:	1b89      	subs	r1, r1, r6
 8024ad2:	9e00      	ldr	r6, [sp, #0]
 8024ad4:	9103      	str	r1, [sp, #12]
 8024ad6:	ce02      	ldmia	r6!, {r1}
 8024ad8:	4694      	mov	ip, r2
 8024ada:	40f9      	lsrs	r1, r7
 8024adc:	42b5      	cmp	r5, r6
 8024ade:	d816      	bhi.n	8024b0e <rshift+0x8a>
 8024ae0:	9b00      	ldr	r3, [sp, #0]
 8024ae2:	2600      	movs	r6, #0
 8024ae4:	3301      	adds	r3, #1
 8024ae6:	429d      	cmp	r5, r3
 8024ae8:	d303      	bcc.n	8024af2 <rshift+0x6e>
 8024aea:	9b02      	ldr	r3, [sp, #8]
 8024aec:	1ae4      	subs	r4, r4, r3
 8024aee:	00a6      	lsls	r6, r4, #2
 8024af0:	3e04      	subs	r6, #4
 8024af2:	1996      	adds	r6, r2, r6
 8024af4:	6031      	str	r1, [r6, #0]
 8024af6:	2900      	cmp	r1, #0
 8024af8:	d000      	beq.n	8024afc <rshift+0x78>
 8024afa:	3604      	adds	r6, #4
 8024afc:	1ab1      	subs	r1, r6, r2
 8024afe:	1089      	asrs	r1, r1, #2
 8024b00:	6101      	str	r1, [r0, #16]
 8024b02:	4296      	cmp	r6, r2
 8024b04:	d101      	bne.n	8024b0a <rshift+0x86>
 8024b06:	2300      	movs	r3, #0
 8024b08:	6143      	str	r3, [r0, #20]
 8024b0a:	b005      	add	sp, #20
 8024b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b0e:	6837      	ldr	r7, [r6, #0]
 8024b10:	9b03      	ldr	r3, [sp, #12]
 8024b12:	409f      	lsls	r7, r3
 8024b14:	430f      	orrs	r7, r1
 8024b16:	4661      	mov	r1, ip
 8024b18:	c180      	stmia	r1!, {r7}
 8024b1a:	468c      	mov	ip, r1
 8024b1c:	9b01      	ldr	r3, [sp, #4]
 8024b1e:	ce02      	ldmia	r6!, {r1}
 8024b20:	40d9      	lsrs	r1, r3
 8024b22:	e7db      	b.n	8024adc <rshift+0x58>
 8024b24:	c980      	ldmia	r1!, {r7}
 8024b26:	c680      	stmia	r6!, {r7}
 8024b28:	e7c3      	b.n	8024ab2 <rshift+0x2e>

08024b2a <__hexdig_fun>:
 8024b2a:	0002      	movs	r2, r0
 8024b2c:	3a30      	subs	r2, #48	@ 0x30
 8024b2e:	0003      	movs	r3, r0
 8024b30:	2a09      	cmp	r2, #9
 8024b32:	d802      	bhi.n	8024b3a <__hexdig_fun+0x10>
 8024b34:	3b20      	subs	r3, #32
 8024b36:	b2d8      	uxtb	r0, r3
 8024b38:	4770      	bx	lr
 8024b3a:	0002      	movs	r2, r0
 8024b3c:	3a61      	subs	r2, #97	@ 0x61
 8024b3e:	2a05      	cmp	r2, #5
 8024b40:	d801      	bhi.n	8024b46 <__hexdig_fun+0x1c>
 8024b42:	3b47      	subs	r3, #71	@ 0x47
 8024b44:	e7f7      	b.n	8024b36 <__hexdig_fun+0xc>
 8024b46:	001a      	movs	r2, r3
 8024b48:	3a41      	subs	r2, #65	@ 0x41
 8024b4a:	2000      	movs	r0, #0
 8024b4c:	2a05      	cmp	r2, #5
 8024b4e:	d8f3      	bhi.n	8024b38 <__hexdig_fun+0xe>
 8024b50:	3b27      	subs	r3, #39	@ 0x27
 8024b52:	e7f0      	b.n	8024b36 <__hexdig_fun+0xc>

08024b54 <__gethex>:
 8024b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b56:	b089      	sub	sp, #36	@ 0x24
 8024b58:	9307      	str	r3, [sp, #28]
 8024b5a:	680b      	ldr	r3, [r1, #0]
 8024b5c:	9201      	str	r2, [sp, #4]
 8024b5e:	9003      	str	r0, [sp, #12]
 8024b60:	9106      	str	r1, [sp, #24]
 8024b62:	1c9a      	adds	r2, r3, #2
 8024b64:	0011      	movs	r1, r2
 8024b66:	3201      	adds	r2, #1
 8024b68:	1e50      	subs	r0, r2, #1
 8024b6a:	7800      	ldrb	r0, [r0, #0]
 8024b6c:	2830      	cmp	r0, #48	@ 0x30
 8024b6e:	d0f9      	beq.n	8024b64 <__gethex+0x10>
 8024b70:	1acb      	subs	r3, r1, r3
 8024b72:	3b02      	subs	r3, #2
 8024b74:	9305      	str	r3, [sp, #20]
 8024b76:	9100      	str	r1, [sp, #0]
 8024b78:	f7ff ffd7 	bl	8024b2a <__hexdig_fun>
 8024b7c:	2300      	movs	r3, #0
 8024b7e:	001d      	movs	r5, r3
 8024b80:	9302      	str	r3, [sp, #8]
 8024b82:	4298      	cmp	r0, r3
 8024b84:	d11e      	bne.n	8024bc4 <__gethex+0x70>
 8024b86:	2201      	movs	r2, #1
 8024b88:	49a6      	ldr	r1, [pc, #664]	@ (8024e24 <__gethex+0x2d0>)
 8024b8a:	9800      	ldr	r0, [sp, #0]
 8024b8c:	f7fe ffd8 	bl	8023b40 <strncmp>
 8024b90:	0007      	movs	r7, r0
 8024b92:	42a8      	cmp	r0, r5
 8024b94:	d000      	beq.n	8024b98 <__gethex+0x44>
 8024b96:	e06a      	b.n	8024c6e <__gethex+0x11a>
 8024b98:	9b00      	ldr	r3, [sp, #0]
 8024b9a:	7858      	ldrb	r0, [r3, #1]
 8024b9c:	1c5c      	adds	r4, r3, #1
 8024b9e:	f7ff ffc4 	bl	8024b2a <__hexdig_fun>
 8024ba2:	2301      	movs	r3, #1
 8024ba4:	9302      	str	r3, [sp, #8]
 8024ba6:	42a8      	cmp	r0, r5
 8024ba8:	d02f      	beq.n	8024c0a <__gethex+0xb6>
 8024baa:	9400      	str	r4, [sp, #0]
 8024bac:	9b00      	ldr	r3, [sp, #0]
 8024bae:	7818      	ldrb	r0, [r3, #0]
 8024bb0:	2830      	cmp	r0, #48	@ 0x30
 8024bb2:	d009      	beq.n	8024bc8 <__gethex+0x74>
 8024bb4:	f7ff ffb9 	bl	8024b2a <__hexdig_fun>
 8024bb8:	4242      	negs	r2, r0
 8024bba:	4142      	adcs	r2, r0
 8024bbc:	2301      	movs	r3, #1
 8024bbe:	0025      	movs	r5, r4
 8024bc0:	9202      	str	r2, [sp, #8]
 8024bc2:	9305      	str	r3, [sp, #20]
 8024bc4:	9c00      	ldr	r4, [sp, #0]
 8024bc6:	e004      	b.n	8024bd2 <__gethex+0x7e>
 8024bc8:	9b00      	ldr	r3, [sp, #0]
 8024bca:	3301      	adds	r3, #1
 8024bcc:	9300      	str	r3, [sp, #0]
 8024bce:	e7ed      	b.n	8024bac <__gethex+0x58>
 8024bd0:	3401      	adds	r4, #1
 8024bd2:	7820      	ldrb	r0, [r4, #0]
 8024bd4:	f7ff ffa9 	bl	8024b2a <__hexdig_fun>
 8024bd8:	1e07      	subs	r7, r0, #0
 8024bda:	d1f9      	bne.n	8024bd0 <__gethex+0x7c>
 8024bdc:	2201      	movs	r2, #1
 8024bde:	0020      	movs	r0, r4
 8024be0:	4990      	ldr	r1, [pc, #576]	@ (8024e24 <__gethex+0x2d0>)
 8024be2:	f7fe ffad 	bl	8023b40 <strncmp>
 8024be6:	2800      	cmp	r0, #0
 8024be8:	d10d      	bne.n	8024c06 <__gethex+0xb2>
 8024bea:	2d00      	cmp	r5, #0
 8024bec:	d106      	bne.n	8024bfc <__gethex+0xa8>
 8024bee:	3401      	adds	r4, #1
 8024bf0:	0025      	movs	r5, r4
 8024bf2:	7820      	ldrb	r0, [r4, #0]
 8024bf4:	f7ff ff99 	bl	8024b2a <__hexdig_fun>
 8024bf8:	2800      	cmp	r0, #0
 8024bfa:	d102      	bne.n	8024c02 <__gethex+0xae>
 8024bfc:	1b2d      	subs	r5, r5, r4
 8024bfe:	00af      	lsls	r7, r5, #2
 8024c00:	e003      	b.n	8024c0a <__gethex+0xb6>
 8024c02:	3401      	adds	r4, #1
 8024c04:	e7f5      	b.n	8024bf2 <__gethex+0x9e>
 8024c06:	2d00      	cmp	r5, #0
 8024c08:	d1f8      	bne.n	8024bfc <__gethex+0xa8>
 8024c0a:	2220      	movs	r2, #32
 8024c0c:	7823      	ldrb	r3, [r4, #0]
 8024c0e:	0026      	movs	r6, r4
 8024c10:	4393      	bics	r3, r2
 8024c12:	2b50      	cmp	r3, #80	@ 0x50
 8024c14:	d11d      	bne.n	8024c52 <__gethex+0xfe>
 8024c16:	7863      	ldrb	r3, [r4, #1]
 8024c18:	2b2b      	cmp	r3, #43	@ 0x2b
 8024c1a:	d02d      	beq.n	8024c78 <__gethex+0x124>
 8024c1c:	2b2d      	cmp	r3, #45	@ 0x2d
 8024c1e:	d02f      	beq.n	8024c80 <__gethex+0x12c>
 8024c20:	2300      	movs	r3, #0
 8024c22:	1c66      	adds	r6, r4, #1
 8024c24:	9304      	str	r3, [sp, #16]
 8024c26:	7830      	ldrb	r0, [r6, #0]
 8024c28:	f7ff ff7f 	bl	8024b2a <__hexdig_fun>
 8024c2c:	1e43      	subs	r3, r0, #1
 8024c2e:	b2db      	uxtb	r3, r3
 8024c30:	0005      	movs	r5, r0
 8024c32:	2b18      	cmp	r3, #24
 8024c34:	d82a      	bhi.n	8024c8c <__gethex+0x138>
 8024c36:	7870      	ldrb	r0, [r6, #1]
 8024c38:	f7ff ff77 	bl	8024b2a <__hexdig_fun>
 8024c3c:	1e43      	subs	r3, r0, #1
 8024c3e:	b2db      	uxtb	r3, r3
 8024c40:	3601      	adds	r6, #1
 8024c42:	3d10      	subs	r5, #16
 8024c44:	2b18      	cmp	r3, #24
 8024c46:	d91d      	bls.n	8024c84 <__gethex+0x130>
 8024c48:	9b04      	ldr	r3, [sp, #16]
 8024c4a:	2b00      	cmp	r3, #0
 8024c4c:	d000      	beq.n	8024c50 <__gethex+0xfc>
 8024c4e:	426d      	negs	r5, r5
 8024c50:	197f      	adds	r7, r7, r5
 8024c52:	9b06      	ldr	r3, [sp, #24]
 8024c54:	601e      	str	r6, [r3, #0]
 8024c56:	9b02      	ldr	r3, [sp, #8]
 8024c58:	2b00      	cmp	r3, #0
 8024c5a:	d019      	beq.n	8024c90 <__gethex+0x13c>
 8024c5c:	9b05      	ldr	r3, [sp, #20]
 8024c5e:	2606      	movs	r6, #6
 8024c60:	425a      	negs	r2, r3
 8024c62:	4153      	adcs	r3, r2
 8024c64:	425b      	negs	r3, r3
 8024c66:	401e      	ands	r6, r3
 8024c68:	0030      	movs	r0, r6
 8024c6a:	b009      	add	sp, #36	@ 0x24
 8024c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c6e:	2301      	movs	r3, #1
 8024c70:	2700      	movs	r7, #0
 8024c72:	9c00      	ldr	r4, [sp, #0]
 8024c74:	9302      	str	r3, [sp, #8]
 8024c76:	e7c8      	b.n	8024c0a <__gethex+0xb6>
 8024c78:	2300      	movs	r3, #0
 8024c7a:	9304      	str	r3, [sp, #16]
 8024c7c:	1ca6      	adds	r6, r4, #2
 8024c7e:	e7d2      	b.n	8024c26 <__gethex+0xd2>
 8024c80:	2301      	movs	r3, #1
 8024c82:	e7fa      	b.n	8024c7a <__gethex+0x126>
 8024c84:	230a      	movs	r3, #10
 8024c86:	435d      	muls	r5, r3
 8024c88:	182d      	adds	r5, r5, r0
 8024c8a:	e7d4      	b.n	8024c36 <__gethex+0xe2>
 8024c8c:	0026      	movs	r6, r4
 8024c8e:	e7e0      	b.n	8024c52 <__gethex+0xfe>
 8024c90:	9b00      	ldr	r3, [sp, #0]
 8024c92:	9902      	ldr	r1, [sp, #8]
 8024c94:	1ae3      	subs	r3, r4, r3
 8024c96:	3b01      	subs	r3, #1
 8024c98:	2b07      	cmp	r3, #7
 8024c9a:	dc0a      	bgt.n	8024cb2 <__gethex+0x15e>
 8024c9c:	9803      	ldr	r0, [sp, #12]
 8024c9e:	f000 fb19 	bl	80252d4 <_Balloc>
 8024ca2:	1e05      	subs	r5, r0, #0
 8024ca4:	d108      	bne.n	8024cb8 <__gethex+0x164>
 8024ca6:	002a      	movs	r2, r5
 8024ca8:	21e4      	movs	r1, #228	@ 0xe4
 8024caa:	4b5f      	ldr	r3, [pc, #380]	@ (8024e28 <__gethex+0x2d4>)
 8024cac:	485f      	ldr	r0, [pc, #380]	@ (8024e2c <__gethex+0x2d8>)
 8024cae:	f001 fbf1 	bl	8026494 <__assert_func>
 8024cb2:	3101      	adds	r1, #1
 8024cb4:	105b      	asrs	r3, r3, #1
 8024cb6:	e7ef      	b.n	8024c98 <__gethex+0x144>
 8024cb8:	0003      	movs	r3, r0
 8024cba:	3314      	adds	r3, #20
 8024cbc:	9302      	str	r3, [sp, #8]
 8024cbe:	9305      	str	r3, [sp, #20]
 8024cc0:	2300      	movs	r3, #0
 8024cc2:	001e      	movs	r6, r3
 8024cc4:	9304      	str	r3, [sp, #16]
 8024cc6:	9b00      	ldr	r3, [sp, #0]
 8024cc8:	42a3      	cmp	r3, r4
 8024cca:	d338      	bcc.n	8024d3e <__gethex+0x1ea>
 8024ccc:	9c05      	ldr	r4, [sp, #20]
 8024cce:	9b02      	ldr	r3, [sp, #8]
 8024cd0:	c440      	stmia	r4!, {r6}
 8024cd2:	1ae4      	subs	r4, r4, r3
 8024cd4:	10a4      	asrs	r4, r4, #2
 8024cd6:	0030      	movs	r0, r6
 8024cd8:	612c      	str	r4, [r5, #16]
 8024cda:	f000 fbf3 	bl	80254c4 <__hi0bits>
 8024cde:	9b01      	ldr	r3, [sp, #4]
 8024ce0:	0164      	lsls	r4, r4, #5
 8024ce2:	681b      	ldr	r3, [r3, #0]
 8024ce4:	1a26      	subs	r6, r4, r0
 8024ce6:	9300      	str	r3, [sp, #0]
 8024ce8:	429e      	cmp	r6, r3
 8024cea:	dd52      	ble.n	8024d92 <__gethex+0x23e>
 8024cec:	1af6      	subs	r6, r6, r3
 8024cee:	0031      	movs	r1, r6
 8024cf0:	0028      	movs	r0, r5
 8024cf2:	f000 ff96 	bl	8025c22 <__any_on>
 8024cf6:	1e04      	subs	r4, r0, #0
 8024cf8:	d00f      	beq.n	8024d1a <__gethex+0x1c6>
 8024cfa:	2401      	movs	r4, #1
 8024cfc:	231f      	movs	r3, #31
 8024cfe:	0020      	movs	r0, r4
 8024d00:	1e72      	subs	r2, r6, #1
 8024d02:	4013      	ands	r3, r2
 8024d04:	4098      	lsls	r0, r3
 8024d06:	0003      	movs	r3, r0
 8024d08:	1151      	asrs	r1, r2, #5
 8024d0a:	9802      	ldr	r0, [sp, #8]
 8024d0c:	0089      	lsls	r1, r1, #2
 8024d0e:	5809      	ldr	r1, [r1, r0]
 8024d10:	4219      	tst	r1, r3
 8024d12:	d002      	beq.n	8024d1a <__gethex+0x1c6>
 8024d14:	42a2      	cmp	r2, r4
 8024d16:	dc34      	bgt.n	8024d82 <__gethex+0x22e>
 8024d18:	2402      	movs	r4, #2
 8024d1a:	0031      	movs	r1, r6
 8024d1c:	0028      	movs	r0, r5
 8024d1e:	f7ff feb1 	bl	8024a84 <rshift>
 8024d22:	19bf      	adds	r7, r7, r6
 8024d24:	9b01      	ldr	r3, [sp, #4]
 8024d26:	689b      	ldr	r3, [r3, #8]
 8024d28:	42bb      	cmp	r3, r7
 8024d2a:	da42      	bge.n	8024db2 <__gethex+0x25e>
 8024d2c:	0029      	movs	r1, r5
 8024d2e:	9803      	ldr	r0, [sp, #12]
 8024d30:	f000 fb14 	bl	802535c <_Bfree>
 8024d34:	2300      	movs	r3, #0
 8024d36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024d38:	26a3      	movs	r6, #163	@ 0xa3
 8024d3a:	6013      	str	r3, [r2, #0]
 8024d3c:	e794      	b.n	8024c68 <__gethex+0x114>
 8024d3e:	3c01      	subs	r4, #1
 8024d40:	7823      	ldrb	r3, [r4, #0]
 8024d42:	2b2e      	cmp	r3, #46	@ 0x2e
 8024d44:	d012      	beq.n	8024d6c <__gethex+0x218>
 8024d46:	9b04      	ldr	r3, [sp, #16]
 8024d48:	2b20      	cmp	r3, #32
 8024d4a:	d104      	bne.n	8024d56 <__gethex+0x202>
 8024d4c:	9b05      	ldr	r3, [sp, #20]
 8024d4e:	c340      	stmia	r3!, {r6}
 8024d50:	2600      	movs	r6, #0
 8024d52:	9305      	str	r3, [sp, #20]
 8024d54:	9604      	str	r6, [sp, #16]
 8024d56:	7820      	ldrb	r0, [r4, #0]
 8024d58:	f7ff fee7 	bl	8024b2a <__hexdig_fun>
 8024d5c:	230f      	movs	r3, #15
 8024d5e:	4018      	ands	r0, r3
 8024d60:	9b04      	ldr	r3, [sp, #16]
 8024d62:	4098      	lsls	r0, r3
 8024d64:	3304      	adds	r3, #4
 8024d66:	4306      	orrs	r6, r0
 8024d68:	9304      	str	r3, [sp, #16]
 8024d6a:	e7ac      	b.n	8024cc6 <__gethex+0x172>
 8024d6c:	9b00      	ldr	r3, [sp, #0]
 8024d6e:	42a3      	cmp	r3, r4
 8024d70:	d8e9      	bhi.n	8024d46 <__gethex+0x1f2>
 8024d72:	2201      	movs	r2, #1
 8024d74:	0020      	movs	r0, r4
 8024d76:	492b      	ldr	r1, [pc, #172]	@ (8024e24 <__gethex+0x2d0>)
 8024d78:	f7fe fee2 	bl	8023b40 <strncmp>
 8024d7c:	2800      	cmp	r0, #0
 8024d7e:	d1e2      	bne.n	8024d46 <__gethex+0x1f2>
 8024d80:	e7a1      	b.n	8024cc6 <__gethex+0x172>
 8024d82:	0028      	movs	r0, r5
 8024d84:	1eb1      	subs	r1, r6, #2
 8024d86:	f000 ff4c 	bl	8025c22 <__any_on>
 8024d8a:	2800      	cmp	r0, #0
 8024d8c:	d0c4      	beq.n	8024d18 <__gethex+0x1c4>
 8024d8e:	2403      	movs	r4, #3
 8024d90:	e7c3      	b.n	8024d1a <__gethex+0x1c6>
 8024d92:	9b00      	ldr	r3, [sp, #0]
 8024d94:	2400      	movs	r4, #0
 8024d96:	429e      	cmp	r6, r3
 8024d98:	dac4      	bge.n	8024d24 <__gethex+0x1d0>
 8024d9a:	1b9e      	subs	r6, r3, r6
 8024d9c:	0029      	movs	r1, r5
 8024d9e:	0032      	movs	r2, r6
 8024da0:	9803      	ldr	r0, [sp, #12]
 8024da2:	f000 fd05 	bl	80257b0 <__lshift>
 8024da6:	0003      	movs	r3, r0
 8024da8:	3314      	adds	r3, #20
 8024daa:	0005      	movs	r5, r0
 8024dac:	1bbf      	subs	r7, r7, r6
 8024dae:	9302      	str	r3, [sp, #8]
 8024db0:	e7b8      	b.n	8024d24 <__gethex+0x1d0>
 8024db2:	9b01      	ldr	r3, [sp, #4]
 8024db4:	685e      	ldr	r6, [r3, #4]
 8024db6:	42be      	cmp	r6, r7
 8024db8:	dd6f      	ble.n	8024e9a <__gethex+0x346>
 8024dba:	9b00      	ldr	r3, [sp, #0]
 8024dbc:	1bf6      	subs	r6, r6, r7
 8024dbe:	42b3      	cmp	r3, r6
 8024dc0:	dc36      	bgt.n	8024e30 <__gethex+0x2dc>
 8024dc2:	9b01      	ldr	r3, [sp, #4]
 8024dc4:	68db      	ldr	r3, [r3, #12]
 8024dc6:	2b02      	cmp	r3, #2
 8024dc8:	d024      	beq.n	8024e14 <__gethex+0x2c0>
 8024dca:	2b03      	cmp	r3, #3
 8024dcc:	d026      	beq.n	8024e1c <__gethex+0x2c8>
 8024dce:	2b01      	cmp	r3, #1
 8024dd0:	d117      	bne.n	8024e02 <__gethex+0x2ae>
 8024dd2:	9b00      	ldr	r3, [sp, #0]
 8024dd4:	42b3      	cmp	r3, r6
 8024dd6:	d114      	bne.n	8024e02 <__gethex+0x2ae>
 8024dd8:	2b01      	cmp	r3, #1
 8024dda:	d10b      	bne.n	8024df4 <__gethex+0x2a0>
 8024ddc:	9b01      	ldr	r3, [sp, #4]
 8024dde:	9a07      	ldr	r2, [sp, #28]
 8024de0:	685b      	ldr	r3, [r3, #4]
 8024de2:	2662      	movs	r6, #98	@ 0x62
 8024de4:	6013      	str	r3, [r2, #0]
 8024de6:	2301      	movs	r3, #1
 8024de8:	9a02      	ldr	r2, [sp, #8]
 8024dea:	612b      	str	r3, [r5, #16]
 8024dec:	6013      	str	r3, [r2, #0]
 8024dee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024df0:	601d      	str	r5, [r3, #0]
 8024df2:	e739      	b.n	8024c68 <__gethex+0x114>
 8024df4:	9900      	ldr	r1, [sp, #0]
 8024df6:	0028      	movs	r0, r5
 8024df8:	3901      	subs	r1, #1
 8024dfa:	f000 ff12 	bl	8025c22 <__any_on>
 8024dfe:	2800      	cmp	r0, #0
 8024e00:	d1ec      	bne.n	8024ddc <__gethex+0x288>
 8024e02:	0029      	movs	r1, r5
 8024e04:	9803      	ldr	r0, [sp, #12]
 8024e06:	f000 faa9 	bl	802535c <_Bfree>
 8024e0a:	2300      	movs	r3, #0
 8024e0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024e0e:	2650      	movs	r6, #80	@ 0x50
 8024e10:	6013      	str	r3, [r2, #0]
 8024e12:	e729      	b.n	8024c68 <__gethex+0x114>
 8024e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024e16:	2b00      	cmp	r3, #0
 8024e18:	d1f3      	bne.n	8024e02 <__gethex+0x2ae>
 8024e1a:	e7df      	b.n	8024ddc <__gethex+0x288>
 8024e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024e1e:	2b00      	cmp	r3, #0
 8024e20:	d1dc      	bne.n	8024ddc <__gethex+0x288>
 8024e22:	e7ee      	b.n	8024e02 <__gethex+0x2ae>
 8024e24:	0802b7ac 	.word	0x0802b7ac
 8024e28:	0802b9b9 	.word	0x0802b9b9
 8024e2c:	0802b9ca 	.word	0x0802b9ca
 8024e30:	1e77      	subs	r7, r6, #1
 8024e32:	2c00      	cmp	r4, #0
 8024e34:	d12f      	bne.n	8024e96 <__gethex+0x342>
 8024e36:	2f00      	cmp	r7, #0
 8024e38:	d004      	beq.n	8024e44 <__gethex+0x2f0>
 8024e3a:	0039      	movs	r1, r7
 8024e3c:	0028      	movs	r0, r5
 8024e3e:	f000 fef0 	bl	8025c22 <__any_on>
 8024e42:	0004      	movs	r4, r0
 8024e44:	231f      	movs	r3, #31
 8024e46:	117a      	asrs	r2, r7, #5
 8024e48:	401f      	ands	r7, r3
 8024e4a:	3b1e      	subs	r3, #30
 8024e4c:	40bb      	lsls	r3, r7
 8024e4e:	9902      	ldr	r1, [sp, #8]
 8024e50:	0092      	lsls	r2, r2, #2
 8024e52:	5852      	ldr	r2, [r2, r1]
 8024e54:	421a      	tst	r2, r3
 8024e56:	d001      	beq.n	8024e5c <__gethex+0x308>
 8024e58:	2302      	movs	r3, #2
 8024e5a:	431c      	orrs	r4, r3
 8024e5c:	9b00      	ldr	r3, [sp, #0]
 8024e5e:	0031      	movs	r1, r6
 8024e60:	1b9b      	subs	r3, r3, r6
 8024e62:	2602      	movs	r6, #2
 8024e64:	0028      	movs	r0, r5
 8024e66:	9300      	str	r3, [sp, #0]
 8024e68:	f7ff fe0c 	bl	8024a84 <rshift>
 8024e6c:	9b01      	ldr	r3, [sp, #4]
 8024e6e:	685f      	ldr	r7, [r3, #4]
 8024e70:	2c00      	cmp	r4, #0
 8024e72:	d03f      	beq.n	8024ef4 <__gethex+0x3a0>
 8024e74:	9b01      	ldr	r3, [sp, #4]
 8024e76:	68db      	ldr	r3, [r3, #12]
 8024e78:	2b02      	cmp	r3, #2
 8024e7a:	d010      	beq.n	8024e9e <__gethex+0x34a>
 8024e7c:	2b03      	cmp	r3, #3
 8024e7e:	d012      	beq.n	8024ea6 <__gethex+0x352>
 8024e80:	2b01      	cmp	r3, #1
 8024e82:	d106      	bne.n	8024e92 <__gethex+0x33e>
 8024e84:	07a2      	lsls	r2, r4, #30
 8024e86:	d504      	bpl.n	8024e92 <__gethex+0x33e>
 8024e88:	9a02      	ldr	r2, [sp, #8]
 8024e8a:	6812      	ldr	r2, [r2, #0]
 8024e8c:	4314      	orrs	r4, r2
 8024e8e:	421c      	tst	r4, r3
 8024e90:	d10c      	bne.n	8024eac <__gethex+0x358>
 8024e92:	2310      	movs	r3, #16
 8024e94:	e02d      	b.n	8024ef2 <__gethex+0x39e>
 8024e96:	2401      	movs	r4, #1
 8024e98:	e7d4      	b.n	8024e44 <__gethex+0x2f0>
 8024e9a:	2601      	movs	r6, #1
 8024e9c:	e7e8      	b.n	8024e70 <__gethex+0x31c>
 8024e9e:	2301      	movs	r3, #1
 8024ea0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8024ea2:	1a9b      	subs	r3, r3, r2
 8024ea4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024ea6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024ea8:	2b00      	cmp	r3, #0
 8024eaa:	d0f2      	beq.n	8024e92 <__gethex+0x33e>
 8024eac:	692b      	ldr	r3, [r5, #16]
 8024eae:	2000      	movs	r0, #0
 8024eb0:	9302      	str	r3, [sp, #8]
 8024eb2:	009b      	lsls	r3, r3, #2
 8024eb4:	9304      	str	r3, [sp, #16]
 8024eb6:	002b      	movs	r3, r5
 8024eb8:	9a04      	ldr	r2, [sp, #16]
 8024eba:	3314      	adds	r3, #20
 8024ebc:	1899      	adds	r1, r3, r2
 8024ebe:	681a      	ldr	r2, [r3, #0]
 8024ec0:	1c54      	adds	r4, r2, #1
 8024ec2:	d01c      	beq.n	8024efe <__gethex+0x3aa>
 8024ec4:	3201      	adds	r2, #1
 8024ec6:	601a      	str	r2, [r3, #0]
 8024ec8:	002b      	movs	r3, r5
 8024eca:	3314      	adds	r3, #20
 8024ecc:	2e02      	cmp	r6, #2
 8024ece:	d13f      	bne.n	8024f50 <__gethex+0x3fc>
 8024ed0:	9a01      	ldr	r2, [sp, #4]
 8024ed2:	9900      	ldr	r1, [sp, #0]
 8024ed4:	6812      	ldr	r2, [r2, #0]
 8024ed6:	3a01      	subs	r2, #1
 8024ed8:	428a      	cmp	r2, r1
 8024eda:	d109      	bne.n	8024ef0 <__gethex+0x39c>
 8024edc:	000a      	movs	r2, r1
 8024ede:	201f      	movs	r0, #31
 8024ee0:	4010      	ands	r0, r2
 8024ee2:	2201      	movs	r2, #1
 8024ee4:	4082      	lsls	r2, r0
 8024ee6:	1149      	asrs	r1, r1, #5
 8024ee8:	0089      	lsls	r1, r1, #2
 8024eea:	58cb      	ldr	r3, [r1, r3]
 8024eec:	4213      	tst	r3, r2
 8024eee:	d13d      	bne.n	8024f6c <__gethex+0x418>
 8024ef0:	2320      	movs	r3, #32
 8024ef2:	431e      	orrs	r6, r3
 8024ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024ef6:	601d      	str	r5, [r3, #0]
 8024ef8:	9b07      	ldr	r3, [sp, #28]
 8024efa:	601f      	str	r7, [r3, #0]
 8024efc:	e6b4      	b.n	8024c68 <__gethex+0x114>
 8024efe:	c301      	stmia	r3!, {r0}
 8024f00:	4299      	cmp	r1, r3
 8024f02:	d8dc      	bhi.n	8024ebe <__gethex+0x36a>
 8024f04:	68ab      	ldr	r3, [r5, #8]
 8024f06:	9a02      	ldr	r2, [sp, #8]
 8024f08:	429a      	cmp	r2, r3
 8024f0a:	db18      	blt.n	8024f3e <__gethex+0x3ea>
 8024f0c:	6869      	ldr	r1, [r5, #4]
 8024f0e:	9803      	ldr	r0, [sp, #12]
 8024f10:	3101      	adds	r1, #1
 8024f12:	f000 f9df 	bl	80252d4 <_Balloc>
 8024f16:	1e04      	subs	r4, r0, #0
 8024f18:	d104      	bne.n	8024f24 <__gethex+0x3d0>
 8024f1a:	0022      	movs	r2, r4
 8024f1c:	2184      	movs	r1, #132	@ 0x84
 8024f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8024f94 <__gethex+0x440>)
 8024f20:	481d      	ldr	r0, [pc, #116]	@ (8024f98 <__gethex+0x444>)
 8024f22:	e6c4      	b.n	8024cae <__gethex+0x15a>
 8024f24:	0029      	movs	r1, r5
 8024f26:	692a      	ldr	r2, [r5, #16]
 8024f28:	310c      	adds	r1, #12
 8024f2a:	3202      	adds	r2, #2
 8024f2c:	0092      	lsls	r2, r2, #2
 8024f2e:	300c      	adds	r0, #12
 8024f30:	f7fe fecc 	bl	8023ccc <memcpy>
 8024f34:	0029      	movs	r1, r5
 8024f36:	9803      	ldr	r0, [sp, #12]
 8024f38:	f000 fa10 	bl	802535c <_Bfree>
 8024f3c:	0025      	movs	r5, r4
 8024f3e:	692b      	ldr	r3, [r5, #16]
 8024f40:	1c5a      	adds	r2, r3, #1
 8024f42:	612a      	str	r2, [r5, #16]
 8024f44:	2201      	movs	r2, #1
 8024f46:	3304      	adds	r3, #4
 8024f48:	009b      	lsls	r3, r3, #2
 8024f4a:	18eb      	adds	r3, r5, r3
 8024f4c:	605a      	str	r2, [r3, #4]
 8024f4e:	e7bb      	b.n	8024ec8 <__gethex+0x374>
 8024f50:	692a      	ldr	r2, [r5, #16]
 8024f52:	9902      	ldr	r1, [sp, #8]
 8024f54:	428a      	cmp	r2, r1
 8024f56:	dd0b      	ble.n	8024f70 <__gethex+0x41c>
 8024f58:	2101      	movs	r1, #1
 8024f5a:	0028      	movs	r0, r5
 8024f5c:	f7ff fd92 	bl	8024a84 <rshift>
 8024f60:	9b01      	ldr	r3, [sp, #4]
 8024f62:	3701      	adds	r7, #1
 8024f64:	689b      	ldr	r3, [r3, #8]
 8024f66:	42bb      	cmp	r3, r7
 8024f68:	da00      	bge.n	8024f6c <__gethex+0x418>
 8024f6a:	e6df      	b.n	8024d2c <__gethex+0x1d8>
 8024f6c:	2601      	movs	r6, #1
 8024f6e:	e7bf      	b.n	8024ef0 <__gethex+0x39c>
 8024f70:	221f      	movs	r2, #31
 8024f72:	9c00      	ldr	r4, [sp, #0]
 8024f74:	9900      	ldr	r1, [sp, #0]
 8024f76:	4014      	ands	r4, r2
 8024f78:	4211      	tst	r1, r2
 8024f7a:	d0f7      	beq.n	8024f6c <__gethex+0x418>
 8024f7c:	9a04      	ldr	r2, [sp, #16]
 8024f7e:	189b      	adds	r3, r3, r2
 8024f80:	3b04      	subs	r3, #4
 8024f82:	6818      	ldr	r0, [r3, #0]
 8024f84:	f000 fa9e 	bl	80254c4 <__hi0bits>
 8024f88:	2320      	movs	r3, #32
 8024f8a:	1b1b      	subs	r3, r3, r4
 8024f8c:	4298      	cmp	r0, r3
 8024f8e:	dbe3      	blt.n	8024f58 <__gethex+0x404>
 8024f90:	e7ec      	b.n	8024f6c <__gethex+0x418>
 8024f92:	46c0      	nop			@ (mov r8, r8)
 8024f94:	0802b9b9 	.word	0x0802b9b9
 8024f98:	0802b9ca 	.word	0x0802b9ca

08024f9c <L_shift>:
 8024f9c:	2308      	movs	r3, #8
 8024f9e:	b570      	push	{r4, r5, r6, lr}
 8024fa0:	2520      	movs	r5, #32
 8024fa2:	1a9a      	subs	r2, r3, r2
 8024fa4:	0092      	lsls	r2, r2, #2
 8024fa6:	1aad      	subs	r5, r5, r2
 8024fa8:	6843      	ldr	r3, [r0, #4]
 8024faa:	6804      	ldr	r4, [r0, #0]
 8024fac:	001e      	movs	r6, r3
 8024fae:	40ae      	lsls	r6, r5
 8024fb0:	40d3      	lsrs	r3, r2
 8024fb2:	4334      	orrs	r4, r6
 8024fb4:	6004      	str	r4, [r0, #0]
 8024fb6:	6043      	str	r3, [r0, #4]
 8024fb8:	3004      	adds	r0, #4
 8024fba:	4288      	cmp	r0, r1
 8024fbc:	d3f4      	bcc.n	8024fa8 <L_shift+0xc>
 8024fbe:	bd70      	pop	{r4, r5, r6, pc}

08024fc0 <__match>:
 8024fc0:	b530      	push	{r4, r5, lr}
 8024fc2:	6803      	ldr	r3, [r0, #0]
 8024fc4:	780c      	ldrb	r4, [r1, #0]
 8024fc6:	3301      	adds	r3, #1
 8024fc8:	2c00      	cmp	r4, #0
 8024fca:	d102      	bne.n	8024fd2 <__match+0x12>
 8024fcc:	6003      	str	r3, [r0, #0]
 8024fce:	2001      	movs	r0, #1
 8024fd0:	bd30      	pop	{r4, r5, pc}
 8024fd2:	781a      	ldrb	r2, [r3, #0]
 8024fd4:	0015      	movs	r5, r2
 8024fd6:	3d41      	subs	r5, #65	@ 0x41
 8024fd8:	2d19      	cmp	r5, #25
 8024fda:	d800      	bhi.n	8024fde <__match+0x1e>
 8024fdc:	3220      	adds	r2, #32
 8024fde:	3101      	adds	r1, #1
 8024fe0:	42a2      	cmp	r2, r4
 8024fe2:	d0ef      	beq.n	8024fc4 <__match+0x4>
 8024fe4:	2000      	movs	r0, #0
 8024fe6:	e7f3      	b.n	8024fd0 <__match+0x10>

08024fe8 <__hexnan>:
 8024fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024fea:	680b      	ldr	r3, [r1, #0]
 8024fec:	b08b      	sub	sp, #44	@ 0x2c
 8024fee:	9201      	str	r2, [sp, #4]
 8024ff0:	9901      	ldr	r1, [sp, #4]
 8024ff2:	115a      	asrs	r2, r3, #5
 8024ff4:	0092      	lsls	r2, r2, #2
 8024ff6:	188a      	adds	r2, r1, r2
 8024ff8:	9202      	str	r2, [sp, #8]
 8024ffa:	0019      	movs	r1, r3
 8024ffc:	221f      	movs	r2, #31
 8024ffe:	4011      	ands	r1, r2
 8025000:	9008      	str	r0, [sp, #32]
 8025002:	9106      	str	r1, [sp, #24]
 8025004:	4213      	tst	r3, r2
 8025006:	d002      	beq.n	802500e <__hexnan+0x26>
 8025008:	9b02      	ldr	r3, [sp, #8]
 802500a:	3304      	adds	r3, #4
 802500c:	9302      	str	r3, [sp, #8]
 802500e:	9b02      	ldr	r3, [sp, #8]
 8025010:	2500      	movs	r5, #0
 8025012:	1f1f      	subs	r7, r3, #4
 8025014:	003e      	movs	r6, r7
 8025016:	003c      	movs	r4, r7
 8025018:	9b08      	ldr	r3, [sp, #32]
 802501a:	603d      	str	r5, [r7, #0]
 802501c:	681b      	ldr	r3, [r3, #0]
 802501e:	9507      	str	r5, [sp, #28]
 8025020:	9305      	str	r3, [sp, #20]
 8025022:	9503      	str	r5, [sp, #12]
 8025024:	9b05      	ldr	r3, [sp, #20]
 8025026:	3301      	adds	r3, #1
 8025028:	9309      	str	r3, [sp, #36]	@ 0x24
 802502a:	9b05      	ldr	r3, [sp, #20]
 802502c:	785b      	ldrb	r3, [r3, #1]
 802502e:	9304      	str	r3, [sp, #16]
 8025030:	2b00      	cmp	r3, #0
 8025032:	d028      	beq.n	8025086 <__hexnan+0x9e>
 8025034:	9804      	ldr	r0, [sp, #16]
 8025036:	f7ff fd78 	bl	8024b2a <__hexdig_fun>
 802503a:	2800      	cmp	r0, #0
 802503c:	d155      	bne.n	80250ea <__hexnan+0x102>
 802503e:	9b04      	ldr	r3, [sp, #16]
 8025040:	2b20      	cmp	r3, #32
 8025042:	d819      	bhi.n	8025078 <__hexnan+0x90>
 8025044:	9b03      	ldr	r3, [sp, #12]
 8025046:	9a07      	ldr	r2, [sp, #28]
 8025048:	4293      	cmp	r3, r2
 802504a:	dd12      	ble.n	8025072 <__hexnan+0x8a>
 802504c:	42b4      	cmp	r4, r6
 802504e:	d206      	bcs.n	802505e <__hexnan+0x76>
 8025050:	2d07      	cmp	r5, #7
 8025052:	dc04      	bgt.n	802505e <__hexnan+0x76>
 8025054:	002a      	movs	r2, r5
 8025056:	0031      	movs	r1, r6
 8025058:	0020      	movs	r0, r4
 802505a:	f7ff ff9f 	bl	8024f9c <L_shift>
 802505e:	9b01      	ldr	r3, [sp, #4]
 8025060:	2508      	movs	r5, #8
 8025062:	429c      	cmp	r4, r3
 8025064:	d905      	bls.n	8025072 <__hexnan+0x8a>
 8025066:	1f26      	subs	r6, r4, #4
 8025068:	2500      	movs	r5, #0
 802506a:	0034      	movs	r4, r6
 802506c:	9b03      	ldr	r3, [sp, #12]
 802506e:	6035      	str	r5, [r6, #0]
 8025070:	9307      	str	r3, [sp, #28]
 8025072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025074:	9305      	str	r3, [sp, #20]
 8025076:	e7d5      	b.n	8025024 <__hexnan+0x3c>
 8025078:	9b04      	ldr	r3, [sp, #16]
 802507a:	2b29      	cmp	r3, #41	@ 0x29
 802507c:	d15a      	bne.n	8025134 <__hexnan+0x14c>
 802507e:	9b05      	ldr	r3, [sp, #20]
 8025080:	9a08      	ldr	r2, [sp, #32]
 8025082:	3302      	adds	r3, #2
 8025084:	6013      	str	r3, [r2, #0]
 8025086:	9b03      	ldr	r3, [sp, #12]
 8025088:	2b00      	cmp	r3, #0
 802508a:	d053      	beq.n	8025134 <__hexnan+0x14c>
 802508c:	42b4      	cmp	r4, r6
 802508e:	d206      	bcs.n	802509e <__hexnan+0xb6>
 8025090:	2d07      	cmp	r5, #7
 8025092:	dc04      	bgt.n	802509e <__hexnan+0xb6>
 8025094:	002a      	movs	r2, r5
 8025096:	0031      	movs	r1, r6
 8025098:	0020      	movs	r0, r4
 802509a:	f7ff ff7f 	bl	8024f9c <L_shift>
 802509e:	9b01      	ldr	r3, [sp, #4]
 80250a0:	429c      	cmp	r4, r3
 80250a2:	d936      	bls.n	8025112 <__hexnan+0x12a>
 80250a4:	001a      	movs	r2, r3
 80250a6:	0023      	movs	r3, r4
 80250a8:	cb02      	ldmia	r3!, {r1}
 80250aa:	c202      	stmia	r2!, {r1}
 80250ac:	429f      	cmp	r7, r3
 80250ae:	d2fb      	bcs.n	80250a8 <__hexnan+0xc0>
 80250b0:	9b02      	ldr	r3, [sp, #8]
 80250b2:	1c61      	adds	r1, r4, #1
 80250b4:	1eda      	subs	r2, r3, #3
 80250b6:	2304      	movs	r3, #4
 80250b8:	4291      	cmp	r1, r2
 80250ba:	d805      	bhi.n	80250c8 <__hexnan+0xe0>
 80250bc:	9b02      	ldr	r3, [sp, #8]
 80250be:	3b04      	subs	r3, #4
 80250c0:	1b1b      	subs	r3, r3, r4
 80250c2:	089b      	lsrs	r3, r3, #2
 80250c4:	3301      	adds	r3, #1
 80250c6:	009b      	lsls	r3, r3, #2
 80250c8:	9a01      	ldr	r2, [sp, #4]
 80250ca:	18d3      	adds	r3, r2, r3
 80250cc:	2200      	movs	r2, #0
 80250ce:	c304      	stmia	r3!, {r2}
 80250d0:	429f      	cmp	r7, r3
 80250d2:	d2fc      	bcs.n	80250ce <__hexnan+0xe6>
 80250d4:	683b      	ldr	r3, [r7, #0]
 80250d6:	2b00      	cmp	r3, #0
 80250d8:	d104      	bne.n	80250e4 <__hexnan+0xfc>
 80250da:	9b01      	ldr	r3, [sp, #4]
 80250dc:	429f      	cmp	r7, r3
 80250de:	d127      	bne.n	8025130 <__hexnan+0x148>
 80250e0:	2301      	movs	r3, #1
 80250e2:	603b      	str	r3, [r7, #0]
 80250e4:	2005      	movs	r0, #5
 80250e6:	b00b      	add	sp, #44	@ 0x2c
 80250e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80250ea:	9b03      	ldr	r3, [sp, #12]
 80250ec:	3501      	adds	r5, #1
 80250ee:	3301      	adds	r3, #1
 80250f0:	9303      	str	r3, [sp, #12]
 80250f2:	2d08      	cmp	r5, #8
 80250f4:	dd06      	ble.n	8025104 <__hexnan+0x11c>
 80250f6:	9b01      	ldr	r3, [sp, #4]
 80250f8:	429c      	cmp	r4, r3
 80250fa:	d9ba      	bls.n	8025072 <__hexnan+0x8a>
 80250fc:	2300      	movs	r3, #0
 80250fe:	2501      	movs	r5, #1
 8025100:	3c04      	subs	r4, #4
 8025102:	6023      	str	r3, [r4, #0]
 8025104:	220f      	movs	r2, #15
 8025106:	6823      	ldr	r3, [r4, #0]
 8025108:	4010      	ands	r0, r2
 802510a:	011b      	lsls	r3, r3, #4
 802510c:	4303      	orrs	r3, r0
 802510e:	6023      	str	r3, [r4, #0]
 8025110:	e7af      	b.n	8025072 <__hexnan+0x8a>
 8025112:	9b06      	ldr	r3, [sp, #24]
 8025114:	2b00      	cmp	r3, #0
 8025116:	d0dd      	beq.n	80250d4 <__hexnan+0xec>
 8025118:	2320      	movs	r3, #32
 802511a:	9a06      	ldr	r2, [sp, #24]
 802511c:	9902      	ldr	r1, [sp, #8]
 802511e:	1a9b      	subs	r3, r3, r2
 8025120:	2201      	movs	r2, #1
 8025122:	4252      	negs	r2, r2
 8025124:	40da      	lsrs	r2, r3
 8025126:	3904      	subs	r1, #4
 8025128:	680b      	ldr	r3, [r1, #0]
 802512a:	4013      	ands	r3, r2
 802512c:	600b      	str	r3, [r1, #0]
 802512e:	e7d1      	b.n	80250d4 <__hexnan+0xec>
 8025130:	3f04      	subs	r7, #4
 8025132:	e7cf      	b.n	80250d4 <__hexnan+0xec>
 8025134:	2004      	movs	r0, #4
 8025136:	e7d6      	b.n	80250e6 <__hexnan+0xfe>

08025138 <malloc>:
 8025138:	b510      	push	{r4, lr}
 802513a:	4b03      	ldr	r3, [pc, #12]	@ (8025148 <malloc+0x10>)
 802513c:	0001      	movs	r1, r0
 802513e:	6818      	ldr	r0, [r3, #0]
 8025140:	f000 f826 	bl	8025190 <_malloc_r>
 8025144:	bd10      	pop	{r4, pc}
 8025146:	46c0      	nop			@ (mov r8, r8)
 8025148:	200003e0 	.word	0x200003e0

0802514c <sbrk_aligned>:
 802514c:	b570      	push	{r4, r5, r6, lr}
 802514e:	4e0f      	ldr	r6, [pc, #60]	@ (802518c <sbrk_aligned+0x40>)
 8025150:	000d      	movs	r5, r1
 8025152:	6831      	ldr	r1, [r6, #0]
 8025154:	0004      	movs	r4, r0
 8025156:	2900      	cmp	r1, #0
 8025158:	d102      	bne.n	8025160 <sbrk_aligned+0x14>
 802515a:	f001 f989 	bl	8026470 <_sbrk_r>
 802515e:	6030      	str	r0, [r6, #0]
 8025160:	0029      	movs	r1, r5
 8025162:	0020      	movs	r0, r4
 8025164:	f001 f984 	bl	8026470 <_sbrk_r>
 8025168:	1c43      	adds	r3, r0, #1
 802516a:	d103      	bne.n	8025174 <sbrk_aligned+0x28>
 802516c:	2501      	movs	r5, #1
 802516e:	426d      	negs	r5, r5
 8025170:	0028      	movs	r0, r5
 8025172:	bd70      	pop	{r4, r5, r6, pc}
 8025174:	2303      	movs	r3, #3
 8025176:	1cc5      	adds	r5, r0, #3
 8025178:	439d      	bics	r5, r3
 802517a:	42a8      	cmp	r0, r5
 802517c:	d0f8      	beq.n	8025170 <sbrk_aligned+0x24>
 802517e:	1a29      	subs	r1, r5, r0
 8025180:	0020      	movs	r0, r4
 8025182:	f001 f975 	bl	8026470 <_sbrk_r>
 8025186:	3001      	adds	r0, #1
 8025188:	d1f2      	bne.n	8025170 <sbrk_aligned+0x24>
 802518a:	e7ef      	b.n	802516c <sbrk_aligned+0x20>
 802518c:	200035e8 	.word	0x200035e8

08025190 <_malloc_r>:
 8025190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025192:	2203      	movs	r2, #3
 8025194:	1ccb      	adds	r3, r1, #3
 8025196:	4393      	bics	r3, r2
 8025198:	3308      	adds	r3, #8
 802519a:	0005      	movs	r5, r0
 802519c:	001f      	movs	r7, r3
 802519e:	2b0c      	cmp	r3, #12
 80251a0:	d234      	bcs.n	802520c <_malloc_r+0x7c>
 80251a2:	270c      	movs	r7, #12
 80251a4:	42b9      	cmp	r1, r7
 80251a6:	d833      	bhi.n	8025210 <_malloc_r+0x80>
 80251a8:	0028      	movs	r0, r5
 80251aa:	f000 f883 	bl	80252b4 <__malloc_lock>
 80251ae:	4e37      	ldr	r6, [pc, #220]	@ (802528c <_malloc_r+0xfc>)
 80251b0:	6833      	ldr	r3, [r6, #0]
 80251b2:	001c      	movs	r4, r3
 80251b4:	2c00      	cmp	r4, #0
 80251b6:	d12f      	bne.n	8025218 <_malloc_r+0x88>
 80251b8:	0039      	movs	r1, r7
 80251ba:	0028      	movs	r0, r5
 80251bc:	f7ff ffc6 	bl	802514c <sbrk_aligned>
 80251c0:	0004      	movs	r4, r0
 80251c2:	1c43      	adds	r3, r0, #1
 80251c4:	d15f      	bne.n	8025286 <_malloc_r+0xf6>
 80251c6:	6834      	ldr	r4, [r6, #0]
 80251c8:	9400      	str	r4, [sp, #0]
 80251ca:	9b00      	ldr	r3, [sp, #0]
 80251cc:	2b00      	cmp	r3, #0
 80251ce:	d14a      	bne.n	8025266 <_malloc_r+0xd6>
 80251d0:	2c00      	cmp	r4, #0
 80251d2:	d052      	beq.n	802527a <_malloc_r+0xea>
 80251d4:	6823      	ldr	r3, [r4, #0]
 80251d6:	0028      	movs	r0, r5
 80251d8:	18e3      	adds	r3, r4, r3
 80251da:	9900      	ldr	r1, [sp, #0]
 80251dc:	9301      	str	r3, [sp, #4]
 80251de:	f001 f947 	bl	8026470 <_sbrk_r>
 80251e2:	9b01      	ldr	r3, [sp, #4]
 80251e4:	4283      	cmp	r3, r0
 80251e6:	d148      	bne.n	802527a <_malloc_r+0xea>
 80251e8:	6823      	ldr	r3, [r4, #0]
 80251ea:	0028      	movs	r0, r5
 80251ec:	1aff      	subs	r7, r7, r3
 80251ee:	0039      	movs	r1, r7
 80251f0:	f7ff ffac 	bl	802514c <sbrk_aligned>
 80251f4:	3001      	adds	r0, #1
 80251f6:	d040      	beq.n	802527a <_malloc_r+0xea>
 80251f8:	6823      	ldr	r3, [r4, #0]
 80251fa:	19db      	adds	r3, r3, r7
 80251fc:	6023      	str	r3, [r4, #0]
 80251fe:	6833      	ldr	r3, [r6, #0]
 8025200:	685a      	ldr	r2, [r3, #4]
 8025202:	2a00      	cmp	r2, #0
 8025204:	d133      	bne.n	802526e <_malloc_r+0xde>
 8025206:	9b00      	ldr	r3, [sp, #0]
 8025208:	6033      	str	r3, [r6, #0]
 802520a:	e019      	b.n	8025240 <_malloc_r+0xb0>
 802520c:	2b00      	cmp	r3, #0
 802520e:	dac9      	bge.n	80251a4 <_malloc_r+0x14>
 8025210:	230c      	movs	r3, #12
 8025212:	602b      	str	r3, [r5, #0]
 8025214:	2000      	movs	r0, #0
 8025216:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025218:	6821      	ldr	r1, [r4, #0]
 802521a:	1bc9      	subs	r1, r1, r7
 802521c:	d420      	bmi.n	8025260 <_malloc_r+0xd0>
 802521e:	290b      	cmp	r1, #11
 8025220:	d90a      	bls.n	8025238 <_malloc_r+0xa8>
 8025222:	19e2      	adds	r2, r4, r7
 8025224:	6027      	str	r7, [r4, #0]
 8025226:	42a3      	cmp	r3, r4
 8025228:	d104      	bne.n	8025234 <_malloc_r+0xa4>
 802522a:	6032      	str	r2, [r6, #0]
 802522c:	6863      	ldr	r3, [r4, #4]
 802522e:	6011      	str	r1, [r2, #0]
 8025230:	6053      	str	r3, [r2, #4]
 8025232:	e005      	b.n	8025240 <_malloc_r+0xb0>
 8025234:	605a      	str	r2, [r3, #4]
 8025236:	e7f9      	b.n	802522c <_malloc_r+0x9c>
 8025238:	6862      	ldr	r2, [r4, #4]
 802523a:	42a3      	cmp	r3, r4
 802523c:	d10e      	bne.n	802525c <_malloc_r+0xcc>
 802523e:	6032      	str	r2, [r6, #0]
 8025240:	0028      	movs	r0, r5
 8025242:	f000 f83f 	bl	80252c4 <__malloc_unlock>
 8025246:	0020      	movs	r0, r4
 8025248:	2207      	movs	r2, #7
 802524a:	300b      	adds	r0, #11
 802524c:	1d23      	adds	r3, r4, #4
 802524e:	4390      	bics	r0, r2
 8025250:	1ac2      	subs	r2, r0, r3
 8025252:	4298      	cmp	r0, r3
 8025254:	d0df      	beq.n	8025216 <_malloc_r+0x86>
 8025256:	1a1b      	subs	r3, r3, r0
 8025258:	50a3      	str	r3, [r4, r2]
 802525a:	e7dc      	b.n	8025216 <_malloc_r+0x86>
 802525c:	605a      	str	r2, [r3, #4]
 802525e:	e7ef      	b.n	8025240 <_malloc_r+0xb0>
 8025260:	0023      	movs	r3, r4
 8025262:	6864      	ldr	r4, [r4, #4]
 8025264:	e7a6      	b.n	80251b4 <_malloc_r+0x24>
 8025266:	9c00      	ldr	r4, [sp, #0]
 8025268:	6863      	ldr	r3, [r4, #4]
 802526a:	9300      	str	r3, [sp, #0]
 802526c:	e7ad      	b.n	80251ca <_malloc_r+0x3a>
 802526e:	001a      	movs	r2, r3
 8025270:	685b      	ldr	r3, [r3, #4]
 8025272:	42a3      	cmp	r3, r4
 8025274:	d1fb      	bne.n	802526e <_malloc_r+0xde>
 8025276:	2300      	movs	r3, #0
 8025278:	e7da      	b.n	8025230 <_malloc_r+0xa0>
 802527a:	230c      	movs	r3, #12
 802527c:	0028      	movs	r0, r5
 802527e:	602b      	str	r3, [r5, #0]
 8025280:	f000 f820 	bl	80252c4 <__malloc_unlock>
 8025284:	e7c6      	b.n	8025214 <_malloc_r+0x84>
 8025286:	6007      	str	r7, [r0, #0]
 8025288:	e7da      	b.n	8025240 <_malloc_r+0xb0>
 802528a:	46c0      	nop			@ (mov r8, r8)
 802528c:	200035ec 	.word	0x200035ec

08025290 <__ascii_mbtowc>:
 8025290:	b082      	sub	sp, #8
 8025292:	2900      	cmp	r1, #0
 8025294:	d100      	bne.n	8025298 <__ascii_mbtowc+0x8>
 8025296:	a901      	add	r1, sp, #4
 8025298:	1e10      	subs	r0, r2, #0
 802529a:	d006      	beq.n	80252aa <__ascii_mbtowc+0x1a>
 802529c:	2b00      	cmp	r3, #0
 802529e:	d006      	beq.n	80252ae <__ascii_mbtowc+0x1e>
 80252a0:	7813      	ldrb	r3, [r2, #0]
 80252a2:	600b      	str	r3, [r1, #0]
 80252a4:	7810      	ldrb	r0, [r2, #0]
 80252a6:	1e43      	subs	r3, r0, #1
 80252a8:	4198      	sbcs	r0, r3
 80252aa:	b002      	add	sp, #8
 80252ac:	4770      	bx	lr
 80252ae:	2002      	movs	r0, #2
 80252b0:	4240      	negs	r0, r0
 80252b2:	e7fa      	b.n	80252aa <__ascii_mbtowc+0x1a>

080252b4 <__malloc_lock>:
 80252b4:	b510      	push	{r4, lr}
 80252b6:	4802      	ldr	r0, [pc, #8]	@ (80252c0 <__malloc_lock+0xc>)
 80252b8:	f7fe fcfb 	bl	8023cb2 <__retarget_lock_acquire_recursive>
 80252bc:	bd10      	pop	{r4, pc}
 80252be:	46c0      	nop			@ (mov r8, r8)
 80252c0:	200035e4 	.word	0x200035e4

080252c4 <__malloc_unlock>:
 80252c4:	b510      	push	{r4, lr}
 80252c6:	4802      	ldr	r0, [pc, #8]	@ (80252d0 <__malloc_unlock+0xc>)
 80252c8:	f7fe fcf4 	bl	8023cb4 <__retarget_lock_release_recursive>
 80252cc:	bd10      	pop	{r4, pc}
 80252ce:	46c0      	nop			@ (mov r8, r8)
 80252d0:	200035e4 	.word	0x200035e4

080252d4 <_Balloc>:
 80252d4:	b570      	push	{r4, r5, r6, lr}
 80252d6:	69c5      	ldr	r5, [r0, #28]
 80252d8:	0006      	movs	r6, r0
 80252da:	000c      	movs	r4, r1
 80252dc:	2d00      	cmp	r5, #0
 80252de:	d10e      	bne.n	80252fe <_Balloc+0x2a>
 80252e0:	2010      	movs	r0, #16
 80252e2:	f7ff ff29 	bl	8025138 <malloc>
 80252e6:	1e02      	subs	r2, r0, #0
 80252e8:	61f0      	str	r0, [r6, #28]
 80252ea:	d104      	bne.n	80252f6 <_Balloc+0x22>
 80252ec:	216b      	movs	r1, #107	@ 0x6b
 80252ee:	4b19      	ldr	r3, [pc, #100]	@ (8025354 <_Balloc+0x80>)
 80252f0:	4819      	ldr	r0, [pc, #100]	@ (8025358 <_Balloc+0x84>)
 80252f2:	f001 f8cf 	bl	8026494 <__assert_func>
 80252f6:	6045      	str	r5, [r0, #4]
 80252f8:	6085      	str	r5, [r0, #8]
 80252fa:	6005      	str	r5, [r0, #0]
 80252fc:	60c5      	str	r5, [r0, #12]
 80252fe:	69f5      	ldr	r5, [r6, #28]
 8025300:	68eb      	ldr	r3, [r5, #12]
 8025302:	2b00      	cmp	r3, #0
 8025304:	d013      	beq.n	802532e <_Balloc+0x5a>
 8025306:	69f3      	ldr	r3, [r6, #28]
 8025308:	00a2      	lsls	r2, r4, #2
 802530a:	68db      	ldr	r3, [r3, #12]
 802530c:	189b      	adds	r3, r3, r2
 802530e:	6818      	ldr	r0, [r3, #0]
 8025310:	2800      	cmp	r0, #0
 8025312:	d118      	bne.n	8025346 <_Balloc+0x72>
 8025314:	2101      	movs	r1, #1
 8025316:	000d      	movs	r5, r1
 8025318:	40a5      	lsls	r5, r4
 802531a:	1d6a      	adds	r2, r5, #5
 802531c:	0030      	movs	r0, r6
 802531e:	0092      	lsls	r2, r2, #2
 8025320:	f001 f8d6 	bl	80264d0 <_calloc_r>
 8025324:	2800      	cmp	r0, #0
 8025326:	d00c      	beq.n	8025342 <_Balloc+0x6e>
 8025328:	6044      	str	r4, [r0, #4]
 802532a:	6085      	str	r5, [r0, #8]
 802532c:	e00d      	b.n	802534a <_Balloc+0x76>
 802532e:	2221      	movs	r2, #33	@ 0x21
 8025330:	2104      	movs	r1, #4
 8025332:	0030      	movs	r0, r6
 8025334:	f001 f8cc 	bl	80264d0 <_calloc_r>
 8025338:	69f3      	ldr	r3, [r6, #28]
 802533a:	60e8      	str	r0, [r5, #12]
 802533c:	68db      	ldr	r3, [r3, #12]
 802533e:	2b00      	cmp	r3, #0
 8025340:	d1e1      	bne.n	8025306 <_Balloc+0x32>
 8025342:	2000      	movs	r0, #0
 8025344:	bd70      	pop	{r4, r5, r6, pc}
 8025346:	6802      	ldr	r2, [r0, #0]
 8025348:	601a      	str	r2, [r3, #0]
 802534a:	2300      	movs	r3, #0
 802534c:	6103      	str	r3, [r0, #16]
 802534e:	60c3      	str	r3, [r0, #12]
 8025350:	e7f8      	b.n	8025344 <_Balloc+0x70>
 8025352:	46c0      	nop			@ (mov r8, r8)
 8025354:	0802b94a 	.word	0x0802b94a
 8025358:	0802ba2a 	.word	0x0802ba2a

0802535c <_Bfree>:
 802535c:	b570      	push	{r4, r5, r6, lr}
 802535e:	69c6      	ldr	r6, [r0, #28]
 8025360:	0005      	movs	r5, r0
 8025362:	000c      	movs	r4, r1
 8025364:	2e00      	cmp	r6, #0
 8025366:	d10e      	bne.n	8025386 <_Bfree+0x2a>
 8025368:	2010      	movs	r0, #16
 802536a:	f7ff fee5 	bl	8025138 <malloc>
 802536e:	1e02      	subs	r2, r0, #0
 8025370:	61e8      	str	r0, [r5, #28]
 8025372:	d104      	bne.n	802537e <_Bfree+0x22>
 8025374:	218f      	movs	r1, #143	@ 0x8f
 8025376:	4b09      	ldr	r3, [pc, #36]	@ (802539c <_Bfree+0x40>)
 8025378:	4809      	ldr	r0, [pc, #36]	@ (80253a0 <_Bfree+0x44>)
 802537a:	f001 f88b 	bl	8026494 <__assert_func>
 802537e:	6046      	str	r6, [r0, #4]
 8025380:	6086      	str	r6, [r0, #8]
 8025382:	6006      	str	r6, [r0, #0]
 8025384:	60c6      	str	r6, [r0, #12]
 8025386:	2c00      	cmp	r4, #0
 8025388:	d007      	beq.n	802539a <_Bfree+0x3e>
 802538a:	69eb      	ldr	r3, [r5, #28]
 802538c:	6862      	ldr	r2, [r4, #4]
 802538e:	68db      	ldr	r3, [r3, #12]
 8025390:	0092      	lsls	r2, r2, #2
 8025392:	189b      	adds	r3, r3, r2
 8025394:	681a      	ldr	r2, [r3, #0]
 8025396:	6022      	str	r2, [r4, #0]
 8025398:	601c      	str	r4, [r3, #0]
 802539a:	bd70      	pop	{r4, r5, r6, pc}
 802539c:	0802b94a 	.word	0x0802b94a
 80253a0:	0802ba2a 	.word	0x0802ba2a

080253a4 <__multadd>:
 80253a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80253a6:	000f      	movs	r7, r1
 80253a8:	9001      	str	r0, [sp, #4]
 80253aa:	000c      	movs	r4, r1
 80253ac:	001e      	movs	r6, r3
 80253ae:	2000      	movs	r0, #0
 80253b0:	690d      	ldr	r5, [r1, #16]
 80253b2:	3714      	adds	r7, #20
 80253b4:	683b      	ldr	r3, [r7, #0]
 80253b6:	3001      	adds	r0, #1
 80253b8:	b299      	uxth	r1, r3
 80253ba:	4351      	muls	r1, r2
 80253bc:	0c1b      	lsrs	r3, r3, #16
 80253be:	4353      	muls	r3, r2
 80253c0:	1989      	adds	r1, r1, r6
 80253c2:	0c0e      	lsrs	r6, r1, #16
 80253c4:	199b      	adds	r3, r3, r6
 80253c6:	0c1e      	lsrs	r6, r3, #16
 80253c8:	b289      	uxth	r1, r1
 80253ca:	041b      	lsls	r3, r3, #16
 80253cc:	185b      	adds	r3, r3, r1
 80253ce:	c708      	stmia	r7!, {r3}
 80253d0:	4285      	cmp	r5, r0
 80253d2:	dcef      	bgt.n	80253b4 <__multadd+0x10>
 80253d4:	2e00      	cmp	r6, #0
 80253d6:	d022      	beq.n	802541e <__multadd+0x7a>
 80253d8:	68a3      	ldr	r3, [r4, #8]
 80253da:	42ab      	cmp	r3, r5
 80253dc:	dc19      	bgt.n	8025412 <__multadd+0x6e>
 80253de:	6861      	ldr	r1, [r4, #4]
 80253e0:	9801      	ldr	r0, [sp, #4]
 80253e2:	3101      	adds	r1, #1
 80253e4:	f7ff ff76 	bl	80252d4 <_Balloc>
 80253e8:	1e07      	subs	r7, r0, #0
 80253ea:	d105      	bne.n	80253f8 <__multadd+0x54>
 80253ec:	003a      	movs	r2, r7
 80253ee:	21ba      	movs	r1, #186	@ 0xba
 80253f0:	4b0c      	ldr	r3, [pc, #48]	@ (8025424 <__multadd+0x80>)
 80253f2:	480d      	ldr	r0, [pc, #52]	@ (8025428 <__multadd+0x84>)
 80253f4:	f001 f84e 	bl	8026494 <__assert_func>
 80253f8:	0021      	movs	r1, r4
 80253fa:	6922      	ldr	r2, [r4, #16]
 80253fc:	310c      	adds	r1, #12
 80253fe:	3202      	adds	r2, #2
 8025400:	0092      	lsls	r2, r2, #2
 8025402:	300c      	adds	r0, #12
 8025404:	f7fe fc62 	bl	8023ccc <memcpy>
 8025408:	0021      	movs	r1, r4
 802540a:	9801      	ldr	r0, [sp, #4]
 802540c:	f7ff ffa6 	bl	802535c <_Bfree>
 8025410:	003c      	movs	r4, r7
 8025412:	1d2b      	adds	r3, r5, #4
 8025414:	009b      	lsls	r3, r3, #2
 8025416:	18e3      	adds	r3, r4, r3
 8025418:	3501      	adds	r5, #1
 802541a:	605e      	str	r6, [r3, #4]
 802541c:	6125      	str	r5, [r4, #16]
 802541e:	0020      	movs	r0, r4
 8025420:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025422:	46c0      	nop			@ (mov r8, r8)
 8025424:	0802b9b9 	.word	0x0802b9b9
 8025428:	0802ba2a 	.word	0x0802ba2a

0802542c <__s2b>:
 802542c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802542e:	0007      	movs	r7, r0
 8025430:	0018      	movs	r0, r3
 8025432:	000c      	movs	r4, r1
 8025434:	3008      	adds	r0, #8
 8025436:	2109      	movs	r1, #9
 8025438:	9301      	str	r3, [sp, #4]
 802543a:	0015      	movs	r5, r2
 802543c:	f7da ff3c 	bl	80002b8 <__divsi3>
 8025440:	2301      	movs	r3, #1
 8025442:	2100      	movs	r1, #0
 8025444:	4283      	cmp	r3, r0
 8025446:	db0a      	blt.n	802545e <__s2b+0x32>
 8025448:	0038      	movs	r0, r7
 802544a:	f7ff ff43 	bl	80252d4 <_Balloc>
 802544e:	1e01      	subs	r1, r0, #0
 8025450:	d108      	bne.n	8025464 <__s2b+0x38>
 8025452:	000a      	movs	r2, r1
 8025454:	4b19      	ldr	r3, [pc, #100]	@ (80254bc <__s2b+0x90>)
 8025456:	481a      	ldr	r0, [pc, #104]	@ (80254c0 <__s2b+0x94>)
 8025458:	31d3      	adds	r1, #211	@ 0xd3
 802545a:	f001 f81b 	bl	8026494 <__assert_func>
 802545e:	005b      	lsls	r3, r3, #1
 8025460:	3101      	adds	r1, #1
 8025462:	e7ef      	b.n	8025444 <__s2b+0x18>
 8025464:	9b08      	ldr	r3, [sp, #32]
 8025466:	6143      	str	r3, [r0, #20]
 8025468:	2301      	movs	r3, #1
 802546a:	6103      	str	r3, [r0, #16]
 802546c:	2d09      	cmp	r5, #9
 802546e:	dd18      	ble.n	80254a2 <__s2b+0x76>
 8025470:	0023      	movs	r3, r4
 8025472:	3309      	adds	r3, #9
 8025474:	001e      	movs	r6, r3
 8025476:	9300      	str	r3, [sp, #0]
 8025478:	1964      	adds	r4, r4, r5
 802547a:	7833      	ldrb	r3, [r6, #0]
 802547c:	220a      	movs	r2, #10
 802547e:	0038      	movs	r0, r7
 8025480:	3b30      	subs	r3, #48	@ 0x30
 8025482:	f7ff ff8f 	bl	80253a4 <__multadd>
 8025486:	3601      	adds	r6, #1
 8025488:	0001      	movs	r1, r0
 802548a:	42a6      	cmp	r6, r4
 802548c:	d1f5      	bne.n	802547a <__s2b+0x4e>
 802548e:	002c      	movs	r4, r5
 8025490:	9b00      	ldr	r3, [sp, #0]
 8025492:	3c08      	subs	r4, #8
 8025494:	191c      	adds	r4, r3, r4
 8025496:	002e      	movs	r6, r5
 8025498:	9b01      	ldr	r3, [sp, #4]
 802549a:	429e      	cmp	r6, r3
 802549c:	db04      	blt.n	80254a8 <__s2b+0x7c>
 802549e:	0008      	movs	r0, r1
 80254a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80254a2:	2509      	movs	r5, #9
 80254a4:	340a      	adds	r4, #10
 80254a6:	e7f6      	b.n	8025496 <__s2b+0x6a>
 80254a8:	1b63      	subs	r3, r4, r5
 80254aa:	5d9b      	ldrb	r3, [r3, r6]
 80254ac:	220a      	movs	r2, #10
 80254ae:	0038      	movs	r0, r7
 80254b0:	3b30      	subs	r3, #48	@ 0x30
 80254b2:	f7ff ff77 	bl	80253a4 <__multadd>
 80254b6:	3601      	adds	r6, #1
 80254b8:	0001      	movs	r1, r0
 80254ba:	e7ed      	b.n	8025498 <__s2b+0x6c>
 80254bc:	0802b9b9 	.word	0x0802b9b9
 80254c0:	0802ba2a 	.word	0x0802ba2a

080254c4 <__hi0bits>:
 80254c4:	2280      	movs	r2, #128	@ 0x80
 80254c6:	0003      	movs	r3, r0
 80254c8:	0252      	lsls	r2, r2, #9
 80254ca:	2000      	movs	r0, #0
 80254cc:	4293      	cmp	r3, r2
 80254ce:	d201      	bcs.n	80254d4 <__hi0bits+0x10>
 80254d0:	041b      	lsls	r3, r3, #16
 80254d2:	3010      	adds	r0, #16
 80254d4:	2280      	movs	r2, #128	@ 0x80
 80254d6:	0452      	lsls	r2, r2, #17
 80254d8:	4293      	cmp	r3, r2
 80254da:	d201      	bcs.n	80254e0 <__hi0bits+0x1c>
 80254dc:	3008      	adds	r0, #8
 80254de:	021b      	lsls	r3, r3, #8
 80254e0:	2280      	movs	r2, #128	@ 0x80
 80254e2:	0552      	lsls	r2, r2, #21
 80254e4:	4293      	cmp	r3, r2
 80254e6:	d201      	bcs.n	80254ec <__hi0bits+0x28>
 80254e8:	3004      	adds	r0, #4
 80254ea:	011b      	lsls	r3, r3, #4
 80254ec:	2280      	movs	r2, #128	@ 0x80
 80254ee:	05d2      	lsls	r2, r2, #23
 80254f0:	4293      	cmp	r3, r2
 80254f2:	d201      	bcs.n	80254f8 <__hi0bits+0x34>
 80254f4:	3002      	adds	r0, #2
 80254f6:	009b      	lsls	r3, r3, #2
 80254f8:	2b00      	cmp	r3, #0
 80254fa:	db03      	blt.n	8025504 <__hi0bits+0x40>
 80254fc:	3001      	adds	r0, #1
 80254fe:	4213      	tst	r3, r2
 8025500:	d100      	bne.n	8025504 <__hi0bits+0x40>
 8025502:	2020      	movs	r0, #32
 8025504:	4770      	bx	lr

08025506 <__lo0bits>:
 8025506:	6803      	ldr	r3, [r0, #0]
 8025508:	0001      	movs	r1, r0
 802550a:	2207      	movs	r2, #7
 802550c:	0018      	movs	r0, r3
 802550e:	4010      	ands	r0, r2
 8025510:	4213      	tst	r3, r2
 8025512:	d00d      	beq.n	8025530 <__lo0bits+0x2a>
 8025514:	3a06      	subs	r2, #6
 8025516:	2000      	movs	r0, #0
 8025518:	4213      	tst	r3, r2
 802551a:	d105      	bne.n	8025528 <__lo0bits+0x22>
 802551c:	3002      	adds	r0, #2
 802551e:	4203      	tst	r3, r0
 8025520:	d003      	beq.n	802552a <__lo0bits+0x24>
 8025522:	40d3      	lsrs	r3, r2
 8025524:	0010      	movs	r0, r2
 8025526:	600b      	str	r3, [r1, #0]
 8025528:	4770      	bx	lr
 802552a:	089b      	lsrs	r3, r3, #2
 802552c:	600b      	str	r3, [r1, #0]
 802552e:	e7fb      	b.n	8025528 <__lo0bits+0x22>
 8025530:	b29a      	uxth	r2, r3
 8025532:	2a00      	cmp	r2, #0
 8025534:	d101      	bne.n	802553a <__lo0bits+0x34>
 8025536:	2010      	movs	r0, #16
 8025538:	0c1b      	lsrs	r3, r3, #16
 802553a:	b2da      	uxtb	r2, r3
 802553c:	2a00      	cmp	r2, #0
 802553e:	d101      	bne.n	8025544 <__lo0bits+0x3e>
 8025540:	3008      	adds	r0, #8
 8025542:	0a1b      	lsrs	r3, r3, #8
 8025544:	071a      	lsls	r2, r3, #28
 8025546:	d101      	bne.n	802554c <__lo0bits+0x46>
 8025548:	3004      	adds	r0, #4
 802554a:	091b      	lsrs	r3, r3, #4
 802554c:	079a      	lsls	r2, r3, #30
 802554e:	d101      	bne.n	8025554 <__lo0bits+0x4e>
 8025550:	3002      	adds	r0, #2
 8025552:	089b      	lsrs	r3, r3, #2
 8025554:	07da      	lsls	r2, r3, #31
 8025556:	d4e9      	bmi.n	802552c <__lo0bits+0x26>
 8025558:	3001      	adds	r0, #1
 802555a:	085b      	lsrs	r3, r3, #1
 802555c:	d1e6      	bne.n	802552c <__lo0bits+0x26>
 802555e:	2020      	movs	r0, #32
 8025560:	e7e2      	b.n	8025528 <__lo0bits+0x22>
	...

08025564 <__i2b>:
 8025564:	b510      	push	{r4, lr}
 8025566:	000c      	movs	r4, r1
 8025568:	2101      	movs	r1, #1
 802556a:	f7ff feb3 	bl	80252d4 <_Balloc>
 802556e:	2800      	cmp	r0, #0
 8025570:	d107      	bne.n	8025582 <__i2b+0x1e>
 8025572:	2146      	movs	r1, #70	@ 0x46
 8025574:	4c05      	ldr	r4, [pc, #20]	@ (802558c <__i2b+0x28>)
 8025576:	0002      	movs	r2, r0
 8025578:	4b05      	ldr	r3, [pc, #20]	@ (8025590 <__i2b+0x2c>)
 802557a:	0020      	movs	r0, r4
 802557c:	31ff      	adds	r1, #255	@ 0xff
 802557e:	f000 ff89 	bl	8026494 <__assert_func>
 8025582:	2301      	movs	r3, #1
 8025584:	6144      	str	r4, [r0, #20]
 8025586:	6103      	str	r3, [r0, #16]
 8025588:	bd10      	pop	{r4, pc}
 802558a:	46c0      	nop			@ (mov r8, r8)
 802558c:	0802ba2a 	.word	0x0802ba2a
 8025590:	0802b9b9 	.word	0x0802b9b9

08025594 <__multiply>:
 8025594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025596:	0014      	movs	r4, r2
 8025598:	690a      	ldr	r2, [r1, #16]
 802559a:	6923      	ldr	r3, [r4, #16]
 802559c:	000d      	movs	r5, r1
 802559e:	b08b      	sub	sp, #44	@ 0x2c
 80255a0:	429a      	cmp	r2, r3
 80255a2:	db02      	blt.n	80255aa <__multiply+0x16>
 80255a4:	0023      	movs	r3, r4
 80255a6:	000c      	movs	r4, r1
 80255a8:	001d      	movs	r5, r3
 80255aa:	6927      	ldr	r7, [r4, #16]
 80255ac:	692e      	ldr	r6, [r5, #16]
 80255ae:	6861      	ldr	r1, [r4, #4]
 80255b0:	19bb      	adds	r3, r7, r6
 80255b2:	9303      	str	r3, [sp, #12]
 80255b4:	68a3      	ldr	r3, [r4, #8]
 80255b6:	19ba      	adds	r2, r7, r6
 80255b8:	4293      	cmp	r3, r2
 80255ba:	da00      	bge.n	80255be <__multiply+0x2a>
 80255bc:	3101      	adds	r1, #1
 80255be:	f7ff fe89 	bl	80252d4 <_Balloc>
 80255c2:	9002      	str	r0, [sp, #8]
 80255c4:	2800      	cmp	r0, #0
 80255c6:	d106      	bne.n	80255d6 <__multiply+0x42>
 80255c8:	21b1      	movs	r1, #177	@ 0xb1
 80255ca:	4b49      	ldr	r3, [pc, #292]	@ (80256f0 <__multiply+0x15c>)
 80255cc:	4849      	ldr	r0, [pc, #292]	@ (80256f4 <__multiply+0x160>)
 80255ce:	9a02      	ldr	r2, [sp, #8]
 80255d0:	0049      	lsls	r1, r1, #1
 80255d2:	f000 ff5f 	bl	8026494 <__assert_func>
 80255d6:	9b02      	ldr	r3, [sp, #8]
 80255d8:	2200      	movs	r2, #0
 80255da:	3314      	adds	r3, #20
 80255dc:	469c      	mov	ip, r3
 80255de:	19bb      	adds	r3, r7, r6
 80255e0:	009b      	lsls	r3, r3, #2
 80255e2:	4463      	add	r3, ip
 80255e4:	9304      	str	r3, [sp, #16]
 80255e6:	4663      	mov	r3, ip
 80255e8:	9904      	ldr	r1, [sp, #16]
 80255ea:	428b      	cmp	r3, r1
 80255ec:	d32a      	bcc.n	8025644 <__multiply+0xb0>
 80255ee:	0023      	movs	r3, r4
 80255f0:	00bf      	lsls	r7, r7, #2
 80255f2:	3314      	adds	r3, #20
 80255f4:	3514      	adds	r5, #20
 80255f6:	9308      	str	r3, [sp, #32]
 80255f8:	00b6      	lsls	r6, r6, #2
 80255fa:	19db      	adds	r3, r3, r7
 80255fc:	9305      	str	r3, [sp, #20]
 80255fe:	19ab      	adds	r3, r5, r6
 8025600:	9309      	str	r3, [sp, #36]	@ 0x24
 8025602:	2304      	movs	r3, #4
 8025604:	9306      	str	r3, [sp, #24]
 8025606:	0023      	movs	r3, r4
 8025608:	9a05      	ldr	r2, [sp, #20]
 802560a:	3315      	adds	r3, #21
 802560c:	9501      	str	r5, [sp, #4]
 802560e:	429a      	cmp	r2, r3
 8025610:	d305      	bcc.n	802561e <__multiply+0x8a>
 8025612:	1b13      	subs	r3, r2, r4
 8025614:	3b15      	subs	r3, #21
 8025616:	089b      	lsrs	r3, r3, #2
 8025618:	3301      	adds	r3, #1
 802561a:	009b      	lsls	r3, r3, #2
 802561c:	9306      	str	r3, [sp, #24]
 802561e:	9b01      	ldr	r3, [sp, #4]
 8025620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025622:	4293      	cmp	r3, r2
 8025624:	d310      	bcc.n	8025648 <__multiply+0xb4>
 8025626:	9b03      	ldr	r3, [sp, #12]
 8025628:	2b00      	cmp	r3, #0
 802562a:	dd05      	ble.n	8025638 <__multiply+0xa4>
 802562c:	9b04      	ldr	r3, [sp, #16]
 802562e:	3b04      	subs	r3, #4
 8025630:	9304      	str	r3, [sp, #16]
 8025632:	681b      	ldr	r3, [r3, #0]
 8025634:	2b00      	cmp	r3, #0
 8025636:	d056      	beq.n	80256e6 <__multiply+0x152>
 8025638:	9b02      	ldr	r3, [sp, #8]
 802563a:	9a03      	ldr	r2, [sp, #12]
 802563c:	0018      	movs	r0, r3
 802563e:	611a      	str	r2, [r3, #16]
 8025640:	b00b      	add	sp, #44	@ 0x2c
 8025642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025644:	c304      	stmia	r3!, {r2}
 8025646:	e7cf      	b.n	80255e8 <__multiply+0x54>
 8025648:	9b01      	ldr	r3, [sp, #4]
 802564a:	6818      	ldr	r0, [r3, #0]
 802564c:	b280      	uxth	r0, r0
 802564e:	2800      	cmp	r0, #0
 8025650:	d01e      	beq.n	8025690 <__multiply+0xfc>
 8025652:	4667      	mov	r7, ip
 8025654:	2500      	movs	r5, #0
 8025656:	9e08      	ldr	r6, [sp, #32]
 8025658:	ce02      	ldmia	r6!, {r1}
 802565a:	683b      	ldr	r3, [r7, #0]
 802565c:	9307      	str	r3, [sp, #28]
 802565e:	b28b      	uxth	r3, r1
 8025660:	4343      	muls	r3, r0
 8025662:	001a      	movs	r2, r3
 8025664:	466b      	mov	r3, sp
 8025666:	0c09      	lsrs	r1, r1, #16
 8025668:	8b9b      	ldrh	r3, [r3, #28]
 802566a:	4341      	muls	r1, r0
 802566c:	18d3      	adds	r3, r2, r3
 802566e:	9a07      	ldr	r2, [sp, #28]
 8025670:	195b      	adds	r3, r3, r5
 8025672:	0c12      	lsrs	r2, r2, #16
 8025674:	1889      	adds	r1, r1, r2
 8025676:	0c1a      	lsrs	r2, r3, #16
 8025678:	188a      	adds	r2, r1, r2
 802567a:	b29b      	uxth	r3, r3
 802567c:	0c15      	lsrs	r5, r2, #16
 802567e:	0412      	lsls	r2, r2, #16
 8025680:	431a      	orrs	r2, r3
 8025682:	9b05      	ldr	r3, [sp, #20]
 8025684:	c704      	stmia	r7!, {r2}
 8025686:	42b3      	cmp	r3, r6
 8025688:	d8e6      	bhi.n	8025658 <__multiply+0xc4>
 802568a:	4663      	mov	r3, ip
 802568c:	9a06      	ldr	r2, [sp, #24]
 802568e:	509d      	str	r5, [r3, r2]
 8025690:	9b01      	ldr	r3, [sp, #4]
 8025692:	6818      	ldr	r0, [r3, #0]
 8025694:	0c00      	lsrs	r0, r0, #16
 8025696:	d020      	beq.n	80256da <__multiply+0x146>
 8025698:	4663      	mov	r3, ip
 802569a:	0025      	movs	r5, r4
 802569c:	4661      	mov	r1, ip
 802569e:	2700      	movs	r7, #0
 80256a0:	681b      	ldr	r3, [r3, #0]
 80256a2:	3514      	adds	r5, #20
 80256a4:	682a      	ldr	r2, [r5, #0]
 80256a6:	680e      	ldr	r6, [r1, #0]
 80256a8:	b292      	uxth	r2, r2
 80256aa:	4342      	muls	r2, r0
 80256ac:	0c36      	lsrs	r6, r6, #16
 80256ae:	1992      	adds	r2, r2, r6
 80256b0:	19d2      	adds	r2, r2, r7
 80256b2:	0416      	lsls	r6, r2, #16
 80256b4:	b29b      	uxth	r3, r3
 80256b6:	431e      	orrs	r6, r3
 80256b8:	600e      	str	r6, [r1, #0]
 80256ba:	cd40      	ldmia	r5!, {r6}
 80256bc:	684b      	ldr	r3, [r1, #4]
 80256be:	0c36      	lsrs	r6, r6, #16
 80256c0:	4346      	muls	r6, r0
 80256c2:	b29b      	uxth	r3, r3
 80256c4:	0c12      	lsrs	r2, r2, #16
 80256c6:	18f3      	adds	r3, r6, r3
 80256c8:	189b      	adds	r3, r3, r2
 80256ca:	9a05      	ldr	r2, [sp, #20]
 80256cc:	0c1f      	lsrs	r7, r3, #16
 80256ce:	3104      	adds	r1, #4
 80256d0:	42aa      	cmp	r2, r5
 80256d2:	d8e7      	bhi.n	80256a4 <__multiply+0x110>
 80256d4:	4662      	mov	r2, ip
 80256d6:	9906      	ldr	r1, [sp, #24]
 80256d8:	5053      	str	r3, [r2, r1]
 80256da:	9b01      	ldr	r3, [sp, #4]
 80256dc:	3304      	adds	r3, #4
 80256de:	9301      	str	r3, [sp, #4]
 80256e0:	2304      	movs	r3, #4
 80256e2:	449c      	add	ip, r3
 80256e4:	e79b      	b.n	802561e <__multiply+0x8a>
 80256e6:	9b03      	ldr	r3, [sp, #12]
 80256e8:	3b01      	subs	r3, #1
 80256ea:	9303      	str	r3, [sp, #12]
 80256ec:	e79b      	b.n	8025626 <__multiply+0x92>
 80256ee:	46c0      	nop			@ (mov r8, r8)
 80256f0:	0802b9b9 	.word	0x0802b9b9
 80256f4:	0802ba2a 	.word	0x0802ba2a

080256f8 <__pow5mult>:
 80256f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80256fa:	2303      	movs	r3, #3
 80256fc:	0015      	movs	r5, r2
 80256fe:	0007      	movs	r7, r0
 8025700:	000e      	movs	r6, r1
 8025702:	401a      	ands	r2, r3
 8025704:	421d      	tst	r5, r3
 8025706:	d008      	beq.n	802571a <__pow5mult+0x22>
 8025708:	4925      	ldr	r1, [pc, #148]	@ (80257a0 <__pow5mult+0xa8>)
 802570a:	3a01      	subs	r2, #1
 802570c:	0092      	lsls	r2, r2, #2
 802570e:	5852      	ldr	r2, [r2, r1]
 8025710:	2300      	movs	r3, #0
 8025712:	0031      	movs	r1, r6
 8025714:	f7ff fe46 	bl	80253a4 <__multadd>
 8025718:	0006      	movs	r6, r0
 802571a:	10ad      	asrs	r5, r5, #2
 802571c:	d03d      	beq.n	802579a <__pow5mult+0xa2>
 802571e:	69fc      	ldr	r4, [r7, #28]
 8025720:	2c00      	cmp	r4, #0
 8025722:	d10f      	bne.n	8025744 <__pow5mult+0x4c>
 8025724:	2010      	movs	r0, #16
 8025726:	f7ff fd07 	bl	8025138 <malloc>
 802572a:	1e02      	subs	r2, r0, #0
 802572c:	61f8      	str	r0, [r7, #28]
 802572e:	d105      	bne.n	802573c <__pow5mult+0x44>
 8025730:	21b4      	movs	r1, #180	@ 0xb4
 8025732:	4b1c      	ldr	r3, [pc, #112]	@ (80257a4 <__pow5mult+0xac>)
 8025734:	481c      	ldr	r0, [pc, #112]	@ (80257a8 <__pow5mult+0xb0>)
 8025736:	31ff      	adds	r1, #255	@ 0xff
 8025738:	f000 feac 	bl	8026494 <__assert_func>
 802573c:	6044      	str	r4, [r0, #4]
 802573e:	6084      	str	r4, [r0, #8]
 8025740:	6004      	str	r4, [r0, #0]
 8025742:	60c4      	str	r4, [r0, #12]
 8025744:	69fb      	ldr	r3, [r7, #28]
 8025746:	689c      	ldr	r4, [r3, #8]
 8025748:	9301      	str	r3, [sp, #4]
 802574a:	2c00      	cmp	r4, #0
 802574c:	d108      	bne.n	8025760 <__pow5mult+0x68>
 802574e:	0038      	movs	r0, r7
 8025750:	4916      	ldr	r1, [pc, #88]	@ (80257ac <__pow5mult+0xb4>)
 8025752:	f7ff ff07 	bl	8025564 <__i2b>
 8025756:	9b01      	ldr	r3, [sp, #4]
 8025758:	0004      	movs	r4, r0
 802575a:	6098      	str	r0, [r3, #8]
 802575c:	2300      	movs	r3, #0
 802575e:	6003      	str	r3, [r0, #0]
 8025760:	2301      	movs	r3, #1
 8025762:	421d      	tst	r5, r3
 8025764:	d00a      	beq.n	802577c <__pow5mult+0x84>
 8025766:	0031      	movs	r1, r6
 8025768:	0022      	movs	r2, r4
 802576a:	0038      	movs	r0, r7
 802576c:	f7ff ff12 	bl	8025594 <__multiply>
 8025770:	0031      	movs	r1, r6
 8025772:	9001      	str	r0, [sp, #4]
 8025774:	0038      	movs	r0, r7
 8025776:	f7ff fdf1 	bl	802535c <_Bfree>
 802577a:	9e01      	ldr	r6, [sp, #4]
 802577c:	106d      	asrs	r5, r5, #1
 802577e:	d00c      	beq.n	802579a <__pow5mult+0xa2>
 8025780:	6820      	ldr	r0, [r4, #0]
 8025782:	2800      	cmp	r0, #0
 8025784:	d107      	bne.n	8025796 <__pow5mult+0x9e>
 8025786:	0022      	movs	r2, r4
 8025788:	0021      	movs	r1, r4
 802578a:	0038      	movs	r0, r7
 802578c:	f7ff ff02 	bl	8025594 <__multiply>
 8025790:	2300      	movs	r3, #0
 8025792:	6020      	str	r0, [r4, #0]
 8025794:	6003      	str	r3, [r0, #0]
 8025796:	0004      	movs	r4, r0
 8025798:	e7e2      	b.n	8025760 <__pow5mult+0x68>
 802579a:	0030      	movs	r0, r6
 802579c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802579e:	46c0      	nop			@ (mov r8, r8)
 80257a0:	0802ba84 	.word	0x0802ba84
 80257a4:	0802b94a 	.word	0x0802b94a
 80257a8:	0802ba2a 	.word	0x0802ba2a
 80257ac:	00000271 	.word	0x00000271

080257b0 <__lshift>:
 80257b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80257b2:	000c      	movs	r4, r1
 80257b4:	0016      	movs	r6, r2
 80257b6:	6923      	ldr	r3, [r4, #16]
 80257b8:	1157      	asrs	r7, r2, #5
 80257ba:	b085      	sub	sp, #20
 80257bc:	18fb      	adds	r3, r7, r3
 80257be:	9301      	str	r3, [sp, #4]
 80257c0:	3301      	adds	r3, #1
 80257c2:	9300      	str	r3, [sp, #0]
 80257c4:	6849      	ldr	r1, [r1, #4]
 80257c6:	68a3      	ldr	r3, [r4, #8]
 80257c8:	9002      	str	r0, [sp, #8]
 80257ca:	9a00      	ldr	r2, [sp, #0]
 80257cc:	4293      	cmp	r3, r2
 80257ce:	db10      	blt.n	80257f2 <__lshift+0x42>
 80257d0:	9802      	ldr	r0, [sp, #8]
 80257d2:	f7ff fd7f 	bl	80252d4 <_Balloc>
 80257d6:	2300      	movs	r3, #0
 80257d8:	0001      	movs	r1, r0
 80257da:	0005      	movs	r5, r0
 80257dc:	001a      	movs	r2, r3
 80257de:	3114      	adds	r1, #20
 80257e0:	4298      	cmp	r0, r3
 80257e2:	d10c      	bne.n	80257fe <__lshift+0x4e>
 80257e4:	21ef      	movs	r1, #239	@ 0xef
 80257e6:	002a      	movs	r2, r5
 80257e8:	4b25      	ldr	r3, [pc, #148]	@ (8025880 <__lshift+0xd0>)
 80257ea:	4826      	ldr	r0, [pc, #152]	@ (8025884 <__lshift+0xd4>)
 80257ec:	0049      	lsls	r1, r1, #1
 80257ee:	f000 fe51 	bl	8026494 <__assert_func>
 80257f2:	3101      	adds	r1, #1
 80257f4:	005b      	lsls	r3, r3, #1
 80257f6:	e7e8      	b.n	80257ca <__lshift+0x1a>
 80257f8:	0098      	lsls	r0, r3, #2
 80257fa:	500a      	str	r2, [r1, r0]
 80257fc:	3301      	adds	r3, #1
 80257fe:	42bb      	cmp	r3, r7
 8025800:	dbfa      	blt.n	80257f8 <__lshift+0x48>
 8025802:	43fb      	mvns	r3, r7
 8025804:	17db      	asrs	r3, r3, #31
 8025806:	401f      	ands	r7, r3
 8025808:	00bf      	lsls	r7, r7, #2
 802580a:	0023      	movs	r3, r4
 802580c:	201f      	movs	r0, #31
 802580e:	19c9      	adds	r1, r1, r7
 8025810:	0037      	movs	r7, r6
 8025812:	6922      	ldr	r2, [r4, #16]
 8025814:	3314      	adds	r3, #20
 8025816:	0092      	lsls	r2, r2, #2
 8025818:	189a      	adds	r2, r3, r2
 802581a:	4007      	ands	r7, r0
 802581c:	4206      	tst	r6, r0
 802581e:	d029      	beq.n	8025874 <__lshift+0xc4>
 8025820:	3001      	adds	r0, #1
 8025822:	1bc0      	subs	r0, r0, r7
 8025824:	9003      	str	r0, [sp, #12]
 8025826:	468c      	mov	ip, r1
 8025828:	2000      	movs	r0, #0
 802582a:	681e      	ldr	r6, [r3, #0]
 802582c:	40be      	lsls	r6, r7
 802582e:	4306      	orrs	r6, r0
 8025830:	4660      	mov	r0, ip
 8025832:	c040      	stmia	r0!, {r6}
 8025834:	4684      	mov	ip, r0
 8025836:	9e03      	ldr	r6, [sp, #12]
 8025838:	cb01      	ldmia	r3!, {r0}
 802583a:	40f0      	lsrs	r0, r6
 802583c:	429a      	cmp	r2, r3
 802583e:	d8f4      	bhi.n	802582a <__lshift+0x7a>
 8025840:	0026      	movs	r6, r4
 8025842:	3615      	adds	r6, #21
 8025844:	2304      	movs	r3, #4
 8025846:	42b2      	cmp	r2, r6
 8025848:	d304      	bcc.n	8025854 <__lshift+0xa4>
 802584a:	1b13      	subs	r3, r2, r4
 802584c:	3b15      	subs	r3, #21
 802584e:	089b      	lsrs	r3, r3, #2
 8025850:	3301      	adds	r3, #1
 8025852:	009b      	lsls	r3, r3, #2
 8025854:	50c8      	str	r0, [r1, r3]
 8025856:	2800      	cmp	r0, #0
 8025858:	d002      	beq.n	8025860 <__lshift+0xb0>
 802585a:	9b01      	ldr	r3, [sp, #4]
 802585c:	3302      	adds	r3, #2
 802585e:	9300      	str	r3, [sp, #0]
 8025860:	9b00      	ldr	r3, [sp, #0]
 8025862:	9802      	ldr	r0, [sp, #8]
 8025864:	3b01      	subs	r3, #1
 8025866:	0021      	movs	r1, r4
 8025868:	612b      	str	r3, [r5, #16]
 802586a:	f7ff fd77 	bl	802535c <_Bfree>
 802586e:	0028      	movs	r0, r5
 8025870:	b005      	add	sp, #20
 8025872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025874:	cb01      	ldmia	r3!, {r0}
 8025876:	c101      	stmia	r1!, {r0}
 8025878:	429a      	cmp	r2, r3
 802587a:	d8fb      	bhi.n	8025874 <__lshift+0xc4>
 802587c:	e7f0      	b.n	8025860 <__lshift+0xb0>
 802587e:	46c0      	nop			@ (mov r8, r8)
 8025880:	0802b9b9 	.word	0x0802b9b9
 8025884:	0802ba2a 	.word	0x0802ba2a

08025888 <__mcmp>:
 8025888:	b530      	push	{r4, r5, lr}
 802588a:	690b      	ldr	r3, [r1, #16]
 802588c:	6904      	ldr	r4, [r0, #16]
 802588e:	0002      	movs	r2, r0
 8025890:	1ae0      	subs	r0, r4, r3
 8025892:	429c      	cmp	r4, r3
 8025894:	d10f      	bne.n	80258b6 <__mcmp+0x2e>
 8025896:	3214      	adds	r2, #20
 8025898:	009b      	lsls	r3, r3, #2
 802589a:	3114      	adds	r1, #20
 802589c:	0014      	movs	r4, r2
 802589e:	18c9      	adds	r1, r1, r3
 80258a0:	18d2      	adds	r2, r2, r3
 80258a2:	3a04      	subs	r2, #4
 80258a4:	3904      	subs	r1, #4
 80258a6:	6815      	ldr	r5, [r2, #0]
 80258a8:	680b      	ldr	r3, [r1, #0]
 80258aa:	429d      	cmp	r5, r3
 80258ac:	d004      	beq.n	80258b8 <__mcmp+0x30>
 80258ae:	2001      	movs	r0, #1
 80258b0:	429d      	cmp	r5, r3
 80258b2:	d200      	bcs.n	80258b6 <__mcmp+0x2e>
 80258b4:	3802      	subs	r0, #2
 80258b6:	bd30      	pop	{r4, r5, pc}
 80258b8:	4294      	cmp	r4, r2
 80258ba:	d3f2      	bcc.n	80258a2 <__mcmp+0x1a>
 80258bc:	e7fb      	b.n	80258b6 <__mcmp+0x2e>
	...

080258c0 <__mdiff>:
 80258c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80258c2:	000c      	movs	r4, r1
 80258c4:	b087      	sub	sp, #28
 80258c6:	9000      	str	r0, [sp, #0]
 80258c8:	0011      	movs	r1, r2
 80258ca:	0020      	movs	r0, r4
 80258cc:	0017      	movs	r7, r2
 80258ce:	f7ff ffdb 	bl	8025888 <__mcmp>
 80258d2:	1e05      	subs	r5, r0, #0
 80258d4:	d110      	bne.n	80258f8 <__mdiff+0x38>
 80258d6:	0001      	movs	r1, r0
 80258d8:	9800      	ldr	r0, [sp, #0]
 80258da:	f7ff fcfb 	bl	80252d4 <_Balloc>
 80258de:	1e02      	subs	r2, r0, #0
 80258e0:	d104      	bne.n	80258ec <__mdiff+0x2c>
 80258e2:	4b40      	ldr	r3, [pc, #256]	@ (80259e4 <__mdiff+0x124>)
 80258e4:	4840      	ldr	r0, [pc, #256]	@ (80259e8 <__mdiff+0x128>)
 80258e6:	4941      	ldr	r1, [pc, #260]	@ (80259ec <__mdiff+0x12c>)
 80258e8:	f000 fdd4 	bl	8026494 <__assert_func>
 80258ec:	2301      	movs	r3, #1
 80258ee:	6145      	str	r5, [r0, #20]
 80258f0:	6103      	str	r3, [r0, #16]
 80258f2:	0010      	movs	r0, r2
 80258f4:	b007      	add	sp, #28
 80258f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80258f8:	2600      	movs	r6, #0
 80258fa:	42b0      	cmp	r0, r6
 80258fc:	da03      	bge.n	8025906 <__mdiff+0x46>
 80258fe:	0023      	movs	r3, r4
 8025900:	003c      	movs	r4, r7
 8025902:	001f      	movs	r7, r3
 8025904:	3601      	adds	r6, #1
 8025906:	6861      	ldr	r1, [r4, #4]
 8025908:	9800      	ldr	r0, [sp, #0]
 802590a:	f7ff fce3 	bl	80252d4 <_Balloc>
 802590e:	1e02      	subs	r2, r0, #0
 8025910:	d103      	bne.n	802591a <__mdiff+0x5a>
 8025912:	4b34      	ldr	r3, [pc, #208]	@ (80259e4 <__mdiff+0x124>)
 8025914:	4834      	ldr	r0, [pc, #208]	@ (80259e8 <__mdiff+0x128>)
 8025916:	4936      	ldr	r1, [pc, #216]	@ (80259f0 <__mdiff+0x130>)
 8025918:	e7e6      	b.n	80258e8 <__mdiff+0x28>
 802591a:	6923      	ldr	r3, [r4, #16]
 802591c:	3414      	adds	r4, #20
 802591e:	9300      	str	r3, [sp, #0]
 8025920:	009b      	lsls	r3, r3, #2
 8025922:	18e3      	adds	r3, r4, r3
 8025924:	0021      	movs	r1, r4
 8025926:	9401      	str	r4, [sp, #4]
 8025928:	003c      	movs	r4, r7
 802592a:	9302      	str	r3, [sp, #8]
 802592c:	693b      	ldr	r3, [r7, #16]
 802592e:	3414      	adds	r4, #20
 8025930:	009b      	lsls	r3, r3, #2
 8025932:	18e3      	adds	r3, r4, r3
 8025934:	9303      	str	r3, [sp, #12]
 8025936:	0003      	movs	r3, r0
 8025938:	60c6      	str	r6, [r0, #12]
 802593a:	468c      	mov	ip, r1
 802593c:	2000      	movs	r0, #0
 802593e:	3314      	adds	r3, #20
 8025940:	9304      	str	r3, [sp, #16]
 8025942:	9305      	str	r3, [sp, #20]
 8025944:	4663      	mov	r3, ip
 8025946:	cb20      	ldmia	r3!, {r5}
 8025948:	b2a9      	uxth	r1, r5
 802594a:	000e      	movs	r6, r1
 802594c:	469c      	mov	ip, r3
 802594e:	cc08      	ldmia	r4!, {r3}
 8025950:	0c2d      	lsrs	r5, r5, #16
 8025952:	b299      	uxth	r1, r3
 8025954:	1a71      	subs	r1, r6, r1
 8025956:	1809      	adds	r1, r1, r0
 8025958:	0c1b      	lsrs	r3, r3, #16
 802595a:	1408      	asrs	r0, r1, #16
 802595c:	1aeb      	subs	r3, r5, r3
 802595e:	181b      	adds	r3, r3, r0
 8025960:	1418      	asrs	r0, r3, #16
 8025962:	b289      	uxth	r1, r1
 8025964:	041b      	lsls	r3, r3, #16
 8025966:	4319      	orrs	r1, r3
 8025968:	9b05      	ldr	r3, [sp, #20]
 802596a:	c302      	stmia	r3!, {r1}
 802596c:	9305      	str	r3, [sp, #20]
 802596e:	9b03      	ldr	r3, [sp, #12]
 8025970:	42a3      	cmp	r3, r4
 8025972:	d8e7      	bhi.n	8025944 <__mdiff+0x84>
 8025974:	0039      	movs	r1, r7
 8025976:	9c03      	ldr	r4, [sp, #12]
 8025978:	3115      	adds	r1, #21
 802597a:	2304      	movs	r3, #4
 802597c:	428c      	cmp	r4, r1
 802597e:	d304      	bcc.n	802598a <__mdiff+0xca>
 8025980:	1be3      	subs	r3, r4, r7
 8025982:	3b15      	subs	r3, #21
 8025984:	089b      	lsrs	r3, r3, #2
 8025986:	3301      	adds	r3, #1
 8025988:	009b      	lsls	r3, r3, #2
 802598a:	9901      	ldr	r1, [sp, #4]
 802598c:	18cd      	adds	r5, r1, r3
 802598e:	9904      	ldr	r1, [sp, #16]
 8025990:	002e      	movs	r6, r5
 8025992:	18cb      	adds	r3, r1, r3
 8025994:	001f      	movs	r7, r3
 8025996:	9902      	ldr	r1, [sp, #8]
 8025998:	428e      	cmp	r6, r1
 802599a:	d311      	bcc.n	80259c0 <__mdiff+0x100>
 802599c:	9c02      	ldr	r4, [sp, #8]
 802599e:	1ee9      	subs	r1, r5, #3
 80259a0:	2000      	movs	r0, #0
 80259a2:	428c      	cmp	r4, r1
 80259a4:	d304      	bcc.n	80259b0 <__mdiff+0xf0>
 80259a6:	0021      	movs	r1, r4
 80259a8:	3103      	adds	r1, #3
 80259aa:	1b49      	subs	r1, r1, r5
 80259ac:	0889      	lsrs	r1, r1, #2
 80259ae:	0088      	lsls	r0, r1, #2
 80259b0:	181b      	adds	r3, r3, r0
 80259b2:	3b04      	subs	r3, #4
 80259b4:	6819      	ldr	r1, [r3, #0]
 80259b6:	2900      	cmp	r1, #0
 80259b8:	d010      	beq.n	80259dc <__mdiff+0x11c>
 80259ba:	9b00      	ldr	r3, [sp, #0]
 80259bc:	6113      	str	r3, [r2, #16]
 80259be:	e798      	b.n	80258f2 <__mdiff+0x32>
 80259c0:	4684      	mov	ip, r0
 80259c2:	ce02      	ldmia	r6!, {r1}
 80259c4:	b288      	uxth	r0, r1
 80259c6:	4460      	add	r0, ip
 80259c8:	1400      	asrs	r0, r0, #16
 80259ca:	0c0c      	lsrs	r4, r1, #16
 80259cc:	1904      	adds	r4, r0, r4
 80259ce:	4461      	add	r1, ip
 80259d0:	1420      	asrs	r0, r4, #16
 80259d2:	b289      	uxth	r1, r1
 80259d4:	0424      	lsls	r4, r4, #16
 80259d6:	4321      	orrs	r1, r4
 80259d8:	c702      	stmia	r7!, {r1}
 80259da:	e7dc      	b.n	8025996 <__mdiff+0xd6>
 80259dc:	9900      	ldr	r1, [sp, #0]
 80259de:	3901      	subs	r1, #1
 80259e0:	9100      	str	r1, [sp, #0]
 80259e2:	e7e6      	b.n	80259b2 <__mdiff+0xf2>
 80259e4:	0802b9b9 	.word	0x0802b9b9
 80259e8:	0802ba2a 	.word	0x0802ba2a
 80259ec:	00000237 	.word	0x00000237
 80259f0:	00000245 	.word	0x00000245

080259f4 <__ulp>:
 80259f4:	b510      	push	{r4, lr}
 80259f6:	2400      	movs	r4, #0
 80259f8:	4b0c      	ldr	r3, [pc, #48]	@ (8025a2c <__ulp+0x38>)
 80259fa:	4a0d      	ldr	r2, [pc, #52]	@ (8025a30 <__ulp+0x3c>)
 80259fc:	400b      	ands	r3, r1
 80259fe:	189b      	adds	r3, r3, r2
 8025a00:	42a3      	cmp	r3, r4
 8025a02:	dc06      	bgt.n	8025a12 <__ulp+0x1e>
 8025a04:	425b      	negs	r3, r3
 8025a06:	151a      	asrs	r2, r3, #20
 8025a08:	2a13      	cmp	r2, #19
 8025a0a:	dc05      	bgt.n	8025a18 <__ulp+0x24>
 8025a0c:	2380      	movs	r3, #128	@ 0x80
 8025a0e:	031b      	lsls	r3, r3, #12
 8025a10:	4113      	asrs	r3, r2
 8025a12:	0019      	movs	r1, r3
 8025a14:	0020      	movs	r0, r4
 8025a16:	bd10      	pop	{r4, pc}
 8025a18:	3a14      	subs	r2, #20
 8025a1a:	2401      	movs	r4, #1
 8025a1c:	2a1e      	cmp	r2, #30
 8025a1e:	dc02      	bgt.n	8025a26 <__ulp+0x32>
 8025a20:	2480      	movs	r4, #128	@ 0x80
 8025a22:	0624      	lsls	r4, r4, #24
 8025a24:	40d4      	lsrs	r4, r2
 8025a26:	2300      	movs	r3, #0
 8025a28:	e7f3      	b.n	8025a12 <__ulp+0x1e>
 8025a2a:	46c0      	nop			@ (mov r8, r8)
 8025a2c:	7ff00000 	.word	0x7ff00000
 8025a30:	fcc00000 	.word	0xfcc00000

08025a34 <__b2d>:
 8025a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025a36:	0006      	movs	r6, r0
 8025a38:	6903      	ldr	r3, [r0, #16]
 8025a3a:	3614      	adds	r6, #20
 8025a3c:	009b      	lsls	r3, r3, #2
 8025a3e:	18f3      	adds	r3, r6, r3
 8025a40:	1f1d      	subs	r5, r3, #4
 8025a42:	682c      	ldr	r4, [r5, #0]
 8025a44:	000f      	movs	r7, r1
 8025a46:	0020      	movs	r0, r4
 8025a48:	9301      	str	r3, [sp, #4]
 8025a4a:	f7ff fd3b 	bl	80254c4 <__hi0bits>
 8025a4e:	2220      	movs	r2, #32
 8025a50:	1a12      	subs	r2, r2, r0
 8025a52:	603a      	str	r2, [r7, #0]
 8025a54:	0003      	movs	r3, r0
 8025a56:	4a1c      	ldr	r2, [pc, #112]	@ (8025ac8 <__b2d+0x94>)
 8025a58:	280a      	cmp	r0, #10
 8025a5a:	dc15      	bgt.n	8025a88 <__b2d+0x54>
 8025a5c:	210b      	movs	r1, #11
 8025a5e:	0027      	movs	r7, r4
 8025a60:	1a09      	subs	r1, r1, r0
 8025a62:	40cf      	lsrs	r7, r1
 8025a64:	433a      	orrs	r2, r7
 8025a66:	468c      	mov	ip, r1
 8025a68:	0011      	movs	r1, r2
 8025a6a:	2200      	movs	r2, #0
 8025a6c:	42ae      	cmp	r6, r5
 8025a6e:	d202      	bcs.n	8025a76 <__b2d+0x42>
 8025a70:	9a01      	ldr	r2, [sp, #4]
 8025a72:	3a08      	subs	r2, #8
 8025a74:	6812      	ldr	r2, [r2, #0]
 8025a76:	3315      	adds	r3, #21
 8025a78:	409c      	lsls	r4, r3
 8025a7a:	4663      	mov	r3, ip
 8025a7c:	0027      	movs	r7, r4
 8025a7e:	40da      	lsrs	r2, r3
 8025a80:	4317      	orrs	r7, r2
 8025a82:	0038      	movs	r0, r7
 8025a84:	b003      	add	sp, #12
 8025a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a88:	2700      	movs	r7, #0
 8025a8a:	42ae      	cmp	r6, r5
 8025a8c:	d202      	bcs.n	8025a94 <__b2d+0x60>
 8025a8e:	9d01      	ldr	r5, [sp, #4]
 8025a90:	3d08      	subs	r5, #8
 8025a92:	682f      	ldr	r7, [r5, #0]
 8025a94:	210b      	movs	r1, #11
 8025a96:	4249      	negs	r1, r1
 8025a98:	468c      	mov	ip, r1
 8025a9a:	449c      	add	ip, r3
 8025a9c:	2b0b      	cmp	r3, #11
 8025a9e:	d010      	beq.n	8025ac2 <__b2d+0x8e>
 8025aa0:	4661      	mov	r1, ip
 8025aa2:	2320      	movs	r3, #32
 8025aa4:	408c      	lsls	r4, r1
 8025aa6:	1a5b      	subs	r3, r3, r1
 8025aa8:	0039      	movs	r1, r7
 8025aaa:	40d9      	lsrs	r1, r3
 8025aac:	430c      	orrs	r4, r1
 8025aae:	4322      	orrs	r2, r4
 8025ab0:	0011      	movs	r1, r2
 8025ab2:	2200      	movs	r2, #0
 8025ab4:	42b5      	cmp	r5, r6
 8025ab6:	d901      	bls.n	8025abc <__b2d+0x88>
 8025ab8:	3d04      	subs	r5, #4
 8025aba:	682a      	ldr	r2, [r5, #0]
 8025abc:	4664      	mov	r4, ip
 8025abe:	40a7      	lsls	r7, r4
 8025ac0:	e7dd      	b.n	8025a7e <__b2d+0x4a>
 8025ac2:	4322      	orrs	r2, r4
 8025ac4:	0011      	movs	r1, r2
 8025ac6:	e7dc      	b.n	8025a82 <__b2d+0x4e>
 8025ac8:	3ff00000 	.word	0x3ff00000

08025acc <__d2b>:
 8025acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025ace:	2101      	movs	r1, #1
 8025ad0:	0016      	movs	r6, r2
 8025ad2:	001f      	movs	r7, r3
 8025ad4:	f7ff fbfe 	bl	80252d4 <_Balloc>
 8025ad8:	1e04      	subs	r4, r0, #0
 8025ada:	d105      	bne.n	8025ae8 <__d2b+0x1c>
 8025adc:	0022      	movs	r2, r4
 8025ade:	4b25      	ldr	r3, [pc, #148]	@ (8025b74 <__d2b+0xa8>)
 8025ae0:	4825      	ldr	r0, [pc, #148]	@ (8025b78 <__d2b+0xac>)
 8025ae2:	4926      	ldr	r1, [pc, #152]	@ (8025b7c <__d2b+0xb0>)
 8025ae4:	f000 fcd6 	bl	8026494 <__assert_func>
 8025ae8:	033b      	lsls	r3, r7, #12
 8025aea:	007d      	lsls	r5, r7, #1
 8025aec:	0b1b      	lsrs	r3, r3, #12
 8025aee:	0d6d      	lsrs	r5, r5, #21
 8025af0:	d002      	beq.n	8025af8 <__d2b+0x2c>
 8025af2:	2280      	movs	r2, #128	@ 0x80
 8025af4:	0352      	lsls	r2, r2, #13
 8025af6:	4313      	orrs	r3, r2
 8025af8:	9301      	str	r3, [sp, #4]
 8025afa:	2e00      	cmp	r6, #0
 8025afc:	d025      	beq.n	8025b4a <__d2b+0x7e>
 8025afe:	4668      	mov	r0, sp
 8025b00:	9600      	str	r6, [sp, #0]
 8025b02:	f7ff fd00 	bl	8025506 <__lo0bits>
 8025b06:	9b01      	ldr	r3, [sp, #4]
 8025b08:	9900      	ldr	r1, [sp, #0]
 8025b0a:	2800      	cmp	r0, #0
 8025b0c:	d01b      	beq.n	8025b46 <__d2b+0x7a>
 8025b0e:	2220      	movs	r2, #32
 8025b10:	001e      	movs	r6, r3
 8025b12:	1a12      	subs	r2, r2, r0
 8025b14:	4096      	lsls	r6, r2
 8025b16:	0032      	movs	r2, r6
 8025b18:	40c3      	lsrs	r3, r0
 8025b1a:	430a      	orrs	r2, r1
 8025b1c:	6162      	str	r2, [r4, #20]
 8025b1e:	9301      	str	r3, [sp, #4]
 8025b20:	9e01      	ldr	r6, [sp, #4]
 8025b22:	61a6      	str	r6, [r4, #24]
 8025b24:	1e73      	subs	r3, r6, #1
 8025b26:	419e      	sbcs	r6, r3
 8025b28:	3601      	adds	r6, #1
 8025b2a:	6126      	str	r6, [r4, #16]
 8025b2c:	2d00      	cmp	r5, #0
 8025b2e:	d014      	beq.n	8025b5a <__d2b+0x8e>
 8025b30:	2635      	movs	r6, #53	@ 0x35
 8025b32:	4b13      	ldr	r3, [pc, #76]	@ (8025b80 <__d2b+0xb4>)
 8025b34:	18ed      	adds	r5, r5, r3
 8025b36:	9b08      	ldr	r3, [sp, #32]
 8025b38:	182d      	adds	r5, r5, r0
 8025b3a:	601d      	str	r5, [r3, #0]
 8025b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b3e:	1a36      	subs	r6, r6, r0
 8025b40:	601e      	str	r6, [r3, #0]
 8025b42:	0020      	movs	r0, r4
 8025b44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025b46:	6161      	str	r1, [r4, #20]
 8025b48:	e7ea      	b.n	8025b20 <__d2b+0x54>
 8025b4a:	a801      	add	r0, sp, #4
 8025b4c:	f7ff fcdb 	bl	8025506 <__lo0bits>
 8025b50:	9b01      	ldr	r3, [sp, #4]
 8025b52:	2601      	movs	r6, #1
 8025b54:	6163      	str	r3, [r4, #20]
 8025b56:	3020      	adds	r0, #32
 8025b58:	e7e7      	b.n	8025b2a <__d2b+0x5e>
 8025b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8025b84 <__d2b+0xb8>)
 8025b5c:	18c0      	adds	r0, r0, r3
 8025b5e:	9b08      	ldr	r3, [sp, #32]
 8025b60:	6018      	str	r0, [r3, #0]
 8025b62:	4b09      	ldr	r3, [pc, #36]	@ (8025b88 <__d2b+0xbc>)
 8025b64:	18f3      	adds	r3, r6, r3
 8025b66:	009b      	lsls	r3, r3, #2
 8025b68:	18e3      	adds	r3, r4, r3
 8025b6a:	6958      	ldr	r0, [r3, #20]
 8025b6c:	f7ff fcaa 	bl	80254c4 <__hi0bits>
 8025b70:	0176      	lsls	r6, r6, #5
 8025b72:	e7e3      	b.n	8025b3c <__d2b+0x70>
 8025b74:	0802b9b9 	.word	0x0802b9b9
 8025b78:	0802ba2a 	.word	0x0802ba2a
 8025b7c:	0000030f 	.word	0x0000030f
 8025b80:	fffffbcd 	.word	0xfffffbcd
 8025b84:	fffffbce 	.word	0xfffffbce
 8025b88:	3fffffff 	.word	0x3fffffff

08025b8c <__ratio>:
 8025b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b8e:	b087      	sub	sp, #28
 8025b90:	000f      	movs	r7, r1
 8025b92:	a904      	add	r1, sp, #16
 8025b94:	0006      	movs	r6, r0
 8025b96:	f7ff ff4d 	bl	8025a34 <__b2d>
 8025b9a:	9000      	str	r0, [sp, #0]
 8025b9c:	9101      	str	r1, [sp, #4]
 8025b9e:	9b00      	ldr	r3, [sp, #0]
 8025ba0:	9c01      	ldr	r4, [sp, #4]
 8025ba2:	0038      	movs	r0, r7
 8025ba4:	a905      	add	r1, sp, #20
 8025ba6:	9302      	str	r3, [sp, #8]
 8025ba8:	9403      	str	r4, [sp, #12]
 8025baa:	f7ff ff43 	bl	8025a34 <__b2d>
 8025bae:	000d      	movs	r5, r1
 8025bb0:	0002      	movs	r2, r0
 8025bb2:	000b      	movs	r3, r1
 8025bb4:	6930      	ldr	r0, [r6, #16]
 8025bb6:	6939      	ldr	r1, [r7, #16]
 8025bb8:	9e04      	ldr	r6, [sp, #16]
 8025bba:	1a40      	subs	r0, r0, r1
 8025bbc:	9905      	ldr	r1, [sp, #20]
 8025bbe:	0140      	lsls	r0, r0, #5
 8025bc0:	1a71      	subs	r1, r6, r1
 8025bc2:	1841      	adds	r1, r0, r1
 8025bc4:	0508      	lsls	r0, r1, #20
 8025bc6:	2900      	cmp	r1, #0
 8025bc8:	dd08      	ble.n	8025bdc <__ratio+0x50>
 8025bca:	9901      	ldr	r1, [sp, #4]
 8025bcc:	1841      	adds	r1, r0, r1
 8025bce:	9103      	str	r1, [sp, #12]
 8025bd0:	9802      	ldr	r0, [sp, #8]
 8025bd2:	9903      	ldr	r1, [sp, #12]
 8025bd4:	f7dc f8ee 	bl	8001db4 <__aeabi_ddiv>
 8025bd8:	b007      	add	sp, #28
 8025bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025bdc:	1a2b      	subs	r3, r5, r0
 8025bde:	e7f7      	b.n	8025bd0 <__ratio+0x44>

08025be0 <__copybits>:
 8025be0:	b570      	push	{r4, r5, r6, lr}
 8025be2:	0014      	movs	r4, r2
 8025be4:	0005      	movs	r5, r0
 8025be6:	3901      	subs	r1, #1
 8025be8:	6913      	ldr	r3, [r2, #16]
 8025bea:	1149      	asrs	r1, r1, #5
 8025bec:	3101      	adds	r1, #1
 8025bee:	0089      	lsls	r1, r1, #2
 8025bf0:	3414      	adds	r4, #20
 8025bf2:	009b      	lsls	r3, r3, #2
 8025bf4:	1841      	adds	r1, r0, r1
 8025bf6:	18e3      	adds	r3, r4, r3
 8025bf8:	42a3      	cmp	r3, r4
 8025bfa:	d80d      	bhi.n	8025c18 <__copybits+0x38>
 8025bfc:	0014      	movs	r4, r2
 8025bfe:	3411      	adds	r4, #17
 8025c00:	2500      	movs	r5, #0
 8025c02:	429c      	cmp	r4, r3
 8025c04:	d803      	bhi.n	8025c0e <__copybits+0x2e>
 8025c06:	1a9b      	subs	r3, r3, r2
 8025c08:	3b11      	subs	r3, #17
 8025c0a:	089b      	lsrs	r3, r3, #2
 8025c0c:	009d      	lsls	r5, r3, #2
 8025c0e:	2300      	movs	r3, #0
 8025c10:	1940      	adds	r0, r0, r5
 8025c12:	4281      	cmp	r1, r0
 8025c14:	d803      	bhi.n	8025c1e <__copybits+0x3e>
 8025c16:	bd70      	pop	{r4, r5, r6, pc}
 8025c18:	cc40      	ldmia	r4!, {r6}
 8025c1a:	c540      	stmia	r5!, {r6}
 8025c1c:	e7ec      	b.n	8025bf8 <__copybits+0x18>
 8025c1e:	c008      	stmia	r0!, {r3}
 8025c20:	e7f7      	b.n	8025c12 <__copybits+0x32>

08025c22 <__any_on>:
 8025c22:	0002      	movs	r2, r0
 8025c24:	6900      	ldr	r0, [r0, #16]
 8025c26:	b510      	push	{r4, lr}
 8025c28:	3214      	adds	r2, #20
 8025c2a:	114b      	asrs	r3, r1, #5
 8025c2c:	4298      	cmp	r0, r3
 8025c2e:	db13      	blt.n	8025c58 <__any_on+0x36>
 8025c30:	dd0c      	ble.n	8025c4c <__any_on+0x2a>
 8025c32:	241f      	movs	r4, #31
 8025c34:	0008      	movs	r0, r1
 8025c36:	4020      	ands	r0, r4
 8025c38:	4221      	tst	r1, r4
 8025c3a:	d007      	beq.n	8025c4c <__any_on+0x2a>
 8025c3c:	0099      	lsls	r1, r3, #2
 8025c3e:	588c      	ldr	r4, [r1, r2]
 8025c40:	0021      	movs	r1, r4
 8025c42:	40c1      	lsrs	r1, r0
 8025c44:	4081      	lsls	r1, r0
 8025c46:	2001      	movs	r0, #1
 8025c48:	428c      	cmp	r4, r1
 8025c4a:	d104      	bne.n	8025c56 <__any_on+0x34>
 8025c4c:	009b      	lsls	r3, r3, #2
 8025c4e:	18d3      	adds	r3, r2, r3
 8025c50:	4293      	cmp	r3, r2
 8025c52:	d803      	bhi.n	8025c5c <__any_on+0x3a>
 8025c54:	2000      	movs	r0, #0
 8025c56:	bd10      	pop	{r4, pc}
 8025c58:	0003      	movs	r3, r0
 8025c5a:	e7f7      	b.n	8025c4c <__any_on+0x2a>
 8025c5c:	3b04      	subs	r3, #4
 8025c5e:	6819      	ldr	r1, [r3, #0]
 8025c60:	2900      	cmp	r1, #0
 8025c62:	d0f5      	beq.n	8025c50 <__any_on+0x2e>
 8025c64:	2001      	movs	r0, #1
 8025c66:	e7f6      	b.n	8025c56 <__any_on+0x34>

08025c68 <__ascii_wctomb>:
 8025c68:	0003      	movs	r3, r0
 8025c6a:	1e08      	subs	r0, r1, #0
 8025c6c:	d005      	beq.n	8025c7a <__ascii_wctomb+0x12>
 8025c6e:	2aff      	cmp	r2, #255	@ 0xff
 8025c70:	d904      	bls.n	8025c7c <__ascii_wctomb+0x14>
 8025c72:	228a      	movs	r2, #138	@ 0x8a
 8025c74:	2001      	movs	r0, #1
 8025c76:	601a      	str	r2, [r3, #0]
 8025c78:	4240      	negs	r0, r0
 8025c7a:	4770      	bx	lr
 8025c7c:	2001      	movs	r0, #1
 8025c7e:	700a      	strb	r2, [r1, #0]
 8025c80:	e7fb      	b.n	8025c7a <__ascii_wctomb+0x12>
	...

08025c84 <__ssputs_r>:
 8025c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025c86:	688e      	ldr	r6, [r1, #8]
 8025c88:	b085      	sub	sp, #20
 8025c8a:	001f      	movs	r7, r3
 8025c8c:	000c      	movs	r4, r1
 8025c8e:	680b      	ldr	r3, [r1, #0]
 8025c90:	9002      	str	r0, [sp, #8]
 8025c92:	9203      	str	r2, [sp, #12]
 8025c94:	42be      	cmp	r6, r7
 8025c96:	d830      	bhi.n	8025cfa <__ssputs_r+0x76>
 8025c98:	210c      	movs	r1, #12
 8025c9a:	5e62      	ldrsh	r2, [r4, r1]
 8025c9c:	2190      	movs	r1, #144	@ 0x90
 8025c9e:	00c9      	lsls	r1, r1, #3
 8025ca0:	420a      	tst	r2, r1
 8025ca2:	d028      	beq.n	8025cf6 <__ssputs_r+0x72>
 8025ca4:	2003      	movs	r0, #3
 8025ca6:	6921      	ldr	r1, [r4, #16]
 8025ca8:	1a5b      	subs	r3, r3, r1
 8025caa:	9301      	str	r3, [sp, #4]
 8025cac:	6963      	ldr	r3, [r4, #20]
 8025cae:	4343      	muls	r3, r0
 8025cb0:	9801      	ldr	r0, [sp, #4]
 8025cb2:	0fdd      	lsrs	r5, r3, #31
 8025cb4:	18ed      	adds	r5, r5, r3
 8025cb6:	1c7b      	adds	r3, r7, #1
 8025cb8:	181b      	adds	r3, r3, r0
 8025cba:	106d      	asrs	r5, r5, #1
 8025cbc:	42ab      	cmp	r3, r5
 8025cbe:	d900      	bls.n	8025cc2 <__ssputs_r+0x3e>
 8025cc0:	001d      	movs	r5, r3
 8025cc2:	0552      	lsls	r2, r2, #21
 8025cc4:	d528      	bpl.n	8025d18 <__ssputs_r+0x94>
 8025cc6:	0029      	movs	r1, r5
 8025cc8:	9802      	ldr	r0, [sp, #8]
 8025cca:	f7ff fa61 	bl	8025190 <_malloc_r>
 8025cce:	1e06      	subs	r6, r0, #0
 8025cd0:	d02c      	beq.n	8025d2c <__ssputs_r+0xa8>
 8025cd2:	9a01      	ldr	r2, [sp, #4]
 8025cd4:	6921      	ldr	r1, [r4, #16]
 8025cd6:	f7fd fff9 	bl	8023ccc <memcpy>
 8025cda:	89a2      	ldrh	r2, [r4, #12]
 8025cdc:	4b18      	ldr	r3, [pc, #96]	@ (8025d40 <__ssputs_r+0xbc>)
 8025cde:	401a      	ands	r2, r3
 8025ce0:	2380      	movs	r3, #128	@ 0x80
 8025ce2:	4313      	orrs	r3, r2
 8025ce4:	81a3      	strh	r3, [r4, #12]
 8025ce6:	9b01      	ldr	r3, [sp, #4]
 8025ce8:	6126      	str	r6, [r4, #16]
 8025cea:	18f6      	adds	r6, r6, r3
 8025cec:	6026      	str	r6, [r4, #0]
 8025cee:	003e      	movs	r6, r7
 8025cf0:	6165      	str	r5, [r4, #20]
 8025cf2:	1aed      	subs	r5, r5, r3
 8025cf4:	60a5      	str	r5, [r4, #8]
 8025cf6:	42be      	cmp	r6, r7
 8025cf8:	d900      	bls.n	8025cfc <__ssputs_r+0x78>
 8025cfa:	003e      	movs	r6, r7
 8025cfc:	0032      	movs	r2, r6
 8025cfe:	9903      	ldr	r1, [sp, #12]
 8025d00:	6820      	ldr	r0, [r4, #0]
 8025d02:	f000 fb7e 	bl	8026402 <memmove>
 8025d06:	2000      	movs	r0, #0
 8025d08:	68a3      	ldr	r3, [r4, #8]
 8025d0a:	1b9b      	subs	r3, r3, r6
 8025d0c:	60a3      	str	r3, [r4, #8]
 8025d0e:	6823      	ldr	r3, [r4, #0]
 8025d10:	199b      	adds	r3, r3, r6
 8025d12:	6023      	str	r3, [r4, #0]
 8025d14:	b005      	add	sp, #20
 8025d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025d18:	002a      	movs	r2, r5
 8025d1a:	9802      	ldr	r0, [sp, #8]
 8025d1c:	f000 fc05 	bl	802652a <_realloc_r>
 8025d20:	1e06      	subs	r6, r0, #0
 8025d22:	d1e0      	bne.n	8025ce6 <__ssputs_r+0x62>
 8025d24:	6921      	ldr	r1, [r4, #16]
 8025d26:	9802      	ldr	r0, [sp, #8]
 8025d28:	f7fe fe62 	bl	80249f0 <_free_r>
 8025d2c:	230c      	movs	r3, #12
 8025d2e:	2001      	movs	r0, #1
 8025d30:	9a02      	ldr	r2, [sp, #8]
 8025d32:	4240      	negs	r0, r0
 8025d34:	6013      	str	r3, [r2, #0]
 8025d36:	89a2      	ldrh	r2, [r4, #12]
 8025d38:	3334      	adds	r3, #52	@ 0x34
 8025d3a:	4313      	orrs	r3, r2
 8025d3c:	81a3      	strh	r3, [r4, #12]
 8025d3e:	e7e9      	b.n	8025d14 <__ssputs_r+0x90>
 8025d40:	fffffb7f 	.word	0xfffffb7f

08025d44 <_svfiprintf_r>:
 8025d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025d46:	b0a1      	sub	sp, #132	@ 0x84
 8025d48:	9003      	str	r0, [sp, #12]
 8025d4a:	001d      	movs	r5, r3
 8025d4c:	898b      	ldrh	r3, [r1, #12]
 8025d4e:	000f      	movs	r7, r1
 8025d50:	0016      	movs	r6, r2
 8025d52:	061b      	lsls	r3, r3, #24
 8025d54:	d511      	bpl.n	8025d7a <_svfiprintf_r+0x36>
 8025d56:	690b      	ldr	r3, [r1, #16]
 8025d58:	2b00      	cmp	r3, #0
 8025d5a:	d10e      	bne.n	8025d7a <_svfiprintf_r+0x36>
 8025d5c:	2140      	movs	r1, #64	@ 0x40
 8025d5e:	f7ff fa17 	bl	8025190 <_malloc_r>
 8025d62:	6038      	str	r0, [r7, #0]
 8025d64:	6138      	str	r0, [r7, #16]
 8025d66:	2800      	cmp	r0, #0
 8025d68:	d105      	bne.n	8025d76 <_svfiprintf_r+0x32>
 8025d6a:	230c      	movs	r3, #12
 8025d6c:	9a03      	ldr	r2, [sp, #12]
 8025d6e:	6013      	str	r3, [r2, #0]
 8025d70:	2001      	movs	r0, #1
 8025d72:	4240      	negs	r0, r0
 8025d74:	e0cf      	b.n	8025f16 <_svfiprintf_r+0x1d2>
 8025d76:	2340      	movs	r3, #64	@ 0x40
 8025d78:	617b      	str	r3, [r7, #20]
 8025d7a:	2300      	movs	r3, #0
 8025d7c:	ac08      	add	r4, sp, #32
 8025d7e:	6163      	str	r3, [r4, #20]
 8025d80:	3320      	adds	r3, #32
 8025d82:	7663      	strb	r3, [r4, #25]
 8025d84:	3310      	adds	r3, #16
 8025d86:	76a3      	strb	r3, [r4, #26]
 8025d88:	9507      	str	r5, [sp, #28]
 8025d8a:	0035      	movs	r5, r6
 8025d8c:	782b      	ldrb	r3, [r5, #0]
 8025d8e:	2b00      	cmp	r3, #0
 8025d90:	d001      	beq.n	8025d96 <_svfiprintf_r+0x52>
 8025d92:	2b25      	cmp	r3, #37	@ 0x25
 8025d94:	d148      	bne.n	8025e28 <_svfiprintf_r+0xe4>
 8025d96:	1bab      	subs	r3, r5, r6
 8025d98:	9305      	str	r3, [sp, #20]
 8025d9a:	42b5      	cmp	r5, r6
 8025d9c:	d00b      	beq.n	8025db6 <_svfiprintf_r+0x72>
 8025d9e:	0032      	movs	r2, r6
 8025da0:	0039      	movs	r1, r7
 8025da2:	9803      	ldr	r0, [sp, #12]
 8025da4:	f7ff ff6e 	bl	8025c84 <__ssputs_r>
 8025da8:	3001      	adds	r0, #1
 8025daa:	d100      	bne.n	8025dae <_svfiprintf_r+0x6a>
 8025dac:	e0ae      	b.n	8025f0c <_svfiprintf_r+0x1c8>
 8025dae:	6963      	ldr	r3, [r4, #20]
 8025db0:	9a05      	ldr	r2, [sp, #20]
 8025db2:	189b      	adds	r3, r3, r2
 8025db4:	6163      	str	r3, [r4, #20]
 8025db6:	782b      	ldrb	r3, [r5, #0]
 8025db8:	2b00      	cmp	r3, #0
 8025dba:	d100      	bne.n	8025dbe <_svfiprintf_r+0x7a>
 8025dbc:	e0a6      	b.n	8025f0c <_svfiprintf_r+0x1c8>
 8025dbe:	2201      	movs	r2, #1
 8025dc0:	2300      	movs	r3, #0
 8025dc2:	4252      	negs	r2, r2
 8025dc4:	6062      	str	r2, [r4, #4]
 8025dc6:	a904      	add	r1, sp, #16
 8025dc8:	3254      	adds	r2, #84	@ 0x54
 8025dca:	1852      	adds	r2, r2, r1
 8025dcc:	1c6e      	adds	r6, r5, #1
 8025dce:	6023      	str	r3, [r4, #0]
 8025dd0:	60e3      	str	r3, [r4, #12]
 8025dd2:	60a3      	str	r3, [r4, #8]
 8025dd4:	7013      	strb	r3, [r2, #0]
 8025dd6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8025dd8:	4b54      	ldr	r3, [pc, #336]	@ (8025f2c <_svfiprintf_r+0x1e8>)
 8025dda:	2205      	movs	r2, #5
 8025ddc:	0018      	movs	r0, r3
 8025dde:	7831      	ldrb	r1, [r6, #0]
 8025de0:	9305      	str	r3, [sp, #20]
 8025de2:	f7fd ff68 	bl	8023cb6 <memchr>
 8025de6:	1c75      	adds	r5, r6, #1
 8025de8:	2800      	cmp	r0, #0
 8025dea:	d11f      	bne.n	8025e2c <_svfiprintf_r+0xe8>
 8025dec:	6822      	ldr	r2, [r4, #0]
 8025dee:	06d3      	lsls	r3, r2, #27
 8025df0:	d504      	bpl.n	8025dfc <_svfiprintf_r+0xb8>
 8025df2:	2353      	movs	r3, #83	@ 0x53
 8025df4:	a904      	add	r1, sp, #16
 8025df6:	185b      	adds	r3, r3, r1
 8025df8:	2120      	movs	r1, #32
 8025dfa:	7019      	strb	r1, [r3, #0]
 8025dfc:	0713      	lsls	r3, r2, #28
 8025dfe:	d504      	bpl.n	8025e0a <_svfiprintf_r+0xc6>
 8025e00:	2353      	movs	r3, #83	@ 0x53
 8025e02:	a904      	add	r1, sp, #16
 8025e04:	185b      	adds	r3, r3, r1
 8025e06:	212b      	movs	r1, #43	@ 0x2b
 8025e08:	7019      	strb	r1, [r3, #0]
 8025e0a:	7833      	ldrb	r3, [r6, #0]
 8025e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8025e0e:	d016      	beq.n	8025e3e <_svfiprintf_r+0xfa>
 8025e10:	0035      	movs	r5, r6
 8025e12:	2100      	movs	r1, #0
 8025e14:	200a      	movs	r0, #10
 8025e16:	68e3      	ldr	r3, [r4, #12]
 8025e18:	782a      	ldrb	r2, [r5, #0]
 8025e1a:	1c6e      	adds	r6, r5, #1
 8025e1c:	3a30      	subs	r2, #48	@ 0x30
 8025e1e:	2a09      	cmp	r2, #9
 8025e20:	d950      	bls.n	8025ec4 <_svfiprintf_r+0x180>
 8025e22:	2900      	cmp	r1, #0
 8025e24:	d111      	bne.n	8025e4a <_svfiprintf_r+0x106>
 8025e26:	e017      	b.n	8025e58 <_svfiprintf_r+0x114>
 8025e28:	3501      	adds	r5, #1
 8025e2a:	e7af      	b.n	8025d8c <_svfiprintf_r+0x48>
 8025e2c:	9b05      	ldr	r3, [sp, #20]
 8025e2e:	6822      	ldr	r2, [r4, #0]
 8025e30:	1ac0      	subs	r0, r0, r3
 8025e32:	2301      	movs	r3, #1
 8025e34:	4083      	lsls	r3, r0
 8025e36:	4313      	orrs	r3, r2
 8025e38:	002e      	movs	r6, r5
 8025e3a:	6023      	str	r3, [r4, #0]
 8025e3c:	e7cc      	b.n	8025dd8 <_svfiprintf_r+0x94>
 8025e3e:	9b07      	ldr	r3, [sp, #28]
 8025e40:	1d19      	adds	r1, r3, #4
 8025e42:	681b      	ldr	r3, [r3, #0]
 8025e44:	9107      	str	r1, [sp, #28]
 8025e46:	2b00      	cmp	r3, #0
 8025e48:	db01      	blt.n	8025e4e <_svfiprintf_r+0x10a>
 8025e4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025e4c:	e004      	b.n	8025e58 <_svfiprintf_r+0x114>
 8025e4e:	425b      	negs	r3, r3
 8025e50:	60e3      	str	r3, [r4, #12]
 8025e52:	2302      	movs	r3, #2
 8025e54:	4313      	orrs	r3, r2
 8025e56:	6023      	str	r3, [r4, #0]
 8025e58:	782b      	ldrb	r3, [r5, #0]
 8025e5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8025e5c:	d10c      	bne.n	8025e78 <_svfiprintf_r+0x134>
 8025e5e:	786b      	ldrb	r3, [r5, #1]
 8025e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8025e62:	d134      	bne.n	8025ece <_svfiprintf_r+0x18a>
 8025e64:	9b07      	ldr	r3, [sp, #28]
 8025e66:	3502      	adds	r5, #2
 8025e68:	1d1a      	adds	r2, r3, #4
 8025e6a:	681b      	ldr	r3, [r3, #0]
 8025e6c:	9207      	str	r2, [sp, #28]
 8025e6e:	2b00      	cmp	r3, #0
 8025e70:	da01      	bge.n	8025e76 <_svfiprintf_r+0x132>
 8025e72:	2301      	movs	r3, #1
 8025e74:	425b      	negs	r3, r3
 8025e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8025e78:	4e2d      	ldr	r6, [pc, #180]	@ (8025f30 <_svfiprintf_r+0x1ec>)
 8025e7a:	2203      	movs	r2, #3
 8025e7c:	0030      	movs	r0, r6
 8025e7e:	7829      	ldrb	r1, [r5, #0]
 8025e80:	f7fd ff19 	bl	8023cb6 <memchr>
 8025e84:	2800      	cmp	r0, #0
 8025e86:	d006      	beq.n	8025e96 <_svfiprintf_r+0x152>
 8025e88:	2340      	movs	r3, #64	@ 0x40
 8025e8a:	1b80      	subs	r0, r0, r6
 8025e8c:	4083      	lsls	r3, r0
 8025e8e:	6822      	ldr	r2, [r4, #0]
 8025e90:	3501      	adds	r5, #1
 8025e92:	4313      	orrs	r3, r2
 8025e94:	6023      	str	r3, [r4, #0]
 8025e96:	7829      	ldrb	r1, [r5, #0]
 8025e98:	2206      	movs	r2, #6
 8025e9a:	4826      	ldr	r0, [pc, #152]	@ (8025f34 <_svfiprintf_r+0x1f0>)
 8025e9c:	1c6e      	adds	r6, r5, #1
 8025e9e:	7621      	strb	r1, [r4, #24]
 8025ea0:	f7fd ff09 	bl	8023cb6 <memchr>
 8025ea4:	2800      	cmp	r0, #0
 8025ea6:	d038      	beq.n	8025f1a <_svfiprintf_r+0x1d6>
 8025ea8:	4b23      	ldr	r3, [pc, #140]	@ (8025f38 <_svfiprintf_r+0x1f4>)
 8025eaa:	2b00      	cmp	r3, #0
 8025eac:	d122      	bne.n	8025ef4 <_svfiprintf_r+0x1b0>
 8025eae:	2207      	movs	r2, #7
 8025eb0:	9b07      	ldr	r3, [sp, #28]
 8025eb2:	3307      	adds	r3, #7
 8025eb4:	4393      	bics	r3, r2
 8025eb6:	3308      	adds	r3, #8
 8025eb8:	9307      	str	r3, [sp, #28]
 8025eba:	6963      	ldr	r3, [r4, #20]
 8025ebc:	9a04      	ldr	r2, [sp, #16]
 8025ebe:	189b      	adds	r3, r3, r2
 8025ec0:	6163      	str	r3, [r4, #20]
 8025ec2:	e762      	b.n	8025d8a <_svfiprintf_r+0x46>
 8025ec4:	4343      	muls	r3, r0
 8025ec6:	0035      	movs	r5, r6
 8025ec8:	2101      	movs	r1, #1
 8025eca:	189b      	adds	r3, r3, r2
 8025ecc:	e7a4      	b.n	8025e18 <_svfiprintf_r+0xd4>
 8025ece:	2300      	movs	r3, #0
 8025ed0:	200a      	movs	r0, #10
 8025ed2:	0019      	movs	r1, r3
 8025ed4:	3501      	adds	r5, #1
 8025ed6:	6063      	str	r3, [r4, #4]
 8025ed8:	782a      	ldrb	r2, [r5, #0]
 8025eda:	1c6e      	adds	r6, r5, #1
 8025edc:	3a30      	subs	r2, #48	@ 0x30
 8025ede:	2a09      	cmp	r2, #9
 8025ee0:	d903      	bls.n	8025eea <_svfiprintf_r+0x1a6>
 8025ee2:	2b00      	cmp	r3, #0
 8025ee4:	d0c8      	beq.n	8025e78 <_svfiprintf_r+0x134>
 8025ee6:	9109      	str	r1, [sp, #36]	@ 0x24
 8025ee8:	e7c6      	b.n	8025e78 <_svfiprintf_r+0x134>
 8025eea:	4341      	muls	r1, r0
 8025eec:	0035      	movs	r5, r6
 8025eee:	2301      	movs	r3, #1
 8025ef0:	1889      	adds	r1, r1, r2
 8025ef2:	e7f1      	b.n	8025ed8 <_svfiprintf_r+0x194>
 8025ef4:	aa07      	add	r2, sp, #28
 8025ef6:	9200      	str	r2, [sp, #0]
 8025ef8:	0021      	movs	r1, r4
 8025efa:	003a      	movs	r2, r7
 8025efc:	4b0f      	ldr	r3, [pc, #60]	@ (8025f3c <_svfiprintf_r+0x1f8>)
 8025efe:	9803      	ldr	r0, [sp, #12]
 8025f00:	f7fc ffb2 	bl	8022e68 <_printf_float>
 8025f04:	9004      	str	r0, [sp, #16]
 8025f06:	9b04      	ldr	r3, [sp, #16]
 8025f08:	3301      	adds	r3, #1
 8025f0a:	d1d6      	bne.n	8025eba <_svfiprintf_r+0x176>
 8025f0c:	89bb      	ldrh	r3, [r7, #12]
 8025f0e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8025f10:	065b      	lsls	r3, r3, #25
 8025f12:	d500      	bpl.n	8025f16 <_svfiprintf_r+0x1d2>
 8025f14:	e72c      	b.n	8025d70 <_svfiprintf_r+0x2c>
 8025f16:	b021      	add	sp, #132	@ 0x84
 8025f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f1a:	aa07      	add	r2, sp, #28
 8025f1c:	9200      	str	r2, [sp, #0]
 8025f1e:	0021      	movs	r1, r4
 8025f20:	003a      	movs	r2, r7
 8025f22:	4b06      	ldr	r3, [pc, #24]	@ (8025f3c <_svfiprintf_r+0x1f8>)
 8025f24:	9803      	ldr	r0, [sp, #12]
 8025f26:	f7fd fa4d 	bl	80233c4 <_printf_i>
 8025f2a:	e7eb      	b.n	8025f04 <_svfiprintf_r+0x1c0>
 8025f2c:	0802bb80 	.word	0x0802bb80
 8025f30:	0802bb86 	.word	0x0802bb86
 8025f34:	0802bb8a 	.word	0x0802bb8a
 8025f38:	08022e69 	.word	0x08022e69
 8025f3c:	08025c85 	.word	0x08025c85

08025f40 <__sfputc_r>:
 8025f40:	6893      	ldr	r3, [r2, #8]
 8025f42:	b510      	push	{r4, lr}
 8025f44:	3b01      	subs	r3, #1
 8025f46:	6093      	str	r3, [r2, #8]
 8025f48:	2b00      	cmp	r3, #0
 8025f4a:	da04      	bge.n	8025f56 <__sfputc_r+0x16>
 8025f4c:	6994      	ldr	r4, [r2, #24]
 8025f4e:	42a3      	cmp	r3, r4
 8025f50:	db07      	blt.n	8025f62 <__sfputc_r+0x22>
 8025f52:	290a      	cmp	r1, #10
 8025f54:	d005      	beq.n	8025f62 <__sfputc_r+0x22>
 8025f56:	6813      	ldr	r3, [r2, #0]
 8025f58:	1c58      	adds	r0, r3, #1
 8025f5a:	6010      	str	r0, [r2, #0]
 8025f5c:	7019      	strb	r1, [r3, #0]
 8025f5e:	0008      	movs	r0, r1
 8025f60:	bd10      	pop	{r4, pc}
 8025f62:	f7fd fd37 	bl	80239d4 <__swbuf_r>
 8025f66:	0001      	movs	r1, r0
 8025f68:	e7f9      	b.n	8025f5e <__sfputc_r+0x1e>

08025f6a <__sfputs_r>:
 8025f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f6c:	0006      	movs	r6, r0
 8025f6e:	000f      	movs	r7, r1
 8025f70:	0014      	movs	r4, r2
 8025f72:	18d5      	adds	r5, r2, r3
 8025f74:	42ac      	cmp	r4, r5
 8025f76:	d101      	bne.n	8025f7c <__sfputs_r+0x12>
 8025f78:	2000      	movs	r0, #0
 8025f7a:	e007      	b.n	8025f8c <__sfputs_r+0x22>
 8025f7c:	7821      	ldrb	r1, [r4, #0]
 8025f7e:	003a      	movs	r2, r7
 8025f80:	0030      	movs	r0, r6
 8025f82:	f7ff ffdd 	bl	8025f40 <__sfputc_r>
 8025f86:	3401      	adds	r4, #1
 8025f88:	1c43      	adds	r3, r0, #1
 8025f8a:	d1f3      	bne.n	8025f74 <__sfputs_r+0xa>
 8025f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025f90 <_vfiprintf_r>:
 8025f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025f92:	b0a1      	sub	sp, #132	@ 0x84
 8025f94:	000f      	movs	r7, r1
 8025f96:	0015      	movs	r5, r2
 8025f98:	001e      	movs	r6, r3
 8025f9a:	9003      	str	r0, [sp, #12]
 8025f9c:	2800      	cmp	r0, #0
 8025f9e:	d004      	beq.n	8025faa <_vfiprintf_r+0x1a>
 8025fa0:	6a03      	ldr	r3, [r0, #32]
 8025fa2:	2b00      	cmp	r3, #0
 8025fa4:	d101      	bne.n	8025faa <_vfiprintf_r+0x1a>
 8025fa6:	f7fd fbab 	bl	8023700 <__sinit>
 8025faa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025fac:	07db      	lsls	r3, r3, #31
 8025fae:	d405      	bmi.n	8025fbc <_vfiprintf_r+0x2c>
 8025fb0:	89bb      	ldrh	r3, [r7, #12]
 8025fb2:	059b      	lsls	r3, r3, #22
 8025fb4:	d402      	bmi.n	8025fbc <_vfiprintf_r+0x2c>
 8025fb6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8025fb8:	f7fd fe7b 	bl	8023cb2 <__retarget_lock_acquire_recursive>
 8025fbc:	89bb      	ldrh	r3, [r7, #12]
 8025fbe:	071b      	lsls	r3, r3, #28
 8025fc0:	d502      	bpl.n	8025fc8 <_vfiprintf_r+0x38>
 8025fc2:	693b      	ldr	r3, [r7, #16]
 8025fc4:	2b00      	cmp	r3, #0
 8025fc6:	d113      	bne.n	8025ff0 <_vfiprintf_r+0x60>
 8025fc8:	0039      	movs	r1, r7
 8025fca:	9803      	ldr	r0, [sp, #12]
 8025fcc:	f7fd fd44 	bl	8023a58 <__swsetup_r>
 8025fd0:	2800      	cmp	r0, #0
 8025fd2:	d00d      	beq.n	8025ff0 <_vfiprintf_r+0x60>
 8025fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025fd6:	07db      	lsls	r3, r3, #31
 8025fd8:	d503      	bpl.n	8025fe2 <_vfiprintf_r+0x52>
 8025fda:	2001      	movs	r0, #1
 8025fdc:	4240      	negs	r0, r0
 8025fde:	b021      	add	sp, #132	@ 0x84
 8025fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025fe2:	89bb      	ldrh	r3, [r7, #12]
 8025fe4:	059b      	lsls	r3, r3, #22
 8025fe6:	d4f8      	bmi.n	8025fda <_vfiprintf_r+0x4a>
 8025fe8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8025fea:	f7fd fe63 	bl	8023cb4 <__retarget_lock_release_recursive>
 8025fee:	e7f4      	b.n	8025fda <_vfiprintf_r+0x4a>
 8025ff0:	2300      	movs	r3, #0
 8025ff2:	ac08      	add	r4, sp, #32
 8025ff4:	6163      	str	r3, [r4, #20]
 8025ff6:	3320      	adds	r3, #32
 8025ff8:	7663      	strb	r3, [r4, #25]
 8025ffa:	3310      	adds	r3, #16
 8025ffc:	76a3      	strb	r3, [r4, #26]
 8025ffe:	9607      	str	r6, [sp, #28]
 8026000:	002e      	movs	r6, r5
 8026002:	7833      	ldrb	r3, [r6, #0]
 8026004:	2b00      	cmp	r3, #0
 8026006:	d001      	beq.n	802600c <_vfiprintf_r+0x7c>
 8026008:	2b25      	cmp	r3, #37	@ 0x25
 802600a:	d148      	bne.n	802609e <_vfiprintf_r+0x10e>
 802600c:	1b73      	subs	r3, r6, r5
 802600e:	9305      	str	r3, [sp, #20]
 8026010:	42ae      	cmp	r6, r5
 8026012:	d00b      	beq.n	802602c <_vfiprintf_r+0x9c>
 8026014:	002a      	movs	r2, r5
 8026016:	0039      	movs	r1, r7
 8026018:	9803      	ldr	r0, [sp, #12]
 802601a:	f7ff ffa6 	bl	8025f6a <__sfputs_r>
 802601e:	3001      	adds	r0, #1
 8026020:	d100      	bne.n	8026024 <_vfiprintf_r+0x94>
 8026022:	e0ae      	b.n	8026182 <_vfiprintf_r+0x1f2>
 8026024:	6963      	ldr	r3, [r4, #20]
 8026026:	9a05      	ldr	r2, [sp, #20]
 8026028:	189b      	adds	r3, r3, r2
 802602a:	6163      	str	r3, [r4, #20]
 802602c:	7833      	ldrb	r3, [r6, #0]
 802602e:	2b00      	cmp	r3, #0
 8026030:	d100      	bne.n	8026034 <_vfiprintf_r+0xa4>
 8026032:	e0a6      	b.n	8026182 <_vfiprintf_r+0x1f2>
 8026034:	2201      	movs	r2, #1
 8026036:	2300      	movs	r3, #0
 8026038:	4252      	negs	r2, r2
 802603a:	6062      	str	r2, [r4, #4]
 802603c:	a904      	add	r1, sp, #16
 802603e:	3254      	adds	r2, #84	@ 0x54
 8026040:	1852      	adds	r2, r2, r1
 8026042:	1c75      	adds	r5, r6, #1
 8026044:	6023      	str	r3, [r4, #0]
 8026046:	60e3      	str	r3, [r4, #12]
 8026048:	60a3      	str	r3, [r4, #8]
 802604a:	7013      	strb	r3, [r2, #0]
 802604c:	65a3      	str	r3, [r4, #88]	@ 0x58
 802604e:	4b59      	ldr	r3, [pc, #356]	@ (80261b4 <_vfiprintf_r+0x224>)
 8026050:	2205      	movs	r2, #5
 8026052:	0018      	movs	r0, r3
 8026054:	7829      	ldrb	r1, [r5, #0]
 8026056:	9305      	str	r3, [sp, #20]
 8026058:	f7fd fe2d 	bl	8023cb6 <memchr>
 802605c:	1c6e      	adds	r6, r5, #1
 802605e:	2800      	cmp	r0, #0
 8026060:	d11f      	bne.n	80260a2 <_vfiprintf_r+0x112>
 8026062:	6822      	ldr	r2, [r4, #0]
 8026064:	06d3      	lsls	r3, r2, #27
 8026066:	d504      	bpl.n	8026072 <_vfiprintf_r+0xe2>
 8026068:	2353      	movs	r3, #83	@ 0x53
 802606a:	a904      	add	r1, sp, #16
 802606c:	185b      	adds	r3, r3, r1
 802606e:	2120      	movs	r1, #32
 8026070:	7019      	strb	r1, [r3, #0]
 8026072:	0713      	lsls	r3, r2, #28
 8026074:	d504      	bpl.n	8026080 <_vfiprintf_r+0xf0>
 8026076:	2353      	movs	r3, #83	@ 0x53
 8026078:	a904      	add	r1, sp, #16
 802607a:	185b      	adds	r3, r3, r1
 802607c:	212b      	movs	r1, #43	@ 0x2b
 802607e:	7019      	strb	r1, [r3, #0]
 8026080:	782b      	ldrb	r3, [r5, #0]
 8026082:	2b2a      	cmp	r3, #42	@ 0x2a
 8026084:	d016      	beq.n	80260b4 <_vfiprintf_r+0x124>
 8026086:	002e      	movs	r6, r5
 8026088:	2100      	movs	r1, #0
 802608a:	200a      	movs	r0, #10
 802608c:	68e3      	ldr	r3, [r4, #12]
 802608e:	7832      	ldrb	r2, [r6, #0]
 8026090:	1c75      	adds	r5, r6, #1
 8026092:	3a30      	subs	r2, #48	@ 0x30
 8026094:	2a09      	cmp	r2, #9
 8026096:	d950      	bls.n	802613a <_vfiprintf_r+0x1aa>
 8026098:	2900      	cmp	r1, #0
 802609a:	d111      	bne.n	80260c0 <_vfiprintf_r+0x130>
 802609c:	e017      	b.n	80260ce <_vfiprintf_r+0x13e>
 802609e:	3601      	adds	r6, #1
 80260a0:	e7af      	b.n	8026002 <_vfiprintf_r+0x72>
 80260a2:	9b05      	ldr	r3, [sp, #20]
 80260a4:	6822      	ldr	r2, [r4, #0]
 80260a6:	1ac0      	subs	r0, r0, r3
 80260a8:	2301      	movs	r3, #1
 80260aa:	4083      	lsls	r3, r0
 80260ac:	4313      	orrs	r3, r2
 80260ae:	0035      	movs	r5, r6
 80260b0:	6023      	str	r3, [r4, #0]
 80260b2:	e7cc      	b.n	802604e <_vfiprintf_r+0xbe>
 80260b4:	9b07      	ldr	r3, [sp, #28]
 80260b6:	1d19      	adds	r1, r3, #4
 80260b8:	681b      	ldr	r3, [r3, #0]
 80260ba:	9107      	str	r1, [sp, #28]
 80260bc:	2b00      	cmp	r3, #0
 80260be:	db01      	blt.n	80260c4 <_vfiprintf_r+0x134>
 80260c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80260c2:	e004      	b.n	80260ce <_vfiprintf_r+0x13e>
 80260c4:	425b      	negs	r3, r3
 80260c6:	60e3      	str	r3, [r4, #12]
 80260c8:	2302      	movs	r3, #2
 80260ca:	4313      	orrs	r3, r2
 80260cc:	6023      	str	r3, [r4, #0]
 80260ce:	7833      	ldrb	r3, [r6, #0]
 80260d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80260d2:	d10c      	bne.n	80260ee <_vfiprintf_r+0x15e>
 80260d4:	7873      	ldrb	r3, [r6, #1]
 80260d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80260d8:	d134      	bne.n	8026144 <_vfiprintf_r+0x1b4>
 80260da:	9b07      	ldr	r3, [sp, #28]
 80260dc:	3602      	adds	r6, #2
 80260de:	1d1a      	adds	r2, r3, #4
 80260e0:	681b      	ldr	r3, [r3, #0]
 80260e2:	9207      	str	r2, [sp, #28]
 80260e4:	2b00      	cmp	r3, #0
 80260e6:	da01      	bge.n	80260ec <_vfiprintf_r+0x15c>
 80260e8:	2301      	movs	r3, #1
 80260ea:	425b      	negs	r3, r3
 80260ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80260ee:	4d32      	ldr	r5, [pc, #200]	@ (80261b8 <_vfiprintf_r+0x228>)
 80260f0:	2203      	movs	r2, #3
 80260f2:	0028      	movs	r0, r5
 80260f4:	7831      	ldrb	r1, [r6, #0]
 80260f6:	f7fd fdde 	bl	8023cb6 <memchr>
 80260fa:	2800      	cmp	r0, #0
 80260fc:	d006      	beq.n	802610c <_vfiprintf_r+0x17c>
 80260fe:	2340      	movs	r3, #64	@ 0x40
 8026100:	1b40      	subs	r0, r0, r5
 8026102:	4083      	lsls	r3, r0
 8026104:	6822      	ldr	r2, [r4, #0]
 8026106:	3601      	adds	r6, #1
 8026108:	4313      	orrs	r3, r2
 802610a:	6023      	str	r3, [r4, #0]
 802610c:	7831      	ldrb	r1, [r6, #0]
 802610e:	2206      	movs	r2, #6
 8026110:	482a      	ldr	r0, [pc, #168]	@ (80261bc <_vfiprintf_r+0x22c>)
 8026112:	1c75      	adds	r5, r6, #1
 8026114:	7621      	strb	r1, [r4, #24]
 8026116:	f7fd fdce 	bl	8023cb6 <memchr>
 802611a:	2800      	cmp	r0, #0
 802611c:	d040      	beq.n	80261a0 <_vfiprintf_r+0x210>
 802611e:	4b28      	ldr	r3, [pc, #160]	@ (80261c0 <_vfiprintf_r+0x230>)
 8026120:	2b00      	cmp	r3, #0
 8026122:	d122      	bne.n	802616a <_vfiprintf_r+0x1da>
 8026124:	2207      	movs	r2, #7
 8026126:	9b07      	ldr	r3, [sp, #28]
 8026128:	3307      	adds	r3, #7
 802612a:	4393      	bics	r3, r2
 802612c:	3308      	adds	r3, #8
 802612e:	9307      	str	r3, [sp, #28]
 8026130:	6963      	ldr	r3, [r4, #20]
 8026132:	9a04      	ldr	r2, [sp, #16]
 8026134:	189b      	adds	r3, r3, r2
 8026136:	6163      	str	r3, [r4, #20]
 8026138:	e762      	b.n	8026000 <_vfiprintf_r+0x70>
 802613a:	4343      	muls	r3, r0
 802613c:	002e      	movs	r6, r5
 802613e:	2101      	movs	r1, #1
 8026140:	189b      	adds	r3, r3, r2
 8026142:	e7a4      	b.n	802608e <_vfiprintf_r+0xfe>
 8026144:	2300      	movs	r3, #0
 8026146:	200a      	movs	r0, #10
 8026148:	0019      	movs	r1, r3
 802614a:	3601      	adds	r6, #1
 802614c:	6063      	str	r3, [r4, #4]
 802614e:	7832      	ldrb	r2, [r6, #0]
 8026150:	1c75      	adds	r5, r6, #1
 8026152:	3a30      	subs	r2, #48	@ 0x30
 8026154:	2a09      	cmp	r2, #9
 8026156:	d903      	bls.n	8026160 <_vfiprintf_r+0x1d0>
 8026158:	2b00      	cmp	r3, #0
 802615a:	d0c8      	beq.n	80260ee <_vfiprintf_r+0x15e>
 802615c:	9109      	str	r1, [sp, #36]	@ 0x24
 802615e:	e7c6      	b.n	80260ee <_vfiprintf_r+0x15e>
 8026160:	4341      	muls	r1, r0
 8026162:	002e      	movs	r6, r5
 8026164:	2301      	movs	r3, #1
 8026166:	1889      	adds	r1, r1, r2
 8026168:	e7f1      	b.n	802614e <_vfiprintf_r+0x1be>
 802616a:	aa07      	add	r2, sp, #28
 802616c:	9200      	str	r2, [sp, #0]
 802616e:	0021      	movs	r1, r4
 8026170:	003a      	movs	r2, r7
 8026172:	4b14      	ldr	r3, [pc, #80]	@ (80261c4 <_vfiprintf_r+0x234>)
 8026174:	9803      	ldr	r0, [sp, #12]
 8026176:	f7fc fe77 	bl	8022e68 <_printf_float>
 802617a:	9004      	str	r0, [sp, #16]
 802617c:	9b04      	ldr	r3, [sp, #16]
 802617e:	3301      	adds	r3, #1
 8026180:	d1d6      	bne.n	8026130 <_vfiprintf_r+0x1a0>
 8026182:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026184:	07db      	lsls	r3, r3, #31
 8026186:	d405      	bmi.n	8026194 <_vfiprintf_r+0x204>
 8026188:	89bb      	ldrh	r3, [r7, #12]
 802618a:	059b      	lsls	r3, r3, #22
 802618c:	d402      	bmi.n	8026194 <_vfiprintf_r+0x204>
 802618e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8026190:	f7fd fd90 	bl	8023cb4 <__retarget_lock_release_recursive>
 8026194:	89bb      	ldrh	r3, [r7, #12]
 8026196:	065b      	lsls	r3, r3, #25
 8026198:	d500      	bpl.n	802619c <_vfiprintf_r+0x20c>
 802619a:	e71e      	b.n	8025fda <_vfiprintf_r+0x4a>
 802619c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802619e:	e71e      	b.n	8025fde <_vfiprintf_r+0x4e>
 80261a0:	aa07      	add	r2, sp, #28
 80261a2:	9200      	str	r2, [sp, #0]
 80261a4:	0021      	movs	r1, r4
 80261a6:	003a      	movs	r2, r7
 80261a8:	4b06      	ldr	r3, [pc, #24]	@ (80261c4 <_vfiprintf_r+0x234>)
 80261aa:	9803      	ldr	r0, [sp, #12]
 80261ac:	f7fd f90a 	bl	80233c4 <_printf_i>
 80261b0:	e7e3      	b.n	802617a <_vfiprintf_r+0x1ea>
 80261b2:	46c0      	nop			@ (mov r8, r8)
 80261b4:	0802bb80 	.word	0x0802bb80
 80261b8:	0802bb86 	.word	0x0802bb86
 80261bc:	0802bb8a 	.word	0x0802bb8a
 80261c0:	08022e69 	.word	0x08022e69
 80261c4:	08025f6b 	.word	0x08025f6b

080261c8 <__sflush_r>:
 80261c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80261ca:	220c      	movs	r2, #12
 80261cc:	5e8b      	ldrsh	r3, [r1, r2]
 80261ce:	0005      	movs	r5, r0
 80261d0:	000c      	movs	r4, r1
 80261d2:	071a      	lsls	r2, r3, #28
 80261d4:	d456      	bmi.n	8026284 <__sflush_r+0xbc>
 80261d6:	684a      	ldr	r2, [r1, #4]
 80261d8:	2a00      	cmp	r2, #0
 80261da:	dc02      	bgt.n	80261e2 <__sflush_r+0x1a>
 80261dc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80261de:	2a00      	cmp	r2, #0
 80261e0:	dd4e      	ble.n	8026280 <__sflush_r+0xb8>
 80261e2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80261e4:	2f00      	cmp	r7, #0
 80261e6:	d04b      	beq.n	8026280 <__sflush_r+0xb8>
 80261e8:	2200      	movs	r2, #0
 80261ea:	2080      	movs	r0, #128	@ 0x80
 80261ec:	682e      	ldr	r6, [r5, #0]
 80261ee:	602a      	str	r2, [r5, #0]
 80261f0:	001a      	movs	r2, r3
 80261f2:	0140      	lsls	r0, r0, #5
 80261f4:	6a21      	ldr	r1, [r4, #32]
 80261f6:	4002      	ands	r2, r0
 80261f8:	4203      	tst	r3, r0
 80261fa:	d033      	beq.n	8026264 <__sflush_r+0x9c>
 80261fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80261fe:	89a3      	ldrh	r3, [r4, #12]
 8026200:	075b      	lsls	r3, r3, #29
 8026202:	d506      	bpl.n	8026212 <__sflush_r+0x4a>
 8026204:	6863      	ldr	r3, [r4, #4]
 8026206:	1ad2      	subs	r2, r2, r3
 8026208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802620a:	2b00      	cmp	r3, #0
 802620c:	d001      	beq.n	8026212 <__sflush_r+0x4a>
 802620e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8026210:	1ad2      	subs	r2, r2, r3
 8026212:	2300      	movs	r3, #0
 8026214:	0028      	movs	r0, r5
 8026216:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8026218:	6a21      	ldr	r1, [r4, #32]
 802621a:	47b8      	blx	r7
 802621c:	89a2      	ldrh	r2, [r4, #12]
 802621e:	1c43      	adds	r3, r0, #1
 8026220:	d106      	bne.n	8026230 <__sflush_r+0x68>
 8026222:	6829      	ldr	r1, [r5, #0]
 8026224:	291d      	cmp	r1, #29
 8026226:	d846      	bhi.n	80262b6 <__sflush_r+0xee>
 8026228:	4b29      	ldr	r3, [pc, #164]	@ (80262d0 <__sflush_r+0x108>)
 802622a:	410b      	asrs	r3, r1
 802622c:	07db      	lsls	r3, r3, #31
 802622e:	d442      	bmi.n	80262b6 <__sflush_r+0xee>
 8026230:	2300      	movs	r3, #0
 8026232:	6063      	str	r3, [r4, #4]
 8026234:	6923      	ldr	r3, [r4, #16]
 8026236:	6023      	str	r3, [r4, #0]
 8026238:	04d2      	lsls	r2, r2, #19
 802623a:	d505      	bpl.n	8026248 <__sflush_r+0x80>
 802623c:	1c43      	adds	r3, r0, #1
 802623e:	d102      	bne.n	8026246 <__sflush_r+0x7e>
 8026240:	682b      	ldr	r3, [r5, #0]
 8026242:	2b00      	cmp	r3, #0
 8026244:	d100      	bne.n	8026248 <__sflush_r+0x80>
 8026246:	6560      	str	r0, [r4, #84]	@ 0x54
 8026248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802624a:	602e      	str	r6, [r5, #0]
 802624c:	2900      	cmp	r1, #0
 802624e:	d017      	beq.n	8026280 <__sflush_r+0xb8>
 8026250:	0023      	movs	r3, r4
 8026252:	3344      	adds	r3, #68	@ 0x44
 8026254:	4299      	cmp	r1, r3
 8026256:	d002      	beq.n	802625e <__sflush_r+0x96>
 8026258:	0028      	movs	r0, r5
 802625a:	f7fe fbc9 	bl	80249f0 <_free_r>
 802625e:	2300      	movs	r3, #0
 8026260:	6363      	str	r3, [r4, #52]	@ 0x34
 8026262:	e00d      	b.n	8026280 <__sflush_r+0xb8>
 8026264:	2301      	movs	r3, #1
 8026266:	0028      	movs	r0, r5
 8026268:	47b8      	blx	r7
 802626a:	0002      	movs	r2, r0
 802626c:	1c43      	adds	r3, r0, #1
 802626e:	d1c6      	bne.n	80261fe <__sflush_r+0x36>
 8026270:	682b      	ldr	r3, [r5, #0]
 8026272:	2b00      	cmp	r3, #0
 8026274:	d0c3      	beq.n	80261fe <__sflush_r+0x36>
 8026276:	2b1d      	cmp	r3, #29
 8026278:	d001      	beq.n	802627e <__sflush_r+0xb6>
 802627a:	2b16      	cmp	r3, #22
 802627c:	d11a      	bne.n	80262b4 <__sflush_r+0xec>
 802627e:	602e      	str	r6, [r5, #0]
 8026280:	2000      	movs	r0, #0
 8026282:	e01e      	b.n	80262c2 <__sflush_r+0xfa>
 8026284:	690e      	ldr	r6, [r1, #16]
 8026286:	2e00      	cmp	r6, #0
 8026288:	d0fa      	beq.n	8026280 <__sflush_r+0xb8>
 802628a:	680f      	ldr	r7, [r1, #0]
 802628c:	600e      	str	r6, [r1, #0]
 802628e:	1bba      	subs	r2, r7, r6
 8026290:	9201      	str	r2, [sp, #4]
 8026292:	2200      	movs	r2, #0
 8026294:	079b      	lsls	r3, r3, #30
 8026296:	d100      	bne.n	802629a <__sflush_r+0xd2>
 8026298:	694a      	ldr	r2, [r1, #20]
 802629a:	60a2      	str	r2, [r4, #8]
 802629c:	9b01      	ldr	r3, [sp, #4]
 802629e:	2b00      	cmp	r3, #0
 80262a0:	ddee      	ble.n	8026280 <__sflush_r+0xb8>
 80262a2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80262a4:	0032      	movs	r2, r6
 80262a6:	001f      	movs	r7, r3
 80262a8:	0028      	movs	r0, r5
 80262aa:	9b01      	ldr	r3, [sp, #4]
 80262ac:	6a21      	ldr	r1, [r4, #32]
 80262ae:	47b8      	blx	r7
 80262b0:	2800      	cmp	r0, #0
 80262b2:	dc07      	bgt.n	80262c4 <__sflush_r+0xfc>
 80262b4:	89a2      	ldrh	r2, [r4, #12]
 80262b6:	2340      	movs	r3, #64	@ 0x40
 80262b8:	2001      	movs	r0, #1
 80262ba:	4313      	orrs	r3, r2
 80262bc:	b21b      	sxth	r3, r3
 80262be:	81a3      	strh	r3, [r4, #12]
 80262c0:	4240      	negs	r0, r0
 80262c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80262c4:	9b01      	ldr	r3, [sp, #4]
 80262c6:	1836      	adds	r6, r6, r0
 80262c8:	1a1b      	subs	r3, r3, r0
 80262ca:	9301      	str	r3, [sp, #4]
 80262cc:	e7e6      	b.n	802629c <__sflush_r+0xd4>
 80262ce:	46c0      	nop			@ (mov r8, r8)
 80262d0:	dfbffffe 	.word	0xdfbffffe

080262d4 <_fflush_r>:
 80262d4:	690b      	ldr	r3, [r1, #16]
 80262d6:	b570      	push	{r4, r5, r6, lr}
 80262d8:	0005      	movs	r5, r0
 80262da:	000c      	movs	r4, r1
 80262dc:	2b00      	cmp	r3, #0
 80262de:	d102      	bne.n	80262e6 <_fflush_r+0x12>
 80262e0:	2500      	movs	r5, #0
 80262e2:	0028      	movs	r0, r5
 80262e4:	bd70      	pop	{r4, r5, r6, pc}
 80262e6:	2800      	cmp	r0, #0
 80262e8:	d004      	beq.n	80262f4 <_fflush_r+0x20>
 80262ea:	6a03      	ldr	r3, [r0, #32]
 80262ec:	2b00      	cmp	r3, #0
 80262ee:	d101      	bne.n	80262f4 <_fflush_r+0x20>
 80262f0:	f7fd fa06 	bl	8023700 <__sinit>
 80262f4:	220c      	movs	r2, #12
 80262f6:	5ea3      	ldrsh	r3, [r4, r2]
 80262f8:	2b00      	cmp	r3, #0
 80262fa:	d0f1      	beq.n	80262e0 <_fflush_r+0xc>
 80262fc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80262fe:	07d2      	lsls	r2, r2, #31
 8026300:	d404      	bmi.n	802630c <_fflush_r+0x38>
 8026302:	059b      	lsls	r3, r3, #22
 8026304:	d402      	bmi.n	802630c <_fflush_r+0x38>
 8026306:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026308:	f7fd fcd3 	bl	8023cb2 <__retarget_lock_acquire_recursive>
 802630c:	0028      	movs	r0, r5
 802630e:	0021      	movs	r1, r4
 8026310:	f7ff ff5a 	bl	80261c8 <__sflush_r>
 8026314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026316:	0005      	movs	r5, r0
 8026318:	07db      	lsls	r3, r3, #31
 802631a:	d4e2      	bmi.n	80262e2 <_fflush_r+0xe>
 802631c:	89a3      	ldrh	r3, [r4, #12]
 802631e:	059b      	lsls	r3, r3, #22
 8026320:	d4df      	bmi.n	80262e2 <_fflush_r+0xe>
 8026322:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026324:	f7fd fcc6 	bl	8023cb4 <__retarget_lock_release_recursive>
 8026328:	e7db      	b.n	80262e2 <_fflush_r+0xe>
	...

0802632c <__swhatbuf_r>:
 802632c:	b570      	push	{r4, r5, r6, lr}
 802632e:	000e      	movs	r6, r1
 8026330:	001d      	movs	r5, r3
 8026332:	230e      	movs	r3, #14
 8026334:	5ec9      	ldrsh	r1, [r1, r3]
 8026336:	0014      	movs	r4, r2
 8026338:	b096      	sub	sp, #88	@ 0x58
 802633a:	2900      	cmp	r1, #0
 802633c:	da0c      	bge.n	8026358 <__swhatbuf_r+0x2c>
 802633e:	89b2      	ldrh	r2, [r6, #12]
 8026340:	2380      	movs	r3, #128	@ 0x80
 8026342:	0011      	movs	r1, r2
 8026344:	4019      	ands	r1, r3
 8026346:	421a      	tst	r2, r3
 8026348:	d114      	bne.n	8026374 <__swhatbuf_r+0x48>
 802634a:	2380      	movs	r3, #128	@ 0x80
 802634c:	00db      	lsls	r3, r3, #3
 802634e:	2000      	movs	r0, #0
 8026350:	6029      	str	r1, [r5, #0]
 8026352:	6023      	str	r3, [r4, #0]
 8026354:	b016      	add	sp, #88	@ 0x58
 8026356:	bd70      	pop	{r4, r5, r6, pc}
 8026358:	466a      	mov	r2, sp
 802635a:	f000 f865 	bl	8026428 <_fstat_r>
 802635e:	2800      	cmp	r0, #0
 8026360:	dbed      	blt.n	802633e <__swhatbuf_r+0x12>
 8026362:	23f0      	movs	r3, #240	@ 0xf0
 8026364:	9901      	ldr	r1, [sp, #4]
 8026366:	021b      	lsls	r3, r3, #8
 8026368:	4019      	ands	r1, r3
 802636a:	4b04      	ldr	r3, [pc, #16]	@ (802637c <__swhatbuf_r+0x50>)
 802636c:	18c9      	adds	r1, r1, r3
 802636e:	424b      	negs	r3, r1
 8026370:	4159      	adcs	r1, r3
 8026372:	e7ea      	b.n	802634a <__swhatbuf_r+0x1e>
 8026374:	2100      	movs	r1, #0
 8026376:	2340      	movs	r3, #64	@ 0x40
 8026378:	e7e9      	b.n	802634e <__swhatbuf_r+0x22>
 802637a:	46c0      	nop			@ (mov r8, r8)
 802637c:	ffffe000 	.word	0xffffe000

08026380 <__smakebuf_r>:
 8026380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026382:	2602      	movs	r6, #2
 8026384:	898b      	ldrh	r3, [r1, #12]
 8026386:	0005      	movs	r5, r0
 8026388:	000c      	movs	r4, r1
 802638a:	b085      	sub	sp, #20
 802638c:	4233      	tst	r3, r6
 802638e:	d007      	beq.n	80263a0 <__smakebuf_r+0x20>
 8026390:	0023      	movs	r3, r4
 8026392:	3347      	adds	r3, #71	@ 0x47
 8026394:	6023      	str	r3, [r4, #0]
 8026396:	6123      	str	r3, [r4, #16]
 8026398:	2301      	movs	r3, #1
 802639a:	6163      	str	r3, [r4, #20]
 802639c:	b005      	add	sp, #20
 802639e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80263a0:	ab03      	add	r3, sp, #12
 80263a2:	aa02      	add	r2, sp, #8
 80263a4:	f7ff ffc2 	bl	802632c <__swhatbuf_r>
 80263a8:	9f02      	ldr	r7, [sp, #8]
 80263aa:	9001      	str	r0, [sp, #4]
 80263ac:	0039      	movs	r1, r7
 80263ae:	0028      	movs	r0, r5
 80263b0:	f7fe feee 	bl	8025190 <_malloc_r>
 80263b4:	2800      	cmp	r0, #0
 80263b6:	d108      	bne.n	80263ca <__smakebuf_r+0x4a>
 80263b8:	220c      	movs	r2, #12
 80263ba:	5ea3      	ldrsh	r3, [r4, r2]
 80263bc:	059a      	lsls	r2, r3, #22
 80263be:	d4ed      	bmi.n	802639c <__smakebuf_r+0x1c>
 80263c0:	2203      	movs	r2, #3
 80263c2:	4393      	bics	r3, r2
 80263c4:	431e      	orrs	r6, r3
 80263c6:	81a6      	strh	r6, [r4, #12]
 80263c8:	e7e2      	b.n	8026390 <__smakebuf_r+0x10>
 80263ca:	2380      	movs	r3, #128	@ 0x80
 80263cc:	89a2      	ldrh	r2, [r4, #12]
 80263ce:	6020      	str	r0, [r4, #0]
 80263d0:	4313      	orrs	r3, r2
 80263d2:	81a3      	strh	r3, [r4, #12]
 80263d4:	9b03      	ldr	r3, [sp, #12]
 80263d6:	6120      	str	r0, [r4, #16]
 80263d8:	6167      	str	r7, [r4, #20]
 80263da:	2b00      	cmp	r3, #0
 80263dc:	d00c      	beq.n	80263f8 <__smakebuf_r+0x78>
 80263de:	0028      	movs	r0, r5
 80263e0:	230e      	movs	r3, #14
 80263e2:	5ee1      	ldrsh	r1, [r4, r3]
 80263e4:	f000 f832 	bl	802644c <_isatty_r>
 80263e8:	2800      	cmp	r0, #0
 80263ea:	d005      	beq.n	80263f8 <__smakebuf_r+0x78>
 80263ec:	2303      	movs	r3, #3
 80263ee:	89a2      	ldrh	r2, [r4, #12]
 80263f0:	439a      	bics	r2, r3
 80263f2:	3b02      	subs	r3, #2
 80263f4:	4313      	orrs	r3, r2
 80263f6:	81a3      	strh	r3, [r4, #12]
 80263f8:	89a3      	ldrh	r3, [r4, #12]
 80263fa:	9a01      	ldr	r2, [sp, #4]
 80263fc:	4313      	orrs	r3, r2
 80263fe:	81a3      	strh	r3, [r4, #12]
 8026400:	e7cc      	b.n	802639c <__smakebuf_r+0x1c>

08026402 <memmove>:
 8026402:	b510      	push	{r4, lr}
 8026404:	4288      	cmp	r0, r1
 8026406:	d806      	bhi.n	8026416 <memmove+0x14>
 8026408:	2300      	movs	r3, #0
 802640a:	429a      	cmp	r2, r3
 802640c:	d008      	beq.n	8026420 <memmove+0x1e>
 802640e:	5ccc      	ldrb	r4, [r1, r3]
 8026410:	54c4      	strb	r4, [r0, r3]
 8026412:	3301      	adds	r3, #1
 8026414:	e7f9      	b.n	802640a <memmove+0x8>
 8026416:	188b      	adds	r3, r1, r2
 8026418:	4298      	cmp	r0, r3
 802641a:	d2f5      	bcs.n	8026408 <memmove+0x6>
 802641c:	3a01      	subs	r2, #1
 802641e:	d200      	bcs.n	8026422 <memmove+0x20>
 8026420:	bd10      	pop	{r4, pc}
 8026422:	5c8b      	ldrb	r3, [r1, r2]
 8026424:	5483      	strb	r3, [r0, r2]
 8026426:	e7f9      	b.n	802641c <memmove+0x1a>

08026428 <_fstat_r>:
 8026428:	2300      	movs	r3, #0
 802642a:	b570      	push	{r4, r5, r6, lr}
 802642c:	4d06      	ldr	r5, [pc, #24]	@ (8026448 <_fstat_r+0x20>)
 802642e:	0004      	movs	r4, r0
 8026430:	0008      	movs	r0, r1
 8026432:	0011      	movs	r1, r2
 8026434:	602b      	str	r3, [r5, #0]
 8026436:	f7ea fdbb 	bl	8010fb0 <_fstat>
 802643a:	1c43      	adds	r3, r0, #1
 802643c:	d103      	bne.n	8026446 <_fstat_r+0x1e>
 802643e:	682b      	ldr	r3, [r5, #0]
 8026440:	2b00      	cmp	r3, #0
 8026442:	d000      	beq.n	8026446 <_fstat_r+0x1e>
 8026444:	6023      	str	r3, [r4, #0]
 8026446:	bd70      	pop	{r4, r5, r6, pc}
 8026448:	200035e0 	.word	0x200035e0

0802644c <_isatty_r>:
 802644c:	2300      	movs	r3, #0
 802644e:	b570      	push	{r4, r5, r6, lr}
 8026450:	4d06      	ldr	r5, [pc, #24]	@ (802646c <_isatty_r+0x20>)
 8026452:	0004      	movs	r4, r0
 8026454:	0008      	movs	r0, r1
 8026456:	602b      	str	r3, [r5, #0]
 8026458:	f7ea fdb8 	bl	8010fcc <_isatty>
 802645c:	1c43      	adds	r3, r0, #1
 802645e:	d103      	bne.n	8026468 <_isatty_r+0x1c>
 8026460:	682b      	ldr	r3, [r5, #0]
 8026462:	2b00      	cmp	r3, #0
 8026464:	d000      	beq.n	8026468 <_isatty_r+0x1c>
 8026466:	6023      	str	r3, [r4, #0]
 8026468:	bd70      	pop	{r4, r5, r6, pc}
 802646a:	46c0      	nop			@ (mov r8, r8)
 802646c:	200035e0 	.word	0x200035e0

08026470 <_sbrk_r>:
 8026470:	2300      	movs	r3, #0
 8026472:	b570      	push	{r4, r5, r6, lr}
 8026474:	4d06      	ldr	r5, [pc, #24]	@ (8026490 <_sbrk_r+0x20>)
 8026476:	0004      	movs	r4, r0
 8026478:	0008      	movs	r0, r1
 802647a:	602b      	str	r3, [r5, #0]
 802647c:	f7ea fdba 	bl	8010ff4 <_sbrk>
 8026480:	1c43      	adds	r3, r0, #1
 8026482:	d103      	bne.n	802648c <_sbrk_r+0x1c>
 8026484:	682b      	ldr	r3, [r5, #0]
 8026486:	2b00      	cmp	r3, #0
 8026488:	d000      	beq.n	802648c <_sbrk_r+0x1c>
 802648a:	6023      	str	r3, [r4, #0]
 802648c:	bd70      	pop	{r4, r5, r6, pc}
 802648e:	46c0      	nop			@ (mov r8, r8)
 8026490:	200035e0 	.word	0x200035e0

08026494 <__assert_func>:
 8026494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8026496:	0014      	movs	r4, r2
 8026498:	001a      	movs	r2, r3
 802649a:	4b09      	ldr	r3, [pc, #36]	@ (80264c0 <__assert_func+0x2c>)
 802649c:	0005      	movs	r5, r0
 802649e:	681b      	ldr	r3, [r3, #0]
 80264a0:	000e      	movs	r6, r1
 80264a2:	68d8      	ldr	r0, [r3, #12]
 80264a4:	4b07      	ldr	r3, [pc, #28]	@ (80264c4 <__assert_func+0x30>)
 80264a6:	2c00      	cmp	r4, #0
 80264a8:	d101      	bne.n	80264ae <__assert_func+0x1a>
 80264aa:	4b07      	ldr	r3, [pc, #28]	@ (80264c8 <__assert_func+0x34>)
 80264ac:	001c      	movs	r4, r3
 80264ae:	4907      	ldr	r1, [pc, #28]	@ (80264cc <__assert_func+0x38>)
 80264b0:	9301      	str	r3, [sp, #4]
 80264b2:	9402      	str	r4, [sp, #8]
 80264b4:	002b      	movs	r3, r5
 80264b6:	9600      	str	r6, [sp, #0]
 80264b8:	f000 f866 	bl	8026588 <fiprintf>
 80264bc:	f000 f874 	bl	80265a8 <abort>
 80264c0:	200003e0 	.word	0x200003e0
 80264c4:	0802bb91 	.word	0x0802bb91
 80264c8:	0802bbcc 	.word	0x0802bbcc
 80264cc:	0802bb9e 	.word	0x0802bb9e

080264d0 <_calloc_r>:
 80264d0:	b570      	push	{r4, r5, r6, lr}
 80264d2:	0c0b      	lsrs	r3, r1, #16
 80264d4:	0c15      	lsrs	r5, r2, #16
 80264d6:	2b00      	cmp	r3, #0
 80264d8:	d11e      	bne.n	8026518 <_calloc_r+0x48>
 80264da:	2d00      	cmp	r5, #0
 80264dc:	d10c      	bne.n	80264f8 <_calloc_r+0x28>
 80264de:	b289      	uxth	r1, r1
 80264e0:	b294      	uxth	r4, r2
 80264e2:	434c      	muls	r4, r1
 80264e4:	0021      	movs	r1, r4
 80264e6:	f7fe fe53 	bl	8025190 <_malloc_r>
 80264ea:	1e05      	subs	r5, r0, #0
 80264ec:	d01a      	beq.n	8026524 <_calloc_r+0x54>
 80264ee:	0022      	movs	r2, r4
 80264f0:	2100      	movs	r1, #0
 80264f2:	f7fd fb0f 	bl	8023b14 <memset>
 80264f6:	e016      	b.n	8026526 <_calloc_r+0x56>
 80264f8:	1c2b      	adds	r3, r5, #0
 80264fa:	1c0c      	adds	r4, r1, #0
 80264fc:	b289      	uxth	r1, r1
 80264fe:	b292      	uxth	r2, r2
 8026500:	434a      	muls	r2, r1
 8026502:	b29b      	uxth	r3, r3
 8026504:	b2a1      	uxth	r1, r4
 8026506:	4359      	muls	r1, r3
 8026508:	0c14      	lsrs	r4, r2, #16
 802650a:	190c      	adds	r4, r1, r4
 802650c:	0c23      	lsrs	r3, r4, #16
 802650e:	d107      	bne.n	8026520 <_calloc_r+0x50>
 8026510:	0424      	lsls	r4, r4, #16
 8026512:	b292      	uxth	r2, r2
 8026514:	4314      	orrs	r4, r2
 8026516:	e7e5      	b.n	80264e4 <_calloc_r+0x14>
 8026518:	2d00      	cmp	r5, #0
 802651a:	d101      	bne.n	8026520 <_calloc_r+0x50>
 802651c:	1c14      	adds	r4, r2, #0
 802651e:	e7ed      	b.n	80264fc <_calloc_r+0x2c>
 8026520:	230c      	movs	r3, #12
 8026522:	6003      	str	r3, [r0, #0]
 8026524:	2500      	movs	r5, #0
 8026526:	0028      	movs	r0, r5
 8026528:	bd70      	pop	{r4, r5, r6, pc}

0802652a <_realloc_r>:
 802652a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802652c:	0006      	movs	r6, r0
 802652e:	000c      	movs	r4, r1
 8026530:	0015      	movs	r5, r2
 8026532:	2900      	cmp	r1, #0
 8026534:	d105      	bne.n	8026542 <_realloc_r+0x18>
 8026536:	0011      	movs	r1, r2
 8026538:	f7fe fe2a 	bl	8025190 <_malloc_r>
 802653c:	0004      	movs	r4, r0
 802653e:	0020      	movs	r0, r4
 8026540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026542:	2a00      	cmp	r2, #0
 8026544:	d103      	bne.n	802654e <_realloc_r+0x24>
 8026546:	f7fe fa53 	bl	80249f0 <_free_r>
 802654a:	2400      	movs	r4, #0
 802654c:	e7f7      	b.n	802653e <_realloc_r+0x14>
 802654e:	f000 f832 	bl	80265b6 <_malloc_usable_size_r>
 8026552:	0007      	movs	r7, r0
 8026554:	4285      	cmp	r5, r0
 8026556:	d802      	bhi.n	802655e <_realloc_r+0x34>
 8026558:	0843      	lsrs	r3, r0, #1
 802655a:	42ab      	cmp	r3, r5
 802655c:	d3ef      	bcc.n	802653e <_realloc_r+0x14>
 802655e:	0029      	movs	r1, r5
 8026560:	0030      	movs	r0, r6
 8026562:	f7fe fe15 	bl	8025190 <_malloc_r>
 8026566:	9001      	str	r0, [sp, #4]
 8026568:	2800      	cmp	r0, #0
 802656a:	d0ee      	beq.n	802654a <_realloc_r+0x20>
 802656c:	002a      	movs	r2, r5
 802656e:	42bd      	cmp	r5, r7
 8026570:	d900      	bls.n	8026574 <_realloc_r+0x4a>
 8026572:	003a      	movs	r2, r7
 8026574:	0021      	movs	r1, r4
 8026576:	9801      	ldr	r0, [sp, #4]
 8026578:	f7fd fba8 	bl	8023ccc <memcpy>
 802657c:	0021      	movs	r1, r4
 802657e:	0030      	movs	r0, r6
 8026580:	f7fe fa36 	bl	80249f0 <_free_r>
 8026584:	9c01      	ldr	r4, [sp, #4]
 8026586:	e7da      	b.n	802653e <_realloc_r+0x14>

08026588 <fiprintf>:
 8026588:	b40e      	push	{r1, r2, r3}
 802658a:	b517      	push	{r0, r1, r2, r4, lr}
 802658c:	4c05      	ldr	r4, [pc, #20]	@ (80265a4 <fiprintf+0x1c>)
 802658e:	ab05      	add	r3, sp, #20
 8026590:	cb04      	ldmia	r3!, {r2}
 8026592:	0001      	movs	r1, r0
 8026594:	6820      	ldr	r0, [r4, #0]
 8026596:	9301      	str	r3, [sp, #4]
 8026598:	f7ff fcfa 	bl	8025f90 <_vfiprintf_r>
 802659c:	bc1e      	pop	{r1, r2, r3, r4}
 802659e:	bc08      	pop	{r3}
 80265a0:	b003      	add	sp, #12
 80265a2:	4718      	bx	r3
 80265a4:	200003e0 	.word	0x200003e0

080265a8 <abort>:
 80265a8:	2006      	movs	r0, #6
 80265aa:	b510      	push	{r4, lr}
 80265ac:	f000 f834 	bl	8026618 <raise>
 80265b0:	2001      	movs	r0, #1
 80265b2:	f7ea fcc9 	bl	8010f48 <_exit>

080265b6 <_malloc_usable_size_r>:
 80265b6:	1f0b      	subs	r3, r1, #4
 80265b8:	681b      	ldr	r3, [r3, #0]
 80265ba:	1f18      	subs	r0, r3, #4
 80265bc:	2b00      	cmp	r3, #0
 80265be:	da01      	bge.n	80265c4 <_malloc_usable_size_r+0xe>
 80265c0:	580b      	ldr	r3, [r1, r0]
 80265c2:	18c0      	adds	r0, r0, r3
 80265c4:	4770      	bx	lr

080265c6 <_raise_r>:
 80265c6:	b570      	push	{r4, r5, r6, lr}
 80265c8:	0004      	movs	r4, r0
 80265ca:	000d      	movs	r5, r1
 80265cc:	291f      	cmp	r1, #31
 80265ce:	d904      	bls.n	80265da <_raise_r+0x14>
 80265d0:	2316      	movs	r3, #22
 80265d2:	6003      	str	r3, [r0, #0]
 80265d4:	2001      	movs	r0, #1
 80265d6:	4240      	negs	r0, r0
 80265d8:	bd70      	pop	{r4, r5, r6, pc}
 80265da:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80265dc:	2b00      	cmp	r3, #0
 80265de:	d004      	beq.n	80265ea <_raise_r+0x24>
 80265e0:	008a      	lsls	r2, r1, #2
 80265e2:	189b      	adds	r3, r3, r2
 80265e4:	681a      	ldr	r2, [r3, #0]
 80265e6:	2a00      	cmp	r2, #0
 80265e8:	d108      	bne.n	80265fc <_raise_r+0x36>
 80265ea:	0020      	movs	r0, r4
 80265ec:	f000 f830 	bl	8026650 <_getpid_r>
 80265f0:	002a      	movs	r2, r5
 80265f2:	0001      	movs	r1, r0
 80265f4:	0020      	movs	r0, r4
 80265f6:	f000 f819 	bl	802662c <_kill_r>
 80265fa:	e7ed      	b.n	80265d8 <_raise_r+0x12>
 80265fc:	2a01      	cmp	r2, #1
 80265fe:	d009      	beq.n	8026614 <_raise_r+0x4e>
 8026600:	1c51      	adds	r1, r2, #1
 8026602:	d103      	bne.n	802660c <_raise_r+0x46>
 8026604:	2316      	movs	r3, #22
 8026606:	6003      	str	r3, [r0, #0]
 8026608:	2001      	movs	r0, #1
 802660a:	e7e5      	b.n	80265d8 <_raise_r+0x12>
 802660c:	2100      	movs	r1, #0
 802660e:	0028      	movs	r0, r5
 8026610:	6019      	str	r1, [r3, #0]
 8026612:	4790      	blx	r2
 8026614:	2000      	movs	r0, #0
 8026616:	e7df      	b.n	80265d8 <_raise_r+0x12>

08026618 <raise>:
 8026618:	b510      	push	{r4, lr}
 802661a:	4b03      	ldr	r3, [pc, #12]	@ (8026628 <raise+0x10>)
 802661c:	0001      	movs	r1, r0
 802661e:	6818      	ldr	r0, [r3, #0]
 8026620:	f7ff ffd1 	bl	80265c6 <_raise_r>
 8026624:	bd10      	pop	{r4, pc}
 8026626:	46c0      	nop			@ (mov r8, r8)
 8026628:	200003e0 	.word	0x200003e0

0802662c <_kill_r>:
 802662c:	2300      	movs	r3, #0
 802662e:	b570      	push	{r4, r5, r6, lr}
 8026630:	4d06      	ldr	r5, [pc, #24]	@ (802664c <_kill_r+0x20>)
 8026632:	0004      	movs	r4, r0
 8026634:	0008      	movs	r0, r1
 8026636:	0011      	movs	r1, r2
 8026638:	602b      	str	r3, [r5, #0]
 802663a:	f7ea fc75 	bl	8010f28 <_kill>
 802663e:	1c43      	adds	r3, r0, #1
 8026640:	d103      	bne.n	802664a <_kill_r+0x1e>
 8026642:	682b      	ldr	r3, [r5, #0]
 8026644:	2b00      	cmp	r3, #0
 8026646:	d000      	beq.n	802664a <_kill_r+0x1e>
 8026648:	6023      	str	r3, [r4, #0]
 802664a:	bd70      	pop	{r4, r5, r6, pc}
 802664c:	200035e0 	.word	0x200035e0

08026650 <_getpid_r>:
 8026650:	b510      	push	{r4, lr}
 8026652:	f7ea fc63 	bl	8010f1c <_getpid>
 8026656:	bd10      	pop	{r4, pc}

08026658 <pow>:
 8026658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802665a:	0014      	movs	r4, r2
 802665c:	001d      	movs	r5, r3
 802665e:	9000      	str	r0, [sp, #0]
 8026660:	9101      	str	r1, [sp, #4]
 8026662:	f000 f959 	bl	8026918 <__ieee754_pow>
 8026666:	0022      	movs	r2, r4
 8026668:	0006      	movs	r6, r0
 802666a:	000f      	movs	r7, r1
 802666c:	002b      	movs	r3, r5
 802666e:	0020      	movs	r0, r4
 8026670:	0029      	movs	r1, r5
 8026672:	f7dc fe47 	bl	8003304 <__aeabi_dcmpun>
 8026676:	2800      	cmp	r0, #0
 8026678:	d13f      	bne.n	80266fa <pow+0xa2>
 802667a:	9800      	ldr	r0, [sp, #0]
 802667c:	9901      	ldr	r1, [sp, #4]
 802667e:	2200      	movs	r2, #0
 8026680:	2300      	movs	r3, #0
 8026682:	f7d9 ff15 	bl	80004b0 <__aeabi_dcmpeq>
 8026686:	2800      	cmp	r0, #0
 8026688:	d019      	beq.n	80266be <pow+0x66>
 802668a:	2200      	movs	r2, #0
 802668c:	2300      	movs	r3, #0
 802668e:	0020      	movs	r0, r4
 8026690:	0029      	movs	r1, r5
 8026692:	f7d9 ff0d 	bl	80004b0 <__aeabi_dcmpeq>
 8026696:	2800      	cmp	r0, #0
 8026698:	d146      	bne.n	8026728 <pow+0xd0>
 802669a:	0020      	movs	r0, r4
 802669c:	0029      	movs	r1, r5
 802669e:	f000 f88d 	bl	80267bc <finite>
 80266a2:	2800      	cmp	r0, #0
 80266a4:	d029      	beq.n	80266fa <pow+0xa2>
 80266a6:	2200      	movs	r2, #0
 80266a8:	2300      	movs	r3, #0
 80266aa:	0020      	movs	r0, r4
 80266ac:	0029      	movs	r1, r5
 80266ae:	f7d9 ff05 	bl	80004bc <__aeabi_dcmplt>
 80266b2:	2800      	cmp	r0, #0
 80266b4:	d021      	beq.n	80266fa <pow+0xa2>
 80266b6:	f7fd fad1 	bl	8023c5c <__errno>
 80266ba:	2322      	movs	r3, #34	@ 0x22
 80266bc:	e01c      	b.n	80266f8 <pow+0xa0>
 80266be:	0030      	movs	r0, r6
 80266c0:	0039      	movs	r1, r7
 80266c2:	f000 f87b 	bl	80267bc <finite>
 80266c6:	2800      	cmp	r0, #0
 80266c8:	d11b      	bne.n	8026702 <pow+0xaa>
 80266ca:	9800      	ldr	r0, [sp, #0]
 80266cc:	9901      	ldr	r1, [sp, #4]
 80266ce:	f000 f875 	bl	80267bc <finite>
 80266d2:	2800      	cmp	r0, #0
 80266d4:	d015      	beq.n	8026702 <pow+0xaa>
 80266d6:	0020      	movs	r0, r4
 80266d8:	0029      	movs	r1, r5
 80266da:	f000 f86f 	bl	80267bc <finite>
 80266de:	2800      	cmp	r0, #0
 80266e0:	d00f      	beq.n	8026702 <pow+0xaa>
 80266e2:	0032      	movs	r2, r6
 80266e4:	003b      	movs	r3, r7
 80266e6:	0030      	movs	r0, r6
 80266e8:	0039      	movs	r1, r7
 80266ea:	f7dc fe0b 	bl	8003304 <__aeabi_dcmpun>
 80266ee:	2800      	cmp	r0, #0
 80266f0:	d0e1      	beq.n	80266b6 <pow+0x5e>
 80266f2:	f7fd fab3 	bl	8023c5c <__errno>
 80266f6:	2321      	movs	r3, #33	@ 0x21
 80266f8:	6003      	str	r3, [r0, #0]
 80266fa:	0030      	movs	r0, r6
 80266fc:	0039      	movs	r1, r7
 80266fe:	b003      	add	sp, #12
 8026700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026702:	2200      	movs	r2, #0
 8026704:	2300      	movs	r3, #0
 8026706:	0030      	movs	r0, r6
 8026708:	0039      	movs	r1, r7
 802670a:	f7d9 fed1 	bl	80004b0 <__aeabi_dcmpeq>
 802670e:	2800      	cmp	r0, #0
 8026710:	d0f3      	beq.n	80266fa <pow+0xa2>
 8026712:	9800      	ldr	r0, [sp, #0]
 8026714:	9901      	ldr	r1, [sp, #4]
 8026716:	f000 f851 	bl	80267bc <finite>
 802671a:	2800      	cmp	r0, #0
 802671c:	d0ed      	beq.n	80266fa <pow+0xa2>
 802671e:	0020      	movs	r0, r4
 8026720:	0029      	movs	r1, r5
 8026722:	f000 f84b 	bl	80267bc <finite>
 8026726:	e7c4      	b.n	80266b2 <pow+0x5a>
 8026728:	2600      	movs	r6, #0
 802672a:	4f01      	ldr	r7, [pc, #4]	@ (8026730 <pow+0xd8>)
 802672c:	e7e5      	b.n	80266fa <pow+0xa2>
 802672e:	46c0      	nop			@ (mov r8, r8)
 8026730:	3ff00000 	.word	0x3ff00000

08026734 <expf>:
 8026734:	b570      	push	{r4, r5, r6, lr}
 8026736:	1c04      	adds	r4, r0, #0
 8026738:	f000 fe1e 	bl	8027378 <__ieee754_expf>
 802673c:	1c05      	adds	r5, r0, #0
 802673e:	1c20      	adds	r0, r4, #0
 8026740:	f000 f844 	bl	80267cc <finitef>
 8026744:	2800      	cmp	r0, #0
 8026746:	d00b      	beq.n	8026760 <expf+0x2c>
 8026748:	490c      	ldr	r1, [pc, #48]	@ (802677c <expf+0x48>)
 802674a:	1c20      	adds	r0, r4, #0
 802674c:	f7d9 ff04 	bl	8000558 <__aeabi_fcmpgt>
 8026750:	2800      	cmp	r0, #0
 8026752:	d007      	beq.n	8026764 <expf+0x30>
 8026754:	f7fd fa82 	bl	8023c5c <__errno>
 8026758:	25ff      	movs	r5, #255	@ 0xff
 802675a:	2322      	movs	r3, #34	@ 0x22
 802675c:	05ed      	lsls	r5, r5, #23
 802675e:	6003      	str	r3, [r0, #0]
 8026760:	1c28      	adds	r0, r5, #0
 8026762:	bd70      	pop	{r4, r5, r6, pc}
 8026764:	4906      	ldr	r1, [pc, #24]	@ (8026780 <expf+0x4c>)
 8026766:	1c20      	adds	r0, r4, #0
 8026768:	f7d9 fee2 	bl	8000530 <__aeabi_fcmplt>
 802676c:	2800      	cmp	r0, #0
 802676e:	d0f7      	beq.n	8026760 <expf+0x2c>
 8026770:	f7fd fa74 	bl	8023c5c <__errno>
 8026774:	2322      	movs	r3, #34	@ 0x22
 8026776:	2500      	movs	r5, #0
 8026778:	6003      	str	r3, [r0, #0]
 802677a:	e7f1      	b.n	8026760 <expf+0x2c>
 802677c:	42b17217 	.word	0x42b17217
 8026780:	c2cff1b5 	.word	0xc2cff1b5

08026784 <sqrtf>:
 8026784:	b570      	push	{r4, r5, r6, lr}
 8026786:	1c05      	adds	r5, r0, #0
 8026788:	f000 f82a 	bl	80267e0 <__ieee754_sqrtf>
 802678c:	1c29      	adds	r1, r5, #0
 802678e:	1c04      	adds	r4, r0, #0
 8026790:	1c28      	adds	r0, r5, #0
 8026792:	f7da fee7 	bl	8001564 <__aeabi_fcmpun>
 8026796:	2800      	cmp	r0, #0
 8026798:	d10e      	bne.n	80267b8 <sqrtf+0x34>
 802679a:	2100      	movs	r1, #0
 802679c:	1c28      	adds	r0, r5, #0
 802679e:	f7d9 fec7 	bl	8000530 <__aeabi_fcmplt>
 80267a2:	2800      	cmp	r0, #0
 80267a4:	d008      	beq.n	80267b8 <sqrtf+0x34>
 80267a6:	f7fd fa59 	bl	8023c5c <__errno>
 80267aa:	2321      	movs	r3, #33	@ 0x21
 80267ac:	2100      	movs	r1, #0
 80267ae:	6003      	str	r3, [r0, #0]
 80267b0:	1c08      	adds	r0, r1, #0
 80267b2:	f7da fa0f 	bl	8000bd4 <__aeabi_fdiv>
 80267b6:	1c04      	adds	r4, r0, #0
 80267b8:	1c20      	adds	r0, r4, #0
 80267ba:	bd70      	pop	{r4, r5, r6, pc}

080267bc <finite>:
 80267bc:	4b02      	ldr	r3, [pc, #8]	@ (80267c8 <finite+0xc>)
 80267be:	0048      	lsls	r0, r1, #1
 80267c0:	0840      	lsrs	r0, r0, #1
 80267c2:	18c0      	adds	r0, r0, r3
 80267c4:	0fc0      	lsrs	r0, r0, #31
 80267c6:	4770      	bx	lr
 80267c8:	80100000 	.word	0x80100000

080267cc <finitef>:
 80267cc:	22ff      	movs	r2, #255	@ 0xff
 80267ce:	0043      	lsls	r3, r0, #1
 80267d0:	085b      	lsrs	r3, r3, #1
 80267d2:	2001      	movs	r0, #1
 80267d4:	05d2      	lsls	r2, r2, #23
 80267d6:	4293      	cmp	r3, r2
 80267d8:	db00      	blt.n	80267dc <finitef+0x10>
 80267da:	2000      	movs	r0, #0
 80267dc:	4770      	bx	lr
	...

080267e0 <__ieee754_sqrtf>:
 80267e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80267e2:	0003      	movs	r3, r0
 80267e4:	0042      	lsls	r2, r0, #1
 80267e6:	1c04      	adds	r4, r0, #0
 80267e8:	20ff      	movs	r0, #255	@ 0xff
 80267ea:	0852      	lsrs	r2, r2, #1
 80267ec:	05c0      	lsls	r0, r0, #23
 80267ee:	4282      	cmp	r2, r0
 80267f0:	d30a      	bcc.n	8026808 <__ieee754_sqrtf+0x28>
 80267f2:	1c21      	adds	r1, r4, #0
 80267f4:	1c20      	adds	r0, r4, #0
 80267f6:	f7da fbd3 	bl	8000fa0 <__aeabi_fmul>
 80267fa:	1c01      	adds	r1, r0, #0
 80267fc:	1c20      	adds	r0, r4, #0
 80267fe:	f7da f85f 	bl	80008c0 <__aeabi_fadd>
 8026802:	1c04      	adds	r4, r0, #0
 8026804:	1c20      	adds	r0, r4, #0
 8026806:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026808:	2a00      	cmp	r2, #0
 802680a:	d0fb      	beq.n	8026804 <__ieee754_sqrtf+0x24>
 802680c:	2c00      	cmp	r4, #0
 802680e:	da07      	bge.n	8026820 <__ieee754_sqrtf+0x40>
 8026810:	1c21      	adds	r1, r4, #0
 8026812:	1c20      	adds	r0, r4, #0
 8026814:	f7da fd02 	bl	800121c <__aeabi_fsub>
 8026818:	1c01      	adds	r1, r0, #0
 802681a:	f7da f9db 	bl	8000bd4 <__aeabi_fdiv>
 802681e:	e7f0      	b.n	8026802 <__ieee754_sqrtf+0x22>
 8026820:	0022      	movs	r2, r4
 8026822:	15e1      	asrs	r1, r4, #23
 8026824:	4002      	ands	r2, r0
 8026826:	4204      	tst	r4, r0
 8026828:	d046      	beq.n	80268b8 <__ieee754_sqrtf+0xd8>
 802682a:	2280      	movs	r2, #128	@ 0x80
 802682c:	000f      	movs	r7, r1
 802682e:	025b      	lsls	r3, r3, #9
 8026830:	0a5b      	lsrs	r3, r3, #9
 8026832:	0412      	lsls	r2, r2, #16
 8026834:	3f7f      	subs	r7, #127	@ 0x7f
 8026836:	4313      	orrs	r3, r2
 8026838:	07c9      	lsls	r1, r1, #31
 802683a:	d400      	bmi.n	802683e <__ieee754_sqrtf+0x5e>
 802683c:	005b      	lsls	r3, r3, #1
 802683e:	2400      	movs	r4, #0
 8026840:	2180      	movs	r1, #128	@ 0x80
 8026842:	2019      	movs	r0, #25
 8026844:	0026      	movs	r6, r4
 8026846:	107f      	asrs	r7, r7, #1
 8026848:	005b      	lsls	r3, r3, #1
 802684a:	0449      	lsls	r1, r1, #17
 802684c:	1875      	adds	r5, r6, r1
 802684e:	001a      	movs	r2, r3
 8026850:	429d      	cmp	r5, r3
 8026852:	dc02      	bgt.n	802685a <__ieee754_sqrtf+0x7a>
 8026854:	186e      	adds	r6, r5, r1
 8026856:	1b5a      	subs	r2, r3, r5
 8026858:	1864      	adds	r4, r4, r1
 802685a:	3801      	subs	r0, #1
 802685c:	0053      	lsls	r3, r2, #1
 802685e:	0849      	lsrs	r1, r1, #1
 8026860:	2800      	cmp	r0, #0
 8026862:	d1f3      	bne.n	802684c <__ieee754_sqrtf+0x6c>
 8026864:	2a00      	cmp	r2, #0
 8026866:	d019      	beq.n	802689c <__ieee754_sqrtf+0xbc>
 8026868:	4d17      	ldr	r5, [pc, #92]	@ (80268c8 <__ieee754_sqrtf+0xe8>)
 802686a:	4e18      	ldr	r6, [pc, #96]	@ (80268cc <__ieee754_sqrtf+0xec>)
 802686c:	6828      	ldr	r0, [r5, #0]
 802686e:	6831      	ldr	r1, [r6, #0]
 8026870:	682b      	ldr	r3, [r5, #0]
 8026872:	9301      	str	r3, [sp, #4]
 8026874:	f7da fcd2 	bl	800121c <__aeabi_fsub>
 8026878:	1c01      	adds	r1, r0, #0
 802687a:	9801      	ldr	r0, [sp, #4]
 802687c:	f7d9 fe62 	bl	8000544 <__aeabi_fcmple>
 8026880:	2800      	cmp	r0, #0
 8026882:	d00b      	beq.n	802689c <__ieee754_sqrtf+0xbc>
 8026884:	6828      	ldr	r0, [r5, #0]
 8026886:	6831      	ldr	r1, [r6, #0]
 8026888:	f7da f81a 	bl	80008c0 <__aeabi_fadd>
 802688c:	682d      	ldr	r5, [r5, #0]
 802688e:	1c01      	adds	r1, r0, #0
 8026890:	1c28      	adds	r0, r5, #0
 8026892:	f7d9 fe4d 	bl	8000530 <__aeabi_fcmplt>
 8026896:	2800      	cmp	r0, #0
 8026898:	d011      	beq.n	80268be <__ieee754_sqrtf+0xde>
 802689a:	3402      	adds	r4, #2
 802689c:	23fc      	movs	r3, #252	@ 0xfc
 802689e:	1064      	asrs	r4, r4, #1
 80268a0:	059b      	lsls	r3, r3, #22
 80268a2:	18e3      	adds	r3, r4, r3
 80268a4:	05fc      	lsls	r4, r7, #23
 80268a6:	18e4      	adds	r4, r4, r3
 80268a8:	e7ac      	b.n	8026804 <__ieee754_sqrtf+0x24>
 80268aa:	005b      	lsls	r3, r3, #1
 80268ac:	3201      	adds	r2, #1
 80268ae:	4203      	tst	r3, r0
 80268b0:	d0fb      	beq.n	80268aa <__ieee754_sqrtf+0xca>
 80268b2:	3a01      	subs	r2, #1
 80268b4:	1a89      	subs	r1, r1, r2
 80268b6:	e7b8      	b.n	802682a <__ieee754_sqrtf+0x4a>
 80268b8:	2080      	movs	r0, #128	@ 0x80
 80268ba:	0400      	lsls	r0, r0, #16
 80268bc:	e7f7      	b.n	80268ae <__ieee754_sqrtf+0xce>
 80268be:	2301      	movs	r3, #1
 80268c0:	3401      	adds	r4, #1
 80268c2:	439c      	bics	r4, r3
 80268c4:	e7ea      	b.n	802689c <__ieee754_sqrtf+0xbc>
 80268c6:	46c0      	nop			@ (mov r8, r8)
 80268c8:	20000434 	.word	0x20000434
 80268cc:	20000430 	.word	0x20000430

080268d0 <roundf>:
 80268d0:	0dc3      	lsrs	r3, r0, #23
 80268d2:	b2db      	uxtb	r3, r3
 80268d4:	3b7f      	subs	r3, #127	@ 0x7f
 80268d6:	0002      	movs	r2, r0
 80268d8:	b510      	push	{r4, lr}
 80268da:	2b16      	cmp	r3, #22
 80268dc:	dc13      	bgt.n	8026906 <roundf+0x36>
 80268de:	2b00      	cmp	r3, #0
 80268e0:	da07      	bge.n	80268f2 <roundf+0x22>
 80268e2:	0fc2      	lsrs	r2, r0, #31
 80268e4:	07d0      	lsls	r0, r2, #31
 80268e6:	3301      	adds	r3, #1
 80268e8:	d102      	bne.n	80268f0 <roundf+0x20>
 80268ea:	23fe      	movs	r3, #254	@ 0xfe
 80268ec:	059b      	lsls	r3, r3, #22
 80268ee:	4318      	orrs	r0, r3
 80268f0:	bd10      	pop	{r4, pc}
 80268f2:	4908      	ldr	r1, [pc, #32]	@ (8026914 <roundf+0x44>)
 80268f4:	4119      	asrs	r1, r3
 80268f6:	4208      	tst	r0, r1
 80268f8:	d0fa      	beq.n	80268f0 <roundf+0x20>
 80268fa:	2080      	movs	r0, #128	@ 0x80
 80268fc:	03c0      	lsls	r0, r0, #15
 80268fe:	4118      	asrs	r0, r3
 8026900:	1880      	adds	r0, r0, r2
 8026902:	4388      	bics	r0, r1
 8026904:	e7f4      	b.n	80268f0 <roundf+0x20>
 8026906:	2b80      	cmp	r3, #128	@ 0x80
 8026908:	d1f2      	bne.n	80268f0 <roundf+0x20>
 802690a:	1c01      	adds	r1, r0, #0
 802690c:	f7d9 ffd8 	bl	80008c0 <__aeabi_fadd>
 8026910:	e7ee      	b.n	80268f0 <roundf+0x20>
 8026912:	46c0      	nop			@ (mov r8, r8)
 8026914:	007fffff 	.word	0x007fffff

08026918 <__ieee754_pow>:
 8026918:	b5f0      	push	{r4, r5, r6, r7, lr}
 802691a:	b095      	sub	sp, #84	@ 0x54
 802691c:	9202      	str	r2, [sp, #8]
 802691e:	9303      	str	r3, [sp, #12]
 8026920:	9b03      	ldr	r3, [sp, #12]
 8026922:	9a03      	ldr	r2, [sp, #12]
 8026924:	9306      	str	r3, [sp, #24]
 8026926:	0052      	lsls	r2, r2, #1
 8026928:	9b02      	ldr	r3, [sp, #8]
 802692a:	0852      	lsrs	r2, r2, #1
 802692c:	9204      	str	r2, [sp, #16]
 802692e:	001a      	movs	r2, r3
 8026930:	000f      	movs	r7, r1
 8026932:	9904      	ldr	r1, [sp, #16]
 8026934:	0006      	movs	r6, r0
 8026936:	430a      	orrs	r2, r1
 8026938:	d119      	bne.n	802696e <__ieee754_pow+0x56>
 802693a:	2180      	movs	r1, #128	@ 0x80
 802693c:	0309      	lsls	r1, r1, #12
 802693e:	4079      	eors	r1, r7
 8026940:	0002      	movs	r2, r0
 8026942:	000b      	movs	r3, r1
 8026944:	1892      	adds	r2, r2, r2
 8026946:	415b      	adcs	r3, r3
 8026948:	499b      	ldr	r1, [pc, #620]	@ (8026bb8 <__ieee754_pow+0x2a0>)
 802694a:	428b      	cmp	r3, r1
 802694c:	d806      	bhi.n	802695c <__ieee754_pow+0x44>
 802694e:	d001      	beq.n	8026954 <__ieee754_pow+0x3c>
 8026950:	f000 fcde 	bl	8027310 <__ieee754_pow+0x9f8>
 8026954:	2a00      	cmp	r2, #0
 8026956:	d101      	bne.n	802695c <__ieee754_pow+0x44>
 8026958:	f000 fcda 	bl	8027310 <__ieee754_pow+0x9f8>
 802695c:	9a02      	ldr	r2, [sp, #8]
 802695e:	9b03      	ldr	r3, [sp, #12]
 8026960:	0030      	movs	r0, r6
 8026962:	0039      	movs	r1, r7
 8026964:	f7da fec2 	bl	80016ec <__aeabi_dadd>
 8026968:	9000      	str	r0, [sp, #0]
 802696a:	9101      	str	r1, [sp, #4]
 802696c:	e0af      	b.n	8026ace <__ieee754_pow+0x1b6>
 802696e:	4a93      	ldr	r2, [pc, #588]	@ (8026bbc <__ieee754_pow+0x2a4>)
 8026970:	007c      	lsls	r4, r7, #1
 8026972:	9708      	str	r7, [sp, #32]
 8026974:	900e      	str	r0, [sp, #56]	@ 0x38
 8026976:	0864      	lsrs	r4, r4, #1
 8026978:	4294      	cmp	r4, r2
 802697a:	d809      	bhi.n	8026990 <__ieee754_pow+0x78>
 802697c:	d101      	bne.n	8026982 <__ieee754_pow+0x6a>
 802697e:	2800      	cmp	r0, #0
 8026980:	d1ec      	bne.n	802695c <__ieee754_pow+0x44>
 8026982:	9904      	ldr	r1, [sp, #16]
 8026984:	4a8d      	ldr	r2, [pc, #564]	@ (8026bbc <__ieee754_pow+0x2a4>)
 8026986:	4291      	cmp	r1, r2
 8026988:	d802      	bhi.n	8026990 <__ieee754_pow+0x78>
 802698a:	d10c      	bne.n	80269a6 <__ieee754_pow+0x8e>
 802698c:	2b00      	cmp	r3, #0
 802698e:	d00a      	beq.n	80269a6 <__ieee754_pow+0x8e>
 8026990:	4b8b      	ldr	r3, [pc, #556]	@ (8026bc0 <__ieee754_pow+0x2a8>)
 8026992:	18fb      	adds	r3, r7, r3
 8026994:	4333      	orrs	r3, r6
 8026996:	d1e1      	bne.n	802695c <__ieee754_pow+0x44>
 8026998:	2180      	movs	r1, #128	@ 0x80
 802699a:	9803      	ldr	r0, [sp, #12]
 802699c:	0309      	lsls	r1, r1, #12
 802699e:	4048      	eors	r0, r1
 80269a0:	0003      	movs	r3, r0
 80269a2:	9a02      	ldr	r2, [sp, #8]
 80269a4:	e7ce      	b.n	8026944 <__ieee754_pow+0x2c>
 80269a6:	2500      	movs	r5, #0
 80269a8:	9a08      	ldr	r2, [sp, #32]
 80269aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80269ac:	42aa      	cmp	r2, r5
 80269ae:	da68      	bge.n	8026a82 <__ieee754_pow+0x16a>
 80269b0:	4a84      	ldr	r2, [pc, #528]	@ (8026bc4 <__ieee754_pow+0x2ac>)
 80269b2:	9904      	ldr	r1, [sp, #16]
 80269b4:	4291      	cmp	r1, r2
 80269b6:	d863      	bhi.n	8026a80 <__ieee754_pow+0x168>
 80269b8:	4a83      	ldr	r2, [pc, #524]	@ (8026bc8 <__ieee754_pow+0x2b0>)
 80269ba:	4291      	cmp	r1, r2
 80269bc:	d910      	bls.n	80269e0 <__ieee754_pow+0xc8>
 80269be:	150a      	asrs	r2, r1, #20
 80269c0:	4982      	ldr	r1, [pc, #520]	@ (8026bcc <__ieee754_pow+0x2b4>)
 80269c2:	1852      	adds	r2, r2, r1
 80269c4:	2a14      	cmp	r2, #20
 80269c6:	dd3b      	ble.n	8026a40 <__ieee754_pow+0x128>
 80269c8:	2134      	movs	r1, #52	@ 0x34
 80269ca:	1a89      	subs	r1, r1, r2
 80269cc:	9a02      	ldr	r2, [sp, #8]
 80269ce:	40ca      	lsrs	r2, r1
 80269d0:	0010      	movs	r0, r2
 80269d2:	4088      	lsls	r0, r1
 80269d4:	4298      	cmp	r0, r3
 80269d6:	d103      	bne.n	80269e0 <__ieee754_pow+0xc8>
 80269d8:	2101      	movs	r1, #1
 80269da:	3502      	adds	r5, #2
 80269dc:	400a      	ands	r2, r1
 80269de:	1aad      	subs	r5, r5, r2
 80269e0:	2b00      	cmp	r3, #0
 80269e2:	d03d      	beq.n	8026a60 <__ieee754_pow+0x148>
 80269e4:	0030      	movs	r0, r6
 80269e6:	0039      	movs	r1, r7
 80269e8:	f000 fcc2 	bl	8027370 <fabs>
 80269ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80269ee:	9000      	str	r0, [sp, #0]
 80269f0:	9101      	str	r1, [sp, #4]
 80269f2:	2b00      	cmp	r3, #0
 80269f4:	d000      	beq.n	80269f8 <__ieee754_pow+0xe0>
 80269f6:	e093      	b.n	8026b20 <__ieee754_pow+0x208>
 80269f8:	4a75      	ldr	r2, [pc, #468]	@ (8026bd0 <__ieee754_pow+0x2b8>)
 80269fa:	00bb      	lsls	r3, r7, #2
 80269fc:	089b      	lsrs	r3, r3, #2
 80269fe:	4293      	cmp	r3, r2
 8026a00:	d002      	beq.n	8026a08 <__ieee754_pow+0xf0>
 8026a02:	2c00      	cmp	r4, #0
 8026a04:	d000      	beq.n	8026a08 <__ieee754_pow+0xf0>
 8026a06:	e08b      	b.n	8026b20 <__ieee754_pow+0x208>
 8026a08:	9b06      	ldr	r3, [sp, #24]
 8026a0a:	2b00      	cmp	r3, #0
 8026a0c:	da07      	bge.n	8026a1e <__ieee754_pow+0x106>
 8026a0e:	9a00      	ldr	r2, [sp, #0]
 8026a10:	9b01      	ldr	r3, [sp, #4]
 8026a12:	2000      	movs	r0, #0
 8026a14:	496e      	ldr	r1, [pc, #440]	@ (8026bd0 <__ieee754_pow+0x2b8>)
 8026a16:	f7db f9cd 	bl	8001db4 <__aeabi_ddiv>
 8026a1a:	9000      	str	r0, [sp, #0]
 8026a1c:	9101      	str	r1, [sp, #4]
 8026a1e:	9b08      	ldr	r3, [sp, #32]
 8026a20:	2b00      	cmp	r3, #0
 8026a22:	da54      	bge.n	8026ace <__ieee754_pow+0x1b6>
 8026a24:	4b66      	ldr	r3, [pc, #408]	@ (8026bc0 <__ieee754_pow+0x2a8>)
 8026a26:	18e4      	adds	r4, r4, r3
 8026a28:	432c      	orrs	r4, r5
 8026a2a:	d000      	beq.n	8026a2e <__ieee754_pow+0x116>
 8026a2c:	e06d      	b.n	8026b0a <__ieee754_pow+0x1f2>
 8026a2e:	9a00      	ldr	r2, [sp, #0]
 8026a30:	9b01      	ldr	r3, [sp, #4]
 8026a32:	0010      	movs	r0, r2
 8026a34:	0019      	movs	r1, r3
 8026a36:	f7dc f8c9 	bl	8002bcc <__aeabi_dsub>
 8026a3a:	0002      	movs	r2, r0
 8026a3c:	000b      	movs	r3, r1
 8026a3e:	e01c      	b.n	8026a7a <__ieee754_pow+0x162>
 8026a40:	2b00      	cmp	r3, #0
 8026a42:	d1cf      	bne.n	80269e4 <__ieee754_pow+0xcc>
 8026a44:	3314      	adds	r3, #20
 8026a46:	1a9a      	subs	r2, r3, r2
 8026a48:	9b04      	ldr	r3, [sp, #16]
 8026a4a:	4113      	asrs	r3, r2
 8026a4c:	0019      	movs	r1, r3
 8026a4e:	4091      	lsls	r1, r2
 8026a50:	000a      	movs	r2, r1
 8026a52:	9904      	ldr	r1, [sp, #16]
 8026a54:	428a      	cmp	r2, r1
 8026a56:	d103      	bne.n	8026a60 <__ieee754_pow+0x148>
 8026a58:	2201      	movs	r2, #1
 8026a5a:	2502      	movs	r5, #2
 8026a5c:	4013      	ands	r3, r2
 8026a5e:	1aed      	subs	r5, r5, r3
 8026a60:	4b5b      	ldr	r3, [pc, #364]	@ (8026bd0 <__ieee754_pow+0x2b8>)
 8026a62:	9a04      	ldr	r2, [sp, #16]
 8026a64:	429a      	cmp	r2, r3
 8026a66:	d136      	bne.n	8026ad6 <__ieee754_pow+0x1be>
 8026a68:	9b06      	ldr	r3, [sp, #24]
 8026a6a:	9600      	str	r6, [sp, #0]
 8026a6c:	9701      	str	r7, [sp, #4]
 8026a6e:	2b00      	cmp	r3, #0
 8026a70:	da2d      	bge.n	8026ace <__ieee754_pow+0x1b6>
 8026a72:	0032      	movs	r2, r6
 8026a74:	003b      	movs	r3, r7
 8026a76:	2000      	movs	r0, #0
 8026a78:	4955      	ldr	r1, [pc, #340]	@ (8026bd0 <__ieee754_pow+0x2b8>)
 8026a7a:	f7db f99b 	bl	8001db4 <__aeabi_ddiv>
 8026a7e:	e773      	b.n	8026968 <__ieee754_pow+0x50>
 8026a80:	2502      	movs	r5, #2
 8026a82:	2b00      	cmp	r3, #0
 8026a84:	d1ae      	bne.n	80269e4 <__ieee754_pow+0xcc>
 8026a86:	9b04      	ldr	r3, [sp, #16]
 8026a88:	4a4c      	ldr	r2, [pc, #304]	@ (8026bbc <__ieee754_pow+0x2a4>)
 8026a8a:	4293      	cmp	r3, r2
 8026a8c:	d1e8      	bne.n	8026a60 <__ieee754_pow+0x148>
 8026a8e:	4b4c      	ldr	r3, [pc, #304]	@ (8026bc0 <__ieee754_pow+0x2a8>)
 8026a90:	18e3      	adds	r3, r4, r3
 8026a92:	4333      	orrs	r3, r6
 8026a94:	d101      	bne.n	8026a9a <__ieee754_pow+0x182>
 8026a96:	f000 fc3b 	bl	8027310 <__ieee754_pow+0x9f8>
 8026a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8026bc8 <__ieee754_pow+0x2b0>)
 8026a9c:	429c      	cmp	r4, r3
 8026a9e:	d909      	bls.n	8026ab4 <__ieee754_pow+0x19c>
 8026aa0:	9b06      	ldr	r3, [sp, #24]
 8026aa2:	2b00      	cmp	r3, #0
 8026aa4:	da01      	bge.n	8026aaa <__ieee754_pow+0x192>
 8026aa6:	f000 fc37 	bl	8027318 <__ieee754_pow+0xa00>
 8026aaa:	9b02      	ldr	r3, [sp, #8]
 8026aac:	9c03      	ldr	r4, [sp, #12]
 8026aae:	9300      	str	r3, [sp, #0]
 8026ab0:	9401      	str	r4, [sp, #4]
 8026ab2:	e00c      	b.n	8026ace <__ieee754_pow+0x1b6>
 8026ab4:	9b06      	ldr	r3, [sp, #24]
 8026ab6:	2b00      	cmp	r3, #0
 8026ab8:	db01      	blt.n	8026abe <__ieee754_pow+0x1a6>
 8026aba:	f000 fc2d 	bl	8027318 <__ieee754_pow+0xa00>
 8026abe:	2280      	movs	r2, #128	@ 0x80
 8026ac0:	0612      	lsls	r2, r2, #24
 8026ac2:	4694      	mov	ip, r2
 8026ac4:	9b02      	ldr	r3, [sp, #8]
 8026ac6:	9300      	str	r3, [sp, #0]
 8026ac8:	9b03      	ldr	r3, [sp, #12]
 8026aca:	4463      	add	r3, ip
 8026acc:	9301      	str	r3, [sp, #4]
 8026ace:	9800      	ldr	r0, [sp, #0]
 8026ad0:	9901      	ldr	r1, [sp, #4]
 8026ad2:	b015      	add	sp, #84	@ 0x54
 8026ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026ad6:	2380      	movs	r3, #128	@ 0x80
 8026ad8:	9a06      	ldr	r2, [sp, #24]
 8026ada:	05db      	lsls	r3, r3, #23
 8026adc:	429a      	cmp	r2, r3
 8026ade:	d106      	bne.n	8026aee <__ieee754_pow+0x1d6>
 8026ae0:	0032      	movs	r2, r6
 8026ae2:	003b      	movs	r3, r7
 8026ae4:	0030      	movs	r0, r6
 8026ae6:	0039      	movs	r1, r7
 8026ae8:	f7db fda8 	bl	800263c <__aeabi_dmul>
 8026aec:	e73c      	b.n	8026968 <__ieee754_pow+0x50>
 8026aee:	4b39      	ldr	r3, [pc, #228]	@ (8026bd4 <__ieee754_pow+0x2bc>)
 8026af0:	9a06      	ldr	r2, [sp, #24]
 8026af2:	429a      	cmp	r2, r3
 8026af4:	d000      	beq.n	8026af8 <__ieee754_pow+0x1e0>
 8026af6:	e775      	b.n	80269e4 <__ieee754_pow+0xcc>
 8026af8:	9b08      	ldr	r3, [sp, #32]
 8026afa:	2b00      	cmp	r3, #0
 8026afc:	da00      	bge.n	8026b00 <__ieee754_pow+0x1e8>
 8026afe:	e771      	b.n	80269e4 <__ieee754_pow+0xcc>
 8026b00:	0030      	movs	r0, r6
 8026b02:	0039      	movs	r1, r7
 8026b04:	f000 fde4 	bl	80276d0 <__ieee754_sqrt>
 8026b08:	e72e      	b.n	8026968 <__ieee754_pow+0x50>
 8026b0a:	2d01      	cmp	r5, #1
 8026b0c:	d1df      	bne.n	8026ace <__ieee754_pow+0x1b6>
 8026b0e:	9800      	ldr	r0, [sp, #0]
 8026b10:	2180      	movs	r1, #128	@ 0x80
 8026b12:	0002      	movs	r2, r0
 8026b14:	9801      	ldr	r0, [sp, #4]
 8026b16:	0609      	lsls	r1, r1, #24
 8026b18:	1843      	adds	r3, r0, r1
 8026b1a:	9200      	str	r2, [sp, #0]
 8026b1c:	9301      	str	r3, [sp, #4]
 8026b1e:	e7d6      	b.n	8026ace <__ieee754_pow+0x1b6>
 8026b20:	0ffb      	lsrs	r3, r7, #31
 8026b22:	3b01      	subs	r3, #1
 8026b24:	001a      	movs	r2, r3
 8026b26:	432a      	orrs	r2, r5
 8026b28:	d104      	bne.n	8026b34 <__ieee754_pow+0x21c>
 8026b2a:	0032      	movs	r2, r6
 8026b2c:	003b      	movs	r3, r7
 8026b2e:	0030      	movs	r0, r6
 8026b30:	0039      	movs	r1, r7
 8026b32:	e780      	b.n	8026a36 <__ieee754_pow+0x11e>
 8026b34:	3d01      	subs	r5, #1
 8026b36:	2200      	movs	r2, #0
 8026b38:	431d      	orrs	r5, r3
 8026b3a:	d015      	beq.n	8026b68 <__ieee754_pow+0x250>
 8026b3c:	4b24      	ldr	r3, [pc, #144]	@ (8026bd0 <__ieee754_pow+0x2b8>)
 8026b3e:	9208      	str	r2, [sp, #32]
 8026b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8026b42:	2384      	movs	r3, #132	@ 0x84
 8026b44:	9a04      	ldr	r2, [sp, #16]
 8026b46:	05db      	lsls	r3, r3, #23
 8026b48:	429a      	cmp	r2, r3
 8026b4a:	d800      	bhi.n	8026b4e <__ieee754_pow+0x236>
 8026b4c:	e102      	b.n	8026d54 <__ieee754_pow+0x43c>
 8026b4e:	4b22      	ldr	r3, [pc, #136]	@ (8026bd8 <__ieee754_pow+0x2c0>)
 8026b50:	429a      	cmp	r2, r3
 8026b52:	d912      	bls.n	8026b7a <__ieee754_pow+0x262>
 8026b54:	4b1c      	ldr	r3, [pc, #112]	@ (8026bc8 <__ieee754_pow+0x2b0>)
 8026b56:	429c      	cmp	r4, r3
 8026b58:	d808      	bhi.n	8026b6c <__ieee754_pow+0x254>
 8026b5a:	9b06      	ldr	r3, [sp, #24]
 8026b5c:	2b00      	cmp	r3, #0
 8026b5e:	da08      	bge.n	8026b72 <__ieee754_pow+0x25a>
 8026b60:	2000      	movs	r0, #0
 8026b62:	f000 fd8b 	bl	802767c <__math_oflow>
 8026b66:	e6ff      	b.n	8026968 <__ieee754_pow+0x50>
 8026b68:	4b1c      	ldr	r3, [pc, #112]	@ (8026bdc <__ieee754_pow+0x2c4>)
 8026b6a:	e7e8      	b.n	8026b3e <__ieee754_pow+0x226>
 8026b6c:	9b06      	ldr	r3, [sp, #24]
 8026b6e:	2b00      	cmp	r3, #0
 8026b70:	dcf6      	bgt.n	8026b60 <__ieee754_pow+0x248>
 8026b72:	2000      	movs	r0, #0
 8026b74:	f000 fd7b 	bl	802766e <__math_uflow>
 8026b78:	e6f6      	b.n	8026968 <__ieee754_pow+0x50>
 8026b7a:	4b19      	ldr	r3, [pc, #100]	@ (8026be0 <__ieee754_pow+0x2c8>)
 8026b7c:	429c      	cmp	r4, r3
 8026b7e:	d80b      	bhi.n	8026b98 <__ieee754_pow+0x280>
 8026b80:	9808      	ldr	r0, [sp, #32]
 8026b82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026b84:	2300      	movs	r3, #0
 8026b86:	2200      	movs	r2, #0
 8026b88:	f7d9 fc98 	bl	80004bc <__aeabi_dcmplt>
 8026b8c:	1e43      	subs	r3, r0, #1
 8026b8e:	4198      	sbcs	r0, r3
 8026b90:	9b06      	ldr	r3, [sp, #24]
 8026b92:	2b00      	cmp	r3, #0
 8026b94:	daee      	bge.n	8026b74 <__ieee754_pow+0x25c>
 8026b96:	e7e4      	b.n	8026b62 <__ieee754_pow+0x24a>
 8026b98:	4b0d      	ldr	r3, [pc, #52]	@ (8026bd0 <__ieee754_pow+0x2b8>)
 8026b9a:	2200      	movs	r2, #0
 8026b9c:	429c      	cmp	r4, r3
 8026b9e:	d921      	bls.n	8026be4 <__ieee754_pow+0x2cc>
 8026ba0:	9808      	ldr	r0, [sp, #32]
 8026ba2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026ba4:	2300      	movs	r3, #0
 8026ba6:	f7d9 fc89 	bl	80004bc <__aeabi_dcmplt>
 8026baa:	1e43      	subs	r3, r0, #1
 8026bac:	4198      	sbcs	r0, r3
 8026bae:	9b06      	ldr	r3, [sp, #24]
 8026bb0:	2b00      	cmp	r3, #0
 8026bb2:	dcd6      	bgt.n	8026b62 <__ieee754_pow+0x24a>
 8026bb4:	e7de      	b.n	8026b74 <__ieee754_pow+0x25c>
 8026bb6:	46c0      	nop			@ (mov r8, r8)
 8026bb8:	fff00000 	.word	0xfff00000
 8026bbc:	7ff00000 	.word	0x7ff00000
 8026bc0:	c0100000 	.word	0xc0100000
 8026bc4:	433fffff 	.word	0x433fffff
 8026bc8:	3fefffff 	.word	0x3fefffff
 8026bcc:	fffffc01 	.word	0xfffffc01
 8026bd0:	3ff00000 	.word	0x3ff00000
 8026bd4:	3fe00000 	.word	0x3fe00000
 8026bd8:	43f00000 	.word	0x43f00000
 8026bdc:	bff00000 	.word	0xbff00000
 8026be0:	3feffffe 	.word	0x3feffffe
 8026be4:	9800      	ldr	r0, [sp, #0]
 8026be6:	9901      	ldr	r1, [sp, #4]
 8026be8:	4b4f      	ldr	r3, [pc, #316]	@ (8026d28 <__ieee754_pow+0x410>)
 8026bea:	f7db ffef 	bl	8002bcc <__aeabi_dsub>
 8026bee:	22c0      	movs	r2, #192	@ 0xc0
 8026bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8026d2c <__ieee754_pow+0x414>)
 8026bf2:	05d2      	lsls	r2, r2, #23
 8026bf4:	0006      	movs	r6, r0
 8026bf6:	000f      	movs	r7, r1
 8026bf8:	f7db fd20 	bl	800263c <__aeabi_dmul>
 8026bfc:	4a4c      	ldr	r2, [pc, #304]	@ (8026d30 <__ieee754_pow+0x418>)
 8026bfe:	9004      	str	r0, [sp, #16]
 8026c00:	9105      	str	r1, [sp, #20]
 8026c02:	4b4c      	ldr	r3, [pc, #304]	@ (8026d34 <__ieee754_pow+0x41c>)
 8026c04:	0030      	movs	r0, r6
 8026c06:	0039      	movs	r1, r7
 8026c08:	f7db fd18 	bl	800263c <__aeabi_dmul>
 8026c0c:	2200      	movs	r2, #0
 8026c0e:	9000      	str	r0, [sp, #0]
 8026c10:	9101      	str	r1, [sp, #4]
 8026c12:	4b49      	ldr	r3, [pc, #292]	@ (8026d38 <__ieee754_pow+0x420>)
 8026c14:	0030      	movs	r0, r6
 8026c16:	0039      	movs	r1, r7
 8026c18:	f7db fd10 	bl	800263c <__aeabi_dmul>
 8026c1c:	0002      	movs	r2, r0
 8026c1e:	000b      	movs	r3, r1
 8026c20:	4846      	ldr	r0, [pc, #280]	@ (8026d3c <__ieee754_pow+0x424>)
 8026c22:	4947      	ldr	r1, [pc, #284]	@ (8026d40 <__ieee754_pow+0x428>)
 8026c24:	f7db ffd2 	bl	8002bcc <__aeabi_dsub>
 8026c28:	0032      	movs	r2, r6
 8026c2a:	003b      	movs	r3, r7
 8026c2c:	f7db fd06 	bl	800263c <__aeabi_dmul>
 8026c30:	0002      	movs	r2, r0
 8026c32:	000b      	movs	r3, r1
 8026c34:	2000      	movs	r0, #0
 8026c36:	4943      	ldr	r1, [pc, #268]	@ (8026d44 <__ieee754_pow+0x42c>)
 8026c38:	f7db ffc8 	bl	8002bcc <__aeabi_dsub>
 8026c3c:	0032      	movs	r2, r6
 8026c3e:	0004      	movs	r4, r0
 8026c40:	000d      	movs	r5, r1
 8026c42:	003b      	movs	r3, r7
 8026c44:	0030      	movs	r0, r6
 8026c46:	0039      	movs	r1, r7
 8026c48:	f7db fcf8 	bl	800263c <__aeabi_dmul>
 8026c4c:	0002      	movs	r2, r0
 8026c4e:	000b      	movs	r3, r1
 8026c50:	0020      	movs	r0, r4
 8026c52:	0029      	movs	r1, r5
 8026c54:	f7db fcf2 	bl	800263c <__aeabi_dmul>
 8026c58:	4a3b      	ldr	r2, [pc, #236]	@ (8026d48 <__ieee754_pow+0x430>)
 8026c5a:	4b34      	ldr	r3, [pc, #208]	@ (8026d2c <__ieee754_pow+0x414>)
 8026c5c:	f7db fcee 	bl	800263c <__aeabi_dmul>
 8026c60:	0002      	movs	r2, r0
 8026c62:	000b      	movs	r3, r1
 8026c64:	9800      	ldr	r0, [sp, #0]
 8026c66:	9901      	ldr	r1, [sp, #4]
 8026c68:	f7db ffb0 	bl	8002bcc <__aeabi_dsub>
 8026c6c:	0002      	movs	r2, r0
 8026c6e:	000b      	movs	r3, r1
 8026c70:	0004      	movs	r4, r0
 8026c72:	000d      	movs	r5, r1
 8026c74:	9804      	ldr	r0, [sp, #16]
 8026c76:	9905      	ldr	r1, [sp, #20]
 8026c78:	f7da fd38 	bl	80016ec <__aeabi_dadd>
 8026c7c:	9a04      	ldr	r2, [sp, #16]
 8026c7e:	9b05      	ldr	r3, [sp, #20]
 8026c80:	2000      	movs	r0, #0
 8026c82:	9000      	str	r0, [sp, #0]
 8026c84:	9101      	str	r1, [sp, #4]
 8026c86:	f7db ffa1 	bl	8002bcc <__aeabi_dsub>
 8026c8a:	0002      	movs	r2, r0
 8026c8c:	000b      	movs	r3, r1
 8026c8e:	0020      	movs	r0, r4
 8026c90:	0029      	movs	r1, r5
 8026c92:	f7db ff9b 	bl	8002bcc <__aeabi_dsub>
 8026c96:	9b02      	ldr	r3, [sp, #8]
 8026c98:	9c03      	ldr	r4, [sp, #12]
 8026c9a:	9304      	str	r3, [sp, #16]
 8026c9c:	9405      	str	r4, [sp, #20]
 8026c9e:	2300      	movs	r3, #0
 8026ca0:	9304      	str	r3, [sp, #16]
 8026ca2:	9c04      	ldr	r4, [sp, #16]
 8026ca4:	9d05      	ldr	r5, [sp, #20]
 8026ca6:	0006      	movs	r6, r0
 8026ca8:	000f      	movs	r7, r1
 8026caa:	9802      	ldr	r0, [sp, #8]
 8026cac:	9903      	ldr	r1, [sp, #12]
 8026cae:	0022      	movs	r2, r4
 8026cb0:	002b      	movs	r3, r5
 8026cb2:	f7db ff8b 	bl	8002bcc <__aeabi_dsub>
 8026cb6:	9a00      	ldr	r2, [sp, #0]
 8026cb8:	9b01      	ldr	r3, [sp, #4]
 8026cba:	f7db fcbf 	bl	800263c <__aeabi_dmul>
 8026cbe:	9a02      	ldr	r2, [sp, #8]
 8026cc0:	9b03      	ldr	r3, [sp, #12]
 8026cc2:	9006      	str	r0, [sp, #24]
 8026cc4:	9107      	str	r1, [sp, #28]
 8026cc6:	0030      	movs	r0, r6
 8026cc8:	0039      	movs	r1, r7
 8026cca:	f7db fcb7 	bl	800263c <__aeabi_dmul>
 8026cce:	0002      	movs	r2, r0
 8026cd0:	000b      	movs	r3, r1
 8026cd2:	9806      	ldr	r0, [sp, #24]
 8026cd4:	9907      	ldr	r1, [sp, #28]
 8026cd6:	f7da fd09 	bl	80016ec <__aeabi_dadd>
 8026cda:	0022      	movs	r2, r4
 8026cdc:	002b      	movs	r3, r5
 8026cde:	9002      	str	r0, [sp, #8]
 8026ce0:	9103      	str	r1, [sp, #12]
 8026ce2:	9800      	ldr	r0, [sp, #0]
 8026ce4:	9901      	ldr	r1, [sp, #4]
 8026ce6:	f7db fca9 	bl	800263c <__aeabi_dmul>
 8026cea:	000b      	movs	r3, r1
 8026cec:	0002      	movs	r2, r0
 8026cee:	0006      	movs	r6, r0
 8026cf0:	000f      	movs	r7, r1
 8026cf2:	9802      	ldr	r0, [sp, #8]
 8026cf4:	9903      	ldr	r1, [sp, #12]
 8026cf6:	f7da fcf9 	bl	80016ec <__aeabi_dadd>
 8026cfa:	9000      	str	r0, [sp, #0]
 8026cfc:	9101      	str	r1, [sp, #4]
 8026cfe:	9c01      	ldr	r4, [sp, #4]
 8026d00:	4b12      	ldr	r3, [pc, #72]	@ (8026d4c <__ieee754_pow+0x434>)
 8026d02:	9406      	str	r4, [sp, #24]
 8026d04:	429c      	cmp	r4, r3
 8026d06:	dc00      	bgt.n	8026d0a <__ieee754_pow+0x3f2>
 8026d08:	e222      	b.n	8027150 <__ieee754_pow+0x838>
 8026d0a:	4a11      	ldr	r2, [pc, #68]	@ (8026d50 <__ieee754_pow+0x438>)
 8026d0c:	18a3      	adds	r3, r4, r2
 8026d0e:	9a00      	ldr	r2, [sp, #0]
 8026d10:	4313      	orrs	r3, r2
 8026d12:	d100      	bne.n	8026d16 <__ieee754_pow+0x3fe>
 8026d14:	e1a0      	b.n	8027058 <__ieee754_pow+0x740>
 8026d16:	9808      	ldr	r0, [sp, #32]
 8026d18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026d1a:	2300      	movs	r3, #0
 8026d1c:	2200      	movs	r2, #0
 8026d1e:	f7d9 fbcd 	bl	80004bc <__aeabi_dcmplt>
 8026d22:	1e43      	subs	r3, r0, #1
 8026d24:	4198      	sbcs	r0, r3
 8026d26:	e71c      	b.n	8026b62 <__ieee754_pow+0x24a>
 8026d28:	3ff00000 	.word	0x3ff00000
 8026d2c:	3ff71547 	.word	0x3ff71547
 8026d30:	f85ddf44 	.word	0xf85ddf44
 8026d34:	3e54ae0b 	.word	0x3e54ae0b
 8026d38:	3fd00000 	.word	0x3fd00000
 8026d3c:	55555555 	.word	0x55555555
 8026d40:	3fd55555 	.word	0x3fd55555
 8026d44:	3fe00000 	.word	0x3fe00000
 8026d48:	652b82fe 	.word	0x652b82fe
 8026d4c:	408fffff 	.word	0x408fffff
 8026d50:	bf700000 	.word	0xbf700000
 8026d54:	4be0      	ldr	r3, [pc, #896]	@ (80270d8 <__ieee754_pow+0x7c0>)
 8026d56:	2200      	movs	r2, #0
 8026d58:	423b      	tst	r3, r7
 8026d5a:	d10b      	bne.n	8026d74 <__ieee754_pow+0x45c>
 8026d5c:	9800      	ldr	r0, [sp, #0]
 8026d5e:	9901      	ldr	r1, [sp, #4]
 8026d60:	2200      	movs	r2, #0
 8026d62:	4bde      	ldr	r3, [pc, #888]	@ (80270dc <__ieee754_pow+0x7c4>)
 8026d64:	f7db fc6a 	bl	800263c <__aeabi_dmul>
 8026d68:	2235      	movs	r2, #53	@ 0x35
 8026d6a:	9000      	str	r0, [sp, #0]
 8026d6c:	9101      	str	r1, [sp, #4]
 8026d6e:	9b01      	ldr	r3, [sp, #4]
 8026d70:	4252      	negs	r2, r2
 8026d72:	930a      	str	r3, [sp, #40]	@ 0x28
 8026d74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026d76:	49da      	ldr	r1, [pc, #872]	@ (80270e0 <__ieee754_pow+0x7c8>)
 8026d78:	151b      	asrs	r3, r3, #20
 8026d7a:	185b      	adds	r3, r3, r1
 8026d7c:	189b      	adds	r3, r3, r2
 8026d7e:	930e      	str	r3, [sp, #56]	@ 0x38
 8026d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026d82:	4dd8      	ldr	r5, [pc, #864]	@ (80270e4 <__ieee754_pow+0x7cc>)
 8026d84:	031b      	lsls	r3, r3, #12
 8026d86:	4ad8      	ldr	r2, [pc, #864]	@ (80270e8 <__ieee754_pow+0x7d0>)
 8026d88:	0b1b      	lsrs	r3, r3, #12
 8026d8a:	2600      	movs	r6, #0
 8026d8c:	431d      	orrs	r5, r3
 8026d8e:	4293      	cmp	r3, r2
 8026d90:	dd09      	ble.n	8026da6 <__ieee754_pow+0x48e>
 8026d92:	4ad6      	ldr	r2, [pc, #856]	@ (80270ec <__ieee754_pow+0x7d4>)
 8026d94:	3601      	adds	r6, #1
 8026d96:	4293      	cmp	r3, r2
 8026d98:	dd05      	ble.n	8026da6 <__ieee754_pow+0x48e>
 8026d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026d9c:	199b      	adds	r3, r3, r6
 8026d9e:	2600      	movs	r6, #0
 8026da0:	930e      	str	r3, [sp, #56]	@ 0x38
 8026da2:	4bd3      	ldr	r3, [pc, #844]	@ (80270f0 <__ieee754_pow+0x7d8>)
 8026da4:	18ed      	adds	r5, r5, r3
 8026da6:	9800      	ldr	r0, [sp, #0]
 8026da8:	9901      	ldr	r1, [sp, #4]
 8026daa:	0029      	movs	r1, r5
 8026dac:	4bd1      	ldr	r3, [pc, #836]	@ (80270f4 <__ieee754_pow+0x7dc>)
 8026dae:	00f2      	lsls	r2, r6, #3
 8026db0:	189b      	adds	r3, r3, r2
 8026db2:	685c      	ldr	r4, [r3, #4]
 8026db4:	681b      	ldr	r3, [r3, #0]
 8026db6:	920f      	str	r2, [sp, #60]	@ 0x3c
 8026db8:	930a      	str	r3, [sp, #40]	@ 0x28
 8026dba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026dbc:	001a      	movs	r2, r3
 8026dbe:	0023      	movs	r3, r4
 8026dc0:	900c      	str	r0, [sp, #48]	@ 0x30
 8026dc2:	910d      	str	r1, [sp, #52]	@ 0x34
 8026dc4:	f7db ff02 	bl	8002bcc <__aeabi_dsub>
 8026dc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026dcc:	9010      	str	r0, [sp, #64]	@ 0x40
 8026dce:	9111      	str	r1, [sp, #68]	@ 0x44
 8026dd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026dd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026dd4:	f7da fc8a 	bl	80016ec <__aeabi_dadd>
 8026dd8:	0002      	movs	r2, r0
 8026dda:	000b      	movs	r3, r1
 8026ddc:	2000      	movs	r0, #0
 8026dde:	49c1      	ldr	r1, [pc, #772]	@ (80270e4 <__ieee754_pow+0x7cc>)
 8026de0:	f7da ffe8 	bl	8001db4 <__aeabi_ddiv>
 8026de4:	0002      	movs	r2, r0
 8026de6:	000b      	movs	r3, r1
 8026de8:	9012      	str	r0, [sp, #72]	@ 0x48
 8026dea:	9113      	str	r1, [sp, #76]	@ 0x4c
 8026dec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8026dee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8026df0:	f7db fc24 	bl	800263c <__aeabi_dmul>
 8026df4:	9006      	str	r0, [sp, #24]
 8026df6:	9107      	str	r1, [sp, #28]
 8026df8:	9b06      	ldr	r3, [sp, #24]
 8026dfa:	9c07      	ldr	r4, [sp, #28]
 8026dfc:	2180      	movs	r1, #128	@ 0x80
 8026dfe:	9304      	str	r3, [sp, #16]
 8026e00:	9405      	str	r4, [sp, #20]
 8026e02:	2080      	movs	r0, #128	@ 0x80
 8026e04:	2300      	movs	r3, #0
 8026e06:	2200      	movs	r2, #0
 8026e08:	106d      	asrs	r5, r5, #1
 8026e0a:	0589      	lsls	r1, r1, #22
 8026e0c:	9304      	str	r3, [sp, #16]
 8026e0e:	4329      	orrs	r1, r5
 8026e10:	0300      	lsls	r0, r0, #12
 8026e12:	9b04      	ldr	r3, [sp, #16]
 8026e14:	9c05      	ldr	r4, [sp, #20]
 8026e16:	1809      	adds	r1, r1, r0
 8026e18:	9300      	str	r3, [sp, #0]
 8026e1a:	9401      	str	r4, [sp, #4]
 8026e1c:	04b6      	lsls	r6, r6, #18
 8026e1e:	198b      	adds	r3, r1, r6
 8026e20:	9800      	ldr	r0, [sp, #0]
 8026e22:	9901      	ldr	r1, [sp, #4]
 8026e24:	0014      	movs	r4, r2
 8026e26:	001d      	movs	r5, r3
 8026e28:	f7db fc08 	bl	800263c <__aeabi_dmul>
 8026e2c:	0002      	movs	r2, r0
 8026e2e:	000b      	movs	r3, r1
 8026e30:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8026e32:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8026e34:	f7db feca 	bl	8002bcc <__aeabi_dsub>
 8026e38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026e3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026e3c:	0006      	movs	r6, r0
 8026e3e:	000f      	movs	r7, r1
 8026e40:	0020      	movs	r0, r4
 8026e42:	0029      	movs	r1, r5
 8026e44:	f7db fec2 	bl	8002bcc <__aeabi_dsub>
 8026e48:	0002      	movs	r2, r0
 8026e4a:	000b      	movs	r3, r1
 8026e4c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026e4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8026e50:	f7db febc 	bl	8002bcc <__aeabi_dsub>
 8026e54:	9a00      	ldr	r2, [sp, #0]
 8026e56:	9b01      	ldr	r3, [sp, #4]
 8026e58:	f7db fbf0 	bl	800263c <__aeabi_dmul>
 8026e5c:	0002      	movs	r2, r0
 8026e5e:	000b      	movs	r3, r1
 8026e60:	0030      	movs	r0, r6
 8026e62:	0039      	movs	r1, r7
 8026e64:	f7db feb2 	bl	8002bcc <__aeabi_dsub>
 8026e68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026e6a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026e6c:	f7db fbe6 	bl	800263c <__aeabi_dmul>
 8026e70:	9a06      	ldr	r2, [sp, #24]
 8026e72:	9b07      	ldr	r3, [sp, #28]
 8026e74:	900a      	str	r0, [sp, #40]	@ 0x28
 8026e76:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026e78:	0010      	movs	r0, r2
 8026e7a:	0019      	movs	r1, r3
 8026e7c:	f7db fbde 	bl	800263c <__aeabi_dmul>
 8026e80:	0006      	movs	r6, r0
 8026e82:	000f      	movs	r7, r1
 8026e84:	4a9c      	ldr	r2, [pc, #624]	@ (80270f8 <__ieee754_pow+0x7e0>)
 8026e86:	4b9d      	ldr	r3, [pc, #628]	@ (80270fc <__ieee754_pow+0x7e4>)
 8026e88:	f7db fbd8 	bl	800263c <__aeabi_dmul>
 8026e8c:	4a9c      	ldr	r2, [pc, #624]	@ (8027100 <__ieee754_pow+0x7e8>)
 8026e8e:	4b9d      	ldr	r3, [pc, #628]	@ (8027104 <__ieee754_pow+0x7ec>)
 8026e90:	f7da fc2c 	bl	80016ec <__aeabi_dadd>
 8026e94:	0032      	movs	r2, r6
 8026e96:	003b      	movs	r3, r7
 8026e98:	f7db fbd0 	bl	800263c <__aeabi_dmul>
 8026e9c:	4a9a      	ldr	r2, [pc, #616]	@ (8027108 <__ieee754_pow+0x7f0>)
 8026e9e:	4b9b      	ldr	r3, [pc, #620]	@ (802710c <__ieee754_pow+0x7f4>)
 8026ea0:	f7da fc24 	bl	80016ec <__aeabi_dadd>
 8026ea4:	0032      	movs	r2, r6
 8026ea6:	003b      	movs	r3, r7
 8026ea8:	f7db fbc8 	bl	800263c <__aeabi_dmul>
 8026eac:	4a98      	ldr	r2, [pc, #608]	@ (8027110 <__ieee754_pow+0x7f8>)
 8026eae:	4b99      	ldr	r3, [pc, #612]	@ (8027114 <__ieee754_pow+0x7fc>)
 8026eb0:	f7da fc1c 	bl	80016ec <__aeabi_dadd>
 8026eb4:	0032      	movs	r2, r6
 8026eb6:	003b      	movs	r3, r7
 8026eb8:	f7db fbc0 	bl	800263c <__aeabi_dmul>
 8026ebc:	4a96      	ldr	r2, [pc, #600]	@ (8027118 <__ieee754_pow+0x800>)
 8026ebe:	4b97      	ldr	r3, [pc, #604]	@ (802711c <__ieee754_pow+0x804>)
 8026ec0:	f7da fc14 	bl	80016ec <__aeabi_dadd>
 8026ec4:	0032      	movs	r2, r6
 8026ec6:	003b      	movs	r3, r7
 8026ec8:	f7db fbb8 	bl	800263c <__aeabi_dmul>
 8026ecc:	4a94      	ldr	r2, [pc, #592]	@ (8027120 <__ieee754_pow+0x808>)
 8026ece:	4b95      	ldr	r3, [pc, #596]	@ (8027124 <__ieee754_pow+0x80c>)
 8026ed0:	f7da fc0c 	bl	80016ec <__aeabi_dadd>
 8026ed4:	0032      	movs	r2, r6
 8026ed6:	0004      	movs	r4, r0
 8026ed8:	000d      	movs	r5, r1
 8026eda:	003b      	movs	r3, r7
 8026edc:	0030      	movs	r0, r6
 8026ede:	0039      	movs	r1, r7
 8026ee0:	f7db fbac 	bl	800263c <__aeabi_dmul>
 8026ee4:	0002      	movs	r2, r0
 8026ee6:	000b      	movs	r3, r1
 8026ee8:	0020      	movs	r0, r4
 8026eea:	0029      	movs	r1, r5
 8026eec:	f7db fba6 	bl	800263c <__aeabi_dmul>
 8026ef0:	9a00      	ldr	r2, [sp, #0]
 8026ef2:	9b01      	ldr	r3, [sp, #4]
 8026ef4:	0004      	movs	r4, r0
 8026ef6:	000d      	movs	r5, r1
 8026ef8:	9806      	ldr	r0, [sp, #24]
 8026efa:	9907      	ldr	r1, [sp, #28]
 8026efc:	f7da fbf6 	bl	80016ec <__aeabi_dadd>
 8026f00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026f02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026f04:	f7db fb9a 	bl	800263c <__aeabi_dmul>
 8026f08:	0022      	movs	r2, r4
 8026f0a:	002b      	movs	r3, r5
 8026f0c:	f7da fbee 	bl	80016ec <__aeabi_dadd>
 8026f10:	9a00      	ldr	r2, [sp, #0]
 8026f12:	9b01      	ldr	r3, [sp, #4]
 8026f14:	900c      	str	r0, [sp, #48]	@ 0x30
 8026f16:	910d      	str	r1, [sp, #52]	@ 0x34
 8026f18:	0010      	movs	r0, r2
 8026f1a:	0019      	movs	r1, r3
 8026f1c:	f7db fb8e 	bl	800263c <__aeabi_dmul>
 8026f20:	2200      	movs	r2, #0
 8026f22:	4b81      	ldr	r3, [pc, #516]	@ (8027128 <__ieee754_pow+0x810>)
 8026f24:	0004      	movs	r4, r0
 8026f26:	000d      	movs	r5, r1
 8026f28:	f7da fbe0 	bl	80016ec <__aeabi_dadd>
 8026f2c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026f30:	f7da fbdc 	bl	80016ec <__aeabi_dadd>
 8026f34:	2000      	movs	r0, #0
 8026f36:	000f      	movs	r7, r1
 8026f38:	0006      	movs	r6, r0
 8026f3a:	0002      	movs	r2, r0
 8026f3c:	000b      	movs	r3, r1
 8026f3e:	9800      	ldr	r0, [sp, #0]
 8026f40:	9901      	ldr	r1, [sp, #4]
 8026f42:	f7db fb7b 	bl	800263c <__aeabi_dmul>
 8026f46:	2200      	movs	r2, #0
 8026f48:	9000      	str	r0, [sp, #0]
 8026f4a:	9101      	str	r1, [sp, #4]
 8026f4c:	4b76      	ldr	r3, [pc, #472]	@ (8027128 <__ieee754_pow+0x810>)
 8026f4e:	0030      	movs	r0, r6
 8026f50:	0039      	movs	r1, r7
 8026f52:	f7db fe3b 	bl	8002bcc <__aeabi_dsub>
 8026f56:	0022      	movs	r2, r4
 8026f58:	002b      	movs	r3, r5
 8026f5a:	f7db fe37 	bl	8002bcc <__aeabi_dsub>
 8026f5e:	0002      	movs	r2, r0
 8026f60:	000b      	movs	r3, r1
 8026f62:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8026f64:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8026f66:	f7db fe31 	bl	8002bcc <__aeabi_dsub>
 8026f6a:	9a06      	ldr	r2, [sp, #24]
 8026f6c:	9b07      	ldr	r3, [sp, #28]
 8026f6e:	f7db fb65 	bl	800263c <__aeabi_dmul>
 8026f72:	0032      	movs	r2, r6
 8026f74:	0004      	movs	r4, r0
 8026f76:	000d      	movs	r5, r1
 8026f78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026f7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026f7c:	003b      	movs	r3, r7
 8026f7e:	f7db fb5d 	bl	800263c <__aeabi_dmul>
 8026f82:	0002      	movs	r2, r0
 8026f84:	000b      	movs	r3, r1
 8026f86:	0020      	movs	r0, r4
 8026f88:	0029      	movs	r1, r5
 8026f8a:	f7da fbaf 	bl	80016ec <__aeabi_dadd>
 8026f8e:	0004      	movs	r4, r0
 8026f90:	000d      	movs	r5, r1
 8026f92:	0002      	movs	r2, r0
 8026f94:	000b      	movs	r3, r1
 8026f96:	9800      	ldr	r0, [sp, #0]
 8026f98:	9901      	ldr	r1, [sp, #4]
 8026f9a:	f7da fba7 	bl	80016ec <__aeabi_dadd>
 8026f9e:	22e0      	movs	r2, #224	@ 0xe0
 8026fa0:	2000      	movs	r0, #0
 8026fa2:	4b62      	ldr	r3, [pc, #392]	@ (802712c <__ieee754_pow+0x814>)
 8026fa4:	0612      	lsls	r2, r2, #24
 8026fa6:	0006      	movs	r6, r0
 8026fa8:	000f      	movs	r7, r1
 8026faa:	f7db fb47 	bl	800263c <__aeabi_dmul>
 8026fae:	9006      	str	r0, [sp, #24]
 8026fb0:	9107      	str	r1, [sp, #28]
 8026fb2:	9a00      	ldr	r2, [sp, #0]
 8026fb4:	9b01      	ldr	r3, [sp, #4]
 8026fb6:	0030      	movs	r0, r6
 8026fb8:	0039      	movs	r1, r7
 8026fba:	f7db fe07 	bl	8002bcc <__aeabi_dsub>
 8026fbe:	0002      	movs	r2, r0
 8026fc0:	000b      	movs	r3, r1
 8026fc2:	0020      	movs	r0, r4
 8026fc4:	0029      	movs	r1, r5
 8026fc6:	f7db fe01 	bl	8002bcc <__aeabi_dsub>
 8026fca:	4a59      	ldr	r2, [pc, #356]	@ (8027130 <__ieee754_pow+0x818>)
 8026fcc:	4b57      	ldr	r3, [pc, #348]	@ (802712c <__ieee754_pow+0x814>)
 8026fce:	f7db fb35 	bl	800263c <__aeabi_dmul>
 8026fd2:	4a58      	ldr	r2, [pc, #352]	@ (8027134 <__ieee754_pow+0x81c>)
 8026fd4:	0004      	movs	r4, r0
 8026fd6:	000d      	movs	r5, r1
 8026fd8:	0030      	movs	r0, r6
 8026fda:	0039      	movs	r1, r7
 8026fdc:	4b56      	ldr	r3, [pc, #344]	@ (8027138 <__ieee754_pow+0x820>)
 8026fde:	f7db fb2d 	bl	800263c <__aeabi_dmul>
 8026fe2:	0002      	movs	r2, r0
 8026fe4:	000b      	movs	r3, r1
 8026fe6:	0020      	movs	r0, r4
 8026fe8:	0029      	movs	r1, r5
 8026fea:	f7da fb7f 	bl	80016ec <__aeabi_dadd>
 8026fee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026ff0:	4b52      	ldr	r3, [pc, #328]	@ (802713c <__ieee754_pow+0x824>)
 8026ff2:	189b      	adds	r3, r3, r2
 8026ff4:	681a      	ldr	r2, [r3, #0]
 8026ff6:	685b      	ldr	r3, [r3, #4]
 8026ff8:	f7da fb78 	bl	80016ec <__aeabi_dadd>
 8026ffc:	900a      	str	r0, [sp, #40]	@ 0x28
 8026ffe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027000:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8027002:	f7dc f9dd 	bl	80033c0 <__aeabi_i2d>
 8027006:	0004      	movs	r4, r0
 8027008:	000d      	movs	r5, r1
 802700a:	9806      	ldr	r0, [sp, #24]
 802700c:	9907      	ldr	r1, [sp, #28]
 802700e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027010:	4b4b      	ldr	r3, [pc, #300]	@ (8027140 <__ieee754_pow+0x828>)
 8027012:	189b      	adds	r3, r3, r2
 8027014:	681e      	ldr	r6, [r3, #0]
 8027016:	685f      	ldr	r7, [r3, #4]
 8027018:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802701a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802701c:	f7da fb66 	bl	80016ec <__aeabi_dadd>
 8027020:	0032      	movs	r2, r6
 8027022:	003b      	movs	r3, r7
 8027024:	f7da fb62 	bl	80016ec <__aeabi_dadd>
 8027028:	0022      	movs	r2, r4
 802702a:	002b      	movs	r3, r5
 802702c:	f7da fb5e 	bl	80016ec <__aeabi_dadd>
 8027030:	2000      	movs	r0, #0
 8027032:	0022      	movs	r2, r4
 8027034:	002b      	movs	r3, r5
 8027036:	9000      	str	r0, [sp, #0]
 8027038:	9101      	str	r1, [sp, #4]
 802703a:	f7db fdc7 	bl	8002bcc <__aeabi_dsub>
 802703e:	0032      	movs	r2, r6
 8027040:	003b      	movs	r3, r7
 8027042:	f7db fdc3 	bl	8002bcc <__aeabi_dsub>
 8027046:	9a06      	ldr	r2, [sp, #24]
 8027048:	9b07      	ldr	r3, [sp, #28]
 802704a:	f7db fdbf 	bl	8002bcc <__aeabi_dsub>
 802704e:	0002      	movs	r2, r0
 8027050:	000b      	movs	r3, r1
 8027052:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027054:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027056:	e61c      	b.n	8026c92 <__ieee754_pow+0x37a>
 8027058:	4a3a      	ldr	r2, [pc, #232]	@ (8027144 <__ieee754_pow+0x82c>)
 802705a:	4b3b      	ldr	r3, [pc, #236]	@ (8027148 <__ieee754_pow+0x830>)
 802705c:	9802      	ldr	r0, [sp, #8]
 802705e:	9903      	ldr	r1, [sp, #12]
 8027060:	f7da fb44 	bl	80016ec <__aeabi_dadd>
 8027064:	0032      	movs	r2, r6
 8027066:	003b      	movs	r3, r7
 8027068:	9004      	str	r0, [sp, #16]
 802706a:	9105      	str	r1, [sp, #20]
 802706c:	9800      	ldr	r0, [sp, #0]
 802706e:	9901      	ldr	r1, [sp, #4]
 8027070:	f7db fdac 	bl	8002bcc <__aeabi_dsub>
 8027074:	0002      	movs	r2, r0
 8027076:	000b      	movs	r3, r1
 8027078:	9804      	ldr	r0, [sp, #16]
 802707a:	9905      	ldr	r1, [sp, #20]
 802707c:	f7d9 fa32 	bl	80004e4 <__aeabi_dcmpgt>
 8027080:	2800      	cmp	r0, #0
 8027082:	d000      	beq.n	8027086 <__ieee754_pow+0x76e>
 8027084:	e647      	b.n	8026d16 <__ieee754_pow+0x3fe>
 8027086:	2580      	movs	r5, #128	@ 0x80
 8027088:	4b30      	ldr	r3, [pc, #192]	@ (802714c <__ieee754_pow+0x834>)
 802708a:	036d      	lsls	r5, r5, #13
 802708c:	1524      	asrs	r4, r4, #20
 802708e:	18e4      	adds	r4, r4, r3
 8027090:	002b      	movs	r3, r5
 8027092:	4123      	asrs	r3, r4
 8027094:	9a06      	ldr	r2, [sp, #24]
 8027096:	4912      	ldr	r1, [pc, #72]	@ (80270e0 <__ieee754_pow+0x7c8>)
 8027098:	189b      	adds	r3, r3, r2
 802709a:	005a      	lsls	r2, r3, #1
 802709c:	4c14      	ldr	r4, [pc, #80]	@ (80270f0 <__ieee754_pow+0x7d8>)
 802709e:	0d52      	lsrs	r2, r2, #21
 80270a0:	1852      	adds	r2, r2, r1
 80270a2:	4114      	asrs	r4, r2
 80270a4:	401c      	ands	r4, r3
 80270a6:	0021      	movs	r1, r4
 80270a8:	2414      	movs	r4, #20
 80270aa:	031b      	lsls	r3, r3, #12
 80270ac:	0b1b      	lsrs	r3, r3, #12
 80270ae:	432b      	orrs	r3, r5
 80270b0:	1aa2      	subs	r2, r4, r2
 80270b2:	4113      	asrs	r3, r2
 80270b4:	9300      	str	r3, [sp, #0]
 80270b6:	9b06      	ldr	r3, [sp, #24]
 80270b8:	2000      	movs	r0, #0
 80270ba:	2b00      	cmp	r3, #0
 80270bc:	da02      	bge.n	80270c4 <__ieee754_pow+0x7ac>
 80270be:	9b00      	ldr	r3, [sp, #0]
 80270c0:	425b      	negs	r3, r3
 80270c2:	9300      	str	r3, [sp, #0]
 80270c4:	0002      	movs	r2, r0
 80270c6:	000b      	movs	r3, r1
 80270c8:	0030      	movs	r0, r6
 80270ca:	0039      	movs	r1, r7
 80270cc:	f7db fd7e 	bl	8002bcc <__aeabi_dsub>
 80270d0:	0006      	movs	r6, r0
 80270d2:	000f      	movs	r7, r1
 80270d4:	e065      	b.n	80271a2 <__ieee754_pow+0x88a>
 80270d6:	46c0      	nop			@ (mov r8, r8)
 80270d8:	7ff00000 	.word	0x7ff00000
 80270dc:	43400000 	.word	0x43400000
 80270e0:	fffffc01 	.word	0xfffffc01
 80270e4:	3ff00000 	.word	0x3ff00000
 80270e8:	0003988e 	.word	0x0003988e
 80270ec:	000bb679 	.word	0x000bb679
 80270f0:	fff00000 	.word	0xfff00000
 80270f4:	0802bbf0 	.word	0x0802bbf0
 80270f8:	4a454eef 	.word	0x4a454eef
 80270fc:	3fca7e28 	.word	0x3fca7e28
 8027100:	93c9db65 	.word	0x93c9db65
 8027104:	3fcd864a 	.word	0x3fcd864a
 8027108:	a91d4101 	.word	0xa91d4101
 802710c:	3fd17460 	.word	0x3fd17460
 8027110:	518f264d 	.word	0x518f264d
 8027114:	3fd55555 	.word	0x3fd55555
 8027118:	db6fabff 	.word	0xdb6fabff
 802711c:	3fdb6db6 	.word	0x3fdb6db6
 8027120:	33333303 	.word	0x33333303
 8027124:	3fe33333 	.word	0x3fe33333
 8027128:	40080000 	.word	0x40080000
 802712c:	3feec709 	.word	0x3feec709
 8027130:	dc3a03fd 	.word	0xdc3a03fd
 8027134:	145b01f5 	.word	0x145b01f5
 8027138:	be3e2fe0 	.word	0xbe3e2fe0
 802713c:	0802bbd0 	.word	0x0802bbd0
 8027140:	0802bbe0 	.word	0x0802bbe0
 8027144:	652b82fe 	.word	0x652b82fe
 8027148:	3c971547 	.word	0x3c971547
 802714c:	fffffc02 	.word	0xfffffc02
 8027150:	9b01      	ldr	r3, [sp, #4]
 8027152:	005c      	lsls	r4, r3, #1
 8027154:	4b72      	ldr	r3, [pc, #456]	@ (8027320 <__ieee754_pow+0xa08>)
 8027156:	0864      	lsrs	r4, r4, #1
 8027158:	429c      	cmp	r4, r3
 802715a:	d91c      	bls.n	8027196 <__ieee754_pow+0x87e>
 802715c:	4a71      	ldr	r2, [pc, #452]	@ (8027324 <__ieee754_pow+0xa0c>)
 802715e:	9b01      	ldr	r3, [sp, #4]
 8027160:	189b      	adds	r3, r3, r2
 8027162:	9a00      	ldr	r2, [sp, #0]
 8027164:	4313      	orrs	r3, r2
 8027166:	d008      	beq.n	802717a <__ieee754_pow+0x862>
 8027168:	9808      	ldr	r0, [sp, #32]
 802716a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802716c:	2300      	movs	r3, #0
 802716e:	2200      	movs	r2, #0
 8027170:	f7d9 f9a4 	bl	80004bc <__aeabi_dcmplt>
 8027174:	1e43      	subs	r3, r0, #1
 8027176:	4198      	sbcs	r0, r3
 8027178:	e4fc      	b.n	8026b74 <__ieee754_pow+0x25c>
 802717a:	0032      	movs	r2, r6
 802717c:	9800      	ldr	r0, [sp, #0]
 802717e:	9901      	ldr	r1, [sp, #4]
 8027180:	003b      	movs	r3, r7
 8027182:	f7db fd23 	bl	8002bcc <__aeabi_dsub>
 8027186:	9a02      	ldr	r2, [sp, #8]
 8027188:	9b03      	ldr	r3, [sp, #12]
 802718a:	f7d9 f9b5 	bl	80004f8 <__aeabi_dcmpge>
 802718e:	2800      	cmp	r0, #0
 8027190:	d1ea      	bne.n	8027168 <__ieee754_pow+0x850>
 8027192:	4c65      	ldr	r4, [pc, #404]	@ (8027328 <__ieee754_pow+0xa10>)
 8027194:	e777      	b.n	8027086 <__ieee754_pow+0x76e>
 8027196:	9a04      	ldr	r2, [sp, #16]
 8027198:	4b64      	ldr	r3, [pc, #400]	@ (802732c <__ieee754_pow+0xa14>)
 802719a:	9200      	str	r2, [sp, #0]
 802719c:	429c      	cmp	r4, r3
 802719e:	d900      	bls.n	80271a2 <__ieee754_pow+0x88a>
 80271a0:	e771      	b.n	8027086 <__ieee754_pow+0x76e>
 80271a2:	9a02      	ldr	r2, [sp, #8]
 80271a4:	9b03      	ldr	r3, [sp, #12]
 80271a6:	0030      	movs	r0, r6
 80271a8:	0039      	movs	r1, r7
 80271aa:	f7da fa9f 	bl	80016ec <__aeabi_dadd>
 80271ae:	2000      	movs	r0, #0
 80271b0:	2200      	movs	r2, #0
 80271b2:	4b5f      	ldr	r3, [pc, #380]	@ (8027330 <__ieee754_pow+0xa18>)
 80271b4:	9004      	str	r0, [sp, #16]
 80271b6:	9105      	str	r1, [sp, #20]
 80271b8:	f7db fa40 	bl	800263c <__aeabi_dmul>
 80271bc:	0032      	movs	r2, r6
 80271be:	003b      	movs	r3, r7
 80271c0:	9006      	str	r0, [sp, #24]
 80271c2:	9107      	str	r1, [sp, #28]
 80271c4:	9804      	ldr	r0, [sp, #16]
 80271c6:	9905      	ldr	r1, [sp, #20]
 80271c8:	f7db fd00 	bl	8002bcc <__aeabi_dsub>
 80271cc:	0002      	movs	r2, r0
 80271ce:	000b      	movs	r3, r1
 80271d0:	9802      	ldr	r0, [sp, #8]
 80271d2:	9903      	ldr	r1, [sp, #12]
 80271d4:	f7db fcfa 	bl	8002bcc <__aeabi_dsub>
 80271d8:	4a56      	ldr	r2, [pc, #344]	@ (8027334 <__ieee754_pow+0xa1c>)
 80271da:	4b57      	ldr	r3, [pc, #348]	@ (8027338 <__ieee754_pow+0xa20>)
 80271dc:	f7db fa2e 	bl	800263c <__aeabi_dmul>
 80271e0:	4a56      	ldr	r2, [pc, #344]	@ (802733c <__ieee754_pow+0xa24>)
 80271e2:	0004      	movs	r4, r0
 80271e4:	000d      	movs	r5, r1
 80271e6:	9804      	ldr	r0, [sp, #16]
 80271e8:	9905      	ldr	r1, [sp, #20]
 80271ea:	4b55      	ldr	r3, [pc, #340]	@ (8027340 <__ieee754_pow+0xa28>)
 80271ec:	f7db fa26 	bl	800263c <__aeabi_dmul>
 80271f0:	0002      	movs	r2, r0
 80271f2:	000b      	movs	r3, r1
 80271f4:	0020      	movs	r0, r4
 80271f6:	0029      	movs	r1, r5
 80271f8:	f7da fa78 	bl	80016ec <__aeabi_dadd>
 80271fc:	0004      	movs	r4, r0
 80271fe:	000d      	movs	r5, r1
 8027200:	0002      	movs	r2, r0
 8027202:	000b      	movs	r3, r1
 8027204:	9806      	ldr	r0, [sp, #24]
 8027206:	9907      	ldr	r1, [sp, #28]
 8027208:	f7da fa70 	bl	80016ec <__aeabi_dadd>
 802720c:	9a06      	ldr	r2, [sp, #24]
 802720e:	9b07      	ldr	r3, [sp, #28]
 8027210:	0006      	movs	r6, r0
 8027212:	000f      	movs	r7, r1
 8027214:	f7db fcda 	bl	8002bcc <__aeabi_dsub>
 8027218:	0002      	movs	r2, r0
 802721a:	000b      	movs	r3, r1
 802721c:	0020      	movs	r0, r4
 802721e:	0029      	movs	r1, r5
 8027220:	f7db fcd4 	bl	8002bcc <__aeabi_dsub>
 8027224:	0032      	movs	r2, r6
 8027226:	9002      	str	r0, [sp, #8]
 8027228:	9103      	str	r1, [sp, #12]
 802722a:	003b      	movs	r3, r7
 802722c:	0030      	movs	r0, r6
 802722e:	0039      	movs	r1, r7
 8027230:	f7db fa04 	bl	800263c <__aeabi_dmul>
 8027234:	0004      	movs	r4, r0
 8027236:	000d      	movs	r5, r1
 8027238:	4a42      	ldr	r2, [pc, #264]	@ (8027344 <__ieee754_pow+0xa2c>)
 802723a:	4b43      	ldr	r3, [pc, #268]	@ (8027348 <__ieee754_pow+0xa30>)
 802723c:	f7db f9fe 	bl	800263c <__aeabi_dmul>
 8027240:	4a42      	ldr	r2, [pc, #264]	@ (802734c <__ieee754_pow+0xa34>)
 8027242:	4b43      	ldr	r3, [pc, #268]	@ (8027350 <__ieee754_pow+0xa38>)
 8027244:	f7db fcc2 	bl	8002bcc <__aeabi_dsub>
 8027248:	0022      	movs	r2, r4
 802724a:	002b      	movs	r3, r5
 802724c:	f7db f9f6 	bl	800263c <__aeabi_dmul>
 8027250:	4a40      	ldr	r2, [pc, #256]	@ (8027354 <__ieee754_pow+0xa3c>)
 8027252:	4b41      	ldr	r3, [pc, #260]	@ (8027358 <__ieee754_pow+0xa40>)
 8027254:	f7da fa4a 	bl	80016ec <__aeabi_dadd>
 8027258:	0022      	movs	r2, r4
 802725a:	002b      	movs	r3, r5
 802725c:	f7db f9ee 	bl	800263c <__aeabi_dmul>
 8027260:	4a3e      	ldr	r2, [pc, #248]	@ (802735c <__ieee754_pow+0xa44>)
 8027262:	4b3f      	ldr	r3, [pc, #252]	@ (8027360 <__ieee754_pow+0xa48>)
 8027264:	f7db fcb2 	bl	8002bcc <__aeabi_dsub>
 8027268:	0022      	movs	r2, r4
 802726a:	002b      	movs	r3, r5
 802726c:	f7db f9e6 	bl	800263c <__aeabi_dmul>
 8027270:	4a3c      	ldr	r2, [pc, #240]	@ (8027364 <__ieee754_pow+0xa4c>)
 8027272:	4b3d      	ldr	r3, [pc, #244]	@ (8027368 <__ieee754_pow+0xa50>)
 8027274:	f7da fa3a 	bl	80016ec <__aeabi_dadd>
 8027278:	0022      	movs	r2, r4
 802727a:	002b      	movs	r3, r5
 802727c:	f7db f9de 	bl	800263c <__aeabi_dmul>
 8027280:	0002      	movs	r2, r0
 8027282:	000b      	movs	r3, r1
 8027284:	0030      	movs	r0, r6
 8027286:	0039      	movs	r1, r7
 8027288:	f7db fca0 	bl	8002bcc <__aeabi_dsub>
 802728c:	0004      	movs	r4, r0
 802728e:	000d      	movs	r5, r1
 8027290:	0002      	movs	r2, r0
 8027292:	000b      	movs	r3, r1
 8027294:	0030      	movs	r0, r6
 8027296:	0039      	movs	r1, r7
 8027298:	f7db f9d0 	bl	800263c <__aeabi_dmul>
 802729c:	2380      	movs	r3, #128	@ 0x80
 802729e:	9004      	str	r0, [sp, #16]
 80272a0:	9105      	str	r1, [sp, #20]
 80272a2:	2200      	movs	r2, #0
 80272a4:	0020      	movs	r0, r4
 80272a6:	0029      	movs	r1, r5
 80272a8:	05db      	lsls	r3, r3, #23
 80272aa:	f7db fc8f 	bl	8002bcc <__aeabi_dsub>
 80272ae:	0002      	movs	r2, r0
 80272b0:	000b      	movs	r3, r1
 80272b2:	9804      	ldr	r0, [sp, #16]
 80272b4:	9905      	ldr	r1, [sp, #20]
 80272b6:	f7da fd7d 	bl	8001db4 <__aeabi_ddiv>
 80272ba:	9a02      	ldr	r2, [sp, #8]
 80272bc:	9b03      	ldr	r3, [sp, #12]
 80272be:	0004      	movs	r4, r0
 80272c0:	000d      	movs	r5, r1
 80272c2:	0030      	movs	r0, r6
 80272c4:	0039      	movs	r1, r7
 80272c6:	f7db f9b9 	bl	800263c <__aeabi_dmul>
 80272ca:	9a02      	ldr	r2, [sp, #8]
 80272cc:	9b03      	ldr	r3, [sp, #12]
 80272ce:	f7da fa0d 	bl	80016ec <__aeabi_dadd>
 80272d2:	0002      	movs	r2, r0
 80272d4:	000b      	movs	r3, r1
 80272d6:	0020      	movs	r0, r4
 80272d8:	0029      	movs	r1, r5
 80272da:	f7db fc77 	bl	8002bcc <__aeabi_dsub>
 80272de:	0032      	movs	r2, r6
 80272e0:	003b      	movs	r3, r7
 80272e2:	f7db fc73 	bl	8002bcc <__aeabi_dsub>
 80272e6:	0002      	movs	r2, r0
 80272e8:	000b      	movs	r3, r1
 80272ea:	2000      	movs	r0, #0
 80272ec:	491f      	ldr	r1, [pc, #124]	@ (802736c <__ieee754_pow+0xa54>)
 80272ee:	f7db fc6d 	bl	8002bcc <__aeabi_dsub>
 80272f2:	9b00      	ldr	r3, [sp, #0]
 80272f4:	051b      	lsls	r3, r3, #20
 80272f6:	185b      	adds	r3, r3, r1
 80272f8:	151a      	asrs	r2, r3, #20
 80272fa:	2a00      	cmp	r2, #0
 80272fc:	dc06      	bgt.n	802730c <__ieee754_pow+0x9f4>
 80272fe:	9a00      	ldr	r2, [sp, #0]
 8027300:	f000 f92a 	bl	8027558 <scalbn>
 8027304:	9a08      	ldr	r2, [sp, #32]
 8027306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027308:	f7ff fbee 	bl	8026ae8 <__ieee754_pow+0x1d0>
 802730c:	0019      	movs	r1, r3
 802730e:	e7f9      	b.n	8027304 <__ieee754_pow+0x9ec>
 8027310:	2300      	movs	r3, #0
 8027312:	4c16      	ldr	r4, [pc, #88]	@ (802736c <__ieee754_pow+0xa54>)
 8027314:	f7ff fbcb 	bl	8026aae <__ieee754_pow+0x196>
 8027318:	2300      	movs	r3, #0
 802731a:	2400      	movs	r4, #0
 802731c:	f7ff fbc7 	bl	8026aae <__ieee754_pow+0x196>
 8027320:	4090cbff 	.word	0x4090cbff
 8027324:	3f6f3400 	.word	0x3f6f3400
 8027328:	4090cc00 	.word	0x4090cc00
 802732c:	3fe00000 	.word	0x3fe00000
 8027330:	3fe62e43 	.word	0x3fe62e43
 8027334:	fefa39ef 	.word	0xfefa39ef
 8027338:	3fe62e42 	.word	0x3fe62e42
 802733c:	0ca86c39 	.word	0x0ca86c39
 8027340:	be205c61 	.word	0xbe205c61
 8027344:	72bea4d0 	.word	0x72bea4d0
 8027348:	3e663769 	.word	0x3e663769
 802734c:	c5d26bf1 	.word	0xc5d26bf1
 8027350:	3ebbbd41 	.word	0x3ebbbd41
 8027354:	af25de2c 	.word	0xaf25de2c
 8027358:	3f11566a 	.word	0x3f11566a
 802735c:	16bebd93 	.word	0x16bebd93
 8027360:	3f66c16c 	.word	0x3f66c16c
 8027364:	5555553e 	.word	0x5555553e
 8027368:	3fc55555 	.word	0x3fc55555
 802736c:	3ff00000 	.word	0x3ff00000

08027370 <fabs>:
 8027370:	0049      	lsls	r1, r1, #1
 8027372:	084b      	lsrs	r3, r1, #1
 8027374:	0019      	movs	r1, r3
 8027376:	4770      	bx	lr

08027378 <__ieee754_expf>:
 8027378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802737a:	21ff      	movs	r1, #255	@ 0xff
 802737c:	0043      	lsls	r3, r0, #1
 802737e:	1c04      	adds	r4, r0, #0
 8027380:	085b      	lsrs	r3, r3, #1
 8027382:	05c9      	lsls	r1, r1, #23
 8027384:	428b      	cmp	r3, r1
 8027386:	d904      	bls.n	8027392 <__ieee754_expf+0x1a>
 8027388:	1c01      	adds	r1, r0, #0
 802738a:	1c20      	adds	r0, r4, #0
 802738c:	f7d9 fa98 	bl	80008c0 <__aeabi_fadd>
 8027390:	e00d      	b.n	80273ae <__ieee754_expf+0x36>
 8027392:	0fc6      	lsrs	r6, r0, #31
 8027394:	428b      	cmp	r3, r1
 8027396:	d104      	bne.n	80273a2 <__ieee754_expf+0x2a>
 8027398:	2e00      	cmp	r6, #0
 802739a:	d000      	beq.n	802739e <__ieee754_expf+0x26>
 802739c:	e0ba      	b.n	8027514 <__ieee754_expf+0x19c>
 802739e:	1c20      	adds	r0, r4, #0
 80273a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80273a2:	495d      	ldr	r1, [pc, #372]	@ (8027518 <__ieee754_expf+0x1a0>)
 80273a4:	4288      	cmp	r0, r1
 80273a6:	dd04      	ble.n	80273b2 <__ieee754_expf+0x3a>
 80273a8:	2000      	movs	r0, #0
 80273aa:	f000 f98a 	bl	80276c2 <__math_oflowf>
 80273ae:	1c04      	adds	r4, r0, #0
 80273b0:	e7f5      	b.n	802739e <__ieee754_expf+0x26>
 80273b2:	2800      	cmp	r0, #0
 80273b4:	da06      	bge.n	80273c4 <__ieee754_expf+0x4c>
 80273b6:	4a59      	ldr	r2, [pc, #356]	@ (802751c <__ieee754_expf+0x1a4>)
 80273b8:	4293      	cmp	r3, r2
 80273ba:	d903      	bls.n	80273c4 <__ieee754_expf+0x4c>
 80273bc:	2000      	movs	r0, #0
 80273be:	f000 f97a 	bl	80276b6 <__math_uflowf>
 80273c2:	e7f4      	b.n	80273ae <__ieee754_expf+0x36>
 80273c4:	4a56      	ldr	r2, [pc, #344]	@ (8027520 <__ieee754_expf+0x1a8>)
 80273c6:	4293      	cmp	r3, r2
 80273c8:	d96e      	bls.n	80274a8 <__ieee754_expf+0x130>
 80273ca:	4a56      	ldr	r2, [pc, #344]	@ (8027524 <__ieee754_expf+0x1ac>)
 80273cc:	00b5      	lsls	r5, r6, #2
 80273ce:	4293      	cmp	r3, r2
 80273d0:	d84e      	bhi.n	8027470 <__ieee754_expf+0xf8>
 80273d2:	4b55      	ldr	r3, [pc, #340]	@ (8027528 <__ieee754_expf+0x1b0>)
 80273d4:	1c20      	adds	r0, r4, #0
 80273d6:	5959      	ldr	r1, [r3, r5]
 80273d8:	f7d9 ff20 	bl	800121c <__aeabi_fsub>
 80273dc:	4b53      	ldr	r3, [pc, #332]	@ (802752c <__ieee754_expf+0x1b4>)
 80273de:	1c07      	adds	r7, r0, #0
 80273e0:	595b      	ldr	r3, [r3, r5]
 80273e2:	2501      	movs	r5, #1
 80273e4:	1bad      	subs	r5, r5, r6
 80273e6:	9300      	str	r3, [sp, #0]
 80273e8:	1bad      	subs	r5, r5, r6
 80273ea:	9900      	ldr	r1, [sp, #0]
 80273ec:	1c38      	adds	r0, r7, #0
 80273ee:	f7d9 ff15 	bl	800121c <__aeabi_fsub>
 80273f2:	1c04      	adds	r4, r0, #0
 80273f4:	1c21      	adds	r1, r4, #0
 80273f6:	1c20      	adds	r0, r4, #0
 80273f8:	f7d9 fdd2 	bl	8000fa0 <__aeabi_fmul>
 80273fc:	494c      	ldr	r1, [pc, #304]	@ (8027530 <__ieee754_expf+0x1b8>)
 80273fe:	1c06      	adds	r6, r0, #0
 8027400:	f7d9 fdce 	bl	8000fa0 <__aeabi_fmul>
 8027404:	494b      	ldr	r1, [pc, #300]	@ (8027534 <__ieee754_expf+0x1bc>)
 8027406:	f7d9 ff09 	bl	800121c <__aeabi_fsub>
 802740a:	1c31      	adds	r1, r6, #0
 802740c:	f7d9 fdc8 	bl	8000fa0 <__aeabi_fmul>
 8027410:	4949      	ldr	r1, [pc, #292]	@ (8027538 <__ieee754_expf+0x1c0>)
 8027412:	f7d9 fa55 	bl	80008c0 <__aeabi_fadd>
 8027416:	1c31      	adds	r1, r6, #0
 8027418:	f7d9 fdc2 	bl	8000fa0 <__aeabi_fmul>
 802741c:	4947      	ldr	r1, [pc, #284]	@ (802753c <__ieee754_expf+0x1c4>)
 802741e:	f7d9 fefd 	bl	800121c <__aeabi_fsub>
 8027422:	1c31      	adds	r1, r6, #0
 8027424:	f7d9 fdbc 	bl	8000fa0 <__aeabi_fmul>
 8027428:	4945      	ldr	r1, [pc, #276]	@ (8027540 <__ieee754_expf+0x1c8>)
 802742a:	f7d9 fa49 	bl	80008c0 <__aeabi_fadd>
 802742e:	1c31      	adds	r1, r6, #0
 8027430:	f7d9 fdb6 	bl	8000fa0 <__aeabi_fmul>
 8027434:	1c01      	adds	r1, r0, #0
 8027436:	1c20      	adds	r0, r4, #0
 8027438:	f7d9 fef0 	bl	800121c <__aeabi_fsub>
 802743c:	1c01      	adds	r1, r0, #0
 802743e:	1c06      	adds	r6, r0, #0
 8027440:	1c20      	adds	r0, r4, #0
 8027442:	f7d9 fdad 	bl	8000fa0 <__aeabi_fmul>
 8027446:	9001      	str	r0, [sp, #4]
 8027448:	2d00      	cmp	r5, #0
 802744a:	d140      	bne.n	80274ce <__ieee754_expf+0x156>
 802744c:	2180      	movs	r1, #128	@ 0x80
 802744e:	1c30      	adds	r0, r6, #0
 8027450:	05c9      	lsls	r1, r1, #23
 8027452:	f7d9 fee3 	bl	800121c <__aeabi_fsub>
 8027456:	1c01      	adds	r1, r0, #0
 8027458:	9801      	ldr	r0, [sp, #4]
 802745a:	f7d9 fbbb 	bl	8000bd4 <__aeabi_fdiv>
 802745e:	1c21      	adds	r1, r4, #0
 8027460:	f7d9 fedc 	bl	800121c <__aeabi_fsub>
 8027464:	1c01      	adds	r1, r0, #0
 8027466:	20fe      	movs	r0, #254	@ 0xfe
 8027468:	0580      	lsls	r0, r0, #22
 802746a:	f7d9 fed7 	bl	800121c <__aeabi_fsub>
 802746e:	e79e      	b.n	80273ae <__ieee754_expf+0x36>
 8027470:	4934      	ldr	r1, [pc, #208]	@ (8027544 <__ieee754_expf+0x1cc>)
 8027472:	1c20      	adds	r0, r4, #0
 8027474:	f7d9 fd94 	bl	8000fa0 <__aeabi_fmul>
 8027478:	4b33      	ldr	r3, [pc, #204]	@ (8027548 <__ieee754_expf+0x1d0>)
 802747a:	5959      	ldr	r1, [r3, r5]
 802747c:	f7d9 fa20 	bl	80008c0 <__aeabi_fadd>
 8027480:	f7da f886 	bl	8001590 <__aeabi_f2iz>
 8027484:	0005      	movs	r5, r0
 8027486:	f7da f8a3 	bl	80015d0 <__aeabi_i2f>
 802748a:	4930      	ldr	r1, [pc, #192]	@ (802754c <__ieee754_expf+0x1d4>)
 802748c:	1c06      	adds	r6, r0, #0
 802748e:	f7d9 fd87 	bl	8000fa0 <__aeabi_fmul>
 8027492:	1c01      	adds	r1, r0, #0
 8027494:	1c20      	adds	r0, r4, #0
 8027496:	f7d9 fec1 	bl	800121c <__aeabi_fsub>
 802749a:	492d      	ldr	r1, [pc, #180]	@ (8027550 <__ieee754_expf+0x1d8>)
 802749c:	1c07      	adds	r7, r0, #0
 802749e:	1c30      	adds	r0, r6, #0
 80274a0:	f7d9 fd7e 	bl	8000fa0 <__aeabi_fmul>
 80274a4:	9000      	str	r0, [sp, #0]
 80274a6:	e7a0      	b.n	80273ea <__ieee754_expf+0x72>
 80274a8:	22d0      	movs	r2, #208	@ 0xd0
 80274aa:	0592      	lsls	r2, r2, #22
 80274ac:	4293      	cmp	r3, r2
 80274ae:	d20c      	bcs.n	80274ca <__ieee754_expf+0x152>
 80274b0:	4928      	ldr	r1, [pc, #160]	@ (8027554 <__ieee754_expf+0x1dc>)
 80274b2:	1c20      	adds	r0, r4, #0
 80274b4:	f7d9 fa04 	bl	80008c0 <__aeabi_fadd>
 80274b8:	21fe      	movs	r1, #254	@ 0xfe
 80274ba:	0589      	lsls	r1, r1, #22
 80274bc:	f7d9 f84c 	bl	8000558 <__aeabi_fcmpgt>
 80274c0:	1e05      	subs	r5, r0, #0
 80274c2:	d097      	beq.n	80273f4 <__ieee754_expf+0x7c>
 80274c4:	21fe      	movs	r1, #254	@ 0xfe
 80274c6:	0589      	lsls	r1, r1, #22
 80274c8:	e75f      	b.n	802738a <__ieee754_expf+0x12>
 80274ca:	2500      	movs	r5, #0
 80274cc:	e792      	b.n	80273f4 <__ieee754_expf+0x7c>
 80274ce:	2080      	movs	r0, #128	@ 0x80
 80274d0:	1c31      	adds	r1, r6, #0
 80274d2:	05c0      	lsls	r0, r0, #23
 80274d4:	f7d9 fea2 	bl	800121c <__aeabi_fsub>
 80274d8:	1c01      	adds	r1, r0, #0
 80274da:	9801      	ldr	r0, [sp, #4]
 80274dc:	f7d9 fb7a 	bl	8000bd4 <__aeabi_fdiv>
 80274e0:	1c01      	adds	r1, r0, #0
 80274e2:	9800      	ldr	r0, [sp, #0]
 80274e4:	f7d9 fe9a 	bl	800121c <__aeabi_fsub>
 80274e8:	1c39      	adds	r1, r7, #0
 80274ea:	f7d9 fe97 	bl	800121c <__aeabi_fsub>
 80274ee:	1c01      	adds	r1, r0, #0
 80274f0:	20fe      	movs	r0, #254	@ 0xfe
 80274f2:	0580      	lsls	r0, r0, #22
 80274f4:	f7d9 fe92 	bl	800121c <__aeabi_fsub>
 80274f8:	002b      	movs	r3, r5
 80274fa:	337d      	adds	r3, #125	@ 0x7d
 80274fc:	db02      	blt.n	8027504 <__ieee754_expf+0x18c>
 80274fe:	05ec      	lsls	r4, r5, #23
 8027500:	1824      	adds	r4, r4, r0
 8027502:	e74c      	b.n	802739e <__ieee754_expf+0x26>
 8027504:	21d8      	movs	r1, #216	@ 0xd8
 8027506:	3564      	adds	r5, #100	@ 0x64
 8027508:	05ed      	lsls	r5, r5, #23
 802750a:	1828      	adds	r0, r5, r0
 802750c:	0509      	lsls	r1, r1, #20
 802750e:	f7d9 fd47 	bl	8000fa0 <__aeabi_fmul>
 8027512:	e74c      	b.n	80273ae <__ieee754_expf+0x36>
 8027514:	2400      	movs	r4, #0
 8027516:	e742      	b.n	802739e <__ieee754_expf+0x26>
 8027518:	42b17217 	.word	0x42b17217
 802751c:	42cff1b5 	.word	0x42cff1b5
 8027520:	3eb17218 	.word	0x3eb17218
 8027524:	3f851591 	.word	0x3f851591
 8027528:	0802bc08 	.word	0x0802bc08
 802752c:	0802bc00 	.word	0x0802bc00
 8027530:	3331bb4c 	.word	0x3331bb4c
 8027534:	35ddea0e 	.word	0x35ddea0e
 8027538:	388ab355 	.word	0x388ab355
 802753c:	3b360b61 	.word	0x3b360b61
 8027540:	3e2aaaab 	.word	0x3e2aaaab
 8027544:	3fb8aa3b 	.word	0x3fb8aa3b
 8027548:	0802bc10 	.word	0x0802bc10
 802754c:	3f317180 	.word	0x3f317180
 8027550:	3717f7d1 	.word	0x3717f7d1
 8027554:	7149f2ca 	.word	0x7149f2ca

08027558 <scalbn>:
 8027558:	004b      	lsls	r3, r1, #1
 802755a:	b570      	push	{r4, r5, r6, lr}
 802755c:	0d5b      	lsrs	r3, r3, #21
 802755e:	0014      	movs	r4, r2
 8027560:	000d      	movs	r5, r1
 8027562:	2b00      	cmp	r3, #0
 8027564:	d10f      	bne.n	8027586 <scalbn+0x2e>
 8027566:	004b      	lsls	r3, r1, #1
 8027568:	085b      	lsrs	r3, r3, #1
 802756a:	4303      	orrs	r3, r0
 802756c:	d012      	beq.n	8027594 <scalbn+0x3c>
 802756e:	4b23      	ldr	r3, [pc, #140]	@ (80275fc <scalbn+0xa4>)
 8027570:	2200      	movs	r2, #0
 8027572:	f7db f863 	bl	800263c <__aeabi_dmul>
 8027576:	4b22      	ldr	r3, [pc, #136]	@ (8027600 <scalbn+0xa8>)
 8027578:	429c      	cmp	r4, r3
 802757a:	da0c      	bge.n	8027596 <scalbn+0x3e>
 802757c:	4a21      	ldr	r2, [pc, #132]	@ (8027604 <scalbn+0xac>)
 802757e:	4b22      	ldr	r3, [pc, #136]	@ (8027608 <scalbn+0xb0>)
 8027580:	f7db f85c 	bl	800263c <__aeabi_dmul>
 8027584:	e006      	b.n	8027594 <scalbn+0x3c>
 8027586:	4a21      	ldr	r2, [pc, #132]	@ (802760c <scalbn+0xb4>)
 8027588:	4293      	cmp	r3, r2
 802758a:	d108      	bne.n	802759e <scalbn+0x46>
 802758c:	0002      	movs	r2, r0
 802758e:	000b      	movs	r3, r1
 8027590:	f7da f8ac 	bl	80016ec <__aeabi_dadd>
 8027594:	bd70      	pop	{r4, r5, r6, pc}
 8027596:	000d      	movs	r5, r1
 8027598:	004b      	lsls	r3, r1, #1
 802759a:	0d5b      	lsrs	r3, r3, #21
 802759c:	3b36      	subs	r3, #54	@ 0x36
 802759e:	4a1c      	ldr	r2, [pc, #112]	@ (8027610 <scalbn+0xb8>)
 80275a0:	4294      	cmp	r4, r2
 80275a2:	dd0a      	ble.n	80275ba <scalbn+0x62>
 80275a4:	4c1b      	ldr	r4, [pc, #108]	@ (8027614 <scalbn+0xbc>)
 80275a6:	4d1c      	ldr	r5, [pc, #112]	@ (8027618 <scalbn+0xc0>)
 80275a8:	2900      	cmp	r1, #0
 80275aa:	da01      	bge.n	80275b0 <scalbn+0x58>
 80275ac:	4c19      	ldr	r4, [pc, #100]	@ (8027614 <scalbn+0xbc>)
 80275ae:	4d1b      	ldr	r5, [pc, #108]	@ (802761c <scalbn+0xc4>)
 80275b0:	4a18      	ldr	r2, [pc, #96]	@ (8027614 <scalbn+0xbc>)
 80275b2:	4b19      	ldr	r3, [pc, #100]	@ (8027618 <scalbn+0xc0>)
 80275b4:	0020      	movs	r0, r4
 80275b6:	0029      	movs	r1, r5
 80275b8:	e7e2      	b.n	8027580 <scalbn+0x28>
 80275ba:	18e2      	adds	r2, r4, r3
 80275bc:	4b18      	ldr	r3, [pc, #96]	@ (8027620 <scalbn+0xc8>)
 80275be:	429a      	cmp	r2, r3
 80275c0:	dcf0      	bgt.n	80275a4 <scalbn+0x4c>
 80275c2:	2a00      	cmp	r2, #0
 80275c4:	dd05      	ble.n	80275d2 <scalbn+0x7a>
 80275c6:	4b17      	ldr	r3, [pc, #92]	@ (8027624 <scalbn+0xcc>)
 80275c8:	0512      	lsls	r2, r2, #20
 80275ca:	402b      	ands	r3, r5
 80275cc:	431a      	orrs	r2, r3
 80275ce:	0011      	movs	r1, r2
 80275d0:	e7e0      	b.n	8027594 <scalbn+0x3c>
 80275d2:	0013      	movs	r3, r2
 80275d4:	3335      	adds	r3, #53	@ 0x35
 80275d6:	da08      	bge.n	80275ea <scalbn+0x92>
 80275d8:	4c0a      	ldr	r4, [pc, #40]	@ (8027604 <scalbn+0xac>)
 80275da:	4d0b      	ldr	r5, [pc, #44]	@ (8027608 <scalbn+0xb0>)
 80275dc:	2900      	cmp	r1, #0
 80275de:	da01      	bge.n	80275e4 <scalbn+0x8c>
 80275e0:	4c08      	ldr	r4, [pc, #32]	@ (8027604 <scalbn+0xac>)
 80275e2:	4d11      	ldr	r5, [pc, #68]	@ (8027628 <scalbn+0xd0>)
 80275e4:	4a07      	ldr	r2, [pc, #28]	@ (8027604 <scalbn+0xac>)
 80275e6:	4b08      	ldr	r3, [pc, #32]	@ (8027608 <scalbn+0xb0>)
 80275e8:	e7e4      	b.n	80275b4 <scalbn+0x5c>
 80275ea:	4b0e      	ldr	r3, [pc, #56]	@ (8027624 <scalbn+0xcc>)
 80275ec:	3236      	adds	r2, #54	@ 0x36
 80275ee:	401d      	ands	r5, r3
 80275f0:	0512      	lsls	r2, r2, #20
 80275f2:	432a      	orrs	r2, r5
 80275f4:	0011      	movs	r1, r2
 80275f6:	4b0d      	ldr	r3, [pc, #52]	@ (802762c <scalbn+0xd4>)
 80275f8:	2200      	movs	r2, #0
 80275fa:	e7c1      	b.n	8027580 <scalbn+0x28>
 80275fc:	43500000 	.word	0x43500000
 8027600:	ffff3cb0 	.word	0xffff3cb0
 8027604:	c2f8f359 	.word	0xc2f8f359
 8027608:	01a56e1f 	.word	0x01a56e1f
 802760c:	000007ff 	.word	0x000007ff
 8027610:	0000c350 	.word	0x0000c350
 8027614:	8800759c 	.word	0x8800759c
 8027618:	7e37e43c 	.word	0x7e37e43c
 802761c:	fe37e43c 	.word	0xfe37e43c
 8027620:	000007fe 	.word	0x000007fe
 8027624:	800fffff 	.word	0x800fffff
 8027628:	81a56e1f 	.word	0x81a56e1f
 802762c:	3c900000 	.word	0x3c900000

08027630 <with_errno>:
 8027630:	b570      	push	{r4, r5, r6, lr}
 8027632:	000d      	movs	r5, r1
 8027634:	0016      	movs	r6, r2
 8027636:	0004      	movs	r4, r0
 8027638:	f7fc fb10 	bl	8023c5c <__errno>
 802763c:	0029      	movs	r1, r5
 802763e:	6006      	str	r6, [r0, #0]
 8027640:	0020      	movs	r0, r4
 8027642:	bd70      	pop	{r4, r5, r6, pc}

08027644 <xflow>:
 8027644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027646:	0014      	movs	r4, r2
 8027648:	001d      	movs	r5, r3
 802764a:	2800      	cmp	r0, #0
 802764c:	d002      	beq.n	8027654 <xflow+0x10>
 802764e:	2180      	movs	r1, #128	@ 0x80
 8027650:	0609      	lsls	r1, r1, #24
 8027652:	185b      	adds	r3, r3, r1
 8027654:	9200      	str	r2, [sp, #0]
 8027656:	9301      	str	r3, [sp, #4]
 8027658:	9a00      	ldr	r2, [sp, #0]
 802765a:	9b01      	ldr	r3, [sp, #4]
 802765c:	0020      	movs	r0, r4
 802765e:	0029      	movs	r1, r5
 8027660:	f7da ffec 	bl	800263c <__aeabi_dmul>
 8027664:	2222      	movs	r2, #34	@ 0x22
 8027666:	f7ff ffe3 	bl	8027630 <with_errno>
 802766a:	b003      	add	sp, #12
 802766c:	bd30      	pop	{r4, r5, pc}

0802766e <__math_uflow>:
 802766e:	2380      	movs	r3, #128	@ 0x80
 8027670:	b510      	push	{r4, lr}
 8027672:	2200      	movs	r2, #0
 8027674:	055b      	lsls	r3, r3, #21
 8027676:	f7ff ffe5 	bl	8027644 <xflow>
 802767a:	bd10      	pop	{r4, pc}

0802767c <__math_oflow>:
 802767c:	23e0      	movs	r3, #224	@ 0xe0
 802767e:	b510      	push	{r4, lr}
 8027680:	2200      	movs	r2, #0
 8027682:	05db      	lsls	r3, r3, #23
 8027684:	f7ff ffde 	bl	8027644 <xflow>
 8027688:	bd10      	pop	{r4, pc}

0802768a <with_errnof>:
 802768a:	b570      	push	{r4, r5, r6, lr}
 802768c:	000d      	movs	r5, r1
 802768e:	1c04      	adds	r4, r0, #0
 8027690:	f7fc fae4 	bl	8023c5c <__errno>
 8027694:	6005      	str	r5, [r0, #0]
 8027696:	1c20      	adds	r0, r4, #0
 8027698:	bd70      	pop	{r4, r5, r6, pc}

0802769a <xflowf>:
 802769a:	b510      	push	{r4, lr}
 802769c:	1c0b      	adds	r3, r1, #0
 802769e:	2800      	cmp	r0, #0
 80276a0:	d002      	beq.n	80276a8 <xflowf+0xe>
 80276a2:	2380      	movs	r3, #128	@ 0x80
 80276a4:	061b      	lsls	r3, r3, #24
 80276a6:	18cb      	adds	r3, r1, r3
 80276a8:	1c18      	adds	r0, r3, #0
 80276aa:	f7d9 fc79 	bl	8000fa0 <__aeabi_fmul>
 80276ae:	2122      	movs	r1, #34	@ 0x22
 80276b0:	f7ff ffeb 	bl	802768a <with_errnof>
 80276b4:	bd10      	pop	{r4, pc}

080276b6 <__math_uflowf>:
 80276b6:	2180      	movs	r1, #128	@ 0x80
 80276b8:	b510      	push	{r4, lr}
 80276ba:	0549      	lsls	r1, r1, #21
 80276bc:	f7ff ffed 	bl	802769a <xflowf>
 80276c0:	bd10      	pop	{r4, pc}

080276c2 <__math_oflowf>:
 80276c2:	21e0      	movs	r1, #224	@ 0xe0
 80276c4:	b510      	push	{r4, lr}
 80276c6:	05c9      	lsls	r1, r1, #23
 80276c8:	f7ff ffe7 	bl	802769a <xflowf>
 80276cc:	bd10      	pop	{r4, pc}
	...

080276d0 <__ieee754_sqrt>:
 80276d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80276d2:	000a      	movs	r2, r1
 80276d4:	000d      	movs	r5, r1
 80276d6:	496d      	ldr	r1, [pc, #436]	@ (802788c <__ieee754_sqrt+0x1bc>)
 80276d8:	0004      	movs	r4, r0
 80276da:	0003      	movs	r3, r0
 80276dc:	0008      	movs	r0, r1
 80276de:	b087      	sub	sp, #28
 80276e0:	4028      	ands	r0, r5
 80276e2:	4288      	cmp	r0, r1
 80276e4:	d111      	bne.n	802770a <__ieee754_sqrt+0x3a>
 80276e6:	0022      	movs	r2, r4
 80276e8:	002b      	movs	r3, r5
 80276ea:	0020      	movs	r0, r4
 80276ec:	0029      	movs	r1, r5
 80276ee:	f7da ffa5 	bl	800263c <__aeabi_dmul>
 80276f2:	0002      	movs	r2, r0
 80276f4:	000b      	movs	r3, r1
 80276f6:	0020      	movs	r0, r4
 80276f8:	0029      	movs	r1, r5
 80276fa:	f7d9 fff7 	bl	80016ec <__aeabi_dadd>
 80276fe:	0004      	movs	r4, r0
 8027700:	000d      	movs	r5, r1
 8027702:	0020      	movs	r0, r4
 8027704:	0029      	movs	r1, r5
 8027706:	b007      	add	sp, #28
 8027708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802770a:	2d00      	cmp	r5, #0
 802770c:	dc11      	bgt.n	8027732 <__ieee754_sqrt+0x62>
 802770e:	0069      	lsls	r1, r5, #1
 8027710:	0849      	lsrs	r1, r1, #1
 8027712:	4321      	orrs	r1, r4
 8027714:	d0f5      	beq.n	8027702 <__ieee754_sqrt+0x32>
 8027716:	2000      	movs	r0, #0
 8027718:	4285      	cmp	r5, r0
 802771a:	d010      	beq.n	802773e <__ieee754_sqrt+0x6e>
 802771c:	0022      	movs	r2, r4
 802771e:	002b      	movs	r3, r5
 8027720:	0020      	movs	r0, r4
 8027722:	0029      	movs	r1, r5
 8027724:	f7db fa52 	bl	8002bcc <__aeabi_dsub>
 8027728:	0002      	movs	r2, r0
 802772a:	000b      	movs	r3, r1
 802772c:	f7da fb42 	bl	8001db4 <__aeabi_ddiv>
 8027730:	e7e5      	b.n	80276fe <__ieee754_sqrt+0x2e>
 8027732:	1528      	asrs	r0, r5, #20
 8027734:	d115      	bne.n	8027762 <__ieee754_sqrt+0x92>
 8027736:	2480      	movs	r4, #128	@ 0x80
 8027738:	2100      	movs	r1, #0
 802773a:	0364      	lsls	r4, r4, #13
 802773c:	e007      	b.n	802774e <__ieee754_sqrt+0x7e>
 802773e:	0ada      	lsrs	r2, r3, #11
 8027740:	3815      	subs	r0, #21
 8027742:	055b      	lsls	r3, r3, #21
 8027744:	2a00      	cmp	r2, #0
 8027746:	d0fa      	beq.n	802773e <__ieee754_sqrt+0x6e>
 8027748:	e7f5      	b.n	8027736 <__ieee754_sqrt+0x66>
 802774a:	0052      	lsls	r2, r2, #1
 802774c:	3101      	adds	r1, #1
 802774e:	4222      	tst	r2, r4
 8027750:	d0fb      	beq.n	802774a <__ieee754_sqrt+0x7a>
 8027752:	1e4c      	subs	r4, r1, #1
 8027754:	1b00      	subs	r0, r0, r4
 8027756:	2420      	movs	r4, #32
 8027758:	001d      	movs	r5, r3
 802775a:	1a64      	subs	r4, r4, r1
 802775c:	40e5      	lsrs	r5, r4
 802775e:	408b      	lsls	r3, r1
 8027760:	432a      	orrs	r2, r5
 8027762:	494b      	ldr	r1, [pc, #300]	@ (8027890 <__ieee754_sqrt+0x1c0>)
 8027764:	0312      	lsls	r2, r2, #12
 8027766:	1844      	adds	r4, r0, r1
 8027768:	2180      	movs	r1, #128	@ 0x80
 802776a:	0b12      	lsrs	r2, r2, #12
 802776c:	0349      	lsls	r1, r1, #13
 802776e:	4311      	orrs	r1, r2
 8027770:	07c0      	lsls	r0, r0, #31
 8027772:	d403      	bmi.n	802777c <__ieee754_sqrt+0xac>
 8027774:	0fda      	lsrs	r2, r3, #31
 8027776:	0049      	lsls	r1, r1, #1
 8027778:	1851      	adds	r1, r2, r1
 802777a:	005b      	lsls	r3, r3, #1
 802777c:	2500      	movs	r5, #0
 802777e:	1062      	asrs	r2, r4, #1
 8027780:	0049      	lsls	r1, r1, #1
 8027782:	2480      	movs	r4, #128	@ 0x80
 8027784:	9205      	str	r2, [sp, #20]
 8027786:	0fda      	lsrs	r2, r3, #31
 8027788:	1852      	adds	r2, r2, r1
 802778a:	2016      	movs	r0, #22
 802778c:	0029      	movs	r1, r5
 802778e:	005b      	lsls	r3, r3, #1
 8027790:	03a4      	lsls	r4, r4, #14
 8027792:	190e      	adds	r6, r1, r4
 8027794:	4296      	cmp	r6, r2
 8027796:	dc02      	bgt.n	802779e <__ieee754_sqrt+0xce>
 8027798:	1931      	adds	r1, r6, r4
 802779a:	1b92      	subs	r2, r2, r6
 802779c:	192d      	adds	r5, r5, r4
 802779e:	0fde      	lsrs	r6, r3, #31
 80277a0:	0052      	lsls	r2, r2, #1
 80277a2:	3801      	subs	r0, #1
 80277a4:	1992      	adds	r2, r2, r6
 80277a6:	005b      	lsls	r3, r3, #1
 80277a8:	0864      	lsrs	r4, r4, #1
 80277aa:	2800      	cmp	r0, #0
 80277ac:	d1f1      	bne.n	8027792 <__ieee754_sqrt+0xc2>
 80277ae:	2620      	movs	r6, #32
 80277b0:	2780      	movs	r7, #128	@ 0x80
 80277b2:	0004      	movs	r4, r0
 80277b4:	9604      	str	r6, [sp, #16]
 80277b6:	063f      	lsls	r7, r7, #24
 80277b8:	19c6      	adds	r6, r0, r7
 80277ba:	46b4      	mov	ip, r6
 80277bc:	4291      	cmp	r1, r2
 80277be:	db02      	blt.n	80277c6 <__ieee754_sqrt+0xf6>
 80277c0:	d114      	bne.n	80277ec <__ieee754_sqrt+0x11c>
 80277c2:	429e      	cmp	r6, r3
 80277c4:	d812      	bhi.n	80277ec <__ieee754_sqrt+0x11c>
 80277c6:	4660      	mov	r0, ip
 80277c8:	4666      	mov	r6, ip
 80277ca:	19c0      	adds	r0, r0, r7
 80277cc:	9100      	str	r1, [sp, #0]
 80277ce:	2e00      	cmp	r6, #0
 80277d0:	da03      	bge.n	80277da <__ieee754_sqrt+0x10a>
 80277d2:	43c6      	mvns	r6, r0
 80277d4:	0ff6      	lsrs	r6, r6, #31
 80277d6:	198e      	adds	r6, r1, r6
 80277d8:	9600      	str	r6, [sp, #0]
 80277da:	1a52      	subs	r2, r2, r1
 80277dc:	4563      	cmp	r3, ip
 80277de:	4189      	sbcs	r1, r1
 80277e0:	4249      	negs	r1, r1
 80277e2:	1a52      	subs	r2, r2, r1
 80277e4:	4661      	mov	r1, ip
 80277e6:	1a5b      	subs	r3, r3, r1
 80277e8:	9900      	ldr	r1, [sp, #0]
 80277ea:	19e4      	adds	r4, r4, r7
 80277ec:	0fde      	lsrs	r6, r3, #31
 80277ee:	0052      	lsls	r2, r2, #1
 80277f0:	1992      	adds	r2, r2, r6
 80277f2:	9e04      	ldr	r6, [sp, #16]
 80277f4:	005b      	lsls	r3, r3, #1
 80277f6:	3e01      	subs	r6, #1
 80277f8:	087f      	lsrs	r7, r7, #1
 80277fa:	9604      	str	r6, [sp, #16]
 80277fc:	2e00      	cmp	r6, #0
 80277fe:	d1db      	bne.n	80277b8 <__ieee754_sqrt+0xe8>
 8027800:	431a      	orrs	r2, r3
 8027802:	d01f      	beq.n	8027844 <__ieee754_sqrt+0x174>
 8027804:	4e23      	ldr	r6, [pc, #140]	@ (8027894 <__ieee754_sqrt+0x1c4>)
 8027806:	4f24      	ldr	r7, [pc, #144]	@ (8027898 <__ieee754_sqrt+0x1c8>)
 8027808:	6830      	ldr	r0, [r6, #0]
 802780a:	6871      	ldr	r1, [r6, #4]
 802780c:	683a      	ldr	r2, [r7, #0]
 802780e:	687b      	ldr	r3, [r7, #4]
 8027810:	9200      	str	r2, [sp, #0]
 8027812:	9301      	str	r3, [sp, #4]
 8027814:	6832      	ldr	r2, [r6, #0]
 8027816:	6873      	ldr	r3, [r6, #4]
 8027818:	9202      	str	r2, [sp, #8]
 802781a:	9303      	str	r3, [sp, #12]
 802781c:	9a00      	ldr	r2, [sp, #0]
 802781e:	9b01      	ldr	r3, [sp, #4]
 8027820:	f7db f9d4 	bl	8002bcc <__aeabi_dsub>
 8027824:	0002      	movs	r2, r0
 8027826:	000b      	movs	r3, r1
 8027828:	9802      	ldr	r0, [sp, #8]
 802782a:	9903      	ldr	r1, [sp, #12]
 802782c:	f7d8 fe50 	bl	80004d0 <__aeabi_dcmple>
 8027830:	2800      	cmp	r0, #0
 8027832:	d007      	beq.n	8027844 <__ieee754_sqrt+0x174>
 8027834:	6830      	ldr	r0, [r6, #0]
 8027836:	6871      	ldr	r1, [r6, #4]
 8027838:	683a      	ldr	r2, [r7, #0]
 802783a:	687b      	ldr	r3, [r7, #4]
 802783c:	1c67      	adds	r7, r4, #1
 802783e:	d10f      	bne.n	8027860 <__ieee754_sqrt+0x190>
 8027840:	9c04      	ldr	r4, [sp, #16]
 8027842:	3501      	adds	r5, #1
 8027844:	4b15      	ldr	r3, [pc, #84]	@ (802789c <__ieee754_sqrt+0x1cc>)
 8027846:	106a      	asrs	r2, r5, #1
 8027848:	18d2      	adds	r2, r2, r3
 802784a:	0863      	lsrs	r3, r4, #1
 802784c:	07ed      	lsls	r5, r5, #31
 802784e:	d502      	bpl.n	8027856 <__ieee754_sqrt+0x186>
 8027850:	2180      	movs	r1, #128	@ 0x80
 8027852:	0609      	lsls	r1, r1, #24
 8027854:	430b      	orrs	r3, r1
 8027856:	9905      	ldr	r1, [sp, #20]
 8027858:	001c      	movs	r4, r3
 802785a:	0509      	lsls	r1, r1, #20
 802785c:	188d      	adds	r5, r1, r2
 802785e:	e750      	b.n	8027702 <__ieee754_sqrt+0x32>
 8027860:	f7d9 ff44 	bl	80016ec <__aeabi_dadd>
 8027864:	6877      	ldr	r7, [r6, #4]
 8027866:	6836      	ldr	r6, [r6, #0]
 8027868:	0002      	movs	r2, r0
 802786a:	000b      	movs	r3, r1
 802786c:	0030      	movs	r0, r6
 802786e:	0039      	movs	r1, r7
 8027870:	f7d8 fe24 	bl	80004bc <__aeabi_dcmplt>
 8027874:	2800      	cmp	r0, #0
 8027876:	d004      	beq.n	8027882 <__ieee754_sqrt+0x1b2>
 8027878:	3402      	adds	r4, #2
 802787a:	4263      	negs	r3, r4
 802787c:	4163      	adcs	r3, r4
 802787e:	18ed      	adds	r5, r5, r3
 8027880:	e7e0      	b.n	8027844 <__ieee754_sqrt+0x174>
 8027882:	2301      	movs	r3, #1
 8027884:	3401      	adds	r4, #1
 8027886:	439c      	bics	r4, r3
 8027888:	e7dc      	b.n	8027844 <__ieee754_sqrt+0x174>
 802788a:	46c0      	nop			@ (mov r8, r8)
 802788c:	7ff00000 	.word	0x7ff00000
 8027890:	fffffc01 	.word	0xfffffc01
 8027894:	20000440 	.word	0x20000440
 8027898:	20000438 	.word	0x20000438
 802789c:	3fe00000 	.word	0x3fe00000

080278a0 <_init>:
 80278a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80278a2:	46c0      	nop			@ (mov r8, r8)
 80278a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80278a6:	bc08      	pop	{r3}
 80278a8:	469e      	mov	lr, r3
 80278aa:	4770      	bx	lr

080278ac <_fini>:
 80278ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80278ae:	46c0      	nop			@ (mov r8, r8)
 80278b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80278b2:	bc08      	pop	{r3}
 80278b4:	469e      	mov	lr, r3
 80278b6:	4770      	bx	lr
