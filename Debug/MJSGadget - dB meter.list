
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022f24  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ea0  08022fe8  08022fe8  00023fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025e88  08025e88  00027424  2**0
                  CONTENTS
  4 .ARM          00000008  08025e88  08025e88  00026e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025e90  08025e90  00027424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025e90  08025e90  00026e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025e94  08025e94  00026e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000424  20000000  08025e98  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003588  20000424  080262bc  00027424  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200039ac  080262bc  000279ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00027424  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034184  00000000  00000000  0002744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009470  00000000  00000000  0005b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad0  00000000  00000000  00064a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fbe  00000000  00000000  00067510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022908  00000000  00000000  000694ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041998  00000000  00000000  0008bdd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a04e1  00000000  00000000  000cd76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016dc4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae3c  00000000  00000000  0016dd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00178b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00178ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017b125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000424 	.word	0x20000424
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08022fcc 	.word	0x08022fcc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000428 	.word	0x20000428
 8000104:	08022fcc 	.word	0x08022fcc

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0802509c 	.word	0x0802509c
 8000e0c:	080250dc 	.word	0x080250dc
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08025118 	.word	0x08025118
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00c faf2 	bl	800fc4c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00c fb49 	bl	800fd1c <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00c fafc 	bl	800fca8 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000440 	.word	0x20000440

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00c fa78 	bl	800fc4c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00c faa7 	bl	800fcc4 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00c fa8b 	bl	800fca8 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000a20 	.word	0x20000a20

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00b fa12 	bl	800ebe0 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000a1c 	.word	0x20000a1c

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fd62 	bl	80062a0 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <setCharges+0x20>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037e2:	f002 fdbf 	bl	8006364 <ReadSolarVoltage>
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <setCharges+0x24>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	20000570 	.word	0x20000570
 80037f8:	20000574 	.word	0x20000574

080037fc <checkEEprom>:
bool checkEEprom(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <checkEEprom+0x5c>)
 8003804:	4815      	ldr	r0, [pc, #84]	@ (800385c <checkEEprom+0x60>)
 8003806:	220c      	movs	r2, #12
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff ff75 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00e      	b.n	8003834 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <checkEEprom+0x5c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	001a      	movs	r2, r3
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <checkEEprom+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <checkEEprom+0x64>)
 8003828:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d9ec      	bls.n	8003816 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <checkEEprom+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	425a      	negs	r2, r3
 8003842:	4153      	adcs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <checkEEprom+0x68>)
 8003848:	701a      	strb	r2, [r3, #0]
  return test;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <checkEEprom+0x68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	20000a30 	.word	0x20000a30
 800385c:	0808000c 	.word	0x0808000c
 8003860:	20000a3c 	.word	0x20000a3c
 8003864:	20000a40 	.word	0x20000a40

08003868 <checkName>:
bool checkName(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <checkName+0x5c>)
 8003870:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <checkName+0x60>)
 8003872:	221e      	movs	r2, #30
 8003874:	0019      	movs	r1, r3
 8003876:	f7ff ff3f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <checkName+0x38>
    configSum += nameConfig[i];
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <checkName+0x5c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <checkName+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <checkName+0x64>)
 8003894:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	3201      	adds	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	d9ec      	bls.n	8003882 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <checkName+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <checkName+0x68>)
 80038b4:	701a      	strb	r2, [r3, #0]
  return test;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <checkName+0x68>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	20000a44 	.word	0x20000a44
 80038c8:	08080090 	.word	0x08080090
 80038cc:	20000a64 	.word	0x20000a64
 80038d0:	20000a68 	.word	0x20000a68

080038d4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ESP_GetHT+0x20>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <ESP_GetHT+0x24>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20000568 	.word	0x20000568
 80038f8:	2000056c 	.word	0x2000056c

080038fc <setHIDS>:
void setHIDS(float temp, float humid){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003906:	4b05      	ldr	r3, [pc, #20]	@ (800391c <setHIDS+0x20>)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <setHIDS+0x24>)
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b002      	add	sp, #8
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	20000568 	.word	0x20000568
 8003920:	2000056c 	.word	0x2000056c

08003924 <setVOC>:
void setVOC(uint16_t voc){
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	0002      	movs	r2, r0
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	801a      	strh	r2, [r3, #0]
  VOCIndex = voc;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <setVOC+0x1c>)
 8003932:	1dba      	adds	r2, r7, #6
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	801a      	strh	r2, [r3, #0]
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000578 	.word	0x20000578

08003944 <setMic>:
void setMic(float dB){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <setMic+0x18>)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	2000057c 	.word	0x2000057c

08003960 <setPMsen50>:

void setPMsen50(uint16_t PM2, uint16_t PM10) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	0002      	movs	r2, r0
 8003968:	1dbb      	adds	r3, r7, #6
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	1c0a      	adds	r2, r1, #0
 8003970:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003972:	1dbb      	adds	r3, r7, #6
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	0018      	movs	r0, r3
 8003978:	f7fd fe2a 	bl	80015d0 <__aeabi_i2f>
 800397c:	1c03      	adds	r3, r0, #0
 800397e:	490d      	ldr	r1, [pc, #52]	@ (80039b4 <setPMsen50+0x54>)
 8003980:	1c18      	adds	r0, r3, #0
 8003982:	f7fd f927 	bl	8000bd4 <__aeabi_fdiv>
 8003986:	1c03      	adds	r3, r0, #0
 8003988:	1c1a      	adds	r2, r3, #0
 800398a:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <setPMsen50+0x58>)
 800398c:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	0018      	movs	r0, r3
 8003994:	f7fd fe1c 	bl	80015d0 <__aeabi_i2f>
 8003998:	1c03      	adds	r3, r0, #0
 800399a:	4906      	ldr	r1, [pc, #24]	@ (80039b4 <setPMsen50+0x54>)
 800399c:	1c18      	adds	r0, r3, #0
 800399e:	f7fd f919 	bl	8000bd4 <__aeabi_fdiv>
 80039a2:	1c03      	adds	r3, r0, #0
 80039a4:	1c1a      	adds	r2, r3, #0
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <setPMsen50+0x5c>)
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	41200000 	.word	0x41200000
 80039b8:	20000580 	.word	0x20000580
 80039bc:	20000584 	.word	0x20000584

080039c0 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10, uint16_t voc, uint16_t nox) {
 80039c0:	b5b0      	push	{r4, r5, r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	0005      	movs	r5, r0
 80039c8:	000c      	movs	r4, r1
 80039ca:	0010      	movs	r0, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	1dbb      	adds	r3, r7, #6
 80039d0:	1c2a      	adds	r2, r5, #0
 80039d2:	801a      	strh	r2, [r3, #0]
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	1c22      	adds	r2, r4, #0
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	1cbb      	adds	r3, r7, #2
 80039dc:	1c02      	adds	r2, r0, #0
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	003b      	movs	r3, r7
 80039e2:	1c0a      	adds	r2, r1, #0
 80039e4:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 80039e6:	1dbb      	adds	r3, r7, #6
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7fd fdf0 	bl	80015d0 <__aeabi_i2f>
 80039f0:	1c03      	adds	r3, r0, #0
 80039f2:	491d      	ldr	r1, [pc, #116]	@ (8003a68 <setPMs+0xa8>)
 80039f4:	1c18      	adds	r0, r3, #0
 80039f6:	f7fd f8ed 	bl	8000bd4 <__aeabi_fdiv>
 80039fa:	1c03      	adds	r3, r0, #0
 80039fc:	1c1a      	adds	r2, r3, #0
 80039fe:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <setPMs+0xac>)
 8003a00:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f7fd fde2 	bl	80015d0 <__aeabi_i2f>
 8003a0c:	1c03      	adds	r3, r0, #0
 8003a0e:	4916      	ldr	r1, [pc, #88]	@ (8003a68 <setPMs+0xa8>)
 8003a10:	1c18      	adds	r0, r3, #0
 8003a12:	f7fd f8df 	bl	8000bd4 <__aeabi_fdiv>
 8003a16:	1c03      	adds	r3, r0, #0
 8003a18:	1c1a      	adds	r2, r3, #0
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <setPMs+0xb0>)
 8003a1c:	601a      	str	r2, [r3, #0]
  VOCIndex = voc / 10.0f;
 8003a1e:	1cbb      	adds	r3, r7, #2
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f7fd fdd4 	bl	80015d0 <__aeabi_i2f>
 8003a28:	1c03      	adds	r3, r0, #0
 8003a2a:	490f      	ldr	r1, [pc, #60]	@ (8003a68 <setPMs+0xa8>)
 8003a2c:	1c18      	adds	r0, r3, #0
 8003a2e:	f7fd f8d1 	bl	8000bd4 <__aeabi_fdiv>
 8003a32:	1c03      	adds	r3, r0, #0
 8003a34:	1c18      	adds	r0, r3, #0
 8003a36:	f7fc fdf1 	bl	800061c <__aeabi_f2uiz>
 8003a3a:	0003      	movs	r3, r0
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <setPMs+0xb4>)
 8003a40:	801a      	strh	r2, [r3, #0]
  airNOx = nox / 10.0f;
 8003a42:	003b      	movs	r3, r7
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	0018      	movs	r0, r3
 8003a48:	f7fd fdc2 	bl	80015d0 <__aeabi_i2f>
 8003a4c:	1c03      	adds	r3, r0, #0
 8003a4e:	4906      	ldr	r1, [pc, #24]	@ (8003a68 <setPMs+0xa8>)
 8003a50:	1c18      	adds	r0, r3, #0
 8003a52:	f7fd f8bf 	bl	8000bd4 <__aeabi_fdiv>
 8003a56:	1c03      	adds	r3, r0, #0
 8003a58:	1c1a      	adds	r2, r3, #0
 8003a5a:	4b07      	ldr	r3, [pc, #28]	@ (8003a78 <setPMs+0xb8>)
 8003a5c:	601a      	str	r2, [r3, #0]
}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b002      	add	sp, #8
 8003a64:	bdb0      	pop	{r4, r5, r7, pc}
 8003a66:	46c0      	nop			@ (mov r8, r8)
 8003a68:	41200000 	.word	0x41200000
 8003a6c:	20000580 	.word	0x20000580
 8003a70:	20000584 	.word	0x20000584
 8003a74:	20000578 	.word	0x20000578
 8003a78:	20000588 	.word	0x20000588

08003a7c <SetConfigMode>:

void SetConfigMode(){
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003a80:	4b02      	ldr	r3, [pc, #8]	@ (8003a8c <SetConfigMode+0x10>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	2000054f 	.word	0x2000054f

08003a90 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003a94:	f00b f8ee 	bl	800ec74 <HAL_GetUIDw0>
 8003a98:	0002      	movs	r2, r0
 8003a9a:	4b07      	ldr	r3, [pc, #28]	@ (8003ab8 <ESP_GetUID+0x28>)
 8003a9c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003a9e:	f00b f8f3 	bl	800ec88 <HAL_GetUIDw1>
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <ESP_GetUID+0x28>)
 8003aa6:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003aa8:	f00b f8f8 	bl	800ec9c <HAL_GetUIDw2>
 8003aac:	0002      	movs	r2, r0
 8003aae:	4b02      	ldr	r3, [pc, #8]	@ (8003ab8 <ESP_GetUID+0x28>)
 8003ab0:	609a      	str	r2, [r3, #8]
}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000554 	.word	0x20000554

08003abc <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003ac4:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <ESP_Init+0x2c>)
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003aca:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <ESP_Init+0x30>)
 8003acc:	2202      	movs	r2, #2
 8003ace:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003ad0:	f7ff ffde 	bl	8003a90 <ESP_GetUID>
  beurs = checkEEprom();
 8003ad4:	f7ff fe92 	bl	80037fc <checkEEprom>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	001a      	movs	r2, r3
 8003adc:	4b04      	ldr	r3, [pc, #16]	@ (8003af0 <ESP_Init+0x34>)
 8003ade:	701a      	strb	r2, [r3, #0]
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000444 	.word	0x20000444
 8003aec:	20000028 	.word	0x20000028
 8003af0:	20000552 	.word	0x20000552

08003af4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003af4:	b5b0      	push	{r4, r5, r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	000a      	movs	r2, r1
 8003afe:	1cbb      	adds	r3, r7, #2
 8003b00:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a10      	ldr	r2, [pc, #64]	@ (8003b48 <ESP_Send+0x54>)
 8003b06:	4911      	ldr	r1, [pc, #68]	@ (8003b4c <ESP_Send+0x58>)
 8003b08:	2003      	movs	r0, #3
 8003b0a:	f00a fc13 	bl	800e334 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003b0e:	4b10      	ldr	r3, [pc, #64]	@ (8003b50 <ESP_Send+0x5c>)
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	250f      	movs	r5, #15
 8003b14:	197c      	adds	r4, r7, r5
 8003b16:	1cbb      	adds	r3, r7, #2
 8003b18:	881a      	ldrh	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	f013 fb89 	bl	8017234 <HAL_UART_Transmit_DMA>
 8003b22:	0003      	movs	r3, r0
 8003b24:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b26:	197b      	adds	r3, r7, r5
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003b2e:	4a09      	ldr	r2, [pc, #36]	@ (8003b54 <ESP_Send+0x60>)
 8003b30:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <ESP_Send+0x64>)
 8003b32:	0019      	movs	r1, r3
 8003b34:	2001      	movs	r0, #1
 8003b36:	f00a fbfd 	bl	800e334 <CreateLine>
    return false;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <ESP_Send+0x4c>
  }
  return true;
 8003b3e:	2301      	movs	r3, #1
}
 8003b40:	0018      	movs	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b004      	add	sp, #16
 8003b46:	bdb0      	pop	{r4, r5, r7, pc}
 8003b48:	08022fe8 	.word	0x08022fe8
 8003b4c:	08022ff8 	.word	0x08022ff8
 8003b50:	20000444 	.word	0x20000444
 8003b54:	08022ffc 	.word	0x08022ffc
 8003b58:	0802301c 	.word	0x0802301c

08003b5c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	000a      	movs	r2, r1
 8003b66:	1cbb      	adds	r3, r7, #2
 8003b68:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003b6a:	4b56      	ldr	r3, [pc, #344]	@ (8003cc4 <ESP_Receive+0x168>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003b70:	260f      	movs	r6, #15
 8003b72:	19bb      	adds	r3, r7, r6
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003b78:	4b53      	ldr	r3, [pc, #332]	@ (8003cc8 <ESP_Receive+0x16c>)
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	250e      	movs	r5, #14
 8003b7e:	197c      	adds	r4, r7, r5
 8003b80:	1cbb      	adds	r3, r7, #2
 8003b82:	881a      	ldrh	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0019      	movs	r1, r3
 8003b88:	f013 fbe4 	bl	8017354 <HAL_UART_Receive_DMA>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b90:	002c      	movs	r4, r5
 8003b92:	193b      	adds	r3, r7, r4
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d100      	bne.n	8003b9c <ESP_Receive+0x40>
 8003b9a:	e08e      	b.n	8003cba <ESP_Receive+0x15e>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc8 <ESP_Receive+0x16c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2284      	movs	r2, #132	@ 0x84
 8003ba2:	589b      	ldr	r3, [r3, r2]
 8003ba4:	4a49      	ldr	r2, [pc, #292]	@ (8003ccc <ESP_Receive+0x170>)
 8003ba6:	494a      	ldr	r1, [pc, #296]	@ (8003cd0 <ESP_Receive+0x174>)
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f00a fbc3 	bl	800e334 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003bae:	193b      	adds	r3, r7, r4
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d008      	beq.n	8003bca <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003bb8:	4a46      	ldr	r2, [pc, #280]	@ (8003cd4 <ESP_Receive+0x178>)
 8003bba:	4b45      	ldr	r3, [pc, #276]	@ (8003cd0 <ESP_Receive+0x174>)
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f00a fbb8 	bl	800e334 <CreateLine>
      reset = true;
 8003bc4:	19bb      	adds	r3, r7, r6
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003bca:	230e      	movs	r3, #14
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d005      	beq.n	8003be2 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003bd6:	4a40      	ldr	r2, [pc, #256]	@ (8003cd8 <ESP_Receive+0x17c>)
 8003bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd0 <ESP_Receive+0x174>)
 8003bda:	0019      	movs	r1, r3
 8003bdc:	2001      	movs	r0, #1
 8003bde:	f00a fba9 	bl	800e334 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003be2:	230e      	movs	r3, #14
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2204      	movs	r2, #4
 8003bea:	4013      	ands	r3, r2
 8003bec:	d005      	beq.n	8003bfa <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003bee:	4a3b      	ldr	r2, [pc, #236]	@ (8003cdc <ESP_Receive+0x180>)
 8003bf0:	4b37      	ldr	r3, [pc, #220]	@ (8003cd0 <ESP_Receive+0x174>)
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	f00a fb9d 	bl	800e334 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003bfa:	230e      	movs	r3, #14
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2208      	movs	r2, #8
 8003c02:	4013      	ands	r3, r2
 8003c04:	d005      	beq.n	8003c12 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003c06:	4a36      	ldr	r2, [pc, #216]	@ (8003ce0 <ESP_Receive+0x184>)
 8003c08:	4b31      	ldr	r3, [pc, #196]	@ (8003cd0 <ESP_Receive+0x174>)
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f00a fb91 	bl	800e334 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003c12:	230e      	movs	r3, #14
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2210      	movs	r2, #16
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d005      	beq.n	8003c2a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003c1e:	4a31      	ldr	r2, [pc, #196]	@ (8003ce4 <ESP_Receive+0x188>)
 8003c20:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd0 <ESP_Receive+0x174>)
 8003c22:	0019      	movs	r1, r3
 8003c24:	2001      	movs	r0, #1
 8003c26:	f00a fb85 	bl	800e334 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003c2a:	230e      	movs	r3, #14
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2220      	movs	r2, #32
 8003c32:	4013      	ands	r3, r2
 8003c34:	d005      	beq.n	8003c42 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003c36:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce8 <ESP_Receive+0x18c>)
 8003c38:	4b25      	ldr	r3, [pc, #148]	@ (8003cd0 <ESP_Receive+0x174>)
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f00a fb79 	bl	800e334 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003c42:	230e      	movs	r3, #14
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2240      	movs	r2, #64	@ 0x40
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d005      	beq.n	8003c5a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003c4e:	4a27      	ldr	r2, [pc, #156]	@ (8003cec <ESP_Receive+0x190>)
 8003c50:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd0 <ESP_Receive+0x174>)
 8003c52:	0019      	movs	r1, r3
 8003c54:	2001      	movs	r0, #1
 8003c56:	f00a fb6d 	bl	800e334 <CreateLine>
    }
#endif
    if (reset) {
 8003c5a:	230f      	movs	r3, #15
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d025      	beq.n	8003cb0 <ESP_Receive+0x154>
    // Fire all LEDs to red independent of usertoggle or power status and reboot
      TIM2 -> CCR1 = 0;
 8003c64:	2380      	movs	r3, #128	@ 0x80
 8003c66:	05db      	lsls	r3, r3, #23
 8003c68:	2200      	movs	r2, #0
 8003c6a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 4000;
 8003c6c:	2380      	movs	r3, #128	@ 0x80
 8003c6e:	05db      	lsls	r3, r3, #23
 8003c70:	22fa      	movs	r2, #250	@ 0xfa
 8003c72:	0112      	lsls	r2, r2, #4
 8003c74:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	05db      	lsls	r3, r3, #23
 8003c7a:	22fa      	movs	r2, #250	@ 0xfa
 8003c7c:	0112      	lsls	r2, r2, #4
 8003c7e:	641a      	str	r2, [r3, #64]	@ 0x40
      TIM3 -> CCR1 = 0;
 8003c80:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf0 <ESP_Receive+0x194>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8003c86:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf0 <ESP_Receive+0x194>)
 8003c88:	22fa      	movs	r2, #250	@ 0xfa
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8003c8e:	4b18      	ldr	r3, [pc, #96]	@ (8003cf0 <ESP_Receive+0x194>)
 8003c90:	22fa      	movs	r2, #250	@ 0xfa
 8003c92:	0112      	lsls	r2, r2, #4
 8003c94:	63da      	str	r2, [r3, #60]	@ 0x3c

      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 8003c96:	4b17      	ldr	r3, [pc, #92]	@ (8003cf4 <ESP_Receive+0x198>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f00c fa30 	bl	8010102 <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 8003ca2:	23fa      	movs	r3, #250	@ 0xfa
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f00a ffa4 	bl	800ebf4 <HAL_Delay>
      HAL_NVIC_SystemReset();
 8003cac:	f00b fc61 	bl	800f572 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003cb0:	4b04      	ldr	r3, [pc, #16]	@ (8003cc4 <ESP_Receive+0x168>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	701a      	strb	r2, [r3, #0]
    return false;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e000      	b.n	8003cbc <ESP_Receive+0x160>
  }
  return true;
 8003cba:	2301      	movs	r3, #1
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b005      	add	sp, #20
 8003cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc4:	20000448 	.word	0x20000448
 8003cc8:	20000444 	.word	0x20000444
 8003ccc:	08023020 	.word	0x08023020
 8003cd0:	0802301c 	.word	0x0802301c
 8003cd4:	08023050 	.word	0x08023050
 8003cd8:	08023074 	.word	0x08023074
 8003cdc:	08023098 	.word	0x08023098
 8003ce0:	080230bc 	.word	0x080230bc
 8003ce4:	080230e0 	.word	0x080230e0
 8003ce8:	0802310c 	.word	0x0802310c
 8003cec:	0802313c 	.word	0x0802313c
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	50000400 	.word	0x50000400

08003cf8 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003d00:	4b0a      	ldr	r3, [pc, #40]	@ (8003d2c <HAL_UART_ErrorCallback+0x34>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d10c      	bne.n	8003d24 <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2284      	movs	r2, #132	@ 0x84
 8003d0e:	589b      	ldr	r3, [r3, r2]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d007      	beq.n	8003d24 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2284      	movs	r2, #132	@ 0x84
 8003d18:	589b      	ldr	r3, [r3, r2]
 8003d1a:	4a05      	ldr	r2, [pc, #20]	@ (8003d30 <HAL_UART_ErrorCallback+0x38>)
 8003d1c:	4905      	ldr	r1, [pc, #20]	@ (8003d34 <HAL_UART_ErrorCallback+0x3c>)
 8003d1e:	2003      	movs	r0, #3
 8003d20:	f00a fb08 	bl	800e334 <CreateLine>
    }
  }
}
 8003d24:	46c0      	nop			@ (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b002      	add	sp, #8
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000444 	.word	0x20000444
 8003d30:	0802316c 	.word	0x0802316c
 8003d34:	08022ff8 	.word	0x08022ff8

08003d38 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e010      	b.n	8003d6a <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	001a      	movs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	1898      	adds	r0, r3, r2
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	18d3      	adds	r3, r2, r3
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	4b07      	ldr	r3, [pc, #28]	@ (8003d7c <uint8ArrayToString+0x44>)
 8003d5e:	0019      	movs	r1, r3
 8003d60:	f01c f852 	bl	801fe08 <siprintf>
  for (int i = 0; i < 12; i++)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b0b      	cmp	r3, #11
 8003d6e:	ddeb      	ble.n	8003d48 <uint8ArrayToString+0x10>
  }
}
 8003d70:	46c0      	nop			@ (mov r8, r8)
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b004      	add	sp, #16
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	08023198 	.word	0x08023198

08003d80 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d82:	b089      	sub	sp, #36	@ 0x24
 8003d84:	af04      	add	r7, sp, #16
 8003d86:	0002      	movs	r2, r0
 8003d88:	1dfb      	adds	r3, r7, #7
 8003d8a:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d8c:	4bdb      	ldr	r3, [pc, #876]	@ (80040fc <CreateMessage+0x37c>)
 8003d8e:	48dc      	ldr	r0, [pc, #880]	@ (8004100 <CreateMessage+0x380>)
 8003d90:	220c      	movs	r2, #12
 8003d92:	0019      	movs	r1, r3
 8003d94:	f7ff fcb0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d98:	4bda      	ldr	r3, [pc, #872]	@ (8004104 <CreateMessage+0x384>)
 8003d9a:	48db      	ldr	r0, [pc, #876]	@ (8004108 <CreateMessage+0x388>)
 8003d9c:	220c      	movs	r2, #12
 8003d9e:	0019      	movs	r1, r3
 8003da0:	f7ff fcaa 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003da4:	4bd9      	ldr	r3, [pc, #868]	@ (800410c <CreateMessage+0x38c>)
 8003da6:	48da      	ldr	r0, [pc, #872]	@ (8004110 <CreateMessage+0x390>)
 8003da8:	220c      	movs	r2, #12
 8003daa:	0019      	movs	r1, r3
 8003dac:	f7ff fca4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003db0:	4bd8      	ldr	r3, [pc, #864]	@ (8004114 <CreateMessage+0x394>)
 8003db2:	48d9      	ldr	r0, [pc, #868]	@ (8004118 <CreateMessage+0x398>)
 8003db4:	220c      	movs	r2, #12
 8003db6:	0019      	movs	r1, r3
 8003db8:	f7ff fc9e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003dbc:	4bd7      	ldr	r3, [pc, #860]	@ (800411c <CreateMessage+0x39c>)
 8003dbe:	48d8      	ldr	r0, [pc, #864]	@ (8004120 <CreateMessage+0x3a0>)
 8003dc0:	220c      	movs	r2, #12
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	f7ff fc98 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003dc8:	4bd6      	ldr	r3, [pc, #856]	@ (8004124 <CreateMessage+0x3a4>)
 8003dca:	48d7      	ldr	r0, [pc, #860]	@ (8004128 <CreateMessage+0x3a8>)
 8003dcc:	220c      	movs	r2, #12
 8003dce:	0019      	movs	r1, r3
 8003dd0:	f7ff fc92 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003dd4:	4bd5      	ldr	r3, [pc, #852]	@ (800412c <CreateMessage+0x3ac>)
 8003dd6:	48d6      	ldr	r0, [pc, #856]	@ (8004130 <CreateMessage+0x3b0>)
 8003dd8:	220c      	movs	r2, #12
 8003dda:	0019      	movs	r1, r3
 8003ddc:	f7ff fc8c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003de0:	4bd4      	ldr	r3, [pc, #848]	@ (8004134 <CreateMessage+0x3b4>)
 8003de2:	48d5      	ldr	r0, [pc, #852]	@ (8004138 <CreateMessage+0x3b8>)
 8003de4:	220c      	movs	r2, #12
 8003de6:	0019      	movs	r1, r3
 8003de8:	f7ff fc86 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003dec:	4bd3      	ldr	r3, [pc, #844]	@ (800413c <CreateMessage+0x3bc>)
 8003dee:	48d4      	ldr	r0, [pc, #848]	@ (8004140 <CreateMessage+0x3c0>)
 8003df0:	220c      	movs	r2, #12
 8003df2:	0019      	movs	r1, r3
 8003df4:	f7ff fc80 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003df8:	f7ff fd36 	bl	8003868 <checkName>
 8003dfc:	1e03      	subs	r3, r0, #0
 8003dfe:	d006      	beq.n	8003e0e <CreateMessage+0x8e>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003e00:	4bd0      	ldr	r3, [pc, #832]	@ (8004144 <CreateMessage+0x3c4>)
 8003e02:	48d1      	ldr	r0, [pc, #836]	@ (8004148 <CreateMessage+0x3c8>)
 8003e04:	221e      	movs	r2, #30
 8003e06:	0019      	movs	r1, r3
 8003e08:	f7ff fc76 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003e0c:	e005      	b.n	8003e1a <CreateMessage+0x9a>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e0e:	4bcd      	ldr	r3, [pc, #820]	@ (8004144 <CreateMessage+0x3c4>)
 8003e10:	4ace      	ldr	r2, [pc, #824]	@ (800414c <CreateMessage+0x3cc>)
 8003e12:	6811      	ldr	r1, [r2, #0]
 8003e14:	6019      	str	r1, [r3, #0]
 8003e16:	7912      	ldrb	r2, [r2, #4]
 8003e18:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  Debug("sensorid voor opensensmaps nox: %d", noxConfig);
 8003e1a:	4bc4      	ldr	r3, [pc, #784]	@ (800412c <CreateMessage+0x3ac>)
 8003e1c:	4acc      	ldr	r2, [pc, #816]	@ (8004150 <CreateMessage+0x3d0>)
 8003e1e:	49cd      	ldr	r1, [pc, #820]	@ (8004154 <CreateMessage+0x3d4>)
 8003e20:	2003      	movs	r0, #3
 8003e22:	f00a fa87 	bl	800e334 <CreateLine>
  setCharges();
 8003e26:	f7ff fcd5 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1152);
 8003e2a:	2390      	movs	r3, #144	@ 0x90
 8003e2c:	00da      	lsls	r2, r3, #3
 8003e2e:	4bca      	ldr	r3, [pc, #808]	@ (8004158 <CreateMessage+0x3d8>)
 8003e30:	2100      	movs	r1, #0
 8003e32:	0018      	movs	r0, r3
 8003e34:	f01c f92c 	bl	8020090 <memset>
  uint16_t index = 0;
 8003e38:	260e      	movs	r6, #14
 8003e3a:	19bb      	adds	r3, r7, r6
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e40:	19bb      	adds	r3, r7, r6
 8003e42:	881a      	ldrh	r2, [r3, #0]
 8003e44:	4bc4      	ldr	r3, [pc, #784]	@ (8004158 <CreateMessage+0x3d8>)
 8003e46:	18d3      	adds	r3, r2, r3
 8003e48:	4ac4      	ldr	r2, [pc, #784]	@ (800415c <CreateMessage+0x3dc>)
 8003e4a:	0011      	movs	r1, r2
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f01b ffdb 	bl	801fe08 <siprintf>
  index = strlen(message);
 8003e52:	4bc1      	ldr	r3, [pc, #772]	@ (8004158 <CreateMessage+0x3d8>)
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7fc f989 	bl	800016c <strlen>
 8003e5a:	0002      	movs	r2, r0
 8003e5c:	19bb      	adds	r3, r7, r6
 8003e5e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003e60:	4aa6      	ldr	r2, [pc, #664]	@ (80040fc <CreateMessage+0x37c>)
 8003e62:	4bbf      	ldr	r3, [pc, #764]	@ (8004160 <CreateMessage+0x3e0>)
 8003e64:	0011      	movs	r1, r2
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7ff ff66 	bl	8003d38 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003e6c:	19bb      	adds	r3, r7, r6
 8003e6e:	881a      	ldrh	r2, [r3, #0]
 8003e70:	4bb9      	ldr	r3, [pc, #740]	@ (8004158 <CreateMessage+0x3d8>)
 8003e72:	18d4      	adds	r4, r2, r3
 8003e74:	4bbb      	ldr	r3, [pc, #748]	@ (8004164 <CreateMessage+0x3e4>)
 8003e76:	689d      	ldr	r5, [r3, #8]
 8003e78:	4bbb      	ldr	r3, [pc, #748]	@ (8004168 <CreateMessage+0x3e8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	1c18      	adds	r0, r3, #0
 8003e7e:	f7ff faf1 	bl	8003464 <__aeabi_f2d>
 8003e82:	0002      	movs	r2, r0
 8003e84:	000b      	movs	r3, r1
 8003e86:	48af      	ldr	r0, [pc, #700]	@ (8004144 <CreateMessage+0x3c4>)
 8003e88:	49b8      	ldr	r1, [pc, #736]	@ (800416c <CreateMessage+0x3ec>)
 8003e8a:	9202      	str	r2, [sp, #8]
 8003e8c:	9303      	str	r3, [sp, #12]
 8003e8e:	4bb4      	ldr	r3, [pc, #720]	@ (8004160 <CreateMessage+0x3e0>)
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	0003      	movs	r3, r0
 8003e94:	002a      	movs	r2, r5
 8003e96:	0020      	movs	r0, r4
 8003e98:	f01b ffb6 	bl	801fe08 <siprintf>
  index = strlen(message);
 8003e9c:	4bae      	ldr	r3, [pc, #696]	@ (8004158 <CreateMessage+0x3d8>)
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fc f964 	bl	800016c <strlen>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	19bb      	adds	r3, r7, r6
 8003ea8:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003eaa:	4a96      	ldr	r2, [pc, #600]	@ (8004104 <CreateMessage+0x384>)
 8003eac:	4bac      	ldr	r3, [pc, #688]	@ (8004160 <CreateMessage+0x3e0>)
 8003eae:	0011      	movs	r1, r2
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff ff41 	bl	8003d38 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003eb6:	19bb      	adds	r3, r7, r6
 8003eb8:	881a      	ldrh	r2, [r3, #0]
 8003eba:	4ba7      	ldr	r3, [pc, #668]	@ (8004158 <CreateMessage+0x3d8>)
 8003ebc:	18d4      	adds	r4, r2, r3
 8003ebe:	4ba9      	ldr	r3, [pc, #676]	@ (8004164 <CreateMessage+0x3e4>)
 8003ec0:	689d      	ldr	r5, [r3, #8]
 8003ec2:	4bab      	ldr	r3, [pc, #684]	@ (8004170 <CreateMessage+0x3f0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1c18      	adds	r0, r3, #0
 8003ec8:	f7ff facc 	bl	8003464 <__aeabi_f2d>
 8003ecc:	0002      	movs	r2, r0
 8003ece:	000b      	movs	r3, r1
 8003ed0:	489c      	ldr	r0, [pc, #624]	@ (8004144 <CreateMessage+0x3c4>)
 8003ed2:	49a8      	ldr	r1, [pc, #672]	@ (8004174 <CreateMessage+0x3f4>)
 8003ed4:	9202      	str	r2, [sp, #8]
 8003ed6:	9303      	str	r3, [sp, #12]
 8003ed8:	4ba1      	ldr	r3, [pc, #644]	@ (8004160 <CreateMessage+0x3e0>)
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	0003      	movs	r3, r0
 8003ede:	002a      	movs	r2, r5
 8003ee0:	0020      	movs	r0, r4
 8003ee2:	f01b ff91 	bl	801fe08 <siprintf>
  index = strlen(message);
 8003ee6:	4b9c      	ldr	r3, [pc, #624]	@ (8004158 <CreateMessage+0x3d8>)
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fc f93f 	bl	800016c <strlen>
 8003eee:	0002      	movs	r2, r0
 8003ef0:	19bb      	adds	r3, r7, r6
 8003ef2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003ef4:	4a85      	ldr	r2, [pc, #532]	@ (800410c <CreateMessage+0x38c>)
 8003ef6:	4b9a      	ldr	r3, [pc, #616]	@ (8004160 <CreateMessage+0x3e0>)
 8003ef8:	0011      	movs	r1, r2
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff ff1c 	bl	8003d38 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003f00:	19bb      	adds	r3, r7, r6
 8003f02:	881a      	ldrh	r2, [r3, #0]
 8003f04:	4b94      	ldr	r3, [pc, #592]	@ (8004158 <CreateMessage+0x3d8>)
 8003f06:	18d4      	adds	r4, r2, r3
 8003f08:	4b96      	ldr	r3, [pc, #600]	@ (8004164 <CreateMessage+0x3e4>)
 8003f0a:	689d      	ldr	r5, [r3, #8]
 8003f0c:	4b9a      	ldr	r3, [pc, #616]	@ (8004178 <CreateMessage+0x3f8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	1c18      	adds	r0, r3, #0
 8003f12:	f7ff faa7 	bl	8003464 <__aeabi_f2d>
 8003f16:	0002      	movs	r2, r0
 8003f18:	000b      	movs	r3, r1
 8003f1a:	488a      	ldr	r0, [pc, #552]	@ (8004144 <CreateMessage+0x3c4>)
 8003f1c:	4997      	ldr	r1, [pc, #604]	@ (800417c <CreateMessage+0x3fc>)
 8003f1e:	9202      	str	r2, [sp, #8]
 8003f20:	9303      	str	r3, [sp, #12]
 8003f22:	4b8f      	ldr	r3, [pc, #572]	@ (8004160 <CreateMessage+0x3e0>)
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	0003      	movs	r3, r0
 8003f28:	002a      	movs	r2, r5
 8003f2a:	0020      	movs	r0, r4
 8003f2c:	f01b ff6c 	bl	801fe08 <siprintf>
  index = strlen(message);
 8003f30:	4b89      	ldr	r3, [pc, #548]	@ (8004158 <CreateMessage+0x3d8>)
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7fc f91a 	bl	800016c <strlen>
 8003f38:	0002      	movs	r2, r0
 8003f3a:	19bb      	adds	r3, r7, r6
 8003f3c:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003f3e:	4a75      	ldr	r2, [pc, #468]	@ (8004114 <CreateMessage+0x394>)
 8003f40:	4b87      	ldr	r3, [pc, #540]	@ (8004160 <CreateMessage+0x3e0>)
 8003f42:	0011      	movs	r1, r2
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7ff fef7 	bl	8003d38 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003f4a:	19bb      	adds	r3, r7, r6
 8003f4c:	881a      	ldrh	r2, [r3, #0]
 8003f4e:	4b82      	ldr	r3, [pc, #520]	@ (8004158 <CreateMessage+0x3d8>)
 8003f50:	18d0      	adds	r0, r2, r3
 8003f52:	4b84      	ldr	r3, [pc, #528]	@ (8004164 <CreateMessage+0x3e4>)
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	4b8a      	ldr	r3, [pc, #552]	@ (8004180 <CreateMessage+0x400>)
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	4c7a      	ldr	r4, [pc, #488]	@ (8004144 <CreateMessage+0x3c4>)
 8003f5c:	4989      	ldr	r1, [pc, #548]	@ (8004184 <CreateMessage+0x404>)
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	4b7f      	ldr	r3, [pc, #508]	@ (8004160 <CreateMessage+0x3e0>)
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	0023      	movs	r3, r4
 8003f66:	f01b ff4f 	bl	801fe08 <siprintf>
  index = strlen(message);
 8003f6a:	4b7b      	ldr	r3, [pc, #492]	@ (8004158 <CreateMessage+0x3d8>)
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7fc f8fd 	bl	800016c <strlen>
 8003f72:	0002      	movs	r2, r0
 8003f74:	19bb      	adds	r3, r7, r6
 8003f76:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003f78:	1dfb      	adds	r3, r7, #7
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	4053      	eors	r3, r2
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d100      	bne.n	8003f88 <CreateMessage+0x208>
 8003f86:	e113      	b.n	80041b0 <CreateMessage+0x430>
    uint8ArrayToString(Buffer, batteryConfig);
 8003f88:	4a64      	ldr	r2, [pc, #400]	@ (800411c <CreateMessage+0x39c>)
 8003f8a:	4b75      	ldr	r3, [pc, #468]	@ (8004160 <CreateMessage+0x3e0>)
 8003f8c:	0011      	movs	r1, r2
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f7ff fed2 	bl	8003d38 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f94:	19bb      	adds	r3, r7, r6
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	4b6f      	ldr	r3, [pc, #444]	@ (8004158 <CreateMessage+0x3d8>)
 8003f9a:	18d4      	adds	r4, r2, r3
 8003f9c:	4b71      	ldr	r3, [pc, #452]	@ (8004164 <CreateMessage+0x3e4>)
 8003f9e:	689d      	ldr	r5, [r3, #8]
 8003fa0:	4b79      	ldr	r3, [pc, #484]	@ (8004188 <CreateMessage+0x408>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	1c18      	adds	r0, r3, #0
 8003fa6:	f7ff fa5d 	bl	8003464 <__aeabi_f2d>
 8003faa:	0002      	movs	r2, r0
 8003fac:	000b      	movs	r3, r1
 8003fae:	4865      	ldr	r0, [pc, #404]	@ (8004144 <CreateMessage+0x3c4>)
 8003fb0:	4976      	ldr	r1, [pc, #472]	@ (800418c <CreateMessage+0x40c>)
 8003fb2:	9202      	str	r2, [sp, #8]
 8003fb4:	9303      	str	r3, [sp, #12]
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004160 <CreateMessage+0x3e0>)
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	0003      	movs	r3, r0
 8003fbc:	002a      	movs	r2, r5
 8003fbe:	0020      	movs	r0, r4
 8003fc0:	f01b ff22 	bl	801fe08 <siprintf>
    index = strlen(message);
 8003fc4:	4b64      	ldr	r3, [pc, #400]	@ (8004158 <CreateMessage+0x3d8>)
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7fc f8d0 	bl	800016c <strlen>
 8003fcc:	0002      	movs	r2, r0
 8003fce:	19bb      	adds	r3, r7, r6
 8003fd0:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003fd2:	4a54      	ldr	r2, [pc, #336]	@ (8004124 <CreateMessage+0x3a4>)
 8003fd4:	4b62      	ldr	r3, [pc, #392]	@ (8004160 <CreateMessage+0x3e0>)
 8003fd6:	0011      	movs	r1, r2
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fead 	bl	8003d38 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003fde:	19bb      	adds	r3, r7, r6
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8004158 <CreateMessage+0x3d8>)
 8003fe4:	18d4      	adds	r4, r2, r3
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8004164 <CreateMessage+0x3e4>)
 8003fe8:	689d      	ldr	r5, [r3, #8]
 8003fea:	4b69      	ldr	r3, [pc, #420]	@ (8004190 <CreateMessage+0x410>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	1c18      	adds	r0, r3, #0
 8003ff0:	f7ff fa38 	bl	8003464 <__aeabi_f2d>
 8003ff4:	0002      	movs	r2, r0
 8003ff6:	000b      	movs	r3, r1
 8003ff8:	4852      	ldr	r0, [pc, #328]	@ (8004144 <CreateMessage+0x3c4>)
 8003ffa:	4966      	ldr	r1, [pc, #408]	@ (8004194 <CreateMessage+0x414>)
 8003ffc:	9202      	str	r2, [sp, #8]
 8003ffe:	9303      	str	r3, [sp, #12]
 8004000:	4b57      	ldr	r3, [pc, #348]	@ (8004160 <CreateMessage+0x3e0>)
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	0003      	movs	r3, r0
 8004006:	002a      	movs	r2, r5
 8004008:	0020      	movs	r0, r4
 800400a:	f01b fefd 	bl	801fe08 <siprintf>
    index = strlen(message);
 800400e:	4b52      	ldr	r3, [pc, #328]	@ (8004158 <CreateMessage+0x3d8>)
 8004010:	0018      	movs	r0, r3
 8004012:	f7fc f8ab 	bl	800016c <strlen>
 8004016:	0002      	movs	r2, r0
 8004018:	19bb      	adds	r3, r7, r6
 800401a:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, noxConfig);
 800401c:	4a43      	ldr	r2, [pc, #268]	@ (800412c <CreateMessage+0x3ac>)
 800401e:	4b50      	ldr	r3, [pc, #320]	@ (8004160 <CreateMessage+0x3e0>)
 8004020:	0011      	movs	r1, r2
 8004022:	0018      	movs	r0, r3
 8004024:	f7ff fe88 	bl	8003d38 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"NOxr\"},", uid[2], (char*)nameConfig, Buffer, airNOx);
 8004028:	19bb      	adds	r3, r7, r6
 800402a:	881a      	ldrh	r2, [r3, #0]
 800402c:	4b4a      	ldr	r3, [pc, #296]	@ (8004158 <CreateMessage+0x3d8>)
 800402e:	18d4      	adds	r4, r2, r3
 8004030:	4b4c      	ldr	r3, [pc, #304]	@ (8004164 <CreateMessage+0x3e4>)
 8004032:	689d      	ldr	r5, [r3, #8]
 8004034:	4b58      	ldr	r3, [pc, #352]	@ (8004198 <CreateMessage+0x418>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	1c18      	adds	r0, r3, #0
 800403a:	f7ff fa13 	bl	8003464 <__aeabi_f2d>
 800403e:	0002      	movs	r2, r0
 8004040:	000b      	movs	r3, r1
 8004042:	4840      	ldr	r0, [pc, #256]	@ (8004144 <CreateMessage+0x3c4>)
 8004044:	4955      	ldr	r1, [pc, #340]	@ (800419c <CreateMessage+0x41c>)
 8004046:	9202      	str	r2, [sp, #8]
 8004048:	9303      	str	r3, [sp, #12]
 800404a:	4b45      	ldr	r3, [pc, #276]	@ (8004160 <CreateMessage+0x3e0>)
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	0003      	movs	r3, r0
 8004050:	002a      	movs	r2, r5
 8004052:	0020      	movs	r0, r4
 8004054:	f01b fed8 	bl	801fe08 <siprintf>
    index = strlen(message);
 8004058:	4b3f      	ldr	r3, [pc, #252]	@ (8004158 <CreateMessage+0x3d8>)
 800405a:	0018      	movs	r0, r3
 800405c:	f7fc f886 	bl	800016c <strlen>
 8004060:	0002      	movs	r2, r0
 8004062:	19bb      	adds	r3, r7, r6
 8004064:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8004066:	4a33      	ldr	r2, [pc, #204]	@ (8004134 <CreateMessage+0x3b4>)
 8004068:	4b3d      	ldr	r3, [pc, #244]	@ (8004160 <CreateMessage+0x3e0>)
 800406a:	0011      	movs	r1, r2
 800406c:	0018      	movs	r0, r3
 800406e:	f7ff fe63 	bl	8003d38 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8004072:	19bb      	adds	r3, r7, r6
 8004074:	881a      	ldrh	r2, [r3, #0]
 8004076:	4b38      	ldr	r3, [pc, #224]	@ (8004158 <CreateMessage+0x3d8>)
 8004078:	18d4      	adds	r4, r2, r3
 800407a:	4b3a      	ldr	r3, [pc, #232]	@ (8004164 <CreateMessage+0x3e4>)
 800407c:	689d      	ldr	r5, [r3, #8]
 800407e:	4b48      	ldr	r3, [pc, #288]	@ (80041a0 <CreateMessage+0x420>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	1c18      	adds	r0, r3, #0
 8004084:	f7ff f9ee 	bl	8003464 <__aeabi_f2d>
 8004088:	0002      	movs	r2, r0
 800408a:	000b      	movs	r3, r1
 800408c:	482d      	ldr	r0, [pc, #180]	@ (8004144 <CreateMessage+0x3c4>)
 800408e:	4945      	ldr	r1, [pc, #276]	@ (80041a4 <CreateMessage+0x424>)
 8004090:	9202      	str	r2, [sp, #8]
 8004092:	9303      	str	r3, [sp, #12]
 8004094:	4b32      	ldr	r3, [pc, #200]	@ (8004160 <CreateMessage+0x3e0>)
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	0003      	movs	r3, r0
 800409a:	002a      	movs	r2, r5
 800409c:	0020      	movs	r0, r4
 800409e:	f01b feb3 	bl	801fe08 <siprintf>
    index = strlen(message);
 80040a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004158 <CreateMessage+0x3d8>)
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7fc f861 	bl	800016c <strlen>
 80040aa:	0002      	movs	r2, r0
 80040ac:	19bb      	adds	r3, r7, r6
 80040ae:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 80040b0:	4a22      	ldr	r2, [pc, #136]	@ (800413c <CreateMessage+0x3bc>)
 80040b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004160 <CreateMessage+0x3e0>)
 80040b4:	0011      	movs	r1, r2
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff fe3e 	bl	8003d38 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 80040bc:	19bb      	adds	r3, r7, r6
 80040be:	881a      	ldrh	r2, [r3, #0]
 80040c0:	4b25      	ldr	r3, [pc, #148]	@ (8004158 <CreateMessage+0x3d8>)
 80040c2:	18d4      	adds	r4, r2, r3
 80040c4:	4b27      	ldr	r3, [pc, #156]	@ (8004164 <CreateMessage+0x3e4>)
 80040c6:	689d      	ldr	r5, [r3, #8]
 80040c8:	4b37      	ldr	r3, [pc, #220]	@ (80041a8 <CreateMessage+0x428>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	1c18      	adds	r0, r3, #0
 80040ce:	f7ff f9c9 	bl	8003464 <__aeabi_f2d>
 80040d2:	0002      	movs	r2, r0
 80040d4:	000b      	movs	r3, r1
 80040d6:	481b      	ldr	r0, [pc, #108]	@ (8004144 <CreateMessage+0x3c4>)
 80040d8:	4934      	ldr	r1, [pc, #208]	@ (80041ac <CreateMessage+0x42c>)
 80040da:	9202      	str	r2, [sp, #8]
 80040dc:	9303      	str	r3, [sp, #12]
 80040de:	4b20      	ldr	r3, [pc, #128]	@ (8004160 <CreateMessage+0x3e0>)
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	0003      	movs	r3, r0
 80040e4:	002a      	movs	r2, r5
 80040e6:	0020      	movs	r0, r4
 80040e8:	f01b fe8e 	bl	801fe08 <siprintf>
    index = strlen(message);
 80040ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004158 <CreateMessage+0x3d8>)
 80040ee:	0018      	movs	r0, r3
 80040f0:	f7fc f83c 	bl	800016c <strlen>
 80040f4:	0002      	movs	r2, r0
 80040f6:	19bb      	adds	r3, r7, r6
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	e07f      	b.n	80041fc <CreateMessage+0x47c>
 80040fc:	20000a6c 	.word	0x20000a6c
 8004100:	0808000c 	.word	0x0808000c
 8004104:	20000a78 	.word	0x20000a78
 8004108:	08080018 	.word	0x08080018
 800410c:	20000a84 	.word	0x20000a84
 8004110:	08080048 	.word	0x08080048
 8004114:	20000a90 	.word	0x20000a90
 8004118:	08080030 	.word	0x08080030
 800411c:	20000a9c 	.word	0x20000a9c
 8004120:	0808006c 	.word	0x0808006c
 8004124:	20000aa8 	.word	0x20000aa8
 8004128:	08080078 	.word	0x08080078
 800412c:	20000ab4 	.word	0x20000ab4
 8004130:	08080024 	.word	0x08080024
 8004134:	20000ac0 	.word	0x20000ac0
 8004138:	08080054 	.word	0x08080054
 800413c:	20000acc 	.word	0x20000acc
 8004140:	08080060 	.word	0x08080060
 8004144:	20000ad8 	.word	0x20000ad8
 8004148:	08080090 	.word	0x08080090
 800414c:	08025178 	.word	0x08025178
 8004150:	080231a0 	.word	0x080231a0
 8004154:	08022ff8 	.word	0x08022ff8
 8004158:	2000058c 	.word	0x2000058c
 800415c:	080231c4 	.word	0x080231c4
 8004160:	20000af8 	.word	0x20000af8
 8004164:	20000554 	.word	0x20000554
 8004168:	20000568 	.word	0x20000568
 800416c:	080231c8 	.word	0x080231c8
 8004170:	2000056c 	.word	0x2000056c
 8004174:	0802321c 	.word	0x0802321c
 8004178:	2000057c 	.word	0x2000057c
 800417c:	08023274 	.word	0x08023274
 8004180:	20000578 	.word	0x20000578
 8004184:	080232d0 	.word	0x080232d0
 8004188:	20000570 	.word	0x20000570
 800418c:	08023324 	.word	0x08023324
 8004190:	20000574 	.word	0x20000574
 8004194:	08023384 	.word	0x08023384
 8004198:	20000588 	.word	0x20000588
 800419c:	080233e4 	.word	0x080233e4
 80041a0:	20000580 	.word	0x20000580
 80041a4:	0802343c 	.word	0x0802343c
 80041a8:	20000584 	.word	0x20000584
 80041ac:	08023498 	.word	0x08023498

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 80041b0:	4a21      	ldr	r2, [pc, #132]	@ (8004238 <CreateMessage+0x4b8>)
 80041b2:	4b22      	ldr	r3, [pc, #136]	@ (800423c <CreateMessage+0x4bc>)
 80041b4:	0011      	movs	r1, r2
 80041b6:	0018      	movs	r0, r3
 80041b8:	f7ff fdbe 	bl	8003d38 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 80041bc:	260e      	movs	r6, #14
 80041be:	19bb      	adds	r3, r7, r6
 80041c0:	881a      	ldrh	r2, [r3, #0]
 80041c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004240 <CreateMessage+0x4c0>)
 80041c4:	18d4      	adds	r4, r2, r3
 80041c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004244 <CreateMessage+0x4c4>)
 80041c8:	689d      	ldr	r5, [r3, #8]
 80041ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004248 <CreateMessage+0x4c8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	1c18      	adds	r0, r3, #0
 80041d0:	f7ff f948 	bl	8003464 <__aeabi_f2d>
 80041d4:	0002      	movs	r2, r0
 80041d6:	000b      	movs	r3, r1
 80041d8:	481c      	ldr	r0, [pc, #112]	@ (800424c <CreateMessage+0x4cc>)
 80041da:	491d      	ldr	r1, [pc, #116]	@ (8004250 <CreateMessage+0x4d0>)
 80041dc:	9202      	str	r2, [sp, #8]
 80041de:	9303      	str	r3, [sp, #12]
 80041e0:	4b16      	ldr	r3, [pc, #88]	@ (800423c <CreateMessage+0x4bc>)
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	0003      	movs	r3, r0
 80041e6:	002a      	movs	r2, r5
 80041e8:	0020      	movs	r0, r4
 80041ea:	f01b fe0d 	bl	801fe08 <siprintf>
    index = strlen(message);
 80041ee:	4b14      	ldr	r3, [pc, #80]	@ (8004240 <CreateMessage+0x4c0>)
 80041f0:	0018      	movs	r0, r3
 80041f2:	f7fb ffbb 	bl	800016c <strlen>
 80041f6:	0002      	movs	r2, r0
 80041f8:	19bb      	adds	r3, r7, r6
 80041fa:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 80041fc:	240e      	movs	r4, #14
 80041fe:	193b      	adds	r3, r7, r4
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	4a14      	ldr	r2, [pc, #80]	@ (8004254 <CreateMessage+0x4d4>)
 8004204:	4914      	ldr	r1, [pc, #80]	@ (8004258 <CreateMessage+0x4d8>)
 8004206:	2003      	movs	r0, #3
 8004208:	f00a f894 	bl	800e334 <CreateLine>
  index = sprintf(&message[index], "]");
 800420c:	193b      	adds	r3, r7, r4
 800420e:	881a      	ldrh	r2, [r3, #0]
 8004210:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <CreateMessage+0x4c0>)
 8004212:	18d3      	adds	r3, r2, r3
 8004214:	4a11      	ldr	r2, [pc, #68]	@ (800425c <CreateMessage+0x4dc>)
 8004216:	0011      	movs	r1, r2
 8004218:	0018      	movs	r0, r3
 800421a:	f01b fdf5 	bl	801fe08 <siprintf>
 800421e:	0002      	movs	r2, r0
 8004220:	193b      	adds	r3, r7, r4
 8004222:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8004224:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <CreateMessage+0x4c0>)
 8004226:	0018      	movs	r0, r3
 8004228:	f7fb ffa0 	bl	800016c <strlen>
 800422c:	0003      	movs	r3, r0
 800422e:	b29b      	uxth	r3, r3
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b005      	add	sp, #20
 8004236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004238:	20000a9c 	.word	0x20000a9c
 800423c:	20000af8 	.word	0x20000af8
 8004240:	2000058c 	.word	0x2000058c
 8004244:	20000554 	.word	0x20000554
 8004248:	20000570 	.word	0x20000570
 800424c:	20000ad8 	.word	0x20000ad8
 8004250:	080234f0 	.word	0x080234f0
 8004254:	08023548 	.word	0x08023548
 8004258:	08022ff8 	.word	0x08022ff8
 800425c:	08023560 	.word	0x08023560

08004260 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8004264:	2064      	movs	r0, #100	@ 0x64
 8004266:	f00a fcc5 	bl	800ebf4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800426a:	4b15      	ldr	r3, [pc, #84]	@ (80042c0 <StartProg+0x60>)
 800426c:	2200      	movs	r2, #0
 800426e:	2101      	movs	r1, #1
 8004270:	0018      	movs	r0, r3
 8004272:	f00b ff46 	bl	8010102 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004276:	2064      	movs	r0, #100	@ 0x64
 8004278:	f00a fcbc 	bl	800ebf4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800427c:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <StartProg+0x60>)
 800427e:	2200      	movs	r2, #0
 8004280:	2102      	movs	r1, #2
 8004282:	0018      	movs	r0, r3
 8004284:	f00b ff3d 	bl	8010102 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004288:	23fa      	movs	r3, #250	@ 0xfa
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	0018      	movs	r0, r3
 800428e:	f00a fcb1 	bl	800ebf4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004292:	4b0b      	ldr	r3, [pc, #44]	@ (80042c0 <StartProg+0x60>)
 8004294:	2201      	movs	r2, #1
 8004296:	2101      	movs	r1, #1
 8004298:	0018      	movs	r0, r3
 800429a:	f00b ff32 	bl	8010102 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800429e:	23fa      	movs	r3, #250	@ 0xfa
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	0018      	movs	r0, r3
 80042a4:	f00a fca6 	bl	800ebf4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80042a8:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <StartProg+0x60>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	2102      	movs	r1, #2
 80042ae:	0018      	movs	r0, r3
 80042b0:	f00b ff27 	bl	8010102 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80042b4:	2028      	movs	r0, #40	@ 0x28
 80042b6:	f00a fc9d 	bl	800ebf4 <HAL_Delay>
}
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	50001c00 	.word	0x50001c00

080042c4 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b0d9      	sub	sp, #356	@ 0x164
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	0008      	movs	r0, r1
 80042ce:	0011      	movs	r1, r2
 80042d0:	4ba4      	ldr	r3, [pc, #656]	@ (8004564 <ParseBuffer+0x2a0>)
 80042d2:	24b0      	movs	r4, #176	@ 0xb0
 80042d4:	0064      	lsls	r4, r4, #1
 80042d6:	191b      	adds	r3, r3, r4
 80042d8:	19db      	adds	r3, r3, r7
 80042da:	1c02      	adds	r2, r0, #0
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	4ba2      	ldr	r3, [pc, #648]	@ (8004568 <ParseBuffer+0x2a4>)
 80042e0:	191b      	adds	r3, r3, r4
 80042e2:	19db      	adds	r3, r3, r7
 80042e4:	1c0a      	adds	r2, r1, #0
 80042e6:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 80042e8:	2380      	movs	r3, #128	@ 0x80
 80042ea:	005a      	lsls	r2, r3, #1
 80042ec:	2348      	movs	r3, #72	@ 0x48
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	2100      	movs	r1, #0
 80042f2:	0018      	movs	r0, r3
 80042f4:	f01b fecc 	bl	8020090 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 80042f8:	2360      	movs	r3, #96	@ 0x60
 80042fa:	33ff      	adds	r3, #255	@ 0xff
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	2203      	movs	r2, #3
 8004300:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004302:	23ae      	movs	r3, #174	@ 0xae
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	2200      	movs	r2, #0
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	e013      	b.n	8004336 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800430e:	20ae      	movs	r0, #174	@ 0xae
 8004310:	0040      	lsls	r0, r0, #1
 8004312:	183b      	adds	r3, r7, r0
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	18d2      	adds	r2, r2, r3
 800431a:	183b      	adds	r3, r7, r0
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	7811      	ldrb	r1, [r2, #0]
 8004320:	4a92      	ldr	r2, [pc, #584]	@ (800456c <ParseBuffer+0x2a8>)
 8004322:	24b0      	movs	r4, #176	@ 0xb0
 8004324:	0064      	lsls	r4, r4, #1
 8004326:	1912      	adds	r2, r2, r4
 8004328:	19d2      	adds	r2, r2, r7
 800432a:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 800432c:	183b      	adds	r3, r7, r0
 800432e:	881a      	ldrh	r2, [r3, #0]
 8004330:	183b      	adds	r3, r7, r0
 8004332:	3201      	adds	r2, #1
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	23ae      	movs	r3, #174	@ 0xae
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	18fa      	adds	r2, r7, r3
 800433c:	4b89      	ldr	r3, [pc, #548]	@ (8004564 <ParseBuffer+0x2a0>)
 800433e:	21b0      	movs	r1, #176	@ 0xb0
 8004340:	0049      	lsls	r1, r1, #1
 8004342:	185b      	adds	r3, r3, r1
 8004344:	19db      	adds	r3, r3, r7
 8004346:	8812      	ldrh	r2, [r2, #0]
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d3df      	bcc.n	800430e <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 800434e:	4b85      	ldr	r3, [pc, #532]	@ (8004564 <ParseBuffer+0x2a0>)
 8004350:	185b      	adds	r3, r3, r1
 8004352:	19db      	adds	r3, r3, r7
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	4a85      	ldr	r2, [pc, #532]	@ (800456c <ParseBuffer+0x2a8>)
 8004358:	1852      	adds	r2, r2, r1
 800435a:	19d2      	adds	r2, r2, r7
 800435c:	2100      	movs	r1, #0
 800435e:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8004360:	f00a f862 	bl	800e428 <GetVerboseLevel>
 8004364:	0003      	movs	r3, r0
 8004366:	2b03      	cmp	r3, #3
 8004368:	d106      	bne.n	8004378 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 800436a:	2348      	movs	r3, #72	@ 0x48
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	4a80      	ldr	r2, [pc, #512]	@ (8004570 <ParseBuffer+0x2ac>)
 8004370:	4980      	ldr	r1, [pc, #512]	@ (8004574 <ParseBuffer+0x2b0>)
 8004372:	2003      	movs	r0, #3
 8004374:	f009 ffde 	bl	800e334 <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	26ac      	movs	r6, #172	@ 0xac
 800437c:	0076      	lsls	r6, r6, #1
 800437e:	19ba      	adds	r2, r7, r6
 8004380:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 8004382:	4b7d      	ldr	r3, [pc, #500]	@ (8004578 <ParseBuffer+0x2b4>)
 8004384:	25b0      	movs	r5, #176	@ 0xb0
 8004386:	006d      	lsls	r5, r5, #1
 8004388:	195b      	adds	r3, r3, r5
 800438a:	19db      	adds	r3, r3, r7
 800438c:	4a7b      	ldr	r2, [pc, #492]	@ (800457c <ParseBuffer+0x2b8>)
 800438e:	8811      	ldrh	r1, [r2, #0]
 8004390:	8019      	strh	r1, [r3, #0]
 8004392:	7892      	ldrb	r2, [r2, #2]
 8004394:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8004396:	4b7a      	ldr	r3, [pc, #488]	@ (8004580 <ParseBuffer+0x2bc>)
 8004398:	195b      	adds	r3, r3, r5
 800439a:	19db      	adds	r3, r3, r7
 800439c:	4a79      	ldr	r2, [pc, #484]	@ (8004584 <ParseBuffer+0x2c0>)
 800439e:	6811      	ldr	r1, [r2, #0]
 80043a0:	6019      	str	r1, [r3, #0]
 80043a2:	8892      	ldrh	r2, [r2, #4]
 80043a4:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80043a6:	4b78      	ldr	r3, [pc, #480]	@ (8004588 <ParseBuffer+0x2c4>)
 80043a8:	195b      	adds	r3, r3, r5
 80043aa:	19db      	adds	r3, r3, r7
 80043ac:	4a77      	ldr	r2, [pc, #476]	@ (800458c <ParseBuffer+0x2c8>)
 80043ae:	6811      	ldr	r1, [r2, #0]
 80043b0:	6019      	str	r1, [r3, #0]
 80043b2:	7912      	ldrb	r2, [r2, #4]
 80043b4:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80043b6:	4b76      	ldr	r3, [pc, #472]	@ (8004590 <ParseBuffer+0x2cc>)
 80043b8:	195b      	adds	r3, r3, r5
 80043ba:	19db      	adds	r3, r3, r7
 80043bc:	4a75      	ldr	r2, [pc, #468]	@ (8004594 <ParseBuffer+0x2d0>)
 80043be:	6811      	ldr	r1, [r2, #0]
 80043c0:	6019      	str	r1, [r3, #0]
 80043c2:	8892      	ldrh	r2, [r2, #4]
 80043c4:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 80043c6:	4b74      	ldr	r3, [pc, #464]	@ (8004598 <ParseBuffer+0x2d4>)
 80043c8:	195b      	adds	r3, r3, r5
 80043ca:	19db      	adds	r3, r3, r7
 80043cc:	223e      	movs	r2, #62	@ 0x3e
 80043ce:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80043d0:	4b72      	ldr	r3, [pc, #456]	@ (800459c <ParseBuffer+0x2d8>)
 80043d2:	195b      	adds	r3, r3, r5
 80043d4:	19db      	adds	r3, r3, r7
 80043d6:	4a72      	ldr	r2, [pc, #456]	@ (80045a0 <ParseBuffer+0x2dc>)
 80043d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043da:	c313      	stmia	r3!, {r0, r1, r4}
 80043dc:	8811      	ldrh	r1, [r2, #0]
 80043de:	8019      	strh	r1, [r3, #0]
 80043e0:	7892      	ldrb	r2, [r2, #2]
 80043e2:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 80043e4:	4b6f      	ldr	r3, [pc, #444]	@ (80045a4 <ParseBuffer+0x2e0>)
 80043e6:	195b      	adds	r3, r3, r5
 80043e8:	19db      	adds	r3, r3, r7
 80043ea:	4a6f      	ldr	r2, [pc, #444]	@ (80045a8 <ParseBuffer+0x2e4>)
 80043ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043ee:	c313      	stmia	r3!, {r0, r1, r4}
 80043f0:	8812      	ldrh	r2, [r2, #0]
 80043f2:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 80043f4:	4b5c      	ldr	r3, [pc, #368]	@ (8004568 <ParseBuffer+0x2a4>)
 80043f6:	195b      	adds	r3, r3, r5
 80043f8:	19db      	adds	r3, r3, r7
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8004400:	2344      	movs	r3, #68	@ 0x44
 8004402:	18fa      	adds	r2, r7, r3
 8004404:	2348      	movs	r3, #72	@ 0x48
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	0011      	movs	r1, r2
 800440a:	0018      	movs	r0, r3
 800440c:	f01b fe7b 	bl	8020106 <strstr>
 8004410:	0003      	movs	r3, r0
 8004412:	19ba      	adds	r2, r7, r6
 8004414:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004416:	4b54      	ldr	r3, [pc, #336]	@ (8004568 <ParseBuffer+0x2a4>)
 8004418:	22b0      	movs	r2, #176	@ 0xb0
 800441a:	0052      	lsls	r2, r2, #1
 800441c:	189b      	adds	r3, r3, r2
 800441e:	19db      	adds	r3, r3, r7
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d10c      	bne.n	8004440 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8004426:	232c      	movs	r3, #44	@ 0x2c
 8004428:	18fa      	adds	r2, r7, r3
 800442a:	2348      	movs	r3, #72	@ 0x48
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	0011      	movs	r1, r2
 8004430:	0018      	movs	r0, r3
 8004432:	f01b fe68 	bl	8020106 <strstr>
 8004436:	0003      	movs	r3, r0
 8004438:	22ac      	movs	r2, #172	@ 0xac
 800443a:	0052      	lsls	r2, r2, #1
 800443c:	18ba      	adds	r2, r7, r2
 800443e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8004440:	4b49      	ldr	r3, [pc, #292]	@ (8004568 <ParseBuffer+0x2a4>)
 8004442:	22b0      	movs	r2, #176	@ 0xb0
 8004444:	0052      	lsls	r2, r2, #1
 8004446:	189b      	adds	r3, r3, r2
 8004448:	19db      	adds	r3, r3, r7
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d10c      	bne.n	800446a <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8004450:	2328      	movs	r3, #40	@ 0x28
 8004452:	18fa      	adds	r2, r7, r3
 8004454:	2348      	movs	r3, #72	@ 0x48
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	0011      	movs	r1, r2
 800445a:	0018      	movs	r0, r3
 800445c:	f01b fe53 	bl	8020106 <strstr>
 8004460:	0003      	movs	r3, r0
 8004462:	22ac      	movs	r2, #172	@ 0xac
 8004464:	0052      	lsls	r2, r2, #1
 8004466:	18ba      	adds	r2, r7, r2
 8004468:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800446a:	4b3f      	ldr	r3, [pc, #252]	@ (8004568 <ParseBuffer+0x2a4>)
 800446c:	22b0      	movs	r2, #176	@ 0xb0
 800446e:	0052      	lsls	r2, r2, #1
 8004470:	189b      	adds	r3, r3, r2
 8004472:	19db      	adds	r3, r3, r7
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b05      	cmp	r3, #5
 8004478:	d10c      	bne.n	8004494 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800447a:	2308      	movs	r3, #8
 800447c:	18fa      	adds	r2, r7, r3
 800447e:	2348      	movs	r3, #72	@ 0x48
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	0011      	movs	r1, r2
 8004484:	0018      	movs	r0, r3
 8004486:	f01b fe3e 	bl	8020106 <strstr>
 800448a:	0003      	movs	r3, r0
 800448c:	22ac      	movs	r2, #172	@ 0xac
 800448e:	0052      	lsls	r2, r2, #1
 8004490:	18ba      	adds	r2, r7, r2
 8004492:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8004494:	233c      	movs	r3, #60	@ 0x3c
 8004496:	18fa      	adds	r2, r7, r3
 8004498:	2448      	movs	r4, #72	@ 0x48
 800449a:	193b      	adds	r3, r7, r4
 800449c:	0011      	movs	r1, r2
 800449e:	0018      	movs	r0, r3
 80044a0:	f01b fe31 	bl	8020106 <strstr>
 80044a4:	0003      	movs	r3, r0
 80044a6:	22aa      	movs	r2, #170	@ 0xaa
 80044a8:	0052      	lsls	r2, r2, #1
 80044aa:	18ba      	adds	r2, r7, r2
 80044ac:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80044ae:	2318      	movs	r3, #24
 80044b0:	18fa      	adds	r2, r7, r3
 80044b2:	193b      	adds	r3, r7, r4
 80044b4:	0011      	movs	r1, r2
 80044b6:	0018      	movs	r0, r3
 80044b8:	f01b fe25 	bl	8020106 <strstr>
 80044bc:	0003      	movs	r3, r0
 80044be:	22a8      	movs	r2, #168	@ 0xa8
 80044c0:	0052      	lsls	r2, r2, #1
 80044c2:	18ba      	adds	r2, r7, r2
 80044c4:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80044c6:	4a39      	ldr	r2, [pc, #228]	@ (80045ac <ParseBuffer+0x2e8>)
 80044c8:	193b      	adds	r3, r7, r4
 80044ca:	0011      	movs	r1, r2
 80044cc:	0018      	movs	r0, r3
 80044ce:	f01b fe1a 	bl	8020106 <strstr>
 80044d2:	0003      	movs	r3, r0
 80044d4:	22a6      	movs	r2, #166	@ 0xa6
 80044d6:	0052      	lsls	r2, r2, #1
 80044d8:	18ba      	adds	r2, r7, r2
 80044da:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80044dc:	2334      	movs	r3, #52	@ 0x34
 80044de:	18fa      	adds	r2, r7, r3
 80044e0:	193b      	adds	r3, r7, r4
 80044e2:	0011      	movs	r1, r2
 80044e4:	0018      	movs	r0, r3
 80044e6:	f01b fe0e 	bl	8020106 <strstr>
 80044ea:	0003      	movs	r3, r0
 80044ec:	22a4      	movs	r2, #164	@ 0xa4
 80044ee:	0052      	lsls	r2, r2, #1
 80044f0:	18ba      	adds	r2, r7, r2
 80044f2:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80044f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004564 <ParseBuffer+0x2a0>)
 80044f6:	21b0      	movs	r1, #176	@ 0xb0
 80044f8:	0049      	lsls	r1, r1, #1
 80044fa:	185b      	adds	r3, r3, r1
 80044fc:	19db      	adds	r3, r3, r7
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d800      	bhi.n	8004506 <ParseBuffer+0x242>
 8004504:	e0c1      	b.n	800468a <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004506:	22ac      	movs	r2, #172	@ 0xac
 8004508:	0052      	lsls	r2, r2, #1
 800450a:	18bb      	adds	r3, r7, r2
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d054      	beq.n	80045bc <ParseBuffer+0x2f8>
 8004512:	18bb      	adds	r3, r7, r2
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b4f      	cmp	r3, #79	@ 0x4f
 800451a:	d14f      	bne.n	80045bc <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800451c:	2360      	movs	r3, #96	@ 0x60
 800451e:	33ff      	adds	r3, #255	@ 0xff
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004526:	4b22      	ldr	r3, [pc, #136]	@ (80045b0 <ParseBuffer+0x2ec>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b12      	cmp	r3, #18
 800452c:	d146      	bne.n	80045bc <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800452e:	4b0d      	ldr	r3, [pc, #52]	@ (8004564 <ParseBuffer+0x2a0>)
 8004530:	185b      	adds	r3, r3, r1
 8004532:	19db      	adds	r3, r3, r7
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	2b2b      	cmp	r3, #43	@ 0x2b
 8004538:	d10b      	bne.n	8004552 <ParseBuffer+0x28e>
 800453a:	4b0c      	ldr	r3, [pc, #48]	@ (800456c <ParseBuffer+0x2a8>)
 800453c:	185b      	adds	r3, r3, r1
 800453e:	19db      	adds	r3, r3, r7
 8004540:	2221      	movs	r2, #33	@ 0x21
 8004542:	5c9b      	ldrb	r3, [r3, r2]
 8004544:	2b32      	cmp	r3, #50	@ 0x32
 8004546:	d104      	bne.n	8004552 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8004548:	193b      	adds	r3, r7, r4
 800454a:	0018      	movs	r0, r3
 800454c:	f002 f8da 	bl	8006704 <ParseTime>
 8004550:	e034      	b.n	80045bc <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 8004552:	4a18      	ldr	r2, [pc, #96]	@ (80045b4 <ParseBuffer+0x2f0>)
 8004554:	4b18      	ldr	r3, [pc, #96]	@ (80045b8 <ParseBuffer+0x2f4>)
 8004556:	0019      	movs	r1, r3
 8004558:	2001      	movs	r0, #1
 800455a:	f009 feeb 	bl	800e334 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800455e:	2306      	movs	r3, #6
 8004560:	e097      	b.n	8004692 <ParseBuffer+0x3ce>
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	fffffea2 	.word	0xfffffea2
 8004568:	fffffea1 	.word	0xfffffea1
 800456c:	fffffee8 	.word	0xfffffee8
 8004570:	08023564 	.word	0x08023564
 8004574:	08022ff8 	.word	0x08022ff8
 8004578:	fffffee4 	.word	0xfffffee4
 800457c:	08023590 	.word	0x08023590
 8004580:	fffffedc 	.word	0xfffffedc
 8004584:	08023594 	.word	0x08023594
 8004588:	fffffed4 	.word	0xfffffed4
 800458c:	0802359c 	.word	0x0802359c
 8004590:	fffffecc 	.word	0xfffffecc
 8004594:	080235a4 	.word	0x080235a4
 8004598:	fffffec8 	.word	0xfffffec8
 800459c:	fffffeb8 	.word	0xfffffeb8
 80045a0:	080235ac 	.word	0x080235ac
 80045a4:	fffffea8 	.word	0xfffffea8
 80045a8:	080235bc 	.word	0x080235bc
 80045ac:	08025158 	.word	0x08025158
 80045b0:	20000a2a 	.word	0x20000a2a
 80045b4:	0802357c 	.word	0x0802357c
 80045b8:	0802301c 	.word	0x0802301c
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80045bc:	22ac      	movs	r2, #172	@ 0xac
 80045be:	0052      	lsls	r2, r2, #1
 80045c0:	18bb      	adds	r3, r7, r2
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d009      	beq.n	80045dc <ParseBuffer+0x318>
 80045c8:	18bb      	adds	r3, r7, r2
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b72      	cmp	r3, #114	@ 0x72
 80045d0:	d104      	bne.n	80045dc <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 80045d2:	2360      	movs	r3, #96	@ 0x60
 80045d4:	33ff      	adds	r3, #255	@ 0xff
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	2202      	movs	r2, #2
 80045da:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80045dc:	22ac      	movs	r2, #172	@ 0xac
 80045de:	0052      	lsls	r2, r2, #1
 80045e0:	18bb      	adds	r3, r7, r2
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d009      	beq.n	80045fc <ParseBuffer+0x338>
 80045e8:	18bb      	adds	r3, r7, r2
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80045f0:	d104      	bne.n	80045fc <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 80045f2:	2360      	movs	r3, #96	@ 0x60
 80045f4:	33ff      	adds	r3, #255	@ 0xff
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	2205      	movs	r2, #5
 80045fa:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80045fc:	22ac      	movs	r2, #172	@ 0xac
 80045fe:	0052      	lsls	r2, r2, #1
 8004600:	18bb      	adds	r3, r7, r2
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d009      	beq.n	800461c <ParseBuffer+0x358>
 8004608:	18bb      	adds	r3, r7, r2
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004610:	d104      	bne.n	800461c <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 8004612:	2360      	movs	r3, #96	@ 0x60
 8004614:	33ff      	adds	r3, #255	@ 0xff
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	220b      	movs	r2, #11
 800461a:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 800461c:	22aa      	movs	r2, #170	@ 0xaa
 800461e:	0052      	lsls	r2, r2, #1
 8004620:	18bb      	adds	r3, r7, r2
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d004      	beq.n	8004632 <ParseBuffer+0x36e>
 8004628:	18bb      	adds	r3, r7, r2
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b45      	cmp	r3, #69	@ 0x45
 8004630:	d00a      	beq.n	8004648 <ParseBuffer+0x384>
 8004632:	22a4      	movs	r2, #164	@ 0xa4
 8004634:	0052      	lsls	r2, r2, #1
 8004636:	18bb      	adds	r3, r7, r2
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d009      	beq.n	8004652 <ParseBuffer+0x38e>
 800463e:	18bb      	adds	r3, r7, r2
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b46      	cmp	r3, #70	@ 0x46
 8004646:	d104      	bne.n	8004652 <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 8004648:	2360      	movs	r3, #96	@ 0x60
 800464a:	33ff      	adds	r3, #255	@ 0xff
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8004652:	22a8      	movs	r2, #168	@ 0xa8
 8004654:	0052      	lsls	r2, r2, #1
 8004656:	18bb      	adds	r3, r7, r2
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <ParseBuffer+0x3aa>
 800465e:	18bb      	adds	r3, r7, r2
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b57      	cmp	r3, #87	@ 0x57
 8004666:	d102      	bne.n	800466e <ParseBuffer+0x3aa>
      ConnectionMade = true;
 8004668:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <ParseBuffer+0x3d8>)
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800466e:	22a6      	movs	r2, #166	@ 0xa6
 8004670:	0052      	lsls	r2, r2, #1
 8004672:	18bb      	adds	r3, r7, r2
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <ParseBuffer+0x3c6>
 800467a:	18bb      	adds	r3, r7, r2
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b32      	cmp	r3, #50	@ 0x32
 8004682:	d102      	bne.n	800468a <ParseBuffer+0x3c6>
      beurs = true;
 8004684:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <ParseBuffer+0x3dc>)
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800468a:	2360      	movs	r3, #96	@ 0x60
 800468c:	33ff      	adds	r3, #255	@ 0xff
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	781b      	ldrb	r3, [r3, #0]

}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b059      	add	sp, #356	@ 0x164
 8004698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	20000550 	.word	0x20000550
 80046a0:	20000552 	.word	0x20000552

080046a4 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80046aa:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <PollAwake+0x34>)
 80046ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fb fd5b 	bl	800016c <strlen>
 80046b6:	0003      	movs	r3, r0
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0011      	movs	r1, r2
 80046be:	0018      	movs	r0, r3
 80046c0:	f7ff fa18 	bl	8003af4 <ESP_Send>
 80046c4:	1e03      	subs	r3, r0, #0
 80046c6:	d001      	beq.n	80046cc <PollAwake+0x28>
    return true;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <PollAwake+0x2a>
  }
  else{
    return false;
 80046cc:	2300      	movs	r3, #0
  }
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			@ (mov r8, r8)
 80046d8:	080235cc 	.word	0x080235cc

080046dc <RFPower>:
bool RFPower(){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80046e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <RFPower+0x34>)
 80046e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7fb fd3f 	bl	800016c <strlen>
 80046ee:	0003      	movs	r3, r0
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	0011      	movs	r1, r2
 80046f6:	0018      	movs	r0, r3
 80046f8:	f7ff f9fc 	bl	8003af4 <ESP_Send>
 80046fc:	1e03      	subs	r3, r0, #0
 80046fe:	d001      	beq.n	8004704 <RFPower+0x28>
    return true;
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <RFPower+0x2a>
  }
  else{
    return false;
 8004704:	2300      	movs	r3, #0
  }
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b002      	add	sp, #8
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	080235d4 	.word	0x080235d4

08004714 <CheckRFPower>:
bool CheckRFPower(){
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800471a:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <CheckRFPower+0x34>)
 800471c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0018      	movs	r0, r3
 8004722:	f7fb fd23 	bl	800016c <strlen>
 8004726:	0003      	movs	r3, r0
 8004728:	b29a      	uxth	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff f9e0 	bl	8003af4 <ESP_Send>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d001      	beq.n	800473c <CheckRFPower+0x28>
    return true;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <CheckRFPower+0x2a>
  }
  else{
    return false;
 800473c:	2300      	movs	r3, #0
  }
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	080235e4 	.word	0x080235e4

0800474c <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004752:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <ATRestore+0x34>)
 8004754:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0018      	movs	r0, r3
 800475a:	f7fb fd07 	bl	800016c <strlen>
 800475e:	0003      	movs	r3, r0
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0011      	movs	r1, r2
 8004766:	0018      	movs	r0, r3
 8004768:	f7ff f9c4 	bl	8003af4 <ESP_Send>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d001      	beq.n	8004774 <ATRestore+0x28>
    return true;
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <ATRestore+0x2a>
  }
  else{
    return false;
 8004774:	2300      	movs	r3, #0
  }
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b002      	add	sp, #8
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			@ (mov r8, r8)
 8004780:	080235f4 	.word	0x080235f4

08004784 <CWINIT>:
bool CWINIT(){
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800478a:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <CWINIT+0x34>)
 800478c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0018      	movs	r0, r3
 8004792:	f7fb fceb 	bl	800016c <strlen>
 8004796:	0003      	movs	r3, r0
 8004798:	b29a      	uxth	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0011      	movs	r1, r2
 800479e:	0018      	movs	r0, r3
 80047a0:	f7ff f9a8 	bl	8003af4 <ESP_Send>
 80047a4:	1e03      	subs	r3, r0, #0
 80047a6:	d001      	beq.n	80047ac <CWINIT+0x28>
    return true;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <CWINIT+0x2a>
  }
  else{
    return false;
 80047ac:	2300      	movs	r3, #0
  }
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b002      	add	sp, #8
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	08023604 	.word	0x08023604

080047bc <CWMODE1>:
bool CWMODE1(){
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80047c2:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <CWMODE1+0x34>)
 80047c4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f7fb fccf 	bl	800016c <strlen>
 80047ce:	0003      	movs	r3, r0
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	0011      	movs	r1, r2
 80047d6:	0018      	movs	r0, r3
 80047d8:	f7ff f98c 	bl	8003af4 <ESP_Send>
 80047dc:	1e03      	subs	r3, r0, #0
 80047de:	d001      	beq.n	80047e4 <CWMODE1+0x28>
    return true;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <CWMODE1+0x2a>
  }
  else{
    return false;
 80047e4:	2300      	movs	r3, #0
  }
}
 80047e6:	0018      	movs	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b002      	add	sp, #8
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	08023614 	.word	0x08023614

080047f4 <CWMODE2>:
bool CWMODE2(){
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80047fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <CWMODE2+0x34>)
 80047fc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0018      	movs	r0, r3
 8004802:	f7fb fcb3 	bl	800016c <strlen>
 8004806:	0003      	movs	r3, r0
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0011      	movs	r1, r2
 800480e:	0018      	movs	r0, r3
 8004810:	f7ff f970 	bl	8003af4 <ESP_Send>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d001      	beq.n	800481c <CWMODE2+0x28>
    return true;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <CWMODE2+0x2a>
  }
  else{
    return false;
 800481c:	2300      	movs	r3, #0
  }
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b002      	add	sp, #8
 8004824:	bd80      	pop	{r7, pc}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	08023624 	.word	0x08023624

0800482c <CWAUTOCONN>:
bool CWAUTOCONN(){
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004832:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <CWAUTOCONN+0x34>)
 8004834:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f7fb fc97 	bl	800016c <strlen>
 800483e:	0003      	movs	r3, r0
 8004840:	b29a      	uxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0011      	movs	r1, r2
 8004846:	0018      	movs	r0, r3
 8004848:	f7ff f954 	bl	8003af4 <ESP_Send>
 800484c:	1e03      	subs	r3, r0, #0
 800484e:	d001      	beq.n	8004854 <CWAUTOCONN+0x28>
    return true;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004854:	2300      	movs	r3, #0
  }
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b002      	add	sp, #8
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	08023634 	.word	0x08023634

08004864 <CWJAP>:
bool CWJAP(){
 8004864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004866:	46c6      	mov	lr, r8
 8004868:	b500      	push	{lr}
 800486a:	b0a2      	sub	sp, #136	@ 0x88
 800486c:	af00      	add	r7, sp, #0
 800486e:	466b      	mov	r3, sp
 8004870:	4698      	mov	r8, r3
  beursTest = true;
 8004872:	4b39      	ldr	r3, [pc, #228]	@ (8004958 <CWJAP+0xf4>)
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004878:	2618      	movs	r6, #24
 800487a:	19bb      	adds	r3, r7, r6
 800487c:	2264      	movs	r2, #100	@ 0x64
 800487e:	2100      	movs	r1, #0
 8004880:	0018      	movs	r0, r3
 8004882:	f01b fc05 	bl	8020090 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004886:	4b35      	ldr	r3, [pc, #212]	@ (800495c <CWJAP+0xf8>)
 8004888:	4a35      	ldr	r2, [pc, #212]	@ (8004960 <CWJAP+0xfc>)
 800488a:	4936      	ldr	r1, [pc, #216]	@ (8004964 <CWJAP+0x100>)
 800488c:	19b8      	adds	r0, r7, r6
 800488e:	f01b fabb 	bl	801fe08 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004892:	19bb      	adds	r3, r7, r6
 8004894:	0018      	movs	r0, r3
 8004896:	f7fb fc69 	bl	800016c <strlen>
 800489a:	0002      	movs	r2, r0
 800489c:	216f      	movs	r1, #111	@ 0x6f
 800489e:	0030      	movs	r0, r6
 80048a0:	180b      	adds	r3, r1, r0
 80048a2:	19db      	adds	r3, r3, r7
 80048a4:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80048a6:	180b      	adds	r3, r1, r0
 80048a8:	19db      	adds	r3, r3, r7
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	3301      	adds	r3, #1
 80048ae:	1e5a      	subs	r2, r3, #1
 80048b0:	2180      	movs	r1, #128	@ 0x80
 80048b2:	1879      	adds	r1, r7, r1
 80048b4:	600a      	str	r2, [r1, #0]
 80048b6:	001a      	movs	r2, r3
 80048b8:	60ba      	str	r2, [r7, #8]
 80048ba:	2200      	movs	r2, #0
 80048bc:	60fa      	str	r2, [r7, #12]
 80048be:	68b8      	ldr	r0, [r7, #8]
 80048c0:	68f9      	ldr	r1, [r7, #12]
 80048c2:	0002      	movs	r2, r0
 80048c4:	0f52      	lsrs	r2, r2, #29
 80048c6:	000e      	movs	r6, r1
 80048c8:	00f6      	lsls	r6, r6, #3
 80048ca:	617e      	str	r6, [r7, #20]
 80048cc:	697e      	ldr	r6, [r7, #20]
 80048ce:	4316      	orrs	r6, r2
 80048d0:	617e      	str	r6, [r7, #20]
 80048d2:	0002      	movs	r2, r0
 80048d4:	00d2      	lsls	r2, r2, #3
 80048d6:	613a      	str	r2, [r7, #16]
 80048d8:	001a      	movs	r2, r3
 80048da:	603a      	str	r2, [r7, #0]
 80048dc:	2200      	movs	r2, #0
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	6838      	ldr	r0, [r7, #0]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	0002      	movs	r2, r0
 80048e6:	0f52      	lsrs	r2, r2, #29
 80048e8:	000e      	movs	r6, r1
 80048ea:	00f5      	lsls	r5, r6, #3
 80048ec:	4315      	orrs	r5, r2
 80048ee:	0002      	movs	r2, r0
 80048f0:	00d4      	lsls	r4, r2, #3
 80048f2:	3307      	adds	r3, #7
 80048f4:	08db      	lsrs	r3, r3, #3
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	466a      	mov	r2, sp
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	469d      	mov	sp, r3
 80048fe:	466b      	mov	r3, sp
 8004900:	3300      	adds	r3, #0
 8004902:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004904:	246f      	movs	r4, #111	@ 0x6f
 8004906:	2518      	movs	r5, #24
 8004908:	1963      	adds	r3, r4, r5
 800490a:	19db      	adds	r3, r3, r7
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	3301      	adds	r3, #1
 8004910:	001a      	movs	r2, r3
 8004912:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004914:	2100      	movs	r1, #0
 8004916:	0018      	movs	r0, r3
 8004918:	f01b fbba 	bl	8020090 <memset>
  strncpy(atCommand, atCommandBuff, len);
 800491c:	1963      	adds	r3, r4, r5
 800491e:	19db      	adds	r3, r3, r7
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	1979      	adds	r1, r7, r5
 8004924:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004926:	0018      	movs	r0, r3
 8004928:	f01b fbd9 	bl	80200de <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800492c:	1963      	adds	r3, r4, r5
 800492e:	19db      	adds	r3, r3, r7
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	b29a      	uxth	r2, r3
 8004934:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004936:	0011      	movs	r1, r2
 8004938:	0018      	movs	r0, r3
 800493a:	f7ff f8db 	bl	8003af4 <ESP_Send>
 800493e:	1e03      	subs	r3, r0, #0
 8004940:	d001      	beq.n	8004946 <CWJAP+0xe2>
    return true;
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <CWJAP+0xe4>
  }
  else{
    return false;
 8004946:	2300      	movs	r3, #0
 8004948:	46c5      	mov	sp, r8
  }
}
 800494a:	0018      	movs	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	b022      	add	sp, #136	@ 0x88
 8004950:	bc80      	pop	{r7}
 8004952:	46b8      	mov	r8, r7
 8004954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	20000551 	.word	0x20000551
 800495c:	08025164 	.word	0x08025164
 8004960:	08025158 	.word	0x08025158
 8004964:	08023648 	.word	0x08023648

08004968 <CWMODE3>:
bool CWMODE3(){
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800496e:	4b0b      	ldr	r3, [pc, #44]	@ (800499c <CWMODE3+0x34>)
 8004970:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f7fb fbf9 	bl	800016c <strlen>
 800497a:	0003      	movs	r3, r0
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0011      	movs	r1, r2
 8004982:	0018      	movs	r0, r3
 8004984:	f7ff f8b6 	bl	8003af4 <ESP_Send>
 8004988:	1e03      	subs	r3, r0, #0
 800498a:	d001      	beq.n	8004990 <CWMODE3+0x28>
    return true;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004990:	2300      	movs	r3, #0
  }
}
 8004992:	0018      	movs	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	b002      	add	sp, #8
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	08023660 	.word	0x08023660

080049a0 <CWSTATE>:
bool CWSTATE(){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80049a6:	4b0b      	ldr	r3, [pc, #44]	@ (80049d4 <CWSTATE+0x34>)
 80049a8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7fb fbdd 	bl	800016c <strlen>
 80049b2:	0003      	movs	r3, r0
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0011      	movs	r1, r2
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff f89a 	bl	8003af4 <ESP_Send>
 80049c0:	1e03      	subs	r3, r0, #0
 80049c2:	d001      	beq.n	80049c8 <CWSTATE+0x28>
    return true;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <CWSTATE+0x2a>
  }
  else{
    return false;
 80049c8:	2300      	movs	r3, #0
  }
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b002      	add	sp, #8
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	08023670 	.word	0x08023670

080049d8 <CWSAP>:
bool CWSAP(){
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80049de:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <CWSAP+0x34>)
 80049e0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	0018      	movs	r0, r3
 80049e6:	f7fb fbc1 	bl	800016c <strlen>
 80049ea:	0003      	movs	r3, r0
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0011      	movs	r1, r2
 80049f2:	0018      	movs	r0, r3
 80049f4:	f7ff f87e 	bl	8003af4 <ESP_Send>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d001      	beq.n	8004a00 <CWSAP+0x28>
    return true;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <CWSAP+0x2a>
  }
  else{
    return false;
 8004a00:	2300      	movs	r3, #0
  }
}
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b002      	add	sp, #8
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	08023680 	.word	0x08023680

08004a10 <CIPMUX>:
bool CIPMUX(){
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004a16:	4b0b      	ldr	r3, [pc, #44]	@ (8004a44 <CIPMUX+0x34>)
 8004a18:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fb fba5 	bl	800016c <strlen>
 8004a22:	0003      	movs	r3, r0
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	0011      	movs	r1, r2
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f7ff f862 	bl	8003af4 <ESP_Send>
 8004a30:	1e03      	subs	r3, r0, #0
 8004a32:	d001      	beq.n	8004a38 <CIPMUX+0x28>
    return true;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <CIPMUX+0x2a>
  }
  else{
    return false;
 8004a38:	2300      	movs	r3, #0
  }
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b002      	add	sp, #8
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	080236a4 	.word	0x080236a4

08004a48 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a7c <WEBSERVER+0x34>)
 8004a50:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f7fb fb89 	bl	800016c <strlen>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0011      	movs	r1, r2
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7ff f846 	bl	8003af4 <ESP_Send>
 8004a68:	1e03      	subs	r3, r0, #0
 8004a6a:	d001      	beq.n	8004a70 <WEBSERVER+0x28>
    return true;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004a70:	2300      	movs	r3, #0
  }
}
 8004a72:	0018      	movs	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b002      	add	sp, #8
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	080236b4 	.word	0x080236b4

08004a80 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b0c5      	sub	sp, #276	@ 0x114
 8004a84:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	005a      	lsls	r2, r3, #1
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f01b fafe 	bl	8020090 <memset>
  uint16_t length = CreateMessage(beurs);
 8004a94:	4b22      	ldr	r3, [pc, #136]	@ (8004b20 <HTTPCPOST+0xa0>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	1dfc      	adds	r4, r7, #7
 8004a9a:	34ff      	adds	r4, #255	@ 0xff
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f7ff f96f 	bl	8003d80 <CreateMessage>
 8004aa2:	0003      	movs	r3, r0
 8004aa4:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b20 <HTTPCPOST+0xa0>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d008      	beq.n	8004ac0 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004aae:	1dfb      	adds	r3, r7, #7
 8004ab0:	33ff      	adds	r3, #255	@ 0xff
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b24 <HTTPCPOST+0xa4>)
 8004ab6:	491c      	ldr	r1, [pc, #112]	@ (8004b28 <HTTPCPOST+0xa8>)
 8004ab8:	1d38      	adds	r0, r7, #4
 8004aba:	f01b f9a5 	bl	801fe08 <siprintf>
 8004abe:	e016      	b.n	8004aee <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b2c <HTTPCPOST+0xac>)
 8004ac2:	481b      	ldr	r0, [pc, #108]	@ (8004b30 <HTTPCPOST+0xb0>)
 8004ac4:	220c      	movs	r2, #12
 8004ac6:	0019      	movs	r1, r3
 8004ac8:	f7fe fe16 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004acc:	4a17      	ldr	r2, [pc, #92]	@ (8004b2c <HTTPCPOST+0xac>)
 8004ace:	4b19      	ldr	r3, [pc, #100]	@ (8004b34 <HTTPCPOST+0xb4>)
 8004ad0:	0011      	movs	r1, r2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f7ff f930 	bl	8003d38 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004ad8:	1dfb      	adds	r3, r7, #7
 8004ada:	33ff      	adds	r3, #255	@ 0xff
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	4c15      	ldr	r4, [pc, #84]	@ (8004b34 <HTTPCPOST+0xb4>)
 8004ae0:	4a15      	ldr	r2, [pc, #84]	@ (8004b38 <HTTPCPOST+0xb8>)
 8004ae2:	4916      	ldr	r1, [pc, #88]	@ (8004b3c <HTTPCPOST+0xbc>)
 8004ae4:	1d38      	adds	r0, r7, #4
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	0023      	movs	r3, r4
 8004aea:	f01b f98d 	bl	801fe08 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7fb fb3b 	bl	800016c <strlen>
 8004af6:	0002      	movs	r2, r0
 8004af8:	1d7b      	adds	r3, r7, #5
 8004afa:	33ff      	adds	r3, #255	@ 0xff
 8004afc:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004afe:	1d7b      	adds	r3, r7, #5
 8004b00:	33ff      	adds	r3, #255	@ 0xff
 8004b02:	881a      	ldrh	r2, [r3, #0]
 8004b04:	1d3b      	adds	r3, r7, #4
 8004b06:	0011      	movs	r1, r2
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fe fff3 	bl	8003af4 <ESP_Send>
 8004b0e:	1e03      	subs	r3, r0, #0
 8004b10:	d001      	beq.n	8004b16 <HTTPCPOST+0x96>
    return true;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004b16:	2300      	movs	r3, #0
  }
}
 8004b18:	0018      	movs	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b043      	add	sp, #268	@ 0x10c
 8004b1e:	bd90      	pop	{r4, r7, pc}
 8004b20:	20000552 	.word	0x20000552
 8004b24:	08025180 	.word	0x08025180
 8004b28:	080236cc 	.word	0x080236cc
 8004b2c:	20000b14 	.word	0x20000b14
 8004b30:	08080000 	.word	0x08080000
 8004b34:	20000b20 	.word	0x20000b20
 8004b38:	080251bc 	.word	0x080251bc
 8004b3c:	08023704 	.word	0x08023704

08004b40 <SENDDATA>:
bool SENDDATA(){
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004b46:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <SENDDATA+0x34>)
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f7fb fb0f 	bl	800016c <strlen>
 8004b4e:	0002      	movs	r2, r0
 8004b50:	1dbb      	adds	r3, r7, #6
 8004b52:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004b54:	1dbb      	adds	r3, r7, #6
 8004b56:	881a      	ldrh	r2, [r3, #0]
 8004b58:	4b06      	ldr	r3, [pc, #24]	@ (8004b74 <SENDDATA+0x34>)
 8004b5a:	0011      	movs	r1, r2
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7fe ffc9 	bl	8003af4 <ESP_Send>
 8004b62:	1e03      	subs	r3, r0, #0
 8004b64:	d001      	beq.n	8004b6a <SENDDATA+0x2a>
    return true;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <SENDDATA+0x2c>
  }
  else{
    return false;
 8004b6a:	2300      	movs	r3, #0
  }
}
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b002      	add	sp, #8
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	2000058c 	.word	0x2000058c

08004b78 <SLEEP>:
bool SLEEP(){
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <SLEEP+0x34>)
 8004b80:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f7fb faf1 	bl	800016c <strlen>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0011      	movs	r1, r2
 8004b92:	0018      	movs	r0, r3
 8004b94:	f7fe ffae 	bl	8003af4 <ESP_Send>
 8004b98:	1e03      	subs	r3, r0, #0
 8004b9a:	d001      	beq.n	8004ba0 <SLEEP+0x28>
    return true;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <SLEEP+0x2a>
  }
  else{
    return false;
 8004ba0:	2300      	movs	r3, #0
  }
}
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b002      	add	sp, #8
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	46c0      	nop			@ (mov r8, r8)
 8004bac:	08023744 	.word	0x08023744

08004bb0 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bec <CIPSNTPCFG+0x3c>)
 8004bb8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f7fb fad5 	bl	800016c <strlen>
 8004bc2:	0003      	movs	r3, r0
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0011      	movs	r1, r2
 8004bca:	0018      	movs	r0, r3
 8004bcc:	f7fe ff92 	bl	8003af4 <ESP_Send>
 8004bd0:	1e03      	subs	r3, r0, #0
 8004bd2:	d006      	beq.n	8004be2 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004bd4:	23fa      	movs	r3, #250	@ 0xfa
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f00a f80b 	bl	800ebf4 <HAL_Delay>
    return true;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004be2:	2300      	movs	r3, #0
  }
}
 8004be4:	0018      	movs	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b002      	add	sp, #8
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	08023754 	.word	0x08023754

08004bf0 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <CIPSNTPTIME+0x34>)
 8004bf8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f7fb fab5 	bl	800016c <strlen>
 8004c02:	0003      	movs	r3, r0
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	0011      	movs	r1, r2
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7fe ff72 	bl	8003af4 <ESP_Send>
 8004c10:	1e03      	subs	r3, r0, #0
 8004c12:	d001      	beq.n	8004c18 <CIPSNTPTIME+0x28>
    return true;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004c18:	2300      	movs	r3, #0
  }
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	080237a4 	.word	0x080237a4

08004c28 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <CIPSNTPINTV+0x34>)
 8004c30:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7fb fa99 	bl	800016c <strlen>
 8004c3a:	0003      	movs	r3, r0
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	0011      	movs	r1, r2
 8004c42:	0018      	movs	r0, r3
 8004c44:	f7fe ff56 	bl	8003af4 <ESP_Send>
 8004c48:	1e03      	subs	r3, r0, #0
 8004c4a:	d001      	beq.n	8004c50 <CIPSNTPINTV+0x28>
    return true;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004c50:	2300      	movs	r3, #0
  }
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b002      	add	sp, #8
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	080237b8 	.word	0x080237b8

08004c60 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004c60:	b5b0      	push	{r4, r5, r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	0002      	movs	r2, r0
 8004c68:	1dfb      	adds	r3, r7, #7
 8004c6a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e20 <DMA_ProcessBuffer+0x1c0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	200e      	movs	r0, #14
 8004c76:	183b      	adds	r3, r7, r0
 8004c78:	2180      	movs	r1, #128	@ 0x80
 8004c7a:	0049      	lsls	r1, r1, #1
 8004c7c:	1a8a      	subs	r2, r1, r2
 8004c7e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004c80:	230d      	movs	r3, #13
 8004c82:	18fb      	adds	r3, r7, r3
 8004c84:	2203      	movs	r2, #3
 8004c86:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004c88:	183b      	adds	r3, r7, r0
 8004c8a:	881a      	ldrh	r2, [r3, #0]
 8004c8c:	2380      	movs	r3, #128	@ 0x80
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d903      	bls.n	8004c9c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004c94:	183b      	adds	r3, r7, r0
 8004c96:	2280      	movs	r2, #128	@ 0x80
 8004c98:	0052      	lsls	r2, r2, #1
 8004c9a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004c9c:	4b61      	ldr	r3, [pc, #388]	@ (8004e24 <DMA_ProcessBuffer+0x1c4>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	001a      	movs	r2, r3
 8004ca4:	230e      	movs	r3, #14
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d131      	bne.n	8004d12 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004cae:	4b5e      	ldr	r3, [pc, #376]	@ (8004e28 <DMA_ProcessBuffer+0x1c8>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b14      	cmp	r3, #20
 8004cb4:	d91b      	bls.n	8004cee <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004cb6:	4b5c      	ldr	r3, [pc, #368]	@ (8004e28 <DMA_ProcessBuffer+0x1c8>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004cbc:	4b5b      	ldr	r3, [pc, #364]	@ (8004e2c <DMA_ProcessBuffer+0x1cc>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d107      	bne.n	8004cd4 <DMA_ProcessBuffer+0x74>
 8004cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e30 <DMA_ProcessBuffer+0x1d0>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004ccc:	230d      	movs	r3, #13
 8004cce:	18fb      	adds	r3, r7, r3
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004cd4:	4b55      	ldr	r3, [pc, #340]	@ (8004e2c <DMA_ProcessBuffer+0x1cc>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d103      	bne.n	8004ce4 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004cdc:	4b55      	ldr	r3, [pc, #340]	@ (8004e34 <DMA_ProcessBuffer+0x1d4>)
 8004cde:	220b      	movs	r2, #11
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	e016      	b.n	8004d12 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004ce4:	230d      	movs	r3, #13
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	2206      	movs	r2, #6
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	e011      	b.n	8004d12 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004cee:	4b4e      	ldr	r3, [pc, #312]	@ (8004e28 <DMA_ProcessBuffer+0x1c8>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8004e28 <DMA_ProcessBuffer+0x1c8>)
 8004cf8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004cfa:	f009 ff71 	bl	800ebe0 <HAL_GetTick>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	33f5      	adds	r3, #245	@ 0xf5
 8004d02:	33ff      	adds	r3, #255	@ 0xff
 8004d04:	001a      	movs	r2, r3
 8004d06:	4b4c      	ldr	r3, [pc, #304]	@ (8004e38 <DMA_ProcessBuffer+0x1d8>)
 8004d08:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004d0a:	230d      	movs	r3, #13
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	2204      	movs	r2, #4
 8004d10:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004d12:	4b44      	ldr	r3, [pc, #272]	@ (8004e24 <DMA_ProcessBuffer+0x1c4>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	001a      	movs	r2, r3
 8004d1a:	210e      	movs	r1, #14
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d100      	bne.n	8004d26 <DMA_ProcessBuffer+0xc6>
 8004d24:	e075      	b.n	8004e12 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004d26:	4b40      	ldr	r3, [pc, #256]	@ (8004e28 <DMA_ProcessBuffer+0x1c8>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004d2c:	4b43      	ldr	r3, [pc, #268]	@ (8004e3c <DMA_ProcessBuffer+0x1dc>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	4b3c      	ldr	r3, [pc, #240]	@ (8004e24 <DMA_ProcessBuffer+0x1c4>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d109      	bne.n	8004d50 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004d3c:	187b      	adds	r3, r7, r1
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	4b3e      	ldr	r3, [pc, #248]	@ (8004e3c <DMA_ProcessBuffer+0x1dc>)
 8004d44:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004d46:	230d      	movs	r3, #13
 8004d48:	18fb      	adds	r3, r7, r3
 8004d4a:	220a      	movs	r2, #10
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e060      	b.n	8004e12 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004d50:	4b3a      	ldr	r3, [pc, #232]	@ (8004e3c <DMA_ProcessBuffer+0x1dc>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	001a      	movs	r2, r3
 8004d58:	210e      	movs	r1, #14
 8004d5a:	187b      	adds	r3, r7, r1
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d009      	beq.n	8004d76 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004d62:	187b      	adds	r3, r7, r1
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	4b34      	ldr	r3, [pc, #208]	@ (8004e3c <DMA_ProcessBuffer+0x1dc>)
 8004d6a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004d6c:	230d      	movs	r3, #13
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	220a      	movs	r2, #10
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e04d      	b.n	8004e12 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004d76:	4b2b      	ldr	r3, [pc, #172]	@ (8004e24 <DMA_ProcessBuffer+0x1c4>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	001a      	movs	r2, r3
 8004d7e:	210e      	movs	r1, #14
 8004d80:	187b      	adds	r3, r7, r1
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d917      	bls.n	8004db8 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004d88:	4b26      	ldr	r3, [pc, #152]	@ (8004e24 <DMA_ProcessBuffer+0x1c4>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	001a      	movs	r2, r3
 8004d90:	4b2b      	ldr	r3, [pc, #172]	@ (8004e40 <DMA_ProcessBuffer+0x1e0>)
 8004d92:	18d0      	adds	r0, r2, r3
 8004d94:	4b23      	ldr	r3, [pc, #140]	@ (8004e24 <DMA_ProcessBuffer+0x1c4>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	187b      	adds	r3, r7, r1
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	b299      	uxth	r1, r3
 8004da4:	230d      	movs	r3, #13
 8004da6:	18fc      	adds	r4, r7, r3
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	001a      	movs	r2, r3
 8004dae:	f7ff fa89 	bl	80042c4 <ParseBuffer>
 8004db2:	0003      	movs	r3, r0
 8004db4:	7023      	strb	r3, [r4, #0]
 8004db6:	e026      	b.n	8004e06 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004db8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <DMA_ProcessBuffer+0x1c4>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	001a      	movs	r2, r3
 8004dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8004e40 <DMA_ProcessBuffer+0x1e0>)
 8004dc2:	18d0      	adds	r0, r2, r3
 8004dc4:	4b17      	ldr	r3, [pc, #92]	@ (8004e24 <DMA_ProcessBuffer+0x1c4>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	001a      	movs	r2, r3
 8004dcc:	2380      	movs	r3, #128	@ 0x80
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	b299      	uxth	r1, r3
 8004dd4:	250d      	movs	r5, #13
 8004dd6:	197c      	adds	r4, r7, r5
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	001a      	movs	r2, r3
 8004dde:	f7ff fa71 	bl	80042c4 <ParseBuffer>
 8004de2:	0003      	movs	r3, r0
 8004de4:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004de6:	210e      	movs	r1, #14
 8004de8:	187b      	adds	r3, r7, r1
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004df0:	197c      	adds	r4, r7, r5
 8004df2:	1dfb      	adds	r3, r7, #7
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	187b      	adds	r3, r7, r1
 8004df8:	8819      	ldrh	r1, [r3, #0]
 8004dfa:	4b11      	ldr	r3, [pc, #68]	@ (8004e40 <DMA_ProcessBuffer+0x1e0>)
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7ff fa61 	bl	80042c4 <ParseBuffer>
 8004e02:	0003      	movs	r3, r0
 8004e04:	7023      	strb	r3, [r4, #0]
              }
          }
//          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
          OldPos = pos;
 8004e06:	230e      	movs	r3, #14
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <DMA_ProcessBuffer+0x1c4>)
 8004e10:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004e12:	230d      	movs	r3, #13
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	781b      	ldrb	r3, [r3, #0]
}
 8004e18:	0018      	movs	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b004      	add	sp, #16
 8004e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e20:	200024f0 	.word	0x200024f0
 8004e24:	20000b39 	.word	0x20000b39
 8004e28:	20000a28 	.word	0x20000a28
 8004e2c:	20000a2a 	.word	0x20000a2a
 8004e30:	20000000 	.word	0x20000000
 8004e34:	20000028 	.word	0x20000028
 8004e38:	20000a1c 	.word	0x20000a1c
 8004e3c:	20000b3a 	.word	0x20000b3a
 8004e40:	2000044c 	.word	0x2000044c

08004e44 <clearDMABuffer>:

void clearDMABuffer(){
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004e48:	2380      	movs	r3, #128	@ 0x80
 8004e4a:	005a      	lsls	r2, r3, #1
 8004e4c:	4b03      	ldr	r3, [pc, #12]	@ (8004e5c <clearDMABuffer+0x18>)
 8004e4e:	2100      	movs	r1, #0
 8004e50:	0018      	movs	r0, r3
 8004e52:	f01b f91d 	bl	8020090 <memset>
}
 8004e56:	46c0      	nop			@ (mov r8, r8)
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	2000044c 	.word	0x2000044c

08004e60 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	0002      	movs	r2, r0
 8004e68:	1dfb      	adds	r3, r7, #7
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	1dbb      	adds	r3, r7, #6
 8004e6e:	1c0a      	adds	r2, r1, #0
 8004e70:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004e72:	210f      	movs	r1, #15
 8004e74:	187b      	adds	r3, r7, r1
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004e7a:	1dbb      	adds	r3, r7, #6
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d105      	bne.n	8004e8e <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004e82:	187b      	adds	r3, r7, r1
 8004e84:	1dfa      	adds	r2, r7, #7
 8004e86:	7812      	ldrb	r2, [r2, #0]
 8004e88:	4251      	negs	r1, r2
 8004e8a:	414a      	adcs	r2, r1
 8004e8c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004e8e:	1dbb      	adds	r3, r7, #6
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d107      	bne.n	8004ea6 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004e96:	230f      	movs	r3, #15
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	1dfa      	adds	r2, r7, #7
 8004e9c:	7812      	ldrb	r2, [r2, #0]
 8004e9e:	3a02      	subs	r2, #2
 8004ea0:	4251      	negs	r1, r2
 8004ea2:	414a      	adcs	r2, r1
 8004ea4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004ea6:	1dbb      	adds	r3, r7, #6
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d107      	bne.n	8004ebe <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004eae:	230f      	movs	r3, #15
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	1dfa      	adds	r2, r7, #7
 8004eb4:	7812      	ldrb	r2, [r2, #0]
 8004eb6:	3a05      	subs	r2, #5
 8004eb8:	4251      	negs	r1, r2
 8004eba:	414a      	adcs	r2, r1
 8004ebc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004ebe:	1dbb      	adds	r3, r7, #6
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	2b05      	cmp	r3, #5
 8004ec4:	d107      	bne.n	8004ed6 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004ec6:	230f      	movs	r3, #15
 8004ec8:	18fb      	adds	r3, r7, r3
 8004eca:	1dfa      	adds	r2, r7, #7
 8004ecc:	7812      	ldrb	r2, [r2, #0]
 8004ece:	3a0b      	subs	r2, #11
 8004ed0:	4251      	negs	r1, r2
 8004ed2:	414a      	adcs	r2, r1
 8004ed4:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004ed6:	230f      	movs	r3, #15
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	781b      	ldrb	r3, [r3, #0]
}
 8004edc:	0018      	movs	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b004      	add	sp, #16
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	0002      	movs	r2, r0
 8004eec:	1dfb      	adds	r3, r7, #7
 8004eee:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004ef0:	230f      	movs	r3, #15
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004ef8:	1dfb      	adds	r3, r7, #7
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b14      	cmp	r3, #20
 8004efe:	d900      	bls.n	8004f02 <AT_Send+0x1e>
 8004f00:	e18c      	b.n	800521c <AT_Send+0x338>
 8004f02:	009a      	lsls	r2, r3, #2
 8004f04:	4bc9      	ldr	r3, [pc, #804]	@ (800522c <AT_Send+0x348>)
 8004f06:	18d3      	adds	r3, r2, r3
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004f0c:	4bc8      	ldr	r3, [pc, #800]	@ (8005230 <AT_Send+0x34c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	0018      	movs	r0, r3
 8004f12:	f009 f9b9 	bl	800e288 <TimestampIsReached>
 8004f16:	1e03      	subs	r3, r0, #0
 8004f18:	d100      	bne.n	8004f1c <AT_Send+0x38>
 8004f1a:	e17e      	b.n	800521a <AT_Send+0x336>
    ATCommandSend = PollAwake();
 8004f1c:	230f      	movs	r3, #15
 8004f1e:	18fc      	adds	r4, r7, r3
 8004f20:	f7ff fbc0 	bl	80046a4 <PollAwake>
 8004f24:	0003      	movs	r3, r0
 8004f26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f28:	f009 fe5a 	bl	800ebe0 <HAL_GetTick>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	3332      	adds	r3, #50	@ 0x32
 8004f30:	001a      	movs	r2, r3
 8004f32:	4bbf      	ldr	r3, [pc, #764]	@ (8005230 <AT_Send+0x34c>)
 8004f34:	601a      	str	r2, [r3, #0]
  }
  break;
 8004f36:	e170      	b.n	800521a <AT_Send+0x336>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004f38:	4abe      	ldr	r2, [pc, #760]	@ (8005234 <AT_Send+0x350>)
 8004f3a:	4bbf      	ldr	r3, [pc, #764]	@ (8005238 <AT_Send+0x354>)
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	2003      	movs	r0, #3
 8004f40:	f009 f9f8 	bl	800e334 <CreateLine>
    ATCommandSend = RFPower();
 8004f44:	230f      	movs	r3, #15
 8004f46:	18fc      	adds	r4, r7, r3
 8004f48:	f7ff fbc8 	bl	80046dc <RFPower>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f50:	f009 fe46 	bl	800ebe0 <HAL_GetTick>
 8004f54:	0003      	movs	r3, r0
 8004f56:	330a      	adds	r3, #10
 8004f58:	001a      	movs	r2, r3
 8004f5a:	4bb5      	ldr	r3, [pc, #724]	@ (8005230 <AT_Send+0x34c>)
 8004f5c:	601a      	str	r2, [r3, #0]
    break;
 8004f5e:	e15d      	b.n	800521c <AT_Send+0x338>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004f60:	4ab6      	ldr	r2, [pc, #728]	@ (800523c <AT_Send+0x358>)
 8004f62:	4bb5      	ldr	r3, [pc, #724]	@ (8005238 <AT_Send+0x354>)
 8004f64:	0019      	movs	r1, r3
 8004f66:	2003      	movs	r0, #3
 8004f68:	f009 f9e4 	bl	800e334 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004f6c:	230f      	movs	r3, #15
 8004f6e:	18fc      	adds	r4, r7, r3
 8004f70:	f7ff fbd0 	bl	8004714 <CheckRFPower>
 8004f74:	0003      	movs	r3, r0
 8004f76:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f78:	f009 fe32 	bl	800ebe0 <HAL_GetTick>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	330a      	adds	r3, #10
 8004f80:	001a      	movs	r2, r3
 8004f82:	4bab      	ldr	r3, [pc, #684]	@ (8005230 <AT_Send+0x34c>)
 8004f84:	601a      	str	r2, [r3, #0]
    break;
 8004f86:	e149      	b.n	800521c <AT_Send+0x338>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004f88:	4aad      	ldr	r2, [pc, #692]	@ (8005240 <AT_Send+0x35c>)
 8004f8a:	4bab      	ldr	r3, [pc, #684]	@ (8005238 <AT_Send+0x354>)
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	2003      	movs	r0, #3
 8004f90:	f009 f9d0 	bl	800e334 <CreateLine>
    ATCommandSend = ATRestore();
 8004f94:	230f      	movs	r3, #15
 8004f96:	18fc      	adds	r4, r7, r3
 8004f98:	f7ff fbd8 	bl	800474c <ATRestore>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004fa0:	f009 fe1e 	bl	800ebe0 <HAL_GetTick>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	3332      	adds	r3, #50	@ 0x32
 8004fa8:	001a      	movs	r2, r3
 8004faa:	4ba1      	ldr	r3, [pc, #644]	@ (8005230 <AT_Send+0x34c>)
 8004fac:	601a      	str	r2, [r3, #0]
    break;
 8004fae:	e135      	b.n	800521c <AT_Send+0x338>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004fb0:	4aa4      	ldr	r2, [pc, #656]	@ (8005244 <AT_Send+0x360>)
 8004fb2:	4ba1      	ldr	r3, [pc, #644]	@ (8005238 <AT_Send+0x354>)
 8004fb4:	0019      	movs	r1, r3
 8004fb6:	2003      	movs	r0, #3
 8004fb8:	f009 f9bc 	bl	800e334 <CreateLine>
    ATCommandSend = CWINIT();
 8004fbc:	230f      	movs	r3, #15
 8004fbe:	18fc      	adds	r4, r7, r3
 8004fc0:	f7ff fbe0 	bl	8004784 <CWINIT>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004fc8:	f009 fe0a 	bl	800ebe0 <HAL_GetTick>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	33f5      	adds	r3, #245	@ 0xf5
 8004fd0:	33ff      	adds	r3, #255	@ 0xff
 8004fd2:	001a      	movs	r2, r3
 8004fd4:	4b96      	ldr	r3, [pc, #600]	@ (8005230 <AT_Send+0x34c>)
 8004fd6:	601a      	str	r2, [r3, #0]
    break;
 8004fd8:	e120      	b.n	800521c <AT_Send+0x338>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004fda:	4a9b      	ldr	r2, [pc, #620]	@ (8005248 <AT_Send+0x364>)
 8004fdc:	4b96      	ldr	r3, [pc, #600]	@ (8005238 <AT_Send+0x354>)
 8004fde:	0019      	movs	r1, r3
 8004fe0:	2003      	movs	r0, #3
 8004fe2:	f009 f9a7 	bl	800e334 <CreateLine>
    ATCommandSend = CWSTATE();
 8004fe6:	230f      	movs	r3, #15
 8004fe8:	18fc      	adds	r4, r7, r3
 8004fea:	f7ff fcd9 	bl	80049a0 <CWSTATE>
 8004fee:	0003      	movs	r3, r0
 8004ff0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004ff2:	f009 fdf5 	bl	800ebe0 <HAL_GetTick>
 8004ff6:	0003      	movs	r3, r0
 8004ff8:	33f5      	adds	r3, #245	@ 0xf5
 8004ffa:	33ff      	adds	r3, #255	@ 0xff
 8004ffc:	001a      	movs	r2, r3
 8004ffe:	4b8c      	ldr	r3, [pc, #560]	@ (8005230 <AT_Send+0x34c>)
 8005000:	601a      	str	r2, [r3, #0]
    break;
 8005002:	e10b      	b.n	800521c <AT_Send+0x338>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8005004:	4a91      	ldr	r2, [pc, #580]	@ (800524c <AT_Send+0x368>)
 8005006:	4b8c      	ldr	r3, [pc, #560]	@ (8005238 <AT_Send+0x354>)
 8005008:	0019      	movs	r1, r3
 800500a:	2003      	movs	r0, #3
 800500c:	f009 f992 	bl	800e334 <CreateLine>
    ATCommandSend = CWMODE1();
 8005010:	230f      	movs	r3, #15
 8005012:	18fc      	adds	r4, r7, r3
 8005014:	f7ff fbd2 	bl	80047bc <CWMODE1>
 8005018:	0003      	movs	r3, r0
 800501a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800501c:	f009 fde0 	bl	800ebe0 <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	330a      	adds	r3, #10
 8005024:	001a      	movs	r2, r3
 8005026:	4b82      	ldr	r3, [pc, #520]	@ (8005230 <AT_Send+0x34c>)
 8005028:	601a      	str	r2, [r3, #0]
    break;
 800502a:	e0f7      	b.n	800521c <AT_Send+0x338>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 800502c:	4a87      	ldr	r2, [pc, #540]	@ (800524c <AT_Send+0x368>)
 800502e:	4b82      	ldr	r3, [pc, #520]	@ (8005238 <AT_Send+0x354>)
 8005030:	0019      	movs	r1, r3
 8005032:	2003      	movs	r0, #3
 8005034:	f009 f97e 	bl	800e334 <CreateLine>
    ATCommandSend = CWMODE2();
 8005038:	230f      	movs	r3, #15
 800503a:	18fc      	adds	r4, r7, r3
 800503c:	f7ff fbda 	bl	80047f4 <CWMODE2>
 8005040:	0003      	movs	r3, r0
 8005042:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005044:	f009 fdcc 	bl	800ebe0 <HAL_GetTick>
 8005048:	0003      	movs	r3, r0
 800504a:	330a      	adds	r3, #10
 800504c:	001a      	movs	r2, r3
 800504e:	4b78      	ldr	r3, [pc, #480]	@ (8005230 <AT_Send+0x34c>)
 8005050:	601a      	str	r2, [r3, #0]
    break;
 8005052:	e0e3      	b.n	800521c <AT_Send+0x338>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005054:	4a7e      	ldr	r2, [pc, #504]	@ (8005250 <AT_Send+0x36c>)
 8005056:	4b78      	ldr	r3, [pc, #480]	@ (8005238 <AT_Send+0x354>)
 8005058:	0019      	movs	r1, r3
 800505a:	2003      	movs	r0, #3
 800505c:	f009 f96a 	bl	800e334 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8005060:	230f      	movs	r3, #15
 8005062:	18fc      	adds	r4, r7, r3
 8005064:	f7ff fbe2 	bl	800482c <CWAUTOCONN>
 8005068:	0003      	movs	r3, r0
 800506a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800506c:	f009 fdb8 	bl	800ebe0 <HAL_GetTick>
 8005070:	0003      	movs	r3, r0
 8005072:	330a      	adds	r3, #10
 8005074:	001a      	movs	r2, r3
 8005076:	4b6e      	ldr	r3, [pc, #440]	@ (8005230 <AT_Send+0x34c>)
 8005078:	601a      	str	r2, [r3, #0]
    break;
 800507a:	e0cf      	b.n	800521c <AT_Send+0x338>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800507c:	4a75      	ldr	r2, [pc, #468]	@ (8005254 <AT_Send+0x370>)
 800507e:	4b6e      	ldr	r3, [pc, #440]	@ (8005238 <AT_Send+0x354>)
 8005080:	0019      	movs	r1, r3
 8005082:	2003      	movs	r0, #3
 8005084:	f009 f956 	bl	800e334 <CreateLine>
    ATCommandSend = CWJAP();
 8005088:	230f      	movs	r3, #15
 800508a:	18fc      	adds	r4, r7, r3
 800508c:	f7ff fbea 	bl	8004864 <CWJAP>
 8005090:	0003      	movs	r3, r0
 8005092:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005094:	f009 fda4 	bl	800ebe0 <HAL_GetTick>
 8005098:	0003      	movs	r3, r0
 800509a:	3332      	adds	r3, #50	@ 0x32
 800509c:	001a      	movs	r2, r3
 800509e:	4b64      	ldr	r3, [pc, #400]	@ (8005230 <AT_Send+0x34c>)
 80050a0:	601a      	str	r2, [r3, #0]
    break;
 80050a2:	e0bb      	b.n	800521c <AT_Send+0x338>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80050a4:	4a6c      	ldr	r2, [pc, #432]	@ (8005258 <AT_Send+0x374>)
 80050a6:	4b64      	ldr	r3, [pc, #400]	@ (8005238 <AT_Send+0x354>)
 80050a8:	0019      	movs	r1, r3
 80050aa:	2003      	movs	r0, #3
 80050ac:	f009 f942 	bl	800e334 <CreateLine>
    ATCommandSend = CWMODE3();
 80050b0:	230f      	movs	r3, #15
 80050b2:	18fc      	adds	r4, r7, r3
 80050b4:	f7ff fc58 	bl	8004968 <CWMODE3>
 80050b8:	0003      	movs	r3, r0
 80050ba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050bc:	f009 fd90 	bl	800ebe0 <HAL_GetTick>
 80050c0:	0003      	movs	r3, r0
 80050c2:	330a      	adds	r3, #10
 80050c4:	001a      	movs	r2, r3
 80050c6:	4b5a      	ldr	r3, [pc, #360]	@ (8005230 <AT_Send+0x34c>)
 80050c8:	601a      	str	r2, [r3, #0]
    break;
 80050ca:	e0a7      	b.n	800521c <AT_Send+0x338>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80050cc:	4a63      	ldr	r2, [pc, #396]	@ (800525c <AT_Send+0x378>)
 80050ce:	4b5a      	ldr	r3, [pc, #360]	@ (8005238 <AT_Send+0x354>)
 80050d0:	0019      	movs	r1, r3
 80050d2:	2003      	movs	r0, #3
 80050d4:	f009 f92e 	bl	800e334 <CreateLine>
    ATCommandSend = CWSAP();
 80050d8:	230f      	movs	r3, #15
 80050da:	18fc      	adds	r4, r7, r3
 80050dc:	f7ff fc7c 	bl	80049d8 <CWSAP>
 80050e0:	0003      	movs	r3, r0
 80050e2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050e4:	f009 fd7c 	bl	800ebe0 <HAL_GetTick>
 80050e8:	0003      	movs	r3, r0
 80050ea:	330a      	adds	r3, #10
 80050ec:	001a      	movs	r2, r3
 80050ee:	4b50      	ldr	r3, [pc, #320]	@ (8005230 <AT_Send+0x34c>)
 80050f0:	601a      	str	r2, [r3, #0]
    break;
 80050f2:	e093      	b.n	800521c <AT_Send+0x338>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 80050f4:	230f      	movs	r3, #15
 80050f6:	18fc      	adds	r4, r7, r3
 80050f8:	f7ff fc8a 	bl	8004a10 <CIPMUX>
 80050fc:	0003      	movs	r3, r0
 80050fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005100:	f009 fd6e 	bl	800ebe0 <HAL_GetTick>
 8005104:	0003      	movs	r3, r0
 8005106:	330a      	adds	r3, #10
 8005108:	001a      	movs	r2, r3
 800510a:	4b49      	ldr	r3, [pc, #292]	@ (8005230 <AT_Send+0x34c>)
 800510c:	601a      	str	r2, [r3, #0]
    break;
 800510e:	e085      	b.n	800521c <AT_Send+0x338>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8005110:	230f      	movs	r3, #15
 8005112:	18fc      	adds	r4, r7, r3
 8005114:	f7ff fc98 	bl	8004a48 <WEBSERVER>
 8005118:	0003      	movs	r3, r0
 800511a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800511c:	f009 fd60 	bl	800ebe0 <HAL_GetTick>
 8005120:	0003      	movs	r3, r0
 8005122:	330a      	adds	r3, #10
 8005124:	001a      	movs	r2, r3
 8005126:	4b42      	ldr	r3, [pc, #264]	@ (8005230 <AT_Send+0x34c>)
 8005128:	601a      	str	r2, [r3, #0]
    break;
 800512a:	e077      	b.n	800521c <AT_Send+0x338>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 800512c:	230f      	movs	r3, #15
 800512e:	18fc      	adds	r4, r7, r3
 8005130:	f7ff fca6 	bl	8004a80 <HTTPCPOST>
 8005134:	0003      	movs	r3, r0
 8005136:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005138:	f009 fd52 	bl	800ebe0 <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	33f5      	adds	r3, #245	@ 0xf5
 8005140:	33ff      	adds	r3, #255	@ 0xff
 8005142:	001a      	movs	r2, r3
 8005144:	4b3a      	ldr	r3, [pc, #232]	@ (8005230 <AT_Send+0x34c>)
 8005146:	601a      	str	r2, [r3, #0]
    break;
 8005148:	e068      	b.n	800521c <AT_Send+0x338>

  case AT_SENDDATA:
    Debug("Send the data");
 800514a:	4a45      	ldr	r2, [pc, #276]	@ (8005260 <AT_Send+0x37c>)
 800514c:	4b3a      	ldr	r3, [pc, #232]	@ (8005238 <AT_Send+0x354>)
 800514e:	0019      	movs	r1, r3
 8005150:	2003      	movs	r0, #3
 8005152:	f009 f8ef 	bl	800e334 <CreateLine>
    ATCommandSend = SENDDATA();
 8005156:	230f      	movs	r3, #15
 8005158:	18fc      	adds	r4, r7, r3
 800515a:	f7ff fcf1 	bl	8004b40 <SENDDATA>
 800515e:	0003      	movs	r3, r0
 8005160:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005162:	f009 fd3d 	bl	800ebe0 <HAL_GetTick>
 8005166:	0003      	movs	r3, r0
 8005168:	33f5      	adds	r3, #245	@ 0xf5
 800516a:	33ff      	adds	r3, #255	@ 0xff
 800516c:	001a      	movs	r2, r3
 800516e:	4b30      	ldr	r3, [pc, #192]	@ (8005230 <AT_Send+0x34c>)
 8005170:	601a      	str	r2, [r3, #0]
    break;
 8005172:	e053      	b.n	800521c <AT_Send+0x338>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005174:	4a3b      	ldr	r2, [pc, #236]	@ (8005264 <AT_Send+0x380>)
 8005176:	4b30      	ldr	r3, [pc, #192]	@ (8005238 <AT_Send+0x354>)
 8005178:	0019      	movs	r1, r3
 800517a:	2003      	movs	r0, #3
 800517c:	f009 f8da 	bl	800e334 <CreateLine>
    ATCommandSend = SLEEP();
 8005180:	230f      	movs	r3, #15
 8005182:	18fc      	adds	r4, r7, r3
 8005184:	f7ff fcf8 	bl	8004b78 <SLEEP>
 8005188:	0003      	movs	r3, r0
 800518a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800518c:	f009 fd28 	bl	800ebe0 <HAL_GetTick>
 8005190:	0003      	movs	r3, r0
 8005192:	330a      	adds	r3, #10
 8005194:	001a      	movs	r2, r3
 8005196:	4b26      	ldr	r3, [pc, #152]	@ (8005230 <AT_Send+0x34c>)
 8005198:	601a      	str	r2, [r3, #0]
    break;
 800519a:	e03f      	b.n	800521c <AT_Send+0x338>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800519c:	4a32      	ldr	r2, [pc, #200]	@ (8005268 <AT_Send+0x384>)
 800519e:	4b26      	ldr	r3, [pc, #152]	@ (8005238 <AT_Send+0x354>)
 80051a0:	0019      	movs	r1, r3
 80051a2:	2003      	movs	r0, #3
 80051a4:	f009 f8c6 	bl	800e334 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 80051a8:	230f      	movs	r3, #15
 80051aa:	18fc      	adds	r4, r7, r3
 80051ac:	f7ff fd00 	bl	8004bb0 <CIPSNTPCFG>
 80051b0:	0003      	movs	r3, r0
 80051b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051b4:	f009 fd14 	bl	800ebe0 <HAL_GetTick>
 80051b8:	0003      	movs	r3, r0
 80051ba:	330a      	adds	r3, #10
 80051bc:	001a      	movs	r2, r3
 80051be:	4b1c      	ldr	r3, [pc, #112]	@ (8005230 <AT_Send+0x34c>)
 80051c0:	601a      	str	r2, [r3, #0]
    break;
 80051c2:	e02b      	b.n	800521c <AT_Send+0x338>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80051c4:	4a29      	ldr	r2, [pc, #164]	@ (800526c <AT_Send+0x388>)
 80051c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005238 <AT_Send+0x354>)
 80051c8:	0019      	movs	r1, r3
 80051ca:	2003      	movs	r0, #3
 80051cc:	f009 f8b2 	bl	800e334 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80051d0:	230f      	movs	r3, #15
 80051d2:	18fc      	adds	r4, r7, r3
 80051d4:	f7ff fd0c 	bl	8004bf0 <CIPSNTPTIME>
 80051d8:	0003      	movs	r3, r0
 80051da:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051dc:	f009 fd00 	bl	800ebe0 <HAL_GetTick>
 80051e0:	0003      	movs	r3, r0
 80051e2:	33f5      	adds	r3, #245	@ 0xf5
 80051e4:	33ff      	adds	r3, #255	@ 0xff
 80051e6:	001a      	movs	r2, r3
 80051e8:	4b11      	ldr	r3, [pc, #68]	@ (8005230 <AT_Send+0x34c>)
 80051ea:	601a      	str	r2, [r3, #0]
    break;
 80051ec:	e016      	b.n	800521c <AT_Send+0x338>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80051ee:	4a20      	ldr	r2, [pc, #128]	@ (8005270 <AT_Send+0x38c>)
 80051f0:	4b11      	ldr	r3, [pc, #68]	@ (8005238 <AT_Send+0x354>)
 80051f2:	0019      	movs	r1, r3
 80051f4:	2003      	movs	r0, #3
 80051f6:	f009 f89d 	bl	800e334 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80051fa:	230f      	movs	r3, #15
 80051fc:	18fc      	adds	r4, r7, r3
 80051fe:	f7ff fd13 	bl	8004c28 <CIPSNTPINTV>
 8005202:	0003      	movs	r3, r0
 8005204:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005206:	f009 fceb 	bl	800ebe0 <HAL_GetTick>
 800520a:	0003      	movs	r3, r0
 800520c:	330a      	adds	r3, #10
 800520e:	001a      	movs	r2, r3
 8005210:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <AT_Send+0x34c>)
 8005212:	601a      	str	r2, [r3, #0]
    break;
 8005214:	e002      	b.n	800521c <AT_Send+0x338>
  case AT_END:
    break;
 8005216:	46c0      	nop			@ (mov r8, r8)
 8005218:	e000      	b.n	800521c <AT_Send+0x338>
  break;
 800521a:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800521c:	230f      	movs	r3, #15
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	781b      	ldrb	r3, [r3, #0]
}
 8005222:	0018      	movs	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	b005      	add	sp, #20
 8005228:	bd90      	pop	{r4, r7, pc}
 800522a:	46c0      	nop			@ (mov r8, r8)
 800522c:	080251e4 	.word	0x080251e4
 8005230:	20000a1c 	.word	0x20000a1c
 8005234:	080237d0 	.word	0x080237d0
 8005238:	08022ff8 	.word	0x08022ff8
 800523c:	080237e4 	.word	0x080237e4
 8005240:	080237f8 	.word	0x080237f8
 8005244:	08023808 	.word	0x08023808
 8005248:	0802381c 	.word	0x0802381c
 800524c:	08023834 	.word	0x08023834
 8005250:	0802384c 	.word	0x0802384c
 8005254:	08023864 	.word	0x08023864
 8005258:	08023878 	.word	0x08023878
 800525c:	08023894 	.word	0x08023894
 8005260:	080238b0 	.word	0x080238b0
 8005264:	080238c0 	.word	0x080238c0
 8005268:	080238e4 	.word	0x080238e4
 800526c:	080238f8 	.word	0x080238f8
 8005270:	08023910 	.word	0x08023910

08005274 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800527a:	1dfb      	adds	r3, r7, #7
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005280:	4b7a      	ldr	r3, [pc, #488]	@ (800546c <ESP_WakeTest+0x1f8>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b05      	cmp	r3, #5
 8005286:	d900      	bls.n	800528a <ESP_WakeTest+0x16>
 8005288:	e0d6      	b.n	8005438 <ESP_WakeTest+0x1c4>
 800528a:	009a      	lsls	r2, r3, #2
 800528c:	4b78      	ldr	r3, [pc, #480]	@ (8005470 <ESP_WakeTest+0x1fc>)
 800528e:	18d3      	adds	r3, r2, r3
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
//      Debug("TestState: ESP_TEST_INIT");
      if(!EspTurnedOn){
 8005294:	4b77      	ldr	r3, [pc, #476]	@ (8005474 <ESP_WakeTest+0x200>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2201      	movs	r2, #1
 800529a:	4053      	eors	r3, r2
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d036      	beq.n	8005310 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052a2:	2380      	movs	r3, #128	@ 0x80
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	4874      	ldr	r0, [pc, #464]	@ (8005478 <ESP_WakeTest+0x204>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	0019      	movs	r1, r3
 80052ac:	f00a ff29 	bl	8010102 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80052b0:	2032      	movs	r0, #50	@ 0x32
 80052b2:	f009 fc9f 	bl	800ebf4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	486f      	ldr	r0, [pc, #444]	@ (8005478 <ESP_WakeTest+0x204>)
 80052bc:	2201      	movs	r2, #1
 80052be:	0019      	movs	r1, r3
 80052c0:	f00a ff1f 	bl	8010102 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052c4:	200a      	movs	r0, #10
 80052c6:	f009 fc95 	bl	800ebf4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052ca:	4b6c      	ldr	r3, [pc, #432]	@ (800547c <ESP_WakeTest+0x208>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	2101      	movs	r1, #1
 80052d0:	0018      	movs	r0, r3
 80052d2:	f00a ff16 	bl	8010102 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052d6:	200a      	movs	r0, #10
 80052d8:	f009 fc8c 	bl	800ebf4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052dc:	4b67      	ldr	r3, [pc, #412]	@ (800547c <ESP_WakeTest+0x208>)
 80052de:	2201      	movs	r2, #1
 80052e0:	2102      	movs	r1, #2
 80052e2:	0018      	movs	r0, r3
 80052e4:	f00a ff0d 	bl	8010102 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052e8:	200a      	movs	r0, #10
 80052ea:	f009 fc83 	bl	800ebf4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052ee:	4b63      	ldr	r3, [pc, #396]	@ (800547c <ESP_WakeTest+0x208>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	2101      	movs	r1, #1
 80052f4:	0018      	movs	r0, r3
 80052f6:	f00a ff04 	bl	8010102 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80052fa:	f009 fc71 	bl	800ebe0 <HAL_GetTick>
 80052fe:	0003      	movs	r3, r0
 8005300:	22af      	movs	r2, #175	@ 0xaf
 8005302:	0092      	lsls	r2, r2, #2
 8005304:	189a      	adds	r2, r3, r2
 8005306:	4b5e      	ldr	r3, [pc, #376]	@ (8005480 <ESP_WakeTest+0x20c>)
 8005308:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800530a:	4b5a      	ldr	r3, [pc, #360]	@ (8005474 <ESP_WakeTest+0x200>)
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005310:	2380      	movs	r3, #128	@ 0x80
 8005312:	005a      	lsls	r2, r3, #1
 8005314:	4b5b      	ldr	r3, [pc, #364]	@ (8005484 <ESP_WakeTest+0x210>)
 8005316:	0011      	movs	r1, r2
 8005318:	0018      	movs	r0, r3
 800531a:	f7fe fc1f 	bl	8003b5c <ESP_Receive>
 800531e:	1e03      	subs	r3, r0, #0
 8005320:	d100      	bne.n	8005324 <ESP_WakeTest+0xb0>
 8005322:	e099      	b.n	8005458 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8005324:	4b51      	ldr	r3, [pc, #324]	@ (800546c <ESP_WakeTest+0x1f8>)
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
      }
      break;
 800532a:	e095      	b.n	8005458 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
//      Debug("TestState: ESP_TEST_SEND");
      if(TimestampIsReached(ESPTimeStamp)){
 800532c:	4b54      	ldr	r3, [pc, #336]	@ (8005480 <ESP_WakeTest+0x20c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0018      	movs	r0, r3
 8005332:	f008 ffa9 	bl	800e288 <TimestampIsReached>
 8005336:	1e03      	subs	r3, r0, #0
 8005338:	d100      	bne.n	800533c <ESP_WakeTest+0xc8>
 800533a:	e08f      	b.n	800545c <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 800533c:	4b52      	ldr	r3, [pc, #328]	@ (8005488 <ESP_WakeTest+0x214>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	1dfc      	adds	r4, r7, #7
 8005342:	0018      	movs	r0, r3
 8005344:	f7ff fdce 	bl	8004ee4 <AT_Send>
 8005348:	0003      	movs	r3, r0
 800534a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800534c:	1dfb      	adds	r3, r7, #7
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d100      	bne.n	8005356 <ESP_WakeTest+0xe2>
 8005354:	e082      	b.n	800545c <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 8005356:	4b45      	ldr	r3, [pc, #276]	@ (800546c <ESP_WakeTest+0x1f8>)
 8005358:	2202      	movs	r2, #2
 800535a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800535c:	e07e      	b.n	800545c <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
//      Debug("TestState: ESP_TEST_RECEIVE");
      if(TimestampIsReached(ESPTimeStamp)){
 800535e:	4b48      	ldr	r3, [pc, #288]	@ (8005480 <ESP_WakeTest+0x20c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	0018      	movs	r0, r3
 8005364:	f008 ff90 	bl	800e288 <TimestampIsReached>
 8005368:	1e03      	subs	r3, r0, #0
 800536a:	d100      	bne.n	800536e <ESP_WakeTest+0xfa>
 800536c:	e078      	b.n	8005460 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800536e:	4b47      	ldr	r3, [pc, #284]	@ (800548c <ESP_WakeTest+0x218>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	0018      	movs	r0, r3
 8005374:	f7ff fc74 	bl	8004c60 <DMA_ProcessBuffer>
 8005378:	0003      	movs	r3, r0
 800537a:	001a      	movs	r2, r3
 800537c:	4b44      	ldr	r3, [pc, #272]	@ (8005490 <ESP_WakeTest+0x21c>)
 800537e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005380:	4b43      	ldr	r3, [pc, #268]	@ (8005490 <ESP_WakeTest+0x21c>)
 8005382:	781a      	ldrb	r2, [r3, #0]
 8005384:	4b41      	ldr	r3, [pc, #260]	@ (800548c <ESP_WakeTest+0x218>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	1dbc      	adds	r4, r7, #6
 800538a:	0019      	movs	r1, r3
 800538c:	0010      	movs	r0, r2
 800538e:	f7ff fd67 	bl	8004e60 <ATCompare>
 8005392:	0003      	movs	r3, r0
 8005394:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005396:	4b3e      	ldr	r3, [pc, #248]	@ (8005490 <ESP_WakeTest+0x21c>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d102      	bne.n	80053a4 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800539e:	4b33      	ldr	r3, [pc, #204]	@ (800546c <ESP_WakeTest+0x1f8>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80053a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005490 <ESP_WakeTest+0x21c>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b07      	cmp	r3, #7
 80053aa:	d104      	bne.n	80053b6 <ESP_WakeTest+0x142>
          StartProg();
 80053ac:	f7fe ff58 	bl	8004260 <StartProg>
          TestState = ESP_TEST_BOOT;
 80053b0:	4b2e      	ldr	r3, [pc, #184]	@ (800546c <ESP_WakeTest+0x1f8>)
 80053b2:	2205      	movs	r2, #5
 80053b4:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80053b6:	4b36      	ldr	r3, [pc, #216]	@ (8005490 <ESP_WakeTest+0x21c>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d109      	bne.n	80053d2 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80053be:	f009 fc0f 	bl	800ebe0 <HAL_GetTick>
 80053c2:	0003      	movs	r3, r0
 80053c4:	3332      	adds	r3, #50	@ 0x32
 80053c6:	001a      	movs	r2, r3
 80053c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005480 <ESP_WakeTest+0x20c>)
 80053ca:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80053cc:	4b27      	ldr	r3, [pc, #156]	@ (800546c <ESP_WakeTest+0x1f8>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80053d2:	1dbb      	adds	r3, r7, #6
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d042      	beq.n	8005460 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 80053da:	4b24      	ldr	r3, [pc, #144]	@ (800546c <ESP_WakeTest+0x1f8>)
 80053dc:	2203      	movs	r2, #3
 80053de:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80053e0:	e03e      	b.n	8005460 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
//      Debug("TestState: ESP_TEST_VALIDATE");
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80053e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005494 <ESP_WakeTest+0x220>)
 80053e4:	22fa      	movs	r2, #250	@ 0xfa
 80053e6:	0112      	lsls	r2, r2, #4
 80053e8:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 80053ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005494 <ESP_WakeTest+0x220>)
 80053ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005498 <ESP_WakeTest+0x224>)
 80053ee:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80053f0:	4b28      	ldr	r3, [pc, #160]	@ (8005494 <ESP_WakeTest+0x220>)
 80053f2:	22fa      	movs	r2, #250	@ 0xfa
 80053f4:	0112      	lsls	r2, r2, #4
 80053f6:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80053f8:	4b1c      	ldr	r3, [pc, #112]	@ (800546c <ESP_WakeTest+0x1f8>)
 80053fa:	2204      	movs	r2, #4
 80053fc:	701a      	strb	r2, [r3, #0]

      break;
 80053fe:	e030      	b.n	8005462 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
//      Debug("TestState: ESP_TEST_DEINIT");
      testRound = false;
 8005400:	4b26      	ldr	r3, [pc, #152]	@ (800549c <ESP_WakeTest+0x228>)
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005406:	4b1b      	ldr	r3, [pc, #108]	@ (8005474 <ESP_WakeTest+0x200>)
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800540c:	4b1b      	ldr	r3, [pc, #108]	@ (800547c <ESP_WakeTest+0x208>)
 800540e:	2200      	movs	r2, #0
 8005410:	2101      	movs	r1, #1
 8005412:	0018      	movs	r0, r3
 8005414:	f00a fe75 	bl	8010102 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005418:	2380      	movs	r3, #128	@ 0x80
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	4816      	ldr	r0, [pc, #88]	@ (8005478 <ESP_WakeTest+0x204>)
 800541e:	2200      	movs	r2, #0
 8005420:	0019      	movs	r1, r3
 8005422:	f00a fe6e 	bl	8010102 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005426:	4b15      	ldr	r3, [pc, #84]	@ (800547c <ESP_WakeTest+0x208>)
 8005428:	2200      	movs	r2, #0
 800542a:	2102      	movs	r1, #2
 800542c:	0018      	movs	r0, r3
 800542e:	f00a fe68 	bl	8010102 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8005432:	f002 ffd1 	bl	80083d8 <SetESPMeasurementDone>
      break;
 8005436:	e014      	b.n	8005462 <ESP_WakeTest+0x1ee>

    default:
//      Debug("TestState: ESP_TEST_INIT");
      TestState = ESP_TEST_INIT;
 8005438:	4b0c      	ldr	r3, [pc, #48]	@ (800546c <ESP_WakeTest+0x1f8>)
 800543a:	2200      	movs	r2, #0
 800543c:	701a      	strb	r2, [r3, #0]
      break;
 800543e:	e010      	b.n	8005462 <ESP_WakeTest+0x1ee>

    case ESP_TEST_BOOT:
//      Debug("TestState: ESP_TEST_BOOT");
      TIM3 -> CCR1 = 4000;
 8005440:	4b14      	ldr	r3, [pc, #80]	@ (8005494 <ESP_WakeTest+0x220>)
 8005442:	22fa      	movs	r2, #250	@ 0xfa
 8005444:	0112      	lsls	r2, r2, #4
 8005446:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8005448:	4b12      	ldr	r3, [pc, #72]	@ (8005494 <ESP_WakeTest+0x220>)
 800544a:	22fa      	movs	r2, #250	@ 0xfa
 800544c:	0112      	lsls	r2, r2, #4
 800544e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8005450:	4b10      	ldr	r3, [pc, #64]	@ (8005494 <ESP_WakeTest+0x220>)
 8005452:	2200      	movs	r2, #0
 8005454:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8005456:	e004      	b.n	8005462 <ESP_WakeTest+0x1ee>
      break;
 8005458:	46c0      	nop			@ (mov r8, r8)
 800545a:	e002      	b.n	8005462 <ESP_WakeTest+0x1ee>
      break;
 800545c:	46c0      	nop			@ (mov r8, r8)
 800545e:	e000      	b.n	8005462 <ESP_WakeTest+0x1ee>
      break;
 8005460:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	b003      	add	sp, #12
 8005468:	bd90      	pop	{r4, r7, pc}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	20000a2c 	.word	0x20000a2c
 8005470:	08025238 	.word	0x08025238
 8005474:	2000054c 	.word	0x2000054c
 8005478:	50000800 	.word	0x50000800
 800547c:	50001c00 	.word	0x50001c00
 8005480:	20000a1c 	.word	0x20000a1c
 8005484:	2000044c 	.word	0x2000044c
 8005488:	20000a2a 	.word	0x20000a2a
 800548c:	20000a29 	.word	0x20000a29
 8005490:	20000029 	.word	0x20000029
 8005494:	40000400 	.word	0x40000400
 8005498:	00000bb8 	.word	0x00000bb8
 800549c:	20000000 	.word	0x20000000

080054a0 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80054a0:	b5b0      	push	{r4, r5, r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80054a6:	1dfb      	adds	r3, r7, #7
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80054ac:	4be2      	ldr	r3, [pc, #904]	@ (8005838 <ESP_Upkeep+0x398>)
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	4be2      	ldr	r3, [pc, #904]	@ (800583c <ESP_Upkeep+0x39c>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d024      	beq.n	8005502 <ESP_Upkeep+0x62>
 80054b8:	f008 ffb6 	bl	800e428 <GetVerboseLevel>
 80054bc:	0003      	movs	r3, r0
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d11f      	bne.n	8005502 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80054c2:	4bdd      	ldr	r3, [pc, #884]	@ (8005838 <ESP_Upkeep+0x398>)
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	4bdd      	ldr	r3, [pc, #884]	@ (800583c <ESP_Upkeep+0x39c>)
 80054c8:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80054ca:	4bdc      	ldr	r3, [pc, #880]	@ (800583c <ESP_Upkeep+0x39c>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d103      	bne.n	80054da <ESP_Upkeep+0x3a>
 80054d2:	4bdb      	ldr	r3, [pc, #876]	@ (8005840 <ESP_Upkeep+0x3a0>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b0e      	cmp	r3, #14
 80054d8:	d013      	beq.n	8005502 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80054da:	4bd8      	ldr	r3, [pc, #864]	@ (800583c <ESP_Upkeep+0x39c>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	001d      	movs	r5, r3
 80054e0:	4bd7      	ldr	r3, [pc, #860]	@ (8005840 <ESP_Upkeep+0x3a0>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	0018      	movs	r0, r3
 80054e6:	4bd7      	ldr	r3, [pc, #860]	@ (8005844 <ESP_Upkeep+0x3a4>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	001c      	movs	r4, r3
 80054ec:	4bd6      	ldr	r3, [pc, #856]	@ (8005848 <ESP_Upkeep+0x3a8>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	4ad6      	ldr	r2, [pc, #856]	@ (800584c <ESP_Upkeep+0x3ac>)
 80054f2:	49d7      	ldr	r1, [pc, #860]	@ (8005850 <ESP_Upkeep+0x3b0>)
 80054f4:	9302      	str	r3, [sp, #8]
 80054f6:	9401      	str	r4, [sp, #4]
 80054f8:	9000      	str	r0, [sp, #0]
 80054fa:	002b      	movs	r3, r5
 80054fc:	2003      	movs	r0, #3
 80054fe:	f008 ff19 	bl	800e334 <CreateLine>
    }
  }
  switch (EspState) {
 8005502:	4bcd      	ldr	r3, [pc, #820]	@ (8005838 <ESP_Upkeep+0x398>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b0f      	cmp	r3, #15
 8005508:	d901      	bls.n	800550e <ESP_Upkeep+0x6e>
 800550a:	f000 fc04 	bl	8005d16 <ESP_Upkeep+0x876>
 800550e:	009a      	lsls	r2, r3, #2
 8005510:	4bd0      	ldr	r3, [pc, #832]	@ (8005854 <ESP_Upkeep+0x3b4>)
 8005512:	18d3      	adds	r3, r2, r3
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005518:	4bc7      	ldr	r3, [pc, #796]	@ (8005838 <ESP_Upkeep+0x398>)
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
      break;
 800551e:	f000 fc13 	bl	8005d48 <ESP_Upkeep+0x8a8>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8005522:	4bcd      	ldr	r3, [pc, #820]	@ (8005858 <ESP_Upkeep+0x3b8>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2201      	movs	r2, #1
 8005528:	4053      	eors	r3, r2
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d036      	beq.n	800559e <ESP_Upkeep+0xfe>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005530:	2380      	movs	r3, #128	@ 0x80
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	48c9      	ldr	r0, [pc, #804]	@ (800585c <ESP_Upkeep+0x3bc>)
 8005536:	2200      	movs	r2, #0
 8005538:	0019      	movs	r1, r3
 800553a:	f00a fde2 	bl	8010102 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800553e:	2001      	movs	r0, #1
 8005540:	f009 fb58 	bl	800ebf4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005544:	2380      	movs	r3, #128	@ 0x80
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	48c4      	ldr	r0, [pc, #784]	@ (800585c <ESP_Upkeep+0x3bc>)
 800554a:	2201      	movs	r2, #1
 800554c:	0019      	movs	r1, r3
 800554e:	f00a fdd8 	bl	8010102 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005552:	2001      	movs	r0, #1
 8005554:	f009 fb4e 	bl	800ebf4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005558:	4bc1      	ldr	r3, [pc, #772]	@ (8005860 <ESP_Upkeep+0x3c0>)
 800555a:	2200      	movs	r2, #0
 800555c:	2101      	movs	r1, #1
 800555e:	0018      	movs	r0, r3
 8005560:	f00a fdcf 	bl	8010102 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005564:	2001      	movs	r0, #1
 8005566:	f009 fb45 	bl	800ebf4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800556a:	4bbd      	ldr	r3, [pc, #756]	@ (8005860 <ESP_Upkeep+0x3c0>)
 800556c:	2201      	movs	r2, #1
 800556e:	2102      	movs	r1, #2
 8005570:	0018      	movs	r0, r3
 8005572:	f00a fdc6 	bl	8010102 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005576:	2001      	movs	r0, #1
 8005578:	f009 fb3c 	bl	800ebf4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800557c:	4bb8      	ldr	r3, [pc, #736]	@ (8005860 <ESP_Upkeep+0x3c0>)
 800557e:	2201      	movs	r2, #1
 8005580:	2101      	movs	r1, #1
 8005582:	0018      	movs	r0, r3
 8005584:	f00a fdbd 	bl	8010102 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005588:	f009 fb2a 	bl	800ebe0 <HAL_GetTick>
 800558c:	0003      	movs	r3, r0
 800558e:	22af      	movs	r2, #175	@ 0xaf
 8005590:	0092      	lsls	r2, r2, #2
 8005592:	189a      	adds	r2, r3, r2
 8005594:	4bb3      	ldr	r3, [pc, #716]	@ (8005864 <ESP_Upkeep+0x3c4>)
 8005596:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005598:	4baf      	ldr	r3, [pc, #700]	@ (8005858 <ESP_Upkeep+0x3b8>)
 800559a:	2201      	movs	r2, #1
 800559c:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800559e:	2380      	movs	r3, #128	@ 0x80
 80055a0:	005a      	lsls	r2, r3, #1
 80055a2:	4bb1      	ldr	r3, [pc, #708]	@ (8005868 <ESP_Upkeep+0x3c8>)
 80055a4:	0011      	movs	r1, r2
 80055a6:	0018      	movs	r0, r3
 80055a8:	f7fe fad8 	bl	8003b5c <ESP_Receive>
 80055ac:	1e03      	subs	r3, r0, #0
 80055ae:	d101      	bne.n	80055b4 <ESP_Upkeep+0x114>
 80055b0:	f000 fbbd 	bl	8005d2e <ESP_Upkeep+0x88e>
        EspState = ESP_STATE_WAIT_AWAKE;
 80055b4:	4ba0      	ldr	r3, [pc, #640]	@ (8005838 <ESP_Upkeep+0x398>)
 80055b6:	220f      	movs	r2, #15
 80055b8:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80055ba:	f009 fb11 	bl	800ebe0 <HAL_GetTick>
 80055be:	0003      	movs	r3, r0
 80055c0:	22fa      	movs	r2, #250	@ 0xfa
 80055c2:	00d2      	lsls	r2, r2, #3
 80055c4:	189a      	adds	r2, r3, r2
 80055c6:	4ba9      	ldr	r3, [pc, #676]	@ (800586c <ESP_Upkeep+0x3cc>)
 80055c8:	601a      	str	r2, [r3, #0]
      }
      break;
 80055ca:	f000 fbb0 	bl	8005d2e <ESP_Upkeep+0x88e>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80055ce:	2001      	movs	r0, #1
 80055d0:	f7ff fb46 	bl	8004c60 <DMA_ProcessBuffer>
 80055d4:	0003      	movs	r3, r0
 80055d6:	001a      	movs	r2, r3
 80055d8:	4ba5      	ldr	r3, [pc, #660]	@ (8005870 <ESP_Upkeep+0x3d0>)
 80055da:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80055dc:	4ba4      	ldr	r3, [pc, #656]	@ (8005870 <ESP_Upkeep+0x3d0>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	1dbc      	adds	r4, r7, #6
 80055e2:	2101      	movs	r1, #1
 80055e4:	0018      	movs	r0, r3
 80055e6:	f7ff fc3b 	bl	8004e60 <ATCompare>
 80055ea:	0003      	movs	r3, r0
 80055ec:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80055ee:	1dbb      	adds	r3, r7, #6
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d108      	bne.n	8005608 <ESP_Upkeep+0x168>
 80055f6:	4b9d      	ldr	r3, [pc, #628]	@ (800586c <ESP_Upkeep+0x3cc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	0018      	movs	r0, r3
 80055fc:	f008 fe44 	bl	800e288 <TimestampIsReached>
 8005600:	1e03      	subs	r3, r0, #0
 8005602:	d101      	bne.n	8005608 <ESP_Upkeep+0x168>
 8005604:	f000 fb95 	bl	8005d32 <ESP_Upkeep+0x892>
          EspState = ESP_STATE_MODE_SELECT;
 8005608:	4b8b      	ldr	r3, [pc, #556]	@ (8005838 <ESP_Upkeep+0x398>)
 800560a:	220b      	movs	r2, #11
 800560c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800560e:	e390      	b.n	8005d32 <ESP_Upkeep+0x892>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005610:	4b98      	ldr	r3, [pc, #608]	@ (8005874 <ESP_Upkeep+0x3d4>)
 8005612:	2209      	movs	r2, #9
 8005614:	2114      	movs	r1, #20
 8005616:	0018      	movs	r0, r3
 8005618:	f01a fd3a 	bl	8020090 <memset>
      if(!InitIsDone || WifiReset){
 800561c:	4b96      	ldr	r3, [pc, #600]	@ (8005878 <ESP_Upkeep+0x3d8>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2201      	movs	r2, #1
 8005622:	4053      	eors	r3, r2
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d103      	bne.n	8005632 <ESP_Upkeep+0x192>
 800562a:	4b94      	ldr	r3, [pc, #592]	@ (800587c <ESP_Upkeep+0x3dc>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01a      	beq.n	8005668 <ESP_Upkeep+0x1c8>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005632:	4b90      	ldr	r3, [pc, #576]	@ (8005874 <ESP_Upkeep+0x3d4>)
 8005634:	4a92      	ldr	r2, [pc, #584]	@ (8005880 <ESP_Upkeep+0x3e0>)
 8005636:	6811      	ldr	r1, [r2, #0]
 8005638:	6019      	str	r1, [r3, #0]
 800563a:	8891      	ldrh	r1, [r2, #4]
 800563c:	8099      	strh	r1, [r3, #4]
 800563e:	7992      	ldrb	r2, [r2, #6]
 8005640:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005642:	4b7d      	ldr	r3, [pc, #500]	@ (8005838 <ESP_Upkeep+0x398>)
 8005644:	2204      	movs	r2, #4
 8005646:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005648:	4b8e      	ldr	r3, [pc, #568]	@ (8005884 <ESP_Upkeep+0x3e4>)
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 800564e:	4b7d      	ldr	r3, [pc, #500]	@ (8005844 <ESP_Upkeep+0x3a4>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005654:	4b8b      	ldr	r3, [pc, #556]	@ (8005884 <ESP_Upkeep+0x3e4>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	001a      	movs	r2, r3
 800565a:	4b86      	ldr	r3, [pc, #536]	@ (8005874 <ESP_Upkeep+0x3d4>)
 800565c:	5c9a      	ldrb	r2, [r3, r2]
 800565e:	4b78      	ldr	r3, [pc, #480]	@ (8005840 <ESP_Upkeep+0x3a0>)
 8005660:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005662:	4b79      	ldr	r3, [pc, #484]	@ (8005848 <ESP_Upkeep+0x3a8>)
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8005668:	4b83      	ldr	r3, [pc, #524]	@ (8005878 <ESP_Upkeep+0x3d8>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01f      	beq.n	80056b0 <ESP_Upkeep+0x210>
 8005670:	4b85      	ldr	r3, [pc, #532]	@ (8005888 <ESP_Upkeep+0x3e8>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2201      	movs	r2, #1
 8005676:	4053      	eors	r3, r2
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d018      	beq.n	80056b0 <ESP_Upkeep+0x210>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 800567e:	4b7d      	ldr	r3, [pc, #500]	@ (8005874 <ESP_Upkeep+0x3d4>)
 8005680:	4a82      	ldr	r2, [pc, #520]	@ (800588c <ESP_Upkeep+0x3ec>)
 8005682:	6811      	ldr	r1, [r2, #0]
 8005684:	6019      	str	r1, [r3, #0]
 8005686:	8892      	ldrh	r2, [r2, #4]
 8005688:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800568a:	4b6b      	ldr	r3, [pc, #428]	@ (8005838 <ESP_Upkeep+0x398>)
 800568c:	2204      	movs	r2, #4
 800568e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005690:	4b7c      	ldr	r3, [pc, #496]	@ (8005884 <ESP_Upkeep+0x3e4>)
 8005692:	2200      	movs	r2, #0
 8005694:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005696:	4b6b      	ldr	r3, [pc, #428]	@ (8005844 <ESP_Upkeep+0x3a4>)
 8005698:	2201      	movs	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800569c:	4b79      	ldr	r3, [pc, #484]	@ (8005884 <ESP_Upkeep+0x3e4>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	001a      	movs	r2, r3
 80056a2:	4b74      	ldr	r3, [pc, #464]	@ (8005874 <ESP_Upkeep+0x3d4>)
 80056a4:	5c9a      	ldrb	r2, [r3, r2]
 80056a6:	4b66      	ldr	r3, [pc, #408]	@ (8005840 <ESP_Upkeep+0x3a0>)
 80056a8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056aa:	4b67      	ldr	r3, [pc, #412]	@ (8005848 <ESP_Upkeep+0x3a8>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80056b0:	4b71      	ldr	r3, [pc, #452]	@ (8005878 <ESP_Upkeep+0x3d8>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d021      	beq.n	80056fc <ESP_Upkeep+0x25c>
 80056b8:	4b73      	ldr	r3, [pc, #460]	@ (8005888 <ESP_Upkeep+0x3e8>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01d      	beq.n	80056fc <ESP_Upkeep+0x25c>
 80056c0:	4b73      	ldr	r3, [pc, #460]	@ (8005890 <ESP_Upkeep+0x3f0>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2201      	movs	r2, #1
 80056c6:	4053      	eors	r3, r2
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d016      	beq.n	80056fc <ESP_Upkeep+0x25c>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80056ce:	4b71      	ldr	r3, [pc, #452]	@ (8005894 <ESP_Upkeep+0x3f4>)
 80056d0:	881a      	ldrh	r2, [r3, #0]
 80056d2:	4b68      	ldr	r3, [pc, #416]	@ (8005874 <ESP_Upkeep+0x3d4>)
 80056d4:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80056d6:	4b58      	ldr	r3, [pc, #352]	@ (8005838 <ESP_Upkeep+0x398>)
 80056d8:	2204      	movs	r2, #4
 80056da:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056dc:	4b69      	ldr	r3, [pc, #420]	@ (8005884 <ESP_Upkeep+0x3e4>)
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80056e2:	4b58      	ldr	r3, [pc, #352]	@ (8005844 <ESP_Upkeep+0x3a4>)
 80056e4:	2204      	movs	r2, #4
 80056e6:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80056e8:	4b66      	ldr	r3, [pc, #408]	@ (8005884 <ESP_Upkeep+0x3e4>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	001a      	movs	r2, r3
 80056ee:	4b61      	ldr	r3, [pc, #388]	@ (8005874 <ESP_Upkeep+0x3d4>)
 80056f0:	5c9a      	ldrb	r2, [r3, r2]
 80056f2:	4b53      	ldr	r3, [pc, #332]	@ (8005840 <ESP_Upkeep+0x3a0>)
 80056f4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056f6:	4b54      	ldr	r3, [pc, #336]	@ (8005848 <ESP_Upkeep+0x3a8>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80056fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005878 <ESP_Upkeep+0x3d8>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d02e      	beq.n	8005762 <ESP_Upkeep+0x2c2>
 8005704:	4b60      	ldr	r3, [pc, #384]	@ (8005888 <ESP_Upkeep+0x3e8>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d02a      	beq.n	8005762 <ESP_Upkeep+0x2c2>
 800570c:	4b60      	ldr	r3, [pc, #384]	@ (8005890 <ESP_Upkeep+0x3f0>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d026      	beq.n	8005762 <ESP_Upkeep+0x2c2>
 8005714:	4b60      	ldr	r3, [pc, #384]	@ (8005898 <ESP_Upkeep+0x3f8>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2201      	movs	r2, #1
 800571a:	4053      	eors	r3, r2
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d01f      	beq.n	8005762 <ESP_Upkeep+0x2c2>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005722:	4b54      	ldr	r3, [pc, #336]	@ (8005874 <ESP_Upkeep+0x3d4>)
 8005724:	4a5d      	ldr	r2, [pc, #372]	@ (800589c <ESP_Upkeep+0x3fc>)
 8005726:	8811      	ldrh	r1, [r2, #0]
 8005728:	8019      	strh	r1, [r3, #0]
 800572a:	7892      	ldrb	r2, [r2, #2]
 800572c:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 800572e:	4b42      	ldr	r3, [pc, #264]	@ (8005838 <ESP_Upkeep+0x398>)
 8005730:	2204      	movs	r2, #4
 8005732:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005734:	4b53      	ldr	r3, [pc, #332]	@ (8005884 <ESP_Upkeep+0x3e4>)
 8005736:	2200      	movs	r2, #0
 8005738:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800573a:	4b42      	ldr	r3, [pc, #264]	@ (8005844 <ESP_Upkeep+0x3a4>)
 800573c:	2202      	movs	r2, #2
 800573e:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005740:	f009 fa4e 	bl	800ebe0 <HAL_GetTick>
 8005744:	0002      	movs	r2, r0
 8005746:	4b56      	ldr	r3, [pc, #344]	@ (80058a0 <ESP_Upkeep+0x400>)
 8005748:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 800574a:	f007 fe21 	bl	800d390 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800574e:	4b4d      	ldr	r3, [pc, #308]	@ (8005884 <ESP_Upkeep+0x3e4>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	001a      	movs	r2, r3
 8005754:	4b47      	ldr	r3, [pc, #284]	@ (8005874 <ESP_Upkeep+0x3d4>)
 8005756:	5c9a      	ldrb	r2, [r3, r2]
 8005758:	4b39      	ldr	r3, [pc, #228]	@ (8005840 <ESP_Upkeep+0x3a0>)
 800575a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800575c:	4b3a      	ldr	r3, [pc, #232]	@ (8005848 <ESP_Upkeep+0x3a8>)
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005762:	4b50      	ldr	r3, [pc, #320]	@ (80058a4 <ESP_Upkeep+0x404>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d022      	beq.n	80057b0 <ESP_Upkeep+0x310>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800576a:	4b42      	ldr	r3, [pc, #264]	@ (8005874 <ESP_Upkeep+0x3d4>)
 800576c:	4a4e      	ldr	r2, [pc, #312]	@ (80058a8 <ESP_Upkeep+0x408>)
 800576e:	6811      	ldr	r1, [r2, #0]
 8005770:	6019      	str	r1, [r3, #0]
 8005772:	7912      	ldrb	r2, [r2, #4]
 8005774:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 8005776:	4a4d      	ldr	r2, [pc, #308]	@ (80058ac <ESP_Upkeep+0x40c>)
 8005778:	4b35      	ldr	r3, [pc, #212]	@ (8005850 <ESP_Upkeep+0x3b0>)
 800577a:	0019      	movs	r1, r3
 800577c:	2003      	movs	r0, #3
 800577e:	f008 fdd9 	bl	800e334 <CreateLine>
        DisableConnectedDevices();
 8005782:	f003 f885 	bl	8008890 <DisableConnectedDevices>
        EspState = ESP_STATE_SEND;
 8005786:	4b2c      	ldr	r3, [pc, #176]	@ (8005838 <ESP_Upkeep+0x398>)
 8005788:	2204      	movs	r2, #4
 800578a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800578c:	4b3d      	ldr	r3, [pc, #244]	@ (8005884 <ESP_Upkeep+0x3e4>)
 800578e:	2200      	movs	r2, #0
 8005790:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005792:	4b2c      	ldr	r3, [pc, #176]	@ (8005844 <ESP_Upkeep+0x3a4>)
 8005794:	2203      	movs	r2, #3
 8005796:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8005798:	f007 fdfa 	bl	800d390 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800579c:	4b39      	ldr	r3, [pc, #228]	@ (8005884 <ESP_Upkeep+0x3e4>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	001a      	movs	r2, r3
 80057a2:	4b34      	ldr	r3, [pc, #208]	@ (8005874 <ESP_Upkeep+0x3d4>)
 80057a4:	5c9a      	ldrb	r2, [r3, r2]
 80057a6:	4b26      	ldr	r3, [pc, #152]	@ (8005840 <ESP_Upkeep+0x3a0>)
 80057a8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80057aa:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <ESP_Upkeep+0x3a8>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80057b0:	4b31      	ldr	r3, [pc, #196]	@ (8005878 <ESP_Upkeep+0x3d8>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d100      	bne.n	80057ba <ESP_Upkeep+0x31a>
 80057b8:	e2bd      	b.n	8005d36 <ESP_Upkeep+0x896>
 80057ba:	4b33      	ldr	r3, [pc, #204]	@ (8005888 <ESP_Upkeep+0x3e8>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d100      	bne.n	80057c4 <ESP_Upkeep+0x324>
 80057c2:	e2b8      	b.n	8005d36 <ESP_Upkeep+0x896>
 80057c4:	4b32      	ldr	r3, [pc, #200]	@ (8005890 <ESP_Upkeep+0x3f0>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d100      	bne.n	80057ce <ESP_Upkeep+0x32e>
 80057cc:	e2b3      	b.n	8005d36 <ESP_Upkeep+0x896>
 80057ce:	4b32      	ldr	r3, [pc, #200]	@ (8005898 <ESP_Upkeep+0x3f8>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d100      	bne.n	80057d8 <ESP_Upkeep+0x338>
 80057d6:	e2ae      	b.n	8005d36 <ESP_Upkeep+0x896>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80057d8:	4b35      	ldr	r3, [pc, #212]	@ (80058b0 <ESP_Upkeep+0x410>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b25      	ldr	r3, [pc, #148]	@ (8005874 <ESP_Upkeep+0x3d4>)
 80057de:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80057e0:	4b15      	ldr	r3, [pc, #84]	@ (8005838 <ESP_Upkeep+0x398>)
 80057e2:	2204      	movs	r2, #4
 80057e4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80057e6:	4b27      	ldr	r3, [pc, #156]	@ (8005884 <ESP_Upkeep+0x3e4>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80057ec:	4b15      	ldr	r3, [pc, #84]	@ (8005844 <ESP_Upkeep+0x3a4>)
 80057ee:	2205      	movs	r2, #5
 80057f0:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80057f2:	f009 f9f5 	bl	800ebe0 <HAL_GetTick>
 80057f6:	0002      	movs	r2, r0
 80057f8:	4b29      	ldr	r3, [pc, #164]	@ (80058a0 <ESP_Upkeep+0x400>)
 80057fa:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80057fc:	f007 fdc8 	bl	800d390 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005800:	4b20      	ldr	r3, [pc, #128]	@ (8005884 <ESP_Upkeep+0x3e4>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	001a      	movs	r2, r3
 8005806:	4b1b      	ldr	r3, [pc, #108]	@ (8005874 <ESP_Upkeep+0x3d4>)
 8005808:	5c9a      	ldrb	r2, [r3, r2]
 800580a:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <ESP_Upkeep+0x3a0>)
 800580c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800580e:	4b0e      	ldr	r3, [pc, #56]	@ (8005848 <ESP_Upkeep+0x3a8>)
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005814:	e28f      	b.n	8005d36 <ESP_Upkeep+0x896>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8005816:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <ESP_Upkeep+0x3a0>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	1dfc      	adds	r4, r7, #7
 800581c:	0018      	movs	r0, r3
 800581e:	f7ff fb61 	bl	8004ee4 <AT_Send>
 8005822:	0003      	movs	r3, r0
 8005824:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005826:	1dfb      	adds	r3, r7, #7
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d100      	bne.n	8005830 <ESP_Upkeep+0x390>
 800582e:	e284      	b.n	8005d3a <ESP_Upkeep+0x89a>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005830:	4b01      	ldr	r3, [pc, #4]	@ (8005838 <ESP_Upkeep+0x398>)
 8005832:	2203      	movs	r2, #3
 8005834:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005836:	e280      	b.n	8005d3a <ESP_Upkeep+0x89a>
 8005838:	20000028 	.word	0x20000028
 800583c:	20000002 	.word	0x20000002
 8005840:	20000a2a 	.word	0x20000a2a
 8005844:	20000a2b 	.word	0x20000a2b
 8005848:	20000a29 	.word	0x20000a29
 800584c:	08023930 	.word	0x08023930
 8005850:	08022ff8 	.word	0x08022ff8
 8005854:	08025250 	.word	0x08025250
 8005858:	2000054c 	.word	0x2000054c
 800585c:	50000800 	.word	0x50000800
 8005860:	50001c00 	.word	0x50001c00
 8005864:	20000a1c 	.word	0x20000a1c
 8005868:	2000044c 	.word	0x2000044c
 800586c:	20000b3c 	.word	0x20000b3c
 8005870:	2000002a 	.word	0x2000002a
 8005874:	20000a0c 	.word	0x20000a0c
 8005878:	2000054d 	.word	0x2000054d
 800587c:	2000054e 	.word	0x2000054e
 8005880:	20000004 	.word	0x20000004
 8005884:	20000a16 	.word	0x20000a16
 8005888:	20000550 	.word	0x20000550
 800588c:	20000014 	.word	0x20000014
 8005890:	20000551 	.word	0x20000551
 8005894:	20000010 	.word	0x20000010
 8005898:	20000001 	.word	0x20000001
 800589c:	2000000c 	.word	0x2000000c
 80058a0:	20000560 	.word	0x20000560
 80058a4:	2000054f 	.word	0x2000054f
 80058a8:	2000001c 	.word	0x2000001c
 80058ac:	0802395c 	.word	0x0802395c
 80058b0:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80058b4:	4bc0      	ldr	r3, [pc, #768]	@ (8005bb8 <ESP_Upkeep+0x718>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	0018      	movs	r0, r3
 80058ba:	f008 fce5 	bl	800e288 <TimestampIsReached>
 80058be:	1e03      	subs	r3, r0, #0
 80058c0:	d100      	bne.n	80058c4 <ESP_Upkeep+0x424>
 80058c2:	e23c      	b.n	8005d3e <ESP_Upkeep+0x89e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80058c4:	4bbd      	ldr	r3, [pc, #756]	@ (8005bbc <ESP_Upkeep+0x71c>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff f9c9 	bl	8004c60 <DMA_ProcessBuffer>
 80058ce:	0003      	movs	r3, r0
 80058d0:	001a      	movs	r2, r3
 80058d2:	4bbb      	ldr	r3, [pc, #748]	@ (8005bc0 <ESP_Upkeep+0x720>)
 80058d4:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80058d6:	4bba      	ldr	r3, [pc, #744]	@ (8005bc0 <ESP_Upkeep+0x720>)
 80058d8:	781a      	ldrb	r2, [r3, #0]
 80058da:	4bb8      	ldr	r3, [pc, #736]	@ (8005bbc <ESP_Upkeep+0x71c>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	1d7c      	adds	r4, r7, #5
 80058e0:	0019      	movs	r1, r3
 80058e2:	0010      	movs	r0, r2
 80058e4:	f7ff fabc 	bl	8004e60 <ATCompare>
 80058e8:	0003      	movs	r3, r0
 80058ea:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80058ec:	4bb4      	ldr	r3, [pc, #720]	@ (8005bc0 <ESP_Upkeep+0x720>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d139      	bne.n	8005968 <ESP_Upkeep+0x4c8>
          if(ATCommand == AT_SENDDATA){
 80058f4:	4bb3      	ldr	r3, [pc, #716]	@ (8005bc4 <ESP_Upkeep+0x724>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b0f      	cmp	r3, #15
 80058fa:	d108      	bne.n	800590e <ESP_Upkeep+0x46e>
            ATCommand = AT_HTTPCPOST;
 80058fc:	4bb1      	ldr	r3, [pc, #708]	@ (8005bc4 <ESP_Upkeep+0x724>)
 80058fe:	220e      	movs	r2, #14
 8005900:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005902:	4bae      	ldr	r3, [pc, #696]	@ (8005bbc <ESP_Upkeep+0x71c>)
 8005904:	2202      	movs	r2, #2
 8005906:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005908:	4baf      	ldr	r3, [pc, #700]	@ (8005bc8 <ESP_Upkeep+0x728>)
 800590a:	2201      	movs	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 800590e:	4baf      	ldr	r3, [pc, #700]	@ (8005bcc <ESP_Upkeep+0x72c>)
 8005910:	2204      	movs	r2, #4
 8005912:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005914:	4bae      	ldr	r3, [pc, #696]	@ (8005bd0 <ESP_Upkeep+0x730>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	4bac      	ldr	r3, [pc, #688]	@ (8005bd0 <ESP_Upkeep+0x730>)
 800591e:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005920:	4bab      	ldr	r3, [pc, #684]	@ (8005bd0 <ESP_Upkeep+0x730>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d91f      	bls.n	8005968 <ESP_Upkeep+0x4c8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005928:	f009 f95a 	bl	800ebe0 <HAL_GetTick>
 800592c:	0003      	movs	r3, r0
 800592e:	4aa9      	ldr	r2, [pc, #676]	@ (8005bd4 <ESP_Upkeep+0x734>)
 8005930:	189a      	adds	r2, r3, r2
 8005932:	4ba1      	ldr	r3, [pc, #644]	@ (8005bb8 <ESP_Upkeep+0x718>)
 8005934:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005936:	4ba8      	ldr	r3, [pc, #672]	@ (8005bd8 <ESP_Upkeep+0x738>)
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 800593c:	f007 fd40 	bl	800d3c0 <ResetESPIndicator>
            clearDMABuffer();
 8005940:	f7ff fa80 	bl	8004e44 <clearDMABuffer>
            stop = HAL_GetTick();
 8005944:	f009 f94c 	bl	800ebe0 <HAL_GetTick>
 8005948:	0002      	movs	r2, r0
 800594a:	4ba4      	ldr	r3, [pc, #656]	@ (8005bdc <ESP_Upkeep+0x73c>)
 800594c:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 800594e:	4ba3      	ldr	r3, [pc, #652]	@ (8005bdc <ESP_Upkeep+0x73c>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4ba3      	ldr	r3, [pc, #652]	@ (8005be0 <ESP_Upkeep+0x740>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	4aa2      	ldr	r2, [pc, #648]	@ (8005be4 <ESP_Upkeep+0x744>)
 800595a:	49a3      	ldr	r1, [pc, #652]	@ (8005be8 <ESP_Upkeep+0x748>)
 800595c:	2001      	movs	r0, #1
 800595e:	f008 fce9 	bl	800e334 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005962:	4b9a      	ldr	r3, [pc, #616]	@ (8005bcc <ESP_Upkeep+0x72c>)
 8005964:	220d      	movs	r2, #13
 8005966:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005968:	4b95      	ldr	r3, [pc, #596]	@ (8005bc0 <ESP_Upkeep+0x720>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b03      	cmp	r3, #3
 800596e:	d106      	bne.n	800597e <ESP_Upkeep+0x4de>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005970:	f009 f936 	bl	800ebe0 <HAL_GetTick>
 8005974:	0003      	movs	r3, r0
 8005976:	330a      	adds	r3, #10
 8005978:	001a      	movs	r2, r3
 800597a:	4b8f      	ldr	r3, [pc, #572]	@ (8005bb8 <ESP_Upkeep+0x718>)
 800597c:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 800597e:	4b90      	ldr	r3, [pc, #576]	@ (8005bc0 <ESP_Upkeep+0x720>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b0a      	cmp	r3, #10
 8005984:	d106      	bne.n	8005994 <ESP_Upkeep+0x4f4>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005986:	f009 f92b 	bl	800ebe0 <HAL_GetTick>
 800598a:	0003      	movs	r3, r0
 800598c:	330a      	adds	r3, #10
 800598e:	001a      	movs	r2, r3
 8005990:	4b89      	ldr	r3, [pc, #548]	@ (8005bb8 <ESP_Upkeep+0x718>)
 8005992:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005994:	4b8a      	ldr	r3, [pc, #552]	@ (8005bc0 <ESP_Upkeep+0x720>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b06      	cmp	r3, #6
 800599a:	d146      	bne.n	8005a2a <ESP_Upkeep+0x58a>
          timeoutcntr++;
 800599c:	4b93      	ldr	r3, [pc, #588]	@ (8005bec <ESP_Upkeep+0x74c>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	4b91      	ldr	r3, [pc, #580]	@ (8005bec <ESP_Upkeep+0x74c>)
 80059a6:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80059a8:	4a91      	ldr	r2, [pc, #580]	@ (8005bf0 <ESP_Upkeep+0x750>)
 80059aa:	4b8f      	ldr	r3, [pc, #572]	@ (8005be8 <ESP_Upkeep+0x748>)
 80059ac:	0019      	movs	r1, r3
 80059ae:	2001      	movs	r0, #1
 80059b0:	f008 fcc0 	bl	800e334 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80059b4:	4b8d      	ldr	r3, [pc, #564]	@ (8005bec <ESP_Upkeep+0x74c>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d91f      	bls.n	80059fc <ESP_Upkeep+0x55c>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80059bc:	f009 f910 	bl	800ebe0 <HAL_GetTick>
 80059c0:	0003      	movs	r3, r0
 80059c2:	4a84      	ldr	r2, [pc, #528]	@ (8005bd4 <ESP_Upkeep+0x734>)
 80059c4:	189a      	adds	r2, r3, r2
 80059c6:	4b7c      	ldr	r3, [pc, #496]	@ (8005bb8 <ESP_Upkeep+0x718>)
 80059c8:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80059ca:	4b83      	ldr	r3, [pc, #524]	@ (8005bd8 <ESP_Upkeep+0x738>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 80059d0:	f007 fcf6 	bl	800d3c0 <ResetESPIndicator>
            clearDMABuffer();
 80059d4:	f7ff fa36 	bl	8004e44 <clearDMABuffer>
            stop = HAL_GetTick();
 80059d8:	f009 f902 	bl	800ebe0 <HAL_GetTick>
 80059dc:	0002      	movs	r2, r0
 80059de:	4b7f      	ldr	r3, [pc, #508]	@ (8005bdc <ESP_Upkeep+0x73c>)
 80059e0:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 80059e2:	4b7e      	ldr	r3, [pc, #504]	@ (8005bdc <ESP_Upkeep+0x73c>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b7e      	ldr	r3, [pc, #504]	@ (8005be0 <ESP_Upkeep+0x740>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	4a81      	ldr	r2, [pc, #516]	@ (8005bf4 <ESP_Upkeep+0x754>)
 80059ee:	497e      	ldr	r1, [pc, #504]	@ (8005be8 <ESP_Upkeep+0x748>)
 80059f0:	2001      	movs	r0, #1
 80059f2:	f008 fc9f 	bl	800e334 <CreateLine>
            // TODO hier gaat iets fout, de verzending herstart niet meer
            // in log alleen nog D [01039053] EspState: 4 ATcmd: 20 Mode: 2 ATExp: 0
            EspState = ESP_STATE_DEINIT;
 80059f6:	4b75      	ldr	r3, [pc, #468]	@ (8005bcc <ESP_Upkeep+0x72c>)
 80059f8:	220d      	movs	r2, #13
 80059fa:	701a      	strb	r2, [r3, #0]
            // mogelijke oplossing door deze twee regels te verwijderen
            // ATCommand = AT_END;
            // ATExpectation = RECEIVE_EXPECTATION_OK;
          }
          if(ATCommand != AT_SENDDATA){
 80059fc:	4b71      	ldr	r3, [pc, #452]	@ (8005bc4 <ESP_Upkeep+0x724>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b0f      	cmp	r3, #15
 8005a02:	d003      	beq.n	8005a0c <ESP_Upkeep+0x56c>
            EspState = ESP_STATE_SEND;
 8005a04:	4b71      	ldr	r3, [pc, #452]	@ (8005bcc <ESP_Upkeep+0x72c>)
 8005a06:	2204      	movs	r2, #4
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	e00e      	b.n	8005a2a <ESP_Upkeep+0x58a>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005a0c:	4b6d      	ldr	r3, [pc, #436]	@ (8005bc4 <ESP_Upkeep+0x724>)
 8005a0e:	220e      	movs	r2, #14
 8005a10:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005a12:	4b6d      	ldr	r3, [pc, #436]	@ (8005bc8 <ESP_Upkeep+0x728>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	4b6b      	ldr	r3, [pc, #428]	@ (8005bc8 <ESP_Upkeep+0x728>)
 8005a1c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005a1e:	4b67      	ldr	r3, [pc, #412]	@ (8005bbc <ESP_Upkeep+0x71c>)
 8005a20:	2202      	movs	r2, #2
 8005a22:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005a24:	4b69      	ldr	r3, [pc, #420]	@ (8005bcc <ESP_Upkeep+0x72c>)
 8005a26:	2204      	movs	r2, #4
 8005a28:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005a2a:	1d7b      	adds	r3, r7, #5
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d100      	bne.n	8005a34 <ESP_Upkeep+0x594>
 8005a32:	e184      	b.n	8005d3e <ESP_Upkeep+0x89e>
          EspState = ESP_STATE_NEXT_AT;
 8005a34:	4b65      	ldr	r3, [pc, #404]	@ (8005bcc <ESP_Upkeep+0x72c>)
 8005a36:	2205      	movs	r2, #5
 8005a38:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005a3a:	e180      	b.n	8005d3e <ESP_Upkeep+0x89e>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005a3c:	4b62      	ldr	r3, [pc, #392]	@ (8005bc8 <ESP_Upkeep+0x728>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	4b60      	ldr	r3, [pc, #384]	@ (8005bc8 <ESP_Upkeep+0x728>)
 8005a46:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005a48:	4b5f      	ldr	r3, [pc, #380]	@ (8005bc8 <ESP_Upkeep+0x728>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8005bf8 <ESP_Upkeep+0x758>)
 8005a50:	5c9a      	ldrb	r2, [r3, r2]
 8005a52:	4b5c      	ldr	r3, [pc, #368]	@ (8005bc4 <ESP_Upkeep+0x724>)
 8005a54:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005a56:	4b5b      	ldr	r3, [pc, #364]	@ (8005bc4 <ESP_Upkeep+0x724>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d102      	bne.n	8005a64 <ESP_Upkeep+0x5c4>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005a5e:	4b57      	ldr	r3, [pc, #348]	@ (8005bbc <ESP_Upkeep+0x71c>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005a64:	4b57      	ldr	r3, [pc, #348]	@ (8005bc4 <ESP_Upkeep+0x724>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b0e      	cmp	r3, #14
 8005a6a:	d102      	bne.n	8005a72 <ESP_Upkeep+0x5d2>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005a6c:	4b53      	ldr	r3, [pc, #332]	@ (8005bbc <ESP_Upkeep+0x71c>)
 8005a6e:	2202      	movs	r2, #2
 8005a70:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005a72:	4b54      	ldr	r3, [pc, #336]	@ (8005bc4 <ESP_Upkeep+0x724>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b0e      	cmp	r3, #14
 8005a78:	d006      	beq.n	8005a88 <ESP_Upkeep+0x5e8>
 8005a7a:	4b52      	ldr	r3, [pc, #328]	@ (8005bc4 <ESP_Upkeep+0x724>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d002      	beq.n	8005a88 <ESP_Upkeep+0x5e8>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005a82:	4b4e      	ldr	r3, [pc, #312]	@ (8005bbc <ESP_Upkeep+0x71c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005a88:	4b4e      	ldr	r3, [pc, #312]	@ (8005bc4 <ESP_Upkeep+0x724>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b11      	cmp	r3, #17
 8005a8e:	d102      	bne.n	8005a96 <ESP_Upkeep+0x5f6>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005a90:	4b4a      	ldr	r3, [pc, #296]	@ (8005bbc <ESP_Upkeep+0x71c>)
 8005a92:	2205      	movs	r2, #5
 8005a94:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005a96:	4b4d      	ldr	r3, [pc, #308]	@ (8005bcc <ESP_Upkeep+0x72c>)
 8005a98:	2204      	movs	r2, #4
 8005a9a:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005a9c:	4b49      	ldr	r3, [pc, #292]	@ (8005bc4 <ESP_Upkeep+0x724>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b14      	cmp	r3, #20
 8005aa2:	d000      	beq.n	8005aa6 <ESP_Upkeep+0x606>
 8005aa4:	e14d      	b.n	8005d42 <ESP_Upkeep+0x8a2>
        if(Mode == AT_MODE_SEND){
 8005aa6:	4b55      	ldr	r3, [pc, #340]	@ (8005bfc <ESP_Upkeep+0x75c>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d124      	bne.n	8005af8 <ESP_Upkeep+0x658>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005aae:	f009 f897 	bl	800ebe0 <HAL_GetTick>
 8005ab2:	0003      	movs	r3, r0
 8005ab4:	4a47      	ldr	r2, [pc, #284]	@ (8005bd4 <ESP_Upkeep+0x734>)
 8005ab6:	189a      	adds	r2, r3, r2
 8005ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8005bb8 <ESP_Upkeep+0x718>)
 8005aba:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005abc:	f007 fc80 	bl	800d3c0 <ResetESPIndicator>
          clearDMABuffer();
 8005ac0:	f7ff f9c0 	bl	8004e44 <clearDMABuffer>
          stop = HAL_GetTick();
 8005ac4:	f009 f88c 	bl	800ebe0 <HAL_GetTick>
 8005ac8:	0002      	movs	r2, r0
 8005aca:	4b44      	ldr	r3, [pc, #272]	@ (8005bdc <ESP_Upkeep+0x73c>)
 8005acc:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005ace:	4b43      	ldr	r3, [pc, #268]	@ (8005bdc <ESP_Upkeep+0x73c>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4b43      	ldr	r3, [pc, #268]	@ (8005be0 <ESP_Upkeep+0x740>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	4a49      	ldr	r2, [pc, #292]	@ (8005c00 <ESP_Upkeep+0x760>)
 8005ada:	494a      	ldr	r1, [pc, #296]	@ (8005c04 <ESP_Upkeep+0x764>)
 8005adc:	2002      	movs	r0, #2
 8005ade:	f008 fc29 	bl	800e334 <CreateLine>
          ResetdBAmax();
 8005ae2:	f002 fee9 	bl	80088b8 <ResetdBAmax>
          showTime();
 8005ae6:	f000 fcd1 	bl	800648c <showTime>
          ESPTransmitDone = true;
 8005aea:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd8 <ESP_Upkeep+0x738>)
 8005aec:	2201      	movs	r2, #1
 8005aee:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005af0:	4b36      	ldr	r3, [pc, #216]	@ (8005bcc <ESP_Upkeep+0x72c>)
 8005af2:	220d      	movs	r2, #13
 8005af4:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005af6:	e124      	b.n	8005d42 <ESP_Upkeep+0x8a2>
        else if (Mode == AT_MODE_GETTIME) {
 8005af8:	4b40      	ldr	r3, [pc, #256]	@ (8005bfc <ESP_Upkeep+0x75c>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b05      	cmp	r3, #5
 8005afe:	d12e      	bne.n	8005b5e <ESP_Upkeep+0x6be>
            setTime = false;
 8005b00:	4b41      	ldr	r3, [pc, #260]	@ (8005c08 <ESP_Upkeep+0x768>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005b06:	f009 f86b 	bl	800ebe0 <HAL_GetTick>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c0c <ESP_Upkeep+0x76c>)
 8005b0e:	189a      	adds	r2, r3, r2
 8005b10:	4b3f      	ldr	r3, [pc, #252]	@ (8005c10 <ESP_Upkeep+0x770>)
 8005b12:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005b14:	4b3e      	ldr	r3, [pc, #248]	@ (8005c10 <ESP_Upkeep+0x770>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a3e      	ldr	r2, [pc, #248]	@ (8005c14 <ESP_Upkeep+0x774>)
 8005b1a:	493a      	ldr	r1, [pc, #232]	@ (8005c04 <ESP_Upkeep+0x764>)
 8005b1c:	2002      	movs	r0, #2
 8005b1e:	f008 fc09 	bl	800e334 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005b22:	4b3d      	ldr	r3, [pc, #244]	@ (8005c18 <ESP_Upkeep+0x778>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b24      	ldr	r3, [pc, #144]	@ (8005bb8 <ESP_Upkeep+0x718>)
 8005b28:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 8005b2a:	f007 fc49 	bl	800d3c0 <ResetESPIndicator>
            clearDMABuffer();
 8005b2e:	f7ff f989 	bl	8004e44 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b32:	f009 f855 	bl	800ebe0 <HAL_GetTick>
 8005b36:	0002      	movs	r2, r0
 8005b38:	4b28      	ldr	r3, [pc, #160]	@ (8005bdc <ESP_Upkeep+0x73c>)
 8005b3a:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005b3c:	4b27      	ldr	r3, [pc, #156]	@ (8005bdc <ESP_Upkeep+0x73c>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	4b27      	ldr	r3, [pc, #156]	@ (8005be0 <ESP_Upkeep+0x740>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	4a35      	ldr	r2, [pc, #212]	@ (8005c1c <ESP_Upkeep+0x77c>)
 8005b48:	492e      	ldr	r1, [pc, #184]	@ (8005c04 <ESP_Upkeep+0x764>)
 8005b4a:	2002      	movs	r0, #2
 8005b4c:	f008 fbf2 	bl	800e334 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b50:	4b1e      	ldr	r3, [pc, #120]	@ (8005bcc <ESP_Upkeep+0x72c>)
 8005b52:	220d      	movs	r2, #13
 8005b54:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005b56:	4b29      	ldr	r3, [pc, #164]	@ (8005bfc <ESP_Upkeep+0x75c>)
 8005b58:	2202      	movs	r2, #2
 8005b5a:	701a      	strb	r2, [r3, #0]
    break;
 8005b5c:	e0f1      	b.n	8005d42 <ESP_Upkeep+0x8a2>
          EspState = ESP_STATE_RESET;
 8005b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bcc <ESP_Upkeep+0x72c>)
 8005b60:	2209      	movs	r2, #9
 8005b62:	701a      	strb	r2, [r3, #0]
    break;
 8005b64:	e0ed      	b.n	8005d42 <ESP_Upkeep+0x8a2>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005b66:	4b2e      	ldr	r3, [pc, #184]	@ (8005c20 <ESP_Upkeep+0x780>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005c24 <ESP_Upkeep+0x784>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2101      	movs	r1, #1
 8005b72:	0018      	movs	r0, r3
 8005b74:	f00a fac5 	bl	8010102 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005b78:	2001      	movs	r0, #1
 8005b7a:	f009 f83b 	bl	800ebf4 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005b7e:	2380      	movs	r3, #128	@ 0x80
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	4829      	ldr	r0, [pc, #164]	@ (8005c28 <ESP_Upkeep+0x788>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	0019      	movs	r1, r3
 8005b88:	f00a fabb 	bl	8010102 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f009 f831 	bl	800ebf4 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005b92:	4b24      	ldr	r3, [pc, #144]	@ (8005c24 <ESP_Upkeep+0x784>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	2102      	movs	r1, #2
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f00a fab2 	bl	8010102 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005bcc <ESP_Upkeep+0x72c>)
 8005ba0:	2209      	movs	r2, #9
 8005ba2:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	f009 f825 	bl	800ebf4 <HAL_Delay>
      errorcntr = 0;
 8005baa:	4b09      	ldr	r3, [pc, #36]	@ (8005bd0 <ESP_Upkeep+0x730>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8005bec <ESP_Upkeep+0x74c>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]
      break;
 8005bb6:	e0c7      	b.n	8005d48 <ESP_Upkeep+0x8a8>
 8005bb8:	20000a1c 	.word	0x20000a1c
 8005bbc:	20000a29 	.word	0x20000a29
 8005bc0:	2000002a 	.word	0x2000002a
 8005bc4:	20000a2a 	.word	0x20000a2a
 8005bc8:	20000a16 	.word	0x20000a16
 8005bcc:	20000028 	.word	0x20000028
 8005bd0:	20000a17 	.word	0x20000a17
 8005bd4:	0003a980 	.word	0x0003a980
 8005bd8:	20000553 	.word	0x20000553
 8005bdc:	20000564 	.word	0x20000564
 8005be0:	20000560 	.word	0x20000560
 8005be4:	0802398c 	.word	0x0802398c
 8005be8:	0802301c 	.word	0x0802301c
 8005bec:	20000a18 	.word	0x20000a18
 8005bf0:	080239c0 	.word	0x080239c0
 8005bf4:	080239fc 	.word	0x080239fc
 8005bf8:	20000a0c 	.word	0x20000a0c
 8005bfc:	20000a2b 	.word	0x20000a2b
 8005c00:	08023a2c 	.word	0x08023a2c
 8005c04:	08023a44 	.word	0x08023a44
 8005c08:	20000001 	.word	0x20000001
 8005c0c:	047e7c4f 	.word	0x047e7c4f
 8005c10:	20000a20 	.word	0x20000a20
 8005c14:	08023a48 	.word	0x08023a48
 8005c18:	20000a24 	.word	0x20000a24
 8005c1c:	08023a8c 	.word	0x08023a8c
 8005c20:	2000054c 	.word	0x2000054c
 8005c24:	50001c00 	.word	0x50001c00
 8005c28:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005c2c:	4b49      	ldr	r3, [pc, #292]	@ (8005d54 <ESP_Upkeep+0x8b4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f008 fb29 	bl	800e288 <TimestampIsReached>
 8005c36:	1e03      	subs	r3, r0, #0
 8005c38:	d103      	bne.n	8005c42 <ESP_Upkeep+0x7a2>
 8005c3a:	4b47      	ldr	r3, [pc, #284]	@ (8005d58 <ESP_Upkeep+0x8b8>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d038      	beq.n	8005cb4 <ESP_Upkeep+0x814>
        ESPTransmitDone = false;
 8005c42:	4b46      	ldr	r3, [pc, #280]	@ (8005d5c <ESP_Upkeep+0x8bc>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005c48:	4b45      	ldr	r3, [pc, #276]	@ (8005d60 <ESP_Upkeep+0x8c0>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d105      	bne.n	8005c5c <ESP_Upkeep+0x7bc>
          InitIsDone = true;
 8005c50:	4b44      	ldr	r3, [pc, #272]	@ (8005d64 <ESP_Upkeep+0x8c4>)
 8005c52:	2201      	movs	r2, #1
 8005c54:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c56:	4b44      	ldr	r3, [pc, #272]	@ (8005d68 <ESP_Upkeep+0x8c8>)
 8005c58:	220b      	movs	r2, #11
 8005c5a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005c5c:	4b40      	ldr	r3, [pc, #256]	@ (8005d60 <ESP_Upkeep+0x8c0>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d108      	bne.n	8005c76 <ESP_Upkeep+0x7d6>
          ConnectionMade = true;
 8005c64:	4b41      	ldr	r3, [pc, #260]	@ (8005d6c <ESP_Upkeep+0x8cc>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005c6a:	4b41      	ldr	r3, [pc, #260]	@ (8005d70 <ESP_Upkeep+0x8d0>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c70:	4b3d      	ldr	r3, [pc, #244]	@ (8005d68 <ESP_Upkeep+0x8c8>)
 8005c72:	220b      	movs	r2, #11
 8005c74:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005c76:	4b3a      	ldr	r3, [pc, #232]	@ (8005d60 <ESP_Upkeep+0x8c0>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d102      	bne.n	8005c84 <ESP_Upkeep+0x7e4>
          EspState = ESP_STATE_INIT;
 8005c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d68 <ESP_Upkeep+0x8c8>)
 8005c80:	2202      	movs	r2, #2
 8005c82:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005c84:	4b36      	ldr	r3, [pc, #216]	@ (8005d60 <ESP_Upkeep+0x8c0>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d108      	bne.n	8005c9e <ESP_Upkeep+0x7fe>
          EspState = ESP_STATE_CONFIG;
 8005c8c:	4b36      	ldr	r3, [pc, #216]	@ (8005d68 <ESP_Upkeep+0x8c8>)
 8005c8e:	220e      	movs	r2, #14
 8005c90:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005c92:	4a38      	ldr	r2, [pc, #224]	@ (8005d74 <ESP_Upkeep+0x8d4>)
 8005c94:	4b38      	ldr	r3, [pc, #224]	@ (8005d78 <ESP_Upkeep+0x8d8>)
 8005c96:	0019      	movs	r1, r3
 8005c98:	2002      	movs	r0, #2
 8005c9a:	f008 fb4b 	bl	800e334 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005c9e:	4b30      	ldr	r3, [pc, #192]	@ (8005d60 <ESP_Upkeep+0x8c0>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d11f      	bne.n	8005ce6 <ESP_Upkeep+0x846>
          EspState = ESP_STATE_MODE_SELECT;
 8005ca6:	4b30      	ldr	r3, [pc, #192]	@ (8005d68 <ESP_Upkeep+0x8c8>)
 8005ca8:	220b      	movs	r2, #11
 8005caa:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005cac:	4b33      	ldr	r3, [pc, #204]	@ (8005d7c <ESP_Upkeep+0x8dc>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005cb2:	e018      	b.n	8005ce6 <ESP_Upkeep+0x846>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005cb4:	4b32      	ldr	r3, [pc, #200]	@ (8005d80 <ESP_Upkeep+0x8e0>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f008 fae5 	bl	800e288 <TimestampIsReached>
 8005cbe:	1e03      	subs	r3, r0, #0
 8005cc0:	d041      	beq.n	8005d46 <ESP_Upkeep+0x8a6>
        if(Mode == AT_MODE_SEND ) {
 8005cc2:	4b27      	ldr	r3, [pc, #156]	@ (8005d60 <ESP_Upkeep+0x8c0>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d13d      	bne.n	8005d46 <ESP_Upkeep+0x8a6>
            Mode = AT_MODE_GETTIME;
 8005cca:	4b25      	ldr	r3, [pc, #148]	@ (8005d60 <ESP_Upkeep+0x8c0>)
 8005ccc:	2205      	movs	r2, #5
 8005cce:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005cd0:	4b25      	ldr	r3, [pc, #148]	@ (8005d68 <ESP_Upkeep+0x8c8>)
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005d54 <ESP_Upkeep+0x8b4>)
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b2a      	ldr	r3, [pc, #168]	@ (8005d84 <ESP_Upkeep+0x8e4>)
 8005cdc:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005cde:	4b2a      	ldr	r3, [pc, #168]	@ (8005d88 <ESP_Upkeep+0x8e8>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	701a      	strb	r2, [r3, #0]
 //        Debug("setTime to true");
        }
      }
      break;
 8005ce4:	e02f      	b.n	8005d46 <ESP_Upkeep+0x8a6>
 8005ce6:	e02e      	b.n	8005d46 <ESP_Upkeep+0x8a6>

    case ESP_STATE_CONFIG:
      Info("Do nothing until reset");
 8005ce8:	4a22      	ldr	r2, [pc, #136]	@ (8005d74 <ESP_Upkeep+0x8d4>)
 8005cea:	4b23      	ldr	r3, [pc, #140]	@ (8005d78 <ESP_Upkeep+0x8d8>)
 8005cec:	0019      	movs	r1, r3
 8005cee:	2002      	movs	r0, #2
 8005cf0:	f008 fb20 	bl	800e334 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8005cf4:	f016 ffb4 	bl	801cc60 <GetUsbRxPointer>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 f8be 	bl	8005e7c <Process_PC_Config>
      break;
 8005d00:	e022      	b.n	8005d48 <ESP_Upkeep+0x8a8>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005d02:	4a22      	ldr	r2, [pc, #136]	@ (8005d8c <ESP_Upkeep+0x8ec>)
 8005d04:	4b22      	ldr	r3, [pc, #136]	@ (8005d90 <ESP_Upkeep+0x8f0>)
 8005d06:	0019      	movs	r1, r3
 8005d08:	2001      	movs	r0, #1
 8005d0a:	f008 fb13 	bl	800e334 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005d0e:	4b16      	ldr	r3, [pc, #88]	@ (8005d68 <ESP_Upkeep+0x8c8>)
 8005d10:	2202      	movs	r2, #2
 8005d12:	701a      	strb	r2, [r3, #0]
      break;
 8005d14:	e018      	b.n	8005d48 <ESP_Upkeep+0x8a8>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005d16:	4a1f      	ldr	r2, [pc, #124]	@ (8005d94 <ESP_Upkeep+0x8f4>)
 8005d18:	4b1d      	ldr	r3, [pc, #116]	@ (8005d90 <ESP_Upkeep+0x8f0>)
 8005d1a:	0019      	movs	r1, r3
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	f008 fb09 	bl	800e334 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005d22:	4b11      	ldr	r3, [pc, #68]	@ (8005d68 <ESP_Upkeep+0x8c8>)
 8005d24:	2207      	movs	r2, #7
 8005d26:	701a      	strb	r2, [r3, #0]
      break;
 8005d28:	e00e      	b.n	8005d48 <ESP_Upkeep+0x8a8>
      break;
 8005d2a:	46c0      	nop			@ (mov r8, r8)
 8005d2c:	e00c      	b.n	8005d48 <ESP_Upkeep+0x8a8>
      break;
 8005d2e:	46c0      	nop			@ (mov r8, r8)
 8005d30:	e00a      	b.n	8005d48 <ESP_Upkeep+0x8a8>
        break;
 8005d32:	46c0      	nop			@ (mov r8, r8)
 8005d34:	e008      	b.n	8005d48 <ESP_Upkeep+0x8a8>
    break;
 8005d36:	46c0      	nop			@ (mov r8, r8)
 8005d38:	e006      	b.n	8005d48 <ESP_Upkeep+0x8a8>
    break;
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	e004      	b.n	8005d48 <ESP_Upkeep+0x8a8>
      break;
 8005d3e:	46c0      	nop			@ (mov r8, r8)
 8005d40:	e002      	b.n	8005d48 <ESP_Upkeep+0x8a8>
    break;
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	e000      	b.n	8005d48 <ESP_Upkeep+0x8a8>
      break;
 8005d46:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005d48:	4b07      	ldr	r3, [pc, #28]	@ (8005d68 <ESP_Upkeep+0x8c8>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
}
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	b002      	add	sp, #8
 8005d52:	bdb0      	pop	{r4, r5, r7, pc}
 8005d54:	20000a1c 	.word	0x20000a1c
 8005d58:	2000054f 	.word	0x2000054f
 8005d5c:	20000553 	.word	0x20000553
 8005d60:	20000a2b 	.word	0x20000a2b
 8005d64:	2000054d 	.word	0x2000054d
 8005d68:	20000028 	.word	0x20000028
 8005d6c:	20000550 	.word	0x20000550
 8005d70:	20000552 	.word	0x20000552
 8005d74:	08023aac 	.word	0x08023aac
 8005d78:	08023a44 	.word	0x08023a44
 8005d7c:	20000551 	.word	0x20000551
 8005d80:	20000a20 	.word	0x20000a20
 8005d84:	20000a24 	.word	0x20000a24
 8005d88:	20000001 	.word	0x20000001
 8005d8c:	08023ac4 	.word	0x08023ac4
 8005d90:	0802301c 	.word	0x0802301c
 8005d94:	08023ad8 	.word	0x08023ad8

08005d98 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005da0:	4b09      	ldr	r3, [pc, #36]	@ (8005dc8 <I2CSensors_Init+0x30>)
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005da6:	4a09      	ldr	r2, [pc, #36]	@ (8005dcc <I2CSensors_Init+0x34>)
 8005da8:	4b09      	ldr	r3, [pc, #36]	@ (8005dd0 <I2CSensors_Init+0x38>)
 8005daa:	0011      	movs	r1, r2
 8005dac:	0018      	movs	r0, r3
 8005dae:	f008 fc25 	bl	800e5fc <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005db2:	4a06      	ldr	r2, [pc, #24]	@ (8005dcc <I2CSensors_Init+0x34>)
 8005db4:	4b06      	ldr	r3, [pc, #24]	@ (8005dd0 <I2CSensors_Init+0x38>)
 8005db6:	0011      	movs	r1, r2
 8005db8:	0018      	movs	r0, r3
 8005dba:	f005 fc67 	bl	800b68c <SGP_Init>
}
 8005dbe:	46c0      	nop			@ (mov r8, r8)
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	b002      	add	sp, #8
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			@ (mov r8, r8)
 8005dc8:	20000b40 	.word	0x20000b40
 8005dcc:	08005e29 	.word	0x08005e29
 8005dd0:	08005dd5 	.word	0x08005dd5

08005dd4 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005dd4:	b5b0      	push	{r4, r5, r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6039      	str	r1, [r7, #0]
 8005ddc:	0011      	movs	r1, r2
 8005dde:	1dfb      	adds	r3, r7, #7
 8005de0:	1c02      	adds	r2, r0, #0
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	1dbb      	adds	r3, r7, #6
 8005de6:	1c0a      	adds	r2, r1, #0
 8005de8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005dea:	4b0e      	ldr	r3, [pc, #56]	@ (8005e24 <ReadI2C+0x50>)
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	1dfb      	adds	r3, r7, #7
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	18db      	adds	r3, r3, r3
 8005df6:	b299      	uxth	r1, r3
 8005df8:	1dbb      	adds	r3, r7, #6
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	250f      	movs	r5, #15
 8005e00:	197c      	adds	r4, r7, r5
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	f00a fd62 	bl	80108cc <HAL_I2C_Master_Receive_DMA>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005e0c:	197b      	adds	r3, r7, r5
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <ReadI2C+0x44>
        return false;
 8005e14:	2300      	movs	r3, #0
 8005e16:	e000      	b.n	8005e1a <ReadI2C+0x46>
    }
    return true;
 8005e18:	2301      	movs	r3, #1
}
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b004      	add	sp, #16
 8005e20:	bdb0      	pop	{r4, r5, r7, pc}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	20000b40 	.word	0x20000b40

08005e28 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e28:	b5b0      	push	{r4, r5, r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6039      	str	r1, [r7, #0]
 8005e30:	0011      	movs	r1, r2
 8005e32:	1dfb      	adds	r3, r7, #7
 8005e34:	1c02      	adds	r2, r0, #0
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	1dbb      	adds	r3, r7, #6
 8005e3a:	1c0a      	adds	r2, r1, #0
 8005e3c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e78 <WriteI2C+0x50>)
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	1dfb      	adds	r3, r7, #7
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	18db      	adds	r3, r3, r3
 8005e4a:	b299      	uxth	r1, r3
 8005e4c:	1dbb      	adds	r3, r7, #6
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	250f      	movs	r5, #15
 8005e54:	197c      	adds	r4, r7, r5
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	f00a fc32 	bl	80106c0 <HAL_I2C_Master_Transmit_DMA>
 8005e5c:	0003      	movs	r3, r0
 8005e5e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005e60:	197b      	adds	r3, r7, r5
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <WriteI2C+0x44>
        return false;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e000      	b.n	8005e6e <WriteI2C+0x46>
    }
    return true;
 8005e6c:	2301      	movs	r3, #1
}
 8005e6e:	0018      	movs	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	b004      	add	sp, #16
 8005e74:	bdb0      	pop	{r4, r5, r7, pc}
 8005e76:	46c0      	nop			@ (mov r8, r8)
 8005e78:	20000b40 	.word	0x20000b40

08005e7c <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005e7c:	b590      	push	{r4, r7, lr}
 8005e7e:	b0c3      	sub	sp, #268	@ 0x10c
 8005e80:	af3e      	add	r7, sp, #248	@ 0xf8
 8005e82:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005e84:	f016 ff0c 	bl	801cca0 <GetUsbRxDataSize>
 8005e88:	0003      	movs	r3, r0
 8005e8a:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	d971      	bls.n	8005f76 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2123      	movs	r1, #35	@ 0x23
 8005e96:	0018      	movs	r0, r3
 8005e98:	f01a f902 	bl	80200a0 <strchr>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d065      	beq.n	8005f72 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	785a      	ldrb	r2, [r3, #1]
 8005eaa:	4b34      	ldr	r3, [pc, #208]	@ (8005f7c <Process_PC_Config+0x100>)
 8005eac:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	789a      	ldrb	r2, [r3, #2]
 8005eb2:	4b32      	ldr	r3, [pc, #200]	@ (8005f7c <Process_PC_Config+0x100>)
 8005eb4:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005eb6:	4b31      	ldr	r3, [pc, #196]	@ (8005f7c <Process_PC_Config+0x100>)
 8005eb8:	785b      	ldrb	r3, [r3, #1]
 8005eba:	3305      	adds	r3, #5
 8005ebc:	001a      	movs	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d351      	bcc.n	8005f68 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	1cd9      	adds	r1, r3, #3
 8005ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8005f7c <Process_PC_Config+0x100>)
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	001a      	movs	r2, r3
 8005ece:	4b2c      	ldr	r3, [pc, #176]	@ (8005f80 <Process_PC_Config+0x104>)
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f01a f9b9 	bl	8020248 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005ed6:	4b29      	ldr	r3, [pc, #164]	@ (8005f7c <Process_PC_Config+0x100>)
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	3303      	adds	r3, #3
 8005edc:	001a      	movs	r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	189b      	adds	r3, r3, r2
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	b21a      	sxth	r2, r3
 8005ee8:	4b24      	ldr	r3, [pc, #144]	@ (8005f7c <Process_PC_Config+0x100>)
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	3304      	adds	r3, #4
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	18cb      	adds	r3, r1, r3
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b21b      	sxth	r3, r3
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	b21b      	sxth	r3, r3
 8005efa:	b299      	uxth	r1, r3
 8005efc:	4a1f      	ldr	r2, [pc, #124]	@ (8005f7c <Process_PC_Config+0x100>)
 8005efe:	2381      	movs	r3, #129	@ 0x81
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005f04:	4a1d      	ldr	r2, [pc, #116]	@ (8005f7c <Process_PC_Config+0x100>)
 8005f06:	2381      	movs	r3, #129	@ 0x81
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	5ad4      	ldrh	r4, [r2, r3]
 8005f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005f7c <Process_PC_Config+0x100>)
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	3303      	adds	r3, #3
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	0011      	movs	r1, r2
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f000 f975 	bl	8006208 <CRC16_ARC>
 8005f1e:	0003      	movs	r3, r0
 8005f20:	429c      	cmp	r4, r3
 8005f22:	d007      	beq.n	8005f34 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005f24:	4b15      	ldr	r3, [pc, #84]	@ (8005f7c <Process_PC_Config+0x100>)
 8005f26:	785a      	ldrb	r2, [r3, #1]
 8005f28:	4b15      	ldr	r3, [pc, #84]	@ (8005f80 <Process_PC_Config+0x104>)
 8005f2a:	0019      	movs	r1, r3
 8005f2c:	2001      	movs	r0, #1
 8005f2e:	f000 f919 	bl	8006164 <Create_Message>
 8005f32:	e016      	b.n	8005f62 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005f34:	4c11      	ldr	r4, [pc, #68]	@ (8005f7c <Process_PC_Config+0x100>)
 8005f36:	466b      	mov	r3, sp
 8005f38:	0018      	movs	r0, r3
 8005f3a:	0023      	movs	r3, r4
 8005f3c:	3310      	adds	r3, #16
 8005f3e:	22f4      	movs	r2, #244	@ 0xf4
 8005f40:	0019      	movs	r1, r3
 8005f42:	f01a f981 	bl	8020248 <memcpy>
 8005f46:	6820      	ldr	r0, [r4, #0]
 8005f48:	6861      	ldr	r1, [r4, #4]
 8005f4a:	68a2      	ldr	r2, [r4, #8]
 8005f4c:	68e3      	ldr	r3, [r4, #12]
 8005f4e:	f000 f819 	bl	8005f84 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005f52:	4b0a      	ldr	r3, [pc, #40]	@ (8005f7c <Process_PC_Config+0x100>)
 8005f54:	7818      	ldrb	r0, [r3, #0]
 8005f56:	4b09      	ldr	r3, [pc, #36]	@ (8005f7c <Process_PC_Config+0x100>)
 8005f58:	785a      	ldrb	r2, [r3, #1]
 8005f5a:	4b09      	ldr	r3, [pc, #36]	@ (8005f80 <Process_PC_Config+0x104>)
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	f000 f901 	bl	8006164 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005f62:	f016 fe85 	bl	801cc70 <ResetUsbRxDataSize>
                return;
 8005f66:	e006      	b.n	8005f76 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f016 fea2 	bl	801ccb4 <GetUsbRxNextChunk>
 8005f70:	e001      	b.n	8005f76 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005f72:	f016 fe7d 	bl	801cc70 <ResetUsbRxDataSize>
        }
    }
}
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b005      	add	sp, #20
 8005f7a:	bd90      	pop	{r4, r7, pc}
 8005f7c:	20000b44 	.word	0x20000b44
 8005f80:	20000b46 	.word	0x20000b46

08005f84 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005f84:	b084      	sub	sp, #16
 8005f86:	b5b0      	push	{r4, r5, r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	2518      	movs	r5, #24
 8005f8e:	197c      	adds	r4, r7, r5
 8005f90:	6020      	str	r0, [r4, #0]
 8005f92:	6061      	str	r1, [r4, #4]
 8005f94:	60a2      	str	r2, [r4, #8]
 8005f96:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005f98:	197b      	adds	r3, r7, r5
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2bfe      	cmp	r3, #254	@ 0xfe
 8005f9e:	d100      	bne.n	8005fa2 <ProcessCmd+0x1e>
 8005fa0:	e09c      	b.n	80060dc <ProcessCmd+0x158>
 8005fa2:	dd00      	ble.n	8005fa6 <ProcessCmd+0x22>
 8005fa4:	e0bc      	b.n	8006120 <ProcessCmd+0x19c>
 8005fa6:	2b0c      	cmp	r3, #12
 8005fa8:	dc0a      	bgt.n	8005fc0 <ProcessCmd+0x3c>
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	da00      	bge.n	8005fb0 <ProcessCmd+0x2c>
 8005fae:	e0b7      	b.n	8006120 <ProcessCmd+0x19c>
 8005fb0:	2b0c      	cmp	r3, #12
 8005fb2:	d900      	bls.n	8005fb6 <ProcessCmd+0x32>
 8005fb4:	e0b4      	b.n	8006120 <ProcessCmd+0x19c>
 8005fb6:	009a      	lsls	r2, r3, #2
 8005fb8:	4b5d      	ldr	r3, [pc, #372]	@ (8006130 <ProcessCmd+0x1ac>)
 8005fba:	18d3      	adds	r3, r2, r3
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	469f      	mov	pc, r3
 8005fc0:	2bfd      	cmp	r3, #253	@ 0xfd
 8005fc2:	d100      	bne.n	8005fc6 <ProcessCmd+0x42>
 8005fc4:	e084      	b.n	80060d0 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005fc6:	e0ab      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005fc8:	2118      	movs	r1, #24
 8005fca:	187b      	adds	r3, r7, r1
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	001a      	movs	r2, r3
 8005fd0:	187b      	adds	r3, r7, r1
 8005fd2:	1c99      	adds	r1, r3, #2
 8005fd4:	4857      	ldr	r0, [pc, #348]	@ (8006134 <ProcessCmd+0x1b0>)
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	f7fd fb72 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005fdc:	e0a0      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005fde:	2118      	movs	r1, #24
 8005fe0:	187b      	adds	r3, r7, r1
 8005fe2:	785b      	ldrb	r3, [r3, #1]
 8005fe4:	001a      	movs	r2, r3
 8005fe6:	187b      	adds	r3, r7, r1
 8005fe8:	1c99      	adds	r1, r3, #2
 8005fea:	4853      	ldr	r0, [pc, #332]	@ (8006138 <ProcessCmd+0x1b4>)
 8005fec:	230c      	movs	r3, #12
 8005fee:	f7fd fb67 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ff2:	e095      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ff4:	2118      	movs	r1, #24
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	001a      	movs	r2, r3
 8005ffc:	187b      	adds	r3, r7, r1
 8005ffe:	1c99      	adds	r1, r3, #2
 8006000:	484e      	ldr	r0, [pc, #312]	@ (800613c <ProcessCmd+0x1b8>)
 8006002:	230c      	movs	r3, #12
 8006004:	f7fd fb5c 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006008:	e08a      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800600a:	2118      	movs	r1, #24
 800600c:	187b      	adds	r3, r7, r1
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	001a      	movs	r2, r3
 8006012:	187b      	adds	r3, r7, r1
 8006014:	1c99      	adds	r1, r3, #2
 8006016:	484a      	ldr	r0, [pc, #296]	@ (8006140 <ProcessCmd+0x1bc>)
 8006018:	230c      	movs	r3, #12
 800601a:	f7fd fb51 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800601e:	e07f      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006020:	2118      	movs	r1, #24
 8006022:	187b      	adds	r3, r7, r1
 8006024:	785b      	ldrb	r3, [r3, #1]
 8006026:	001a      	movs	r2, r3
 8006028:	187b      	adds	r3, r7, r1
 800602a:	1c99      	adds	r1, r3, #2
 800602c:	4845      	ldr	r0, [pc, #276]	@ (8006144 <ProcessCmd+0x1c0>)
 800602e:	230c      	movs	r3, #12
 8006030:	f7fd fb46 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006034:	e074      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006036:	2118      	movs	r1, #24
 8006038:	187b      	adds	r3, r7, r1
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	001a      	movs	r2, r3
 800603e:	187b      	adds	r3, r7, r1
 8006040:	1c99      	adds	r1, r3, #2
 8006042:	4841      	ldr	r0, [pc, #260]	@ (8006148 <ProcessCmd+0x1c4>)
 8006044:	230c      	movs	r3, #12
 8006046:	f7fd fb3b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800604a:	e069      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800604c:	2118      	movs	r1, #24
 800604e:	187b      	adds	r3, r7, r1
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	001a      	movs	r2, r3
 8006054:	187b      	adds	r3, r7, r1
 8006056:	1c99      	adds	r1, r3, #2
 8006058:	483c      	ldr	r0, [pc, #240]	@ (800614c <ProcessCmd+0x1c8>)
 800605a:	230c      	movs	r3, #12
 800605c:	f7fd fb30 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006060:	e05e      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8006062:	2118      	movs	r1, #24
 8006064:	187b      	adds	r3, r7, r1
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	001a      	movs	r2, r3
 800606a:	187b      	adds	r3, r7, r1
 800606c:	1c99      	adds	r1, r3, #2
 800606e:	4838      	ldr	r0, [pc, #224]	@ (8006150 <ProcessCmd+0x1cc>)
 8006070:	231e      	movs	r3, #30
 8006072:	f7fd fb25 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006076:	e053      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006078:	2118      	movs	r1, #24
 800607a:	187b      	adds	r3, r7, r1
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	001a      	movs	r2, r3
 8006080:	187b      	adds	r3, r7, r1
 8006082:	1c99      	adds	r1, r3, #2
 8006084:	4833      	ldr	r0, [pc, #204]	@ (8006154 <ProcessCmd+0x1d0>)
 8006086:	230c      	movs	r3, #12
 8006088:	f7fd fb1a 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800608c:	e048      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800608e:	2118      	movs	r1, #24
 8006090:	187b      	adds	r3, r7, r1
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	001a      	movs	r2, r3
 8006096:	187b      	adds	r3, r7, r1
 8006098:	1c99      	adds	r1, r3, #2
 800609a:	482f      	ldr	r0, [pc, #188]	@ (8006158 <ProcessCmd+0x1d4>)
 800609c:	230c      	movs	r3, #12
 800609e:	f7fd fb0f 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060a2:	e03d      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060a4:	2118      	movs	r1, #24
 80060a6:	187b      	adds	r3, r7, r1
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	001a      	movs	r2, r3
 80060ac:	187b      	adds	r3, r7, r1
 80060ae:	1c99      	adds	r1, r3, #2
 80060b0:	482a      	ldr	r0, [pc, #168]	@ (800615c <ProcessCmd+0x1d8>)
 80060b2:	230c      	movs	r3, #12
 80060b4:	f7fd fb04 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060b8:	e032      	b.n	8006120 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060ba:	2118      	movs	r1, #24
 80060bc:	187b      	adds	r3, r7, r1
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	001a      	movs	r2, r3
 80060c2:	187b      	adds	r3, r7, r1
 80060c4:	1c99      	adds	r1, r3, #2
 80060c6:	4826      	ldr	r0, [pc, #152]	@ (8006160 <ProcessCmd+0x1dc>)
 80060c8:	230c      	movs	r3, #12
 80060ca:	f7fd faf9 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060ce:	e027      	b.n	8006120 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80060d0:	4b18      	ldr	r3, [pc, #96]	@ (8006134 <ProcessCmd+0x1b0>)
 80060d2:	21ba      	movs	r1, #186	@ 0xba
 80060d4:	0018      	movs	r0, r3
 80060d6:	f7fd fb38 	bl	800374a <ClearEEprom>
        break;
 80060da:	e021      	b.n	8006120 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80060dc:	2118      	movs	r1, #24
 80060de:	187b      	adds	r3, r7, r1
 80060e0:	789b      	ldrb	r3, [r3, #2]
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	b21a      	sxth	r2, r3
 80060e6:	187b      	adds	r3, r7, r1
 80060e8:	78db      	ldrb	r3, [r3, #3]
 80060ea:	b21b      	sxth	r3, r3
 80060ec:	4313      	orrs	r3, r2
 80060ee:	b21a      	sxth	r2, r3
 80060f0:	1dbb      	adds	r3, r7, #6
 80060f2:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80060f4:	1dbb      	adds	r3, r7, #6
 80060f6:	881a      	ldrh	r2, [r3, #0]
 80060f8:	23c0      	movs	r3, #192	@ 0xc0
 80060fa:	015b      	lsls	r3, r3, #5
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d207      	bcs.n	8006110 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006100:	1dbb      	adds	r3, r7, #6
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	4a0b      	ldr	r2, [pc, #44]	@ (8006134 <ProcessCmd+0x1b0>)
 8006106:	0019      	movs	r1, r3
 8006108:	0010      	movs	r0, r2
 800610a:	f7fd fb1e 	bl	800374a <ClearEEprom>
            break;
 800610e:	e006      	b.n	800611e <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006110:	23c0      	movs	r3, #192	@ 0xc0
 8006112:	015b      	lsls	r3, r3, #5
 8006114:	4a07      	ldr	r2, [pc, #28]	@ (8006134 <ProcessCmd+0x1b0>)
 8006116:	0019      	movs	r1, r3
 8006118:	0010      	movs	r0, r2
 800611a:	f7fd fb16 	bl	800374a <ClearEEprom>
            break;
 800611e:	46c0      	nop			@ (mov r8, r8)
}
 8006120:	46c0      	nop			@ (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b002      	add	sp, #8
 8006126:	bcb0      	pop	{r4, r5, r7}
 8006128:	bc08      	pop	{r3}
 800612a:	b004      	add	sp, #16
 800612c:	4718      	bx	r3
 800612e:	46c0      	nop			@ (mov r8, r8)
 8006130:	08025290 	.word	0x08025290
 8006134:	08080000 	.word	0x08080000
 8006138:	0808000c 	.word	0x0808000c
 800613c:	08080018 	.word	0x08080018
 8006140:	08080024 	.word	0x08080024
 8006144:	08080030 	.word	0x08080030
 8006148:	0808003c 	.word	0x0808003c
 800614c:	08080048 	.word	0x08080048
 8006150:	08080090 	.word	0x08080090
 8006154:	08080078 	.word	0x08080078
 8006158:	0808006c 	.word	0x0808006c
 800615c:	08080060 	.word	0x08080060
 8006160:	08080054 	.word	0x08080054

08006164 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8006164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6039      	str	r1, [r7, #0]
 800616c:	0011      	movs	r1, r2
 800616e:	1dfb      	adds	r3, r7, #7
 8006170:	1c02      	adds	r2, r0, #0
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	1dbb      	adds	r3, r7, #6
 8006176:	1c0a      	adds	r2, r1, #0
 8006178:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 800617a:	2223      	movs	r2, #35	@ 0x23
 800617c:	4b20      	ldr	r3, [pc, #128]	@ (8006200 <Create_Message+0x9c>)
 800617e:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8006180:	4b1f      	ldr	r3, [pc, #124]	@ (8006200 <Create_Message+0x9c>)
 8006182:	1dfa      	adds	r2, r7, #7
 8006184:	7812      	ldrb	r2, [r2, #0]
 8006186:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8006188:	4b1d      	ldr	r3, [pc, #116]	@ (8006200 <Create_Message+0x9c>)
 800618a:	1dba      	adds	r2, r7, #6
 800618c:	7812      	ldrb	r2, [r2, #0]
 800618e:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8006190:	1dbb      	adds	r3, r7, #6
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	4b1b      	ldr	r3, [pc, #108]	@ (8006204 <Create_Message+0xa0>)
 8006198:	0018      	movs	r0, r3
 800619a:	f01a f855 	bl	8020248 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800619e:	1dbb      	adds	r3, r7, #6
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	250e      	movs	r5, #14
 80061a6:	197b      	adds	r3, r7, r5
 80061a8:	3203      	adds	r2, #3
 80061aa:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80061ac:	260c      	movs	r6, #12
 80061ae:	19bc      	adds	r4, r7, r6
 80061b0:	197b      	adds	r3, r7, r5
 80061b2:	881a      	ldrh	r2, [r3, #0]
 80061b4:	4b12      	ldr	r3, [pc, #72]	@ (8006200 <Create_Message+0x9c>)
 80061b6:	0011      	movs	r1, r2
 80061b8:	0018      	movs	r0, r3
 80061ba:	f000 f825 	bl	8006208 <CRC16_ARC>
 80061be:	0003      	movs	r3, r0
 80061c0:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 80061c2:	0030      	movs	r0, r6
 80061c4:	183b      	adds	r3, r7, r0
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	197b      	adds	r3, r7, r5
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b2d1      	uxtb	r1, r2
 80061d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006200 <Create_Message+0x9c>)
 80061d4:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80061d6:	197b      	adds	r3, r7, r5
 80061d8:	881b      	ldrh	r3, [r3, #0]
 80061da:	3301      	adds	r3, #1
 80061dc:	183a      	adds	r2, r7, r0
 80061de:	8812      	ldrh	r2, [r2, #0]
 80061e0:	b2d1      	uxtb	r1, r2
 80061e2:	4a07      	ldr	r2, [pc, #28]	@ (8006200 <Create_Message+0x9c>)
 80061e4:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80061e6:	197b      	adds	r3, r7, r5
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	3302      	adds	r3, #2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	4b04      	ldr	r3, [pc, #16]	@ (8006200 <Create_Message+0x9c>)
 80061f0:	0011      	movs	r1, r2
 80061f2:	0018      	movs	r0, r3
 80061f4:	f016 fcfa 	bl	801cbec <CDC_Transmit_FS>
}
 80061f8:	46c0      	nop			@ (mov r8, r8)
 80061fa:	46bd      	mov	sp, r7
 80061fc:	b005      	add	sp, #20
 80061fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006200:	20000c48 	.word	0x20000c48
 8006204:	20000c4b 	.word	0x20000c4b

08006208 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	000a      	movs	r2, r1
 8006212:	1cbb      	adds	r3, r7, #2
 8006214:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8006216:	2316      	movs	r3, #22
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	2200      	movs	r2, #0
 800621c:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	e02e      	b.n	8006282 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	18d3      	adds	r3, r2, r3
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	0019      	movs	r1, r3
 800622e:	2216      	movs	r2, #22
 8006230:	18bb      	adds	r3, r7, r2
 8006232:	18ba      	adds	r2, r7, r2
 8006234:	8812      	ldrh	r2, [r2, #0]
 8006236:	404a      	eors	r2, r1
 8006238:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	e01a      	b.n	8006276 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8006240:	2116      	movs	r1, #22
 8006242:	187b      	adds	r3, r7, r1
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	2201      	movs	r2, #1
 8006248:	4013      	ands	r3, r2
 800624a:	d00b      	beq.n	8006264 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 800624c:	187b      	adds	r3, r7, r1
 800624e:	187a      	adds	r2, r7, r1
 8006250:	8812      	ldrh	r2, [r2, #0]
 8006252:	0852      	lsrs	r2, r2, #1
 8006254:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8006256:	187b      	adds	r3, r7, r1
 8006258:	187a      	adds	r2, r7, r1
 800625a:	8812      	ldrh	r2, [r2, #0]
 800625c:	490f      	ldr	r1, [pc, #60]	@ (800629c <CRC16_ARC+0x94>)
 800625e:	404a      	eors	r2, r1
 8006260:	801a      	strh	r2, [r3, #0]
 8006262:	e005      	b.n	8006270 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8006264:	2216      	movs	r2, #22
 8006266:	18bb      	adds	r3, r7, r2
 8006268:	18ba      	adds	r2, r7, r2
 800626a:	8812      	ldrh	r2, [r2, #0]
 800626c:	0852      	lsrs	r2, r2, #1
 800626e:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b07      	cmp	r3, #7
 800627a:	dde1      	ble.n	8006240 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	3301      	adds	r3, #1
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	1cbb      	adds	r3, r7, #2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	429a      	cmp	r2, r3
 800628a:	dbcb      	blt.n	8006224 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 800628c:	2316      	movs	r3, #22
 800628e:	18fb      	adds	r3, r7, r3
 8006290:	881b      	ldrh	r3, [r3, #0]
}
 8006292:	0018      	movs	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	b006      	add	sp, #24
 8006298:	bd80      	pop	{r7, pc}
 800629a:	46c0      	nop			@ (mov r8, r8)
 800629c:	ffffa001 	.word	0xffffa001

080062a0 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 80062a4:	4b26      	ldr	r3, [pc, #152]	@ (8006340 <ReadBatteryVoltage+0xa0>)
 80062a6:	4a27      	ldr	r2, [pc, #156]	@ (8006344 <ReadBatteryVoltage+0xa4>)
 80062a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80062aa:	4b25      	ldr	r3, [pc, #148]	@ (8006340 <ReadBatteryVoltage+0xa0>)
 80062ac:	2280      	movs	r2, #128	@ 0x80
 80062ae:	0152      	lsls	r2, r2, #5
 80062b0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80062b2:	4a23      	ldr	r2, [pc, #140]	@ (8006340 <ReadBatteryVoltage+0xa0>)
 80062b4:	4b24      	ldr	r3, [pc, #144]	@ (8006348 <ReadBatteryVoltage+0xa8>)
 80062b6:	0011      	movs	r1, r2
 80062b8:	0018      	movs	r0, r3
 80062ba:	f008 ff69 	bl	800f190 <HAL_ADC_ConfigChannel>
 80062be:	1e03      	subs	r3, r0, #0
 80062c0:	d001      	beq.n	80062c6 <ReadBatteryVoltage+0x26>
    Error_Handler();
 80062c2:	f001 fff1 	bl	80082a8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80062c6:	4b20      	ldr	r3, [pc, #128]	@ (8006348 <ReadBatteryVoltage+0xa8>)
 80062c8:	0018      	movs	r0, r3
 80062ca:	f008 fe65 	bl	800ef98 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80062ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006348 <ReadBatteryVoltage+0xa8>)
 80062d0:	2101      	movs	r1, #1
 80062d2:	0018      	movs	r0, r3
 80062d4:	f008 feb4 	bl	800f040 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 80062d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006348 <ReadBatteryVoltage+0xa8>)
 80062da:	0018      	movs	r0, r3
 80062dc:	f008 ff4c 	bl	800f178 <HAL_ADC_GetValue>
 80062e0:	0002      	movs	r2, r0
 80062e2:	4b1a      	ldr	r3, [pc, #104]	@ (800634c <ReadBatteryVoltage+0xac>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4353      	muls	r3, r2
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	4919      	ldr	r1, [pc, #100]	@ (8006350 <ReadBatteryVoltage+0xb0>)
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7f9 ff59 	bl	80001a4 <__udivsi3>
 80062f2:	0003      	movs	r3, r0
 80062f4:	001a      	movs	r2, r3
 80062f6:	4b17      	ldr	r3, [pc, #92]	@ (8006354 <ReadBatteryVoltage+0xb4>)
 80062f8:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 80062fa:	4b16      	ldr	r3, [pc, #88]	@ (8006354 <ReadBatteryVoltage+0xb4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	0018      	movs	r0, r3
 8006300:	f7fb f9b2 	bl	8001668 <__aeabi_ui2f>
 8006304:	1c03      	adds	r3, r0, #0
 8006306:	4914      	ldr	r1, [pc, #80]	@ (8006358 <ReadBatteryVoltage+0xb8>)
 8006308:	1c18      	adds	r0, r3, #0
 800630a:	f7fa fc63 	bl	8000bd4 <__aeabi_fdiv>
 800630e:	1c03      	adds	r3, r0, #0
 8006310:	1c1a      	adds	r2, r3, #0
 8006312:	4b12      	ldr	r3, [pc, #72]	@ (800635c <ReadBatteryVoltage+0xbc>)
 8006314:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006316:	4b0a      	ldr	r3, [pc, #40]	@ (8006340 <ReadBatteryVoltage+0xa0>)
 8006318:	4a0a      	ldr	r2, [pc, #40]	@ (8006344 <ReadBatteryVoltage+0xa4>)
 800631a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800631c:	4b08      	ldr	r3, [pc, #32]	@ (8006340 <ReadBatteryVoltage+0xa0>)
 800631e:	4a10      	ldr	r2, [pc, #64]	@ (8006360 <ReadBatteryVoltage+0xc0>)
 8006320:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006322:	4a07      	ldr	r2, [pc, #28]	@ (8006340 <ReadBatteryVoltage+0xa0>)
 8006324:	4b08      	ldr	r3, [pc, #32]	@ (8006348 <ReadBatteryVoltage+0xa8>)
 8006326:	0011      	movs	r1, r2
 8006328:	0018      	movs	r0, r3
 800632a:	f008 ff31 	bl	800f190 <HAL_ADC_ConfigChannel>
 800632e:	1e03      	subs	r3, r0, #0
 8006330:	d001      	beq.n	8006336 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006332:	f001 ffb9 	bl	80082a8 <Error_Handler>
  }
  return trueValue;
 8006336:	4b09      	ldr	r3, [pc, #36]	@ (800635c <ReadBatteryVoltage+0xbc>)
 8006338:	681b      	ldr	r3, [r3, #0]
 }
 800633a:	1c18      	adds	r0, r3, #0
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000d50 	.word	0x20000d50
 8006344:	38004000 	.word	0x38004000
 8006348:	20000d90 	.word	0x20000d90
 800634c:	2000002c 	.word	0x2000002c
 8006350:	00000fff 	.word	0x00000fff
 8006354:	20000d58 	.word	0x20000d58
 8006358:	447a0000 	.word	0x447a0000
 800635c:	20000d5c 	.word	0x20000d5c
 8006360:	00001001 	.word	0x00001001

08006364 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8006368:	4b27      	ldr	r3, [pc, #156]	@ (8006408 <ReadSolarVoltage+0xa4>)
 800636a:	4a28      	ldr	r2, [pc, #160]	@ (800640c <ReadSolarVoltage+0xa8>)
 800636c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800636e:	4b26      	ldr	r3, [pc, #152]	@ (8006408 <ReadSolarVoltage+0xa4>)
 8006370:	2280      	movs	r2, #128	@ 0x80
 8006372:	0152      	lsls	r2, r2, #5
 8006374:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006376:	4a24      	ldr	r2, [pc, #144]	@ (8006408 <ReadSolarVoltage+0xa4>)
 8006378:	4b25      	ldr	r3, [pc, #148]	@ (8006410 <ReadSolarVoltage+0xac>)
 800637a:	0011      	movs	r1, r2
 800637c:	0018      	movs	r0, r3
 800637e:	f008 ff07 	bl	800f190 <HAL_ADC_ConfigChannel>
 8006382:	1e03      	subs	r3, r0, #0
 8006384:	d001      	beq.n	800638a <ReadSolarVoltage+0x26>
    Error_Handler();
 8006386:	f001 ff8f 	bl	80082a8 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800638a:	4b21      	ldr	r3, [pc, #132]	@ (8006410 <ReadSolarVoltage+0xac>)
 800638c:	0018      	movs	r0, r3
 800638e:	f008 fe03 	bl	800ef98 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006392:	4b1f      	ldr	r3, [pc, #124]	@ (8006410 <ReadSolarVoltage+0xac>)
 8006394:	2101      	movs	r1, #1
 8006396:	0018      	movs	r0, r3
 8006398:	f008 fe52 	bl	800f040 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 800639c:	4b1c      	ldr	r3, [pc, #112]	@ (8006410 <ReadSolarVoltage+0xac>)
 800639e:	0018      	movs	r0, r3
 80063a0:	f008 feea 	bl	800f178 <HAL_ADC_GetValue>
 80063a4:	0002      	movs	r2, r0
 80063a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006414 <ReadSolarVoltage+0xb0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	435a      	muls	r2, r3
 80063ac:	0013      	movs	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	189b      	adds	r3, r3, r2
 80063b2:	4919      	ldr	r1, [pc, #100]	@ (8006418 <ReadSolarVoltage+0xb4>)
 80063b4:	0018      	movs	r0, r3
 80063b6:	f7f9 fef5 	bl	80001a4 <__udivsi3>
 80063ba:	0003      	movs	r3, r0
 80063bc:	001a      	movs	r2, r3
 80063be:	4b17      	ldr	r3, [pc, #92]	@ (800641c <ReadSolarVoltage+0xb8>)
 80063c0:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 80063c2:	4b16      	ldr	r3, [pc, #88]	@ (800641c <ReadSolarVoltage+0xb8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	0018      	movs	r0, r3
 80063c8:	f7fb f94e 	bl	8001668 <__aeabi_ui2f>
 80063cc:	1c03      	adds	r3, r0, #0
 80063ce:	4914      	ldr	r1, [pc, #80]	@ (8006420 <ReadSolarVoltage+0xbc>)
 80063d0:	1c18      	adds	r0, r3, #0
 80063d2:	f7fa fbff 	bl	8000bd4 <__aeabi_fdiv>
 80063d6:	1c03      	adds	r3, r0, #0
 80063d8:	1c1a      	adds	r2, r3, #0
 80063da:	4b12      	ldr	r3, [pc, #72]	@ (8006424 <ReadSolarVoltage+0xc0>)
 80063dc:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 80063de:	4b0a      	ldr	r3, [pc, #40]	@ (8006408 <ReadSolarVoltage+0xa4>)
 80063e0:	4a0a      	ldr	r2, [pc, #40]	@ (800640c <ReadSolarVoltage+0xa8>)
 80063e2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80063e4:	4b08      	ldr	r3, [pc, #32]	@ (8006408 <ReadSolarVoltage+0xa4>)
 80063e6:	4a10      	ldr	r2, [pc, #64]	@ (8006428 <ReadSolarVoltage+0xc4>)
 80063e8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80063ea:	4a07      	ldr	r2, [pc, #28]	@ (8006408 <ReadSolarVoltage+0xa4>)
 80063ec:	4b08      	ldr	r3, [pc, #32]	@ (8006410 <ReadSolarVoltage+0xac>)
 80063ee:	0011      	movs	r1, r2
 80063f0:	0018      	movs	r0, r3
 80063f2:	f008 fecd 	bl	800f190 <HAL_ADC_ConfigChannel>
 80063f6:	1e03      	subs	r3, r0, #0
 80063f8:	d001      	beq.n	80063fe <ReadSolarVoltage+0x9a>
    Error_Handler();
 80063fa:	f001 ff55 	bl	80082a8 <Error_Handler>
  }
  return trueValue;
 80063fe:	4b09      	ldr	r3, [pc, #36]	@ (8006424 <ReadSolarVoltage+0xc0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 }
 8006402:	1c18      	adds	r0, r3, #0
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20000d50 	.word	0x20000d50
 800640c:	3c008000 	.word	0x3c008000
 8006410:	20000d90 	.word	0x20000d90
 8006414:	2000002c 	.word	0x2000002c
 8006418:	00000fff 	.word	0x00000fff
 800641c:	20000d60 	.word	0x20000d60
 8006420:	447a0000 	.word	0x447a0000
 8006424:	20000d64 	.word	0x20000d64
 8006428:	00001001 	.word	0x00001001

0800642c <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006430:	23a0      	movs	r3, #160	@ 0xa0
 8006432:	05db      	lsls	r3, r3, #23
 8006434:	2180      	movs	r1, #128	@ 0x80
 8006436:	0018      	movs	r0, r3
 8006438:	f009 fe46 	bl	80100c8 <HAL_GPIO_ReadPin>
 800643c:	0003      	movs	r3, r0
 800643e:	1e5a      	subs	r2, r3, #1
 8006440:	4193      	sbcs	r3, r2
 8006442:	b2db      	uxtb	r3, r3
}
 8006444:	0018      	movs	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800644a:	b580      	push	{r7, lr}
 800644c:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800644e:	2380      	movs	r3, #128	@ 0x80
 8006450:	021a      	lsls	r2, r3, #8
 8006452:	23a0      	movs	r3, #160	@ 0xa0
 8006454:	05db      	lsls	r3, r3, #23
 8006456:	0011      	movs	r1, r2
 8006458:	0018      	movs	r0, r3
 800645a:	f009 fe35 	bl	80100c8 <HAL_GPIO_ReadPin>
 800645e:	0003      	movs	r3, r0
 8006460:	1e5a      	subs	r2, r3, #1
 8006462:	4193      	sbcs	r3, r2
 8006464:	b2db      	uxtb	r3, r3
}
 8006466:	0018      	movs	r0, r3
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006470:	4b05      	ldr	r3, [pc, #20]	@ (8006488 <UserButton_Pressed+0x1c>)
 8006472:	2104      	movs	r1, #4
 8006474:	0018      	movs	r0, r3
 8006476:	f009 fe27 	bl	80100c8 <HAL_GPIO_ReadPin>
 800647a:	0003      	movs	r3, r0
 800647c:	425a      	negs	r2, r3
 800647e:	4153      	adcs	r3, r2
 8006480:	b2db      	uxtb	r3, r3
}
 8006482:	0018      	movs	r0, r3
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	50000c00 	.word	0x50000c00

0800648c <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 800648c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648e:	46d6      	mov	lr, sl
 8006490:	464f      	mov	r7, r9
 8006492:	4646      	mov	r6, r8
 8006494:	b5c0      	push	{r6, r7, lr}
 8006496:	b08e      	sub	sp, #56	@ 0x38
 8006498:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 800649a:	4b21      	ldr	r3, [pc, #132]	@ (8006520 <showTime+0x94>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d036      	beq.n	8006510 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80064a2:	003a      	movs	r2, r7
 80064a4:	1d3b      	adds	r3, r7, #4
 80064a6:	0011      	movs	r1, r2
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 fa2b 	bl	8006904 <RTC_GetTime>
  UpdateSystemUptime();
 80064ae:	f000 f83f 	bl	8006530 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064b2:	003b      	movs	r3, r7
 80064b4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064b6:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064b8:	003b      	movs	r3, r7
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064be:	4b19      	ldr	r3, [pc, #100]	@ (8006524 <showTime+0x98>)
 80064c0:	0092      	lsls	r2, r2, #2
 80064c2:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064c4:	003b      	movs	r3, r7
 80064c6:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064c8:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064ca:	1d3b      	adds	r3, r7, #4
 80064cc:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064ce:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064d0:	1d3b      	adds	r3, r7, #4
 80064d2:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064d4:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064d6:	1d3b      	adds	r3, r7, #4
 80064d8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064da:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064dc:	4b12      	ldr	r3, [pc, #72]	@ (8006528 <showTime+0x9c>)
 80064de:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064e0:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064e2:	4b11      	ldr	r3, [pc, #68]	@ (8006528 <showTime+0x9c>)
 80064e4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064e6:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006528 <showTime+0x9c>)
 80064ea:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064ec:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006528 <showTime+0x9c>)
 80064f0:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064f2:	480e      	ldr	r0, [pc, #56]	@ (800652c <showTime+0xa0>)
 80064f4:	9306      	str	r3, [sp, #24]
 80064f6:	4643      	mov	r3, r8
 80064f8:	9305      	str	r3, [sp, #20]
 80064fa:	4663      	mov	r3, ip
 80064fc:	9304      	str	r3, [sp, #16]
 80064fe:	9603      	str	r6, [sp, #12]
 8006500:	9502      	str	r5, [sp, #8]
 8006502:	9401      	str	r4, [sp, #4]
 8006504:	9100      	str	r1, [sp, #0]
 8006506:	4653      	mov	r3, sl
 8006508:	4649      	mov	r1, r9
 800650a:	f019 fc0d 	bl	801fd28 <iprintf>
 800650e:	e000      	b.n	8006512 <showTime+0x86>
    return;
 8006510:	46c0      	nop			@ (mov r8, r8)
}
 8006512:	46bd      	mov	sp, r7
 8006514:	b006      	add	sp, #24
 8006516:	bce0      	pop	{r5, r6, r7}
 8006518:	46ba      	mov	sl, r7
 800651a:	46b1      	mov	r9, r6
 800651c:	46a8      	mov	r8, r5
 800651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006520:	20000d74 	.word	0x20000d74
 8006524:	2000004c 	.word	0x2000004c
 8006528:	20000d68 	.word	0x20000d68
 800652c:	08023b54 	.word	0x08023b54

08006530 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8006536:	003a      	movs	r2, r7
 8006538:	1d3b      	adds	r3, r7, #4
 800653a:	0011      	movs	r1, r2
 800653c:	0018      	movs	r0, r3
 800653e:	f000 f9e1 	bl	8006904 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8006542:	1d3a      	adds	r2, r7, #4
 8006544:	003b      	movs	r3, r7
 8006546:	0011      	movs	r1, r2
 8006548:	0018      	movs	r0, r3
 800654a:	f000 fba1 	bl	8006c90 <makeTime>
 800654e:	0002      	movs	r2, r0
 8006550:	4b1e      	ldr	r3, [pc, #120]	@ (80065cc <UpdateSystemUptime+0x9c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	213c      	movs	r1, #60	@ 0x3c
 8006560:	0018      	movs	r0, r3
 8006562:	f7f9 fea5 	bl	80002b0 <__aeabi_uidivmod>
 8006566:	000b      	movs	r3, r1
 8006568:	b2da      	uxtb	r2, r3
 800656a:	4b19      	ldr	r3, [pc, #100]	@ (80065d0 <UpdateSystemUptime+0xa0>)
 800656c:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	213c      	movs	r1, #60	@ 0x3c
 8006572:	0018      	movs	r0, r3
 8006574:	f7f9 fe16 	bl	80001a4 <__udivsi3>
 8006578:	0003      	movs	r3, r0
 800657a:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	213c      	movs	r1, #60	@ 0x3c
 8006580:	0018      	movs	r0, r3
 8006582:	f7f9 fe95 	bl	80002b0 <__aeabi_uidivmod>
 8006586:	000b      	movs	r3, r1
 8006588:	b2da      	uxtb	r2, r3
 800658a:	4b11      	ldr	r3, [pc, #68]	@ (80065d0 <UpdateSystemUptime+0xa0>)
 800658c:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	213c      	movs	r1, #60	@ 0x3c
 8006592:	0018      	movs	r0, r3
 8006594:	f7f9 fe06 	bl	80001a4 <__udivsi3>
 8006598:	0003      	movs	r3, r0
 800659a:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2118      	movs	r1, #24
 80065a0:	0018      	movs	r0, r3
 80065a2:	f7f9 fe85 	bl	80002b0 <__aeabi_uidivmod>
 80065a6:	000b      	movs	r3, r1
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	4b09      	ldr	r3, [pc, #36]	@ (80065d0 <UpdateSystemUptime+0xa0>)
 80065ac:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2118      	movs	r1, #24
 80065b2:	0018      	movs	r0, r3
 80065b4:	f7f9 fdf6 	bl	80001a4 <__udivsi3>
 80065b8:	0003      	movs	r3, r0
 80065ba:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	b29a      	uxth	r2, r3
 80065c0:	4b03      	ldr	r3, [pc, #12]	@ (80065d0 <UpdateSystemUptime+0xa0>)
 80065c2:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80065c4:	46c0      	nop			@ (mov r8, r8)
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b008      	add	sp, #32
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20000d74 	.word	0x20000d74
 80065d0:	20000d68 	.word	0x20000d68

080065d4 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80065d4:	b590      	push	{r4, r7, lr}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	0008      	movs	r0, r1
 80065de:	0011      	movs	r1, r2
 80065e0:	1cfb      	adds	r3, r7, #3
 80065e2:	1c02      	adds	r2, r0, #0
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	1cbb      	adds	r3, r7, #2
 80065e8:	1c0a      	adds	r2, r1, #0
 80065ea:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80065ec:	230e      	movs	r3, #14
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80065f4:	230f      	movs	r3, #15
 80065f6:	18fb      	adds	r3, r7, r3
 80065f8:	1cfa      	adds	r2, r7, #3
 80065fa:	7812      	ldrb	r2, [r2, #0]
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	e015      	b.n	800662c <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006600:	200f      	movs	r0, #15
 8006602:	183b      	adds	r3, r7, r0
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	18d2      	adds	r2, r2, r3
 800660a:	240e      	movs	r4, #14
 800660c:	193b      	adds	r3, r7, r4
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	7811      	ldrb	r1, [r2, #0]
 8006612:	2208      	movs	r2, #8
 8006614:	18ba      	adds	r2, r7, r2
 8006616:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006618:	193b      	adds	r3, r7, r4
 800661a:	781a      	ldrb	r2, [r3, #0]
 800661c:	193b      	adds	r3, r7, r4
 800661e:	3201      	adds	r2, #1
 8006620:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006622:	183b      	adds	r3, r7, r0
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	183b      	adds	r3, r7, r0
 8006628:	3201      	adds	r2, #1
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	200f      	movs	r0, #15
 800662e:	183a      	adds	r2, r7, r0
 8006630:	1cbb      	adds	r3, r7, #2
 8006632:	7812      	ldrb	r2, [r2, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d9e2      	bls.n	8006600 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800663a:	230e      	movs	r3, #14
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2208      	movs	r2, #8
 8006642:	18ba      	adds	r2, r7, r2
 8006644:	2100      	movs	r1, #0
 8006646:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006648:	1cfb      	adds	r3, r7, #3
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b13      	cmp	r3, #19
 800664e:	d849      	bhi.n	80066e4 <aBuff2int+0x110>
    if (start == 17) { //month
 8006650:	1cfb      	adds	r3, r7, #3
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b11      	cmp	r3, #17
 8006656:	d122      	bne.n	800669e <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006658:	183b      	adds	r3, r7, r0
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	e018      	b.n	8006692 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006660:	240f      	movs	r4, #15
 8006662:	193b      	adds	r3, r7, r4
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	4b25      	ldr	r3, [pc, #148]	@ (80066fc <aBuff2int+0x128>)
 8006668:	0092      	lsls	r2, r2, #2
 800666a:	58d2      	ldr	r2, [r2, r3]
 800666c:	2308      	movs	r3, #8
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	0011      	movs	r1, r2
 8006672:	0018      	movs	r0, r3
 8006674:	f7f9 fd70 	bl	8000158 <strcmp>
 8006678:	1e03      	subs	r3, r0, #0
 800667a:	d104      	bne.n	8006686 <aBuff2int+0xb2>
          return i+1;
 800667c:	193b      	adds	r3, r7, r4
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	3301      	adds	r3, #1
 8006682:	b2db      	uxtb	r3, r3
 8006684:	e035      	b.n	80066f2 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8006686:	210f      	movs	r1, #15
 8006688:	187b      	adds	r3, r7, r1
 800668a:	781a      	ldrb	r2, [r3, #0]
 800668c:	187b      	adds	r3, r7, r1
 800668e:	3201      	adds	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	230f      	movs	r3, #15
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b0b      	cmp	r3, #11
 800669a:	d9e1      	bls.n	8006660 <aBuff2int+0x8c>
 800669c:	e022      	b.n	80066e4 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800669e:	230f      	movs	r3, #15
 80066a0:	18fb      	adds	r3, r7, r3
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	e018      	b.n	80066da <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80066a8:	240f      	movs	r4, #15
 80066aa:	193b      	adds	r3, r7, r4
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	4b14      	ldr	r3, [pc, #80]	@ (8006700 <aBuff2int+0x12c>)
 80066b0:	0092      	lsls	r2, r2, #2
 80066b2:	58d2      	ldr	r2, [r2, r3]
 80066b4:	2308      	movs	r3, #8
 80066b6:	18fb      	adds	r3, r7, r3
 80066b8:	0011      	movs	r1, r2
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7f9 fd4c 	bl	8000158 <strcmp>
 80066c0:	1e03      	subs	r3, r0, #0
 80066c2:	d104      	bne.n	80066ce <aBuff2int+0xfa>
          return i+1;
 80066c4:	193b      	adds	r3, r7, r4
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	3301      	adds	r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	e011      	b.n	80066f2 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80066ce:	210f      	movs	r1, #15
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	781a      	ldrb	r2, [r3, #0]
 80066d4:	187b      	adds	r3, r7, r1
 80066d6:	3201      	adds	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	230f      	movs	r3, #15
 80066dc:	18fb      	adds	r3, r7, r3
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b06      	cmp	r3, #6
 80066e2:	d9e1      	bls.n	80066a8 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80066e4:	2308      	movs	r3, #8
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	0018      	movs	r0, r3
 80066ea:	f017 ff42 	bl	801e572 <atoi>
 80066ee:	0003      	movs	r3, r0
 80066f0:	b2db      	uxtb	r3, r3
}
 80066f2:	0018      	movs	r0, r3
 80066f4:	46bd      	mov	sp, r7
 80066f6:	b005      	add	sp, #20
 80066f8:	bd90      	pop	{r4, r7, pc}
 80066fa:	46c0      	nop			@ (mov r8, r8)
 80066fc:	2000004c 	.word	0x2000004c
 8006700:	20000030 	.word	0x20000030

08006704 <ParseTime>:

void ParseTime(char* buffer) {
 8006704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006706:	b08b      	sub	sp, #44	@ 0x2c
 8006708:	af02      	add	r7, sp, #8
 800670a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800670c:	2408      	movs	r4, #8
 800670e:	193a      	adds	r2, r7, r4
 8006710:	260c      	movs	r6, #12
 8006712:	19bb      	adds	r3, r7, r6
 8006714:	0011      	movs	r1, r2
 8006716:	0018      	movs	r0, r3
 8006718:	f000 f8f4 	bl	8006904 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2219      	movs	r2, #25
 8006720:	2118      	movs	r1, #24
 8006722:	0018      	movs	r0, r3
 8006724:	f7ff ff56 	bl	80065d4 <aBuff2int>
 8006728:	0003      	movs	r3, r0
 800672a:	001a      	movs	r2, r3
 800672c:	19bb      	adds	r3, r7, r6
 800672e:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	221c      	movs	r2, #28
 8006734:	211b      	movs	r1, #27
 8006736:	0018      	movs	r0, r3
 8006738:	f7ff ff4c 	bl	80065d4 <aBuff2int>
 800673c:	0003      	movs	r3, r0
 800673e:	001a      	movs	r2, r3
 8006740:	19bb      	adds	r3, r7, r6
 8006742:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	221f      	movs	r2, #31
 8006748:	211e      	movs	r1, #30
 800674a:	0018      	movs	r0, r3
 800674c:	f7ff ff42 	bl	80065d4 <aBuff2int>
 8006750:	0003      	movs	r3, r0
 8006752:	001a      	movs	r2, r3
 8006754:	19bb      	adds	r3, r7, r6
 8006756:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2224      	movs	r2, #36	@ 0x24
 800675c:	2123      	movs	r1, #35	@ 0x23
 800675e:	0018      	movs	r0, r3
 8006760:	f7ff ff38 	bl	80065d4 <aBuff2int>
 8006764:	0003      	movs	r3, r0
 8006766:	001a      	movs	r2, r3
 8006768:	0025      	movs	r5, r4
 800676a:	197b      	adds	r3, r7, r5
 800676c:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2213      	movs	r2, #19
 8006772:	2111      	movs	r1, #17
 8006774:	0018      	movs	r0, r3
 8006776:	f7ff ff2d 	bl	80065d4 <aBuff2int>
 800677a:	0003      	movs	r3, r0
 800677c:	001a      	movs	r2, r3
 800677e:	197b      	adds	r3, r7, r5
 8006780:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2216      	movs	r2, #22
 8006786:	2115      	movs	r1, #21
 8006788:	0018      	movs	r0, r3
 800678a:	f7ff ff23 	bl	80065d4 <aBuff2int>
 800678e:	0003      	movs	r3, r0
 8006790:	001a      	movs	r2, r3
 8006792:	197b      	adds	r3, r7, r5
 8006794:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	220f      	movs	r2, #15
 800679a:	210d      	movs	r1, #13
 800679c:	0018      	movs	r0, r3
 800679e:	f7ff ff19 	bl	80065d4 <aBuff2int>
 80067a2:	0003      	movs	r3, r0
 80067a4:	001a      	movs	r2, r3
 80067a6:	197b      	adds	r3, r7, r5
 80067a8:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80067aa:	19bb      	adds	r3, r7, r6
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	001c      	movs	r4, r3
 80067b0:	19bb      	adds	r3, r7, r6
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	0018      	movs	r0, r3
 80067b6:	19bb      	adds	r3, r7, r6
 80067b8:	789b      	ldrb	r3, [r3, #2]
 80067ba:	4a1c      	ldr	r2, [pc, #112]	@ (800682c <ParseTime+0x128>)
 80067bc:	491c      	ldr	r1, [pc, #112]	@ (8006830 <ParseTime+0x12c>)
 80067be:	9301      	str	r3, [sp, #4]
 80067c0:	9000      	str	r0, [sp, #0]
 80067c2:	0023      	movs	r3, r4
 80067c4:	2003      	movs	r0, #3
 80067c6:	f007 fdb5 	bl	800e334 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80067ca:	197b      	adds	r3, r7, r5
 80067cc:	789b      	ldrb	r3, [r3, #2]
 80067ce:	001c      	movs	r4, r3
 80067d0:	197b      	adds	r3, r7, r5
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	0018      	movs	r0, r3
 80067d6:	197b      	adds	r3, r7, r5
 80067d8:	78db      	ldrb	r3, [r3, #3]
 80067da:	4a16      	ldr	r2, [pc, #88]	@ (8006834 <ParseTime+0x130>)
 80067dc:	4914      	ldr	r1, [pc, #80]	@ (8006830 <ParseTime+0x12c>)
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	9000      	str	r0, [sp, #0]
 80067e2:	0023      	movs	r3, r4
 80067e4:	2003      	movs	r0, #3
 80067e6:	f007 fda5 	bl	800e334 <CreateLine>
  RTC_SetTime(&currentTime);
 80067ea:	19bb      	adds	r3, r7, r6
 80067ec:	0018      	movs	r0, r3
 80067ee:	f000 f825 	bl	800683c <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80067f2:	197b      	adds	r3, r7, r5
 80067f4:	0018      	movs	r0, r3
 80067f6:	f000 f847 	bl	8006888 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80067fa:	197b      	adds	r3, r7, r5
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d101      	bne.n	8006806 <ParseTime+0x102>
    reset_fanCleaningDone();
 8006802:	f002 fca9 	bl	8009158 <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
  if (posixBootTime == 0) {
 8006806:	4b0c      	ldr	r3, [pc, #48]	@ (8006838 <ParseTime+0x134>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800680e:	230c      	movs	r3, #12
 8006810:	18fa      	adds	r2, r7, r3
 8006812:	2308      	movs	r3, #8
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	0011      	movs	r1, r2
 8006818:	0018      	movs	r0, r3
 800681a:	f000 fa39 	bl	8006c90 <makeTime>
 800681e:	0002      	movs	r2, r0
 8006820:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <ParseTime+0x134>)
 8006822:	601a      	str	r2, [r3, #0]
//    Debug("posixBootTime: %lu", posixBootTime);
  }
}
 8006824:	46c0      	nop			@ (mov r8, r8)
 8006826:	46bd      	mov	sp, r7
 8006828:	b009      	add	sp, #36	@ 0x24
 800682a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800682c:	08023bac 	.word	0x08023bac
 8006830:	08023be4 	.word	0x08023be4
 8006834:	08023be8 	.word	0x08023be8
 8006838:	20000d74 	.word	0x20000d74

0800683c <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006856:	4b09      	ldr	r3, [pc, #36]	@ (800687c <RTC_SetTime+0x40>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	0018      	movs	r0, r3
 8006860:	f00f fade 	bl	8015e20 <HAL_RTC_SetTime>
 8006864:	1e03      	subs	r3, r0, #0
 8006866:	d005      	beq.n	8006874 <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 8006868:	4a05      	ldr	r2, [pc, #20]	@ (8006880 <RTC_SetTime+0x44>)
 800686a:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <RTC_SetTime+0x48>)
 800686c:	0019      	movs	r1, r3
 800686e:	2001      	movs	r0, #1
 8006870:	f007 fd60 	bl	800e334 <CreateLine>
    }
}
 8006874:	46c0      	nop			@ (mov r8, r8)
 8006876:	46bd      	mov	sp, r7
 8006878:	b002      	add	sp, #8
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20000d70 	.word	0x20000d70
 8006880:	08023c1c 	.word	0x08023c1c
 8006884:	08023c38 	.word	0x08023c38

08006888 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006890:	4b16      	ldr	r3, [pc, #88]	@ (80068ec <RTC_SetDate+0x64>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	0018      	movs	r0, r3
 800689a:	f00f fbc9 	bl	8016030 <HAL_RTC_SetDate>
 800689e:	1e03      	subs	r3, r0, #0
 80068a0:	d005      	beq.n	80068ae <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 80068a2:	4a13      	ldr	r2, [pc, #76]	@ (80068f0 <RTC_SetDate+0x68>)
 80068a4:	4b13      	ldr	r3, [pc, #76]	@ (80068f4 <RTC_SetDate+0x6c>)
 80068a6:	0019      	movs	r1, r3
 80068a8:	2001      	movs	r0, #1
 80068aa:	f007 fd43 	bl	800e334 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80068ae:	4b0f      	ldr	r3, [pc, #60]	@ (80068ec <RTC_SetDate+0x64>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2101      	movs	r1, #1
 80068b4:	0018      	movs	r0, r3
 80068b6:	f00f ff01 	bl	80166bc <HAL_RTCEx_BKUPRead>
 80068ba:	0003      	movs	r3, r0
 80068bc:	4a0e      	ldr	r2, [pc, #56]	@ (80068f8 <RTC_SetDate+0x70>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d010      	beq.n	80068e4 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80068c2:	4a0e      	ldr	r2, [pc, #56]	@ (80068fc <RTC_SetDate+0x74>)
 80068c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006900 <RTC_SetDate+0x78>)
 80068c6:	0019      	movs	r1, r3
 80068c8:	2003      	movs	r0, #3
 80068ca:	f007 fd33 	bl	800e334 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80068ce:	f00e fa27 	bl	8014d20 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80068d2:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <RTC_SetDate+0x64>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a08      	ldr	r2, [pc, #32]	@ (80068f8 <RTC_SetDate+0x70>)
 80068d8:	2101      	movs	r1, #1
 80068da:	0018      	movs	r0, r3
 80068dc:	f00f fed6 	bl	801668c <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 80068e0:	f00e fa2c 	bl	8014d3c <HAL_PWR_DisableBkUpAccess>
    }
}
 80068e4:	46c0      	nop			@ (mov r8, r8)
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b002      	add	sp, #8
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000d70 	.word	0x20000d70
 80068f0:	08023c3c 	.word	0x08023c3c
 80068f4:	08023c38 	.word	0x08023c38
 80068f8:	0000bebe 	.word	0x0000bebe
 80068fc:	08023c58 	.word	0x08023c58
 8006900:	08023be4 	.word	0x08023be4

08006904 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800690e:	250f      	movs	r5, #15
 8006910:	197b      	adds	r3, r7, r5
 8006912:	2201      	movs	r2, #1
 8006914:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8006916:	230e      	movs	r3, #14
 8006918:	18fb      	adds	r3, r7, r3
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800691e:	260c      	movs	r6, #12
 8006920:	19bc      	adds	r4, r7, r6
 8006922:	f006 fdbf 	bl	800d4a4 <powerCheck>
 8006926:	0003      	movs	r3, r0
 8006928:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 800692a:	19bb      	adds	r3, r7, r6
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d104      	bne.n	800693c <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8006932:	197b      	adds	r3, r7, r5
 8006934:	781a      	ldrb	r2, [r3, #0]
 8006936:	197b      	adds	r3, r7, r5
 8006938:	3201      	adds	r2, #1
 800693a:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800693c:	230d      	movs	r3, #13
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	e039      	b.n	80069ba <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006946:	4b23      	ldr	r3, [pc, #140]	@ (80069d4 <RTC_GetTime+0xd0>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	0018      	movs	r0, r3
 8006950:	f00f fb10 	bl	8015f74 <HAL_RTC_GetTime>
 8006954:	1e03      	subs	r3, r0, #0
 8006956:	d005      	beq.n	8006964 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8006958:	4a1f      	ldr	r2, [pc, #124]	@ (80069d8 <RTC_GetTime+0xd4>)
 800695a:	4b20      	ldr	r3, [pc, #128]	@ (80069dc <RTC_GetTime+0xd8>)
 800695c:	0019      	movs	r1, r3
 800695e:	2001      	movs	r0, #1
 8006960:	f007 fce8 	bl	800e334 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006964:	4b1b      	ldr	r3, [pc, #108]	@ (80069d4 <RTC_GetTime+0xd0>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	2200      	movs	r2, #0
 800696c:	0018      	movs	r0, r3
 800696e:	f00f fbf3 	bl	8016158 <HAL_RTC_GetDate>
 8006972:	1e03      	subs	r3, r0, #0
 8006974:	d005      	beq.n	8006982 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8006976:	4a1a      	ldr	r2, [pc, #104]	@ (80069e0 <RTC_GetTime+0xdc>)
 8006978:	4b18      	ldr	r3, [pc, #96]	@ (80069dc <RTC_GetTime+0xd8>)
 800697a:	0019      	movs	r1, r3
 800697c:	2001      	movs	r0, #1
 800697e:	f007 fcd9 	bl	800e334 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 8006982:	230c      	movs	r3, #12
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d110      	bne.n	80069ae <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	210e      	movs	r1, #14
 8006992:	187a      	adds	r2, r7, r1
 8006994:	7812      	ldrb	r2, [r2, #0]
 8006996:	429a      	cmp	r2, r3
 8006998:	d018      	beq.n	80069cc <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 800699a:	187b      	adds	r3, r7, r1
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	7812      	ldrb	r2, [r2, #0]
 80069a0:	701a      	strb	r2, [r3, #0]
        t++;
 80069a2:	210f      	movs	r1, #15
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	781a      	ldrb	r2, [r3, #0]
 80069a8:	187b      	adds	r3, r7, r1
 80069aa:	3201      	adds	r2, #1
 80069ac:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80069ae:	210d      	movs	r1, #13
 80069b0:	187b      	adds	r3, r7, r1
 80069b2:	781a      	ldrb	r2, [r3, #0]
 80069b4:	187b      	adds	r3, r7, r1
 80069b6:	3201      	adds	r2, #1
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	230d      	movs	r3, #13
 80069bc:	18fa      	adds	r2, r7, r3
 80069be:	230f      	movs	r3, #15
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	7812      	ldrb	r2, [r2, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d3bd      	bcc.n	8006946 <RTC_GetTime+0x42>
 80069ca:	e000      	b.n	80069ce <RTC_GetTime+0xca>
      }
      else {
        return;
 80069cc:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b005      	add	sp, #20
 80069d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d4:	20000d70 	.word	0x20000d70
 80069d8:	08023c70 	.word	0x08023c70
 80069dc:	08023c38 	.word	0x08023c38
 80069e0:	08023c8c 	.word	0x08023c8c

080069e4 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80069ea:	003a      	movs	r2, r7
 80069ec:	1d3b      	adds	r3, r7, #4
 80069ee:	0011      	movs	r1, r2
 80069f0:	0018      	movs	r0, r3
 80069f2:	f7ff ff87 	bl	8006904 <RTC_GetTime>
  return currentDate.WeekDay;
 80069f6:	003b      	movs	r3, r7
 80069f8:	781b      	ldrb	r3, [r3, #0]
}
 80069fa:	0018      	movs	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	b006      	add	sp, #24
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <getPosixTime>:

uint32_t getPosixTime(void) {
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b086      	sub	sp, #24
 8006a06:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a08:	003a      	movs	r2, r7
 8006a0a:	1d3b      	adds	r3, r7, #4
 8006a0c:	0011      	movs	r1, r2
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f7ff ff78 	bl	8006904 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006a14:	1d3a      	adds	r2, r7, #4
 8006a16:	003b      	movs	r3, r7
 8006a18:	0011      	movs	r1, r2
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f000 f938 	bl	8006c90 <makeTime>
 8006a20:	0003      	movs	r3, r0
}
 8006a22:	0018      	movs	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b006      	add	sp, #24
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2e:	b08d      	sub	sp, #52	@ 0x34
 8006a30:	af04      	add	r7, sp, #16
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006a36:	240c      	movs	r4, #12
 8006a38:	193a      	adds	r2, r7, r4
 8006a3a:	2508      	movs	r5, #8
 8006a3c:	1979      	adds	r1, r7, r5
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	0018      	movs	r0, r3
 8006a42:	f000 f9ef 	bl	8006e24 <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a46:	002a      	movs	r2, r5
 8006a48:	18bb      	adds	r3, r7, r2
 8006a4a:	789b      	ldrb	r3, [r3, #2]
 8006a4c:	001e      	movs	r6, r3
 8006a4e:	18bb      	adds	r3, r7, r2
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	469c      	mov	ip, r3
 8006a54:	18bb      	adds	r3, r7, r2
 8006a56:	78db      	ldrb	r3, [r3, #3]
 8006a58:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a5a:	0021      	movs	r1, r4
 8006a5c:	187b      	adds	r3, r7, r1
 8006a5e:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a60:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a62:	187b      	adds	r3, r7, r1
 8006a64:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a66:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a68:	187b      	adds	r3, r7, r1
 8006a6a:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a6c:	4906      	ldr	r1, [pc, #24]	@ (8006a88 <getUTCfromPosixTime+0x5c>)
 8006a6e:	6838      	ldr	r0, [r7, #0]
 8006a70:	9303      	str	r3, [sp, #12]
 8006a72:	9502      	str	r5, [sp, #8]
 8006a74:	9401      	str	r4, [sp, #4]
 8006a76:	9200      	str	r2, [sp, #0]
 8006a78:	4663      	mov	r3, ip
 8006a7a:	0032      	movs	r2, r6
 8006a7c:	f019 f9c4 	bl	801fe08 <siprintf>
}
 8006a80:	46c0      	nop			@ (mov r8, r8)
 8006a82:	46bd      	mov	sp, r7
 8006a84:	b009      	add	sp, #36	@ 0x24
 8006a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a88:	08023ca8 	.word	0x08023ca8

08006a8c <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006a94:	4b10      	ldr	r3, [pc, #64]	@ (8006ad8 <RTC_SetWakeUpTimer+0x4c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f00f fd5b 	bl	8016554 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad8 <RTC_SetWakeUpTimer+0x4c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	22ff      	movs	r2, #255	@ 0xff
 8006aa8:	401a      	ands	r2, r3
 8006aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad8 <RTC_SetWakeUpTimer+0x4c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	490a      	ldr	r1, [pc, #40]	@ (8006adc <RTC_SetWakeUpTimer+0x50>)
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae0 <RTC_SetWakeUpTimer+0x54>)
 8006ab8:	2280      	movs	r2, #128	@ 0x80
 8006aba:	0352      	lsls	r2, r2, #13
 8006abc:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006abe:	4b06      	ldr	r3, [pc, #24]	@ (8006ad8 <RTC_SetWakeUpTimer+0x4c>)
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	0019      	movs	r1, r3
 8006aca:	f00f fc6b 	bl	80163a4 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 8006ace:	46c0      	nop			@ (mov r8, r8)
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b002      	add	sp, #8
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	46c0      	nop			@ (mov r8, r8)
 8006ad8:	20000d70 	.word	0x20000d70
 8006adc:	fffffb7f 	.word	0xfffffb7f
 8006ae0:	40010400 	.word	0x40010400

08006ae4 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8006b1c <Enter_Standby_Mode+0x38>)
 8006aea:	4b0d      	ldr	r3, [pc, #52]	@ (8006b20 <Enter_Standby_Mode+0x3c>)
 8006aec:	0019      	movs	r1, r3
 8006aee:	2003      	movs	r0, #3
 8006af0:	f007 fc20 	bl	800e334 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006af4:	2064      	movs	r0, #100	@ 0x64
 8006af6:	f008 f87d 	bl	800ebf4 <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006afa:	4b0a      	ldr	r3, [pc, #40]	@ (8006b24 <Enter_Standby_Mode+0x40>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	0018      	movs	r0, r3
 8006b00:	f00f fd28 	bl	8016554 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 8006b04:	f008 f89a 	bl	800ec3c <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 8006b08:	f00e f984 	bl	8014e14 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 8006b0c:	f001 fa76 	bl	8007ffc <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 8006b10:	f008 f8a2 	bl	800ec58 <HAL_ResumeTick>
}
 8006b14:	46c0      	nop			@ (mov r8, r8)
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	46c0      	nop			@ (mov r8, r8)
 8006b1c:	08023cfc 	.word	0x08023cfc
 8006b20:	08023be4 	.word	0x08023be4
 8006b24:	20000d70 	.word	0x20000d70

08006b28 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	0002      	movs	r2, r0
 8006b30:	1dbb      	adds	r3, r7, #6
 8006b32:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006b34:	4b43      	ldr	r3, [pc, #268]	@ (8006c44 <Enter_Stop_Mode+0x11c>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006b3c:	f002 fae0 	bl	8009100 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006b40:	f7ff fbae 	bl	80062a0 <ReadBatteryVoltage>
 8006b44:	1c03      	adds	r3, r0, #0
 8006b46:	1c18      	adds	r0, r3, #0
 8006b48:	f7fc fc8c 	bl	8003464 <__aeabi_f2d>
 8006b4c:	0002      	movs	r2, r0
 8006b4e:	000b      	movs	r3, r1
 8006b50:	483d      	ldr	r0, [pc, #244]	@ (8006c48 <Enter_Stop_Mode+0x120>)
 8006b52:	493e      	ldr	r1, [pc, #248]	@ (8006c4c <Enter_Stop_Mode+0x124>)
 8006b54:	9200      	str	r2, [sp, #0]
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	0002      	movs	r2, r0
 8006b5a:	2002      	movs	r0, #2
 8006b5c:	f007 fbea 	bl	800e334 <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006b60:	1dbb      	adds	r3, r7, #6
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	4a3a      	ldr	r2, [pc, #232]	@ (8006c50 <Enter_Stop_Mode+0x128>)
 8006b66:	493b      	ldr	r1, [pc, #236]	@ (8006c54 <Enter_Stop_Mode+0x12c>)
 8006b68:	2003      	movs	r0, #3
 8006b6a:	f007 fbe3 	bl	800e334 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006b6e:	f7ff ff48 	bl	8006a02 <getPosixTime>
 8006b72:	0002      	movs	r2, r0
 8006b74:	1dbb      	adds	r3, r7, #6
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	18d3      	adds	r3, r2, r3
 8006b7a:	4a37      	ldr	r2, [pc, #220]	@ (8006c58 <Enter_Stop_Mode+0x130>)
 8006b7c:	0011      	movs	r1, r2
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f7ff ff54 	bl	8006a2c <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006b84:	4b34      	ldr	r3, [pc, #208]	@ (8006c58 <Enter_Stop_Mode+0x130>)
 8006b86:	4a35      	ldr	r2, [pc, #212]	@ (8006c5c <Enter_Stop_Mode+0x134>)
 8006b88:	4930      	ldr	r1, [pc, #192]	@ (8006c4c <Enter_Stop_Mode+0x124>)
 8006b8a:	2002      	movs	r0, #2
 8006b8c:	f007 fbd2 	bl	800e334 <CreateLine>
  HAL_Delay(100);
 8006b90:	2064      	movs	r0, #100	@ 0x64
 8006b92:	f008 f82f 	bl	800ebf4 <HAL_Delay>
  HAL_SuspendTick();
 8006b96:	f008 f851 	bl	800ec3c <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006b9a:	1dbb      	adds	r3, r7, #6
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f7ff ff74 	bl	8006a8c <RTC_SetWakeUpTimer>
//  HAL_PWREx_EnableFlashPowerDown();  // is default stopped in l0xx cpu's
//  SET_BIT(PWR->CR, PWR_CR_ULP); seems of no influence
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	f00e f8d8 	bl	8014d5c <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006bac:	f001 fa26 	bl	8007ffc <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006bb0:	1dbb      	adds	r3, r7, #6
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f002 fa31 	bl	800901c <sen5x_enable>
 8006bba:	1e03      	subs	r3, r0, #0
 8006bbc:	d01c      	beq.n	8006bf8 <Enter_Stop_Mode+0xd0>
    showTime();
 8006bbe:	f7ff fc65 	bl	800648c <showTime>
    set_light_on_state();
 8006bc2:	f002 ff25 	bl	8009a10 <set_light_on_state>
    if (!userToggle) {
 8006bc6:	4b26      	ldr	r3, [pc, #152]	@ (8006c60 <Enter_Stop_Mode+0x138>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	4053      	eors	r3, r2
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d011      	beq.n	8006bf8 <Enter_Stop_Mode+0xd0>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006bd4:	201c      	movs	r0, #28
 8006bd6:	f7ff ff59 	bl	8006a8c <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006bda:	4a1d      	ldr	r2, [pc, #116]	@ (8006c50 <Enter_Stop_Mode+0x128>)
 8006bdc:	491d      	ldr	r1, [pc, #116]	@ (8006c54 <Enter_Stop_Mode+0x12c>)
 8006bde:	231c      	movs	r3, #28
 8006be0:	2003      	movs	r0, #3
 8006be2:	f007 fba7 	bl	800e334 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006be6:	2101      	movs	r1, #1
 8006be8:	2001      	movs	r0, #1
 8006bea:	f00e f8b7 	bl	8014d5c <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006bee:	f001 fa05 	bl	8007ffc <SystemClock_Config>
//      setsen5xReadTimer(2000);
      setsen5xReadTimer(0);
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	f002 f9f0 	bl	8008fd8 <setsen5xReadTimer>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006bf8:	f008 f82e 	bl	800ec58 <HAL_ResumeTick>
  showTime();
 8006bfc:	f7ff fc46 	bl	800648c <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006c00:	f001 fe76 	bl	80088f0 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006c04:	f004 fd38 	bl	800b678 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f002 f9f7 	bl	8008ffc <setsen5xSamplecounter>
//  setESPTimeStamp(3000);
  setESPTimeStamp(2500);
 8006c0e:	4b15      	ldr	r3, [pc, #84]	@ (8006c64 <Enter_Stop_Mode+0x13c>)
 8006c10:	0018      	movs	r0, r3
 8006c12:	f7fc fdcd 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006c16:	2000      	movs	r0, #0
 8006c18:	f004 fd1c 	bl	800b654 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	f007 fd4d 	bl	800e6bc <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006c22:	2000      	movs	r0, #0
 8006c24:	f001 fe52 	bl	80088cc <setMICTimeStamp>
  ESPTransmitDone = false;
 8006c28:	4b0f      	ldr	r3, [pc, #60]	@ (8006c68 <Enter_Stop_Mode+0x140>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 2300;
 8006c2e:	f007 ffd7 	bl	800ebe0 <HAL_GetTick>
 8006c32:	0003      	movs	r3, r0
 8006c34:	4a0d      	ldr	r2, [pc, #52]	@ (8006c6c <Enter_Stop_Mode+0x144>)
 8006c36:	189a      	adds	r2, r3, r2
 8006c38:	4b0d      	ldr	r3, [pc, #52]	@ (8006c70 <Enter_Stop_Mode+0x148>)
 8006c3a:	601a      	str	r2, [r3, #0]
}
 8006c3c:	46c0      	nop			@ (mov r8, r8)
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b002      	add	sp, #8
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	2000125d 	.word	0x2000125d
 8006c48:	08023d20 	.word	0x08023d20
 8006c4c:	08023d38 	.word	0x08023d38
 8006c50:	08023d3c 	.word	0x08023d3c
 8006c54:	08023be4 	.word	0x08023be4
 8006c58:	20000d78 	.word	0x20000d78
 8006c5c:	08023d60 	.word	0x08023d60
 8006c60:	200021f6 	.word	0x200021f6
 8006c64:	000009c4 	.word	0x000009c4
 8006c68:	20000553 	.word	0x20000553
 8006c6c:	000008fc 	.word	0x000008fc
 8006c70:	20000fc0 	.word	0x20000fc0

08006c74 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006c7c:	4b03      	ldr	r3, [pc, #12]	@ (8006c8c <InitClock+0x18>)
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	601a      	str	r2, [r3, #0]
}
 8006c82:	46c0      	nop			@ (mov r8, r8)
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b002      	add	sp, #8
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	46c0      	nop			@ (mov r8, r8)
 8006c8c:	20000d70 	.word	0x20000d70

08006c90 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	78db      	ldrb	r3, [r3, #3]
 8006c9e:	001a      	movs	r2, r3
 8006ca0:	0013      	movs	r3, r2
 8006ca2:	025b      	lsls	r3, r3, #9
 8006ca4:	189b      	adds	r3, r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	189b      	adds	r3, r3, r2
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	189b      	adds	r3, r3, r2
 8006cae:	011a      	lsls	r2, r3, #4
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	01d3      	lsls	r3, r2, #7
 8006cb4:	001a      	movs	r2, r3
 8006cb6:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	e028      	b.n	8006d10 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4a53      	ldr	r2, [pc, #332]	@ (8006e10 <makeTime+0x180>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	db21      	blt.n	8006d0a <makeTime+0x7a>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4a52      	ldr	r2, [pc, #328]	@ (8006e14 <makeTime+0x184>)
 8006cca:	4694      	mov	ip, r2
 8006ccc:	4463      	add	r3, ip
 8006cce:	001a      	movs	r2, r3
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	d119      	bne.n	8006d0a <makeTime+0x7a>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4a4e      	ldr	r2, [pc, #312]	@ (8006e14 <makeTime+0x184>)
 8006cda:	4694      	mov	ip, r2
 8006cdc:	4463      	add	r3, ip
 8006cde:	2164      	movs	r1, #100	@ 0x64
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f7f9 fbcf 	bl	8000484 <__aeabi_idivmod>
 8006ce6:	1e0b      	subs	r3, r1, #0
 8006ce8:	d10a      	bne.n	8006d00 <makeTime+0x70>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4a49      	ldr	r2, [pc, #292]	@ (8006e14 <makeTime+0x184>)
 8006cee:	4694      	mov	ip, r2
 8006cf0:	4463      	add	r3, ip
 8006cf2:	22c8      	movs	r2, #200	@ 0xc8
 8006cf4:	0051      	lsls	r1, r2, #1
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f7f9 fbc4 	bl	8000484 <__aeabi_idivmod>
 8006cfc:	1e0b      	subs	r3, r1, #0
 8006cfe:	d104      	bne.n	8006d0a <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4a45      	ldr	r2, [pc, #276]	@ (8006e18 <makeTime+0x188>)
 8006d04:	4694      	mov	ip, r2
 8006d06:	4463      	add	r3, ip
 8006d08:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	78db      	ldrb	r3, [r3, #3]
 8006d14:	001a      	movs	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	dbd0      	blt.n	8006cbe <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	e03c      	b.n	8006d9c <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d125      	bne.n	8006d74 <makeTime+0xe4>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	78db      	ldrb	r3, [r3, #3]
 8006d2c:	4a39      	ldr	r2, [pc, #228]	@ (8006e14 <makeTime+0x184>)
 8006d2e:	4694      	mov	ip, r2
 8006d30:	4463      	add	r3, ip
 8006d32:	001a      	movs	r2, r3
 8006d34:	2303      	movs	r3, #3
 8006d36:	4013      	ands	r3, r2
 8006d38:	d11c      	bne.n	8006d74 <makeTime+0xe4>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	78db      	ldrb	r3, [r3, #3]
 8006d3e:	4a35      	ldr	r2, [pc, #212]	@ (8006e14 <makeTime+0x184>)
 8006d40:	4694      	mov	ip, r2
 8006d42:	4463      	add	r3, ip
 8006d44:	2164      	movs	r1, #100	@ 0x64
 8006d46:	0018      	movs	r0, r3
 8006d48:	f7f9 fb9c 	bl	8000484 <__aeabi_idivmod>
 8006d4c:	1e0b      	subs	r3, r1, #0
 8006d4e:	d10b      	bne.n	8006d68 <makeTime+0xd8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	78db      	ldrb	r3, [r3, #3]
 8006d54:	4a2f      	ldr	r2, [pc, #188]	@ (8006e14 <makeTime+0x184>)
 8006d56:	4694      	mov	ip, r2
 8006d58:	4463      	add	r3, ip
 8006d5a:	22c8      	movs	r2, #200	@ 0xc8
 8006d5c:	0051      	lsls	r1, r2, #1
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7f9 fb90 	bl	8000484 <__aeabi_idivmod>
 8006d64:	1e0b      	subs	r3, r1, #0
 8006d66:	d105      	bne.n	8006d74 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8006e1c <makeTime+0x18c>)
 8006d6c:	4694      	mov	ip, r2
 8006d6e:	4463      	add	r3, ip
 8006d70:	60bb      	str	r3, [r7, #8]
 8006d72:	e010      	b.n	8006d96 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	4a29      	ldr	r2, [pc, #164]	@ (8006e20 <makeTime+0x190>)
 8006d7a:	5cd3      	ldrb	r3, [r2, r3]
 8006d7c:	001a      	movs	r2, r3
 8006d7e:	0013      	movs	r3, r2
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	189b      	adds	r3, r3, r2
 8006d84:	011a      	lsls	r2, r3, #4
 8006d86:	1ad2      	subs	r2, r2, r3
 8006d88:	0113      	lsls	r3, r2, #4
 8006d8a:	1a9b      	subs	r3, r3, r2
 8006d8c:	01db      	lsls	r3, r3, #7
 8006d8e:	001a      	movs	r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	189b      	adds	r3, r3, r2
 8006d94:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	001a      	movs	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4293      	cmp	r3, r2
 8006da6:	dbbc      	blt.n	8006d22 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	789b      	ldrb	r3, [r3, #2]
 8006dac:	3b01      	subs	r3, #1
 8006dae:	001a      	movs	r2, r3
 8006db0:	0013      	movs	r3, r2
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	189b      	adds	r3, r3, r2
 8006db6:	011a      	lsls	r2, r3, #4
 8006db8:	1ad2      	subs	r2, r2, r3
 8006dba:	0113      	lsls	r3, r2, #4
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	01db      	lsls	r3, r3, #7
 8006dc0:	001a      	movs	r2, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	189b      	adds	r3, r3, r2
 8006dc6:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	001a      	movs	r2, r3
 8006dce:	0013      	movs	r3, r2
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	011a      	lsls	r2, r3, #4
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	0113      	lsls	r3, r2, #4
 8006dda:	001a      	movs	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	189b      	adds	r3, r3, r2
 8006de0:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	001a      	movs	r2, r3
 8006de8:	0013      	movs	r3, r2
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	1a9b      	subs	r3, r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	001a      	movs	r2, r3
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	189b      	adds	r3, r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	789b      	ldrb	r3, [r3, #2]
 8006dfc:	001a      	movs	r2, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	189b      	adds	r3, r3, r2
 8006e02:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006e04:	68bb      	ldr	r3, [r7, #8]
}
 8006e06:	0018      	movs	r0, r3
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	b004      	add	sp, #16
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	fffff84f 	.word	0xfffff84f
 8006e14:	000007b2 	.word	0x000007b2
 8006e18:	00015180 	.word	0x00015180
 8006e1c:	00263b80 	.word	0x00263b80
 8006e20:	080252c4 	.word	0x080252c4

08006e24 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006e24:	b590      	push	{r4, r7, lr}
 8006e26:	b089      	sub	sp, #36	@ 0x24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	213c      	movs	r1, #60	@ 0x3c
 8006e38:	0018      	movs	r0, r3
 8006e3a:	f7f9 fa39 	bl	80002b0 <__aeabi_uidivmod>
 8006e3e:	000b      	movs	r3, r1
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	213c      	movs	r1, #60	@ 0x3c
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f7f9 f9aa 	bl	80001a4 <__udivsi3>
 8006e50:	0003      	movs	r3, r0
 8006e52:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	213c      	movs	r1, #60	@ 0x3c
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f7f9 fa29 	bl	80002b0 <__aeabi_uidivmod>
 8006e5e:	000b      	movs	r3, r1
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	213c      	movs	r1, #60	@ 0x3c
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f7f9 f99a 	bl	80001a4 <__udivsi3>
 8006e70:	0003      	movs	r3, r0
 8006e72:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2118      	movs	r1, #24
 8006e78:	0018      	movs	r0, r3
 8006e7a:	f7f9 fa19 	bl	80002b0 <__aeabi_uidivmod>
 8006e7e:	000b      	movs	r3, r1
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2118      	movs	r1, #24
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f7f9 f98a 	bl	80001a4 <__udivsi3>
 8006e90:	0003      	movs	r3, r0
 8006e92:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	2107      	movs	r1, #7
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	f7f9 fa08 	bl	80002b0 <__aeabi_uidivmod>
 8006ea0:	000b      	movs	r3, r1
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006eac:	231f      	movs	r3, #31
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006eb8:	e005      	b.n	8006ec6 <breakPosixTime+0xa2>
    year++;
 8006eba:	211f      	movs	r1, #31
 8006ebc:	187b      	adds	r3, r7, r1
 8006ebe:	781a      	ldrb	r2, [r3, #0]
 8006ec0:	187b      	adds	r3, r7, r1
 8006ec2:	3201      	adds	r2, #1
 8006ec4:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006ec6:	241f      	movs	r4, #31
 8006ec8:	193b      	adds	r3, r7, r4
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	4a64      	ldr	r2, [pc, #400]	@ (8007060 <breakPosixTime+0x23c>)
 8006ece:	4694      	mov	ip, r2
 8006ed0:	4463      	add	r3, ip
 8006ed2:	001a      	movs	r2, r3
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	d119      	bne.n	8006f0e <breakPosixTime+0xea>
 8006eda:	193b      	adds	r3, r7, r4
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	4a60      	ldr	r2, [pc, #384]	@ (8007060 <breakPosixTime+0x23c>)
 8006ee0:	4694      	mov	ip, r2
 8006ee2:	4463      	add	r3, ip
 8006ee4:	2164      	movs	r1, #100	@ 0x64
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f7f9 facc 	bl	8000484 <__aeabi_idivmod>
 8006eec:	1e0b      	subs	r3, r1, #0
 8006eee:	d10b      	bne.n	8006f08 <breakPosixTime+0xe4>
 8006ef0:	193b      	adds	r3, r7, r4
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	4a5a      	ldr	r2, [pc, #360]	@ (8007060 <breakPosixTime+0x23c>)
 8006ef6:	4694      	mov	ip, r2
 8006ef8:	4463      	add	r3, ip
 8006efa:	22c8      	movs	r2, #200	@ 0xc8
 8006efc:	0051      	lsls	r1, r2, #1
 8006efe:	0018      	movs	r0, r3
 8006f00:	f7f9 fac0 	bl	8000484 <__aeabi_idivmod>
 8006f04:	1e0b      	subs	r3, r1, #0
 8006f06:	d102      	bne.n	8006f0e <breakPosixTime+0xea>
 8006f08:	23b7      	movs	r3, #183	@ 0xb7
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	e001      	b.n	8006f12 <breakPosixTime+0xee>
 8006f0e:	236e      	movs	r3, #110	@ 0x6e
 8006f10:	33ff      	adds	r3, #255	@ 0xff
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	18d3      	adds	r3, r2, r3
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d9cc      	bls.n	8006eba <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	241f      	movs	r4, #31
 8006f24:	193a      	adds	r2, r7, r4
 8006f26:	7812      	ldrb	r2, [r2, #0]
 8006f28:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006f2a:	193b      	adds	r3, r7, r4
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	4a4c      	ldr	r2, [pc, #304]	@ (8007060 <breakPosixTime+0x23c>)
 8006f30:	4694      	mov	ip, r2
 8006f32:	4463      	add	r3, ip
 8006f34:	001a      	movs	r2, r3
 8006f36:	2303      	movs	r3, #3
 8006f38:	4013      	ands	r3, r2
 8006f3a:	d119      	bne.n	8006f70 <breakPosixTime+0x14c>
 8006f3c:	193b      	adds	r3, r7, r4
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	4a47      	ldr	r2, [pc, #284]	@ (8007060 <breakPosixTime+0x23c>)
 8006f42:	4694      	mov	ip, r2
 8006f44:	4463      	add	r3, ip
 8006f46:	2164      	movs	r1, #100	@ 0x64
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f7f9 fa9b 	bl	8000484 <__aeabi_idivmod>
 8006f4e:	1e0b      	subs	r3, r1, #0
 8006f50:	d10b      	bne.n	8006f6a <breakPosixTime+0x146>
 8006f52:	193b      	adds	r3, r7, r4
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	4a42      	ldr	r2, [pc, #264]	@ (8007060 <breakPosixTime+0x23c>)
 8006f58:	4694      	mov	ip, r2
 8006f5a:	4463      	add	r3, ip
 8006f5c:	22c8      	movs	r2, #200	@ 0xc8
 8006f5e:	0051      	lsls	r1, r2, #1
 8006f60:	0018      	movs	r0, r3
 8006f62:	f7f9 fa8f 	bl	8000484 <__aeabi_idivmod>
 8006f66:	1e0b      	subs	r3, r1, #0
 8006f68:	d102      	bne.n	8006f70 <breakPosixTime+0x14c>
 8006f6a:	23b7      	movs	r3, #183	@ 0xb7
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	e001      	b.n	8006f74 <breakPosixTime+0x150>
 8006f70:	236e      	movs	r3, #110	@ 0x6e
 8006f72:	33ff      	adds	r3, #255	@ 0xff
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	61bb      	str	r3, [r7, #24]

  days=0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
  month=0;
 8006f86:	211e      	movs	r1, #30
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006f8e:	231d      	movs	r3, #29
 8006f90:	18fb      	adds	r3, r7, r3
 8006f92:	2200      	movs	r2, #0
 8006f94:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006f96:	187b      	adds	r3, r7, r1
 8006f98:	2200      	movs	r2, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
 8006f9c:	e048      	b.n	8007030 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006f9e:	231e      	movs	r3, #30
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d12a      	bne.n	8006ffe <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006fa8:	241f      	movs	r4, #31
 8006faa:	193b      	adds	r3, r7, r4
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	4a2c      	ldr	r2, [pc, #176]	@ (8007060 <breakPosixTime+0x23c>)
 8006fb0:	4694      	mov	ip, r2
 8006fb2:	4463      	add	r3, ip
 8006fb4:	001a      	movs	r2, r3
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	4013      	ands	r3, r2
 8006fba:	d11b      	bne.n	8006ff4 <breakPosixTime+0x1d0>
 8006fbc:	193b      	adds	r3, r7, r4
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	4a27      	ldr	r2, [pc, #156]	@ (8007060 <breakPosixTime+0x23c>)
 8006fc2:	4694      	mov	ip, r2
 8006fc4:	4463      	add	r3, ip
 8006fc6:	2164      	movs	r1, #100	@ 0x64
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f7f9 fa5b 	bl	8000484 <__aeabi_idivmod>
 8006fce:	1e0b      	subs	r3, r1, #0
 8006fd0:	d10b      	bne.n	8006fea <breakPosixTime+0x1c6>
 8006fd2:	193b      	adds	r3, r7, r4
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	4a22      	ldr	r2, [pc, #136]	@ (8007060 <breakPosixTime+0x23c>)
 8006fd8:	4694      	mov	ip, r2
 8006fda:	4463      	add	r3, ip
 8006fdc:	22c8      	movs	r2, #200	@ 0xc8
 8006fde:	0051      	lsls	r1, r2, #1
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f7f9 fa4f 	bl	8000484 <__aeabi_idivmod>
 8006fe6:	1e0b      	subs	r3, r1, #0
 8006fe8:	d104      	bne.n	8006ff4 <breakPosixTime+0x1d0>
        monthLength=29;
 8006fea:	231d      	movs	r3, #29
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	221d      	movs	r2, #29
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	e00c      	b.n	800700e <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8006ff4:	231d      	movs	r3, #29
 8006ff6:	18fb      	adds	r3, r7, r3
 8006ff8:	221c      	movs	r2, #28
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e007      	b.n	800700e <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8006ffe:	231e      	movs	r3, #30
 8007000:	18fb      	adds	r3, r7, r3
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	231d      	movs	r3, #29
 8007006:	18fb      	adds	r3, r7, r3
 8007008:	4916      	ldr	r1, [pc, #88]	@ (8007064 <breakPosixTime+0x240>)
 800700a:	5c8a      	ldrb	r2, [r1, r2]
 800700c:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800700e:	211d      	movs	r1, #29
 8007010:	187b      	adds	r3, r7, r1
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	429a      	cmp	r2, r3
 8007018:	d310      	bcc.n	800703c <breakPosixTime+0x218>
      time -= monthLength;
 800701a:	187b      	adds	r3, r7, r1
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007024:	211e      	movs	r1, #30
 8007026:	187b      	adds	r3, r7, r1
 8007028:	781a      	ldrb	r2, [r3, #0]
 800702a:	187b      	adds	r3, r7, r1
 800702c:	3201      	adds	r2, #1
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	231e      	movs	r3, #30
 8007032:	18fb      	adds	r3, r7, r3
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b0b      	cmp	r3, #11
 8007038:	d9b1      	bls.n	8006f9e <breakPosixTime+0x17a>
 800703a:	e000      	b.n	800703e <breakPosixTime+0x21a>
    } else {
        break;
 800703c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800703e:	231e      	movs	r3, #30
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	b2da      	uxtb	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	3301      	adds	r3, #1
 8007052:	b2da      	uxtb	r2, r3
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 8007058:	46c0      	nop			@ (mov r8, r8)
 800705a:	46bd      	mov	sp, r7
 800705c:	b009      	add	sp, #36	@ 0x24
 800705e:	bd90      	pop	{r4, r7, pc}
 8007060:	000007b2 	.word	0x000007b2
 8007064:	080252c4 	.word	0x080252c4

08007068 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800706e:	003b      	movs	r3, r7
 8007070:	0018      	movs	r0, r3
 8007072:	2308      	movs	r3, #8
 8007074:	001a      	movs	r2, r3
 8007076:	2100      	movs	r1, #0
 8007078:	f019 f80a 	bl	8020090 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800707c:	4b30      	ldr	r3, [pc, #192]	@ (8007140 <MX_ADC_Init+0xd8>)
 800707e:	4a31      	ldr	r2, [pc, #196]	@ (8007144 <MX_ADC_Init+0xdc>)
 8007080:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8007082:	4b2f      	ldr	r3, [pc, #188]	@ (8007140 <MX_ADC_Init+0xd8>)
 8007084:	2200      	movs	r2, #0
 8007086:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007088:	4b2d      	ldr	r3, [pc, #180]	@ (8007140 <MX_ADC_Init+0xd8>)
 800708a:	22c0      	movs	r2, #192	@ 0xc0
 800708c:	0612      	lsls	r2, r2, #24
 800708e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007090:	4b2b      	ldr	r3, [pc, #172]	@ (8007140 <MX_ADC_Init+0xd8>)
 8007092:	2200      	movs	r2, #0
 8007094:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007096:	4b2a      	ldr	r3, [pc, #168]	@ (8007140 <MX_ADC_Init+0xd8>)
 8007098:	2200      	movs	r2, #0
 800709a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800709c:	4b28      	ldr	r3, [pc, #160]	@ (8007140 <MX_ADC_Init+0xd8>)
 800709e:	2201      	movs	r2, #1
 80070a0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070a2:	4b27      	ldr	r3, [pc, #156]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80070a8:	4b25      	ldr	r3, [pc, #148]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070aa:	2220      	movs	r2, #32
 80070ac:	2100      	movs	r1, #0
 80070ae:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80070b0:	4b23      	ldr	r3, [pc, #140]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070b2:	2221      	movs	r2, #33	@ 0x21
 80070b4:	2101      	movs	r1, #1
 80070b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80070b8:	4b21      	ldr	r3, [pc, #132]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80070be:	4b20      	ldr	r3, [pc, #128]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070c0:	22c2      	movs	r2, #194	@ 0xc2
 80070c2:	32ff      	adds	r2, #255	@ 0xff
 80070c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80070c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070c8:	222c      	movs	r2, #44	@ 0x2c
 80070ca:	2100      	movs	r1, #0
 80070cc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80070ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070d0:	2204      	movs	r2, #4
 80070d2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80070d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80070da:	4b19      	ldr	r3, [pc, #100]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070dc:	2200      	movs	r2, #0
 80070de:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80070e0:	4b17      	ldr	r3, [pc, #92]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80070e6:	4b16      	ldr	r3, [pc, #88]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80070ec:	4b14      	ldr	r3, [pc, #80]	@ (8007140 <MX_ADC_Init+0xd8>)
 80070ee:	0018      	movs	r0, r3
 80070f0:	f007 fdde 	bl	800ecb0 <HAL_ADC_Init>
 80070f4:	1e03      	subs	r3, r0, #0
 80070f6:	d001      	beq.n	80070fc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80070f8:	f001 f8d6 	bl	80082a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80070fc:	003b      	movs	r3, r7
 80070fe:	4a12      	ldr	r2, [pc, #72]	@ (8007148 <MX_ADC_Init+0xe0>)
 8007100:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007102:	003b      	movs	r3, r7
 8007104:	2280      	movs	r2, #128	@ 0x80
 8007106:	0152      	lsls	r2, r2, #5
 8007108:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800710a:	003a      	movs	r2, r7
 800710c:	4b0c      	ldr	r3, [pc, #48]	@ (8007140 <MX_ADC_Init+0xd8>)
 800710e:	0011      	movs	r1, r2
 8007110:	0018      	movs	r0, r3
 8007112:	f008 f83d 	bl	800f190 <HAL_ADC_ConfigChannel>
 8007116:	1e03      	subs	r3, r0, #0
 8007118:	d001      	beq.n	800711e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800711a:	f001 f8c5 	bl	80082a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800711e:	003b      	movs	r3, r7
 8007120:	4a0a      	ldr	r2, [pc, #40]	@ (800714c <MX_ADC_Init+0xe4>)
 8007122:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007124:	003a      	movs	r2, r7
 8007126:	4b06      	ldr	r3, [pc, #24]	@ (8007140 <MX_ADC_Init+0xd8>)
 8007128:	0011      	movs	r1, r2
 800712a:	0018      	movs	r0, r3
 800712c:	f008 f830 	bl	800f190 <HAL_ADC_ConfigChannel>
 8007130:	1e03      	subs	r3, r0, #0
 8007132:	d001      	beq.n	8007138 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007134:	f001 f8b8 	bl	80082a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007138:	46c0      	nop			@ (mov r8, r8)
 800713a:	46bd      	mov	sp, r7
 800713c:	b002      	add	sp, #8
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000d90 	.word	0x20000d90
 8007144:	40012400 	.word	0x40012400
 8007148:	38004000 	.word	0x38004000
 800714c:	3c008000 	.word	0x3c008000

08007150 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007150:	b590      	push	{r4, r7, lr}
 8007152:	b089      	sub	sp, #36	@ 0x24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007158:	240c      	movs	r4, #12
 800715a:	193b      	adds	r3, r7, r4
 800715c:	0018      	movs	r0, r3
 800715e:	2314      	movs	r3, #20
 8007160:	001a      	movs	r2, r3
 8007162:	2100      	movs	r1, #0
 8007164:	f018 ff94 	bl	8020090 <memset>
  if(adcHandle->Instance==ADC1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a14      	ldr	r2, [pc, #80]	@ (80071c0 <HAL_ADC_MspInit+0x70>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d121      	bne.n	80071b6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007172:	4b14      	ldr	r3, [pc, #80]	@ (80071c4 <HAL_ADC_MspInit+0x74>)
 8007174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007176:	4b13      	ldr	r3, [pc, #76]	@ (80071c4 <HAL_ADC_MspInit+0x74>)
 8007178:	2180      	movs	r1, #128	@ 0x80
 800717a:	0089      	lsls	r1, r1, #2
 800717c:	430a      	orrs	r2, r1
 800717e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007180:	4b10      	ldr	r3, [pc, #64]	@ (80071c4 <HAL_ADC_MspInit+0x74>)
 8007182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007184:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <HAL_ADC_MspInit+0x74>)
 8007186:	2104      	movs	r1, #4
 8007188:	430a      	orrs	r2, r1
 800718a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800718c:	4b0d      	ldr	r3, [pc, #52]	@ (80071c4 <HAL_ADC_MspInit+0x74>)
 800718e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007190:	2204      	movs	r2, #4
 8007192:	4013      	ands	r3, r2
 8007194:	60bb      	str	r3, [r7, #8]
 8007196:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8007198:	193b      	adds	r3, r7, r4
 800719a:	2230      	movs	r2, #48	@ 0x30
 800719c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800719e:	193b      	adds	r3, r7, r4
 80071a0:	2203      	movs	r2, #3
 80071a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a4:	193b      	adds	r3, r7, r4
 80071a6:	2200      	movs	r2, #0
 80071a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071aa:	193b      	adds	r3, r7, r4
 80071ac:	4a06      	ldr	r2, [pc, #24]	@ (80071c8 <HAL_ADC_MspInit+0x78>)
 80071ae:	0019      	movs	r1, r3
 80071b0:	0010      	movs	r0, r2
 80071b2:	f008 fe0b 	bl	800fdcc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80071b6:	46c0      	nop			@ (mov r8, r8)
 80071b8:	46bd      	mov	sp, r7
 80071ba:	b009      	add	sp, #36	@ 0x24
 80071bc:	bd90      	pop	{r4, r7, pc}
 80071be:	46c0      	nop			@ (mov r8, r8)
 80071c0:	40012400 	.word	0x40012400
 80071c4:	40021000 	.word	0x40021000
 80071c8:	50000800 	.word	0x50000800

080071cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80071d2:	4b10      	ldr	r3, [pc, #64]	@ (8007214 <MX_DMA_Init+0x48>)
 80071d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007214 <MX_DMA_Init+0x48>)
 80071d8:	2101      	movs	r1, #1
 80071da:	430a      	orrs	r2, r1
 80071dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80071de:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <MX_DMA_Init+0x48>)
 80071e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e2:	2201      	movs	r2, #1
 80071e4:	4013      	ands	r3, r2
 80071e6:	607b      	str	r3, [r7, #4]
 80071e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80071ea:	2200      	movs	r2, #0
 80071ec:	2100      	movs	r1, #0
 80071ee:	200a      	movs	r0, #10
 80071f0:	f008 f99a 	bl	800f528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80071f4:	200a      	movs	r0, #10
 80071f6:	f008 f9ac 	bl	800f552 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80071fa:	2200      	movs	r2, #0
 80071fc:	2103      	movs	r1, #3
 80071fe:	200b      	movs	r0, #11
 8007200:	f008 f992 	bl	800f528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007204:	200b      	movs	r0, #11
 8007206:	f008 f9a4 	bl	800f552 <HAL_NVIC_EnableIRQ>

}
 800720a:	46c0      	nop			@ (mov r8, r8)
 800720c:	46bd      	mov	sp, r7
 800720e:	b002      	add	sp, #8
 8007210:	bd80      	pop	{r7, pc}
 8007212:	46c0      	nop			@ (mov r8, r8)
 8007214:	40021000 	.word	0x40021000

08007218 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b7f      	cmp	r3, #127	@ 0x7f
 8007228:	d901      	bls.n	800722e <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800722a:	237f      	movs	r3, #127	@ 0x7f
 800722c:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800722e:	2017      	movs	r0, #23
 8007230:	183b      	adds	r3, r7, r0
 8007232:	490d      	ldr	r1, [pc, #52]	@ (8007268 <accessLUT10log10+0x50>)
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	188a      	adds	r2, r1, r2
 8007238:	7812      	ldrb	r2, [r2, #0]
 800723a:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800723c:	0001      	movs	r1, r0
 800723e:	187b      	adds	r3, r7, r1
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2206      	movs	r2, #6
 8007244:	4113      	asrs	r3, r2
 8007246:	001a      	movs	r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800724c:	187b      	adds	r3, r7, r1
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2106      	movs	r1, #6
 8007256:	408b      	lsls	r3, r1
 8007258:	1ad2      	subs	r2, r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	601a      	str	r2, [r3, #0]
}
 800725e:	46c0      	nop			@ (mov r8, r8)
 8007260:	46bd      	mov	sp, r7
 8007262:	b006      	add	sp, #24
 8007264:	bd80      	pop	{r7, pc}
 8007266:	46c0      	nop			@ (mov r8, r8)
 8007268:	080252d0 	.word	0x080252d0

0800726c <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800726c:	b5b0      	push	{r4, r5, r7, lr}
 800726e:	b090      	sub	sp, #64	@ 0x40
 8007270:	af00      	add	r7, sp, #0
 8007272:	6138      	str	r0, [r7, #16]
 8007274:	6179      	str	r1, [r7, #20]
 8007276:	60fa      	str	r2, [r7, #12]
 8007278:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800727a:	2308      	movs	r3, #8
 800727c:	001a      	movs	r2, r3
 800727e:	3a20      	subs	r2, #32
 8007280:	2a00      	cmp	r2, #0
 8007282:	db03      	blt.n	800728c <efficient10log10+0x20>
 8007284:	2101      	movs	r1, #1
 8007286:	4091      	lsls	r1, r2
 8007288:	000d      	movs	r5, r1
 800728a:	e008      	b.n	800729e <efficient10log10+0x32>
 800728c:	2220      	movs	r2, #32
 800728e:	1ad2      	subs	r2, r2, r3
 8007290:	2101      	movs	r1, #1
 8007292:	40d1      	lsrs	r1, r2
 8007294:	000a      	movs	r2, r1
 8007296:	2100      	movs	r1, #0
 8007298:	4099      	lsls	r1, r3
 800729a:	000d      	movs	r5, r1
 800729c:	4315      	orrs	r5, r2
 800729e:	2201      	movs	r2, #1
 80072a0:	409a      	lsls	r2, r3
 80072a2:	0014      	movs	r4, r2
 80072a4:	2201      	movs	r2, #1
 80072a6:	4252      	negs	r2, r2
 80072a8:	17d3      	asrs	r3, r2, #31
 80072aa:	1912      	adds	r2, r2, r4
 80072ac:	416b      	adcs	r3, r5
 80072ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80072b0:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80072b2:	2336      	movs	r3, #54	@ 0x36
 80072b4:	2208      	movs	r2, #8
 80072b6:	189b      	adds	r3, r3, r2
 80072b8:	19db      	adds	r3, r3, r7
 80072ba:	2200      	movs	r2, #0
 80072bc:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80072be:	e017      	b.n	80072f0 <efficient10log10+0x84>
    {
        P = P >> 1;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	07db      	lsls	r3, r3, #31
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	0852      	lsrs	r2, r2, #1
 80072c8:	603a      	str	r2, [r7, #0]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	431a      	orrs	r2, r3
 80072ce:	603a      	str	r2, [r7, #0]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	687c      	ldr	r4, [r7, #4]
 80072da:	613b      	str	r3, [r7, #16]
 80072dc:	617c      	str	r4, [r7, #20]
        bShift++;
 80072de:	2136      	movs	r1, #54	@ 0x36
 80072e0:	2008      	movs	r0, #8
 80072e2:	180b      	adds	r3, r1, r0
 80072e4:	19db      	adds	r3, r3, r7
 80072e6:	881a      	ldrh	r2, [r3, #0]
 80072e8:	180b      	adds	r3, r1, r0
 80072ea:	19db      	adds	r3, r3, r7
 80072ec:	3201      	adds	r2, #1
 80072ee:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d8e3      	bhi.n	80072c0 <efficient10log10+0x54>
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d103      	bne.n	8007308 <efficient10log10+0x9c>
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	429a      	cmp	r2, r3
 8007306:	d8db      	bhi.n	80072c0 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	2308      	movs	r3, #8
 800730c:	3b01      	subs	r3, #1
 800730e:	2101      	movs	r1, #1
 8007310:	4099      	lsls	r1, r3
 8007312:	000b      	movs	r3, r1
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007320:	231c      	movs	r3, #28
 8007322:	2408      	movs	r4, #8
 8007324:	191b      	adds	r3, r3, r4
 8007326:	19da      	adds	r2, r3, r7
 8007328:	2320      	movs	r3, #32
 800732a:	191b      	adds	r3, r3, r4
 800732c:	19d9      	adds	r1, r3, r7
 800732e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007330:	0018      	movs	r0, r3
 8007332:	f7ff ff71 	bl	8007218 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007336:	2215      	movs	r2, #21
 8007338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733a:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800733c:	2036      	movs	r0, #54	@ 0x36
 800733e:	1902      	adds	r2, r0, r4
 8007340:	19d2      	adds	r2, r2, r7
 8007342:	8812      	ldrh	r2, [r2, #0]
 8007344:	2103      	movs	r1, #3
 8007346:	434a      	muls	r2, r1
 8007348:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800734a:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800734c:	0021      	movs	r1, r4
 800734e:	1843      	adds	r3, r0, r1
 8007350:	19db      	adds	r3, r3, r7
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	2201      	movs	r2, #1
 8007356:	4353      	muls	r3, r2
 8007358:	2203      	movs	r2, #3
 800735a:	4113      	asrs	r3, r2
 800735c:	001a      	movs	r2, r3
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8007362:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8007364:	2314      	movs	r3, #20
 8007366:	185b      	adds	r3, r3, r1
 8007368:	19da      	adds	r2, r3, r7
 800736a:	2318      	movs	r3, #24
 800736c:	185b      	adds	r3, r3, r1
 800736e:	19db      	adds	r3, r3, r7
 8007370:	0011      	movs	r1, r2
 8007372:	0018      	movs	r0, r3
 8007374:	f000 f80a 	bl	800738c <correctIntFracNumber>
    integerPart[0] = intPart;
 8007378:	6a3a      	ldr	r2, [r7, #32]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	601a      	str	r2, [r3, #0]
}
 8007384:	46c0      	nop			@ (mov r8, r8)
 8007386:	46bd      	mov	sp, r7
 8007388:	b010      	add	sp, #64	@ 0x40
 800738a:	bdb0      	pop	{r4, r5, r7, pc}

0800738c <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8007396:	e00a      	b.n	80073ae <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3b0a      	subs	r3, #10
 80073a8:	001a      	movs	r2, r3
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b09      	cmp	r3, #9
 80073b4:	dcf0      	bgt.n	8007398 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80073b6:	e00a      	b.n	80073ce <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	1e5a      	subs	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	330a      	adds	r3, #10
 80073c8:	001a      	movs	r2, r3
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3309      	adds	r3, #9
 80073d4:	dbf0      	blt.n	80073b8 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da0f      	bge.n	80073fe <correctIntFracNumber+0x72>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	dd0b      	ble.n	80073fe <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3b0a      	subs	r3, #10
 80073f6:	001a      	movs	r2, r3
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 80073fc:	e012      	b.n	8007424 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	dd0e      	ble.n	8007424 <correctIntFracNumber+0x98>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	da0a      	bge.n	8007424 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	1e5a      	subs	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	330a      	adds	r3, #10
 800741e:	001a      	movs	r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	601a      	str	r2, [r3, #0]
}
 8007424:	46c0      	nop			@ (mov r8, r8)
 8007426:	46bd      	mov	sp, r7
 8007428:	b002      	add	sp, #8
 800742a:	bd80      	pop	{r7, pc}

0800742c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800742c:	b590      	push	{r4, r7, lr}
 800742e:	b08b      	sub	sp, #44	@ 0x2c
 8007430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007432:	2414      	movs	r4, #20
 8007434:	193b      	adds	r3, r7, r4
 8007436:	0018      	movs	r0, r3
 8007438:	2314      	movs	r3, #20
 800743a:	001a      	movs	r2, r3
 800743c:	2100      	movs	r1, #0
 800743e:	f018 fe27 	bl	8020090 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007442:	4b8a      	ldr	r3, [pc, #552]	@ (800766c <MX_GPIO_Init+0x240>)
 8007444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007446:	4b89      	ldr	r3, [pc, #548]	@ (800766c <MX_GPIO_Init+0x240>)
 8007448:	2104      	movs	r1, #4
 800744a:	430a      	orrs	r2, r1
 800744c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800744e:	4b87      	ldr	r3, [pc, #540]	@ (800766c <MX_GPIO_Init+0x240>)
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	2204      	movs	r2, #4
 8007454:	4013      	ands	r3, r2
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800745a:	4b84      	ldr	r3, [pc, #528]	@ (800766c <MX_GPIO_Init+0x240>)
 800745c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800745e:	4b83      	ldr	r3, [pc, #524]	@ (800766c <MX_GPIO_Init+0x240>)
 8007460:	2180      	movs	r1, #128	@ 0x80
 8007462:	430a      	orrs	r2, r1
 8007464:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007466:	4b81      	ldr	r3, [pc, #516]	@ (800766c <MX_GPIO_Init+0x240>)
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	2280      	movs	r2, #128	@ 0x80
 800746c:	4013      	ands	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007472:	4b7e      	ldr	r3, [pc, #504]	@ (800766c <MX_GPIO_Init+0x240>)
 8007474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007476:	4b7d      	ldr	r3, [pc, #500]	@ (800766c <MX_GPIO_Init+0x240>)
 8007478:	2101      	movs	r1, #1
 800747a:	430a      	orrs	r2, r1
 800747c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800747e:	4b7b      	ldr	r3, [pc, #492]	@ (800766c <MX_GPIO_Init+0x240>)
 8007480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007482:	2201      	movs	r2, #1
 8007484:	4013      	ands	r3, r2
 8007486:	60bb      	str	r3, [r7, #8]
 8007488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800748a:	4b78      	ldr	r3, [pc, #480]	@ (800766c <MX_GPIO_Init+0x240>)
 800748c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748e:	4b77      	ldr	r3, [pc, #476]	@ (800766c <MX_GPIO_Init+0x240>)
 8007490:	2102      	movs	r1, #2
 8007492:	430a      	orrs	r2, r1
 8007494:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007496:	4b75      	ldr	r3, [pc, #468]	@ (800766c <MX_GPIO_Init+0x240>)
 8007498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749a:	2202      	movs	r2, #2
 800749c:	4013      	ands	r3, r2
 800749e:	607b      	str	r3, [r7, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074a2:	4b72      	ldr	r3, [pc, #456]	@ (800766c <MX_GPIO_Init+0x240>)
 80074a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a6:	4b71      	ldr	r3, [pc, #452]	@ (800766c <MX_GPIO_Init+0x240>)
 80074a8:	2108      	movs	r1, #8
 80074aa:	430a      	orrs	r2, r1
 80074ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074ae:	4b6f      	ldr	r3, [pc, #444]	@ (800766c <MX_GPIO_Init+0x240>)
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	2208      	movs	r2, #8
 80074b4:	4013      	ands	r3, r2
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074ba:	4b6d      	ldr	r3, [pc, #436]	@ (8007670 <MX_GPIO_Init+0x244>)
 80074bc:	2201      	movs	r2, #1
 80074be:	2101      	movs	r1, #1
 80074c0:	0018      	movs	r0, r3
 80074c2:	f008 fe1e 	bl	8010102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80074c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007670 <MX_GPIO_Init+0x244>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	2102      	movs	r1, #2
 80074cc:	0018      	movs	r0, r3
 80074ce:	f008 fe18 	bl	8010102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80074d2:	4968      	ldr	r1, [pc, #416]	@ (8007674 <MX_GPIO_Init+0x248>)
 80074d4:	4b68      	ldr	r3, [pc, #416]	@ (8007678 <MX_GPIO_Init+0x24c>)
 80074d6:	2201      	movs	r2, #1
 80074d8:	0018      	movs	r0, r3
 80074da:	f008 fe12 	bl	8010102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80074de:	2380      	movs	r3, #128	@ 0x80
 80074e0:	011b      	lsls	r3, r3, #4
 80074e2:	4866      	ldr	r0, [pc, #408]	@ (800767c <MX_GPIO_Init+0x250>)
 80074e4:	2201      	movs	r2, #1
 80074e6:	0019      	movs	r1, r3
 80074e8:	f008 fe0b 	bl	8010102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80074ec:	2380      	movs	r3, #128	@ 0x80
 80074ee:	015b      	lsls	r3, r3, #5
 80074f0:	4862      	ldr	r0, [pc, #392]	@ (800767c <MX_GPIO_Init+0x250>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	0019      	movs	r1, r3
 80074f6:	f008 fe04 	bl	8010102 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80074fa:	193b      	adds	r3, r7, r4
 80074fc:	4a60      	ldr	r2, [pc, #384]	@ (8007680 <MX_GPIO_Init+0x254>)
 80074fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007500:	193b      	adds	r3, r7, r4
 8007502:	2203      	movs	r2, #3
 8007504:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007506:	193b      	adds	r3, r7, r4
 8007508:	2200      	movs	r2, #0
 800750a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800750c:	193b      	adds	r3, r7, r4
 800750e:	4a5b      	ldr	r2, [pc, #364]	@ (800767c <MX_GPIO_Init+0x250>)
 8007510:	0019      	movs	r1, r3
 8007512:	0010      	movs	r0, r2
 8007514:	f008 fc5a 	bl	800fdcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007518:	193b      	adds	r3, r7, r4
 800751a:	2203      	movs	r2, #3
 800751c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800751e:	193b      	adds	r3, r7, r4
 8007520:	2201      	movs	r2, #1
 8007522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007524:	193b      	adds	r3, r7, r4
 8007526:	2200      	movs	r2, #0
 8007528:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800752a:	193b      	adds	r3, r7, r4
 800752c:	2200      	movs	r2, #0
 800752e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007530:	193b      	adds	r3, r7, r4
 8007532:	4a4f      	ldr	r2, [pc, #316]	@ (8007670 <MX_GPIO_Init+0x244>)
 8007534:	0019      	movs	r1, r3
 8007536:	0010      	movs	r0, r2
 8007538:	f008 fc48 	bl	800fdcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800753c:	193b      	adds	r3, r7, r4
 800753e:	2270      	movs	r2, #112	@ 0x70
 8007540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007542:	193b      	adds	r3, r7, r4
 8007544:	2203      	movs	r2, #3
 8007546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007548:	193b      	adds	r3, r7, r4
 800754a:	2200      	movs	r2, #0
 800754c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800754e:	193a      	adds	r2, r7, r4
 8007550:	23a0      	movs	r3, #160	@ 0xa0
 8007552:	05db      	lsls	r3, r3, #23
 8007554:	0011      	movs	r1, r2
 8007556:	0018      	movs	r0, r3
 8007558:	f008 fc38 	bl	800fdcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800755c:	193b      	adds	r3, r7, r4
 800755e:	22c0      	movs	r2, #192	@ 0xc0
 8007560:	0052      	lsls	r2, r2, #1
 8007562:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007564:	193b      	adds	r3, r7, r4
 8007566:	2200      	movs	r2, #0
 8007568:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756a:	193b      	adds	r3, r7, r4
 800756c:	2200      	movs	r2, #0
 800756e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007570:	193a      	adds	r2, r7, r4
 8007572:	23a0      	movs	r3, #160	@ 0xa0
 8007574:	05db      	lsls	r3, r3, #23
 8007576:	0011      	movs	r1, r2
 8007578:	0018      	movs	r0, r3
 800757a:	f008 fc27 	bl	800fdcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800757e:	193b      	adds	r3, r7, r4
 8007580:	4a3c      	ldr	r2, [pc, #240]	@ (8007674 <MX_GPIO_Init+0x248>)
 8007582:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007584:	193b      	adds	r3, r7, r4
 8007586:	2201      	movs	r2, #1
 8007588:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800758a:	193b      	adds	r3, r7, r4
 800758c:	2200      	movs	r2, #0
 800758e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007590:	193b      	adds	r3, r7, r4
 8007592:	2200      	movs	r2, #0
 8007594:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007596:	193b      	adds	r3, r7, r4
 8007598:	4a37      	ldr	r2, [pc, #220]	@ (8007678 <MX_GPIO_Init+0x24c>)
 800759a:	0019      	movs	r1, r3
 800759c:	0010      	movs	r0, r2
 800759e:	f008 fc15 	bl	800fdcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80075a2:	193b      	adds	r3, r7, r4
 80075a4:	4a37      	ldr	r2, [pc, #220]	@ (8007684 <MX_GPIO_Init+0x258>)
 80075a6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075a8:	193b      	adds	r3, r7, r4
 80075aa:	2203      	movs	r2, #3
 80075ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ae:	193b      	adds	r3, r7, r4
 80075b0:	2200      	movs	r2, #0
 80075b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075b4:	193b      	adds	r3, r7, r4
 80075b6:	4a30      	ldr	r2, [pc, #192]	@ (8007678 <MX_GPIO_Init+0x24c>)
 80075b8:	0019      	movs	r1, r3
 80075ba:	0010      	movs	r0, r2
 80075bc:	f008 fc06 	bl	800fdcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80075c0:	0021      	movs	r1, r4
 80075c2:	187b      	adds	r3, r7, r1
 80075c4:	2280      	movs	r2, #128	@ 0x80
 80075c6:	0092      	lsls	r2, r2, #2
 80075c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075ca:	000c      	movs	r4, r1
 80075cc:	193b      	adds	r3, r7, r4
 80075ce:	2200      	movs	r2, #0
 80075d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d2:	193b      	adds	r3, r7, r4
 80075d4:	2200      	movs	r2, #0
 80075d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80075d8:	193b      	adds	r3, r7, r4
 80075da:	4a28      	ldr	r2, [pc, #160]	@ (800767c <MX_GPIO_Init+0x250>)
 80075dc:	0019      	movs	r1, r3
 80075de:	0010      	movs	r0, r2
 80075e0:	f008 fbf4 	bl	800fdcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80075e4:	193b      	adds	r3, r7, r4
 80075e6:	2280      	movs	r2, #128	@ 0x80
 80075e8:	0212      	lsls	r2, r2, #8
 80075ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80075ec:	193b      	adds	r3, r7, r4
 80075ee:	2288      	movs	r2, #136	@ 0x88
 80075f0:	0352      	lsls	r2, r2, #13
 80075f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f4:	193b      	adds	r3, r7, r4
 80075f6:	2200      	movs	r2, #0
 80075f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80075fa:	193a      	adds	r2, r7, r4
 80075fc:	23a0      	movs	r3, #160	@ 0xa0
 80075fe:	05db      	lsls	r3, r3, #23
 8007600:	0011      	movs	r1, r2
 8007602:	0018      	movs	r0, r3
 8007604:	f008 fbe2 	bl	800fdcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007608:	0021      	movs	r1, r4
 800760a:	187b      	adds	r3, r7, r1
 800760c:	22c0      	movs	r2, #192	@ 0xc0
 800760e:	0152      	lsls	r2, r2, #5
 8007610:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007612:	000c      	movs	r4, r1
 8007614:	193b      	adds	r3, r7, r4
 8007616:	2201      	movs	r2, #1
 8007618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800761a:	193b      	adds	r3, r7, r4
 800761c:	2200      	movs	r2, #0
 800761e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007620:	193b      	adds	r3, r7, r4
 8007622:	2200      	movs	r2, #0
 8007624:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007626:	193b      	adds	r3, r7, r4
 8007628:	4a14      	ldr	r2, [pc, #80]	@ (800767c <MX_GPIO_Init+0x250>)
 800762a:	0019      	movs	r1, r3
 800762c:	0010      	movs	r0, r2
 800762e:	f008 fbcd 	bl	800fdcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8007632:	0021      	movs	r1, r4
 8007634:	187b      	adds	r3, r7, r1
 8007636:	2204      	movs	r2, #4
 8007638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800763a:	187b      	adds	r3, r7, r1
 800763c:	2200      	movs	r2, #0
 800763e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007640:	187b      	adds	r3, r7, r1
 8007642:	2201      	movs	r2, #1
 8007644:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007646:	187b      	adds	r3, r7, r1
 8007648:	4a0f      	ldr	r2, [pc, #60]	@ (8007688 <MX_GPIO_Init+0x25c>)
 800764a:	0019      	movs	r1, r3
 800764c:	0010      	movs	r0, r2
 800764e:	f008 fbbd 	bl	800fdcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007652:	2200      	movs	r2, #0
 8007654:	2100      	movs	r1, #0
 8007656:	2007      	movs	r0, #7
 8007658:	f007 ff66 	bl	800f528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800765c:	2007      	movs	r0, #7
 800765e:	f007 ff78 	bl	800f552 <HAL_NVIC_EnableIRQ>

}
 8007662:	46c0      	nop			@ (mov r8, r8)
 8007664:	46bd      	mov	sp, r7
 8007666:	b00b      	add	sp, #44	@ 0x2c
 8007668:	bd90      	pop	{r4, r7, pc}
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	40021000 	.word	0x40021000
 8007670:	50001c00 	.word	0x50001c00
 8007674:	00000301 	.word	0x00000301
 8007678:	50000400 	.word	0x50000400
 800767c:	50000800 	.word	0x50000800
 8007680:	0000200c 	.word	0x0000200c
 8007684:	0000403e 	.word	0x0000403e
 8007688:	50000c00 	.word	0x50000c00

0800768c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2100      	movs	r1, #0
 800769a:	0018      	movs	r0, r3
 800769c:	f00f f90c 	bl	80168b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2108      	movs	r1, #8
 80076a4:	0018      	movs	r0, r3
 80076a6:	f00f f907 	bl	80168b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	210c      	movs	r1, #12
 80076ae:	0018      	movs	r0, r3
 80076b0:	f00f f902 	bl	80168b8 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80076b4:	2380      	movs	r3, #128	@ 0x80
 80076b6:	05db      	lsls	r3, r3, #23
 80076b8:	22fa      	movs	r2, #250	@ 0xfa
 80076ba:	0112      	lsls	r2, r2, #4
 80076bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80076be:	2380      	movs	r3, #128	@ 0x80
 80076c0:	05db      	lsls	r3, r3, #23
 80076c2:	22fa      	movs	r2, #250	@ 0xfa
 80076c4:	0112      	lsls	r2, r2, #4
 80076c6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80076c8:	2380      	movs	r3, #128	@ 0x80
 80076ca:	05db      	lsls	r3, r3, #23
 80076cc:	22fa      	movs	r2, #250	@ 0xfa
 80076ce:	0112      	lsls	r2, r2, #4
 80076d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80076d2:	2380      	movs	r3, #128	@ 0x80
 80076d4:	05db      	lsls	r3, r3, #23
 80076d6:	22fa      	movs	r2, #250	@ 0xfa
 80076d8:	0112      	lsls	r2, r2, #4
 80076da:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2100      	movs	r1, #0
 80076e0:	0018      	movs	r0, r3
 80076e2:	f00f f8e9 	bl	80168b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2104      	movs	r1, #4
 80076ea:	0018      	movs	r0, r3
 80076ec:	f00f f8e4 	bl	80168b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2108      	movs	r1, #8
 80076f4:	0018      	movs	r0, r3
 80076f6:	f00f f8df 	bl	80168b8 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 80076fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007724 <GPIO_InitPWMLEDs+0x98>)
 80076fc:	22fa      	movs	r2, #250	@ 0xfa
 80076fe:	0112      	lsls	r2, r2, #4
 8007700:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007702:	4b08      	ldr	r3, [pc, #32]	@ (8007724 <GPIO_InitPWMLEDs+0x98>)
 8007704:	22fa      	movs	r2, #250	@ 0xfa
 8007706:	0112      	lsls	r2, r2, #4
 8007708:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800770a:	4b06      	ldr	r3, [pc, #24]	@ (8007724 <GPIO_InitPWMLEDs+0x98>)
 800770c:	22fa      	movs	r2, #250	@ 0xfa
 800770e:	0112      	lsls	r2, r2, #4
 8007710:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007712:	4b04      	ldr	r3, [pc, #16]	@ (8007724 <GPIO_InitPWMLEDs+0x98>)
 8007714:	22fa      	movs	r2, #250	@ 0xfa
 8007716:	0112      	lsls	r2, r2, #4
 8007718:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800771a:	46c0      	nop			@ (mov r8, r8)
 800771c:	46bd      	mov	sp, r7
 800771e:	b002      	add	sp, #8
 8007720:	bd80      	pop	{r7, pc}
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	40000400 	.word	0x40000400

08007728 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800772c:	4b1b      	ldr	r3, [pc, #108]	@ (800779c <MX_I2C1_Init+0x74>)
 800772e:	4a1c      	ldr	r2, [pc, #112]	@ (80077a0 <MX_I2C1_Init+0x78>)
 8007730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8007732:	4b1a      	ldr	r3, [pc, #104]	@ (800779c <MX_I2C1_Init+0x74>)
 8007734:	4a1b      	ldr	r2, [pc, #108]	@ (80077a4 <MX_I2C1_Init+0x7c>)
 8007736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007738:	4b18      	ldr	r3, [pc, #96]	@ (800779c <MX_I2C1_Init+0x74>)
 800773a:	2200      	movs	r2, #0
 800773c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800773e:	4b17      	ldr	r3, [pc, #92]	@ (800779c <MX_I2C1_Init+0x74>)
 8007740:	2201      	movs	r2, #1
 8007742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007744:	4b15      	ldr	r3, [pc, #84]	@ (800779c <MX_I2C1_Init+0x74>)
 8007746:	2200      	movs	r2, #0
 8007748:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800774a:	4b14      	ldr	r3, [pc, #80]	@ (800779c <MX_I2C1_Init+0x74>)
 800774c:	2200      	movs	r2, #0
 800774e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007750:	4b12      	ldr	r3, [pc, #72]	@ (800779c <MX_I2C1_Init+0x74>)
 8007752:	2200      	movs	r2, #0
 8007754:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007756:	4b11      	ldr	r3, [pc, #68]	@ (800779c <MX_I2C1_Init+0x74>)
 8007758:	2200      	movs	r2, #0
 800775a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800775c:	4b0f      	ldr	r3, [pc, #60]	@ (800779c <MX_I2C1_Init+0x74>)
 800775e:	2200      	movs	r2, #0
 8007760:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007762:	4b0e      	ldr	r3, [pc, #56]	@ (800779c <MX_I2C1_Init+0x74>)
 8007764:	0018      	movs	r0, r3
 8007766:	f008 fd05 	bl	8010174 <HAL_I2C_Init>
 800776a:	1e03      	subs	r3, r0, #0
 800776c:	d001      	beq.n	8007772 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800776e:	f000 fd9b 	bl	80082a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007772:	4b0a      	ldr	r3, [pc, #40]	@ (800779c <MX_I2C1_Init+0x74>)
 8007774:	2100      	movs	r1, #0
 8007776:	0018      	movs	r0, r3
 8007778:	f00b f8d6 	bl	8012928 <HAL_I2CEx_ConfigAnalogFilter>
 800777c:	1e03      	subs	r3, r0, #0
 800777e:	d001      	beq.n	8007784 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007780:	f000 fd92 	bl	80082a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007784:	4b05      	ldr	r3, [pc, #20]	@ (800779c <MX_I2C1_Init+0x74>)
 8007786:	2100      	movs	r1, #0
 8007788:	0018      	movs	r0, r3
 800778a:	f00b f919 	bl	80129c0 <HAL_I2CEx_ConfigDigitalFilter>
 800778e:	1e03      	subs	r3, r0, #0
 8007790:	d001      	beq.n	8007796 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007792:	f000 fd89 	bl	80082a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007796:	46c0      	nop			@ (mov r8, r8)
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20000dec 	.word	0x20000dec
 80077a0:	40005400 	.word	0x40005400
 80077a4:	00503d58 	.word	0x00503d58

080077a8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80077ac:	4b1b      	ldr	r3, [pc, #108]	@ (800781c <MX_I2C2_Init+0x74>)
 80077ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007820 <MX_I2C2_Init+0x78>)
 80077b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80077b2:	4b1a      	ldr	r3, [pc, #104]	@ (800781c <MX_I2C2_Init+0x74>)
 80077b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007824 <MX_I2C2_Init+0x7c>)
 80077b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80077b8:	4b18      	ldr	r3, [pc, #96]	@ (800781c <MX_I2C2_Init+0x74>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077be:	4b17      	ldr	r3, [pc, #92]	@ (800781c <MX_I2C2_Init+0x74>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077c4:	4b15      	ldr	r3, [pc, #84]	@ (800781c <MX_I2C2_Init+0x74>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80077ca:	4b14      	ldr	r3, [pc, #80]	@ (800781c <MX_I2C2_Init+0x74>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80077d0:	4b12      	ldr	r3, [pc, #72]	@ (800781c <MX_I2C2_Init+0x74>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077d6:	4b11      	ldr	r3, [pc, #68]	@ (800781c <MX_I2C2_Init+0x74>)
 80077d8:	2200      	movs	r2, #0
 80077da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077dc:	4b0f      	ldr	r3, [pc, #60]	@ (800781c <MX_I2C2_Init+0x74>)
 80077de:	2200      	movs	r2, #0
 80077e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80077e2:	4b0e      	ldr	r3, [pc, #56]	@ (800781c <MX_I2C2_Init+0x74>)
 80077e4:	0018      	movs	r0, r3
 80077e6:	f008 fcc5 	bl	8010174 <HAL_I2C_Init>
 80077ea:	1e03      	subs	r3, r0, #0
 80077ec:	d001      	beq.n	80077f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80077ee:	f000 fd5b 	bl	80082a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077f2:	4b0a      	ldr	r3, [pc, #40]	@ (800781c <MX_I2C2_Init+0x74>)
 80077f4:	2100      	movs	r1, #0
 80077f6:	0018      	movs	r0, r3
 80077f8:	f00b f896 	bl	8012928 <HAL_I2CEx_ConfigAnalogFilter>
 80077fc:	1e03      	subs	r3, r0, #0
 80077fe:	d001      	beq.n	8007804 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007800:	f000 fd52 	bl	80082a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007804:	4b05      	ldr	r3, [pc, #20]	@ (800781c <MX_I2C2_Init+0x74>)
 8007806:	2100      	movs	r1, #0
 8007808:	0018      	movs	r0, r3
 800780a:	f00b f8d9 	bl	80129c0 <HAL_I2CEx_ConfigDigitalFilter>
 800780e:	1e03      	subs	r3, r0, #0
 8007810:	d001      	beq.n	8007816 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007812:	f000 fd49 	bl	80082a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007816:	46c0      	nop			@ (mov r8, r8)
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20000e40 	.word	0x20000e40
 8007820:	40005800 	.word	0x40005800
 8007824:	00503d58 	.word	0x00503d58

08007828 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007828:	b590      	push	{r4, r7, lr}
 800782a:	b08b      	sub	sp, #44	@ 0x2c
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007830:	2414      	movs	r4, #20
 8007832:	193b      	adds	r3, r7, r4
 8007834:	0018      	movs	r0, r3
 8007836:	2314      	movs	r3, #20
 8007838:	001a      	movs	r2, r3
 800783a:	2100      	movs	r1, #0
 800783c:	f018 fc28 	bl	8020090 <memset>
  if(i2cHandle->Instance==I2C1)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a5d      	ldr	r2, [pc, #372]	@ (80079bc <HAL_I2C_MspInit+0x194>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d000      	beq.n	800784c <HAL_I2C_MspInit+0x24>
 800784a:	e083      	b.n	8007954 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800784c:	4b5c      	ldr	r3, [pc, #368]	@ (80079c0 <HAL_I2C_MspInit+0x198>)
 800784e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007850:	4b5b      	ldr	r3, [pc, #364]	@ (80079c0 <HAL_I2C_MspInit+0x198>)
 8007852:	2102      	movs	r1, #2
 8007854:	430a      	orrs	r2, r1
 8007856:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007858:	4b59      	ldr	r3, [pc, #356]	@ (80079c0 <HAL_I2C_MspInit+0x198>)
 800785a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785c:	2202      	movs	r2, #2
 800785e:	4013      	ands	r3, r2
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007864:	0021      	movs	r1, r4
 8007866:	187b      	adds	r3, r7, r1
 8007868:	22c0      	movs	r2, #192	@ 0xc0
 800786a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800786c:	187b      	adds	r3, r7, r1
 800786e:	2212      	movs	r2, #18
 8007870:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007872:	187b      	adds	r3, r7, r1
 8007874:	2200      	movs	r2, #0
 8007876:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007878:	187b      	adds	r3, r7, r1
 800787a:	2203      	movs	r2, #3
 800787c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800787e:	187b      	adds	r3, r7, r1
 8007880:	2201      	movs	r2, #1
 8007882:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007884:	187b      	adds	r3, r7, r1
 8007886:	4a4f      	ldr	r2, [pc, #316]	@ (80079c4 <HAL_I2C_MspInit+0x19c>)
 8007888:	0019      	movs	r1, r3
 800788a:	0010      	movs	r0, r2
 800788c:	f008 fa9e 	bl	800fdcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007890:	4b4b      	ldr	r3, [pc, #300]	@ (80079c0 <HAL_I2C_MspInit+0x198>)
 8007892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007894:	4b4a      	ldr	r3, [pc, #296]	@ (80079c0 <HAL_I2C_MspInit+0x198>)
 8007896:	2180      	movs	r1, #128	@ 0x80
 8007898:	0389      	lsls	r1, r1, #14
 800789a:	430a      	orrs	r2, r1
 800789c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800789e:	4b4a      	ldr	r3, [pc, #296]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078a0:	4a4a      	ldr	r2, [pc, #296]	@ (80079cc <HAL_I2C_MspInit+0x1a4>)
 80078a2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80078a4:	4b48      	ldr	r3, [pc, #288]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078a6:	2206      	movs	r2, #6
 80078a8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078aa:	4b47      	ldr	r3, [pc, #284]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078b0:	4b45      	ldr	r3, [pc, #276]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078b6:	4b44      	ldr	r3, [pc, #272]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078b8:	2280      	movs	r2, #128	@ 0x80
 80078ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078bc:	4b42      	ldr	r3, [pc, #264]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078be:	2200      	movs	r2, #0
 80078c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078c2:	4b41      	ldr	r3, [pc, #260]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80078c8:	4b3f      	ldr	r3, [pc, #252]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078ce:	4b3e      	ldr	r3, [pc, #248]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80078d4:	4b3c      	ldr	r3, [pc, #240]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078d6:	0018      	movs	r0, r3
 80078d8:	f007 fe5c 	bl	800f594 <HAL_DMA_Init>
 80078dc:	1e03      	subs	r3, r0, #0
 80078de:	d001      	beq.n	80078e4 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80078e0:	f000 fce2 	bl	80082a8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a38      	ldr	r2, [pc, #224]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80078ea:	4b37      	ldr	r3, [pc, #220]	@ (80079c8 <HAL_I2C_MspInit+0x1a0>)
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80078f0:	4b37      	ldr	r3, [pc, #220]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 80078f2:	4a38      	ldr	r2, [pc, #224]	@ (80079d4 <HAL_I2C_MspInit+0x1ac>)
 80078f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80078f6:	4b36      	ldr	r3, [pc, #216]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 80078f8:	2206      	movs	r2, #6
 80078fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80078fc:	4b34      	ldr	r3, [pc, #208]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 80078fe:	2210      	movs	r2, #16
 8007900:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007902:	4b33      	ldr	r3, [pc, #204]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 8007904:	2200      	movs	r2, #0
 8007906:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007908:	4b31      	ldr	r3, [pc, #196]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 800790a:	2280      	movs	r2, #128	@ 0x80
 800790c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800790e:	4b30      	ldr	r3, [pc, #192]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 8007910:	2200      	movs	r2, #0
 8007912:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007914:	4b2e      	ldr	r3, [pc, #184]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 8007916:	2200      	movs	r2, #0
 8007918:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800791a:	4b2d      	ldr	r3, [pc, #180]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 800791c:	2200      	movs	r2, #0
 800791e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007920:	4b2b      	ldr	r3, [pc, #172]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 8007922:	2200      	movs	r2, #0
 8007924:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007926:	4b2a      	ldr	r3, [pc, #168]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 8007928:	0018      	movs	r0, r3
 800792a:	f007 fe33 	bl	800f594 <HAL_DMA_Init>
 800792e:	1e03      	subs	r3, r0, #0
 8007930:	d001      	beq.n	8007936 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8007932:	f000 fcb9 	bl	80082a8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a25      	ldr	r2, [pc, #148]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 800793a:	639a      	str	r2, [r3, #56]	@ 0x38
 800793c:	4b24      	ldr	r3, [pc, #144]	@ (80079d0 <HAL_I2C_MspInit+0x1a8>)
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007942:	2200      	movs	r2, #0
 8007944:	2100      	movs	r1, #0
 8007946:	2017      	movs	r0, #23
 8007948:	f007 fdee 	bl	800f528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800794c:	2017      	movs	r0, #23
 800794e:	f007 fe00 	bl	800f552 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007952:	e02e      	b.n	80079b2 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a1f      	ldr	r2, [pc, #124]	@ (80079d8 <HAL_I2C_MspInit+0x1b0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d129      	bne.n	80079b2 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800795e:	4b18      	ldr	r3, [pc, #96]	@ (80079c0 <HAL_I2C_MspInit+0x198>)
 8007960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007962:	4b17      	ldr	r3, [pc, #92]	@ (80079c0 <HAL_I2C_MspInit+0x198>)
 8007964:	2102      	movs	r1, #2
 8007966:	430a      	orrs	r2, r1
 8007968:	62da      	str	r2, [r3, #44]	@ 0x2c
 800796a:	4b15      	ldr	r3, [pc, #84]	@ (80079c0 <HAL_I2C_MspInit+0x198>)
 800796c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796e:	2202      	movs	r2, #2
 8007970:	4013      	ands	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007976:	2114      	movs	r1, #20
 8007978:	187b      	adds	r3, r7, r1
 800797a:	22c0      	movs	r2, #192	@ 0xc0
 800797c:	0112      	lsls	r2, r2, #4
 800797e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007980:	187b      	adds	r3, r7, r1
 8007982:	2212      	movs	r2, #18
 8007984:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007986:	187b      	adds	r3, r7, r1
 8007988:	2200      	movs	r2, #0
 800798a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800798c:	187b      	adds	r3, r7, r1
 800798e:	2203      	movs	r2, #3
 8007990:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8007992:	187b      	adds	r3, r7, r1
 8007994:	2206      	movs	r2, #6
 8007996:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007998:	187b      	adds	r3, r7, r1
 800799a:	4a0a      	ldr	r2, [pc, #40]	@ (80079c4 <HAL_I2C_MspInit+0x19c>)
 800799c:	0019      	movs	r1, r3
 800799e:	0010      	movs	r0, r2
 80079a0:	f008 fa14 	bl	800fdcc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80079a4:	4b06      	ldr	r3, [pc, #24]	@ (80079c0 <HAL_I2C_MspInit+0x198>)
 80079a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079a8:	4b05      	ldr	r3, [pc, #20]	@ (80079c0 <HAL_I2C_MspInit+0x198>)
 80079aa:	2180      	movs	r1, #128	@ 0x80
 80079ac:	03c9      	lsls	r1, r1, #15
 80079ae:	430a      	orrs	r2, r1
 80079b0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80079b2:	46c0      	nop			@ (mov r8, r8)
 80079b4:	46bd      	mov	sp, r7
 80079b6:	b00b      	add	sp, #44	@ 0x2c
 80079b8:	bd90      	pop	{r4, r7, pc}
 80079ba:	46c0      	nop			@ (mov r8, r8)
 80079bc:	40005400 	.word	0x40005400
 80079c0:	40021000 	.word	0x40021000
 80079c4:	50000400 	.word	0x50000400
 80079c8:	20000e94 	.word	0x20000e94
 80079cc:	40020030 	.word	0x40020030
 80079d0:	20000edc 	.word	0x20000edc
 80079d4:	4002001c 	.word	0x4002001c
 80079d8:	40005800 	.word	0x40005800

080079dc <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80079e0:	4b10      	ldr	r3, [pc, #64]	@ (8007a24 <MX_I2S2_Init+0x48>)
 80079e2:	4a11      	ldr	r2, [pc, #68]	@ (8007a28 <MX_I2S2_Init+0x4c>)
 80079e4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80079e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007a24 <MX_I2S2_Init+0x48>)
 80079e8:	22c0      	movs	r2, #192	@ 0xc0
 80079ea:	0092      	lsls	r2, r2, #2
 80079ec:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80079ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007a24 <MX_I2S2_Init+0x48>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80079f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <MX_I2S2_Init+0x48>)
 80079f6:	2203      	movs	r2, #3
 80079f8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80079fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007a24 <MX_I2S2_Init+0x48>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007a00:	4b08      	ldr	r3, [pc, #32]	@ (8007a24 <MX_I2S2_Init+0x48>)
 8007a02:	22fa      	movs	r2, #250	@ 0xfa
 8007a04:	0192      	lsls	r2, r2, #6
 8007a06:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007a08:	4b06      	ldr	r3, [pc, #24]	@ (8007a24 <MX_I2S2_Init+0x48>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007a0e:	4b05      	ldr	r3, [pc, #20]	@ (8007a24 <MX_I2S2_Init+0x48>)
 8007a10:	0018      	movs	r0, r3
 8007a12:	f00b f821 	bl	8012a58 <HAL_I2S_Init>
 8007a16:	1e03      	subs	r3, r0, #0
 8007a18:	d001      	beq.n	8007a1e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007a1a:	f000 fc45 	bl	80082a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007a1e:	46c0      	nop			@ (mov r8, r8)
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20000f24 	.word	0x20000f24
 8007a28:	40003800 	.word	0x40003800

08007a2c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007a2c:	b590      	push	{r4, r7, lr}
 8007a2e:	b089      	sub	sp, #36	@ 0x24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a34:	240c      	movs	r4, #12
 8007a36:	193b      	adds	r3, r7, r4
 8007a38:	0018      	movs	r0, r3
 8007a3a:	2314      	movs	r3, #20
 8007a3c:	001a      	movs	r2, r3
 8007a3e:	2100      	movs	r1, #0
 8007a40:	f018 fb26 	bl	8020090 <memset>
  if(i2sHandle->Instance==SPI2)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a2d      	ldr	r2, [pc, #180]	@ (8007b00 <HAL_I2S_MspInit+0xd4>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d154      	bne.n	8007af8 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8007b04 <HAL_I2S_MspInit+0xd8>)
 8007a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a52:	4b2c      	ldr	r3, [pc, #176]	@ (8007b04 <HAL_I2S_MspInit+0xd8>)
 8007a54:	2180      	movs	r1, #128	@ 0x80
 8007a56:	01c9      	lsls	r1, r1, #7
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a5c:	4b29      	ldr	r3, [pc, #164]	@ (8007b04 <HAL_I2S_MspInit+0xd8>)
 8007a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a60:	4b28      	ldr	r3, [pc, #160]	@ (8007b04 <HAL_I2S_MspInit+0xd8>)
 8007a62:	2102      	movs	r1, #2
 8007a64:	430a      	orrs	r2, r1
 8007a66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007a68:	4b26      	ldr	r3, [pc, #152]	@ (8007b04 <HAL_I2S_MspInit+0xd8>)
 8007a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	4013      	ands	r3, r2
 8007a70:	60bb      	str	r3, [r7, #8]
 8007a72:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007a74:	193b      	adds	r3, r7, r4
 8007a76:	22b0      	movs	r2, #176	@ 0xb0
 8007a78:	0212      	lsls	r2, r2, #8
 8007a7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a7c:	0021      	movs	r1, r4
 8007a7e:	187b      	adds	r3, r7, r1
 8007a80:	2202      	movs	r2, #2
 8007a82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a84:	187b      	adds	r3, r7, r1
 8007a86:	2200      	movs	r2, #0
 8007a88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a8a:	187b      	adds	r3, r7, r1
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007a90:	187b      	adds	r3, r7, r1
 8007a92:	2200      	movs	r2, #0
 8007a94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a96:	187b      	adds	r3, r7, r1
 8007a98:	4a1b      	ldr	r2, [pc, #108]	@ (8007b08 <HAL_I2S_MspInit+0xdc>)
 8007a9a:	0019      	movs	r1, r3
 8007a9c:	0010      	movs	r0, r2
 8007a9e:	f008 f995 	bl	800fdcc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007aa4:	4a1a      	ldr	r2, [pc, #104]	@ (8007b10 <HAL_I2S_MspInit+0xe4>)
 8007aa6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007aa8:	4b18      	ldr	r3, [pc, #96]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007aaa:	2202      	movs	r2, #2
 8007aac:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007aae:	4b17      	ldr	r3, [pc, #92]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ab4:	4b15      	ldr	r3, [pc, #84]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007aba:	4b14      	ldr	r3, [pc, #80]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007abc:	2280      	movs	r2, #128	@ 0x80
 8007abe:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007ac0:	4b12      	ldr	r3, [pc, #72]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007ac2:	2280      	movs	r2, #128	@ 0x80
 8007ac4:	0052      	lsls	r2, r2, #1
 8007ac6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007ac8:	4b10      	ldr	r3, [pc, #64]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007aca:	2280      	movs	r2, #128	@ 0x80
 8007acc:	00d2      	lsls	r2, r2, #3
 8007ace:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007adc:	4b0b      	ldr	r3, [pc, #44]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007ade:	0018      	movs	r0, r3
 8007ae0:	f007 fd58 	bl	800f594 <HAL_DMA_Init>
 8007ae4:	1e03      	subs	r3, r0, #0
 8007ae6:	d001      	beq.n	8007aec <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007ae8:	f000 fbde 	bl	80082a8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a07      	ldr	r2, [pc, #28]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007af0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007af2:	4b06      	ldr	r3, [pc, #24]	@ (8007b0c <HAL_I2S_MspInit+0xe0>)
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007af8:	46c0      	nop			@ (mov r8, r8)
 8007afa:	46bd      	mov	sp, r7
 8007afc:	b009      	add	sp, #36	@ 0x24
 8007afe:	bd90      	pop	{r4, r7, pc}
 8007b00:	40003800 	.word	0x40003800
 8007b04:	40021000 	.word	0x40021000
 8007b08:	50000400 	.word	0x50000400
 8007b0c:	20000f60 	.word	0x20000f60
 8007b10:	40020044 	.word	0x40020044

08007b14 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  testDone = true;
 8007b18:	4b1e      	ldr	r3, [pc, #120]	@ (8007b94 <SetTestDone+0x80>)
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 8007b1e:	23fa      	movs	r3, #250	@ 0xfa
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	0018      	movs	r0, r3
 8007b24:	f007 f866 	bl	800ebf4 <HAL_Delay>
  SetDBLED(false, false, true);
 8007b28:	2201      	movs	r2, #1
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	f005 fb1d 	bl	800d16c <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007b32:	4a19      	ldr	r2, [pc, #100]	@ (8007b98 <SetTestDone+0x84>)
 8007b34:	23fa      	movs	r3, #250	@ 0xfa
 8007b36:	0119      	lsls	r1, r3, #4
 8007b38:	23fa      	movs	r3, #250	@ 0xfa
 8007b3a:	011b      	lsls	r3, r3, #4
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	f005 fae1 	bl	800d104 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007b42:	4a15      	ldr	r2, [pc, #84]	@ (8007b98 <SetTestDone+0x84>)
 8007b44:	23fa      	movs	r3, #250	@ 0xfa
 8007b46:	0119      	lsls	r1, r3, #4
 8007b48:	23fa      	movs	r3, #250	@ 0xfa
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f005 fb57 	bl	800d200 <SetVocLED>
  HAL_Delay(1000);
 8007b52:	23fa      	movs	r3, #250	@ 0xfa
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	0018      	movs	r0, r3
 8007b58:	f007 f84c 	bl	800ebf4 <HAL_Delay>
  SetDBLED(false, false, false);
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2100      	movs	r1, #0
 8007b60:	2000      	movs	r0, #0
 8007b62:	f005 fb03 	bl	800d16c <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007b66:	23fa      	movs	r3, #250	@ 0xfa
 8007b68:	011a      	lsls	r2, r3, #4
 8007b6a:	23fa      	movs	r3, #250	@ 0xfa
 8007b6c:	0119      	lsls	r1, r3, #4
 8007b6e:	23fa      	movs	r3, #250	@ 0xfa
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	0018      	movs	r0, r3
 8007b74:	f005 fac6 	bl	800d104 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007b78:	23fa      	movs	r3, #250	@ 0xfa
 8007b7a:	011a      	lsls	r2, r3, #4
 8007b7c:	23fa      	movs	r3, #250	@ 0xfa
 8007b7e:	0119      	lsls	r1, r3, #4
 8007b80:	23fa      	movs	r3, #250	@ 0xfa
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	0018      	movs	r0, r3
 8007b86:	f005 fb3b 	bl	800d200 <SetVocLED>
  InitDone();
 8007b8a:	f005 fa57 	bl	800d03c <InitDone>
}
 8007b8e:	46c0      	nop			@ (mov r8, r8)
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20000fa8 	.word	0x20000fa8
 8007b98:	00000bb8 	.word	0x00000bb8

08007b9c <FlashLEDs>:

void FlashLEDs(){
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007ba2:	1dfb      	adds	r3, r7, #7
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	e021      	b.n	8007bee <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007baa:	2201      	movs	r2, #1
 8007bac:	2101      	movs	r1, #1
 8007bae:	2001      	movs	r0, #1
 8007bb0:	f005 fadc 	bl	800d16c <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007bb4:	4a12      	ldr	r2, [pc, #72]	@ (8007c00 <FlashLEDs+0x64>)
 8007bb6:	23fa      	movs	r3, #250	@ 0xfa
 8007bb8:	0119      	lsls	r1, r3, #4
 8007bba:	23fa      	movs	r3, #250	@ 0xfa
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	f005 faa0 	bl	800d104 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8007c00 <FlashLEDs+0x64>)
 8007bc6:	23fa      	movs	r3, #250	@ 0xfa
 8007bc8:	0119      	lsls	r1, r3, #4
 8007bca:	23fa      	movs	r3, #250	@ 0xfa
 8007bcc:	011b      	lsls	r3, r3, #4
 8007bce:	0018      	movs	r0, r3
 8007bd0:	f005 fb16 	bl	800d200 <SetVocLED>
    HAL_Delay(250);
 8007bd4:	20fa      	movs	r0, #250	@ 0xfa
 8007bd6:	f007 f80d 	bl	800ebf4 <HAL_Delay>
    SetLEDsOff();
 8007bda:	f005 fc47 	bl	800d46c <SetLEDsOff>
    HAL_Delay(250);
 8007bde:	20fa      	movs	r0, #250	@ 0xfa
 8007be0:	f007 f808 	bl	800ebf4 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007be4:	1dfb      	adds	r3, r7, #7
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	1dfb      	adds	r3, r7, #7
 8007bea:	3201      	adds	r2, #1
 8007bec:	701a      	strb	r2, [r3, #0]
 8007bee:	1dfb      	adds	r3, r7, #7
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	2b04      	cmp	r3, #4
 8007bf4:	d9d9      	bls.n	8007baa <FlashLEDs+0xe>
  }
}
 8007bf6:	46c0      	nop			@ (mov r8, r8)
 8007bf8:	46c0      	nop			@ (mov r8, r8)
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b002      	add	sp, #8
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	00000bb8 	.word	0x00000bb8

08007c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c08:	f006 ff84 	bl	800eb14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c0c:	f000 f9f6 	bl	8007ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c10:	f7ff fc0c 	bl	800742c <MX_GPIO_Init>
  MX_DMA_Init();
 8007c14:	f7ff fada 	bl	80071cc <MX_DMA_Init>
  MX_I2C1_Init();
 8007c18:	f7ff fd86 	bl	8007728 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007c1c:	f7ff fede 	bl	80079dc <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007c20:	f006 f996 	bl	800df50 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007c24:	f7ff fdc0 	bl	80077a8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007c28:	f005 ff8a 	bl	800db40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007c2c:	f005 fffc 	bl	800dc28 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007c30:	f006 f9c2 	bl	800dfb8 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007c34:	f7ff fa18 	bl	8007068 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007c38:	f014 ff38 	bl	801caac <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007c3c:	f001 f934 	bl	8008ea8 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007c40:	f006 f950 	bl	800dee4 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007c44:	f006 f86e 	bl	800dd24 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007c48:	4ac3      	ldr	r2, [pc, #780]	@ (8007f58 <main+0x354>)
 8007c4a:	4bc4      	ldr	r3, [pc, #784]	@ (8007f5c <main+0x358>)
 8007c4c:	0011      	movs	r1, r2
 8007c4e:	0018      	movs	r0, r3
 8007c50:	f7ff fd1c 	bl	800768c <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007c54:	f7fe fc0a 	bl	800646c <UserButton_Pressed>
 8007c58:	1e03      	subs	r3, r0, #0
 8007c5a:	d004      	beq.n	8007c66 <main+0x62>
    EnableESPProg();
 8007c5c:	f014 fff6 	bl	801cc4c <EnableESPProg>
    ESP_Programming = true;
 8007c60:	4bbf      	ldr	r3, [pc, #764]	@ (8007f60 <main+0x35c>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007c66:	2003      	movs	r0, #3
 8007c68:	f006 fbce 	bl	800e408 <SetVerboseLevel>
  BinaryReleaseInfo();
 8007c6c:	f006 fbe6 	bl	800e43c <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007c70:	49bc      	ldr	r1, [pc, #752]	@ (8007f64 <main+0x360>)
 8007c72:	4bbd      	ldr	r3, [pc, #756]	@ (8007f68 <main+0x364>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	0018      	movs	r0, r3
 8007c78:	f00f fa7e 	bl	8017178 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007c7c:	4bbb      	ldr	r3, [pc, #748]	@ (8007f6c <main+0x368>)
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f7fe fff8 	bl	8006c74 <InitClock>
  Debug("Clock init done");
 8007c84:	4aba      	ldr	r2, [pc, #744]	@ (8007f70 <main+0x36c>)
 8007c86:	4bbb      	ldr	r3, [pc, #748]	@ (8007f74 <main+0x370>)
 8007c88:	0019      	movs	r1, r3
 8007c8a:	2003      	movs	r0, #3
 8007c8c:	f006 fb52 	bl	800e334 <CreateLine>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007c90:	4ab9      	ldr	r2, [pc, #740]	@ (8007f78 <main+0x374>)
 8007c92:	49ba      	ldr	r1, [pc, #744]	@ (8007f7c <main+0x378>)
 8007c94:	48ba      	ldr	r0, [pc, #744]	@ (8007f80 <main+0x37c>)
 8007c96:	230b      	movs	r3, #11
 8007c98:	f004 fb46 	bl	800c328 <soundInit>
 8007c9c:	0003      	movs	r3, r0
 8007c9e:	001a      	movs	r2, r3
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	4053      	eors	r3, r2
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <main+0xb2>
    errorHandler(__func__, __LINE__, __FILE__);
 8007caa:	4ab6      	ldr	r2, [pc, #728]	@ (8007f84 <main+0x380>)
 8007cac:	4bb6      	ldr	r3, [pc, #728]	@ (8007f88 <main+0x384>)
 8007cae:	21f0      	movs	r1, #240	@ 0xf0
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f006 fbf7 	bl	800e4a4 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007cb6:	4bb5      	ldr	r3, [pc, #724]	@ (8007f8c <main+0x388>)
 8007cb8:	4ab5      	ldr	r2, [pc, #724]	@ (8007f90 <main+0x38c>)
 8007cba:	49b0      	ldr	r1, [pc, #704]	@ (8007f7c <main+0x378>)
 8007cbc:	48b5      	ldr	r0, [pc, #724]	@ (8007f94 <main+0x390>)
 8007cbe:	f000 fb95 	bl	80083ec <Device_Init>
  deviceTimeOut = HAL_GetTick() + 5000;
 8007cc2:	f006 ff8d 	bl	800ebe0 <HAL_GetTick>
 8007cc6:	0003      	movs	r3, r0
 8007cc8:	4ab3      	ldr	r2, [pc, #716]	@ (8007f98 <main+0x394>)
 8007cca:	189a      	adds	r2, r3, r2
 8007ccc:	4bb3      	ldr	r3, [pc, #716]	@ (8007f9c <main+0x398>)
 8007cce:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8007cd0:	f7fe fbac 	bl	800642c <Check_USB_PowerOn>
 8007cd4:	0003      	movs	r3, r0
 8007cd6:	1e5a      	subs	r2, r3, #1
 8007cd8:	4193      	sbcs	r3, r2
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2201      	movs	r2, #1
 8007cde:	4053      	eors	r3, r2
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	1c1a      	adds	r2, r3, #0
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	4bad      	ldr	r3, [pc, #692]	@ (8007fa0 <main+0x39c>)
 8007cec:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007cee:	4bad      	ldr	r3, [pc, #692]	@ (8007fa4 <main+0x3a0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f006 fac8 	bl	800e288 <TimestampIsReached>
 8007cf8:	1e03      	subs	r3, r0, #0
 8007cfa:	d00e      	beq.n	8007d1a <main+0x116>
      charge = Battery_Upkeep();
 8007cfc:	f005 fdaa 	bl	800d854 <Battery_Upkeep>
 8007d00:	0003      	movs	r3, r0
 8007d02:	001a      	movs	r2, r3
 8007d04:	4ba8      	ldr	r3, [pc, #672]	@ (8007fa8 <main+0x3a4>)
 8007d06:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007d08:	f006 ff6a 	bl	800ebe0 <HAL_GetTick>
 8007d0c:	0003      	movs	r3, r0
 8007d0e:	4aa7      	ldr	r2, [pc, #668]	@ (8007fac <main+0x3a8>)
 8007d10:	189a      	adds	r2, r3, r2
 8007d12:	4ba4      	ldr	r3, [pc, #656]	@ (8007fa4 <main+0x3a0>)
 8007d14:	601a      	str	r2, [r3, #0]
        showTime();
 8007d16:	f7fe fbb9 	bl	800648c <showTime>
    }
    configCheck();
 8007d1a:	f005 fc27 	bl	800d56c <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8007d1e:	4ba4      	ldr	r3, [pc, #656]	@ (8007fb0 <main+0x3ac>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007d24:	4ba0      	ldr	r3, [pc, #640]	@ (8007fa8 <main+0x3a4>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d003      	beq.n	8007d34 <main+0x130>
 8007d2c:	4b9e      	ldr	r3, [pc, #632]	@ (8007fa8 <main+0x3a4>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <main+0x13a>
          FlashLEDs();
 8007d34:	f7ff ff32 	bl	8007b9c <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8007d38:	4b9e      	ldr	r3, [pc, #632]	@ (8007fb4 <main+0x3b0>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8007d3e:	4b9a      	ldr	r3, [pc, #616]	@ (8007fa8 <main+0x3a4>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d109      	bne.n	8007d5a <main+0x156>
 8007d46:	4b9c      	ldr	r3, [pc, #624]	@ (8007fb8 <main+0x3b4>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	2b09      	cmp	r3, #9
 8007d4c:	d105      	bne.n	8007d5a <main+0x156>
          batteryEmpty = true;
 8007d4e:	4b9b      	ldr	r3, [pc, #620]	@ (8007fbc <main+0x3b8>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007d54:	f7fe fec6 	bl	8006ae4 <Enter_Standby_Mode>
 8007d58:	e002      	b.n	8007d60 <main+0x15c>
        }
        else{
          batteryEmpty = false;
 8007d5a:	4b98      	ldr	r3, [pc, #608]	@ (8007fbc <main+0x3b8>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8007d60:	4b97      	ldr	r3, [pc, #604]	@ (8007fc0 <main+0x3bc>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d100      	bne.n	8007d6a <main+0x166>
 8007d68:	e0b6      	b.n	8007ed8 <main+0x2d4>
 8007d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8007f60 <main+0x35c>)
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	4053      	eors	r3, r2
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d100      	bne.n	8007d7a <main+0x176>
 8007d78:	e0ae      	b.n	8007ed8 <main+0x2d4>
 8007d7a:	4b90      	ldr	r3, [pc, #576]	@ (8007fbc <main+0x3b8>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	4053      	eors	r3, r2
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d100      	bne.n	8007d8a <main+0x186>
 8007d88:	e0a6      	b.n	8007ed8 <main+0x2d4>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8007d8a:	4b85      	ldr	r3, [pc, #532]	@ (8007fa0 <main+0x39c>)
 8007d8c:	781a      	ldrb	r2, [r3, #0]
 8007d8e:	4b8d      	ldr	r3, [pc, #564]	@ (8007fc4 <main+0x3c0>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d026      	beq.n	8007de4 <main+0x1e0>
        Debug("USB power state change detected");
 8007d96:	4a8c      	ldr	r2, [pc, #560]	@ (8007fc8 <main+0x3c4>)
 8007d98:	4b76      	ldr	r3, [pc, #472]	@ (8007f74 <main+0x370>)
 8007d9a:	0019      	movs	r1, r3
 8007d9c:	2003      	movs	r0, #3
 8007d9e:	f006 fac9 	bl	800e334 <CreateLine>
        if (IsSGPPresent() && !usbPluggedIn) {
 8007da2:	f000 fabb 	bl	800831c <IsSGPPresent>
 8007da6:	1e03      	subs	r3, r0, #0
 8007da8:	d009      	beq.n	8007dbe <main+0x1ba>
 8007daa:	4b86      	ldr	r3, [pc, #536]	@ (8007fc4 <main+0x3c0>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2201      	movs	r2, #1
 8007db0:	4053      	eors	r3, r2
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <main+0x1ba>
//        if (IsSGPPresent() && ((product_name[4] == '4') || (product_name[4] == '5')) && !usbPluggedIn) {
          SetVOCSensorDIS_ENA(true);
 8007db8:	2001      	movs	r0, #1
 8007dba:	f000 fab9 	bl	8008330 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8007dbe:	4b83      	ldr	r3, [pc, #524]	@ (8007fcc <main+0x3c8>)
 8007dc0:	791b      	ldrb	r3, [r3, #4]
 8007dc2:	2b34      	cmp	r3, #52	@ 0x34
 8007dc4:	d003      	beq.n	8007dce <main+0x1ca>
 8007dc6:	4b81      	ldr	r3, [pc, #516]	@ (8007fcc <main+0x3c8>)
 8007dc8:	791b      	ldrb	r3, [r3, #4]
 8007dca:	2b35      	cmp	r3, #53	@ 0x35
 8007dcc:	d106      	bne.n	8007ddc <main+0x1d8>
 8007dce:	4b7d      	ldr	r3, [pc, #500]	@ (8007fc4 <main+0x3c0>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <main+0x1d8>
          SetVOCSensorDIS_ENA(false);
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	f000 faaa 	bl	8008330 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8007ddc:	4b79      	ldr	r3, [pc, #484]	@ (8007fc4 <main+0x3c0>)
 8007dde:	781a      	ldrb	r2, [r3, #0]
 8007de0:	4b6f      	ldr	r3, [pc, #444]	@ (8007fa0 <main+0x39c>)
 8007de2:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007de4:	4b7a      	ldr	r3, [pc, #488]	@ (8007fd0 <main+0x3cc>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d00d      	beq.n	8007e08 <main+0x204>
 8007dec:	4b78      	ldr	r3, [pc, #480]	@ (8007fd0 <main+0x3cc>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d009      	beq.n	8007e08 <main+0x204>
 8007df4:	4b6f      	ldr	r3, [pc, #444]	@ (8007fb4 <main+0x3b0>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d005      	beq.n	8007e08 <main+0x204>
        HIDSstate = HIDS_Upkeep();
 8007dfc:	f006 fdd4 	bl	800e9a8 <HIDS_Upkeep>
 8007e00:	0003      	movs	r3, r0
 8007e02:	001a      	movs	r2, r3
 8007e04:	4b73      	ldr	r3, [pc, #460]	@ (8007fd4 <main+0x3d0>)
 8007e06:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007e08:	4b72      	ldr	r3, [pc, #456]	@ (8007fd4 <main+0x3d0>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d00d      	beq.n	8007e2c <main+0x228>
 8007e10:	4b70      	ldr	r3, [pc, #448]	@ (8007fd4 <main+0x3d0>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d009      	beq.n	8007e2c <main+0x228>
 8007e18:	4b66      	ldr	r3, [pc, #408]	@ (8007fb4 <main+0x3b0>)
 8007e1a:	785b      	ldrb	r3, [r3, #1]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <main+0x228>
        SGPstate = SGP_Upkeep();
 8007e20:	f004 f8f0 	bl	800c004 <SGP_Upkeep>
 8007e24:	0003      	movs	r3, r0
 8007e26:	001a      	movs	r2, r3
 8007e28:	4b69      	ldr	r3, [pc, #420]	@ (8007fd0 <main+0x3cc>)
 8007e2a:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007e2c:	4b61      	ldr	r3, [pc, #388]	@ (8007fb4 <main+0x3b0>)
 8007e2e:	78db      	ldrb	r3, [r3, #3]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d005      	beq.n	8007e40 <main+0x23c>
        MICstate = Mic_Upkeep();
 8007e34:	f000 ff02 	bl	8008c3c <Mic_Upkeep>
 8007e38:	0003      	movs	r3, r0
 8007e3a:	001a      	movs	r2, r3
 8007e3c:	4b66      	ldr	r3, [pc, #408]	@ (8007fd8 <main+0x3d4>)
 8007e3e:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8007e40:	4b59      	ldr	r3, [pc, #356]	@ (8007fa8 <main+0x3a4>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d803      	bhi.n	8007e50 <main+0x24c>
 8007e48:	4b59      	ldr	r3, [pc, #356]	@ (8007fb0 <main+0x3ac>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01c      	beq.n	8007e8a <main+0x286>
 8007e50:	4b58      	ldr	r3, [pc, #352]	@ (8007fb4 <main+0x3b0>)
 8007e52:	789b      	ldrb	r3, [r3, #2]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d018      	beq.n	8007e8a <main+0x286>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8007e58:	f001 f8b4 	bl	8008fc4 <sen5x_Get_sen5x_enable_state>
 8007e5c:	0003      	movs	r3, r0
 8007e5e:	001a      	movs	r2, r3
 8007e60:	2301      	movs	r3, #1
 8007e62:	4053      	eors	r3, r2
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00c      	beq.n	8007e84 <main+0x280>
 8007e6a:	4b56      	ldr	r3, [pc, #344]	@ (8007fc4 <main+0x3c0>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d008      	beq.n	8007e84 <main+0x280>
          Debug("sen5x_enable called from line 287 main.c");
 8007e72:	4a5a      	ldr	r2, [pc, #360]	@ (8007fdc <main+0x3d8>)
 8007e74:	4b3f      	ldr	r3, [pc, #252]	@ (8007f74 <main+0x370>)
 8007e76:	0019      	movs	r1, r3
 8007e78:	2003      	movs	r0, #3
 8007e7a:	f006 fa5b 	bl	800e334 <CreateLine>
          sen5x_enable(0);
 8007e7e:	2000      	movs	r0, #0
 8007e80:	f001 f8cc 	bl	800901c <sen5x_enable>
        }
        sen5x_statemachine();
 8007e84:	f001 fe02 	bl	8009a8c <sen5x_statemachine>
 8007e88:	e020      	b.n	8007ecc <main+0x2c8>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8007e8a:	4b47      	ldr	r3, [pc, #284]	@ (8007fa8 <main+0x3a4>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d81c      	bhi.n	8007ecc <main+0x2c8>
 8007e92:	4b47      	ldr	r3, [pc, #284]	@ (8007fb0 <main+0x3ac>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2201      	movs	r2, #1
 8007e98:	4053      	eors	r3, r2
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d015      	beq.n	8007ecc <main+0x2c8>
 8007ea0:	4b44      	ldr	r3, [pc, #272]	@ (8007fb4 <main+0x3b0>)
 8007ea2:	789b      	ldrb	r3, [r3, #2]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d011      	beq.n	8007ecc <main+0x2c8>
        Info("Battery level insufficient for sen5x operation");
 8007ea8:	4a4d      	ldr	r2, [pc, #308]	@ (8007fe0 <main+0x3dc>)
 8007eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8007fe4 <main+0x3e0>)
 8007eac:	0019      	movs	r1, r3
 8007eae:	2002      	movs	r0, #2
 8007eb0:	f006 fa40 	bl	800e334 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8007eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8007fb4 <main+0x3b0>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8007eba:	4b4b      	ldr	r3, [pc, #300]	@ (8007fe8 <main+0x3e4>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8007ec0:	4b4a      	ldr	r3, [pc, #296]	@ (8007fec <main+0x3e8>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <main+0x2c8>
          sen5x_Power_Off();
 8007ec8:	f001 f91a 	bl	8009100 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8007ecc:	f7fd fae8 	bl	80054a0 <ESP_Upkeep>
 8007ed0:	0003      	movs	r3, r0
 8007ed2:	001a      	movs	r2, r3
 8007ed4:	4b38      	ldr	r3, [pc, #224]	@ (8007fb8 <main+0x3b4>)
 8007ed6:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007ed8:	4b39      	ldr	r3, [pc, #228]	@ (8007fc0 <main+0x3bc>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2201      	movs	r2, #1
 8007ede:	4053      	eors	r3, r2
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00f      	beq.n	8007f06 <main+0x302>
 8007ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f60 <main+0x35c>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2201      	movs	r2, #1
 8007eec:	4053      	eors	r3, r2
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d008      	beq.n	8007f06 <main+0x302>
 8007ef4:	4b31      	ldr	r3, [pc, #196]	@ (8007fbc <main+0x3b8>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	4053      	eors	r3, r2
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <main+0x302>
      Device_Test();  // for device with startup time
 8007f02:	f000 fbb9 	bl	8008678 <Device_Test>
    }
    if (!usbPluggedIn) {
 8007f06:	4b2f      	ldr	r3, [pc, #188]	@ (8007fc4 <main+0x3c0>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	4053      	eors	r3, r2
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d100      	bne.n	8007f16 <main+0x312>
 8007f14:	e6eb      	b.n	8007cee <main+0xea>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007f16:	4b36      	ldr	r3, [pc, #216]	@ (8007ff0 <main+0x3ec>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4053      	eors	r3, r2
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d100      	bne.n	8007f26 <main+0x322>
 8007f24:	e6e3      	b.n	8007cee <main+0xea>
 8007f26:	f000 fc21 	bl	800876c <AllDevicesReady>
 8007f2a:	1e03      	subs	r3, r0, #0
 8007f2c:	d100      	bne.n	8007f30 <main+0x32c>
 8007f2e:	e6de      	b.n	8007cee <main+0xea>
 8007f30:	4b30      	ldr	r3, [pc, #192]	@ (8007ff4 <main+0x3f0>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d100      	bne.n	8007f3a <main+0x336>
 8007f38:	e6d9      	b.n	8007cee <main+0xea>
        EnabledConnectedDevices();
 8007f3a:	f000 fc7f 	bl	800883c <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8007ff8 <main+0x3f4>)
 8007f40:	789b      	ldrb	r3, [r3, #2]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <main+0x348>
 8007f46:	23d7      	movs	r3, #215	@ 0xd7
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	e001      	b.n	8007f50 <main+0x34c>
 8007f4c:	23dc      	movs	r3, #220	@ 0xdc
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	0018      	movs	r0, r3
 8007f52:	f7fe fde9 	bl	8006b28 <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8007f56:	e6ca      	b.n	8007cee <main+0xea>
 8007f58:	20002248 	.word	0x20002248
 8007f5c:	20002208 	.word	0x20002208
 8007f60:	20000fa9 	.word	0x20000fa9
 8007f64:	20000fb0 	.word	0x20000fb0
 8007f68:	20002380 	.word	0x20002380
 8007f6c:	20001238 	.word	0x20001238
 8007f70:	08023d80 	.word	0x08023d80
 8007f74:	08023d90 	.word	0x08023d90
 8007f78:	20002288 	.word	0x20002288
 8007f7c:	20000f24 	.word	0x20000f24
 8007f80:	20000f60 	.word	0x20000f60
 8007f84:	08023d94 	.word	0x08023d94
 8007f88:	080253a0 	.word	0x080253a0
 8007f8c:	20002438 	.word	0x20002438
 8007f90:	20000d90 	.word	0x20000d90
 8007f94:	20000dec 	.word	0x20000dec
 8007f98:	00001388 	.word	0x00001388
 8007f9c:	20000fc0 	.word	0x20000fc0
 8007fa0:	20000fab 	.word	0x20000fab
 8007fa4:	20000fc4 	.word	0x20000fc4
 8007fa8:	20000fc8 	.word	0x20000fc8
 8007fac:	0000c350 	.word	0x0000c350
 8007fb0:	2000007c 	.word	0x2000007c
 8007fb4:	20000080 	.word	0x20000080
 8007fb8:	20000faf 	.word	0x20000faf
 8007fbc:	20000faa 	.word	0x20000faa
 8007fc0:	20000fa8 	.word	0x20000fa8
 8007fc4:	200021f5 	.word	0x200021f5
 8007fc8:	08023da8 	.word	0x08023da8
 8007fcc:	20001260 	.word	0x20001260
 8007fd0:	20000fac 	.word	0x20000fac
 8007fd4:	20000fad 	.word	0x20000fad
 8007fd8:	20000fae 	.word	0x20000fae
 8007fdc:	08023dc8 	.word	0x08023dc8
 8007fe0:	08023df4 	.word	0x08023df4
 8007fe4:	08023e24 	.word	0x08023e24
 8007fe8:	2000125e 	.word	0x2000125e
 8007fec:	2000125d 	.word	0x2000125d
 8007ff0:	200021f6 	.word	0x200021f6
 8007ff4:	20000553 	.word	0x20000553
 8007ff8:	20000fcc 	.word	0x20000fcc

08007ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ffc:	b590      	push	{r4, r7, lr}
 8007ffe:	b09d      	sub	sp, #116	@ 0x74
 8008000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008002:	2438      	movs	r4, #56	@ 0x38
 8008004:	193b      	adds	r3, r7, r4
 8008006:	0018      	movs	r0, r3
 8008008:	2338      	movs	r3, #56	@ 0x38
 800800a:	001a      	movs	r2, r3
 800800c:	2100      	movs	r1, #0
 800800e:	f018 f83f 	bl	8020090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008012:	2324      	movs	r3, #36	@ 0x24
 8008014:	18fb      	adds	r3, r7, r3
 8008016:	0018      	movs	r0, r3
 8008018:	2314      	movs	r3, #20
 800801a:	001a      	movs	r2, r3
 800801c:	2100      	movs	r1, #0
 800801e:	f018 f837 	bl	8020090 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008022:	003b      	movs	r3, r7
 8008024:	0018      	movs	r0, r3
 8008026:	2324      	movs	r3, #36	@ 0x24
 8008028:	001a      	movs	r2, r3
 800802a:	2100      	movs	r1, #0
 800802c:	f018 f830 	bl	8020090 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008030:	4b34      	ldr	r3, [pc, #208]	@ (8008104 <SystemClock_Config+0x108>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a34      	ldr	r2, [pc, #208]	@ (8008108 <SystemClock_Config+0x10c>)
 8008036:	401a      	ands	r2, r3
 8008038:	4b32      	ldr	r3, [pc, #200]	@ (8008104 <SystemClock_Config+0x108>)
 800803a:	2180      	movs	r1, #128	@ 0x80
 800803c:	0109      	lsls	r1, r1, #4
 800803e:	430a      	orrs	r2, r1
 8008040:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8008042:	f00c fe6d 	bl	8014d20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8008046:	4b31      	ldr	r3, [pc, #196]	@ (800810c <SystemClock_Config+0x110>)
 8008048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800804a:	4a2f      	ldr	r2, [pc, #188]	@ (8008108 <SystemClock_Config+0x10c>)
 800804c:	401a      	ands	r2, r3
 800804e:	4b2f      	ldr	r3, [pc, #188]	@ (800810c <SystemClock_Config+0x110>)
 8008050:	2180      	movs	r1, #128	@ 0x80
 8008052:	0149      	lsls	r1, r1, #5
 8008054:	430a      	orrs	r2, r1
 8008056:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008058:	193b      	adds	r3, r7, r4
 800805a:	2226      	movs	r2, #38	@ 0x26
 800805c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800805e:	193b      	adds	r3, r7, r4
 8008060:	2280      	movs	r2, #128	@ 0x80
 8008062:	0052      	lsls	r2, r2, #1
 8008064:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008066:	0021      	movs	r1, r4
 8008068:	187b      	adds	r3, r7, r1
 800806a:	2201      	movs	r2, #1
 800806c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800806e:	187b      	adds	r3, r7, r1
 8008070:	2210      	movs	r2, #16
 8008072:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008074:	187b      	adds	r3, r7, r1
 8008076:	2201      	movs	r2, #1
 8008078:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800807a:	187b      	adds	r3, r7, r1
 800807c:	2200      	movs	r2, #0
 800807e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008080:	187b      	adds	r3, r7, r1
 8008082:	0018      	movs	r0, r3
 8008084:	f00c fedc 	bl	8014e40 <HAL_RCC_OscConfig>
 8008088:	1e03      	subs	r3, r0, #0
 800808a:	d001      	beq.n	8008090 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800808c:	f000 f90c 	bl	80082a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008090:	2124      	movs	r1, #36	@ 0x24
 8008092:	187b      	adds	r3, r7, r1
 8008094:	220f      	movs	r2, #15
 8008096:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008098:	187b      	adds	r3, r7, r1
 800809a:	2201      	movs	r2, #1
 800809c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800809e:	187b      	adds	r3, r7, r1
 80080a0:	2200      	movs	r2, #0
 80080a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80080a4:	187b      	adds	r3, r7, r1
 80080a6:	2200      	movs	r2, #0
 80080a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80080aa:	187b      	adds	r3, r7, r1
 80080ac:	2200      	movs	r2, #0
 80080ae:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80080b0:	187b      	adds	r3, r7, r1
 80080b2:	2100      	movs	r1, #0
 80080b4:	0018      	movs	r0, r3
 80080b6:	f00d fa97 	bl	80155e8 <HAL_RCC_ClockConfig>
 80080ba:	1e03      	subs	r3, r0, #0
 80080bc:	d001      	beq.n	80080c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80080be:	f000 f8f3 	bl	80082a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80080c2:	003b      	movs	r3, r7
 80080c4:	226d      	movs	r2, #109	@ 0x6d
 80080c6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80080c8:	003b      	movs	r3, r7
 80080ca:	2200      	movs	r2, #0
 80080cc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80080ce:	003b      	movs	r3, r7
 80080d0:	2200      	movs	r2, #0
 80080d2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80080d4:	003b      	movs	r3, r7
 80080d6:	2200      	movs	r2, #0
 80080d8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80080da:	003b      	movs	r3, r7
 80080dc:	2280      	movs	r2, #128	@ 0x80
 80080de:	0252      	lsls	r2, r2, #9
 80080e0:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80080e2:	003b      	movs	r3, r7
 80080e4:	2280      	movs	r2, #128	@ 0x80
 80080e6:	04d2      	lsls	r2, r2, #19
 80080e8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80080ea:	003b      	movs	r3, r7
 80080ec:	0018      	movs	r0, r3
 80080ee:	f00d fc9f 	bl	8015a30 <HAL_RCCEx_PeriphCLKConfig>
 80080f2:	1e03      	subs	r3, r0, #0
 80080f4:	d001      	beq.n	80080fa <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80080f6:	f000 f8d7 	bl	80082a8 <Error_Handler>
  }
}
 80080fa:	46c0      	nop			@ (mov r8, r8)
 80080fc:	46bd      	mov	sp, r7
 80080fe:	b01d      	add	sp, #116	@ 0x74
 8008100:	bd90      	pop	{r4, r7, pc}
 8008102:	46c0      	nop			@ (mov r8, r8)
 8008104:	40007000 	.word	0x40007000
 8008108:	ffffe7ff 	.word	0xffffe7ff
 800810c:	40021000 	.word	0x40021000

08008110 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8008110:	b590      	push	{r4, r7, lr}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	000a      	movs	r2, r1
 800811a:	1cbb      	adds	r3, r7, #2
 800811c:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 800811e:	4c06      	ldr	r4, [pc, #24]	@ (8008138 <printString+0x28>)
 8008120:	1cbb      	adds	r3, r7, #2
 8008122:	881a      	ldrh	r2, [r3, #0]
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	4805      	ldr	r0, [pc, #20]	@ (800813c <printString+0x2c>)
 8008128:	0023      	movs	r3, r4
 800812a:	f00e ff85 	bl	8017038 <HAL_UART_Transmit>
}
 800812e:	46c0      	nop			@ (mov r8, r8)
 8008130:	46bd      	mov	sp, r7
 8008132:	b003      	add	sp, #12
 8008134:	bd90      	pop	{r4, r7, pc}
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	0000ffff 	.word	0x0000ffff
 800813c:	20002380 	.word	0x20002380

08008140 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8008148:	4936      	ldr	r1, [pc, #216]	@ (8008224 <HAL_UART_RxCpltCallback+0xe4>)
 800814a:	4b37      	ldr	r3, [pc, #220]	@ (8008228 <HAL_UART_RxCpltCallback+0xe8>)
 800814c:	2201      	movs	r2, #1
 800814e:	0018      	movs	r0, r3
 8008150:	f00f f812 	bl	8017178 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8008154:	4b33      	ldr	r3, [pc, #204]	@ (8008224 <HAL_UART_RxCpltCallback+0xe4>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	3b61      	subs	r3, #97	@ 0x61
 800815a:	2b13      	cmp	r3, #19
 800815c:	d830      	bhi.n	80081c0 <HAL_UART_RxCpltCallback+0x80>
 800815e:	009a      	lsls	r2, r3, #2
 8008160:	4b32      	ldr	r3, [pc, #200]	@ (800822c <HAL_UART_RxCpltCallback+0xec>)
 8008162:	18d3      	adds	r3, r2, r3
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8008168:	4b31      	ldr	r3, [pc, #196]	@ (8008230 <HAL_UART_RxCpltCallback+0xf0>)
 800816a:	0018      	movs	r0, r3
 800816c:	f017 fe42 	bl	801fdf4 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8008170:	2003      	movs	r0, #3
 8008172:	f006 f949 	bl	800e408 <SetVerboseLevel>
      break;
 8008176:	e04a      	b.n	800820e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8008178:	f7fb fb10 	bl	800379c <forceNTPupdate>
    break;
 800817c:	e047      	b.n	800820e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800817e:	4b2d      	ldr	r3, [pc, #180]	@ (8008234 <HAL_UART_RxCpltCallback+0xf4>)
 8008180:	0018      	movs	r0, r3
 8008182:	f017 fe37 	bl	801fdf4 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8008186:	2002      	movs	r0, #2
 8008188:	f006 f93e 	bl	800e408 <SetVerboseLevel>
      break;
 800818c:	e03f      	b.n	800820e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800818e:	4b2a      	ldr	r3, [pc, #168]	@ (8008238 <HAL_UART_RxCpltCallback+0xf8>)
 8008190:	0018      	movs	r0, r3
 8008192:	f017 fe2f 	bl	801fdf4 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8008196:	2001      	movs	r0, #1
 8008198:	f006 f936 	bl	800e408 <SetVerboseLevel>
      break;
 800819c:	e037      	b.n	800820e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800819e:	4b27      	ldr	r3, [pc, #156]	@ (800823c <HAL_UART_RxCpltCallback+0xfc>)
 80081a0:	0018      	movs	r0, r3
 80081a2:	f017 fe27 	bl	801fdf4 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 80081a6:	2000      	movs	r0, #0
 80081a8:	f006 f92e 	bl	800e408 <SetVerboseLevel>
      break;
 80081ac:	e02f      	b.n	800820e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 80081ae:	f006 fd17 	bl	800ebe0 <HAL_GetTick>
 80081b2:	0002      	movs	r2, r0
 80081b4:	4b22      	ldr	r3, [pc, #136]	@ (8008240 <HAL_UART_RxCpltCallback+0x100>)
 80081b6:	601a      	str	r2, [r3, #0]
      break;
 80081b8:	e029      	b.n	800820e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 80081ba:	f7fe f967 	bl	800648c <showTime>
      break;
 80081be:	e026      	b.n	800820e <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 80081c0:	4a20      	ldr	r2, [pc, #128]	@ (8008244 <HAL_UART_RxCpltCallback+0x104>)
 80081c2:	4b21      	ldr	r3, [pc, #132]	@ (8008248 <HAL_UART_RxCpltCallback+0x108>)
 80081c4:	0019      	movs	r1, r3
 80081c6:	2001      	movs	r0, #1
 80081c8:	f006 f8b4 	bl	800e334 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 80081cc:	4b1f      	ldr	r3, [pc, #124]	@ (800824c <HAL_UART_RxCpltCallback+0x10c>)
 80081ce:	0018      	movs	r0, r3
 80081d0:	f017 fe10 	bl	801fdf4 <puts>
      printf("a - VerboseLevel set to all\r\n");
 80081d4:	4b1e      	ldr	r3, [pc, #120]	@ (8008250 <HAL_UART_RxCpltCallback+0x110>)
 80081d6:	0018      	movs	r0, r3
 80081d8:	f017 fe0c 	bl	801fdf4 <puts>
      printf("f - Force NTP time synchronization\r\n");
 80081dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008254 <HAL_UART_RxCpltCallback+0x114>)
 80081de:	0018      	movs	r0, r3
 80081e0:	f017 fe08 	bl	801fdf4 <puts>
      printf("i - VerboseLevel set to info\r\n");
 80081e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008258 <HAL_UART_RxCpltCallback+0x118>)
 80081e6:	0018      	movs	r0, r3
 80081e8:	f017 fe04 	bl	801fdf4 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 80081ec:	4b1b      	ldr	r3, [pc, #108]	@ (800825c <HAL_UART_RxCpltCallback+0x11c>)
 80081ee:	0018      	movs	r0, r3
 80081f0:	f017 fe00 	bl	801fdf4 <puts>
      printf("n - VerboseLevel set to none\r\n");
 80081f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008260 <HAL_UART_RxCpltCallback+0x120>)
 80081f6:	0018      	movs	r0, r3
 80081f8:	f017 fdfc 	bl	801fdf4 <puts>
      printf("s - Start particle measurement\r\n");
 80081fc:	4b19      	ldr	r3, [pc, #100]	@ (8008264 <HAL_UART_RxCpltCallback+0x124>)
 80081fe:	0018      	movs	r0, r3
 8008200:	f017 fdf8 	bl	801fdf4 <puts>
      printf("t - Show actual systemtime\r\n");
 8008204:	4b18      	ldr	r3, [pc, #96]	@ (8008268 <HAL_UART_RxCpltCallback+0x128>)
 8008206:	0018      	movs	r0, r3
 8008208:	f017 fdf4 	bl	801fdf4 <puts>
  break;
 800820c:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800820e:	4905      	ldr	r1, [pc, #20]	@ (8008224 <HAL_UART_RxCpltCallback+0xe4>)
 8008210:	4b05      	ldr	r3, [pc, #20]	@ (8008228 <HAL_UART_RxCpltCallback+0xe8>)
 8008212:	2201      	movs	r2, #1
 8008214:	0018      	movs	r0, r3
 8008216:	f00e ffaf 	bl	8017178 <HAL_UART_Receive_IT>
}
 800821a:	46c0      	nop			@ (mov r8, r8)
 800821c:	46bd      	mov	sp, r7
 800821e:	b002      	add	sp, #8
 8008220:	bd80      	pop	{r7, pc}
 8008222:	46c0      	nop			@ (mov r8, r8)
 8008224:	20000fb0 	.word	0x20000fb0
 8008228:	20002380 	.word	0x20002380
 800822c:	08025350 	.word	0x08025350
 8008230:	08023e28 	.word	0x08023e28
 8008234:	08023e44 	.word	0x08023e44
 8008238:	08023e60 	.word	0x08023e60
 800823c:	08023e80 	.word	0x08023e80
 8008240:	20001274 	.word	0x20001274
 8008244:	08023e9c 	.word	0x08023e9c
 8008248:	08023ecc 	.word	0x08023ecc
 800824c:	08023ed0 	.word	0x08023ed0
 8008250:	08023ee8 	.word	0x08023ee8
 8008254:	08023f08 	.word	0x08023f08
 8008258:	08023f2c 	.word	0x08023f2c
 800825c:	08023f4c 	.word	0x08023f4c
 8008260:	08023f70 	.word	0x08023f70
 8008264:	08023f90 	.word	0x08023f90
 8008268:	08023fb0 	.word	0x08023fb0

0800826c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	0002      	movs	r2, r0
 8008274:	1dbb      	adds	r3, r7, #6
 8008276:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008278:	1dbb      	adds	r3, r7, #6
 800827a:	881a      	ldrh	r2, [r3, #0]
 800827c:	2380      	movs	r3, #128	@ 0x80
 800827e:	021b      	lsls	r3, r3, #8
 8008280:	429a      	cmp	r2, r3
 8008282:	d10b      	bne.n	800829c <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 8008284:	f005 fafa 	bl	800d87c <setuserToggle>
    if (GetPMSensorPresence()) {
 8008288:	f000 f83e 	bl	8008308 <GetPMSensorPresence>
 800828c:	1e03      	subs	r3, r0, #0
 800828e:	d005      	beq.n	800829c <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 8008290:	4b04      	ldr	r3, [pc, #16]	@ (80082a4 <HAL_GPIO_EXTI_Callback+0x38>)
 8008292:	2201      	movs	r2, #1
 8008294:	709a      	strb	r2, [r3, #2]
      setsen5xReadTimer(100);
 8008296:	2064      	movs	r0, #100	@ 0x64
 8008298:	f000 fe9e 	bl	8008fd8 <setsen5xReadTimer>
    }

  }
}
 800829c:	46c0      	nop			@ (mov r8, r8)
 800829e:	46bd      	mov	sp, r7
 80082a0:	b002      	add	sp, #8
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	20000080 	.word	0x20000080

080082a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80082ac:	b672      	cpsid	i
}
 80082ae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 80082b0:	4a05      	ldr	r2, [pc, #20]	@ (80082c8 <Error_Handler+0x20>)
 80082b2:	4b06      	ldr	r3, [pc, #24]	@ (80082cc <Error_Handler+0x24>)
 80082b4:	0019      	movs	r1, r3
 80082b6:	2001      	movs	r0, #1
 80082b8:	f006 f83c 	bl	800e334 <CreateLine>
    HAL_Delay(2500);
 80082bc:	4b04      	ldr	r3, [pc, #16]	@ (80082d0 <Error_Handler+0x28>)
 80082be:	0018      	movs	r0, r3
 80082c0:	f006 fc98 	bl	800ebf4 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 80082c4:	46c0      	nop			@ (mov r8, r8)
 80082c6:	e7f3      	b.n	80082b0 <Error_Handler+0x8>
 80082c8:	08023fcc 	.word	0x08023fcc
 80082cc:	08023ecc 	.word	0x08023ecc
 80082d0:	000009c4 	.word	0x000009c4

080082d4 <testInit>:
};

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 80082d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008304 <testInit+0x30>)
 80082da:	2200      	movs	r2, #0
 80082dc:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 80082de:	4b09      	ldr	r3, [pc, #36]	@ (8008304 <testInit+0x30>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 80082e4:	4b07      	ldr	r3, [pc, #28]	@ (8008304 <testInit+0x30>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 80082ea:	4b06      	ldr	r3, [pc, #24]	@ (8008304 <testInit+0x30>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 80082f0:	4b04      	ldr	r3, [pc, #16]	@ (8008304 <testInit+0x30>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 80082f6:	4b03      	ldr	r3, [pc, #12]	@ (8008304 <testInit+0x30>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	715a      	strb	r2, [r3, #5]
}
 80082fc:	46c0      	nop			@ (mov r8, r8)
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	46c0      	nop			@ (mov r8, r8)
 8008304:	20000fcc 	.word	0x20000fcc

08008308 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800830c:	4b02      	ldr	r3, [pc, #8]	@ (8008318 <GetPMSensorPresence+0x10>)
 800830e:	789b      	ldrb	r3, [r3, #2]
}
 8008310:	0018      	movs	r0, r3
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	46c0      	nop			@ (mov r8, r8)
 8008318:	20000fcc 	.word	0x20000fcc

0800831c <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 8008320:	4b02      	ldr	r3, [pc, #8]	@ (800832c <IsSGPPresent+0x10>)
 8008322:	785b      	ldrb	r3, [r3, #1]
}
 8008324:	0018      	movs	r0, r3
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	46c0      	nop			@ (mov r8, r8)
 800832c:	20000fcc 	.word	0x20000fcc

08008330 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	0002      	movs	r2, r0
 8008338:	1dfb      	adds	r3, r7, #7
 800833a:	701a      	strb	r2, [r3, #0]
  SensorProbe.SGP_Enabled = setting;
 800833c:	4b0b      	ldr	r3, [pc, #44]	@ (800836c <SetVOCSensorDIS_ENA+0x3c>)
 800833e:	1dfa      	adds	r2, r7, #7
 8008340:	7812      	ldrb	r2, [r2, #0]
 8008342:	715a      	strb	r2, [r3, #5]
//  SensorProbe.VOC_Present = setting;
  Sensor.VOC_measurementEnabled = setting;
 8008344:	4b0a      	ldr	r3, [pc, #40]	@ (8008370 <SetVOCSensorDIS_ENA+0x40>)
 8008346:	1dfa      	adds	r2, r7, #7
 8008348:	7812      	ldrb	r2, [r2, #0]
 800834a:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800834c:	1dfb      	adds	r3, r7, #7
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <SetVOCSensorDIS_ENA+0x28>
 8008354:	4b07      	ldr	r3, [pc, #28]	@ (8008374 <SetVOCSensorDIS_ENA+0x44>)
 8008356:	e000      	b.n	800835a <SetVOCSensorDIS_ENA+0x2a>
 8008358:	4b07      	ldr	r3, [pc, #28]	@ (8008378 <SetVOCSensorDIS_ENA+0x48>)
 800835a:	4a08      	ldr	r2, [pc, #32]	@ (800837c <SetVOCSensorDIS_ENA+0x4c>)
 800835c:	4908      	ldr	r1, [pc, #32]	@ (8008380 <SetVOCSensorDIS_ENA+0x50>)
 800835e:	2003      	movs	r0, #3
 8008360:	f005 ffe8 	bl	800e334 <CreateLine>
}
 8008364:	46c0      	nop			@ (mov r8, r8)
 8008366:	46bd      	mov	sp, r7
 8008368:	b002      	add	sp, #8
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20000fcc 	.word	0x20000fcc
 8008370:	20000080 	.word	0x20000080
 8008374:	08023ff8 	.word	0x08023ff8
 8008378:	08024000 	.word	0x08024000
 800837c:	0802400c 	.word	0x0802400c
 8008380:	08024020 	.word	0x08024020

08008384 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008388:	4b02      	ldr	r3, [pc, #8]	@ (8008394 <IsPMSensorEnabled+0x10>)
 800838a:	789b      	ldrb	r3, [r3, #2]
}
 800838c:	0018      	movs	r0, r3
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	46c0      	nop			@ (mov r8, r8)
 8008394:	20000080 	.word	0x20000080

08008398 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	0002      	movs	r2, r0
 80083a0:	1dfb      	adds	r3, r7, #7
 80083a2:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = setting;
 80083a4:	4b03      	ldr	r3, [pc, #12]	@ (80083b4 <SetVOCSensorStatus+0x1c>)
 80083a6:	1dfa      	adds	r2, r7, #7
 80083a8:	7812      	ldrb	r2, [r2, #0]
 80083aa:	705a      	strb	r2, [r3, #1]
}
 80083ac:	46c0      	nop			@ (mov r8, r8)
 80083ae:	46bd      	mov	sp, r7
 80083b0:	b002      	add	sp, #8
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20000080 	.word	0x20000080

080083b8 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	0002      	movs	r2, r0
 80083c0:	1dfb      	adds	r3, r7, #7
 80083c2:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 80083c4:	4b03      	ldr	r3, [pc, #12]	@ (80083d4 <SetPMSensorStatus+0x1c>)
 80083c6:	1dfa      	adds	r2, r7, #7
 80083c8:	7812      	ldrb	r2, [r2, #0]
 80083ca:	709a      	strb	r2, [r3, #2]
}
 80083cc:	46c0      	nop			@ (mov r8, r8)
 80083ce:	46bd      	mov	sp, r7
 80083d0:	b002      	add	sp, #8
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20000080 	.word	0x20000080

080083d8 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 80083dc:	4b02      	ldr	r3, [pc, #8]	@ (80083e8 <SetESPMeasurementDone+0x10>)
 80083de:	2201      	movs	r2, #1
 80083e0:	711a      	strb	r2, [r3, #4]
}
 80083e2:	46c0      	nop			@ (mov r8, r8)
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20000fcc 	.word	0x20000fcc

080083ec <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
  testInit();
 80083fa:	f7ff ff6b 	bl	80082d4 <testInit>
  I2CSensors_Init(sensorI2C);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	0018      	movs	r0, r3
 8008402:	f7fd fcc9 	bl	8005d98 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 8008406:	f006 f9c7 	bl	800e798 <HIDS_DeviceConnected>
 800840a:	0003      	movs	r3, r0
 800840c:	001a      	movs	r2, r3
 800840e:	2301      	movs	r3, #1
 8008410:	4053      	eors	r3, r2
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00c      	beq.n	8008432 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 8008418:	4a7f      	ldr	r2, [pc, #508]	@ (8008618 <Device_Init+0x22c>)
 800841a:	4b80      	ldr	r3, [pc, #512]	@ (800861c <Device_Init+0x230>)
 800841c:	0019      	movs	r1, r3
 800841e:	2001      	movs	r0, #1
 8008420:	f005 ff88 	bl	800e334 <CreateLine>
     SensorProbe.HT_Present = false;
 8008424:	4b7e      	ldr	r3, [pc, #504]	@ (8008620 <Device_Init+0x234>)
 8008426:	2200      	movs	r2, #0
 8008428:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800842a:	4b7e      	ldr	r3, [pc, #504]	@ (8008624 <Device_Init+0x238>)
 800842c:	2200      	movs	r2, #0
 800842e:	701a      	strb	r2, [r3, #0]
 8008430:	e008      	b.n	8008444 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 8008432:	4b7b      	ldr	r3, [pc, #492]	@ (8008620 <Device_Init+0x234>)
 8008434:	2201      	movs	r2, #1
 8008436:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8008438:	4a7b      	ldr	r2, [pc, #492]	@ (8008628 <Device_Init+0x23c>)
 800843a:	4b7c      	ldr	r3, [pc, #496]	@ (800862c <Device_Init+0x240>)
 800843c:	0019      	movs	r1, r3
 800843e:	2003      	movs	r0, #3
 8008440:	f005 ff78 	bl	800e334 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8008444:	f003 fbd4 	bl	800bbf0 <SGP_DeviceConnected>
 8008448:	0003      	movs	r3, r0
 800844a:	001a      	movs	r2, r3
 800844c:	2301      	movs	r3, #1
 800844e:	4053      	eors	r3, r2
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00c      	beq.n	8008470 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 8008456:	4b72      	ldr	r3, [pc, #456]	@ (8008620 <Device_Init+0x234>)
 8008458:	2200      	movs	r2, #0
 800845a:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800845c:	4a74      	ldr	r2, [pc, #464]	@ (8008630 <Device_Init+0x244>)
 800845e:	4b6f      	ldr	r3, [pc, #444]	@ (800861c <Device_Init+0x230>)
 8008460:	0019      	movs	r1, r3
 8008462:	2001      	movs	r0, #1
 8008464:	f005 ff66 	bl	800e334 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8008468:	4b6e      	ldr	r3, [pc, #440]	@ (8008624 <Device_Init+0x238>)
 800846a:	2200      	movs	r2, #0
 800846c:	705a      	strb	r2, [r3, #1]
 800846e:	e00b      	b.n	8008488 <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 8008470:	4b6b      	ldr	r3, [pc, #428]	@ (8008620 <Device_Init+0x234>)
 8008472:	2201      	movs	r2, #1
 8008474:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 8008476:	4b6a      	ldr	r3, [pc, #424]	@ (8008620 <Device_Init+0x234>)
 8008478:	2201      	movs	r2, #1
 800847a:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800847c:	4a6d      	ldr	r2, [pc, #436]	@ (8008634 <Device_Init+0x248>)
 800847e:	4b6b      	ldr	r3, [pc, #428]	@ (800862c <Device_Init+0x240>)
 8008480:	0019      	movs	r1, r3
 8008482:	2003      	movs	r0, #3
 8008484:	f005 ff56 	bl	800e334 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 8008488:	4b65      	ldr	r3, [pc, #404]	@ (8008620 <Device_Init+0x234>)
 800848a:	785b      	ldrb	r3, [r3, #1]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d009      	beq.n	80084a4 <Device_Init+0xb8>
 8008490:	4b63      	ldr	r3, [pc, #396]	@ (8008620 <Device_Init+0x234>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <Device_Init+0xb8>
    SetDBLED(false, true, false);
 8008498:	2200      	movs	r2, #0
 800849a:	2101      	movs	r1, #1
 800849c:	2000      	movs	r0, #0
 800849e:	f004 fe65 	bl	800d16c <SetDBLED>
 80084a2:	e018      	b.n	80084d6 <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 80084a4:	2200      	movs	r2, #0
 80084a6:	2100      	movs	r1, #0
 80084a8:	2001      	movs	r0, #1
 80084aa:	f004 fe5f 	bl	800d16c <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80084ae:	4b62      	ldr	r3, [pc, #392]	@ (8008638 <Device_Init+0x24c>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	2101      	movs	r1, #1
 80084b4:	0018      	movs	r0, r3
 80084b6:	f007 fe24 	bl	8010102 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80084ba:	2380      	movs	r3, #128	@ 0x80
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	485e      	ldr	r0, [pc, #376]	@ (8008638 <Device_Init+0x24c>)
 80084c0:	2201      	movs	r2, #1
 80084c2:	0019      	movs	r1, r3
 80084c4:	f007 fe1d 	bl	8010102 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80084c8:	2380      	movs	r3, #128	@ 0x80
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	485a      	ldr	r0, [pc, #360]	@ (8008638 <Device_Init+0x24c>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	0019      	movs	r1, r3
 80084d2:	f007 fe16 	bl	8010102 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 80084d6:	4b53      	ldr	r3, [pc, #332]	@ (8008624 <Device_Init+0x238>)
 80084d8:	78db      	ldrb	r3, [r3, #3]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d028      	beq.n	8008530 <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 80084de:	4a57      	ldr	r2, [pc, #348]	@ (800863c <Device_Init+0x250>)
 80084e0:	4b57      	ldr	r3, [pc, #348]	@ (8008640 <Device_Init+0x254>)
 80084e2:	0019      	movs	r1, r3
 80084e4:	2002      	movs	r0, #2
 80084e6:	f005 ff25 	bl	800e334 <CreateLine>
    if (!enableMicrophone(true)) {
 80084ea:	2001      	movs	r0, #1
 80084ec:	f003 ff84 	bl	800c3f8 <enableMicrophone>
 80084f0:	0003      	movs	r3, r0
 80084f2:	001a      	movs	r2, r3
 80084f4:	2301      	movs	r3, #1
 80084f6:	4053      	eors	r3, r2
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00c      	beq.n	8008518 <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 80084fe:	4a51      	ldr	r2, [pc, #324]	@ (8008644 <Device_Init+0x258>)
 8008500:	4b46      	ldr	r3, [pc, #280]	@ (800861c <Device_Init+0x230>)
 8008502:	0019      	movs	r1, r3
 8008504:	2001      	movs	r0, #1
 8008506:	f005 ff15 	bl	800e334 <CreateLine>
      SensorProbe.MIC_Present = false;
 800850a:	4b45      	ldr	r3, [pc, #276]	@ (8008620 <Device_Init+0x234>)
 800850c:	2200      	movs	r2, #0
 800850e:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 8008510:	4b44      	ldr	r3, [pc, #272]	@ (8008624 <Device_Init+0x238>)
 8008512:	2200      	movs	r2, #0
 8008514:	70da      	strb	r2, [r3, #3]
 8008516:	e00b      	b.n	8008530 <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 8008518:	4b41      	ldr	r3, [pc, #260]	@ (8008620 <Device_Init+0x234>)
 800851a:	2201      	movs	r2, #1
 800851c:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 800851e:	4b41      	ldr	r3, [pc, #260]	@ (8008624 <Device_Init+0x238>)
 8008520:	2201      	movs	r2, #1
 8008522:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 8008524:	4a48      	ldr	r2, [pc, #288]	@ (8008648 <Device_Init+0x25c>)
 8008526:	4b41      	ldr	r3, [pc, #260]	@ (800862c <Device_Init+0x240>)
 8008528:	0019      	movs	r1, r3
 800852a:	2003      	movs	r0, #3
 800852c:	f005 ff02 	bl	800e334 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 8008530:	f000 fe1c 	bl	800916c <probe_sen5x>
 8008534:	1e03      	subs	r3, r0, #0
 8008536:	d122      	bne.n	800857e <Device_Init+0x192>
    Debug("PM sensor initialised.");
 8008538:	4a44      	ldr	r2, [pc, #272]	@ (800864c <Device_Init+0x260>)
 800853a:	4b3c      	ldr	r3, [pc, #240]	@ (800862c <Device_Init+0x240>)
 800853c:	0019      	movs	r1, r3
 800853e:	2003      	movs	r0, #3
 8008540:	f005 fef8 	bl	800e334 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8008544:	4b36      	ldr	r3, [pc, #216]	@ (8008620 <Device_Init+0x234>)
 8008546:	2201      	movs	r2, #1
 8008548:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 800854a:	4b36      	ldr	r3, [pc, #216]	@ (8008624 <Device_Init+0x238>)
 800854c:	2201      	movs	r2, #1
 800854e:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8008550:	4b3f      	ldr	r3, [pc, #252]	@ (8008650 <Device_Init+0x264>)
 8008552:	791b      	ldrb	r3, [r3, #4]
 8008554:	2b34      	cmp	r3, #52	@ 0x34
 8008556:	d003      	beq.n	8008560 <Device_Init+0x174>
 8008558:	4b3d      	ldr	r3, [pc, #244]	@ (8008650 <Device_Init+0x264>)
 800855a:	791b      	ldrb	r3, [r3, #4]
 800855c:	2b35      	cmp	r3, #53	@ 0x35
 800855e:	d11c      	bne.n	800859a <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 8008560:	4a3c      	ldr	r2, [pc, #240]	@ (8008654 <Device_Init+0x268>)
 8008562:	4b37      	ldr	r3, [pc, #220]	@ (8008640 <Device_Init+0x254>)
 8008564:	0019      	movs	r1, r3
 8008566:	2002      	movs	r0, #2
 8008568:	f005 fee4 	bl	800e334 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800856c:	4b2d      	ldr	r3, [pc, #180]	@ (8008624 <Device_Init+0x238>)
 800856e:	2200      	movs	r2, #0
 8008570:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 8008572:	4b2b      	ldr	r3, [pc, #172]	@ (8008620 <Device_Init+0x234>)
 8008574:	2200      	movs	r2, #0
 8008576:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 8008578:	f003 fd1e 	bl	800bfb8 <SGP_SoftReset>
 800857c:	e00d      	b.n	800859a <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800857e:	f000 fdbf 	bl	8009100 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 8008582:	4a35      	ldr	r2, [pc, #212]	@ (8008658 <Device_Init+0x26c>)
 8008584:	4b29      	ldr	r3, [pc, #164]	@ (800862c <Device_Init+0x240>)
 8008586:	0019      	movs	r1, r3
 8008588:	2003      	movs	r0, #3
 800858a:	f005 fed3 	bl	800e334 <CreateLine>
    SensorProbe.PM_Present = false;
 800858e:	4b24      	ldr	r3, [pc, #144]	@ (8008620 <Device_Init+0x234>)
 8008590:	2200      	movs	r2, #0
 8008592:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8008594:	4b23      	ldr	r3, [pc, #140]	@ (8008624 <Device_Init+0x238>)
 8008596:	2200      	movs	r2, #0
 8008598:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800859a:	4b21      	ldr	r3, [pc, #132]	@ (8008620 <Device_Init+0x234>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <Device_Init+0x1ba>
 80085a2:	4b2e      	ldr	r3, [pc, #184]	@ (800865c <Device_Init+0x270>)
 80085a4:	e000      	b.n	80085a8 <Device_Init+0x1bc>
 80085a6:	4b2e      	ldr	r3, [pc, #184]	@ (8008660 <Device_Init+0x274>)
 80085a8:	4a2e      	ldr	r2, [pc, #184]	@ (8008664 <Device_Init+0x278>)
 80085aa:	4925      	ldr	r1, [pc, #148]	@ (8008640 <Device_Init+0x254>)
 80085ac:	2002      	movs	r0, #2
 80085ae:	f005 fec1 	bl	800e334 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 80085b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008620 <Device_Init+0x234>)
 80085b4:	785b      	ldrb	r3, [r3, #1]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <Device_Init+0x1d2>
 80085ba:	4b28      	ldr	r3, [pc, #160]	@ (800865c <Device_Init+0x270>)
 80085bc:	e000      	b.n	80085c0 <Device_Init+0x1d4>
 80085be:	4b28      	ldr	r3, [pc, #160]	@ (8008660 <Device_Init+0x274>)
 80085c0:	4a29      	ldr	r2, [pc, #164]	@ (8008668 <Device_Init+0x27c>)
 80085c2:	491f      	ldr	r1, [pc, #124]	@ (8008640 <Device_Init+0x254>)
 80085c4:	2002      	movs	r0, #2
 80085c6:	f005 feb5 	bl	800e334 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 80085ca:	4b15      	ldr	r3, [pc, #84]	@ (8008620 <Device_Init+0x234>)
 80085cc:	789b      	ldrb	r3, [r3, #2]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <Device_Init+0x1ea>
 80085d2:	4b22      	ldr	r3, [pc, #136]	@ (800865c <Device_Init+0x270>)
 80085d4:	e000      	b.n	80085d8 <Device_Init+0x1ec>
 80085d6:	4b22      	ldr	r3, [pc, #136]	@ (8008660 <Device_Init+0x274>)
 80085d8:	4a24      	ldr	r2, [pc, #144]	@ (800866c <Device_Init+0x280>)
 80085da:	4919      	ldr	r1, [pc, #100]	@ (8008640 <Device_Init+0x254>)
 80085dc:	2002      	movs	r0, #2
 80085de:	f005 fea9 	bl	800e334 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 80085e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008620 <Device_Init+0x234>)
 80085e4:	78db      	ldrb	r3, [r3, #3]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <Device_Init+0x202>
 80085ea:	4b1c      	ldr	r3, [pc, #112]	@ (800865c <Device_Init+0x270>)
 80085ec:	e000      	b.n	80085f0 <Device_Init+0x204>
 80085ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008660 <Device_Init+0x274>)
 80085f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008670 <Device_Init+0x284>)
 80085f2:	4913      	ldr	r1, [pc, #76]	@ (8008640 <Device_Init+0x254>)
 80085f4:	2002      	movs	r0, #2
 80085f6:	f005 fe9d 	bl	800e334 <CreateLine>
  ESP_Init(espUart);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	0018      	movs	r0, r3
 80085fe:	f7fb fa5d 	bl	8003abc <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 8008602:	4a1c      	ldr	r2, [pc, #112]	@ (8008674 <Device_Init+0x288>)
 8008604:	4b09      	ldr	r3, [pc, #36]	@ (800862c <Device_Init+0x240>)
 8008606:	0019      	movs	r1, r3
 8008608:	2003      	movs	r0, #3
 800860a:	f005 fe93 	bl	800e334 <CreateLine>
}
 800860e:	46c0      	nop			@ (mov r8, r8)
 8008610:	46bd      	mov	sp, r7
 8008612:	b004      	add	sp, #16
 8008614:	bd80      	pop	{r7, pc}
 8008616:	46c0      	nop			@ (mov r8, r8)
 8008618:	08024024 	.word	0x08024024
 800861c:	08024054 	.word	0x08024054
 8008620:	20000fcc 	.word	0x20000fcc
 8008624:	20000080 	.word	0x20000080
 8008628:	08024058 	.word	0x08024058
 800862c:	08024020 	.word	0x08024020
 8008630:	08024084 	.word	0x08024084
 8008634:	080240a0 	.word	0x080240a0
 8008638:	50000400 	.word	0x50000400
 800863c:	080240b8 	.word	0x080240b8
 8008640:	080240dc 	.word	0x080240dc
 8008644:	080240e0 	.word	0x080240e0
 8008648:	0802410c 	.word	0x0802410c
 800864c:	08024138 	.word	0x08024138
 8008650:	20001260 	.word	0x20001260
 8008654:	08024150 	.word	0x08024150
 8008658:	080241a0 	.word	0x080241a0
 800865c:	080241c4 	.word	0x080241c4
 8008660:	080241c8 	.word	0x080241c8
 8008664:	080241cc 	.word	0x080241cc
 8008668:	080241e8 	.word	0x080241e8
 800866c:	08024204 	.word	0x08024204
 8008670:	08024220 	.word	0x08024220
 8008674:	0802423c 	.word	0x0802423c

08008678 <Device_Test>:

void Device_Test(){
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800867c:	4b31      	ldr	r3, [pc, #196]	@ (8008744 <Device_Test+0xcc>)
 800867e:	78db      	ldrb	r3, [r3, #3]
 8008680:	2201      	movs	r2, #1
 8008682:	4053      	eors	r3, r2
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d021      	beq.n	80086ce <Device_Test+0x56>
    if(MIC_TestMeasurementDone()){
 800868a:	f000 faa7 	bl	8008bdc <MIC_TestMeasurementDone>
 800868e:	1e03      	subs	r3, r0, #0
 8008690:	d00e      	beq.n	80086b0 <Device_Test+0x38>
      //when this condition is met, the device is definite operational
//      Debug("MIC_TestMeasurementDone() is true");
      SensorProbe.MIC_Present = true;
 8008692:	4b2c      	ldr	r3, [pc, #176]	@ (8008744 <Device_Test+0xcc>)
 8008694:	2201      	movs	r2, #1
 8008696:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008698:	4b2b      	ldr	r3, [pc, #172]	@ (8008748 <Device_Test+0xd0>)
 800869a:	2201      	movs	r2, #1
 800869c:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 800869e:	23fa      	movs	r3, #250	@ 0xfa
 80086a0:	011a      	lsls	r2, r3, #4
 80086a2:	492a      	ldr	r1, [pc, #168]	@ (800874c <Device_Test+0xd4>)
 80086a4:	23fa      	movs	r3, #250	@ 0xfa
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	0018      	movs	r0, r3
 80086aa:	f004 fd2b 	bl	800d104 <SetStatusLED>
 80086ae:	e00e      	b.n	80086ce <Device_Test+0x56>
    }
    else{
      if (micSettlingComplete()) {
 80086b0:	f003 fe7e 	bl	800c3b0 <micSettlingComplete>
 80086b4:	1e03      	subs	r3, r0, #0
 80086b6:	d00a      	beq.n	80086ce <Device_Test+0x56>
        // his has to be met first
//        Debug("micSettlingComplete() is true");
        Sensor.MIC_measurementEnabled = true;
 80086b8:	4b23      	ldr	r3, [pc, #140]	@ (8008748 <Device_Test+0xd0>)
 80086ba:	2201      	movs	r2, #1
 80086bc:	70da      	strb	r2, [r3, #3]
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 80086be:	23fa      	movs	r3, #250	@ 0xfa
 80086c0:	011a      	lsls	r2, r3, #4
 80086c2:	23fa      	movs	r3, #250	@ 0xfa
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	4821      	ldr	r0, [pc, #132]	@ (800874c <Device_Test+0xd4>)
 80086c8:	0019      	movs	r1, r3
 80086ca:	f004 fd1b 	bl	800d104 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 80086ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008744 <Device_Test+0xcc>)
 80086d0:	791b      	ldrb	r3, [r3, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	4053      	eors	r3, r2
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <Device_Test+0x68>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 80086dc:	f7fc fdca 	bl	8005274 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 80086e0:	4b18      	ldr	r3, [pc, #96]	@ (8008744 <Device_Test+0xcc>)
 80086e2:	791b      	ldrb	r3, [r3, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <Device_Test+0x78>
 80086e8:	4b16      	ldr	r3, [pc, #88]	@ (8008744 <Device_Test+0xcc>)
 80086ea:	78db      	ldrb	r3, [r3, #3]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d106      	bne.n	80086fe <Device_Test+0x86>
 80086f0:	4b17      	ldr	r3, [pc, #92]	@ (8008750 <Device_Test+0xd8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	0018      	movs	r0, r3
 80086f6:	f005 fdc7 	bl	800e288 <TimestampIsReached>
 80086fa:	1e03      	subs	r3, r0, #0
 80086fc:	d01f      	beq.n	800873e <Device_Test+0xc6>
    Info("Test completed");
 80086fe:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <Device_Test+0xdc>)
 8008700:	4b15      	ldr	r3, [pc, #84]	@ (8008758 <Device_Test+0xe0>)
 8008702:	0019      	movs	r1, r3
 8008704:	2002      	movs	r0, #2
 8008706:	f005 fe15 	bl	800e334 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800870a:	4b0e      	ldr	r3, [pc, #56]	@ (8008744 <Device_Test+0xcc>)
 800870c:	791b      	ldrb	r3, [r3, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <Device_Test+0x9e>
 8008712:	4b12      	ldr	r3, [pc, #72]	@ (800875c <Device_Test+0xe4>)
 8008714:	e000      	b.n	8008718 <Device_Test+0xa0>
 8008716:	4b12      	ldr	r3, [pc, #72]	@ (8008760 <Device_Test+0xe8>)
 8008718:	4a12      	ldr	r2, [pc, #72]	@ (8008764 <Device_Test+0xec>)
 800871a:	490f      	ldr	r1, [pc, #60]	@ (8008758 <Device_Test+0xe0>)
 800871c:	2002      	movs	r0, #2
 800871e:	f005 fe09 	bl	800e334 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 8008722:	4b08      	ldr	r3, [pc, #32]	@ (8008744 <Device_Test+0xcc>)
 8008724:	78db      	ldrb	r3, [r3, #3]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <Device_Test+0xb6>
 800872a:	4b0c      	ldr	r3, [pc, #48]	@ (800875c <Device_Test+0xe4>)
 800872c:	e000      	b.n	8008730 <Device_Test+0xb8>
 800872e:	4b0c      	ldr	r3, [pc, #48]	@ (8008760 <Device_Test+0xe8>)
 8008730:	4a0d      	ldr	r2, [pc, #52]	@ (8008768 <Device_Test+0xf0>)
 8008732:	4909      	ldr	r1, [pc, #36]	@ (8008758 <Device_Test+0xe0>)
 8008734:	2002      	movs	r0, #2
 8008736:	f005 fdfd 	bl	800e334 <CreateLine>
    SetTestDone();
 800873a:	f7ff f9eb 	bl	8007b14 <SetTestDone>
  }
}
 800873e:	46c0      	nop			@ (mov r8, r8)
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20000fcc 	.word	0x20000fcc
 8008748:	20000080 	.word	0x20000080
 800874c:	00000bb8 	.word	0x00000bb8
 8008750:	20000fc0 	.word	0x20000fc0
 8008754:	08024260 	.word	0x08024260
 8008758:	080240dc 	.word	0x080240dc
 800875c:	08024270 	.word	0x08024270
 8008760:	08024278 	.word	0x08024278
 8008764:	08024280 	.word	0x08024280
 8008768:	08024294 	.word	0x08024294

0800876c <AllDevicesReady>:

bool AllDevicesReady() {
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8008770:	4b2a      	ldr	r3, [pc, #168]	@ (800881c <AllDevicesReady+0xb0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	0018      	movs	r0, r3
 8008776:	f005 fd87 	bl	800e288 <TimestampIsReached>
 800877a:	1e03      	subs	r3, r0, #0
 800877c:	d04a      	beq.n	8008814 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800877e:	4b28      	ldr	r3, [pc, #160]	@ (8008820 <AllDevicesReady+0xb4>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	2b06      	cmp	r3, #6
 8008784:	d102      	bne.n	800878c <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8008786:	4b27      	ldr	r3, [pc, #156]	@ (8008824 <AllDevicesReady+0xb8>)
 8008788:	2200      	movs	r2, #0
 800878a:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800878c:	4b26      	ldr	r3, [pc, #152]	@ (8008828 <AllDevicesReady+0xbc>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b07      	cmp	r3, #7
 8008792:	d006      	beq.n	80087a2 <AllDevicesReady+0x36>
 8008794:	4b25      	ldr	r3, [pc, #148]	@ (800882c <AllDevicesReady+0xc0>)
 8008796:	795b      	ldrb	r3, [r3, #5]
 8008798:	2201      	movs	r2, #1
 800879a:	4053      	eors	r3, r2
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 80087a2:	4b20      	ldr	r3, [pc, #128]	@ (8008824 <AllDevicesReady+0xb8>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 80087a8:	4b21      	ldr	r3, [pc, #132]	@ (8008830 <AllDevicesReady+0xc4>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d102      	bne.n	80087b6 <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 80087b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008824 <AllDevicesReady+0xb8>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 80087b6:	4b1f      	ldr	r3, [pc, #124]	@ (8008834 <AllDevicesReady+0xc8>)
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d102      	bne.n	80087c4 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 80087be:	4b19      	ldr	r3, [pc, #100]	@ (8008824 <AllDevicesReady+0xb8>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 80087c4:	4b1c      	ldr	r3, [pc, #112]	@ (8008838 <AllDevicesReady+0xcc>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b09      	cmp	r3, #9
 80087ca:	d123      	bne.n	8008814 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80087cc:	4b15      	ldr	r3, [pc, #84]	@ (8008824 <AllDevicesReady+0xb8>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2201      	movs	r2, #1
 80087d2:	4053      	eors	r3, r2
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d016      	beq.n	8008808 <AllDevicesReady+0x9c>
 80087da:	4b12      	ldr	r3, [pc, #72]	@ (8008824 <AllDevicesReady+0xb8>)
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	2201      	movs	r2, #1
 80087e0:	4053      	eors	r3, r2
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00f      	beq.n	8008808 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80087e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008824 <AllDevicesReady+0xb8>)
 80087ea:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80087ec:	2201      	movs	r2, #1
 80087ee:	4053      	eors	r3, r2
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d008      	beq.n	8008808 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80087f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008824 <AllDevicesReady+0xb8>)
 80087f8:	78db      	ldrb	r3, [r3, #3]
 80087fa:	2201      	movs	r2, #1
 80087fc:	4053      	eors	r3, r2
 80087fe:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <AllDevicesReady+0x9c>
 8008804:	2301      	movs	r3, #1
 8008806:	e000      	b.n	800880a <AllDevicesReady+0x9e>
 8008808:	2300      	movs	r3, #0
 800880a:	1c1a      	adds	r2, r3, #0
 800880c:	2301      	movs	r3, #1
 800880e:	4013      	ands	r3, r2
 8008810:	b2db      	uxtb	r3, r3
 8008812:	e000      	b.n	8008816 <AllDevicesReady+0xaa>
    }
  }
  return false;
 8008814:	2300      	movs	r3, #0
}
 8008816:	0018      	movs	r0, r3
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000fc0 	.word	0x20000fc0
 8008820:	20000fad 	.word	0x20000fad
 8008824:	20000080 	.word	0x20000080
 8008828:	20000fac 	.word	0x20000fac
 800882c:	20000fcc 	.word	0x20000fcc
 8008830:	20000085 	.word	0x20000085
 8008834:	20000fae 	.word	0x20000fae
 8008838:	20000faf 	.word	0x20000faf

0800883c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8008840:	4b11      	ldr	r3, [pc, #68]	@ (8008888 <EnabledConnectedDevices+0x4c>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8008848:	4b10      	ldr	r3, [pc, #64]	@ (800888c <EnabledConnectedDevices+0x50>)
 800884a:	2201      	movs	r2, #1
 800884c:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800884e:	4b0e      	ldr	r3, [pc, #56]	@ (8008888 <EnabledConnectedDevices+0x4c>)
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d006      	beq.n	8008864 <EnabledConnectedDevices+0x28>
 8008856:	4b0c      	ldr	r3, [pc, #48]	@ (8008888 <EnabledConnectedDevices+0x4c>)
 8008858:	795b      	ldrb	r3, [r3, #5]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 800885e:	4b0b      	ldr	r3, [pc, #44]	@ (800888c <EnabledConnectedDevices+0x50>)
 8008860:	2201      	movs	r2, #1
 8008862:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008864:	4b08      	ldr	r3, [pc, #32]	@ (8008888 <EnabledConnectedDevices+0x4c>)
 8008866:	789b      	ldrb	r3, [r3, #2]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 800886c:	4b07      	ldr	r3, [pc, #28]	@ (800888c <EnabledConnectedDevices+0x50>)
 800886e:	2201      	movs	r2, #1
 8008870:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8008872:	4b05      	ldr	r3, [pc, #20]	@ (8008888 <EnabledConnectedDevices+0x4c>)
 8008874:	78db      	ldrb	r3, [r3, #3]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 800887a:	4b04      	ldr	r3, [pc, #16]	@ (800888c <EnabledConnectedDevices+0x50>)
 800887c:	2201      	movs	r2, #1
 800887e:	70da      	strb	r2, [r3, #3]
  }
}
 8008880:	46c0      	nop			@ (mov r8, r8)
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	46c0      	nop			@ (mov r8, r8)
 8008888:	20000fcc 	.word	0x20000fcc
 800888c:	20000080 	.word	0x20000080

08008890 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
    Sensor.HT_measurementEnabled = false;
 8008894:	4b07      	ldr	r3, [pc, #28]	@ (80088b4 <DisableConnectedDevices+0x24>)
 8008896:	2200      	movs	r2, #0
 8008898:	701a      	strb	r2, [r3, #0]
    Sensor.VOC_measurementEnabled = false;
 800889a:	4b06      	ldr	r3, [pc, #24]	@ (80088b4 <DisableConnectedDevices+0x24>)
 800889c:	2200      	movs	r2, #0
 800889e:	705a      	strb	r2, [r3, #1]
    Sensor.PM_measurementEnabled = false;
 80088a0:	4b04      	ldr	r3, [pc, #16]	@ (80088b4 <DisableConnectedDevices+0x24>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	709a      	strb	r2, [r3, #2]
    Sensor.MIC_measurementEnabled = false;
 80088a6:	4b03      	ldr	r3, [pc, #12]	@ (80088b4 <DisableConnectedDevices+0x24>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	70da      	strb	r2, [r3, #3]
}
 80088ac:	46c0      	nop			@ (mov r8, r8)
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	46c0      	nop			@ (mov r8, r8)
 80088b4:	20000080 	.word	0x20000080

080088b8 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 80088bc:	4b02      	ldr	r3, [pc, #8]	@ (80088c8 <ResetdBAmax+0x10>)
 80088be:	2200      	movs	r2, #0
 80088c0:	601a      	str	r2, [r3, #0]
}
 80088c2:	46c0      	nop			@ (mov r8, r8)
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20001018 	.word	0x20001018

080088cc <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80088d4:	f006 f984 	bl	800ebe0 <HAL_GetTick>
 80088d8:	0002      	movs	r2, r0
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	18d2      	adds	r2, r2, r3
 80088de:	4b03      	ldr	r3, [pc, #12]	@ (80088ec <setMICTimeStamp+0x20>)
 80088e0:	601a      	str	r2, [r3, #0]
}
 80088e2:	46c0      	nop			@ (mov r8, r8)
 80088e4:	46bd      	mov	sp, r7
 80088e6:	b002      	add	sp, #8
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	46c0      	nop			@ (mov r8, r8)
 80088ec:	20001020 	.word	0x20001020

080088f0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80088f0:	b580      	push	{r7, lr}
 80088f2:	af00      	add	r7, sp, #0
  counter = 0;
 80088f4:	4b05      	ldr	r3, [pc, #20]	@ (800890c <ResetDBACalculator+0x1c>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80088fa:	4b05      	ldr	r3, [pc, #20]	@ (8008910 <ResetDBACalculator+0x20>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 8008900:	4b04      	ldr	r3, [pc, #16]	@ (8008914 <ResetDBACalculator+0x24>)
 8008902:	2200      	movs	r2, #0
 8008904:	701a      	strb	r2, [r3, #0]
}
 8008906:	46c0      	nop			@ (mov r8, r8)
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	2000101c 	.word	0x2000101c
 8008910:	20000084 	.word	0x20000084
 8008914:	2000101d 	.word	0x2000101d

08008918 <MIC_Print>:

void MIC_Print(void) {
 8008918:	b5b0      	push	{r4, r5, r7, lr}
 800891a:	b08a      	sub	sp, #40	@ 0x28
 800891c:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800891e:	4b9d      	ldr	r3, [pc, #628]	@ (8008b94 <MIC_Print+0x27c>)
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	4b9d      	ldr	r3, [pc, #628]	@ (8008b98 <MIC_Print+0x280>)
 8008924:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008926:	4b9d      	ldr	r3, [pc, #628]	@ (8008b9c <MIC_Print+0x284>)
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	001a      	movs	r2, r3
 800892c:	4b9a      	ldr	r3, [pc, #616]	@ (8008b98 <MIC_Print+0x280>)
 800892e:	6819      	ldr	r1, [r3, #0]
 8008930:	4b9b      	ldr	r3, [pc, #620]	@ (8008ba0 <MIC_Print+0x288>)
 8008932:	0092      	lsls	r2, r2, #2
 8008934:	50d1      	str	r1, [r2, r3]
  counter++;
 8008936:	4b99      	ldr	r3, [pc, #612]	@ (8008b9c <MIC_Print+0x284>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	3301      	adds	r3, #1
 800893c:	b2da      	uxtb	r2, r3
 800893e:	4b97      	ldr	r3, [pc, #604]	@ (8008b9c <MIC_Print+0x284>)
 8008940:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008942:	4b96      	ldr	r3, [pc, #600]	@ (8008b9c <MIC_Print+0x284>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b09      	cmp	r3, #9
 8008948:	d80b      	bhi.n	8008962 <MIC_Print+0x4a>
 800894a:	4b96      	ldr	r3, [pc, #600]	@ (8008ba4 <MIC_Print+0x28c>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2201      	movs	r2, #1
 8008950:	4053      	eors	r3, r2
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	d004      	beq.n	8008962 <MIC_Print+0x4a>
    denominator = counter;
 8008958:	4b90      	ldr	r3, [pc, #576]	@ (8008b9c <MIC_Print+0x284>)
 800895a:	781a      	ldrb	r2, [r3, #0]
 800895c:	4b92      	ldr	r3, [pc, #584]	@ (8008ba8 <MIC_Print+0x290>)
 800895e:	701a      	strb	r2, [r3, #0]
 8008960:	e005      	b.n	800896e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008962:	4b91      	ldr	r3, [pc, #580]	@ (8008ba8 <MIC_Print+0x290>)
 8008964:	220a      	movs	r2, #10
 8008966:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008968:	4b8e      	ldr	r3, [pc, #568]	@ (8008ba4 <MIC_Print+0x28c>)
 800896a:	2201      	movs	r2, #1
 800896c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800896e:	4b8f      	ldr	r3, [pc, #572]	@ (8008bac <MIC_Print+0x294>)
 8008970:	2200      	movs	r2, #0
 8008972:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008974:	230f      	movs	r3, #15
 8008976:	18fb      	adds	r3, r7, r3
 8008978:	2200      	movs	r2, #0
 800897a:	701a      	strb	r2, [r3, #0]
 800897c:	e03e      	b.n	80089fc <MIC_Print+0xe4>
    dBAsum += dBASamples[i];
 800897e:	240f      	movs	r4, #15
 8008980:	193b      	adds	r3, r7, r4
 8008982:	781a      	ldrb	r2, [r3, #0]
 8008984:	4b86      	ldr	r3, [pc, #536]	@ (8008ba0 <MIC_Print+0x288>)
 8008986:	0092      	lsls	r2, r2, #2
 8008988:	58d2      	ldr	r2, [r2, r3]
 800898a:	4b88      	ldr	r3, [pc, #544]	@ (8008bac <MIC_Print+0x294>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	1c19      	adds	r1, r3, #0
 8008990:	1c10      	adds	r0, r2, #0
 8008992:	f7f7 ff95 	bl	80008c0 <__aeabi_fadd>
 8008996:	1c03      	adds	r3, r0, #0
 8008998:	1c1a      	adds	r2, r3, #0
 800899a:	4b84      	ldr	r3, [pc, #528]	@ (8008bac <MIC_Print+0x294>)
 800899c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800899e:	193b      	adds	r3, r7, r4
 80089a0:	781a      	ldrb	r2, [r3, #0]
 80089a2:	4b7f      	ldr	r3, [pc, #508]	@ (8008ba0 <MIC_Print+0x288>)
 80089a4:	0092      	lsls	r2, r2, #2
 80089a6:	58d2      	ldr	r2, [r2, r3]
 80089a8:	4b81      	ldr	r3, [pc, #516]	@ (8008bb0 <MIC_Print+0x298>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	1c19      	adds	r1, r3, #0
 80089ae:	1c10      	adds	r0, r2, #0
 80089b0:	f7f7 fdd2 	bl	8000558 <__aeabi_fcmpgt>
 80089b4:	1e03      	subs	r3, r0, #0
 80089b6:	d006      	beq.n	80089c6 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 80089b8:	193b      	adds	r3, r7, r4
 80089ba:	781a      	ldrb	r2, [r3, #0]
 80089bc:	4b78      	ldr	r3, [pc, #480]	@ (8008ba0 <MIC_Print+0x288>)
 80089be:	0092      	lsls	r2, r2, #2
 80089c0:	58d2      	ldr	r2, [r2, r3]
 80089c2:	4b7b      	ldr	r3, [pc, #492]	@ (8008bb0 <MIC_Print+0x298>)
 80089c4:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 80089c6:	4b79      	ldr	r3, [pc, #484]	@ (8008bac <MIC_Print+0x294>)
 80089c8:	681c      	ldr	r4, [r3, #0]
 80089ca:	4b77      	ldr	r3, [pc, #476]	@ (8008ba8 <MIC_Print+0x290>)
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	0018      	movs	r0, r3
 80089d0:	f7f8 fe4a 	bl	8001668 <__aeabi_ui2f>
 80089d4:	1c03      	adds	r3, r0, #0
 80089d6:	1c19      	adds	r1, r3, #0
 80089d8:	1c20      	adds	r0, r4, #0
 80089da:	f7f8 f8fb 	bl	8000bd4 <__aeabi_fdiv>
 80089de:	1c03      	adds	r3, r0, #0
 80089e0:	1c1a      	adds	r2, r3, #0
 80089e2:	4b74      	ldr	r3, [pc, #464]	@ (8008bb4 <MIC_Print+0x29c>)
 80089e4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBAmax);
 80089e6:	4b72      	ldr	r3, [pc, #456]	@ (8008bb0 <MIC_Print+0x298>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	1c18      	adds	r0, r3, #0
 80089ec:	f7fa ffaa 	bl	8003944 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 80089f0:	210f      	movs	r1, #15
 80089f2:	187b      	adds	r3, r7, r1
 80089f4:	781a      	ldrb	r2, [r3, #0]
 80089f6:	187b      	adds	r3, r7, r1
 80089f8:	3201      	adds	r2, #1
 80089fa:	701a      	strb	r2, [r3, #0]
 80089fc:	4b6a      	ldr	r3, [pc, #424]	@ (8008ba8 <MIC_Print+0x290>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	220f      	movs	r2, #15
 8008a02:	18ba      	adds	r2, r7, r2
 8008a04:	7812      	ldrb	r2, [r2, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d3b9      	bcc.n	800897e <MIC_Print+0x66>
  }
  print("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008a0a:	4b63      	ldr	r3, [pc, #396]	@ (8008b98 <MIC_Print+0x280>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	1c18      	adds	r0, r3, #0
 8008a10:	f7fa fd28 	bl	8003464 <__aeabi_f2d>
 8008a14:	6038      	str	r0, [r7, #0]
 8008a16:	6079      	str	r1, [r7, #4]
 8008a18:	4b65      	ldr	r3, [pc, #404]	@ (8008bb0 <MIC_Print+0x298>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	1c18      	adds	r0, r3, #0
 8008a1e:	f7fa fd21 	bl	8003464 <__aeabi_f2d>
 8008a22:	0004      	movs	r4, r0
 8008a24:	000d      	movs	r5, r1
 8008a26:	4b63      	ldr	r3, [pc, #396]	@ (8008bb4 <MIC_Print+0x29c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	1c18      	adds	r0, r3, #0
 8008a2c:	f7fa fd1a 	bl	8003464 <__aeabi_f2d>
 8008a30:	0002      	movs	r2, r0
 8008a32:	000b      	movs	r3, r1
 8008a34:	4960      	ldr	r1, [pc, #384]	@ (8008bb8 <MIC_Print+0x2a0>)
 8008a36:	9204      	str	r2, [sp, #16]
 8008a38:	9305      	str	r3, [sp, #20]
 8008a3a:	9402      	str	r4, [sp, #8]
 8008a3c:	9503      	str	r5, [sp, #12]
 8008a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8008bbc <MIC_Print+0x2a4>)
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	0008      	movs	r0, r1
 8008a48:	f000 fa0c 	bl	8008e64 <print>

  if(counter > NUMBER_OF_SAMPLES){
 8008a4c:	4b53      	ldr	r3, [pc, #332]	@ (8008b9c <MIC_Print+0x284>)
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	2b0a      	cmp	r3, #10
 8008a52:	d902      	bls.n	8008a5a <MIC_Print+0x142>
    counter = 0;
 8008a54:	4b51      	ldr	r3, [pc, #324]	@ (8008b9c <MIC_Print+0x284>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8008b98 <MIC_Print+0x280>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4958      	ldr	r1, [pc, #352]	@ (8008bc0 <MIC_Print+0x2a8>)
 8008a60:	1c18      	adds	r0, r3, #0
 8008a62:	f7f7 fd83 	bl	800056c <__aeabi_fcmpge>
 8008a66:	1e03      	subs	r3, r0, #0
 8008a68:	d004      	beq.n	8008a74 <MIC_Print+0x15c>
    SetDBLED(true, true, true);
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	2001      	movs	r0, #1
 8008a70:	f004 fb7c 	bl	800d16c <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008a74:	4b48      	ldr	r3, [pc, #288]	@ (8008b98 <MIC_Print+0x280>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4952      	ldr	r1, [pc, #328]	@ (8008bc4 <MIC_Print+0x2ac>)
 8008a7a:	1c18      	adds	r0, r3, #0
 8008a7c:	f7f7 fd76 	bl	800056c <__aeabi_fcmpge>
 8008a80:	1e03      	subs	r3, r0, #0
 8008a82:	d00c      	beq.n	8008a9e <MIC_Print+0x186>
 8008a84:	4b44      	ldr	r3, [pc, #272]	@ (8008b98 <MIC_Print+0x280>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	494d      	ldr	r1, [pc, #308]	@ (8008bc0 <MIC_Print+0x2a8>)
 8008a8a:	1c18      	adds	r0, r3, #0
 8008a8c:	f7f7 fd50 	bl	8000530 <__aeabi_fcmplt>
 8008a90:	1e03      	subs	r3, r0, #0
 8008a92:	d004      	beq.n	8008a9e <MIC_Print+0x186>
    SetDBLED(true, false, false);
 8008a94:	2200      	movs	r2, #0
 8008a96:	2100      	movs	r1, #0
 8008a98:	2001      	movs	r0, #1
 8008a9a:	f004 fb67 	bl	800d16c <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8008b98 <MIC_Print+0x280>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4949      	ldr	r1, [pc, #292]	@ (8008bc8 <MIC_Print+0x2b0>)
 8008aa4:	1c18      	adds	r0, r3, #0
 8008aa6:	f7f7 fd61 	bl	800056c <__aeabi_fcmpge>
 8008aaa:	1e03      	subs	r3, r0, #0
 8008aac:	d00c      	beq.n	8008ac8 <MIC_Print+0x1b0>
 8008aae:	4b3a      	ldr	r3, [pc, #232]	@ (8008b98 <MIC_Print+0x280>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4944      	ldr	r1, [pc, #272]	@ (8008bc4 <MIC_Print+0x2ac>)
 8008ab4:	1c18      	adds	r0, r3, #0
 8008ab6:	f7f7 fd3b 	bl	8000530 <__aeabi_fcmplt>
 8008aba:	1e03      	subs	r3, r0, #0
 8008abc:	d004      	beq.n	8008ac8 <MIC_Print+0x1b0>
    SetDBLED(true, true, false);
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	f004 fb52 	bl	800d16c <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008ac8:	4b33      	ldr	r3, [pc, #204]	@ (8008b98 <MIC_Print+0x280>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	493f      	ldr	r1, [pc, #252]	@ (8008bcc <MIC_Print+0x2b4>)
 8008ace:	1c18      	adds	r0, r3, #0
 8008ad0:	f7f7 fd4c 	bl	800056c <__aeabi_fcmpge>
 8008ad4:	1e03      	subs	r3, r0, #0
 8008ad6:	d00c      	beq.n	8008af2 <MIC_Print+0x1da>
 8008ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8008b98 <MIC_Print+0x280>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	493a      	ldr	r1, [pc, #232]	@ (8008bc8 <MIC_Print+0x2b0>)
 8008ade:	1c18      	adds	r0, r3, #0
 8008ae0:	f7f7 fd26 	bl	8000530 <__aeabi_fcmplt>
 8008ae4:	1e03      	subs	r3, r0, #0
 8008ae6:	d004      	beq.n	8008af2 <MIC_Print+0x1da>
    SetDBLED(false, true, false);
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2101      	movs	r1, #1
 8008aec:	2000      	movs	r0, #0
 8008aee:	f004 fb3d 	bl	800d16c <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008af2:	4b29      	ldr	r3, [pc, #164]	@ (8008b98 <MIC_Print+0x280>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4936      	ldr	r1, [pc, #216]	@ (8008bd0 <MIC_Print+0x2b8>)
 8008af8:	1c18      	adds	r0, r3, #0
 8008afa:	f7f7 fd37 	bl	800056c <__aeabi_fcmpge>
 8008afe:	1e03      	subs	r3, r0, #0
 8008b00:	d00c      	beq.n	8008b1c <MIC_Print+0x204>
 8008b02:	4b25      	ldr	r3, [pc, #148]	@ (8008b98 <MIC_Print+0x280>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4931      	ldr	r1, [pc, #196]	@ (8008bcc <MIC_Print+0x2b4>)
 8008b08:	1c18      	adds	r0, r3, #0
 8008b0a:	f7f7 fd11 	bl	8000530 <__aeabi_fcmplt>
 8008b0e:	1e03      	subs	r3, r0, #0
 8008b10:	d004      	beq.n	8008b1c <MIC_Print+0x204>
    SetDBLED(false, true, true);
 8008b12:	2201      	movs	r2, #1
 8008b14:	2101      	movs	r1, #1
 8008b16:	2000      	movs	r0, #0
 8008b18:	f004 fb28 	bl	800d16c <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8008b98 <MIC_Print+0x280>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	492c      	ldr	r1, [pc, #176]	@ (8008bd4 <MIC_Print+0x2bc>)
 8008b22:	1c18      	adds	r0, r3, #0
 8008b24:	f7f7 fd22 	bl	800056c <__aeabi_fcmpge>
 8008b28:	1e03      	subs	r3, r0, #0
 8008b2a:	d00c      	beq.n	8008b46 <MIC_Print+0x22e>
 8008b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008b98 <MIC_Print+0x280>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4927      	ldr	r1, [pc, #156]	@ (8008bd0 <MIC_Print+0x2b8>)
 8008b32:	1c18      	adds	r0, r3, #0
 8008b34:	f7f7 fcfc 	bl	8000530 <__aeabi_fcmplt>
 8008b38:	1e03      	subs	r3, r0, #0
 8008b3a:	d004      	beq.n	8008b46 <MIC_Print+0x22e>
    SetDBLED(false, false, true);
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	2100      	movs	r1, #0
 8008b40:	2000      	movs	r0, #0
 8008b42:	f004 fb13 	bl	800d16c <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008b46:	4b14      	ldr	r3, [pc, #80]	@ (8008b98 <MIC_Print+0x280>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4923      	ldr	r1, [pc, #140]	@ (8008bd8 <MIC_Print+0x2c0>)
 8008b4c:	1c18      	adds	r0, r3, #0
 8008b4e:	f7f7 fd0d 	bl	800056c <__aeabi_fcmpge>
 8008b52:	1e03      	subs	r3, r0, #0
 8008b54:	d00c      	beq.n	8008b70 <MIC_Print+0x258>
 8008b56:	4b10      	ldr	r3, [pc, #64]	@ (8008b98 <MIC_Print+0x280>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	491e      	ldr	r1, [pc, #120]	@ (8008bd4 <MIC_Print+0x2bc>)
 8008b5c:	1c18      	adds	r0, r3, #0
 8008b5e:	f7f7 fce7 	bl	8000530 <__aeabi_fcmplt>
 8008b62:	1e03      	subs	r3, r0, #0
 8008b64:	d004      	beq.n	8008b70 <MIC_Print+0x258>
    SetDBLED(true, false, true);
 8008b66:	2201      	movs	r2, #1
 8008b68:	2100      	movs	r1, #0
 8008b6a:	2001      	movs	r0, #1
 8008b6c:	f004 fafe 	bl	800d16c <SetDBLED>
  }
  if(dBA < 35){//off
 8008b70:	4b09      	ldr	r3, [pc, #36]	@ (8008b98 <MIC_Print+0x280>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4918      	ldr	r1, [pc, #96]	@ (8008bd8 <MIC_Print+0x2c0>)
 8008b76:	1c18      	adds	r0, r3, #0
 8008b78:	f7f7 fcda 	bl	8000530 <__aeabi_fcmplt>
 8008b7c:	1e03      	subs	r3, r0, #0
 8008b7e:	d100      	bne.n	8008b82 <MIC_Print+0x26a>
    SetDBLED(false, false, false);
  }
}
 8008b80:	e004      	b.n	8008b8c <MIC_Print+0x274>
    SetDBLED(false, false, false);
 8008b82:	2200      	movs	r2, #0
 8008b84:	2100      	movs	r1, #0
 8008b86:	2000      	movs	r0, #0
 8008b88:	f004 faf0 	bl	800d16c <SetDBLED>
}
 8008b8c:	46c0      	nop			@ (mov r8, r8)
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	b004      	add	sp, #16
 8008b92:	bdb0      	pop	{r4, r5, r7, pc}
 8008b94:	20001014 	.word	0x20001014
 8008b98:	20000fe0 	.word	0x20000fe0
 8008b9c:	2000101c 	.word	0x2000101c
 8008ba0:	20000fe4 	.word	0x20000fe4
 8008ba4:	2000101d 	.word	0x2000101d
 8008ba8:	20000084 	.word	0x20000084
 8008bac:	20001010 	.word	0x20001010
 8008bb0:	20001018 	.word	0x20001018
 8008bb4:	2000100c 	.word	0x2000100c
 8008bb8:	080242a8 	.word	0x080242a8
 8008bbc:	20000fd4 	.word	0x20000fd4
 8008bc0:	42b40000 	.word	0x42b40000
 8008bc4:	42a00000 	.word	0x42a00000
 8008bc8:	428c0000 	.word	0x428c0000
 8008bcc:	42700000 	.word	0x42700000
 8008bd0:	42480000 	.word	0x42480000
 8008bd4:	42200000 	.word	0x42200000
 8008bd8:	420c0000 	.word	0x420c0000

08008bdc <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008be2:	4b11      	ldr	r3, [pc, #68]	@ (8008c28 <MIC_TestMeasurementDone+0x4c>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	4a10      	ldr	r2, [pc, #64]	@ (8008c2c <MIC_TestMeasurementDone+0x50>)
 8008bea:	4911      	ldr	r1, [pc, #68]	@ (8008c30 <MIC_TestMeasurementDone+0x54>)
 8008bec:	2002      	movs	r0, #2
 8008bee:	f005 fba1 	bl	800e334 <CreateLine>
  if(DataReady) {
 8008bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c28 <MIC_TestMeasurementDone+0x4c>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d010      	beq.n	8008c1e <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8008bfc:	1dfb      	adds	r3, r7, #7
 8008bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8008c34 <MIC_TestMeasurementDone+0x58>)
 8008c00:	7812      	ldrb	r2, [r2, #0]
 8008c02:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008c04:	4b0b      	ldr	r3, [pc, #44]	@ (8008c34 <MIC_TestMeasurementDone+0x58>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8008c38 <MIC_TestMeasurementDone+0x5c>)
 8008c0c:	4908      	ldr	r1, [pc, #32]	@ (8008c30 <MIC_TestMeasurementDone+0x54>)
 8008c0e:	2002      	movs	r0, #2
 8008c10:	f005 fb90 	bl	800e334 <CreateLine>
    ResetMICIndicator();
 8008c14:	f004 fb88 	bl	800d328 <ResetMICIndicator>
    return Check;
 8008c18:	1dfb      	adds	r3, r7, #7
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	e000      	b.n	8008c20 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	0018      	movs	r0, r3
 8008c22:	46bd      	mov	sp, r7
 8008c24:	b002      	add	sp, #8
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	2000135b 	.word	0x2000135b
 8008c2c:	080242f0 	.word	0x080242f0
 8008c30:	0802431c 	.word	0x0802431c
 8008c34:	2000135c 	.word	0x2000135c
 8008c38:	08024320 	.word	0x08024320

08008c3c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8008c42:	4b78      	ldr	r3, [pc, #480]	@ (8008e24 <Mic_Upkeep+0x1e8>)
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d100      	bne.n	8008c4c <Mic_Upkeep+0x10>
 8008c4a:	e0b8      	b.n	8008dbe <Mic_Upkeep+0x182>
 8008c4c:	dd00      	ble.n	8008c50 <Mic_Upkeep+0x14>
 8008c4e:	e0d3      	b.n	8008df8 <Mic_Upkeep+0x1bc>
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d037      	beq.n	8008cc4 <Mic_Upkeep+0x88>
 8008c54:	dd00      	ble.n	8008c58 <Mic_Upkeep+0x1c>
 8008c56:	e0cf      	b.n	8008df8 <Mic_Upkeep+0x1bc>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <Mic_Upkeep+0x26>
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d014      	beq.n	8008c8a <Mic_Upkeep+0x4e>
 8008c60:	e0ca      	b.n	8008df8 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8008c62:	2001      	movs	r0, #1
 8008c64:	f003 fbc8 	bl	800c3f8 <enableMicrophone>
 8008c68:	0003      	movs	r3, r0
 8008c6a:	001a      	movs	r2, r3
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	4053      	eors	r3, r2
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008c76:	4a6c      	ldr	r2, [pc, #432]	@ (8008e28 <Mic_Upkeep+0x1ec>)
 8008c78:	4b6c      	ldr	r3, [pc, #432]	@ (8008e2c <Mic_Upkeep+0x1f0>)
 8008c7a:	2180      	movs	r1, #128	@ 0x80
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f005 fc11 	bl	800e4a4 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8008c82:	4b68      	ldr	r3, [pc, #416]	@ (8008e24 <Mic_Upkeep+0x1e8>)
 8008c84:	2201      	movs	r2, #1
 8008c86:	701a      	strb	r2, [r3, #0]
    break;
 8008c88:	e0c5      	b.n	8008e16 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008c8a:	f003 fb91 	bl	800c3b0 <micSettlingComplete>
 8008c8e:	1e03      	subs	r3, r0, #0
 8008c90:	d105      	bne.n	8008c9e <Mic_Upkeep+0x62>
 8008c92:	4b67      	ldr	r3, [pc, #412]	@ (8008e30 <Mic_Upkeep+0x1f4>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d100      	bne.n	8008c9e <Mic_Upkeep+0x62>
 8008c9c:	e0b6      	b.n	8008e0c <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008c9e:	f003 fc15 	bl	800c4cc <startSPLcalculation>
 8008ca2:	0003      	movs	r3, r0
 8008ca4:	001a      	movs	r2, r3
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	4053      	eors	r3, r2
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d005      	beq.n	8008cbc <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008cb0:	4a5d      	ldr	r2, [pc, #372]	@ (8008e28 <Mic_Upkeep+0x1ec>)
 8008cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8008e2c <Mic_Upkeep+0x1f0>)
 8008cb4:	2189      	movs	r1, #137	@ 0x89
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	f005 fbf4 	bl	800e4a4 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008cbc:	4b59      	ldr	r3, [pc, #356]	@ (8008e24 <Mic_Upkeep+0x1e8>)
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008cc2:	e0a3      	b.n	8008e0c <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008cc4:	4b5b      	ldr	r3, [pc, #364]	@ (8008e34 <Mic_Upkeep+0x1f8>)
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	2101      	movs	r1, #1
 8008cca:	0018      	movs	r0, r3
 8008ccc:	f003 fa52 	bl	800c174 <getSoundData>
 8008cd0:	1e03      	subs	r3, r0, #0
 8008cd2:	d100      	bne.n	8008cd6 <Mic_Upkeep+0x9a>
 8008cd4:	e09c      	b.n	8008e10 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8008cd6:	f003 fb4b 	bl	800c370 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008cda:	4b56      	ldr	r3, [pc, #344]	@ (8008e34 <Mic_Upkeep+0x1f8>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	001a      	movs	r2, r3
 8008ce0:	4b54      	ldr	r3, [pc, #336]	@ (8008e34 <Mic_Upkeep+0x1f8>)
 8008ce2:	785b      	ldrb	r3, [r3, #1]
 8008ce4:	4954      	ldr	r1, [pc, #336]	@ (8008e38 <Mic_Upkeep+0x1fc>)
 8008ce6:	0038      	movs	r0, r7
 8008ce8:	f017 f88e 	bl	801fe08 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8008cec:	4b51      	ldr	r3, [pc, #324]	@ (8008e34 <Mic_Upkeep+0x1f8>)
 8008cee:	89db      	ldrh	r3, [r3, #14]
 8008cf0:	001a      	movs	r2, r3
 8008cf2:	4b50      	ldr	r3, [pc, #320]	@ (8008e34 <Mic_Upkeep+0x1f8>)
 8008cf4:	7c1b      	ldrb	r3, [r3, #16]
 8008cf6:	4951      	ldr	r1, [pc, #324]	@ (8008e3c <Mic_Upkeep+0x200>)
 8008cf8:	4851      	ldr	r0, [pc, #324]	@ (8008e40 <Mic_Upkeep+0x204>)
 8008cfa:	f017 f885 	bl	801fe08 <siprintf>
      dBValue = atof(dBbuffer);
 8008cfe:	003b      	movs	r3, r7
 8008d00:	0018      	movs	r0, r3
 8008d02:	f015 fc31 	bl	801e568 <atof>
 8008d06:	0002      	movs	r2, r0
 8008d08:	000b      	movs	r3, r1
 8008d0a:	0010      	movs	r0, r2
 8008d0c:	0019      	movs	r1, r3
 8008d0e:	f7fa fbf1 	bl	80034f4 <__aeabi_d2f>
 8008d12:	1c02      	adds	r2, r0, #0
 8008d14:	4b4b      	ldr	r3, [pc, #300]	@ (8008e44 <Mic_Upkeep+0x208>)
 8008d16:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008d18:	4b4a      	ldr	r3, [pc, #296]	@ (8008e44 <Mic_Upkeep+0x208>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	494a      	ldr	r1, [pc, #296]	@ (8008e48 <Mic_Upkeep+0x20c>)
 8008d1e:	1c18      	adds	r0, r3, #0
 8008d20:	f7f8 f93e 	bl	8000fa0 <__aeabi_fmul>
 8008d24:	1c03      	adds	r3, r0, #0
 8008d26:	1c18      	adds	r0, r3, #0
 8008d28:	f7fa fb9c 	bl	8003464 <__aeabi_f2d>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4b47      	ldr	r3, [pc, #284]	@ (8008e4c <Mic_Upkeep+0x210>)
 8008d30:	f7f8 fcdc 	bl	80016ec <__aeabi_dadd>
 8008d34:	0002      	movs	r2, r0
 8008d36:	000b      	movs	r3, r1
 8008d38:	0010      	movs	r0, r2
 8008d3a:	0019      	movs	r1, r3
 8008d3c:	f7fa fb04 	bl	8003348 <__aeabi_d2iz>
 8008d40:	0003      	movs	r3, r0
 8008d42:	0018      	movs	r0, r3
 8008d44:	f7fa fb3c 	bl	80033c0 <__aeabi_i2d>
 8008d48:	2200      	movs	r2, #0
 8008d4a:	4b41      	ldr	r3, [pc, #260]	@ (8008e50 <Mic_Upkeep+0x214>)
 8008d4c:	f7f9 f832 	bl	8001db4 <__aeabi_ddiv>
 8008d50:	0002      	movs	r2, r0
 8008d52:	000b      	movs	r3, r1
 8008d54:	0010      	movs	r0, r2
 8008d56:	0019      	movs	r1, r3
 8008d58:	f7fa fbcc 	bl	80034f4 <__aeabi_d2f>
 8008d5c:	1c02      	adds	r2, r0, #0
 8008d5e:	4b39      	ldr	r3, [pc, #228]	@ (8008e44 <Mic_Upkeep+0x208>)
 8008d60:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008d62:	f7ff fdd9 	bl	8008918 <MIC_Print>
      if (!startSPLcalculation()) {
 8008d66:	f003 fbb1 	bl	800c4cc <startSPLcalculation>
 8008d6a:	0003      	movs	r3, r0
 8008d6c:	001a      	movs	r2, r3
 8008d6e:	2301      	movs	r3, #1
 8008d70:	4053      	eors	r3, r2
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008d78:	4a2b      	ldr	r2, [pc, #172]	@ (8008e28 <Mic_Upkeep+0x1ec>)
 8008d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8008e2c <Mic_Upkeep+0x1f0>)
 8008d7c:	2199      	movs	r1, #153	@ 0x99
 8008d7e:	0018      	movs	r0, r3
 8008d80:	f005 fb90 	bl	800e4a4 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008d84:	2000      	movs	r0, #0
 8008d86:	f003 fb37 	bl	800c3f8 <enableMicrophone>
 8008d8a:	0003      	movs	r3, r0
 8008d8c:	001a      	movs	r2, r3
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4053      	eors	r3, r2
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008d98:	4a23      	ldr	r2, [pc, #140]	@ (8008e28 <Mic_Upkeep+0x1ec>)
 8008d9a:	4b24      	ldr	r3, [pc, #144]	@ (8008e2c <Mic_Upkeep+0x1f0>)
 8008d9c:	219c      	movs	r1, #156	@ 0x9c
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f005 fb80 	bl	800e4a4 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008da4:	f005 ff1c 	bl	800ebe0 <HAL_GetTick>
 8008da8:	0003      	movs	r3, r0
 8008daa:	4a2a      	ldr	r2, [pc, #168]	@ (8008e54 <Mic_Upkeep+0x218>)
 8008dac:	189a      	adds	r2, r3, r2
 8008dae:	4b2a      	ldr	r3, [pc, #168]	@ (8008e58 <Mic_Upkeep+0x21c>)
 8008db0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008db2:	4b1c      	ldr	r3, [pc, #112]	@ (8008e24 <Mic_Upkeep+0x1e8>)
 8008db4:	2203      	movs	r2, #3
 8008db6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008db8:	f004 fab6 	bl	800d328 <ResetMICIndicator>
    }
    break;
 8008dbc:	e028      	b.n	8008e10 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008dbe:	4b26      	ldr	r3, [pc, #152]	@ (8008e58 <Mic_Upkeep+0x21c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	f005 fa60 	bl	800e288 <TimestampIsReached>
 8008dc8:	1e03      	subs	r3, r0, #0
 8008dca:	d023      	beq.n	8008e14 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008dcc:	2001      	movs	r0, #1
 8008dce:	f003 fb13 	bl	800c3f8 <enableMicrophone>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	001a      	movs	r2, r3
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4053      	eors	r3, r2
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d005      	beq.n	8008dec <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008de0:	4a11      	ldr	r2, [pc, #68]	@ (8008e28 <Mic_Upkeep+0x1ec>)
 8008de2:	4b12      	ldr	r3, [pc, #72]	@ (8008e2c <Mic_Upkeep+0x1f0>)
 8008de4:	21a7      	movs	r1, #167	@ 0xa7
 8008de6:	0018      	movs	r0, r3
 8008de8:	f005 fb5c 	bl	800e4a4 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008dec:	4b0d      	ldr	r3, [pc, #52]	@ (8008e24 <Mic_Upkeep+0x1e8>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008df2:	f004 fa67 	bl	800d2c4 <SetMICIndicator>
    }
    break;
 8008df6:	e00d      	b.n	8008e14 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008df8:	4a18      	ldr	r2, [pc, #96]	@ (8008e5c <Mic_Upkeep+0x220>)
 8008dfa:	4b19      	ldr	r3, [pc, #100]	@ (8008e60 <Mic_Upkeep+0x224>)
 8008dfc:	0019      	movs	r1, r3
 8008dfe:	2003      	movs	r0, #3
 8008e00:	f005 fa98 	bl	800e334 <CreateLine>
    MicState = MIC_STATE_INIT;
 8008e04:	4b07      	ldr	r3, [pc, #28]	@ (8008e24 <Mic_Upkeep+0x1e8>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
    break;
 8008e0a:	e004      	b.n	8008e16 <Mic_Upkeep+0x1da>
    break;
 8008e0c:	46c0      	nop			@ (mov r8, r8)
 8008e0e:	e002      	b.n	8008e16 <Mic_Upkeep+0x1da>
    break;
 8008e10:	46c0      	nop			@ (mov r8, r8)
 8008e12:	e000      	b.n	8008e16 <Mic_Upkeep+0x1da>
    break;
 8008e14:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008e16:	4b03      	ldr	r3, [pc, #12]	@ (8008e24 <Mic_Upkeep+0x1e8>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
}
 8008e1a:	0018      	movs	r0, r3
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	b002      	add	sp, #8
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	46c0      	nop			@ (mov r8, r8)
 8008e24:	20001036 	.word	0x20001036
 8008e28:	08024338 	.word	0x08024338
 8008e2c:	080253a8 	.word	0x080253a8
 8008e30:	2000135b 	.word	0x2000135b
 8008e34:	20001024 	.word	0x20001024
 8008e38:	08024354 	.word	0x08024354
 8008e3c:	0802435c 	.word	0x0802435c
 8008e40:	20000fd4 	.word	0x20000fd4
 8008e44:	20001014 	.word	0x20001014
 8008e48:	42c80000 	.word	0x42c80000
 8008e4c:	3fe00000 	.word	0x3fe00000
 8008e50:	40590000 	.word	0x40590000
 8008e54:	000002f3 	.word	0x000002f3
 8008e58:	20001020 	.word	0x20001020
 8008e5c:	08024364 	.word	0x08024364
 8008e60:	08024384 	.word	0x08024384

08008e64 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008e64:	b40f      	push	{r0, r1, r2, r3}
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008e6c:	2314      	movs	r3, #20
 8008e6e:	18fb      	adds	r3, r7, r3
 8008e70:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	2180      	movs	r1, #128	@ 0x80
 8008e78:	0089      	lsls	r1, r1, #2
 8008e7a:	480a      	ldr	r0, [pc, #40]	@ (8008ea4 <print+0x40>)
 8008e7c:	f017 f85c 	bl	801ff38 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008e80:	4b08      	ldr	r3, [pc, #32]	@ (8008ea4 <print+0x40>)
 8008e82:	0018      	movs	r0, r3
 8008e84:	f7f7 f972 	bl	800016c <strlen>
 8008e88:	0003      	movs	r3, r0
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ea4 <print+0x40>)
 8008e8e:	0011      	movs	r1, r2
 8008e90:	0018      	movs	r0, r3
 8008e92:	f7ff f93d 	bl	8008110 <printString>
}
 8008e96:	46c0      	nop			@ (mov r8, r8)
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	b002      	add	sp, #8
 8008e9c:	bc80      	pop	{r7}
 8008e9e:	bc08      	pop	{r3}
 8008ea0:	b004      	add	sp, #16
 8008ea2:	4718      	bx	r3
 8008ea4:	20001038 	.word	0x20001038

08008ea8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008eae:	1d3b      	adds	r3, r7, #4
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	2314      	movs	r3, #20
 8008eb4:	001a      	movs	r2, r3
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	f017 f8ea 	bl	8020090 <memset>
  RTC_DateTypeDef sDate = {0};
 8008ebc:	003b      	movs	r3, r7
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8008f80 <MX_RTC_Init+0xd8>)
 8008ec6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008ece:	4b2b      	ldr	r3, [pc, #172]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ed0:	227f      	movs	r2, #127	@ 0x7f
 8008ed2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008ed4:	4b29      	ldr	r3, [pc, #164]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ed6:	22ff      	movs	r2, #255	@ 0xff
 8008ed8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008eda:	4b28      	ldr	r3, [pc, #160]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008ee0:	4b26      	ldr	r3, [pc, #152]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008ee6:	4b25      	ldr	r3, [pc, #148]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008eec:	4b23      	ldr	r3, [pc, #140]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008ef2:	4b22      	ldr	r3, [pc, #136]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	f00c fef7 	bl	8015ce8 <HAL_RTC_Init>
 8008efa:	1e03      	subs	r3, r0, #0
 8008efc:	d001      	beq.n	8008f02 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008efe:	f7ff f9d3 	bl	80082a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008f02:	1d3b      	adds	r3, r7, #4
 8008f04:	220d      	movs	r2, #13
 8008f06:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008f08:	1d3b      	adds	r3, r7, #4
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008f0e:	1d3b      	adds	r3, r7, #4
 8008f10:	2200      	movs	r2, #0
 8008f12:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008f14:	1d3b      	adds	r3, r7, #4
 8008f16:	2200      	movs	r2, #0
 8008f18:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008f1a:	1d3b      	adds	r3, r7, #4
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008f20:	1d39      	adds	r1, r7, #4
 8008f22:	4b16      	ldr	r3, [pc, #88]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	0018      	movs	r0, r3
 8008f28:	f00c ff7a 	bl	8015e20 <HAL_RTC_SetTime>
 8008f2c:	1e03      	subs	r3, r0, #0
 8008f2e:	d001      	beq.n	8008f34 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008f30:	f7ff f9ba 	bl	80082a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008f34:	003b      	movs	r3, r7
 8008f36:	2206      	movs	r2, #6
 8008f38:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008f3a:	003b      	movs	r3, r7
 8008f3c:	2211      	movs	r2, #17
 8008f3e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008f40:	003b      	movs	r3, r7
 8008f42:	2217      	movs	r2, #23
 8008f44:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008f46:	003b      	movs	r3, r7
 8008f48:	2218      	movs	r2, #24
 8008f4a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008f4c:	0039      	movs	r1, r7
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	0018      	movs	r0, r3
 8008f54:	f00d f86c 	bl	8016030 <HAL_RTC_SetDate>
 8008f58:	1e03      	subs	r3, r0, #0
 8008f5a:	d001      	beq.n	8008f60 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008f5c:	f7ff f9a4 	bl	80082a8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008f60:	4b06      	ldr	r3, [pc, #24]	@ (8008f7c <MX_RTC_Init+0xd4>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	2100      	movs	r1, #0
 8008f66:	0018      	movs	r0, r3
 8008f68:	f00d fa1c 	bl	80163a4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008f6c:	1e03      	subs	r3, r0, #0
 8008f6e:	d001      	beq.n	8008f74 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008f70:	f7ff f99a 	bl	80082a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008f74:	46c0      	nop			@ (mov r8, r8)
 8008f76:	46bd      	mov	sp, r7
 8008f78:	b006      	add	sp, #24
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20001238 	.word	0x20001238
 8008f80:	40002800 	.word	0x40002800

08008f84 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a0a      	ldr	r2, [pc, #40]	@ (8008fbc <HAL_RTC_MspInit+0x38>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d10e      	bne.n	8008fb4 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008f96:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc0 <HAL_RTC_MspInit+0x3c>)
 8008f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f9a:	4b09      	ldr	r3, [pc, #36]	@ (8008fc0 <HAL_RTC_MspInit+0x3c>)
 8008f9c:	2180      	movs	r1, #128	@ 0x80
 8008f9e:	02c9      	lsls	r1, r1, #11
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	2002      	movs	r0, #2
 8008faa:	f006 fabd 	bl	800f528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008fae:	2002      	movs	r0, #2
 8008fb0:	f006 facf 	bl	800f552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008fb4:	46c0      	nop			@ (mov r8, r8)
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	b002      	add	sp, #8
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40002800 	.word	0x40002800
 8008fc0:	40021000 	.word	0x40021000

08008fc4 <sen5x_Get_sen5x_enable_state>:
static uint16_t s5xnoximax;
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 8008fc8:	4b02      	ldr	r3, [pc, #8]	@ (8008fd4 <sen5x_Get_sen5x_enable_state+0x10>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
}
 8008fcc:	0018      	movs	r0, r3
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	46c0      	nop			@ (mov r8, r8)
 8008fd4:	2000125f 	.word	0x2000125f

08008fd8 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008fe0:	f005 fdfe 	bl	800ebe0 <HAL_GetTick>
 8008fe4:	0002      	movs	r2, r0
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	18d2      	adds	r2, r2, r3
 8008fea:	4b03      	ldr	r3, [pc, #12]	@ (8008ff8 <setsen5xReadTimer+0x20>)
 8008fec:	601a      	str	r2, [r3, #0]
}
 8008fee:	46c0      	nop			@ (mov r8, r8)
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	b002      	add	sp, #8
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	46c0      	nop			@ (mov r8, r8)
 8008ff8:	20001274 	.word	0x20001274

08008ffc <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	0002      	movs	r2, r0
 8009004:	1dfb      	adds	r3, r7, #7
 8009006:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 8009008:	4b03      	ldr	r3, [pc, #12]	@ (8009018 <setsen5xSamplecounter+0x1c>)
 800900a:	2200      	movs	r2, #0
 800900c:	701a      	strb	r2, [r3, #0]
}
 800900e:	46c0      	nop			@ (mov r8, r8)
 8009010:	46bd      	mov	sp, r7
 8009012:	b002      	add	sp, #8
 8009014:	bd80      	pop	{r7, pc}
 8009016:	46c0      	nop			@ (mov r8, r8)
 8009018:	20001268 	.word	0x20001268

0800901c <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8009024:	f7ff f9ae 	bl	8008384 <IsPMSensorEnabled>
 8009028:	1e03      	subs	r3, r0, #0
 800902a:	d02c      	beq.n	8009086 <sen5x_enable+0x6a>
    Debug("sen5x measurement is enabled");
 800902c:	4a1d      	ldr	r2, [pc, #116]	@ (80090a4 <sen5x_enable+0x88>)
 800902e:	4b1e      	ldr	r3, [pc, #120]	@ (80090a8 <sen5x_enable+0x8c>)
 8009030:	0019      	movs	r1, r3
 8009032:	2003      	movs	r0, #3
 8009034:	f005 f97e 	bl	800e334 <CreateLine>
    sen5x_Enable = !sen5x_Enable;
 8009038:	4b1c      	ldr	r3, [pc, #112]	@ (80090ac <sen5x_enable+0x90>)
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	1e5a      	subs	r2, r3, #1
 800903e:	4193      	sbcs	r3, r2
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2201      	movs	r2, #1
 8009044:	4053      	eors	r3, r2
 8009046:	b2db      	uxtb	r3, r3
 8009048:	1c1a      	adds	r2, r3, #0
 800904a:	2301      	movs	r3, #1
 800904c:	4013      	ands	r3, r2
 800904e:	b2da      	uxtb	r2, r3
 8009050:	4b16      	ldr	r3, [pc, #88]	@ (80090ac <sen5x_enable+0x90>)
 8009052:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8009054:	4b15      	ldr	r3, [pc, #84]	@ (80090ac <sen5x_enable+0x90>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <sen5x_enable+0x48>
      setsen5xReadTimer(0);
 800905c:	2000      	movs	r0, #0
 800905e:	f7ff ffbb 	bl	8008fd8 <setsen5xReadTimer>
 8009062:	e016      	b.n	8009092 <sen5x_enable+0x76>
    }
    else {
      Info("This cycle the sen5x is disabled");
 8009064:	4a12      	ldr	r2, [pc, #72]	@ (80090b0 <sen5x_enable+0x94>)
 8009066:	4b13      	ldr	r3, [pc, #76]	@ (80090b4 <sen5x_enable+0x98>)
 8009068:	0019      	movs	r1, r3
 800906a:	2002      	movs	r0, #2
 800906c:	f005 f962 	bl	800e334 <CreateLine>
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 8009070:	f005 fdb6 	bl	800ebe0 <HAL_GetTick>
 8009074:	0002      	movs	r2, r0
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2164      	movs	r1, #100	@ 0x64
 800907a:	434b      	muls	r3, r1
 800907c:	18d3      	adds	r3, r2, r3
 800907e:	0018      	movs	r0, r3
 8009080:	f7ff ffaa 	bl	8008fd8 <setsen5xReadTimer>
 8009084:	e005      	b.n	8009092 <sen5x_enable+0x76>
    }
  }
  else {
    Info("sen5x measurement is disabled");
 8009086:	4a0c      	ldr	r2, [pc, #48]	@ (80090b8 <sen5x_enable+0x9c>)
 8009088:	4b0a      	ldr	r3, [pc, #40]	@ (80090b4 <sen5x_enable+0x98>)
 800908a:	0019      	movs	r1, r3
 800908c:	2002      	movs	r0, #2
 800908e:	f005 f951 	bl	800e334 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8009092:	4b0a      	ldr	r3, [pc, #40]	@ (80090bc <sen5x_enable+0xa0>)
 8009094:	2201      	movs	r2, #1
 8009096:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8009098:	4b04      	ldr	r3, [pc, #16]	@ (80090ac <sen5x_enable+0x90>)
 800909a:	781b      	ldrb	r3, [r3, #0]
}
 800909c:	0018      	movs	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	b002      	add	sp, #8
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	08024388 	.word	0x08024388
 80090a8:	080243a8 	.word	0x080243a8
 80090ac:	2000125f 	.word	0x2000125f
 80090b0:	080243ac 	.word	0x080243ac
 80090b4:	080243d0 	.word	0x080243d0
 80090b8:	080243d4 	.word	0x080243d4
 80090bc:	20000085 	.word	0x20000085

080090c0 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 80090c0:	b580      	push	{r7, lr}
 80090c2:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 80090c4:	4a0a      	ldr	r2, [pc, #40]	@ (80090f0 <sen5x_Power_On+0x30>)
 80090c6:	4b0b      	ldr	r3, [pc, #44]	@ (80090f4 <sen5x_Power_On+0x34>)
 80090c8:	0019      	movs	r1, r3
 80090ca:	2003      	movs	r0, #3
 80090cc:	f005 f932 	bl	800e334 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 80090d0:	2380      	movs	r3, #128	@ 0x80
 80090d2:	015b      	lsls	r3, r3, #5
 80090d4:	4808      	ldr	r0, [pc, #32]	@ (80090f8 <sen5x_Power_On+0x38>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	0019      	movs	r1, r3
 80090da:	f007 f812 	bl	8010102 <HAL_GPIO_WritePin>
  sen5x_On = true;
 80090de:	4b07      	ldr	r3, [pc, #28]	@ (80090fc <sen5x_Power_On+0x3c>)
 80090e0:	2201      	movs	r2, #1
 80090e2:	701a      	strb	r2, [r3, #0]
  HAL_Delay(55);
 80090e4:	2037      	movs	r0, #55	@ 0x37
 80090e6:	f005 fd85 	bl	800ebf4 <HAL_Delay>
}
 80090ea:	46c0      	nop			@ (mov r8, r8)
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	080243f4 	.word	0x080243f4
 80090f4:	080243a8 	.word	0x080243a8
 80090f8:	50000800 	.word	0x50000800
 80090fc:	2000125d 	.word	0x2000125d

08009100 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8009100:	b580      	push	{r7, lr}
 8009102:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 8009104:	4b0e      	ldr	r3, [pc, #56]	@ (8009140 <sen5x_Power_Off+0x40>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d006      	beq.n	800911a <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800910c:	4a0d      	ldr	r2, [pc, #52]	@ (8009144 <sen5x_Power_Off+0x44>)
 800910e:	4b0e      	ldr	r3, [pc, #56]	@ (8009148 <sen5x_Power_Off+0x48>)
 8009110:	0019      	movs	r1, r3
 8009112:	2003      	movs	r0, #3
 8009114:	f005 f90e 	bl	800e334 <CreateLine>
  else {
    Debug("executing sen5x_Power_Off");
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
    sen5x_On = false;
  }
}
 8009118:	e00f      	b.n	800913a <sen5x_Power_Off+0x3a>
    Debug("executing sen5x_Power_Off");
 800911a:	4a0c      	ldr	r2, [pc, #48]	@ (800914c <sen5x_Power_Off+0x4c>)
 800911c:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <sen5x_Power_Off+0x48>)
 800911e:	0019      	movs	r1, r3
 8009120:	2003      	movs	r0, #3
 8009122:	f005 f907 	bl	800e334 <CreateLine>
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8009126:	2380      	movs	r3, #128	@ 0x80
 8009128:	015b      	lsls	r3, r3, #5
 800912a:	4809      	ldr	r0, [pc, #36]	@ (8009150 <sen5x_Power_Off+0x50>)
 800912c:	2200      	movs	r2, #0
 800912e:	0019      	movs	r1, r3
 8009130:	f006 ffe7 	bl	8010102 <HAL_GPIO_WritePin>
    sen5x_On = false;
 8009134:	4b07      	ldr	r3, [pc, #28]	@ (8009154 <sen5x_Power_Off+0x54>)
 8009136:	2200      	movs	r2, #0
 8009138:	701a      	strb	r2, [r3, #0]
}
 800913a:	46c0      	nop			@ (mov r8, r8)
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	2000125e 	.word	0x2000125e
 8009144:	08024410 	.word	0x08024410
 8009148:	080243a8 	.word	0x080243a8
 800914c:	08024440 	.word	0x08024440
 8009150:	50000800 	.word	0x50000800
 8009154:	2000125d 	.word	0x2000125d

08009158 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8009158:	b580      	push	{r7, lr}
 800915a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800915c:	4b02      	ldr	r3, [pc, #8]	@ (8009168 <reset_fanCleaningDone+0x10>)
 800915e:	2200      	movs	r2, #0
 8009160:	701a      	strb	r2, [r3, #0]
}
 8009162:	46c0      	nop			@ (mov r8, r8)
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	2000125c 	.word	0x2000125c

0800916c <probe_sen5x>:

int16_t probe_sen5x(void) {
 800916c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800916e:	b093      	sub	sp, #76	@ 0x4c
 8009170:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 8009172:	2436      	movs	r4, #54	@ 0x36
 8009174:	193b      	adds	r3, r7, r4
 8009176:	2200      	movs	r2, #0
 8009178:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800917a:	2335      	movs	r3, #53	@ 0x35
 800917c:	18fb      	adds	r3, r7, r3
 800917e:	2220      	movs	r2, #32
 8009180:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 8009182:	2334      	movs	r3, #52	@ 0x34
 8009184:	18fb      	adds	r3, r7, r3
 8009186:	2220      	movs	r2, #32
 8009188:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800918a:	f7ff ff99 	bl	80090c0 <sen5x_Power_On>
  error = sen5x_device_reset();
 800918e:	0025      	movs	r5, r4
 8009190:	193c      	adds	r4, r7, r4
 8009192:	f001 f903 	bl	800a39c <sen5x_device_reset>
 8009196:	0003      	movs	r3, r0
 8009198:	8023      	strh	r3, [r4, #0]
  if (error) {
 800919a:	002c      	movs	r4, r5
 800919c:	193b      	adds	r3, r7, r4
 800919e:	2200      	movs	r2, #0
 80091a0:	5e9b      	ldrsh	r3, [r3, r2]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00b      	beq.n	80091be <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 80091a6:	193b      	adds	r3, r7, r4
 80091a8:	2200      	movs	r2, #0
 80091aa:	5e9b      	ldrsh	r3, [r3, r2]
 80091ac:	4a6c      	ldr	r2, [pc, #432]	@ (8009360 <probe_sen5x+0x1f4>)
 80091ae:	496d      	ldr	r1, [pc, #436]	@ (8009364 <probe_sen5x+0x1f8>)
 80091b0:	2001      	movs	r0, #1
 80091b2:	f005 f8bf 	bl	800e334 <CreateLine>
      return error;
 80091b6:	193b      	adds	r3, r7, r4
 80091b8:	2200      	movs	r2, #0
 80091ba:	5e9b      	ldrsh	r3, [r3, r2]
 80091bc:	e0cc      	b.n	8009358 <probe_sen5x+0x1ec>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 80091be:	2536      	movs	r5, #54	@ 0x36
 80091c0:	197c      	adds	r4, r7, r5
 80091c2:	2335      	movs	r3, #53	@ 0x35
 80091c4:	18fb      	adds	r3, r7, r3
 80091c6:	781a      	ldrb	r2, [r3, #0]
 80091c8:	230c      	movs	r3, #12
 80091ca:	18fb      	adds	r3, r7, r3
 80091cc:	0011      	movs	r1, r2
 80091ce:	0018      	movs	r0, r3
 80091d0:	f000 ffd0 	bl	800a174 <sen5x_get_serial_number>
 80091d4:	0003      	movs	r3, r0
 80091d6:	8023      	strh	r3, [r4, #0]
  if (error) {
 80091d8:	197b      	adds	r3, r7, r5
 80091da:	2200      	movs	r2, #0
 80091dc:	5e9b      	ldrsh	r3, [r3, r2]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00b      	beq.n	80091fa <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 80091e2:	197b      	adds	r3, r7, r5
 80091e4:	2200      	movs	r2, #0
 80091e6:	5e9a      	ldrsh	r2, [r3, r2]
 80091e8:	4b5f      	ldr	r3, [pc, #380]	@ (8009368 <probe_sen5x+0x1fc>)
 80091ea:	0011      	movs	r1, r2
 80091ec:	0018      	movs	r0, r3
 80091ee:	f016 fd9b 	bl	801fd28 <iprintf>
      return error;
 80091f2:	197b      	adds	r3, r7, r5
 80091f4:	2200      	movs	r2, #0
 80091f6:	5e9b      	ldrsh	r3, [r3, r2]
 80091f8:	e0ae      	b.n	8009358 <probe_sen5x+0x1ec>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 80091fa:	230c      	movs	r3, #12
 80091fc:	18fa      	adds	r2, r7, r3
 80091fe:	4b5b      	ldr	r3, [pc, #364]	@ (800936c <probe_sen5x+0x200>)
 8009200:	0011      	movs	r1, r2
 8009202:	0018      	movs	r0, r3
 8009204:	f016 fd90 	bl	801fd28 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8009208:	2536      	movs	r5, #54	@ 0x36
 800920a:	197c      	adds	r4, r7, r5
 800920c:	2334      	movs	r3, #52	@ 0x34
 800920e:	18fb      	adds	r3, r7, r3
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	4b57      	ldr	r3, [pc, #348]	@ (8009370 <probe_sen5x+0x204>)
 8009214:	0011      	movs	r1, r2
 8009216:	0018      	movs	r0, r3
 8009218:	f000 ff56 	bl	800a0c8 <sen5x_get_product_name>
 800921c:	0003      	movs	r3, r0
 800921e:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009220:	197b      	adds	r3, r7, r5
 8009222:	2200      	movs	r2, #0
 8009224:	5e9b      	ldrsh	r3, [r3, r2]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00b      	beq.n	8009242 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800922a:	197b      	adds	r3, r7, r5
 800922c:	2200      	movs	r2, #0
 800922e:	5e9a      	ldrsh	r2, [r3, r2]
 8009230:	4b50      	ldr	r3, [pc, #320]	@ (8009374 <probe_sen5x+0x208>)
 8009232:	0011      	movs	r1, r2
 8009234:	0018      	movs	r0, r3
 8009236:	f016 fd77 	bl	801fd28 <iprintf>
      return error;
 800923a:	197b      	adds	r3, r7, r5
 800923c:	2200      	movs	r2, #0
 800923e:	5e9b      	ldrsh	r3, [r3, r2]
 8009240:	e08a      	b.n	8009358 <probe_sen5x+0x1ec>
  } else {
      printf("Product name: %s\r\n", product_name);
 8009242:	4a4b      	ldr	r2, [pc, #300]	@ (8009370 <probe_sen5x+0x204>)
 8009244:	4b4c      	ldr	r3, [pc, #304]	@ (8009378 <probe_sen5x+0x20c>)
 8009246:	0011      	movs	r1, r2
 8009248:	0018      	movs	r0, r3
 800924a:	f016 fd6d 	bl	801fd28 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800924e:	2636      	movs	r6, #54	@ 0x36
 8009250:	19bc      	adds	r4, r7, r6
 8009252:	2308      	movs	r3, #8
 8009254:	18fd      	adds	r5, r7, r3
 8009256:	2309      	movs	r3, #9
 8009258:	18fa      	adds	r2, r7, r3
 800925a:	230a      	movs	r3, #10
 800925c:	18f9      	adds	r1, r7, r3
 800925e:	230b      	movs	r3, #11
 8009260:	18f8      	adds	r0, r7, r3
 8009262:	1d7b      	adds	r3, r7, #5
 8009264:	9302      	str	r3, [sp, #8]
 8009266:	1dbb      	adds	r3, r7, #6
 8009268:	9301      	str	r3, [sp, #4]
 800926a:	1dfb      	adds	r3, r7, #7
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	002b      	movs	r3, r5
 8009270:	f000 ffd6 	bl	800a220 <sen5x_get_version>
 8009274:	0003      	movs	r3, r0
 8009276:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8009278:	19bb      	adds	r3, r7, r6
 800927a:	2200      	movs	r2, #0
 800927c:	5e9b      	ldrsh	r3, [r3, r2]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00b      	beq.n	800929a <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8009282:	19bb      	adds	r3, r7, r6
 8009284:	2200      	movs	r2, #0
 8009286:	5e9a      	ldrsh	r2, [r3, r2]
 8009288:	4b3c      	ldr	r3, [pc, #240]	@ (800937c <probe_sen5x+0x210>)
 800928a:	0011      	movs	r1, r2
 800928c:	0018      	movs	r0, r3
 800928e:	f016 fd4b 	bl	801fd28 <iprintf>
      return error;
 8009292:	19bb      	adds	r3, r7, r6
 8009294:	2200      	movs	r2, #0
 8009296:	5e9b      	ldrsh	r3, [r3, r2]
 8009298:	e05e      	b.n	8009358 <probe_sen5x+0x1ec>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800929a:	230b      	movs	r3, #11
 800929c:	18fb      	adds	r3, r7, r3
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	0019      	movs	r1, r3
 80092a2:	230a      	movs	r3, #10
 80092a4:	18fb      	adds	r3, r7, r3
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	001a      	movs	r2, r3
 80092aa:	2308      	movs	r3, #8
 80092ac:	18fb      	adds	r3, r7, r3
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	001c      	movs	r4, r3
 80092b2:	1dfb      	adds	r3, r7, #7
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	4832      	ldr	r0, [pc, #200]	@ (8009380 <probe_sen5x+0x214>)
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	0023      	movs	r3, r4
 80092bc:	f016 fd34 	bl	801fd28 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 80092c0:	2300      	movs	r3, #0
 80092c2:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 80092c4:	262e      	movs	r6, #46	@ 0x2e
 80092c6:	19bb      	adds	r3, r7, r6
 80092c8:	2200      	movs	r2, #0
 80092ca:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 80092cc:	232c      	movs	r3, #44	@ 0x2c
 80092ce:	18fb      	adds	r3, r7, r3
 80092d0:	2200      	movs	r2, #0
 80092d2:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 80092d4:	492b      	ldr	r1, [pc, #172]	@ (8009384 <probe_sen5x+0x218>)
 80092d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092d8:	f7f7 fe62 	bl	8000fa0 <__aeabi_fmul>
 80092dc:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 80092de:	1c18      	adds	r0, r3, #0
 80092e0:	f7f8 f956 	bl	8001590 <__aeabi_f2iz>
 80092e4:	0003      	movs	r3, r0
 80092e6:	b218      	sxth	r0, r3
 80092e8:	2536      	movs	r5, #54	@ 0x36
 80092ea:	197c      	adds	r4, r7, r5
 80092ec:	232c      	movs	r3, #44	@ 0x2c
 80092ee:	18fb      	adds	r3, r7, r3
 80092f0:	881a      	ldrh	r2, [r3, #0]
 80092f2:	19bb      	adds	r3, r7, r6
 80092f4:	2100      	movs	r1, #0
 80092f6:	5e5b      	ldrsh	r3, [r3, r1]
 80092f8:	0019      	movs	r1, r3
 80092fa:	f000 fe81 	bl	800a000 <sen5x_set_temperature_offset_parameters>
 80092fe:	0003      	movs	r3, r0
 8009300:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009302:	197b      	adds	r3, r7, r5
 8009304:	2200      	movs	r2, #0
 8009306:	5e9b      	ldrsh	r3, [r3, r2]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800930c:	197b      	adds	r3, r7, r5
 800930e:	2200      	movs	r2, #0
 8009310:	5e9b      	ldrsh	r3, [r3, r2]
 8009312:	4a1d      	ldr	r2, [pc, #116]	@ (8009388 <probe_sen5x+0x21c>)
 8009314:	4913      	ldr	r1, [pc, #76]	@ (8009364 <probe_sen5x+0x1f8>)
 8009316:	2001      	movs	r0, #1
 8009318:	f005 f80c 	bl	800e334 <CreateLine>
      return error;
 800931c:	197b      	adds	r3, r7, r5
 800931e:	2200      	movs	r2, #0
 8009320:	5e9b      	ldrsh	r3, [r3, r2]
 8009322:	e019      	b.n	8009358 <probe_sen5x+0x1ec>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8009324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009326:	f7fa f89d 	bl	8003464 <__aeabi_f2d>
 800932a:	0002      	movs	r2, r0
 800932c:	000b      	movs	r3, r1
 800932e:	4817      	ldr	r0, [pc, #92]	@ (800938c <probe_sen5x+0x220>)
 8009330:	4917      	ldr	r1, [pc, #92]	@ (8009390 <probe_sen5x+0x224>)
 8009332:	9200      	str	r2, [sp, #0]
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	0002      	movs	r2, r0
 8009338:	2002      	movs	r0, #2
 800933a:	f004 fffb 	bl	800e334 <CreateLine>
  }
  sen5x_Power_Off();
 800933e:	f7ff fedf 	bl	8009100 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8009342:	f005 fc4d 	bl	800ebe0 <HAL_GetTick>
 8009346:	0003      	movs	r3, r0
 8009348:	4a12      	ldr	r2, [pc, #72]	@ (8009394 <probe_sen5x+0x228>)
 800934a:	189a      	adds	r2, r3, r2
 800934c:	4b12      	ldr	r3, [pc, #72]	@ (8009398 <probe_sen5x+0x22c>)
 800934e:	601a      	str	r2, [r3, #0]
  return error;
 8009350:	2336      	movs	r3, #54	@ 0x36
 8009352:	18fb      	adds	r3, r7, r3
 8009354:	2200      	movs	r2, #0
 8009356:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009358:	0018      	movs	r0, r3
 800935a:	46bd      	mov	sp, r7
 800935c:	b00f      	add	sp, #60	@ 0x3c
 800935e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009360:	0802445c 	.word	0x0802445c
 8009364:	08024488 	.word	0x08024488
 8009368:	0802448c 	.word	0x0802448c
 800936c:	080244bc 	.word	0x080244bc
 8009370:	20001260 	.word	0x20001260
 8009374:	080244d0 	.word	0x080244d0
 8009378:	08024500 	.word	0x08024500
 800937c:	08024514 	.word	0x08024514
 8009380:	08024540 	.word	0x08024540
 8009384:	43480000 	.word	0x43480000
 8009388:	08024564 	.word	0x08024564
 800938c:	080245a4 	.word	0x080245a4
 8009390:	080243d0 	.word	0x080243d0
 8009394:	000061a8 	.word	0x000061a8
 8009398:	20001274 	.word	0x20001274

0800939c <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800939c:	b590      	push	{r4, r7, lr}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 80093a2:	1dbb      	adds	r3, r7, #6
 80093a4:	2200      	movs	r2, #0
 80093a6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 80093a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009418 <sen5x_lightup_measurement+0x7c>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00b      	beq.n	80093c8 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 80093b0:	4a1a      	ldr	r2, [pc, #104]	@ (800941c <sen5x_lightup_measurement+0x80>)
 80093b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009420 <sen5x_lightup_measurement+0x84>)
 80093b4:	0019      	movs	r1, r3
 80093b6:	2002      	movs	r0, #2
 80093b8:	f004 ffbc 	bl	800e334 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80093bc:	1dbc      	adds	r4, r7, #6
 80093be:	f000 fcab 	bl	8009d18 <sen5x_start_measurement_without_pm>
 80093c2:	0003      	movs	r3, r0
 80093c4:	8023      	strh	r3, [r4, #0]
 80093c6:	e00a      	b.n	80093de <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 80093c8:	4a16      	ldr	r2, [pc, #88]	@ (8009424 <sen5x_lightup_measurement+0x88>)
 80093ca:	4b15      	ldr	r3, [pc, #84]	@ (8009420 <sen5x_lightup_measurement+0x84>)
 80093cc:	0019      	movs	r1, r3
 80093ce:	2002      	movs	r0, #2
 80093d0:	f004 ffb0 	bl	800e334 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 80093d4:	1dbc      	adds	r4, r7, #6
 80093d6:	f000 fc71 	bl	8009cbc <sen5x_start_measurement>
 80093da:	0003      	movs	r3, r0
 80093dc:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 80093de:	1dbb      	adds	r3, r7, #6
 80093e0:	2200      	movs	r2, #0
 80093e2:	5e9b      	ldrsh	r3, [r3, r2]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d008      	beq.n	80093fa <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 80093e8:	1dbb      	adds	r3, r7, #6
 80093ea:	2200      	movs	r2, #0
 80093ec:	5e9b      	ldrsh	r3, [r3, r2]
 80093ee:	4a0e      	ldr	r2, [pc, #56]	@ (8009428 <sen5x_lightup_measurement+0x8c>)
 80093f0:	490e      	ldr	r1, [pc, #56]	@ (800942c <sen5x_lightup_measurement+0x90>)
 80093f2:	2001      	movs	r0, #1
 80093f4:	f004 ff9e 	bl	800e334 <CreateLine>
 80093f8:	e007      	b.n	800940a <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 80093fa:	f7fd f847 	bl	800648c <showTime>
    Info("sen5x_start_measurement executed");
 80093fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009430 <sen5x_lightup_measurement+0x94>)
 8009400:	4b07      	ldr	r3, [pc, #28]	@ (8009420 <sen5x_lightup_measurement+0x84>)
 8009402:	0019      	movs	r1, r3
 8009404:	2002      	movs	r0, #2
 8009406:	f004 ff95 	bl	800e334 <CreateLine>
  }
  return error;
 800940a:	1dbb      	adds	r3, r7, #6
 800940c:	2200      	movs	r2, #0
 800940e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009410:	0018      	movs	r0, r3
 8009412:	46bd      	mov	sp, r7
 8009414:	b003      	add	sp, #12
 8009416:	bd90      	pop	{r4, r7, pc}
 8009418:	2000125e 	.word	0x2000125e
 800941c:	080245dc 	.word	0x080245dc
 8009420:	080243d0 	.word	0x080243d0
 8009424:	08024608 	.word	0x08024608
 8009428:	08024628 	.word	0x08024628
 800942c:	08024488 	.word	0x08024488
 8009430:	08024658 	.word	0x08024658

08009434 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8009434:	b590      	push	{r4, r7, lr}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 800943a:	1dbb      	adds	r3, r7, #6
 800943c:	2200      	movs	r2, #0
 800943e:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 8009440:	4b21      	ldr	r3, [pc, #132]	@ (80094c8 <sen5x_extinguish_measurement+0x94>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01e      	beq.n	8009486 <sen5x_extinguish_measurement+0x52>
    Info("Continious VOC & NOx is active, sensor not powered off");
 8009448:	4a20      	ldr	r2, [pc, #128]	@ (80094cc <sen5x_extinguish_measurement+0x98>)
 800944a:	4b21      	ldr	r3, [pc, #132]	@ (80094d0 <sen5x_extinguish_measurement+0x9c>)
 800944c:	0019      	movs	r1, r3
 800944e:	2002      	movs	r0, #2
 8009450:	f004 ff70 	bl	800e334 <CreateLine>
    Info("PM measurement is disabled");
 8009454:	4a1f      	ldr	r2, [pc, #124]	@ (80094d4 <sen5x_extinguish_measurement+0xa0>)
 8009456:	4b1e      	ldr	r3, [pc, #120]	@ (80094d0 <sen5x_extinguish_measurement+0x9c>)
 8009458:	0019      	movs	r1, r3
 800945a:	2002      	movs	r0, #2
 800945c:	f004 ff6a 	bl	800e334 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009460:	1dbc      	adds	r4, r7, #6
 8009462:	f000 fc59 	bl	8009d18 <sen5x_start_measurement_without_pm>
 8009466:	0003      	movs	r3, r0
 8009468:	8023      	strh	r3, [r4, #0]
    if (error) {
 800946a:	1dbb      	adds	r3, r7, #6
 800946c:	2200      	movs	r2, #0
 800946e:	5e9b      	ldrsh	r3, [r3, r2]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d022      	beq.n	80094ba <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 8009474:	1dbb      	adds	r3, r7, #6
 8009476:	2200      	movs	r2, #0
 8009478:	5e9b      	ldrsh	r3, [r3, r2]
 800947a:	4a17      	ldr	r2, [pc, #92]	@ (80094d8 <sen5x_extinguish_measurement+0xa4>)
 800947c:	4917      	ldr	r1, [pc, #92]	@ (80094dc <sen5x_extinguish_measurement+0xa8>)
 800947e:	2001      	movs	r0, #1
 8009480:	f004 ff58 	bl	800e334 <CreateLine>
 8009484:	e019      	b.n	80094ba <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 8009486:	1dbc      	adds	r4, r7, #6
 8009488:	f000 fc74 	bl	8009d74 <sen5x_stop_measurement>
 800948c:	0003      	movs	r3, r0
 800948e:	8023      	strh	r3, [r4, #0]
    showTime();
 8009490:	f7fc fffc 	bl	800648c <showTime>
    Info("sen5x_stop_measurement executed");
 8009494:	4a12      	ldr	r2, [pc, #72]	@ (80094e0 <sen5x_extinguish_measurement+0xac>)
 8009496:	4b0e      	ldr	r3, [pc, #56]	@ (80094d0 <sen5x_extinguish_measurement+0x9c>)
 8009498:	0019      	movs	r1, r3
 800949a:	2002      	movs	r0, #2
 800949c:	f004 ff4a 	bl	800e334 <CreateLine>
    if (error) {
 80094a0:	1dbb      	adds	r3, r7, #6
 80094a2:	2200      	movs	r2, #0
 80094a4:	5e9b      	ldrsh	r3, [r3, r2]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 80094aa:	1dbb      	adds	r3, r7, #6
 80094ac:	2200      	movs	r2, #0
 80094ae:	5e9b      	ldrsh	r3, [r3, r2]
 80094b0:	4a0c      	ldr	r2, [pc, #48]	@ (80094e4 <sen5x_extinguish_measurement+0xb0>)
 80094b2:	490a      	ldr	r1, [pc, #40]	@ (80094dc <sen5x_extinguish_measurement+0xa8>)
 80094b4:	2001      	movs	r0, #1
 80094b6:	f004 ff3d 	bl	800e334 <CreateLine>
    }
  }
  return error;
 80094ba:	1dbb      	adds	r3, r7, #6
 80094bc:	2200      	movs	r2, #0
 80094be:	5e9b      	ldrsh	r3, [r3, r2]
}
 80094c0:	0018      	movs	r0, r3
 80094c2:	46bd      	mov	sp, r7
 80094c4:	b003      	add	sp, #12
 80094c6:	bd90      	pop	{r4, r7, pc}
 80094c8:	2000125e 	.word	0x2000125e
 80094cc:	0802467c 	.word	0x0802467c
 80094d0:	080243d0 	.word	0x080243d0
 80094d4:	080246b4 	.word	0x080246b4
 80094d8:	080246d0 	.word	0x080246d0
 80094dc:	08024488 	.word	0x08024488
 80094e0:	08024710 	.word	0x08024710
 80094e4:	08024730 	.word	0x08024730

080094e8 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 80094e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ea:	b08d      	sub	sp, #52	@ 0x34
 80094ec:	af04      	add	r7, sp, #16
 80094ee:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 80094f0:	261e      	movs	r6, #30
 80094f2:	19bb      	adds	r3, r7, r6
 80094f4:	2200      	movs	r2, #0
 80094f6:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 80094f8:	19bc      	adds	r4, r7, r6
 80094fa:	2316      	movs	r3, #22
 80094fc:	18fd      	adds	r5, r7, r3
 80094fe:	2318      	movs	r3, #24
 8009500:	18fa      	adds	r2, r7, r3
 8009502:	231a      	movs	r3, #26
 8009504:	18f9      	adds	r1, r7, r3
 8009506:	231c      	movs	r3, #28
 8009508:	18f8      	adds	r0, r7, r3
 800950a:	230e      	movs	r3, #14
 800950c:	18fb      	adds	r3, r7, r3
 800950e:	9303      	str	r3, [sp, #12]
 8009510:	2310      	movs	r3, #16
 8009512:	18fb      	adds	r3, r7, r3
 8009514:	9302      	str	r3, [sp, #8]
 8009516:	2312      	movs	r3, #18
 8009518:	18fb      	adds	r3, r7, r3
 800951a:	9301      	str	r3, [sp, #4]
 800951c:	2314      	movs	r3, #20
 800951e:	18fb      	adds	r3, r7, r3
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	002b      	movs	r3, r5
 8009524:	f000 fca8 	bl	8009e78 <sen5x_read_measured_values>
 8009528:	0003      	movs	r3, r0
 800952a:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800952c:	19bb      	adds	r3, r7, r6
 800952e:	2200      	movs	r2, #0
 8009530:	5e9b      	ldrsh	r3, [r3, r2]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <sen5x_read_measurement+0x56>
    return error;
 8009536:	19bb      	adds	r3, r7, r6
 8009538:	2200      	movs	r2, #0
 800953a:	5e9b      	ldrsh	r3, [r3, r2]
 800953c:	e02c      	b.n	8009598 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800953e:	231c      	movs	r3, #28
 8009540:	18fb      	adds	r3, r7, r3
 8009542:	881a      	ldrh	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009548:	231a      	movs	r3, #26
 800954a:	18fb      	adds	r3, r7, r3
 800954c:	881a      	ldrh	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8009552:	2318      	movs	r3, #24
 8009554:	18fb      	adds	r3, r7, r3
 8009556:	881a      	ldrh	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800955c:	2316      	movs	r3, #22
 800955e:	18fb      	adds	r3, r7, r3
 8009560:	881a      	ldrh	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8009566:	2314      	movs	r3, #20
 8009568:	18fb      	adds	r3, r7, r3
 800956a:	2200      	movs	r2, #0
 800956c:	5e9a      	ldrsh	r2, [r3, r2]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8009572:	2312      	movs	r3, #18
 8009574:	18fb      	adds	r3, r7, r3
 8009576:	2200      	movs	r2, #0
 8009578:	5e9a      	ldrsh	r2, [r3, r2]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800957e:	2310      	movs	r3, #16
 8009580:	18fb      	adds	r3, r7, r3
 8009582:	2200      	movs	r2, #0
 8009584:	5e9a      	ldrsh	r2, [r3, r2]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800958a:	230e      	movs	r3, #14
 800958c:	18fb      	adds	r3, r7, r3
 800958e:	2200      	movs	r2, #0
 8009590:	5e9a      	ldrsh	r2, [r3, r2]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	81da      	strh	r2, [r3, #14]
//  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0, nox_index);
  return 0;
 8009596:	2300      	movs	r3, #0
}
 8009598:	0018      	movs	r0, r3
 800959a:	46bd      	mov	sp, r7
 800959c:	b009      	add	sp, #36	@ 0x24
 800959e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095a0 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
//  Debug("entering sen5x_printvalues");
//  Info("sen5x_printvalues entered for sample %d", sen5xSamples);
//  if (sen5xSamples != 3) {
//    return; // first two sample reads are not reliable
//  }
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 80095a4:	4b69      	ldr	r3, [pc, #420]	@ (800974c <sen5x_printvalues+0x1ac>)
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	4a69      	ldr	r2, [pc, #420]	@ (8009750 <sen5x_printvalues+0x1b0>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d013      	beq.n	80095d6 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80095ae:	4b67      	ldr	r3, [pc, #412]	@ (800974c <sen5x_printvalues+0x1ac>)
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	0018      	movs	r0, r3
 80095b4:	f7f8 f80c 	bl	80015d0 <__aeabi_i2f>
 80095b8:	1c03      	adds	r3, r0, #0
 80095ba:	4966      	ldr	r1, [pc, #408]	@ (8009754 <sen5x_printvalues+0x1b4>)
 80095bc:	1c18      	adds	r0, r3, #0
 80095be:	f7f7 fb09 	bl	8000bd4 <__aeabi_fdiv>
 80095c2:	1c03      	adds	r3, r0, #0
 80095c4:	1c18      	adds	r0, r3, #0
 80095c6:	f7f9 ff4d 	bl	8003464 <__aeabi_f2d>
 80095ca:	0002      	movs	r2, r0
 80095cc:	000b      	movs	r3, r1
 80095ce:	4962      	ldr	r1, [pc, #392]	@ (8009758 <sen5x_printvalues+0x1b8>)
 80095d0:	0008      	movs	r0, r1
 80095d2:	f016 fba9 	bl	801fd28 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 80095d6:	4b5d      	ldr	r3, [pc, #372]	@ (800974c <sen5x_printvalues+0x1ac>)
 80095d8:	885b      	ldrh	r3, [r3, #2]
 80095da:	4a5d      	ldr	r2, [pc, #372]	@ (8009750 <sen5x_printvalues+0x1b0>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d013      	beq.n	8009608 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 80095e0:	4b5a      	ldr	r3, [pc, #360]	@ (800974c <sen5x_printvalues+0x1ac>)
 80095e2:	885b      	ldrh	r3, [r3, #2]
 80095e4:	0018      	movs	r0, r3
 80095e6:	f7f7 fff3 	bl	80015d0 <__aeabi_i2f>
 80095ea:	1c03      	adds	r3, r0, #0
 80095ec:	4959      	ldr	r1, [pc, #356]	@ (8009754 <sen5x_printvalues+0x1b4>)
 80095ee:	1c18      	adds	r0, r3, #0
 80095f0:	f7f7 faf0 	bl	8000bd4 <__aeabi_fdiv>
 80095f4:	1c03      	adds	r3, r0, #0
 80095f6:	1c18      	adds	r0, r3, #0
 80095f8:	f7f9 ff34 	bl	8003464 <__aeabi_f2d>
 80095fc:	0002      	movs	r2, r0
 80095fe:	000b      	movs	r3, r1
 8009600:	4956      	ldr	r1, [pc, #344]	@ (800975c <sen5x_printvalues+0x1bc>)
 8009602:	0008      	movs	r0, r1
 8009604:	f016 fb90 	bl	801fd28 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009608:	4b50      	ldr	r3, [pc, #320]	@ (800974c <sen5x_printvalues+0x1ac>)
 800960a:	889b      	ldrh	r3, [r3, #4]
 800960c:	4a50      	ldr	r2, [pc, #320]	@ (8009750 <sen5x_printvalues+0x1b0>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d013      	beq.n	800963a <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8009612:	4b4e      	ldr	r3, [pc, #312]	@ (800974c <sen5x_printvalues+0x1ac>)
 8009614:	889b      	ldrh	r3, [r3, #4]
 8009616:	0018      	movs	r0, r3
 8009618:	f7f7 ffda 	bl	80015d0 <__aeabi_i2f>
 800961c:	1c03      	adds	r3, r0, #0
 800961e:	494d      	ldr	r1, [pc, #308]	@ (8009754 <sen5x_printvalues+0x1b4>)
 8009620:	1c18      	adds	r0, r3, #0
 8009622:	f7f7 fad7 	bl	8000bd4 <__aeabi_fdiv>
 8009626:	1c03      	adds	r3, r0, #0
 8009628:	1c18      	adds	r0, r3, #0
 800962a:	f7f9 ff1b 	bl	8003464 <__aeabi_f2d>
 800962e:	0002      	movs	r2, r0
 8009630:	000b      	movs	r3, r1
 8009632:	494b      	ldr	r1, [pc, #300]	@ (8009760 <sen5x_printvalues+0x1c0>)
 8009634:	0008      	movs	r0, r1
 8009636:	f016 fb77 	bl	801fd28 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800963a:	4b44      	ldr	r3, [pc, #272]	@ (800974c <sen5x_printvalues+0x1ac>)
 800963c:	88db      	ldrh	r3, [r3, #6]
 800963e:	4a44      	ldr	r2, [pc, #272]	@ (8009750 <sen5x_printvalues+0x1b0>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d013      	beq.n	800966c <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8009644:	4b41      	ldr	r3, [pc, #260]	@ (800974c <sen5x_printvalues+0x1ac>)
 8009646:	88db      	ldrh	r3, [r3, #6]
 8009648:	0018      	movs	r0, r3
 800964a:	f7f7 ffc1 	bl	80015d0 <__aeabi_i2f>
 800964e:	1c03      	adds	r3, r0, #0
 8009650:	4940      	ldr	r1, [pc, #256]	@ (8009754 <sen5x_printvalues+0x1b4>)
 8009652:	1c18      	adds	r0, r3, #0
 8009654:	f7f7 fabe 	bl	8000bd4 <__aeabi_fdiv>
 8009658:	1c03      	adds	r3, r0, #0
 800965a:	1c18      	adds	r0, r3, #0
 800965c:	f7f9 ff02 	bl	8003464 <__aeabi_f2d>
 8009660:	0002      	movs	r2, r0
 8009662:	000b      	movs	r3, r1
 8009664:	493f      	ldr	r1, [pc, #252]	@ (8009764 <sen5x_printvalues+0x1c4>)
 8009666:	0008      	movs	r0, r1
 8009668:	f016 fb5e 	bl	801fd28 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800966c:	4b37      	ldr	r3, [pc, #220]	@ (800974c <sen5x_printvalues+0x1ac>)
 800966e:	2208      	movs	r2, #8
 8009670:	5e9b      	ldrsh	r3, [r3, r2]
 8009672:	4a3d      	ldr	r2, [pc, #244]	@ (8009768 <sen5x_printvalues+0x1c8>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d014      	beq.n	80096a2 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8009678:	4b34      	ldr	r3, [pc, #208]	@ (800974c <sen5x_printvalues+0x1ac>)
 800967a:	2208      	movs	r2, #8
 800967c:	5e9b      	ldrsh	r3, [r3, r2]
 800967e:	0018      	movs	r0, r3
 8009680:	f7f7 ffa6 	bl	80015d0 <__aeabi_i2f>
 8009684:	1c03      	adds	r3, r0, #0
 8009686:	4939      	ldr	r1, [pc, #228]	@ (800976c <sen5x_printvalues+0x1cc>)
 8009688:	1c18      	adds	r0, r3, #0
 800968a:	f7f7 faa3 	bl	8000bd4 <__aeabi_fdiv>
 800968e:	1c03      	adds	r3, r0, #0
 8009690:	1c18      	adds	r0, r3, #0
 8009692:	f7f9 fee7 	bl	8003464 <__aeabi_f2d>
 8009696:	0002      	movs	r2, r0
 8009698:	000b      	movs	r3, r1
 800969a:	4935      	ldr	r1, [pc, #212]	@ (8009770 <sen5x_printvalues+0x1d0>)
 800969c:	0008      	movs	r0, r1
 800969e:	f016 fb43 	bl	801fd28 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 80096a2:	4b2a      	ldr	r3, [pc, #168]	@ (800974c <sen5x_printvalues+0x1ac>)
 80096a4:	220a      	movs	r2, #10
 80096a6:	5e9b      	ldrsh	r3, [r3, r2]
 80096a8:	4a2f      	ldr	r2, [pc, #188]	@ (8009768 <sen5x_printvalues+0x1c8>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d014      	beq.n	80096d8 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 80096ae:	4b27      	ldr	r3, [pc, #156]	@ (800974c <sen5x_printvalues+0x1ac>)
 80096b0:	220a      	movs	r2, #10
 80096b2:	5e9b      	ldrsh	r3, [r3, r2]
 80096b4:	0018      	movs	r0, r3
 80096b6:	f7f7 ff8b 	bl	80015d0 <__aeabi_i2f>
 80096ba:	1c03      	adds	r3, r0, #0
 80096bc:	492d      	ldr	r1, [pc, #180]	@ (8009774 <sen5x_printvalues+0x1d4>)
 80096be:	1c18      	adds	r0, r3, #0
 80096c0:	f7f7 fa88 	bl	8000bd4 <__aeabi_fdiv>
 80096c4:	1c03      	adds	r3, r0, #0
 80096c6:	1c18      	adds	r0, r3, #0
 80096c8:	f7f9 fecc 	bl	8003464 <__aeabi_f2d>
 80096cc:	0002      	movs	r2, r0
 80096ce:	000b      	movs	r3, r1
 80096d0:	4929      	ldr	r1, [pc, #164]	@ (8009778 <sen5x_printvalues+0x1d8>)
 80096d2:	0008      	movs	r0, r1
 80096d4:	f016 fb28 	bl	801fd28 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 80096d8:	4b1c      	ldr	r3, [pc, #112]	@ (800974c <sen5x_printvalues+0x1ac>)
 80096da:	220c      	movs	r2, #12
 80096dc:	5e9b      	ldrsh	r3, [r3, r2]
 80096de:	4a22      	ldr	r2, [pc, #136]	@ (8009768 <sen5x_printvalues+0x1c8>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d014      	beq.n	800970e <sen5x_printvalues+0x16e>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 80096e4:	4b19      	ldr	r3, [pc, #100]	@ (800974c <sen5x_printvalues+0x1ac>)
 80096e6:	220c      	movs	r2, #12
 80096e8:	5e9b      	ldrsh	r3, [r3, r2]
 80096ea:	0018      	movs	r0, r3
 80096ec:	f7f7 ff70 	bl	80015d0 <__aeabi_i2f>
 80096f0:	1c03      	adds	r3, r0, #0
 80096f2:	4918      	ldr	r1, [pc, #96]	@ (8009754 <sen5x_printvalues+0x1b4>)
 80096f4:	1c18      	adds	r0, r3, #0
 80096f6:	f7f7 fa6d 	bl	8000bd4 <__aeabi_fdiv>
 80096fa:	1c03      	adds	r3, r0, #0
 80096fc:	1c18      	adds	r0, r3, #0
 80096fe:	f7f9 feb1 	bl	8003464 <__aeabi_f2d>
 8009702:	0002      	movs	r2, r0
 8009704:	000b      	movs	r3, r1
 8009706:	491d      	ldr	r1, [pc, #116]	@ (800977c <sen5x_printvalues+0x1dc>)
 8009708:	0008      	movs	r0, r1
 800970a:	f016 fb0d 	bl	801fd28 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800970e:	4b0f      	ldr	r3, [pc, #60]	@ (800974c <sen5x_printvalues+0x1ac>)
 8009710:	220e      	movs	r2, #14
 8009712:	5e9b      	ldrsh	r3, [r3, r2]
 8009714:	4a14      	ldr	r2, [pc, #80]	@ (8009768 <sen5x_printvalues+0x1c8>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d014      	beq.n	8009744 <sen5x_printvalues+0x1a4>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 800971a:	4b0c      	ldr	r3, [pc, #48]	@ (800974c <sen5x_printvalues+0x1ac>)
 800971c:	220e      	movs	r2, #14
 800971e:	5e9b      	ldrsh	r3, [r3, r2]
 8009720:	0018      	movs	r0, r3
 8009722:	f7f7 ff55 	bl	80015d0 <__aeabi_i2f>
 8009726:	1c03      	adds	r3, r0, #0
 8009728:	490a      	ldr	r1, [pc, #40]	@ (8009754 <sen5x_printvalues+0x1b4>)
 800972a:	1c18      	adds	r0, r3, #0
 800972c:	f7f7 fa52 	bl	8000bd4 <__aeabi_fdiv>
 8009730:	1c03      	adds	r3, r0, #0
 8009732:	1c18      	adds	r0, r3, #0
 8009734:	f7f9 fe96 	bl	8003464 <__aeabi_f2d>
 8009738:	0002      	movs	r2, r0
 800973a:	000b      	movs	r3, r1
 800973c:	4910      	ldr	r1, [pc, #64]	@ (8009780 <sen5x_printvalues+0x1e0>)
 800973e:	0008      	movs	r0, r1
 8009740:	f016 faf2 	bl	801fd28 <iprintf>
  }
}
 8009744:	46c0      	nop			@ (mov r8, r8)
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	46c0      	nop			@ (mov r8, r8)
 800974c:	20001278 	.word	0x20001278
 8009750:	0000ffff 	.word	0x0000ffff
 8009754:	41200000 	.word	0x41200000
 8009758:	08024760 	.word	0x08024760
 800975c:	0802478c 	.word	0x0802478c
 8009760:	080247b8 	.word	0x080247b8
 8009764:	080247e4 	.word	0x080247e4
 8009768:	00007fff 	.word	0x00007fff
 800976c:	42c80000 	.word	0x42c80000
 8009770:	08024810 	.word	0x08024810
 8009774:	43480000 	.word	0x43480000
 8009778:	08024834 	.word	0x08024834
 800977c:	0802485c 	.word	0x0802485c
 8009780:	08024874 	.word	0x08024874

08009784 <sen5xStoreMax>:

void sen5xStoreMax() {
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
  if ((sen5x_data.mass_concentration_pm2p5 != 0xFFFF) && (sen5x_data.mass_concentration_pm2p5 > pm2p5max)) {
 8009788:	4b32      	ldr	r3, [pc, #200]	@ (8009854 <sen5xStoreMax+0xd0>)
 800978a:	885b      	ldrh	r3, [r3, #2]
 800978c:	4a32      	ldr	r2, [pc, #200]	@ (8009858 <sen5xStoreMax+0xd4>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d009      	beq.n	80097a6 <sen5xStoreMax+0x22>
 8009792:	4b30      	ldr	r3, [pc, #192]	@ (8009854 <sen5xStoreMax+0xd0>)
 8009794:	885a      	ldrh	r2, [r3, #2]
 8009796:	4b31      	ldr	r3, [pc, #196]	@ (800985c <sen5xStoreMax+0xd8>)
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	429a      	cmp	r2, r3
 800979c:	d903      	bls.n	80097a6 <sen5xStoreMax+0x22>
    pm2p5max = sen5x_data.mass_concentration_pm2p5;
 800979e:	4b2d      	ldr	r3, [pc, #180]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097a0:	885a      	ldrh	r2, [r3, #2]
 80097a2:	4b2e      	ldr	r3, [pc, #184]	@ (800985c <sen5xStoreMax+0xd8>)
 80097a4:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.mass_concentration_pm10p0 != 0xFFFF) && (sen5x_data.mass_concentration_pm10p0 > pm10p0max)) {
 80097a6:	4b2b      	ldr	r3, [pc, #172]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097a8:	88db      	ldrh	r3, [r3, #6]
 80097aa:	4a2b      	ldr	r2, [pc, #172]	@ (8009858 <sen5xStoreMax+0xd4>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d009      	beq.n	80097c4 <sen5xStoreMax+0x40>
 80097b0:	4b28      	ldr	r3, [pc, #160]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097b2:	88da      	ldrh	r2, [r3, #6]
 80097b4:	4b2a      	ldr	r3, [pc, #168]	@ (8009860 <sen5xStoreMax+0xdc>)
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d903      	bls.n	80097c4 <sen5xStoreMax+0x40>
    pm10p0max = sen5x_data.mass_concentration_pm10p0;
 80097bc:	4b25      	ldr	r3, [pc, #148]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097be:	88da      	ldrh	r2, [r3, #6]
 80097c0:	4b27      	ldr	r3, [pc, #156]	@ (8009860 <sen5xStoreMax+0xdc>)
 80097c2:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.voc_index != 0x7fff) && (sen5x_data.voc_index > s5xvocimax)) {
 80097c4:	4b23      	ldr	r3, [pc, #140]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097c6:	220c      	movs	r2, #12
 80097c8:	5e9b      	ldrsh	r3, [r3, r2]
 80097ca:	4a26      	ldr	r2, [pc, #152]	@ (8009864 <sen5xStoreMax+0xe0>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d00d      	beq.n	80097ec <sen5xStoreMax+0x68>
 80097d0:	4b20      	ldr	r3, [pc, #128]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097d2:	220c      	movs	r2, #12
 80097d4:	5e9b      	ldrsh	r3, [r3, r2]
 80097d6:	001a      	movs	r2, r3
 80097d8:	4b23      	ldr	r3, [pc, #140]	@ (8009868 <sen5xStoreMax+0xe4>)
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	429a      	cmp	r2, r3
 80097de:	dd05      	ble.n	80097ec <sen5xStoreMax+0x68>
    s5xvocimax = sen5x_data.voc_index;
 80097e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097e2:	220c      	movs	r2, #12
 80097e4:	5e9b      	ldrsh	r3, [r3, r2]
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009868 <sen5xStoreMax+0xe4>)
 80097ea:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.nox_index != 0x7fff) && (sen5x_data.nox_index > s5xnoximax)) {
 80097ec:	4b19      	ldr	r3, [pc, #100]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097ee:	220e      	movs	r2, #14
 80097f0:	5e9b      	ldrsh	r3, [r3, r2]
 80097f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009864 <sen5xStoreMax+0xe0>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d00d      	beq.n	8009814 <sen5xStoreMax+0x90>
 80097f8:	4b16      	ldr	r3, [pc, #88]	@ (8009854 <sen5xStoreMax+0xd0>)
 80097fa:	220e      	movs	r2, #14
 80097fc:	5e9b      	ldrsh	r3, [r3, r2]
 80097fe:	001a      	movs	r2, r3
 8009800:	4b1a      	ldr	r3, [pc, #104]	@ (800986c <sen5xStoreMax+0xe8>)
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	429a      	cmp	r2, r3
 8009806:	dd05      	ble.n	8009814 <sen5xStoreMax+0x90>
    s5xnoximax = sen5x_data.nox_index;
 8009808:	4b12      	ldr	r3, [pc, #72]	@ (8009854 <sen5xStoreMax+0xd0>)
 800980a:	220e      	movs	r2, #14
 800980c:	5e9b      	ldrsh	r3, [r3, r2]
 800980e:	b29a      	uxth	r2, r3
 8009810:	4b16      	ldr	r3, [pc, #88]	@ (800986c <sen5xStoreMax+0xe8>)
 8009812:	801a      	strh	r2, [r3, #0]
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8009814:	4b16      	ldr	r3, [pc, #88]	@ (8009870 <sen5xStoreMax+0xec>)
 8009816:	791b      	ldrb	r3, [r3, #4]
 8009818:	2b34      	cmp	r3, #52	@ 0x34
 800981a:	d003      	beq.n	8009824 <sen5xStoreMax+0xa0>
 800981c:	4b14      	ldr	r3, [pc, #80]	@ (8009870 <sen5xStoreMax+0xec>)
 800981e:	791b      	ldrb	r3, [r3, #4]
 8009820:	2b35      	cmp	r3, #53	@ 0x35
 8009822:	d10a      	bne.n	800983a <sen5xStoreMax+0xb6>
    setPMs(pm2p5max, pm10p0max, s5xvocimax, s5xnoximax);
 8009824:	4b0d      	ldr	r3, [pc, #52]	@ (800985c <sen5xStoreMax+0xd8>)
 8009826:	8818      	ldrh	r0, [r3, #0]
 8009828:	4b0d      	ldr	r3, [pc, #52]	@ (8009860 <sen5xStoreMax+0xdc>)
 800982a:	8819      	ldrh	r1, [r3, #0]
 800982c:	4b0e      	ldr	r3, [pc, #56]	@ (8009868 <sen5xStoreMax+0xe4>)
 800982e:	881a      	ldrh	r2, [r3, #0]
 8009830:	4b0e      	ldr	r3, [pc, #56]	@ (800986c <sen5xStoreMax+0xe8>)
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	f7fa f8c4 	bl	80039c0 <setPMs>
 8009838:	e008      	b.n	800984c <sen5xStoreMax+0xc8>
  }
  else {
    setPMsen50(pm2p5max, pm10p0max);
 800983a:	4b08      	ldr	r3, [pc, #32]	@ (800985c <sen5xStoreMax+0xd8>)
 800983c:	881a      	ldrh	r2, [r3, #0]
 800983e:	4b08      	ldr	r3, [pc, #32]	@ (8009860 <sen5xStoreMax+0xdc>)
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	0019      	movs	r1, r3
 8009844:	0010      	movs	r0, r2
 8009846:	f7fa f88b 	bl	8003960 <setPMsen50>
  }
}
 800984a:	46c0      	nop			@ (mov r8, r8)
 800984c:	46c0      	nop			@ (mov r8, r8)
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	46c0      	nop			@ (mov r8, r8)
 8009854:	20001278 	.word	0x20001278
 8009858:	0000ffff 	.word	0x0000ffff
 800985c:	2000126a 	.word	0x2000126a
 8009860:	2000126c 	.word	0x2000126c
 8009864:	00007fff 	.word	0x00007fff
 8009868:	2000126e 	.word	0x2000126e
 800986c:	20001270 	.word	0x20001270
 8009870:	20001260 	.word	0x20001260

08009874 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8009874:	b590      	push	{r4, r7, lr}
 8009876:	b085      	sub	sp, #20
 8009878:	af02      	add	r7, sp, #8
 800987a:	6039      	str	r1, [r7, #0]
 800987c:	0011      	movs	r1, r2
 800987e:	1dfb      	adds	r3, r7, #7
 8009880:	1c02      	adds	r2, r0, #0
 8009882:	701a      	strb	r2, [r3, #0]
 8009884:	1d3b      	adds	r3, r7, #4
 8009886:	1c0a      	adds	r2, r1, #0
 8009888:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800988a:	1dfb      	adds	r3, r7, #7
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	b29b      	uxth	r3, r3
 8009890:	18db      	adds	r3, r3, r3
 8009892:	b299      	uxth	r1, r3
 8009894:	1d3b      	adds	r3, r7, #4
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	4805      	ldr	r0, [pc, #20]	@ (80098b0 <sensirion_i2c_hal_read+0x3c>)
 800989c:	2464      	movs	r4, #100	@ 0x64
 800989e:	9400      	str	r4, [sp, #0]
 80098a0:	f006 fe06 	bl	80104b0 <HAL_I2C_Master_Receive>
 80098a4:	0003      	movs	r3, r0
 80098a6:	b25b      	sxtb	r3, r3
}
 80098a8:	0018      	movs	r0, r3
 80098aa:	46bd      	mov	sp, r7
 80098ac:	b003      	add	sp, #12
 80098ae:	bd90      	pop	{r4, r7, pc}
 80098b0:	20000e40 	.word	0x20000e40

080098b4 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 80098b4:	b590      	push	{r4, r7, lr}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	6039      	str	r1, [r7, #0]
 80098bc:	0011      	movs	r1, r2
 80098be:	1dfb      	adds	r3, r7, #7
 80098c0:	1c02      	adds	r2, r0, #0
 80098c2:	701a      	strb	r2, [r3, #0]
 80098c4:	1d3b      	adds	r3, r7, #4
 80098c6:	1c0a      	adds	r2, r1, #0
 80098c8:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 80098ca:	1dfb      	adds	r3, r7, #7
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	18db      	adds	r3, r3, r3
 80098d2:	b299      	uxth	r1, r3
 80098d4:	1d3b      	adds	r3, r7, #4
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	4805      	ldr	r0, [pc, #20]	@ (80098f0 <sensirion_i2c_hal_write+0x3c>)
 80098dc:	2464      	movs	r4, #100	@ 0x64
 80098de:	9400      	str	r4, [sp, #0]
 80098e0:	f006 fcde 	bl	80102a0 <HAL_I2C_Master_Transmit>
 80098e4:	0003      	movs	r3, r0
 80098e6:	b25b      	sxtb	r3, r3
}
 80098e8:	0018      	movs	r0, r3
 80098ea:	46bd      	mov	sp, r7
 80098ec:	b003      	add	sp, #12
 80098ee:	bd90      	pop	{r4, r7, pc}
 80098f0:	20000e40 	.word	0x20000e40

080098f4 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	22fa      	movs	r2, #250	@ 0xfa
 8009900:	0091      	lsls	r1, r2, #2
 8009902:	0018      	movs	r0, r3
 8009904:	f7f6 fc4e 	bl	80001a4 <__udivsi3>
 8009908:	0003      	movs	r3, r0
 800990a:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	22fa      	movs	r2, #250	@ 0xfa
 8009910:	0091      	lsls	r1, r2, #2
 8009912:	0018      	movs	r0, r3
 8009914:	f7f6 fccc 	bl	80002b0 <__aeabi_uidivmod>
 8009918:	1e0b      	subs	r3, r1, #0
 800991a:	d002      	beq.n	8009922 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3301      	adds	r3, #1
 8009920:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	0018      	movs	r0, r3
 8009926:	f005 f965 	bl	800ebf4 <HAL_Delay>
}
 800992a:	46c0      	nop			@ (mov r8, r8)
 800992c:	46bd      	mov	sp, r7
 800992e:	b004      	add	sp, #16
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800993e:	1d3b      	adds	r3, r7, #4
 8009940:	0018      	movs	r0, r3
 8009942:	f000 fcd9 	bl	800a2f8 <sen5x_read_device_status>
 8009946:	1e03      	subs	r3, r0, #0
 8009948:	d007      	beq.n	800995a <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800994a:	4a28      	ldr	r2, [pc, #160]	@ (80099ec <sen5x_check_for_errors+0xb8>)
 800994c:	4b28      	ldr	r3, [pc, #160]	@ (80099f0 <sen5x_check_for_errors+0xbc>)
 800994e:	0019      	movs	r1, r3
 8009950:	2001      	movs	r0, #1
 8009952:	f004 fcef 	bl	800e334 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 8009956:	2300      	movs	r3, #0
 8009958:	e043      	b.n	80099e2 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <sen5x_check_for_errors+0x30>
//    Debug("sen5x operates normal");
    return 0;
 8009960:	2300      	movs	r3, #0
 8009962:	e03e      	b.n	80099e2 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	2380      	movs	r3, #128	@ 0x80
 8009968:	039b      	lsls	r3, r3, #14
 800996a:	4013      	ands	r3, r2
 800996c:	d005      	beq.n	800997a <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800996e:	4a21      	ldr	r2, [pc, #132]	@ (80099f4 <sen5x_check_for_errors+0xc0>)
 8009970:	4b21      	ldr	r3, [pc, #132]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 8009972:	0019      	movs	r1, r3
 8009974:	2003      	movs	r0, #3
 8009976:	f004 fcdd 	bl	800e334 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	2380      	movs	r3, #128	@ 0x80
 800997e:	031b      	lsls	r3, r3, #12
 8009980:	4013      	ands	r3, r2
 8009982:	d005      	beq.n	8009990 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 8009984:	4a1d      	ldr	r2, [pc, #116]	@ (80099fc <sen5x_check_for_errors+0xc8>)
 8009986:	4b1c      	ldr	r3, [pc, #112]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 8009988:	0019      	movs	r1, r3
 800998a:	2003      	movs	r0, #3
 800998c:	f004 fcd2 	bl	800e334 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2280      	movs	r2, #128	@ 0x80
 8009994:	4013      	ands	r3, r2
 8009996:	d005      	beq.n	80099a4 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009998:	4a19      	ldr	r2, [pc, #100]	@ (8009a00 <sen5x_check_for_errors+0xcc>)
 800999a:	4b17      	ldr	r3, [pc, #92]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 800999c:	0019      	movs	r1, r3
 800999e:	2003      	movs	r0, #3
 80099a0:	f004 fcc8 	bl	800e334 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2240      	movs	r2, #64	@ 0x40
 80099a8:	4013      	ands	r3, r2
 80099aa:	d005      	beq.n	80099b8 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 80099ac:	4a15      	ldr	r2, [pc, #84]	@ (8009a04 <sen5x_check_for_errors+0xd0>)
 80099ae:	4b12      	ldr	r3, [pc, #72]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 80099b0:	0019      	movs	r1, r3
 80099b2:	2003      	movs	r0, #3
 80099b4:	f004 fcbe 	bl	800e334 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2220      	movs	r2, #32
 80099bc:	4013      	ands	r3, r2
 80099be:	d005      	beq.n	80099cc <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 80099c0:	4a11      	ldr	r2, [pc, #68]	@ (8009a08 <sen5x_check_for_errors+0xd4>)
 80099c2:	4b0d      	ldr	r3, [pc, #52]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 80099c4:	0019      	movs	r1, r3
 80099c6:	2003      	movs	r0, #3
 80099c8:	f004 fcb4 	bl	800e334 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2210      	movs	r2, #16
 80099d0:	4013      	ands	r3, r2
 80099d2:	d005      	beq.n	80099e0 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 80099d4:	4a0d      	ldr	r2, [pc, #52]	@ (8009a0c <sen5x_check_for_errors+0xd8>)
 80099d6:	4b08      	ldr	r3, [pc, #32]	@ (80099f8 <sen5x_check_for_errors+0xc4>)
 80099d8:	0019      	movs	r1, r3
 80099da:	2003      	movs	r0, #3
 80099dc:	f004 fcaa 	bl	800e334 <CreateLine>
  }
  return 1;
 80099e0:	2301      	movs	r3, #1
}
 80099e2:	0018      	movs	r0, r3
 80099e4:	46bd      	mov	sp, r7
 80099e6:	b002      	add	sp, #8
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	46c0      	nop			@ (mov r8, r8)
 80099ec:	0802488c 	.word	0x0802488c
 80099f0:	08024488 	.word	0x08024488
 80099f4:	080248b8 	.word	0x080248b8
 80099f8:	080243a8 	.word	0x080243a8
 80099fc:	080248d8 	.word	0x080248d8
 8009a00:	080248f4 	.word	0x080248f4
 8009a04:	08024918 	.word	0x08024918
 8009a08:	08024938 	.word	0x08024938
 8009a0c:	0802494c 	.word	0x0802494c

08009a10 <set_light_on_state>:

void set_light_on_state(void) {
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009a14:	4b15      	ldr	r3, [pc, #84]	@ (8009a6c <set_light_on_state+0x5c>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	4053      	eors	r3, r2
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d008      	beq.n	8009a34 <set_light_on_state+0x24>
    sen5x_Power_On();
 8009a22:	f7ff fb4d 	bl	80090c0 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009a26:	4a12      	ldr	r2, [pc, #72]	@ (8009a70 <set_light_on_state+0x60>)
 8009a28:	4b12      	ldr	r3, [pc, #72]	@ (8009a74 <set_light_on_state+0x64>)
 8009a2a:	0019      	movs	r1, r3
 8009a2c:	2003      	movs	r0, #3
 8009a2e:	f004 fc81 	bl	800e334 <CreateLine>
 8009a32:	e00a      	b.n	8009a4a <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009a34:	f005 f8d4 	bl	800ebe0 <HAL_GetTick>
 8009a38:	0002      	movs	r2, r0
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a78 <set_light_on_state+0x68>)
 8009a3c:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8009a7c <set_light_on_state+0x6c>)
 8009a40:	4b0c      	ldr	r3, [pc, #48]	@ (8009a74 <set_light_on_state+0x64>)
 8009a42:	0019      	movs	r1, r3
 8009a44:	2003      	movs	r0, #3
 8009a46:	f004 fc75 	bl	800e334 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009a4a:	f7ff fca7 	bl	800939c <sen5x_lightup_measurement>
 8009a4e:	1e03      	subs	r3, r0, #0
 8009a50:	d005      	beq.n	8009a5e <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009a52:	4a0b      	ldr	r2, [pc, #44]	@ (8009a80 <set_light_on_state+0x70>)
 8009a54:	4b0b      	ldr	r3, [pc, #44]	@ (8009a84 <set_light_on_state+0x74>)
 8009a56:	0019      	movs	r1, r3
 8009a58:	2001      	movs	r0, #1
 8009a5a:	f004 fc6b 	bl	800e334 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a88 <set_light_on_state+0x78>)
 8009a60:	2203      	movs	r2, #3
 8009a62:	701a      	strb	r2, [r3, #0]
}
 8009a64:	46c0      	nop			@ (mov r8, r8)
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	46c0      	nop			@ (mov r8, r8)
 8009a6c:	2000125d 	.word	0x2000125d
 8009a70:	08024988 	.word	0x08024988
 8009a74:	080243a8 	.word	0x080243a8
 8009a78:	20001274 	.word	0x20001274
 8009a7c:	080249b4 	.word	0x080249b4
 8009a80:	080249cc 	.word	0x080249cc
 8009a84:	08024488 	.word	0x08024488
 8009a88:	20000085 	.word	0x20000085

08009a8c <sen5x_statemachine>:

void sen5x_statemachine() {
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009a92:	1dfb      	adds	r3, r7, #7
 8009a94:	2200      	movs	r2, #0
 8009a96:	701a      	strb	r2, [r3, #0]
//  Debug("sen5xReadTimer has value %d", sen5xReadTimer);
  if (TimestampIsReached(sen5xReadTimer)) {
 8009a98:	4b75      	ldr	r3, [pc, #468]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	f004 fbf3 	bl	800e288 <TimestampIsReached>
 8009aa2:	1e03      	subs	r3, r0, #0
 8009aa4:	d100      	bne.n	8009aa8 <sen5x_statemachine+0x1c>
 8009aa6:	e0df      	b.n	8009c68 <sen5x_statemachine+0x1dc>
    switch (PMsamplesState) {
 8009aa8:	4b72      	ldr	r3, [pc, #456]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b05      	cmp	r3, #5
 8009aae:	d900      	bls.n	8009ab2 <sen5x_statemachine+0x26>
 8009ab0:	e0da      	b.n	8009c68 <sen5x_statemachine+0x1dc>
 8009ab2:	009a      	lsls	r2, r3, #2
 8009ab4:	4b70      	ldr	r3, [pc, #448]	@ (8009c78 <sen5x_statemachine+0x1ec>)
 8009ab6:	18d3      	adds	r3, r2, r3
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009abc:	4a6f      	ldr	r2, [pc, #444]	@ (8009c7c <sen5x_statemachine+0x1f0>)
 8009abe:	4b70      	ldr	r3, [pc, #448]	@ (8009c80 <sen5x_statemachine+0x1f4>)
 8009ac0:	0019      	movs	r1, r3
 8009ac2:	2001      	movs	r0, #1
 8009ac4:	f004 fc36 	bl	800e334 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009ac8:	f005 f88a 	bl	800ebe0 <HAL_GetTick>
 8009acc:	0003      	movs	r3, r0
 8009ace:	4a6d      	ldr	r2, [pc, #436]	@ (8009c84 <sen5x_statemachine+0x1f8>)
 8009ad0:	189a      	adds	r2, r3, r2
 8009ad2:	4b67      	ldr	r3, [pc, #412]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009ad4:	601a      	str	r2, [r3, #0]
      break;
 8009ad6:	e0c7      	b.n	8009c68 <sen5x_statemachine+0x1dc>
    case LIGHT_OUT:
//      Debug("state is LIGHT_OUT");
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009ad8:	f005 f882 	bl	800ebe0 <HAL_GetTick>
 8009adc:	0003      	movs	r3, r0
 8009ade:	4a6a      	ldr	r2, [pc, #424]	@ (8009c88 <sen5x_statemachine+0x1fc>)
 8009ae0:	189a      	adds	r2, r3, r2
 8009ae2:	4b63      	ldr	r3, [pc, #396]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009ae4:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009ae6:	f7ff ff93 	bl	8009a10 <set_light_on_state>
      break;
 8009aea:	e0bd      	b.n	8009c68 <sen5x_statemachine+0x1dc>
    case CHECK_SEN5X:
//      Debug("state is CHECK_SEN5X");
      PMsamplesState = LIGHT_ON;
 8009aec:	4b61      	ldr	r3, [pc, #388]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009aee:	2202      	movs	r2, #2
 8009af0:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009af2:	4b66      	ldr	r3, [pc, #408]	@ (8009c8c <sen5x_statemachine+0x200>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	2b05      	cmp	r3, #5
 8009af8:	d905      	bls.n	8009b06 <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 8009afa:	4b5e      	ldr	r3, [pc, #376]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009b00:	f7ff fafe 	bl	8009100 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009b04:	e0ad      	b.n	8009c62 <sen5x_statemachine+0x1d6>
        if (sen5x_check_for_errors()) {
 8009b06:	f7ff ff15 	bl	8009934 <sen5x_check_for_errors>
 8009b0a:	1e03      	subs	r3, r0, #0
 8009b0c:	d100      	bne.n	8009b10 <sen5x_statemachine+0x84>
 8009b0e:	e0a8      	b.n	8009c62 <sen5x_statemachine+0x1d6>
          if (sen5x_device_reset()) {
 8009b10:	f000 fc44 	bl	800a39c <sen5x_device_reset>
 8009b14:	1e03      	subs	r3, r0, #0
 8009b16:	d006      	beq.n	8009b26 <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009b18:	4a5d      	ldr	r2, [pc, #372]	@ (8009c90 <sen5x_statemachine+0x204>)
 8009b1a:	4b59      	ldr	r3, [pc, #356]	@ (8009c80 <sen5x_statemachine+0x1f4>)
 8009b1c:	0019      	movs	r1, r3
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f004 fc08 	bl	800e334 <CreateLine>
 8009b24:	e005      	b.n	8009b32 <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 8009b26:	4a5b      	ldr	r2, [pc, #364]	@ (8009c94 <sen5x_statemachine+0x208>)
 8009b28:	4b5b      	ldr	r3, [pc, #364]	@ (8009c98 <sen5x_statemachine+0x20c>)
 8009b2a:	0019      	movs	r1, r3
 8009b2c:	2002      	movs	r0, #2
 8009b2e:	f004 fc01 	bl	800e334 <CreateLine>
          sen5xErrors++;
 8009b32:	4b56      	ldr	r3, [pc, #344]	@ (8009c8c <sen5x_statemachine+0x200>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	3301      	adds	r3, #1
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	4b54      	ldr	r3, [pc, #336]	@ (8009c8c <sen5x_statemachine+0x200>)
 8009b3c:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009b3e:	f005 f84f 	bl	800ebe0 <HAL_GetTick>
 8009b42:	0003      	movs	r3, r0
 8009b44:	3396      	adds	r3, #150	@ 0x96
 8009b46:	001a      	movs	r2, r3
 8009b48:	4b49      	ldr	r3, [pc, #292]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009b4a:	601a      	str	r2, [r3, #0]
      break;
 8009b4c:	e089      	b.n	8009c62 <sen5x_statemachine+0x1d6>
    case LIGHT_ON:
//      Debug("state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 8009b4e:	1dfb      	adds	r3, r7, #7
 8009b50:	0018      	movs	r0, r3
 8009b52:	f000 f93f 	bl	8009dd4 <sen5x_read_data_ready>
      if (data_ready) {
 8009b56:	1dfb      	adds	r3, r7, #7
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d028      	beq.n	8009bb0 <sen5x_statemachine+0x124>
        SetPMIndicator();
 8009b5e:	f003 fc45 	bl	800d3ec <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 8009b62:	4b4e      	ldr	r3, [pc, #312]	@ (8009c9c <sen5x_statemachine+0x210>)
 8009b64:	0018      	movs	r0, r3
 8009b66:	f7ff fcbf 	bl	80094e8 <sen5x_read_measurement>
 8009b6a:	1e03      	subs	r3, r0, #0
 8009b6c:	d005      	beq.n	8009b7a <sen5x_statemachine+0xee>
          Error("Error executing sen5x_read_measured_values()");
 8009b6e:	4a4c      	ldr	r2, [pc, #304]	@ (8009ca0 <sen5x_statemachine+0x214>)
 8009b70:	4b43      	ldr	r3, [pc, #268]	@ (8009c80 <sen5x_statemachine+0x1f4>)
 8009b72:	0019      	movs	r1, r3
 8009b74:	2001      	movs	r0, #1
 8009b76:	f004 fbdd 	bl	800e334 <CreateLine>
        }
        sen5xSamples++;
 8009b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	4b48      	ldr	r3, [pc, #288]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009b84:	701a      	strb	r2, [r3, #0]
        sen5xStoreMax();
 8009b86:	f7ff fdfd 	bl	8009784 <sen5xStoreMax>
        if (sen5xSamples == 31) { // about two times a minute
 8009b8a:	4b46      	ldr	r3, [pc, #280]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	2b1f      	cmp	r3, #31
 8009b90:	d102      	bne.n	8009b98 <sen5x_statemachine+0x10c>
          sen5xSamples = 0;  // enable display on serial
 8009b92:	4b44      	ldr	r3, [pc, #272]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 8009b98:	4b42      	ldr	r3, [pc, #264]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d901      	bls.n	8009ba4 <sen5x_statemachine+0x118>
          sen5xStoreMax();
 8009ba0:	f7ff fdf0 	bl	8009784 <sen5xStoreMax>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 8009ba4:	4b3f      	ldr	r3, [pc, #252]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d101      	bne.n	8009bb0 <sen5x_statemachine+0x124>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 8009bac:	f7ff fcf8 	bl	80095a0 <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 8009bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8009ca8 <sen5x_statemachine+0x21c>)
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d103      	bne.n	8009bc0 <sen5x_statemachine+0x134>
 8009bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d952      	bls.n	8009c66 <sen5x_statemachine+0x1da>
        PMsamplesState = CLEAN_FAN;
 8009bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009bc2:	2204      	movs	r2, #4
 8009bc4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009bc6:	e04e      	b.n	8009c66 <sen5x_statemachine+0x1da>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
//      Debug(" state is CLEAN_FAN");
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009bc8:	f7fc ff0c 	bl	80069e4 <RTC_GetWeekday>
 8009bcc:	0003      	movs	r3, r0
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d118      	bne.n	8009c04 <sen5x_statemachine+0x178>
 8009bd2:	4b36      	ldr	r3, [pc, #216]	@ (8009cac <sen5x_statemachine+0x220>)
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	4053      	eors	r3, r2
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d011      	beq.n	8009c04 <sen5x_statemachine+0x178>
        sen5x_start_fan_cleaning();
 8009be0:	f000 f9de 	bl	8009fa0 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009be4:	4a32      	ldr	r2, [pc, #200]	@ (8009cb0 <sen5x_statemachine+0x224>)
 8009be6:	4b2c      	ldr	r3, [pc, #176]	@ (8009c98 <sen5x_statemachine+0x20c>)
 8009be8:	0019      	movs	r1, r3
 8009bea:	2002      	movs	r0, #2
 8009bec:	f004 fba2 	bl	800e334 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 8009bf0:	f004 fff6 	bl	800ebe0 <HAL_GetTick>
 8009bf4:	0003      	movs	r3, r0
 8009bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8009cb4 <sen5x_statemachine+0x228>)
 8009bf8:	189a      	adds	r2, r3, r2
 8009bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009bfc:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 8009bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8009cac <sen5x_statemachine+0x220>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009c04:	4b1b      	ldr	r3, [pc, #108]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009c06:	2205      	movs	r2, #5
 8009c08:	701a      	strb	r2, [r3, #0]
      break;
 8009c0a:	e02d      	b.n	8009c68 <sen5x_statemachine+0x1dc>
    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      if (!usbPluggedIn) {
 8009c0c:	4b26      	ldr	r3, [pc, #152]	@ (8009ca8 <sen5x_statemachine+0x21c>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	2201      	movs	r2, #1
 8009c12:	4053      	eors	r3, r2
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d015      	beq.n	8009c46 <sen5x_statemachine+0x1ba>
        if (sen5x_extinguish_measurement()) {
 8009c1a:	f7ff fc0b 	bl	8009434 <sen5x_extinguish_measurement>
 8009c1e:	1e03      	subs	r3, r0, #0
 8009c20:	d005      	beq.n	8009c2e <sen5x_statemachine+0x1a2>
          Error("Error executing sen5x_extinguish_measurement()");
 8009c22:	4a25      	ldr	r2, [pc, #148]	@ (8009cb8 <sen5x_statemachine+0x22c>)
 8009c24:	4b16      	ldr	r3, [pc, #88]	@ (8009c80 <sen5x_statemachine+0x1f4>)
 8009c26:	0019      	movs	r1, r3
 8009c28:	2001      	movs	r0, #1
 8009c2a:	f004 fb83 	bl	800e334 <CreateLine>
        }
        sen5xSamples = 0;
 8009c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ca4 <sen5x_statemachine+0x218>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009c34:	f7ff fa64 	bl	8009100 <sen5x_Power_Off>
        SetPMSensorStatus(false);
 8009c38:	2000      	movs	r0, #0
 8009c3a:	f7fe fbbd 	bl	80083b8 <SetPMSensorStatus>
        PMsamplesState = LIGHT_OUT;
 8009c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	e002      	b.n	8009c4c <sen5x_statemachine+0x1c0>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009c46:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <sen5x_statemachine+0x1e8>)
 8009c48:	2203      	movs	r2, #3
 8009c4a:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 8009c4c:	f003 fbee 	bl	800d42c <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009c50:	f004 ffc6 	bl	800ebe0 <HAL_GetTick>
 8009c54:	0003      	movs	r3, r0
 8009c56:	22fa      	movs	r2, #250	@ 0xfa
 8009c58:	0092      	lsls	r2, r2, #2
 8009c5a:	189a      	adds	r2, r3, r2
 8009c5c:	4b04      	ldr	r3, [pc, #16]	@ (8009c70 <sen5x_statemachine+0x1e4>)
 8009c5e:	601a      	str	r2, [r3, #0]
    }
  }
}
 8009c60:	e002      	b.n	8009c68 <sen5x_statemachine+0x1dc>
      break;
 8009c62:	46c0      	nop			@ (mov r8, r8)
 8009c64:	e000      	b.n	8009c68 <sen5x_statemachine+0x1dc>
      break;
 8009c66:	46c0      	nop			@ (mov r8, r8)
}
 8009c68:	46c0      	nop			@ (mov r8, r8)
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	b002      	add	sp, #8
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	20001274 	.word	0x20001274
 8009c74:	20000085 	.word	0x20000085
 8009c78:	080253b4 	.word	0x080253b4
 8009c7c:	080249f8 	.word	0x080249f8
 8009c80:	08024488 	.word	0x08024488
 8009c84:	002fefd8 	.word	0x002fefd8
 8009c88:	00005910 	.word	0x00005910
 8009c8c:	20001269 	.word	0x20001269
 8009c90:	08024a28 	.word	0x08024a28
 8009c94:	08024a40 	.word	0x08024a40
 8009c98:	080243d0 	.word	0x080243d0
 8009c9c:	20001278 	.word	0x20001278
 8009ca0:	08024a58 	.word	0x08024a58
 8009ca4:	20001268 	.word	0x20001268
 8009ca8:	200021f5 	.word	0x200021f5
 8009cac:	2000125c 	.word	0x2000125c
 8009cb0:	08024a88 	.word	0x08024a88
 8009cb4:	00002710 	.word	0x00002710
 8009cb8:	08024aa0 	.word	0x08024aa0

08009cbc <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009cbc:	b590      	push	{r4, r7, lr}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009cc2:	1dbb      	adds	r3, r7, #6
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009cc8:	1dbc      	adds	r4, r7, #6
 8009cca:	1dbb      	adds	r3, r7, #6
 8009ccc:	8819      	ldrh	r1, [r3, #0]
 8009cce:	003b      	movs	r3, r7
 8009cd0:	2221      	movs	r2, #33	@ 0x21
 8009cd2:	0018      	movs	r0, r3
 8009cd4:	f001 fb56 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009cd8:	0003      	movs	r3, r0
 8009cda:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009cdc:	1d3c      	adds	r4, r7, #4
 8009cde:	1dbb      	adds	r3, r7, #6
 8009ce0:	881a      	ldrh	r2, [r3, #0]
 8009ce2:	003b      	movs	r3, r7
 8009ce4:	0019      	movs	r1, r3
 8009ce6:	2069      	movs	r0, #105	@ 0x69
 8009ce8:	f001 fbd0 	bl	800b48c <sensirion_i2c_write_data>
 8009cec:	0003      	movs	r3, r0
 8009cee:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009cf0:	1d3b      	adds	r3, r7, #4
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	5e9b      	ldrsh	r3, [r3, r2]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <sen5x_start_measurement+0x46>
        return error;
 8009cfa:	1d3b      	adds	r3, r7, #4
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	5e9b      	ldrsh	r3, [r3, r2]
 8009d00:	e004      	b.n	8009d0c <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009d02:	4b04      	ldr	r3, [pc, #16]	@ (8009d14 <sen5x_start_measurement+0x58>)
 8009d04:	0018      	movs	r0, r3
 8009d06:	f7ff fdf5 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	b003      	add	sp, #12
 8009d12:	bd90      	pop	{r4, r7, pc}
 8009d14:	0000c350 	.word	0x0000c350

08009d18 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d1e:	1dbb      	adds	r3, r7, #6
 8009d20:	2200      	movs	r2, #0
 8009d22:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 8009d24:	1dbc      	adds	r4, r7, #6
 8009d26:	1dbb      	adds	r3, r7, #6
 8009d28:	8819      	ldrh	r1, [r3, #0]
 8009d2a:	003b      	movs	r3, r7
 8009d2c:	2237      	movs	r2, #55	@ 0x37
 8009d2e:	0018      	movs	r0, r3
 8009d30:	f001 fb28 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009d34:	0003      	movs	r3, r0
 8009d36:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d38:	1d3c      	adds	r4, r7, #4
 8009d3a:	1dbb      	adds	r3, r7, #6
 8009d3c:	881a      	ldrh	r2, [r3, #0]
 8009d3e:	003b      	movs	r3, r7
 8009d40:	0019      	movs	r1, r3
 8009d42:	2069      	movs	r0, #105	@ 0x69
 8009d44:	f001 fba2 	bl	800b48c <sensirion_i2c_write_data>
 8009d48:	0003      	movs	r3, r0
 8009d4a:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d4c:	1d3b      	adds	r3, r7, #4
 8009d4e:	2200      	movs	r2, #0
 8009d50:	5e9b      	ldrsh	r3, [r3, r2]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <sen5x_start_measurement_without_pm+0x46>
        return error;
 8009d56:	1d3b      	adds	r3, r7, #4
 8009d58:	2200      	movs	r2, #0
 8009d5a:	5e9b      	ldrsh	r3, [r3, r2]
 8009d5c:	e004      	b.n	8009d68 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009d5e:	4b04      	ldr	r3, [pc, #16]	@ (8009d70 <sen5x_start_measurement_without_pm+0x58>)
 8009d60:	0018      	movs	r0, r3
 8009d62:	f7ff fdc7 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	0018      	movs	r0, r3
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	b003      	add	sp, #12
 8009d6e:	bd90      	pop	{r4, r7, pc}
 8009d70:	0000c350 	.word	0x0000c350

08009d74 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 8009d74:	b590      	push	{r4, r7, lr}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d7a:	1dbb      	adds	r3, r7, #6
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009d80:	1dbc      	adds	r4, r7, #6
 8009d82:	2382      	movs	r3, #130	@ 0x82
 8009d84:	005a      	lsls	r2, r3, #1
 8009d86:	1dbb      	adds	r3, r7, #6
 8009d88:	8819      	ldrh	r1, [r3, #0]
 8009d8a:	003b      	movs	r3, r7
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	f001 faf9 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009d92:	0003      	movs	r3, r0
 8009d94:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d96:	1d3c      	adds	r4, r7, #4
 8009d98:	1dbb      	adds	r3, r7, #6
 8009d9a:	881a      	ldrh	r2, [r3, #0]
 8009d9c:	003b      	movs	r3, r7
 8009d9e:	0019      	movs	r1, r3
 8009da0:	2069      	movs	r0, #105	@ 0x69
 8009da2:	f001 fb73 	bl	800b48c <sensirion_i2c_write_data>
 8009da6:	0003      	movs	r3, r0
 8009da8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009daa:	1d3b      	adds	r3, r7, #4
 8009dac:	2200      	movs	r2, #0
 8009dae:	5e9b      	ldrsh	r3, [r3, r2]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d003      	beq.n	8009dbc <sen5x_stop_measurement+0x48>
        return error;
 8009db4:	1d3b      	adds	r3, r7, #4
 8009db6:	2200      	movs	r2, #0
 8009db8:	5e9b      	ldrsh	r3, [r3, r2]
 8009dba:	e004      	b.n	8009dc6 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009dbc:	4b04      	ldr	r3, [pc, #16]	@ (8009dd0 <sen5x_stop_measurement+0x5c>)
 8009dbe:	0018      	movs	r0, r3
 8009dc0:	f7ff fd98 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	b003      	add	sp, #12
 8009dcc:	bd90      	pop	{r4, r7, pc}
 8009dce:	46c0      	nop			@ (mov r8, r8)
 8009dd0:	00030d40 	.word	0x00030d40

08009dd4 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009ddc:	250e      	movs	r5, #14
 8009dde:	197b      	adds	r3, r7, r5
 8009de0:	2200      	movs	r2, #0
 8009de2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009de4:	197c      	adds	r4, r7, r5
 8009de6:	4a22      	ldr	r2, [pc, #136]	@ (8009e70 <sen5x_read_data_ready+0x9c>)
 8009de8:	197b      	adds	r3, r7, r5
 8009dea:	8819      	ldrh	r1, [r3, #0]
 8009dec:	2308      	movs	r3, #8
 8009dee:	18fb      	adds	r3, r7, r3
 8009df0:	0018      	movs	r0, r3
 8009df2:	f001 fac7 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009df6:	0003      	movs	r3, r0
 8009df8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009dfa:	260c      	movs	r6, #12
 8009dfc:	19bc      	adds	r4, r7, r6
 8009dfe:	197b      	adds	r3, r7, r5
 8009e00:	881a      	ldrh	r2, [r3, #0]
 8009e02:	2308      	movs	r3, #8
 8009e04:	18fb      	adds	r3, r7, r3
 8009e06:	0019      	movs	r1, r3
 8009e08:	2069      	movs	r0, #105	@ 0x69
 8009e0a:	f001 fb3f 	bl	800b48c <sensirion_i2c_write_data>
 8009e0e:	0003      	movs	r3, r0
 8009e10:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e12:	19bb      	adds	r3, r7, r6
 8009e14:	2200      	movs	r2, #0
 8009e16:	5e9b      	ldrsh	r3, [r3, r2]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <sen5x_read_data_ready+0x50>
        return error;
 8009e1c:	19bb      	adds	r3, r7, r6
 8009e1e:	2200      	movs	r2, #0
 8009e20:	5e9b      	ldrsh	r3, [r3, r2]
 8009e22:	e020      	b.n	8009e66 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009e24:	4b13      	ldr	r3, [pc, #76]	@ (8009e74 <sen5x_read_data_ready+0xa0>)
 8009e26:	0018      	movs	r0, r3
 8009e28:	f7ff fd64 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009e2c:	250c      	movs	r5, #12
 8009e2e:	197c      	adds	r4, r7, r5
 8009e30:	2308      	movs	r3, #8
 8009e32:	18fb      	adds	r3, r7, r3
 8009e34:	2202      	movs	r2, #2
 8009e36:	0019      	movs	r1, r3
 8009e38:	2069      	movs	r0, #105	@ 0x69
 8009e3a:	f001 fb3f 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 8009e3e:	0003      	movs	r3, r0
 8009e40:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e42:	197b      	adds	r3, r7, r5
 8009e44:	2200      	movs	r2, #0
 8009e46:	5e9b      	ldrsh	r3, [r3, r2]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <sen5x_read_data_ready+0x80>
        return error;
 8009e4c:	197b      	adds	r3, r7, r5
 8009e4e:	2200      	movs	r2, #0
 8009e50:	5e9b      	ldrsh	r3, [r3, r2]
 8009e52:	e008      	b.n	8009e66 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8009e54:	2308      	movs	r3, #8
 8009e56:	18fb      	adds	r3, r7, r3
 8009e58:	785b      	ldrb	r3, [r3, #1]
 8009e5a:	1e5a      	subs	r2, r3, #1
 8009e5c:	4193      	sbcs	r3, r2
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	0018      	movs	r0, r3
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	b005      	add	sp, #20
 8009e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e6e:	46c0      	nop			@ (mov r8, r8)
 8009e70:	00000202 	.word	0x00000202
 8009e74:	00004e20 	.word	0x00004e20

08009e78 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8009e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e7a:	b08d      	sub	sp, #52	@ 0x34
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8009e86:	252e      	movs	r5, #46	@ 0x2e
 8009e88:	197b      	adds	r3, r7, r5
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8009e8e:	197c      	adds	r4, r7, r5
 8009e90:	23f1      	movs	r3, #241	@ 0xf1
 8009e92:	009a      	lsls	r2, r3, #2
 8009e94:	197b      	adds	r3, r7, r5
 8009e96:	8819      	ldrh	r1, [r3, #0]
 8009e98:	2314      	movs	r3, #20
 8009e9a:	18fb      	adds	r3, r7, r3
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	f001 fa71 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009ea2:	0003      	movs	r3, r0
 8009ea4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009ea6:	262c      	movs	r6, #44	@ 0x2c
 8009ea8:	19bc      	adds	r4, r7, r6
 8009eaa:	197b      	adds	r3, r7, r5
 8009eac:	881a      	ldrh	r2, [r3, #0]
 8009eae:	2314      	movs	r3, #20
 8009eb0:	18fb      	adds	r3, r7, r3
 8009eb2:	0019      	movs	r1, r3
 8009eb4:	2069      	movs	r0, #105	@ 0x69
 8009eb6:	f001 fae9 	bl	800b48c <sensirion_i2c_write_data>
 8009eba:	0003      	movs	r3, r0
 8009ebc:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ebe:	19bb      	adds	r3, r7, r6
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d003      	beq.n	8009ed0 <sen5x_read_measured_values+0x58>
        return error;
 8009ec8:	19bb      	adds	r3, r7, r6
 8009eca:	2200      	movs	r2, #0
 8009ecc:	5e9b      	ldrsh	r3, [r3, r2]
 8009ece:	e060      	b.n	8009f92 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009ed0:	4b32      	ldr	r3, [pc, #200]	@ (8009f9c <sen5x_read_measured_values+0x124>)
 8009ed2:	0018      	movs	r0, r3
 8009ed4:	f7ff fd0e 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8009ed8:	252c      	movs	r5, #44	@ 0x2c
 8009eda:	197c      	adds	r4, r7, r5
 8009edc:	2314      	movs	r3, #20
 8009ede:	18fb      	adds	r3, r7, r3
 8009ee0:	2210      	movs	r2, #16
 8009ee2:	0019      	movs	r1, r3
 8009ee4:	2069      	movs	r0, #105	@ 0x69
 8009ee6:	f001 fae9 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 8009eea:	0003      	movs	r3, r0
 8009eec:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009eee:	197b      	adds	r3, r7, r5
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d003      	beq.n	8009f00 <sen5x_read_measured_values+0x88>
        return error;
 8009ef8:	197b      	adds	r3, r7, r5
 8009efa:	2200      	movs	r2, #0
 8009efc:	5e9b      	ldrsh	r3, [r3, r2]
 8009efe:	e048      	b.n	8009f92 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8009f00:	2414      	movs	r4, #20
 8009f02:	193b      	adds	r3, r7, r4
 8009f04:	0018      	movs	r0, r3
 8009f06:	f000 fa79 	bl	800a3fc <sensirion_common_bytes_to_uint16_t>
 8009f0a:	0003      	movs	r3, r0
 8009f0c:	001a      	movs	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8009f12:	193b      	adds	r3, r7, r4
 8009f14:	3302      	adds	r3, #2
 8009f16:	0018      	movs	r0, r3
 8009f18:	f000 fa70 	bl	800a3fc <sensirion_common_bytes_to_uint16_t>
 8009f1c:	0003      	movs	r3, r0
 8009f1e:	001a      	movs	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8009f24:	193b      	adds	r3, r7, r4
 8009f26:	3304      	adds	r3, #4
 8009f28:	0018      	movs	r0, r3
 8009f2a:	f000 fa67 	bl	800a3fc <sensirion_common_bytes_to_uint16_t>
 8009f2e:	0003      	movs	r3, r0
 8009f30:	001a      	movs	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8009f36:	193b      	adds	r3, r7, r4
 8009f38:	3306      	adds	r3, #6
 8009f3a:	0018      	movs	r0, r3
 8009f3c:	f000 fa5e 	bl	800a3fc <sensirion_common_bytes_to_uint16_t>
 8009f40:	0003      	movs	r3, r0
 8009f42:	001a      	movs	r2, r3
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009f48:	193b      	adds	r3, r7, r4
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	f000 fa81 	bl	800a454 <sensirion_common_bytes_to_int16_t>
 8009f52:	0003      	movs	r3, r0
 8009f54:	001a      	movs	r2, r3
 8009f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f58:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009f5a:	193b      	adds	r3, r7, r4
 8009f5c:	330a      	adds	r3, #10
 8009f5e:	0018      	movs	r0, r3
 8009f60:	f000 fa78 	bl	800a454 <sensirion_common_bytes_to_int16_t>
 8009f64:	0003      	movs	r3, r0
 8009f66:	001a      	movs	r2, r3
 8009f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f6a:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009f6c:	193b      	adds	r3, r7, r4
 8009f6e:	330c      	adds	r3, #12
 8009f70:	0018      	movs	r0, r3
 8009f72:	f000 fa6f 	bl	800a454 <sensirion_common_bytes_to_int16_t>
 8009f76:	0003      	movs	r3, r0
 8009f78:	001a      	movs	r2, r3
 8009f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f7c:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009f7e:	193b      	adds	r3, r7, r4
 8009f80:	330e      	adds	r3, #14
 8009f82:	0018      	movs	r0, r3
 8009f84:	f000 fa66 	bl	800a454 <sensirion_common_bytes_to_int16_t>
 8009f88:	0003      	movs	r3, r0
 8009f8a:	001a      	movs	r2, r3
 8009f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f8e:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	0018      	movs	r0, r3
 8009f94:	46bd      	mov	sp, r7
 8009f96:	b00d      	add	sp, #52	@ 0x34
 8009f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9a:	46c0      	nop			@ (mov r8, r8)
 8009f9c:	00004e20 	.word	0x00004e20

08009fa0 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8009fa0:	b590      	push	{r4, r7, lr}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009fa6:	1dbb      	adds	r3, r7, #6
 8009fa8:	2200      	movs	r2, #0
 8009faa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8009fac:	1dbc      	adds	r4, r7, #6
 8009fae:	4a12      	ldr	r2, [pc, #72]	@ (8009ff8 <sen5x_start_fan_cleaning+0x58>)
 8009fb0:	1dbb      	adds	r3, r7, #6
 8009fb2:	8819      	ldrh	r1, [r3, #0]
 8009fb4:	003b      	movs	r3, r7
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	f001 f9e4 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 8009fbc:	0003      	movs	r3, r0
 8009fbe:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009fc0:	1d3c      	adds	r4, r7, #4
 8009fc2:	1dbb      	adds	r3, r7, #6
 8009fc4:	881a      	ldrh	r2, [r3, #0]
 8009fc6:	003b      	movs	r3, r7
 8009fc8:	0019      	movs	r1, r3
 8009fca:	2069      	movs	r0, #105	@ 0x69
 8009fcc:	f001 fa5e 	bl	800b48c <sensirion_i2c_write_data>
 8009fd0:	0003      	movs	r3, r0
 8009fd2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009fd4:	1d3b      	adds	r3, r7, #4
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	5e9b      	ldrsh	r3, [r3, r2]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <sen5x_start_fan_cleaning+0x46>
        return error;
 8009fde:	1d3b      	adds	r3, r7, #4
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	5e9b      	ldrsh	r3, [r3, r2]
 8009fe4:	e004      	b.n	8009ff0 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009fe6:	4b05      	ldr	r3, [pc, #20]	@ (8009ffc <sen5x_start_fan_cleaning+0x5c>)
 8009fe8:	0018      	movs	r0, r3
 8009fea:	f7ff fc83 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	0018      	movs	r0, r3
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	b003      	add	sp, #12
 8009ff6:	bd90      	pop	{r4, r7, pc}
 8009ff8:	00005607 	.word	0x00005607
 8009ffc:	00004e20 	.word	0x00004e20

0800a000 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a002:	b087      	sub	sp, #28
 800a004:	af00      	add	r7, sp, #0
 800a006:	0004      	movs	r4, r0
 800a008:	0008      	movs	r0, r1
 800a00a:	0011      	movs	r1, r2
 800a00c:	1dbb      	adds	r3, r7, #6
 800a00e:	1c22      	adds	r2, r4, #0
 800a010:	801a      	strh	r2, [r3, #0]
 800a012:	1d3b      	adds	r3, r7, #4
 800a014:	1c02      	adds	r2, r0, #0
 800a016:	801a      	strh	r2, [r3, #0]
 800a018:	1cbb      	adds	r3, r7, #2
 800a01a:	1c0a      	adds	r2, r1, #0
 800a01c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a01e:	2516      	movs	r5, #22
 800a020:	197b      	adds	r3, r7, r5
 800a022:	2200      	movs	r2, #0
 800a024:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a026:	197c      	adds	r4, r7, r5
 800a028:	4a25      	ldr	r2, [pc, #148]	@ (800a0c0 <sen5x_set_temperature_offset_parameters+0xc0>)
 800a02a:	197b      	adds	r3, r7, r5
 800a02c:	8819      	ldrh	r1, [r3, #0]
 800a02e:	2608      	movs	r6, #8
 800a030:	19bb      	adds	r3, r7, r6
 800a032:	0018      	movs	r0, r3
 800a034:	f001 f9a6 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a038:	0003      	movs	r3, r0
 800a03a:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a03c:	197c      	adds	r4, r7, r5
 800a03e:	1dbb      	adds	r3, r7, #6
 800a040:	2200      	movs	r2, #0
 800a042:	5e9a      	ldrsh	r2, [r3, r2]
 800a044:	197b      	adds	r3, r7, r5
 800a046:	8819      	ldrh	r1, [r3, #0]
 800a048:	19bb      	adds	r3, r7, r6
 800a04a:	0018      	movs	r0, r3
 800a04c:	f001 fa05 	bl	800b45a <sensirion_i2c_add_int16_t_to_buffer>
 800a050:	0003      	movs	r3, r0
 800a052:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a054:	197c      	adds	r4, r7, r5
 800a056:	1d3b      	adds	r3, r7, #4
 800a058:	2200      	movs	r2, #0
 800a05a:	5e9a      	ldrsh	r2, [r3, r2]
 800a05c:	197b      	adds	r3, r7, r5
 800a05e:	8819      	ldrh	r1, [r3, #0]
 800a060:	19bb      	adds	r3, r7, r6
 800a062:	0018      	movs	r0, r3
 800a064:	f001 f9f9 	bl	800b45a <sensirion_i2c_add_int16_t_to_buffer>
 800a068:	0003      	movs	r3, r0
 800a06a:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a06c:	197c      	adds	r4, r7, r5
 800a06e:	1cbb      	adds	r3, r7, #2
 800a070:	881a      	ldrh	r2, [r3, #0]
 800a072:	197b      	adds	r3, r7, r5
 800a074:	8819      	ldrh	r1, [r3, #0]
 800a076:	19bb      	adds	r3, r7, r6
 800a078:	0018      	movs	r0, r3
 800a07a:	f001 f9af 	bl	800b3dc <sensirion_i2c_add_uint16_t_to_buffer>
 800a07e:	0003      	movs	r3, r0
 800a080:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a082:	2214      	movs	r2, #20
 800a084:	18bc      	adds	r4, r7, r2
 800a086:	197b      	adds	r3, r7, r5
 800a088:	881a      	ldrh	r2, [r3, #0]
 800a08a:	19bb      	adds	r3, r7, r6
 800a08c:	0019      	movs	r1, r3
 800a08e:	2069      	movs	r0, #105	@ 0x69
 800a090:	f001 f9fc 	bl	800b48c <sensirion_i2c_write_data>
 800a094:	0003      	movs	r3, r0
 800a096:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a098:	2214      	movs	r2, #20
 800a09a:	18bb      	adds	r3, r7, r2
 800a09c:	2100      	movs	r1, #0
 800a09e:	5e5b      	ldrsh	r3, [r3, r1]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d003      	beq.n	800a0ac <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a0a4:	18bb      	adds	r3, r7, r2
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	5e9b      	ldrsh	r3, [r3, r2]
 800a0aa:	e004      	b.n	800a0b6 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a0ac:	4b05      	ldr	r3, [pc, #20]	@ (800a0c4 <sen5x_set_temperature_offset_parameters+0xc4>)
 800a0ae:	0018      	movs	r0, r3
 800a0b0:	f7ff fc20 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	b007      	add	sp, #28
 800a0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0be:	46c0      	nop			@ (mov r8, r8)
 800a0c0:	000060b2 	.word	0x000060b2
 800a0c4:	00004e20 	.word	0x00004e20

0800a0c8 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ca:	b091      	sub	sp, #68	@ 0x44
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	000a      	movs	r2, r1
 800a0d2:	1cfb      	adds	r3, r7, #3
 800a0d4:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a0d6:	253e      	movs	r5, #62	@ 0x3e
 800a0d8:	197b      	adds	r3, r7, r5
 800a0da:	2200      	movs	r2, #0
 800a0dc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a0de:	197c      	adds	r4, r7, r5
 800a0e0:	4a22      	ldr	r2, [pc, #136]	@ (800a16c <sen5x_get_product_name+0xa4>)
 800a0e2:	197b      	adds	r3, r7, r5
 800a0e4:	8819      	ldrh	r1, [r3, #0]
 800a0e6:	230c      	movs	r3, #12
 800a0e8:	18fb      	adds	r3, r7, r3
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	f001 f94a 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a0f0:	0003      	movs	r3, r0
 800a0f2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a0f4:	263c      	movs	r6, #60	@ 0x3c
 800a0f6:	19bc      	adds	r4, r7, r6
 800a0f8:	197b      	adds	r3, r7, r5
 800a0fa:	881a      	ldrh	r2, [r3, #0]
 800a0fc:	230c      	movs	r3, #12
 800a0fe:	18fb      	adds	r3, r7, r3
 800a100:	0019      	movs	r1, r3
 800a102:	2069      	movs	r0, #105	@ 0x69
 800a104:	f001 f9c2 	bl	800b48c <sensirion_i2c_write_data>
 800a108:	0003      	movs	r3, r0
 800a10a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a10c:	19bb      	adds	r3, r7, r6
 800a10e:	2200      	movs	r2, #0
 800a110:	5e9b      	ldrsh	r3, [r3, r2]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <sen5x_get_product_name+0x56>
        return error;
 800a116:	19bb      	adds	r3, r7, r6
 800a118:	2200      	movs	r2, #0
 800a11a:	5e9b      	ldrsh	r3, [r3, r2]
 800a11c:	e021      	b.n	800a162 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a11e:	4b14      	ldr	r3, [pc, #80]	@ (800a170 <sen5x_get_product_name+0xa8>)
 800a120:	0018      	movs	r0, r3
 800a122:	f7ff fbe7 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a126:	253c      	movs	r5, #60	@ 0x3c
 800a128:	197c      	adds	r4, r7, r5
 800a12a:	230c      	movs	r3, #12
 800a12c:	18fb      	adds	r3, r7, r3
 800a12e:	2220      	movs	r2, #32
 800a130:	0019      	movs	r1, r3
 800a132:	2069      	movs	r0, #105	@ 0x69
 800a134:	f001 f9c2 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 800a138:	0003      	movs	r3, r0
 800a13a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a13c:	197b      	adds	r3, r7, r5
 800a13e:	2200      	movs	r2, #0
 800a140:	5e9b      	ldrsh	r3, [r3, r2]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <sen5x_get_product_name+0x86>
        return error;
 800a146:	197b      	adds	r3, r7, r5
 800a148:	2200      	movs	r2, #0
 800a14a:	5e9b      	ldrsh	r3, [r3, r2]
 800a14c:	e009      	b.n	800a162 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a14e:	1cfb      	adds	r3, r7, #3
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	b29a      	uxth	r2, r3
 800a154:	6879      	ldr	r1, [r7, #4]
 800a156:	230c      	movs	r3, #12
 800a158:	18fb      	adds	r3, r7, r3
 800a15a:	0018      	movs	r0, r3
 800a15c:	f000 f988 	bl	800a470 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a160:	2300      	movs	r3, #0
}
 800a162:	0018      	movs	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	b011      	add	sp, #68	@ 0x44
 800a168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a16a:	46c0      	nop			@ (mov r8, r8)
 800a16c:	0000d014 	.word	0x0000d014
 800a170:	0000c350 	.word	0x0000c350

0800a174 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a174:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a176:	b091      	sub	sp, #68	@ 0x44
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	000a      	movs	r2, r1
 800a17e:	1cfb      	adds	r3, r7, #3
 800a180:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a182:	253e      	movs	r5, #62	@ 0x3e
 800a184:	197b      	adds	r3, r7, r5
 800a186:	2200      	movs	r2, #0
 800a188:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a18a:	197c      	adds	r4, r7, r5
 800a18c:	4a22      	ldr	r2, [pc, #136]	@ (800a218 <sen5x_get_serial_number+0xa4>)
 800a18e:	197b      	adds	r3, r7, r5
 800a190:	8819      	ldrh	r1, [r3, #0]
 800a192:	230c      	movs	r3, #12
 800a194:	18fb      	adds	r3, r7, r3
 800a196:	0018      	movs	r0, r3
 800a198:	f001 f8f4 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a19c:	0003      	movs	r3, r0
 800a19e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a1a0:	263c      	movs	r6, #60	@ 0x3c
 800a1a2:	19bc      	adds	r4, r7, r6
 800a1a4:	197b      	adds	r3, r7, r5
 800a1a6:	881a      	ldrh	r2, [r3, #0]
 800a1a8:	230c      	movs	r3, #12
 800a1aa:	18fb      	adds	r3, r7, r3
 800a1ac:	0019      	movs	r1, r3
 800a1ae:	2069      	movs	r0, #105	@ 0x69
 800a1b0:	f001 f96c 	bl	800b48c <sensirion_i2c_write_data>
 800a1b4:	0003      	movs	r3, r0
 800a1b6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a1b8:	19bb      	adds	r3, r7, r6
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	5e9b      	ldrsh	r3, [r3, r2]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d003      	beq.n	800a1ca <sen5x_get_serial_number+0x56>
        return error;
 800a1c2:	19bb      	adds	r3, r7, r6
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	5e9b      	ldrsh	r3, [r3, r2]
 800a1c8:	e021      	b.n	800a20e <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a1ca:	4b14      	ldr	r3, [pc, #80]	@ (800a21c <sen5x_get_serial_number+0xa8>)
 800a1cc:	0018      	movs	r0, r3
 800a1ce:	f7ff fb91 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a1d2:	253c      	movs	r5, #60	@ 0x3c
 800a1d4:	197c      	adds	r4, r7, r5
 800a1d6:	230c      	movs	r3, #12
 800a1d8:	18fb      	adds	r3, r7, r3
 800a1da:	2220      	movs	r2, #32
 800a1dc:	0019      	movs	r1, r3
 800a1de:	2069      	movs	r0, #105	@ 0x69
 800a1e0:	f001 f96c 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 800a1e4:	0003      	movs	r3, r0
 800a1e6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a1e8:	197b      	adds	r3, r7, r5
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	5e9b      	ldrsh	r3, [r3, r2]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <sen5x_get_serial_number+0x86>
        return error;
 800a1f2:	197b      	adds	r3, r7, r5
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	5e9b      	ldrsh	r3, [r3, r2]
 800a1f8:	e009      	b.n	800a20e <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a1fa:	1cfb      	adds	r3, r7, #3
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	6879      	ldr	r1, [r7, #4]
 800a202:	230c      	movs	r3, #12
 800a204:	18fb      	adds	r3, r7, r3
 800a206:	0018      	movs	r0, r3
 800a208:	f000 f932 	bl	800a470 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	0018      	movs	r0, r3
 800a210:	46bd      	mov	sp, r7
 800a212:	b011      	add	sp, #68	@ 0x44
 800a214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a216:	46c0      	nop			@ (mov r8, r8)
 800a218:	0000d033 	.word	0x0000d033
 800a21c:	0000c350 	.word	0x0000c350

0800a220 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a222:	b089      	sub	sp, #36	@ 0x24
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a22e:	251e      	movs	r5, #30
 800a230:	197b      	adds	r3, r7, r5
 800a232:	2200      	movs	r2, #0
 800a234:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a236:	197c      	adds	r4, r7, r5
 800a238:	23d1      	movs	r3, #209	@ 0xd1
 800a23a:	021a      	lsls	r2, r3, #8
 800a23c:	197b      	adds	r3, r7, r5
 800a23e:	8819      	ldrh	r1, [r3, #0]
 800a240:	2310      	movs	r3, #16
 800a242:	18fb      	adds	r3, r7, r3
 800a244:	0018      	movs	r0, r3
 800a246:	f001 f89d 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a24a:	0003      	movs	r3, r0
 800a24c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a24e:	261c      	movs	r6, #28
 800a250:	19bc      	adds	r4, r7, r6
 800a252:	197b      	adds	r3, r7, r5
 800a254:	881a      	ldrh	r2, [r3, #0]
 800a256:	2310      	movs	r3, #16
 800a258:	18fb      	adds	r3, r7, r3
 800a25a:	0019      	movs	r1, r3
 800a25c:	2069      	movs	r0, #105	@ 0x69
 800a25e:	f001 f915 	bl	800b48c <sensirion_i2c_write_data>
 800a262:	0003      	movs	r3, r0
 800a264:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a266:	19bb      	adds	r3, r7, r6
 800a268:	2200      	movs	r2, #0
 800a26a:	5e9b      	ldrsh	r3, [r3, r2]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <sen5x_get_version+0x58>
        return error;
 800a270:	19bb      	adds	r3, r7, r6
 800a272:	2200      	movs	r2, #0
 800a274:	5e9b      	ldrsh	r3, [r3, r2]
 800a276:	e038      	b.n	800a2ea <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a278:	4b1e      	ldr	r3, [pc, #120]	@ (800a2f4 <sen5x_get_version+0xd4>)
 800a27a:	0018      	movs	r0, r3
 800a27c:	f7ff fb3a 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a280:	251c      	movs	r5, #28
 800a282:	197c      	adds	r4, r7, r5
 800a284:	2310      	movs	r3, #16
 800a286:	18fb      	adds	r3, r7, r3
 800a288:	2208      	movs	r2, #8
 800a28a:	0019      	movs	r1, r3
 800a28c:	2069      	movs	r0, #105	@ 0x69
 800a28e:	f001 f915 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 800a292:	0003      	movs	r3, r0
 800a294:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a296:	197b      	adds	r3, r7, r5
 800a298:	2200      	movs	r2, #0
 800a29a:	5e9b      	ldrsh	r3, [r3, r2]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d003      	beq.n	800a2a8 <sen5x_get_version+0x88>
        return error;
 800a2a0:	197b      	adds	r3, r7, r5
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	5e9b      	ldrsh	r3, [r3, r2]
 800a2a6:	e020      	b.n	800a2ea <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a2a8:	2110      	movs	r1, #16
 800a2aa:	187b      	adds	r3, r7, r1
 800a2ac:	781a      	ldrb	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a2b2:	187b      	adds	r3, r7, r1
 800a2b4:	785a      	ldrb	r2, [r3, #1]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a2ba:	187b      	adds	r3, r7, r1
 800a2bc:	789b      	ldrb	r3, [r3, #2]
 800a2be:	1e5a      	subs	r2, r3, #1
 800a2c0:	4193      	sbcs	r3, r2
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a2c8:	187b      	adds	r3, r7, r1
 800a2ca:	78da      	ldrb	r2, [r3, #3]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a2d0:	187b      	adds	r3, r7, r1
 800a2d2:	791a      	ldrb	r2, [r3, #4]
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d6:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a2d8:	187b      	adds	r3, r7, r1
 800a2da:	795a      	ldrb	r2, [r3, #5]
 800a2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2de:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a2e0:	187b      	adds	r3, r7, r1
 800a2e2:	799a      	ldrb	r2, [r3, #6]
 800a2e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2e6:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	0018      	movs	r0, r3
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	b009      	add	sp, #36	@ 0x24
 800a2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2f2:	46c0      	nop			@ (mov r8, r8)
 800a2f4:	00004e20 	.word	0x00004e20

0800a2f8 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a300:	2516      	movs	r5, #22
 800a302:	197b      	adds	r3, r7, r5
 800a304:	2200      	movs	r2, #0
 800a306:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a308:	197c      	adds	r4, r7, r5
 800a30a:	4a22      	ldr	r2, [pc, #136]	@ (800a394 <sen5x_read_device_status+0x9c>)
 800a30c:	197b      	adds	r3, r7, r5
 800a30e:	8819      	ldrh	r1, [r3, #0]
 800a310:	230c      	movs	r3, #12
 800a312:	18fb      	adds	r3, r7, r3
 800a314:	0018      	movs	r0, r3
 800a316:	f001 f835 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a31a:	0003      	movs	r3, r0
 800a31c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a31e:	2614      	movs	r6, #20
 800a320:	19bc      	adds	r4, r7, r6
 800a322:	197b      	adds	r3, r7, r5
 800a324:	881a      	ldrh	r2, [r3, #0]
 800a326:	230c      	movs	r3, #12
 800a328:	18fb      	adds	r3, r7, r3
 800a32a:	0019      	movs	r1, r3
 800a32c:	2069      	movs	r0, #105	@ 0x69
 800a32e:	f001 f8ad 	bl	800b48c <sensirion_i2c_write_data>
 800a332:	0003      	movs	r3, r0
 800a334:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a336:	19bb      	adds	r3, r7, r6
 800a338:	2200      	movs	r2, #0
 800a33a:	5e9b      	ldrsh	r3, [r3, r2]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d003      	beq.n	800a348 <sen5x_read_device_status+0x50>
        return error;
 800a340:	19bb      	adds	r3, r7, r6
 800a342:	2200      	movs	r2, #0
 800a344:	5e9b      	ldrsh	r3, [r3, r2]
 800a346:	e020      	b.n	800a38a <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a348:	4b13      	ldr	r3, [pc, #76]	@ (800a398 <sen5x_read_device_status+0xa0>)
 800a34a:	0018      	movs	r0, r3
 800a34c:	f7ff fad2 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a350:	2514      	movs	r5, #20
 800a352:	197c      	adds	r4, r7, r5
 800a354:	230c      	movs	r3, #12
 800a356:	18fb      	adds	r3, r7, r3
 800a358:	2204      	movs	r2, #4
 800a35a:	0019      	movs	r1, r3
 800a35c:	2069      	movs	r0, #105	@ 0x69
 800a35e:	f001 f8ad 	bl	800b4bc <sensirion_i2c_read_data_inplace>
 800a362:	0003      	movs	r3, r0
 800a364:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a366:	197b      	adds	r3, r7, r5
 800a368:	2200      	movs	r2, #0
 800a36a:	5e9b      	ldrsh	r3, [r3, r2]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <sen5x_read_device_status+0x80>
        return error;
 800a370:	197b      	adds	r3, r7, r5
 800a372:	2200      	movs	r2, #0
 800a374:	5e9b      	ldrsh	r3, [r3, r2]
 800a376:	e008      	b.n	800a38a <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a378:	230c      	movs	r3, #12
 800a37a:	18fb      	adds	r3, r7, r3
 800a37c:	0018      	movs	r0, r3
 800a37e:	f000 f850 	bl	800a422 <sensirion_common_bytes_to_uint32_t>
 800a382:	0002      	movs	r2, r0
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	0018      	movs	r0, r3
 800a38c:	46bd      	mov	sp, r7
 800a38e:	b007      	add	sp, #28
 800a390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a392:	46c0      	nop			@ (mov r8, r8)
 800a394:	0000d206 	.word	0x0000d206
 800a398:	00004e20 	.word	0x00004e20

0800a39c <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a39c:	b590      	push	{r4, r7, lr}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a3a2:	1dbb      	adds	r3, r7, #6
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a3a8:	1dbc      	adds	r4, r7, #6
 800a3aa:	4a12      	ldr	r2, [pc, #72]	@ (800a3f4 <sen5x_device_reset+0x58>)
 800a3ac:	1dbb      	adds	r3, r7, #6
 800a3ae:	8819      	ldrh	r1, [r3, #0]
 800a3b0:	003b      	movs	r3, r7
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	f000 ffe6 	bl	800b384 <sensirion_i2c_add_command_to_buffer>
 800a3b8:	0003      	movs	r3, r0
 800a3ba:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a3bc:	1d3c      	adds	r4, r7, #4
 800a3be:	1dbb      	adds	r3, r7, #6
 800a3c0:	881a      	ldrh	r2, [r3, #0]
 800a3c2:	003b      	movs	r3, r7
 800a3c4:	0019      	movs	r1, r3
 800a3c6:	2069      	movs	r0, #105	@ 0x69
 800a3c8:	f001 f860 	bl	800b48c <sensirion_i2c_write_data>
 800a3cc:	0003      	movs	r3, r0
 800a3ce:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3d0:	1d3b      	adds	r3, r7, #4
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	5e9b      	ldrsh	r3, [r3, r2]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <sen5x_device_reset+0x46>
        return error;
 800a3da:	1d3b      	adds	r3, r7, #4
 800a3dc:	2200      	movs	r2, #0
 800a3de:	5e9b      	ldrsh	r3, [r3, r2]
 800a3e0:	e004      	b.n	800a3ec <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a3e2:	4b05      	ldr	r3, [pc, #20]	@ (800a3f8 <sen5x_device_reset+0x5c>)
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	f7ff fa85 	bl	80098f4 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	0018      	movs	r0, r3
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	b003      	add	sp, #12
 800a3f2:	bd90      	pop	{r4, r7, pc}
 800a3f4:	0000d304 	.word	0x0000d304
 800a3f8:	00030d40 	.word	0x00030d40

0800a3fc <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	021b      	lsls	r3, r3, #8
 800a40a:	b21a      	sxth	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	3301      	adds	r3, #1
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	b21b      	sxth	r3, r3
 800a414:	4313      	orrs	r3, r2
 800a416:	b21b      	sxth	r3, r3
 800a418:	b29b      	uxth	r3, r3
}
 800a41a:	0018      	movs	r0, r3
 800a41c:	46bd      	mov	sp, r7
 800a41e:	b002      	add	sp, #8
 800a420:	bd80      	pop	{r7, pc}

0800a422 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	061a      	lsls	r2, r3, #24
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3301      	adds	r3, #1
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	041b      	lsls	r3, r3, #16
 800a438:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	3302      	adds	r3, #2
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a442:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	3203      	adds	r2, #3
 800a448:	7812      	ldrb	r2, [r2, #0]
 800a44a:	4313      	orrs	r3, r2
}
 800a44c:	0018      	movs	r0, r3
 800a44e:	46bd      	mov	sp, r7
 800a450:	b002      	add	sp, #8
 800a452:	bd80      	pop	{r7, pc}

0800a454 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	0018      	movs	r0, r3
 800a460:	f7ff ffcc 	bl	800a3fc <sensirion_common_bytes_to_uint16_t>
 800a464:	0003      	movs	r3, r0
 800a466:	b21b      	sxth	r3, r3
}
 800a468:	0018      	movs	r0, r3
 800a46a:	46bd      	mov	sp, r7
 800a46c:	b002      	add	sp, #8
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	1dbb      	adds	r3, r7, #6
 800a47c:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a47e:	2316      	movs	r3, #22
 800a480:	18fb      	adds	r3, r7, r3
 800a482:	2200      	movs	r2, #0
 800a484:	801a      	strh	r2, [r3, #0]
 800a486:	e00f      	b.n	800a4a8 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a488:	2016      	movs	r0, #22
 800a48a:	183b      	adds	r3, r7, r0
 800a48c:	881b      	ldrh	r3, [r3, #0]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	18d2      	adds	r2, r2, r3
 800a492:	183b      	adds	r3, r7, r0
 800a494:	881b      	ldrh	r3, [r3, #0]
 800a496:	68b9      	ldr	r1, [r7, #8]
 800a498:	18cb      	adds	r3, r1, r3
 800a49a:	7812      	ldrb	r2, [r2, #0]
 800a49c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a49e:	183b      	adds	r3, r7, r0
 800a4a0:	881a      	ldrh	r2, [r3, #0]
 800a4a2:	183b      	adds	r3, r7, r0
 800a4a4:	3201      	adds	r2, #1
 800a4a6:	801a      	strh	r2, [r3, #0]
 800a4a8:	2316      	movs	r3, #22
 800a4aa:	18fa      	adds	r2, r7, r3
 800a4ac:	1dbb      	adds	r3, r7, #6
 800a4ae:	8812      	ldrh	r2, [r2, #0]
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d3e8      	bcc.n	800a488 <sensirion_common_copy_bytes+0x18>
    }
}
 800a4b6:	46c0      	nop			@ (mov r8, r8)
 800a4b8:	46c0      	nop			@ (mov r8, r8)
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	b006      	add	sp, #24
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d113      	bne.n	800a506 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	22fe      	movs	r2, #254	@ 0xfe
 800a4e2:	0592      	lsls	r2, r2, #22
 800a4e4:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a554 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a4ea:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a558 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a4f0:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4a19      	ldr	r2, [pc, #100]	@ (800a55c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a4f6:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	4a19      	ldr	r2, [pc, #100]	@ (800a560 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a4fc:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4a18      	ldr	r2, [pc, #96]	@ (800a564 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a502:	61da      	str	r2, [r3, #28]
 800a504:	e011      	b.n	800a52a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	4a17      	ldr	r2, [pc, #92]	@ (800a568 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a50a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4a17      	ldr	r2, [pc, #92]	@ (800a56c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a510:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	4a16      	ldr	r2, [pc, #88]	@ (800a570 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a516:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4a16      	ldr	r2, [pc, #88]	@ (800a574 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a51c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	4a15      	ldr	r2, [pc, #84]	@ (800a578 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a522:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4a15      	ldr	r2, [pc, #84]	@ (800a57c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a528:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4a14      	ldr	r2, [pc, #80]	@ (800a580 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a52e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	4a14      	ldr	r2, [pc, #80]	@ (800a584 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a534:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	4a12      	ldr	r2, [pc, #72]	@ (800a584 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a53a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4a12      	ldr	r2, [pc, #72]	@ (800a588 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a540:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	0018      	movs	r0, r3
 800a546:	f000 f833 	bl	800a5b0 <GasIndexAlgorithm_reset>
}
 800a54a:	46c0      	nop			@ (mov r8, r8)
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b004      	add	sp, #16
 800a550:	bd80      	pop	{r7, pc}
 800a552:	46c0      	nop			@ (mov r8, r8)
 800a554:	00002710 	.word	0x00002710
 800a558:	44340000 	.word	0x44340000
 800a55c:	46859800 	.word	0x46859800
 800a560:	46a05000 	.word	0x46a05000
 800a564:	41f00000 	.word	0x41f00000
 800a568:	42c80000 	.word	0x42c80000
 800a56c:	00004e20 	.word	0x00004e20
 800a570:	43340000 	.word	0x43340000
 800a574:	4528c000 	.word	0x4528c000
 800a578:	45a32000 	.word	0x45a32000
 800a57c:	43aa0000 	.word	0x43aa0000
 800a580:	43660000 	.word	0x43660000
 800a584:	41400000 	.word	0x41400000
 800a588:	42480000 	.word	0x42480000

0800a58c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a596:	4a05      	ldr	r2, [pc, #20]	@ (800a5ac <GasIndexAlgorithm_init+0x20>)
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	0018      	movs	r0, r3
 800a59e:	f7ff ff8f 	bl	800a4c0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a5a2:	46c0      	nop			@ (mov r8, r8)
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	b002      	add	sp, #8
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	46c0      	nop			@ (mov r8, r8)
 800a5ac:	44610000 	.word	0x44610000

0800a5b0 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	0018      	movs	r0, r3
 800a5ce:	f000 f805 	bl	800a5dc <GasIndexAlgorithm__init_instances>
}
 800a5d2:	46c0      	nop			@ (mov r8, r8)
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	b002      	add	sp, #8
 800a5d8:	bd80      	pop	{r7, pc}
	...

0800a5dc <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a5dc:	b590      	push	{r4, r7, lr}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	f000 f8e8 	bl	800a7bc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	0018      	movs	r0, r3
 800a5f0:	f000 f9a6 	bl	800a940 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a5f4:	1c04      	adds	r4, r0, #0
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f000 f9ab 	bl	800a954 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a5fe:	1c02      	adds	r2, r0, #0
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	1c21      	adds	r1, r4, #0
 800a604:	0018      	movs	r0, r3
 800a606:	f000 fc3b 	bl	800ae80 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d107      	bne.n	800a622 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a612:	23fe      	movs	r3, #254	@ 0xfe
 800a614:	059b      	lsls	r3, r3, #22
 800a616:	4a0a      	ldr	r2, [pc, #40]	@ (800a640 <GasIndexAlgorithm__init_instances+0x64>)
 800a618:	490a      	ldr	r1, [pc, #40]	@ (800a644 <GasIndexAlgorithm__init_instances+0x68>)
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fc86 	bl	800af2c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a620:	e005      	b.n	800a62e <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a622:	4b09      	ldr	r3, [pc, #36]	@ (800a648 <GasIndexAlgorithm__init_instances+0x6c>)
 800a624:	4a09      	ldr	r2, [pc, #36]	@ (800a64c <GasIndexAlgorithm__init_instances+0x70>)
 800a626:	490a      	ldr	r1, [pc, #40]	@ (800a650 <GasIndexAlgorithm__init_instances+0x74>)
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fc7f 	bl	800af2c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	0018      	movs	r0, r3
 800a632:	f000 fd35 	bl	800b0a0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a636:	46c0      	nop			@ (mov r8, r8)
 800a638:	46bd      	mov	sp, r7
 800a63a:	b003      	add	sp, #12
 800a63c:	bd90      	pop	{r4, r7, pc}
 800a63e:	46c0      	nop			@ (mov r8, r8)
 800a640:	bc257a78 	.word	0xbc257a78
 800a644:	44198000 	.word	0x44198000
 800a648:	42c80000 	.word	0x42c80000
 800a64c:	bbd4fdf4 	.word	0xbbd4fdf4
 800a650:	43550000 	.word	0x43550000

0800a654 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a654:	b590      	push	{r4, r7, lr}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a664:	4952      	ldr	r1, [pc, #328]	@ (800a7b0 <GasIndexAlgorithm_process+0x15c>)
 800a666:	1c18      	adds	r0, r3, #0
 800a668:	f7f5 ff6c 	bl	8000544 <__aeabi_fcmple>
 800a66c:	1e03      	subs	r3, r0, #0
 800a66e:	d00c      	beq.n	800a68a <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	1c19      	adds	r1, r3, #0
 800a67a:	1c10      	adds	r0, r2, #0
 800a67c:	f7f6 f920 	bl	80008c0 <__aeabi_fadd>
 800a680:	1c03      	adds	r3, r0, #0
 800a682:	1c1a      	adds	r2, r3, #0
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	631a      	str	r2, [r3, #48]	@ 0x30
 800a688:	e080      	b.n	800a78c <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dd25      	ble.n	800a6dc <GasIndexAlgorithm_process+0x88>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	4a48      	ldr	r2, [pc, #288]	@ (800a7b4 <GasIndexAlgorithm_process+0x160>)
 800a694:	4293      	cmp	r3, r2
 800a696:	dc21      	bgt.n	800a6dc <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	dc04      	bgt.n	800a6ac <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60bb      	str	r3, [r7, #8]
 800a6aa:	e00d      	b.n	800a6c8 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	4a41      	ldr	r2, [pc, #260]	@ (800a7b8 <GasIndexAlgorithm_process+0x164>)
 800a6b2:	4694      	mov	ip, r2
 800a6b4:	4463      	add	r3, ip
 800a6b6:	68ba      	ldr	r2, [r7, #8]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	dd05      	ble.n	800a6c8 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	4a3d      	ldr	r2, [pc, #244]	@ (800a7b8 <GasIndexAlgorithm_process+0x164>)
 800a6c2:	4694      	mov	ip, r2
 800a6c4:	4463      	add	r3, ip
 800a6c6:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	f7f6 ff7d 	bl	80015d0 <__aeabi_i2f>
 800a6d6:	1c02      	adds	r2, r0, #0
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d005      	beq.n	800a6f0 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	f000 f945 	bl	800a976 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a6ec:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a6ee:	d014      	beq.n	800a71a <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	1c11      	adds	r1, r2, #0
 800a6f8:	0018      	movs	r0, r3
 800a6fa:	f000 fbd1 	bl	800aea0 <GasIndexAlgorithm__mox_model__process>
 800a6fe:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	1c11      	adds	r1, r2, #0
 800a70c:	0018      	movs	r0, r3
 800a70e:	f000 fc25 	bl	800af5c <GasIndexAlgorithm__sigmoid_scaled__process>
 800a712:	1c02      	adds	r2, r0, #0
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	639a      	str	r2, [r3, #56]	@ 0x38
 800a718:	e003      	b.n	800a722 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	689a      	ldr	r2, [r3, #8]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	1c11      	adds	r1, r2, #0
 800a72a:	0018      	movs	r0, r3
 800a72c:	f000 fcec 	bl	800b108 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a730:	1c02      	adds	r2, r0, #0
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a73a:	21fc      	movs	r1, #252	@ 0xfc
 800a73c:	0589      	lsls	r1, r1, #22
 800a73e:	1c18      	adds	r0, r3, #0
 800a740:	f7f5 fef6 	bl	8000530 <__aeabi_fcmplt>
 800a744:	1e03      	subs	r3, r0, #0
 800a746:	d003      	beq.n	800a750 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	22fc      	movs	r2, #252	@ 0xfc
 800a74c:	0592      	lsls	r2, r2, #22
 800a74e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a754:	2100      	movs	r1, #0
 800a756:	1c18      	adds	r0, r3, #0
 800a758:	f7f5 fefe 	bl	8000558 <__aeabi_fcmpgt>
 800a75c:	1e03      	subs	r3, r0, #0
 800a75e:	d015      	beq.n	800a78c <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	1c11      	adds	r1, r2, #0
 800a768:	0018      	movs	r0, r3
 800a76a:	f000 fa4f 	bl	800ac0c <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	0018      	movs	r0, r3
 800a772:	f000 f8e5 	bl	800a940 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a776:	1c04      	adds	r4, r0, #0
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	0018      	movs	r0, r3
 800a77c:	f000 f8ea 	bl	800a954 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a780:	1c02      	adds	r2, r0, #0
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	1c21      	adds	r1, r4, #0
 800a786:	0018      	movs	r0, r3
 800a788:	f000 fb7a 	bl	800ae80 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a790:	21fc      	movs	r1, #252	@ 0xfc
 800a792:	0589      	lsls	r1, r1, #22
 800a794:	1c18      	adds	r0, r3, #0
 800a796:	f7f6 f893 	bl	80008c0 <__aeabi_fadd>
 800a79a:	1c03      	adds	r3, r0, #0
 800a79c:	1c18      	adds	r0, r3, #0
 800a79e:	f7f6 fef7 	bl	8001590 <__aeabi_f2iz>
 800a7a2:	0002      	movs	r2, r0
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	601a      	str	r2, [r3, #0]
    return;
 800a7a8:	46c0      	nop			@ (mov r8, r8)
}
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	b005      	add	sp, #20
 800a7ae:	bd90      	pop	{r4, r7, pc}
 800a7b0:	42340000 	.word	0x42340000
 800a7b4:	0000fde7 	.word	0x0000fde7
 800a7b8:	00007fff 	.word	0x00007fff

0800a7bc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a7bc:	b5b0      	push	{r4, r5, r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	223c      	movs	r2, #60	@ 0x3c
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	4952      	ldr	r1, [pc, #328]	@ (800a930 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a7e6:	1c18      	adds	r0, r3, #0
 800a7e8:	f7f6 f9f4 	bl	8000bd4 <__aeabi_fdiv>
 800a7ec:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a7ee:	2188      	movs	r1, #136	@ 0x88
 800a7f0:	05c9      	lsls	r1, r1, #23
 800a7f2:	1c18      	adds	r0, r3, #0
 800a7f4:	f7f6 fbd4 	bl	8000fa0 <__aeabi_fmul>
 800a7f8:	1c03      	adds	r3, r0, #0
 800a7fa:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	494a      	ldr	r1, [pc, #296]	@ (800a930 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a806:	1c18      	adds	r0, r3, #0
 800a808:	f7f6 f9e4 	bl	8000bd4 <__aeabi_fdiv>
 800a80c:	1c03      	adds	r3, r0, #0
 800a80e:	1c19      	adds	r1, r3, #0
 800a810:	1c20      	adds	r0, r4, #0
 800a812:	f7f6 f855 	bl	80008c0 <__aeabi_fadd>
 800a816:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a818:	1c19      	adds	r1, r3, #0
 800a81a:	1c28      	adds	r0, r5, #0
 800a81c:	f7f6 f9da 	bl	8000bd4 <__aeabi_fdiv>
 800a820:	1c03      	adds	r3, r0, #0
 800a822:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	4940      	ldr	r1, [pc, #256]	@ (800a930 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a82e:	1c18      	adds	r0, r3, #0
 800a830:	f7f6 f9d0 	bl	8000bd4 <__aeabi_fdiv>
 800a834:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a836:	2185      	movs	r1, #133	@ 0x85
 800a838:	05c9      	lsls	r1, r1, #23
 800a83a:	1c18      	adds	r0, r3, #0
 800a83c:	f7f6 fbb0 	bl	8000fa0 <__aeabi_fmul>
 800a840:	1c03      	adds	r3, r0, #0
 800a842:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	4938      	ldr	r1, [pc, #224]	@ (800a930 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a84e:	1c18      	adds	r0, r3, #0
 800a850:	f7f6 f9c0 	bl	8000bd4 <__aeabi_fdiv>
 800a854:	1c03      	adds	r3, r0, #0
 800a856:	1c19      	adds	r1, r3, #0
 800a858:	1c20      	adds	r0, r4, #0
 800a85a:	f7f6 f831 	bl	80008c0 <__aeabi_fadd>
 800a85e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a860:	1c19      	adds	r1, r3, #0
 800a862:	1c28      	adds	r0, r5, #0
 800a864:	f7f6 f9b6 	bl	8000bd4 <__aeabi_fdiv>
 800a868:	1c03      	adds	r3, r0, #0
 800a86a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d118      	bne.n	800a8aa <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a87c:	2188      	movs	r1, #136	@ 0x88
 800a87e:	05c9      	lsls	r1, r1, #23
 800a880:	1c18      	adds	r0, r3, #0
 800a882:	f7f6 fb8d 	bl	8000fa0 <__aeabi_fmul>
 800a886:	1c03      	adds	r3, r0, #0
 800a888:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a88e:	4929      	ldr	r1, [pc, #164]	@ (800a934 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a890:	1c18      	adds	r0, r3, #0
 800a892:	f7f6 f815 	bl	80008c0 <__aeabi_fadd>
 800a896:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a898:	1c19      	adds	r1, r3, #0
 800a89a:	1c20      	adds	r0, r4, #0
 800a89c:	f7f6 f99a 	bl	8000bd4 <__aeabi_fdiv>
 800a8a0:	1c03      	adds	r3, r0, #0
 800a8a2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	655a      	str	r2, [r3, #84]	@ 0x54
 800a8a8:	e017      	b.n	800a8da <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a8ae:	2188      	movs	r1, #136	@ 0x88
 800a8b0:	05c9      	lsls	r1, r1, #23
 800a8b2:	1c18      	adds	r0, r3, #0
 800a8b4:	f7f6 fb74 	bl	8000fa0 <__aeabi_fmul>
 800a8b8:	1c03      	adds	r3, r0, #0
 800a8ba:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a8c0:	491d      	ldr	r1, [pc, #116]	@ (800a938 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a8c2:	1c18      	adds	r0, r3, #0
 800a8c4:	f7f5 fffc 	bl	80008c0 <__aeabi_fadd>
 800a8c8:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a8ca:	1c19      	adds	r1, r3, #0
 800a8cc:	1c20      	adds	r0, r4, #0
 800a8ce:	f7f6 f981 	bl	8000bd4 <__aeabi_fdiv>
 800a8d2:	1c03      	adds	r3, r0, #0
 800a8d4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a8de:	2185      	movs	r1, #133	@ 0x85
 800a8e0:	05c9      	lsls	r1, r1, #23
 800a8e2:	1c18      	adds	r0, r3, #0
 800a8e4:	f7f6 fb5c 	bl	8000fa0 <__aeabi_fmul>
 800a8e8:	1c03      	adds	r3, r0, #0
 800a8ea:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	4912      	ldr	r1, [pc, #72]	@ (800a93c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a8f2:	1c18      	adds	r0, r3, #0
 800a8f4:	f7f5 ffe4 	bl	80008c0 <__aeabi_fadd>
 800a8f8:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a8fa:	1c19      	adds	r1, r3, #0
 800a8fc:	1c20      	adds	r0, r4, #0
 800a8fe:	f7f6 f969 	bl	8000bd4 <__aeabi_fdiv>
 800a902:	1c03      	adds	r3, r0, #0
 800a904:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a928:	46c0      	nop			@ (mov r8, r8)
 800a92a:	46bd      	mov	sp, r7
 800a92c:	b002      	add	sp, #8
 800a92e:	bdb0      	pop	{r4, r5, r7, pc}
 800a930:	45610000 	.word	0x45610000
 800a934:	44960000 	.word	0x44960000
 800a938:	41a00000 	.word	0x41a00000
 800a93c:	451c4000 	.word	0x451c4000

0800a940 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a94c:	1c18      	adds	r0, r3, #0
 800a94e:	46bd      	mov	sp, r7
 800a950:	b002      	add	sp, #8
 800a952:	bd80      	pop	{r7, pc}

0800a954 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a964:	1c19      	adds	r1, r3, #0
 800a966:	1c10      	adds	r0, r2, #0
 800a968:	f7f5 ffaa 	bl	80008c0 <__aeabi_fadd>
 800a96c:	1c03      	adds	r3, r0, #0
}
 800a96e:	1c18      	adds	r0, r3, #0
 800a970:	46bd      	mov	sp, r7
 800a972:	b002      	add	sp, #8
 800a974:	bd80      	pop	{r7, pc}

0800a976 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	223c      	movs	r2, #60	@ 0x3c
 800a982:	5c9b      	ldrb	r3, [r3, r2]
}
 800a984:	0018      	movs	r0, r3
 800a986:	46bd      	mov	sp, r7
 800a988:	b002      	add	sp, #8
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a98c:	b5b0      	push	{r4, r5, r7, lr}
 800a98e:	b08c      	sub	sp, #48	@ 0x30
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a998:	1c19      	adds	r1, r3, #0
 800a99a:	4895      	ldr	r0, [pc, #596]	@ (800abf0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a99c:	f7f6 fc3e 	bl	800121c <__aeabi_fsub>
 800a9a0:	1c03      	adds	r3, r0, #0
 800a9a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9a8:	1c19      	adds	r1, r3, #0
 800a9aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9ac:	f7f5 fdd4 	bl	8000558 <__aeabi_fcmpgt>
 800a9b0:	1e03      	subs	r3, r0, #0
 800a9b2:	d00b      	beq.n	800a9cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a9bc:	1c19      	adds	r1, r3, #0
 800a9be:	1c10      	adds	r0, r2, #0
 800a9c0:	f7f5 ff7e 	bl	80008c0 <__aeabi_fadd>
 800a9c4:	1c03      	adds	r3, r0, #0
 800a9c6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9d0:	1c19      	adds	r1, r3, #0
 800a9d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9d4:	f7f5 fdc0 	bl	8000558 <__aeabi_fcmpgt>
 800a9d8:	1e03      	subs	r3, r0, #0
 800a9da:	d00b      	beq.n	800a9f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a9e4:	1c19      	adds	r1, r3, #0
 800a9e6:	1c10      	adds	r0, r2, #0
 800a9e8:	f7f5 ff6a 	bl	80008c0 <__aeabi_fadd>
 800a9ec:	1c03      	adds	r3, r0, #0
 800a9ee:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6959      	ldr	r1, [r3, #20]
 800a9f8:	4a7e      	ldr	r2, [pc, #504]	@ (800abf4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	0018      	movs	r0, r3
 800a9fe:	f000 f9f1 	bl	800ade4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	1c11      	adds	r1, r2, #0
 800aa0a:	0018      	movs	r0, r3
 800aa0c:	f000 f9fa 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aa10:	1c03      	adds	r3, r0, #0
 800aa12:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa20:	1c19      	adds	r1, r3, #0
 800aa22:	1c10      	adds	r0, r2, #0
 800aa24:	f7f6 fbfa 	bl	800121c <__aeabi_fsub>
 800aa28:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aa2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa2c:	1c18      	adds	r0, r3, #0
 800aa2e:	f7f6 fab7 	bl	8000fa0 <__aeabi_fmul>
 800aa32:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aa34:	1c19      	adds	r1, r3, #0
 800aa36:	1c20      	adds	r0, r4, #0
 800aa38:	f7f5 ff42 	bl	80008c0 <__aeabi_fadd>
 800aa3c:	1c03      	adds	r3, r0, #0
 800aa3e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800aa48:	1c19      	adds	r1, r3, #0
 800aa4a:	486b      	ldr	r0, [pc, #428]	@ (800abf8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800aa4c:	f7f6 fbe6 	bl	800121c <__aeabi_fsub>
 800aa50:	1c03      	adds	r3, r0, #0
 800aa52:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	1c11      	adds	r1, r2, #0
 800aa5c:	0018      	movs	r0, r3
 800aa5e:	f000 f9d1 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aa62:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800aa64:	1c19      	adds	r1, r3, #0
 800aa66:	1c28      	adds	r0, r5, #0
 800aa68:	f7f6 fa9a 	bl	8000fa0 <__aeabi_fmul>
 800aa6c:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800aa6e:	1c19      	adds	r1, r3, #0
 800aa70:	1c20      	adds	r0, r4, #0
 800aa72:	f7f5 ff25 	bl	80008c0 <__aeabi_fadd>
 800aa76:	1c03      	adds	r3, r0, #0
 800aa78:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aa7a:	4a60      	ldr	r2, [pc, #384]	@ (800abfc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800aa7c:	6a39      	ldr	r1, [r7, #32]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	0018      	movs	r0, r3
 800aa82:	f000 f9af 	bl	800ade4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	1c11      	adds	r1, r2, #0
 800aa8e:	0018      	movs	r0, r3
 800aa90:	f000 f9b8 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aa94:	1c03      	adds	r3, r0, #0
 800aa96:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800aa98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa9a:	69f8      	ldr	r0, [r7, #28]
 800aa9c:	f7f6 fa80 	bl	8000fa0 <__aeabi_fmul>
 800aaa0:	1c03      	adds	r3, r0, #0
 800aaa2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6999      	ldr	r1, [r3, #24]
 800aaac:	4a51      	ldr	r2, [pc, #324]	@ (800abf4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	0018      	movs	r0, r3
 800aab2:	f000 f997 	bl	800ade4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	1c11      	adds	r1, r2, #0
 800aabe:	0018      	movs	r0, r3
 800aac0:	f000 f9a0 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aac4:	1c03      	adds	r3, r0, #0
 800aac6:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800aad4:	1c19      	adds	r1, r3, #0
 800aad6:	1c10      	adds	r0, r2, #0
 800aad8:	f7f6 fba0 	bl	800121c <__aeabi_fsub>
 800aadc:	1c03      	adds	r3, r0, #0
 800aade:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800aae0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aae2:	69b8      	ldr	r0, [r7, #24]
 800aae4:	f7f6 fb9a 	bl	800121c <__aeabi_fsub>
 800aae8:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800aaea:	1c19      	adds	r1, r3, #0
 800aaec:	1c28      	adds	r0, r5, #0
 800aaee:	f7f6 fa57 	bl	8000fa0 <__aeabi_fmul>
 800aaf2:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800aaf4:	1c19      	adds	r1, r3, #0
 800aaf6:	1c20      	adds	r0, r4, #0
 800aaf8:	f7f5 fee2 	bl	80008c0 <__aeabi_fadd>
 800aafc:	1c03      	adds	r3, r0, #0
 800aafe:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ab08:	1c19      	adds	r1, r3, #0
 800ab0a:	483b      	ldr	r0, [pc, #236]	@ (800abf8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ab0c:	f7f6 fb86 	bl	800121c <__aeabi_fsub>
 800ab10:	1c03      	adds	r3, r0, #0
 800ab12:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	1c11      	adds	r1, r2, #0
 800ab1c:	0018      	movs	r0, r3
 800ab1e:	f000 f971 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab22:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ab24:	1c19      	adds	r1, r3, #0
 800ab26:	1c28      	adds	r0, r5, #0
 800ab28:	f7f6 fa3a 	bl	8000fa0 <__aeabi_fmul>
 800ab2c:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800ab2e:	1c19      	adds	r1, r3, #0
 800ab30:	1c20      	adds	r0, r4, #0
 800ab32:	f7f5 fec5 	bl	80008c0 <__aeabi_fadd>
 800ab36:	1c03      	adds	r3, r0, #0
 800ab38:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ab3a:	4a30      	ldr	r2, [pc, #192]	@ (800abfc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ab3c:	6939      	ldr	r1, [r7, #16]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	0018      	movs	r0, r3
 800ab42:	f000 f94f 	bl	800ade4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	1c11      	adds	r1, r2, #0
 800ab4e:	0018      	movs	r0, r3
 800ab50:	f000 f958 	bl	800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab54:	1c03      	adds	r3, r0, #0
 800ab56:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800ab58:	6979      	ldr	r1, [r7, #20]
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7f6 fa20 	bl	8000fa0 <__aeabi_fmul>
 800ab60:	1c03      	adds	r3, r0, #0
 800ab62:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	4923      	ldr	r1, [pc, #140]	@ (800ac00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800ab72:	1c18      	adds	r0, r3, #0
 800ab74:	f7f6 f82e 	bl	8000bd4 <__aeabi_fdiv>
 800ab78:	1c03      	adds	r3, r0, #0
 800ab7a:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800ab7c:	69f9      	ldr	r1, [r7, #28]
 800ab7e:	20fe      	movs	r0, #254	@ 0xfe
 800ab80:	0580      	lsls	r0, r0, #22
 800ab82:	f7f6 fb4b 	bl	800121c <__aeabi_fsub>
 800ab86:	1c03      	adds	r3, r0, #0
 800ab88:	491e      	ldr	r1, [pc, #120]	@ (800ac04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800ab8a:	1c18      	adds	r0, r3, #0
 800ab8c:	f7f6 fa08 	bl	8000fa0 <__aeabi_fmul>
 800ab90:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800ab92:	491d      	ldr	r1, [pc, #116]	@ (800ac08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800ab94:	1c18      	adds	r0, r3, #0
 800ab96:	f7f6 fb41 	bl	800121c <__aeabi_fsub>
 800ab9a:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800ab9c:	1c19      	adds	r1, r3, #0
 800ab9e:	1c28      	adds	r0, r5, #0
 800aba0:	f7f6 f9fe 	bl	8000fa0 <__aeabi_fmul>
 800aba4:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800aba6:	1c19      	adds	r1, r3, #0
 800aba8:	1c20      	adds	r0, r4, #0
 800abaa:	f7f5 fe89 	bl	80008c0 <__aeabi_fadd>
 800abae:	1c03      	adds	r3, r0, #0
 800abb0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abba:	2100      	movs	r1, #0
 800abbc:	1c18      	adds	r0, r3, #0
 800abbe:	f7f5 fcb7 	bl	8000530 <__aeabi_fcmplt>
 800abc2:	1e03      	subs	r3, r0, #0
 800abc4:	d002      	beq.n	800abcc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800abd4:	1c19      	adds	r1, r3, #0
 800abd6:	1c10      	adds	r0, r2, #0
 800abd8:	f7f5 fcbe 	bl	8000558 <__aeabi_fcmpgt>
 800abdc:	1e03      	subs	r3, r0, #0
 800abde:	d100      	bne.n	800abe2 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800abe0:	e002      	b.n	800abe8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800abe8:	46c0      	nop			@ (mov r8, r8)
 800abea:	46bd      	mov	sp, r7
 800abec:	b00c      	add	sp, #48	@ 0x30
 800abee:	bdb0      	pop	{r4, r5, r7, pc}
 800abf0:	46fffe00 	.word	0x46fffe00
 800abf4:	3c23d70a 	.word	0x3c23d70a
 800abf8:	43ff0000 	.word	0x43ff0000
 800abfc:	3db851ec 	.word	0x3db851ec
 800ac00:	42700000 	.word	0x42700000
 800ac04:	3fa66666 	.word	0x3fa66666
 800ac08:	3e99999a 	.word	0x3e99999a

0800ac0c <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800ac0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac0e:	b087      	sub	sp, #28
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	223c      	movs	r2, #60	@ 0x3c
 800ac1a:	5c9b      	ldrb	r3, [r3, r2]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	4053      	eors	r3, r2
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00a      	beq.n	800ac3c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	223c      	movs	r2, #60	@ 0x3c
 800ac2a:	2101      	movs	r1, #1
 800ac2c:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800ac3a:	e0c8      	b.n	800adce <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac40:	4965      	ldr	r1, [pc, #404]	@ (800add8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800ac42:	1c18      	adds	r0, r3, #0
 800ac44:	f7f5 fc92 	bl	800056c <__aeabi_fcmpge>
 800ac48:	1e03      	subs	r3, r0, #0
 800ac4a:	d107      	bne.n	800ac5c <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ac50:	4962      	ldr	r1, [pc, #392]	@ (800addc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800ac52:	1c18      	adds	r0, r3, #0
 800ac54:	f7f5 fc76 	bl	8000544 <__aeabi_fcmple>
 800ac58:	1e03      	subs	r3, r0, #0
 800ac5a:	d00e      	beq.n	800ac7a <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ac64:	1c19      	adds	r1, r3, #0
 800ac66:	1c10      	adds	r0, r2, #0
 800ac68:	f7f5 fe2a 	bl	80008c0 <__aeabi_fadd>
 800ac6c:	1c03      	adds	r3, r0, #0
 800ac6e:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac7e:	1c19      	adds	r1, r3, #0
 800ac80:	6838      	ldr	r0, [r7, #0]
 800ac82:	f7f6 facb 	bl	800121c <__aeabi_fsub>
 800ac86:	1c03      	adds	r3, r0, #0
 800ac88:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	0018      	movs	r0, r3
 800ac8e:	f7ff fe7d 	bl	800a98c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac96:	1c19      	adds	r1, r3, #0
 800ac98:	6838      	ldr	r0, [r7, #0]
 800ac9a:	f7f6 fabf 	bl	800121c <__aeabi_fsub>
 800ac9e:	1c03      	adds	r3, r0, #0
 800aca0:	2185      	movs	r1, #133	@ 0x85
 800aca2:	05c9      	lsls	r1, r1, #23
 800aca4:	1c18      	adds	r0, r3, #0
 800aca6:	f7f5 ff95 	bl	8000bd4 <__aeabi_fdiv>
 800acaa:	1c03      	adds	r3, r0, #0
 800acac:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800acae:	2100      	movs	r1, #0
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f7f5 fc3d 	bl	8000530 <__aeabi_fcmplt>
 800acb6:	1e03      	subs	r3, r0, #0
 800acb8:	d008      	beq.n	800accc <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acbe:	68f9      	ldr	r1, [r7, #12]
 800acc0:	1c18      	adds	r0, r3, #0
 800acc2:	f7f6 faab 	bl	800121c <__aeabi_fsub>
 800acc6:	1c03      	adds	r3, r0, #0
 800acc8:	617b      	str	r3, [r7, #20]
 800acca:	e007      	b.n	800acdc <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acd0:	1c19      	adds	r1, r3, #0
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f7f5 fdf4 	bl	80008c0 <__aeabi_fadd>
 800acd8:	1c03      	adds	r3, r0, #0
 800acda:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800acdc:	23fe      	movs	r3, #254	@ 0xfe
 800acde:	059b      	lsls	r3, r3, #22
 800ace0:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800ace2:	493f      	ldr	r1, [pc, #252]	@ (800ade0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ace4:	6978      	ldr	r0, [r7, #20]
 800ace6:	f7f5 fc37 	bl	8000558 <__aeabi_fcmpgt>
 800acea:	1e03      	subs	r3, r0, #0
 800acec:	d010      	beq.n	800ad10 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800acee:	493c      	ldr	r1, [pc, #240]	@ (800ade0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800acf0:	6978      	ldr	r0, [r7, #20]
 800acf2:	f7f5 ff6f 	bl	8000bd4 <__aeabi_fdiv>
 800acf6:	1c03      	adds	r3, r0, #0
 800acf8:	1c1c      	adds	r4, r3, #0
 800acfa:	4939      	ldr	r1, [pc, #228]	@ (800ade0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800acfc:	6978      	ldr	r0, [r7, #20]
 800acfe:	f7f5 ff69 	bl	8000bd4 <__aeabi_fdiv>
 800ad02:	1c03      	adds	r3, r0, #0
 800ad04:	1c19      	adds	r1, r3, #0
 800ad06:	1c20      	adds	r0, r4, #0
 800ad08:	f7f6 f94a 	bl	8000fa0 <__aeabi_fmul>
 800ad0c:	1c03      	adds	r3, r0, #0
 800ad0e:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800ad14:	1c19      	adds	r1, r3, #0
 800ad16:	2085      	movs	r0, #133	@ 0x85
 800ad18:	05c0      	lsls	r0, r0, #23
 800ad1a:	f7f6 fa7f 	bl	800121c <__aeabi_fsub>
 800ad1e:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800ad20:	6939      	ldr	r1, [r7, #16]
 800ad22:	1c18      	adds	r0, r3, #0
 800ad24:	f7f6 f93c 	bl	8000fa0 <__aeabi_fmul>
 800ad28:	1c03      	adds	r3, r0, #0
 800ad2a:	1c18      	adds	r0, r3, #0
 800ad2c:	f017 ff7a 	bl	8022c24 <sqrtf>
 800ad30:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ad3a:	2185      	movs	r1, #133	@ 0x85
 800ad3c:	05c9      	lsls	r1, r1, #23
 800ad3e:	6938      	ldr	r0, [r7, #16]
 800ad40:	f7f6 f92e 	bl	8000fa0 <__aeabi_fmul>
 800ad44:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800ad46:	1c19      	adds	r1, r3, #0
 800ad48:	1c28      	adds	r0, r5, #0
 800ad4a:	f7f5 ff43 	bl	8000bd4 <__aeabi_fdiv>
 800ad4e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800ad50:	1c19      	adds	r1, r3, #0
 800ad52:	1c20      	adds	r0, r4, #0
 800ad54:	f7f6 f924 	bl	8000fa0 <__aeabi_fmul>
 800ad58:	1c03      	adds	r3, r0, #0
 800ad5a:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad60:	68f9      	ldr	r1, [r7, #12]
 800ad62:	1c18      	adds	r0, r3, #0
 800ad64:	f7f6 f91c 	bl	8000fa0 <__aeabi_fmul>
 800ad68:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800ad6a:	6939      	ldr	r1, [r7, #16]
 800ad6c:	1c18      	adds	r0, r3, #0
 800ad6e:	f7f5 ff31 	bl	8000bd4 <__aeabi_fdiv>
 800ad72:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800ad74:	68f9      	ldr	r1, [r7, #12]
 800ad76:	1c18      	adds	r0, r3, #0
 800ad78:	f7f6 f912 	bl	8000fa0 <__aeabi_fmul>
 800ad7c:	1c03      	adds	r3, r0, #0
             sqrtf(
 800ad7e:	1c19      	adds	r1, r3, #0
 800ad80:	1c20      	adds	r0, r4, #0
 800ad82:	f7f5 fd9d 	bl	80008c0 <__aeabi_fadd>
 800ad86:	1c03      	adds	r3, r0, #0
 800ad88:	1c18      	adds	r0, r3, #0
 800ad8a:	f017 ff4b 	bl	8022c24 <sqrtf>
 800ad8e:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ad90:	1c19      	adds	r1, r3, #0
 800ad92:	1c30      	adds	r0, r6, #0
 800ad94:	f7f6 f904 	bl	8000fa0 <__aeabi_fmul>
 800ad98:	1c03      	adds	r3, r0, #0
 800ad9a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ada8:	68f9      	ldr	r1, [r7, #12]
 800adaa:	1c18      	adds	r0, r3, #0
 800adac:	f7f6 f8f8 	bl	8000fa0 <__aeabi_fmul>
 800adb0:	1c03      	adds	r3, r0, #0
 800adb2:	2182      	movs	r1, #130	@ 0x82
 800adb4:	05c9      	lsls	r1, r1, #23
 800adb6:	1c18      	adds	r0, r3, #0
 800adb8:	f7f5 ff0c 	bl	8000bd4 <__aeabi_fdiv>
 800adbc:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800adbe:	1c19      	adds	r1, r3, #0
 800adc0:	1c20      	adds	r0, r4, #0
 800adc2:	f7f5 fd7d 	bl	80008c0 <__aeabi_fadd>
 800adc6:	1c03      	adds	r3, r0, #0
 800adc8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800adce:	46c0      	nop			@ (mov r8, r8)
 800add0:	46bd      	mov	sp, r7
 800add2:	b007      	add	sp, #28
 800add4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800add6:	46c0      	nop			@ (mov r8, r8)
 800add8:	42c80000 	.word	0x42c80000
 800addc:	c2c80000 	.word	0xc2c80000
 800ade0:	44b40000 	.word	0x44b40000

0800ade4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800adfc:	46c0      	nop			@ (mov r8, r8)
 800adfe:	46bd      	mov	sp, r7
 800ae00:	b004      	add	sp, #16
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800ae04:	b590      	push	{r4, r7, lr}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae16:	1c19      	adds	r1, r3, #0
 800ae18:	6838      	ldr	r0, [r7, #0]
 800ae1a:	f7f6 f9ff 	bl	800121c <__aeabi_fsub>
 800ae1e:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae20:	1c19      	adds	r1, r3, #0
 800ae22:	1c20      	adds	r0, r4, #0
 800ae24:	f7f6 f8bc 	bl	8000fa0 <__aeabi_fmul>
 800ae28:	1c03      	adds	r3, r0, #0
 800ae2a:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800ae2c:	4912      	ldr	r1, [pc, #72]	@ (800ae78 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7f5 fb7e 	bl	8000530 <__aeabi_fcmplt>
 800ae34:	1e03      	subs	r3, r0, #0
 800ae36:	d002      	beq.n	800ae3e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800ae38:	23fe      	movs	r3, #254	@ 0xfe
 800ae3a:	059b      	lsls	r3, r3, #22
 800ae3c:	e018      	b.n	800ae70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800ae3e:	490f      	ldr	r1, [pc, #60]	@ (800ae7c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f7f5 fb89 	bl	8000558 <__aeabi_fcmpgt>
 800ae46:	1e03      	subs	r3, r0, #0
 800ae48:	d001      	beq.n	800ae4e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e010      	b.n	800ae70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	1c18      	adds	r0, r3, #0
 800ae52:	f017 febf 	bl	8022bd4 <expf>
 800ae56:	1c03      	adds	r3, r0, #0
 800ae58:	21fe      	movs	r1, #254	@ 0xfe
 800ae5a:	0589      	lsls	r1, r1, #22
 800ae5c:	1c18      	adds	r0, r3, #0
 800ae5e:	f7f5 fd2f 	bl	80008c0 <__aeabi_fadd>
 800ae62:	1c03      	adds	r3, r0, #0
 800ae64:	1c19      	adds	r1, r3, #0
 800ae66:	20fe      	movs	r0, #254	@ 0xfe
 800ae68:	0580      	lsls	r0, r0, #22
 800ae6a:	f7f5 feb3 	bl	8000bd4 <__aeabi_fdiv>
 800ae6e:	1c03      	adds	r3, r0, #0
    }
}
 800ae70:	1c18      	adds	r0, r3, #0
 800ae72:	46bd      	mov	sp, r7
 800ae74:	b005      	add	sp, #20
 800ae76:	bd90      	pop	{r4, r7, pc}
 800ae78:	c2480000 	.word	0xc2480000
 800ae7c:	42480000 	.word	0x42480000

0800ae80 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800ae98:	46c0      	nop			@ (mov r8, r8)
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	b004      	add	sp, #16
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800aea0:	b590      	push	{r4, r7, lr}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	d114      	bne.n	800aedc <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aeb6:	1c19      	adds	r1, r3, #0
 800aeb8:	6838      	ldr	r0, [r7, #0]
 800aeba:	f7f6 f9af 	bl	800121c <__aeabi_fsub>
 800aebe:	1c03      	adds	r3, r0, #0
 800aec0:	4918      	ldr	r1, [pc, #96]	@ (800af24 <GasIndexAlgorithm__mox_model__process+0x84>)
 800aec2:	1c18      	adds	r0, r3, #0
 800aec4:	f7f5 fe86 	bl	8000bd4 <__aeabi_fdiv>
 800aec8:	1c03      	adds	r3, r0, #0
 800aeca:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800aed0:	1c19      	adds	r1, r3, #0
 800aed2:	1c10      	adds	r0, r2, #0
 800aed4:	f7f6 f864 	bl	8000fa0 <__aeabi_fmul>
 800aed8:	1c03      	adds	r3, r0, #0
 800aeda:	e01f      	b.n	800af1c <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aee0:	1c19      	adds	r1, r3, #0
 800aee2:	6838      	ldr	r0, [r7, #0]
 800aee4:	f7f6 f99a 	bl	800121c <__aeabi_fsub>
 800aee8:	1c03      	adds	r3, r0, #0
 800aeea:	1c1a      	adds	r2, r3, #0
 800aeec:	2380      	movs	r3, #128	@ 0x80
 800aeee:	061b      	lsls	r3, r3, #24
 800aef0:	4053      	eors	r3, r2
 800aef2:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aef8:	490b      	ldr	r1, [pc, #44]	@ (800af28 <GasIndexAlgorithm__mox_model__process+0x88>)
 800aefa:	1c18      	adds	r0, r3, #0
 800aefc:	f7f5 fce0 	bl	80008c0 <__aeabi_fadd>
 800af00:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800af02:	1c19      	adds	r1, r3, #0
 800af04:	1c20      	adds	r0, r4, #0
 800af06:	f7f5 fe65 	bl	8000bd4 <__aeabi_fdiv>
 800af0a:	1c03      	adds	r3, r0, #0
 800af0c:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800af12:	1c19      	adds	r1, r3, #0
 800af14:	1c10      	adds	r0, r2, #0
 800af16:	f7f6 f843 	bl	8000fa0 <__aeabi_fmul>
 800af1a:	1c03      	adds	r3, r0, #0
    }
}
 800af1c:	1c18      	adds	r0, r3, #0
 800af1e:	46bd      	mov	sp, r7
 800af20:	b003      	add	sp, #12
 800af22:	bd90      	pop	{r4, r7, pc}
 800af24:	44fa0000 	.word	0x44fa0000
 800af28:	435c0000 	.word	0x435c0000

0800af2c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
 800af38:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2180      	movs	r1, #128	@ 0x80
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2184      	movs	r1, #132	@ 0x84
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2188      	movs	r1, #136	@ 0x88
 800af4e:	683a      	ldr	r2, [r7, #0]
 800af50:	505a      	str	r2, [r3, r1]
}
 800af52:	46c0      	nop			@ (mov r8, r8)
 800af54:	46bd      	mov	sp, r7
 800af56:	b004      	add	sp, #16
 800af58:	bd80      	pop	{r7, pc}
	...

0800af5c <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800af5c:	b590      	push	{r4, r7, lr}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2280      	movs	r2, #128	@ 0x80
 800af6a:	589c      	ldr	r4, [r3, r2]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2284      	movs	r2, #132	@ 0x84
 800af70:	589b      	ldr	r3, [r3, r2]
 800af72:	1c19      	adds	r1, r3, #0
 800af74:	6838      	ldr	r0, [r7, #0]
 800af76:	f7f6 f951 	bl	800121c <__aeabi_fsub>
 800af7a:	1c03      	adds	r3, r0, #0
 800af7c:	1c19      	adds	r1, r3, #0
 800af7e:	1c20      	adds	r0, r4, #0
 800af80:	f7f6 f80e 	bl	8000fa0 <__aeabi_fmul>
 800af84:	1c03      	adds	r3, r0, #0
 800af86:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800af88:	4940      	ldr	r1, [pc, #256]	@ (800b08c <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800af8a:	68b8      	ldr	r0, [r7, #8]
 800af8c:	f7f5 fad0 	bl	8000530 <__aeabi_fcmplt>
 800af90:	1e03      	subs	r3, r0, #0
 800af92:	d001      	beq.n	800af98 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800af94:	4b3e      	ldr	r3, [pc, #248]	@ (800b090 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800af96:	e075      	b.n	800b084 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800af98:	493e      	ldr	r1, [pc, #248]	@ (800b094 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800af9a:	68b8      	ldr	r0, [r7, #8]
 800af9c:	f7f5 fadc 	bl	8000558 <__aeabi_fcmpgt>
 800afa0:	1e03      	subs	r3, r0, #0
 800afa2:	d001      	beq.n	800afa8 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800afa4:	2300      	movs	r3, #0
 800afa6:	e06d      	b.n	800b084 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800afa8:	2100      	movs	r1, #0
 800afaa:	6838      	ldr	r0, [r7, #0]
 800afac:	f7f5 fade 	bl	800056c <__aeabi_fcmpge>
 800afb0:	1e03      	subs	r3, r0, #0
 800afb2:	d047      	beq.n	800b044 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2288      	movs	r2, #136	@ 0x88
 800afb8:	589b      	ldr	r3, [r3, r2]
 800afba:	21fe      	movs	r1, #254	@ 0xfe
 800afbc:	0589      	lsls	r1, r1, #22
 800afbe:	1c18      	adds	r0, r3, #0
 800afc0:	f7f5 fab0 	bl	8000524 <__aeabi_fcmpeq>
 800afc4:	1e03      	subs	r3, r0, #0
 800afc6:	d00e      	beq.n	800afe6 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	1c19      	adds	r1, r3, #0
 800afce:	20fe      	movs	r0, #254	@ 0xfe
 800afd0:	0580      	lsls	r0, r0, #22
 800afd2:	f7f6 f923 	bl	800121c <__aeabi_fsub>
 800afd6:	1c03      	adds	r3, r0, #0
 800afd8:	492f      	ldr	r1, [pc, #188]	@ (800b098 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800afda:	1c18      	adds	r0, r3, #0
 800afdc:	f7f5 ffe0 	bl	8000fa0 <__aeabi_fmul>
 800afe0:	1c03      	adds	r3, r0, #0
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	e012      	b.n	800b00c <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	492c      	ldr	r1, [pc, #176]	@ (800b09c <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800afec:	1c18      	adds	r0, r3, #0
 800afee:	f7f5 ffd7 	bl	8000fa0 <__aeabi_fmul>
 800aff2:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800aff4:	1c19      	adds	r1, r3, #0
 800aff6:	4826      	ldr	r0, [pc, #152]	@ (800b090 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aff8:	f7f6 f910 	bl	800121c <__aeabi_fsub>
 800affc:	1c03      	adds	r3, r0, #0
 800affe:	2181      	movs	r1, #129	@ 0x81
 800b000:	05c9      	lsls	r1, r1, #23
 800b002:	1c18      	adds	r0, r3, #0
 800b004:	f7f5 fde6 	bl	8000bd4 <__aeabi_fdiv>
 800b008:	1c03      	adds	r3, r0, #0
 800b00a:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b00c:	4920      	ldr	r1, [pc, #128]	@ (800b090 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f7f5 fc56 	bl	80008c0 <__aeabi_fadd>
 800b014:	1c03      	adds	r3, r0, #0
 800b016:	1c1c      	adds	r4, r3, #0
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	1c18      	adds	r0, r3, #0
 800b01c:	f017 fdda 	bl	8022bd4 <expf>
 800b020:	1c03      	adds	r3, r0, #0
 800b022:	21fe      	movs	r1, #254	@ 0xfe
 800b024:	0589      	lsls	r1, r1, #22
 800b026:	1c18      	adds	r0, r3, #0
 800b028:	f7f5 fc4a 	bl	80008c0 <__aeabi_fadd>
 800b02c:	1c03      	adds	r3, r0, #0
 800b02e:	1c19      	adds	r1, r3, #0
 800b030:	1c20      	adds	r0, r4, #0
 800b032:	f7f5 fdcf 	bl	8000bd4 <__aeabi_fdiv>
 800b036:	1c03      	adds	r3, r0, #0
 800b038:	68f9      	ldr	r1, [r7, #12]
 800b03a:	1c18      	adds	r0, r3, #0
 800b03c:	f7f6 f8ee 	bl	800121c <__aeabi_fsub>
 800b040:	1c03      	adds	r3, r0, #0
 800b042:	e01f      	b.n	800b084 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2188      	movs	r1, #136	@ 0x88
 800b04c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b04e:	1c19      	adds	r1, r3, #0
 800b050:	1c10      	adds	r0, r2, #0
 800b052:	f7f5 fdbf 	bl	8000bd4 <__aeabi_fdiv>
 800b056:	1c03      	adds	r3, r0, #0
 800b058:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	1c18      	adds	r0, r3, #0
 800b05e:	f017 fdb9 	bl	8022bd4 <expf>
 800b062:	1c03      	adds	r3, r0, #0
 800b064:	21fe      	movs	r1, #254	@ 0xfe
 800b066:	0589      	lsls	r1, r1, #22
 800b068:	1c18      	adds	r0, r3, #0
 800b06a:	f7f5 fc29 	bl	80008c0 <__aeabi_fadd>
 800b06e:	1c03      	adds	r3, r0, #0
 800b070:	1c19      	adds	r1, r3, #0
 800b072:	4807      	ldr	r0, [pc, #28]	@ (800b090 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b074:	f7f5 fdae 	bl	8000bd4 <__aeabi_fdiv>
 800b078:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b07a:	1c19      	adds	r1, r3, #0
 800b07c:	1c20      	adds	r0, r4, #0
 800b07e:	f7f5 ff8f 	bl	8000fa0 <__aeabi_fmul>
 800b082:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b084:	1c18      	adds	r0, r3, #0
 800b086:	46bd      	mov	sp, r7
 800b088:	b005      	add	sp, #20
 800b08a:	bd90      	pop	{r4, r7, pc}
 800b08c:	c2480000 	.word	0xc2480000
 800b090:	43fa0000 	.word	0x43fa0000
 800b094:	42480000 	.word	0x42480000
 800b098:	3f8041ab 	.word	0x3f8041ab
 800b09c:	40a00000 	.word	0x40a00000

0800b0a0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b0a0:	b590      	push	{r4, r7, lr}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	4913      	ldr	r1, [pc, #76]	@ (800b100 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b0b2:	1c18      	adds	r0, r3, #0
 800b0b4:	f7f5 fc04 	bl	80008c0 <__aeabi_fadd>
 800b0b8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b0ba:	1c19      	adds	r1, r3, #0
 800b0bc:	1c20      	adds	r0, r4, #0
 800b0be:	f7f5 fd89 	bl	8000bd4 <__aeabi_fdiv>
 800b0c2:	1c03      	adds	r3, r0, #0
 800b0c4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	228c      	movs	r2, #140	@ 0x8c
 800b0ca:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	490b      	ldr	r1, [pc, #44]	@ (800b104 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b0d6:	1c18      	adds	r0, r3, #0
 800b0d8:	f7f5 fbf2 	bl	80008c0 <__aeabi_fadd>
 800b0dc:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b0de:	1c19      	adds	r1, r3, #0
 800b0e0:	1c20      	adds	r0, r4, #0
 800b0e2:	f7f5 fd77 	bl	8000bd4 <__aeabi_fdiv>
 800b0e6:	1c03      	adds	r3, r0, #0
 800b0e8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2290      	movs	r2, #144	@ 0x90
 800b0ee:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2294      	movs	r2, #148	@ 0x94
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	5499      	strb	r1, [r3, r2]
}
 800b0f8:	46c0      	nop			@ (mov r8, r8)
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	b003      	add	sp, #12
 800b0fe:	bd90      	pop	{r4, r7, pc}
 800b100:	41a00000 	.word	0x41a00000
 800b104:	43fa0000 	.word	0x43fa0000

0800b108 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b108:	b590      	push	{r4, r7, lr}
 800b10a:	b087      	sub	sp, #28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2294      	movs	r2, #148	@ 0x94
 800b116:	5c9b      	ldrb	r3, [r3, r2]
 800b118:	2201      	movs	r2, #1
 800b11a:	4053      	eors	r3, r2
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00f      	beq.n	800b142 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2198      	movs	r1, #152	@ 0x98
 800b126:	683a      	ldr	r2, [r7, #0]
 800b128:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	219c      	movs	r1, #156	@ 0x9c
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	21a0      	movs	r1, #160	@ 0xa0
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2294      	movs	r2, #148	@ 0x94
 800b13e:	2101      	movs	r1, #1
 800b140:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	228c      	movs	r2, #140	@ 0x8c
 800b146:	589b      	ldr	r3, [r3, r2]
 800b148:	1c19      	adds	r1, r3, #0
 800b14a:	20fe      	movs	r0, #254	@ 0xfe
 800b14c:	0580      	lsls	r0, r0, #22
 800b14e:	f7f6 f865 	bl	800121c <__aeabi_fsub>
 800b152:	1c03      	adds	r3, r0, #0
 800b154:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2298      	movs	r2, #152	@ 0x98
 800b15a:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b15c:	1c19      	adds	r1, r3, #0
 800b15e:	f7f5 ff1f 	bl	8000fa0 <__aeabi_fmul>
 800b162:	1c03      	adds	r3, r0, #0
 800b164:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	228c      	movs	r2, #140	@ 0x8c
 800b16a:	589b      	ldr	r3, [r3, r2]
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	1c18      	adds	r0, r3, #0
 800b170:	f7f5 ff16 	bl	8000fa0 <__aeabi_fmul>
 800b174:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b176:	1c19      	adds	r1, r3, #0
 800b178:	1c20      	adds	r0, r4, #0
 800b17a:	f7f5 fba1 	bl	80008c0 <__aeabi_fadd>
 800b17e:	1c03      	adds	r3, r0, #0
 800b180:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2298      	movs	r2, #152	@ 0x98
 800b186:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2290      	movs	r2, #144	@ 0x90
 800b18c:	589b      	ldr	r3, [r3, r2]
 800b18e:	1c19      	adds	r1, r3, #0
 800b190:	20fe      	movs	r0, #254	@ 0xfe
 800b192:	0580      	lsls	r0, r0, #22
 800b194:	f7f6 f842 	bl	800121c <__aeabi_fsub>
 800b198:	1c03      	adds	r3, r0, #0
 800b19a:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	229c      	movs	r2, #156	@ 0x9c
 800b1a0:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b1a2:	1c19      	adds	r1, r3, #0
 800b1a4:	f7f5 fefc 	bl	8000fa0 <__aeabi_fmul>
 800b1a8:	1c03      	adds	r3, r0, #0
 800b1aa:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2290      	movs	r2, #144	@ 0x90
 800b1b0:	589b      	ldr	r3, [r3, r2]
 800b1b2:	6839      	ldr	r1, [r7, #0]
 800b1b4:	1c18      	adds	r0, r3, #0
 800b1b6:	f7f5 fef3 	bl	8000fa0 <__aeabi_fmul>
 800b1ba:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b1bc:	1c19      	adds	r1, r3, #0
 800b1be:	1c20      	adds	r0, r4, #0
 800b1c0:	f7f5 fb7e 	bl	80008c0 <__aeabi_fadd>
 800b1c4:	1c03      	adds	r3, r0, #0
 800b1c6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	229c      	movs	r2, #156	@ 0x9c
 800b1cc:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2298      	movs	r2, #152	@ 0x98
 800b1d2:	589a      	ldr	r2, [r3, r2]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	219c      	movs	r1, #156	@ 0x9c
 800b1d8:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b1da:	1c19      	adds	r1, r3, #0
 800b1dc:	1c10      	adds	r0, r2, #0
 800b1de:	f7f6 f81d 	bl	800121c <__aeabi_fsub>
 800b1e2:	1c03      	adds	r3, r0, #0
 800b1e4:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	6978      	ldr	r0, [r7, #20]
 800b1ea:	f7f5 f9a1 	bl	8000530 <__aeabi_fcmplt>
 800b1ee:	1e03      	subs	r3, r0, #0
 800b1f0:	d004      	beq.n	800b1fc <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2280      	movs	r2, #128	@ 0x80
 800b1f6:	0612      	lsls	r2, r2, #24
 800b1f8:	4053      	eors	r3, r2
 800b1fa:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b1fc:	4923      	ldr	r1, [pc, #140]	@ (800b28c <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b1fe:	6978      	ldr	r0, [r7, #20]
 800b200:	f7f5 fece 	bl	8000fa0 <__aeabi_fmul>
 800b204:	1c03      	adds	r3, r0, #0
 800b206:	1c18      	adds	r0, r3, #0
 800b208:	f017 fce4 	bl	8022bd4 <expf>
 800b20c:	1c03      	adds	r3, r0, #0
 800b20e:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b210:	491f      	ldr	r1, [pc, #124]	@ (800b290 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b212:	6938      	ldr	r0, [r7, #16]
 800b214:	f7f5 fec4 	bl	8000fa0 <__aeabi_fmul>
 800b218:	1c03      	adds	r3, r0, #0
 800b21a:	491e      	ldr	r1, [pc, #120]	@ (800b294 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b21c:	1c18      	adds	r0, r3, #0
 800b21e:	f7f5 fb4f 	bl	80008c0 <__aeabi_fadd>
 800b222:	1c03      	adds	r3, r0, #0
 800b224:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685c      	ldr	r4, [r3, #4]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	68f9      	ldr	r1, [r7, #12]
 800b230:	1c18      	adds	r0, r3, #0
 800b232:	f7f5 fb45 	bl	80008c0 <__aeabi_fadd>
 800b236:	1c03      	adds	r3, r0, #0
 800b238:	1c19      	adds	r1, r3, #0
 800b23a:	1c20      	adds	r0, r4, #0
 800b23c:	f7f5 fcca 	bl	8000bd4 <__aeabi_fdiv>
 800b240:	1c03      	adds	r3, r0, #0
 800b242:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b244:	68b9      	ldr	r1, [r7, #8]
 800b246:	20fe      	movs	r0, #254	@ 0xfe
 800b248:	0580      	lsls	r0, r0, #22
 800b24a:	f7f5 ffe7 	bl	800121c <__aeabi_fsub>
 800b24e:	1c03      	adds	r3, r0, #0
 800b250:	1c18      	adds	r0, r3, #0
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	22a0      	movs	r2, #160	@ 0xa0
 800b256:	589b      	ldr	r3, [r3, r2]
 800b258:	1c19      	adds	r1, r3, #0
 800b25a:	f7f5 fea1 	bl	8000fa0 <__aeabi_fmul>
 800b25e:	1c03      	adds	r3, r0, #0
 800b260:	1c1c      	adds	r4, r3, #0
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	68b8      	ldr	r0, [r7, #8]
 800b266:	f7f5 fe9b 	bl	8000fa0 <__aeabi_fmul>
 800b26a:	1c03      	adds	r3, r0, #0
 800b26c:	1c19      	adds	r1, r3, #0
 800b26e:	1c20      	adds	r0, r4, #0
 800b270:	f7f5 fb26 	bl	80008c0 <__aeabi_fadd>
 800b274:	1c03      	adds	r3, r0, #0
 800b276:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	22a0      	movs	r2, #160	@ 0xa0
 800b27c:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	22a0      	movs	r2, #160	@ 0xa0
 800b282:	589b      	ldr	r3, [r3, r2]
}
 800b284:	1c18      	adds	r0, r3, #0
 800b286:	46bd      	mov	sp, r7
 800b288:	b007      	add	sp, #28
 800b28a:	bd90      	pop	{r4, r7, pc}
 800b28c:	be4ccccd 	.word	0xbe4ccccd
 800b290:	43f00000 	.word	0x43f00000
 800b294:	41a00000 	.word	0x41a00000

0800b298 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	000a      	movs	r2, r1
 800b2a2:	1cbb      	adds	r3, r7, #2
 800b2a4:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b2a6:	230d      	movs	r3, #13
 800b2a8:	18fb      	adds	r3, r7, r3
 800b2aa:	22ff      	movs	r2, #255	@ 0xff
 800b2ac:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b2ae:	230e      	movs	r3, #14
 800b2b0:	18fb      	adds	r3, r7, r3
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	801a      	strh	r2, [r3, #0]
 800b2b6:	e037      	b.n	800b328 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b2b8:	230e      	movs	r3, #14
 800b2ba:	18fb      	adds	r3, r7, r3
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	18d3      	adds	r3, r2, r3
 800b2c2:	7819      	ldrb	r1, [r3, #0]
 800b2c4:	220d      	movs	r2, #13
 800b2c6:	18bb      	adds	r3, r7, r2
 800b2c8:	18ba      	adds	r2, r7, r2
 800b2ca:	7812      	ldrb	r2, [r2, #0]
 800b2cc:	404a      	eors	r2, r1
 800b2ce:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b2d0:	230c      	movs	r3, #12
 800b2d2:	18fb      	adds	r3, r7, r3
 800b2d4:	2208      	movs	r2, #8
 800b2d6:	701a      	strb	r2, [r3, #0]
 800b2d8:	e01b      	b.n	800b312 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b2da:	210d      	movs	r1, #13
 800b2dc:	187b      	adds	r3, r7, r1
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	b25b      	sxtb	r3, r3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	da09      	bge.n	800b2fa <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b2e6:	187b      	adds	r3, r7, r1
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	b25b      	sxtb	r3, r3
 800b2ee:	2231      	movs	r2, #49	@ 0x31
 800b2f0:	4053      	eors	r3, r2
 800b2f2:	b25a      	sxtb	r2, r3
 800b2f4:	187b      	adds	r3, r7, r1
 800b2f6:	701a      	strb	r2, [r3, #0]
 800b2f8:	e005      	b.n	800b306 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b2fa:	230d      	movs	r3, #13
 800b2fc:	18fa      	adds	r2, r7, r3
 800b2fe:	18fb      	adds	r3, r7, r3
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	18db      	adds	r3, r3, r3
 800b304:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b306:	220c      	movs	r2, #12
 800b308:	18bb      	adds	r3, r7, r2
 800b30a:	18ba      	adds	r2, r7, r2
 800b30c:	7812      	ldrb	r2, [r2, #0]
 800b30e:	3a01      	subs	r2, #1
 800b310:	701a      	strb	r2, [r3, #0]
 800b312:	230c      	movs	r3, #12
 800b314:	18fb      	adds	r3, r7, r3
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1de      	bne.n	800b2da <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b31c:	220e      	movs	r2, #14
 800b31e:	18bb      	adds	r3, r7, r2
 800b320:	18ba      	adds	r2, r7, r2
 800b322:	8812      	ldrh	r2, [r2, #0]
 800b324:	3201      	adds	r2, #1
 800b326:	801a      	strh	r2, [r3, #0]
 800b328:	230e      	movs	r3, #14
 800b32a:	18fa      	adds	r2, r7, r3
 800b32c:	1cbb      	adds	r3, r7, #2
 800b32e:	8812      	ldrh	r2, [r2, #0]
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	429a      	cmp	r2, r3
 800b334:	d3c0      	bcc.n	800b2b8 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b336:	230d      	movs	r3, #13
 800b338:	18fb      	adds	r3, r7, r3
 800b33a:	781b      	ldrb	r3, [r3, #0]
}
 800b33c:	0018      	movs	r0, r3
 800b33e:	46bd      	mov	sp, r7
 800b340:	b004      	add	sp, #16
 800b342:	bd80      	pop	{r7, pc}

0800b344 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	0008      	movs	r0, r1
 800b34e:	0011      	movs	r1, r2
 800b350:	1cbb      	adds	r3, r7, #2
 800b352:	1c02      	adds	r2, r0, #0
 800b354:	801a      	strh	r2, [r3, #0]
 800b356:	1c7b      	adds	r3, r7, #1
 800b358:	1c0a      	adds	r2, r1, #0
 800b35a:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b35c:	1cbb      	adds	r3, r7, #2
 800b35e:	881a      	ldrh	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	0011      	movs	r1, r2
 800b364:	0018      	movs	r0, r3
 800b366:	f7ff ff97 	bl	800b298 <sensirion_i2c_generate_crc>
 800b36a:	0003      	movs	r3, r0
 800b36c:	001a      	movs	r2, r3
 800b36e:	1c7b      	adds	r3, r7, #1
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	4293      	cmp	r3, r2
 800b374:	d001      	beq.n	800b37a <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e000      	b.n	800b37c <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	0018      	movs	r0, r3
 800b37e:	46bd      	mov	sp, r7
 800b380:	b002      	add	sp, #8
 800b382:	bd80      	pop	{r7, pc}

0800b384 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	0008      	movs	r0, r1
 800b38e:	0011      	movs	r1, r2
 800b390:	1cbb      	adds	r3, r7, #2
 800b392:	1c02      	adds	r2, r0, #0
 800b394:	801a      	strh	r2, [r3, #0]
 800b396:	003b      	movs	r3, r7
 800b398:	1c0a      	adds	r2, r1, #0
 800b39a:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b39c:	003b      	movs	r3, r7
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	0a1b      	lsrs	r3, r3, #8
 800b3a2:	b299      	uxth	r1, r3
 800b3a4:	1cbb      	adds	r3, r7, #2
 800b3a6:	881b      	ldrh	r3, [r3, #0]
 800b3a8:	1cba      	adds	r2, r7, #2
 800b3aa:	1c58      	adds	r0, r3, #1
 800b3ac:	8010      	strh	r0, [r2, #0]
 800b3ae:	001a      	movs	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	189b      	adds	r3, r3, r2
 800b3b4:	b2ca      	uxtb	r2, r1
 800b3b6:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b3b8:	1cbb      	adds	r3, r7, #2
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	1cba      	adds	r2, r7, #2
 800b3be:	1c59      	adds	r1, r3, #1
 800b3c0:	8011      	strh	r1, [r2, #0]
 800b3c2:	001a      	movs	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	189b      	adds	r3, r3, r2
 800b3c8:	003a      	movs	r2, r7
 800b3ca:	8812      	ldrh	r2, [r2, #0]
 800b3cc:	b2d2      	uxtb	r2, r2
 800b3ce:	701a      	strb	r2, [r3, #0]
    return offset;
 800b3d0:	1cbb      	adds	r3, r7, #2
 800b3d2:	881b      	ldrh	r3, [r3, #0]
}
 800b3d4:	0018      	movs	r0, r3
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	b002      	add	sp, #8
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b3dc:	b590      	push	{r4, r7, lr}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	0008      	movs	r0, r1
 800b3e6:	0011      	movs	r1, r2
 800b3e8:	1cbb      	adds	r3, r7, #2
 800b3ea:	1c02      	adds	r2, r0, #0
 800b3ec:	801a      	strh	r2, [r3, #0]
 800b3ee:	003b      	movs	r3, r7
 800b3f0:	1c0a      	adds	r2, r1, #0
 800b3f2:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b3f4:	003b      	movs	r3, r7
 800b3f6:	881b      	ldrh	r3, [r3, #0]
 800b3f8:	0a1b      	lsrs	r3, r3, #8
 800b3fa:	b299      	uxth	r1, r3
 800b3fc:	1cbb      	adds	r3, r7, #2
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	1cba      	adds	r2, r7, #2
 800b402:	1c58      	adds	r0, r3, #1
 800b404:	8010      	strh	r0, [r2, #0]
 800b406:	001a      	movs	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	189b      	adds	r3, r3, r2
 800b40c:	b2ca      	uxtb	r2, r1
 800b40e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b410:	1cbb      	adds	r3, r7, #2
 800b412:	881b      	ldrh	r3, [r3, #0]
 800b414:	1cba      	adds	r2, r7, #2
 800b416:	1c59      	adds	r1, r3, #1
 800b418:	8011      	strh	r1, [r2, #0]
 800b41a:	001a      	movs	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	189b      	adds	r3, r3, r2
 800b420:	003a      	movs	r2, r7
 800b422:	8812      	ldrh	r2, [r2, #0]
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b428:	1cbb      	adds	r3, r7, #2
 800b42a:	881b      	ldrh	r3, [r3, #0]
 800b42c:	3b02      	subs	r3, #2
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b432:	1cbb      	adds	r3, r7, #2
 800b434:	881b      	ldrh	r3, [r3, #0]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	18d4      	adds	r4, r2, r3
 800b43a:	2102      	movs	r1, #2
 800b43c:	f7ff ff2c 	bl	800b298 <sensirion_i2c_generate_crc>
 800b440:	0003      	movs	r3, r0
 800b442:	7023      	strb	r3, [r4, #0]
    offset++;
 800b444:	1cbb      	adds	r3, r7, #2
 800b446:	881a      	ldrh	r2, [r3, #0]
 800b448:	1cbb      	adds	r3, r7, #2
 800b44a:	3201      	adds	r2, #1
 800b44c:	801a      	strh	r2, [r3, #0]

    return offset;
 800b44e:	1cbb      	adds	r3, r7, #2
 800b450:	881b      	ldrh	r3, [r3, #0]
}
 800b452:	0018      	movs	r0, r3
 800b454:	46bd      	mov	sp, r7
 800b456:	b003      	add	sp, #12
 800b458:	bd90      	pop	{r4, r7, pc}

0800b45a <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	0008      	movs	r0, r1
 800b464:	0011      	movs	r1, r2
 800b466:	1cbb      	adds	r3, r7, #2
 800b468:	1c02      	adds	r2, r0, #0
 800b46a:	801a      	strh	r2, [r3, #0]
 800b46c:	003b      	movs	r3, r7
 800b46e:	1c0a      	adds	r2, r1, #0
 800b470:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b472:	003b      	movs	r3, r7
 800b474:	881a      	ldrh	r2, [r3, #0]
 800b476:	1cbb      	adds	r3, r7, #2
 800b478:	8819      	ldrh	r1, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	0018      	movs	r0, r3
 800b47e:	f7ff ffad 	bl	800b3dc <sensirion_i2c_add_uint16_t_to_buffer>
 800b482:	0003      	movs	r3, r0
}
 800b484:	0018      	movs	r0, r3
 800b486:	46bd      	mov	sp, r7
 800b488:	b002      	add	sp, #8
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6039      	str	r1, [r7, #0]
 800b494:	0011      	movs	r1, r2
 800b496:	1dfb      	adds	r3, r7, #7
 800b498:	1c02      	adds	r2, r0, #0
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	1d3b      	adds	r3, r7, #4
 800b49e:	1c0a      	adds	r2, r1, #0
 800b4a0:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b4a2:	1d3b      	adds	r3, r7, #4
 800b4a4:	881a      	ldrh	r2, [r3, #0]
 800b4a6:	6839      	ldr	r1, [r7, #0]
 800b4a8:	1dfb      	adds	r3, r7, #7
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	0018      	movs	r0, r3
 800b4ae:	f7fe fa01 	bl	80098b4 <sensirion_i2c_hal_write>
 800b4b2:	0003      	movs	r3, r0
}
 800b4b4:	0018      	movs	r0, r3
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	b002      	add	sp, #8
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b4bc:	b5b0      	push	{r4, r5, r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6039      	str	r1, [r7, #0]
 800b4c4:	0011      	movs	r1, r2
 800b4c6:	1dfb      	adds	r3, r7, #7
 800b4c8:	1c02      	adds	r2, r0, #0
 800b4ca:	701a      	strb	r2, [r3, #0]
 800b4cc:	1d3b      	adds	r3, r7, #4
 800b4ce:	1c0a      	adds	r2, r1, #0
 800b4d0:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b4d2:	1d3b      	adds	r3, r7, #4
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	085b      	lsrs	r3, r3, #1
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	220a      	movs	r2, #10
 800b4dc:	18ba      	adds	r2, r7, r2
 800b4de:	1c19      	adds	r1, r3, #0
 800b4e0:	1c0b      	adds	r3, r1, #0
 800b4e2:	18db      	adds	r3, r3, r3
 800b4e4:	185b      	adds	r3, r3, r1
 800b4e6:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b4e8:	1d3b      	adds	r3, r7, #4
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	4013      	ands	r3, r2
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b4f6:	2304      	movs	r3, #4
 800b4f8:	e06b      	b.n	800b5d2 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b4fa:	230a      	movs	r3, #10
 800b4fc:	18fb      	adds	r3, r7, r3
 800b4fe:	881a      	ldrh	r2, [r3, #0]
 800b500:	6839      	ldr	r1, [r7, #0]
 800b502:	1dfb      	adds	r3, r7, #7
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	0018      	movs	r0, r3
 800b508:	f7fe f9b4 	bl	8009874 <sensirion_i2c_hal_read>
 800b50c:	0003      	movs	r3, r0
 800b50e:	001a      	movs	r2, r3
 800b510:	2108      	movs	r1, #8
 800b512:	187b      	adds	r3, r7, r1
 800b514:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b516:	000a      	movs	r2, r1
 800b518:	18bb      	adds	r3, r7, r2
 800b51a:	2100      	movs	r1, #0
 800b51c:	5e5b      	ldrsh	r3, [r3, r1]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b522:	18bb      	adds	r3, r7, r2
 800b524:	2200      	movs	r2, #0
 800b526:	5e9b      	ldrsh	r3, [r3, r2]
 800b528:	e053      	b.n	800b5d2 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b52a:	230e      	movs	r3, #14
 800b52c:	18fb      	adds	r3, r7, r3
 800b52e:	2200      	movs	r2, #0
 800b530:	801a      	strh	r2, [r3, #0]
 800b532:	230c      	movs	r3, #12
 800b534:	18fb      	adds	r3, r7, r3
 800b536:	2200      	movs	r2, #0
 800b538:	801a      	strh	r2, [r3, #0]
 800b53a:	e041      	b.n	800b5c0 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b53c:	210e      	movs	r1, #14
 800b53e:	187b      	adds	r3, r7, r1
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b546:	187b      	adds	r3, r7, r1
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	3302      	adds	r3, #2
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	001a      	movs	r2, r3
 800b554:	2102      	movs	r1, #2
 800b556:	f7ff fef5 	bl	800b344 <sensirion_i2c_check_crc>
 800b55a:	0003      	movs	r3, r0
 800b55c:	001a      	movs	r2, r3
 800b55e:	2108      	movs	r1, #8
 800b560:	187b      	adds	r3, r7, r1
 800b562:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b564:	000a      	movs	r2, r1
 800b566:	18bb      	adds	r3, r7, r2
 800b568:	2100      	movs	r1, #0
 800b56a:	5e5b      	ldrsh	r3, [r3, r1]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d003      	beq.n	800b578 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b570:	18bb      	adds	r3, r7, r2
 800b572:	2200      	movs	r2, #0
 800b574:	5e9b      	ldrsh	r3, [r3, r2]
 800b576:	e02c      	b.n	800b5d2 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b578:	240e      	movs	r4, #14
 800b57a:	193b      	adds	r3, r7, r4
 800b57c:	881b      	ldrh	r3, [r3, #0]
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	18d2      	adds	r2, r2, r3
 800b582:	250c      	movs	r5, #12
 800b584:	197b      	adds	r3, r7, r5
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	1979      	adds	r1, r7, r5
 800b58a:	1c58      	adds	r0, r3, #1
 800b58c:	8008      	strh	r0, [r1, #0]
 800b58e:	0019      	movs	r1, r3
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	185b      	adds	r3, r3, r1
 800b594:	7812      	ldrb	r2, [r2, #0]
 800b596:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b598:	193b      	adds	r3, r7, r4
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	3301      	adds	r3, #1
 800b59e:	683a      	ldr	r2, [r7, #0]
 800b5a0:	18d2      	adds	r2, r2, r3
 800b5a2:	197b      	adds	r3, r7, r5
 800b5a4:	881b      	ldrh	r3, [r3, #0]
 800b5a6:	1979      	adds	r1, r7, r5
 800b5a8:	1c58      	adds	r0, r3, #1
 800b5aa:	8008      	strh	r0, [r1, #0]
 800b5ac:	0019      	movs	r1, r3
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	185b      	adds	r3, r3, r1
 800b5b2:	7812      	ldrb	r2, [r2, #0]
 800b5b4:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b5b6:	193b      	adds	r3, r7, r4
 800b5b8:	193a      	adds	r2, r7, r4
 800b5ba:	8812      	ldrh	r2, [r2, #0]
 800b5bc:	3203      	adds	r2, #3
 800b5be:	801a      	strh	r2, [r3, #0]
 800b5c0:	230e      	movs	r3, #14
 800b5c2:	18fa      	adds	r2, r7, r3
 800b5c4:	230a      	movs	r3, #10
 800b5c6:	18fb      	adds	r3, r7, r3
 800b5c8:	8812      	ldrh	r2, [r2, #0]
 800b5ca:	881b      	ldrh	r3, [r3, #0]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d3b5      	bcc.n	800b53c <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	0018      	movs	r0, r3
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	b004      	add	sp, #16
 800b5d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b5dc <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b5dc:	b590      	push	{r4, r7, lr}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6039      	str	r1, [r7, #0]
 800b5e4:	0011      	movs	r1, r2
 800b5e6:	1dfb      	adds	r3, r7, #7
 800b5e8:	1c02      	adds	r2, r0, #0
 800b5ea:	701a      	strb	r2, [r3, #0]
 800b5ec:	1dbb      	adds	r3, r7, #6
 800b5ee:	1c0a      	adds	r2, r1, #0
 800b5f0:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b5f2:	4b08      	ldr	r3, [pc, #32]	@ (800b614 <ReadRegister+0x38>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d008      	beq.n	800b60c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b5fa:	4b06      	ldr	r3, [pc, #24]	@ (800b614 <ReadRegister+0x38>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	1dba      	adds	r2, r7, #6
 800b600:	7814      	ldrb	r4, [r2, #0]
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	1dfa      	adds	r2, r7, #7
 800b606:	7810      	ldrb	r0, [r2, #0]
 800b608:	0022      	movs	r2, r4
 800b60a:	4798      	blx	r3
  }
}
 800b60c:	46c0      	nop			@ (mov r8, r8)
 800b60e:	46bd      	mov	sp, r7
 800b610:	b003      	add	sp, #12
 800b612:	bd90      	pop	{r4, r7, pc}
 800b614:	20001288 	.word	0x20001288

0800b618 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b618:	b590      	push	{r4, r7, lr}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6039      	str	r1, [r7, #0]
 800b620:	0011      	movs	r1, r2
 800b622:	1dfb      	adds	r3, r7, #7
 800b624:	1c02      	adds	r2, r0, #0
 800b626:	701a      	strb	r2, [r3, #0]
 800b628:	1dbb      	adds	r3, r7, #6
 800b62a:	1c0a      	adds	r2, r1, #0
 800b62c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b62e:	4b08      	ldr	r3, [pc, #32]	@ (800b650 <WriteRegister+0x38>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d008      	beq.n	800b648 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b636:	4b06      	ldr	r3, [pc, #24]	@ (800b650 <WriteRegister+0x38>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	1dba      	adds	r2, r7, #6
 800b63c:	7814      	ldrb	r4, [r2, #0]
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	1dfa      	adds	r2, r7, #7
 800b642:	7810      	ldrb	r0, [r2, #0]
 800b644:	0022      	movs	r2, r4
 800b646:	4798      	blx	r3
  }
}
 800b648:	46c0      	nop			@ (mov r8, r8)
 800b64a:	46bd      	mov	sp, r7
 800b64c:	b003      	add	sp, #12
 800b64e:	bd90      	pop	{r4, r7, pc}
 800b650:	2000128c 	.word	0x2000128c

0800b654 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b65c:	f003 fac0 	bl	800ebe0 <HAL_GetTick>
 800b660:	0002      	movs	r2, r0
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	18d2      	adds	r2, r2, r3
 800b666:	4b03      	ldr	r3, [pc, #12]	@ (800b674 <setSGP40TimeStamp+0x20>)
 800b668:	601a      	str	r2, [r3, #0]
}
 800b66a:	46c0      	nop			@ (mov r8, r8)
 800b66c:	46bd      	mov	sp, r7
 800b66e:	b002      	add	sp, #8
 800b670:	bd80      	pop	{r7, pc}
 800b672:	46c0      	nop			@ (mov r8, r8)
 800b674:	2000129c 	.word	0x2000129c

0800b678 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800b67c:	4b02      	ldr	r3, [pc, #8]	@ (800b688 <ResetSGP40samplecounter+0x10>)
 800b67e:	2200      	movs	r2, #0
 800b680:	701a      	strb	r2, [r3, #0]
}
 800b682:	46c0      	nop			@ (mov r8, r8)
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	2000129a 	.word	0x2000129a

0800b68c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b696:	4b07      	ldr	r3, [pc, #28]	@ (800b6b4 <SGP_Init+0x28>)
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b69c:	4b06      	ldr	r3, [pc, #24]	@ (800b6b8 <SGP_Init+0x2c>)
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b6a2:	4b06      	ldr	r3, [pc, #24]	@ (800b6bc <SGP_Init+0x30>)
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	0018      	movs	r0, r3
 800b6a8:	f7fe ff70 	bl	800a58c <GasIndexAlgorithm_init>
}
 800b6ac:	46c0      	nop			@ (mov r8, r8)
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	b002      	add	sp, #8
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	20001288 	.word	0x20001288
 800b6b8:	2000128c 	.word	0x2000128c
 800b6bc:	200012a4 	.word	0x200012a4

0800b6c0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800b6c4:	4b07      	ldr	r3, [pc, #28]	@ (800b6e4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d004      	beq.n	800b6d6 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800b6cc:	4b06      	ldr	r3, [pc, #24]	@ (800b6e8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b6ce:	22fe      	movs	r2, #254	@ 0xfe
 800b6d0:	0592      	lsls	r2, r2, #22
 800b6d2:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800b6d4:	e002      	b.n	800b6dc <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800b6d6:	4b04      	ldr	r3, [pc, #16]	@ (800b6e8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b6d8:	4a04      	ldr	r2, [pc, #16]	@ (800b6ec <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800b6da:	605a      	str	r2, [r3, #4]
}
 800b6dc:	46c0      	nop			@ (mov r8, r8)
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	46c0      	nop			@ (mov r8, r8)
 800b6e4:	200021f5 	.word	0x200021f5
 800b6e8:	200012a4 	.word	0x200012a4
 800b6ec:	44610000 	.word	0x44610000

0800b6f0 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b6f4:	4b13      	ldr	r3, [pc, #76]	@ (800b744 <SGP_StartMeasurement+0x54>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00d      	beq.n	800b718 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b6fc:	4b12      	ldr	r3, [pc, #72]	@ (800b748 <SGP_StartMeasurement+0x58>)
 800b6fe:	2208      	movs	r2, #8
 800b700:	0019      	movs	r1, r3
 800b702:	2059      	movs	r0, #89	@ 0x59
 800b704:	f7ff ff88 	bl	800b618 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b708:	f003 fa6a 	bl	800ebe0 <HAL_GetTick>
 800b70c:	0003      	movs	r3, r0
 800b70e:	331e      	adds	r3, #30
 800b710:	001a      	movs	r2, r3
 800b712:	4b0e      	ldr	r3, [pc, #56]	@ (800b74c <SGP_StartMeasurement+0x5c>)
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	e00c      	b.n	800b732 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b718:	4b0d      	ldr	r3, [pc, #52]	@ (800b750 <SGP_StartMeasurement+0x60>)
 800b71a:	2208      	movs	r2, #8
 800b71c:	0019      	movs	r1, r3
 800b71e:	2059      	movs	r0, #89	@ 0x59
 800b720:	f7ff ff7a 	bl	800b618 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b724:	f003 fa5c 	bl	800ebe0 <HAL_GetTick>
 800b728:	0003      	movs	r3, r0
 800b72a:	33aa      	adds	r3, #170	@ 0xaa
 800b72c:	001a      	movs	r2, r3
 800b72e:	4b09      	ldr	r3, [pc, #36]	@ (800b754 <SGP_StartMeasurement+0x64>)
 800b730:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b732:	4b09      	ldr	r3, [pc, #36]	@ (800b758 <SGP_StartMeasurement+0x68>)
 800b734:	2200      	movs	r2, #0
 800b736:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b738:	4b08      	ldr	r3, [pc, #32]	@ (800b75c <SGP_StartMeasurement+0x6c>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	701a      	strb	r2, [r3, #0]
}
 800b73e:	46c0      	nop			@ (mov r8, r8)
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	2000134c 	.word	0x2000134c
 800b748:	20000098 	.word	0x20000098
 800b74c:	200000ac 	.word	0x200000ac
 800b750:	20000090 	.word	0x20000090
 800b754:	200000a4 	.word	0x200000a4
 800b758:	200012a0 	.word	0x200012a0
 800b75c:	200012a1 	.word	0x200012a1

0800b760 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b760:	b580      	push	{r7, lr}
 800b762:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b764:	4b04      	ldr	r3, [pc, #16]	@ (800b778 <SGP_HeatedUp+0x18>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	0018      	movs	r0, r3
 800b76a:	f002 fd8d 	bl	800e288 <TimestampIsReached>
 800b76e:	0003      	movs	r3, r0
}
 800b770:	0018      	movs	r0, r3
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	46c0      	nop			@ (mov r8, r8)
 800b778:	200000a4 	.word	0x200000a4

0800b77c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b77c:	b580      	push	{r7, lr}
 800b77e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b780:	4b04      	ldr	r3, [pc, #16]	@ (800b794 <SGP_MeasurementReady+0x18>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	0018      	movs	r0, r3
 800b786:	f002 fd7f 	bl	800e288 <TimestampIsReached>
 800b78a:	0003      	movs	r3, r0
}
 800b78c:	0018      	movs	r0, r3
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	46c0      	nop			@ (mov r8, r8)
 800b794:	200000ac 	.word	0x200000ac

0800b798 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b798:	b580      	push	{r7, lr}
 800b79a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b79c:	4b04      	ldr	r3, [pc, #16]	@ (800b7b0 <SGP_MeasurementDone+0x18>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	0018      	movs	r0, r3
 800b7a2:	f002 fd71 	bl	800e288 <TimestampIsReached>
 800b7a6:	0003      	movs	r3, r0
}
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	46c0      	nop			@ (mov r8, r8)
 800b7b0:	200000a8 	.word	0x200000a8

0800b7b4 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b7b8:	4b04      	ldr	r3, [pc, #16]	@ (800b7cc <SGP_TurnHeaterOff+0x18>)
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	0019      	movs	r1, r3
 800b7be:	2059      	movs	r0, #89	@ 0x59
 800b7c0:	f7ff ff2a 	bl	800b618 <WriteRegister>
}
 800b7c4:	46c0      	nop			@ (mov r8, r8)
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	46c0      	nop			@ (mov r8, r8)
 800b7cc:	20000088 	.word	0x20000088

0800b7d0 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b7d0:	b5b0      	push	{r4, r5, r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af02      	add	r7, sp, #8
 800b7d6:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b7d8:	f7ff ffc2 	bl	800b760 <SGP_HeatedUp>
 800b7dc:	1e03      	subs	r3, r0, #0
 800b7de:	d032      	beq.n	800b846 <SGP_GetMeasurementValues+0x76>
 800b7e0:	4bd4      	ldr	r3, [pc, #848]	@ (800bb34 <SGP_GetMeasurementValues+0x364>)
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	4053      	eors	r3, r2
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d02b      	beq.n	800b846 <SGP_GetMeasurementValues+0x76>
 800b7ee:	4bd2      	ldr	r3, [pc, #840]	@ (800bb38 <SGP_GetMeasurementValues+0x368>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	4053      	eors	r3, r2
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d024      	beq.n	800b846 <SGP_GetMeasurementValues+0x76>
//    Debug("SGP is heated up");
    HeatUpIsDone = true;
 800b7fc:	4bcd      	ldr	r3, [pc, #820]	@ (800bb34 <SGP_GetMeasurementValues+0x364>)
 800b7fe:	2201      	movs	r2, #1
 800b800:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b802:	4bce      	ldr	r3, [pc, #824]	@ (800bb3c <SGP_GetMeasurementValues+0x36c>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00d      	beq.n	800b826 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b80a:	4bcd      	ldr	r3, [pc, #820]	@ (800bb40 <SGP_GetMeasurementValues+0x370>)
 800b80c:	2208      	movs	r2, #8
 800b80e:	0019      	movs	r1, r3
 800b810:	2059      	movs	r0, #89	@ 0x59
 800b812:	f7ff ff01 	bl	800b618 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b816:	f003 f9e3 	bl	800ebe0 <HAL_GetTick>
 800b81a:	0003      	movs	r3, r0
 800b81c:	331e      	adds	r3, #30
 800b81e:	001a      	movs	r2, r3
 800b820:	4bc8      	ldr	r3, [pc, #800]	@ (800bb44 <SGP_GetMeasurementValues+0x374>)
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	e00c      	b.n	800b840 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b826:	4bc8      	ldr	r3, [pc, #800]	@ (800bb48 <SGP_GetMeasurementValues+0x378>)
 800b828:	2208      	movs	r2, #8
 800b82a:	0019      	movs	r1, r3
 800b82c:	2059      	movs	r0, #89	@ 0x59
 800b82e:	f7ff fef3 	bl	800b618 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b832:	f003 f9d5 	bl	800ebe0 <HAL_GetTick>
 800b836:	0003      	movs	r3, r0
 800b838:	331e      	adds	r3, #30
 800b83a:	001a      	movs	r2, r3
 800b83c:	4bc1      	ldr	r3, [pc, #772]	@ (800bb44 <SGP_GetMeasurementValues+0x374>)
 800b83e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b840:	4bbd      	ldr	r3, [pc, #756]	@ (800bb38 <SGP_GetMeasurementValues+0x368>)
 800b842:	2201      	movs	r2, #1
 800b844:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b846:	4bbb      	ldr	r3, [pc, #748]	@ (800bb34 <SGP_GetMeasurementValues+0x364>)
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d100      	bne.n	800b850 <SGP_GetMeasurementValues+0x80>
 800b84e:	e1a9      	b.n	800bba4 <SGP_GetMeasurementValues+0x3d4>
 800b850:	f7ff ff94 	bl	800b77c <SGP_MeasurementReady>
 800b854:	1e03      	subs	r3, r0, #0
 800b856:	d100      	bne.n	800b85a <SGP_GetMeasurementValues+0x8a>
 800b858:	e1a4      	b.n	800bba4 <SGP_GetMeasurementValues+0x3d4>
 800b85a:	4bbc      	ldr	r3, [pc, #752]	@ (800bb4c <SGP_GetMeasurementValues+0x37c>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2201      	movs	r2, #1
 800b860:	4053      	eors	r3, r2
 800b862:	b2db      	uxtb	r3, r3
 800b864:	2b00      	cmp	r3, #0
 800b866:	d100      	bne.n	800b86a <SGP_GetMeasurementValues+0x9a>
 800b868:	e19c      	b.n	800bba4 <SGP_GetMeasurementValues+0x3d4>
//    Debug("SGP40 sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
    MeasurementIsReady = true;
 800b86a:	4bb8      	ldr	r3, [pc, #736]	@ (800bb4c <SGP_GetMeasurementValues+0x37c>)
 800b86c:	2201      	movs	r2, #1
 800b86e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b870:	4bb7      	ldr	r3, [pc, #732]	@ (800bb50 <SGP_GetMeasurementValues+0x380>)
 800b872:	2203      	movs	r2, #3
 800b874:	0019      	movs	r1, r3
 800b876:	2059      	movs	r0, #89	@ 0x59
 800b878:	f7ff feb0 	bl	800b5dc <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b87c:	4bb4      	ldr	r3, [pc, #720]	@ (800bb50 <SGP_GetMeasurementValues+0x380>)
 800b87e:	2203      	movs	r2, #3
 800b880:	2103      	movs	r1, #3
 800b882:	0018      	movs	r0, r3
 800b884:	f000 f9f4 	bl	800bc70 <CheckCRC>
 800b888:	0003      	movs	r3, r0
 800b88a:	001a      	movs	r2, r3
 800b88c:	2301      	movs	r3, #1
 800b88e:	4053      	eors	r3, r2
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	d02a      	beq.n	800b8ec <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800b896:	4aaf      	ldr	r2, [pc, #700]	@ (800bb54 <SGP_GetMeasurementValues+0x384>)
 800b898:	4baf      	ldr	r3, [pc, #700]	@ (800bb58 <SGP_GetMeasurementValues+0x388>)
 800b89a:	0019      	movs	r1, r3
 800b89c:	2001      	movs	r0, #1
 800b89e:	f002 fd49 	bl	800e334 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b8a2:	4aae      	ldr	r2, [pc, #696]	@ (800bb5c <SGP_GetMeasurementValues+0x38c>)
 800b8a4:	4bae      	ldr	r3, [pc, #696]	@ (800bb60 <SGP_GetMeasurementValues+0x390>)
 800b8a6:	0019      	movs	r1, r3
 800b8a8:	2002      	movs	r0, #2
 800b8aa:	f002 fd43 	bl	800e334 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b8ae:	230f      	movs	r3, #15
 800b8b0:	18fb      	adds	r3, r7, r3
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	701a      	strb	r2, [r3, #0]
 800b8b6:	e012      	b.n	800b8de <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b8b8:	240f      	movs	r4, #15
 800b8ba:	193b      	adds	r3, r7, r4
 800b8bc:	7818      	ldrb	r0, [r3, #0]
 800b8be:	193b      	adds	r3, r7, r4
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	4aa3      	ldr	r2, [pc, #652]	@ (800bb50 <SGP_GetMeasurementValues+0x380>)
 800b8c4:	5cd3      	ldrb	r3, [r2, r3]
 800b8c6:	4aa7      	ldr	r2, [pc, #668]	@ (800bb64 <SGP_GetMeasurementValues+0x394>)
 800b8c8:	49a7      	ldr	r1, [pc, #668]	@ (800bb68 <SGP_GetMeasurementValues+0x398>)
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	0003      	movs	r3, r0
 800b8ce:	2003      	movs	r0, #3
 800b8d0:	f002 fd30 	bl	800e334 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b8d4:	193b      	adds	r3, r7, r4
 800b8d6:	781a      	ldrb	r2, [r3, #0]
 800b8d8:	193b      	adds	r3, r7, r4
 800b8da:	3201      	adds	r2, #1
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	230f      	movs	r3, #15
 800b8e0:	18fb      	adds	r3, r7, r3
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d9e7      	bls.n	800b8b8 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e173      	b.n	800bbd4 <SGP_GetMeasurementValues+0x404>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b8ec:	f003 f978 	bl	800ebe0 <HAL_GetTick>
 800b8f0:	0003      	movs	r3, r0
 800b8f2:	22fa      	movs	r2, #250	@ 0xfa
 800b8f4:	0092      	lsls	r2, r2, #2
 800b8f6:	189a      	adds	r2, r3, r2
 800b8f8:	4b9c      	ldr	r3, [pc, #624]	@ (800bb6c <SGP_GetMeasurementValues+0x39c>)
 800b8fa:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b8fc:	f7ff ff5a 	bl	800b7b4 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b900:	4b9b      	ldr	r3, [pc, #620]	@ (800bb70 <SGP_GetMeasurementValues+0x3a0>)
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	3301      	adds	r3, #1
 800b906:	b2da      	uxtb	r2, r3
 800b908:	4b99      	ldr	r3, [pc, #612]	@ (800bb70 <SGP_GetMeasurementValues+0x3a0>)
 800b90a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b90c:	4b98      	ldr	r3, [pc, #608]	@ (800bb70 <SGP_GetMeasurementValues+0x3a0>)
 800b90e:	781a      	ldrb	r2, [r3, #0]
 800b910:	4b98      	ldr	r3, [pc, #608]	@ (800bb74 <SGP_GetMeasurementValues+0x3a4>)
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	429a      	cmp	r2, r3
 800b916:	d200      	bcs.n	800b91a <SGP_GetMeasurementValues+0x14a>
 800b918:	e144      	b.n	800bba4 <SGP_GetMeasurementValues+0x3d4>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b91a:	4b8d      	ldr	r3, [pc, #564]	@ (800bb50 <SGP_GetMeasurementValues+0x380>)
 800b91c:	785b      	ldrb	r3, [r3, #1]
 800b91e:	021b      	lsls	r3, r3, #8
 800b920:	b21a      	sxth	r2, r3
 800b922:	4b8b      	ldr	r3, [pc, #556]	@ (800bb50 <SGP_GetMeasurementValues+0x380>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	b21b      	sxth	r3, r3
 800b928:	4313      	orrs	r3, r2
 800b92a:	b21a      	sxth	r2, r3
 800b92c:	240c      	movs	r4, #12
 800b92e:	193b      	adds	r3, r7, r4
 800b930:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800b932:	2300      	movs	r3, #0
 800b934:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b936:	193b      	adds	r3, r7, r4
 800b938:	8819      	ldrh	r1, [r3, #0]
 800b93a:	2308      	movs	r3, #8
 800b93c:	18fa      	adds	r2, r7, r3
 800b93e:	4b8e      	ldr	r3, [pc, #568]	@ (800bb78 <SGP_GetMeasurementValues+0x3a8>)
 800b940:	0018      	movs	r0, r3
 800b942:	f7fe fe87 	bl	800a654 <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800b946:	4b8d      	ldr	r3, [pc, #564]	@ (800bb7c <SGP_GetMeasurementValues+0x3ac>)
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	3301      	adds	r3, #1
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	4b8b      	ldr	r3, [pc, #556]	@ (800bb7c <SGP_GetMeasurementValues+0x3ac>)
 800b950:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800b952:	4b8a      	ldr	r3, [pc, #552]	@ (800bb7c <SGP_GetMeasurementValues+0x3ac>)
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d10d      	bne.n	800b976 <SGP_GetMeasurementValues+0x1a6>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800b95a:	193b      	adds	r3, r7, r4
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	4a88      	ldr	r2, [pc, #544]	@ (800bb80 <SGP_GetMeasurementValues+0x3b0>)
 800b960:	4981      	ldr	r1, [pc, #516]	@ (800bb68 <SGP_GetMeasurementValues+0x398>)
 800b962:	2003      	movs	r0, #3
 800b964:	f002 fce6 	bl	800e334 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4a86      	ldr	r2, [pc, #536]	@ (800bb84 <SGP_GetMeasurementValues+0x3b4>)
 800b96c:	497e      	ldr	r1, [pc, #504]	@ (800bb68 <SGP_GetMeasurementValues+0x398>)
 800b96e:	2003      	movs	r0, #3
 800b970:	f002 fce0 	bl	800e334 <CreateLine>
 800b974:	e006      	b.n	800b984 <SGP_GetMeasurementValues+0x1b4>
      }
      else {
        if (sgp40samplecounter == 11) {
 800b976:	4b81      	ldr	r3, [pc, #516]	@ (800bb7c <SGP_GetMeasurementValues+0x3ac>)
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	2b0b      	cmp	r3, #11
 800b97c:	d102      	bne.n	800b984 <SGP_GetMeasurementValues+0x1b4>
          sgp40samplecounter = 0;
 800b97e:	4b7f      	ldr	r3, [pc, #508]	@ (800bb7c <SGP_GetMeasurementValues+0x3ac>)
 800b980:	2200      	movs	r2, #0
 800b982:	701a      	strb	r2, [r3, #0]
        }
      }
      *vocIndex = tempVocIndex;
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	dd5a      	ble.n	800ba48 <SGP_GetMeasurementValues+0x278>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b64      	cmp	r3, #100	@ 0x64
 800b998:	dc56      	bgt.n	800ba48 <SGP_GetMeasurementValues+0x278>
        Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	0018      	movs	r0, r3
 800b9a0:	f7f7 fd0e 	bl	80033c0 <__aeabi_i2d>
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	4b78      	ldr	r3, [pc, #480]	@ (800bb88 <SGP_GetMeasurementValues+0x3b8>)
 800b9a8:	f7f6 fa04 	bl	8001db4 <__aeabi_ddiv>
 800b9ac:	0002      	movs	r2, r0
 800b9ae:	000b      	movs	r3, r1
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	4976      	ldr	r1, [pc, #472]	@ (800bb8c <SGP_GetMeasurementValues+0x3bc>)
 800b9b4:	f7f7 f90a 	bl	8002bcc <__aeabi_dsub>
 800b9b8:	0002      	movs	r2, r0
 800b9ba:	000b      	movs	r3, r1
 800b9bc:	0014      	movs	r4, r2
 800b9be:	001d      	movs	r5, r3
 800b9c0:	4b73      	ldr	r3, [pc, #460]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800b9c2:	881b      	ldrh	r3, [r3, #0]
 800b9c4:	0018      	movs	r0, r3
 800b9c6:	f7f7 fcfb 	bl	80033c0 <__aeabi_i2d>
 800b9ca:	0002      	movs	r2, r0
 800b9cc:	000b      	movs	r3, r1
 800b9ce:	0020      	movs	r0, r4
 800b9d0:	0029      	movs	r1, r5
 800b9d2:	f7f6 fe33 	bl	800263c <__aeabi_dmul>
 800b9d6:	0002      	movs	r2, r0
 800b9d8:	000b      	movs	r3, r1
 800b9da:	0010      	movs	r0, r2
 800b9dc:	0019      	movs	r1, r3
 800b9de:	f7f4 fe35 	bl	800064c <__aeabi_d2uiz>
 800b9e2:	0003      	movs	r3, r0
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	4b6b      	ldr	r3, [pc, #428]	@ (800bb94 <SGP_GetMeasurementValues+0x3c4>)
 800b9e8:	801a      	strh	r2, [r3, #0]
        Blue = (*vocIndex/100.0)*TimeValue;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	0018      	movs	r0, r3
 800b9f0:	f7f7 fce6 	bl	80033c0 <__aeabi_i2d>
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	4b64      	ldr	r3, [pc, #400]	@ (800bb88 <SGP_GetMeasurementValues+0x3b8>)
 800b9f8:	f7f6 f9dc 	bl	8001db4 <__aeabi_ddiv>
 800b9fc:	0002      	movs	r2, r0
 800b9fe:	000b      	movs	r3, r1
 800ba00:	0014      	movs	r4, r2
 800ba02:	001d      	movs	r5, r3
 800ba04:	4b62      	ldr	r3, [pc, #392]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	0018      	movs	r0, r3
 800ba0a:	f7f7 fcd9 	bl	80033c0 <__aeabi_i2d>
 800ba0e:	0002      	movs	r2, r0
 800ba10:	000b      	movs	r3, r1
 800ba12:	0020      	movs	r0, r4
 800ba14:	0029      	movs	r1, r5
 800ba16:	f7f6 fe11 	bl	800263c <__aeabi_dmul>
 800ba1a:	0002      	movs	r2, r0
 800ba1c:	000b      	movs	r3, r1
 800ba1e:	0010      	movs	r0, r2
 800ba20:	0019      	movs	r1, r3
 800ba22:	f7f4 fe13 	bl	800064c <__aeabi_d2uiz>
 800ba26:	0003      	movs	r3, r0
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	4b5b      	ldr	r3, [pc, #364]	@ (800bb98 <SGP_GetMeasurementValues+0x3c8>)
 800ba2c:	801a      	strh	r2, [r3, #0]
        Red = TimeValue;
 800ba2e:	4b58      	ldr	r3, [pc, #352]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800ba30:	881a      	ldrh	r2, [r3, #0]
 800ba32:	4b5a      	ldr	r3, [pc, #360]	@ (800bb9c <SGP_GetMeasurementValues+0x3cc>)
 800ba34:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800ba36:	4b59      	ldr	r3, [pc, #356]	@ (800bb9c <SGP_GetMeasurementValues+0x3cc>)
 800ba38:	8818      	ldrh	r0, [r3, #0]
 800ba3a:	4b56      	ldr	r3, [pc, #344]	@ (800bb94 <SGP_GetMeasurementValues+0x3c4>)
 800ba3c:	8819      	ldrh	r1, [r3, #0]
 800ba3e:	4b56      	ldr	r3, [pc, #344]	@ (800bb98 <SGP_GetMeasurementValues+0x3c8>)
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	001a      	movs	r2, r3
 800ba44:	f001 fbdc 	bl	800d200 <SetVocLED>
      }
      if(*vocIndex > 100){
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b64      	cmp	r3, #100	@ 0x64
 800ba4e:	dd66      	ble.n	800bb1e <SGP_GetMeasurementValues+0x34e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	0018      	movs	r0, r3
 800ba56:	f7f7 fcb3 	bl	80033c0 <__aeabi_i2d>
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	4b4a      	ldr	r3, [pc, #296]	@ (800bb88 <SGP_GetMeasurementValues+0x3b8>)
 800ba5e:	f7f7 f8b5 	bl	8002bcc <__aeabi_dsub>
 800ba62:	0002      	movs	r2, r0
 800ba64:	000b      	movs	r3, r1
 800ba66:	0010      	movs	r0, r2
 800ba68:	0019      	movs	r1, r3
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	4b4c      	ldr	r3, [pc, #304]	@ (800bba0 <SGP_GetMeasurementValues+0x3d0>)
 800ba6e:	f7f6 f9a1 	bl	8001db4 <__aeabi_ddiv>
 800ba72:	0002      	movs	r2, r0
 800ba74:	000b      	movs	r3, r1
 800ba76:	0014      	movs	r4, r2
 800ba78:	001d      	movs	r5, r3
 800ba7a:	4b45      	ldr	r3, [pc, #276]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800ba7c:	881b      	ldrh	r3, [r3, #0]
 800ba7e:	0018      	movs	r0, r3
 800ba80:	f7f7 fc9e 	bl	80033c0 <__aeabi_i2d>
 800ba84:	0002      	movs	r2, r0
 800ba86:	000b      	movs	r3, r1
 800ba88:	0020      	movs	r0, r4
 800ba8a:	0029      	movs	r1, r5
 800ba8c:	f7f6 fdd6 	bl	800263c <__aeabi_dmul>
 800ba90:	0002      	movs	r2, r0
 800ba92:	000b      	movs	r3, r1
 800ba94:	0010      	movs	r0, r2
 800ba96:	0019      	movs	r1, r3
 800ba98:	f7f4 fdd8 	bl	800064c <__aeabi_d2uiz>
 800ba9c:	0003      	movs	r3, r0
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	4b3c      	ldr	r3, [pc, #240]	@ (800bb94 <SGP_GetMeasurementValues+0x3c4>)
 800baa2:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	0018      	movs	r0, r3
 800baaa:	f7f7 fc89 	bl	80033c0 <__aeabi_i2d>
 800baae:	2200      	movs	r2, #0
 800bab0:	4b35      	ldr	r3, [pc, #212]	@ (800bb88 <SGP_GetMeasurementValues+0x3b8>)
 800bab2:	f7f7 f88b 	bl	8002bcc <__aeabi_dsub>
 800bab6:	0002      	movs	r2, r0
 800bab8:	000b      	movs	r3, r1
 800baba:	0010      	movs	r0, r2
 800babc:	0019      	movs	r1, r3
 800babe:	2200      	movs	r2, #0
 800bac0:	4b37      	ldr	r3, [pc, #220]	@ (800bba0 <SGP_GetMeasurementValues+0x3d0>)
 800bac2:	f7f6 f977 	bl	8001db4 <__aeabi_ddiv>
 800bac6:	0002      	movs	r2, r0
 800bac8:	000b      	movs	r3, r1
 800baca:	2000      	movs	r0, #0
 800bacc:	492f      	ldr	r1, [pc, #188]	@ (800bb8c <SGP_GetMeasurementValues+0x3bc>)
 800bace:	f7f7 f87d 	bl	8002bcc <__aeabi_dsub>
 800bad2:	0002      	movs	r2, r0
 800bad4:	000b      	movs	r3, r1
 800bad6:	0014      	movs	r4, r2
 800bad8:	001d      	movs	r5, r3
 800bada:	4b2d      	ldr	r3, [pc, #180]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800badc:	881b      	ldrh	r3, [r3, #0]
 800bade:	0018      	movs	r0, r3
 800bae0:	f7f7 fc6e 	bl	80033c0 <__aeabi_i2d>
 800bae4:	0002      	movs	r2, r0
 800bae6:	000b      	movs	r3, r1
 800bae8:	0020      	movs	r0, r4
 800baea:	0029      	movs	r1, r5
 800baec:	f7f6 fda6 	bl	800263c <__aeabi_dmul>
 800baf0:	0002      	movs	r2, r0
 800baf2:	000b      	movs	r3, r1
 800baf4:	0010      	movs	r0, r2
 800baf6:	0019      	movs	r1, r3
 800baf8:	f7f4 fda8 	bl	800064c <__aeabi_d2uiz>
 800bafc:	0003      	movs	r3, r0
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	4b26      	ldr	r3, [pc, #152]	@ (800bb9c <SGP_GetMeasurementValues+0x3cc>)
 800bb02:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800bb04:	4b22      	ldr	r3, [pc, #136]	@ (800bb90 <SGP_GetMeasurementValues+0x3c0>)
 800bb06:	881a      	ldrh	r2, [r3, #0]
 800bb08:	4b23      	ldr	r3, [pc, #140]	@ (800bb98 <SGP_GetMeasurementValues+0x3c8>)
 800bb0a:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800bb0c:	4b23      	ldr	r3, [pc, #140]	@ (800bb9c <SGP_GetMeasurementValues+0x3cc>)
 800bb0e:	8818      	ldrh	r0, [r3, #0]
 800bb10:	4b20      	ldr	r3, [pc, #128]	@ (800bb94 <SGP_GetMeasurementValues+0x3c4>)
 800bb12:	8819      	ldrh	r1, [r3, #0]
 800bb14:	4b20      	ldr	r3, [pc, #128]	@ (800bb98 <SGP_GetMeasurementValues+0x3c8>)
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	001a      	movs	r2, r3
 800bb1a:	f001 fb71 	bl	800d200 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800bb1e:	4b14      	ldr	r3, [pc, #80]	@ (800bb70 <SGP_GetMeasurementValues+0x3a0>)
 800bb20:	2200      	movs	r2, #0
 800bb22:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800bb24:	4b05      	ldr	r3, [pc, #20]	@ (800bb3c <SGP_GetMeasurementValues+0x36c>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800bb2a:	4b03      	ldr	r3, [pc, #12]	@ (800bb38 <SGP_GetMeasurementValues+0x368>)
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e04f      	b.n	800bbd4 <SGP_GetMeasurementValues+0x404>
 800bb34:	200012a0 	.word	0x200012a0
 800bb38:	2000134d 	.word	0x2000134d
 800bb3c:	2000134c 	.word	0x2000134c
 800bb40:	20000098 	.word	0x20000098
 800bb44:	200000ac 	.word	0x200000ac
 800bb48:	20000090 	.word	0x20000090
 800bb4c:	200012a1 	.word	0x200012a1
 800bb50:	20001290 	.word	0x20001290
 800bb54:	08024ad0 	.word	0x08024ad0
 800bb58:	08024af8 	.word	0x08024af8
 800bb5c:	08024afc 	.word	0x08024afc
 800bb60:	08024b1c 	.word	0x08024b1c
 800bb64:	08024b20 	.word	0x08024b20
 800bb68:	08024b40 	.word	0x08024b40
 800bb6c:	200000a8 	.word	0x200000a8
 800bb70:	20001299 	.word	0x20001299
 800bb74:	200000a2 	.word	0x200000a2
 800bb78:	200012a4 	.word	0x200012a4
 800bb7c:	2000129a 	.word	0x2000129a
 800bb80:	08024b44 	.word	0x08024b44
 800bb84:	08024b60 	.word	0x08024b60
 800bb88:	40590000 	.word	0x40590000
 800bb8c:	3ff00000 	.word	0x3ff00000
 800bb90:	200000b0 	.word	0x200000b0
 800bb94:	20001358 	.word	0x20001358
 800bb98:	20001356 	.word	0x20001356
 800bb9c:	20001354 	.word	0x20001354
 800bba0:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bba4:	f7ff fdf8 	bl	800b798 <SGP_MeasurementDone>
 800bba8:	1e03      	subs	r3, r0, #0
 800bbaa:	d012      	beq.n	800bbd2 <SGP_GetMeasurementValues+0x402>
 800bbac:	4b0b      	ldr	r3, [pc, #44]	@ (800bbdc <SGP_GetMeasurementValues+0x40c>)
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00e      	beq.n	800bbd2 <SGP_GetMeasurementValues+0x402>
 800bbb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe0 <SGP_GetMeasurementValues+0x410>)
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00a      	beq.n	800bbd2 <SGP_GetMeasurementValues+0x402>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800bbbc:	4a09      	ldr	r2, [pc, #36]	@ (800bbe4 <SGP_GetMeasurementValues+0x414>)
 800bbbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe8 <SGP_GetMeasurementValues+0x418>)
 800bbc0:	0019      	movs	r1, r3
 800bbc2:	2003      	movs	r0, #3
 800bbc4:	f002 fbb6 	bl	800e334 <CreateLine>
    SGP_StartMeasurement();
 800bbc8:	f7ff fd92 	bl	800b6f0 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800bbcc:	4b07      	ldr	r3, [pc, #28]	@ (800bbec <SGP_GetMeasurementValues+0x41c>)
 800bbce:	2200      	movs	r2, #0
 800bbd0:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	b004      	add	sp, #16
 800bbda:	bdb0      	pop	{r4, r5, r7, pc}
 800bbdc:	200012a0 	.word	0x200012a0
 800bbe0:	200012a1 	.word	0x200012a1
 800bbe4:	08024b7c 	.word	0x08024b7c
 800bbe8:	08024b40 	.word	0x08024b40
 800bbec:	2000134d 	.word	0x2000134d

0800bbf0 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bbf6:	4b1a      	ldr	r3, [pc, #104]	@ (800bc60 <SGP_DeviceConnected+0x70>)
 800bbf8:	2202      	movs	r2, #2
 800bbfa:	0019      	movs	r1, r3
 800bbfc:	2059      	movs	r0, #89	@ 0x59
 800bbfe:	f7ff fd0b 	bl	800b618 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800bc02:	2001      	movs	r0, #1
 800bc04:	f002 fff6 	bl	800ebf4 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800bc08:	4b16      	ldr	r3, [pc, #88]	@ (800bc64 <SGP_DeviceConnected+0x74>)
 800bc0a:	2209      	movs	r2, #9
 800bc0c:	0019      	movs	r1, r3
 800bc0e:	2059      	movs	r0, #89	@ 0x59
 800bc10:	f7ff fce4 	bl	800b5dc <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc14:	1dfb      	adds	r3, r7, #7
 800bc16:	2200      	movs	r2, #0
 800bc18:	701a      	strb	r2, [r3, #0]
 800bc1a:	e011      	b.n	800bc40 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800bc1c:	1dfb      	adds	r3, r7, #7
 800bc1e:	7818      	ldrb	r0, [r3, #0]
 800bc20:	1dfb      	adds	r3, r7, #7
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	4a0f      	ldr	r2, [pc, #60]	@ (800bc64 <SGP_DeviceConnected+0x74>)
 800bc26:	5cd3      	ldrb	r3, [r2, r3]
 800bc28:	4a0f      	ldr	r2, [pc, #60]	@ (800bc68 <SGP_DeviceConnected+0x78>)
 800bc2a:	4910      	ldr	r1, [pc, #64]	@ (800bc6c <SGP_DeviceConnected+0x7c>)
 800bc2c:	9300      	str	r3, [sp, #0]
 800bc2e:	0003      	movs	r3, r0
 800bc30:	2002      	movs	r0, #2
 800bc32:	f002 fb7f 	bl	800e334 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc36:	1dfb      	adds	r3, r7, #7
 800bc38:	781a      	ldrb	r2, [r3, #0]
 800bc3a:	1dfb      	adds	r3, r7, #7
 800bc3c:	3201      	adds	r2, #1
 800bc3e:	701a      	strb	r2, [r3, #0]
 800bc40:	1dfb      	adds	r3, r7, #7
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b08      	cmp	r3, #8
 800bc46:	d9e9      	bls.n	800bc1c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bc48:	4b06      	ldr	r3, [pc, #24]	@ (800bc64 <SGP_DeviceConnected+0x74>)
 800bc4a:	2203      	movs	r2, #3
 800bc4c:	2109      	movs	r1, #9
 800bc4e:	0018      	movs	r0, r3
 800bc50:	f000 f80e 	bl	800bc70 <CheckCRC>
 800bc54:	0003      	movs	r3, r0
}
 800bc56:	0018      	movs	r0, r3
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	b002      	add	sp, #8
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	46c0      	nop			@ (mov r8, r8)
 800bc60:	2000008c 	.word	0x2000008c
 800bc64:	20001290 	.word	0x20001290
 800bc68:	08024b9c 	.word	0x08024b9c
 800bc6c:	08024b1c 	.word	0x08024b1c

0800bc70 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc72:	b08f      	sub	sp, #60	@ 0x3c
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc78:	0008      	movs	r0, r1
 800bc7a:	0011      	movs	r1, r2
 800bc7c:	2323      	movs	r3, #35	@ 0x23
 800bc7e:	18fb      	adds	r3, r7, r3
 800bc80:	1c02      	adds	r2, r0, #0
 800bc82:	701a      	strb	r2, [r3, #0]
 800bc84:	2322      	movs	r3, #34	@ 0x22
 800bc86:	18fb      	adds	r3, r7, r3
 800bc88:	1c0a      	adds	r2, r1, #0
 800bc8a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bc8c:	2317      	movs	r3, #23
 800bc8e:	2220      	movs	r2, #32
 800bc90:	189b      	adds	r3, r3, r2
 800bc92:	19db      	adds	r3, r3, r7
 800bc94:	2200      	movs	r2, #0
 800bc96:	701a      	strb	r2, [r3, #0]
 800bc98:	e09f      	b.n	800bdda <CheckCRC+0x16a>
 800bc9a:	466b      	mov	r3, sp
 800bc9c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800bc9e:	2322      	movs	r3, #34	@ 0x22
 800bca0:	18fb      	adds	r3, r7, r3
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	001a      	movs	r2, r3
 800bca6:	3a01      	subs	r2, #1
 800bca8:	633a      	str	r2, [r7, #48]	@ 0x30
 800bcaa:	60bb      	str	r3, [r7, #8]
 800bcac:	2200      	movs	r2, #0
 800bcae:	60fa      	str	r2, [r7, #12]
 800bcb0:	68b8      	ldr	r0, [r7, #8]
 800bcb2:	68f9      	ldr	r1, [r7, #12]
 800bcb4:	0002      	movs	r2, r0
 800bcb6:	0f52      	lsrs	r2, r2, #29
 800bcb8:	000c      	movs	r4, r1
 800bcba:	00e4      	lsls	r4, r4, #3
 800bcbc:	61fc      	str	r4, [r7, #28]
 800bcbe:	69fc      	ldr	r4, [r7, #28]
 800bcc0:	4314      	orrs	r4, r2
 800bcc2:	61fc      	str	r4, [r7, #28]
 800bcc4:	0002      	movs	r2, r0
 800bcc6:	00d2      	lsls	r2, r2, #3
 800bcc8:	61ba      	str	r2, [r7, #24]
 800bcca:	603b      	str	r3, [r7, #0]
 800bccc:	2200      	movs	r2, #0
 800bcce:	607a      	str	r2, [r7, #4]
 800bcd0:	6838      	ldr	r0, [r7, #0]
 800bcd2:	6879      	ldr	r1, [r7, #4]
 800bcd4:	0002      	movs	r2, r0
 800bcd6:	0f52      	lsrs	r2, r2, #29
 800bcd8:	000c      	movs	r4, r1
 800bcda:	00e4      	lsls	r4, r4, #3
 800bcdc:	617c      	str	r4, [r7, #20]
 800bcde:	697c      	ldr	r4, [r7, #20]
 800bce0:	4314      	orrs	r4, r2
 800bce2:	617c      	str	r4, [r7, #20]
 800bce4:	0002      	movs	r2, r0
 800bce6:	00d2      	lsls	r2, r2, #3
 800bce8:	613a      	str	r2, [r7, #16]
 800bcea:	3307      	adds	r3, #7
 800bcec:	08db      	lsrs	r3, r3, #3
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	466a      	mov	r2, sp
 800bcf2:	1ad3      	subs	r3, r2, r3
 800bcf4:	469d      	mov	sp, r3
 800bcf6:	466b      	mov	r3, sp
 800bcf8:	3300      	adds	r3, #0
 800bcfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800bcfc:	2316      	movs	r3, #22
 800bcfe:	2220      	movs	r2, #32
 800bd00:	189b      	adds	r3, r3, r2
 800bd02:	19db      	adds	r3, r3, r7
 800bd04:	2200      	movs	r2, #0
 800bd06:	701a      	strb	r2, [r3, #0]
 800bd08:	e01e      	b.n	800bd48 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800bd0a:	2317      	movs	r3, #23
 800bd0c:	2220      	movs	r2, #32
 800bd0e:	189b      	adds	r3, r3, r2
 800bd10:	19db      	adds	r3, r3, r7
 800bd12:	781a      	ldrb	r2, [r3, #0]
 800bd14:	2116      	movs	r1, #22
 800bd16:	2320      	movs	r3, #32
 800bd18:	18cb      	adds	r3, r1, r3
 800bd1a:	19db      	adds	r3, r3, r7
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	18d3      	adds	r3, r2, r3
 800bd20:	001a      	movs	r2, r3
 800bd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd24:	189a      	adds	r2, r3, r2
 800bd26:	0008      	movs	r0, r1
 800bd28:	2320      	movs	r3, #32
 800bd2a:	18cb      	adds	r3, r1, r3
 800bd2c:	19db      	adds	r3, r3, r7
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	7811      	ldrb	r1, [r2, #0]
 800bd32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd34:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd36:	2320      	movs	r3, #32
 800bd38:	18c3      	adds	r3, r0, r3
 800bd3a:	19db      	adds	r3, r3, r7
 800bd3c:	781a      	ldrb	r2, [r3, #0]
 800bd3e:	2320      	movs	r3, #32
 800bd40:	18c3      	adds	r3, r0, r3
 800bd42:	19db      	adds	r3, r3, r7
 800bd44:	3201      	adds	r2, #1
 800bd46:	701a      	strb	r2, [r3, #0]
 800bd48:	2316      	movs	r3, #22
 800bd4a:	2220      	movs	r2, #32
 800bd4c:	189b      	adds	r3, r3, r2
 800bd4e:	19da      	adds	r2, r3, r7
 800bd50:	2322      	movs	r3, #34	@ 0x22
 800bd52:	18fb      	adds	r3, r7, r3
 800bd54:	7812      	ldrb	r2, [r2, #0]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d3d6      	bcc.n	800bd0a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800bd5c:	2417      	movs	r4, #23
 800bd5e:	2320      	movs	r3, #32
 800bd60:	18e3      	adds	r3, r4, r3
 800bd62:	19db      	adds	r3, r3, r7
 800bd64:	781a      	ldrb	r2, [r3, #0]
 800bd66:	2322      	movs	r3, #34	@ 0x22
 800bd68:	18fb      	adds	r3, r7, r3
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	18d3      	adds	r3, r2, r3
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd72:	18d2      	adds	r2, r2, r3
 800bd74:	250b      	movs	r5, #11
 800bd76:	2320      	movs	r3, #32
 800bd78:	18eb      	adds	r3, r5, r3
 800bd7a:	19db      	adds	r3, r3, r7
 800bd7c:	7812      	ldrb	r2, [r2, #0]
 800bd7e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800bd80:	2322      	movs	r3, #34	@ 0x22
 800bd82:	18fb      	adds	r3, r7, r3
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8c:	0011      	movs	r1, r2
 800bd8e:	0018      	movs	r0, r3
 800bd90:	f000 f838 	bl	800be04 <CalculateCRC>
 800bd94:	0003      	movs	r3, r0
 800bd96:	001a      	movs	r2, r3
 800bd98:	2320      	movs	r3, #32
 800bd9a:	18eb      	adds	r3, r5, r3
 800bd9c:	19db      	adds	r3, r3, r7
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d00c      	beq.n	800bdbe <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800bda4:	2320      	movs	r3, #32
 800bda6:	18e3      	adds	r3, r4, r3
 800bda8:	19db      	adds	r3, r3, r7
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	3301      	adds	r3, #1
 800bdae:	4a13      	ldr	r2, [pc, #76]	@ (800bdfc <CheckCRC+0x18c>)
 800bdb0:	4913      	ldr	r1, [pc, #76]	@ (800be00 <CheckCRC+0x190>)
 800bdb2:	2001      	movs	r0, #1
 800bdb4:	f002 fabe 	bl	800e334 <CreateLine>
      return false;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	46b5      	mov	sp, r6
 800bdbc:	e019      	b.n	800bdf2 <CheckCRC+0x182>
 800bdbe:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bdc0:	2217      	movs	r2, #23
 800bdc2:	2320      	movs	r3, #32
 800bdc4:	18d3      	adds	r3, r2, r3
 800bdc6:	19db      	adds	r3, r3, r7
 800bdc8:	2120      	movs	r1, #32
 800bdca:	1852      	adds	r2, r2, r1
 800bdcc:	19d1      	adds	r1, r2, r7
 800bdce:	2222      	movs	r2, #34	@ 0x22
 800bdd0:	18ba      	adds	r2, r7, r2
 800bdd2:	7809      	ldrb	r1, [r1, #0]
 800bdd4:	7812      	ldrb	r2, [r2, #0]
 800bdd6:	188a      	adds	r2, r1, r2
 800bdd8:	701a      	strb	r2, [r3, #0]
 800bdda:	2317      	movs	r3, #23
 800bddc:	2220      	movs	r2, #32
 800bdde:	189b      	adds	r3, r3, r2
 800bde0:	19da      	adds	r2, r3, r7
 800bde2:	2323      	movs	r3, #35	@ 0x23
 800bde4:	18fb      	adds	r3, r7, r3
 800bde6:	7812      	ldrb	r2, [r2, #0]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d200      	bcs.n	800bdf0 <CheckCRC+0x180>
 800bdee:	e754      	b.n	800bc9a <CheckCRC+0x2a>
    }
  }
  return true;
 800bdf0:	2301      	movs	r3, #1
}
 800bdf2:	0018      	movs	r0, r3
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	b00f      	add	sp, #60	@ 0x3c
 800bdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdfa:	46c0      	nop			@ (mov r8, r8)
 800bdfc:	08024bbc 	.word	0x08024bbc
 800be00:	08024af8 	.word	0x08024af8

0800be04 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	000a      	movs	r2, r1
 800be0e:	1cfb      	adds	r3, r7, #3
 800be10:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800be12:	230f      	movs	r3, #15
 800be14:	18fb      	adds	r3, r7, r3
 800be16:	22ff      	movs	r2, #255	@ 0xff
 800be18:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800be1a:	230e      	movs	r3, #14
 800be1c:	18fb      	adds	r3, r7, r3
 800be1e:	2200      	movs	r2, #0
 800be20:	701a      	strb	r2, [r3, #0]
 800be22:	e037      	b.n	800be94 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800be24:	230e      	movs	r3, #14
 800be26:	18fb      	adds	r3, r7, r3
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	18d3      	adds	r3, r2, r3
 800be2e:	7819      	ldrb	r1, [r3, #0]
 800be30:	220f      	movs	r2, #15
 800be32:	18bb      	adds	r3, r7, r2
 800be34:	18ba      	adds	r2, r7, r2
 800be36:	7812      	ldrb	r2, [r2, #0]
 800be38:	404a      	eors	r2, r1
 800be3a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800be3c:	230d      	movs	r3, #13
 800be3e:	18fb      	adds	r3, r7, r3
 800be40:	2200      	movs	r2, #0
 800be42:	701a      	strb	r2, [r3, #0]
 800be44:	e01b      	b.n	800be7e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800be46:	210f      	movs	r1, #15
 800be48:	187b      	adds	r3, r7, r1
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	b25b      	sxtb	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	da09      	bge.n	800be66 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800be52:	187b      	adds	r3, r7, r1
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	b25b      	sxtb	r3, r3
 800be5a:	2231      	movs	r2, #49	@ 0x31
 800be5c:	4053      	eors	r3, r2
 800be5e:	b25a      	sxtb	r2, r3
 800be60:	187b      	adds	r3, r7, r1
 800be62:	701a      	strb	r2, [r3, #0]
 800be64:	e005      	b.n	800be72 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800be66:	230f      	movs	r3, #15
 800be68:	18fa      	adds	r2, r7, r3
 800be6a:	18fb      	adds	r3, r7, r3
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	18db      	adds	r3, r3, r3
 800be70:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800be72:	210d      	movs	r1, #13
 800be74:	187b      	adds	r3, r7, r1
 800be76:	781a      	ldrb	r2, [r3, #0]
 800be78:	187b      	adds	r3, r7, r1
 800be7a:	3201      	adds	r2, #1
 800be7c:	701a      	strb	r2, [r3, #0]
 800be7e:	230d      	movs	r3, #13
 800be80:	18fb      	adds	r3, r7, r3
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	2b07      	cmp	r3, #7
 800be86:	d9de      	bls.n	800be46 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800be88:	210e      	movs	r1, #14
 800be8a:	187b      	adds	r3, r7, r1
 800be8c:	781a      	ldrb	r2, [r3, #0]
 800be8e:	187b      	adds	r3, r7, r1
 800be90:	3201      	adds	r2, #1
 800be92:	701a      	strb	r2, [r3, #0]
 800be94:	230e      	movs	r3, #14
 800be96:	18fa      	adds	r2, r7, r3
 800be98:	1cfb      	adds	r3, r7, #3
 800be9a:	7812      	ldrb	r2, [r2, #0]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d3c0      	bcc.n	800be24 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800bea2:	230f      	movs	r3, #15
 800bea4:	18fb      	adds	r3, r7, r3
 800bea6:	781b      	ldrb	r3, [r3, #0]
}
 800bea8:	0018      	movs	r0, r3
 800beaa:	46bd      	mov	sp, r7
 800beac:	b004      	add	sp, #16
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4936      	ldr	r1, [pc, #216]	@ (800bf98 <SGP_GetHT+0xe8>)
 800bec0:	1c18      	adds	r0, r3, #0
 800bec2:	f7f4 fcfd 	bl	80008c0 <__aeabi_fadd>
 800bec6:	1c03      	adds	r3, r0, #0
 800bec8:	4934      	ldr	r1, [pc, #208]	@ (800bf9c <SGP_GetHT+0xec>)
 800beca:	1c18      	adds	r0, r3, #0
 800becc:	f7f4 fe82 	bl	8000bd4 <__aeabi_fdiv>
 800bed0:	1c03      	adds	r3, r0, #0
 800bed2:	4933      	ldr	r1, [pc, #204]	@ (800bfa0 <SGP_GetHT+0xf0>)
 800bed4:	1c18      	adds	r0, r3, #0
 800bed6:	f7f5 f863 	bl	8000fa0 <__aeabi_fmul>
 800beda:	1c03      	adds	r3, r0, #0
 800bedc:	1c18      	adds	r0, r3, #0
 800bede:	f7f4 fb9d 	bl	800061c <__aeabi_f2uiz>
 800bee2:	0003      	movs	r3, r0
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	4b2f      	ldr	r3, [pc, #188]	@ (800bfa4 <SGP_GetHT+0xf4>)
 800bee8:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	492e      	ldr	r1, [pc, #184]	@ (800bfa8 <SGP_GetHT+0xf8>)
 800bef0:	1c18      	adds	r0, r3, #0
 800bef2:	f7f4 fe6f 	bl	8000bd4 <__aeabi_fdiv>
 800bef6:	1c03      	adds	r3, r0, #0
 800bef8:	4929      	ldr	r1, [pc, #164]	@ (800bfa0 <SGP_GetHT+0xf0>)
 800befa:	1c18      	adds	r0, r3, #0
 800befc:	f7f5 f850 	bl	8000fa0 <__aeabi_fmul>
 800bf00:	1c03      	adds	r3, r0, #0
 800bf02:	1c18      	adds	r0, r3, #0
 800bf04:	f7f4 fb8a 	bl	800061c <__aeabi_f2uiz>
 800bf08:	0003      	movs	r3, r0
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	4b27      	ldr	r3, [pc, #156]	@ (800bfac <SGP_GetHT+0xfc>)
 800bf0e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800bf10:	4b26      	ldr	r3, [pc, #152]	@ (800bfac <SGP_GetHT+0xfc>)
 800bf12:	881b      	ldrh	r3, [r3, #0]
 800bf14:	0a1b      	lsrs	r3, r3, #8
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	4b25      	ldr	r3, [pc, #148]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf1c:	709a      	strb	r2, [r3, #2]
 800bf1e:	4b24      	ldr	r3, [pc, #144]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf20:	789a      	ldrb	r2, [r3, #2]
 800bf22:	210c      	movs	r1, #12
 800bf24:	187b      	adds	r3, r7, r1
 800bf26:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800bf28:	4b20      	ldr	r3, [pc, #128]	@ (800bfac <SGP_GetHT+0xfc>)
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	4b20      	ldr	r3, [pc, #128]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf30:	70da      	strb	r2, [r3, #3]
 800bf32:	4b1f      	ldr	r3, [pc, #124]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf34:	78da      	ldrb	r2, [r3, #3]
 800bf36:	187b      	adds	r3, r7, r1
 800bf38:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800bf3a:	187b      	adds	r3, r7, r1
 800bf3c:	2102      	movs	r1, #2
 800bf3e:	0018      	movs	r0, r3
 800bf40:	f7ff ff60 	bl	800be04 <CalculateCRC>
 800bf44:	0003      	movs	r3, r0
 800bf46:	001a      	movs	r2, r3
 800bf48:	4b19      	ldr	r3, [pc, #100]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf4a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800bf4c:	4b15      	ldr	r3, [pc, #84]	@ (800bfa4 <SGP_GetHT+0xf4>)
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	0a1b      	lsrs	r3, r3, #8
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	4b16      	ldr	r3, [pc, #88]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf58:	715a      	strb	r2, [r3, #5]
 800bf5a:	4b15      	ldr	r3, [pc, #84]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf5c:	795a      	ldrb	r2, [r3, #5]
 800bf5e:	2108      	movs	r1, #8
 800bf60:	187b      	adds	r3, r7, r1
 800bf62:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800bf64:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa4 <SGP_GetHT+0xf4>)
 800bf66:	881b      	ldrh	r3, [r3, #0]
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	4b11      	ldr	r3, [pc, #68]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf6c:	719a      	strb	r2, [r3, #6]
 800bf6e:	4b10      	ldr	r3, [pc, #64]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf70:	799a      	ldrb	r2, [r3, #6]
 800bf72:	187b      	adds	r3, r7, r1
 800bf74:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800bf76:	187b      	adds	r3, r7, r1
 800bf78:	2102      	movs	r1, #2
 800bf7a:	0018      	movs	r0, r3
 800bf7c:	f7ff ff42 	bl	800be04 <CalculateCRC>
 800bf80:	0003      	movs	r3, r0
 800bf82:	001a      	movs	r2, r3
 800bf84:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb0 <SGP_GetHT+0x100>)
 800bf86:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800bf88:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb4 <SGP_GetHT+0x104>)
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	701a      	strb	r2, [r3, #0]
}
 800bf8e:	46c0      	nop			@ (mov r8, r8)
 800bf90:	46bd      	mov	sp, r7
 800bf92:	b004      	add	sp, #16
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	46c0      	nop			@ (mov r8, r8)
 800bf98:	42340000 	.word	0x42340000
 800bf9c:	432f0000 	.word	0x432f0000
 800bfa0:	477fff00 	.word	0x477fff00
 800bfa4:	2000134a 	.word	0x2000134a
 800bfa8:	42c80000 	.word	0x42c80000
 800bfac:	20001348 	.word	0x20001348
 800bfb0:	20000098 	.word	0x20000098
 800bfb4:	2000134c 	.word	0x2000134c

0800bfb8 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800bfbc:	4a09      	ldr	r2, [pc, #36]	@ (800bfe4 <SGP_SoftReset+0x2c>)
 800bfbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bfe8 <SGP_SoftReset+0x30>)
 800bfc0:	0019      	movs	r1, r3
 800bfc2:	2003      	movs	r0, #3
 800bfc4:	f002 f9b6 	bl	800e334 <CreateLine>
  SGP_TurnHeaterOff();
 800bfc8:	f7ff fbf4 	bl	800b7b4 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800bfcc:	200a      	movs	r0, #10
 800bfce:	f002 fe11 	bl	800ebf4 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bfd2:	4b06      	ldr	r3, [pc, #24]	@ (800bfec <SGP_SoftReset+0x34>)
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	0019      	movs	r1, r3
 800bfd8:	2059      	movs	r0, #89	@ 0x59
 800bfda:	f7ff fb1d 	bl	800b618 <WriteRegister>
}
 800bfde:	46c0      	nop			@ (mov r8, r8)
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	08024c64 	.word	0x08024c64
 800bfe8:	08024b40 	.word	0x08024b40
 800bfec:	200000a0 	.word	0x200000a0

0800bff0 <ResetVOCresult>:

void ResetVOCresult(void) {
 800bff0:	b580      	push	{r7, lr}
 800bff2:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800bff4:	4b02      	ldr	r3, [pc, #8]	@ (800c000 <ResetVOCresult+0x10>)
 800bff6:	2200      	movs	r2, #0
 800bff8:	601a      	str	r2, [r3, #0]
}
 800bffa:	46c0      	nop			@ (mov r8, r8)
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	20001350 	.word	0x20001350

0800c004 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c004:	b580      	push	{r7, lr}
 800c006:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c008:	4b34      	ldr	r3, [pc, #208]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	2b07      	cmp	r3, #7
 800c00e:	d858      	bhi.n	800c0c2 <SGP_Upkeep+0xbe>
 800c010:	009a      	lsls	r2, r3, #2
 800c012:	4b33      	ldr	r3, [pc, #204]	@ (800c0e0 <SGP_Upkeep+0xdc>)
 800c014:	18d3      	adds	r3, r2, r3
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c01a:	4a32      	ldr	r2, [pc, #200]	@ (800c0e4 <SGP_Upkeep+0xe0>)
 800c01c:	4b32      	ldr	r3, [pc, #200]	@ (800c0e8 <SGP_Upkeep+0xe4>)
 800c01e:	0019      	movs	r1, r3
 800c020:	2003      	movs	r0, #3
 800c022:	f002 f987 	bl	800e334 <CreateLine>
    break;
 800c026:	e053      	b.n	800c0d0 <SGP_Upkeep+0xcc>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c028:	f7ff ffe2 	bl	800bff0 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c02c:	4b2b      	ldr	r3, [pc, #172]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c02e:	2201      	movs	r2, #1
 800c030:	701a      	strb	r2, [r3, #0]
    break;
 800c032:	e04d      	b.n	800c0d0 <SGP_Upkeep+0xcc>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c034:	f7ff fb5c 	bl	800b6f0 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c038:	f001 f916 	bl	800d268 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c03c:	4b27      	ldr	r3, [pc, #156]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c03e:	2202      	movs	r2, #2
 800c040:	701a      	strb	r2, [r3, #0]
    break;
 800c042:	e045      	b.n	800c0d0 <SGP_Upkeep+0xcc>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c044:	4b29      	ldr	r3, [pc, #164]	@ (800c0ec <SGP_Upkeep+0xe8>)
 800c046:	0018      	movs	r0, r3
 800c048:	f7ff fbc2 	bl	800b7d0 <SGP_GetMeasurementValues>
 800c04c:	1e03      	subs	r3, r0, #0
 800c04e:	d03c      	beq.n	800c0ca <SGP_Upkeep+0xc6>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c050:	4b22      	ldr	r3, [pc, #136]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c052:	2203      	movs	r2, #3
 800c054:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c056:	e038      	b.n	800c0ca <SGP_Upkeep+0xc6>

  case SGP_STATE_PROCESS_RESULTS:
//    Debug("Processing results in SGP_STATE_PROCESS_RESULTS.");
    setVOC(vocIndex);
 800c058:	4b24      	ldr	r3, [pc, #144]	@ (800c0ec <SGP_Upkeep+0xe8>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	0018      	movs	r0, r3
 800c060:	f7f7 fc60 	bl	8003924 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c064:	4b1d      	ldr	r3, [pc, #116]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c066:	2206      	movs	r2, #6
 800c068:	701a      	strb	r2, [r3, #0]
    break;
 800c06a:	e031      	b.n	800c0d0 <SGP_Upkeep+0xcc>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c06c:	4b1b      	ldr	r3, [pc, #108]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c06e:	2207      	movs	r2, #7
 800c070:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c072:	4b1f      	ldr	r3, [pc, #124]	@ (800c0f0 <SGP_Upkeep+0xec>)
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d10b      	bne.n	800c092 <SGP_Upkeep+0x8e>
 800c07a:	4b1e      	ldr	r3, [pc, #120]	@ (800c0f4 <SGP_Upkeep+0xf0>)
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	2201      	movs	r2, #1
 800c080:	4053      	eors	r3, r2
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	d004      	beq.n	800c092 <SGP_Upkeep+0x8e>
      // restart the SGP40 with a soft reset to enter idle mode
      SGP_SoftReset();
 800c088:	f7ff ff96 	bl	800bfb8 <SGP_SoftReset>
      SetVOCSensorStatus(false);
 800c08c:	2000      	movs	r0, #0
 800c08e:	f7fc f983 	bl	8008398 <SetVOCSensorStatus>
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c092:	f002 fda5 	bl	800ebe0 <HAL_GetTick>
 800c096:	0003      	movs	r3, r0
 800c098:	22c8      	movs	r2, #200	@ 0xc8
 800c09a:	0092      	lsls	r2, r2, #2
 800c09c:	189a      	adds	r2, r3, r2
 800c09e:	4b16      	ldr	r3, [pc, #88]	@ (800c0f8 <SGP_Upkeep+0xf4>)
 800c0a0:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c0a2:	f001 f8f9 	bl	800d298 <ResetMeasurementIndicator>
  break;
 800c0a6:	e013      	b.n	800c0d0 <SGP_Upkeep+0xcc>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c0a8:	4b13      	ldr	r3, [pc, #76]	@ (800c0f8 <SGP_Upkeep+0xf4>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	0018      	movs	r0, r3
 800c0ae:	f002 f8eb 	bl	800e288 <TimestampIsReached>
 800c0b2:	1e03      	subs	r3, r0, #0
 800c0b4:	d00b      	beq.n	800c0ce <SGP_Upkeep+0xca>
//      Debug("in SGP_STATE_WAIT");
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c0b6:	f7ff fb03 	bl	800b6c0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c0ba:	4b08      	ldr	r3, [pc, #32]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c0bc:	2200      	movs	r2, #0
 800c0be:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c0c0:	e005      	b.n	800c0ce <SGP_Upkeep+0xca>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c0c2:	4b06      	ldr	r3, [pc, #24]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	701a      	strb	r2, [r3, #0]
    break;
 800c0c8:	e002      	b.n	800c0d0 <SGP_Upkeep+0xcc>
    break;
 800c0ca:	46c0      	nop			@ (mov r8, r8)
 800c0cc:	e000      	b.n	800c0d0 <SGP_Upkeep+0xcc>
    break;
 800c0ce:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c0d0:	4b02      	ldr	r3, [pc, #8]	@ (800c0dc <SGP_Upkeep+0xd8>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
}
 800c0d4:	0018      	movs	r0, r3
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	46c0      	nop			@ (mov r8, r8)
 800c0dc:	2000135a 	.word	0x2000135a
 800c0e0:	080253cc 	.word	0x080253cc
 800c0e4:	08024c7c 	.word	0x08024c7c
 800c0e8:	08024b40 	.word	0x08024b40
 800c0ec:	20001350 	.word	0x20001350
 800c0f0:	2000129a 	.word	0x2000129a
 800c0f4:	200021f5 	.word	0x200021f5
 800c0f8:	2000129c 	.word	0x2000129c

0800c0fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	0002      	movs	r2, r0
 800c104:	1dfb      	adds	r3, r7, #7
 800c106:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c108:	1dfb      	adds	r3, r7, #7
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c10e:	d809      	bhi.n	800c124 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c110:	1dfb      	adds	r3, r7, #7
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	001a      	movs	r2, r3
 800c116:	231f      	movs	r3, #31
 800c118:	401a      	ands	r2, r3
 800c11a:	4b04      	ldr	r3, [pc, #16]	@ (800c12c <__NVIC_EnableIRQ+0x30>)
 800c11c:	2101      	movs	r1, #1
 800c11e:	4091      	lsls	r1, r2
 800c120:	000a      	movs	r2, r1
 800c122:	601a      	str	r2, [r3, #0]
  }
}
 800c124:	46c0      	nop			@ (mov r8, r8)
 800c126:	46bd      	mov	sp, r7
 800c128:	b002      	add	sp, #8
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	e000e100 	.word	0xe000e100

0800c130 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	0002      	movs	r2, r0
 800c138:	1dfb      	adds	r3, r7, #7
 800c13a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c13c:	1dfb      	adds	r3, r7, #7
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	2b7f      	cmp	r3, #127	@ 0x7f
 800c142:	d810      	bhi.n	800c166 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c144:	1dfb      	adds	r3, r7, #7
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	001a      	movs	r2, r3
 800c14a:	231f      	movs	r3, #31
 800c14c:	4013      	ands	r3, r2
 800c14e:	4908      	ldr	r1, [pc, #32]	@ (800c170 <__NVIC_DisableIRQ+0x40>)
 800c150:	2201      	movs	r2, #1
 800c152:	409a      	lsls	r2, r3
 800c154:	0013      	movs	r3, r2
 800c156:	2280      	movs	r2, #128	@ 0x80
 800c158:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c15a:	f3bf 8f4f 	dsb	sy
}
 800c15e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c160:	f3bf 8f6f 	isb	sy
}
 800c164:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c166:	46c0      	nop			@ (mov r8, r8)
 800c168:	46bd      	mov	sp, r7
 800c16a:	b002      	add	sp, #8
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	46c0      	nop			@ (mov r8, r8)
 800c170:	e000e100 	.word	0xe000e100

0800c174 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c174:	b5b0      	push	{r4, r5, r7, lr}
 800c176:	b088      	sub	sp, #32
 800c178:	af02      	add	r7, sp, #8
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	0008      	movs	r0, r1
 800c17e:	0011      	movs	r1, r2
 800c180:	1cfb      	adds	r3, r7, #3
 800c182:	1c02      	adds	r2, r0, #0
 800c184:	701a      	strb	r2, [r3, #0]
 800c186:	1cbb      	adds	r3, r7, #2
 800c188:	1c0a      	adds	r2, r1, #0
 800c18a:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c18c:	4b5b      	ldr	r3, [pc, #364]	@ (800c2fc <getSoundData+0x188>)
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	b2db      	uxtb	r3, r3
 800c192:	2201      	movs	r2, #1
 800c194:	4053      	eors	r3, r2
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d107      	bne.n	800c1ac <getSoundData+0x38>
 800c19c:	4b58      	ldr	r3, [pc, #352]	@ (800c300 <getSoundData+0x18c>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	4053      	eors	r3, r2
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d001      	beq.n	800c1b0 <getSoundData+0x3c>
    {
        return false;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	e0a0      	b.n	800c2f2 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c1b0:	4b54      	ldr	r3, [pc, #336]	@ (800c304 <getSoundData+0x190>)
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c1ba:	4b53      	ldr	r3, [pc, #332]	@ (800c308 <getSoundData+0x194>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	b25b      	sxtb	r3, r3
 800c1c0:	0018      	movs	r0, r3
 800c1c2:	f7ff ffb5 	bl	800c130 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c1c6:	f3bf 8f4f 	dsb	sy
}
 800c1ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c1cc:	f3bf 8f6f 	isb	sy
}
 800c1d0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c1d2:	1cfb      	adds	r3, r7, #3
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d04c      	beq.n	800c274 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c1da:	4b4c      	ldr	r3, [pc, #304]	@ (800c30c <getSoundData+0x198>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d11b      	bne.n	800c21a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	617b      	str	r3, [r7, #20]
 800c1f2:	e00e      	b.n	800c212 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	18d3      	adds	r3, r2, r3
 800c1fa:	3302      	adds	r3, #2
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	18d3      	adds	r3, r2, r3
 800c206:	3308      	adds	r3, #8
 800c208:	2200      	movs	r2, #0
 800c20a:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	3301      	adds	r3, #1
 800c210:	617b      	str	r3, [r7, #20]
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	2b05      	cmp	r3, #5
 800c216:	d9ed      	bls.n	800c1f4 <getSoundData+0x80>
 800c218:	e02c      	b.n	800c274 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	1c59      	adds	r1, r3, #1
 800c220:	4b3b      	ldr	r3, [pc, #236]	@ (800c310 <getSoundData+0x19c>)
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	4b3b      	ldr	r3, [pc, #236]	@ (800c314 <getSoundData+0x1a0>)
 800c226:	681c      	ldr	r4, [r3, #0]
 800c228:	4b38      	ldr	r3, [pc, #224]	@ (800c30c <getSoundData+0x198>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	9300      	str	r3, [sp, #0]
 800c22e:	0023      	movs	r3, r4
 800c230:	f000 fde8 	bl	800ce04 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c234:	2300      	movs	r3, #0
 800c236:	613b      	str	r3, [r7, #16]
 800c238:	e019      	b.n	800c26e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	18d3      	adds	r3, r2, r3
 800c240:	1c98      	adds	r0, r3, #2
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	3308      	adds	r3, #8
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c24a:	4b33      	ldr	r3, [pc, #204]	@ (800c318 <getSoundData+0x1a4>)
 800c24c:	693a      	ldr	r2, [r7, #16]
 800c24e:	0092      	lsls	r2, r2, #2
 800c250:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c252:	4b32      	ldr	r3, [pc, #200]	@ (800c31c <getSoundData+0x1a8>)
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	0092      	lsls	r2, r2, #2
 800c258:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c25a:	4b2c      	ldr	r3, [pc, #176]	@ (800c30c <getSoundData+0x198>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	0013      	movs	r3, r2
 800c262:	0022      	movs	r2, r4
 800c264:	f000 fdce 	bl	800ce04 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	3301      	adds	r3, #1
 800c26c:	613b      	str	r3, [r7, #16]
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	2b05      	cmp	r3, #5
 800c272:	d9e2      	bls.n	800c23a <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c274:	1cbb      	adds	r3, r7, #2
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d028      	beq.n	800c2ce <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c27c:	240e      	movs	r4, #14
 800c27e:	193b      	adds	r3, r7, r4
 800c280:	2200      	movs	r2, #0
 800c282:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c284:	250d      	movs	r5, #13
 800c286:	197b      	adds	r3, r7, r5
 800c288:	2200      	movs	r2, #0
 800c28a:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c28c:	4b24      	ldr	r3, [pc, #144]	@ (800c320 <getSoundData+0x1ac>)
 800c28e:	6818      	ldr	r0, [r3, #0]
 800c290:	4924      	ldr	r1, [pc, #144]	@ (800c324 <getSoundData+0x1b0>)
 800c292:	197b      	adds	r3, r7, r5
 800c294:	193a      	adds	r2, r7, r4
 800c296:	f000 fe59 	bl	800cf4c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c29a:	193b      	adds	r3, r7, r4
 800c29c:	881a      	ldrh	r2, [r3, #0]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	21ff      	movs	r1, #255	@ 0xff
 800c2a2:	4011      	ands	r1, r2
 800c2a4:	000c      	movs	r4, r1
 800c2a6:	7b99      	ldrb	r1, [r3, #14]
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	4001      	ands	r1, r0
 800c2ac:	1c08      	adds	r0, r1, #0
 800c2ae:	1c21      	adds	r1, r4, #0
 800c2b0:	4301      	orrs	r1, r0
 800c2b2:	7399      	strb	r1, [r3, #14]
 800c2b4:	0a12      	lsrs	r2, r2, #8
 800c2b6:	b290      	uxth	r0, r2
 800c2b8:	7bda      	ldrb	r2, [r3, #15]
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	400a      	ands	r2, r1
 800c2be:	1c11      	adds	r1, r2, #0
 800c2c0:	1c02      	adds	r2, r0, #0
 800c2c2:	430a      	orrs	r2, r1
 800c2c4:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c2c6:	197b      	adds	r3, r7, r5
 800c2c8:	781a      	ldrb	r2, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c2ce:	f000 f86f 	bl	800c3b0 <micSettlingComplete>
 800c2d2:	0003      	movs	r3, r0
 800c2d4:	001a      	movs	r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c2da:	4b0a      	ldr	r3, [pc, #40]	@ (800c304 <getSoundData+0x190>)
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d005      	beq.n	800c2f0 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c2e4:	4b08      	ldr	r3, [pc, #32]	@ (800c308 <getSoundData+0x194>)
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	b25b      	sxtb	r3, r3
 800c2ea:	0018      	movs	r0, r3
 800c2ec:	f7ff ff06 	bl	800c0fc <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c2f0:	2301      	movs	r3, #1
}
 800c2f2:	0018      	movs	r0, r3
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	b006      	add	sp, #24
 800c2f8:	bdb0      	pop	{r4, r5, r7, pc}
 800c2fa:	46c0      	nop			@ (mov r8, r8)
 800c2fc:	2000135c 	.word	0x2000135c
 800c300:	2000135f 	.word	0x2000135f
 800c304:	2000135e 	.word	0x2000135e
 800c308:	20001dac 	.word	0x20001dac
 800c30c:	20001de8 	.word	0x20001de8
 800c310:	20001db0 	.word	0x20001db0
 800c314:	20001db4 	.word	0x20001db4
 800c318:	20001db8 	.word	0x20001db8
 800c31c:	20001dd0 	.word	0x20001dd0
 800c320:	20001364 	.word	0x20001364
 800c324:	3b5c7333 	.word	0x3b5c7333

0800c328 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	001a      	movs	r2, r3
 800c336:	1cfb      	adds	r3, r7, #3
 800c338:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c33a:	4b09      	ldr	r3, [pc, #36]	@ (800c360 <soundInit+0x38>)
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c340:	4b08      	ldr	r3, [pc, #32]	@ (800c364 <soundInit+0x3c>)
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c346:	4b08      	ldr	r3, [pc, #32]	@ (800c368 <soundInit+0x40>)
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c34c:	4b07      	ldr	r3, [pc, #28]	@ (800c36c <soundInit+0x44>)
 800c34e:	2200      	movs	r2, #0
 800c350:	569a      	ldrsb	r2, [r3, r2]
 800c352:	4b06      	ldr	r3, [pc, #24]	@ (800c36c <soundInit+0x44>)
 800c354:	701a      	strb	r2, [r3, #0]

    return true;
 800c356:	2301      	movs	r3, #1
}
 800c358:	0018      	movs	r0, r3
 800c35a:	46bd      	mov	sp, r7
 800c35c:	b004      	add	sp, #16
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20001da4 	.word	0x20001da4
 800c364:	20001da0 	.word	0x20001da0
 800c368:	20001da8 	.word	0x20001da8
 800c36c:	20001dac 	.word	0x20001dac

0800c370 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c374:	4b02      	ldr	r3, [pc, #8]	@ (800c380 <clearMaximumAmplitude+0x10>)
 800c376:	2200      	movs	r2, #0
 800c378:	601a      	str	r2, [r3, #0]
}
 800c37a:	46c0      	nop			@ (mov r8, r8)
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	20001364 	.word	0x20001364

0800c384 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c388:	4b08      	ldr	r3, [pc, #32]	@ (800c3ac <startMicSettlingPeriod+0x28>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2200      	movs	r2, #0
 800c390:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c392:	4b06      	ldr	r3, [pc, #24]	@ (800c3ac <startMicSettlingPeriod+0x28>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	0018      	movs	r0, r3
 800c398:	f00a f9e6 	bl	8016768 <HAL_TIM_Base_Start>
 800c39c:	1e03      	subs	r3, r0, #0
 800c39e:	d001      	beq.n	800c3a4 <startMicSettlingPeriod+0x20>
    {
        return false;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	e000      	b.n	800c3a6 <startMicSettlingPeriod+0x22>
    }
    return true;
 800c3a4:	2301      	movs	r3, #1
}
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20001da0 	.word	0x20001da0

0800c3b0 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c3b6:	4b0e      	ldr	r3, [pc, #56]	@ (800c3f0 <micSettlingComplete+0x40>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	401a      	ands	r2, r3
 800c3c2:	1dfb      	adds	r3, r7, #7
 800c3c4:	3a01      	subs	r2, #1
 800c3c6:	4251      	negs	r1, r2
 800c3c8:	414a      	adcs	r2, r1
 800c3ca:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c3cc:	1dfb      	adds	r3, r7, #7
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d007      	beq.n	800c3e4 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c3d4:	4b06      	ldr	r3, [pc, #24]	@ (800c3f0 <micSettlingComplete+0x40>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	0018      	movs	r0, r3
 800c3da:	f00a fa0f 	bl	80167fc <HAL_TIM_Base_Stop>
      DataReady = true;
 800c3de:	4b05      	ldr	r3, [pc, #20]	@ (800c3f4 <micSettlingComplete+0x44>)
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c3e4:	1dfb      	adds	r3, r7, #7
 800c3e6:	781b      	ldrb	r3, [r3, #0]
}
 800c3e8:	0018      	movs	r0, r3
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	b002      	add	sp, #8
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20001da0 	.word	0x20001da0
 800c3f4:	2000135b 	.word	0x2000135b

0800c3f8 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	0002      	movs	r2, r0
 800c400:	1dfb      	adds	r3, r7, #7
 800c402:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c404:	4b29      	ldr	r3, [pc, #164]	@ (800c4ac <enableMicrophone+0xb4>)
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	1dfa      	adds	r2, r7, #7
 800c40c:	7812      	ldrb	r2, [r2, #0]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d101      	bne.n	800c416 <enableMicrophone+0x1e>
    {
        return true;
 800c412:	2301      	movs	r3, #1
 800c414:	e045      	b.n	800c4a2 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c416:	1dfb      	adds	r3, r7, #7
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d025      	beq.n	800c46a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c41e:	f7ff ffb1 	bl	800c384 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c422:	4b23      	ldr	r3, [pc, #140]	@ (800c4b0 <enableMicrophone+0xb8>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2280      	movs	r2, #128	@ 0x80
 800c428:	0092      	lsls	r2, r2, #2
 800c42a:	4922      	ldr	r1, [pc, #136]	@ (800c4b4 <enableMicrophone+0xbc>)
 800c42c:	0018      	movs	r0, r3
 800c42e:	f006 fc05 	bl	8012c3c <HAL_I2S_Receive_DMA>
 800c432:	1e03      	subs	r3, r0, #0
 800c434:	d001      	beq.n	800c43a <enableMicrophone+0x42>
        {
            return false;
 800c436:	2300      	movs	r3, #0
 800c438:	e033      	b.n	800c4a2 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c43a:	f7ff ff99 	bl	800c370 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c43e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4b8 <enableMicrophone+0xc0>)
 800c440:	2200      	movs	r2, #0
 800c442:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c444:	4b1d      	ldr	r3, [pc, #116]	@ (800c4bc <enableMicrophone+0xc4>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	b25b      	sxtb	r3, r3
 800c44a:	0018      	movs	r0, r3
 800c44c:	f7ff fe56 	bl	800c0fc <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c450:	4b1b      	ldr	r3, [pc, #108]	@ (800c4c0 <enableMicrophone+0xc8>)
 800c452:	2201      	movs	r2, #1
 800c454:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c456:	4b15      	ldr	r3, [pc, #84]	@ (800c4ac <enableMicrophone+0xb4>)
 800c458:	2201      	movs	r2, #1
 800c45a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c45c:	4b19      	ldr	r3, [pc, #100]	@ (800c4c4 <enableMicrophone+0xcc>)
 800c45e:	2200      	movs	r2, #0
 800c460:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c462:	4b19      	ldr	r3, [pc, #100]	@ (800c4c8 <enableMicrophone+0xd0>)
 800c464:	2200      	movs	r2, #0
 800c466:	701a      	strb	r2, [r3, #0]
 800c468:	e01a      	b.n	800c4a0 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c46a:	4b14      	ldr	r3, [pc, #80]	@ (800c4bc <enableMicrophone+0xc4>)
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	b25b      	sxtb	r3, r3
 800c470:	0018      	movs	r0, r3
 800c472:	f7ff fe5d 	bl	800c130 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c476:	4b12      	ldr	r3, [pc, #72]	@ (800c4c0 <enableMicrophone+0xc8>)
 800c478:	2200      	movs	r2, #0
 800c47a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c47c:	4b11      	ldr	r3, [pc, #68]	@ (800c4c4 <enableMicrophone+0xcc>)
 800c47e:	2200      	movs	r2, #0
 800c480:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c482:	4b11      	ldr	r3, [pc, #68]	@ (800c4c8 <enableMicrophone+0xd0>)
 800c484:	2200      	movs	r2, #0
 800c486:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c488:	4b09      	ldr	r3, [pc, #36]	@ (800c4b0 <enableMicrophone+0xb8>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	0018      	movs	r0, r3
 800c48e:	f006 fc97 	bl	8012dc0 <HAL_I2S_DMAStop>
 800c492:	1e03      	subs	r3, r0, #0
 800c494:	d001      	beq.n	800c49a <enableMicrophone+0xa2>
        {
            return false;
 800c496:	2300      	movs	r3, #0
 800c498:	e003      	b.n	800c4a2 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c49a:	4b04      	ldr	r3, [pc, #16]	@ (800c4ac <enableMicrophone+0xb4>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c4a0:	2301      	movs	r3, #1
}
 800c4a2:	0018      	movs	r0, r3
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	b002      	add	sp, #8
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	46c0      	nop			@ (mov r8, r8)
 800c4ac:	2000135c 	.word	0x2000135c
 800c4b0:	20001da4 	.word	0x20001da4
 800c4b4:	200013a0 	.word	0x200013a0
 800c4b8:	20001360 	.word	0x20001360
 800c4bc:	20001dac 	.word	0x20001dac
 800c4c0:	2000135e 	.word	0x2000135e
 800c4c4:	2000135d 	.word	0x2000135d
 800c4c8:	2000135f 	.word	0x2000135f

0800c4cc <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c504 <startSPLcalculation+0x38>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	4053      	eors	r3, r2
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d001      	beq.n	800c4e4 <startSPLcalculation+0x18>
    {
        return false;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	e00c      	b.n	800c4fe <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c4e4:	4b08      	ldr	r3, [pc, #32]	@ (800c508 <startSPLcalculation+0x3c>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <startSPLcalculation+0x26>
    {
        return true;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e005      	b.n	800c4fe <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c4f2:	f000 fb63 	bl	800cbbc <resetSPLstate>
    SPLcalcEnabled = true;
 800c4f6:	4b04      	ldr	r3, [pc, #16]	@ (800c508 <startSPLcalculation+0x3c>)
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	701a      	strb	r2, [r3, #0]
    return true;
 800c4fc:	2301      	movs	r3, #1
}
 800c4fe:	0018      	movs	r0, r3
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	2000135c 	.word	0x2000135c
 800c508:	2000135d 	.word	0x2000135d

0800c50c <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c514:	4b05      	ldr	r3, [pc, #20]	@ (800c52c <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d102      	bne.n	800c524 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c51e:	2000      	movs	r0, #0
 800c520:	f000 f81a 	bl	800c558 <processHalfDMAbuffer>
  }
}
 800c524:	46c0      	nop			@ (mov r8, r8)
 800c526:	46bd      	mov	sp, r7
 800c528:	b002      	add	sp, #8
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	20001da4 	.word	0x20001da4

0800c530 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c538:	4b06      	ldr	r3, [pc, #24]	@ (800c554 <HAL_I2S_RxCpltCallback+0x24>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d104      	bne.n	800c54c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c542:	2380      	movs	r3, #128	@ 0x80
 800c544:	009b      	lsls	r3, r3, #2
 800c546:	0018      	movs	r0, r3
 800c548:	f000 f806 	bl	800c558 <processHalfDMAbuffer>
  }
}
 800c54c:	46c0      	nop			@ (mov r8, r8)
 800c54e:	46bd      	mov	sp, r7
 800c550:	b002      	add	sp, #8
 800c552:	bd80      	pop	{r7, pc}
 800c554:	20001da4 	.word	0x20001da4

0800c558 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	005a      	lsls	r2, r3, #1
 800c564:	4b15      	ldr	r3, [pc, #84]	@ (800c5bc <processHalfDMAbuffer+0x64>)
 800c566:	18d3      	adds	r3, r2, r3
 800c568:	4a15      	ldr	r2, [pc, #84]	@ (800c5c0 <processHalfDMAbuffer+0x68>)
 800c56a:	2180      	movs	r1, #128	@ 0x80
 800c56c:	0089      	lsls	r1, r1, #2
 800c56e:	0018      	movs	r0, r3
 800c570:	f000 fd35 	bl	800cfde <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c574:	4b13      	ldr	r3, [pc, #76]	@ (800c5c4 <processHalfDMAbuffer+0x6c>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	425a      	negs	r2, r3
 800c57a:	4153      	adcs	r3, r2
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	4b11      	ldr	r3, [pc, #68]	@ (800c5c4 <processHalfDMAbuffer+0x6c>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2109      	movs	r1, #9
 800c584:	4299      	cmp	r1, r3
 800c586:	419b      	sbcs	r3, r3
 800c588:	425b      	negs	r3, r3
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	480c      	ldr	r0, [pc, #48]	@ (800c5c0 <processHalfDMAbuffer+0x68>)
 800c58e:	2180      	movs	r1, #128	@ 0x80
 800c590:	f000 fb46 	bl	800cc20 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c594:	4b0b      	ldr	r3, [pc, #44]	@ (800c5c4 <processHalfDMAbuffer+0x6c>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b09      	cmp	r3, #9
 800c59a:	d804      	bhi.n	800c5a6 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c59c:	4b09      	ldr	r3, [pc, #36]	@ (800c5c4 <processHalfDMAbuffer+0x6c>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	1c5a      	adds	r2, r3, #1
 800c5a2:	4b08      	ldr	r3, [pc, #32]	@ (800c5c4 <processHalfDMAbuffer+0x6c>)
 800c5a4:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c5a6:	4b08      	ldr	r3, [pc, #32]	@ (800c5c8 <processHalfDMAbuffer+0x70>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c5b0:	f000 f826 	bl	800c600 <calculateSPLQ31>
    }
}
 800c5b4:	46c0      	nop			@ (mov r8, r8)
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	b002      	add	sp, #8
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	200013a0 	.word	0x200013a0
 800c5c0:	20001ba0 	.word	0x20001ba0
 800c5c4:	20001360 	.word	0x20001360
 800c5c8:	2000135d 	.word	0x2000135d

0800c5cc <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c5d4:	4b07      	ldr	r3, [pc, #28]	@ (800c5f4 <HAL_I2S_ErrorCallback+0x28>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d106      	bne.n	800c5ec <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c5de:	4a06      	ldr	r2, [pc, #24]	@ (800c5f8 <HAL_I2S_ErrorCallback+0x2c>)
 800c5e0:	239f      	movs	r3, #159	@ 0x9f
 800c5e2:	0059      	lsls	r1, r3, #1
 800c5e4:	4b05      	ldr	r3, [pc, #20]	@ (800c5fc <HAL_I2S_ErrorCallback+0x30>)
 800c5e6:	0018      	movs	r0, r3
 800c5e8:	f001 ff5c 	bl	800e4a4 <errorHandler>
  }
}
 800c5ec:	46c0      	nop			@ (mov r8, r8)
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	b002      	add	sp, #8
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	20001da4 	.word	0x20001da4
 800c5f8:	08024ca4 	.word	0x08024ca4
 800c5fc:	080254bc 	.word	0x080254bc

0800c600 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c602:	b0b3      	sub	sp, #204	@ 0xcc
 800c604:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c606:	4ae2      	ldr	r2, [pc, #904]	@ (800c990 <calculateSPLQ31+0x390>)
 800c608:	2338      	movs	r3, #56	@ 0x38
 800c60a:	2030      	movs	r0, #48	@ 0x30
 800c60c:	181b      	adds	r3, r3, r0
 800c60e:	19d9      	adds	r1, r3, r7
 800c610:	2334      	movs	r3, #52	@ 0x34
 800c612:	181b      	adds	r3, r3, r0
 800c614:	19d8      	adds	r0, r3, r7
 800c616:	2380      	movs	r3, #128	@ 0x80
 800c618:	f000 fc36 	bl	800ce88 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c61c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c61e:	2b00      	cmp	r3, #0
 800c620:	da00      	bge.n	800c624 <calculateSPLQ31+0x24>
 800c622:	3301      	adds	r3, #1
 800c624:	105b      	asrs	r3, r3, #1
 800c626:	001a      	movs	r2, r3
 800c628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	da00      	bge.n	800c630 <calculateSPLQ31+0x30>
 800c62e:	3301      	adds	r3, #1
 800c630:	105b      	asrs	r3, r3, #1
 800c632:	18d3      	adds	r3, r2, r3
 800c634:	2188      	movs	r1, #136	@ 0x88
 800c636:	187a      	adds	r2, r7, r1
 800c638:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c63a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c63c:	187b      	adds	r3, r7, r1
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	3304      	adds	r3, #4
 800c644:	2284      	movs	r2, #132	@ 0x84
 800c646:	18b9      	adds	r1, r7, r2
 800c648:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c64a:	18bb      	adds	r3, r7, r2
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4ad1      	ldr	r2, [pc, #836]	@ (800c994 <calculateSPLQ31+0x394>)
 800c650:	0019      	movs	r1, r3
 800c652:	0010      	movs	r0, r2
 800c654:	f000 fc58 	bl	800cf08 <getPo2factor>
 800c658:	0003      	movs	r3, r0
 800c65a:	2280      	movs	r2, #128	@ 0x80
 800c65c:	18ba      	adds	r2, r7, r2
 800c65e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	2284      	movs	r2, #132	@ 0x84
 800c664:	2130      	movs	r1, #48	@ 0x30
 800c666:	1852      	adds	r2, r2, r1
 800c668:	19d2      	adds	r2, r2, r7
 800c66a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c66c:	2300      	movs	r3, #0
 800c66e:	2280      	movs	r2, #128	@ 0x80
 800c670:	1852      	adds	r2, r2, r1
 800c672:	19d2      	adds	r2, r2, r7
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	e032      	b.n	800c6de <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c678:	4ac5      	ldr	r2, [pc, #788]	@ (800c990 <calculateSPLQ31+0x390>)
 800c67a:	2680      	movs	r6, #128	@ 0x80
 800c67c:	2330      	movs	r3, #48	@ 0x30
 800c67e:	18f1      	adds	r1, r6, r3
 800c680:	19cb      	adds	r3, r1, r7
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	589a      	ldr	r2, [r3, r2]
 800c688:	2188      	movs	r1, #136	@ 0x88
 800c68a:	1879      	adds	r1, r7, r1
 800c68c:	680b      	ldr	r3, [r1, #0]
 800c68e:	1ad2      	subs	r2, r2, r3
 800c690:	2180      	movs	r1, #128	@ 0x80
 800c692:	1879      	adds	r1, r7, r1
 800c694:	680b      	ldr	r3, [r1, #0]
 800c696:	409a      	lsls	r2, r3
 800c698:	0011      	movs	r1, r2
 800c69a:	4abf      	ldr	r2, [pc, #764]	@ (800c998 <calculateSPLQ31+0x398>)
 800c69c:	2084      	movs	r0, #132	@ 0x84
 800c69e:	2330      	movs	r3, #48	@ 0x30
 800c6a0:	18c3      	adds	r3, r0, r3
 800c6a2:	19db      	adds	r3, r3, r7
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c6aa:	2230      	movs	r2, #48	@ 0x30
 800c6ac:	1883      	adds	r3, r0, r2
 800c6ae:	19db      	adds	r3, r3, r7
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	49b8      	ldr	r1, [pc, #736]	@ (800c998 <calculateSPLQ31+0x398>)
 800c6b6:	009a      	lsls	r2, r3, #2
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	5053      	str	r3, [r2, r1]
        count += 2;
 800c6bc:	2230      	movs	r2, #48	@ 0x30
 800c6be:	1883      	adds	r3, r0, r2
 800c6c0:	19db      	adds	r3, r3, r7
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	3302      	adds	r3, #2
 800c6c6:	0011      	movs	r1, r2
 800c6c8:	1882      	adds	r2, r0, r2
 800c6ca:	19d2      	adds	r2, r2, r7
 800c6cc:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c6ce:	000a      	movs	r2, r1
 800c6d0:	18b3      	adds	r3, r6, r2
 800c6d2:	19db      	adds	r3, r3, r7
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	18b2      	adds	r2, r6, r2
 800c6da:	19d2      	adds	r2, r2, r7
 800c6dc:	6013      	str	r3, [r2, #0]
 800c6de:	2380      	movs	r3, #128	@ 0x80
 800c6e0:	2630      	movs	r6, #48	@ 0x30
 800c6e2:	199b      	adds	r3, r3, r6
 800c6e4:	19db      	adds	r3, r3, r7
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6ea:	d9c5      	bls.n	800c678 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c6ec:	4bab      	ldr	r3, [pc, #684]	@ (800c99c <calculateSPLQ31+0x39c>)
 800c6ee:	6818      	ldr	r0, [r3, #0]
 800c6f0:	49a9      	ldr	r1, [pc, #676]	@ (800c998 <calculateSPLQ31+0x398>)
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	f011 f8fd 	bl	801d8f4 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c6fa:	4aa9      	ldr	r2, [pc, #676]	@ (800c9a0 <calculateSPLQ31+0x3a0>)
 800c6fc:	2338      	movs	r3, #56	@ 0x38
 800c6fe:	199b      	adds	r3, r3, r6
 800c700:	19d9      	adds	r1, r3, r7
 800c702:	2334      	movs	r3, #52	@ 0x34
 800c704:	199b      	adds	r3, r3, r6
 800c706:	19d8      	adds	r0, r3, r7
 800c708:	237e      	movs	r3, #126	@ 0x7e
 800c70a:	f000 fbbd 	bl	800ce88 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c70e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c710:	2380      	movs	r3, #128	@ 0x80
 800c712:	061b      	lsls	r3, r3, #24
 800c714:	429a      	cmp	r2, r3
 800c716:	d101      	bne.n	800c71c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c718:	4b9e      	ldr	r3, [pc, #632]	@ (800c994 <calculateSPLQ31+0x394>)
 800c71a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c71c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c71e:	2380      	movs	r3, #128	@ 0x80
 800c720:	061b      	lsls	r3, r3, #24
 800c722:	429a      	cmp	r2, r3
 800c724:	d101      	bne.n	800c72a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c726:	4b9b      	ldr	r3, [pc, #620]	@ (800c994 <calculateSPLQ31+0x394>)
 800c728:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c72a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c72c:	17da      	asrs	r2, r3, #31
 800c72e:	189b      	adds	r3, r3, r2
 800c730:	4053      	eors	r3, r2
 800c732:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c736:	17da      	asrs	r2, r3, #31
 800c738:	189b      	adds	r3, r3, r2
 800c73a:	4053      	eors	r3, r2
 800c73c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c73e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c742:	429a      	cmp	r2, r3
 800c744:	dd01      	ble.n	800c74a <calculateSPLQ31+0x14a>
    {
        max = min;
 800c746:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c748:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c74a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c74c:	3304      	adds	r3, #4
 800c74e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c750:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c752:	4a90      	ldr	r2, [pc, #576]	@ (800c994 <calculateSPLQ31+0x394>)
 800c754:	0019      	movs	r1, r3
 800c756:	0010      	movs	r0, r2
 800c758:	f000 fbd6 	bl	800cf08 <getPo2factor>
 800c75c:	0003      	movs	r3, r0
 800c75e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c760:	2302      	movs	r3, #2
 800c762:	22ac      	movs	r2, #172	@ 0xac
 800c764:	18ba      	adds	r2, r7, r2
 800c766:	6013      	str	r3, [r2, #0]
 800c768:	e012      	b.n	800c790 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c76a:	4a8b      	ldr	r2, [pc, #556]	@ (800c998 <calculateSPLQ31+0x398>)
 800c76c:	20ac      	movs	r0, #172	@ 0xac
 800c76e:	183b      	adds	r3, r7, r0
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	589a      	ldr	r2, [r3, r2]
 800c776:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c778:	409a      	lsls	r2, r3
 800c77a:	0011      	movs	r1, r2
 800c77c:	4a86      	ldr	r2, [pc, #536]	@ (800c998 <calculateSPLQ31+0x398>)
 800c77e:	183b      	adds	r3, r7, r0
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c786:	183b      	adds	r3, r7, r0
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3301      	adds	r3, #1
 800c78c:	183a      	adds	r2, r7, r0
 800c78e:	6013      	str	r3, [r2, #0]
 800c790:	23ac      	movs	r3, #172	@ 0xac
 800c792:	18fb      	adds	r3, r7, r3
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b7f      	cmp	r3, #127	@ 0x7f
 800c798:	d9e7      	bls.n	800c76a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c79a:	4b7d      	ldr	r3, [pc, #500]	@ (800c990 <calculateSPLQ31+0x390>)
 800c79c:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c79e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c7a0:	4b7d      	ldr	r3, [pc, #500]	@ (800c998 <calculateSPLQ31+0x398>)
 800c7a2:	2240      	movs	r2, #64	@ 0x40
 800c7a4:	0018      	movs	r0, r3
 800c7a6:	f011 fe4f 	bl	801e448 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c7aa:	2330      	movs	r3, #48	@ 0x30
 800c7ac:	18fb      	adds	r3, r7, r3
 800c7ae:	0018      	movs	r0, r3
 800c7b0:	2330      	movs	r3, #48	@ 0x30
 800c7b2:	001a      	movs	r2, r3
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	f013 fc6b 	bl	8020090 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	2300      	movs	r3, #0
 800c7be:	21a0      	movs	r1, #160	@ 0xa0
 800c7c0:	1879      	adds	r1, r7, r1
 800c7c2:	600a      	str	r2, [r1, #0]
 800c7c4:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	229c      	movs	r2, #156	@ 0x9c
 800c7ca:	18ba      	adds	r2, r7, r2
 800c7cc:	6013      	str	r3, [r2, #0]
 800c7ce:	e05b      	b.n	800c888 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c7d0:	269c      	movs	r6, #156	@ 0x9c
 800c7d2:	19bb      	adds	r3, r7, r6
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	009a      	lsls	r2, r3, #2
 800c7d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7da:	189b      	adds	r3, r3, r2
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	613b      	str	r3, [r7, #16]
 800c7e0:	17db      	asrs	r3, r3, #31
 800c7e2:	617b      	str	r3, [r7, #20]
 800c7e4:	4b6f      	ldr	r3, [pc, #444]	@ (800c9a4 <calculateSPLQ31+0x3a4>)
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	19bb      	adds	r3, r7, r6
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	18d3      	adds	r3, r2, r3
 800c7f0:	881b      	ldrh	r3, [r3, #0]
 800c7f2:	60bb      	str	r3, [r7, #8]
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60fb      	str	r3, [r7, #12]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	6938      	ldr	r0, [r7, #16]
 800c7fe:	6979      	ldr	r1, [r7, #20]
 800c800:	f7f3 fede 	bl	80005c0 <__aeabi_lmul>
 800c804:	0002      	movs	r2, r0
 800c806:	000b      	movs	r3, r1
 800c808:	0010      	movs	r0, r2
 800c80a:	0019      	movs	r1, r3
 800c80c:	23a0      	movs	r3, #160	@ 0xa0
 800c80e:	18fa      	adds	r2, r7, r3
 800c810:	6853      	ldr	r3, [r2, #4]
 800c812:	6812      	ldr	r2, [r2, #0]
 800c814:	1812      	adds	r2, r2, r0
 800c816:	414b      	adcs	r3, r1
 800c818:	21a0      	movs	r1, #160	@ 0xa0
 800c81a:	1879      	adds	r1, r7, r1
 800c81c:	600a      	str	r2, [r1, #0]
 800c81e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c820:	4b61      	ldr	r3, [pc, #388]	@ (800c9a8 <calculateSPLQ31+0x3a8>)
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	19bb      	adds	r3, r7, r6
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	18d3      	adds	r3, r2, r3
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2b06      	cmp	r3, #6
 800c82e:	d025      	beq.n	800c87c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c830:	4b5d      	ldr	r3, [pc, #372]	@ (800c9a8 <calculateSPLQ31+0x3a8>)
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	19bb      	adds	r3, r7, r6
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	18d3      	adds	r3, r2, r3
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	2230      	movs	r2, #48	@ 0x30
 800c83e:	18ba      	adds	r2, r7, r2
 800c840:	00db      	lsls	r3, r3, #3
 800c842:	18d3      	adds	r3, r2, r3
 800c844:	6818      	ldr	r0, [r3, #0]
 800c846:	6859      	ldr	r1, [r3, #4]
 800c848:	19bb      	adds	r3, r7, r6
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	009a      	lsls	r2, r3, #2
 800c84e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c850:	189b      	adds	r3, r3, r2
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	603b      	str	r3, [r7, #0]
 800c856:	17db      	asrs	r3, r3, #31
 800c858:	607b      	str	r3, [r7, #4]
 800c85a:	4b53      	ldr	r3, [pc, #332]	@ (800c9a8 <calculateSPLQ31+0x3a8>)
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	19be      	adds	r6, r7, r6
 800c860:	6833      	ldr	r3, [r6, #0]
 800c862:	18d3      	adds	r3, r2, r3
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	001e      	movs	r6, r3
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	1880      	adds	r0, r0, r2
 800c86e:	4159      	adcs	r1, r3
 800c870:	2330      	movs	r3, #48	@ 0x30
 800c872:	18fa      	adds	r2, r7, r3
 800c874:	00f3      	lsls	r3, r6, #3
 800c876:	18d3      	adds	r3, r2, r3
 800c878:	6018      	str	r0, [r3, #0]
 800c87a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c87c:	229c      	movs	r2, #156	@ 0x9c
 800c87e:	18bb      	adds	r3, r7, r2
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	3301      	adds	r3, #1
 800c884:	18ba      	adds	r2, r7, r2
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	239c      	movs	r3, #156	@ 0x9c
 800c88a:	18fb      	adds	r3, r7, r3
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c890:	d99e      	bls.n	800c7d0 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c892:	2380      	movs	r3, #128	@ 0x80
 800c894:	18fb      	adds	r3, r7, r3
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	001a      	movs	r2, r3
 800c89c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c89e:	005b      	lsls	r3, r3, #1
 800c8a0:	18d3      	adds	r3, r2, r3
 800c8a2:	3b22      	subs	r3, #34	@ 0x22
 800c8a4:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c8a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8a8:	17da      	asrs	r2, r3, #31
 800c8aa:	189b      	adds	r3, r3, r2
 800c8ac:	4053      	eors	r3, r2
 800c8ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c8b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	da62      	bge.n	800c97c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c8b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8b8:	3b20      	subs	r3, #32
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	db05      	blt.n	800c8ca <calculateSPLQ31+0x2ca>
 800c8be:	22a0      	movs	r2, #160	@ 0xa0
 800c8c0:	18ba      	adds	r2, r7, r2
 800c8c2:	6812      	ldr	r2, [r2, #0]
 800c8c4:	409a      	lsls	r2, r3
 800c8c6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8c8:	e010      	b.n	800c8ec <calculateSPLQ31+0x2ec>
 800c8ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8cc:	2220      	movs	r2, #32
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	22a0      	movs	r2, #160	@ 0xa0
 800c8d2:	18ba      	adds	r2, r7, r2
 800c8d4:	6812      	ldr	r2, [r2, #0]
 800c8d6:	40da      	lsrs	r2, r3
 800c8d8:	0013      	movs	r3, r2
 800c8da:	22a4      	movs	r2, #164	@ 0xa4
 800c8dc:	18ba      	adds	r2, r7, r2
 800c8de:	6811      	ldr	r1, [r2, #0]
 800c8e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8e2:	4091      	lsls	r1, r2
 800c8e4:	6279      	str	r1, [r7, #36]	@ 0x24
 800c8e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8e8:	431a      	orrs	r2, r3
 800c8ea:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8ec:	21a0      	movs	r1, #160	@ 0xa0
 800c8ee:	187b      	adds	r3, r7, r1
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8f4:	409a      	lsls	r2, r3
 800c8f6:	623a      	str	r2, [r7, #32]
 800c8f8:	6a3b      	ldr	r3, [r7, #32]
 800c8fa:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c8fc:	187a      	adds	r2, r7, r1
 800c8fe:	6013      	str	r3, [r2, #0]
 800c900:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c902:	2300      	movs	r3, #0
 800c904:	2298      	movs	r2, #152	@ 0x98
 800c906:	18ba      	adds	r2, r7, r2
 800c908:	6013      	str	r3, [r2, #0]
 800c90a:	e031      	b.n	800c970 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c90c:	2330      	movs	r3, #48	@ 0x30
 800c90e:	18fa      	adds	r2, r7, r3
 800c910:	2398      	movs	r3, #152	@ 0x98
 800c912:	18fb      	adds	r3, r7, r3
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	00db      	lsls	r3, r3, #3
 800c918:	18d3      	adds	r3, r2, r3
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c920:	3920      	subs	r1, #32
 800c922:	2900      	cmp	r1, #0
 800c924:	db03      	blt.n	800c92e <calculateSPLQ31+0x32e>
 800c926:	0010      	movs	r0, r2
 800c928:	4088      	lsls	r0, r1
 800c92a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c92c:	e00c      	b.n	800c948 <calculateSPLQ31+0x348>
 800c92e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c930:	2020      	movs	r0, #32
 800c932:	1a41      	subs	r1, r0, r1
 800c934:	0010      	movs	r0, r2
 800c936:	40c8      	lsrs	r0, r1
 800c938:	0001      	movs	r1, r0
 800c93a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c93c:	001c      	movs	r4, r3
 800c93e:	4084      	lsls	r4, r0
 800c940:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c942:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c944:	4308      	orrs	r0, r1
 800c946:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c948:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c94a:	0013      	movs	r3, r2
 800c94c:	408b      	lsls	r3, r1
 800c94e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c950:	2330      	movs	r3, #48	@ 0x30
 800c952:	18fa      	adds	r2, r7, r3
 800c954:	2098      	movs	r0, #152	@ 0x98
 800c956:	183b      	adds	r3, r7, r0
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	18d3      	adds	r3, r2, r3
 800c95e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c962:	6019      	str	r1, [r3, #0]
 800c964:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c966:	183b      	adds	r3, r7, r0
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	3301      	adds	r3, #1
 800c96c:	183a      	adds	r2, r7, r0
 800c96e:	6013      	str	r3, [r2, #0]
 800c970:	2398      	movs	r3, #152	@ 0x98
 800c972:	18fb      	adds	r3, r7, r3
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b05      	cmp	r3, #5
 800c978:	d9c8      	bls.n	800c90c <calculateSPLQ31+0x30c>
 800c97a:	e06b      	b.n	800ca54 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c97c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c97e:	3b20      	subs	r3, #32
 800c980:	2b00      	cmp	r3, #0
 800c982:	db13      	blt.n	800c9ac <calculateSPLQ31+0x3ac>
 800c984:	22a4      	movs	r2, #164	@ 0xa4
 800c986:	18ba      	adds	r2, r7, r2
 800c988:	6812      	ldr	r2, [r2, #0]
 800c98a:	40da      	lsrs	r2, r3
 800c98c:	61ba      	str	r2, [r7, #24]
 800c98e:	e01e      	b.n	800c9ce <calculateSPLQ31+0x3ce>
 800c990:	20001ba0 	.word	0x20001ba0
 800c994:	7fffffff 	.word	0x7fffffff
 800c998:	20001dec 	.word	0x20001dec
 800c99c:	200000b4 	.word	0x200000b4
 800c9a0:	20001df4 	.word	0x20001df4
 800c9a4:	200000b8 	.word	0x200000b8
 800c9a8:	200000c4 	.word	0x200000c4
 800c9ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9ae:	2220      	movs	r2, #32
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	22a4      	movs	r2, #164	@ 0xa4
 800c9b4:	18ba      	adds	r2, r7, r2
 800c9b6:	6812      	ldr	r2, [r2, #0]
 800c9b8:	409a      	lsls	r2, r3
 800c9ba:	0013      	movs	r3, r2
 800c9bc:	22a0      	movs	r2, #160	@ 0xa0
 800c9be:	18ba      	adds	r2, r7, r2
 800c9c0:	6811      	ldr	r1, [r2, #0]
 800c9c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c9c4:	40d1      	lsrs	r1, r2
 800c9c6:	61b9      	str	r1, [r7, #24]
 800c9c8:	69ba      	ldr	r2, [r7, #24]
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	61ba      	str	r2, [r7, #24]
 800c9ce:	23a4      	movs	r3, #164	@ 0xa4
 800c9d0:	18fb      	adds	r3, r7, r3
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9d6:	40da      	lsrs	r2, r3
 800c9d8:	61fa      	str	r2, [r7, #28]
 800c9da:	69ba      	ldr	r2, [r7, #24]
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	21a0      	movs	r1, #160	@ 0xa0
 800c9e0:	1879      	adds	r1, r7, r1
 800c9e2:	600a      	str	r2, [r1, #0]
 800c9e4:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	2294      	movs	r2, #148	@ 0x94
 800c9ea:	18ba      	adds	r2, r7, r2
 800c9ec:	6013      	str	r3, [r2, #0]
 800c9ee:	e02c      	b.n	800ca4a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800c9f0:	2330      	movs	r3, #48	@ 0x30
 800c9f2:	18fa      	adds	r2, r7, r3
 800c9f4:	2394      	movs	r3, #148	@ 0x94
 800c9f6:	18fb      	adds	r3, r7, r3
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	00db      	lsls	r3, r3, #3
 800c9fc:	18d3      	adds	r3, r2, r3
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca04:	3920      	subs	r1, #32
 800ca06:	2900      	cmp	r1, #0
 800ca08:	db03      	blt.n	800ca12 <calculateSPLQ31+0x412>
 800ca0a:	0018      	movs	r0, r3
 800ca0c:	40c8      	lsrs	r0, r1
 800ca0e:	0004      	movs	r4, r0
 800ca10:	e00a      	b.n	800ca28 <calculateSPLQ31+0x428>
 800ca12:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca14:	2020      	movs	r0, #32
 800ca16:	1a41      	subs	r1, r0, r1
 800ca18:	0018      	movs	r0, r3
 800ca1a:	4088      	lsls	r0, r1
 800ca1c:	0001      	movs	r1, r0
 800ca1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca20:	0016      	movs	r6, r2
 800ca22:	40c6      	lsrs	r6, r0
 800ca24:	0034      	movs	r4, r6
 800ca26:	430c      	orrs	r4, r1
 800ca28:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca2a:	40cb      	lsrs	r3, r1
 800ca2c:	001d      	movs	r5, r3
 800ca2e:	2330      	movs	r3, #48	@ 0x30
 800ca30:	18fa      	adds	r2, r7, r3
 800ca32:	2194      	movs	r1, #148	@ 0x94
 800ca34:	187b      	adds	r3, r7, r1
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	00db      	lsls	r3, r3, #3
 800ca3a:	18d3      	adds	r3, r2, r3
 800ca3c:	601c      	str	r4, [r3, #0]
 800ca3e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca40:	187b      	adds	r3, r7, r1
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3301      	adds	r3, #1
 800ca46:	187a      	adds	r2, r7, r1
 800ca48:	6013      	str	r3, [r2, #0]
 800ca4a:	2394      	movs	r3, #148	@ 0x94
 800ca4c:	18fb      	adds	r3, r7, r3
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b05      	cmp	r3, #5
 800ca52:	d9cd      	bls.n	800c9f0 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800ca54:	230f      	movs	r3, #15
 800ca56:	425d      	negs	r5, r3
 800ca58:	2305      	movs	r3, #5
 800ca5a:	425e      	negs	r6, r3
 800ca5c:	4b4a      	ldr	r3, [pc, #296]	@ (800cb88 <calculateSPLQ31+0x588>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	4b4a      	ldr	r3, [pc, #296]	@ (800cb8c <calculateSPLQ31+0x58c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	21a0      	movs	r1, #160	@ 0xa0
 800ca6a:	1879      	adds	r1, r7, r1
 800ca6c:	6808      	ldr	r0, [r1, #0]
 800ca6e:	6849      	ldr	r1, [r1, #4]
 800ca70:	4c47      	ldr	r4, [pc, #284]	@ (800cb90 <calculateSPLQ31+0x590>)
 800ca72:	9403      	str	r4, [sp, #12]
 800ca74:	4c47      	ldr	r4, [pc, #284]	@ (800cb94 <calculateSPLQ31+0x594>)
 800ca76:	9402      	str	r4, [sp, #8]
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	9200      	str	r2, [sp, #0]
 800ca7c:	0033      	movs	r3, r6
 800ca7e:	002a      	movs	r2, r5
 800ca80:	f000 fa86 	bl	800cf90 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ca84:	2300      	movs	r3, #0
 800ca86:	2290      	movs	r2, #144	@ 0x90
 800ca88:	18ba      	adds	r2, r7, r2
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	e026      	b.n	800cadc <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800ca8e:	2330      	movs	r3, #48	@ 0x30
 800ca90:	18fa      	adds	r2, r7, r3
 800ca92:	2490      	movs	r4, #144	@ 0x90
 800ca94:	193b      	adds	r3, r7, r4
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	00db      	lsls	r3, r3, #3
 800ca9a:	18d3      	adds	r3, r2, r3
 800ca9c:	6818      	ldr	r0, [r3, #0]
 800ca9e:	6859      	ldr	r1, [r3, #4]
 800caa0:	230f      	movs	r3, #15
 800caa2:	425d      	negs	r5, r3
 800caa4:	2305      	movs	r3, #5
 800caa6:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800caa8:	193b      	adds	r3, r7, r4
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	009a      	lsls	r2, r3, #2
 800caae:	4b3a      	ldr	r3, [pc, #232]	@ (800cb98 <calculateSPLQ31+0x598>)
 800cab0:	18d3      	adds	r3, r2, r3
 800cab2:	193a      	adds	r2, r7, r4
 800cab4:	6812      	ldr	r2, [r2, #0]
 800cab6:	0094      	lsls	r4, r2, #2
 800cab8:	4a38      	ldr	r2, [pc, #224]	@ (800cb9c <calculateSPLQ31+0x59c>)
 800caba:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cabc:	9203      	str	r2, [sp, #12]
 800cabe:	9302      	str	r3, [sp, #8]
 800cac0:	2300      	movs	r3, #0
 800cac2:	9301      	str	r3, [sp, #4]
 800cac4:	2300      	movs	r3, #0
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	0033      	movs	r3, r6
 800caca:	002a      	movs	r2, r5
 800cacc:	f000 fa60 	bl	800cf90 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cad0:	2490      	movs	r4, #144	@ 0x90
 800cad2:	193b      	adds	r3, r7, r4
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	3301      	adds	r3, #1
 800cad8:	193a      	adds	r2, r7, r4
 800cada:	6013      	str	r3, [r2, #0]
 800cadc:	2390      	movs	r3, #144	@ 0x90
 800cade:	18fb      	adds	r3, r7, r3
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b05      	cmp	r3, #5
 800cae4:	d9d3      	bls.n	800ca8e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800cae6:	4b2b      	ldr	r3, [pc, #172]	@ (800cb94 <calculateSPLQ31+0x594>)
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	4b2d      	ldr	r3, [pc, #180]	@ (800cba0 <calculateSPLQ31+0x5a0>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	18d2      	adds	r2, r2, r3
 800caf0:	4b2b      	ldr	r3, [pc, #172]	@ (800cba0 <calculateSPLQ31+0x5a0>)
 800caf2:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800caf4:	4b26      	ldr	r3, [pc, #152]	@ (800cb90 <calculateSPLQ31+0x590>)
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	4b2a      	ldr	r3, [pc, #168]	@ (800cba4 <calculateSPLQ31+0x5a4>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	18d2      	adds	r2, r2, r3
 800cafe:	4b29      	ldr	r3, [pc, #164]	@ (800cba4 <calculateSPLQ31+0x5a4>)
 800cb00:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb02:	2300      	movs	r3, #0
 800cb04:	228c      	movs	r2, #140	@ 0x8c
 800cb06:	18ba      	adds	r2, r7, r2
 800cb08:	6013      	str	r3, [r2, #0]
 800cb0a:	e025      	b.n	800cb58 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800cb0c:	4b22      	ldr	r3, [pc, #136]	@ (800cb98 <calculateSPLQ31+0x598>)
 800cb0e:	208c      	movs	r0, #140	@ 0x8c
 800cb10:	183a      	adds	r2, r7, r0
 800cb12:	6812      	ldr	r2, [r2, #0]
 800cb14:	0092      	lsls	r2, r2, #2
 800cb16:	58d2      	ldr	r2, [r2, r3]
 800cb18:	4b23      	ldr	r3, [pc, #140]	@ (800cba8 <calculateSPLQ31+0x5a8>)
 800cb1a:	1839      	adds	r1, r7, r0
 800cb1c:	6809      	ldr	r1, [r1, #0]
 800cb1e:	0089      	lsls	r1, r1, #2
 800cb20:	58cb      	ldr	r3, [r1, r3]
 800cb22:	18d1      	adds	r1, r2, r3
 800cb24:	4b20      	ldr	r3, [pc, #128]	@ (800cba8 <calculateSPLQ31+0x5a8>)
 800cb26:	183a      	adds	r2, r7, r0
 800cb28:	6812      	ldr	r2, [r2, #0]
 800cb2a:	0092      	lsls	r2, r2, #2
 800cb2c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cb2e:	4b1b      	ldr	r3, [pc, #108]	@ (800cb9c <calculateSPLQ31+0x59c>)
 800cb30:	183a      	adds	r2, r7, r0
 800cb32:	6812      	ldr	r2, [r2, #0]
 800cb34:	0092      	lsls	r2, r2, #2
 800cb36:	58d2      	ldr	r2, [r2, r3]
 800cb38:	4b1c      	ldr	r3, [pc, #112]	@ (800cbac <calculateSPLQ31+0x5ac>)
 800cb3a:	1839      	adds	r1, r7, r0
 800cb3c:	6809      	ldr	r1, [r1, #0]
 800cb3e:	0089      	lsls	r1, r1, #2
 800cb40:	58cb      	ldr	r3, [r1, r3]
 800cb42:	18d1      	adds	r1, r2, r3
 800cb44:	4b19      	ldr	r3, [pc, #100]	@ (800cbac <calculateSPLQ31+0x5ac>)
 800cb46:	183a      	adds	r2, r7, r0
 800cb48:	6812      	ldr	r2, [r2, #0]
 800cb4a:	0092      	lsls	r2, r2, #2
 800cb4c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb4e:	183b      	adds	r3, r7, r0
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	3301      	adds	r3, #1
 800cb54:	183a      	adds	r2, r7, r0
 800cb56:	6013      	str	r3, [r2, #0]
 800cb58:	238c      	movs	r3, #140	@ 0x8c
 800cb5a:	18fb      	adds	r3, r7, r3
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b05      	cmp	r3, #5
 800cb60:	d9d4      	bls.n	800cb0c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800cb62:	4b13      	ldr	r3, [pc, #76]	@ (800cbb0 <calculateSPLQ31+0x5b0>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	1c5a      	adds	r2, r3, #1
 800cb68:	4b11      	ldr	r3, [pc, #68]	@ (800cbb0 <calculateSPLQ31+0x5b0>)
 800cb6a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800cb6c:	4b10      	ldr	r3, [pc, #64]	@ (800cbb0 <calculateSPLQ31+0x5b0>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2b0f      	cmp	r3, #15
 800cb72:	d905      	bls.n	800cb80 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800cb74:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb4 <calculateSPLQ31+0x5b4>)
 800cb76:	2201      	movs	r2, #1
 800cb78:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800cb7a:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb8 <calculateSPLQ31+0x5b8>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	701a      	strb	r2, [r3, #0]
    }
}
 800cb80:	46c0      	nop			@ (mov r8, r8)
 800cb82:	46bd      	mov	sp, r7
 800cb84:	b02f      	add	sp, #188	@ 0xbc
 800cb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb88:	200000bc 	.word	0x200000bc
 800cb8c:	200000c0 	.word	0x200000c0
 800cb90:	2000136c 	.word	0x2000136c
 800cb94:	20001368 	.word	0x20001368
 800cb98:	20001370 	.word	0x20001370
 800cb9c:	20001388 	.word	0x20001388
 800cba0:	20001db0 	.word	0x20001db0
 800cba4:	20001db4 	.word	0x20001db4
 800cba8:	20001db8 	.word	0x20001db8
 800cbac:	20001dd0 	.word	0x20001dd0
 800cbb0:	20001de8 	.word	0x20001de8
 800cbb4:	2000135f 	.word	0x2000135f
 800cbb8:	2000135d 	.word	0x2000135d

0800cbbc <resetSPLstate>:

static void resetSPLstate(void)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800cbc2:	4b11      	ldr	r3, [pc, #68]	@ (800cc08 <resetSPLstate+0x4c>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800cbc8:	4b10      	ldr	r3, [pc, #64]	@ (800cc0c <resetSPLstate+0x50>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800cbce:	4b10      	ldr	r3, [pc, #64]	@ (800cc10 <resetSPLstate+0x54>)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	607b      	str	r3, [r7, #4]
 800cbd8:	e00c      	b.n	800cbf4 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800cbda:	4b0e      	ldr	r3, [pc, #56]	@ (800cc14 <resetSPLstate+0x58>)
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	0092      	lsls	r2, r2, #2
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800cbe4:	4b0c      	ldr	r3, [pc, #48]	@ (800cc18 <resetSPLstate+0x5c>)
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	0092      	lsls	r2, r2, #2
 800cbea:	2100      	movs	r1, #0
 800cbec:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	607b      	str	r3, [r7, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2b05      	cmp	r3, #5
 800cbf8:	d9ef      	bls.n	800cbda <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800cbfa:	4b08      	ldr	r3, [pc, #32]	@ (800cc1c <resetSPLstate+0x60>)
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	701a      	strb	r2, [r3, #0]
}
 800cc00:	46c0      	nop			@ (mov r8, r8)
 800cc02:	46bd      	mov	sp, r7
 800cc04:	b002      	add	sp, #8
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	20001db0 	.word	0x20001db0
 800cc0c:	20001db4 	.word	0x20001db4
 800cc10:	20001de8 	.word	0x20001de8
 800cc14:	20001db8 	.word	0x20001db8
 800cc18:	20001dd0 	.word	0x20001dd0
 800cc1c:	2000135f 	.word	0x2000135f

0800cc20 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800cc20:	b5b0      	push	{r4, r5, r7, lr}
 800cc22:	b090      	sub	sp, #64	@ 0x40
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	0019      	movs	r1, r3
 800cc2c:	1dfb      	adds	r3, r7, #7
 800cc2e:	701a      	strb	r2, [r3, #0]
 800cc30:	1dbb      	adds	r3, r7, #6
 800cc32:	1c0a      	adds	r2, r1, #0
 800cc34:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800cc36:	1dfb      	adds	r3, r7, #7
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d005      	beq.n	800cc4a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800cc3e:	4b3b      	ldr	r3, [pc, #236]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800cc44:	4b3a      	ldr	r3, [pc, #232]	@ (800cd30 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc46:	2200      	movs	r2, #0
 800cc48:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800cc52:	2305      	movs	r3, #5
 800cc54:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800cc56:	2300      	movs	r3, #0
 800cc58:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc5a:	e040      	b.n	800ccde <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800cc5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	18d3      	adds	r3, r2, r3
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc68:	409a      	lsls	r2, r3
 800cc6a:	0013      	movs	r3, r2
 800cc6c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800cc6e:	4b30      	ldr	r3, [pc, #192]	@ (800cd30 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	425a      	negs	r2, r3
 800cc74:	4b2e      	ldr	r3, [pc, #184]	@ (800cd30 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc76:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800cc78:	2418      	movs	r4, #24
 800cc7a:	193a      	adds	r2, r7, r4
 800cc7c:	492c      	ldr	r1, [pc, #176]	@ (800cd30 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc7e:	231c      	movs	r3, #28
 800cc80:	18f8      	adds	r0, r7, r3
 800cc82:	2301      	movs	r3, #1
 800cc84:	f011 fc38 	bl	801e4f8 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cc88:	2514      	movs	r5, #20
 800cc8a:	197a      	adds	r2, r7, r5
 800cc8c:	1939      	adds	r1, r7, r4
 800cc8e:	4829      	ldr	r0, [pc, #164]	@ (800cd34 <getFilteredMaxAmplitudeQ31+0x114>)
 800cc90:	2301      	movs	r3, #1
 800cc92:	f011 fbff 	bl	801e494 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800cc96:	2410      	movs	r4, #16
 800cc98:	193a      	adds	r2, r7, r4
 800cc9a:	4924      	ldr	r1, [pc, #144]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cc9c:	4826      	ldr	r0, [pc, #152]	@ (800cd38 <getFilteredMaxAmplitudeQ31+0x118>)
 800cc9e:	2301      	movs	r3, #1
 800cca0:	f011 fbf8 	bl	801e494 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800cca4:	4a21      	ldr	r2, [pc, #132]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cca6:	1939      	adds	r1, r7, r4
 800cca8:	1978      	adds	r0, r7, r5
 800ccaa:	2301      	movs	r3, #1
 800ccac:	f011 fc24 	bl	801e4f8 <arm_add_q31>

        lastData = fx;
 800ccb0:	69fa      	ldr	r2, [r7, #28]
 800ccb2:	4b1f      	ldr	r3, [pc, #124]	@ (800cd30 <getFilteredMaxAmplitudeQ31+0x110>)
 800ccb4:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800ccb6:	4b1d      	ldr	r3, [pc, #116]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	da03      	bge.n	800ccc8 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800ccc0:	4b1a      	ldr	r3, [pc, #104]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccc6:	e007      	b.n	800ccd8 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800ccc8:	4b18      	ldr	r3, [pc, #96]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	dd02      	ble.n	800ccd8 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800ccd2:	4b16      	ldr	r3, [pc, #88]	@ (800cd2c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800ccd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccda:	3301      	adds	r3, #1
 800ccdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d3ba      	bcc.n	800cc5c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800cce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce8:	17da      	asrs	r2, r3, #31
 800ccea:	189b      	adds	r3, r3, r2
 800ccec:	4053      	eors	r3, r2
 800ccee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800ccf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800ccf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d200      	bcs.n	800ccfe <getFilteredMaxAmplitudeQ31+0xde>
 800ccfc:	0013      	movs	r3, r2
 800ccfe:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800cd00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd04:	40da      	lsrs	r2, r3
 800cd06:	0013      	movs	r3, r2
 800cd08:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800cd0a:	1dbb      	adds	r3, r7, #6
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d007      	beq.n	800cd22 <getFilteredMaxAmplitudeQ31+0x102>
 800cd12:	4b0a      	ldr	r3, [pc, #40]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	6a3a      	ldr	r2, [r7, #32]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d902      	bls.n	800cd22 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800cd1c:	4b07      	ldr	r3, [pc, #28]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd1e:	6a3a      	ldr	r2, [r7, #32]
 800cd20:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800cd22:	6a3b      	ldr	r3, [r7, #32]
}
 800cd24:	0018      	movs	r0, r3
 800cd26:	46bd      	mov	sp, r7
 800cd28:	b010      	add	sp, #64	@ 0x40
 800cd2a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd2c:	200021ec 	.word	0x200021ec
 800cd30:	200021f0 	.word	0x200021f0
 800cd34:	080254b4 	.word	0x080254b4
 800cd38:	080254b8 	.word	0x080254b8
 800cd3c:	20001364 	.word	0x20001364

0800cd40 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800cd4c:	4913      	ldr	r1, [pc, #76]	@ (800cd9c <floatToIntAndFrac2dp+0x5c>)
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f7f4 f926 	bl	8000fa0 <__aeabi_fmul>
 800cd54:	1c03      	adds	r3, r0, #0
 800cd56:	1c18      	adds	r0, r3, #0
 800cd58:	f016 f802 	bl	8022d60 <roundf>
 800cd5c:	1c03      	adds	r3, r0, #0
 800cd5e:	1c18      	adds	r0, r3, #0
 800cd60:	f7f3 fc5c 	bl	800061c <__aeabi_f2uiz>
 800cd64:	0003      	movs	r3, r0
 800cd66:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	2164      	movs	r1, #100	@ 0x64
 800cd6c:	0018      	movs	r0, r3
 800cd6e:	f7f3 fa19 	bl	80001a4 <__udivsi3>
 800cd72:	0003      	movs	r3, r0
 800cd74:	001a      	movs	r2, r3
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	b2da      	uxtb	r2, r3
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	2164      	movs	r1, #100	@ 0x64
 800cd86:	434b      	muls	r3, r1
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	1ad3      	subs	r3, r2, r3
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	701a      	strb	r2, [r3, #0]
}
 800cd92:	46c0      	nop			@ (mov r8, r8)
 800cd94:	46bd      	mov	sp, r7
 800cd96:	b006      	add	sp, #24
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	46c0      	nop			@ (mov r8, r8)
 800cd9c:	42c80000 	.word	0x42c80000

0800cda0 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800cdac:	4914      	ldr	r1, [pc, #80]	@ (800ce00 <floatToIntAndFrac1dp+0x60>)
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f7f4 f8f6 	bl	8000fa0 <__aeabi_fmul>
 800cdb4:	1c03      	adds	r3, r0, #0
 800cdb6:	1c18      	adds	r0, r3, #0
 800cdb8:	f015 ffd2 	bl	8022d60 <roundf>
 800cdbc:	1c03      	adds	r3, r0, #0
 800cdbe:	1c18      	adds	r0, r3, #0
 800cdc0:	f7f3 fc2c 	bl	800061c <__aeabi_f2uiz>
 800cdc4:	0003      	movs	r3, r0
 800cdc6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	210a      	movs	r1, #10
 800cdcc:	0018      	movs	r0, r3
 800cdce:	f7f3 f9e9 	bl	80001a4 <__udivsi3>
 800cdd2:	0003      	movs	r3, r0
 800cdd4:	001a      	movs	r2, r3
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	1c19      	adds	r1, r3, #0
 800cde6:	0089      	lsls	r1, r1, #2
 800cde8:	18cb      	adds	r3, r1, r3
 800cdea:	18db      	adds	r3, r3, r3
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	701a      	strb	r2, [r3, #0]
}
 800cdf6:	46c0      	nop			@ (mov r8, r8)
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	b006      	add	sp, #24
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	46c0      	nop			@ (mov r8, r8)
 800ce00:	41200000 	.word	0x41200000

0800ce04 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800ce04:	b590      	push	{r4, r7, lr}
 800ce06:	b087      	sub	sp, #28
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
 800ce10:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f7f4 fbdc 	bl	80015d0 <__aeabi_i2f>
 800ce18:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce1a:	6838      	ldr	r0, [r7, #0]
 800ce1c:	f7f4 fbd8 	bl	80015d0 <__aeabi_i2f>
 800ce20:	1c03      	adds	r3, r0, #0
 800ce22:	4918      	ldr	r1, [pc, #96]	@ (800ce84 <sumToIntAverage+0x80>)
 800ce24:	1c18      	adds	r0, r3, #0
 800ce26:	f7f3 fed5 	bl	8000bd4 <__aeabi_fdiv>
 800ce2a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce2c:	1c19      	adds	r1, r3, #0
 800ce2e:	1c20      	adds	r0, r4, #0
 800ce30:	f7f3 fd46 	bl	80008c0 <__aeabi_fadd>
 800ce34:	1c03      	adds	r3, r0, #0
 800ce36:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce3a:	f7f4 fc15 	bl	8001668 <__aeabi_ui2f>
 800ce3e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce40:	1c19      	adds	r1, r3, #0
 800ce42:	1c20      	adds	r0, r4, #0
 800ce44:	f7f3 fec6 	bl	8000bd4 <__aeabi_fdiv>
 800ce48:	1c03      	adds	r3, r0, #0
 800ce4a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800ce50:	68ba      	ldr	r2, [r7, #8]
 800ce52:	2310      	movs	r3, #16
 800ce54:	18f9      	adds	r1, r7, r3
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	1c18      	adds	r0, r3, #0
 800ce5a:	f7ff ffa1 	bl	800cda0 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2bff      	cmp	r3, #255	@ 0xff
 800ce62:	d906      	bls.n	800ce72 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	22ff      	movs	r2, #255	@ 0xff
 800ce68:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	2209      	movs	r2, #9
 800ce6e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800ce70:	e003      	b.n	800ce7a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	701a      	strb	r2, [r3, #0]
}
 800ce7a:	46c0      	nop			@ (mov r8, r8)
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	b007      	add	sp, #28
 800ce80:	bd90      	pop	{r4, r7, pc}
 800ce82:	46c0      	nop			@ (mov r8, r8)
 800ce84:	41200000 	.word	0x41200000

0800ce88 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
 800ce94:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	2280      	movs	r2, #128	@ 0x80
 800ce9a:	0612      	lsls	r2, r2, #24
 800ce9c:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	4a18      	ldr	r2, [pc, #96]	@ (800cf04 <findMinMax+0x7c>)
 800cea2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cea4:	2300      	movs	r3, #0
 800cea6:	617b      	str	r3, [r7, #20]
 800cea8:	e022      	b.n	800cef0 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	18d3      	adds	r3, r2, r3
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	da06      	bge.n	800ceca <findMinMax+0x42>
        {
            min[0] = array[i];
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	18d3      	adds	r3, r2, r3
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	18d3      	adds	r3, r2, r3
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	dd06      	ble.n	800ceea <findMinMax+0x62>
        {
            max[0] = array[i];
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	18d3      	adds	r3, r2, r3
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	3301      	adds	r3, #1
 800ceee:	617b      	str	r3, [r7, #20]
 800cef0:	697a      	ldr	r2, [r7, #20]
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d3d8      	bcc.n	800ceaa <findMinMax+0x22>
        }
    }
}
 800cef8:	46c0      	nop			@ (mov r8, r8)
 800cefa:	46c0      	nop			@ (mov r8, r8)
 800cefc:	46bd      	mov	sp, r7
 800cefe:	b006      	add	sp, #24
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	46c0      	nop			@ (mov r8, r8)
 800cf04:	7fffffff 	.word	0x7fffffff

0800cf08 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800cf12:	2300      	movs	r3, #0
 800cf14:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d302      	bcc.n	800cf24 <getPo2factor+0x1c>
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d107      	bne.n	800cf34 <getPo2factor+0x2c>
    {
        return 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	e00d      	b.n	800cf44 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	085b      	lsrs	r3, r3, #1
 800cf2c:	607b      	str	r3, [r7, #4]
        bitShift++;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	3301      	adds	r3, #1
 800cf32:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d2f5      	bcs.n	800cf28 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800cf42:	68fb      	ldr	r3, [r7, #12]
}
 800cf44:	0018      	movs	r0, r3
 800cf46:	46bd      	mov	sp, r7
 800cf48:	b004      	add	sp, #16
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f7f4 fb84 	bl	8001668 <__aeabi_ui2f>
 800cf60:	1c03      	adds	r3, r0, #0
 800cf62:	1c19      	adds	r1, r3, #0
 800cf64:	68b8      	ldr	r0, [r7, #8]
 800cf66:	f7f4 f81b 	bl	8000fa0 <__aeabi_fmul>
 800cf6a:	1c03      	adds	r3, r0, #0
 800cf6c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	2310      	movs	r3, #16
 800cf76:	18f9      	adds	r1, r7, r3
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	1c18      	adds	r0, r3, #0
 800cf7c:	f7ff fee0 	bl	800cd40 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	801a      	strh	r2, [r3, #0]
}
 800cf88:	46c0      	nop			@ (mov r8, r8)
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	b006      	add	sp, #24
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60b8      	str	r0, [r7, #8]
 800cf98:	60f9      	str	r1, [r7, #12]
 800cf9a:	607a      	str	r2, [r7, #4]
 800cf9c:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800cf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa0:	6a3a      	ldr	r2, [r7, #32]
 800cfa2:	68b8      	ldr	r0, [r7, #8]
 800cfa4:	68f9      	ldr	r1, [r7, #12]
 800cfa6:	f7fa f961 	bl	800726c <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800cfaa:	6a3b      	ldr	r3, [r7, #32]
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	18d2      	adds	r2, r2, r3
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	18d2      	adds	r2, r2, r3
 800cfb6:	6a3b      	ldr	r3, [r7, #32]
 800cfb8:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	18d2      	adds	r2, r2, r3
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	18d2      	adds	r2, r2, r3
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc8:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800cfca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfcc:	6a3b      	ldr	r3, [r7, #32]
 800cfce:	0011      	movs	r1, r2
 800cfd0:	0018      	movs	r0, r3
 800cfd2:	f7fa f9db 	bl	800738c <correctIntFracNumber>
}
 800cfd6:	46c0      	nop			@ (mov r8, r8)
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	b004      	add	sp, #16
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b086      	sub	sp, #24
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	60f8      	str	r0, [r7, #12]
 800cfe6:	60b9      	str	r1, [r7, #8]
 800cfe8:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800cfea:	2300      	movs	r3, #0
 800cfec:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800cfee:	2300      	movs	r3, #0
 800cff0:	613b      	str	r3, [r7, #16]
 800cff2:	e019      	b.n	800d028 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	18d3      	adds	r3, r2, r3
 800cffc:	881b      	ldrh	r3, [r3, #0]
 800cffe:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d000:	693a      	ldr	r2, [r7, #16]
 800d002:	3201      	adds	r2, #1
 800d004:	0052      	lsls	r2, r2, #1
 800d006:	68f9      	ldr	r1, [r7, #12]
 800d008:	188a      	adds	r2, r1, r2
 800d00a:	8812      	ldrh	r2, [r2, #0]
 800d00c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d00e:	0019      	movs	r1, r3
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d018:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d01a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	3301      	adds	r3, #1
 800d020:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	3304      	adds	r3, #4
 800d026:	613b      	str	r3, [r7, #16]
 800d028:	693a      	ldr	r2, [r7, #16]
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d3e1      	bcc.n	800cff4 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d030:	46c0      	nop			@ (mov r8, r8)
 800d032:	46c0      	nop			@ (mov r8, r8)
 800d034:	46bd      	mov	sp, r7
 800d036:	b006      	add	sp, #24
 800d038:	bd80      	pop	{r7, pc}
	...

0800d03c <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d03c:	b580      	push	{r7, lr}
 800d03e:	af00      	add	r7, sp, #0
  init = false;
 800d040:	4b02      	ldr	r3, [pc, #8]	@ (800d04c <InitDone+0x10>)
 800d042:	2200      	movs	r2, #0
 800d044:	701a      	strb	r2, [r3, #0]
}
 800d046:	46c0      	nop			@ (mov r8, r8)
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	200000c8 	.word	0x200000c8

0800d050 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d056:	f7f9 f923 	bl	80062a0 <ReadBatteryVoltage>
 800d05a:	1c02      	adds	r2, r0, #0
 800d05c:	4b25      	ldr	r3, [pc, #148]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d05e:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.5){
 800d060:	4b24      	ldr	r3, [pc, #144]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4924      	ldr	r1, [pc, #144]	@ (800d0f8 <batteryChargeCheck+0xa8>)
 800d066:	1c18      	adds	r0, r3, #0
 800d068:	f7f3 fa62 	bl	8000530 <__aeabi_fcmplt>
 800d06c:	1e03      	subs	r3, r0, #0
 800d06e:	d002      	beq.n	800d076 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d070:	1dfb      	adds	r3, r7, #7
 800d072:	2200      	movs	r2, #0
 800d074:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800d076:	4b1f      	ldr	r3, [pc, #124]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	1c18      	adds	r0, r3, #0
 800d07c:	f7f6 f9f2 	bl	8003464 <__aeabi_f2d>
 800d080:	4a1e      	ldr	r2, [pc, #120]	@ (800d0fc <batteryChargeCheck+0xac>)
 800d082:	4b1f      	ldr	r3, [pc, #124]	@ (800d100 <batteryChargeCheck+0xb0>)
 800d084:	f7f3 fa1a 	bl	80004bc <__aeabi_dcmplt>
 800d088:	1e03      	subs	r3, r0, #0
 800d08a:	d00a      	beq.n	800d0a2 <batteryChargeCheck+0x52>
 800d08c:	4b19      	ldr	r3, [pc, #100]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4919      	ldr	r1, [pc, #100]	@ (800d0f8 <batteryChargeCheck+0xa8>)
 800d092:	1c18      	adds	r0, r3, #0
 800d094:	f7f3 fa6a 	bl	800056c <__aeabi_fcmpge>
 800d098:	1e03      	subs	r3, r0, #0
 800d09a:	d002      	beq.n	800d0a2 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d09c:	1dfb      	adds	r3, r7, #7
 800d09e:	2201      	movs	r2, #1
 800d0a0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800d0a2:	4b14      	ldr	r3, [pc, #80]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2181      	movs	r1, #129	@ 0x81
 800d0a8:	05c9      	lsls	r1, r1, #23
 800d0aa:	1c18      	adds	r0, r3, #0
 800d0ac:	f7f3 fa40 	bl	8000530 <__aeabi_fcmplt>
 800d0b0:	1e03      	subs	r3, r0, #0
 800d0b2:	d00d      	beq.n	800d0d0 <batteryChargeCheck+0x80>
 800d0b4:	4b0f      	ldr	r3, [pc, #60]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	1c18      	adds	r0, r3, #0
 800d0ba:	f7f6 f9d3 	bl	8003464 <__aeabi_f2d>
 800d0be:	4a0f      	ldr	r2, [pc, #60]	@ (800d0fc <batteryChargeCheck+0xac>)
 800d0c0:	4b0f      	ldr	r3, [pc, #60]	@ (800d100 <batteryChargeCheck+0xb0>)
 800d0c2:	f7f3 fa19 	bl	80004f8 <__aeabi_dcmpge>
 800d0c6:	1e03      	subs	r3, r0, #0
 800d0c8:	d002      	beq.n	800d0d0 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d0ca:	1dfb      	adds	r3, r7, #7
 800d0cc:	2202      	movs	r2, #2
 800d0ce:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800d0d0:	4b08      	ldr	r3, [pc, #32]	@ (800d0f4 <batteryChargeCheck+0xa4>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2181      	movs	r1, #129	@ 0x81
 800d0d6:	05c9      	lsls	r1, r1, #23
 800d0d8:	1c18      	adds	r0, r3, #0
 800d0da:	f7f3 fa47 	bl	800056c <__aeabi_fcmpge>
 800d0de:	1e03      	subs	r3, r0, #0
 800d0e0:	d002      	beq.n	800d0e8 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d0e2:	1dfb      	adds	r3, r7, #7
 800d0e4:	2203      	movs	r2, #3
 800d0e6:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d0e8:	1dfb      	adds	r3, r7, #7
 800d0ea:	781b      	ldrb	r3, [r3, #0]
}
 800d0ec:	0018      	movs	r0, r3
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	b002      	add	sp, #8
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	20002200 	.word	0x20002200
 800d0f8:	40600000 	.word	0x40600000
 800d0fc:	9999999a 	.word	0x9999999a
 800d100:	400d9999 	.word	0x400d9999

0800d104 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d104:	b590      	push	{r4, r7, lr}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	0004      	movs	r4, r0
 800d10c:	0008      	movs	r0, r1
 800d10e:	0011      	movs	r1, r2
 800d110:	1dbb      	adds	r3, r7, #6
 800d112:	1c22      	adds	r2, r4, #0
 800d114:	801a      	strh	r2, [r3, #0]
 800d116:	1d3b      	adds	r3, r7, #4
 800d118:	1c02      	adds	r2, r0, #0
 800d11a:	801a      	strh	r2, [r3, #0]
 800d11c:	1cbb      	adds	r3, r7, #2
 800d11e:	1c0a      	adds	r2, r1, #0
 800d120:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d122:	4b0f      	ldr	r3, [pc, #60]	@ (800d160 <SetStatusLED+0x5c>)
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d107      	bne.n	800d13a <SetStatusLED+0x36>
 800d12a:	4b0e      	ldr	r3, [pc, #56]	@ (800d164 <SetStatusLED+0x60>)
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d103      	bne.n	800d13a <SetStatusLED+0x36>
 800d132:	4b0d      	ldr	r3, [pc, #52]	@ (800d168 <SetStatusLED+0x64>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00e      	beq.n	800d158 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d13a:	2380      	movs	r3, #128	@ 0x80
 800d13c:	05db      	lsls	r3, r3, #23
 800d13e:	1dba      	adds	r2, r7, #6
 800d140:	8812      	ldrh	r2, [r2, #0]
 800d142:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d144:	2380      	movs	r3, #128	@ 0x80
 800d146:	05db      	lsls	r3, r3, #23
 800d148:	1d3a      	adds	r2, r7, #4
 800d14a:	8812      	ldrh	r2, [r2, #0]
 800d14c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d14e:	2380      	movs	r3, #128	@ 0x80
 800d150:	05db      	lsls	r3, r3, #23
 800d152:	1cba      	adds	r2, r7, #2
 800d154:	8812      	ldrh	r2, [r2, #0]
 800d156:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d158:	46c0      	nop			@ (mov r8, r8)
 800d15a:	46bd      	mov	sp, r7
 800d15c:	b003      	add	sp, #12
 800d15e:	bd90      	pop	{r4, r7, pc}
 800d160:	200021f5 	.word	0x200021f5
 800d164:	200000c8 	.word	0x200000c8
 800d168:	200021f6 	.word	0x200021f6

0800d16c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d16c:	b590      	push	{r4, r7, lr}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	0004      	movs	r4, r0
 800d174:	0008      	movs	r0, r1
 800d176:	0011      	movs	r1, r2
 800d178:	1dfb      	adds	r3, r7, #7
 800d17a:	1c22      	adds	r2, r4, #0
 800d17c:	701a      	strb	r2, [r3, #0]
 800d17e:	1dbb      	adds	r3, r7, #6
 800d180:	1c02      	adds	r2, r0, #0
 800d182:	701a      	strb	r2, [r3, #0]
 800d184:	1d7b      	adds	r3, r7, #5
 800d186:	1c0a      	adds	r2, r1, #0
 800d188:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d18a:	4b19      	ldr	r3, [pc, #100]	@ (800d1f0 <SetDBLED+0x84>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d107      	bne.n	800d1a2 <SetDBLED+0x36>
 800d192:	4b18      	ldr	r3, [pc, #96]	@ (800d1f4 <SetDBLED+0x88>)
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d103      	bne.n	800d1a2 <SetDBLED+0x36>
 800d19a:	4b17      	ldr	r3, [pc, #92]	@ (800d1f8 <SetDBLED+0x8c>)
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d022      	beq.n	800d1e8 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d1a2:	1dfb      	adds	r3, r7, #7
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	4053      	eors	r3, r2
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	001a      	movs	r2, r3
 800d1ae:	4b13      	ldr	r3, [pc, #76]	@ (800d1fc <SetDBLED+0x90>)
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	0018      	movs	r0, r3
 800d1b4:	f002 ffa5 	bl	8010102 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d1b8:	1dbb      	adds	r3, r7, #6
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	4053      	eors	r3, r2
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	001a      	movs	r2, r3
 800d1c4:	2380      	movs	r3, #128	@ 0x80
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	480c      	ldr	r0, [pc, #48]	@ (800d1fc <SetDBLED+0x90>)
 800d1ca:	0019      	movs	r1, r3
 800d1cc:	f002 ff99 	bl	8010102 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d1d0:	1d7b      	adds	r3, r7, #5
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	4053      	eors	r3, r2
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	001a      	movs	r2, r3
 800d1dc:	2380      	movs	r3, #128	@ 0x80
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4806      	ldr	r0, [pc, #24]	@ (800d1fc <SetDBLED+0x90>)
 800d1e2:	0019      	movs	r1, r3
 800d1e4:	f002 ff8d 	bl	8010102 <HAL_GPIO_WritePin>
  }
}
 800d1e8:	46c0      	nop			@ (mov r8, r8)
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	b003      	add	sp, #12
 800d1ee:	bd90      	pop	{r4, r7, pc}
 800d1f0:	200021f5 	.word	0x200021f5
 800d1f4:	200000c8 	.word	0x200000c8
 800d1f8:	200021f6 	.word	0x200021f6
 800d1fc:	50000400 	.word	0x50000400

0800d200 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d200:	b590      	push	{r4, r7, lr}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	0004      	movs	r4, r0
 800d208:	0008      	movs	r0, r1
 800d20a:	0011      	movs	r1, r2
 800d20c:	1dbb      	adds	r3, r7, #6
 800d20e:	1c22      	adds	r2, r4, #0
 800d210:	801a      	strh	r2, [r3, #0]
 800d212:	1d3b      	adds	r3, r7, #4
 800d214:	1c02      	adds	r2, r0, #0
 800d216:	801a      	strh	r2, [r3, #0]
 800d218:	1cbb      	adds	r3, r7, #2
 800d21a:	1c0a      	adds	r2, r1, #0
 800d21c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d21e:	4b0e      	ldr	r3, [pc, #56]	@ (800d258 <SetVocLED+0x58>)
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d107      	bne.n	800d236 <SetVocLED+0x36>
 800d226:	4b0d      	ldr	r3, [pc, #52]	@ (800d25c <SetVocLED+0x5c>)
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d103      	bne.n	800d236 <SetVocLED+0x36>
 800d22e:	4b0c      	ldr	r3, [pc, #48]	@ (800d260 <SetVocLED+0x60>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00b      	beq.n	800d24e <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d236:	4b0b      	ldr	r3, [pc, #44]	@ (800d264 <SetVocLED+0x64>)
 800d238:	1dba      	adds	r2, r7, #6
 800d23a:	8812      	ldrh	r2, [r2, #0]
 800d23c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d23e:	4b09      	ldr	r3, [pc, #36]	@ (800d264 <SetVocLED+0x64>)
 800d240:	1d3a      	adds	r2, r7, #4
 800d242:	8812      	ldrh	r2, [r2, #0]
 800d244:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d246:	4b07      	ldr	r3, [pc, #28]	@ (800d264 <SetVocLED+0x64>)
 800d248:	1cba      	adds	r2, r7, #2
 800d24a:	8812      	ldrh	r2, [r2, #0]
 800d24c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d24e:	46c0      	nop			@ (mov r8, r8)
 800d250:	46bd      	mov	sp, r7
 800d252:	b003      	add	sp, #12
 800d254:	bd90      	pop	{r4, r7, pc}
 800d256:	46c0      	nop			@ (mov r8, r8)
 800d258:	200021f5 	.word	0x200021f5
 800d25c:	200000c8 	.word	0x200000c8
 800d260:	200021f6 	.word	0x200021f6
 800d264:	40000400 	.word	0x40000400

0800d268 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d268:	b580      	push	{r7, lr}
 800d26a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d26c:	4b07      	ldr	r3, [pc, #28]	@ (800d28c <SetMeasurementIndicator+0x24>)
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d103      	bne.n	800d27c <SetMeasurementIndicator+0x14>
 800d274:	4b06      	ldr	r3, [pc, #24]	@ (800d290 <SetMeasurementIndicator+0x28>)
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d003      	beq.n	800d284 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800d27c:	2380      	movs	r3, #128	@ 0x80
 800d27e:	05db      	lsls	r3, r3, #23
 800d280:	4a04      	ldr	r2, [pc, #16]	@ (800d294 <SetMeasurementIndicator+0x2c>)
 800d282:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d284:	46c0      	nop			@ (mov r8, r8)
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	46c0      	nop			@ (mov r8, r8)
 800d28c:	200021f5 	.word	0x200021f5
 800d290:	200021f6 	.word	0x200021f6
 800d294:	00000bb8 	.word	0x00000bb8

0800d298 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d298:	b580      	push	{r7, lr}
 800d29a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d29c:	4b07      	ldr	r3, [pc, #28]	@ (800d2bc <ResetMeasurementIndicator+0x24>)
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d103      	bne.n	800d2ac <ResetMeasurementIndicator+0x14>
 800d2a4:	4b06      	ldr	r3, [pc, #24]	@ (800d2c0 <ResetMeasurementIndicator+0x28>)
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d004      	beq.n	800d2b6 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d2ac:	2380      	movs	r3, #128	@ 0x80
 800d2ae:	05db      	lsls	r3, r3, #23
 800d2b0:	22fa      	movs	r2, #250	@ 0xfa
 800d2b2:	0112      	lsls	r2, r2, #4
 800d2b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d2b6:	46c0      	nop			@ (mov r8, r8)
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	200021f5 	.word	0x200021f5
 800d2c0:	200021f6 	.word	0x200021f6

0800d2c4 <SetMICIndicator>:
void SetMICIndicator(){
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d2c8:	4b11      	ldr	r3, [pc, #68]	@ (800d310 <SetMICIndicator+0x4c>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d103      	bne.n	800d2d8 <SetMICIndicator+0x14>
 800d2d0:	4b10      	ldr	r3, [pc, #64]	@ (800d314 <SetMICIndicator+0x50>)
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d004      	beq.n	800d2e2 <SetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_ON;
 800d2d8:	2380      	movs	r3, #128	@ 0x80
 800d2da:	05db      	lsls	r3, r3, #23
 800d2dc:	4a0e      	ldr	r2, [pc, #56]	@ (800d318 <SetMICIndicator+0x54>)
 800d2de:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_ON;
    }
  }
}
 800d2e0:	e013      	b.n	800d30a <SetMICIndicator+0x46>
    if (batteryCharge > 3.7) {
 800d2e2:	4b0e      	ldr	r3, [pc, #56]	@ (800d31c <SetMICIndicator+0x58>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	1c18      	adds	r0, r3, #0
 800d2e8:	f7f6 f8bc 	bl	8003464 <__aeabi_f2d>
 800d2ec:	4a0c      	ldr	r2, [pc, #48]	@ (800d320 <SetMICIndicator+0x5c>)
 800d2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d324 <SetMICIndicator+0x60>)
 800d2f0:	f7f3 f8f8 	bl	80004e4 <__aeabi_dcmpgt>
 800d2f4:	1e03      	subs	r3, r0, #0
 800d2f6:	d004      	beq.n	800d302 <SetMICIndicator+0x3e>
      TIM2 -> CCR3 = LED_ON;
 800d2f8:	2380      	movs	r3, #128	@ 0x80
 800d2fa:	05db      	lsls	r3, r3, #23
 800d2fc:	4a06      	ldr	r2, [pc, #24]	@ (800d318 <SetMICIndicator+0x54>)
 800d2fe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d300:	e003      	b.n	800d30a <SetMICIndicator+0x46>
      TIM2 -> CCR1 = LED_ON;
 800d302:	2380      	movs	r3, #128	@ 0x80
 800d304:	05db      	lsls	r3, r3, #23
 800d306:	4a04      	ldr	r2, [pc, #16]	@ (800d318 <SetMICIndicator+0x54>)
 800d308:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d30a:	46c0      	nop			@ (mov r8, r8)
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	200021f5 	.word	0x200021f5
 800d314:	200021f6 	.word	0x200021f6
 800d318:	00000bb8 	.word	0x00000bb8
 800d31c:	20002200 	.word	0x20002200
 800d320:	9999999a 	.word	0x9999999a
 800d324:	400d9999 	.word	0x400d9999

0800d328 <ResetMICIndicator>:
void ResetMICIndicator(){
 800d328:	b580      	push	{r7, lr}
 800d32a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d32c:	4b13      	ldr	r3, [pc, #76]	@ (800d37c <ResetMICIndicator+0x54>)
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d103      	bne.n	800d33c <ResetMICIndicator+0x14>
 800d334:	4b12      	ldr	r3, [pc, #72]	@ (800d380 <ResetMICIndicator+0x58>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d005      	beq.n	800d348 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d33c:	2380      	movs	r3, #128	@ 0x80
 800d33e:	05db      	lsls	r3, r3, #23
 800d340:	22fa      	movs	r2, #250	@ 0xfa
 800d342:	0112      	lsls	r2, r2, #4
 800d344:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d346:	e015      	b.n	800d374 <ResetMICIndicator+0x4c>
    if (batteryCharge > 3.74) {
 800d348:	4b0e      	ldr	r3, [pc, #56]	@ (800d384 <ResetMICIndicator+0x5c>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	1c18      	adds	r0, r3, #0
 800d34e:	f7f6 f889 	bl	8003464 <__aeabi_f2d>
 800d352:	4a0d      	ldr	r2, [pc, #52]	@ (800d388 <ResetMICIndicator+0x60>)
 800d354:	4b0d      	ldr	r3, [pc, #52]	@ (800d38c <ResetMICIndicator+0x64>)
 800d356:	f7f3 f8c5 	bl	80004e4 <__aeabi_dcmpgt>
 800d35a:	1e03      	subs	r3, r0, #0
 800d35c:	d005      	beq.n	800d36a <ResetMICIndicator+0x42>
      TIM2 -> CCR3 = LED_OFF;
 800d35e:	2380      	movs	r3, #128	@ 0x80
 800d360:	05db      	lsls	r3, r3, #23
 800d362:	22fa      	movs	r2, #250	@ 0xfa
 800d364:	0112      	lsls	r2, r2, #4
 800d366:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d368:	e004      	b.n	800d374 <ResetMICIndicator+0x4c>
      TIM2 -> CCR1 = LED_OFF;
 800d36a:	2380      	movs	r3, #128	@ 0x80
 800d36c:	05db      	lsls	r3, r3, #23
 800d36e:	22fa      	movs	r2, #250	@ 0xfa
 800d370:	0112      	lsls	r2, r2, #4
 800d372:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d374:	46c0      	nop			@ (mov r8, r8)
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	46c0      	nop			@ (mov r8, r8)
 800d37c:	200021f5 	.word	0x200021f5
 800d380:	200021f6 	.word	0x200021f6
 800d384:	20002200 	.word	0x20002200
 800d388:	1eb851ec 	.word	0x1eb851ec
 800d38c:	400deb85 	.word	0x400deb85

0800d390 <SetESPIndicator>:
void SetESPIndicator(){
 800d390:	b580      	push	{r7, lr}
 800d392:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d394:	4b07      	ldr	r3, [pc, #28]	@ (800d3b4 <SetESPIndicator+0x24>)
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d103      	bne.n	800d3a4 <SetESPIndicator+0x14>
 800d39c:	4b06      	ldr	r3, [pc, #24]	@ (800d3b8 <SetESPIndicator+0x28>)
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d003      	beq.n	800d3ac <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800d3a4:	2380      	movs	r3, #128	@ 0x80
 800d3a6:	05db      	lsls	r3, r3, #23
 800d3a8:	4a04      	ldr	r2, [pc, #16]	@ (800d3bc <SetESPIndicator+0x2c>)
 800d3aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d3ac:	46c0      	nop			@ (mov r8, r8)
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	46c0      	nop			@ (mov r8, r8)
 800d3b4:	200021f5 	.word	0x200021f5
 800d3b8:	200021f6 	.word	0x200021f6
 800d3bc:	00000bb8 	.word	0x00000bb8

0800d3c0 <ResetESPIndicator>:
void ResetESPIndicator(){
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3c4:	4b07      	ldr	r3, [pc, #28]	@ (800d3e4 <ResetESPIndicator+0x24>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d103      	bne.n	800d3d4 <ResetESPIndicator+0x14>
 800d3cc:	4b06      	ldr	r3, [pc, #24]	@ (800d3e8 <ResetESPIndicator+0x28>)
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d004      	beq.n	800d3de <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d3d4:	2380      	movs	r3, #128	@ 0x80
 800d3d6:	05db      	lsls	r3, r3, #23
 800d3d8:	22fa      	movs	r2, #250	@ 0xfa
 800d3da:	0112      	lsls	r2, r2, #4
 800d3dc:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d3de:	46c0      	nop			@ (mov r8, r8)
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	200021f5 	.word	0x200021f5
 800d3e8:	200021f6 	.word	0x200021f6

0800d3ec <SetPMIndicator>:

void SetPMIndicator() {
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800d420 <SetPMIndicator+0x34>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d103      	bne.n	800d400 <SetPMIndicator+0x14>
 800d3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800d424 <SetPMIndicator+0x38>)
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d00b      	beq.n	800d418 <SetPMIndicator+0x2c>
    TIM2 -> CCR4 = LED_ON;
 800d400:	2380      	movs	r3, #128	@ 0x80
 800d402:	05db      	lsls	r3, r3, #23
 800d404:	4a08      	ldr	r2, [pc, #32]	@ (800d428 <SetPMIndicator+0x3c>)
 800d406:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_ON;
 800d408:	2380      	movs	r3, #128	@ 0x80
 800d40a:	05db      	lsls	r3, r3, #23
 800d40c:	4a06      	ldr	r2, [pc, #24]	@ (800d428 <SetPMIndicator+0x3c>)
 800d40e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_ON;
 800d410:	2380      	movs	r3, #128	@ 0x80
 800d412:	05db      	lsls	r3, r3, #23
 800d414:	4a04      	ldr	r2, [pc, #16]	@ (800d428 <SetPMIndicator+0x3c>)
 800d416:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d418:	46c0      	nop			@ (mov r8, r8)
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	46c0      	nop			@ (mov r8, r8)
 800d420:	200021f5 	.word	0x200021f5
 800d424:	200021f6 	.word	0x200021f6
 800d428:	00000bb8 	.word	0x00000bb8

0800d42c <ResetPMIndicator>:

void ResetPMIndicator() {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d430:	4b0c      	ldr	r3, [pc, #48]	@ (800d464 <ResetPMIndicator+0x38>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d103      	bne.n	800d440 <ResetPMIndicator+0x14>
 800d438:	4b0b      	ldr	r3, [pc, #44]	@ (800d468 <ResetPMIndicator+0x3c>)
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00e      	beq.n	800d45e <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d440:	2380      	movs	r3, #128	@ 0x80
 800d442:	05db      	lsls	r3, r3, #23
 800d444:	22fa      	movs	r2, #250	@ 0xfa
 800d446:	0112      	lsls	r2, r2, #4
 800d448:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d44a:	2380      	movs	r3, #128	@ 0x80
 800d44c:	05db      	lsls	r3, r3, #23
 800d44e:	22fa      	movs	r2, #250	@ 0xfa
 800d450:	0112      	lsls	r2, r2, #4
 800d452:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d454:	2380      	movs	r3, #128	@ 0x80
 800d456:	05db      	lsls	r3, r3, #23
 800d458:	22fa      	movs	r2, #250	@ 0xfa
 800d45a:	0112      	lsls	r2, r2, #4
 800d45c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d45e:	46c0      	nop			@ (mov r8, r8)
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	200021f5 	.word	0x200021f5
 800d468:	200021f6 	.word	0x200021f6

0800d46c <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d46c:	b580      	push	{r7, lr}
 800d46e:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d470:	23fa      	movs	r3, #250	@ 0xfa
 800d472:	011a      	lsls	r2, r3, #4
 800d474:	23fa      	movs	r3, #250	@ 0xfa
 800d476:	0119      	lsls	r1, r3, #4
 800d478:	23fa      	movs	r3, #250	@ 0xfa
 800d47a:	011b      	lsls	r3, r3, #4
 800d47c:	0018      	movs	r0, r3
 800d47e:	f7ff fe41 	bl	800d104 <SetStatusLED>
  SetDBLED(false,false,false);
 800d482:	2200      	movs	r2, #0
 800d484:	2100      	movs	r1, #0
 800d486:	2000      	movs	r0, #0
 800d488:	f7ff fe70 	bl	800d16c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d48c:	23fa      	movs	r3, #250	@ 0xfa
 800d48e:	011a      	lsls	r2, r3, #4
 800d490:	23fa      	movs	r3, #250	@ 0xfa
 800d492:	0119      	lsls	r1, r3, #4
 800d494:	23fa      	movs	r3, #250	@ 0xfa
 800d496:	011b      	lsls	r3, r3, #4
 800d498:	0018      	movs	r0, r3
 800d49a:	f7ff feb1 	bl	800d200 <SetVocLED>
return;
 800d49e:	46c0      	nop			@ (mov r8, r8)
}
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <powerCheck>:

Battery_Status powerCheck(){
 800d4a4:	b590      	push	{r4, r7, lr}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800d4aa:	f7f8 ffbf 	bl	800642c <Check_USB_PowerOn>
 800d4ae:	0003      	movs	r3, r0
 800d4b0:	001a      	movs	r2, r3
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	4053      	eors	r3, r2
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d005      	beq.n	800d4c8 <powerCheck+0x24>
    status = batteryChargeCheck();
 800d4bc:	1dfc      	adds	r4, r7, #7
 800d4be:	f7ff fdc7 	bl	800d050 <batteryChargeCheck>
 800d4c2:	0003      	movs	r3, r0
 800d4c4:	7023      	strb	r3, [r4, #0]
 800d4c6:	e002      	b.n	800d4ce <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800d4c8:	1dfb      	adds	r3, r7, #7
 800d4ca:	2204      	movs	r2, #4
 800d4cc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800d4ce:	1dfb      	adds	r3, r7, #7
 800d4d0:	781b      	ldrb	r3, [r3, #0]
}
 800d4d2:	0018      	movs	r0, r3
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	b003      	add	sp, #12
 800d4d8:	bd90      	pop	{r4, r7, pc}
	...

0800d4dc <powerDisplay>:

void powerDisplay(Battery_Status status){
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	0002      	movs	r2, r0
 800d4e4:	1dfb      	adds	r3, r7, #7
 800d4e6:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800d4e8:	1dfb      	adds	r3, r7, #7
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2b04      	cmp	r3, #4
 800d4ee:	d105      	bne.n	800d4fc <powerDisplay+0x20>
    Debug("LEDS are okay");
 800d4f0:	4a18      	ldr	r2, [pc, #96]	@ (800d554 <powerDisplay+0x78>)
 800d4f2:	4b19      	ldr	r3, [pc, #100]	@ (800d558 <powerDisplay+0x7c>)
 800d4f4:	0019      	movs	r1, r3
 800d4f6:	2003      	movs	r0, #3
 800d4f8:	f000 ff1c 	bl	800e334 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800d4fc:	1dfb      	adds	r3, r7, #7
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	2b03      	cmp	r3, #3
 800d502:	d105      	bne.n	800d510 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800d504:	4a15      	ldr	r2, [pc, #84]	@ (800d55c <powerDisplay+0x80>)
 800d506:	4b14      	ldr	r3, [pc, #80]	@ (800d558 <powerDisplay+0x7c>)
 800d508:	0019      	movs	r1, r3
 800d50a:	2003      	movs	r0, #3
 800d50c:	f000 ff12 	bl	800e334 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800d510:	1dfb      	adds	r3, r7, #7
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	2b02      	cmp	r3, #2
 800d516:	d105      	bne.n	800d524 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800d518:	4a11      	ldr	r2, [pc, #68]	@ (800d560 <powerDisplay+0x84>)
 800d51a:	4b0f      	ldr	r3, [pc, #60]	@ (800d558 <powerDisplay+0x7c>)
 800d51c:	0019      	movs	r1, r3
 800d51e:	2003      	movs	r0, #3
 800d520:	f000 ff08 	bl	800e334 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800d524:	1dfb      	adds	r3, r7, #7
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d105      	bne.n	800d538 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800d52c:	4a0d      	ldr	r2, [pc, #52]	@ (800d564 <powerDisplay+0x88>)
 800d52e:	4b0a      	ldr	r3, [pc, #40]	@ (800d558 <powerDisplay+0x7c>)
 800d530:	0019      	movs	r1, r3
 800d532:	2003      	movs	r0, #3
 800d534:	f000 fefe 	bl	800e334 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800d538:	1dfb      	adds	r3, r7, #7
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d105      	bne.n	800d54c <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800d540:	4a09      	ldr	r2, [pc, #36]	@ (800d568 <powerDisplay+0x8c>)
 800d542:	4b05      	ldr	r3, [pc, #20]	@ (800d558 <powerDisplay+0x7c>)
 800d544:	0019      	movs	r1, r3
 800d546:	2003      	movs	r0, #3
 800d548:	f000 fef4 	bl	800e334 <CreateLine>
  }
}
 800d54c:	46c0      	nop			@ (mov r8, r8)
 800d54e:	46bd      	mov	sp, r7
 800d550:	b002      	add	sp, #8
 800d552:	bd80      	pop	{r7, pc}
 800d554:	08024cc4 	.word	0x08024cc4
 800d558:	08024cd4 	.word	0x08024cd4
 800d55c:	08024cd8 	.word	0x08024cd8
 800d560:	08024cf0 	.word	0x08024cf0
 800d564:	08024d10 	.word	0x08024d10
 800d568:	08024d28 	.word	0x08024d28

0800d56c <configCheck>:

void configCheck(){
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800d572:	f7f8 ff6a 	bl	800644a <BootButton_Pressed>
 800d576:	1e03      	subs	r3, r0, #0
 800d578:	d007      	beq.n	800d58a <configCheck+0x1e>
 800d57a:	f7f8 ff77 	bl	800646c <UserButton_Pressed>
 800d57e:	1e03      	subs	r3, r0, #0
 800d580:	d003      	beq.n	800d58a <configCheck+0x1e>
    configSet = true;
 800d582:	4ba1      	ldr	r3, [pc, #644]	@ (800d808 <configCheck+0x29c>)
 800d584:	2201      	movs	r2, #1
 800d586:	701a      	strb	r2, [r3, #0]
 800d588:	e00a      	b.n	800d5a0 <configCheck+0x34>
  }
  else{
    configSet = false;
 800d58a:	4b9f      	ldr	r3, [pc, #636]	@ (800d808 <configCheck+0x29c>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800d590:	f001 fb26 	bl	800ebe0 <HAL_GetTick>
 800d594:	0003      	movs	r3, r0
 800d596:	22fa      	movs	r2, #250	@ 0xfa
 800d598:	00d2      	lsls	r2, r2, #3
 800d59a:	189a      	adds	r2, r3, r2
 800d59c:	4b9b      	ldr	r3, [pc, #620]	@ (800d80c <configCheck+0x2a0>)
 800d59e:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800d5a0:	4b99      	ldr	r3, [pc, #612]	@ (800d808 <configCheck+0x29c>)
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00d      	beq.n	800d5c4 <configCheck+0x58>
 800d5a8:	4b98      	ldr	r3, [pc, #608]	@ (800d80c <configCheck+0x2a0>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	0018      	movs	r0, r3
 800d5ae:	f000 fe6b 	bl	800e288 <TimestampIsReached>
 800d5b2:	1e03      	subs	r3, r0, #0
 800d5b4:	d006      	beq.n	800d5c4 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800d5b6:	f7f6 fa61 	bl	8003a7c <SetConfigMode>
    SetDBLED(true, true, true);
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	2101      	movs	r1, #1
 800d5be:	2001      	movs	r0, #1
 800d5c0:	f7ff fdd4 	bl	800d16c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800d5c4:	f7f8 ff41 	bl	800644a <BootButton_Pressed>
 800d5c8:	0003      	movs	r3, r0
 800d5ca:	001a      	movs	r2, r3
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	4053      	eors	r3, r2
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d031      	beq.n	800d63a <configCheck+0xce>
 800d5d6:	f7f8 ff49 	bl	800646c <UserButton_Pressed>
 800d5da:	1e03      	subs	r3, r0, #0
 800d5dc:	d02d      	beq.n	800d63a <configCheck+0xce>
 800d5de:	4b8c      	ldr	r3, [pc, #560]	@ (800d810 <configCheck+0x2a4>)
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	4053      	eors	r3, r2
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d026      	beq.n	800d63a <configCheck+0xce>
    SetLEDsOff();
 800d5ec:	f7ff ff3e 	bl	800d46c <SetLEDsOff>
    Debug("userToggle flipped");
 800d5f0:	4a88      	ldr	r2, [pc, #544]	@ (800d814 <configCheck+0x2a8>)
 800d5f2:	4b89      	ldr	r3, [pc, #548]	@ (800d818 <configCheck+0x2ac>)
 800d5f4:	0019      	movs	r1, r3
 800d5f6:	2003      	movs	r0, #3
 800d5f8:	f000 fe9c 	bl	800e334 <CreateLine>
    userToggle = !userToggle;
 800d5fc:	4b87      	ldr	r3, [pc, #540]	@ (800d81c <configCheck+0x2b0>)
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	1e5a      	subs	r2, r3, #1
 800d602:	4193      	sbcs	r3, r2
 800d604:	b2db      	uxtb	r3, r3
 800d606:	2201      	movs	r2, #1
 800d608:	4053      	eors	r3, r2
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	1c1a      	adds	r2, r3, #0
 800d60e:	2301      	movs	r3, #1
 800d610:	4013      	ands	r3, r2
 800d612:	b2da      	uxtb	r2, r3
 800d614:	4b81      	ldr	r3, [pc, #516]	@ (800d81c <configCheck+0x2b0>)
 800d616:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800d618:	4b80      	ldr	r3, [pc, #512]	@ (800d81c <configCheck+0x2b0>)
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d001      	beq.n	800d624 <configCheck+0xb8>
      EnabledConnectedDevices();
 800d620:	f7fb f90c 	bl	800883c <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800d624:	4b7a      	ldr	r3, [pc, #488]	@ (800d810 <configCheck+0x2a4>)
 800d626:	2201      	movs	r2, #1
 800d628:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800d62a:	f001 fad9 	bl	800ebe0 <HAL_GetTick>
 800d62e:	0003      	movs	r3, r0
 800d630:	22fa      	movs	r2, #250	@ 0xfa
 800d632:	00d2      	lsls	r2, r2, #3
 800d634:	189a      	adds	r2, r3, r2
 800d636:	4b7a      	ldr	r3, [pc, #488]	@ (800d820 <configCheck+0x2b4>)
 800d638:	601a      	str	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && buttonHeld&& TimestampIsReached(UserbuttonStamp)) {
 800d63a:	f7f8 ff06 	bl	800644a <BootButton_Pressed>
 800d63e:	0003      	movs	r3, r0
 800d640:	001a      	movs	r2, r3
 800d642:	2301      	movs	r3, #1
 800d644:	4053      	eors	r3, r2
 800d646:	b2db      	uxtb	r3, r3
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d100      	bne.n	800d64e <configCheck+0xe2>
 800d64c:	e0a5      	b.n	800d79a <configCheck+0x22e>
 800d64e:	4b70      	ldr	r3, [pc, #448]	@ (800d810 <configCheck+0x2a4>)
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d100      	bne.n	800d658 <configCheck+0xec>
 800d656:	e0a0      	b.n	800d79a <configCheck+0x22e>
 800d658:	4b71      	ldr	r3, [pc, #452]	@ (800d820 <configCheck+0x2b4>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	0018      	movs	r0, r3
 800d65e:	f000 fe13 	bl	800e288 <TimestampIsReached>
 800d662:	1e03      	subs	r3, r0, #0
 800d664:	d100      	bne.n	800d668 <configCheck+0xfc>
 800d666:	e098      	b.n	800d79a <configCheck+0x22e>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d668:	f7fa fe4e 	bl	8008308 <GetPMSensorPresence>
 800d66c:	1e03      	subs	r3, r0, #0
 800d66e:	d100      	bne.n	800d672 <configCheck+0x106>
 800d670:	e083      	b.n	800d77a <configCheck+0x20e>
 800d672:	4b6c      	ldr	r3, [pc, #432]	@ (800d824 <configCheck+0x2b8>)
 800d674:	791b      	ldrb	r3, [r3, #4]
 800d676:	2b34      	cmp	r3, #52	@ 0x34
 800d678:	d004      	beq.n	800d684 <configCheck+0x118>
 800d67a:	4b6a      	ldr	r3, [pc, #424]	@ (800d824 <configCheck+0x2b8>)
 800d67c:	791b      	ldrb	r3, [r3, #4]
 800d67e:	2b35      	cmp	r3, #53	@ 0x35
 800d680:	d000      	beq.n	800d684 <configCheck+0x118>
 800d682:	e07a      	b.n	800d77a <configCheck+0x20e>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800d684:	4b68      	ldr	r3, [pc, #416]	@ (800d828 <configCheck+0x2bc>)
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	1e5a      	subs	r2, r3, #1
 800d68a:	4193      	sbcs	r3, r2
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2201      	movs	r2, #1
 800d690:	4053      	eors	r3, r2
 800d692:	b2db      	uxtb	r3, r3
 800d694:	1c1a      	adds	r2, r3, #0
 800d696:	2301      	movs	r3, #1
 800d698:	4013      	ands	r3, r2
 800d69a:	b2da      	uxtb	r2, r3
 800d69c:	4b62      	ldr	r3, [pc, #392]	@ (800d828 <configCheck+0x2bc>)
 800d69e:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = 0;
 800d6a0:	4b61      	ldr	r3, [pc, #388]	@ (800d828 <configCheck+0x2bc>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d003      	beq.n	800d6b0 <configCheck+0x144>
 800d6a8:	1dbb      	adds	r3, r7, #6
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	801a      	strh	r2, [r3, #0]
 800d6ae:	e003      	b.n	800d6b8 <configCheck+0x14c>
        else color = 4000;
 800d6b0:	1dbb      	adds	r3, r7, #6
 800d6b2:	22fa      	movs	r2, #250	@ 0xfa
 800d6b4:	0112      	lsls	r2, r2, #4
 800d6b6:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800d6b8:	4b5b      	ldr	r3, [pc, #364]	@ (800d828 <configCheck+0x2bc>)
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <configCheck+0x158>
 800d6c0:	4b5a      	ldr	r3, [pc, #360]	@ (800d82c <configCheck+0x2c0>)
 800d6c2:	e000      	b.n	800d6c6 <configCheck+0x15a>
 800d6c4:	4b5a      	ldr	r3, [pc, #360]	@ (800d830 <configCheck+0x2c4>)
 800d6c6:	4a5b      	ldr	r2, [pc, #364]	@ (800d834 <configCheck+0x2c8>)
 800d6c8:	495b      	ldr	r1, [pc, #364]	@ (800d838 <configCheck+0x2cc>)
 800d6ca:	2002      	movs	r0, #2
 800d6cc:	f000 fe32 	bl	800e334 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800d6d0:	1d7b      	adds	r3, r7, #5
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	701a      	strb	r2, [r3, #0]
 800d6d6:	e025      	b.n	800d724 <configCheck+0x1b8>
        TIM3 -> CCR1 = 0;
 800d6d8:	4b58      	ldr	r3, [pc, #352]	@ (800d83c <configCheck+0x2d0>)
 800d6da:	2200      	movs	r2, #0
 800d6dc:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800d6de:	4b57      	ldr	r3, [pc, #348]	@ (800d83c <configCheck+0x2d0>)
 800d6e0:	1dba      	adds	r2, r7, #6
 800d6e2:	8812      	ldrh	r2, [r2, #0]
 800d6e4:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800d6e6:	4b55      	ldr	r3, [pc, #340]	@ (800d83c <configCheck+0x2d0>)
 800d6e8:	1dba      	adds	r2, r7, #6
 800d6ea:	8812      	ldrh	r2, [r2, #0]
 800d6ec:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d6ee:	23c8      	movs	r3, #200	@ 0xc8
 800d6f0:	005b      	lsls	r3, r3, #1
 800d6f2:	0018      	movs	r0, r3
 800d6f4:	f001 fa7e 	bl	800ebf4 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800d6f8:	4b50      	ldr	r3, [pc, #320]	@ (800d83c <configCheck+0x2d0>)
 800d6fa:	22fa      	movs	r2, #250	@ 0xfa
 800d6fc:	0112      	lsls	r2, r2, #4
 800d6fe:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800d700:	4b4e      	ldr	r3, [pc, #312]	@ (800d83c <configCheck+0x2d0>)
 800d702:	22fa      	movs	r2, #250	@ 0xfa
 800d704:	0112      	lsls	r2, r2, #4
 800d706:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800d708:	4b4c      	ldr	r3, [pc, #304]	@ (800d83c <configCheck+0x2d0>)
 800d70a:	22fa      	movs	r2, #250	@ 0xfa
 800d70c:	0112      	lsls	r2, r2, #4
 800d70e:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d710:	23c8      	movs	r3, #200	@ 0xc8
 800d712:	005b      	lsls	r3, r3, #1
 800d714:	0018      	movs	r0, r3
 800d716:	f001 fa6d 	bl	800ebf4 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800d71a:	1d7b      	adds	r3, r7, #5
 800d71c:	781a      	ldrb	r2, [r3, #0]
 800d71e:	1d7b      	adds	r3, r7, #5
 800d720:	3201      	adds	r2, #1
 800d722:	701a      	strb	r2, [r3, #0]
 800d724:	1d7b      	adds	r3, r7, #5
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d9d5      	bls.n	800d6d8 <configCheck+0x16c>
      }
      Debug("userToggle flipped back to prior status");
 800d72c:	4a44      	ldr	r2, [pc, #272]	@ (800d840 <configCheck+0x2d4>)
 800d72e:	4b3a      	ldr	r3, [pc, #232]	@ (800d818 <configCheck+0x2ac>)
 800d730:	0019      	movs	r1, r3
 800d732:	2003      	movs	r0, #3
 800d734:	f000 fdfe 	bl	800e334 <CreateLine>
      userToggle = !userToggle;
 800d738:	4b38      	ldr	r3, [pc, #224]	@ (800d81c <configCheck+0x2b0>)
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	1e5a      	subs	r2, r3, #1
 800d73e:	4193      	sbcs	r3, r2
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2201      	movs	r2, #1
 800d744:	4053      	eors	r3, r2
 800d746:	b2db      	uxtb	r3, r3
 800d748:	1c1a      	adds	r2, r3, #0
 800d74a:	2301      	movs	r3, #1
 800d74c:	4013      	ands	r3, r2
 800d74e:	b2da      	uxtb	r2, r3
 800d750:	4b32      	ldr	r3, [pc, #200]	@ (800d81c <configCheck+0x2b0>)
 800d752:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800d754:	4b31      	ldr	r3, [pc, #196]	@ (800d81c <configCheck+0x2b0>)
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d001      	beq.n	800d760 <configCheck+0x1f4>
 800d75c:	4b33      	ldr	r3, [pc, #204]	@ (800d82c <configCheck+0x2c0>)
 800d75e:	e000      	b.n	800d762 <configCheck+0x1f6>
 800d760:	4b33      	ldr	r3, [pc, #204]	@ (800d830 <configCheck+0x2c4>)
 800d762:	4a38      	ldr	r2, [pc, #224]	@ (800d844 <configCheck+0x2d8>)
 800d764:	4934      	ldr	r1, [pc, #208]	@ (800d838 <configCheck+0x2cc>)
 800d766:	2002      	movs	r0, #2
 800d768:	f000 fde4 	bl	800e334 <CreateLine>
      if (usbPluggedIn) {
 800d76c:	4b36      	ldr	r3, [pc, #216]	@ (800d848 <configCheck+0x2dc>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d009      	beq.n	800d788 <configCheck+0x21c>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800d774:	f7fc f94c 	bl	8009a10 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d778:	e006      	b.n	800d788 <configCheck+0x21c>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800d77a:	4a34      	ldr	r2, [pc, #208]	@ (800d84c <configCheck+0x2e0>)
 800d77c:	4b2e      	ldr	r3, [pc, #184]	@ (800d838 <configCheck+0x2cc>)
 800d77e:	0019      	movs	r1, r3
 800d780:	2002      	movs	r0, #2
 800d782:	f000 fdd7 	bl	800e334 <CreateLine>
 800d786:	e000      	b.n	800d78a <configCheck+0x21e>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d788:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800d78a:	46c0      	nop			@ (mov r8, r8)
 800d78c:	f7f8 fe6e 	bl	800646c <UserButton_Pressed>
 800d790:	1e03      	subs	r3, r0, #0
 800d792:	d1fb      	bne.n	800d78c <configCheck+0x220>
    }
    buttonHeld = false;
 800d794:	4b1e      	ldr	r3, [pc, #120]	@ (800d810 <configCheck+0x2a4>)
 800d796:	2200      	movs	r2, #0
 800d798:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800d79a:	f7f8 fe56 	bl	800644a <BootButton_Pressed>
 800d79e:	0003      	movs	r3, r0
 800d7a0:	001a      	movs	r2, r3
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	4053      	eors	r3, r2
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00b      	beq.n	800d7c4 <configCheck+0x258>
 800d7ac:	f7f8 fe5e 	bl	800646c <UserButton_Pressed>
 800d7b0:	0003      	movs	r3, r0
 800d7b2:	001a      	movs	r2, r3
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	4053      	eors	r3, r2
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d002      	beq.n	800d7c4 <configCheck+0x258>
    buttonHeld = false;
 800d7be:	4b14      	ldr	r3, [pc, #80]	@ (800d810 <configCheck+0x2a4>)
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800d7c4:	f7f8 fe32 	bl	800642c <Check_USB_PowerOn>
 800d7c8:	1e03      	subs	r3, r0, #0
 800d7ca:	d005      	beq.n	800d7d8 <configCheck+0x26c>
    usbPluggedIn = true;
 800d7cc:	4b1e      	ldr	r3, [pc, #120]	@ (800d848 <configCheck+0x2dc>)
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800d7d2:	f7fb f833 	bl	800883c <EnabledConnectedDevices>
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800d7d6:	e012      	b.n	800d7fe <configCheck+0x292>
    if(!userToggle && !init){
 800d7d8:	4b10      	ldr	r3, [pc, #64]	@ (800d81c <configCheck+0x2b0>)
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	2201      	movs	r2, #1
 800d7de:	4053      	eors	r3, r2
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d008      	beq.n	800d7f8 <configCheck+0x28c>
 800d7e6:	4b1a      	ldr	r3, [pc, #104]	@ (800d850 <configCheck+0x2e4>)
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	4053      	eors	r3, r2
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d001      	beq.n	800d7f8 <configCheck+0x28c>
      SetLEDsOff();
 800d7f4:	f7ff fe3a 	bl	800d46c <SetLEDsOff>
    usbPluggedIn = false;
 800d7f8:	4b13      	ldr	r3, [pc, #76]	@ (800d848 <configCheck+0x2dc>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	701a      	strb	r2, [r3, #0]
}
 800d7fe:	46c0      	nop			@ (mov r8, r8)
 800d800:	46bd      	mov	sp, r7
 800d802:	b002      	add	sp, #8
 800d804:	bd80      	pop	{r7, pc}
 800d806:	46c0      	nop			@ (mov r8, r8)
 800d808:	200021f4 	.word	0x200021f4
 800d80c:	200021f8 	.word	0x200021f8
 800d810:	200021f7 	.word	0x200021f7
 800d814:	08024d4c 	.word	0x08024d4c
 800d818:	08024cd4 	.word	0x08024cd4
 800d81c:	200021f6 	.word	0x200021f6
 800d820:	200021fc 	.word	0x200021fc
 800d824:	20001260 	.word	0x20001260
 800d828:	2000125e 	.word	0x2000125e
 800d82c:	08024d60 	.word	0x08024d60
 800d830:	08024d68 	.word	0x08024d68
 800d834:	08024d74 	.word	0x08024d74
 800d838:	08024d94 	.word	0x08024d94
 800d83c:	40000400 	.word	0x40000400
 800d840:	08024d98 	.word	0x08024d98
 800d844:	08024dc0 	.word	0x08024dc0
 800d848:	200021f5 	.word	0x200021f5
 800d84c:	08024dd8 	.word	0x08024dd8
 800d850:	200000c8 	.word	0x200000c8

0800d854 <Battery_Upkeep>:
/*
void Status_Upkeep(){
  configCheck();
}
*/
Battery_Status Battery_Upkeep(){
 800d854:	b590      	push	{r4, r7, lr}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800d85a:	1dfc      	adds	r4, r7, #7
 800d85c:	f7ff fe22 	bl	800d4a4 <powerCheck>
 800d860:	0003      	movs	r3, r0
 800d862:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800d864:	1dfb      	adds	r3, r7, #7
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	0018      	movs	r0, r3
 800d86a:	f7ff fe37 	bl	800d4dc <powerDisplay>
  return status;
 800d86e:	1dfb      	adds	r3, r7, #7
 800d870:	781b      	ldrb	r3, [r3, #0]
}
 800d872:	0018      	movs	r0, r3
 800d874:	46bd      	mov	sp, r7
 800d876:	b003      	add	sp, #12
 800d878:	bd90      	pop	{r4, r7, pc}
	...

0800d87c <setuserToggle>:

void setuserToggle(void) {
 800d87c:	b580      	push	{r7, lr}
 800d87e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800d880:	f7ff fe10 	bl	800d4a4 <powerCheck>
 800d884:	0003      	movs	r3, r0
 800d886:	2b04      	cmp	r3, #4
 800d888:	d002      	beq.n	800d890 <setuserToggle+0x14>
    userToggle = true;
 800d88a:	4b03      	ldr	r3, [pc, #12]	@ (800d898 <setuserToggle+0x1c>)
 800d88c:	2201      	movs	r2, #1
 800d88e:	701a      	strb	r2, [r3, #0]
  }
}
 800d890:	46c0      	nop			@ (mov r8, r8)
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	46c0      	nop			@ (mov r8, r8)
 800d898:	200021f6 	.word	0x200021f6

0800d89c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d8a0:	4b07      	ldr	r3, [pc, #28]	@ (800d8c0 <HAL_MspInit+0x24>)
 800d8a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8a4:	4b06      	ldr	r3, [pc, #24]	@ (800d8c0 <HAL_MspInit+0x24>)
 800d8a6:	2101      	movs	r1, #1
 800d8a8:	430a      	orrs	r2, r1
 800d8aa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800d8ac:	4b04      	ldr	r3, [pc, #16]	@ (800d8c0 <HAL_MspInit+0x24>)
 800d8ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8b0:	4b03      	ldr	r3, [pc, #12]	@ (800d8c0 <HAL_MspInit+0x24>)
 800d8b2:	2180      	movs	r1, #128	@ 0x80
 800d8b4:	0549      	lsls	r1, r1, #21
 800d8b6:	430a      	orrs	r2, r1
 800d8b8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d8ba:	46c0      	nop			@ (mov r8, r8)
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	40021000 	.word	0x40021000

0800d8c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d8c8:	46c0      	nop			@ (mov r8, r8)
 800d8ca:	e7fd      	b.n	800d8c8 <NMI_Handler+0x4>

0800d8cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d8d0:	46c0      	nop			@ (mov r8, r8)
 800d8d2:	e7fd      	b.n	800d8d0 <HardFault_Handler+0x4>

0800d8d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d8d8:	46c0      	nop			@ (mov r8, r8)
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d8e2:	46c0      	nop			@ (mov r8, r8)
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d8ec:	f001 f966 	bl	800ebbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d8f0:	46c0      	nop			@ (mov r8, r8)
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
	...

0800d8f8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800d8fc:	4b03      	ldr	r3, [pc, #12]	@ (800d90c <RTC_IRQHandler+0x14>)
 800d8fe:	0018      	movs	r0, r3
 800d900:	f008 fe8c 	bl	801661c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800d904:	46c0      	nop			@ (mov r8, r8)
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	46c0      	nop			@ (mov r8, r8)
 800d90c:	20001238 	.word	0x20001238

0800d910 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800d914:	2380      	movs	r3, #128	@ 0x80
 800d916:	021b      	lsls	r3, r3, #8
 800d918:	0018      	movs	r0, r3
 800d91a:	f002 fc0f 	bl	801013c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800d91e:	46c0      	nop			@ (mov r8, r8)
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800d928:	4b05      	ldr	r3, [pc, #20]	@ (800d940 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800d92a:	0018      	movs	r0, r3
 800d92c:	f001 ff97 	bl	800f85e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800d930:	4b04      	ldr	r3, [pc, #16]	@ (800d944 <DMA1_Channel2_3_IRQHandler+0x20>)
 800d932:	0018      	movs	r0, r3
 800d934:	f001 ff93 	bl	800f85e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800d938:	46c0      	nop			@ (mov r8, r8)
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	46c0      	nop			@ (mov r8, r8)
 800d940:	20000edc 	.word	0x20000edc
 800d944:	20000e94 	.word	0x20000e94

0800d948 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800d94c:	4b07      	ldr	r3, [pc, #28]	@ (800d96c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800d94e:	0018      	movs	r0, r3
 800d950:	f001 ff85 	bl	800f85e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800d954:	4b06      	ldr	r3, [pc, #24]	@ (800d970 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800d956:	0018      	movs	r0, r3
 800d958:	f001 ff81 	bl	800f85e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800d95c:	4b05      	ldr	r3, [pc, #20]	@ (800d974 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800d95e:	0018      	movs	r0, r3
 800d960:	f001 ff7d 	bl	800f85e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800d964:	46c0      	nop			@ (mov r8, r8)
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	46c0      	nop			@ (mov r8, r8)
 800d96c:	20000f60 	.word	0x20000f60
 800d970:	200024f0 	.word	0x200024f0
 800d974:	20002538 	.word	0x20002538

0800d978 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800d97c:	4b03      	ldr	r3, [pc, #12]	@ (800d98c <USART4_5_IRQHandler+0x14>)
 800d97e:	0018      	movs	r0, r3
 800d980:	f009 fd46 	bl	8017410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800d984:	46c0      	nop			@ (mov r8, r8)
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	46c0      	nop			@ (mov r8, r8)
 800d98c:	20002438 	.word	0x20002438

0800d990 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800d994:	4b09      	ldr	r3, [pc, #36]	@ (800d9bc <I2C1_IRQHandler+0x2c>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	699a      	ldr	r2, [r3, #24]
 800d99a:	23e0      	movs	r3, #224	@ 0xe0
 800d99c:	00db      	lsls	r3, r3, #3
 800d99e:	4013      	ands	r3, r2
 800d9a0:	d004      	beq.n	800d9ac <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800d9a2:	4b06      	ldr	r3, [pc, #24]	@ (800d9bc <I2C1_IRQHandler+0x2c>)
 800d9a4:	0018      	movs	r0, r3
 800d9a6:	f003 f8b1 	bl	8010b0c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800d9aa:	e003      	b.n	800d9b4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800d9ac:	4b03      	ldr	r3, [pc, #12]	@ (800d9bc <I2C1_IRQHandler+0x2c>)
 800d9ae:	0018      	movs	r0, r3
 800d9b0:	f003 f892 	bl	8010ad8 <HAL_I2C_EV_IRQHandler>
}
 800d9b4:	46c0      	nop			@ (mov r8, r8)
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	46c0      	nop			@ (mov r8, r8)
 800d9bc:	20000dec 	.word	0x20000dec

0800d9c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800d9c4:	4b03      	ldr	r3, [pc, #12]	@ (800d9d4 <USART1_IRQHandler+0x14>)
 800d9c6:	0018      	movs	r0, r3
 800d9c8:	f009 fd22 	bl	8017410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800d9cc:	46c0      	nop			@ (mov r8, r8)
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	46c0      	nop			@ (mov r8, r8)
 800d9d4:	20002380 	.word	0x20002380

0800d9d8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800d9dc:	4b03      	ldr	r3, [pc, #12]	@ (800d9ec <USB_IRQHandler+0x14>)
 800d9de:	0018      	movs	r0, r3
 800d9e0:	f005 fc72 	bl	80132c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800d9e4:	46c0      	nop			@ (mov r8, r8)
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	46c0      	nop			@ (mov r8, r8)
 800d9ec:	2000334c 	.word	0x2000334c

0800d9f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	af00      	add	r7, sp, #0
  return 1;
 800d9f4:	2301      	movs	r3, #1
}
 800d9f6:	0018      	movs	r0, r3
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <_kill>:

int _kill(int pid, int sig)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800da06:	f012 fbe7 	bl	80201d8 <__errno>
 800da0a:	0003      	movs	r3, r0
 800da0c:	2216      	movs	r2, #22
 800da0e:	601a      	str	r2, [r3, #0]
  return -1;
 800da10:	2301      	movs	r3, #1
 800da12:	425b      	negs	r3, r3
}
 800da14:	0018      	movs	r0, r3
 800da16:	46bd      	mov	sp, r7
 800da18:	b002      	add	sp, #8
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <_exit>:

void _exit (int status)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800da24:	2301      	movs	r3, #1
 800da26:	425a      	negs	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	0011      	movs	r1, r2
 800da2c:	0018      	movs	r0, r3
 800da2e:	f7ff ffe5 	bl	800d9fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800da32:	46c0      	nop			@ (mov r8, r8)
 800da34:	e7fd      	b.n	800da32 <_exit+0x16>

0800da36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b086      	sub	sp, #24
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da42:	2300      	movs	r3, #0
 800da44:	617b      	str	r3, [r7, #20]
 800da46:	e00a      	b.n	800da5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800da48:	e000      	b.n	800da4c <_read+0x16>
 800da4a:	bf00      	nop
 800da4c:	0001      	movs	r1, r0
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	1c5a      	adds	r2, r3, #1
 800da52:	60ba      	str	r2, [r7, #8]
 800da54:	b2ca      	uxtb	r2, r1
 800da56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	3301      	adds	r3, #1
 800da5c:	617b      	str	r3, [r7, #20]
 800da5e:	697a      	ldr	r2, [r7, #20]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	429a      	cmp	r2, r3
 800da64:	dbf0      	blt.n	800da48 <_read+0x12>
  }

  return len;
 800da66:	687b      	ldr	r3, [r7, #4]
}
 800da68:	0018      	movs	r0, r3
 800da6a:	46bd      	mov	sp, r7
 800da6c:	b006      	add	sp, #24
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <_close>:
  }
  return len;
}

int _close(int file)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800da78:	2301      	movs	r3, #1
 800da7a:	425b      	negs	r3, r3
}
 800da7c:	0018      	movs	r0, r3
 800da7e:	46bd      	mov	sp, r7
 800da80:	b002      	add	sp, #8
 800da82:	bd80      	pop	{r7, pc}

0800da84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	2280      	movs	r2, #128	@ 0x80
 800da92:	0192      	lsls	r2, r2, #6
 800da94:	605a      	str	r2, [r3, #4]
  return 0;
 800da96:	2300      	movs	r3, #0
}
 800da98:	0018      	movs	r0, r3
 800da9a:	46bd      	mov	sp, r7
 800da9c:	b002      	add	sp, #8
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <_isatty>:

int _isatty(int file)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800daa8:	2301      	movs	r3, #1
}
 800daaa:	0018      	movs	r0, r3
 800daac:	46bd      	mov	sp, r7
 800daae:	b002      	add	sp, #8
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	60f8      	str	r0, [r7, #12]
 800daba:	60b9      	str	r1, [r7, #8]
 800dabc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	0018      	movs	r0, r3
 800dac2:	46bd      	mov	sp, r7
 800dac4:	b004      	add	sp, #16
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b086      	sub	sp, #24
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dad0:	4a14      	ldr	r2, [pc, #80]	@ (800db24 <_sbrk+0x5c>)
 800dad2:	4b15      	ldr	r3, [pc, #84]	@ (800db28 <_sbrk+0x60>)
 800dad4:	1ad3      	subs	r3, r2, r3
 800dad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dadc:	4b13      	ldr	r3, [pc, #76]	@ (800db2c <_sbrk+0x64>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d102      	bne.n	800daea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800dae4:	4b11      	ldr	r3, [pc, #68]	@ (800db2c <_sbrk+0x64>)
 800dae6:	4a12      	ldr	r2, [pc, #72]	@ (800db30 <_sbrk+0x68>)
 800dae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800daea:	4b10      	ldr	r3, [pc, #64]	@ (800db2c <_sbrk+0x64>)
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	18d3      	adds	r3, r2, r3
 800daf2:	693a      	ldr	r2, [r7, #16]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d207      	bcs.n	800db08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800daf8:	f012 fb6e 	bl	80201d8 <__errno>
 800dafc:	0003      	movs	r3, r0
 800dafe:	220c      	movs	r2, #12
 800db00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800db02:	2301      	movs	r3, #1
 800db04:	425b      	negs	r3, r3
 800db06:	e009      	b.n	800db1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800db08:	4b08      	ldr	r3, [pc, #32]	@ (800db2c <_sbrk+0x64>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800db0e:	4b07      	ldr	r3, [pc, #28]	@ (800db2c <_sbrk+0x64>)
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	18d2      	adds	r2, r2, r3
 800db16:	4b05      	ldr	r3, [pc, #20]	@ (800db2c <_sbrk+0x64>)
 800db18:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800db1a:	68fb      	ldr	r3, [r7, #12]
}
 800db1c:	0018      	movs	r0, r3
 800db1e:	46bd      	mov	sp, r7
 800db20:	b006      	add	sp, #24
 800db22:	bd80      	pop	{r7, pc}
 800db24:	20005000 	.word	0x20005000
 800db28:	00000400 	.word	0x00000400
 800db2c:	20002204 	.word	0x20002204
 800db30:	200039b0 	.word	0x200039b0

0800db34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800db38:	46c0      	nop			@ (mov r8, r8)
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
	...

0800db40 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800db46:	2310      	movs	r3, #16
 800db48:	18fb      	adds	r3, r7, r3
 800db4a:	0018      	movs	r0, r3
 800db4c:	2308      	movs	r3, #8
 800db4e:	001a      	movs	r2, r3
 800db50:	2100      	movs	r1, #0
 800db52:	f012 fa9d 	bl	8020090 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800db56:	003b      	movs	r3, r7
 800db58:	0018      	movs	r0, r3
 800db5a:	2310      	movs	r3, #16
 800db5c:	001a      	movs	r2, r3
 800db5e:	2100      	movs	r1, #0
 800db60:	f012 fa96 	bl	8020090 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800db64:	4b2e      	ldr	r3, [pc, #184]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800db66:	2280      	movs	r2, #128	@ 0x80
 800db68:	05d2      	lsls	r2, r2, #23
 800db6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800db6c:	4b2c      	ldr	r3, [pc, #176]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800db6e:	2200      	movs	r2, #0
 800db70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db72:	4b2b      	ldr	r3, [pc, #172]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800db74:	2200      	movs	r2, #0
 800db76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800db78:	4b29      	ldr	r3, [pc, #164]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800db7a:	4a2a      	ldr	r2, [pc, #168]	@ (800dc24 <MX_TIM2_Init+0xe4>)
 800db7c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800db7e:	4b28      	ldr	r3, [pc, #160]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800db80:	2200      	movs	r2, #0
 800db82:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800db84:	4b26      	ldr	r3, [pc, #152]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800db86:	2200      	movs	r2, #0
 800db88:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800db8a:	4b25      	ldr	r3, [pc, #148]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800db8c:	0018      	movs	r0, r3
 800db8e:	f008 fe53 	bl	8016838 <HAL_TIM_PWM_Init>
 800db92:	1e03      	subs	r3, r0, #0
 800db94:	d001      	beq.n	800db9a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800db96:	f7fa fb87 	bl	80082a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800db9a:	2110      	movs	r1, #16
 800db9c:	187b      	adds	r3, r7, r1
 800db9e:	2200      	movs	r2, #0
 800dba0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dba2:	187b      	adds	r3, r7, r1
 800dba4:	2200      	movs	r2, #0
 800dba6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dba8:	187a      	adds	r2, r7, r1
 800dbaa:	4b1d      	ldr	r3, [pc, #116]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800dbac:	0011      	movs	r1, r2
 800dbae:	0018      	movs	r0, r3
 800dbb0:	f009 f960 	bl	8016e74 <HAL_TIMEx_MasterConfigSynchronization>
 800dbb4:	1e03      	subs	r3, r0, #0
 800dbb6:	d001      	beq.n	800dbbc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800dbb8:	f7fa fb76 	bl	80082a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dbbc:	003b      	movs	r3, r7
 800dbbe:	2260      	movs	r2, #96	@ 0x60
 800dbc0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800dbc2:	003b      	movs	r3, r7
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dbc8:	003b      	movs	r3, r7
 800dbca:	2200      	movs	r2, #0
 800dbcc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dbce:	003b      	movs	r3, r7
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dbd4:	0039      	movs	r1, r7
 800dbd6:	4b12      	ldr	r3, [pc, #72]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800dbd8:	2200      	movs	r2, #0
 800dbda:	0018      	movs	r0, r3
 800dbdc:	f008 fefe 	bl	80169dc <HAL_TIM_PWM_ConfigChannel>
 800dbe0:	1e03      	subs	r3, r0, #0
 800dbe2:	d001      	beq.n	800dbe8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800dbe4:	f7fa fb60 	bl	80082a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dbe8:	0039      	movs	r1, r7
 800dbea:	4b0d      	ldr	r3, [pc, #52]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800dbec:	2208      	movs	r2, #8
 800dbee:	0018      	movs	r0, r3
 800dbf0:	f008 fef4 	bl	80169dc <HAL_TIM_PWM_ConfigChannel>
 800dbf4:	1e03      	subs	r3, r0, #0
 800dbf6:	d001      	beq.n	800dbfc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800dbf8:	f7fa fb56 	bl	80082a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dbfc:	0039      	movs	r1, r7
 800dbfe:	4b08      	ldr	r3, [pc, #32]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800dc00:	220c      	movs	r2, #12
 800dc02:	0018      	movs	r0, r3
 800dc04:	f008 feea 	bl	80169dc <HAL_TIM_PWM_ConfigChannel>
 800dc08:	1e03      	subs	r3, r0, #0
 800dc0a:	d001      	beq.n	800dc10 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800dc0c:	f7fa fb4c 	bl	80082a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dc10:	4b03      	ldr	r3, [pc, #12]	@ (800dc20 <MX_TIM2_Init+0xe0>)
 800dc12:	0018      	movs	r0, r3
 800dc14:	f000 f8fe 	bl	800de14 <HAL_TIM_MspPostInit>

}
 800dc18:	46c0      	nop			@ (mov r8, r8)
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	b006      	add	sp, #24
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	20002208 	.word	0x20002208
 800dc24:	0000ffff 	.word	0x0000ffff

0800dc28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b086      	sub	sp, #24
 800dc2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc2e:	2310      	movs	r3, #16
 800dc30:	18fb      	adds	r3, r7, r3
 800dc32:	0018      	movs	r0, r3
 800dc34:	2308      	movs	r3, #8
 800dc36:	001a      	movs	r2, r3
 800dc38:	2100      	movs	r1, #0
 800dc3a:	f012 fa29 	bl	8020090 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc3e:	003b      	movs	r3, r7
 800dc40:	0018      	movs	r0, r3
 800dc42:	2310      	movs	r3, #16
 800dc44:	001a      	movs	r2, r3
 800dc46:	2100      	movs	r1, #0
 800dc48:	f012 fa22 	bl	8020090 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dc4c:	4b32      	ldr	r3, [pc, #200]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dc4e:	4a33      	ldr	r2, [pc, #204]	@ (800dd1c <MX_TIM3_Init+0xf4>)
 800dc50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dc52:	4b31      	ldr	r3, [pc, #196]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dc54:	2200      	movs	r2, #0
 800dc56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc58:	4b2f      	ldr	r3, [pc, #188]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800dc5e:	4b2e      	ldr	r3, [pc, #184]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dc60:	4a2f      	ldr	r2, [pc, #188]	@ (800dd20 <MX_TIM3_Init+0xf8>)
 800dc62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc64:	4b2c      	ldr	r3, [pc, #176]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc6a:	4b2b      	ldr	r3, [pc, #172]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800dc70:	4b29      	ldr	r3, [pc, #164]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dc72:	0018      	movs	r0, r3
 800dc74:	f008 fde0 	bl	8016838 <HAL_TIM_PWM_Init>
 800dc78:	1e03      	subs	r3, r0, #0
 800dc7a:	d001      	beq.n	800dc80 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800dc7c:	f7fa fb14 	bl	80082a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc80:	2110      	movs	r1, #16
 800dc82:	187b      	adds	r3, r7, r1
 800dc84:	2200      	movs	r2, #0
 800dc86:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc88:	187b      	adds	r3, r7, r1
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dc8e:	187a      	adds	r2, r7, r1
 800dc90:	4b21      	ldr	r3, [pc, #132]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dc92:	0011      	movs	r1, r2
 800dc94:	0018      	movs	r0, r3
 800dc96:	f009 f8ed 	bl	8016e74 <HAL_TIMEx_MasterConfigSynchronization>
 800dc9a:	1e03      	subs	r3, r0, #0
 800dc9c:	d001      	beq.n	800dca2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800dc9e:	f7fa fb03 	bl	80082a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dca2:	003b      	movs	r3, r7
 800dca4:	2260      	movs	r2, #96	@ 0x60
 800dca6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800dca8:	003b      	movs	r3, r7
 800dcaa:	2200      	movs	r2, #0
 800dcac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dcae:	003b      	movs	r3, r7
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dcb4:	003b      	movs	r3, r7
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dcba:	0039      	movs	r1, r7
 800dcbc:	4b16      	ldr	r3, [pc, #88]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	0018      	movs	r0, r3
 800dcc2:	f008 fe8b 	bl	80169dc <HAL_TIM_PWM_ConfigChannel>
 800dcc6:	1e03      	subs	r3, r0, #0
 800dcc8:	d001      	beq.n	800dcce <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800dcca:	f7fa faed 	bl	80082a8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800dcce:	4b12      	ldr	r3, [pc, #72]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dcd0:	2104      	movs	r1, #4
 800dcd2:	0018      	movs	r0, r3
 800dcd4:	f009 f92c 	bl	8016f30 <HAL_TIMEx_RemapConfig>
 800dcd8:	1e03      	subs	r3, r0, #0
 800dcda:	d001      	beq.n	800dce0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800dcdc:	f7fa fae4 	bl	80082a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dce0:	0039      	movs	r1, r7
 800dce2:	4b0d      	ldr	r3, [pc, #52]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dce4:	2204      	movs	r2, #4
 800dce6:	0018      	movs	r0, r3
 800dce8:	f008 fe78 	bl	80169dc <HAL_TIM_PWM_ConfigChannel>
 800dcec:	1e03      	subs	r3, r0, #0
 800dcee:	d001      	beq.n	800dcf4 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800dcf0:	f7fa fada 	bl	80082a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dcf4:	0039      	movs	r1, r7
 800dcf6:	4b08      	ldr	r3, [pc, #32]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dcf8:	2208      	movs	r2, #8
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	f008 fe6e 	bl	80169dc <HAL_TIM_PWM_ConfigChannel>
 800dd00:	1e03      	subs	r3, r0, #0
 800dd02:	d001      	beq.n	800dd08 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800dd04:	f7fa fad0 	bl	80082a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800dd08:	4b03      	ldr	r3, [pc, #12]	@ (800dd18 <MX_TIM3_Init+0xf0>)
 800dd0a:	0018      	movs	r0, r3
 800dd0c:	f000 f882 	bl	800de14 <HAL_TIM_MspPostInit>

}
 800dd10:	46c0      	nop			@ (mov r8, r8)
 800dd12:	46bd      	mov	sp, r7
 800dd14:	b006      	add	sp, #24
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	20002248 	.word	0x20002248
 800dd1c:	40000400 	.word	0x40000400
 800dd20:	0000ffff 	.word	0x0000ffff

0800dd24 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd2a:	003b      	movs	r3, r7
 800dd2c:	0018      	movs	r0, r3
 800dd2e:	2308      	movs	r3, #8
 800dd30:	001a      	movs	r2, r3
 800dd32:	2100      	movs	r1, #0
 800dd34:	f012 f9ac 	bl	8020090 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800dd38:	4b15      	ldr	r3, [pc, #84]	@ (800dd90 <MX_TIM6_Init+0x6c>)
 800dd3a:	4a16      	ldr	r2, [pc, #88]	@ (800dd94 <MX_TIM6_Init+0x70>)
 800dd3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800dd3e:	4b14      	ldr	r3, [pc, #80]	@ (800dd90 <MX_TIM6_Init+0x6c>)
 800dd40:	220a      	movs	r2, #10
 800dd42:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd44:	4b12      	ldr	r3, [pc, #72]	@ (800dd90 <MX_TIM6_Init+0x6c>)
 800dd46:	2200      	movs	r2, #0
 800dd48:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800dd4a:	4b11      	ldr	r3, [pc, #68]	@ (800dd90 <MX_TIM6_Init+0x6c>)
 800dd4c:	4a12      	ldr	r2, [pc, #72]	@ (800dd98 <MX_TIM6_Init+0x74>)
 800dd4e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd50:	4b0f      	ldr	r3, [pc, #60]	@ (800dd90 <MX_TIM6_Init+0x6c>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800dd56:	4b0e      	ldr	r3, [pc, #56]	@ (800dd90 <MX_TIM6_Init+0x6c>)
 800dd58:	0018      	movs	r0, r3
 800dd5a:	f008 fcc5 	bl	80166e8 <HAL_TIM_Base_Init>
 800dd5e:	1e03      	subs	r3, r0, #0
 800dd60:	d001      	beq.n	800dd66 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800dd62:	f7fa faa1 	bl	80082a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd66:	003b      	movs	r3, r7
 800dd68:	2200      	movs	r2, #0
 800dd6a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd6c:	003b      	movs	r3, r7
 800dd6e:	2200      	movs	r2, #0
 800dd70:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800dd72:	003a      	movs	r2, r7
 800dd74:	4b06      	ldr	r3, [pc, #24]	@ (800dd90 <MX_TIM6_Init+0x6c>)
 800dd76:	0011      	movs	r1, r2
 800dd78:	0018      	movs	r0, r3
 800dd7a:	f009 f87b 	bl	8016e74 <HAL_TIMEx_MasterConfigSynchronization>
 800dd7e:	1e03      	subs	r3, r0, #0
 800dd80:	d001      	beq.n	800dd86 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800dd82:	f7fa fa91 	bl	80082a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800dd86:	46c0      	nop			@ (mov r8, r8)
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	b002      	add	sp, #8
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	46c0      	nop			@ (mov r8, r8)
 800dd90:	20002288 	.word	0x20002288
 800dd94:	40001000 	.word	0x40001000
 800dd98:	0000ffff 	.word	0x0000ffff

0800dd9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	2380      	movs	r3, #128	@ 0x80
 800ddaa:	05db      	lsls	r3, r3, #23
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d106      	bne.n	800ddbe <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ddb0:	4b0a      	ldr	r3, [pc, #40]	@ (800dddc <HAL_TIM_PWM_MspInit+0x40>)
 800ddb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddb4:	4b09      	ldr	r3, [pc, #36]	@ (800dddc <HAL_TIM_PWM_MspInit+0x40>)
 800ddb6:	2101      	movs	r1, #1
 800ddb8:	430a      	orrs	r2, r1
 800ddba:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800ddbc:	e00a      	b.n	800ddd4 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a07      	ldr	r2, [pc, #28]	@ (800dde0 <HAL_TIM_PWM_MspInit+0x44>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d105      	bne.n	800ddd4 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ddc8:	4b04      	ldr	r3, [pc, #16]	@ (800dddc <HAL_TIM_PWM_MspInit+0x40>)
 800ddca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddcc:	4b03      	ldr	r3, [pc, #12]	@ (800dddc <HAL_TIM_PWM_MspInit+0x40>)
 800ddce:	2102      	movs	r1, #2
 800ddd0:	430a      	orrs	r2, r1
 800ddd2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800ddd4:	46c0      	nop			@ (mov r8, r8)
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	b002      	add	sp, #8
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	40021000 	.word	0x40021000
 800dde0:	40000400 	.word	0x40000400

0800dde4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a06      	ldr	r2, [pc, #24]	@ (800de0c <HAL_TIM_Base_MspInit+0x28>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d105      	bne.n	800de02 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800ddf6:	4b06      	ldr	r3, [pc, #24]	@ (800de10 <HAL_TIM_Base_MspInit+0x2c>)
 800ddf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddfa:	4b05      	ldr	r3, [pc, #20]	@ (800de10 <HAL_TIM_Base_MspInit+0x2c>)
 800ddfc:	2110      	movs	r1, #16
 800ddfe:	430a      	orrs	r2, r1
 800de00:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800de02:	46c0      	nop			@ (mov r8, r8)
 800de04:	46bd      	mov	sp, r7
 800de06:	b002      	add	sp, #8
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	46c0      	nop			@ (mov r8, r8)
 800de0c:	40001000 	.word	0x40001000
 800de10:	40021000 	.word	0x40021000

0800de14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800de14:	b590      	push	{r4, r7, lr}
 800de16:	b08b      	sub	sp, #44	@ 0x2c
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de1c:	2414      	movs	r4, #20
 800de1e:	193b      	adds	r3, r7, r4
 800de20:	0018      	movs	r0, r3
 800de22:	2314      	movs	r3, #20
 800de24:	001a      	movs	r2, r3
 800de26:	2100      	movs	r1, #0
 800de28:	f012 f932 	bl	8020090 <memset>
  if(timHandle->Instance==TIM2)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681a      	ldr	r2, [r3, #0]
 800de30:	2380      	movs	r3, #128	@ 0x80
 800de32:	05db      	lsls	r3, r3, #23
 800de34:	429a      	cmp	r2, r3
 800de36:	d123      	bne.n	800de80 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de38:	4b27      	ldr	r3, [pc, #156]	@ (800ded8 <HAL_TIM_MspPostInit+0xc4>)
 800de3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de3c:	4b26      	ldr	r3, [pc, #152]	@ (800ded8 <HAL_TIM_MspPostInit+0xc4>)
 800de3e:	2101      	movs	r1, #1
 800de40:	430a      	orrs	r2, r1
 800de42:	62da      	str	r2, [r3, #44]	@ 0x2c
 800de44:	4b24      	ldr	r3, [pc, #144]	@ (800ded8 <HAL_TIM_MspPostInit+0xc4>)
 800de46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de48:	2201      	movs	r2, #1
 800de4a:	4013      	ands	r3, r2
 800de4c:	613b      	str	r3, [r7, #16]
 800de4e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800de50:	0021      	movs	r1, r4
 800de52:	187b      	adds	r3, r7, r1
 800de54:	220d      	movs	r2, #13
 800de56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de58:	187b      	adds	r3, r7, r1
 800de5a:	2202      	movs	r2, #2
 800de5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de5e:	187b      	adds	r3, r7, r1
 800de60:	2200      	movs	r2, #0
 800de62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de64:	187b      	adds	r3, r7, r1
 800de66:	2200      	movs	r2, #0
 800de68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800de6a:	187b      	adds	r3, r7, r1
 800de6c:	2202      	movs	r2, #2
 800de6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de70:	187a      	adds	r2, r7, r1
 800de72:	23a0      	movs	r3, #160	@ 0xa0
 800de74:	05db      	lsls	r3, r3, #23
 800de76:	0011      	movs	r1, r2
 800de78:	0018      	movs	r0, r3
 800de7a:	f001 ffa7 	bl	800fdcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800de7e:	e027      	b.n	800ded0 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a15      	ldr	r2, [pc, #84]	@ (800dedc <HAL_TIM_MspPostInit+0xc8>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d122      	bne.n	800ded0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800de8a:	4b13      	ldr	r3, [pc, #76]	@ (800ded8 <HAL_TIM_MspPostInit+0xc4>)
 800de8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de8e:	4b12      	ldr	r3, [pc, #72]	@ (800ded8 <HAL_TIM_MspPostInit+0xc4>)
 800de90:	2104      	movs	r1, #4
 800de92:	430a      	orrs	r2, r1
 800de94:	62da      	str	r2, [r3, #44]	@ 0x2c
 800de96:	4b10      	ldr	r3, [pc, #64]	@ (800ded8 <HAL_TIM_MspPostInit+0xc4>)
 800de98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de9a:	2204      	movs	r2, #4
 800de9c:	4013      	ands	r3, r2
 800de9e:	60fb      	str	r3, [r7, #12]
 800dea0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800dea2:	2114      	movs	r1, #20
 800dea4:	187b      	adds	r3, r7, r1
 800dea6:	22e0      	movs	r2, #224	@ 0xe0
 800dea8:	0052      	lsls	r2, r2, #1
 800deaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deac:	187b      	adds	r3, r7, r1
 800deae:	2202      	movs	r2, #2
 800deb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deb2:	187b      	adds	r3, r7, r1
 800deb4:	2200      	movs	r2, #0
 800deb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800deb8:	187b      	adds	r3, r7, r1
 800deba:	2200      	movs	r2, #0
 800debc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800debe:	187b      	adds	r3, r7, r1
 800dec0:	2202      	movs	r2, #2
 800dec2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dec4:	187b      	adds	r3, r7, r1
 800dec6:	4a06      	ldr	r2, [pc, #24]	@ (800dee0 <HAL_TIM_MspPostInit+0xcc>)
 800dec8:	0019      	movs	r1, r3
 800deca:	0010      	movs	r0, r2
 800decc:	f001 ff7e 	bl	800fdcc <HAL_GPIO_Init>
}
 800ded0:	46c0      	nop			@ (mov r8, r8)
 800ded2:	46bd      	mov	sp, r7
 800ded4:	b00b      	add	sp, #44	@ 0x2c
 800ded6:	bd90      	pop	{r4, r7, pc}
 800ded8:	40021000 	.word	0x40021000
 800dedc:	40000400 	.word	0x40000400
 800dee0:	50000800 	.word	0x50000800

0800dee4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800dee8:	4b17      	ldr	r3, [pc, #92]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800deea:	4a18      	ldr	r2, [pc, #96]	@ (800df4c <MX_LPUART1_UART_Init+0x68>)
 800deec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800deee:	4b16      	ldr	r3, [pc, #88]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800def0:	22e1      	movs	r2, #225	@ 0xe1
 800def2:	0252      	lsls	r2, r2, #9
 800def4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800def6:	4b14      	ldr	r3, [pc, #80]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800def8:	2200      	movs	r2, #0
 800defa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800defc:	4b12      	ldr	r3, [pc, #72]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800defe:	2200      	movs	r2, #0
 800df00:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800df02:	4b11      	ldr	r3, [pc, #68]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800df04:	2200      	movs	r2, #0
 800df06:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800df08:	4b0f      	ldr	r3, [pc, #60]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800df0a:	220c      	movs	r2, #12
 800df0c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df0e:	4b0e      	ldr	r3, [pc, #56]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800df10:	2200      	movs	r2, #0
 800df12:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800df14:	4b0c      	ldr	r3, [pc, #48]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800df16:	2200      	movs	r2, #0
 800df18:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800df1a:	4b0b      	ldr	r3, [pc, #44]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800df1c:	2218      	movs	r2, #24
 800df1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800df20:	4b09      	ldr	r3, [pc, #36]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800df22:	2280      	movs	r2, #128	@ 0x80
 800df24:	0212      	lsls	r2, r2, #8
 800df26:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800df28:	4b07      	ldr	r3, [pc, #28]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800df2a:	2280      	movs	r2, #128	@ 0x80
 800df2c:	0152      	lsls	r2, r2, #5
 800df2e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800df30:	4b05      	ldr	r3, [pc, #20]	@ (800df48 <MX_LPUART1_UART_Init+0x64>)
 800df32:	0018      	movs	r0, r3
 800df34:	f009 f81a 	bl	8016f6c <HAL_UART_Init>
 800df38:	1e03      	subs	r3, r0, #0
 800df3a:	d001      	beq.n	800df40 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800df3c:	f7fa f9b4 	bl	80082a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800df40:	46c0      	nop			@ (mov r8, r8)
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	46c0      	nop			@ (mov r8, r8)
 800df48:	200022c8 	.word	0x200022c8
 800df4c:	40004800 	.word	0x40004800

0800df50 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800df54:	4b16      	ldr	r3, [pc, #88]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df56:	4a17      	ldr	r2, [pc, #92]	@ (800dfb4 <MX_USART1_UART_Init+0x64>)
 800df58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800df5a:	4b15      	ldr	r3, [pc, #84]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df5c:	22e1      	movs	r2, #225	@ 0xe1
 800df5e:	0252      	lsls	r2, r2, #9
 800df60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800df62:	4b13      	ldr	r3, [pc, #76]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df64:	2200      	movs	r2, #0
 800df66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800df68:	4b11      	ldr	r3, [pc, #68]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df6a:	2200      	movs	r2, #0
 800df6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800df6e:	4b10      	ldr	r3, [pc, #64]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df70:	2200      	movs	r2, #0
 800df72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800df74:	4b0e      	ldr	r3, [pc, #56]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df76:	220c      	movs	r2, #12
 800df78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df7a:	4b0d      	ldr	r3, [pc, #52]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df7c:	2200      	movs	r2, #0
 800df7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800df80:	4b0b      	ldr	r3, [pc, #44]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df82:	2200      	movs	r2, #0
 800df84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800df86:	4b0a      	ldr	r3, [pc, #40]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df88:	2200      	movs	r2, #0
 800df8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800df8c:	4b08      	ldr	r3, [pc, #32]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df8e:	2208      	movs	r2, #8
 800df90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800df92:	4b07      	ldr	r3, [pc, #28]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df94:	2280      	movs	r2, #128	@ 0x80
 800df96:	0212      	lsls	r2, r2, #8
 800df98:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800df9a:	4b05      	ldr	r3, [pc, #20]	@ (800dfb0 <MX_USART1_UART_Init+0x60>)
 800df9c:	0018      	movs	r0, r3
 800df9e:	f008 ffe5 	bl	8016f6c <HAL_UART_Init>
 800dfa2:	1e03      	subs	r3, r0, #0
 800dfa4:	d001      	beq.n	800dfaa <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800dfa6:	f7fa f97f 	bl	80082a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800dfaa:	46c0      	nop			@ (mov r8, r8)
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	20002380 	.word	0x20002380
 800dfb4:	40013800 	.word	0x40013800

0800dfb8 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800dfbc:	4b14      	ldr	r3, [pc, #80]	@ (800e010 <MX_USART4_UART_Init+0x58>)
 800dfbe:	4a15      	ldr	r2, [pc, #84]	@ (800e014 <MX_USART4_UART_Init+0x5c>)
 800dfc0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800dfc2:	4b13      	ldr	r3, [pc, #76]	@ (800e010 <MX_USART4_UART_Init+0x58>)
 800dfc4:	22e1      	movs	r2, #225	@ 0xe1
 800dfc6:	0252      	lsls	r2, r2, #9
 800dfc8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800dfca:	4b11      	ldr	r3, [pc, #68]	@ (800e010 <MX_USART4_UART_Init+0x58>)
 800dfcc:	2200      	movs	r2, #0
 800dfce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800dfd0:	4b0f      	ldr	r3, [pc, #60]	@ (800e010 <MX_USART4_UART_Init+0x58>)
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800dfd6:	4b0e      	ldr	r3, [pc, #56]	@ (800e010 <MX_USART4_UART_Init+0x58>)
 800dfd8:	2200      	movs	r2, #0
 800dfda:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800dfdc:	4b0c      	ldr	r3, [pc, #48]	@ (800e010 <MX_USART4_UART_Init+0x58>)
 800dfde:	220c      	movs	r2, #12
 800dfe0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dfe2:	4b0b      	ldr	r3, [pc, #44]	@ (800e010 <MX_USART4_UART_Init+0x58>)
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dfe8:	4b09      	ldr	r3, [pc, #36]	@ (800e010 <MX_USART4_UART_Init+0x58>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dfee:	4b08      	ldr	r3, [pc, #32]	@ (800e010 <MX_USART4_UART_Init+0x58>)
 800dff0:	2200      	movs	r2, #0
 800dff2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dff4:	4b06      	ldr	r3, [pc, #24]	@ (800e010 <MX_USART4_UART_Init+0x58>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800dffa:	4b05      	ldr	r3, [pc, #20]	@ (800e010 <MX_USART4_UART_Init+0x58>)
 800dffc:	0018      	movs	r0, r3
 800dffe:	f008 ffb5 	bl	8016f6c <HAL_UART_Init>
 800e002:	1e03      	subs	r3, r0, #0
 800e004:	d001      	beq.n	800e00a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e006:	f7fa f94f 	bl	80082a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e00a:	46c0      	nop			@ (mov r8, r8)
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	20002438 	.word	0x20002438
 800e014:	40004c00 	.word	0x40004c00

0800e018 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e018:	b590      	push	{r4, r7, lr}
 800e01a:	b08d      	sub	sp, #52	@ 0x34
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e020:	241c      	movs	r4, #28
 800e022:	193b      	adds	r3, r7, r4
 800e024:	0018      	movs	r0, r3
 800e026:	2314      	movs	r3, #20
 800e028:	001a      	movs	r2, r3
 800e02a:	2100      	movs	r1, #0
 800e02c:	f012 f830 	bl	8020090 <memset>
  if(uartHandle->Instance==LPUART1)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a8b      	ldr	r2, [pc, #556]	@ (800e264 <HAL_UART_MspInit+0x24c>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d129      	bne.n	800e08e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e03a:	4b8b      	ldr	r3, [pc, #556]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e03c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e03e:	4b8a      	ldr	r3, [pc, #552]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e040:	2180      	movs	r1, #128	@ 0x80
 800e042:	02c9      	lsls	r1, r1, #11
 800e044:	430a      	orrs	r2, r1
 800e046:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e048:	4b87      	ldr	r3, [pc, #540]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e04a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e04c:	4b86      	ldr	r3, [pc, #536]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e04e:	2104      	movs	r1, #4
 800e050:	430a      	orrs	r2, r1
 800e052:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e054:	4b84      	ldr	r3, [pc, #528]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e058:	2204      	movs	r2, #4
 800e05a:	4013      	ands	r3, r2
 800e05c:	61bb      	str	r3, [r7, #24]
 800e05e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e060:	0021      	movs	r1, r4
 800e062:	187b      	adds	r3, r7, r1
 800e064:	2203      	movs	r2, #3
 800e066:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e068:	187b      	adds	r3, r7, r1
 800e06a:	2202      	movs	r2, #2
 800e06c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e06e:	187b      	adds	r3, r7, r1
 800e070:	2200      	movs	r2, #0
 800e072:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e074:	187b      	adds	r3, r7, r1
 800e076:	2203      	movs	r2, #3
 800e078:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e07a:	187b      	adds	r3, r7, r1
 800e07c:	2206      	movs	r2, #6
 800e07e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e080:	187b      	adds	r3, r7, r1
 800e082:	4a7a      	ldr	r2, [pc, #488]	@ (800e26c <HAL_UART_MspInit+0x254>)
 800e084:	0019      	movs	r1, r3
 800e086:	0010      	movs	r0, r2
 800e088:	f001 fea0 	bl	800fdcc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e08c:	e0e5      	b.n	800e25a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4a77      	ldr	r2, [pc, #476]	@ (800e270 <HAL_UART_MspInit+0x258>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d133      	bne.n	800e100 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e098:	4b73      	ldr	r3, [pc, #460]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e09a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e09c:	4b72      	ldr	r3, [pc, #456]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e09e:	2180      	movs	r1, #128	@ 0x80
 800e0a0:	01c9      	lsls	r1, r1, #7
 800e0a2:	430a      	orrs	r2, r1
 800e0a4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0a6:	4b70      	ldr	r3, [pc, #448]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e0a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0aa:	4b6f      	ldr	r3, [pc, #444]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	430a      	orrs	r2, r1
 800e0b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e0b2:	4b6d      	ldr	r3, [pc, #436]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	4013      	ands	r3, r2
 800e0ba:	617b      	str	r3, [r7, #20]
 800e0bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e0be:	211c      	movs	r1, #28
 800e0c0:	187b      	adds	r3, r7, r1
 800e0c2:	22c0      	movs	r2, #192	@ 0xc0
 800e0c4:	00d2      	lsls	r2, r2, #3
 800e0c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0c8:	187b      	adds	r3, r7, r1
 800e0ca:	2202      	movs	r2, #2
 800e0cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0ce:	187b      	adds	r3, r7, r1
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0d4:	187b      	adds	r3, r7, r1
 800e0d6:	2203      	movs	r2, #3
 800e0d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e0da:	187b      	adds	r3, r7, r1
 800e0dc:	2204      	movs	r2, #4
 800e0de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0e0:	187a      	adds	r2, r7, r1
 800e0e2:	23a0      	movs	r3, #160	@ 0xa0
 800e0e4:	05db      	lsls	r3, r3, #23
 800e0e6:	0011      	movs	r1, r2
 800e0e8:	0018      	movs	r0, r3
 800e0ea:	f001 fe6f 	bl	800fdcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	201b      	movs	r0, #27
 800e0f4:	f001 fa18 	bl	800f528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e0f8:	201b      	movs	r0, #27
 800e0fa:	f001 fa2a 	bl	800f552 <HAL_NVIC_EnableIRQ>
}
 800e0fe:	e0ac      	b.n	800e25a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4a5b      	ldr	r2, [pc, #364]	@ (800e274 <HAL_UART_MspInit+0x25c>)
 800e106:	4293      	cmp	r3, r2
 800e108:	d000      	beq.n	800e10c <HAL_UART_MspInit+0xf4>
 800e10a:	e0a6      	b.n	800e25a <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e10c:	4b56      	ldr	r3, [pc, #344]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e10e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e110:	4b55      	ldr	r3, [pc, #340]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e112:	2180      	movs	r1, #128	@ 0x80
 800e114:	0309      	lsls	r1, r1, #12
 800e116:	430a      	orrs	r2, r1
 800e118:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e11a:	4b53      	ldr	r3, [pc, #332]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e11c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e11e:	4b52      	ldr	r3, [pc, #328]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e120:	2101      	movs	r1, #1
 800e122:	430a      	orrs	r2, r1
 800e124:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e126:	4b50      	ldr	r3, [pc, #320]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e12a:	2201      	movs	r2, #1
 800e12c:	4013      	ands	r3, r2
 800e12e:	613b      	str	r3, [r7, #16]
 800e130:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e132:	4b4d      	ldr	r3, [pc, #308]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e136:	4b4c      	ldr	r3, [pc, #304]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e138:	2104      	movs	r1, #4
 800e13a:	430a      	orrs	r2, r1
 800e13c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e13e:	4b4a      	ldr	r3, [pc, #296]	@ (800e268 <HAL_UART_MspInit+0x250>)
 800e140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e142:	2204      	movs	r2, #4
 800e144:	4013      	ands	r3, r2
 800e146:	60fb      	str	r3, [r7, #12]
 800e148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e14a:	241c      	movs	r4, #28
 800e14c:	193b      	adds	r3, r7, r4
 800e14e:	2202      	movs	r2, #2
 800e150:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e152:	193b      	adds	r3, r7, r4
 800e154:	2202      	movs	r2, #2
 800e156:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e158:	193b      	adds	r3, r7, r4
 800e15a:	2200      	movs	r2, #0
 800e15c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e15e:	193b      	adds	r3, r7, r4
 800e160:	2203      	movs	r2, #3
 800e162:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e164:	193b      	adds	r3, r7, r4
 800e166:	2206      	movs	r2, #6
 800e168:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e16a:	193a      	adds	r2, r7, r4
 800e16c:	23a0      	movs	r3, #160	@ 0xa0
 800e16e:	05db      	lsls	r3, r3, #23
 800e170:	0011      	movs	r1, r2
 800e172:	0018      	movs	r0, r3
 800e174:	f001 fe2a 	bl	800fdcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e178:	0021      	movs	r1, r4
 800e17a:	187b      	adds	r3, r7, r1
 800e17c:	2280      	movs	r2, #128	@ 0x80
 800e17e:	00d2      	lsls	r2, r2, #3
 800e180:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e182:	187b      	adds	r3, r7, r1
 800e184:	2202      	movs	r2, #2
 800e186:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e188:	187b      	adds	r3, r7, r1
 800e18a:	2200      	movs	r2, #0
 800e18c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e18e:	187b      	adds	r3, r7, r1
 800e190:	2203      	movs	r2, #3
 800e192:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e194:	187b      	adds	r3, r7, r1
 800e196:	2206      	movs	r2, #6
 800e198:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e19a:	187b      	adds	r3, r7, r1
 800e19c:	4a33      	ldr	r2, [pc, #204]	@ (800e26c <HAL_UART_MspInit+0x254>)
 800e19e:	0019      	movs	r1, r3
 800e1a0:	0010      	movs	r0, r2
 800e1a2:	f001 fe13 	bl	800fdcc <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e1a6:	4b34      	ldr	r3, [pc, #208]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1a8:	4a34      	ldr	r2, [pc, #208]	@ (800e27c <HAL_UART_MspInit+0x264>)
 800e1aa:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e1ac:	4b32      	ldr	r3, [pc, #200]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1ae:	220c      	movs	r2, #12
 800e1b0:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e1b2:	4b31      	ldr	r3, [pc, #196]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e1b8:	4b2f      	ldr	r3, [pc, #188]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e1be:	4b2e      	ldr	r3, [pc, #184]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1c0:	2280      	movs	r2, #128	@ 0x80
 800e1c2:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e1c4:	4b2c      	ldr	r3, [pc, #176]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e1ca:	4b2b      	ldr	r3, [pc, #172]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e1d0:	4b29      	ldr	r3, [pc, #164]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1d2:	2220      	movs	r2, #32
 800e1d4:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e1d6:	4b28      	ldr	r3, [pc, #160]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e1dc:	4b26      	ldr	r3, [pc, #152]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1de:	0018      	movs	r0, r3
 800e1e0:	f001 f9d8 	bl	800f594 <HAL_DMA_Init>
 800e1e4:	1e03      	subs	r3, r0, #0
 800e1e6:	d001      	beq.n	800e1ec <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e1e8:	f7fa f85e 	bl	80082a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4a22      	ldr	r2, [pc, #136]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1f0:	675a      	str	r2, [r3, #116]	@ 0x74
 800e1f2:	4b21      	ldr	r3, [pc, #132]	@ (800e278 <HAL_UART_MspInit+0x260>)
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e1f8:	4b21      	ldr	r3, [pc, #132]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e1fa:	4a22      	ldr	r2, [pc, #136]	@ (800e284 <HAL_UART_MspInit+0x26c>)
 800e1fc:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e1fe:	4b20      	ldr	r3, [pc, #128]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e200:	220c      	movs	r2, #12
 800e202:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e204:	4b1e      	ldr	r3, [pc, #120]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e206:	2210      	movs	r2, #16
 800e208:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e20a:	4b1d      	ldr	r3, [pc, #116]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e20c:	2200      	movs	r2, #0
 800e20e:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e210:	4b1b      	ldr	r3, [pc, #108]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e212:	2280      	movs	r2, #128	@ 0x80
 800e214:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e216:	4b1a      	ldr	r3, [pc, #104]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e218:	2200      	movs	r2, #0
 800e21a:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e21c:	4b18      	ldr	r3, [pc, #96]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e21e:	2200      	movs	r2, #0
 800e220:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e222:	4b17      	ldr	r3, [pc, #92]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e224:	2200      	movs	r2, #0
 800e226:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e228:	4b15      	ldr	r3, [pc, #84]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e22a:	2200      	movs	r2, #0
 800e22c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e22e:	4b14      	ldr	r3, [pc, #80]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e230:	0018      	movs	r0, r3
 800e232:	f001 f9af 	bl	800f594 <HAL_DMA_Init>
 800e236:	1e03      	subs	r3, r0, #0
 800e238:	d001      	beq.n	800e23e <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e23a:	f7fa f835 	bl	80082a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4a0f      	ldr	r2, [pc, #60]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e242:	671a      	str	r2, [r3, #112]	@ 0x70
 800e244:	4b0e      	ldr	r3, [pc, #56]	@ (800e280 <HAL_UART_MspInit+0x268>)
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e24a:	2200      	movs	r2, #0
 800e24c:	2100      	movs	r1, #0
 800e24e:	200e      	movs	r0, #14
 800e250:	f001 f96a 	bl	800f528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e254:	200e      	movs	r0, #14
 800e256:	f001 f97c 	bl	800f552 <HAL_NVIC_EnableIRQ>
}
 800e25a:	46c0      	nop			@ (mov r8, r8)
 800e25c:	46bd      	mov	sp, r7
 800e25e:	b00d      	add	sp, #52	@ 0x34
 800e260:	bd90      	pop	{r4, r7, pc}
 800e262:	46c0      	nop			@ (mov r8, r8)
 800e264:	40004800 	.word	0x40004800
 800e268:	40021000 	.word	0x40021000
 800e26c:	50000800 	.word	0x50000800
 800e270:	40013800 	.word	0x40013800
 800e274:	40004c00 	.word	0x40004c00
 800e278:	200024f0 	.word	0x200024f0
 800e27c:	4002006c 	.word	0x4002006c
 800e280:	20002538 	.word	0x20002538
 800e284:	40020080 	.word	0x40020080

0800e288 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e288:	b580      	push	{r7, lr}
 800e28a:	b086      	sub	sp, #24
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e290:	f000 fca6 	bl	800ebe0 <HAL_GetTick>
 800e294:	0003      	movs	r3, r0
 800e296:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e298:	4b1c      	ldr	r3, [pc, #112]	@ (800e30c <TimestampIsReached+0x84>)
 800e29a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e29c:	697a      	ldr	r2, [r7, #20]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d307      	bcc.n	800e2b4 <TimestampIsReached+0x2c>
 800e2a4:	697a      	ldr	r2, [r7, #20]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	693a      	ldr	r2, [r7, #16]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d901      	bls.n	800e2b4 <TimestampIsReached+0x2c>
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	e000      	b.n	800e2b6 <TimestampIsReached+0x2e>
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	230f      	movs	r3, #15
 800e2b8:	18fb      	adds	r3, r7, r3
 800e2ba:	701a      	strb	r2, [r3, #0]
 800e2bc:	781a      	ldrb	r2, [r3, #0]
 800e2be:	2101      	movs	r1, #1
 800e2c0:	400a      	ands	r2, r1
 800e2c2:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e2c4:	697a      	ldr	r2, [r7, #20]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d207      	bcs.n	800e2dc <TimestampIsReached+0x54>
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	693a      	ldr	r2, [r7, #16]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d201      	bcs.n	800e2dc <TimestampIsReached+0x54>
 800e2d8:	2201      	movs	r2, #1
 800e2da:	e000      	b.n	800e2de <TimestampIsReached+0x56>
 800e2dc:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e2de:	200e      	movs	r0, #14
 800e2e0:	183b      	adds	r3, r7, r0
 800e2e2:	701a      	strb	r2, [r3, #0]
 800e2e4:	781a      	ldrb	r2, [r3, #0]
 800e2e6:	2101      	movs	r1, #1
 800e2e8:	400a      	ands	r2, r1
 800e2ea:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e2ec:	230f      	movs	r3, #15
 800e2ee:	18fb      	adds	r3, r7, r3
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d103      	bne.n	800e2fe <TimestampIsReached+0x76>
 800e2f6:	183b      	adds	r3, r7, r0
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d001      	beq.n	800e302 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e2fe:	2301      	movs	r3, #1
 800e300:	e000      	b.n	800e304 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e302:	2300      	movs	r3, #0
}
 800e304:	0018      	movs	r0, r3
 800e306:	46bd      	mov	sp, r7
 800e308:	b006      	add	sp, #24
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	7fffffff 	.word	0x7fffffff

0800e310 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e318:	f000 fc62 	bl	800ebe0 <HAL_GetTick>
 800e31c:	0002      	movs	r2, r0
 800e31e:	4904      	ldr	r1, [pc, #16]	@ (800e330 <AddTimestamp+0x20>)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	0018      	movs	r0, r3
 800e324:	f011 fd70 	bl	801fe08 <siprintf>
}
 800e328:	46c0      	nop			@ (mov r8, r8)
 800e32a:	46bd      	mov	sp, r7
 800e32c:	b002      	add	sp, #8
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	08024e30 	.word	0x08024e30

0800e334 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e334:	b40c      	push	{r2, r3}
 800e336:	b5b0      	push	{r4, r5, r7, lr}
 800e338:	b0a4      	sub	sp, #144	@ 0x90
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	0002      	movs	r2, r0
 800e33e:	6039      	str	r1, [r7, #0]
 800e340:	1dfb      	adds	r3, r7, #7
 800e342:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e344:	4b23      	ldr	r3, [pc, #140]	@ (800e3d4 <CreateLine+0xa0>)
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	1dfa      	adds	r2, r7, #7
 800e34a:	7812      	ldrb	r2, [r2, #0]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d839      	bhi.n	800e3c4 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	4921      	ldr	r1, [pc, #132]	@ (800e3d8 <CreateLine+0xa4>)
 800e354:	240c      	movs	r4, #12
 800e356:	193b      	adds	r3, r7, r4
 800e358:	0018      	movs	r0, r3
 800e35a:	f011 fd55 	bl	801fe08 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e35e:	4b1d      	ldr	r3, [pc, #116]	@ (800e3d4 <CreateLine+0xa0>)
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	2b01      	cmp	r3, #1
 800e364:	d909      	bls.n	800e37a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e366:	193b      	adds	r3, r7, r4
 800e368:	0018      	movs	r0, r3
 800e36a:	f7f1 feff 	bl	800016c <strlen>
 800e36e:	0002      	movs	r2, r0
 800e370:	193b      	adds	r3, r7, r4
 800e372:	189b      	adds	r3, r3, r2
 800e374:	0018      	movs	r0, r3
 800e376:	f7ff ffcb 	bl	800e310 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800e37a:	240c      	movs	r4, #12
 800e37c:	193b      	adds	r3, r7, r4
 800e37e:	0018      	movs	r0, r3
 800e380:	f7f1 fef4 	bl	800016c <strlen>
 800e384:	0003      	movs	r3, r0
 800e386:	218c      	movs	r1, #140	@ 0x8c
 800e388:	187a      	adds	r2, r7, r1
 800e38a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800e38c:	239c      	movs	r3, #156	@ 0x9c
 800e38e:	2508      	movs	r5, #8
 800e390:	195b      	adds	r3, r3, r5
 800e392:	19db      	adds	r3, r3, r7
 800e394:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800e396:	193a      	adds	r2, r7, r4
 800e398:	187b      	adds	r3, r7, r1
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	18d0      	adds	r0, r2, r3
 800e39e:	187b      	adds	r3, r7, r1
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2280      	movs	r2, #128	@ 0x80
 800e3a4:	1ad3      	subs	r3, r2, r3
 800e3a6:	0019      	movs	r1, r3
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	2298      	movs	r2, #152	@ 0x98
 800e3ac:	1952      	adds	r2, r2, r5
 800e3ae:	19d2      	adds	r2, r2, r7
 800e3b0:	6812      	ldr	r2, [r2, #0]
 800e3b2:	f011 fdc1 	bl	801ff38 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800e3b6:	193a      	adds	r2, r7, r4
 800e3b8:	4b08      	ldr	r3, [pc, #32]	@ (800e3dc <CreateLine+0xa8>)
 800e3ba:	0011      	movs	r1, r2
 800e3bc:	0018      	movs	r0, r3
 800e3be:	f011 fcb3 	bl	801fd28 <iprintf>
 800e3c2:	e000      	b.n	800e3c6 <CreateLine+0x92>
    return;
 800e3c4:	46c0      	nop			@ (mov r8, r8)
}
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	b024      	add	sp, #144	@ 0x90
 800e3ca:	bcb0      	pop	{r4, r5, r7}
 800e3cc:	bc08      	pop	{r3}
 800e3ce:	b002      	add	sp, #8
 800e3d0:	4718      	bx	r3
 800e3d2:	46c0      	nop			@ (mov r8, r8)
 800e3d4:	200000d0 	.word	0x200000d0
 800e3d8:	08024e3c 	.word	0x08024e3c
 800e3dc:	08024e40 	.word	0x08024e40

0800e3e0 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	60b9      	str	r1, [r7, #8]
 800e3ea:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	68b9      	ldr	r1, [r7, #8]
 800e3f2:	4804      	ldr	r0, [pc, #16]	@ (800e404 <_write+0x24>)
 800e3f4:	2364      	movs	r3, #100	@ 0x64
 800e3f6:	f008 fe1f 	bl	8017038 <HAL_UART_Transmit>
  return count;
 800e3fa:	687b      	ldr	r3, [r7, #4]
}
 800e3fc:	0018      	movs	r0, r3
 800e3fe:	46bd      	mov	sp, r7
 800e400:	b004      	add	sp, #16
 800e402:	bd80      	pop	{r7, pc}
 800e404:	20002380 	.word	0x20002380

0800e408 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	0002      	movs	r2, r0
 800e410:	1dfb      	adds	r3, r7, #7
 800e412:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800e414:	4b03      	ldr	r3, [pc, #12]	@ (800e424 <SetVerboseLevel+0x1c>)
 800e416:	1dfa      	adds	r2, r7, #7
 800e418:	7812      	ldrb	r2, [r2, #0]
 800e41a:	701a      	strb	r2, [r3, #0]
}
 800e41c:	46c0      	nop			@ (mov r8, r8)
 800e41e:	46bd      	mov	sp, r7
 800e420:	b002      	add	sp, #8
 800e422:	bd80      	pop	{r7, pc}
 800e424:	200000d0 	.word	0x200000d0

0800e428 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800e428:	b580      	push	{r7, lr}
 800e42a:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800e42c:	4b02      	ldr	r3, [pc, #8]	@ (800e438 <GetVerboseLevel+0x10>)
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	0018      	movs	r0, r3
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	46c0      	nop			@ (mov r8, r8)
 800e438:	200000d0 	.word	0x200000d0

0800e43c <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800e442:	4a0f      	ldr	r2, [pc, #60]	@ (800e480 <BinaryReleaseInfo+0x44>)
 800e444:	4b0f      	ldr	r3, [pc, #60]	@ (800e484 <BinaryReleaseInfo+0x48>)
 800e446:	0019      	movs	r1, r3
 800e448:	2002      	movs	r0, #2
 800e44a:	f7ff ff73 	bl	800e334 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800e44e:	480e      	ldr	r0, [pc, #56]	@ (800e488 <BinaryReleaseInfo+0x4c>)
 800e450:	4a0e      	ldr	r2, [pc, #56]	@ (800e48c <BinaryReleaseInfo+0x50>)
 800e452:	490c      	ldr	r1, [pc, #48]	@ (800e484 <BinaryReleaseInfo+0x48>)
 800e454:	4b0e      	ldr	r3, [pc, #56]	@ (800e490 <BinaryReleaseInfo+0x54>)
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	0003      	movs	r3, r0
 800e45a:	2002      	movs	r0, #2
 800e45c:	f7ff ff6a 	bl	800e334 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800e460:	4b0c      	ldr	r3, [pc, #48]	@ (800e494 <BinaryReleaseInfo+0x58>)
 800e462:	4a0d      	ldr	r2, [pc, #52]	@ (800e498 <BinaryReleaseInfo+0x5c>)
 800e464:	4907      	ldr	r1, [pc, #28]	@ (800e484 <BinaryReleaseInfo+0x48>)
 800e466:	2002      	movs	r0, #2
 800e468:	f7ff ff64 	bl	800e334 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800e46c:	4b0b      	ldr	r3, [pc, #44]	@ (800e49c <BinaryReleaseInfo+0x60>)
 800e46e:	4a0c      	ldr	r2, [pc, #48]	@ (800e4a0 <BinaryReleaseInfo+0x64>)
 800e470:	4904      	ldr	r1, [pc, #16]	@ (800e484 <BinaryReleaseInfo+0x48>)
 800e472:	2002      	movs	r0, #2
 800e474:	f7ff ff5e 	bl	800e334 <CreateLine>
}
 800e478:	46c0      	nop			@ (mov r8, r8)
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	46c0      	nop			@ (mov r8, r8)
 800e480:	08024e48 	.word	0x08024e48
 800e484:	08024e74 	.word	0x08024e74
 800e488:	08024e78 	.word	0x08024e78
 800e48c:	08024e84 	.word	0x08024e84
 800e490:	08024e98 	.word	0x08024e98
 800e494:	08024ea4 	.word	0x08024ea4
 800e498:	08024eb0 	.word	0x08024eb0
 800e49c:	08024eb8 	.word	0x08024eb8
 800e4a0:	08024ec0 	.word	0x08024ec0

0800e4a4 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	68ba      	ldr	r2, [r7, #8]
 800e4b4:	68f9      	ldr	r1, [r7, #12]
 800e4b6:	4803      	ldr	r0, [pc, #12]	@ (800e4c4 <errorHandler+0x20>)
 800e4b8:	f011 fc36 	bl	801fd28 <iprintf>
//    while (true)
//    {
//    }
}
 800e4bc:	46c0      	nop			@ (mov r8, r8)
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	b004      	add	sp, #16
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	08024ed8 	.word	0x08024ed8

0800e4c8 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e4c8:	b590      	push	{r4, r7, lr}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6039      	str	r1, [r7, #0]
 800e4d0:	0011      	movs	r1, r2
 800e4d2:	1dfb      	adds	r3, r7, #7
 800e4d4:	1c02      	adds	r2, r0, #0
 800e4d6:	701a      	strb	r2, [r3, #0]
 800e4d8:	1dbb      	adds	r3, r7, #6
 800e4da:	1c0a      	adds	r2, r1, #0
 800e4dc:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800e4de:	4b0a      	ldr	r3, [pc, #40]	@ (800e508 <ReadRegister+0x40>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00a      	beq.n	800e4fc <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800e4e6:	4b08      	ldr	r3, [pc, #32]	@ (800e508 <ReadRegister+0x40>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	1dba      	adds	r2, r7, #6
 800e4ec:	7814      	ldrb	r4, [r2, #0]
 800e4ee:	6839      	ldr	r1, [r7, #0]
 800e4f0:	1dfa      	adds	r2, r7, #7
 800e4f2:	7810      	ldrb	r0, [r2, #0]
 800e4f4:	0022      	movs	r2, r4
 800e4f6:	4798      	blx	r3
 800e4f8:	0003      	movs	r3, r0
 800e4fa:	e000      	b.n	800e4fe <ReadRegister+0x36>
	}
	return false;
 800e4fc:	2300      	movs	r3, #0
}
 800e4fe:	0018      	movs	r0, r3
 800e500:	46bd      	mov	sp, r7
 800e502:	b003      	add	sp, #12
 800e504:	bd90      	pop	{r4, r7, pc}
 800e506:	46c0      	nop			@ (mov r8, r8)
 800e508:	20002588 	.word	0x20002588

0800e50c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e50c:	b590      	push	{r4, r7, lr}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
 800e512:	6039      	str	r1, [r7, #0]
 800e514:	0011      	movs	r1, r2
 800e516:	1dfb      	adds	r3, r7, #7
 800e518:	1c02      	adds	r2, r0, #0
 800e51a:	701a      	strb	r2, [r3, #0]
 800e51c:	1dbb      	adds	r3, r7, #6
 800e51e:	1c0a      	adds	r2, r1, #0
 800e520:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e522:	4b0a      	ldr	r3, [pc, #40]	@ (800e54c <WriteRegister+0x40>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00a      	beq.n	800e540 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800e52a:	4b08      	ldr	r3, [pc, #32]	@ (800e54c <WriteRegister+0x40>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	1dba      	adds	r2, r7, #6
 800e530:	7814      	ldrb	r4, [r2, #0]
 800e532:	6839      	ldr	r1, [r7, #0]
 800e534:	1dfa      	adds	r2, r7, #7
 800e536:	7810      	ldrb	r0, [r2, #0]
 800e538:	0022      	movs	r2, r4
 800e53a:	4798      	blx	r3
 800e53c:	0003      	movs	r3, r0
 800e53e:	e000      	b.n	800e542 <WriteRegister+0x36>
  }
  return false;
 800e540:	2300      	movs	r3, #0
}
 800e542:	0018      	movs	r0, r3
 800e544:	46bd      	mov	sp, r7
 800e546:	b003      	add	sp, #12
 800e548:	bd90      	pop	{r4, r7, pc}
 800e54a:	46c0      	nop			@ (mov r8, r8)
 800e54c:	2000258c 	.word	0x2000258c

0800e550 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	000a      	movs	r2, r1
 800e55a:	1cfb      	adds	r3, r7, #3
 800e55c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800e55e:	230f      	movs	r3, #15
 800e560:	18fb      	adds	r3, r7, r3
 800e562:	22ff      	movs	r2, #255	@ 0xff
 800e564:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800e566:	230e      	movs	r3, #14
 800e568:	18fb      	adds	r3, r7, r3
 800e56a:	2200      	movs	r2, #0
 800e56c:	701a      	strb	r2, [r3, #0]
 800e56e:	e037      	b.n	800e5e0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800e570:	230e      	movs	r3, #14
 800e572:	18fb      	adds	r3, r7, r3
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	18d3      	adds	r3, r2, r3
 800e57a:	7819      	ldrb	r1, [r3, #0]
 800e57c:	220f      	movs	r2, #15
 800e57e:	18bb      	adds	r3, r7, r2
 800e580:	18ba      	adds	r2, r7, r2
 800e582:	7812      	ldrb	r2, [r2, #0]
 800e584:	404a      	eors	r2, r1
 800e586:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800e588:	230d      	movs	r3, #13
 800e58a:	18fb      	adds	r3, r7, r3
 800e58c:	2200      	movs	r2, #0
 800e58e:	701a      	strb	r2, [r3, #0]
 800e590:	e01b      	b.n	800e5ca <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800e592:	210f      	movs	r1, #15
 800e594:	187b      	adds	r3, r7, r1
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	b25b      	sxtb	r3, r3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	da09      	bge.n	800e5b2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800e59e:	187b      	adds	r3, r7, r1
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	005b      	lsls	r3, r3, #1
 800e5a4:	b25b      	sxtb	r3, r3
 800e5a6:	2231      	movs	r2, #49	@ 0x31
 800e5a8:	4053      	eors	r3, r2
 800e5aa:	b25a      	sxtb	r2, r3
 800e5ac:	187b      	adds	r3, r7, r1
 800e5ae:	701a      	strb	r2, [r3, #0]
 800e5b0:	e005      	b.n	800e5be <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800e5b2:	230f      	movs	r3, #15
 800e5b4:	18fa      	adds	r2, r7, r3
 800e5b6:	18fb      	adds	r3, r7, r3
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	18db      	adds	r3, r3, r3
 800e5bc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800e5be:	210d      	movs	r1, #13
 800e5c0:	187b      	adds	r3, r7, r1
 800e5c2:	781a      	ldrb	r2, [r3, #0]
 800e5c4:	187b      	adds	r3, r7, r1
 800e5c6:	3201      	adds	r2, #1
 800e5c8:	701a      	strb	r2, [r3, #0]
 800e5ca:	230d      	movs	r3, #13
 800e5cc:	18fb      	adds	r3, r7, r3
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	2b07      	cmp	r3, #7
 800e5d2:	d9de      	bls.n	800e592 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e5d4:	210e      	movs	r1, #14
 800e5d6:	187b      	adds	r3, r7, r1
 800e5d8:	781a      	ldrb	r2, [r3, #0]
 800e5da:	187b      	adds	r3, r7, r1
 800e5dc:	3201      	adds	r2, #1
 800e5de:	701a      	strb	r2, [r3, #0]
 800e5e0:	230e      	movs	r3, #14
 800e5e2:	18fa      	adds	r2, r7, r3
 800e5e4:	1cfb      	adds	r3, r7, #3
 800e5e6:	7812      	ldrb	r2, [r2, #0]
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d3c0      	bcc.n	800e570 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800e5ee:	230f      	movs	r3, #15
 800e5f0:	18fb      	adds	r3, r7, r3
 800e5f2:	781b      	ldrb	r3, [r3, #0]
}
 800e5f4:	0018      	movs	r0, r3
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	b004      	add	sp, #16
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800e606:	4b0a      	ldr	r3, [pc, #40]	@ (800e630 <HIDS_Init+0x34>)
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800e60c:	4b09      	ldr	r3, [pc, #36]	@ (800e634 <HIDS_Init+0x38>)
 800e60e:	683a      	ldr	r2, [r7, #0]
 800e610:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800e612:	4b09      	ldr	r3, [pc, #36]	@ (800e638 <HIDS_Init+0x3c>)
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	0018      	movs	r0, r3
 800e618:	f000 f840 	bl	800e69c <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800e61c:	4b07      	ldr	r3, [pc, #28]	@ (800e63c <HIDS_Init+0x40>)
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	0018      	movs	r0, r3
 800e622:	f000 f82b 	bl	800e67c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800e626:	46c0      	nop			@ (mov r8, r8)
 800e628:	46bd      	mov	sp, r7
 800e62a:	b002      	add	sp, #8
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	46c0      	nop			@ (mov r8, r8)
 800e630:	20002588 	.word	0x20002588
 800e634:	2000258c 	.word	0x2000258c
 800e638:	200000d2 	.word	0x200000d2
 800e63c:	200000d1 	.word	0x200000d1

0800e640 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800e640:	b580      	push	{r7, lr}
 800e642:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800e644:	f000 facc 	bl	800ebe0 <HAL_GetTick>
 800e648:	0002      	movs	r2, r0
 800e64a:	4b08      	ldr	r3, [pc, #32]	@ (800e66c <HIDS_StartMeasurement+0x2c>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	18d2      	adds	r2, r2, r3
 800e650:	4b07      	ldr	r3, [pc, #28]	@ (800e670 <HIDS_StartMeasurement+0x30>)
 800e652:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800e654:	4b07      	ldr	r3, [pc, #28]	@ (800e674 <HIDS_StartMeasurement+0x34>)
 800e656:	2201      	movs	r2, #1
 800e658:	0019      	movs	r1, r3
 800e65a:	2044      	movs	r0, #68	@ 0x44
 800e65c:	f7ff ff56 	bl	800e50c <WriteRegister>
  MeasurementDone = false;
 800e660:	4b05      	ldr	r3, [pc, #20]	@ (800e678 <HIDS_StartMeasurement+0x38>)
 800e662:	2200      	movs	r2, #0
 800e664:	701a      	strb	r2, [r3, #0]
}
 800e666:	46c0      	nop			@ (mov r8, r8)
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	200000d8 	.word	0x200000d8
 800e670:	200000d4 	.word	0x200000d4
 800e674:	200000d2 	.word	0x200000d2
 800e678:	2000259e 	.word	0x2000259e

0800e67c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	0002      	movs	r2, r0
 800e684:	1dfb      	adds	r3, r7, #7
 800e686:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800e688:	4b03      	ldr	r3, [pc, #12]	@ (800e698 <HIDS_SetHeaterMode+0x1c>)
 800e68a:	1dfa      	adds	r2, r7, #7
 800e68c:	7812      	ldrb	r2, [r2, #0]
 800e68e:	701a      	strb	r2, [r3, #0]
}
 800e690:	46c0      	nop			@ (mov r8, r8)
 800e692:	46bd      	mov	sp, r7
 800e694:	b002      	add	sp, #8
 800e696:	bd80      	pop	{r7, pc}
 800e698:	200000d1 	.word	0x200000d1

0800e69c <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	0002      	movs	r2, r0
 800e6a4:	1dfb      	adds	r3, r7, #7
 800e6a6:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800e6a8:	4b03      	ldr	r3, [pc, #12]	@ (800e6b8 <HIDS_SetMeasurementMode+0x1c>)
 800e6aa:	1dfa      	adds	r2, r7, #7
 800e6ac:	7812      	ldrb	r2, [r2, #0]
 800e6ae:	701a      	strb	r2, [r3, #0]
}
 800e6b0:	46c0      	nop			@ (mov r8, r8)
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	b002      	add	sp, #8
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	200000d2 	.word	0x200000d2

0800e6bc <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800e6c4:	f000 fa8c 	bl	800ebe0 <HAL_GetTick>
 800e6c8:	0002      	movs	r2, r0
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	18d2      	adds	r2, r2, r3
 800e6ce:	4b03      	ldr	r3, [pc, #12]	@ (800e6dc <setHIDSTimeStamp+0x20>)
 800e6d0:	601a      	str	r2, [r3, #0]
}
 800e6d2:	46c0      	nop			@ (mov r8, r8)
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	b002      	add	sp, #8
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	46c0      	nop			@ (mov r8, r8)
 800e6dc:	200025a0 	.word	0x200025a0

0800e6e0 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800e6e0:	b590      	push	{r4, r7, lr}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	781a      	ldrb	r2, [r3, #0]
 800e6ec:	210c      	movs	r1, #12
 800e6ee:	187b      	adds	r3, r7, r1
 800e6f0:	701a      	strb	r2, [r3, #0]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	785a      	ldrb	r2, [r3, #1]
 800e6f6:	187b      	adds	r3, r7, r1
 800e6f8:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800e6fa:	240f      	movs	r4, #15
 800e6fc:	193b      	adds	r3, r7, r4
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	7892      	ldrb	r2, [r2, #2]
 800e702:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800e704:	187b      	adds	r3, r7, r1
 800e706:	2102      	movs	r1, #2
 800e708:	0018      	movs	r0, r3
 800e70a:	f7ff ff21 	bl	800e550 <CalculateCRC>
 800e70e:	0003      	movs	r3, r0
 800e710:	001a      	movs	r2, r3
 800e712:	193b      	adds	r3, r7, r4
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	4293      	cmp	r3, r2
 800e718:	d007      	beq.n	800e72a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800e71a:	4a1a      	ldr	r2, [pc, #104]	@ (800e784 <CheckCRC+0xa4>)
 800e71c:	4b1a      	ldr	r3, [pc, #104]	@ (800e788 <CheckCRC+0xa8>)
 800e71e:	0019      	movs	r1, r3
 800e720:	2001      	movs	r0, #1
 800e722:	f7ff fe07 	bl	800e334 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800e726:	2300      	movs	r3, #0
 800e728:	e027      	b.n	800e77a <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	78da      	ldrb	r2, [r3, #3]
 800e72e:	2108      	movs	r1, #8
 800e730:	187b      	adds	r3, r7, r1
 800e732:	701a      	strb	r2, [r3, #0]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	791a      	ldrb	r2, [r3, #4]
 800e738:	187b      	adds	r3, r7, r1
 800e73a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800e73c:	240e      	movs	r4, #14
 800e73e:	193b      	adds	r3, r7, r4
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	7952      	ldrb	r2, [r2, #5]
 800e744:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800e746:	187b      	adds	r3, r7, r1
 800e748:	2102      	movs	r1, #2
 800e74a:	0018      	movs	r0, r3
 800e74c:	f7ff ff00 	bl	800e550 <CalculateCRC>
 800e750:	0003      	movs	r3, r0
 800e752:	001a      	movs	r2, r3
 800e754:	193b      	adds	r3, r7, r4
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	4293      	cmp	r3, r2
 800e75a:	d00d      	beq.n	800e778 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800e75c:	4a0b      	ldr	r2, [pc, #44]	@ (800e78c <CheckCRC+0xac>)
 800e75e:	4b0a      	ldr	r3, [pc, #40]	@ (800e788 <CheckCRC+0xa8>)
 800e760:	0019      	movs	r1, r3
 800e762:	2001      	movs	r0, #1
 800e764:	f7ff fde6 	bl	800e334 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800e768:	4a09      	ldr	r2, [pc, #36]	@ (800e790 <CheckCRC+0xb0>)
 800e76a:	4b0a      	ldr	r3, [pc, #40]	@ (800e794 <CheckCRC+0xb4>)
 800e76c:	217c      	movs	r1, #124	@ 0x7c
 800e76e:	0018      	movs	r0, r3
 800e770:	f7ff fe98 	bl	800e4a4 <errorHandler>
		return false;
 800e774:	2300      	movs	r3, #0
 800e776:	e000      	b.n	800e77a <CheckCRC+0x9a>
	}
	return true;
 800e778:	2301      	movs	r3, #1
}
 800e77a:	0018      	movs	r0, r3
 800e77c:	46bd      	mov	sp, r7
 800e77e:	b005      	add	sp, #20
 800e780:	bd90      	pop	{r4, r7, pc}
 800e782:	46c0      	nop			@ (mov r8, r8)
 800e784:	08024f24 	.word	0x08024f24
 800e788:	08024f4c 	.word	0x08024f4c
 800e78c:	08024f50 	.word	0x08024f50
 800e790:	08024f7c 	.word	0x08024f7c
 800e794:	08025514 	.word	0x08025514

0800e798 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800e79e:	1dbb      	adds	r3, r7, #6
 800e7a0:	2289      	movs	r2, #137	@ 0x89
 800e7a2:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800e7a4:	1dbb      	adds	r3, r7, #6
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	0019      	movs	r1, r3
 800e7aa:	2044      	movs	r0, #68	@ 0x44
 800e7ac:	f7ff feae 	bl	800e50c <WriteRegister>
	HAL_Delay(30);
 800e7b0:	201e      	movs	r0, #30
 800e7b2:	f000 fa1f 	bl	800ebf4 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800e7b6:	4b14      	ldr	r3, [pc, #80]	@ (800e808 <HIDS_DeviceConnected+0x70>)
 800e7b8:	2206      	movs	r2, #6
 800e7ba:	0019      	movs	r1, r3
 800e7bc:	2044      	movs	r0, #68	@ 0x44
 800e7be:	f7ff fe83 	bl	800e4c8 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e7c2:	1dfb      	adds	r3, r7, #7
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	701a      	strb	r2, [r3, #0]
 800e7c8:	e011      	b.n	800e7ee <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800e7ca:	1dfb      	adds	r3, r7, #7
 800e7cc:	7818      	ldrb	r0, [r3, #0]
 800e7ce:	1dfb      	adds	r3, r7, #7
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	4a0d      	ldr	r2, [pc, #52]	@ (800e808 <HIDS_DeviceConnected+0x70>)
 800e7d4:	5cd3      	ldrb	r3, [r2, r3]
 800e7d6:	4a0d      	ldr	r2, [pc, #52]	@ (800e80c <HIDS_DeviceConnected+0x74>)
 800e7d8:	490d      	ldr	r1, [pc, #52]	@ (800e810 <HIDS_DeviceConnected+0x78>)
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	0003      	movs	r3, r0
 800e7de:	2002      	movs	r0, #2
 800e7e0:	f7ff fda8 	bl	800e334 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e7e4:	1dfb      	adds	r3, r7, #7
 800e7e6:	781a      	ldrb	r2, [r3, #0]
 800e7e8:	1dfb      	adds	r3, r7, #7
 800e7ea:	3201      	adds	r2, #1
 800e7ec:	701a      	strb	r2, [r3, #0]
 800e7ee:	1dfb      	adds	r3, r7, #7
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	2b05      	cmp	r3, #5
 800e7f4:	d9e9      	bls.n	800e7ca <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800e7f6:	4b04      	ldr	r3, [pc, #16]	@ (800e808 <HIDS_DeviceConnected+0x70>)
 800e7f8:	0018      	movs	r0, r3
 800e7fa:	f7ff ff71 	bl	800e6e0 <CheckCRC>
 800e7fe:	0003      	movs	r3, r0
}
 800e800:	0018      	movs	r0, r3
 800e802:	46bd      	mov	sp, r7
 800e804:	b002      	add	sp, #8
 800e806:	bd80      	pop	{r7, pc}
 800e808:	20002590 	.word	0x20002590
 800e80c:	08024f94 	.word	0x08024f94
 800e810:	08024f20 	.word	0x08024f20

0800e814 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800e814:	b580      	push	{r7, lr}
 800e816:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800e818:	4b04      	ldr	r3, [pc, #16]	@ (800e82c <HIDS_MeasurementReady+0x18>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	0018      	movs	r0, r3
 800e81e:	f7ff fd33 	bl	800e288 <TimestampIsReached>
 800e822:	0003      	movs	r3, r0
}
 800e824:	0018      	movs	r0, r3
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	46c0      	nop			@ (mov r8, r8)
 800e82c:	200000d4 	.word	0x200000d4

0800e830 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800e830:	b580      	push	{r7, lr}
 800e832:	b086      	sub	sp, #24
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800e83a:	4b4c      	ldr	r3, [pc, #304]	@ (800e96c <HIDS_GetMeasurementValues+0x13c>)
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <HIDS_GetMeasurementValues+0x16>
 800e842:	2301      	movs	r3, #1
 800e844:	e08d      	b.n	800e962 <HIDS_GetMeasurementValues+0x132>
  if(!HIDS_MeasurementReady()) return false;
 800e846:	f7ff ffe5 	bl	800e814 <HIDS_MeasurementReady>
 800e84a:	0003      	movs	r3, r0
 800e84c:	001a      	movs	r2, r3
 800e84e:	2301      	movs	r3, #1
 800e850:	4053      	eors	r3, r2
 800e852:	b2db      	uxtb	r3, r3
 800e854:	2b00      	cmp	r3, #0
 800e856:	d001      	beq.n	800e85c <HIDS_GetMeasurementValues+0x2c>
 800e858:	2300      	movs	r3, #0
 800e85a:	e082      	b.n	800e962 <HIDS_GetMeasurementValues+0x132>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800e85c:	4b44      	ldr	r3, [pc, #272]	@ (800e970 <HIDS_GetMeasurementValues+0x140>)
 800e85e:	2206      	movs	r2, #6
 800e860:	0019      	movs	r1, r3
 800e862:	2044      	movs	r0, #68	@ 0x44
 800e864:	f7ff fe30 	bl	800e4c8 <ReadRegister>
 800e868:	0003      	movs	r3, r0
 800e86a:	001a      	movs	r2, r3
 800e86c:	2301      	movs	r3, #1
 800e86e:	4053      	eors	r3, r2
 800e870:	b2db      	uxtb	r3, r3
 800e872:	2b00      	cmp	r3, #0
 800e874:	d005      	beq.n	800e882 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800e876:	4a3f      	ldr	r2, [pc, #252]	@ (800e974 <HIDS_GetMeasurementValues+0x144>)
 800e878:	4b3f      	ldr	r3, [pc, #252]	@ (800e978 <HIDS_GetMeasurementValues+0x148>)
 800e87a:	0019      	movs	r1, r3
 800e87c:	2001      	movs	r0, #1
 800e87e:	f7ff fd59 	bl	800e334 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800e882:	4b3b      	ldr	r3, [pc, #236]	@ (800e970 <HIDS_GetMeasurementValues+0x140>)
 800e884:	0018      	movs	r0, r3
 800e886:	f7ff ff2b 	bl	800e6e0 <CheckCRC>
 800e88a:	0003      	movs	r3, r0
 800e88c:	001a      	movs	r2, r3
 800e88e:	2301      	movs	r3, #1
 800e890:	4053      	eors	r3, r2
 800e892:	b2db      	uxtb	r3, r3
 800e894:	2b00      	cmp	r3, #0
 800e896:	d011      	beq.n	800e8bc <HIDS_GetMeasurementValues+0x8c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800e898:	2317      	movs	r3, #23
 800e89a:	18fb      	adds	r3, r7, r3
 800e89c:	2200      	movs	r2, #0
 800e89e:	701a      	strb	r2, [r3, #0]
 800e8a0:	e005      	b.n	800e8ae <HIDS_GetMeasurementValues+0x7e>
 800e8a2:	2117      	movs	r1, #23
 800e8a4:	187b      	adds	r3, r7, r1
 800e8a6:	781a      	ldrb	r2, [r3, #0]
 800e8a8:	187b      	adds	r3, r7, r1
 800e8aa:	3201      	adds	r2, #1
 800e8ac:	701a      	strb	r2, [r3, #0]
 800e8ae:	2317      	movs	r3, #23
 800e8b0:	18fb      	adds	r3, r7, r3
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b05      	cmp	r3, #5
 800e8b6:	d9f4      	bls.n	800e8a2 <HIDS_GetMeasurementValues+0x72>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	e052      	b.n	800e962 <HIDS_GetMeasurementValues+0x132>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800e8bc:	4b2c      	ldr	r3, [pc, #176]	@ (800e970 <HIDS_GetMeasurementValues+0x140>)
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	021b      	lsls	r3, r3, #8
 800e8c2:	4a2b      	ldr	r2, [pc, #172]	@ (800e970 <HIDS_GetMeasurementValues+0x140>)
 800e8c4:	7852      	ldrb	r2, [r2, #1]
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	22af      	movs	r2, #175	@ 0xaf
 800e8ca:	4353      	muls	r3, r2
 800e8cc:	0018      	movs	r0, r3
 800e8ce:	f7f4 fd77 	bl	80033c0 <__aeabi_i2d>
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	4b29      	ldr	r3, [pc, #164]	@ (800e97c <HIDS_GetMeasurementValues+0x14c>)
 800e8d6:	f7f3 fa6d 	bl	8001db4 <__aeabi_ddiv>
 800e8da:	0002      	movs	r2, r0
 800e8dc:	000b      	movs	r3, r1
 800e8de:	0010      	movs	r0, r2
 800e8e0:	0019      	movs	r1, r3
 800e8e2:	f7f4 fe07 	bl	80034f4 <__aeabi_d2f>
 800e8e6:	1c03      	adds	r3, r0, #0
 800e8e8:	613b      	str	r3, [r7, #16]
	currentTemperature -= 45;
 800e8ea:	4925      	ldr	r1, [pc, #148]	@ (800e980 <HIDS_GetMeasurementValues+0x150>)
 800e8ec:	6938      	ldr	r0, [r7, #16]
 800e8ee:	f7f2 fc95 	bl	800121c <__aeabi_fsub>
 800e8f2:	1c03      	adds	r3, r0, #0
 800e8f4:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800e8f6:	4b1e      	ldr	r3, [pc, #120]	@ (800e970 <HIDS_GetMeasurementValues+0x140>)
 800e8f8:	78db      	ldrb	r3, [r3, #3]
 800e8fa:	021b      	lsls	r3, r3, #8
 800e8fc:	4a1c      	ldr	r2, [pc, #112]	@ (800e970 <HIDS_GetMeasurementValues+0x140>)
 800e8fe:	7912      	ldrb	r2, [r2, #4]
 800e900:	431a      	orrs	r2, r3
 800e902:	0013      	movs	r3, r2
 800e904:	015b      	lsls	r3, r3, #5
 800e906:	1a9b      	subs	r3, r3, r2
 800e908:	009b      	lsls	r3, r3, #2
 800e90a:	189b      	adds	r3, r3, r2
 800e90c:	0018      	movs	r0, r3
 800e90e:	f7f4 fd57 	bl	80033c0 <__aeabi_i2d>
 800e912:	2200      	movs	r2, #0
 800e914:	4b19      	ldr	r3, [pc, #100]	@ (800e97c <HIDS_GetMeasurementValues+0x14c>)
 800e916:	f7f3 fa4d 	bl	8001db4 <__aeabi_ddiv>
 800e91a:	0002      	movs	r2, r0
 800e91c:	000b      	movs	r3, r1
 800e91e:	0010      	movs	r0, r2
 800e920:	0019      	movs	r1, r3
 800e922:	f7f4 fde7 	bl	80034f4 <__aeabi_d2f>
 800e926:	1c03      	adds	r3, r0, #0
 800e928:	60fb      	str	r3, [r7, #12]
	currentHumidity -= 6;
 800e92a:	4916      	ldr	r1, [pc, #88]	@ (800e984 <HIDS_GetMeasurementValues+0x154>)
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	f7f2 fc75 	bl	800121c <__aeabi_fsub>
 800e932:	1c03      	adds	r3, r0, #0
 800e934:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	693a      	ldr	r2, [r7, #16]
 800e93a:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	68fa      	ldr	r2, [r7, #12]
 800e940:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	0011      	movs	r1, r2
 800e948:	0018      	movs	r0, r3
 800e94a:	f7fd fab1 	bl	800beb0 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	1c11      	adds	r1, r2, #0
 800e954:	1c18      	adds	r0, r3, #0
 800e956:	f7f4 ffbd 	bl	80038d4 <ESP_GetHT>

//   measurements = 0;
   MeasurementDone = true;
 800e95a:	4b04      	ldr	r3, [pc, #16]	@ (800e96c <HIDS_GetMeasurementValues+0x13c>)
 800e95c:	2201      	movs	r2, #1
 800e95e:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800e960:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800e962:	0018      	movs	r0, r3
 800e964:	46bd      	mov	sp, r7
 800e966:	b006      	add	sp, #24
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	46c0      	nop			@ (mov r8, r8)
 800e96c:	2000259e 	.word	0x2000259e
 800e970:	20002598 	.word	0x20002598
 800e974:	08024fb4 	.word	0x08024fb4
 800e978:	08024f4c 	.word	0x08024f4c
 800e97c:	40efffe0 	.word	0x40efffe0
 800e980:	42340000 	.word	0x42340000
 800e984:	40c00000 	.word	0x40c00000

0800e988 <ResetHIDSresults>:
void ResetHIDSresults() {
 800e988:	b580      	push	{r7, lr}
 800e98a:	af00      	add	r7, sp, #0
  humid = 0.0;
 800e98c:	4b04      	ldr	r3, [pc, #16]	@ (800e9a0 <ResetHIDSresults+0x18>)
 800e98e:	2200      	movs	r2, #0
 800e990:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800e992:	4b04      	ldr	r3, [pc, #16]	@ (800e9a4 <ResetHIDSresults+0x1c>)
 800e994:	2200      	movs	r2, #0
 800e996:	601a      	str	r2, [r3, #0]
}
 800e998:	46c0      	nop			@ (mov r8, r8)
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	46c0      	nop			@ (mov r8, r8)
 800e9a0:	20002580 	.word	0x20002580
 800e9a4:	20002584 	.word	0x20002584

0800e9a8 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800e9a8:	b5b0      	push	{r4, r5, r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800e9ae:	4b3b      	ldr	r3, [pc, #236]	@ (800ea9c <HIDS_Upkeep+0xf4>)
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	2b06      	cmp	r3, #6
 800e9b4:	d865      	bhi.n	800ea82 <HIDS_Upkeep+0xda>
 800e9b6:	009a      	lsls	r2, r3, #2
 800e9b8:	4b39      	ldr	r3, [pc, #228]	@ (800eaa0 <HIDS_Upkeep+0xf8>)
 800e9ba:	18d3      	adds	r3, r2, r3
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800e9c0:	4a38      	ldr	r2, [pc, #224]	@ (800eaa4 <HIDS_Upkeep+0xfc>)
 800e9c2:	4b39      	ldr	r3, [pc, #228]	@ (800eaa8 <HIDS_Upkeep+0x100>)
 800e9c4:	0019      	movs	r1, r3
 800e9c6:	2003      	movs	r0, #3
 800e9c8:	f7ff fcb4 	bl	800e334 <CreateLine>
      break;
 800e9cc:	e060      	b.n	800ea90 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
//      Debug("entered HIDS_STATE_INIT");
      ResetHIDSresults();
 800e9ce:	f7ff ffdb 	bl	800e988 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800e9d2:	4b32      	ldr	r3, [pc, #200]	@ (800ea9c <HIDS_Upkeep+0xf4>)
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	701a      	strb	r2, [r3, #0]
      break;
 800e9d8:	e05a      	b.n	800ea90 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
//      Debug("entered HIDS_STATE_START_MEASUREMENTS");
      SetMeasurementIndicator();
 800e9da:	f7fe fc45 	bl	800d268 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800e9de:	f7ff fe2f 	bl	800e640 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800e9e2:	4b2e      	ldr	r3, [pc, #184]	@ (800ea9c <HIDS_Upkeep+0xf4>)
 800e9e4:	2202      	movs	r2, #2
 800e9e6:	701a      	strb	r2, [r3, #0]
      break;
 800e9e8:	e052      	b.n	800ea90 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
//      Debug("entered HIDS_STATE_WAIT_FOR_COMPLETION");
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800e9ea:	4a30      	ldr	r2, [pc, #192]	@ (800eaac <HIDS_Upkeep+0x104>)
 800e9ec:	4b30      	ldr	r3, [pc, #192]	@ (800eab0 <HIDS_Upkeep+0x108>)
 800e9ee:	0011      	movs	r1, r2
 800e9f0:	0018      	movs	r0, r3
 800e9f2:	f7ff ff1d 	bl	800e830 <HIDS_GetMeasurementValues>
 800e9f6:	1e03      	subs	r3, r0, #0
 800e9f8:	d047      	beq.n	800ea8a <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800e9fa:	4b28      	ldr	r3, [pc, #160]	@ (800ea9c <HIDS_Upkeep+0xf4>)
 800e9fc:	2203      	movs	r2, #3
 800e9fe:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ea00:	e043      	b.n	800ea8a <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
//      Debug("entered HIDS_STATE_PROCESS_RESULTS");
//      Debug("Processing results.");
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800ea02:	4b2b      	ldr	r3, [pc, #172]	@ (800eab0 <HIDS_Upkeep+0x108>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	1c18      	adds	r0, r3, #0
 800ea08:	f7f4 fd2c 	bl	8003464 <__aeabi_f2d>
 800ea0c:	0004      	movs	r4, r0
 800ea0e:	000d      	movs	r5, r1
 800ea10:	4b26      	ldr	r3, [pc, #152]	@ (800eaac <HIDS_Upkeep+0x104>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	1c18      	adds	r0, r3, #0
 800ea16:	f7f4 fd25 	bl	8003464 <__aeabi_f2d>
 800ea1a:	0002      	movs	r2, r0
 800ea1c:	000b      	movs	r3, r1
 800ea1e:	4825      	ldr	r0, [pc, #148]	@ (800eab4 <HIDS_Upkeep+0x10c>)
 800ea20:	4921      	ldr	r1, [pc, #132]	@ (800eaa8 <HIDS_Upkeep+0x100>)
 800ea22:	9202      	str	r2, [sp, #8]
 800ea24:	9303      	str	r3, [sp, #12]
 800ea26:	9400      	str	r4, [sp, #0]
 800ea28:	9501      	str	r5, [sp, #4]
 800ea2a:	0002      	movs	r2, r0
 800ea2c:	2003      	movs	r0, #3
 800ea2e:	f7ff fc81 	bl	800e334 <CreateLine>
      setHIDS(temp, humid);
 800ea32:	4b1e      	ldr	r3, [pc, #120]	@ (800eaac <HIDS_Upkeep+0x104>)
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	4b1e      	ldr	r3, [pc, #120]	@ (800eab0 <HIDS_Upkeep+0x108>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	1c19      	adds	r1, r3, #0
 800ea3c:	1c10      	adds	r0, r2, #0
 800ea3e:	f7f4 ff5d 	bl	80038fc <setHIDS>
      ResetMeasurementIndicator();
 800ea42:	f7fe fc29 	bl	800d298 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800ea46:	f000 f8cb 	bl	800ebe0 <HAL_GetTick>
 800ea4a:	0004      	movs	r4, r0
 800ea4c:	f7fe fd2a 	bl	800d4a4 <powerCheck>
 800ea50:	0003      	movs	r3, r0
 800ea52:	2b04      	cmp	r3, #4
 800ea54:	d101      	bne.n	800ea5a <HIDS_Upkeep+0xb2>
 800ea56:	4b18      	ldr	r3, [pc, #96]	@ (800eab8 <HIDS_Upkeep+0x110>)
 800ea58:	e001      	b.n	800ea5e <HIDS_Upkeep+0xb6>
 800ea5a:	23fa      	movs	r3, #250	@ 0xfa
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	191a      	adds	r2, r3, r4
 800ea60:	4b16      	ldr	r3, [pc, #88]	@ (800eabc <HIDS_Upkeep+0x114>)
 800ea62:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800ea64:	4b0d      	ldr	r3, [pc, #52]	@ (800ea9c <HIDS_Upkeep+0xf4>)
 800ea66:	2206      	movs	r2, #6
 800ea68:	701a      	strb	r2, [r3, #0]
      break;
 800ea6a:	e011      	b.n	800ea90 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
//      Debug("entered HIDS_STATE_WAIT");
      if(TimestampIsReached(HIDSTimeStamp)) {
 800ea6c:	4b13      	ldr	r3, [pc, #76]	@ (800eabc <HIDS_Upkeep+0x114>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	0018      	movs	r0, r3
 800ea72:	f7ff fc09 	bl	800e288 <TimestampIsReached>
 800ea76:	1e03      	subs	r3, r0, #0
 800ea78:	d009      	beq.n	800ea8e <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800ea7a:	4b08      	ldr	r3, [pc, #32]	@ (800ea9c <HIDS_Upkeep+0xf4>)
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ea80:	e005      	b.n	800ea8e <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800ea82:	4b06      	ldr	r3, [pc, #24]	@ (800ea9c <HIDS_Upkeep+0xf4>)
 800ea84:	2200      	movs	r2, #0
 800ea86:	701a      	strb	r2, [r3, #0]
      break;
 800ea88:	e002      	b.n	800ea90 <HIDS_Upkeep+0xe8>
      break;
 800ea8a:	46c0      	nop			@ (mov r8, r8)
 800ea8c:	e000      	b.n	800ea90 <HIDS_Upkeep+0xe8>
      break;
 800ea8e:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800ea90:	4b02      	ldr	r3, [pc, #8]	@ (800ea9c <HIDS_Upkeep+0xf4>)
 800ea92:	781b      	ldrb	r3, [r3, #0]
}
 800ea94:	0018      	movs	r0, r3
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bdb0      	pop	{r4, r5, r7, pc}
 800ea9a:	46c0      	nop			@ (mov r8, r8)
 800ea9c:	200025a4 	.word	0x200025a4
 800eaa0:	080254f8 	.word	0x080254f8
 800eaa4:	08024fe8 	.word	0x08024fe8
 800eaa8:	0802501c 	.word	0x0802501c
 800eaac:	20002584 	.word	0x20002584
 800eab0:	20002580 	.word	0x20002580
 800eab4:	08025020 	.word	0x08025020
 800eab8:	00002710 	.word	0x00002710
 800eabc:	200025a0 	.word	0x200025a0

0800eac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800eac0:	480d      	ldr	r0, [pc, #52]	@ (800eaf8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800eac2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800eac4:	f7ff f836 	bl	800db34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800eac8:	480c      	ldr	r0, [pc, #48]	@ (800eafc <LoopForever+0x6>)
  ldr r1, =_edata
 800eaca:	490d      	ldr	r1, [pc, #52]	@ (800eb00 <LoopForever+0xa>)
  ldr r2, =_sidata
 800eacc:	4a0d      	ldr	r2, [pc, #52]	@ (800eb04 <LoopForever+0xe>)
  movs r3, #0
 800eace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ead0:	e002      	b.n	800ead8 <LoopCopyDataInit>

0800ead2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ead2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ead4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ead6:	3304      	adds	r3, #4

0800ead8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ead8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800eada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800eadc:	d3f9      	bcc.n	800ead2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800eade:	4a0a      	ldr	r2, [pc, #40]	@ (800eb08 <LoopForever+0x12>)
  ldr r4, =_ebss
 800eae0:	4c0a      	ldr	r4, [pc, #40]	@ (800eb0c <LoopForever+0x16>)
  movs r3, #0
 800eae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800eae4:	e001      	b.n	800eaea <LoopFillZerobss>

0800eae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800eae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800eae8:	3204      	adds	r2, #4

0800eaea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800eaea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800eaec:	d3fb      	bcc.n	800eae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800eaee:	f011 fb79 	bl	80201e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800eaf2:	f7f9 f887 	bl	8007c04 <main>

0800eaf6 <LoopForever>:

LoopForever:
    b LoopForever
 800eaf6:	e7fe      	b.n	800eaf6 <LoopForever>
   ldr   r0, =_estack
 800eaf8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800eafc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800eb00:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 800eb04:	08025e98 	.word	0x08025e98
  ldr r2, =_sbss
 800eb08:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 800eb0c:	200039ac 	.word	0x200039ac

0800eb10 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800eb10:	e7fe      	b.n	800eb10 <ADC1_COMP_IRQHandler>
	...

0800eb14 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800eb1a:	1dfb      	adds	r3, r7, #7
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800eb20:	4b0b      	ldr	r3, [pc, #44]	@ (800eb50 <HAL_Init+0x3c>)
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	4b0a      	ldr	r3, [pc, #40]	@ (800eb50 <HAL_Init+0x3c>)
 800eb26:	2140      	movs	r1, #64	@ 0x40
 800eb28:	430a      	orrs	r2, r1
 800eb2a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800eb2c:	2003      	movs	r0, #3
 800eb2e:	f000 f811 	bl	800eb54 <HAL_InitTick>
 800eb32:	1e03      	subs	r3, r0, #0
 800eb34:	d003      	beq.n	800eb3e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800eb36:	1dfb      	adds	r3, r7, #7
 800eb38:	2201      	movs	r2, #1
 800eb3a:	701a      	strb	r2, [r3, #0]
 800eb3c:	e001      	b.n	800eb42 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800eb3e:	f7fe fead 	bl	800d89c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800eb42:	1dfb      	adds	r3, r7, #7
 800eb44:	781b      	ldrb	r3, [r3, #0]
}
 800eb46:	0018      	movs	r0, r3
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	b002      	add	sp, #8
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	46c0      	nop			@ (mov r8, r8)
 800eb50:	40022000 	.word	0x40022000

0800eb54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eb54:	b590      	push	{r4, r7, lr}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800eb5c:	4b14      	ldr	r3, [pc, #80]	@ (800ebb0 <HAL_InitTick+0x5c>)
 800eb5e:	681c      	ldr	r4, [r3, #0]
 800eb60:	4b14      	ldr	r3, [pc, #80]	@ (800ebb4 <HAL_InitTick+0x60>)
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	0019      	movs	r1, r3
 800eb66:	23fa      	movs	r3, #250	@ 0xfa
 800eb68:	0098      	lsls	r0, r3, #2
 800eb6a:	f7f1 fb1b 	bl	80001a4 <__udivsi3>
 800eb6e:	0003      	movs	r3, r0
 800eb70:	0019      	movs	r1, r3
 800eb72:	0020      	movs	r0, r4
 800eb74:	f7f1 fb16 	bl	80001a4 <__udivsi3>
 800eb78:	0003      	movs	r3, r0
 800eb7a:	0018      	movs	r0, r3
 800eb7c:	f000 fcfd 	bl	800f57a <HAL_SYSTICK_Config>
 800eb80:	1e03      	subs	r3, r0, #0
 800eb82:	d001      	beq.n	800eb88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800eb84:	2301      	movs	r3, #1
 800eb86:	e00f      	b.n	800eba8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2b03      	cmp	r3, #3
 800eb8c:	d80b      	bhi.n	800eba6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800eb8e:	6879      	ldr	r1, [r7, #4]
 800eb90:	2301      	movs	r3, #1
 800eb92:	425b      	negs	r3, r3
 800eb94:	2200      	movs	r2, #0
 800eb96:	0018      	movs	r0, r3
 800eb98:	f000 fcc6 	bl	800f528 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800eb9c:	4b06      	ldr	r3, [pc, #24]	@ (800ebb8 <HAL_InitTick+0x64>)
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800eba2:	2300      	movs	r3, #0
 800eba4:	e000      	b.n	800eba8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800eba6:	2301      	movs	r3, #1
}
 800eba8:	0018      	movs	r0, r3
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	b003      	add	sp, #12
 800ebae:	bd90      	pop	{r4, r7, pc}
 800ebb0:	200000cc 	.word	0x200000cc
 800ebb4:	200000e0 	.word	0x200000e0
 800ebb8:	200000dc 	.word	0x200000dc

0800ebbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ebc0:	4b05      	ldr	r3, [pc, #20]	@ (800ebd8 <HAL_IncTick+0x1c>)
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	001a      	movs	r2, r3
 800ebc6:	4b05      	ldr	r3, [pc, #20]	@ (800ebdc <HAL_IncTick+0x20>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	18d2      	adds	r2, r2, r3
 800ebcc:	4b03      	ldr	r3, [pc, #12]	@ (800ebdc <HAL_IncTick+0x20>)
 800ebce:	601a      	str	r2, [r3, #0]
}
 800ebd0:	46c0      	nop			@ (mov r8, r8)
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	46c0      	nop			@ (mov r8, r8)
 800ebd8:	200000e0 	.word	0x200000e0
 800ebdc:	200025a8 	.word	0x200025a8

0800ebe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	af00      	add	r7, sp, #0
  return uwTick;
 800ebe4:	4b02      	ldr	r3, [pc, #8]	@ (800ebf0 <HAL_GetTick+0x10>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
}
 800ebe8:	0018      	movs	r0, r3
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	46c0      	nop			@ (mov r8, r8)
 800ebf0:	200025a8 	.word	0x200025a8

0800ebf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ebfc:	f7ff fff0 	bl	800ebe0 <HAL_GetTick>
 800ec00:	0003      	movs	r3, r0
 800ec02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	d005      	beq.n	800ec1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ec0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ec38 <HAL_Delay+0x44>)
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	001a      	movs	r2, r3
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	189b      	adds	r3, r3, r2
 800ec18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ec1a:	46c0      	nop			@ (mov r8, r8)
 800ec1c:	f7ff ffe0 	bl	800ebe0 <HAL_GetTick>
 800ec20:	0002      	movs	r2, r0
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	1ad3      	subs	r3, r2, r3
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d8f7      	bhi.n	800ec1c <HAL_Delay+0x28>
  {
  }
}
 800ec2c:	46c0      	nop			@ (mov r8, r8)
 800ec2e:	46c0      	nop			@ (mov r8, r8)
 800ec30:	46bd      	mov	sp, r7
 800ec32:	b004      	add	sp, #16
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	46c0      	nop			@ (mov r8, r8)
 800ec38:	200000e0 	.word	0x200000e0

0800ec3c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800ec40:	4b04      	ldr	r3, [pc, #16]	@ (800ec54 <HAL_SuspendTick+0x18>)
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	4b03      	ldr	r3, [pc, #12]	@ (800ec54 <HAL_SuspendTick+0x18>)
 800ec46:	2102      	movs	r1, #2
 800ec48:	438a      	bics	r2, r1
 800ec4a:	601a      	str	r2, [r3, #0]
}
 800ec4c:	46c0      	nop			@ (mov r8, r8)
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	46c0      	nop			@ (mov r8, r8)
 800ec54:	e000e010 	.word	0xe000e010

0800ec58 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800ec5c:	4b04      	ldr	r3, [pc, #16]	@ (800ec70 <HAL_ResumeTick+0x18>)
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	4b03      	ldr	r3, [pc, #12]	@ (800ec70 <HAL_ResumeTick+0x18>)
 800ec62:	2102      	movs	r1, #2
 800ec64:	430a      	orrs	r2, r1
 800ec66:	601a      	str	r2, [r3, #0]
}
 800ec68:	46c0      	nop			@ (mov r8, r8)
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	46c0      	nop			@ (mov r8, r8)
 800ec70:	e000e010 	.word	0xe000e010

0800ec74 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800ec78:	4b02      	ldr	r3, [pc, #8]	@ (800ec84 <HAL_GetUIDw0+0x10>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
}
 800ec7c:	0018      	movs	r0, r3
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	46c0      	nop			@ (mov r8, r8)
 800ec84:	1ff80050 	.word	0x1ff80050

0800ec88 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800ec8c:	4b02      	ldr	r3, [pc, #8]	@ (800ec98 <HAL_GetUIDw1+0x10>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
}
 800ec90:	0018      	movs	r0, r3
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	46c0      	nop			@ (mov r8, r8)
 800ec98:	1ff80054 	.word	0x1ff80054

0800ec9c <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800eca0:	4b02      	ldr	r3, [pc, #8]	@ (800ecac <HAL_GetUIDw2+0x10>)
 800eca2:	681b      	ldr	r3, [r3, #0]
}
 800eca4:	0018      	movs	r0, r3
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	46c0      	nop			@ (mov r8, r8)
 800ecac:	1ff80064 	.word	0x1ff80064

0800ecb0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d101      	bne.n	800ecc2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	e159      	b.n	800ef76 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d10a      	bne.n	800ece0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2250      	movs	r2, #80	@ 0x50
 800ecd4:	2100      	movs	r1, #0
 800ecd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	0018      	movs	r0, r3
 800ecdc:	f7f8 fa38 	bl	8007150 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ece4:	2210      	movs	r2, #16
 800ece6:	4013      	ands	r3, r2
 800ece8:	2b10      	cmp	r3, #16
 800ecea:	d005      	beq.n	800ecf8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	2204      	movs	r2, #4
 800ecf4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800ecf6:	d00b      	beq.n	800ed10 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecfc:	2210      	movs	r2, #16
 800ecfe:	431a      	orrs	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2250      	movs	r2, #80	@ 0x50
 800ed08:	2100      	movs	r1, #0
 800ed0a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	e132      	b.n	800ef76 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed14:	4a9a      	ldr	r2, [pc, #616]	@ (800ef80 <HAL_ADC_Init+0x2d0>)
 800ed16:	4013      	ands	r3, r2
 800ed18:	2202      	movs	r2, #2
 800ed1a:	431a      	orrs	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	2203      	movs	r2, #3
 800ed28:	4013      	ands	r3, r2
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d108      	bne.n	800ed40 <HAL_ADC_Init+0x90>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	2201      	movs	r2, #1
 800ed36:	4013      	ands	r3, r2
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d101      	bne.n	800ed40 <HAL_ADC_Init+0x90>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	e000      	b.n	800ed42 <HAL_ADC_Init+0x92>
 800ed40:	2300      	movs	r3, #0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d149      	bne.n	800edda <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	685a      	ldr	r2, [r3, #4]
 800ed4a:	23c0      	movs	r3, #192	@ 0xc0
 800ed4c:	061b      	lsls	r3, r3, #24
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d00b      	beq.n	800ed6a <HAL_ADC_Init+0xba>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	685a      	ldr	r2, [r3, #4]
 800ed56:	2380      	movs	r3, #128	@ 0x80
 800ed58:	05db      	lsls	r3, r3, #23
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d005      	beq.n	800ed6a <HAL_ADC_Init+0xba>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	685a      	ldr	r2, [r3, #4]
 800ed62:	2380      	movs	r3, #128	@ 0x80
 800ed64:	061b      	lsls	r3, r3, #24
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d111      	bne.n	800ed8e <HAL_ADC_Init+0xde>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	691a      	ldr	r2, [r3, #16]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	0092      	lsls	r2, r2, #2
 800ed76:	0892      	lsrs	r2, r2, #2
 800ed78:	611a      	str	r2, [r3, #16]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	6919      	ldr	r1, [r3, #16]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	685a      	ldr	r2, [r3, #4]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	430a      	orrs	r2, r1
 800ed8a:	611a      	str	r2, [r3, #16]
 800ed8c:	e014      	b.n	800edb8 <HAL_ADC_Init+0x108>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	691a      	ldr	r2, [r3, #16]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	0092      	lsls	r2, r2, #2
 800ed9a:	0892      	lsrs	r2, r2, #2
 800ed9c:	611a      	str	r2, [r3, #16]
 800ed9e:	4b79      	ldr	r3, [pc, #484]	@ (800ef84 <HAL_ADC_Init+0x2d4>)
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	4b78      	ldr	r3, [pc, #480]	@ (800ef84 <HAL_ADC_Init+0x2d4>)
 800eda4:	4978      	ldr	r1, [pc, #480]	@ (800ef88 <HAL_ADC_Init+0x2d8>)
 800eda6:	400a      	ands	r2, r1
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	4b76      	ldr	r3, [pc, #472]	@ (800ef84 <HAL_ADC_Init+0x2d4>)
 800edac:	6819      	ldr	r1, [r3, #0]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	685a      	ldr	r2, [r3, #4]
 800edb2:	4b74      	ldr	r3, [pc, #464]	@ (800ef84 <HAL_ADC_Init+0x2d4>)
 800edb4:	430a      	orrs	r2, r1
 800edb6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	68da      	ldr	r2, [r3, #12]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2118      	movs	r1, #24
 800edc4:	438a      	bics	r2, r1
 800edc6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68d9      	ldr	r1, [r3, #12]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	689a      	ldr	r2, [r3, #8]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	430a      	orrs	r2, r1
 800edd8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800edda:	4b6a      	ldr	r3, [pc, #424]	@ (800ef84 <HAL_ADC_Init+0x2d4>)
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	4b69      	ldr	r3, [pc, #420]	@ (800ef84 <HAL_ADC_Init+0x2d4>)
 800ede0:	496a      	ldr	r1, [pc, #424]	@ (800ef8c <HAL_ADC_Init+0x2dc>)
 800ede2:	400a      	ands	r2, r1
 800ede4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800ede6:	4b67      	ldr	r3, [pc, #412]	@ (800ef84 <HAL_ADC_Init+0x2d4>)
 800ede8:	6819      	ldr	r1, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800edee:	065a      	lsls	r2, r3, #25
 800edf0:	4b64      	ldr	r3, [pc, #400]	@ (800ef84 <HAL_ADC_Init+0x2d4>)
 800edf2:	430a      	orrs	r2, r1
 800edf4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	689a      	ldr	r2, [r3, #8]
 800edfc:	2380      	movs	r3, #128	@ 0x80
 800edfe:	055b      	lsls	r3, r3, #21
 800ee00:	4013      	ands	r3, r2
 800ee02:	d108      	bne.n	800ee16 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	689a      	ldr	r2, [r3, #8]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	2180      	movs	r1, #128	@ 0x80
 800ee10:	0549      	lsls	r1, r1, #21
 800ee12:	430a      	orrs	r2, r1
 800ee14:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	68da      	ldr	r2, [r3, #12]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	495b      	ldr	r1, [pc, #364]	@ (800ef90 <HAL_ADC_Init+0x2e0>)
 800ee22:	400a      	ands	r2, r1
 800ee24:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	68d9      	ldr	r1, [r3, #12]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	691b      	ldr	r3, [r3, #16]
 800ee34:	2b02      	cmp	r3, #2
 800ee36:	d101      	bne.n	800ee3c <HAL_ADC_Init+0x18c>
 800ee38:	2304      	movs	r3, #4
 800ee3a:	e000      	b.n	800ee3e <HAL_ADC_Init+0x18e>
 800ee3c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ee3e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2020      	movs	r0, #32
 800ee44:	5c1b      	ldrb	r3, [r3, r0]
 800ee46:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800ee48:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	202c      	movs	r0, #44	@ 0x2c
 800ee4e:	5c1b      	ldrb	r3, [r3, r0]
 800ee50:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800ee52:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800ee58:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	699b      	ldr	r3, [r3, #24]
 800ee5e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800ee60:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	69db      	ldr	r3, [r3, #28]
 800ee66:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800ee68:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	430a      	orrs	r2, r1
 800ee70:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee76:	23c2      	movs	r3, #194	@ 0xc2
 800ee78:	33ff      	adds	r3, #255	@ 0xff
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d00b      	beq.n	800ee96 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	68d9      	ldr	r1, [r3, #12]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800ee8c:	431a      	orrs	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	430a      	orrs	r2, r1
 800ee94:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2221      	movs	r2, #33	@ 0x21
 800ee9a:	5c9b      	ldrb	r3, [r3, r2]
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d11a      	bne.n	800eed6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2220      	movs	r2, #32
 800eea4:	5c9b      	ldrb	r3, [r3, r2]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d109      	bne.n	800eebe <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	68da      	ldr	r2, [r3, #12]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2180      	movs	r1, #128	@ 0x80
 800eeb6:	0249      	lsls	r1, r1, #9
 800eeb8:	430a      	orrs	r2, r1
 800eeba:	60da      	str	r2, [r3, #12]
 800eebc:	e00b      	b.n	800eed6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eec2:	2220      	movs	r2, #32
 800eec4:	431a      	orrs	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eece:	2201      	movs	r2, #1
 800eed0:	431a      	orrs	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d11f      	bne.n	800ef1e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	691a      	ldr	r2, [r3, #16]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	492a      	ldr	r1, [pc, #168]	@ (800ef94 <HAL_ADC_Init+0x2e4>)
 800eeea:	400a      	ands	r2, r1
 800eeec:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	6919      	ldr	r1, [r3, #16]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800eefc:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800ef02:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	430a      	orrs	r2, r1
 800ef0a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	691a      	ldr	r2, [r3, #16]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2101      	movs	r1, #1
 800ef18:	430a      	orrs	r2, r1
 800ef1a:	611a      	str	r2, [r3, #16]
 800ef1c:	e00e      	b.n	800ef3c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	691b      	ldr	r3, [r3, #16]
 800ef24:	2201      	movs	r2, #1
 800ef26:	4013      	ands	r3, r2
 800ef28:	2b01      	cmp	r3, #1
 800ef2a:	d107      	bne.n	800ef3c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	691a      	ldr	r2, [r3, #16]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2101      	movs	r1, #1
 800ef38:	438a      	bics	r2, r1
 800ef3a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	695a      	ldr	r2, [r3, #20]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2107      	movs	r1, #7
 800ef48:	438a      	bics	r2, r1
 800ef4a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	6959      	ldr	r1, [r3, #20]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	430a      	orrs	r2, r1
 800ef5c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2200      	movs	r2, #0
 800ef62:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef68:	2203      	movs	r2, #3
 800ef6a:	4393      	bics	r3, r2
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	431a      	orrs	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800ef74:	2300      	movs	r3, #0
}
 800ef76:	0018      	movs	r0, r3
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	b002      	add	sp, #8
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	46c0      	nop			@ (mov r8, r8)
 800ef80:	fffffefd 	.word	0xfffffefd
 800ef84:	40012708 	.word	0x40012708
 800ef88:	ffc3ffff 	.word	0xffc3ffff
 800ef8c:	fdffffff 	.word	0xfdffffff
 800ef90:	fffe0219 	.word	0xfffe0219
 800ef94:	fffffc03 	.word	0xfffffc03

0800ef98 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800ef98:	b590      	push	{r4, r7, lr}
 800ef9a:	b085      	sub	sp, #20
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800efa0:	230f      	movs	r3, #15
 800efa2:	18fb      	adds	r3, r7, r3
 800efa4:	2200      	movs	r2, #0
 800efa6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	689b      	ldr	r3, [r3, #8]
 800efae:	2204      	movs	r2, #4
 800efb0:	4013      	ands	r3, r2
 800efb2:	d138      	bne.n	800f026 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2250      	movs	r2, #80	@ 0x50
 800efb8:	5c9b      	ldrb	r3, [r3, r2]
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d101      	bne.n	800efc2 <HAL_ADC_Start+0x2a>
 800efbe:	2302      	movs	r3, #2
 800efc0:	e038      	b.n	800f034 <HAL_ADC_Start+0x9c>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2250      	movs	r2, #80	@ 0x50
 800efc6:	2101      	movs	r1, #1
 800efc8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	69db      	ldr	r3, [r3, #28]
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d007      	beq.n	800efe2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800efd2:	230f      	movs	r3, #15
 800efd4:	18fc      	adds	r4, r7, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	0018      	movs	r0, r3
 800efda:	f000 f95f 	bl	800f29c <ADC_Enable>
 800efde:	0003      	movs	r3, r0
 800efe0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800efe2:	230f      	movs	r3, #15
 800efe4:	18fb      	adds	r3, r7, r3
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d120      	bne.n	800f02e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eff0:	4a12      	ldr	r2, [pc, #72]	@ (800f03c <HAL_ADC_Start+0xa4>)
 800eff2:	4013      	ands	r3, r2
 800eff4:	2280      	movs	r2, #128	@ 0x80
 800eff6:	0052      	lsls	r2, r2, #1
 800eff8:	431a      	orrs	r2, r3
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2250      	movs	r2, #80	@ 0x50
 800f008:	2100      	movs	r1, #0
 800f00a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	221c      	movs	r2, #28
 800f012:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	689a      	ldr	r2, [r3, #8]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	2104      	movs	r1, #4
 800f020:	430a      	orrs	r2, r1
 800f022:	609a      	str	r2, [r3, #8]
 800f024:	e003      	b.n	800f02e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f026:	230f      	movs	r3, #15
 800f028:	18fb      	adds	r3, r7, r3
 800f02a:	2202      	movs	r2, #2
 800f02c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f02e:	230f      	movs	r3, #15
 800f030:	18fb      	adds	r3, r7, r3
 800f032:	781b      	ldrb	r3, [r3, #0]
}
 800f034:	0018      	movs	r0, r3
 800f036:	46bd      	mov	sp, r7
 800f038:	b005      	add	sp, #20
 800f03a:	bd90      	pop	{r4, r7, pc}
 800f03c:	fffff0fe 	.word	0xfffff0fe

0800f040 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f04e:	2300      	movs	r3, #0
 800f050:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	695b      	ldr	r3, [r3, #20]
 800f056:	2b08      	cmp	r3, #8
 800f058:	d102      	bne.n	800f060 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f05a:	2308      	movs	r3, #8
 800f05c:	60fb      	str	r3, [r7, #12]
 800f05e:	e014      	b.n	800f08a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	2201      	movs	r2, #1
 800f068:	4013      	ands	r3, r2
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d10b      	bne.n	800f086 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f072:	2220      	movs	r2, #32
 800f074:	431a      	orrs	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2250      	movs	r2, #80	@ 0x50
 800f07e:	2100      	movs	r1, #0
 800f080:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f082:	2301      	movs	r3, #1
 800f084:	e072      	b.n	800f16c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f086:	230c      	movs	r3, #12
 800f088:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f08a:	f7ff fda9 	bl	800ebe0 <HAL_GetTick>
 800f08e:	0003      	movs	r3, r0
 800f090:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f092:	e01f      	b.n	800f0d4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	3301      	adds	r3, #1
 800f098:	d01c      	beq.n	800f0d4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d007      	beq.n	800f0b0 <HAL_ADC_PollForConversion+0x70>
 800f0a0:	f7ff fd9e 	bl	800ebe0 <HAL_GetTick>
 800f0a4:	0002      	movs	r2, r0
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	683a      	ldr	r2, [r7, #0]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d211      	bcs.n	800f0d4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	4013      	ands	r3, r2
 800f0ba:	d10b      	bne.n	800f0d4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0c0:	2204      	movs	r2, #4
 800f0c2:	431a      	orrs	r2, r3
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2250      	movs	r2, #80	@ 0x50
 800f0cc:	2100      	movs	r1, #0
 800f0ce:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f0d0:	2303      	movs	r3, #3
 800f0d2:	e04b      	b.n	800f16c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	4013      	ands	r3, r2
 800f0de:	d0d9      	beq.n	800f094 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0e4:	2280      	movs	r2, #128	@ 0x80
 800f0e6:	0092      	lsls	r2, r2, #2
 800f0e8:	431a      	orrs	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	68da      	ldr	r2, [r3, #12]
 800f0f4:	23c0      	movs	r3, #192	@ 0xc0
 800f0f6:	011b      	lsls	r3, r3, #4
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	d12e      	bne.n	800f15a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2220      	movs	r2, #32
 800f100:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f102:	2b00      	cmp	r3, #0
 800f104:	d129      	bne.n	800f15a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2208      	movs	r2, #8
 800f10e:	4013      	ands	r3, r2
 800f110:	2b08      	cmp	r3, #8
 800f112:	d122      	bne.n	800f15a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	2204      	movs	r2, #4
 800f11c:	4013      	ands	r3, r2
 800f11e:	d110      	bne.n	800f142 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	685a      	ldr	r2, [r3, #4]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	210c      	movs	r1, #12
 800f12c:	438a      	bics	r2, r1
 800f12e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f134:	4a0f      	ldr	r2, [pc, #60]	@ (800f174 <HAL_ADC_PollForConversion+0x134>)
 800f136:	4013      	ands	r3, r2
 800f138:	2201      	movs	r2, #1
 800f13a:	431a      	orrs	r2, r3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	655a      	str	r2, [r3, #84]	@ 0x54
 800f140:	e00b      	b.n	800f15a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f146:	2220      	movs	r2, #32
 800f148:	431a      	orrs	r2, r3
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f152:	2201      	movs	r2, #1
 800f154:	431a      	orrs	r2, r3
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	699b      	ldr	r3, [r3, #24]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d103      	bne.n	800f16a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	220c      	movs	r2, #12
 800f168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f16a:	2300      	movs	r3, #0
}
 800f16c:	0018      	movs	r0, r3
 800f16e:	46bd      	mov	sp, r7
 800f170:	b004      	add	sp, #16
 800f172:	bd80      	pop	{r7, pc}
 800f174:	fffffefe 	.word	0xfffffefe

0800f178 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f186:	0018      	movs	r0, r3
 800f188:	46bd      	mov	sp, r7
 800f18a:	b002      	add	sp, #8
 800f18c:	bd80      	pop	{r7, pc}
	...

0800f190 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2250      	movs	r2, #80	@ 0x50
 800f19e:	5c9b      	ldrb	r3, [r3, r2]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d101      	bne.n	800f1a8 <HAL_ADC_ConfigChannel+0x18>
 800f1a4:	2302      	movs	r3, #2
 800f1a6:	e06c      	b.n	800f282 <HAL_ADC_ConfigChannel+0xf2>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2250      	movs	r2, #80	@ 0x50
 800f1ac:	2101      	movs	r1, #1
 800f1ae:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	2204      	movs	r2, #4
 800f1b8:	4013      	ands	r3, r2
 800f1ba:	d00b      	beq.n	800f1d4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1c0:	2220      	movs	r2, #32
 800f1c2:	431a      	orrs	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2250      	movs	r2, #80	@ 0x50
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	e056      	b.n	800f282 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	4a2c      	ldr	r2, [pc, #176]	@ (800f28c <HAL_ADC_ConfigChannel+0xfc>)
 800f1da:	4293      	cmp	r3, r2
 800f1dc:	d028      	beq.n	800f230 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	035b      	lsls	r3, r3, #13
 800f1ea:	0b5a      	lsrs	r2, r3, #13
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	430a      	orrs	r2, r1
 800f1f2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	2380      	movs	r3, #128	@ 0x80
 800f1fa:	02db      	lsls	r3, r3, #11
 800f1fc:	4013      	ands	r3, r2
 800f1fe:	d009      	beq.n	800f214 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f200:	4b23      	ldr	r3, [pc, #140]	@ (800f290 <HAL_ADC_ConfigChannel+0x100>)
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	4b22      	ldr	r3, [pc, #136]	@ (800f290 <HAL_ADC_ConfigChannel+0x100>)
 800f206:	2180      	movs	r1, #128	@ 0x80
 800f208:	0409      	lsls	r1, r1, #16
 800f20a:	430a      	orrs	r2, r1
 800f20c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f20e:	200a      	movs	r0, #10
 800f210:	f000 f8ac 	bl	800f36c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	2380      	movs	r3, #128	@ 0x80
 800f21a:	029b      	lsls	r3, r3, #10
 800f21c:	4013      	ands	r3, r2
 800f21e:	d02b      	beq.n	800f278 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f220:	4b1b      	ldr	r3, [pc, #108]	@ (800f290 <HAL_ADC_ConfigChannel+0x100>)
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	4b1a      	ldr	r3, [pc, #104]	@ (800f290 <HAL_ADC_ConfigChannel+0x100>)
 800f226:	2180      	movs	r1, #128	@ 0x80
 800f228:	03c9      	lsls	r1, r1, #15
 800f22a:	430a      	orrs	r2, r1
 800f22c:	601a      	str	r2, [r3, #0]
 800f22e:	e023      	b.n	800f278 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	035b      	lsls	r3, r3, #13
 800f23c:	0b5b      	lsrs	r3, r3, #13
 800f23e:	43d9      	mvns	r1, r3
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	400a      	ands	r2, r1
 800f246:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	2380      	movs	r3, #128	@ 0x80
 800f24e:	02db      	lsls	r3, r3, #11
 800f250:	4013      	ands	r3, r2
 800f252:	d005      	beq.n	800f260 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f254:	4b0e      	ldr	r3, [pc, #56]	@ (800f290 <HAL_ADC_ConfigChannel+0x100>)
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	4b0d      	ldr	r3, [pc, #52]	@ (800f290 <HAL_ADC_ConfigChannel+0x100>)
 800f25a:	490e      	ldr	r1, [pc, #56]	@ (800f294 <HAL_ADC_ConfigChannel+0x104>)
 800f25c:	400a      	ands	r2, r1
 800f25e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	2380      	movs	r3, #128	@ 0x80
 800f266:	029b      	lsls	r3, r3, #10
 800f268:	4013      	ands	r3, r2
 800f26a:	d005      	beq.n	800f278 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f26c:	4b08      	ldr	r3, [pc, #32]	@ (800f290 <HAL_ADC_ConfigChannel+0x100>)
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	4b07      	ldr	r3, [pc, #28]	@ (800f290 <HAL_ADC_ConfigChannel+0x100>)
 800f272:	4909      	ldr	r1, [pc, #36]	@ (800f298 <HAL_ADC_ConfigChannel+0x108>)
 800f274:	400a      	ands	r2, r1
 800f276:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2250      	movs	r2, #80	@ 0x50
 800f27c:	2100      	movs	r1, #0
 800f27e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f280:	2300      	movs	r3, #0
}
 800f282:	0018      	movs	r0, r3
 800f284:	46bd      	mov	sp, r7
 800f286:	b002      	add	sp, #8
 800f288:	bd80      	pop	{r7, pc}
 800f28a:	46c0      	nop			@ (mov r8, r8)
 800f28c:	00001001 	.word	0x00001001
 800f290:	40012708 	.word	0x40012708
 800f294:	ff7fffff 	.word	0xff7fffff
 800f298:	ffbfffff 	.word	0xffbfffff

0800f29c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	2203      	movs	r2, #3
 800f2b0:	4013      	ands	r3, r2
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d108      	bne.n	800f2c8 <ADC_Enable+0x2c>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	4013      	ands	r3, r2
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d101      	bne.n	800f2c8 <ADC_Enable+0x2c>
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	e000      	b.n	800f2ca <ADC_Enable+0x2e>
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d146      	bne.n	800f35c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	4a24      	ldr	r2, [pc, #144]	@ (800f368 <ADC_Enable+0xcc>)
 800f2d6:	4013      	ands	r3, r2
 800f2d8:	d00d      	beq.n	800f2f6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2de:	2210      	movs	r2, #16
 800f2e0:	431a      	orrs	r2, r3
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	431a      	orrs	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e033      	b.n	800f35e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	689a      	ldr	r2, [r3, #8]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2101      	movs	r1, #1
 800f302:	430a      	orrs	r2, r1
 800f304:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f306:	2001      	movs	r0, #1
 800f308:	f000 f830 	bl	800f36c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f30c:	f7ff fc68 	bl	800ebe0 <HAL_GetTick>
 800f310:	0003      	movs	r3, r0
 800f312:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f314:	e01b      	b.n	800f34e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f316:	f7ff fc63 	bl	800ebe0 <HAL_GetTick>
 800f31a:	0002      	movs	r2, r0
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	1ad3      	subs	r3, r2, r3
 800f320:	2b0a      	cmp	r3, #10
 800f322:	d914      	bls.n	800f34e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2201      	movs	r2, #1
 800f32c:	4013      	ands	r3, r2
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d00d      	beq.n	800f34e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f336:	2210      	movs	r2, #16
 800f338:	431a      	orrs	r2, r3
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f342:	2201      	movs	r2, #1
 800f344:	431a      	orrs	r2, r3
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f34a:	2301      	movs	r3, #1
 800f34c:	e007      	b.n	800f35e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2201      	movs	r2, #1
 800f356:	4013      	ands	r3, r2
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d1dc      	bne.n	800f316 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f35c:	2300      	movs	r3, #0
}
 800f35e:	0018      	movs	r0, r3
 800f360:	46bd      	mov	sp, r7
 800f362:	b004      	add	sp, #16
 800f364:	bd80      	pop	{r7, pc}
 800f366:	46c0      	nop			@ (mov r8, r8)
 800f368:	80000017 	.word	0x80000017

0800f36c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f374:	4b0b      	ldr	r3, [pc, #44]	@ (800f3a4 <ADC_DelayMicroSecond+0x38>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	490b      	ldr	r1, [pc, #44]	@ (800f3a8 <ADC_DelayMicroSecond+0x3c>)
 800f37a:	0018      	movs	r0, r3
 800f37c:	f7f0 ff12 	bl	80001a4 <__udivsi3>
 800f380:	0003      	movs	r3, r0
 800f382:	001a      	movs	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4353      	muls	r3, r2
 800f388:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f38a:	e002      	b.n	800f392 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	3b01      	subs	r3, #1
 800f390:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d1f9      	bne.n	800f38c <ADC_DelayMicroSecond+0x20>
  }
}
 800f398:	46c0      	nop			@ (mov r8, r8)
 800f39a:	46c0      	nop			@ (mov r8, r8)
 800f39c:	46bd      	mov	sp, r7
 800f39e:	b004      	add	sp, #16
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	46c0      	nop			@ (mov r8, r8)
 800f3a4:	200000cc 	.word	0x200000cc
 800f3a8:	000f4240 	.word	0x000f4240

0800f3ac <__NVIC_EnableIRQ>:
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	0002      	movs	r2, r0
 800f3b4:	1dfb      	adds	r3, r7, #7
 800f3b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f3b8:	1dfb      	adds	r3, r7, #7
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	2b7f      	cmp	r3, #127	@ 0x7f
 800f3be:	d809      	bhi.n	800f3d4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f3c0:	1dfb      	adds	r3, r7, #7
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	001a      	movs	r2, r3
 800f3c6:	231f      	movs	r3, #31
 800f3c8:	401a      	ands	r2, r3
 800f3ca:	4b04      	ldr	r3, [pc, #16]	@ (800f3dc <__NVIC_EnableIRQ+0x30>)
 800f3cc:	2101      	movs	r1, #1
 800f3ce:	4091      	lsls	r1, r2
 800f3d0:	000a      	movs	r2, r1
 800f3d2:	601a      	str	r2, [r3, #0]
}
 800f3d4:	46c0      	nop			@ (mov r8, r8)
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	b002      	add	sp, #8
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	e000e100 	.word	0xe000e100

0800f3e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f3e0:	b590      	push	{r4, r7, lr}
 800f3e2:	b083      	sub	sp, #12
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	0002      	movs	r2, r0
 800f3e8:	6039      	str	r1, [r7, #0]
 800f3ea:	1dfb      	adds	r3, r7, #7
 800f3ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f3ee:	1dfb      	adds	r3, r7, #7
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800f3f4:	d828      	bhi.n	800f448 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f3f6:	4a2f      	ldr	r2, [pc, #188]	@ (800f4b4 <__NVIC_SetPriority+0xd4>)
 800f3f8:	1dfb      	adds	r3, r7, #7
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	b25b      	sxtb	r3, r3
 800f3fe:	089b      	lsrs	r3, r3, #2
 800f400:	33c0      	adds	r3, #192	@ 0xc0
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	589b      	ldr	r3, [r3, r2]
 800f406:	1dfa      	adds	r2, r7, #7
 800f408:	7812      	ldrb	r2, [r2, #0]
 800f40a:	0011      	movs	r1, r2
 800f40c:	2203      	movs	r2, #3
 800f40e:	400a      	ands	r2, r1
 800f410:	00d2      	lsls	r2, r2, #3
 800f412:	21ff      	movs	r1, #255	@ 0xff
 800f414:	4091      	lsls	r1, r2
 800f416:	000a      	movs	r2, r1
 800f418:	43d2      	mvns	r2, r2
 800f41a:	401a      	ands	r2, r3
 800f41c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	019b      	lsls	r3, r3, #6
 800f422:	22ff      	movs	r2, #255	@ 0xff
 800f424:	401a      	ands	r2, r3
 800f426:	1dfb      	adds	r3, r7, #7
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	0018      	movs	r0, r3
 800f42c:	2303      	movs	r3, #3
 800f42e:	4003      	ands	r3, r0
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f434:	481f      	ldr	r0, [pc, #124]	@ (800f4b4 <__NVIC_SetPriority+0xd4>)
 800f436:	1dfb      	adds	r3, r7, #7
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	b25b      	sxtb	r3, r3
 800f43c:	089b      	lsrs	r3, r3, #2
 800f43e:	430a      	orrs	r2, r1
 800f440:	33c0      	adds	r3, #192	@ 0xc0
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f446:	e031      	b.n	800f4ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f448:	4a1b      	ldr	r2, [pc, #108]	@ (800f4b8 <__NVIC_SetPriority+0xd8>)
 800f44a:	1dfb      	adds	r3, r7, #7
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	0019      	movs	r1, r3
 800f450:	230f      	movs	r3, #15
 800f452:	400b      	ands	r3, r1
 800f454:	3b08      	subs	r3, #8
 800f456:	089b      	lsrs	r3, r3, #2
 800f458:	3306      	adds	r3, #6
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	18d3      	adds	r3, r2, r3
 800f45e:	3304      	adds	r3, #4
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	1dfa      	adds	r2, r7, #7
 800f464:	7812      	ldrb	r2, [r2, #0]
 800f466:	0011      	movs	r1, r2
 800f468:	2203      	movs	r2, #3
 800f46a:	400a      	ands	r2, r1
 800f46c:	00d2      	lsls	r2, r2, #3
 800f46e:	21ff      	movs	r1, #255	@ 0xff
 800f470:	4091      	lsls	r1, r2
 800f472:	000a      	movs	r2, r1
 800f474:	43d2      	mvns	r2, r2
 800f476:	401a      	ands	r2, r3
 800f478:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	019b      	lsls	r3, r3, #6
 800f47e:	22ff      	movs	r2, #255	@ 0xff
 800f480:	401a      	ands	r2, r3
 800f482:	1dfb      	adds	r3, r7, #7
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	0018      	movs	r0, r3
 800f488:	2303      	movs	r3, #3
 800f48a:	4003      	ands	r3, r0
 800f48c:	00db      	lsls	r3, r3, #3
 800f48e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f490:	4809      	ldr	r0, [pc, #36]	@ (800f4b8 <__NVIC_SetPriority+0xd8>)
 800f492:	1dfb      	adds	r3, r7, #7
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	001c      	movs	r4, r3
 800f498:	230f      	movs	r3, #15
 800f49a:	4023      	ands	r3, r4
 800f49c:	3b08      	subs	r3, #8
 800f49e:	089b      	lsrs	r3, r3, #2
 800f4a0:	430a      	orrs	r2, r1
 800f4a2:	3306      	adds	r3, #6
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	18c3      	adds	r3, r0, r3
 800f4a8:	3304      	adds	r3, #4
 800f4aa:	601a      	str	r2, [r3, #0]
}
 800f4ac:	46c0      	nop			@ (mov r8, r8)
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	b003      	add	sp, #12
 800f4b2:	bd90      	pop	{r4, r7, pc}
 800f4b4:	e000e100 	.word	0xe000e100
 800f4b8:	e000ed00 	.word	0xe000ed00

0800f4bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f4c0:	f3bf 8f4f 	dsb	sy
}
 800f4c4:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f4c6:	4b04      	ldr	r3, [pc, #16]	@ (800f4d8 <__NVIC_SystemReset+0x1c>)
 800f4c8:	4a04      	ldr	r2, [pc, #16]	@ (800f4dc <__NVIC_SystemReset+0x20>)
 800f4ca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f4cc:	f3bf 8f4f 	dsb	sy
}
 800f4d0:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f4d2:	46c0      	nop			@ (mov r8, r8)
 800f4d4:	e7fd      	b.n	800f4d2 <__NVIC_SystemReset+0x16>
 800f4d6:	46c0      	nop			@ (mov r8, r8)
 800f4d8:	e000ed00 	.word	0xe000ed00
 800f4dc:	05fa0004 	.word	0x05fa0004

0800f4e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	1e5a      	subs	r2, r3, #1
 800f4ec:	2380      	movs	r3, #128	@ 0x80
 800f4ee:	045b      	lsls	r3, r3, #17
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d301      	bcc.n	800f4f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	e010      	b.n	800f51a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f4f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f524 <SysTick_Config+0x44>)
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	3a01      	subs	r2, #1
 800f4fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f500:	2301      	movs	r3, #1
 800f502:	425b      	negs	r3, r3
 800f504:	2103      	movs	r1, #3
 800f506:	0018      	movs	r0, r3
 800f508:	f7ff ff6a 	bl	800f3e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f50c:	4b05      	ldr	r3, [pc, #20]	@ (800f524 <SysTick_Config+0x44>)
 800f50e:	2200      	movs	r2, #0
 800f510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f512:	4b04      	ldr	r3, [pc, #16]	@ (800f524 <SysTick_Config+0x44>)
 800f514:	2207      	movs	r2, #7
 800f516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f518:	2300      	movs	r3, #0
}
 800f51a:	0018      	movs	r0, r3
 800f51c:	46bd      	mov	sp, r7
 800f51e:	b002      	add	sp, #8
 800f520:	bd80      	pop	{r7, pc}
 800f522:	46c0      	nop			@ (mov r8, r8)
 800f524:	e000e010 	.word	0xe000e010

0800f528 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	60b9      	str	r1, [r7, #8]
 800f530:	607a      	str	r2, [r7, #4]
 800f532:	210f      	movs	r1, #15
 800f534:	187b      	adds	r3, r7, r1
 800f536:	1c02      	adds	r2, r0, #0
 800f538:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800f53a:	68ba      	ldr	r2, [r7, #8]
 800f53c:	187b      	adds	r3, r7, r1
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	b25b      	sxtb	r3, r3
 800f542:	0011      	movs	r1, r2
 800f544:	0018      	movs	r0, r3
 800f546:	f7ff ff4b 	bl	800f3e0 <__NVIC_SetPriority>
}
 800f54a:	46c0      	nop			@ (mov r8, r8)
 800f54c:	46bd      	mov	sp, r7
 800f54e:	b004      	add	sp, #16
 800f550:	bd80      	pop	{r7, pc}

0800f552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b082      	sub	sp, #8
 800f556:	af00      	add	r7, sp, #0
 800f558:	0002      	movs	r2, r0
 800f55a:	1dfb      	adds	r3, r7, #7
 800f55c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f55e:	1dfb      	adds	r3, r7, #7
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	b25b      	sxtb	r3, r3
 800f564:	0018      	movs	r0, r3
 800f566:	f7ff ff21 	bl	800f3ac <__NVIC_EnableIRQ>
}
 800f56a:	46c0      	nop			@ (mov r8, r8)
 800f56c:	46bd      	mov	sp, r7
 800f56e:	b002      	add	sp, #8
 800f570:	bd80      	pop	{r7, pc}

0800f572 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800f572:	b580      	push	{r7, lr}
 800f574:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800f576:	f7ff ffa1 	bl	800f4bc <__NVIC_SystemReset>

0800f57a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f57a:	b580      	push	{r7, lr}
 800f57c:	b082      	sub	sp, #8
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	0018      	movs	r0, r3
 800f586:	f7ff ffab 	bl	800f4e0 <SysTick_Config>
 800f58a:	0003      	movs	r3, r0
}
 800f58c:	0018      	movs	r0, r3
 800f58e:	46bd      	mov	sp, r7
 800f590:	b002      	add	sp, #8
 800f592:	bd80      	pop	{r7, pc}

0800f594 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d101      	bne.n	800f5a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	e061      	b.n	800f66a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4a32      	ldr	r2, [pc, #200]	@ (800f674 <HAL_DMA_Init+0xe0>)
 800f5ac:	4694      	mov	ip, r2
 800f5ae:	4463      	add	r3, ip
 800f5b0:	2114      	movs	r1, #20
 800f5b2:	0018      	movs	r0, r3
 800f5b4:	f7f0 fdf6 	bl	80001a4 <__udivsi3>
 800f5b8:	0003      	movs	r3, r0
 800f5ba:	009a      	lsls	r2, r3, #2
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a2d      	ldr	r2, [pc, #180]	@ (800f678 <HAL_DMA_Init+0xe4>)
 800f5c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2225      	movs	r2, #37	@ 0x25
 800f5ca:	2102      	movs	r1, #2
 800f5cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	4a28      	ldr	r2, [pc, #160]	@ (800f67c <HAL_DMA_Init+0xe8>)
 800f5da:	4013      	ands	r3, r2
 800f5dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800f5e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	691b      	ldr	r3, [r3, #16]
 800f5ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f5f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	699b      	ldr	r3, [r3, #24]
 800f5f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f5fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6a1b      	ldr	r3, [r3, #32]
 800f604:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f606:	68fa      	ldr	r2, [r7, #12]
 800f608:	4313      	orrs	r3, r2
 800f60a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	689a      	ldr	r2, [r3, #8]
 800f618:	2380      	movs	r3, #128	@ 0x80
 800f61a:	01db      	lsls	r3, r3, #7
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d018      	beq.n	800f652 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800f620:	4b17      	ldr	r3, [pc, #92]	@ (800f680 <HAL_DMA_Init+0xec>)
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f628:	211c      	movs	r1, #28
 800f62a:	400b      	ands	r3, r1
 800f62c:	210f      	movs	r1, #15
 800f62e:	4099      	lsls	r1, r3
 800f630:	000b      	movs	r3, r1
 800f632:	43d9      	mvns	r1, r3
 800f634:	4b12      	ldr	r3, [pc, #72]	@ (800f680 <HAL_DMA_Init+0xec>)
 800f636:	400a      	ands	r2, r1
 800f638:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800f63a:	4b11      	ldr	r3, [pc, #68]	@ (800f680 <HAL_DMA_Init+0xec>)
 800f63c:	6819      	ldr	r1, [r3, #0]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	685a      	ldr	r2, [r3, #4]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f646:	201c      	movs	r0, #28
 800f648:	4003      	ands	r3, r0
 800f64a:	409a      	lsls	r2, r3
 800f64c:	4b0c      	ldr	r3, [pc, #48]	@ (800f680 <HAL_DMA_Init+0xec>)
 800f64e:	430a      	orrs	r2, r1
 800f650:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	2200      	movs	r2, #0
 800f656:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2225      	movs	r2, #37	@ 0x25
 800f65c:	2101      	movs	r1, #1
 800f65e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2224      	movs	r2, #36	@ 0x24
 800f664:	2100      	movs	r1, #0
 800f666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f668:	2300      	movs	r3, #0
}
 800f66a:	0018      	movs	r0, r3
 800f66c:	46bd      	mov	sp, r7
 800f66e:	b004      	add	sp, #16
 800f670:	bd80      	pop	{r7, pc}
 800f672:	46c0      	nop			@ (mov r8, r8)
 800f674:	bffdfff8 	.word	0xbffdfff8
 800f678:	40020000 	.word	0x40020000
 800f67c:	ffff800f 	.word	0xffff800f
 800f680:	400200a8 	.word	0x400200a8

0800f684 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b086      	sub	sp, #24
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	607a      	str	r2, [r7, #4]
 800f690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f692:	2317      	movs	r3, #23
 800f694:	18fb      	adds	r3, r7, r3
 800f696:	2200      	movs	r2, #0
 800f698:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2224      	movs	r2, #36	@ 0x24
 800f69e:	5c9b      	ldrb	r3, [r3, r2]
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d101      	bne.n	800f6a8 <HAL_DMA_Start_IT+0x24>
 800f6a4:	2302      	movs	r3, #2
 800f6a6:	e04f      	b.n	800f748 <HAL_DMA_Start_IT+0xc4>
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2224      	movs	r2, #36	@ 0x24
 800f6ac:	2101      	movs	r1, #1
 800f6ae:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2225      	movs	r2, #37	@ 0x25
 800f6b4:	5c9b      	ldrb	r3, [r3, r2]
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d13a      	bne.n	800f732 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	2225      	movs	r2, #37	@ 0x25
 800f6c0:	2102      	movs	r1, #2
 800f6c2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	2101      	movs	r1, #1
 800f6d6:	438a      	bics	r2, r1
 800f6d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	687a      	ldr	r2, [r7, #4]
 800f6de:	68b9      	ldr	r1, [r7, #8]
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f000 f976 	bl	800f9d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d008      	beq.n	800f700 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	210e      	movs	r1, #14
 800f6fa:	430a      	orrs	r2, r1
 800f6fc:	601a      	str	r2, [r3, #0]
 800f6fe:	e00f      	b.n	800f720 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2104      	movs	r1, #4
 800f70c:	438a      	bics	r2, r1
 800f70e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	210a      	movs	r1, #10
 800f71c:	430a      	orrs	r2, r1
 800f71e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	2101      	movs	r1, #1
 800f72c:	430a      	orrs	r2, r1
 800f72e:	601a      	str	r2, [r3, #0]
 800f730:	e007      	b.n	800f742 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2224      	movs	r2, #36	@ 0x24
 800f736:	2100      	movs	r1, #0
 800f738:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800f73a:	2317      	movs	r3, #23
 800f73c:	18fb      	adds	r3, r7, r3
 800f73e:	2202      	movs	r2, #2
 800f740:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800f742:	2317      	movs	r3, #23
 800f744:	18fb      	adds	r3, r7, r3
 800f746:	781b      	ldrb	r3, [r3, #0]
}
 800f748:	0018      	movs	r0, r3
 800f74a:	46bd      	mov	sp, r7
 800f74c:	b006      	add	sp, #24
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f758:	230f      	movs	r3, #15
 800f75a:	18fb      	adds	r3, r7, r3
 800f75c:	2200      	movs	r2, #0
 800f75e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2225      	movs	r2, #37	@ 0x25
 800f764:	5c9b      	ldrb	r3, [r3, r2]
 800f766:	b2db      	uxtb	r3, r3
 800f768:	2b02      	cmp	r3, #2
 800f76a:	d008      	beq.n	800f77e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2204      	movs	r2, #4
 800f770:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2224      	movs	r2, #36	@ 0x24
 800f776:	2100      	movs	r1, #0
 800f778:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800f77a:	2301      	movs	r3, #1
 800f77c:	e024      	b.n	800f7c8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	210e      	movs	r1, #14
 800f78a:	438a      	bics	r2, r1
 800f78c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2101      	movs	r1, #1
 800f79a:	438a      	bics	r2, r1
 800f79c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7a2:	221c      	movs	r2, #28
 800f7a4:	401a      	ands	r2, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7aa:	2101      	movs	r1, #1
 800f7ac:	4091      	lsls	r1, r2
 800f7ae:	000a      	movs	r2, r1
 800f7b0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2225      	movs	r2, #37	@ 0x25
 800f7b6:	2101      	movs	r1, #1
 800f7b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2224      	movs	r2, #36	@ 0x24
 800f7be:	2100      	movs	r1, #0
 800f7c0:	5499      	strb	r1, [r3, r2]

    return status;
 800f7c2:	230f      	movs	r3, #15
 800f7c4:	18fb      	adds	r3, r7, r3
 800f7c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f7c8:	0018      	movs	r0, r3
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	b004      	add	sp, #16
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f7d8:	210f      	movs	r1, #15
 800f7da:	187b      	adds	r3, r7, r1
 800f7dc:	2200      	movs	r2, #0
 800f7de:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2225      	movs	r2, #37	@ 0x25
 800f7e4:	5c9b      	ldrb	r3, [r3, r2]
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	d006      	beq.n	800f7fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2204      	movs	r2, #4
 800f7f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800f7f2:	187b      	adds	r3, r7, r1
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	701a      	strb	r2, [r3, #0]
 800f7f8:	e02a      	b.n	800f850 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	210e      	movs	r1, #14
 800f806:	438a      	bics	r2, r1
 800f808:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2101      	movs	r1, #1
 800f816:	438a      	bics	r2, r1
 800f818:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f81e:	221c      	movs	r2, #28
 800f820:	401a      	ands	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f826:	2101      	movs	r1, #1
 800f828:	4091      	lsls	r1, r2
 800f82a:	000a      	movs	r2, r1
 800f82c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	2225      	movs	r2, #37	@ 0x25
 800f832:	2101      	movs	r1, #1
 800f834:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2224      	movs	r2, #36	@ 0x24
 800f83a:	2100      	movs	r1, #0
 800f83c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f842:	2b00      	cmp	r3, #0
 800f844:	d004      	beq.n	800f850 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	0010      	movs	r0, r2
 800f84e:	4798      	blx	r3
    }
  }
  return status;
 800f850:	230f      	movs	r3, #15
 800f852:	18fb      	adds	r3, r7, r3
 800f854:	781b      	ldrb	r3, [r3, #0]
}
 800f856:	0018      	movs	r0, r3
 800f858:	46bd      	mov	sp, r7
 800f85a:	b004      	add	sp, #16
 800f85c:	bd80      	pop	{r7, pc}

0800f85e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f85e:	b580      	push	{r7, lr}
 800f860:	b084      	sub	sp, #16
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f87a:	221c      	movs	r2, #28
 800f87c:	4013      	ands	r3, r2
 800f87e:	2204      	movs	r2, #4
 800f880:	409a      	lsls	r2, r3
 800f882:	0013      	movs	r3, r2
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	4013      	ands	r3, r2
 800f888:	d026      	beq.n	800f8d8 <HAL_DMA_IRQHandler+0x7a>
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	2204      	movs	r2, #4
 800f88e:	4013      	ands	r3, r2
 800f890:	d022      	beq.n	800f8d8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	2220      	movs	r2, #32
 800f89a:	4013      	ands	r3, r2
 800f89c:	d107      	bne.n	800f8ae <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2104      	movs	r1, #4
 800f8aa:	438a      	bics	r2, r1
 800f8ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8b2:	221c      	movs	r2, #28
 800f8b4:	401a      	ands	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8ba:	2104      	movs	r1, #4
 800f8bc:	4091      	lsls	r1, r2
 800f8be:	000a      	movs	r2, r1
 800f8c0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d100      	bne.n	800f8cc <HAL_DMA_IRQHandler+0x6e>
 800f8ca:	e071      	b.n	800f9b0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	0010      	movs	r0, r2
 800f8d4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800f8d6:	e06b      	b.n	800f9b0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8dc:	221c      	movs	r2, #28
 800f8de:	4013      	ands	r3, r2
 800f8e0:	2202      	movs	r2, #2
 800f8e2:	409a      	lsls	r2, r3
 800f8e4:	0013      	movs	r3, r2
 800f8e6:	68fa      	ldr	r2, [r7, #12]
 800f8e8:	4013      	ands	r3, r2
 800f8ea:	d02d      	beq.n	800f948 <HAL_DMA_IRQHandler+0xea>
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	2202      	movs	r2, #2
 800f8f0:	4013      	ands	r3, r2
 800f8f2:	d029      	beq.n	800f948 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2220      	movs	r2, #32
 800f8fc:	4013      	ands	r3, r2
 800f8fe:	d10b      	bne.n	800f918 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	210a      	movs	r1, #10
 800f90c:	438a      	bics	r2, r1
 800f90e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2225      	movs	r2, #37	@ 0x25
 800f914:	2101      	movs	r1, #1
 800f916:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f91c:	221c      	movs	r2, #28
 800f91e:	401a      	ands	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f924:	2102      	movs	r1, #2
 800f926:	4091      	lsls	r1, r2
 800f928:	000a      	movs	r2, r1
 800f92a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2224      	movs	r2, #36	@ 0x24
 800f930:	2100      	movs	r1, #0
 800f932:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d039      	beq.n	800f9b0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	0010      	movs	r0, r2
 800f944:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800f946:	e033      	b.n	800f9b0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f94c:	221c      	movs	r2, #28
 800f94e:	4013      	ands	r3, r2
 800f950:	2208      	movs	r2, #8
 800f952:	409a      	lsls	r2, r3
 800f954:	0013      	movs	r3, r2
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	4013      	ands	r3, r2
 800f95a:	d02a      	beq.n	800f9b2 <HAL_DMA_IRQHandler+0x154>
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	2208      	movs	r2, #8
 800f960:	4013      	ands	r3, r2
 800f962:	d026      	beq.n	800f9b2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	210e      	movs	r1, #14
 800f970:	438a      	bics	r2, r1
 800f972:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f978:	221c      	movs	r2, #28
 800f97a:	401a      	ands	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f980:	2101      	movs	r1, #1
 800f982:	4091      	lsls	r1, r2
 800f984:	000a      	movs	r2, r1
 800f986:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2201      	movs	r2, #1
 800f98c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2225      	movs	r2, #37	@ 0x25
 800f992:	2101      	movs	r1, #1
 800f994:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2224      	movs	r2, #36	@ 0x24
 800f99a:	2100      	movs	r1, #0
 800f99c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d005      	beq.n	800f9b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	0010      	movs	r0, r2
 800f9ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800f9b0:	46c0      	nop			@ (mov r8, r8)
 800f9b2:	46c0      	nop			@ (mov r8, r8)
}
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	b004      	add	sp, #16
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b082      	sub	sp, #8
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2225      	movs	r2, #37	@ 0x25
 800f9c6:	5c9b      	ldrb	r3, [r3, r2]
 800f9c8:	b2db      	uxtb	r3, r3
}
 800f9ca:	0018      	movs	r0, r3
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	b002      	add	sp, #8
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b084      	sub	sp, #16
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	60f8      	str	r0, [r7, #12]
 800f9da:	60b9      	str	r1, [r7, #8]
 800f9dc:	607a      	str	r2, [r7, #4]
 800f9de:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9e4:	221c      	movs	r2, #28
 800f9e6:	401a      	ands	r2, r3
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9ec:	2101      	movs	r1, #1
 800f9ee:	4091      	lsls	r1, r2
 800f9f0:	000a      	movs	r2, r1
 800f9f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	683a      	ldr	r2, [r7, #0]
 800f9fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	689b      	ldr	r3, [r3, #8]
 800fa00:	2b10      	cmp	r3, #16
 800fa02:	d108      	bne.n	800fa16 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	687a      	ldr	r2, [r7, #4]
 800fa0a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	68ba      	ldr	r2, [r7, #8]
 800fa12:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800fa14:	e007      	b.n	800fa26 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	68ba      	ldr	r2, [r7, #8]
 800fa1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	687a      	ldr	r2, [r7, #4]
 800fa24:	60da      	str	r2, [r3, #12]
}
 800fa26:	46c0      	nop			@ (mov r8, r8)
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	b004      	add	sp, #16
 800fa2c:	bd80      	pop	{r7, pc}
	...

0800fa30 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800fa38:	f7ff f8d2 	bl	800ebe0 <HAL_GetTick>
 800fa3c:	0003      	movs	r3, r0
 800fa3e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fa40:	e00f      	b.n	800fa62 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	3301      	adds	r3, #1
 800fa46:	d00c      	beq.n	800fa62 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d007      	beq.n	800fa5e <FLASH_WaitForLastOperation+0x2e>
 800fa4e:	f7ff f8c7 	bl	800ebe0 <HAL_GetTick>
 800fa52:	0002      	movs	r2, r0
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	1ad3      	subs	r3, r2, r3
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d201      	bcs.n	800fa62 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800fa5e:	2303      	movs	r3, #3
 800fa60:	e052      	b.n	800fb08 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fa62:	4b2b      	ldr	r3, [pc, #172]	@ (800fb10 <FLASH_WaitForLastOperation+0xe0>)
 800fa64:	699b      	ldr	r3, [r3, #24]
 800fa66:	2201      	movs	r2, #1
 800fa68:	4013      	ands	r3, r2
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	d0e9      	beq.n	800fa42 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800fa6e:	4b28      	ldr	r3, [pc, #160]	@ (800fb10 <FLASH_WaitForLastOperation+0xe0>)
 800fa70:	699b      	ldr	r3, [r3, #24]
 800fa72:	2202      	movs	r2, #2
 800fa74:	4013      	ands	r3, r2
 800fa76:	2b02      	cmp	r3, #2
 800fa78:	d102      	bne.n	800fa80 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fa7a:	4b25      	ldr	r3, [pc, #148]	@ (800fb10 <FLASH_WaitForLastOperation+0xe0>)
 800fa7c:	2202      	movs	r2, #2
 800fa7e:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fa80:	4b23      	ldr	r3, [pc, #140]	@ (800fb10 <FLASH_WaitForLastOperation+0xe0>)
 800fa82:	699a      	ldr	r2, [r3, #24]
 800fa84:	2380      	movs	r3, #128	@ 0x80
 800fa86:	005b      	lsls	r3, r3, #1
 800fa88:	401a      	ands	r2, r3
 800fa8a:	2380      	movs	r3, #128	@ 0x80
 800fa8c:	005b      	lsls	r3, r3, #1
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d035      	beq.n	800fafe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fa92:	4b1f      	ldr	r3, [pc, #124]	@ (800fb10 <FLASH_WaitForLastOperation+0xe0>)
 800fa94:	699a      	ldr	r2, [r3, #24]
 800fa96:	2380      	movs	r3, #128	@ 0x80
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fa9c:	2380      	movs	r3, #128	@ 0x80
 800fa9e:	009b      	lsls	r3, r3, #2
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d02c      	beq.n	800fafe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800faa4:	4b1a      	ldr	r3, [pc, #104]	@ (800fb10 <FLASH_WaitForLastOperation+0xe0>)
 800faa6:	699a      	ldr	r2, [r3, #24]
 800faa8:	2380      	movs	r3, #128	@ 0x80
 800faaa:	00db      	lsls	r3, r3, #3
 800faac:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800faae:	2380      	movs	r3, #128	@ 0x80
 800fab0:	00db      	lsls	r3, r3, #3
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d023      	beq.n	800fafe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fab6:	4b16      	ldr	r3, [pc, #88]	@ (800fb10 <FLASH_WaitForLastOperation+0xe0>)
 800fab8:	699a      	ldr	r2, [r3, #24]
 800faba:	2380      	movs	r3, #128	@ 0x80
 800fabc:	011b      	lsls	r3, r3, #4
 800fabe:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fac0:	2380      	movs	r3, #128	@ 0x80
 800fac2:	011b      	lsls	r3, r3, #4
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d01a      	beq.n	800fafe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fac8:	4b11      	ldr	r3, [pc, #68]	@ (800fb10 <FLASH_WaitForLastOperation+0xe0>)
 800faca:	699a      	ldr	r2, [r3, #24]
 800facc:	2380      	movs	r3, #128	@ 0x80
 800face:	019b      	lsls	r3, r3, #6
 800fad0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fad2:	2380      	movs	r3, #128	@ 0x80
 800fad4:	019b      	lsls	r3, r3, #6
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d011      	beq.n	800fafe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fada:	4b0d      	ldr	r3, [pc, #52]	@ (800fb10 <FLASH_WaitForLastOperation+0xe0>)
 800fadc:	699a      	ldr	r2, [r3, #24]
 800fade:	2380      	movs	r3, #128	@ 0x80
 800fae0:	029b      	lsls	r3, r3, #10
 800fae2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fae4:	2380      	movs	r3, #128	@ 0x80
 800fae6:	029b      	lsls	r3, r3, #10
 800fae8:	429a      	cmp	r2, r3
 800faea:	d008      	beq.n	800fafe <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800faec:	4b08      	ldr	r3, [pc, #32]	@ (800fb10 <FLASH_WaitForLastOperation+0xe0>)
 800faee:	699a      	ldr	r2, [r3, #24]
 800faf0:	2380      	movs	r3, #128	@ 0x80
 800faf2:	025b      	lsls	r3, r3, #9
 800faf4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800faf6:	2380      	movs	r3, #128	@ 0x80
 800faf8:	025b      	lsls	r3, r3, #9
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d103      	bne.n	800fb06 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800fafe:	f000 f809 	bl	800fb14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fb02:	2301      	movs	r3, #1
 800fb04:	e000      	b.n	800fb08 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	0018      	movs	r0, r3
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	b004      	add	sp, #16
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	40022000 	.word	0x40022000

0800fb14 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fb1e:	4b49      	ldr	r3, [pc, #292]	@ (800fc44 <FLASH_SetErrorCode+0x130>)
 800fb20:	699a      	ldr	r2, [r3, #24]
 800fb22:	2380      	movs	r3, #128	@ 0x80
 800fb24:	005b      	lsls	r3, r3, #1
 800fb26:	401a      	ands	r2, r3
 800fb28:	2380      	movs	r3, #128	@ 0x80
 800fb2a:	005b      	lsls	r3, r3, #1
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d10a      	bne.n	800fb46 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fb30:	4b45      	ldr	r3, [pc, #276]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fb32:	695b      	ldr	r3, [r3, #20]
 800fb34:	2202      	movs	r2, #2
 800fb36:	431a      	orrs	r2, r3
 800fb38:	4b43      	ldr	r3, [pc, #268]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fb3a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2280      	movs	r2, #128	@ 0x80
 800fb40:	0052      	lsls	r2, r2, #1
 800fb42:	4313      	orrs	r3, r2
 800fb44:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800fb46:	4b3f      	ldr	r3, [pc, #252]	@ (800fc44 <FLASH_SetErrorCode+0x130>)
 800fb48:	699a      	ldr	r2, [r3, #24]
 800fb4a:	2380      	movs	r3, #128	@ 0x80
 800fb4c:	009b      	lsls	r3, r3, #2
 800fb4e:	401a      	ands	r2, r3
 800fb50:	2380      	movs	r3, #128	@ 0x80
 800fb52:	009b      	lsls	r3, r3, #2
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d10a      	bne.n	800fb6e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fb58:	4b3b      	ldr	r3, [pc, #236]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fb5a:	695b      	ldr	r3, [r3, #20]
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	431a      	orrs	r2, r3
 800fb60:	4b39      	ldr	r3, [pc, #228]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fb62:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2280      	movs	r2, #128	@ 0x80
 800fb68:	0092      	lsls	r2, r2, #2
 800fb6a:	4313      	orrs	r3, r2
 800fb6c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800fb6e:	4b35      	ldr	r3, [pc, #212]	@ (800fc44 <FLASH_SetErrorCode+0x130>)
 800fb70:	699a      	ldr	r2, [r3, #24]
 800fb72:	2380      	movs	r3, #128	@ 0x80
 800fb74:	00db      	lsls	r3, r3, #3
 800fb76:	401a      	ands	r2, r3
 800fb78:	2380      	movs	r3, #128	@ 0x80
 800fb7a:	00db      	lsls	r3, r3, #3
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d10a      	bne.n	800fb96 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800fb80:	4b31      	ldr	r3, [pc, #196]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fb82:	695b      	ldr	r3, [r3, #20]
 800fb84:	2208      	movs	r2, #8
 800fb86:	431a      	orrs	r2, r3
 800fb88:	4b2f      	ldr	r3, [pc, #188]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fb8a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2280      	movs	r2, #128	@ 0x80
 800fb90:	00d2      	lsls	r2, r2, #3
 800fb92:	4313      	orrs	r3, r2
 800fb94:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800fb96:	4b2b      	ldr	r3, [pc, #172]	@ (800fc44 <FLASH_SetErrorCode+0x130>)
 800fb98:	699a      	ldr	r2, [r3, #24]
 800fb9a:	2380      	movs	r3, #128	@ 0x80
 800fb9c:	011b      	lsls	r3, r3, #4
 800fb9e:	401a      	ands	r2, r3
 800fba0:	2380      	movs	r3, #128	@ 0x80
 800fba2:	011b      	lsls	r3, r3, #4
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d10a      	bne.n	800fbbe <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800fba8:	4b27      	ldr	r3, [pc, #156]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fbaa:	695b      	ldr	r3, [r3, #20]
 800fbac:	2204      	movs	r2, #4
 800fbae:	431a      	orrs	r2, r3
 800fbb0:	4b25      	ldr	r3, [pc, #148]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fbb2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2280      	movs	r2, #128	@ 0x80
 800fbb8:	0112      	lsls	r2, r2, #4
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800fbbe:	4b21      	ldr	r3, [pc, #132]	@ (800fc44 <FLASH_SetErrorCode+0x130>)
 800fbc0:	699a      	ldr	r2, [r3, #24]
 800fbc2:	2380      	movs	r3, #128	@ 0x80
 800fbc4:	019b      	lsls	r3, r3, #6
 800fbc6:	401a      	ands	r2, r3
 800fbc8:	2380      	movs	r3, #128	@ 0x80
 800fbca:	019b      	lsls	r3, r3, #6
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d10a      	bne.n	800fbe6 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800fbd0:	4b1d      	ldr	r3, [pc, #116]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fbd2:	695b      	ldr	r3, [r3, #20]
 800fbd4:	2210      	movs	r2, #16
 800fbd6:	431a      	orrs	r2, r3
 800fbd8:	4b1b      	ldr	r3, [pc, #108]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fbda:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2280      	movs	r2, #128	@ 0x80
 800fbe0:	0192      	lsls	r2, r2, #6
 800fbe2:	4313      	orrs	r3, r2
 800fbe4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800fbe6:	4b17      	ldr	r3, [pc, #92]	@ (800fc44 <FLASH_SetErrorCode+0x130>)
 800fbe8:	699a      	ldr	r2, [r3, #24]
 800fbea:	2380      	movs	r3, #128	@ 0x80
 800fbec:	029b      	lsls	r3, r3, #10
 800fbee:	401a      	ands	r2, r3
 800fbf0:	2380      	movs	r3, #128	@ 0x80
 800fbf2:	029b      	lsls	r3, r3, #10
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d109      	bne.n	800fc0c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800fbf8:	4b13      	ldr	r3, [pc, #76]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fbfa:	695b      	ldr	r3, [r3, #20]
 800fbfc:	2220      	movs	r2, #32
 800fbfe:	431a      	orrs	r2, r3
 800fc00:	4b11      	ldr	r3, [pc, #68]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fc02:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2220      	movs	r2, #32
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800fc0c:	4b0d      	ldr	r3, [pc, #52]	@ (800fc44 <FLASH_SetErrorCode+0x130>)
 800fc0e:	699a      	ldr	r2, [r3, #24]
 800fc10:	2380      	movs	r3, #128	@ 0x80
 800fc12:	025b      	lsls	r3, r3, #9
 800fc14:	401a      	ands	r2, r3
 800fc16:	2380      	movs	r3, #128	@ 0x80
 800fc18:	025b      	lsls	r3, r3, #9
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d10a      	bne.n	800fc34 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800fc1e:	4b0a      	ldr	r3, [pc, #40]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fc20:	695b      	ldr	r3, [r3, #20]
 800fc22:	2240      	movs	r2, #64	@ 0x40
 800fc24:	431a      	orrs	r2, r3
 800fc26:	4b08      	ldr	r3, [pc, #32]	@ (800fc48 <FLASH_SetErrorCode+0x134>)
 800fc28:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2280      	movs	r2, #128	@ 0x80
 800fc2e:	0252      	lsls	r2, r2, #9
 800fc30:	4313      	orrs	r3, r2
 800fc32:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800fc34:	4b03      	ldr	r3, [pc, #12]	@ (800fc44 <FLASH_SetErrorCode+0x130>)
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	619a      	str	r2, [r3, #24]
}  
 800fc3a:	46c0      	nop			@ (mov r8, r8)
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	b002      	add	sp, #8
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	46c0      	nop			@ (mov r8, r8)
 800fc44:	40022000 	.word	0x40022000
 800fc48:	200025ac 	.word	0x200025ac

0800fc4c <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fc52:	4b12      	ldr	r3, [pc, #72]	@ (800fc9c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	2201      	movs	r2, #1
 800fc58:	4013      	ands	r3, r2
 800fc5a:	d019      	beq.n	800fc90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc5c:	f3ef 8310 	mrs	r3, PRIMASK
 800fc60:	607b      	str	r3, [r7, #4]
  return(result);
 800fc62:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800fc64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc66:	b672      	cpsid	i
}
 800fc68:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800fc6a:	4b0c      	ldr	r3, [pc, #48]	@ (800fc9c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fc6c:	4a0c      	ldr	r2, [pc, #48]	@ (800fca0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800fc6e:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800fc70:	4b0a      	ldr	r3, [pc, #40]	@ (800fc9c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fc72:	4a0c      	ldr	r2, [pc, #48]	@ (800fca4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800fc74:	60da      	str	r2, [r3, #12]
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	f383 8810 	msr	PRIMASK, r3
}
 800fc80:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fc82:	4b06      	ldr	r3, [pc, #24]	@ (800fc9c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	2201      	movs	r2, #1
 800fc88:	4013      	ands	r3, r2
 800fc8a:	d001      	beq.n	800fc90 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	e000      	b.n	800fc92 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800fc90:	2300      	movs	r3, #0
}
 800fc92:	0018      	movs	r0, r3
 800fc94:	46bd      	mov	sp, r7
 800fc96:	b004      	add	sp, #16
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	46c0      	nop			@ (mov r8, r8)
 800fc9c:	40022000 	.word	0x40022000
 800fca0:	89abcdef 	.word	0x89abcdef
 800fca4:	02030405 	.word	0x02030405

0800fca8 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800fcac:	4b04      	ldr	r3, [pc, #16]	@ (800fcc0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fcae:	685a      	ldr	r2, [r3, #4]
 800fcb0:	4b03      	ldr	r3, [pc, #12]	@ (800fcc0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fcb2:	2101      	movs	r1, #1
 800fcb4:	430a      	orrs	r2, r1
 800fcb6:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800fcb8:	2300      	movs	r3, #0
}
 800fcba:	0018      	movs	r0, r3
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	40022000 	.word	0x40022000

0800fcc4 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800fcc4:	b5b0      	push	{r4, r5, r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fccc:	250f      	movs	r5, #15
 800fcce:	197b      	adds	r3, r7, r5
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fcd4:	197c      	adds	r4, r7, r5
 800fcd6:	4b0f      	ldr	r3, [pc, #60]	@ (800fd14 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fcd8:	0018      	movs	r0, r3
 800fcda:	f7ff fea9 	bl	800fa30 <FLASH_WaitForLastOperation>
 800fcde:	0003      	movs	r3, r0
 800fce0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800fce2:	0029      	movs	r1, r5
 800fce4:	187b      	adds	r3, r7, r1
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d10c      	bne.n	800fd06 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fcec:	4b0a      	ldr	r3, [pc, #40]	@ (800fd18 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800fcee:	2200      	movs	r2, #0
 800fcf0:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fcf8:	187c      	adds	r4, r7, r1
 800fcfa:	4b06      	ldr	r3, [pc, #24]	@ (800fd14 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fcfc:	0018      	movs	r0, r3
 800fcfe:	f7ff fe97 	bl	800fa30 <FLASH_WaitForLastOperation>
 800fd02:	0003      	movs	r3, r0
 800fd04:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800fd06:	230f      	movs	r3, #15
 800fd08:	18fb      	adds	r3, r7, r3
 800fd0a:	781b      	ldrb	r3, [r3, #0]
}  
 800fd0c:	0018      	movs	r0, r3
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	b004      	add	sp, #16
 800fd12:	bdb0      	pop	{r4, r5, r7, pc}
 800fd14:	0000c350 	.word	0x0000c350
 800fd18:	200025ac 	.word	0x200025ac

0800fd1c <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800fd1c:	b5b0      	push	{r4, r5, r7, lr}
 800fd1e:	b086      	sub	sp, #24
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fd28:	2317      	movs	r3, #23
 800fd2a:	18fb      	adds	r3, r7, r3
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fd30:	4b24      	ldr	r3, [pc, #144]	@ (800fdc4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fd32:	7c1b      	ldrb	r3, [r3, #16]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d101      	bne.n	800fd3c <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800fd38:	2302      	movs	r3, #2
 800fd3a:	e03e      	b.n	800fdba <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800fd3c:	4b21      	ldr	r3, [pc, #132]	@ (800fdc4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fd3e:	2201      	movs	r2, #1
 800fd40:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fd42:	2517      	movs	r5, #23
 800fd44:	197c      	adds	r4, r7, r5
 800fd46:	4b20      	ldr	r3, [pc, #128]	@ (800fdc8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800fd48:	0018      	movs	r0, r3
 800fd4a:	f7ff fe71 	bl	800fa30 <FLASH_WaitForLastOperation>
 800fd4e:	0003      	movs	r3, r0
 800fd50:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800fd52:	197b      	adds	r3, r7, r5
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d129      	bne.n	800fdae <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fd5a:	4b1a      	ldr	r3, [pc, #104]	@ (800fdc4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2b02      	cmp	r3, #2
 800fd64:	d103      	bne.n	800fd6e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	601a      	str	r2, [r3, #0]
 800fd6c:	e013      	b.n	800fd96 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d104      	bne.n	800fd7e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	b292      	uxth	r2, r2
 800fd7a:	801a      	strh	r2, [r3, #0]
 800fd7c:	e00b      	b.n	800fd96 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d104      	bne.n	800fd8e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	b2d2      	uxtb	r2, r2
 800fd8a:	701a      	strb	r2, [r3, #0]
 800fd8c:	e003      	b.n	800fd96 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800fd8e:	2317      	movs	r3, #23
 800fd90:	18fb      	adds	r3, r7, r3
 800fd92:	2201      	movs	r2, #1
 800fd94:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800fd96:	2217      	movs	r2, #23
 800fd98:	18bb      	adds	r3, r7, r2
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d106      	bne.n	800fdae <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fda0:	18bc      	adds	r4, r7, r2
 800fda2:	4b09      	ldr	r3, [pc, #36]	@ (800fdc8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800fda4:	0018      	movs	r0, r3
 800fda6:	f7ff fe43 	bl	800fa30 <FLASH_WaitForLastOperation>
 800fdaa:	0003      	movs	r3, r0
 800fdac:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800fdae:	4b05      	ldr	r3, [pc, #20]	@ (800fdc4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	741a      	strb	r2, [r3, #16]

  return status;
 800fdb4:	2317      	movs	r3, #23
 800fdb6:	18fb      	adds	r3, r7, r3
 800fdb8:	781b      	ldrb	r3, [r3, #0]
}
 800fdba:	0018      	movs	r0, r3
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	b006      	add	sp, #24
 800fdc0:	bdb0      	pop	{r4, r5, r7, pc}
 800fdc2:	46c0      	nop			@ (mov r8, r8)
 800fdc4:	200025ac 	.word	0x200025ac
 800fdc8:	0000c350 	.word	0x0000c350

0800fdcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b086      	sub	sp, #24
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fdda:	2300      	movs	r3, #0
 800fddc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800fdde:	2300      	movs	r3, #0
 800fde0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800fde2:	e155      	b.n	8010090 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2101      	movs	r1, #1
 800fdea:	697a      	ldr	r2, [r7, #20]
 800fdec:	4091      	lsls	r1, r2
 800fdee:	000a      	movs	r2, r1
 800fdf0:	4013      	ands	r3, r2
 800fdf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d100      	bne.n	800fdfc <HAL_GPIO_Init+0x30>
 800fdfa:	e146      	b.n	801008a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	2203      	movs	r2, #3
 800fe02:	4013      	ands	r3, r2
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d005      	beq.n	800fe14 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	2203      	movs	r2, #3
 800fe0e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800fe10:	2b02      	cmp	r3, #2
 800fe12:	d130      	bne.n	800fe76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	689b      	ldr	r3, [r3, #8]
 800fe18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	005b      	lsls	r3, r3, #1
 800fe1e:	2203      	movs	r2, #3
 800fe20:	409a      	lsls	r2, r3
 800fe22:	0013      	movs	r3, r2
 800fe24:	43da      	mvns	r2, r3
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	4013      	ands	r3, r2
 800fe2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	68da      	ldr	r2, [r3, #12]
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	005b      	lsls	r3, r3, #1
 800fe34:	409a      	lsls	r2, r3
 800fe36:	0013      	movs	r3, r2
 800fe38:	693a      	ldr	r2, [r7, #16]
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	693a      	ldr	r2, [r7, #16]
 800fe42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fe4a:	2201      	movs	r2, #1
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	409a      	lsls	r2, r3
 800fe50:	0013      	movs	r3, r2
 800fe52:	43da      	mvns	r2, r3
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	4013      	ands	r3, r2
 800fe58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	685b      	ldr	r3, [r3, #4]
 800fe5e:	091b      	lsrs	r3, r3, #4
 800fe60:	2201      	movs	r2, #1
 800fe62:	401a      	ands	r2, r3
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	409a      	lsls	r2, r3
 800fe68:	0013      	movs	r3, r2
 800fe6a:	693a      	ldr	r2, [r7, #16]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	693a      	ldr	r2, [r7, #16]
 800fe74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	2203      	movs	r2, #3
 800fe7c:	4013      	ands	r3, r2
 800fe7e:	2b03      	cmp	r3, #3
 800fe80:	d017      	beq.n	800feb2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	005b      	lsls	r3, r3, #1
 800fe8c:	2203      	movs	r2, #3
 800fe8e:	409a      	lsls	r2, r3
 800fe90:	0013      	movs	r3, r2
 800fe92:	43da      	mvns	r2, r3
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	4013      	ands	r3, r2
 800fe98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	689a      	ldr	r2, [r3, #8]
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	005b      	lsls	r3, r3, #1
 800fea2:	409a      	lsls	r2, r3
 800fea4:	0013      	movs	r3, r2
 800fea6:	693a      	ldr	r2, [r7, #16]
 800fea8:	4313      	orrs	r3, r2
 800feaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	693a      	ldr	r2, [r7, #16]
 800feb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	2203      	movs	r2, #3
 800feb8:	4013      	ands	r3, r2
 800feba:	2b02      	cmp	r3, #2
 800febc:	d123      	bne.n	800ff06 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	08da      	lsrs	r2, r3, #3
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	3208      	adds	r2, #8
 800fec6:	0092      	lsls	r2, r2, #2
 800fec8:	58d3      	ldr	r3, [r2, r3]
 800feca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	2207      	movs	r2, #7
 800fed0:	4013      	ands	r3, r2
 800fed2:	009b      	lsls	r3, r3, #2
 800fed4:	220f      	movs	r2, #15
 800fed6:	409a      	lsls	r2, r3
 800fed8:	0013      	movs	r3, r2
 800feda:	43da      	mvns	r2, r3
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	4013      	ands	r3, r2
 800fee0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	691a      	ldr	r2, [r3, #16]
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	2107      	movs	r1, #7
 800feea:	400b      	ands	r3, r1
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	409a      	lsls	r2, r3
 800fef0:	0013      	movs	r3, r2
 800fef2:	693a      	ldr	r2, [r7, #16]
 800fef4:	4313      	orrs	r3, r2
 800fef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	08da      	lsrs	r2, r3, #3
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	3208      	adds	r2, #8
 800ff00:	0092      	lsls	r2, r2, #2
 800ff02:	6939      	ldr	r1, [r7, #16]
 800ff04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	005b      	lsls	r3, r3, #1
 800ff10:	2203      	movs	r2, #3
 800ff12:	409a      	lsls	r2, r3
 800ff14:	0013      	movs	r3, r2
 800ff16:	43da      	mvns	r2, r3
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	4013      	ands	r3, r2
 800ff1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	2203      	movs	r2, #3
 800ff24:	401a      	ands	r2, r3
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	005b      	lsls	r3, r3, #1
 800ff2a:	409a      	lsls	r2, r3
 800ff2c:	0013      	movs	r3, r2
 800ff2e:	693a      	ldr	r2, [r7, #16]
 800ff30:	4313      	orrs	r3, r2
 800ff32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	693a      	ldr	r2, [r7, #16]
 800ff38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	685a      	ldr	r2, [r3, #4]
 800ff3e:	23c0      	movs	r3, #192	@ 0xc0
 800ff40:	029b      	lsls	r3, r3, #10
 800ff42:	4013      	ands	r3, r2
 800ff44:	d100      	bne.n	800ff48 <HAL_GPIO_Init+0x17c>
 800ff46:	e0a0      	b.n	801008a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ff48:	4b57      	ldr	r3, [pc, #348]	@ (80100a8 <HAL_GPIO_Init+0x2dc>)
 800ff4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ff4c:	4b56      	ldr	r3, [pc, #344]	@ (80100a8 <HAL_GPIO_Init+0x2dc>)
 800ff4e:	2101      	movs	r1, #1
 800ff50:	430a      	orrs	r2, r1
 800ff52:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800ff54:	4a55      	ldr	r2, [pc, #340]	@ (80100ac <HAL_GPIO_Init+0x2e0>)
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	089b      	lsrs	r3, r3, #2
 800ff5a:	3302      	adds	r3, #2
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	589b      	ldr	r3, [r3, r2]
 800ff60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	2203      	movs	r2, #3
 800ff66:	4013      	ands	r3, r2
 800ff68:	009b      	lsls	r3, r3, #2
 800ff6a:	220f      	movs	r2, #15
 800ff6c:	409a      	lsls	r2, r3
 800ff6e:	0013      	movs	r3, r2
 800ff70:	43da      	mvns	r2, r3
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	4013      	ands	r3, r2
 800ff76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800ff78:	687a      	ldr	r2, [r7, #4]
 800ff7a:	23a0      	movs	r3, #160	@ 0xa0
 800ff7c:	05db      	lsls	r3, r3, #23
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d01f      	beq.n	800ffc2 <HAL_GPIO_Init+0x1f6>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	4a4a      	ldr	r2, [pc, #296]	@ (80100b0 <HAL_GPIO_Init+0x2e4>)
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d019      	beq.n	800ffbe <HAL_GPIO_Init+0x1f2>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4a49      	ldr	r2, [pc, #292]	@ (80100b4 <HAL_GPIO_Init+0x2e8>)
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d013      	beq.n	800ffba <HAL_GPIO_Init+0x1ee>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	4a48      	ldr	r2, [pc, #288]	@ (80100b8 <HAL_GPIO_Init+0x2ec>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d00d      	beq.n	800ffb6 <HAL_GPIO_Init+0x1ea>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	4a47      	ldr	r2, [pc, #284]	@ (80100bc <HAL_GPIO_Init+0x2f0>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d007      	beq.n	800ffb2 <HAL_GPIO_Init+0x1e6>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	4a46      	ldr	r2, [pc, #280]	@ (80100c0 <HAL_GPIO_Init+0x2f4>)
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	d101      	bne.n	800ffae <HAL_GPIO_Init+0x1e2>
 800ffaa:	2305      	movs	r3, #5
 800ffac:	e00a      	b.n	800ffc4 <HAL_GPIO_Init+0x1f8>
 800ffae:	2306      	movs	r3, #6
 800ffb0:	e008      	b.n	800ffc4 <HAL_GPIO_Init+0x1f8>
 800ffb2:	2304      	movs	r3, #4
 800ffb4:	e006      	b.n	800ffc4 <HAL_GPIO_Init+0x1f8>
 800ffb6:	2303      	movs	r3, #3
 800ffb8:	e004      	b.n	800ffc4 <HAL_GPIO_Init+0x1f8>
 800ffba:	2302      	movs	r3, #2
 800ffbc:	e002      	b.n	800ffc4 <HAL_GPIO_Init+0x1f8>
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	e000      	b.n	800ffc4 <HAL_GPIO_Init+0x1f8>
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	697a      	ldr	r2, [r7, #20]
 800ffc6:	2103      	movs	r1, #3
 800ffc8:	400a      	ands	r2, r1
 800ffca:	0092      	lsls	r2, r2, #2
 800ffcc:	4093      	lsls	r3, r2
 800ffce:	693a      	ldr	r2, [r7, #16]
 800ffd0:	4313      	orrs	r3, r2
 800ffd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ffd4:	4935      	ldr	r1, [pc, #212]	@ (80100ac <HAL_GPIO_Init+0x2e0>)
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	089b      	lsrs	r3, r3, #2
 800ffda:	3302      	adds	r3, #2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	693a      	ldr	r2, [r7, #16]
 800ffe0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ffe2:	4b38      	ldr	r3, [pc, #224]	@ (80100c4 <HAL_GPIO_Init+0x2f8>)
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	43da      	mvns	r2, r3
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	4013      	ands	r3, r2
 800fff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	685a      	ldr	r2, [r3, #4]
 800fff6:	2380      	movs	r3, #128	@ 0x80
 800fff8:	035b      	lsls	r3, r3, #13
 800fffa:	4013      	ands	r3, r2
 800fffc:	d003      	beq.n	8010006 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800fffe:	693a      	ldr	r2, [r7, #16]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	4313      	orrs	r3, r2
 8010004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8010006:	4b2f      	ldr	r3, [pc, #188]	@ (80100c4 <HAL_GPIO_Init+0x2f8>)
 8010008:	693a      	ldr	r2, [r7, #16]
 801000a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 801000c:	4b2d      	ldr	r3, [pc, #180]	@ (80100c4 <HAL_GPIO_Init+0x2f8>)
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	43da      	mvns	r2, r3
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	4013      	ands	r3, r2
 801001a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	685a      	ldr	r2, [r3, #4]
 8010020:	2380      	movs	r3, #128	@ 0x80
 8010022:	039b      	lsls	r3, r3, #14
 8010024:	4013      	ands	r3, r2
 8010026:	d003      	beq.n	8010030 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8010028:	693a      	ldr	r2, [r7, #16]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	4313      	orrs	r3, r2
 801002e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8010030:	4b24      	ldr	r3, [pc, #144]	@ (80100c4 <HAL_GPIO_Init+0x2f8>)
 8010032:	693a      	ldr	r2, [r7, #16]
 8010034:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8010036:	4b23      	ldr	r3, [pc, #140]	@ (80100c4 <HAL_GPIO_Init+0x2f8>)
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	43da      	mvns	r2, r3
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	4013      	ands	r3, r2
 8010044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	685a      	ldr	r2, [r3, #4]
 801004a:	2380      	movs	r3, #128	@ 0x80
 801004c:	029b      	lsls	r3, r3, #10
 801004e:	4013      	ands	r3, r2
 8010050:	d003      	beq.n	801005a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8010052:	693a      	ldr	r2, [r7, #16]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	4313      	orrs	r3, r2
 8010058:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801005a:	4b1a      	ldr	r3, [pc, #104]	@ (80100c4 <HAL_GPIO_Init+0x2f8>)
 801005c:	693a      	ldr	r2, [r7, #16]
 801005e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010060:	4b18      	ldr	r3, [pc, #96]	@ (80100c4 <HAL_GPIO_Init+0x2f8>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	43da      	mvns	r2, r3
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	4013      	ands	r3, r2
 801006e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	685a      	ldr	r2, [r3, #4]
 8010074:	2380      	movs	r3, #128	@ 0x80
 8010076:	025b      	lsls	r3, r3, #9
 8010078:	4013      	ands	r3, r2
 801007a:	d003      	beq.n	8010084 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 801007c:	693a      	ldr	r2, [r7, #16]
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	4313      	orrs	r3, r2
 8010082:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010084:	4b0f      	ldr	r3, [pc, #60]	@ (80100c4 <HAL_GPIO_Init+0x2f8>)
 8010086:	693a      	ldr	r2, [r7, #16]
 8010088:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	3301      	adds	r3, #1
 801008e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	681a      	ldr	r2, [r3, #0]
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	40da      	lsrs	r2, r3
 8010098:	1e13      	subs	r3, r2, #0
 801009a:	d000      	beq.n	801009e <HAL_GPIO_Init+0x2d2>
 801009c:	e6a2      	b.n	800fde4 <HAL_GPIO_Init+0x18>
  }
}
 801009e:	46c0      	nop			@ (mov r8, r8)
 80100a0:	46c0      	nop			@ (mov r8, r8)
 80100a2:	46bd      	mov	sp, r7
 80100a4:	b006      	add	sp, #24
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	40021000 	.word	0x40021000
 80100ac:	40010000 	.word	0x40010000
 80100b0:	50000400 	.word	0x50000400
 80100b4:	50000800 	.word	0x50000800
 80100b8:	50000c00 	.word	0x50000c00
 80100bc:	50001000 	.word	0x50001000
 80100c0:	50001c00 	.word	0x50001c00
 80100c4:	40010400 	.word	0x40010400

080100c8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	000a      	movs	r2, r1
 80100d2:	1cbb      	adds	r3, r7, #2
 80100d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	691b      	ldr	r3, [r3, #16]
 80100da:	1cba      	adds	r2, r7, #2
 80100dc:	8812      	ldrh	r2, [r2, #0]
 80100de:	4013      	ands	r3, r2
 80100e0:	d004      	beq.n	80100ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80100e2:	230f      	movs	r3, #15
 80100e4:	18fb      	adds	r3, r7, r3
 80100e6:	2201      	movs	r2, #1
 80100e8:	701a      	strb	r2, [r3, #0]
 80100ea:	e003      	b.n	80100f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80100ec:	230f      	movs	r3, #15
 80100ee:	18fb      	adds	r3, r7, r3
 80100f0:	2200      	movs	r2, #0
 80100f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80100f4:	230f      	movs	r3, #15
 80100f6:	18fb      	adds	r3, r7, r3
 80100f8:	781b      	ldrb	r3, [r3, #0]
}
 80100fa:	0018      	movs	r0, r3
 80100fc:	46bd      	mov	sp, r7
 80100fe:	b004      	add	sp, #16
 8010100:	bd80      	pop	{r7, pc}

08010102 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b082      	sub	sp, #8
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
 801010a:	0008      	movs	r0, r1
 801010c:	0011      	movs	r1, r2
 801010e:	1cbb      	adds	r3, r7, #2
 8010110:	1c02      	adds	r2, r0, #0
 8010112:	801a      	strh	r2, [r3, #0]
 8010114:	1c7b      	adds	r3, r7, #1
 8010116:	1c0a      	adds	r2, r1, #0
 8010118:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801011a:	1c7b      	adds	r3, r7, #1
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d004      	beq.n	801012c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010122:	1cbb      	adds	r3, r7, #2
 8010124:	881a      	ldrh	r2, [r3, #0]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801012a:	e003      	b.n	8010134 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 801012c:	1cbb      	adds	r3, r7, #2
 801012e:	881a      	ldrh	r2, [r3, #0]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010134:	46c0      	nop			@ (mov r8, r8)
 8010136:	46bd      	mov	sp, r7
 8010138:	b002      	add	sp, #8
 801013a:	bd80      	pop	{r7, pc}

0801013c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	0002      	movs	r2, r0
 8010144:	1dbb      	adds	r3, r7, #6
 8010146:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8010148:	4b09      	ldr	r3, [pc, #36]	@ (8010170 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801014a:	695b      	ldr	r3, [r3, #20]
 801014c:	1dba      	adds	r2, r7, #6
 801014e:	8812      	ldrh	r2, [r2, #0]
 8010150:	4013      	ands	r3, r2
 8010152:	d008      	beq.n	8010166 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010154:	4b06      	ldr	r3, [pc, #24]	@ (8010170 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8010156:	1dba      	adds	r2, r7, #6
 8010158:	8812      	ldrh	r2, [r2, #0]
 801015a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801015c:	1dbb      	adds	r3, r7, #6
 801015e:	881b      	ldrh	r3, [r3, #0]
 8010160:	0018      	movs	r0, r3
 8010162:	f7f8 f883 	bl	800826c <HAL_GPIO_EXTI_Callback>
  }
}
 8010166:	46c0      	nop			@ (mov r8, r8)
 8010168:	46bd      	mov	sp, r7
 801016a:	b002      	add	sp, #8
 801016c:	bd80      	pop	{r7, pc}
 801016e:	46c0      	nop			@ (mov r8, r8)
 8010170:	40010400 	.word	0x40010400

08010174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d101      	bne.n	8010186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010182:	2301      	movs	r3, #1
 8010184:	e082      	b.n	801028c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2241      	movs	r2, #65	@ 0x41
 801018a:	5c9b      	ldrb	r3, [r3, r2]
 801018c:	b2db      	uxtb	r3, r3
 801018e:	2b00      	cmp	r3, #0
 8010190:	d107      	bne.n	80101a2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2240      	movs	r2, #64	@ 0x40
 8010196:	2100      	movs	r1, #0
 8010198:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	0018      	movs	r0, r3
 801019e:	f7f7 fb43 	bl	8007828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2241      	movs	r2, #65	@ 0x41
 80101a6:	2124      	movs	r1, #36	@ 0x24
 80101a8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2101      	movs	r1, #1
 80101b6:	438a      	bics	r2, r1
 80101b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	685a      	ldr	r2, [r3, #4]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	4934      	ldr	r1, [pc, #208]	@ (8010294 <HAL_I2C_Init+0x120>)
 80101c4:	400a      	ands	r2, r1
 80101c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	689a      	ldr	r2, [r3, #8]
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	4931      	ldr	r1, [pc, #196]	@ (8010298 <HAL_I2C_Init+0x124>)
 80101d4:	400a      	ands	r2, r1
 80101d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	68db      	ldr	r3, [r3, #12]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d108      	bne.n	80101f2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	689a      	ldr	r2, [r3, #8]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	2180      	movs	r1, #128	@ 0x80
 80101ea:	0209      	lsls	r1, r1, #8
 80101ec:	430a      	orrs	r2, r1
 80101ee:	609a      	str	r2, [r3, #8]
 80101f0:	e007      	b.n	8010202 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	689a      	ldr	r2, [r3, #8]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	2184      	movs	r1, #132	@ 0x84
 80101fc:	0209      	lsls	r1, r1, #8
 80101fe:	430a      	orrs	r2, r1
 8010200:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	2b02      	cmp	r3, #2
 8010208:	d104      	bne.n	8010214 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	2280      	movs	r2, #128	@ 0x80
 8010210:	0112      	lsls	r2, r2, #4
 8010212:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	685a      	ldr	r2, [r3, #4]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	491f      	ldr	r1, [pc, #124]	@ (801029c <HAL_I2C_Init+0x128>)
 8010220:	430a      	orrs	r2, r1
 8010222:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	68da      	ldr	r2, [r3, #12]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	491a      	ldr	r1, [pc, #104]	@ (8010298 <HAL_I2C_Init+0x124>)
 8010230:	400a      	ands	r2, r1
 8010232:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	691a      	ldr	r2, [r3, #16]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	695b      	ldr	r3, [r3, #20]
 801023c:	431a      	orrs	r2, r3
 801023e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	699b      	ldr	r3, [r3, #24]
 8010244:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	430a      	orrs	r2, r1
 801024c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	69d9      	ldr	r1, [r3, #28]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a1a      	ldr	r2, [r3, #32]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	430a      	orrs	r2, r1
 801025c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	2101      	movs	r1, #1
 801026a:	430a      	orrs	r2, r1
 801026c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2200      	movs	r2, #0
 8010272:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2241      	movs	r2, #65	@ 0x41
 8010278:	2120      	movs	r1, #32
 801027a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2200      	movs	r2, #0
 8010280:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2242      	movs	r2, #66	@ 0x42
 8010286:	2100      	movs	r1, #0
 8010288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801028a:	2300      	movs	r3, #0
}
 801028c:	0018      	movs	r0, r3
 801028e:	46bd      	mov	sp, r7
 8010290:	b002      	add	sp, #8
 8010292:	bd80      	pop	{r7, pc}
 8010294:	f0ffffff 	.word	0xf0ffffff
 8010298:	ffff7fff 	.word	0xffff7fff
 801029c:	02008000 	.word	0x02008000

080102a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80102a0:	b590      	push	{r4, r7, lr}
 80102a2:	b089      	sub	sp, #36	@ 0x24
 80102a4:	af02      	add	r7, sp, #8
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	0008      	movs	r0, r1
 80102aa:	607a      	str	r2, [r7, #4]
 80102ac:	0019      	movs	r1, r3
 80102ae:	230a      	movs	r3, #10
 80102b0:	18fb      	adds	r3, r7, r3
 80102b2:	1c02      	adds	r2, r0, #0
 80102b4:	801a      	strh	r2, [r3, #0]
 80102b6:	2308      	movs	r3, #8
 80102b8:	18fb      	adds	r3, r7, r3
 80102ba:	1c0a      	adds	r2, r1, #0
 80102bc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2241      	movs	r2, #65	@ 0x41
 80102c2:	5c9b      	ldrb	r3, [r3, r2]
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	2b20      	cmp	r3, #32
 80102c8:	d000      	beq.n	80102cc <HAL_I2C_Master_Transmit+0x2c>
 80102ca:	e0e7      	b.n	801049c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2240      	movs	r2, #64	@ 0x40
 80102d0:	5c9b      	ldrb	r3, [r3, r2]
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d101      	bne.n	80102da <HAL_I2C_Master_Transmit+0x3a>
 80102d6:	2302      	movs	r3, #2
 80102d8:	e0e1      	b.n	801049e <HAL_I2C_Master_Transmit+0x1fe>
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2240      	movs	r2, #64	@ 0x40
 80102de:	2101      	movs	r1, #1
 80102e0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80102e2:	f7fe fc7d 	bl	800ebe0 <HAL_GetTick>
 80102e6:	0003      	movs	r3, r0
 80102e8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80102ea:	2380      	movs	r3, #128	@ 0x80
 80102ec:	0219      	lsls	r1, r3, #8
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	2319      	movs	r3, #25
 80102f6:	2201      	movs	r2, #1
 80102f8:	f001 ff98 	bl	801222c <I2C_WaitOnFlagUntilTimeout>
 80102fc:	1e03      	subs	r3, r0, #0
 80102fe:	d001      	beq.n	8010304 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8010300:	2301      	movs	r3, #1
 8010302:	e0cc      	b.n	801049e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2241      	movs	r2, #65	@ 0x41
 8010308:	2121      	movs	r1, #33	@ 0x21
 801030a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	2242      	movs	r2, #66	@ 0x42
 8010310:	2110      	movs	r1, #16
 8010312:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	2200      	movs	r2, #0
 8010318:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	687a      	ldr	r2, [r7, #4]
 801031e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2208      	movs	r2, #8
 8010324:	18ba      	adds	r2, r7, r2
 8010326:	8812      	ldrh	r2, [r2, #0]
 8010328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2200      	movs	r2, #0
 801032e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010334:	b29b      	uxth	r3, r3
 8010336:	2bff      	cmp	r3, #255	@ 0xff
 8010338:	d911      	bls.n	801035e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	22ff      	movs	r2, #255	@ 0xff
 801033e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010344:	b2da      	uxtb	r2, r3
 8010346:	2380      	movs	r3, #128	@ 0x80
 8010348:	045c      	lsls	r4, r3, #17
 801034a:	230a      	movs	r3, #10
 801034c:	18fb      	adds	r3, r7, r3
 801034e:	8819      	ldrh	r1, [r3, #0]
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	4b55      	ldr	r3, [pc, #340]	@ (80104a8 <HAL_I2C_Master_Transmit+0x208>)
 8010354:	9300      	str	r3, [sp, #0]
 8010356:	0023      	movs	r3, r4
 8010358:	f002 f9ba 	bl	80126d0 <I2C_TransferConfig>
 801035c:	e075      	b.n	801044a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010362:	b29a      	uxth	r2, r3
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801036c:	b2da      	uxtb	r2, r3
 801036e:	2380      	movs	r3, #128	@ 0x80
 8010370:	049c      	lsls	r4, r3, #18
 8010372:	230a      	movs	r3, #10
 8010374:	18fb      	adds	r3, r7, r3
 8010376:	8819      	ldrh	r1, [r3, #0]
 8010378:	68f8      	ldr	r0, [r7, #12]
 801037a:	4b4b      	ldr	r3, [pc, #300]	@ (80104a8 <HAL_I2C_Master_Transmit+0x208>)
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	0023      	movs	r3, r4
 8010380:	f002 f9a6 	bl	80126d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8010384:	e061      	b.n	801044a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010386:	697a      	ldr	r2, [r7, #20]
 8010388:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	0018      	movs	r0, r3
 801038e:	f001 ff9b 	bl	80122c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8010392:	1e03      	subs	r3, r0, #0
 8010394:	d001      	beq.n	801039a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8010396:	2301      	movs	r3, #1
 8010398:	e081      	b.n	801049e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801039e:	781a      	ldrb	r2, [r3, #0]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	3b01      	subs	r3, #1
 80103b8:	b29a      	uxth	r2, r3
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80103c2:	3b01      	subs	r3, #1
 80103c4:	b29a      	uxth	r2, r3
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d03a      	beq.n	801044a <HAL_I2C_Master_Transmit+0x1aa>
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d136      	bne.n	801044a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80103dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80103de:	68f8      	ldr	r0, [r7, #12]
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	9300      	str	r3, [sp, #0]
 80103e4:	0013      	movs	r3, r2
 80103e6:	2200      	movs	r2, #0
 80103e8:	2180      	movs	r1, #128	@ 0x80
 80103ea:	f001 ff1f 	bl	801222c <I2C_WaitOnFlagUntilTimeout>
 80103ee:	1e03      	subs	r3, r0, #0
 80103f0:	d001      	beq.n	80103f6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80103f2:	2301      	movs	r3, #1
 80103f4:	e053      	b.n	801049e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	2bff      	cmp	r3, #255	@ 0xff
 80103fe:	d911      	bls.n	8010424 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	22ff      	movs	r2, #255	@ 0xff
 8010404:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801040a:	b2da      	uxtb	r2, r3
 801040c:	2380      	movs	r3, #128	@ 0x80
 801040e:	045c      	lsls	r4, r3, #17
 8010410:	230a      	movs	r3, #10
 8010412:	18fb      	adds	r3, r7, r3
 8010414:	8819      	ldrh	r1, [r3, #0]
 8010416:	68f8      	ldr	r0, [r7, #12]
 8010418:	2300      	movs	r3, #0
 801041a:	9300      	str	r3, [sp, #0]
 801041c:	0023      	movs	r3, r4
 801041e:	f002 f957 	bl	80126d0 <I2C_TransferConfig>
 8010422:	e012      	b.n	801044a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010428:	b29a      	uxth	r2, r3
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010432:	b2da      	uxtb	r2, r3
 8010434:	2380      	movs	r3, #128	@ 0x80
 8010436:	049c      	lsls	r4, r3, #18
 8010438:	230a      	movs	r3, #10
 801043a:	18fb      	adds	r3, r7, r3
 801043c:	8819      	ldrh	r1, [r3, #0]
 801043e:	68f8      	ldr	r0, [r7, #12]
 8010440:	2300      	movs	r3, #0
 8010442:	9300      	str	r3, [sp, #0]
 8010444:	0023      	movs	r3, r4
 8010446:	f002 f943 	bl	80126d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801044e:	b29b      	uxth	r3, r3
 8010450:	2b00      	cmp	r3, #0
 8010452:	d198      	bne.n	8010386 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010454:	697a      	ldr	r2, [r7, #20]
 8010456:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	0018      	movs	r0, r3
 801045c:	f001 ff7a 	bl	8012354 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010460:	1e03      	subs	r3, r0, #0
 8010462:	d001      	beq.n	8010468 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8010464:	2301      	movs	r3, #1
 8010466:	e01a      	b.n	801049e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2220      	movs	r2, #32
 801046e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	685a      	ldr	r2, [r3, #4]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	490c      	ldr	r1, [pc, #48]	@ (80104ac <HAL_I2C_Master_Transmit+0x20c>)
 801047c:	400a      	ands	r2, r1
 801047e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2241      	movs	r2, #65	@ 0x41
 8010484:	2120      	movs	r1, #32
 8010486:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	2242      	movs	r2, #66	@ 0x42
 801048c:	2100      	movs	r1, #0
 801048e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2240      	movs	r2, #64	@ 0x40
 8010494:	2100      	movs	r1, #0
 8010496:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010498:	2300      	movs	r3, #0
 801049a:	e000      	b.n	801049e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 801049c:	2302      	movs	r3, #2
  }
}
 801049e:	0018      	movs	r0, r3
 80104a0:	46bd      	mov	sp, r7
 80104a2:	b007      	add	sp, #28
 80104a4:	bd90      	pop	{r4, r7, pc}
 80104a6:	46c0      	nop			@ (mov r8, r8)
 80104a8:	80002000 	.word	0x80002000
 80104ac:	fe00e800 	.word	0xfe00e800

080104b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80104b0:	b590      	push	{r4, r7, lr}
 80104b2:	b089      	sub	sp, #36	@ 0x24
 80104b4:	af02      	add	r7, sp, #8
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	0008      	movs	r0, r1
 80104ba:	607a      	str	r2, [r7, #4]
 80104bc:	0019      	movs	r1, r3
 80104be:	230a      	movs	r3, #10
 80104c0:	18fb      	adds	r3, r7, r3
 80104c2:	1c02      	adds	r2, r0, #0
 80104c4:	801a      	strh	r2, [r3, #0]
 80104c6:	2308      	movs	r3, #8
 80104c8:	18fb      	adds	r3, r7, r3
 80104ca:	1c0a      	adds	r2, r1, #0
 80104cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2241      	movs	r2, #65	@ 0x41
 80104d2:	5c9b      	ldrb	r3, [r3, r2]
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	2b20      	cmp	r3, #32
 80104d8:	d000      	beq.n	80104dc <HAL_I2C_Master_Receive+0x2c>
 80104da:	e0e8      	b.n	80106ae <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2240      	movs	r2, #64	@ 0x40
 80104e0:	5c9b      	ldrb	r3, [r3, r2]
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d101      	bne.n	80104ea <HAL_I2C_Master_Receive+0x3a>
 80104e6:	2302      	movs	r3, #2
 80104e8:	e0e2      	b.n	80106b0 <HAL_I2C_Master_Receive+0x200>
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2240      	movs	r2, #64	@ 0x40
 80104ee:	2101      	movs	r1, #1
 80104f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80104f2:	f7fe fb75 	bl	800ebe0 <HAL_GetTick>
 80104f6:	0003      	movs	r3, r0
 80104f8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80104fa:	2380      	movs	r3, #128	@ 0x80
 80104fc:	0219      	lsls	r1, r3, #8
 80104fe:	68f8      	ldr	r0, [r7, #12]
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	2319      	movs	r3, #25
 8010506:	2201      	movs	r2, #1
 8010508:	f001 fe90 	bl	801222c <I2C_WaitOnFlagUntilTimeout>
 801050c:	1e03      	subs	r3, r0, #0
 801050e:	d001      	beq.n	8010514 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8010510:	2301      	movs	r3, #1
 8010512:	e0cd      	b.n	80106b0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	2241      	movs	r2, #65	@ 0x41
 8010518:	2122      	movs	r1, #34	@ 0x22
 801051a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2242      	movs	r2, #66	@ 0x42
 8010520:	2110      	movs	r1, #16
 8010522:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2200      	movs	r2, #0
 8010528:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	687a      	ldr	r2, [r7, #4]
 801052e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2208      	movs	r2, #8
 8010534:	18ba      	adds	r2, r7, r2
 8010536:	8812      	ldrh	r2, [r2, #0]
 8010538:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2200      	movs	r2, #0
 801053e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010544:	b29b      	uxth	r3, r3
 8010546:	2bff      	cmp	r3, #255	@ 0xff
 8010548:	d911      	bls.n	801056e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	22ff      	movs	r2, #255	@ 0xff
 801054e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010554:	b2da      	uxtb	r2, r3
 8010556:	2380      	movs	r3, #128	@ 0x80
 8010558:	045c      	lsls	r4, r3, #17
 801055a:	230a      	movs	r3, #10
 801055c:	18fb      	adds	r3, r7, r3
 801055e:	8819      	ldrh	r1, [r3, #0]
 8010560:	68f8      	ldr	r0, [r7, #12]
 8010562:	4b55      	ldr	r3, [pc, #340]	@ (80106b8 <HAL_I2C_Master_Receive+0x208>)
 8010564:	9300      	str	r3, [sp, #0]
 8010566:	0023      	movs	r3, r4
 8010568:	f002 f8b2 	bl	80126d0 <I2C_TransferConfig>
 801056c:	e076      	b.n	801065c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010572:	b29a      	uxth	r2, r3
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801057c:	b2da      	uxtb	r2, r3
 801057e:	2380      	movs	r3, #128	@ 0x80
 8010580:	049c      	lsls	r4, r3, #18
 8010582:	230a      	movs	r3, #10
 8010584:	18fb      	adds	r3, r7, r3
 8010586:	8819      	ldrh	r1, [r3, #0]
 8010588:	68f8      	ldr	r0, [r7, #12]
 801058a:	4b4b      	ldr	r3, [pc, #300]	@ (80106b8 <HAL_I2C_Master_Receive+0x208>)
 801058c:	9300      	str	r3, [sp, #0]
 801058e:	0023      	movs	r3, r4
 8010590:	f002 f89e 	bl	80126d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010594:	e062      	b.n	801065c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010596:	697a      	ldr	r2, [r7, #20]
 8010598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	0018      	movs	r0, r3
 801059e:	f001 ff1d 	bl	80123dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80105a2:	1e03      	subs	r3, r0, #0
 80105a4:	d001      	beq.n	80105aa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80105a6:	2301      	movs	r3, #1
 80105a8:	e082      	b.n	80106b0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105b4:	b2d2      	uxtb	r2, r2
 80105b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105bc:	1c5a      	adds	r2, r3, #1
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80105c6:	3b01      	subs	r3, #1
 80105c8:	b29a      	uxth	r2, r3
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	3b01      	subs	r3, #1
 80105d6:	b29a      	uxth	r2, r3
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105e0:	b29b      	uxth	r3, r3
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d03a      	beq.n	801065c <HAL_I2C_Master_Receive+0x1ac>
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d136      	bne.n	801065c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80105ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	9300      	str	r3, [sp, #0]
 80105f6:	0013      	movs	r3, r2
 80105f8:	2200      	movs	r2, #0
 80105fa:	2180      	movs	r1, #128	@ 0x80
 80105fc:	f001 fe16 	bl	801222c <I2C_WaitOnFlagUntilTimeout>
 8010600:	1e03      	subs	r3, r0, #0
 8010602:	d001      	beq.n	8010608 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8010604:	2301      	movs	r3, #1
 8010606:	e053      	b.n	80106b0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801060c:	b29b      	uxth	r3, r3
 801060e:	2bff      	cmp	r3, #255	@ 0xff
 8010610:	d911      	bls.n	8010636 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	22ff      	movs	r2, #255	@ 0xff
 8010616:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801061c:	b2da      	uxtb	r2, r3
 801061e:	2380      	movs	r3, #128	@ 0x80
 8010620:	045c      	lsls	r4, r3, #17
 8010622:	230a      	movs	r3, #10
 8010624:	18fb      	adds	r3, r7, r3
 8010626:	8819      	ldrh	r1, [r3, #0]
 8010628:	68f8      	ldr	r0, [r7, #12]
 801062a:	2300      	movs	r3, #0
 801062c:	9300      	str	r3, [sp, #0]
 801062e:	0023      	movs	r3, r4
 8010630:	f002 f84e 	bl	80126d0 <I2C_TransferConfig>
 8010634:	e012      	b.n	801065c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801063a:	b29a      	uxth	r2, r3
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010644:	b2da      	uxtb	r2, r3
 8010646:	2380      	movs	r3, #128	@ 0x80
 8010648:	049c      	lsls	r4, r3, #18
 801064a:	230a      	movs	r3, #10
 801064c:	18fb      	adds	r3, r7, r3
 801064e:	8819      	ldrh	r1, [r3, #0]
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	2300      	movs	r3, #0
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	0023      	movs	r3, r4
 8010658:	f002 f83a 	bl	80126d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010660:	b29b      	uxth	r3, r3
 8010662:	2b00      	cmp	r3, #0
 8010664:	d197      	bne.n	8010596 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010666:	697a      	ldr	r2, [r7, #20]
 8010668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	0018      	movs	r0, r3
 801066e:	f001 fe71 	bl	8012354 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010672:	1e03      	subs	r3, r0, #0
 8010674:	d001      	beq.n	801067a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8010676:	2301      	movs	r3, #1
 8010678:	e01a      	b.n	80106b0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	2220      	movs	r2, #32
 8010680:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	685a      	ldr	r2, [r3, #4]
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	490b      	ldr	r1, [pc, #44]	@ (80106bc <HAL_I2C_Master_Receive+0x20c>)
 801068e:	400a      	ands	r2, r1
 8010690:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2241      	movs	r2, #65	@ 0x41
 8010696:	2120      	movs	r1, #32
 8010698:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2242      	movs	r2, #66	@ 0x42
 801069e:	2100      	movs	r1, #0
 80106a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	2240      	movs	r2, #64	@ 0x40
 80106a6:	2100      	movs	r1, #0
 80106a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80106aa:	2300      	movs	r3, #0
 80106ac:	e000      	b.n	80106b0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80106ae:	2302      	movs	r3, #2
  }
}
 80106b0:	0018      	movs	r0, r3
 80106b2:	46bd      	mov	sp, r7
 80106b4:	b007      	add	sp, #28
 80106b6:	bd90      	pop	{r4, r7, pc}
 80106b8:	80002400 	.word	0x80002400
 80106bc:	fe00e800 	.word	0xfe00e800

080106c0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80106c0:	b5b0      	push	{r4, r5, r7, lr}
 80106c2:	b088      	sub	sp, #32
 80106c4:	af02      	add	r7, sp, #8
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	0008      	movs	r0, r1
 80106ca:	607a      	str	r2, [r7, #4]
 80106cc:	0019      	movs	r1, r3
 80106ce:	230a      	movs	r3, #10
 80106d0:	18fb      	adds	r3, r7, r3
 80106d2:	1c02      	adds	r2, r0, #0
 80106d4:	801a      	strh	r2, [r3, #0]
 80106d6:	2308      	movs	r3, #8
 80106d8:	18fb      	adds	r3, r7, r3
 80106da:	1c0a      	adds	r2, r1, #0
 80106dc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2241      	movs	r2, #65	@ 0x41
 80106e2:	5c9b      	ldrb	r3, [r3, r2]
 80106e4:	b2db      	uxtb	r3, r3
 80106e6:	2b20      	cmp	r3, #32
 80106e8:	d000      	beq.n	80106ec <HAL_I2C_Master_Transmit_DMA+0x2c>
 80106ea:	e0dd      	b.n	80108a8 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	699a      	ldr	r2, [r3, #24]
 80106f2:	2380      	movs	r3, #128	@ 0x80
 80106f4:	021b      	lsls	r3, r3, #8
 80106f6:	401a      	ands	r2, r3
 80106f8:	2380      	movs	r3, #128	@ 0x80
 80106fa:	021b      	lsls	r3, r3, #8
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d101      	bne.n	8010704 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8010700:	2302      	movs	r3, #2
 8010702:	e0d2      	b.n	80108aa <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2240      	movs	r2, #64	@ 0x40
 8010708:	5c9b      	ldrb	r3, [r3, r2]
 801070a:	2b01      	cmp	r3, #1
 801070c:	d101      	bne.n	8010712 <HAL_I2C_Master_Transmit_DMA+0x52>
 801070e:	2302      	movs	r3, #2
 8010710:	e0cb      	b.n	80108aa <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	2240      	movs	r2, #64	@ 0x40
 8010716:	2101      	movs	r1, #1
 8010718:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2241      	movs	r2, #65	@ 0x41
 801071e:	2121      	movs	r1, #33	@ 0x21
 8010720:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2242      	movs	r2, #66	@ 0x42
 8010726:	2110      	movs	r1, #16
 8010728:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2200      	movs	r2, #0
 801072e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2208      	movs	r2, #8
 801073a:	18ba      	adds	r2, r7, r2
 801073c:	8812      	ldrh	r2, [r2, #0]
 801073e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	4a5c      	ldr	r2, [pc, #368]	@ (80108b4 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8010744:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	4a5b      	ldr	r2, [pc, #364]	@ (80108b8 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 801074a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010750:	b29b      	uxth	r3, r3
 8010752:	2bff      	cmp	r3, #255	@ 0xff
 8010754:	d906      	bls.n	8010764 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	22ff      	movs	r2, #255	@ 0xff
 801075a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 801075c:	2380      	movs	r3, #128	@ 0x80
 801075e:	045b      	lsls	r3, r3, #17
 8010760:	617b      	str	r3, [r7, #20]
 8010762:	e007      	b.n	8010774 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010768:	b29a      	uxth	r2, r3
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801076e:	2380      	movs	r3, #128	@ 0x80
 8010770:	049b      	lsls	r3, r3, #18
 8010772:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010778:	2b00      	cmp	r3, #0
 801077a:	d100      	bne.n	801077e <HAL_I2C_Master_Transmit_DMA+0xbe>
 801077c:	e078      	b.n	8010870 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010782:	2b00      	cmp	r3, #0
 8010784:	d023      	beq.n	80107ce <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801078a:	4a4c      	ldr	r2, [pc, #304]	@ (80108bc <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 801078c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010792:	4a4b      	ldr	r2, [pc, #300]	@ (80108c0 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010794:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801079a:	2200      	movs	r2, #0
 801079c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107a2:	2200      	movs	r2, #0
 80107a4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80107aa:	6879      	ldr	r1, [r7, #4]
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	3328      	adds	r3, #40	@ 0x28
 80107b2:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80107b8:	2513      	movs	r5, #19
 80107ba:	197c      	adds	r4, r7, r5
 80107bc:	f7fe ff62 	bl	800f684 <HAL_DMA_Start_IT>
 80107c0:	0003      	movs	r3, r0
 80107c2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80107c4:	197b      	adds	r3, r7, r5
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d13d      	bne.n	8010848 <HAL_I2C_Master_Transmit_DMA+0x188>
 80107cc:	e013      	b.n	80107f6 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2241      	movs	r2, #65	@ 0x41
 80107d2:	2120      	movs	r1, #32
 80107d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	2242      	movs	r2, #66	@ 0x42
 80107da:	2100      	movs	r1, #0
 80107dc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107e2:	2280      	movs	r2, #128	@ 0x80
 80107e4:	431a      	orrs	r2, r3
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2240      	movs	r2, #64	@ 0x40
 80107ee:	2100      	movs	r1, #0
 80107f0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80107f2:	2301      	movs	r3, #1
 80107f4:	e059      	b.n	80108aa <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80107fa:	b2da      	uxtb	r2, r3
 80107fc:	697c      	ldr	r4, [r7, #20]
 80107fe:	230a      	movs	r3, #10
 8010800:	18fb      	adds	r3, r7, r3
 8010802:	8819      	ldrh	r1, [r3, #0]
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	4b2f      	ldr	r3, [pc, #188]	@ (80108c4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	0023      	movs	r3, r4
 801080c:	f001 ff60 	bl	80126d0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010814:	b29a      	uxth	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801081a:	1ad3      	subs	r3, r2, r3
 801081c:	b29a      	uxth	r2, r3
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2240      	movs	r2, #64	@ 0x40
 8010826:	2100      	movs	r1, #0
 8010828:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2110      	movs	r1, #16
 801082e:	0018      	movs	r0, r3
 8010830:	f001 ff88 	bl	8012744 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	2180      	movs	r1, #128	@ 0x80
 8010840:	01c9      	lsls	r1, r1, #7
 8010842:	430a      	orrs	r2, r1
 8010844:	601a      	str	r2, [r3, #0]
 8010846:	e02d      	b.n	80108a4 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2241      	movs	r2, #65	@ 0x41
 801084c:	2120      	movs	r1, #32
 801084e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	2242      	movs	r2, #66	@ 0x42
 8010854:	2100      	movs	r1, #0
 8010856:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801085c:	2210      	movs	r2, #16
 801085e:	431a      	orrs	r2, r3
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	2240      	movs	r2, #64	@ 0x40
 8010868:	2100      	movs	r1, #0
 801086a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801086c:	2301      	movs	r3, #1
 801086e:	e01c      	b.n	80108aa <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	4a15      	ldr	r2, [pc, #84]	@ (80108c8 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010874:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801087a:	b2da      	uxtb	r2, r3
 801087c:	2380      	movs	r3, #128	@ 0x80
 801087e:	049c      	lsls	r4, r3, #18
 8010880:	230a      	movs	r3, #10
 8010882:	18fb      	adds	r3, r7, r3
 8010884:	8819      	ldrh	r1, [r3, #0]
 8010886:	68f8      	ldr	r0, [r7, #12]
 8010888:	4b0e      	ldr	r3, [pc, #56]	@ (80108c4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	0023      	movs	r3, r4
 801088e:	f001 ff1f 	bl	80126d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2240      	movs	r2, #64	@ 0x40
 8010896:	2100      	movs	r1, #0
 8010898:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2101      	movs	r1, #1
 801089e:	0018      	movs	r0, r3
 80108a0:	f001 ff50 	bl	8012744 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80108a4:	2300      	movs	r3, #0
 80108a6:	e000      	b.n	80108aa <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80108a8:	2302      	movs	r3, #2
  }
}
 80108aa:	0018      	movs	r0, r3
 80108ac:	46bd      	mov	sp, r7
 80108ae:	b006      	add	sp, #24
 80108b0:	bdb0      	pop	{r4, r5, r7, pc}
 80108b2:	46c0      	nop			@ (mov r8, r8)
 80108b4:	ffff0000 	.word	0xffff0000
 80108b8:	080110c5 	.word	0x080110c5
 80108bc:	0801207d 	.word	0x0801207d
 80108c0:	080121bd 	.word	0x080121bd
 80108c4:	80002000 	.word	0x80002000
 80108c8:	08010c71 	.word	0x08010c71

080108cc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80108cc:	b5b0      	push	{r4, r5, r7, lr}
 80108ce:	b088      	sub	sp, #32
 80108d0:	af02      	add	r7, sp, #8
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	0008      	movs	r0, r1
 80108d6:	607a      	str	r2, [r7, #4]
 80108d8:	0019      	movs	r1, r3
 80108da:	230a      	movs	r3, #10
 80108dc:	18fb      	adds	r3, r7, r3
 80108de:	1c02      	adds	r2, r0, #0
 80108e0:	801a      	strh	r2, [r3, #0]
 80108e2:	2308      	movs	r3, #8
 80108e4:	18fb      	adds	r3, r7, r3
 80108e6:	1c0a      	adds	r2, r1, #0
 80108e8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2241      	movs	r2, #65	@ 0x41
 80108ee:	5c9b      	ldrb	r3, [r3, r2]
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	2b20      	cmp	r3, #32
 80108f4:	d000      	beq.n	80108f8 <HAL_I2C_Master_Receive_DMA+0x2c>
 80108f6:	e0dd      	b.n	8010ab4 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	699a      	ldr	r2, [r3, #24]
 80108fe:	2380      	movs	r3, #128	@ 0x80
 8010900:	021b      	lsls	r3, r3, #8
 8010902:	401a      	ands	r2, r3
 8010904:	2380      	movs	r3, #128	@ 0x80
 8010906:	021b      	lsls	r3, r3, #8
 8010908:	429a      	cmp	r2, r3
 801090a:	d101      	bne.n	8010910 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 801090c:	2302      	movs	r3, #2
 801090e:	e0d2      	b.n	8010ab6 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2240      	movs	r2, #64	@ 0x40
 8010914:	5c9b      	ldrb	r3, [r3, r2]
 8010916:	2b01      	cmp	r3, #1
 8010918:	d101      	bne.n	801091e <HAL_I2C_Master_Receive_DMA+0x52>
 801091a:	2302      	movs	r3, #2
 801091c:	e0cb      	b.n	8010ab6 <HAL_I2C_Master_Receive_DMA+0x1ea>
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2240      	movs	r2, #64	@ 0x40
 8010922:	2101      	movs	r1, #1
 8010924:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	2241      	movs	r2, #65	@ 0x41
 801092a:	2122      	movs	r1, #34	@ 0x22
 801092c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	2242      	movs	r2, #66	@ 0x42
 8010932:	2110      	movs	r1, #16
 8010934:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2200      	movs	r2, #0
 801093a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	2208      	movs	r2, #8
 8010946:	18ba      	adds	r2, r7, r2
 8010948:	8812      	ldrh	r2, [r2, #0]
 801094a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	4a5c      	ldr	r2, [pc, #368]	@ (8010ac0 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010950:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	4a5b      	ldr	r2, [pc, #364]	@ (8010ac4 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010956:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801095c:	b29b      	uxth	r3, r3
 801095e:	2bff      	cmp	r3, #255	@ 0xff
 8010960:	d906      	bls.n	8010970 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	22ff      	movs	r2, #255	@ 0xff
 8010966:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010968:	2380      	movs	r3, #128	@ 0x80
 801096a:	045b      	lsls	r3, r3, #17
 801096c:	617b      	str	r3, [r7, #20]
 801096e:	e007      	b.n	8010980 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010974:	b29a      	uxth	r2, r3
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801097a:	2380      	movs	r3, #128	@ 0x80
 801097c:	049b      	lsls	r3, r3, #18
 801097e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010984:	2b00      	cmp	r3, #0
 8010986:	d100      	bne.n	801098a <HAL_I2C_Master_Receive_DMA+0xbe>
 8010988:	e078      	b.n	8010a7c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801098e:	2b00      	cmp	r3, #0
 8010990:	d023      	beq.n	80109da <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010996:	4a4c      	ldr	r2, [pc, #304]	@ (8010ac8 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010998:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801099e:	4a4b      	ldr	r2, [pc, #300]	@ (8010acc <HAL_I2C_Master_Receive_DMA+0x200>)
 80109a0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109a6:	2200      	movs	r2, #0
 80109a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109ae:	2200      	movs	r2, #0
 80109b0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	3324      	adds	r3, #36	@ 0x24
 80109bc:	0019      	movs	r1, r3
 80109be:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80109c4:	2513      	movs	r5, #19
 80109c6:	197c      	adds	r4, r7, r5
 80109c8:	f7fe fe5c 	bl	800f684 <HAL_DMA_Start_IT>
 80109cc:	0003      	movs	r3, r0
 80109ce:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80109d0:	197b      	adds	r3, r7, r5
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d13d      	bne.n	8010a54 <HAL_I2C_Master_Receive_DMA+0x188>
 80109d8:	e013      	b.n	8010a02 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	2241      	movs	r2, #65	@ 0x41
 80109de:	2120      	movs	r1, #32
 80109e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2242      	movs	r2, #66	@ 0x42
 80109e6:	2100      	movs	r1, #0
 80109e8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80109ee:	2280      	movs	r2, #128	@ 0x80
 80109f0:	431a      	orrs	r2, r3
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	2240      	movs	r2, #64	@ 0x40
 80109fa:	2100      	movs	r1, #0
 80109fc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80109fe:	2301      	movs	r3, #1
 8010a00:	e059      	b.n	8010ab6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a06:	b2da      	uxtb	r2, r3
 8010a08:	697c      	ldr	r4, [r7, #20]
 8010a0a:	230a      	movs	r3, #10
 8010a0c:	18fb      	adds	r3, r7, r3
 8010a0e:	8819      	ldrh	r1, [r3, #0]
 8010a10:	68f8      	ldr	r0, [r7, #12]
 8010a12:	4b2f      	ldr	r3, [pc, #188]	@ (8010ad0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010a14:	9300      	str	r3, [sp, #0]
 8010a16:	0023      	movs	r3, r4
 8010a18:	f001 fe5a 	bl	80126d0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a20:	b29a      	uxth	r2, r3
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a26:	1ad3      	subs	r3, r2, r3
 8010a28:	b29a      	uxth	r2, r3
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2240      	movs	r2, #64	@ 0x40
 8010a32:	2100      	movs	r1, #0
 8010a34:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	2110      	movs	r1, #16
 8010a3a:	0018      	movs	r0, r3
 8010a3c:	f001 fe82 	bl	8012744 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	681a      	ldr	r2, [r3, #0]
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2180      	movs	r1, #128	@ 0x80
 8010a4c:	0209      	lsls	r1, r1, #8
 8010a4e:	430a      	orrs	r2, r1
 8010a50:	601a      	str	r2, [r3, #0]
 8010a52:	e02d      	b.n	8010ab0 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	2241      	movs	r2, #65	@ 0x41
 8010a58:	2120      	movs	r1, #32
 8010a5a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	2242      	movs	r2, #66	@ 0x42
 8010a60:	2100      	movs	r1, #0
 8010a62:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a68:	2210      	movs	r2, #16
 8010a6a:	431a      	orrs	r2, r3
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2240      	movs	r2, #64	@ 0x40
 8010a74:	2100      	movs	r1, #0
 8010a76:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010a78:	2301      	movs	r3, #1
 8010a7a:	e01c      	b.n	8010ab6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	4a15      	ldr	r2, [pc, #84]	@ (8010ad4 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010a80:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	2380      	movs	r3, #128	@ 0x80
 8010a8a:	049c      	lsls	r4, r3, #18
 8010a8c:	230a      	movs	r3, #10
 8010a8e:	18fb      	adds	r3, r7, r3
 8010a90:	8819      	ldrh	r1, [r3, #0]
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	4b0e      	ldr	r3, [pc, #56]	@ (8010ad0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010a96:	9300      	str	r3, [sp, #0]
 8010a98:	0023      	movs	r3, r4
 8010a9a:	f001 fe19 	bl	80126d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2240      	movs	r2, #64	@ 0x40
 8010aa2:	2100      	movs	r1, #0
 8010aa4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2101      	movs	r1, #1
 8010aaa:	0018      	movs	r0, r3
 8010aac:	f001 fe4a 	bl	8012744 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	e000      	b.n	8010ab6 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010ab4:	2302      	movs	r3, #2
  }
}
 8010ab6:	0018      	movs	r0, r3
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	b006      	add	sp, #24
 8010abc:	bdb0      	pop	{r4, r5, r7, pc}
 8010abe:	46c0      	nop			@ (mov r8, r8)
 8010ac0:	ffff0000 	.word	0xffff0000
 8010ac4:	080110c5 	.word	0x080110c5
 8010ac8:	0801211d 	.word	0x0801211d
 8010acc:	080121bd 	.word	0x080121bd
 8010ad0:	80002400 	.word	0x80002400
 8010ad4:	08010c71 	.word	0x08010c71

08010ad8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b084      	sub	sp, #16
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	699b      	ldr	r3, [r3, #24]
 8010ae6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d005      	beq.n	8010b04 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010afc:	68ba      	ldr	r2, [r7, #8]
 8010afe:	68f9      	ldr	r1, [r7, #12]
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	4798      	blx	r3
  }
}
 8010b04:	46c0      	nop			@ (mov r8, r8)
 8010b06:	46bd      	mov	sp, r7
 8010b08:	b004      	add	sp, #16
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b086      	sub	sp, #24
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	699b      	ldr	r3, [r3, #24]
 8010b1a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010b24:	697a      	ldr	r2, [r7, #20]
 8010b26:	2380      	movs	r3, #128	@ 0x80
 8010b28:	005b      	lsls	r3, r3, #1
 8010b2a:	4013      	ands	r3, r2
 8010b2c:	d00e      	beq.n	8010b4c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	2280      	movs	r2, #128	@ 0x80
 8010b32:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010b34:	d00a      	beq.n	8010b4c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	431a      	orrs	r2, r3
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2280      	movs	r2, #128	@ 0x80
 8010b48:	0052      	lsls	r2, r2, #1
 8010b4a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010b4c:	697a      	ldr	r2, [r7, #20]
 8010b4e:	2380      	movs	r3, #128	@ 0x80
 8010b50:	00db      	lsls	r3, r3, #3
 8010b52:	4013      	ands	r3, r2
 8010b54:	d00e      	beq.n	8010b74 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	2280      	movs	r2, #128	@ 0x80
 8010b5a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010b5c:	d00a      	beq.n	8010b74 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b62:	2208      	movs	r2, #8
 8010b64:	431a      	orrs	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	2280      	movs	r2, #128	@ 0x80
 8010b70:	00d2      	lsls	r2, r2, #3
 8010b72:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010b74:	697a      	ldr	r2, [r7, #20]
 8010b76:	2380      	movs	r3, #128	@ 0x80
 8010b78:	009b      	lsls	r3, r3, #2
 8010b7a:	4013      	ands	r3, r2
 8010b7c:	d00e      	beq.n	8010b9c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	2280      	movs	r2, #128	@ 0x80
 8010b82:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010b84:	d00a      	beq.n	8010b9c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b8a:	2202      	movs	r2, #2
 8010b8c:	431a      	orrs	r2, r3
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2280      	movs	r2, #128	@ 0x80
 8010b98:	0092      	lsls	r2, r2, #2
 8010b9a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ba0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	220b      	movs	r2, #11
 8010ba6:	4013      	ands	r3, r2
 8010ba8:	d005      	beq.n	8010bb6 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8010baa:	68fa      	ldr	r2, [r7, #12]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	0011      	movs	r1, r2
 8010bb0:	0018      	movs	r0, r3
 8010bb2:	f001 f915 	bl	8011de0 <I2C_ITError>
  }
}
 8010bb6:	46c0      	nop			@ (mov r8, r8)
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	b006      	add	sp, #24
 8010bbc:	bd80      	pop	{r7, pc}

08010bbe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010bbe:	b580      	push	{r7, lr}
 8010bc0:	b082      	sub	sp, #8
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010bc6:	46c0      	nop			@ (mov r8, r8)
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	b002      	add	sp, #8
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b082      	sub	sp, #8
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010bd6:	46c0      	nop			@ (mov r8, r8)
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	b002      	add	sp, #8
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b082      	sub	sp, #8
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010be6:	46c0      	nop			@ (mov r8, r8)
 8010be8:	46bd      	mov	sp, r7
 8010bea:	b002      	add	sp, #8
 8010bec:	bd80      	pop	{r7, pc}

08010bee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010bee:	b580      	push	{r7, lr}
 8010bf0:	b082      	sub	sp, #8
 8010bf2:	af00      	add	r7, sp, #0
 8010bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010bf6:	46c0      	nop			@ (mov r8, r8)
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	b002      	add	sp, #8
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b082      	sub	sp, #8
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
 8010c06:	0008      	movs	r0, r1
 8010c08:	0011      	movs	r1, r2
 8010c0a:	1cfb      	adds	r3, r7, #3
 8010c0c:	1c02      	adds	r2, r0, #0
 8010c0e:	701a      	strb	r2, [r3, #0]
 8010c10:	003b      	movs	r3, r7
 8010c12:	1c0a      	adds	r2, r1, #0
 8010c14:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010c16:	46c0      	nop			@ (mov r8, r8)
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	b002      	add	sp, #8
 8010c1c:	bd80      	pop	{r7, pc}

08010c1e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010c1e:	b580      	push	{r7, lr}
 8010c20:	b082      	sub	sp, #8
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010c26:	46c0      	nop			@ (mov r8, r8)
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	b002      	add	sp, #8
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b082      	sub	sp, #8
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010c36:	46c0      	nop			@ (mov r8, r8)
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	b002      	add	sp, #8
 8010c3c:	bd80      	pop	{r7, pc}

08010c3e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010c3e:	b580      	push	{r7, lr}
 8010c40:	b082      	sub	sp, #8
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010c46:	46c0      	nop			@ (mov r8, r8)
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	b002      	add	sp, #8
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b082      	sub	sp, #8
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010c56:	46c0      	nop			@ (mov r8, r8)
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	b002      	add	sp, #8
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b082      	sub	sp, #8
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010c66:	46c0      	nop			@ (mov r8, r8)
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	b002      	add	sp, #8
 8010c6c:	bd80      	pop	{r7, pc}
	...

08010c70 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010c70:	b590      	push	{r4, r7, lr}
 8010c72:	b089      	sub	sp, #36	@ 0x24
 8010c74:	af02      	add	r7, sp, #8
 8010c76:	60f8      	str	r0, [r7, #12]
 8010c78:	60b9      	str	r1, [r7, #8]
 8010c7a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2240      	movs	r2, #64	@ 0x40
 8010c84:	5c9b      	ldrb	r3, [r3, r2]
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d101      	bne.n	8010c8e <I2C_Master_ISR_IT+0x1e>
 8010c8a:	2302      	movs	r3, #2
 8010c8c:	e113      	b.n	8010eb6 <I2C_Master_ISR_IT+0x246>
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	2240      	movs	r2, #64	@ 0x40
 8010c92:	2101      	movs	r1, #1
 8010c94:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	2210      	movs	r2, #16
 8010c9a:	4013      	ands	r3, r2
 8010c9c:	d012      	beq.n	8010cc4 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2210      	movs	r2, #16
 8010ca2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010ca4:	d00e      	beq.n	8010cc4 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2210      	movs	r2, #16
 8010cac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cb2:	2204      	movs	r2, #4
 8010cb4:	431a      	orrs	r2, r3
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	0018      	movs	r0, r3
 8010cbe:	f001 f9ba 	bl	8012036 <I2C_Flush_TXDR>
 8010cc2:	e0e5      	b.n	8010e90 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	2204      	movs	r2, #4
 8010cc8:	4013      	ands	r3, r2
 8010cca:	d021      	beq.n	8010d10 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2204      	movs	r2, #4
 8010cd0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010cd2:	d01d      	beq.n	8010d10 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	2204      	movs	r2, #4
 8010cd8:	4393      	bics	r3, r2
 8010cda:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ce6:	b2d2      	uxtb	r2, r2
 8010ce8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cee:	1c5a      	adds	r2, r3, #1
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010cf8:	3b01      	subs	r3, #1
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d04:	b29b      	uxth	r3, r3
 8010d06:	3b01      	subs	r3, #1
 8010d08:	b29a      	uxth	r2, r3
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010d0e:	e0bf      	b.n	8010e90 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	2202      	movs	r2, #2
 8010d14:	4013      	ands	r3, r2
 8010d16:	d01c      	beq.n	8010d52 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2202      	movs	r2, #2
 8010d1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010d1e:	d018      	beq.n	8010d52 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d24:	781a      	ldrb	r2, [r3, #0]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d30:	1c5a      	adds	r2, r3, #1
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d3a:	3b01      	subs	r3, #1
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010d50:	e09e      	b.n	8010e90 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	2280      	movs	r2, #128	@ 0x80
 8010d56:	4013      	ands	r3, r2
 8010d58:	d100      	bne.n	8010d5c <I2C_Master_ISR_IT+0xec>
 8010d5a:	e069      	b.n	8010e30 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2240      	movs	r2, #64	@ 0x40
 8010d60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010d62:	d065      	beq.n	8010e30 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d68:	b29b      	uxth	r3, r3
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d04a      	beq.n	8010e04 <I2C_Master_ISR_IT+0x194>
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d146      	bne.n	8010e04 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	685b      	ldr	r3, [r3, #4]
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	2112      	movs	r1, #18
 8010d80:	187b      	adds	r3, r7, r1
 8010d82:	0592      	lsls	r2, r2, #22
 8010d84:	0d92      	lsrs	r2, r2, #22
 8010d86:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	2bff      	cmp	r3, #255	@ 0xff
 8010d90:	d910      	bls.n	8010db4 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	22ff      	movs	r2, #255	@ 0xff
 8010d96:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d9c:	b2da      	uxtb	r2, r3
 8010d9e:	2380      	movs	r3, #128	@ 0x80
 8010da0:	045c      	lsls	r4, r3, #17
 8010da2:	187b      	adds	r3, r7, r1
 8010da4:	8819      	ldrh	r1, [r3, #0]
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	2300      	movs	r3, #0
 8010daa:	9300      	str	r3, [sp, #0]
 8010dac:	0023      	movs	r3, r4
 8010dae:	f001 fc8f 	bl	80126d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010db2:	e03c      	b.n	8010e2e <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010db8:	b29a      	uxth	r2, r3
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8010ec0 <I2C_Master_ISR_IT+0x250>)
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d00e      	beq.n	8010de6 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010dcc:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010dd2:	2312      	movs	r3, #18
 8010dd4:	18fb      	adds	r3, r7, r3
 8010dd6:	8819      	ldrh	r1, [r3, #0]
 8010dd8:	68f8      	ldr	r0, [r7, #12]
 8010dda:	2300      	movs	r3, #0
 8010ddc:	9300      	str	r3, [sp, #0]
 8010dde:	0023      	movs	r3, r4
 8010de0:	f001 fc76 	bl	80126d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010de4:	e023      	b.n	8010e2e <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010dea:	b2da      	uxtb	r2, r3
 8010dec:	2380      	movs	r3, #128	@ 0x80
 8010dee:	049c      	lsls	r4, r3, #18
 8010df0:	2312      	movs	r3, #18
 8010df2:	18fb      	adds	r3, r7, r3
 8010df4:	8819      	ldrh	r1, [r3, #0]
 8010df6:	68f8      	ldr	r0, [r7, #12]
 8010df8:	2300      	movs	r3, #0
 8010dfa:	9300      	str	r3, [sp, #0]
 8010dfc:	0023      	movs	r3, r4
 8010dfe:	f001 fc67 	bl	80126d0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e02:	e014      	b.n	8010e2e <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	685a      	ldr	r2, [r3, #4]
 8010e0a:	2380      	movs	r3, #128	@ 0x80
 8010e0c:	049b      	lsls	r3, r3, #18
 8010e0e:	401a      	ands	r2, r3
 8010e10:	2380      	movs	r3, #128	@ 0x80
 8010e12:	049b      	lsls	r3, r3, #18
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d004      	beq.n	8010e22 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	0018      	movs	r0, r3
 8010e1c:	f000 fcf4 	bl	8011808 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010e20:	e036      	b.n	8010e90 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	2140      	movs	r1, #64	@ 0x40
 8010e26:	0018      	movs	r0, r3
 8010e28:	f000 ffda 	bl	8011de0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010e2c:	e030      	b.n	8010e90 <I2C_Master_ISR_IT+0x220>
 8010e2e:	e02f      	b.n	8010e90 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	2240      	movs	r2, #64	@ 0x40
 8010e34:	4013      	ands	r3, r2
 8010e36:	d02b      	beq.n	8010e90 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2240      	movs	r2, #64	@ 0x40
 8010e3c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010e3e:	d027      	beq.n	8010e90 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d11d      	bne.n	8010e86 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	685a      	ldr	r2, [r3, #4]
 8010e50:	2380      	movs	r3, #128	@ 0x80
 8010e52:	049b      	lsls	r3, r3, #18
 8010e54:	401a      	ands	r2, r3
 8010e56:	2380      	movs	r3, #128	@ 0x80
 8010e58:	049b      	lsls	r3, r3, #18
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d018      	beq.n	8010e90 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e62:	4a17      	ldr	r2, [pc, #92]	@ (8010ec0 <I2C_Master_ISR_IT+0x250>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d109      	bne.n	8010e7c <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	685a      	ldr	r2, [r3, #4]
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	2180      	movs	r1, #128	@ 0x80
 8010e74:	01c9      	lsls	r1, r1, #7
 8010e76:	430a      	orrs	r2, r1
 8010e78:	605a      	str	r2, [r3, #4]
 8010e7a:	e009      	b.n	8010e90 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	0018      	movs	r0, r3
 8010e80:	f000 fcc2 	bl	8011808 <I2C_ITMasterSeqCplt>
 8010e84:	e004      	b.n	8010e90 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2140      	movs	r1, #64	@ 0x40
 8010e8a:	0018      	movs	r0, r3
 8010e8c:	f000 ffa8 	bl	8011de0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	2220      	movs	r2, #32
 8010e94:	4013      	ands	r3, r2
 8010e96:	d009      	beq.n	8010eac <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2220      	movs	r2, #32
 8010e9c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010e9e:	d005      	beq.n	8010eac <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8010ea0:	697a      	ldr	r2, [r7, #20]
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	0011      	movs	r1, r2
 8010ea6:	0018      	movs	r0, r3
 8010ea8:	f000 fd54 	bl	8011954 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2240      	movs	r2, #64	@ 0x40
 8010eb0:	2100      	movs	r1, #0
 8010eb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010eb4:	2300      	movs	r3, #0
}
 8010eb6:	0018      	movs	r0, r3
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	b007      	add	sp, #28
 8010ebc:	bd90      	pop	{r4, r7, pc}
 8010ebe:	46c0      	nop			@ (mov r8, r8)
 8010ec0:	ffff0000 	.word	0xffff0000

08010ec4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b086      	sub	sp, #24
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	60f8      	str	r0, [r7, #12]
 8010ecc:	60b9      	str	r1, [r7, #8]
 8010ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ed4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2240      	movs	r2, #64	@ 0x40
 8010ede:	5c9b      	ldrb	r3, [r3, r2]
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d101      	bne.n	8010ee8 <I2C_Slave_ISR_IT+0x24>
 8010ee4:	2302      	movs	r3, #2
 8010ee6:	e0e6      	b.n	80110b6 <I2C_Slave_ISR_IT+0x1f2>
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	2240      	movs	r2, #64	@ 0x40
 8010eec:	2101      	movs	r1, #1
 8010eee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	2220      	movs	r2, #32
 8010ef4:	4013      	ands	r3, r2
 8010ef6:	d009      	beq.n	8010f0c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2220      	movs	r2, #32
 8010efc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010efe:	d005      	beq.n	8010f0c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8010f00:	693a      	ldr	r2, [r7, #16]
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	0011      	movs	r1, r2
 8010f06:	0018      	movs	r0, r3
 8010f08:	f000 fdf2 	bl	8011af0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	2210      	movs	r2, #16
 8010f10:	4013      	ands	r3, r2
 8010f12:	d052      	beq.n	8010fba <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2210      	movs	r2, #16
 8010f18:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010f1a:	d04e      	beq.n	8010fba <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d12d      	bne.n	8010f82 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2241      	movs	r2, #65	@ 0x41
 8010f2a:	5c9b      	ldrb	r3, [r3, r2]
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	2b28      	cmp	r3, #40	@ 0x28
 8010f30:	d10b      	bne.n	8010f4a <I2C_Slave_ISR_IT+0x86>
 8010f32:	697a      	ldr	r2, [r7, #20]
 8010f34:	2380      	movs	r3, #128	@ 0x80
 8010f36:	049b      	lsls	r3, r3, #18
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d106      	bne.n	8010f4a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8010f3c:	693a      	ldr	r2, [r7, #16]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	0011      	movs	r1, r2
 8010f42:	0018      	movs	r0, r3
 8010f44:	f000 fef4 	bl	8011d30 <I2C_ITListenCplt>
 8010f48:	e036      	b.n	8010fb8 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2241      	movs	r2, #65	@ 0x41
 8010f4e:	5c9b      	ldrb	r3, [r3, r2]
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	2b29      	cmp	r3, #41	@ 0x29
 8010f54:	d110      	bne.n	8010f78 <I2C_Slave_ISR_IT+0xb4>
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	4a59      	ldr	r2, [pc, #356]	@ (80110c0 <I2C_Slave_ISR_IT+0x1fc>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d00c      	beq.n	8010f78 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	2210      	movs	r2, #16
 8010f64:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	0018      	movs	r0, r3
 8010f6a:	f001 f864 	bl	8012036 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	0018      	movs	r0, r3
 8010f72:	f000 fc8b 	bl	801188c <I2C_ITSlaveSeqCplt>
 8010f76:	e01f      	b.n	8010fb8 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2210      	movs	r2, #16
 8010f7e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8010f80:	e091      	b.n	80110a6 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	2210      	movs	r2, #16
 8010f88:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f8e:	2204      	movs	r2, #4
 8010f90:	431a      	orrs	r2, r3
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d005      	beq.n	8010fa8 <I2C_Slave_ISR_IT+0xe4>
 8010f9c:	697a      	ldr	r2, [r7, #20]
 8010f9e:	2380      	movs	r3, #128	@ 0x80
 8010fa0:	045b      	lsls	r3, r3, #17
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d000      	beq.n	8010fa8 <I2C_Slave_ISR_IT+0xe4>
 8010fa6:	e07e      	b.n	80110a6 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	0011      	movs	r1, r2
 8010fb0:	0018      	movs	r0, r3
 8010fb2:	f000 ff15 	bl	8011de0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8010fb6:	e076      	b.n	80110a6 <I2C_Slave_ISR_IT+0x1e2>
 8010fb8:	e075      	b.n	80110a6 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	2204      	movs	r2, #4
 8010fbe:	4013      	ands	r3, r2
 8010fc0:	d02f      	beq.n	8011022 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2204      	movs	r2, #4
 8010fc6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010fc8:	d02b      	beq.n	8011022 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d018      	beq.n	8011006 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fde:	b2d2      	uxtb	r2, r2
 8010fe0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fe6:	1c5a      	adds	r2, r3, #1
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ff0:	3b01      	subs	r3, #1
 8010ff2:	b29a      	uxth	r2, r3
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ffc:	b29b      	uxth	r3, r3
 8010ffe:	3b01      	subs	r3, #1
 8011000:	b29a      	uxth	r2, r3
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801100a:	b29b      	uxth	r3, r3
 801100c:	2b00      	cmp	r3, #0
 801100e:	d14c      	bne.n	80110aa <I2C_Slave_ISR_IT+0x1e6>
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	4a2b      	ldr	r2, [pc, #172]	@ (80110c0 <I2C_Slave_ISR_IT+0x1fc>)
 8011014:	4293      	cmp	r3, r2
 8011016:	d048      	beq.n	80110aa <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	0018      	movs	r0, r3
 801101c:	f000 fc36 	bl	801188c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8011020:	e043      	b.n	80110aa <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	2208      	movs	r2, #8
 8011026:	4013      	ands	r3, r2
 8011028:	d00a      	beq.n	8011040 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2208      	movs	r2, #8
 801102e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011030:	d006      	beq.n	8011040 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8011032:	693a      	ldr	r2, [r7, #16]
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	0011      	movs	r1, r2
 8011038:	0018      	movs	r0, r3
 801103a:	f000 fb41 	bl	80116c0 <I2C_ITAddrCplt>
 801103e:	e035      	b.n	80110ac <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	2202      	movs	r2, #2
 8011044:	4013      	ands	r3, r2
 8011046:	d031      	beq.n	80110ac <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2202      	movs	r2, #2
 801104c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801104e:	d02d      	beq.n	80110ac <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011054:	b29b      	uxth	r3, r3
 8011056:	2b00      	cmp	r3, #0
 8011058:	d018      	beq.n	801108c <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801105e:	781a      	ldrb	r2, [r3, #0]
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801106a:	1c5a      	adds	r2, r3, #1
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011074:	b29b      	uxth	r3, r3
 8011076:	3b01      	subs	r3, #1
 8011078:	b29a      	uxth	r2, r3
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011082:	3b01      	subs	r3, #1
 8011084:	b29a      	uxth	r2, r3
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	851a      	strh	r2, [r3, #40]	@ 0x28
 801108a:	e00f      	b.n	80110ac <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 801108c:	697a      	ldr	r2, [r7, #20]
 801108e:	2380      	movs	r3, #128	@ 0x80
 8011090:	045b      	lsls	r3, r3, #17
 8011092:	429a      	cmp	r2, r3
 8011094:	d002      	beq.n	801109c <I2C_Slave_ISR_IT+0x1d8>
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d107      	bne.n	80110ac <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	0018      	movs	r0, r3
 80110a0:	f000 fbf4 	bl	801188c <I2C_ITSlaveSeqCplt>
 80110a4:	e002      	b.n	80110ac <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 80110a6:	46c0      	nop			@ (mov r8, r8)
 80110a8:	e000      	b.n	80110ac <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80110aa:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2240      	movs	r2, #64	@ 0x40
 80110b0:	2100      	movs	r1, #0
 80110b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80110b4:	2300      	movs	r3, #0
}
 80110b6:	0018      	movs	r0, r3
 80110b8:	46bd      	mov	sp, r7
 80110ba:	b006      	add	sp, #24
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	46c0      	nop			@ (mov r8, r8)
 80110c0:	ffff0000 	.word	0xffff0000

080110c4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80110c4:	b590      	push	{r4, r7, lr}
 80110c6:	b089      	sub	sp, #36	@ 0x24
 80110c8:	af02      	add	r7, sp, #8
 80110ca:	60f8      	str	r0, [r7, #12]
 80110cc:	60b9      	str	r1, [r7, #8]
 80110ce:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	2240      	movs	r2, #64	@ 0x40
 80110d4:	5c9b      	ldrb	r3, [r3, r2]
 80110d6:	2b01      	cmp	r3, #1
 80110d8:	d101      	bne.n	80110de <I2C_Master_ISR_DMA+0x1a>
 80110da:	2302      	movs	r3, #2
 80110dc:	e0e7      	b.n	80112ae <I2C_Master_ISR_DMA+0x1ea>
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2240      	movs	r2, #64	@ 0x40
 80110e2:	2101      	movs	r1, #1
 80110e4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	2210      	movs	r2, #16
 80110ea:	4013      	ands	r3, r2
 80110ec:	d017      	beq.n	801111e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2210      	movs	r2, #16
 80110f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80110f4:	d013      	beq.n	801111e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2210      	movs	r2, #16
 80110fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011102:	2204      	movs	r2, #4
 8011104:	431a      	orrs	r2, r3
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2120      	movs	r1, #32
 801110e:	0018      	movs	r0, r3
 8011110:	f001 fb18 	bl	8012744 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	0018      	movs	r0, r3
 8011118:	f000 ff8d 	bl	8012036 <I2C_Flush_TXDR>
 801111c:	e0c2      	b.n	80112a4 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	2280      	movs	r2, #128	@ 0x80
 8011122:	4013      	ands	r3, r2
 8011124:	d100      	bne.n	8011128 <I2C_Master_ISR_DMA+0x64>
 8011126:	e07c      	b.n	8011222 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2240      	movs	r2, #64	@ 0x40
 801112c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801112e:	d100      	bne.n	8011132 <I2C_Master_ISR_DMA+0x6e>
 8011130:	e077      	b.n	8011222 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	681a      	ldr	r2, [r3, #0]
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	2140      	movs	r1, #64	@ 0x40
 801113e:	438a      	bics	r2, r1
 8011140:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011146:	b29b      	uxth	r3, r3
 8011148:	2b00      	cmp	r3, #0
 801114a:	d055      	beq.n	80111f8 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	b29a      	uxth	r2, r3
 8011154:	2312      	movs	r3, #18
 8011156:	18fb      	adds	r3, r7, r3
 8011158:	0592      	lsls	r2, r2, #22
 801115a:	0d92      	lsrs	r2, r2, #22
 801115c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011162:	b29b      	uxth	r3, r3
 8011164:	2bff      	cmp	r3, #255	@ 0xff
 8011166:	d906      	bls.n	8011176 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	22ff      	movs	r2, #255	@ 0xff
 801116c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801116e:	2380      	movs	r3, #128	@ 0x80
 8011170:	045b      	lsls	r3, r3, #17
 8011172:	617b      	str	r3, [r7, #20]
 8011174:	e010      	b.n	8011198 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801117a:	b29a      	uxth	r2, r3
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011184:	4a4c      	ldr	r2, [pc, #304]	@ (80112b8 <I2C_Master_ISR_DMA+0x1f4>)
 8011186:	4293      	cmp	r3, r2
 8011188:	d003      	beq.n	8011192 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801118e:	617b      	str	r3, [r7, #20]
 8011190:	e002      	b.n	8011198 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011192:	2380      	movs	r3, #128	@ 0x80
 8011194:	049b      	lsls	r3, r3, #18
 8011196:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801119c:	b2da      	uxtb	r2, r3
 801119e:	697c      	ldr	r4, [r7, #20]
 80111a0:	2312      	movs	r3, #18
 80111a2:	18fb      	adds	r3, r7, r3
 80111a4:	8819      	ldrh	r1, [r3, #0]
 80111a6:	68f8      	ldr	r0, [r7, #12]
 80111a8:	2300      	movs	r3, #0
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	0023      	movs	r3, r4
 80111ae:	f001 fa8f 	bl	80126d0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80111bc:	1ad3      	subs	r3, r2, r3
 80111be:	b29a      	uxth	r2, r3
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2241      	movs	r2, #65	@ 0x41
 80111c8:	5c9b      	ldrb	r3, [r3, r2]
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	2b22      	cmp	r3, #34	@ 0x22
 80111ce:	d109      	bne.n	80111e4 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	681a      	ldr	r2, [r3, #0]
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2180      	movs	r1, #128	@ 0x80
 80111dc:	0209      	lsls	r1, r1, #8
 80111de:	430a      	orrs	r2, r1
 80111e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80111e2:	e05f      	b.n	80112a4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2180      	movs	r1, #128	@ 0x80
 80111f0:	01c9      	lsls	r1, r1, #7
 80111f2:	430a      	orrs	r2, r1
 80111f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80111f6:	e055      	b.n	80112a4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	685a      	ldr	r2, [r3, #4]
 80111fe:	2380      	movs	r3, #128	@ 0x80
 8011200:	049b      	lsls	r3, r3, #18
 8011202:	401a      	ands	r2, r3
 8011204:	2380      	movs	r3, #128	@ 0x80
 8011206:	049b      	lsls	r3, r3, #18
 8011208:	429a      	cmp	r2, r3
 801120a:	d004      	beq.n	8011216 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	0018      	movs	r0, r3
 8011210:	f000 fafa 	bl	8011808 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8011214:	e046      	b.n	80112a4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2140      	movs	r1, #64	@ 0x40
 801121a:	0018      	movs	r0, r3
 801121c:	f000 fde0 	bl	8011de0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011220:	e040      	b.n	80112a4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	2240      	movs	r2, #64	@ 0x40
 8011226:	4013      	ands	r3, r2
 8011228:	d02c      	beq.n	8011284 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2240      	movs	r2, #64	@ 0x40
 801122e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011230:	d028      	beq.n	8011284 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011236:	b29b      	uxth	r3, r3
 8011238:	2b00      	cmp	r3, #0
 801123a:	d11d      	bne.n	8011278 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	685a      	ldr	r2, [r3, #4]
 8011242:	2380      	movs	r3, #128	@ 0x80
 8011244:	049b      	lsls	r3, r3, #18
 8011246:	401a      	ands	r2, r3
 8011248:	2380      	movs	r3, #128	@ 0x80
 801124a:	049b      	lsls	r3, r3, #18
 801124c:	429a      	cmp	r2, r3
 801124e:	d028      	beq.n	80112a2 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011254:	4a18      	ldr	r2, [pc, #96]	@ (80112b8 <I2C_Master_ISR_DMA+0x1f4>)
 8011256:	4293      	cmp	r3, r2
 8011258:	d109      	bne.n	801126e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	685a      	ldr	r2, [r3, #4]
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	2180      	movs	r1, #128	@ 0x80
 8011266:	01c9      	lsls	r1, r1, #7
 8011268:	430a      	orrs	r2, r1
 801126a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 801126c:	e019      	b.n	80112a2 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	0018      	movs	r0, r3
 8011272:	f000 fac9 	bl	8011808 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8011276:	e014      	b.n	80112a2 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2140      	movs	r1, #64	@ 0x40
 801127c:	0018      	movs	r0, r3
 801127e:	f000 fdaf 	bl	8011de0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011282:	e00e      	b.n	80112a2 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	2220      	movs	r2, #32
 8011288:	4013      	ands	r3, r2
 801128a:	d00b      	beq.n	80112a4 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2220      	movs	r2, #32
 8011290:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011292:	d007      	beq.n	80112a4 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011294:	68ba      	ldr	r2, [r7, #8]
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	0011      	movs	r1, r2
 801129a:	0018      	movs	r0, r3
 801129c:	f000 fb5a 	bl	8011954 <I2C_ITMasterCplt>
 80112a0:	e000      	b.n	80112a4 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80112a2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2240      	movs	r2, #64	@ 0x40
 80112a8:	2100      	movs	r1, #0
 80112aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80112ac:	2300      	movs	r3, #0
}
 80112ae:	0018      	movs	r0, r3
 80112b0:	46bd      	mov	sp, r7
 80112b2:	b007      	add	sp, #28
 80112b4:	bd90      	pop	{r4, r7, pc}
 80112b6:	46c0      	nop			@ (mov r8, r8)
 80112b8:	ffff0000 	.word	0xffff0000

080112bc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80112bc:	b590      	push	{r4, r7, lr}
 80112be:	b089      	sub	sp, #36	@ 0x24
 80112c0:	af02      	add	r7, sp, #8
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80112c8:	4b88      	ldr	r3, [pc, #544]	@ (80114ec <I2C_Mem_ISR_DMA+0x230>)
 80112ca:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2240      	movs	r2, #64	@ 0x40
 80112d0:	5c9b      	ldrb	r3, [r3, r2]
 80112d2:	2b01      	cmp	r3, #1
 80112d4:	d101      	bne.n	80112da <I2C_Mem_ISR_DMA+0x1e>
 80112d6:	2302      	movs	r3, #2
 80112d8:	e104      	b.n	80114e4 <I2C_Mem_ISR_DMA+0x228>
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2240      	movs	r2, #64	@ 0x40
 80112de:	2101      	movs	r1, #1
 80112e0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	2210      	movs	r2, #16
 80112e6:	4013      	ands	r3, r2
 80112e8:	d017      	beq.n	801131a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2210      	movs	r2, #16
 80112ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80112f0:	d013      	beq.n	801131a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	2210      	movs	r2, #16
 80112f8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112fe:	2204      	movs	r2, #4
 8011300:	431a      	orrs	r2, r3
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2120      	movs	r1, #32
 801130a:	0018      	movs	r0, r3
 801130c:	f001 fa1a 	bl	8012744 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	0018      	movs	r0, r3
 8011314:	f000 fe8f 	bl	8012036 <I2C_Flush_TXDR>
 8011318:	e0df      	b.n	80114da <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	2202      	movs	r2, #2
 801131e:	4013      	ands	r3, r2
 8011320:	d00d      	beq.n	801133e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2202      	movs	r2, #2
 8011326:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011328:	d009      	beq.n	801133e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	68fa      	ldr	r2, [r7, #12]
 8011330:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8011332:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2201      	movs	r2, #1
 8011338:	4252      	negs	r2, r2
 801133a:	651a      	str	r2, [r3, #80]	@ 0x50
 801133c:	e0cd      	b.n	80114da <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	2280      	movs	r2, #128	@ 0x80
 8011342:	4013      	ands	r3, r2
 8011344:	d05e      	beq.n	8011404 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2240      	movs	r2, #64	@ 0x40
 801134a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801134c:	d05a      	beq.n	8011404 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	2110      	movs	r1, #16
 8011352:	0018      	movs	r0, r3
 8011354:	f001 f9f6 	bl	8012744 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801135c:	b29b      	uxth	r3, r3
 801135e:	2b00      	cmp	r3, #0
 8011360:	d04a      	beq.n	80113f8 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011366:	b29b      	uxth	r3, r3
 8011368:	2bff      	cmp	r3, #255	@ 0xff
 801136a:	d910      	bls.n	801138e <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	22ff      	movs	r2, #255	@ 0xff
 8011370:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011376:	b299      	uxth	r1, r3
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801137c:	b2da      	uxtb	r2, r3
 801137e:	2380      	movs	r3, #128	@ 0x80
 8011380:	045b      	lsls	r3, r3, #17
 8011382:	68f8      	ldr	r0, [r7, #12]
 8011384:	2400      	movs	r4, #0
 8011386:	9400      	str	r4, [sp, #0]
 8011388:	f001 f9a2 	bl	80126d0 <I2C_TransferConfig>
 801138c:	e011      	b.n	80113b2 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011392:	b29a      	uxth	r2, r3
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801139c:	b299      	uxth	r1, r3
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113a2:	b2da      	uxtb	r2, r3
 80113a4:	2380      	movs	r3, #128	@ 0x80
 80113a6:	049b      	lsls	r3, r3, #18
 80113a8:	68f8      	ldr	r0, [r7, #12]
 80113aa:	2400      	movs	r4, #0
 80113ac:	9400      	str	r4, [sp, #0]
 80113ae:	f001 f98f 	bl	80126d0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113b6:	b29a      	uxth	r2, r3
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113bc:	1ad3      	subs	r3, r2, r3
 80113be:	b29a      	uxth	r2, r3
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2241      	movs	r2, #65	@ 0x41
 80113c8:	5c9b      	ldrb	r3, [r3, r2]
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	2b22      	cmp	r3, #34	@ 0x22
 80113ce:	d109      	bne.n	80113e4 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2180      	movs	r1, #128	@ 0x80
 80113dc:	0209      	lsls	r1, r1, #8
 80113de:	430a      	orrs	r2, r1
 80113e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80113e2:	e07a      	b.n	80114da <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2180      	movs	r1, #128	@ 0x80
 80113f0:	01c9      	lsls	r1, r1, #7
 80113f2:	430a      	orrs	r2, r1
 80113f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80113f6:	e070      	b.n	80114da <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2140      	movs	r1, #64	@ 0x40
 80113fc:	0018      	movs	r0, r3
 80113fe:	f000 fcef 	bl	8011de0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8011402:	e06a      	b.n	80114da <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	2240      	movs	r2, #64	@ 0x40
 8011408:	4013      	ands	r3, r2
 801140a:	d058      	beq.n	80114be <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2240      	movs	r2, #64	@ 0x40
 8011410:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8011412:	d054      	beq.n	80114be <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	2241      	movs	r2, #65	@ 0x41
 8011418:	5c9b      	ldrb	r3, [r3, r2]
 801141a:	b2db      	uxtb	r3, r3
 801141c:	2b22      	cmp	r3, #34	@ 0x22
 801141e:	d101      	bne.n	8011424 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8011420:	4b33      	ldr	r3, [pc, #204]	@ (80114f0 <I2C_Mem_ISR_DMA+0x234>)
 8011422:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011428:	b29b      	uxth	r3, r3
 801142a:	2bff      	cmp	r3, #255	@ 0xff
 801142c:	d911      	bls.n	8011452 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	22ff      	movs	r2, #255	@ 0xff
 8011432:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011438:	b299      	uxth	r1, r3
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801143e:	b2da      	uxtb	r2, r3
 8011440:	2380      	movs	r3, #128	@ 0x80
 8011442:	045c      	lsls	r4, r3, #17
 8011444:	68f8      	ldr	r0, [r7, #12]
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	9300      	str	r3, [sp, #0]
 801144a:	0023      	movs	r3, r4
 801144c:	f001 f940 	bl	80126d0 <I2C_TransferConfig>
 8011450:	e012      	b.n	8011478 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011456:	b29a      	uxth	r2, r3
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011460:	b299      	uxth	r1, r3
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011466:	b2da      	uxtb	r2, r3
 8011468:	2380      	movs	r3, #128	@ 0x80
 801146a:	049c      	lsls	r4, r3, #18
 801146c:	68f8      	ldr	r0, [r7, #12]
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	9300      	str	r3, [sp, #0]
 8011472:	0023      	movs	r3, r4
 8011474:	f001 f92c 	bl	80126d0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801147c:	b29a      	uxth	r2, r3
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011482:	1ad3      	subs	r3, r2, r3
 8011484:	b29a      	uxth	r2, r3
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	2241      	movs	r2, #65	@ 0x41
 801148e:	5c9b      	ldrb	r3, [r3, r2]
 8011490:	b2db      	uxtb	r3, r3
 8011492:	2b22      	cmp	r3, #34	@ 0x22
 8011494:	d109      	bne.n	80114aa <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	681a      	ldr	r2, [r3, #0]
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2180      	movs	r1, #128	@ 0x80
 80114a2:	0209      	lsls	r1, r1, #8
 80114a4:	430a      	orrs	r2, r1
 80114a6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80114a8:	e017      	b.n	80114da <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	681a      	ldr	r2, [r3, #0]
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	2180      	movs	r1, #128	@ 0x80
 80114b6:	01c9      	lsls	r1, r1, #7
 80114b8:	430a      	orrs	r2, r1
 80114ba:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80114bc:	e00d      	b.n	80114da <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	2220      	movs	r2, #32
 80114c2:	4013      	ands	r3, r2
 80114c4:	d009      	beq.n	80114da <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2220      	movs	r2, #32
 80114ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80114cc:	d005      	beq.n	80114da <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80114ce:	68ba      	ldr	r2, [r7, #8]
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	0011      	movs	r1, r2
 80114d4:	0018      	movs	r0, r3
 80114d6:	f000 fa3d 	bl	8011954 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2240      	movs	r2, #64	@ 0x40
 80114de:	2100      	movs	r1, #0
 80114e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80114e2:	2300      	movs	r3, #0
}
 80114e4:	0018      	movs	r0, r3
 80114e6:	46bd      	mov	sp, r7
 80114e8:	b007      	add	sp, #28
 80114ea:	bd90      	pop	{r4, r7, pc}
 80114ec:	80002000 	.word	0x80002000
 80114f0:	80002400 	.word	0x80002400

080114f4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b088      	sub	sp, #32
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011504:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8011506:	2300      	movs	r3, #0
 8011508:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	2240      	movs	r2, #64	@ 0x40
 801150e:	5c9b      	ldrb	r3, [r3, r2]
 8011510:	2b01      	cmp	r3, #1
 8011512:	d101      	bne.n	8011518 <I2C_Slave_ISR_DMA+0x24>
 8011514:	2302      	movs	r3, #2
 8011516:	e0cd      	b.n	80116b4 <I2C_Slave_ISR_DMA+0x1c0>
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2240      	movs	r2, #64	@ 0x40
 801151c:	2101      	movs	r1, #1
 801151e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	2220      	movs	r2, #32
 8011524:	4013      	ands	r3, r2
 8011526:	d009      	beq.n	801153c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2220      	movs	r2, #32
 801152c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801152e:	d005      	beq.n	801153c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8011530:	68ba      	ldr	r2, [r7, #8]
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	0011      	movs	r1, r2
 8011536:	0018      	movs	r0, r3
 8011538:	f000 fada 	bl	8011af0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	2210      	movs	r2, #16
 8011540:	4013      	ands	r3, r2
 8011542:	d100      	bne.n	8011546 <I2C_Slave_ISR_DMA+0x52>
 8011544:	e0a3      	b.n	801168e <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2210      	movs	r2, #16
 801154a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801154c:	d100      	bne.n	8011550 <I2C_Slave_ISR_DMA+0x5c>
 801154e:	e09e      	b.n	801168e <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	2380      	movs	r3, #128	@ 0x80
 8011554:	01db      	lsls	r3, r3, #7
 8011556:	4013      	ands	r3, r2
 8011558:	d105      	bne.n	8011566 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 801155a:	687a      	ldr	r2, [r7, #4]
 801155c:	2380      	movs	r3, #128	@ 0x80
 801155e:	021b      	lsls	r3, r3, #8
 8011560:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011562:	d100      	bne.n	8011566 <I2C_Slave_ISR_DMA+0x72>
 8011564:	e08c      	b.n	8011680 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801156a:	2b00      	cmp	r3, #0
 801156c:	d00c      	beq.n	8011588 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 801156e:	687a      	ldr	r2, [r7, #4]
 8011570:	2380      	movs	r3, #128	@ 0x80
 8011572:	021b      	lsls	r3, r3, #8
 8011574:	4013      	ands	r3, r2
 8011576:	d007      	beq.n	8011588 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d101      	bne.n	8011588 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8011584:	2301      	movs	r3, #1
 8011586:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801158c:	2b00      	cmp	r3, #0
 801158e:	d00c      	beq.n	80115aa <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	2380      	movs	r3, #128	@ 0x80
 8011594:	01db      	lsls	r3, r3, #7
 8011596:	4013      	ands	r3, r2
 8011598:	d007      	beq.n	80115aa <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d101      	bne.n	80115aa <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 80115a6:	2301      	movs	r3, #1
 80115a8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	d12d      	bne.n	801160c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	2241      	movs	r2, #65	@ 0x41
 80115b4:	5c9b      	ldrb	r3, [r3, r2]
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	2b28      	cmp	r3, #40	@ 0x28
 80115ba:	d10b      	bne.n	80115d4 <I2C_Slave_ISR_DMA+0xe0>
 80115bc:	69ba      	ldr	r2, [r7, #24]
 80115be:	2380      	movs	r3, #128	@ 0x80
 80115c0:	049b      	lsls	r3, r3, #18
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d106      	bne.n	80115d4 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80115c6:	68ba      	ldr	r2, [r7, #8]
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	0011      	movs	r1, r2
 80115cc:	0018      	movs	r0, r3
 80115ce:	f000 fbaf 	bl	8011d30 <I2C_ITListenCplt>
 80115d2:	e054      	b.n	801167e <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2241      	movs	r2, #65	@ 0x41
 80115d8:	5c9b      	ldrb	r3, [r3, r2]
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	2b29      	cmp	r3, #41	@ 0x29
 80115de:	d110      	bne.n	8011602 <I2C_Slave_ISR_DMA+0x10e>
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	4a36      	ldr	r2, [pc, #216]	@ (80116bc <I2C_Slave_ISR_DMA+0x1c8>)
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d00c      	beq.n	8011602 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	2210      	movs	r2, #16
 80115ee:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	0018      	movs	r0, r3
 80115f4:	f000 fd1f 	bl	8012036 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	0018      	movs	r0, r3
 80115fc:	f000 f946 	bl	801188c <I2C_ITSlaveSeqCplt>
 8011600:	e03d      	b.n	801167e <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	2210      	movs	r2, #16
 8011608:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 801160a:	e03e      	b.n	801168a <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	2210      	movs	r2, #16
 8011612:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011618:	2204      	movs	r2, #4
 801161a:	431a      	orrs	r2, r3
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8011620:	2317      	movs	r3, #23
 8011622:	18fb      	adds	r3, r7, r3
 8011624:	68fa      	ldr	r2, [r7, #12]
 8011626:	2141      	movs	r1, #65	@ 0x41
 8011628:	5c52      	ldrb	r2, [r2, r1]
 801162a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d004      	beq.n	801163c <I2C_Slave_ISR_DMA+0x148>
 8011632:	69ba      	ldr	r2, [r7, #24]
 8011634:	2380      	movs	r3, #128	@ 0x80
 8011636:	045b      	lsls	r3, r3, #17
 8011638:	429a      	cmp	r2, r3
 801163a:	d126      	bne.n	801168a <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801163c:	2217      	movs	r2, #23
 801163e:	18bb      	adds	r3, r7, r2
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	2b21      	cmp	r3, #33	@ 0x21
 8011644:	d003      	beq.n	801164e <I2C_Slave_ISR_DMA+0x15a>
 8011646:	18bb      	adds	r3, r7, r2
 8011648:	781b      	ldrb	r3, [r3, #0]
 801164a:	2b29      	cmp	r3, #41	@ 0x29
 801164c:	d103      	bne.n	8011656 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2221      	movs	r2, #33	@ 0x21
 8011652:	631a      	str	r2, [r3, #48]	@ 0x30
 8011654:	e00b      	b.n	801166e <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011656:	2217      	movs	r2, #23
 8011658:	18bb      	adds	r3, r7, r2
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	2b22      	cmp	r3, #34	@ 0x22
 801165e:	d003      	beq.n	8011668 <I2C_Slave_ISR_DMA+0x174>
 8011660:	18bb      	adds	r3, r7, r2
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	2b2a      	cmp	r3, #42	@ 0x2a
 8011666:	d102      	bne.n	801166e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2222      	movs	r2, #34	@ 0x22
 801166c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	0011      	movs	r1, r2
 8011676:	0018      	movs	r0, r3
 8011678:	f000 fbb2 	bl	8011de0 <I2C_ITError>
      if (treatdmanack == 1U)
 801167c:	e005      	b.n	801168a <I2C_Slave_ISR_DMA+0x196>
 801167e:	e004      	b.n	801168a <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	2210      	movs	r2, #16
 8011686:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011688:	e00f      	b.n	80116aa <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 801168a:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801168c:	e00d      	b.n	80116aa <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	2208      	movs	r2, #8
 8011692:	4013      	ands	r3, r2
 8011694:	d009      	beq.n	80116aa <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2208      	movs	r2, #8
 801169a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801169c:	d005      	beq.n	80116aa <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801169e:	68ba      	ldr	r2, [r7, #8]
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	0011      	movs	r1, r2
 80116a4:	0018      	movs	r0, r3
 80116a6:	f000 f80b 	bl	80116c0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	2240      	movs	r2, #64	@ 0x40
 80116ae:	2100      	movs	r1, #0
 80116b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80116b2:	2300      	movs	r3, #0
}
 80116b4:	0018      	movs	r0, r3
 80116b6:	46bd      	mov	sp, r7
 80116b8:	b008      	add	sp, #32
 80116ba:	bd80      	pop	{r7, pc}
 80116bc:	ffff0000 	.word	0xffff0000

080116c0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80116c0:	b5b0      	push	{r4, r5, r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2241      	movs	r2, #65	@ 0x41
 80116ce:	5c9b      	ldrb	r3, [r3, r2]
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	001a      	movs	r2, r3
 80116d4:	2328      	movs	r3, #40	@ 0x28
 80116d6:	4013      	ands	r3, r2
 80116d8:	2b28      	cmp	r3, #40	@ 0x28
 80116da:	d000      	beq.n	80116de <I2C_ITAddrCplt+0x1e>
 80116dc:	e088      	b.n	80117f0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	699b      	ldr	r3, [r3, #24]
 80116e4:	0c1b      	lsrs	r3, r3, #16
 80116e6:	b2da      	uxtb	r2, r3
 80116e8:	250f      	movs	r5, #15
 80116ea:	197b      	adds	r3, r7, r5
 80116ec:	2101      	movs	r1, #1
 80116ee:	400a      	ands	r2, r1
 80116f0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	699b      	ldr	r3, [r3, #24]
 80116f8:	0c1b      	lsrs	r3, r3, #16
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	200c      	movs	r0, #12
 80116fe:	183b      	adds	r3, r7, r0
 8011700:	21fe      	movs	r1, #254	@ 0xfe
 8011702:	400a      	ands	r2, r1
 8011704:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	689b      	ldr	r3, [r3, #8]
 801170c:	b29a      	uxth	r2, r3
 801170e:	240a      	movs	r4, #10
 8011710:	193b      	adds	r3, r7, r4
 8011712:	0592      	lsls	r2, r2, #22
 8011714:	0d92      	lsrs	r2, r2, #22
 8011716:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	b29a      	uxth	r2, r3
 8011720:	2308      	movs	r3, #8
 8011722:	18fb      	adds	r3, r7, r3
 8011724:	21fe      	movs	r1, #254	@ 0xfe
 8011726:	400a      	ands	r2, r1
 8011728:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	2b02      	cmp	r3, #2
 8011730:	d148      	bne.n	80117c4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8011732:	0021      	movs	r1, r4
 8011734:	187b      	adds	r3, r7, r1
 8011736:	881b      	ldrh	r3, [r3, #0]
 8011738:	09db      	lsrs	r3, r3, #7
 801173a:	b29a      	uxth	r2, r3
 801173c:	183b      	adds	r3, r7, r0
 801173e:	881b      	ldrh	r3, [r3, #0]
 8011740:	4053      	eors	r3, r2
 8011742:	b29b      	uxth	r3, r3
 8011744:	001a      	movs	r2, r3
 8011746:	2306      	movs	r3, #6
 8011748:	4013      	ands	r3, r2
 801174a:	d120      	bne.n	801178e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 801174c:	183b      	adds	r3, r7, r0
 801174e:	187a      	adds	r2, r7, r1
 8011750:	8812      	ldrh	r2, [r2, #0]
 8011752:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011758:	1c5a      	adds	r2, r3, #1
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011762:	2b02      	cmp	r3, #2
 8011764:	d14c      	bne.n	8011800 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2200      	movs	r2, #0
 801176a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	2208      	movs	r2, #8
 8011772:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2240      	movs	r2, #64	@ 0x40
 8011778:	2100      	movs	r1, #0
 801177a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801177c:	183b      	adds	r3, r7, r0
 801177e:	881a      	ldrh	r2, [r3, #0]
 8011780:	197b      	adds	r3, r7, r5
 8011782:	7819      	ldrb	r1, [r3, #0]
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	0018      	movs	r0, r3
 8011788:	f7ff fa39 	bl	8010bfe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 801178c:	e038      	b.n	8011800 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 801178e:	240c      	movs	r4, #12
 8011790:	193b      	adds	r3, r7, r4
 8011792:	2208      	movs	r2, #8
 8011794:	18ba      	adds	r2, r7, r2
 8011796:	8812      	ldrh	r2, [r2, #0]
 8011798:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801179a:	2380      	movs	r3, #128	@ 0x80
 801179c:	021a      	lsls	r2, r3, #8
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	0011      	movs	r1, r2
 80117a2:	0018      	movs	r0, r3
 80117a4:	f001 f85c 	bl	8012860 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2240      	movs	r2, #64	@ 0x40
 80117ac:	2100      	movs	r1, #0
 80117ae:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80117b0:	193b      	adds	r3, r7, r4
 80117b2:	881a      	ldrh	r2, [r3, #0]
 80117b4:	230f      	movs	r3, #15
 80117b6:	18fb      	adds	r3, r7, r3
 80117b8:	7819      	ldrb	r1, [r3, #0]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	0018      	movs	r0, r3
 80117be:	f7ff fa1e 	bl	8010bfe <HAL_I2C_AddrCallback>
}
 80117c2:	e01d      	b.n	8011800 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80117c4:	2380      	movs	r3, #128	@ 0x80
 80117c6:	021a      	lsls	r2, r3, #8
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	0011      	movs	r1, r2
 80117cc:	0018      	movs	r0, r3
 80117ce:	f001 f847 	bl	8012860 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2240      	movs	r2, #64	@ 0x40
 80117d6:	2100      	movs	r1, #0
 80117d8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80117da:	230c      	movs	r3, #12
 80117dc:	18fb      	adds	r3, r7, r3
 80117de:	881a      	ldrh	r2, [r3, #0]
 80117e0:	230f      	movs	r3, #15
 80117e2:	18fb      	adds	r3, r7, r3
 80117e4:	7819      	ldrb	r1, [r3, #0]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	0018      	movs	r0, r3
 80117ea:	f7ff fa08 	bl	8010bfe <HAL_I2C_AddrCallback>
}
 80117ee:	e007      	b.n	8011800 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2208      	movs	r2, #8
 80117f6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2240      	movs	r2, #64	@ 0x40
 80117fc:	2100      	movs	r1, #0
 80117fe:	5499      	strb	r1, [r3, r2]
}
 8011800:	46c0      	nop			@ (mov r8, r8)
 8011802:	46bd      	mov	sp, r7
 8011804:	b004      	add	sp, #16
 8011806:	bdb0      	pop	{r4, r5, r7, pc}

08011808 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2242      	movs	r2, #66	@ 0x42
 8011814:	2100      	movs	r1, #0
 8011816:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2241      	movs	r2, #65	@ 0x41
 801181c:	5c9b      	ldrb	r3, [r3, r2]
 801181e:	b2db      	uxtb	r3, r3
 8011820:	2b21      	cmp	r3, #33	@ 0x21
 8011822:	d117      	bne.n	8011854 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	2241      	movs	r2, #65	@ 0x41
 8011828:	2120      	movs	r1, #32
 801182a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2211      	movs	r2, #17
 8011830:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	2200      	movs	r2, #0
 8011836:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2101      	movs	r1, #1
 801183c:	0018      	movs	r0, r3
 801183e:	f001 f80f 	bl	8012860 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2240      	movs	r2, #64	@ 0x40
 8011846:	2100      	movs	r1, #0
 8011848:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	0018      	movs	r0, r3
 801184e:	f7ff f9b6 	bl	8010bbe <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011852:	e016      	b.n	8011882 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2241      	movs	r2, #65	@ 0x41
 8011858:	2120      	movs	r1, #32
 801185a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2212      	movs	r2, #18
 8011860:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2200      	movs	r2, #0
 8011866:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2102      	movs	r1, #2
 801186c:	0018      	movs	r0, r3
 801186e:	f000 fff7 	bl	8012860 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2240      	movs	r2, #64	@ 0x40
 8011876:	2100      	movs	r1, #0
 8011878:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	0018      	movs	r0, r3
 801187e:	f7ff f9a6 	bl	8010bce <HAL_I2C_MasterRxCpltCallback>
}
 8011882:	46c0      	nop			@ (mov r8, r8)
 8011884:	46bd      	mov	sp, r7
 8011886:	b002      	add	sp, #8
 8011888:	bd80      	pop	{r7, pc}
	...

0801188c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2242      	movs	r2, #66	@ 0x42
 80118a0:	2100      	movs	r1, #0
 80118a2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80118a4:	68fa      	ldr	r2, [r7, #12]
 80118a6:	2380      	movs	r3, #128	@ 0x80
 80118a8:	01db      	lsls	r3, r3, #7
 80118aa:	4013      	ands	r3, r2
 80118ac:	d008      	beq.n	80118c0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	4924      	ldr	r1, [pc, #144]	@ (801194c <I2C_ITSlaveSeqCplt+0xc0>)
 80118ba:	400a      	ands	r2, r1
 80118bc:	601a      	str	r2, [r3, #0]
 80118be:	e00c      	b.n	80118da <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80118c0:	68fa      	ldr	r2, [r7, #12]
 80118c2:	2380      	movs	r3, #128	@ 0x80
 80118c4:	021b      	lsls	r3, r3, #8
 80118c6:	4013      	ands	r3, r2
 80118c8:	d007      	beq.n	80118da <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	491e      	ldr	r1, [pc, #120]	@ (8011950 <I2C_ITSlaveSeqCplt+0xc4>)
 80118d6:	400a      	ands	r2, r1
 80118d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2241      	movs	r2, #65	@ 0x41
 80118de:	5c9b      	ldrb	r3, [r3, r2]
 80118e0:	b2db      	uxtb	r3, r3
 80118e2:	2b29      	cmp	r3, #41	@ 0x29
 80118e4:	d114      	bne.n	8011910 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2241      	movs	r2, #65	@ 0x41
 80118ea:	2128      	movs	r1, #40	@ 0x28
 80118ec:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2221      	movs	r2, #33	@ 0x21
 80118f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2101      	movs	r1, #1
 80118f8:	0018      	movs	r0, r3
 80118fa:	f000 ffb1 	bl	8012860 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2240      	movs	r2, #64	@ 0x40
 8011902:	2100      	movs	r1, #0
 8011904:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	0018      	movs	r0, r3
 801190a:	f7ff f968 	bl	8010bde <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801190e:	e019      	b.n	8011944 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2241      	movs	r2, #65	@ 0x41
 8011914:	5c9b      	ldrb	r3, [r3, r2]
 8011916:	b2db      	uxtb	r3, r3
 8011918:	2b2a      	cmp	r3, #42	@ 0x2a
 801191a:	d113      	bne.n	8011944 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2241      	movs	r2, #65	@ 0x41
 8011920:	2128      	movs	r1, #40	@ 0x28
 8011922:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2222      	movs	r2, #34	@ 0x22
 8011928:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2102      	movs	r1, #2
 801192e:	0018      	movs	r0, r3
 8011930:	f000 ff96 	bl	8012860 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2240      	movs	r2, #64	@ 0x40
 8011938:	2100      	movs	r1, #0
 801193a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	0018      	movs	r0, r3
 8011940:	f7ff f955 	bl	8010bee <HAL_I2C_SlaveRxCpltCallback>
}
 8011944:	46c0      	nop			@ (mov r8, r8)
 8011946:	46bd      	mov	sp, r7
 8011948:	b004      	add	sp, #16
 801194a:	bd80      	pop	{r7, pc}
 801194c:	ffffbfff 	.word	0xffffbfff
 8011950:	ffff7fff 	.word	0xffff7fff

08011954 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b086      	sub	sp, #24
 8011958:	af00      	add	r7, sp, #0
 801195a:	6078      	str	r0, [r7, #4]
 801195c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	2220      	movs	r2, #32
 8011968:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2241      	movs	r2, #65	@ 0x41
 801196e:	5c9b      	ldrb	r3, [r3, r2]
 8011970:	b2db      	uxtb	r3, r3
 8011972:	2b21      	cmp	r3, #33	@ 0x21
 8011974:	d108      	bne.n	8011988 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2101      	movs	r1, #1
 801197a:	0018      	movs	r0, r3
 801197c:	f000 ff70 	bl	8012860 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2211      	movs	r2, #17
 8011984:	631a      	str	r2, [r3, #48]	@ 0x30
 8011986:	e00d      	b.n	80119a4 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2241      	movs	r2, #65	@ 0x41
 801198c:	5c9b      	ldrb	r3, [r3, r2]
 801198e:	b2db      	uxtb	r3, r3
 8011990:	2b22      	cmp	r3, #34	@ 0x22
 8011992:	d107      	bne.n	80119a4 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2102      	movs	r1, #2
 8011998:	0018      	movs	r0, r3
 801199a:	f000 ff61 	bl	8012860 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2212      	movs	r2, #18
 80119a2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	685a      	ldr	r2, [r3, #4]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	494e      	ldr	r1, [pc, #312]	@ (8011ae8 <I2C_ITMasterCplt+0x194>)
 80119b0:	400a      	ands	r2, r1
 80119b2:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2200      	movs	r2, #0
 80119b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	4a4b      	ldr	r2, [pc, #300]	@ (8011aec <I2C_ITMasterCplt+0x198>)
 80119be:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	2210      	movs	r2, #16
 80119c4:	4013      	ands	r3, r2
 80119c6:	d009      	beq.n	80119dc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	2210      	movs	r2, #16
 80119ce:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80119d4:	2204      	movs	r2, #4
 80119d6:	431a      	orrs	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2241      	movs	r2, #65	@ 0x41
 80119e0:	5c9b      	ldrb	r3, [r3, r2]
 80119e2:	b2db      	uxtb	r3, r3
 80119e4:	2b60      	cmp	r3, #96	@ 0x60
 80119e6:	d109      	bne.n	80119fc <I2C_ITMasterCplt+0xa8>
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	2204      	movs	r2, #4
 80119ec:	4013      	ands	r3, r2
 80119ee:	d005      	beq.n	80119fc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119f6:	b2db      	uxtb	r3, r3
 80119f8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80119fa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	0018      	movs	r0, r3
 8011a00:	f000 fb19 	bl	8012036 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a08:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2241      	movs	r2, #65	@ 0x41
 8011a0e:	5c9b      	ldrb	r3, [r3, r2]
 8011a10:	b2db      	uxtb	r3, r3
 8011a12:	2b60      	cmp	r3, #96	@ 0x60
 8011a14:	d002      	beq.n	8011a1c <I2C_ITMasterCplt+0xc8>
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d007      	beq.n	8011a2c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	0011      	movs	r1, r2
 8011a24:	0018      	movs	r0, r3
 8011a26:	f000 f9db 	bl	8011de0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011a2a:	e058      	b.n	8011ade <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2241      	movs	r2, #65	@ 0x41
 8011a30:	5c9b      	ldrb	r3, [r3, r2]
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	2b21      	cmp	r3, #33	@ 0x21
 8011a36:	d126      	bne.n	8011a86 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2241      	movs	r2, #65	@ 0x41
 8011a3c:	2120      	movs	r1, #32
 8011a3e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	2200      	movs	r2, #0
 8011a44:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2242      	movs	r2, #66	@ 0x42
 8011a4a:	5c9b      	ldrb	r3, [r3, r2]
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	2b40      	cmp	r3, #64	@ 0x40
 8011a50:	d10c      	bne.n	8011a6c <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2242      	movs	r2, #66	@ 0x42
 8011a56:	2100      	movs	r1, #0
 8011a58:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2240      	movs	r2, #64	@ 0x40
 8011a5e:	2100      	movs	r1, #0
 8011a60:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	0018      	movs	r0, r3
 8011a66:	f7ff f8e2 	bl	8010c2e <HAL_I2C_MemTxCpltCallback>
}
 8011a6a:	e038      	b.n	8011ade <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2242      	movs	r2, #66	@ 0x42
 8011a70:	2100      	movs	r1, #0
 8011a72:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2240      	movs	r2, #64	@ 0x40
 8011a78:	2100      	movs	r1, #0
 8011a7a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	0018      	movs	r0, r3
 8011a80:	f7ff f89d 	bl	8010bbe <HAL_I2C_MasterTxCpltCallback>
}
 8011a84:	e02b      	b.n	8011ade <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	2241      	movs	r2, #65	@ 0x41
 8011a8a:	5c9b      	ldrb	r3, [r3, r2]
 8011a8c:	b2db      	uxtb	r3, r3
 8011a8e:	2b22      	cmp	r3, #34	@ 0x22
 8011a90:	d125      	bne.n	8011ade <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2241      	movs	r2, #65	@ 0x41
 8011a96:	2120      	movs	r1, #32
 8011a98:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2242      	movs	r2, #66	@ 0x42
 8011aa4:	5c9b      	ldrb	r3, [r3, r2]
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b40      	cmp	r3, #64	@ 0x40
 8011aaa:	d10c      	bne.n	8011ac6 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2242      	movs	r2, #66	@ 0x42
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2240      	movs	r2, #64	@ 0x40
 8011ab8:	2100      	movs	r1, #0
 8011aba:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	0018      	movs	r0, r3
 8011ac0:	f7ff f8bd 	bl	8010c3e <HAL_I2C_MemRxCpltCallback>
}
 8011ac4:	e00b      	b.n	8011ade <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2242      	movs	r2, #66	@ 0x42
 8011aca:	2100      	movs	r1, #0
 8011acc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2240      	movs	r2, #64	@ 0x40
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	0018      	movs	r0, r3
 8011ada:	f7ff f878 	bl	8010bce <HAL_I2C_MasterRxCpltCallback>
}
 8011ade:	46c0      	nop			@ (mov r8, r8)
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	b006      	add	sp, #24
 8011ae4:	bd80      	pop	{r7, pc}
 8011ae6:	46c0      	nop			@ (mov r8, r8)
 8011ae8:	fe00e800 	.word	0xfe00e800
 8011aec:	ffff0000 	.word	0xffff0000

08011af0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b086      	sub	sp, #24
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011b06:	200f      	movs	r0, #15
 8011b08:	183b      	adds	r3, r7, r0
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	2141      	movs	r1, #65	@ 0x41
 8011b0e:	5c52      	ldrb	r2, [r2, r1]
 8011b10:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	2220      	movs	r2, #32
 8011b18:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011b1a:	183b      	adds	r3, r7, r0
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	2b21      	cmp	r3, #33	@ 0x21
 8011b20:	d003      	beq.n	8011b2a <I2C_ITSlaveCplt+0x3a>
 8011b22:	183b      	adds	r3, r7, r0
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	2b29      	cmp	r3, #41	@ 0x29
 8011b28:	d109      	bne.n	8011b3e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011b2a:	4a7b      	ldr	r2, [pc, #492]	@ (8011d18 <I2C_ITSlaveCplt+0x228>)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	0011      	movs	r1, r2
 8011b30:	0018      	movs	r0, r3
 8011b32:	f000 fe95 	bl	8012860 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2221      	movs	r2, #33	@ 0x21
 8011b3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8011b3c:	e011      	b.n	8011b62 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011b3e:	220f      	movs	r2, #15
 8011b40:	18bb      	adds	r3, r7, r2
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	2b22      	cmp	r3, #34	@ 0x22
 8011b46:	d003      	beq.n	8011b50 <I2C_ITSlaveCplt+0x60>
 8011b48:	18bb      	adds	r3, r7, r2
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b4e:	d108      	bne.n	8011b62 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011b50:	4a72      	ldr	r2, [pc, #456]	@ (8011d1c <I2C_ITSlaveCplt+0x22c>)
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	0011      	movs	r1, r2
 8011b56:	0018      	movs	r0, r3
 8011b58:	f000 fe82 	bl	8012860 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2222      	movs	r2, #34	@ 0x22
 8011b60:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	685a      	ldr	r2, [r3, #4]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	2180      	movs	r1, #128	@ 0x80
 8011b6e:	0209      	lsls	r1, r1, #8
 8011b70:	430a      	orrs	r2, r1
 8011b72:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	685a      	ldr	r2, [r3, #4]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	4968      	ldr	r1, [pc, #416]	@ (8011d20 <I2C_ITSlaveCplt+0x230>)
 8011b80:	400a      	ands	r2, r1
 8011b82:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	0018      	movs	r0, r3
 8011b88:	f000 fa55 	bl	8012036 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011b8c:	693a      	ldr	r2, [r7, #16]
 8011b8e:	2380      	movs	r3, #128	@ 0x80
 8011b90:	01db      	lsls	r3, r3, #7
 8011b92:	4013      	ands	r3, r2
 8011b94:	d013      	beq.n	8011bbe <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	681a      	ldr	r2, [r3, #0]
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4960      	ldr	r1, [pc, #384]	@ (8011d24 <I2C_ITSlaveCplt+0x234>)
 8011ba2:	400a      	ands	r2, r1
 8011ba4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d01f      	beq.n	8011bee <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	685b      	ldr	r3, [r3, #4]
 8011bb6:	b29a      	uxth	r2, r3
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011bbc:	e017      	b.n	8011bee <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011bbe:	693a      	ldr	r2, [r7, #16]
 8011bc0:	2380      	movs	r3, #128	@ 0x80
 8011bc2:	021b      	lsls	r3, r3, #8
 8011bc4:	4013      	ands	r3, r2
 8011bc6:	d012      	beq.n	8011bee <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	681a      	ldr	r2, [r3, #0]
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	4955      	ldr	r1, [pc, #340]	@ (8011d28 <I2C_ITSlaveCplt+0x238>)
 8011bd4:	400a      	ands	r2, r1
 8011bd6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d006      	beq.n	8011bee <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	2204      	movs	r2, #4
 8011bf2:	4013      	ands	r3, r2
 8011bf4:	d020      	beq.n	8011c38 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	2204      	movs	r2, #4
 8011bfa:	4393      	bics	r3, r2
 8011bfc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c08:	b2d2      	uxtb	r2, r2
 8011c0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c10:	1c5a      	adds	r2, r3, #1
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d00c      	beq.n	8011c38 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011c22:	3b01      	subs	r3, #1
 8011c24:	b29a      	uxth	r2, r3
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011c2e:	b29b      	uxth	r3, r3
 8011c30:	3b01      	subs	r3, #1
 8011c32:	b29a      	uxth	r2, r3
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d005      	beq.n	8011c4e <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c46:	2204      	movs	r2, #4
 8011c48:	431a      	orrs	r2, r3
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2242      	movs	r2, #66	@ 0x42
 8011c52:	2100      	movs	r1, #0
 8011c54:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d013      	beq.n	8011c8c <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	0011      	movs	r1, r2
 8011c6c:	0018      	movs	r0, r3
 8011c6e:	f000 f8b7 	bl	8011de0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2241      	movs	r2, #65	@ 0x41
 8011c76:	5c9b      	ldrb	r3, [r3, r2]
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	2b28      	cmp	r3, #40	@ 0x28
 8011c7c:	d147      	bne.n	8011d0e <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011c7e:	697a      	ldr	r2, [r7, #20]
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	0011      	movs	r1, r2
 8011c84:	0018      	movs	r0, r3
 8011c86:	f000 f853 	bl	8011d30 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011c8a:	e040      	b.n	8011d0e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c90:	4a26      	ldr	r2, [pc, #152]	@ (8011d2c <I2C_ITSlaveCplt+0x23c>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d016      	beq.n	8011cc4 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	0018      	movs	r0, r3
 8011c9a:	f7ff fdf7 	bl	801188c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	4a22      	ldr	r2, [pc, #136]	@ (8011d2c <I2C_ITSlaveCplt+0x23c>)
 8011ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2241      	movs	r2, #65	@ 0x41
 8011ca8:	2120      	movs	r1, #32
 8011caa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2240      	movs	r2, #64	@ 0x40
 8011cb6:	2100      	movs	r1, #0
 8011cb8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	0018      	movs	r0, r3
 8011cbe:	f7fe ffae 	bl	8010c1e <HAL_I2C_ListenCpltCallback>
}
 8011cc2:	e024      	b.n	8011d0e <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2241      	movs	r2, #65	@ 0x41
 8011cc8:	5c9b      	ldrb	r3, [r3, r2]
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	2b22      	cmp	r3, #34	@ 0x22
 8011cce:	d10f      	bne.n	8011cf0 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2241      	movs	r2, #65	@ 0x41
 8011cd4:	2120      	movs	r1, #32
 8011cd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2200      	movs	r2, #0
 8011cdc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2240      	movs	r2, #64	@ 0x40
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	0018      	movs	r0, r3
 8011cea:	f7fe ff80 	bl	8010bee <HAL_I2C_SlaveRxCpltCallback>
}
 8011cee:	e00e      	b.n	8011d0e <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2241      	movs	r2, #65	@ 0x41
 8011cf4:	2120      	movs	r1, #32
 8011cf6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2240      	movs	r2, #64	@ 0x40
 8011d02:	2100      	movs	r1, #0
 8011d04:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	0018      	movs	r0, r3
 8011d0a:	f7fe ff68 	bl	8010bde <HAL_I2C_SlaveTxCpltCallback>
}
 8011d0e:	46c0      	nop			@ (mov r8, r8)
 8011d10:	46bd      	mov	sp, r7
 8011d12:	b006      	add	sp, #24
 8011d14:	bd80      	pop	{r7, pc}
 8011d16:	46c0      	nop			@ (mov r8, r8)
 8011d18:	00008001 	.word	0x00008001
 8011d1c:	00008002 	.word	0x00008002
 8011d20:	fe00e800 	.word	0xfe00e800
 8011d24:	ffffbfff 	.word	0xffffbfff
 8011d28:	ffff7fff 	.word	0xffff7fff
 8011d2c:	ffff0000 	.word	0xffff0000

08011d30 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b082      	sub	sp, #8
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
 8011d38:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	4a26      	ldr	r2, [pc, #152]	@ (8011dd8 <I2C_ITListenCplt+0xa8>)
 8011d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2200      	movs	r2, #0
 8011d44:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2241      	movs	r2, #65	@ 0x41
 8011d4a:	2120      	movs	r1, #32
 8011d4c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2242      	movs	r2, #66	@ 0x42
 8011d52:	2100      	movs	r1, #0
 8011d54:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	2204      	movs	r2, #4
 8011d60:	4013      	ands	r3, r2
 8011d62:	d022      	beq.n	8011daa <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d6e:	b2d2      	uxtb	r2, r2
 8011d70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d76:	1c5a      	adds	r2, r3, #1
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d012      	beq.n	8011daa <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d88:	3b01      	subs	r3, #1
 8011d8a:	b29a      	uxth	r2, r3
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	3b01      	subs	r3, #1
 8011d98:	b29a      	uxth	r2, r3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011da2:	2204      	movs	r2, #4
 8011da4:	431a      	orrs	r2, r3
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011daa:	4a0c      	ldr	r2, [pc, #48]	@ (8011ddc <I2C_ITListenCplt+0xac>)
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	0011      	movs	r1, r2
 8011db0:	0018      	movs	r0, r3
 8011db2:	f000 fd55 	bl	8012860 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	2210      	movs	r2, #16
 8011dbc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2240      	movs	r2, #64	@ 0x40
 8011dc2:	2100      	movs	r1, #0
 8011dc4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	0018      	movs	r0, r3
 8011dca:	f7fe ff28 	bl	8010c1e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8011dce:	46c0      	nop			@ (mov r8, r8)
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	b002      	add	sp, #8
 8011dd4:	bd80      	pop	{r7, pc}
 8011dd6:	46c0      	nop			@ (mov r8, r8)
 8011dd8:	ffff0000 	.word	0xffff0000
 8011ddc:	00008003 	.word	0x00008003

08011de0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011dea:	200f      	movs	r0, #15
 8011dec:	183b      	adds	r3, r7, r0
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	2141      	movs	r1, #65	@ 0x41
 8011df2:	5c52      	ldrb	r2, [r2, r1]
 8011df4:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2242      	movs	r2, #66	@ 0x42
 8011dfa:	2100      	movs	r1, #0
 8011dfc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	4a72      	ldr	r2, [pc, #456]	@ (8011fcc <I2C_ITError+0x1ec>)
 8011e02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2200      	movs	r2, #0
 8011e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	431a      	orrs	r2, r3
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8011e16:	183b      	adds	r3, r7, r0
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	2b28      	cmp	r3, #40	@ 0x28
 8011e1c:	d007      	beq.n	8011e2e <I2C_ITError+0x4e>
 8011e1e:	183b      	adds	r3, r7, r0
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	2b29      	cmp	r3, #41	@ 0x29
 8011e24:	d003      	beq.n	8011e2e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8011e26:	183b      	adds	r3, r7, r0
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e2c:	d10c      	bne.n	8011e48 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	2103      	movs	r1, #3
 8011e32:	0018      	movs	r0, r3
 8011e34:	f000 fd14 	bl	8012860 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2241      	movs	r2, #65	@ 0x41
 8011e3c:	2128      	movs	r1, #40	@ 0x28
 8011e3e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	4a63      	ldr	r2, [pc, #396]	@ (8011fd0 <I2C_ITError+0x1f0>)
 8011e44:	635a      	str	r2, [r3, #52]	@ 0x34
 8011e46:	e032      	b.n	8011eae <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011e48:	4a62      	ldr	r2, [pc, #392]	@ (8011fd4 <I2C_ITError+0x1f4>)
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	0011      	movs	r1, r2
 8011e4e:	0018      	movs	r0, r3
 8011e50:	f000 fd06 	bl	8012860 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	0018      	movs	r0, r3
 8011e58:	f000 f8ed 	bl	8012036 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2241      	movs	r2, #65	@ 0x41
 8011e60:	5c9b      	ldrb	r3, [r3, r2]
 8011e62:	b2db      	uxtb	r3, r3
 8011e64:	2b60      	cmp	r3, #96	@ 0x60
 8011e66:	d01f      	beq.n	8011ea8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2241      	movs	r2, #65	@ 0x41
 8011e6c:	2120      	movs	r1, #32
 8011e6e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	699b      	ldr	r3, [r3, #24]
 8011e76:	2220      	movs	r2, #32
 8011e78:	4013      	ands	r3, r2
 8011e7a:	2b20      	cmp	r3, #32
 8011e7c:	d114      	bne.n	8011ea8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	699b      	ldr	r3, [r3, #24]
 8011e84:	2210      	movs	r2, #16
 8011e86:	4013      	ands	r3, r2
 8011e88:	2b10      	cmp	r3, #16
 8011e8a:	d109      	bne.n	8011ea0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	2210      	movs	r2, #16
 8011e92:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e98:	2204      	movs	r2, #4
 8011e9a:	431a      	orrs	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	2220      	movs	r2, #32
 8011ea6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eb2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d03b      	beq.n	8011f34 <I2C_ITError+0x154>
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	2b11      	cmp	r3, #17
 8011ec0:	d002      	beq.n	8011ec8 <I2C_ITError+0xe8>
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	2b21      	cmp	r3, #33	@ 0x21
 8011ec6:	d135      	bne.n	8011f34 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	681a      	ldr	r2, [r3, #0]
 8011ece:	2380      	movs	r3, #128	@ 0x80
 8011ed0:	01db      	lsls	r3, r3, #7
 8011ed2:	401a      	ands	r2, r3
 8011ed4:	2380      	movs	r3, #128	@ 0x80
 8011ed6:	01db      	lsls	r3, r3, #7
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d107      	bne.n	8011eec <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	681a      	ldr	r2, [r3, #0]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	493c      	ldr	r1, [pc, #240]	@ (8011fd8 <I2C_ITError+0x1f8>)
 8011ee8:	400a      	ands	r2, r1
 8011eea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ef0:	0018      	movs	r0, r3
 8011ef2:	f7fd fd62 	bl	800f9ba <HAL_DMA_GetState>
 8011ef6:	0003      	movs	r3, r0
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	d016      	beq.n	8011f2a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f00:	4a36      	ldr	r2, [pc, #216]	@ (8011fdc <I2C_ITError+0x1fc>)
 8011f02:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2240      	movs	r2, #64	@ 0x40
 8011f08:	2100      	movs	r1, #0
 8011f0a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f10:	0018      	movs	r0, r3
 8011f12:	f7fd fc5d 	bl	800f7d0 <HAL_DMA_Abort_IT>
 8011f16:	1e03      	subs	r3, r0, #0
 8011f18:	d051      	beq.n	8011fbe <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f24:	0018      	movs	r0, r3
 8011f26:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011f28:	e049      	b.n	8011fbe <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	0018      	movs	r0, r3
 8011f2e:	f000 f859 	bl	8011fe4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011f32:	e044      	b.n	8011fbe <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d03b      	beq.n	8011fb4 <I2C_ITError+0x1d4>
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	2b12      	cmp	r3, #18
 8011f40:	d002      	beq.n	8011f48 <I2C_ITError+0x168>
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	2b22      	cmp	r3, #34	@ 0x22
 8011f46:	d135      	bne.n	8011fb4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	681a      	ldr	r2, [r3, #0]
 8011f4e:	2380      	movs	r3, #128	@ 0x80
 8011f50:	021b      	lsls	r3, r3, #8
 8011f52:	401a      	ands	r2, r3
 8011f54:	2380      	movs	r3, #128	@ 0x80
 8011f56:	021b      	lsls	r3, r3, #8
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d107      	bne.n	8011f6c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	681a      	ldr	r2, [r3, #0]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	491e      	ldr	r1, [pc, #120]	@ (8011fe0 <I2C_ITError+0x200>)
 8011f68:	400a      	ands	r2, r1
 8011f6a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f70:	0018      	movs	r0, r3
 8011f72:	f7fd fd22 	bl	800f9ba <HAL_DMA_GetState>
 8011f76:	0003      	movs	r3, r0
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	d016      	beq.n	8011faa <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f80:	4a16      	ldr	r2, [pc, #88]	@ (8011fdc <I2C_ITError+0x1fc>)
 8011f82:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	2240      	movs	r2, #64	@ 0x40
 8011f88:	2100      	movs	r1, #0
 8011f8a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f90:	0018      	movs	r0, r3
 8011f92:	f7fd fc1d 	bl	800f7d0 <HAL_DMA_Abort_IT>
 8011f96:	1e03      	subs	r3, r0, #0
 8011f98:	d013      	beq.n	8011fc2 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011fa4:	0018      	movs	r0, r3
 8011fa6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011fa8:	e00b      	b.n	8011fc2 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	0018      	movs	r0, r3
 8011fae:	f000 f819 	bl	8011fe4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011fb2:	e006      	b.n	8011fc2 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	0018      	movs	r0, r3
 8011fb8:	f000 f814 	bl	8011fe4 <I2C_TreatErrorCallback>
  }
}
 8011fbc:	e002      	b.n	8011fc4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011fbe:	46c0      	nop			@ (mov r8, r8)
 8011fc0:	e000      	b.n	8011fc4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011fc2:	46c0      	nop			@ (mov r8, r8)
}
 8011fc4:	46c0      	nop			@ (mov r8, r8)
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	b004      	add	sp, #16
 8011fca:	bd80      	pop	{r7, pc}
 8011fcc:	ffff0000 	.word	0xffff0000
 8011fd0:	08010ec5 	.word	0x08010ec5
 8011fd4:	00008003 	.word	0x00008003
 8011fd8:	ffffbfff 	.word	0xffffbfff
 8011fdc:	080121ef 	.word	0x080121ef
 8011fe0:	ffff7fff 	.word	0xffff7fff

08011fe4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b082      	sub	sp, #8
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2241      	movs	r2, #65	@ 0x41
 8011ff0:	5c9b      	ldrb	r3, [r3, r2]
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	2b60      	cmp	r3, #96	@ 0x60
 8011ff6:	d10f      	bne.n	8012018 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2241      	movs	r2, #65	@ 0x41
 8011ffc:	2120      	movs	r1, #32
 8011ffe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2200      	movs	r2, #0
 8012004:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2240      	movs	r2, #64	@ 0x40
 801200a:	2100      	movs	r1, #0
 801200c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	0018      	movs	r0, r3
 8012012:	f7fe fe24 	bl	8010c5e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012016:	e00a      	b.n	801202e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2200      	movs	r2, #0
 801201c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2240      	movs	r2, #64	@ 0x40
 8012022:	2100      	movs	r1, #0
 8012024:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	0018      	movs	r0, r3
 801202a:	f7fe fe10 	bl	8010c4e <HAL_I2C_ErrorCallback>
}
 801202e:	46c0      	nop			@ (mov r8, r8)
 8012030:	46bd      	mov	sp, r7
 8012032:	b002      	add	sp, #8
 8012034:	bd80      	pop	{r7, pc}

08012036 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b082      	sub	sp, #8
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	699b      	ldr	r3, [r3, #24]
 8012044:	2202      	movs	r2, #2
 8012046:	4013      	ands	r3, r2
 8012048:	2b02      	cmp	r3, #2
 801204a:	d103      	bne.n	8012054 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	2200      	movs	r2, #0
 8012052:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	699b      	ldr	r3, [r3, #24]
 801205a:	2201      	movs	r2, #1
 801205c:	4013      	ands	r3, r2
 801205e:	2b01      	cmp	r3, #1
 8012060:	d007      	beq.n	8012072 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	699a      	ldr	r2, [r3, #24]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	2101      	movs	r1, #1
 801206e:	430a      	orrs	r2, r1
 8012070:	619a      	str	r2, [r3, #24]
  }
}
 8012072:	46c0      	nop			@ (mov r8, r8)
 8012074:	46bd      	mov	sp, r7
 8012076:	b002      	add	sp, #8
 8012078:	bd80      	pop	{r7, pc}
	...

0801207c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b084      	sub	sp, #16
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012088:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	4920      	ldr	r1, [pc, #128]	@ (8012118 <I2C_DMAMasterTransmitCplt+0x9c>)
 8012096:	400a      	ands	r2, r1
 8012098:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801209e:	b29b      	uxth	r3, r3
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d105      	bne.n	80120b0 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2120      	movs	r1, #32
 80120a8:	0018      	movs	r0, r3
 80120aa:	f000 fb4b 	bl	8012744 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80120ae:	e02e      	b.n	801210e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120b4:	68fa      	ldr	r2, [r7, #12]
 80120b6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80120b8:	189a      	adds	r2, r3, r2
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120c2:	b29b      	uxth	r3, r3
 80120c4:	2bff      	cmp	r3, #255	@ 0xff
 80120c6:	d903      	bls.n	80120d0 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	22ff      	movs	r2, #255	@ 0xff
 80120cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80120ce:	e004      	b.n	80120da <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80120d4:	b29a      	uxth	r2, r3
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120e2:	0019      	movs	r1, r3
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	3328      	adds	r3, #40	@ 0x28
 80120ea:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80120f0:	f7fd fac8 	bl	800f684 <HAL_DMA_Start_IT>
 80120f4:	1e03      	subs	r3, r0, #0
 80120f6:	d005      	beq.n	8012104 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2110      	movs	r1, #16
 80120fc:	0018      	movs	r0, r3
 80120fe:	f7ff fe6f 	bl	8011de0 <I2C_ITError>
}
 8012102:	e004      	b.n	801210e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2140      	movs	r1, #64	@ 0x40
 8012108:	0018      	movs	r0, r3
 801210a:	f000 fb1b 	bl	8012744 <I2C_Enable_IRQ>
}
 801210e:	46c0      	nop			@ (mov r8, r8)
 8012110:	46bd      	mov	sp, r7
 8012112:	b004      	add	sp, #16
 8012114:	bd80      	pop	{r7, pc}
 8012116:	46c0      	nop			@ (mov r8, r8)
 8012118:	ffffbfff 	.word	0xffffbfff

0801211c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b084      	sub	sp, #16
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012128:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	681a      	ldr	r2, [r3, #0]
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	4920      	ldr	r1, [pc, #128]	@ (80121b8 <I2C_DMAMasterReceiveCplt+0x9c>)
 8012136:	400a      	ands	r2, r1
 8012138:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801213e:	b29b      	uxth	r3, r3
 8012140:	2b00      	cmp	r3, #0
 8012142:	d105      	bne.n	8012150 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	2120      	movs	r1, #32
 8012148:	0018      	movs	r0, r3
 801214a:	f000 fafb 	bl	8012744 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801214e:	e02e      	b.n	80121ae <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012154:	68fa      	ldr	r2, [r7, #12]
 8012156:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012158:	189a      	adds	r2, r3, r2
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012162:	b29b      	uxth	r3, r3
 8012164:	2bff      	cmp	r3, #255	@ 0xff
 8012166:	d903      	bls.n	8012170 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	22ff      	movs	r2, #255	@ 0xff
 801216c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801216e:	e004      	b.n	801217a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012174:	b29a      	uxth	r2, r3
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	3324      	adds	r3, #36	@ 0x24
 8012184:	0019      	movs	r1, r3
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801218a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012190:	f7fd fa78 	bl	800f684 <HAL_DMA_Start_IT>
 8012194:	1e03      	subs	r3, r0, #0
 8012196:	d005      	beq.n	80121a4 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	2110      	movs	r1, #16
 801219c:	0018      	movs	r0, r3
 801219e:	f7ff fe1f 	bl	8011de0 <I2C_ITError>
}
 80121a2:	e004      	b.n	80121ae <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2140      	movs	r1, #64	@ 0x40
 80121a8:	0018      	movs	r0, r3
 80121aa:	f000 facb 	bl	8012744 <I2C_Enable_IRQ>
}
 80121ae:	46c0      	nop			@ (mov r8, r8)
 80121b0:	46bd      	mov	sp, r7
 80121b2:	b004      	add	sp, #16
 80121b4:	bd80      	pop	{r7, pc}
 80121b6:	46c0      	nop			@ (mov r8, r8)
 80121b8:	ffff7fff 	.word	0xffff7fff

080121bc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121c8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	685a      	ldr	r2, [r3, #4]
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2180      	movs	r1, #128	@ 0x80
 80121d6:	0209      	lsls	r1, r1, #8
 80121d8:	430a      	orrs	r2, r1
 80121da:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2110      	movs	r1, #16
 80121e0:	0018      	movs	r0, r3
 80121e2:	f7ff fdfd 	bl	8011de0 <I2C_ITError>
}
 80121e6:	46c0      	nop			@ (mov r8, r8)
 80121e8:	46bd      	mov	sp, r7
 80121ea:	b004      	add	sp, #16
 80121ec:	bd80      	pop	{r7, pc}

080121ee <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80121ee:	b580      	push	{r7, lr}
 80121f0:	b084      	sub	sp, #16
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121fa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012200:	2b00      	cmp	r3, #0
 8012202:	d003      	beq.n	801220c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012208:	2200      	movs	r2, #0
 801220a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012210:	2b00      	cmp	r3, #0
 8012212:	d003      	beq.n	801221c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012218:	2200      	movs	r2, #0
 801221a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	0018      	movs	r0, r3
 8012220:	f7ff fee0 	bl	8011fe4 <I2C_TreatErrorCallback>
}
 8012224:	46c0      	nop			@ (mov r8, r8)
 8012226:	46bd      	mov	sp, r7
 8012228:	b004      	add	sp, #16
 801222a:	bd80      	pop	{r7, pc}

0801222c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	60f8      	str	r0, [r7, #12]
 8012234:	60b9      	str	r1, [r7, #8]
 8012236:	603b      	str	r3, [r7, #0]
 8012238:	1dfb      	adds	r3, r7, #7
 801223a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801223c:	e030      	b.n	80122a0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	3301      	adds	r3, #1
 8012242:	d02d      	beq.n	80122a0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012244:	f7fc fccc 	bl	800ebe0 <HAL_GetTick>
 8012248:	0002      	movs	r2, r0
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	1ad3      	subs	r3, r2, r3
 801224e:	683a      	ldr	r2, [r7, #0]
 8012250:	429a      	cmp	r2, r3
 8012252:	d302      	bcc.n	801225a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d122      	bne.n	80122a0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	699b      	ldr	r3, [r3, #24]
 8012260:	68ba      	ldr	r2, [r7, #8]
 8012262:	4013      	ands	r3, r2
 8012264:	68ba      	ldr	r2, [r7, #8]
 8012266:	1ad3      	subs	r3, r2, r3
 8012268:	425a      	negs	r2, r3
 801226a:	4153      	adcs	r3, r2
 801226c:	b2db      	uxtb	r3, r3
 801226e:	001a      	movs	r2, r3
 8012270:	1dfb      	adds	r3, r7, #7
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	429a      	cmp	r2, r3
 8012276:	d113      	bne.n	80122a0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801227c:	2220      	movs	r2, #32
 801227e:	431a      	orrs	r2, r3
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2241      	movs	r2, #65	@ 0x41
 8012288:	2120      	movs	r1, #32
 801228a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2242      	movs	r2, #66	@ 0x42
 8012290:	2100      	movs	r1, #0
 8012292:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	2240      	movs	r2, #64	@ 0x40
 8012298:	2100      	movs	r1, #0
 801229a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 801229c:	2301      	movs	r3, #1
 801229e:	e00f      	b.n	80122c0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	699b      	ldr	r3, [r3, #24]
 80122a6:	68ba      	ldr	r2, [r7, #8]
 80122a8:	4013      	ands	r3, r2
 80122aa:	68ba      	ldr	r2, [r7, #8]
 80122ac:	1ad3      	subs	r3, r2, r3
 80122ae:	425a      	negs	r2, r3
 80122b0:	4153      	adcs	r3, r2
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	001a      	movs	r2, r3
 80122b6:	1dfb      	adds	r3, r7, #7
 80122b8:	781b      	ldrb	r3, [r3, #0]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d0bf      	beq.n	801223e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80122be:	2300      	movs	r3, #0
}
 80122c0:	0018      	movs	r0, r3
 80122c2:	46bd      	mov	sp, r7
 80122c4:	b004      	add	sp, #16
 80122c6:	bd80      	pop	{r7, pc}

080122c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b084      	sub	sp, #16
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	60f8      	str	r0, [r7, #12]
 80122d0:	60b9      	str	r1, [r7, #8]
 80122d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80122d4:	e032      	b.n	801233c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	68b9      	ldr	r1, [r7, #8]
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	0018      	movs	r0, r3
 80122de:	f000 f8ff 	bl	80124e0 <I2C_IsErrorOccurred>
 80122e2:	1e03      	subs	r3, r0, #0
 80122e4:	d001      	beq.n	80122ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80122e6:	2301      	movs	r3, #1
 80122e8:	e030      	b.n	801234c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	3301      	adds	r3, #1
 80122ee:	d025      	beq.n	801233c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80122f0:	f7fc fc76 	bl	800ebe0 <HAL_GetTick>
 80122f4:	0002      	movs	r2, r0
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	1ad3      	subs	r3, r2, r3
 80122fa:	68ba      	ldr	r2, [r7, #8]
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d302      	bcc.n	8012306 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d11a      	bne.n	801233c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	699b      	ldr	r3, [r3, #24]
 801230c:	2202      	movs	r2, #2
 801230e:	4013      	ands	r3, r2
 8012310:	2b02      	cmp	r3, #2
 8012312:	d013      	beq.n	801233c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012318:	2220      	movs	r2, #32
 801231a:	431a      	orrs	r2, r3
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	2241      	movs	r2, #65	@ 0x41
 8012324:	2120      	movs	r1, #32
 8012326:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	2242      	movs	r2, #66	@ 0x42
 801232c:	2100      	movs	r1, #0
 801232e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2240      	movs	r2, #64	@ 0x40
 8012334:	2100      	movs	r1, #0
 8012336:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8012338:	2301      	movs	r3, #1
 801233a:	e007      	b.n	801234c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	699b      	ldr	r3, [r3, #24]
 8012342:	2202      	movs	r2, #2
 8012344:	4013      	ands	r3, r2
 8012346:	2b02      	cmp	r3, #2
 8012348:	d1c5      	bne.n	80122d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801234a:	2300      	movs	r3, #0
}
 801234c:	0018      	movs	r0, r3
 801234e:	46bd      	mov	sp, r7
 8012350:	b004      	add	sp, #16
 8012352:	bd80      	pop	{r7, pc}

08012354 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	60f8      	str	r0, [r7, #12]
 801235c:	60b9      	str	r1, [r7, #8]
 801235e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012360:	e02f      	b.n	80123c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012362:	687a      	ldr	r2, [r7, #4]
 8012364:	68b9      	ldr	r1, [r7, #8]
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	0018      	movs	r0, r3
 801236a:	f000 f8b9 	bl	80124e0 <I2C_IsErrorOccurred>
 801236e:	1e03      	subs	r3, r0, #0
 8012370:	d001      	beq.n	8012376 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012372:	2301      	movs	r3, #1
 8012374:	e02d      	b.n	80123d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012376:	f7fc fc33 	bl	800ebe0 <HAL_GetTick>
 801237a:	0002      	movs	r2, r0
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	1ad3      	subs	r3, r2, r3
 8012380:	68ba      	ldr	r2, [r7, #8]
 8012382:	429a      	cmp	r2, r3
 8012384:	d302      	bcc.n	801238c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d11a      	bne.n	80123c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	699b      	ldr	r3, [r3, #24]
 8012392:	2220      	movs	r2, #32
 8012394:	4013      	ands	r3, r2
 8012396:	2b20      	cmp	r3, #32
 8012398:	d013      	beq.n	80123c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801239e:	2220      	movs	r2, #32
 80123a0:	431a      	orrs	r2, r3
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	2241      	movs	r2, #65	@ 0x41
 80123aa:	2120      	movs	r1, #32
 80123ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	2242      	movs	r2, #66	@ 0x42
 80123b2:	2100      	movs	r1, #0
 80123b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	2240      	movs	r2, #64	@ 0x40
 80123ba:	2100      	movs	r1, #0
 80123bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80123be:	2301      	movs	r3, #1
 80123c0:	e007      	b.n	80123d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	699b      	ldr	r3, [r3, #24]
 80123c8:	2220      	movs	r2, #32
 80123ca:	4013      	ands	r3, r2
 80123cc:	2b20      	cmp	r3, #32
 80123ce:	d1c8      	bne.n	8012362 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80123d0:	2300      	movs	r3, #0
}
 80123d2:	0018      	movs	r0, r3
 80123d4:	46bd      	mov	sp, r7
 80123d6:	b004      	add	sp, #16
 80123d8:	bd80      	pop	{r7, pc}
	...

080123dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80123e8:	e06b      	b.n	80124c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80123ea:	687a      	ldr	r2, [r7, #4]
 80123ec:	68b9      	ldr	r1, [r7, #8]
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	0018      	movs	r0, r3
 80123f2:	f000 f875 	bl	80124e0 <I2C_IsErrorOccurred>
 80123f6:	1e03      	subs	r3, r0, #0
 80123f8:	d001      	beq.n	80123fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80123fa:	2301      	movs	r3, #1
 80123fc:	e069      	b.n	80124d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	699b      	ldr	r3, [r3, #24]
 8012404:	2220      	movs	r2, #32
 8012406:	4013      	ands	r3, r2
 8012408:	2b20      	cmp	r3, #32
 801240a:	d138      	bne.n	801247e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	699b      	ldr	r3, [r3, #24]
 8012412:	2204      	movs	r2, #4
 8012414:	4013      	ands	r3, r2
 8012416:	2b04      	cmp	r3, #4
 8012418:	d105      	bne.n	8012426 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801241e:	2b00      	cmp	r3, #0
 8012420:	d001      	beq.n	8012426 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8012422:	2300      	movs	r3, #0
 8012424:	e055      	b.n	80124d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	699b      	ldr	r3, [r3, #24]
 801242c:	2210      	movs	r2, #16
 801242e:	4013      	ands	r3, r2
 8012430:	2b10      	cmp	r3, #16
 8012432:	d107      	bne.n	8012444 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	2210      	movs	r2, #16
 801243a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	2204      	movs	r2, #4
 8012440:	645a      	str	r2, [r3, #68]	@ 0x44
 8012442:	e002      	b.n	801244a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	2200      	movs	r2, #0
 8012448:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2220      	movs	r2, #32
 8012450:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	685a      	ldr	r2, [r3, #4]
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	491f      	ldr	r1, [pc, #124]	@ (80124dc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801245e:	400a      	ands	r2, r1
 8012460:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	2241      	movs	r2, #65	@ 0x41
 8012466:	2120      	movs	r1, #32
 8012468:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2242      	movs	r2, #66	@ 0x42
 801246e:	2100      	movs	r1, #0
 8012470:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2240      	movs	r2, #64	@ 0x40
 8012476:	2100      	movs	r1, #0
 8012478:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801247a:	2301      	movs	r3, #1
 801247c:	e029      	b.n	80124d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801247e:	f7fc fbaf 	bl	800ebe0 <HAL_GetTick>
 8012482:	0002      	movs	r2, r0
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	1ad3      	subs	r3, r2, r3
 8012488:	68ba      	ldr	r2, [r7, #8]
 801248a:	429a      	cmp	r2, r3
 801248c:	d302      	bcc.n	8012494 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d116      	bne.n	80124c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	699b      	ldr	r3, [r3, #24]
 801249a:	2204      	movs	r2, #4
 801249c:	4013      	ands	r3, r2
 801249e:	2b04      	cmp	r3, #4
 80124a0:	d00f      	beq.n	80124c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80124a6:	2220      	movs	r2, #32
 80124a8:	431a      	orrs	r2, r3
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	2241      	movs	r2, #65	@ 0x41
 80124b2:	2120      	movs	r1, #32
 80124b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	2240      	movs	r2, #64	@ 0x40
 80124ba:	2100      	movs	r1, #0
 80124bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80124be:	2301      	movs	r3, #1
 80124c0:	e007      	b.n	80124d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	699b      	ldr	r3, [r3, #24]
 80124c8:	2204      	movs	r2, #4
 80124ca:	4013      	ands	r3, r2
 80124cc:	2b04      	cmp	r3, #4
 80124ce:	d18c      	bne.n	80123ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80124d0:	2300      	movs	r3, #0
}
 80124d2:	0018      	movs	r0, r3
 80124d4:	46bd      	mov	sp, r7
 80124d6:	b004      	add	sp, #16
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	46c0      	nop			@ (mov r8, r8)
 80124dc:	fe00e800 	.word	0xfe00e800

080124e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b08a      	sub	sp, #40	@ 0x28
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80124ec:	2327      	movs	r3, #39	@ 0x27
 80124ee:	18fb      	adds	r3, r7, r3
 80124f0:	2200      	movs	r2, #0
 80124f2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	699b      	ldr	r3, [r3, #24]
 80124fa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80124fc:	2300      	movs	r3, #0
 80124fe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012504:	69bb      	ldr	r3, [r7, #24]
 8012506:	2210      	movs	r2, #16
 8012508:	4013      	ands	r3, r2
 801250a:	d100      	bne.n	801250e <I2C_IsErrorOccurred+0x2e>
 801250c:	e079      	b.n	8012602 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	2210      	movs	r2, #16
 8012514:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012516:	e057      	b.n	80125c8 <I2C_IsErrorOccurred+0xe8>
 8012518:	2227      	movs	r2, #39	@ 0x27
 801251a:	18bb      	adds	r3, r7, r2
 801251c:	18ba      	adds	r2, r7, r2
 801251e:	7812      	ldrb	r2, [r2, #0]
 8012520:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	3301      	adds	r3, #1
 8012526:	d04f      	beq.n	80125c8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8012528:	f7fc fb5a 	bl	800ebe0 <HAL_GetTick>
 801252c:	0002      	movs	r2, r0
 801252e:	69fb      	ldr	r3, [r7, #28]
 8012530:	1ad3      	subs	r3, r2, r3
 8012532:	68ba      	ldr	r2, [r7, #8]
 8012534:	429a      	cmp	r2, r3
 8012536:	d302      	bcc.n	801253e <I2C_IsErrorOccurred+0x5e>
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d144      	bne.n	80125c8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	685a      	ldr	r2, [r3, #4]
 8012544:	2380      	movs	r3, #128	@ 0x80
 8012546:	01db      	lsls	r3, r3, #7
 8012548:	4013      	ands	r3, r2
 801254a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801254c:	2013      	movs	r0, #19
 801254e:	183b      	adds	r3, r7, r0
 8012550:	68fa      	ldr	r2, [r7, #12]
 8012552:	2142      	movs	r1, #66	@ 0x42
 8012554:	5c52      	ldrb	r2, [r2, r1]
 8012556:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	699a      	ldr	r2, [r3, #24]
 801255e:	2380      	movs	r3, #128	@ 0x80
 8012560:	021b      	lsls	r3, r3, #8
 8012562:	401a      	ands	r2, r3
 8012564:	2380      	movs	r3, #128	@ 0x80
 8012566:	021b      	lsls	r3, r3, #8
 8012568:	429a      	cmp	r2, r3
 801256a:	d126      	bne.n	80125ba <I2C_IsErrorOccurred+0xda>
 801256c:	697a      	ldr	r2, [r7, #20]
 801256e:	2380      	movs	r3, #128	@ 0x80
 8012570:	01db      	lsls	r3, r3, #7
 8012572:	429a      	cmp	r2, r3
 8012574:	d021      	beq.n	80125ba <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8012576:	183b      	adds	r3, r7, r0
 8012578:	781b      	ldrb	r3, [r3, #0]
 801257a:	2b20      	cmp	r3, #32
 801257c:	d01d      	beq.n	80125ba <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	685a      	ldr	r2, [r3, #4]
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	2180      	movs	r1, #128	@ 0x80
 801258a:	01c9      	lsls	r1, r1, #7
 801258c:	430a      	orrs	r2, r1
 801258e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012590:	f7fc fb26 	bl	800ebe0 <HAL_GetTick>
 8012594:	0003      	movs	r3, r0
 8012596:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012598:	e00f      	b.n	80125ba <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801259a:	f7fc fb21 	bl	800ebe0 <HAL_GetTick>
 801259e:	0002      	movs	r2, r0
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	1ad3      	subs	r3, r2, r3
 80125a4:	2b19      	cmp	r3, #25
 80125a6:	d908      	bls.n	80125ba <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80125a8:	6a3b      	ldr	r3, [r7, #32]
 80125aa:	2220      	movs	r2, #32
 80125ac:	4313      	orrs	r3, r2
 80125ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80125b0:	2327      	movs	r3, #39	@ 0x27
 80125b2:	18fb      	adds	r3, r7, r3
 80125b4:	2201      	movs	r2, #1
 80125b6:	701a      	strb	r2, [r3, #0]

              break;
 80125b8:	e006      	b.n	80125c8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	699b      	ldr	r3, [r3, #24]
 80125c0:	2220      	movs	r2, #32
 80125c2:	4013      	ands	r3, r2
 80125c4:	2b20      	cmp	r3, #32
 80125c6:	d1e8      	bne.n	801259a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	699b      	ldr	r3, [r3, #24]
 80125ce:	2220      	movs	r2, #32
 80125d0:	4013      	ands	r3, r2
 80125d2:	2b20      	cmp	r3, #32
 80125d4:	d004      	beq.n	80125e0 <I2C_IsErrorOccurred+0x100>
 80125d6:	2327      	movs	r3, #39	@ 0x27
 80125d8:	18fb      	adds	r3, r7, r3
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d09b      	beq.n	8012518 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80125e0:	2327      	movs	r3, #39	@ 0x27
 80125e2:	18fb      	adds	r3, r7, r3
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d103      	bne.n	80125f2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	2220      	movs	r2, #32
 80125f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80125f2:	6a3b      	ldr	r3, [r7, #32]
 80125f4:	2204      	movs	r2, #4
 80125f6:	4313      	orrs	r3, r2
 80125f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80125fa:	2327      	movs	r3, #39	@ 0x27
 80125fc:	18fb      	adds	r3, r7, r3
 80125fe:	2201      	movs	r2, #1
 8012600:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	699b      	ldr	r3, [r3, #24]
 8012608:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801260a:	69ba      	ldr	r2, [r7, #24]
 801260c:	2380      	movs	r3, #128	@ 0x80
 801260e:	005b      	lsls	r3, r3, #1
 8012610:	4013      	ands	r3, r2
 8012612:	d00c      	beq.n	801262e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012614:	6a3b      	ldr	r3, [r7, #32]
 8012616:	2201      	movs	r2, #1
 8012618:	4313      	orrs	r3, r2
 801261a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	2280      	movs	r2, #128	@ 0x80
 8012622:	0052      	lsls	r2, r2, #1
 8012624:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012626:	2327      	movs	r3, #39	@ 0x27
 8012628:	18fb      	adds	r3, r7, r3
 801262a:	2201      	movs	r2, #1
 801262c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801262e:	69ba      	ldr	r2, [r7, #24]
 8012630:	2380      	movs	r3, #128	@ 0x80
 8012632:	00db      	lsls	r3, r3, #3
 8012634:	4013      	ands	r3, r2
 8012636:	d00c      	beq.n	8012652 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012638:	6a3b      	ldr	r3, [r7, #32]
 801263a:	2208      	movs	r2, #8
 801263c:	4313      	orrs	r3, r2
 801263e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	2280      	movs	r2, #128	@ 0x80
 8012646:	00d2      	lsls	r2, r2, #3
 8012648:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801264a:	2327      	movs	r3, #39	@ 0x27
 801264c:	18fb      	adds	r3, r7, r3
 801264e:	2201      	movs	r2, #1
 8012650:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012652:	69ba      	ldr	r2, [r7, #24]
 8012654:	2380      	movs	r3, #128	@ 0x80
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	4013      	ands	r3, r2
 801265a:	d00c      	beq.n	8012676 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801265c:	6a3b      	ldr	r3, [r7, #32]
 801265e:	2202      	movs	r2, #2
 8012660:	4313      	orrs	r3, r2
 8012662:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	2280      	movs	r2, #128	@ 0x80
 801266a:	0092      	lsls	r2, r2, #2
 801266c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801266e:	2327      	movs	r3, #39	@ 0x27
 8012670:	18fb      	adds	r3, r7, r3
 8012672:	2201      	movs	r2, #1
 8012674:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8012676:	2327      	movs	r3, #39	@ 0x27
 8012678:	18fb      	adds	r3, r7, r3
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d01d      	beq.n	80126bc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	0018      	movs	r0, r3
 8012684:	f7ff fcd7 	bl	8012036 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	685a      	ldr	r2, [r3, #4]
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	490e      	ldr	r1, [pc, #56]	@ (80126cc <I2C_IsErrorOccurred+0x1ec>)
 8012694:	400a      	ands	r2, r1
 8012696:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801269c:	6a3b      	ldr	r3, [r7, #32]
 801269e:	431a      	orrs	r2, r3
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2241      	movs	r2, #65	@ 0x41
 80126a8:	2120      	movs	r1, #32
 80126aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2242      	movs	r2, #66	@ 0x42
 80126b0:	2100      	movs	r1, #0
 80126b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	2240      	movs	r2, #64	@ 0x40
 80126b8:	2100      	movs	r1, #0
 80126ba:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80126bc:	2327      	movs	r3, #39	@ 0x27
 80126be:	18fb      	adds	r3, r7, r3
 80126c0:	781b      	ldrb	r3, [r3, #0]
}
 80126c2:	0018      	movs	r0, r3
 80126c4:	46bd      	mov	sp, r7
 80126c6:	b00a      	add	sp, #40	@ 0x28
 80126c8:	bd80      	pop	{r7, pc}
 80126ca:	46c0      	nop			@ (mov r8, r8)
 80126cc:	fe00e800 	.word	0xfe00e800

080126d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80126d0:	b590      	push	{r4, r7, lr}
 80126d2:	b087      	sub	sp, #28
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	0008      	movs	r0, r1
 80126da:	0011      	movs	r1, r2
 80126dc:	607b      	str	r3, [r7, #4]
 80126de:	240a      	movs	r4, #10
 80126e0:	193b      	adds	r3, r7, r4
 80126e2:	1c02      	adds	r2, r0, #0
 80126e4:	801a      	strh	r2, [r3, #0]
 80126e6:	2009      	movs	r0, #9
 80126e8:	183b      	adds	r3, r7, r0
 80126ea:	1c0a      	adds	r2, r1, #0
 80126ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80126ee:	193b      	adds	r3, r7, r4
 80126f0:	881b      	ldrh	r3, [r3, #0]
 80126f2:	059b      	lsls	r3, r3, #22
 80126f4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80126f6:	183b      	adds	r3, r7, r0
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	0419      	lsls	r1, r3, #16
 80126fc:	23ff      	movs	r3, #255	@ 0xff
 80126fe:	041b      	lsls	r3, r3, #16
 8012700:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012702:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801270a:	4313      	orrs	r3, r2
 801270c:	005b      	lsls	r3, r3, #1
 801270e:	085b      	lsrs	r3, r3, #1
 8012710:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801271a:	0d51      	lsrs	r1, r2, #21
 801271c:	2280      	movs	r2, #128	@ 0x80
 801271e:	00d2      	lsls	r2, r2, #3
 8012720:	400a      	ands	r2, r1
 8012722:	4907      	ldr	r1, [pc, #28]	@ (8012740 <I2C_TransferConfig+0x70>)
 8012724:	430a      	orrs	r2, r1
 8012726:	43d2      	mvns	r2, r2
 8012728:	401a      	ands	r2, r3
 801272a:	0011      	movs	r1, r2
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	697a      	ldr	r2, [r7, #20]
 8012732:	430a      	orrs	r2, r1
 8012734:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8012736:	46c0      	nop			@ (mov r8, r8)
 8012738:	46bd      	mov	sp, r7
 801273a:	b007      	add	sp, #28
 801273c:	bd90      	pop	{r4, r7, pc}
 801273e:	46c0      	nop			@ (mov r8, r8)
 8012740:	03ff63ff 	.word	0x03ff63ff

08012744 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b084      	sub	sp, #16
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	000a      	movs	r2, r1
 801274e:	1cbb      	adds	r3, r7, #2
 8012750:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012752:	2300      	movs	r3, #0
 8012754:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801275a:	4b3e      	ldr	r3, [pc, #248]	@ (8012854 <I2C_Enable_IRQ+0x110>)
 801275c:	429a      	cmp	r2, r3
 801275e:	d035      	beq.n	80127cc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012764:	4b3c      	ldr	r3, [pc, #240]	@ (8012858 <I2C_Enable_IRQ+0x114>)
 8012766:	429a      	cmp	r2, r3
 8012768:	d030      	beq.n	80127cc <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 801276e:	4b3b      	ldr	r3, [pc, #236]	@ (801285c <I2C_Enable_IRQ+0x118>)
 8012770:	429a      	cmp	r2, r3
 8012772:	d02b      	beq.n	80127cc <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012774:	1cbb      	adds	r3, r7, #2
 8012776:	2200      	movs	r2, #0
 8012778:	5e9b      	ldrsh	r3, [r3, r2]
 801277a:	2b00      	cmp	r3, #0
 801277c:	da03      	bge.n	8012786 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	22b8      	movs	r2, #184	@ 0xb8
 8012782:	4313      	orrs	r3, r2
 8012784:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012786:	1cbb      	adds	r3, r7, #2
 8012788:	881b      	ldrh	r3, [r3, #0]
 801278a:	2201      	movs	r2, #1
 801278c:	4013      	ands	r3, r2
 801278e:	d003      	beq.n	8012798 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	22f2      	movs	r2, #242	@ 0xf2
 8012794:	4313      	orrs	r3, r2
 8012796:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012798:	1cbb      	adds	r3, r7, #2
 801279a:	881b      	ldrh	r3, [r3, #0]
 801279c:	2202      	movs	r2, #2
 801279e:	4013      	ands	r3, r2
 80127a0:	d003      	beq.n	80127aa <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	22f4      	movs	r2, #244	@ 0xf4
 80127a6:	4313      	orrs	r3, r2
 80127a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80127aa:	1cbb      	adds	r3, r7, #2
 80127ac:	881b      	ldrh	r3, [r3, #0]
 80127ae:	2b10      	cmp	r3, #16
 80127b0:	d103      	bne.n	80127ba <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	2290      	movs	r2, #144	@ 0x90
 80127b6:	4313      	orrs	r3, r2
 80127b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80127ba:	1cbb      	adds	r3, r7, #2
 80127bc:	881b      	ldrh	r3, [r3, #0]
 80127be:	2b20      	cmp	r3, #32
 80127c0:	d13c      	bne.n	801283c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	2220      	movs	r2, #32
 80127c6:	4313      	orrs	r3, r2
 80127c8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80127ca:	e037      	b.n	801283c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80127cc:	1cbb      	adds	r3, r7, #2
 80127ce:	2200      	movs	r2, #0
 80127d0:	5e9b      	ldrsh	r3, [r3, r2]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	da03      	bge.n	80127de <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	22b8      	movs	r2, #184	@ 0xb8
 80127da:	4313      	orrs	r3, r2
 80127dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80127de:	1cbb      	adds	r3, r7, #2
 80127e0:	881b      	ldrh	r3, [r3, #0]
 80127e2:	2201      	movs	r2, #1
 80127e4:	4013      	ands	r3, r2
 80127e6:	d003      	beq.n	80127f0 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	22f2      	movs	r2, #242	@ 0xf2
 80127ec:	4313      	orrs	r3, r2
 80127ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80127f0:	1cbb      	adds	r3, r7, #2
 80127f2:	881b      	ldrh	r3, [r3, #0]
 80127f4:	2202      	movs	r2, #2
 80127f6:	4013      	ands	r3, r2
 80127f8:	d003      	beq.n	8012802 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	22f4      	movs	r2, #244	@ 0xf4
 80127fe:	4313      	orrs	r3, r2
 8012800:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012802:	1cbb      	adds	r3, r7, #2
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	2b10      	cmp	r3, #16
 8012808:	d103      	bne.n	8012812 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	2290      	movs	r2, #144	@ 0x90
 801280e:	4313      	orrs	r3, r2
 8012810:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012812:	1cbb      	adds	r3, r7, #2
 8012814:	881b      	ldrh	r3, [r3, #0]
 8012816:	2b20      	cmp	r3, #32
 8012818:	d103      	bne.n	8012822 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	2260      	movs	r2, #96	@ 0x60
 801281e:	4313      	orrs	r3, r2
 8012820:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012826:	4b0d      	ldr	r3, [pc, #52]	@ (801285c <I2C_Enable_IRQ+0x118>)
 8012828:	429a      	cmp	r2, r3
 801282a:	d007      	beq.n	801283c <I2C_Enable_IRQ+0xf8>
 801282c:	1cbb      	adds	r3, r7, #2
 801282e:	881b      	ldrh	r3, [r3, #0]
 8012830:	2b40      	cmp	r3, #64	@ 0x40
 8012832:	d103      	bne.n	801283c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	2240      	movs	r2, #64	@ 0x40
 8012838:	4313      	orrs	r3, r2
 801283a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	6819      	ldr	r1, [r3, #0]
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	68fa      	ldr	r2, [r7, #12]
 8012848:	430a      	orrs	r2, r1
 801284a:	601a      	str	r2, [r3, #0]
}
 801284c:	46c0      	nop			@ (mov r8, r8)
 801284e:	46bd      	mov	sp, r7
 8012850:	b004      	add	sp, #16
 8012852:	bd80      	pop	{r7, pc}
 8012854:	080110c5 	.word	0x080110c5
 8012858:	080114f5 	.word	0x080114f5
 801285c:	080112bd 	.word	0x080112bd

08012860 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b084      	sub	sp, #16
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
 8012868:	000a      	movs	r2, r1
 801286a:	1cbb      	adds	r3, r7, #2
 801286c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 801286e:	2300      	movs	r3, #0
 8012870:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012872:	1cbb      	adds	r3, r7, #2
 8012874:	881b      	ldrh	r3, [r3, #0]
 8012876:	2201      	movs	r2, #1
 8012878:	4013      	ands	r3, r2
 801287a:	d010      	beq.n	801289e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	2242      	movs	r2, #66	@ 0x42
 8012880:	4313      	orrs	r3, r2
 8012882:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2241      	movs	r2, #65	@ 0x41
 8012888:	5c9b      	ldrb	r3, [r3, r2]
 801288a:	b2db      	uxtb	r3, r3
 801288c:	001a      	movs	r2, r3
 801288e:	2328      	movs	r3, #40	@ 0x28
 8012890:	4013      	ands	r3, r2
 8012892:	2b28      	cmp	r3, #40	@ 0x28
 8012894:	d003      	beq.n	801289e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	22b0      	movs	r2, #176	@ 0xb0
 801289a:	4313      	orrs	r3, r2
 801289c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801289e:	1cbb      	adds	r3, r7, #2
 80128a0:	881b      	ldrh	r3, [r3, #0]
 80128a2:	2202      	movs	r2, #2
 80128a4:	4013      	ands	r3, r2
 80128a6:	d010      	beq.n	80128ca <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	2244      	movs	r2, #68	@ 0x44
 80128ac:	4313      	orrs	r3, r2
 80128ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2241      	movs	r2, #65	@ 0x41
 80128b4:	5c9b      	ldrb	r3, [r3, r2]
 80128b6:	b2db      	uxtb	r3, r3
 80128b8:	001a      	movs	r2, r3
 80128ba:	2328      	movs	r3, #40	@ 0x28
 80128bc:	4013      	ands	r3, r2
 80128be:	2b28      	cmp	r3, #40	@ 0x28
 80128c0:	d003      	beq.n	80128ca <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	22b0      	movs	r2, #176	@ 0xb0
 80128c6:	4313      	orrs	r3, r2
 80128c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80128ca:	1cbb      	adds	r3, r7, #2
 80128cc:	2200      	movs	r2, #0
 80128ce:	5e9b      	ldrsh	r3, [r3, r2]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	da03      	bge.n	80128dc <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	22b8      	movs	r2, #184	@ 0xb8
 80128d8:	4313      	orrs	r3, r2
 80128da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80128dc:	1cbb      	adds	r3, r7, #2
 80128de:	881b      	ldrh	r3, [r3, #0]
 80128e0:	2b10      	cmp	r3, #16
 80128e2:	d103      	bne.n	80128ec <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	2290      	movs	r2, #144	@ 0x90
 80128e8:	4313      	orrs	r3, r2
 80128ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80128ec:	1cbb      	adds	r3, r7, #2
 80128ee:	881b      	ldrh	r3, [r3, #0]
 80128f0:	2b20      	cmp	r3, #32
 80128f2:	d103      	bne.n	80128fc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2220      	movs	r2, #32
 80128f8:	4313      	orrs	r3, r2
 80128fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80128fc:	1cbb      	adds	r3, r7, #2
 80128fe:	881b      	ldrh	r3, [r3, #0]
 8012900:	2b40      	cmp	r3, #64	@ 0x40
 8012902:	d103      	bne.n	801290c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	2240      	movs	r2, #64	@ 0x40
 8012908:	4313      	orrs	r3, r2
 801290a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	43d9      	mvns	r1, r3
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	400a      	ands	r2, r1
 801291c:	601a      	str	r2, [r3, #0]
}
 801291e:	46c0      	nop			@ (mov r8, r8)
 8012920:	46bd      	mov	sp, r7
 8012922:	b004      	add	sp, #16
 8012924:	bd80      	pop	{r7, pc}
	...

08012928 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b082      	sub	sp, #8
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2241      	movs	r2, #65	@ 0x41
 8012936:	5c9b      	ldrb	r3, [r3, r2]
 8012938:	b2db      	uxtb	r3, r3
 801293a:	2b20      	cmp	r3, #32
 801293c:	d138      	bne.n	80129b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	2240      	movs	r2, #64	@ 0x40
 8012942:	5c9b      	ldrb	r3, [r3, r2]
 8012944:	2b01      	cmp	r3, #1
 8012946:	d101      	bne.n	801294c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012948:	2302      	movs	r3, #2
 801294a:	e032      	b.n	80129b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2240      	movs	r2, #64	@ 0x40
 8012950:	2101      	movs	r1, #1
 8012952:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2241      	movs	r2, #65	@ 0x41
 8012958:	2124      	movs	r1, #36	@ 0x24
 801295a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2101      	movs	r1, #1
 8012968:	438a      	bics	r2, r1
 801296a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	4911      	ldr	r1, [pc, #68]	@ (80129bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012978:	400a      	ands	r2, r1
 801297a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	6819      	ldr	r1, [r3, #0]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	683a      	ldr	r2, [r7, #0]
 8012988:	430a      	orrs	r2, r1
 801298a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	681a      	ldr	r2, [r3, #0]
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	2101      	movs	r1, #1
 8012998:	430a      	orrs	r2, r1
 801299a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2241      	movs	r2, #65	@ 0x41
 80129a0:	2120      	movs	r1, #32
 80129a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2240      	movs	r2, #64	@ 0x40
 80129a8:	2100      	movs	r1, #0
 80129aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80129ac:	2300      	movs	r3, #0
 80129ae:	e000      	b.n	80129b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80129b0:	2302      	movs	r3, #2
  }
}
 80129b2:	0018      	movs	r0, r3
 80129b4:	46bd      	mov	sp, r7
 80129b6:	b002      	add	sp, #8
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	46c0      	nop			@ (mov r8, r8)
 80129bc:	ffffefff 	.word	0xffffefff

080129c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b084      	sub	sp, #16
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2241      	movs	r2, #65	@ 0x41
 80129ce:	5c9b      	ldrb	r3, [r3, r2]
 80129d0:	b2db      	uxtb	r3, r3
 80129d2:	2b20      	cmp	r3, #32
 80129d4:	d139      	bne.n	8012a4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2240      	movs	r2, #64	@ 0x40
 80129da:	5c9b      	ldrb	r3, [r3, r2]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d101      	bne.n	80129e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80129e0:	2302      	movs	r3, #2
 80129e2:	e033      	b.n	8012a4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2240      	movs	r2, #64	@ 0x40
 80129e8:	2101      	movs	r1, #1
 80129ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2241      	movs	r2, #65	@ 0x41
 80129f0:	2124      	movs	r1, #36	@ 0x24
 80129f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	681a      	ldr	r2, [r3, #0]
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	2101      	movs	r1, #1
 8012a00:	438a      	bics	r2, r1
 8012a02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	4a11      	ldr	r2, [pc, #68]	@ (8012a54 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012a10:	4013      	ands	r3, r2
 8012a12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	021b      	lsls	r3, r3, #8
 8012a18:	68fa      	ldr	r2, [r7, #12]
 8012a1a:	4313      	orrs	r3, r2
 8012a1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	68fa      	ldr	r2, [r7, #12]
 8012a24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	681a      	ldr	r2, [r3, #0]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2101      	movs	r1, #1
 8012a32:	430a      	orrs	r2, r1
 8012a34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2241      	movs	r2, #65	@ 0x41
 8012a3a:	2120      	movs	r1, #32
 8012a3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2240      	movs	r2, #64	@ 0x40
 8012a42:	2100      	movs	r1, #0
 8012a44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	e000      	b.n	8012a4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012a4a:	2302      	movs	r3, #2
  }
}
 8012a4c:	0018      	movs	r0, r3
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	b004      	add	sp, #16
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	fffff0ff 	.word	0xfffff0ff

08012a58 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b088      	sub	sp, #32
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d101      	bne.n	8012a6a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012a66:	2301      	movs	r3, #1
 8012a68:	e0e1      	b.n	8012c2e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2235      	movs	r2, #53	@ 0x35
 8012a6e:	5c9b      	ldrb	r3, [r3, r2]
 8012a70:	b2db      	uxtb	r3, r3
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d107      	bne.n	8012a86 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2234      	movs	r2, #52	@ 0x34
 8012a7a:	2100      	movs	r1, #0
 8012a7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	0018      	movs	r0, r3
 8012a82:	f7f4 ffd3 	bl	8007a2c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2235      	movs	r2, #53	@ 0x35
 8012a8a:	2102      	movs	r1, #2
 8012a8c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	69da      	ldr	r2, [r3, #28]
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	4967      	ldr	r1, [pc, #412]	@ (8012c38 <HAL_I2S_Init+0x1e0>)
 8012a9a:	400a      	ands	r2, r1
 8012a9c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2202      	movs	r2, #2
 8012aa4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	695b      	ldr	r3, [r3, #20]
 8012aaa:	2b02      	cmp	r3, #2
 8012aac:	d073      	beq.n	8012b96 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	68db      	ldr	r3, [r3, #12]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d102      	bne.n	8012abc <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012ab6:	2310      	movs	r3, #16
 8012ab8:	617b      	str	r3, [r7, #20]
 8012aba:	e001      	b.n	8012ac0 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8012abc:	2320      	movs	r3, #32
 8012abe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	689b      	ldr	r3, [r3, #8]
 8012ac4:	2b20      	cmp	r3, #32
 8012ac6:	d802      	bhi.n	8012ace <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	005b      	lsls	r3, r3, #1
 8012acc:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8012ace:	f002 fed3 	bl	8015878 <HAL_RCC_GetSysClockFreq>
 8012ad2:	0003      	movs	r3, r0
 8012ad4:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	691a      	ldr	r2, [r3, #16]
 8012ada:	2380      	movs	r3, #128	@ 0x80
 8012adc:	009b      	lsls	r3, r3, #2
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d131      	bne.n	8012b46 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	68db      	ldr	r3, [r3, #12]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d016      	beq.n	8012b18 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	009b      	lsls	r3, r3, #2
 8012aee:	0019      	movs	r1, r3
 8012af0:	68f8      	ldr	r0, [r7, #12]
 8012af2:	f7ed fb57 	bl	80001a4 <__udivsi3>
 8012af6:	0003      	movs	r3, r0
 8012af8:	001a      	movs	r2, r3
 8012afa:	0013      	movs	r3, r2
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	189b      	adds	r3, r3, r2
 8012b00:	005b      	lsls	r3, r3, #1
 8012b02:	001a      	movs	r2, r3
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	695b      	ldr	r3, [r3, #20]
 8012b08:	0019      	movs	r1, r3
 8012b0a:	0010      	movs	r0, r2
 8012b0c:	f7ed fb4a 	bl	80001a4 <__udivsi3>
 8012b10:	0003      	movs	r3, r0
 8012b12:	3305      	adds	r3, #5
 8012b14:	613b      	str	r3, [r7, #16]
 8012b16:	e02a      	b.n	8012b6e <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	00db      	lsls	r3, r3, #3
 8012b1c:	0019      	movs	r1, r3
 8012b1e:	68f8      	ldr	r0, [r7, #12]
 8012b20:	f7ed fb40 	bl	80001a4 <__udivsi3>
 8012b24:	0003      	movs	r3, r0
 8012b26:	001a      	movs	r2, r3
 8012b28:	0013      	movs	r3, r2
 8012b2a:	009b      	lsls	r3, r3, #2
 8012b2c:	189b      	adds	r3, r3, r2
 8012b2e:	005b      	lsls	r3, r3, #1
 8012b30:	001a      	movs	r2, r3
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	695b      	ldr	r3, [r3, #20]
 8012b36:	0019      	movs	r1, r3
 8012b38:	0010      	movs	r0, r2
 8012b3a:	f7ed fb33 	bl	80001a4 <__udivsi3>
 8012b3e:	0003      	movs	r3, r0
 8012b40:	3305      	adds	r3, #5
 8012b42:	613b      	str	r3, [r7, #16]
 8012b44:	e013      	b.n	8012b6e <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012b46:	6979      	ldr	r1, [r7, #20]
 8012b48:	68f8      	ldr	r0, [r7, #12]
 8012b4a:	f7ed fb2b 	bl	80001a4 <__udivsi3>
 8012b4e:	0003      	movs	r3, r0
 8012b50:	001a      	movs	r2, r3
 8012b52:	0013      	movs	r3, r2
 8012b54:	009b      	lsls	r3, r3, #2
 8012b56:	189b      	adds	r3, r3, r2
 8012b58:	005b      	lsls	r3, r3, #1
 8012b5a:	001a      	movs	r2, r3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	695b      	ldr	r3, [r3, #20]
 8012b60:	0019      	movs	r1, r3
 8012b62:	0010      	movs	r0, r2
 8012b64:	f7ed fb1e 	bl	80001a4 <__udivsi3>
 8012b68:	0003      	movs	r3, r0
 8012b6a:	3305      	adds	r3, #5
 8012b6c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	210a      	movs	r1, #10
 8012b72:	0018      	movs	r0, r3
 8012b74:	f7ed fb16 	bl	80001a4 <__udivsi3>
 8012b78:	0003      	movs	r3, r0
 8012b7a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	2201      	movs	r2, #1
 8012b80:	4013      	ands	r3, r2
 8012b82:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012b84:	693a      	ldr	r2, [r7, #16]
 8012b86:	69bb      	ldr	r3, [r7, #24]
 8012b88:	1ad3      	subs	r3, r2, r3
 8012b8a:	085b      	lsrs	r3, r3, #1
 8012b8c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012b8e:	69bb      	ldr	r3, [r7, #24]
 8012b90:	021b      	lsls	r3, r3, #8
 8012b92:	61bb      	str	r3, [r7, #24]
 8012b94:	e003      	b.n	8012b9e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012b96:	2302      	movs	r3, #2
 8012b98:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012b9e:	69fb      	ldr	r3, [r7, #28]
 8012ba0:	2b01      	cmp	r3, #1
 8012ba2:	d902      	bls.n	8012baa <HAL_I2S_Init+0x152>
 8012ba4:	69fb      	ldr	r3, [r7, #28]
 8012ba6:	2bff      	cmp	r3, #255	@ 0xff
 8012ba8:	d907      	bls.n	8012bba <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bae:	2210      	movs	r2, #16
 8012bb0:	431a      	orrs	r2, r3
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e039      	b.n	8012c2e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	691a      	ldr	r2, [r3, #16]
 8012bbe:	69bb      	ldr	r3, [r7, #24]
 8012bc0:	431a      	orrs	r2, r3
 8012bc2:	0011      	movs	r1, r2
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	69fa      	ldr	r2, [r7, #28]
 8012bca:	430a      	orrs	r2, r1
 8012bcc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	69db      	ldr	r3, [r3, #28]
 8012bd4:	4a18      	ldr	r2, [pc, #96]	@ (8012c38 <HAL_I2S_Init+0x1e0>)
 8012bd6:	401a      	ands	r2, r3
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6859      	ldr	r1, [r3, #4]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	689b      	ldr	r3, [r3, #8]
 8012be0:	4319      	orrs	r1, r3
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	68db      	ldr	r3, [r3, #12]
 8012be6:	4319      	orrs	r1, r3
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	699b      	ldr	r3, [r3, #24]
 8012bec:	430b      	orrs	r3, r1
 8012bee:	431a      	orrs	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	2180      	movs	r1, #128	@ 0x80
 8012bf6:	0109      	lsls	r1, r1, #4
 8012bf8:	430a      	orrs	r2, r1
 8012bfa:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	689b      	ldr	r3, [r3, #8]
 8012c00:	2b30      	cmp	r3, #48	@ 0x30
 8012c02:	d003      	beq.n	8012c0c <HAL_I2S_Init+0x1b4>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	689b      	ldr	r3, [r3, #8]
 8012c08:	2bb0      	cmp	r3, #176	@ 0xb0
 8012c0a:	d108      	bne.n	8012c1e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	69da      	ldr	r2, [r3, #28]
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2180      	movs	r1, #128	@ 0x80
 8012c18:	0149      	lsls	r1, r1, #5
 8012c1a:	430a      	orrs	r2, r1
 8012c1c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2200      	movs	r2, #0
 8012c22:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2235      	movs	r2, #53	@ 0x35
 8012c28:	2101      	movs	r1, #1
 8012c2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012c2c:	2300      	movs	r3, #0
}
 8012c2e:	0018      	movs	r0, r3
 8012c30:	46bd      	mov	sp, r7
 8012c32:	b008      	add	sp, #32
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	46c0      	nop			@ (mov r8, r8)
 8012c38:	fffff040 	.word	0xfffff040

08012c3c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b086      	sub	sp, #24
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	60f8      	str	r0, [r7, #12]
 8012c44:	60b9      	str	r1, [r7, #8]
 8012c46:	1dbb      	adds	r3, r7, #6
 8012c48:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d003      	beq.n	8012c58 <HAL_I2S_Receive_DMA+0x1c>
 8012c50:	1dbb      	adds	r3, r7, #6
 8012c52:	881b      	ldrh	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d101      	bne.n	8012c5c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012c58:	2301      	movs	r3, #1
 8012c5a:	e0a6      	b.n	8012daa <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2234      	movs	r2, #52	@ 0x34
 8012c60:	5c9b      	ldrb	r3, [r3, r2]
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d101      	bne.n	8012c6c <HAL_I2S_Receive_DMA+0x30>
 8012c68:	2302      	movs	r3, #2
 8012c6a:	e09e      	b.n	8012daa <HAL_I2S_Receive_DMA+0x16e>
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	2234      	movs	r2, #52	@ 0x34
 8012c70:	2101      	movs	r1, #1
 8012c72:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	2235      	movs	r2, #53	@ 0x35
 8012c78:	5c9b      	ldrb	r3, [r3, r2]
 8012c7a:	b2db      	uxtb	r3, r3
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	d005      	beq.n	8012c8c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	2234      	movs	r2, #52	@ 0x34
 8012c84:	2100      	movs	r1, #0
 8012c86:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012c88:	2302      	movs	r3, #2
 8012c8a:	e08e      	b.n	8012daa <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	2235      	movs	r2, #53	@ 0x35
 8012c90:	2104      	movs	r1, #4
 8012c92:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	2200      	movs	r2, #0
 8012c98:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	68ba      	ldr	r2, [r7, #8]
 8012c9e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	69db      	ldr	r3, [r3, #28]
 8012ca6:	2207      	movs	r2, #7
 8012ca8:	4013      	ands	r3, r2
 8012caa:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	2b03      	cmp	r3, #3
 8012cb0:	d002      	beq.n	8012cb8 <HAL_I2S_Receive_DMA+0x7c>
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	2b05      	cmp	r3, #5
 8012cb6:	d10c      	bne.n	8012cd2 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012cb8:	1dbb      	adds	r3, r7, #6
 8012cba:	881b      	ldrh	r3, [r3, #0]
 8012cbc:	18db      	adds	r3, r3, r3
 8012cbe:	b29a      	uxth	r2, r3
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012cc4:	1dbb      	adds	r3, r7, #6
 8012cc6:	881b      	ldrh	r3, [r3, #0]
 8012cc8:	18db      	adds	r3, r3, r3
 8012cca:	b29a      	uxth	r2, r3
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012cd0:	e007      	b.n	8012ce2 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	1dba      	adds	r2, r7, #6
 8012cd6:	8812      	ldrh	r2, [r2, #0]
 8012cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	1dba      	adds	r2, r7, #6
 8012cde:	8812      	ldrh	r2, [r2, #0]
 8012ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ce6:	4a33      	ldr	r2, [pc, #204]	@ (8012db4 <HAL_I2S_Receive_DMA+0x178>)
 8012ce8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cee:	4a32      	ldr	r2, [pc, #200]	@ (8012db8 <HAL_I2S_Receive_DMA+0x17c>)
 8012cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cf6:	4a31      	ldr	r2, [pc, #196]	@ (8012dbc <HAL_I2S_Receive_DMA+0x180>)
 8012cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	69da      	ldr	r2, [r3, #28]
 8012d00:	23c0      	movs	r3, #192	@ 0xc0
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	401a      	ands	r2, r3
 8012d06:	23c0      	movs	r3, #192	@ 0xc0
 8012d08:	009b      	lsls	r3, r3, #2
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d10a      	bne.n	8012d24 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012d0e:	2300      	movs	r3, #0
 8012d10:	613b      	str	r3, [r7, #16]
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	68db      	ldr	r3, [r3, #12]
 8012d18:	613b      	str	r3, [r7, #16]
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	689b      	ldr	r3, [r3, #8]
 8012d20:	613b      	str	r3, [r7, #16]
 8012d22:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	330c      	adds	r3, #12
 8012d2e:	0019      	movs	r1, r3
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d34:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012d3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012d3c:	f7fc fca2 	bl	800f684 <HAL_DMA_Start_IT>
 8012d40:	1e03      	subs	r3, r0, #0
 8012d42:	d00f      	beq.n	8012d64 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d48:	2208      	movs	r2, #8
 8012d4a:	431a      	orrs	r2, r3
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	2235      	movs	r2, #53	@ 0x35
 8012d54:	2101      	movs	r1, #1
 8012d56:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	2234      	movs	r2, #52	@ 0x34
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012d60:	2301      	movs	r3, #1
 8012d62:	e022      	b.n	8012daa <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	69da      	ldr	r2, [r3, #28]
 8012d6a:	2380      	movs	r3, #128	@ 0x80
 8012d6c:	00db      	lsls	r3, r3, #3
 8012d6e:	4013      	ands	r3, r2
 8012d70:	d108      	bne.n	8012d84 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	69da      	ldr	r2, [r3, #28]
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2180      	movs	r1, #128	@ 0x80
 8012d7e:	00c9      	lsls	r1, r1, #3
 8012d80:	430a      	orrs	r2, r1
 8012d82:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	4013      	ands	r3, r2
 8012d8e:	d107      	bne.n	8012da0 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	685a      	ldr	r2, [r3, #4]
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	2101      	movs	r1, #1
 8012d9c:	430a      	orrs	r2, r1
 8012d9e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	2234      	movs	r2, #52	@ 0x34
 8012da4:	2100      	movs	r1, #0
 8012da6:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8012da8:	2300      	movs	r3, #0
}
 8012daa:	0018      	movs	r0, r3
 8012dac:	46bd      	mov	sp, r7
 8012dae:	b006      	add	sp, #24
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	46c0      	nop			@ (mov r8, r8)
 8012db4:	08012f9d 	.word	0x08012f9d
 8012db8:	08012f59 	.word	0x08012f59
 8012dbc:	08012fbb 	.word	0x08012fbb

08012dc0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b086      	sub	sp, #24
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012dc8:	2317      	movs	r3, #23
 8012dca:	18fb      	adds	r3, r7, r3
 8012dcc:	2200      	movs	r2, #0
 8012dce:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	685a      	ldr	r2, [r3, #4]
 8012dd4:	2380      	movs	r3, #128	@ 0x80
 8012dd6:	009b      	lsls	r3, r3, #2
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d003      	beq.n	8012de4 <HAL_I2S_DMAStop+0x24>
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d158      	bne.n	8012e96 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d010      	beq.n	8012e0e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012df0:	0018      	movs	r0, r3
 8012df2:	f7fc fcad 	bl	800f750 <HAL_DMA_Abort>
 8012df6:	1e03      	subs	r3, r0, #0
 8012df8:	d009      	beq.n	8012e0e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012dfe:	2208      	movs	r2, #8
 8012e00:	431a      	orrs	r2, r3
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012e06:	2317      	movs	r3, #23
 8012e08:	18fb      	adds	r3, r7, r3
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	2364      	movs	r3, #100	@ 0x64
 8012e12:	2201      	movs	r2, #1
 8012e14:	2102      	movs	r1, #2
 8012e16:	f000 f8f7 	bl	8013008 <I2S_WaitFlagStateUntilTimeout>
 8012e1a:	1e03      	subs	r3, r0, #0
 8012e1c:	d00d      	beq.n	8012e3a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e22:	2201      	movs	r2, #1
 8012e24:	431a      	orrs	r2, r3
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2235      	movs	r2, #53	@ 0x35
 8012e2e:	2101      	movs	r1, #1
 8012e30:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012e32:	2317      	movs	r3, #23
 8012e34:	18fb      	adds	r3, r7, r3
 8012e36:	2201      	movs	r2, #1
 8012e38:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	2364      	movs	r3, #100	@ 0x64
 8012e3e:	2200      	movs	r2, #0
 8012e40:	2180      	movs	r1, #128	@ 0x80
 8012e42:	f000 f8e1 	bl	8013008 <I2S_WaitFlagStateUntilTimeout>
 8012e46:	1e03      	subs	r3, r0, #0
 8012e48:	d00d      	beq.n	8012e66 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e4e:	2201      	movs	r2, #1
 8012e50:	431a      	orrs	r2, r3
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2235      	movs	r2, #53	@ 0x35
 8012e5a:	2101      	movs	r1, #1
 8012e5c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012e5e:	2317      	movs	r3, #23
 8012e60:	18fb      	adds	r3, r7, r3
 8012e62:	2201      	movs	r2, #1
 8012e64:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	69da      	ldr	r2, [r3, #28]
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	4938      	ldr	r1, [pc, #224]	@ (8012f54 <HAL_I2S_DMAStop+0x194>)
 8012e72:	400a      	ands	r2, r1
 8012e74:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012e76:	2300      	movs	r3, #0
 8012e78:	613b      	str	r3, [r7, #16]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	613b      	str	r3, [r7, #16]
 8012e82:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	685a      	ldr	r2, [r3, #4]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	2102      	movs	r1, #2
 8012e90:	438a      	bics	r2, r1
 8012e92:	605a      	str	r2, [r3, #4]
 8012e94:	e053      	b.n	8012f3e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	685a      	ldr	r2, [r3, #4]
 8012e9a:	23c0      	movs	r3, #192	@ 0xc0
 8012e9c:	009b      	lsls	r3, r3, #2
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d005      	beq.n	8012eae <HAL_I2S_DMAStop+0xee>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	685a      	ldr	r2, [r3, #4]
 8012ea6:	2380      	movs	r3, #128	@ 0x80
 8012ea8:	005b      	lsls	r3, r3, #1
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d147      	bne.n	8012f3e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d010      	beq.n	8012ed8 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012eba:	0018      	movs	r0, r3
 8012ebc:	f7fc fc48 	bl	800f750 <HAL_DMA_Abort>
 8012ec0:	1e03      	subs	r3, r0, #0
 8012ec2:	d009      	beq.n	8012ed8 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ec8:	2208      	movs	r2, #8
 8012eca:	431a      	orrs	r2, r3
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012ed0:	2317      	movs	r3, #23
 8012ed2:	18fb      	adds	r3, r7, r3
 8012ed4:	2201      	movs	r2, #1
 8012ed6:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	69da      	ldr	r2, [r3, #28]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	491c      	ldr	r1, [pc, #112]	@ (8012f54 <HAL_I2S_DMAStop+0x194>)
 8012ee4:	400a      	ands	r2, r1
 8012ee6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012ee8:	2300      	movs	r3, #0
 8012eea:	60fb      	str	r3, [r7, #12]
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	68db      	ldr	r3, [r3, #12]
 8012ef2:	60fb      	str	r3, [r7, #12]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	689b      	ldr	r3, [r3, #8]
 8012efa:	60fb      	str	r3, [r7, #12]
 8012efc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	685a      	ldr	r2, [r3, #4]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	2101      	movs	r1, #1
 8012f0a:	438a      	bics	r2, r1
 8012f0c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	685a      	ldr	r2, [r3, #4]
 8012f12:	2380      	movs	r3, #128	@ 0x80
 8012f14:	005b      	lsls	r3, r3, #1
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d10e      	bne.n	8012f38 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f1e:	2240      	movs	r2, #64	@ 0x40
 8012f20:	431a      	orrs	r2, r3
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2235      	movs	r2, #53	@ 0x35
 8012f2a:	2101      	movs	r1, #1
 8012f2c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8012f2e:	2317      	movs	r3, #23
 8012f30:	18fb      	adds	r3, r7, r3
 8012f32:	2201      	movs	r2, #1
 8012f34:	701a      	strb	r2, [r3, #0]
 8012f36:	e002      	b.n	8012f3e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2235      	movs	r2, #53	@ 0x35
 8012f42:	2101      	movs	r1, #1
 8012f44:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8012f46:	2317      	movs	r3, #23
 8012f48:	18fb      	adds	r3, r7, r3
 8012f4a:	781b      	ldrb	r3, [r3, #0]
}
 8012f4c:	0018      	movs	r0, r3
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	b006      	add	sp, #24
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	fffffbff 	.word	0xfffffbff

08012f58 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f64:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	69db      	ldr	r3, [r3, #28]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d10e      	bne.n	8012f8c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	685a      	ldr	r2, [r3, #4]
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2101      	movs	r1, #1
 8012f7a:	438a      	bics	r2, r1
 8012f7c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	2200      	movs	r2, #0
 8012f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	2235      	movs	r2, #53	@ 0x35
 8012f88:	2101      	movs	r1, #1
 8012f8a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	0018      	movs	r0, r3
 8012f90:	f7f9 face 	bl	800c530 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012f94:	46c0      	nop			@ (mov r8, r8)
 8012f96:	46bd      	mov	sp, r7
 8012f98:	b004      	add	sp, #16
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b084      	sub	sp, #16
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fa8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	0018      	movs	r0, r3
 8012fae:	f7f9 faad 	bl	800c50c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012fb2:	46c0      	nop			@ (mov r8, r8)
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	b004      	add	sp, #16
 8012fb8:	bd80      	pop	{r7, pc}

08012fba <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8012fba:	b580      	push	{r7, lr}
 8012fbc:	b084      	sub	sp, #16
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fc6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	685a      	ldr	r2, [r3, #4]
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	2103      	movs	r1, #3
 8012fd4:	438a      	bics	r2, r1
 8012fd6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2235      	movs	r2, #53	@ 0x35
 8012fe8:	2101      	movs	r1, #1
 8012fea:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ff0:	2208      	movs	r2, #8
 8012ff2:	431a      	orrs	r2, r3
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	0018      	movs	r0, r3
 8012ffc:	f7f9 fae6 	bl	800c5cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013000:	46c0      	nop			@ (mov r8, r8)
 8013002:	46bd      	mov	sp, r7
 8013004:	b004      	add	sp, #16
 8013006:	bd80      	pop	{r7, pc}

08013008 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b086      	sub	sp, #24
 801300c:	af00      	add	r7, sp, #0
 801300e:	60f8      	str	r0, [r7, #12]
 8013010:	60b9      	str	r1, [r7, #8]
 8013012:	603b      	str	r3, [r7, #0]
 8013014:	1dfb      	adds	r3, r7, #7
 8013016:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8013018:	f7fb fde2 	bl	800ebe0 <HAL_GetTick>
 801301c:	0003      	movs	r3, r0
 801301e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013020:	e017      	b.n	8013052 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	3301      	adds	r3, #1
 8013026:	d014      	beq.n	8013052 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8013028:	f7fb fdda 	bl	800ebe0 <HAL_GetTick>
 801302c:	0002      	movs	r2, r0
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	1ad3      	subs	r3, r2, r3
 8013032:	683a      	ldr	r2, [r7, #0]
 8013034:	429a      	cmp	r2, r3
 8013036:	d902      	bls.n	801303e <I2S_WaitFlagStateUntilTimeout+0x36>
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d109      	bne.n	8013052 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	2235      	movs	r2, #53	@ 0x35
 8013042:	2101      	movs	r1, #1
 8013044:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	2234      	movs	r2, #52	@ 0x34
 801304a:	2100      	movs	r1, #0
 801304c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801304e:	2303      	movs	r3, #3
 8013050:	e00f      	b.n	8013072 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	689b      	ldr	r3, [r3, #8]
 8013058:	68ba      	ldr	r2, [r7, #8]
 801305a:	4013      	ands	r3, r2
 801305c:	68ba      	ldr	r2, [r7, #8]
 801305e:	1ad3      	subs	r3, r2, r3
 8013060:	425a      	negs	r2, r3
 8013062:	4153      	adcs	r3, r2
 8013064:	b2db      	uxtb	r3, r3
 8013066:	001a      	movs	r2, r3
 8013068:	1dfb      	adds	r3, r7, #7
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	429a      	cmp	r2, r3
 801306e:	d1d8      	bne.n	8013022 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8013070:	2300      	movs	r3, #0
}
 8013072:	0018      	movs	r0, r3
 8013074:	46bd      	mov	sp, r7
 8013076:	b006      	add	sp, #24
 8013078:	bd80      	pop	{r7, pc}
	...

0801307c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801307e:	b08b      	sub	sp, #44	@ 0x2c
 8013080:	af06      	add	r7, sp, #24
 8013082:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d101      	bne.n	801308e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801308a:	2301      	movs	r3, #1
 801308c:	e0f0      	b.n	8013270 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	4a79      	ldr	r2, [pc, #484]	@ (8013278 <HAL_PCD_Init+0x1fc>)
 8013092:	5c9b      	ldrb	r3, [r3, r2]
 8013094:	b2db      	uxtb	r3, r3
 8013096:	2b00      	cmp	r3, #0
 8013098:	d108      	bne.n	80130ac <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	23aa      	movs	r3, #170	@ 0xaa
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	2100      	movs	r1, #0
 80130a2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	0018      	movs	r0, r3
 80130a8:	f009 ff4a 	bl	801cf40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	4a72      	ldr	r2, [pc, #456]	@ (8013278 <HAL_PCD_Init+0x1fc>)
 80130b0:	2103      	movs	r1, #3
 80130b2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	0018      	movs	r0, r3
 80130ba:	f005 fefd 	bl	8018eb8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80130be:	230f      	movs	r3, #15
 80130c0:	18fb      	adds	r3, r7, r3
 80130c2:	2200      	movs	r2, #0
 80130c4:	701a      	strb	r2, [r3, #0]
 80130c6:	e049      	b.n	801315c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80130c8:	200f      	movs	r0, #15
 80130ca:	183b      	adds	r3, r7, r0
 80130cc:	781b      	ldrb	r3, [r3, #0]
 80130ce:	6879      	ldr	r1, [r7, #4]
 80130d0:	1c5a      	adds	r2, r3, #1
 80130d2:	0013      	movs	r3, r2
 80130d4:	009b      	lsls	r3, r3, #2
 80130d6:	189b      	adds	r3, r3, r2
 80130d8:	00db      	lsls	r3, r3, #3
 80130da:	18cb      	adds	r3, r1, r3
 80130dc:	3301      	adds	r3, #1
 80130de:	2201      	movs	r2, #1
 80130e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80130e2:	183b      	adds	r3, r7, r0
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	6879      	ldr	r1, [r7, #4]
 80130e8:	1c5a      	adds	r2, r3, #1
 80130ea:	0013      	movs	r3, r2
 80130ec:	009b      	lsls	r3, r3, #2
 80130ee:	189b      	adds	r3, r3, r2
 80130f0:	00db      	lsls	r3, r3, #3
 80130f2:	183a      	adds	r2, r7, r0
 80130f4:	7812      	ldrb	r2, [r2, #0]
 80130f6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80130f8:	183b      	adds	r3, r7, r0
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	6879      	ldr	r1, [r7, #4]
 80130fe:	1c5a      	adds	r2, r3, #1
 8013100:	0013      	movs	r3, r2
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	189b      	adds	r3, r3, r2
 8013106:	00db      	lsls	r3, r3, #3
 8013108:	18cb      	adds	r3, r1, r3
 801310a:	3303      	adds	r3, #3
 801310c:	2200      	movs	r2, #0
 801310e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013110:	183b      	adds	r3, r7, r0
 8013112:	781a      	ldrb	r2, [r3, #0]
 8013114:	6879      	ldr	r1, [r7, #4]
 8013116:	0013      	movs	r3, r2
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	189b      	adds	r3, r3, r2
 801311c:	00db      	lsls	r3, r3, #3
 801311e:	18cb      	adds	r3, r1, r3
 8013120:	3338      	adds	r3, #56	@ 0x38
 8013122:	2200      	movs	r2, #0
 8013124:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8013126:	183b      	adds	r3, r7, r0
 8013128:	781a      	ldrb	r2, [r3, #0]
 801312a:	6879      	ldr	r1, [r7, #4]
 801312c:	0013      	movs	r3, r2
 801312e:	009b      	lsls	r3, r3, #2
 8013130:	189b      	adds	r3, r3, r2
 8013132:	00db      	lsls	r3, r3, #3
 8013134:	18cb      	adds	r3, r1, r3
 8013136:	333c      	adds	r3, #60	@ 0x3c
 8013138:	2200      	movs	r2, #0
 801313a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801313c:	183b      	adds	r3, r7, r0
 801313e:	781a      	ldrb	r2, [r3, #0]
 8013140:	6879      	ldr	r1, [r7, #4]
 8013142:	0013      	movs	r3, r2
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	189b      	adds	r3, r3, r2
 8013148:	00db      	lsls	r3, r3, #3
 801314a:	18cb      	adds	r3, r1, r3
 801314c:	3340      	adds	r3, #64	@ 0x40
 801314e:	2200      	movs	r2, #0
 8013150:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013152:	183b      	adds	r3, r7, r0
 8013154:	781a      	ldrb	r2, [r3, #0]
 8013156:	183b      	adds	r3, r7, r0
 8013158:	3201      	adds	r2, #1
 801315a:	701a      	strb	r2, [r3, #0]
 801315c:	210f      	movs	r1, #15
 801315e:	187b      	adds	r3, r7, r1
 8013160:	781a      	ldrb	r2, [r3, #0]
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	429a      	cmp	r2, r3
 8013168:	d3ae      	bcc.n	80130c8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801316a:	187b      	adds	r3, r7, r1
 801316c:	2200      	movs	r2, #0
 801316e:	701a      	strb	r2, [r3, #0]
 8013170:	e056      	b.n	8013220 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013172:	240f      	movs	r4, #15
 8013174:	193b      	adds	r3, r7, r4
 8013176:	781a      	ldrb	r2, [r3, #0]
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	236a      	movs	r3, #106	@ 0x6a
 801317c:	33ff      	adds	r3, #255	@ 0xff
 801317e:	0019      	movs	r1, r3
 8013180:	0013      	movs	r3, r2
 8013182:	009b      	lsls	r3, r3, #2
 8013184:	189b      	adds	r3, r3, r2
 8013186:	00db      	lsls	r3, r3, #3
 8013188:	18c3      	adds	r3, r0, r3
 801318a:	185b      	adds	r3, r3, r1
 801318c:	2200      	movs	r2, #0
 801318e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013190:	193b      	adds	r3, r7, r4
 8013192:	781a      	ldrb	r2, [r3, #0]
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	23b4      	movs	r3, #180	@ 0xb4
 8013198:	0059      	lsls	r1, r3, #1
 801319a:	0013      	movs	r3, r2
 801319c:	009b      	lsls	r3, r3, #2
 801319e:	189b      	adds	r3, r3, r2
 80131a0:	00db      	lsls	r3, r3, #3
 80131a2:	18c3      	adds	r3, r0, r3
 80131a4:	185b      	adds	r3, r3, r1
 80131a6:	193a      	adds	r2, r7, r4
 80131a8:	7812      	ldrb	r2, [r2, #0]
 80131aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80131ac:	193b      	adds	r3, r7, r4
 80131ae:	781a      	ldrb	r2, [r3, #0]
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	236c      	movs	r3, #108	@ 0x6c
 80131b4:	33ff      	adds	r3, #255	@ 0xff
 80131b6:	0019      	movs	r1, r3
 80131b8:	0013      	movs	r3, r2
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	189b      	adds	r3, r3, r2
 80131be:	00db      	lsls	r3, r3, #3
 80131c0:	18c3      	adds	r3, r0, r3
 80131c2:	185b      	adds	r3, r3, r1
 80131c4:	2200      	movs	r2, #0
 80131c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80131c8:	193b      	adds	r3, r7, r4
 80131ca:	781a      	ldrb	r2, [r3, #0]
 80131cc:	6878      	ldr	r0, [r7, #4]
 80131ce:	23bc      	movs	r3, #188	@ 0xbc
 80131d0:	0059      	lsls	r1, r3, #1
 80131d2:	0013      	movs	r3, r2
 80131d4:	009b      	lsls	r3, r3, #2
 80131d6:	189b      	adds	r3, r3, r2
 80131d8:	00db      	lsls	r3, r3, #3
 80131da:	18c3      	adds	r3, r0, r3
 80131dc:	185b      	adds	r3, r3, r1
 80131de:	2200      	movs	r2, #0
 80131e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80131e2:	193b      	adds	r3, r7, r4
 80131e4:	781a      	ldrb	r2, [r3, #0]
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	23be      	movs	r3, #190	@ 0xbe
 80131ea:	0059      	lsls	r1, r3, #1
 80131ec:	0013      	movs	r3, r2
 80131ee:	009b      	lsls	r3, r3, #2
 80131f0:	189b      	adds	r3, r3, r2
 80131f2:	00db      	lsls	r3, r3, #3
 80131f4:	18c3      	adds	r3, r0, r3
 80131f6:	185b      	adds	r3, r3, r1
 80131f8:	2200      	movs	r2, #0
 80131fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80131fc:	193b      	adds	r3, r7, r4
 80131fe:	781a      	ldrb	r2, [r3, #0]
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	23c0      	movs	r3, #192	@ 0xc0
 8013204:	0059      	lsls	r1, r3, #1
 8013206:	0013      	movs	r3, r2
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	189b      	adds	r3, r3, r2
 801320c:	00db      	lsls	r3, r3, #3
 801320e:	18c3      	adds	r3, r0, r3
 8013210:	185b      	adds	r3, r3, r1
 8013212:	2200      	movs	r2, #0
 8013214:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013216:	193b      	adds	r3, r7, r4
 8013218:	781a      	ldrb	r2, [r3, #0]
 801321a:	193b      	adds	r3, r7, r4
 801321c:	3201      	adds	r2, #1
 801321e:	701a      	strb	r2, [r3, #0]
 8013220:	230f      	movs	r3, #15
 8013222:	18fb      	adds	r3, r7, r3
 8013224:	781a      	ldrb	r2, [r3, #0]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	685b      	ldr	r3, [r3, #4]
 801322a:	429a      	cmp	r2, r3
 801322c:	d3a1      	bcc.n	8013172 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6818      	ldr	r0, [r3, #0]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	466a      	mov	r2, sp
 8013236:	0011      	movs	r1, r2
 8013238:	001a      	movs	r2, r3
 801323a:	3210      	adds	r2, #16
 801323c:	ca70      	ldmia	r2!, {r4, r5, r6}
 801323e:	c170      	stmia	r1!, {r4, r5, r6}
 8013240:	ca30      	ldmia	r2!, {r4, r5}
 8013242:	c130      	stmia	r1!, {r4, r5}
 8013244:	6859      	ldr	r1, [r3, #4]
 8013246:	689a      	ldr	r2, [r3, #8]
 8013248:	68db      	ldr	r3, [r3, #12]
 801324a:	f005 fe4f 	bl	8018eec <USB_DevInit>

  hpcd->USB_Address = 0U;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2224      	movs	r2, #36	@ 0x24
 8013252:	2100      	movs	r1, #0
 8013254:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4a07      	ldr	r2, [pc, #28]	@ (8013278 <HAL_PCD_Init+0x1fc>)
 801325a:	2101      	movs	r1, #1
 801325c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	69db      	ldr	r3, [r3, #28]
 8013262:	2b01      	cmp	r3, #1
 8013264:	d103      	bne.n	801326e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	0018      	movs	r0, r3
 801326a:	f001 fd23 	bl	8014cb4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801326e:	2300      	movs	r3, #0
}
 8013270:	0018      	movs	r0, r3
 8013272:	46bd      	mov	sp, r7
 8013274:	b005      	add	sp, #20
 8013276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013278:	000002a9 	.word	0x000002a9

0801327c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013284:	687a      	ldr	r2, [r7, #4]
 8013286:	23aa      	movs	r3, #170	@ 0xaa
 8013288:	009b      	lsls	r3, r3, #2
 801328a:	5cd3      	ldrb	r3, [r2, r3]
 801328c:	2b01      	cmp	r3, #1
 801328e:	d101      	bne.n	8013294 <HAL_PCD_Start+0x18>
 8013290:	2302      	movs	r3, #2
 8013292:	e014      	b.n	80132be <HAL_PCD_Start+0x42>
 8013294:	687a      	ldr	r2, [r7, #4]
 8013296:	23aa      	movs	r3, #170	@ 0xaa
 8013298:	009b      	lsls	r3, r3, #2
 801329a:	2101      	movs	r1, #1
 801329c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	0018      	movs	r0, r3
 80132a4:	f005 fdf2 	bl	8018e8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	0018      	movs	r0, r3
 80132ae:	f007 fdf5 	bl	801ae9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80132b2:	687a      	ldr	r2, [r7, #4]
 80132b4:	23aa      	movs	r3, #170	@ 0xaa
 80132b6:	009b      	lsls	r3, r3, #2
 80132b8:	2100      	movs	r1, #0
 80132ba:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80132bc:	2300      	movs	r3, #0
}
 80132be:	0018      	movs	r0, r3
 80132c0:	46bd      	mov	sp, r7
 80132c2:	b002      	add	sp, #8
 80132c4:	bd80      	pop	{r7, pc}
	...

080132c8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	0018      	movs	r0, r3
 80132d6:	f007 fdf7 	bl	801aec8 <USB_ReadInterrupts>
 80132da:	0003      	movs	r3, r0
 80132dc:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80132de:	68fa      	ldr	r2, [r7, #12]
 80132e0:	2380      	movs	r3, #128	@ 0x80
 80132e2:	021b      	lsls	r3, r3, #8
 80132e4:	4013      	ands	r3, r2
 80132e6:	d004      	beq.n	80132f2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	0018      	movs	r0, r3
 80132ec:	f000 fb62 	bl	80139b4 <PCD_EP_ISR_Handler>

    return;
 80132f0:	e11d      	b.n	801352e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80132f2:	68fa      	ldr	r2, [r7, #12]
 80132f4:	2380      	movs	r3, #128	@ 0x80
 80132f6:	00db      	lsls	r3, r3, #3
 80132f8:	4013      	ands	r3, r2
 80132fa:	d015      	beq.n	8013328 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2244      	movs	r2, #68	@ 0x44
 8013302:	5a9b      	ldrh	r3, [r3, r2]
 8013304:	b29a      	uxth	r2, r3
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	498a      	ldr	r1, [pc, #552]	@ (8013534 <HAL_PCD_IRQHandler+0x26c>)
 801330c:	400a      	ands	r2, r1
 801330e:	b291      	uxth	r1, r2
 8013310:	2244      	movs	r2, #68	@ 0x44
 8013312:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	0018      	movs	r0, r3
 8013318:	f009 fe95 	bl	801d046 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	2100      	movs	r1, #0
 8013320:	0018      	movs	r0, r3
 8013322:	f000 f915 	bl	8013550 <HAL_PCD_SetAddress>

    return;
 8013326:	e102      	b.n	801352e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8013328:	68fa      	ldr	r2, [r7, #12]
 801332a:	2380      	movs	r3, #128	@ 0x80
 801332c:	01db      	lsls	r3, r3, #7
 801332e:	4013      	ands	r3, r2
 8013330:	d00c      	beq.n	801334c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2244      	movs	r2, #68	@ 0x44
 8013338:	5a9b      	ldrh	r3, [r3, r2]
 801333a:	b29a      	uxth	r2, r3
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	497d      	ldr	r1, [pc, #500]	@ (8013538 <HAL_PCD_IRQHandler+0x270>)
 8013342:	400a      	ands	r2, r1
 8013344:	b291      	uxth	r1, r2
 8013346:	2244      	movs	r2, #68	@ 0x44
 8013348:	5299      	strh	r1, [r3, r2]

    return;
 801334a:	e0f0      	b.n	801352e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 801334c:	68fa      	ldr	r2, [r7, #12]
 801334e:	2380      	movs	r3, #128	@ 0x80
 8013350:	019b      	lsls	r3, r3, #6
 8013352:	4013      	ands	r3, r2
 8013354:	d00c      	beq.n	8013370 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	2244      	movs	r2, #68	@ 0x44
 801335c:	5a9b      	ldrh	r3, [r3, r2]
 801335e:	b29a      	uxth	r2, r3
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	4975      	ldr	r1, [pc, #468]	@ (801353c <HAL_PCD_IRQHandler+0x274>)
 8013366:	400a      	ands	r2, r1
 8013368:	b291      	uxth	r1, r2
 801336a:	2244      	movs	r2, #68	@ 0x44
 801336c:	5299      	strh	r1, [r3, r2]

    return;
 801336e:	e0de      	b.n	801352e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8013370:	68fa      	ldr	r2, [r7, #12]
 8013372:	2380      	movs	r3, #128	@ 0x80
 8013374:	015b      	lsls	r3, r3, #5
 8013376:	4013      	ands	r3, r2
 8013378:	d038      	beq.n	80133ec <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	2240      	movs	r2, #64	@ 0x40
 8013380:	5a9b      	ldrh	r3, [r3, r2]
 8013382:	b29a      	uxth	r2, r3
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	2104      	movs	r1, #4
 801338a:	438a      	bics	r2, r1
 801338c:	b291      	uxth	r1, r2
 801338e:	2240      	movs	r2, #64	@ 0x40
 8013390:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	2240      	movs	r2, #64	@ 0x40
 8013398:	5a9b      	ldrh	r3, [r3, r2]
 801339a:	b29a      	uxth	r2, r3
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	2108      	movs	r1, #8
 80133a2:	438a      	bics	r2, r1
 80133a4:	b291      	uxth	r1, r2
 80133a6:	2240      	movs	r2, #64	@ 0x40
 80133a8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	23b8      	movs	r3, #184	@ 0xb8
 80133ae:	009b      	lsls	r3, r3, #2
 80133b0:	5cd3      	ldrb	r3, [r2, r3]
 80133b2:	2b01      	cmp	r3, #1
 80133b4:	d109      	bne.n	80133ca <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80133b6:	687a      	ldr	r2, [r7, #4]
 80133b8:	23b8      	movs	r3, #184	@ 0xb8
 80133ba:	009b      	lsls	r3, r3, #2
 80133bc:	2100      	movs	r1, #0
 80133be:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2100      	movs	r1, #0
 80133c4:	0018      	movs	r0, r3
 80133c6:	f001 fc9f 	bl	8014d08 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	0018      	movs	r0, r3
 80133ce:	f009 fe7b 	bl	801d0c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	2244      	movs	r2, #68	@ 0x44
 80133d8:	5a9b      	ldrh	r3, [r3, r2]
 80133da:	b29a      	uxth	r2, r3
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	4957      	ldr	r1, [pc, #348]	@ (8013540 <HAL_PCD_IRQHandler+0x278>)
 80133e2:	400a      	ands	r2, r1
 80133e4:	b291      	uxth	r1, r2
 80133e6:	2244      	movs	r2, #68	@ 0x44
 80133e8:	5299      	strh	r1, [r3, r2]

    return;
 80133ea:	e0a0      	b.n	801352e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80133ec:	68fa      	ldr	r2, [r7, #12]
 80133ee:	2380      	movs	r3, #128	@ 0x80
 80133f0:	011b      	lsls	r3, r3, #4
 80133f2:	4013      	ands	r3, r2
 80133f4:	d028      	beq.n	8013448 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2240      	movs	r2, #64	@ 0x40
 80133fc:	5a9b      	ldrh	r3, [r3, r2]
 80133fe:	b29a      	uxth	r2, r3
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	2108      	movs	r1, #8
 8013406:	430a      	orrs	r2, r1
 8013408:	b291      	uxth	r1, r2
 801340a:	2240      	movs	r2, #64	@ 0x40
 801340c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	2244      	movs	r2, #68	@ 0x44
 8013414:	5a9b      	ldrh	r3, [r3, r2]
 8013416:	b29a      	uxth	r2, r3
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4949      	ldr	r1, [pc, #292]	@ (8013544 <HAL_PCD_IRQHandler+0x27c>)
 801341e:	400a      	ands	r2, r1
 8013420:	b291      	uxth	r1, r2
 8013422:	2244      	movs	r2, #68	@ 0x44
 8013424:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	2240      	movs	r2, #64	@ 0x40
 801342c:	5a9b      	ldrh	r3, [r3, r2]
 801342e:	b29a      	uxth	r2, r3
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	2104      	movs	r1, #4
 8013436:	430a      	orrs	r2, r1
 8013438:	b291      	uxth	r1, r2
 801343a:	2240      	movs	r2, #64	@ 0x40
 801343c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	0018      	movs	r0, r3
 8013442:	f009 fe25 	bl	801d090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013446:	e072      	b.n	801352e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	2280      	movs	r2, #128	@ 0x80
 801344c:	4013      	ands	r3, r2
 801344e:	d046      	beq.n	80134de <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	2244      	movs	r2, #68	@ 0x44
 8013456:	5a9b      	ldrh	r3, [r3, r2]
 8013458:	b29a      	uxth	r2, r3
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	2180      	movs	r1, #128	@ 0x80
 8013460:	438a      	bics	r2, r1
 8013462:	b291      	uxth	r1, r2
 8013464:	2244      	movs	r2, #68	@ 0x44
 8013466:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	23b8      	movs	r3, #184	@ 0xb8
 801346c:	009b      	lsls	r3, r3, #2
 801346e:	5cd3      	ldrb	r3, [r2, r3]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d12f      	bne.n	80134d4 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	2240      	movs	r2, #64	@ 0x40
 801347a:	5a9b      	ldrh	r3, [r3, r2]
 801347c:	b29a      	uxth	r2, r3
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	2104      	movs	r1, #4
 8013484:	430a      	orrs	r2, r1
 8013486:	b291      	uxth	r1, r2
 8013488:	2240      	movs	r2, #64	@ 0x40
 801348a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	2240      	movs	r2, #64	@ 0x40
 8013492:	5a9b      	ldrh	r3, [r3, r2]
 8013494:	b29a      	uxth	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	2108      	movs	r1, #8
 801349c:	430a      	orrs	r2, r1
 801349e:	b291      	uxth	r1, r2
 80134a0:	2240      	movs	r2, #64	@ 0x40
 80134a2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80134a4:	687a      	ldr	r2, [r7, #4]
 80134a6:	23b8      	movs	r3, #184	@ 0xb8
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	2101      	movs	r1, #1
 80134ac:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	2254      	movs	r2, #84	@ 0x54
 80134b4:	5a9b      	ldrh	r3, [r3, r2]
 80134b6:	b29b      	uxth	r3, r3
 80134b8:	089b      	lsrs	r3, r3, #2
 80134ba:	223c      	movs	r2, #60	@ 0x3c
 80134bc:	4013      	ands	r3, r2
 80134be:	0019      	movs	r1, r3
 80134c0:	687a      	ldr	r2, [r7, #4]
 80134c2:	23b9      	movs	r3, #185	@ 0xb9
 80134c4:	009b      	lsls	r3, r3, #2
 80134c6:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2101      	movs	r1, #1
 80134cc:	0018      	movs	r0, r3
 80134ce:	f001 fc1b 	bl	8014d08 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80134d2:	e02c      	b.n	801352e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	0018      	movs	r0, r3
 80134d8:	f009 fdda 	bl	801d090 <HAL_PCD_SuspendCallback>
    return;
 80134dc:	e027      	b.n	801352e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80134de:	68fa      	ldr	r2, [r7, #12]
 80134e0:	2380      	movs	r3, #128	@ 0x80
 80134e2:	009b      	lsls	r3, r3, #2
 80134e4:	4013      	ands	r3, r2
 80134e6:	d010      	beq.n	801350a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	2244      	movs	r2, #68	@ 0x44
 80134ee:	5a9b      	ldrh	r3, [r3, r2]
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	4914      	ldr	r1, [pc, #80]	@ (8013548 <HAL_PCD_IRQHandler+0x280>)
 80134f8:	400a      	ands	r2, r1
 80134fa:	b291      	uxth	r1, r2
 80134fc:	2244      	movs	r2, #68	@ 0x44
 80134fe:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	0018      	movs	r0, r3
 8013504:	f009 fd90 	bl	801d028 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013508:	e011      	b.n	801352e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801350a:	68fa      	ldr	r2, [r7, #12]
 801350c:	2380      	movs	r3, #128	@ 0x80
 801350e:	005b      	lsls	r3, r3, #1
 8013510:	4013      	ands	r3, r2
 8013512:	d00c      	beq.n	801352e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	2244      	movs	r2, #68	@ 0x44
 801351a:	5a9b      	ldrh	r3, [r3, r2]
 801351c:	b29a      	uxth	r2, r3
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	490a      	ldr	r1, [pc, #40]	@ (801354c <HAL_PCD_IRQHandler+0x284>)
 8013524:	400a      	ands	r2, r1
 8013526:	b291      	uxth	r1, r2
 8013528:	2244      	movs	r2, #68	@ 0x44
 801352a:	5299      	strh	r1, [r3, r2]

    return;
 801352c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801352e:	46bd      	mov	sp, r7
 8013530:	b004      	add	sp, #16
 8013532:	bd80      	pop	{r7, pc}
 8013534:	fffffbff 	.word	0xfffffbff
 8013538:	ffffbfff 	.word	0xffffbfff
 801353c:	ffffdfff 	.word	0xffffdfff
 8013540:	ffffefff 	.word	0xffffefff
 8013544:	fffff7ff 	.word	0xfffff7ff
 8013548:	fffffdff 	.word	0xfffffdff
 801354c:	fffffeff 	.word	0xfffffeff

08013550 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b082      	sub	sp, #8
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
 8013558:	000a      	movs	r2, r1
 801355a:	1cfb      	adds	r3, r7, #3
 801355c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	23aa      	movs	r3, #170	@ 0xaa
 8013562:	009b      	lsls	r3, r3, #2
 8013564:	5cd3      	ldrb	r3, [r2, r3]
 8013566:	2b01      	cmp	r3, #1
 8013568:	d101      	bne.n	801356e <HAL_PCD_SetAddress+0x1e>
 801356a:	2302      	movs	r3, #2
 801356c:	e017      	b.n	801359e <HAL_PCD_SetAddress+0x4e>
 801356e:	687a      	ldr	r2, [r7, #4]
 8013570:	23aa      	movs	r3, #170	@ 0xaa
 8013572:	009b      	lsls	r3, r3, #2
 8013574:	2101      	movs	r1, #1
 8013576:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	1cfa      	adds	r2, r7, #3
 801357c:	2124      	movs	r1, #36	@ 0x24
 801357e:	7812      	ldrb	r2, [r2, #0]
 8013580:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	1cfb      	adds	r3, r7, #3
 8013588:	781b      	ldrb	r3, [r3, #0]
 801358a:	0019      	movs	r1, r3
 801358c:	0010      	movs	r0, r2
 801358e:	f007 fc71 	bl	801ae74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013592:	687a      	ldr	r2, [r7, #4]
 8013594:	23aa      	movs	r3, #170	@ 0xaa
 8013596:	009b      	lsls	r3, r3, #2
 8013598:	2100      	movs	r1, #0
 801359a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801359c:	2300      	movs	r3, #0
}
 801359e:	0018      	movs	r0, r3
 80135a0:	46bd      	mov	sp, r7
 80135a2:	b002      	add	sp, #8
 80135a4:	bd80      	pop	{r7, pc}

080135a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80135a6:	b590      	push	{r4, r7, lr}
 80135a8:	b085      	sub	sp, #20
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6078      	str	r0, [r7, #4]
 80135ae:	000c      	movs	r4, r1
 80135b0:	0010      	movs	r0, r2
 80135b2:	0019      	movs	r1, r3
 80135b4:	1cfb      	adds	r3, r7, #3
 80135b6:	1c22      	adds	r2, r4, #0
 80135b8:	701a      	strb	r2, [r3, #0]
 80135ba:	003b      	movs	r3, r7
 80135bc:	1c02      	adds	r2, r0, #0
 80135be:	801a      	strh	r2, [r3, #0]
 80135c0:	1cbb      	adds	r3, r7, #2
 80135c2:	1c0a      	adds	r2, r1, #0
 80135c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80135c6:	230b      	movs	r3, #11
 80135c8:	18fb      	adds	r3, r7, r3
 80135ca:	2200      	movs	r2, #0
 80135cc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80135ce:	1cfb      	adds	r3, r7, #3
 80135d0:	781b      	ldrb	r3, [r3, #0]
 80135d2:	b25b      	sxtb	r3, r3
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	da0f      	bge.n	80135f8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80135d8:	1cfb      	adds	r3, r7, #3
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	2207      	movs	r2, #7
 80135de:	4013      	ands	r3, r2
 80135e0:	1c5a      	adds	r2, r3, #1
 80135e2:	0013      	movs	r3, r2
 80135e4:	009b      	lsls	r3, r3, #2
 80135e6:	189b      	adds	r3, r3, r2
 80135e8:	00db      	lsls	r3, r3, #3
 80135ea:	687a      	ldr	r2, [r7, #4]
 80135ec:	18d3      	adds	r3, r2, r3
 80135ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	2201      	movs	r2, #1
 80135f4:	705a      	strb	r2, [r3, #1]
 80135f6:	e00f      	b.n	8013618 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80135f8:	1cfb      	adds	r3, r7, #3
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	2207      	movs	r2, #7
 80135fe:	401a      	ands	r2, r3
 8013600:	0013      	movs	r3, r2
 8013602:	009b      	lsls	r3, r3, #2
 8013604:	189b      	adds	r3, r3, r2
 8013606:	00db      	lsls	r3, r3, #3
 8013608:	3369      	adds	r3, #105	@ 0x69
 801360a:	33ff      	adds	r3, #255	@ 0xff
 801360c:	687a      	ldr	r2, [r7, #4]
 801360e:	18d3      	adds	r3, r2, r3
 8013610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	2200      	movs	r2, #0
 8013616:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8013618:	1cfb      	adds	r3, r7, #3
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	2207      	movs	r2, #7
 801361e:	4013      	ands	r3, r2
 8013620:	b2da      	uxtb	r2, r3
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8013626:	003b      	movs	r3, r7
 8013628:	881a      	ldrh	r2, [r3, #0]
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	1cba      	adds	r2, r7, #2
 8013632:	7812      	ldrb	r2, [r2, #0]
 8013634:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8013636:	1cbb      	adds	r3, r7, #2
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	2b02      	cmp	r3, #2
 801363c:	d102      	bne.n	8013644 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	2200      	movs	r2, #0
 8013642:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013644:	687a      	ldr	r2, [r7, #4]
 8013646:	23aa      	movs	r3, #170	@ 0xaa
 8013648:	009b      	lsls	r3, r3, #2
 801364a:	5cd3      	ldrb	r3, [r2, r3]
 801364c:	2b01      	cmp	r3, #1
 801364e:	d101      	bne.n	8013654 <HAL_PCD_EP_Open+0xae>
 8013650:	2302      	movs	r3, #2
 8013652:	e013      	b.n	801367c <HAL_PCD_EP_Open+0xd6>
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	23aa      	movs	r3, #170	@ 0xaa
 8013658:	009b      	lsls	r3, r3, #2
 801365a:	2101      	movs	r1, #1
 801365c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	68fa      	ldr	r2, [r7, #12]
 8013664:	0011      	movs	r1, r2
 8013666:	0018      	movs	r0, r3
 8013668:	f005 fc68 	bl	8018f3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801366c:	687a      	ldr	r2, [r7, #4]
 801366e:	23aa      	movs	r3, #170	@ 0xaa
 8013670:	009b      	lsls	r3, r3, #2
 8013672:	2100      	movs	r1, #0
 8013674:	54d1      	strb	r1, [r2, r3]

  return ret;
 8013676:	230b      	movs	r3, #11
 8013678:	18fb      	adds	r3, r7, r3
 801367a:	781b      	ldrb	r3, [r3, #0]
}
 801367c:	0018      	movs	r0, r3
 801367e:	46bd      	mov	sp, r7
 8013680:	b005      	add	sp, #20
 8013682:	bd90      	pop	{r4, r7, pc}

08013684 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b084      	sub	sp, #16
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	000a      	movs	r2, r1
 801368e:	1cfb      	adds	r3, r7, #3
 8013690:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013692:	1cfb      	adds	r3, r7, #3
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	b25b      	sxtb	r3, r3
 8013698:	2b00      	cmp	r3, #0
 801369a:	da0f      	bge.n	80136bc <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801369c:	1cfb      	adds	r3, r7, #3
 801369e:	781b      	ldrb	r3, [r3, #0]
 80136a0:	2207      	movs	r2, #7
 80136a2:	4013      	ands	r3, r2
 80136a4:	1c5a      	adds	r2, r3, #1
 80136a6:	0013      	movs	r3, r2
 80136a8:	009b      	lsls	r3, r3, #2
 80136aa:	189b      	adds	r3, r3, r2
 80136ac:	00db      	lsls	r3, r3, #3
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	18d3      	adds	r3, r2, r3
 80136b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	2201      	movs	r2, #1
 80136b8:	705a      	strb	r2, [r3, #1]
 80136ba:	e00f      	b.n	80136dc <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80136bc:	1cfb      	adds	r3, r7, #3
 80136be:	781b      	ldrb	r3, [r3, #0]
 80136c0:	2207      	movs	r2, #7
 80136c2:	401a      	ands	r2, r3
 80136c4:	0013      	movs	r3, r2
 80136c6:	009b      	lsls	r3, r3, #2
 80136c8:	189b      	adds	r3, r3, r2
 80136ca:	00db      	lsls	r3, r3, #3
 80136cc:	3369      	adds	r3, #105	@ 0x69
 80136ce:	33ff      	adds	r3, #255	@ 0xff
 80136d0:	687a      	ldr	r2, [r7, #4]
 80136d2:	18d3      	adds	r3, r2, r3
 80136d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2200      	movs	r2, #0
 80136da:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80136dc:	1cfb      	adds	r3, r7, #3
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	2207      	movs	r2, #7
 80136e2:	4013      	ands	r3, r2
 80136e4:	b2da      	uxtb	r2, r3
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80136ea:	687a      	ldr	r2, [r7, #4]
 80136ec:	23aa      	movs	r3, #170	@ 0xaa
 80136ee:	009b      	lsls	r3, r3, #2
 80136f0:	5cd3      	ldrb	r3, [r2, r3]
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	d101      	bne.n	80136fa <HAL_PCD_EP_Close+0x76>
 80136f6:	2302      	movs	r3, #2
 80136f8:	e011      	b.n	801371e <HAL_PCD_EP_Close+0x9a>
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	23aa      	movs	r3, #170	@ 0xaa
 80136fe:	009b      	lsls	r3, r3, #2
 8013700:	2101      	movs	r1, #1
 8013702:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	68fa      	ldr	r2, [r7, #12]
 801370a:	0011      	movs	r1, r2
 801370c:	0018      	movs	r0, r3
 801370e:	f005 ffb7 	bl	8019680 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	23aa      	movs	r3, #170	@ 0xaa
 8013716:	009b      	lsls	r3, r3, #2
 8013718:	2100      	movs	r1, #0
 801371a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 801371c:	2300      	movs	r3, #0
}
 801371e:	0018      	movs	r0, r3
 8013720:	46bd      	mov	sp, r7
 8013722:	b004      	add	sp, #16
 8013724:	bd80      	pop	{r7, pc}

08013726 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013726:	b580      	push	{r7, lr}
 8013728:	b086      	sub	sp, #24
 801372a:	af00      	add	r7, sp, #0
 801372c:	60f8      	str	r0, [r7, #12]
 801372e:	607a      	str	r2, [r7, #4]
 8013730:	603b      	str	r3, [r7, #0]
 8013732:	200b      	movs	r0, #11
 8013734:	183b      	adds	r3, r7, r0
 8013736:	1c0a      	adds	r2, r1, #0
 8013738:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801373a:	0001      	movs	r1, r0
 801373c:	187b      	adds	r3, r7, r1
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	2207      	movs	r2, #7
 8013742:	401a      	ands	r2, r3
 8013744:	0013      	movs	r3, r2
 8013746:	009b      	lsls	r3, r3, #2
 8013748:	189b      	adds	r3, r3, r2
 801374a:	00db      	lsls	r3, r3, #3
 801374c:	3369      	adds	r3, #105	@ 0x69
 801374e:	33ff      	adds	r3, #255	@ 0xff
 8013750:	68fa      	ldr	r2, [r7, #12]
 8013752:	18d3      	adds	r3, r2, r3
 8013754:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	687a      	ldr	r2, [r7, #4]
 801375a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	683a      	ldr	r2, [r7, #0]
 8013760:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	2200      	movs	r2, #0
 8013766:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	2200      	movs	r2, #0
 801376c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801376e:	187b      	adds	r3, r7, r1
 8013770:	781b      	ldrb	r3, [r3, #0]
 8013772:	2207      	movs	r2, #7
 8013774:	4013      	ands	r3, r2
 8013776:	b2da      	uxtb	r2, r3
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	697a      	ldr	r2, [r7, #20]
 8013782:	0011      	movs	r1, r2
 8013784:	0018      	movs	r0, r3
 8013786:	f006 f93b 	bl	8019a00 <USB_EPStartXfer>

  return HAL_OK;
 801378a:	2300      	movs	r3, #0
}
 801378c:	0018      	movs	r0, r3
 801378e:	46bd      	mov	sp, r7
 8013790:	b006      	add	sp, #24
 8013792:	bd80      	pop	{r7, pc}

08013794 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
 801379c:	000a      	movs	r2, r1
 801379e:	1cfb      	adds	r3, r7, #3
 80137a0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80137a2:	1cfb      	adds	r3, r7, #3
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	2207      	movs	r2, #7
 80137a8:	401a      	ands	r2, r3
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	23c2      	movs	r3, #194	@ 0xc2
 80137ae:	0059      	lsls	r1, r3, #1
 80137b0:	0013      	movs	r3, r2
 80137b2:	009b      	lsls	r3, r3, #2
 80137b4:	189b      	adds	r3, r3, r2
 80137b6:	00db      	lsls	r3, r3, #3
 80137b8:	18c3      	adds	r3, r0, r3
 80137ba:	185b      	adds	r3, r3, r1
 80137bc:	681b      	ldr	r3, [r3, #0]
}
 80137be:	0018      	movs	r0, r3
 80137c0:	46bd      	mov	sp, r7
 80137c2:	b002      	add	sp, #8
 80137c4:	bd80      	pop	{r7, pc}

080137c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80137c6:	b580      	push	{r7, lr}
 80137c8:	b086      	sub	sp, #24
 80137ca:	af00      	add	r7, sp, #0
 80137cc:	60f8      	str	r0, [r7, #12]
 80137ce:	607a      	str	r2, [r7, #4]
 80137d0:	603b      	str	r3, [r7, #0]
 80137d2:	200b      	movs	r0, #11
 80137d4:	183b      	adds	r3, r7, r0
 80137d6:	1c0a      	adds	r2, r1, #0
 80137d8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80137da:	183b      	adds	r3, r7, r0
 80137dc:	781b      	ldrb	r3, [r3, #0]
 80137de:	2207      	movs	r2, #7
 80137e0:	4013      	ands	r3, r2
 80137e2:	1c5a      	adds	r2, r3, #1
 80137e4:	0013      	movs	r3, r2
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	189b      	adds	r3, r3, r2
 80137ea:	00db      	lsls	r3, r3, #3
 80137ec:	68fa      	ldr	r2, [r7, #12]
 80137ee:	18d3      	adds	r3, r2, r3
 80137f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80137f2:	697b      	ldr	r3, [r7, #20]
 80137f4:	687a      	ldr	r2, [r7, #4]
 80137f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	683a      	ldr	r2, [r7, #0]
 80137fc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	2224      	movs	r2, #36	@ 0x24
 8013802:	2101      	movs	r1, #1
 8013804:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8013806:	697b      	ldr	r3, [r7, #20]
 8013808:	683a      	ldr	r2, [r7, #0]
 801380a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 801380c:	697b      	ldr	r3, [r7, #20]
 801380e:	2200      	movs	r2, #0
 8013810:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	2201      	movs	r2, #1
 8013816:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013818:	183b      	adds	r3, r7, r0
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	2207      	movs	r2, #7
 801381e:	4013      	ands	r3, r2
 8013820:	b2da      	uxtb	r2, r3
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	697a      	ldr	r2, [r7, #20]
 801382c:	0011      	movs	r1, r2
 801382e:	0018      	movs	r0, r3
 8013830:	f006 f8e6 	bl	8019a00 <USB_EPStartXfer>

  return HAL_OK;
 8013834:	2300      	movs	r3, #0
}
 8013836:	0018      	movs	r0, r3
 8013838:	46bd      	mov	sp, r7
 801383a:	b006      	add	sp, #24
 801383c:	bd80      	pop	{r7, pc}

0801383e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801383e:	b580      	push	{r7, lr}
 8013840:	b084      	sub	sp, #16
 8013842:	af00      	add	r7, sp, #0
 8013844:	6078      	str	r0, [r7, #4]
 8013846:	000a      	movs	r2, r1
 8013848:	1cfb      	adds	r3, r7, #3
 801384a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801384c:	1cfb      	adds	r3, r7, #3
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	2207      	movs	r2, #7
 8013852:	401a      	ands	r2, r3
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	685b      	ldr	r3, [r3, #4]
 8013858:	429a      	cmp	r2, r3
 801385a:	d901      	bls.n	8013860 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 801385c:	2301      	movs	r3, #1
 801385e:	e046      	b.n	80138ee <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013860:	1cfb      	adds	r3, r7, #3
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	b25b      	sxtb	r3, r3
 8013866:	2b00      	cmp	r3, #0
 8013868:	da0f      	bge.n	801388a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801386a:	1cfb      	adds	r3, r7, #3
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	2207      	movs	r2, #7
 8013870:	4013      	ands	r3, r2
 8013872:	1c5a      	adds	r2, r3, #1
 8013874:	0013      	movs	r3, r2
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	189b      	adds	r3, r3, r2
 801387a:	00db      	lsls	r3, r3, #3
 801387c:	687a      	ldr	r2, [r7, #4]
 801387e:	18d3      	adds	r3, r2, r3
 8013880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	2201      	movs	r2, #1
 8013886:	705a      	strb	r2, [r3, #1]
 8013888:	e00d      	b.n	80138a6 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801388a:	1cfb      	adds	r3, r7, #3
 801388c:	781a      	ldrb	r2, [r3, #0]
 801388e:	0013      	movs	r3, r2
 8013890:	009b      	lsls	r3, r3, #2
 8013892:	189b      	adds	r3, r3, r2
 8013894:	00db      	lsls	r3, r3, #3
 8013896:	3369      	adds	r3, #105	@ 0x69
 8013898:	33ff      	adds	r3, #255	@ 0xff
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	18d3      	adds	r3, r2, r3
 801389e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2200      	movs	r2, #0
 80138a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	2201      	movs	r2, #1
 80138aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80138ac:	1cfb      	adds	r3, r7, #3
 80138ae:	781b      	ldrb	r3, [r3, #0]
 80138b0:	2207      	movs	r2, #7
 80138b2:	4013      	ands	r3, r2
 80138b4:	b2da      	uxtb	r2, r3
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80138ba:	687a      	ldr	r2, [r7, #4]
 80138bc:	23aa      	movs	r3, #170	@ 0xaa
 80138be:	009b      	lsls	r3, r3, #2
 80138c0:	5cd3      	ldrb	r3, [r2, r3]
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	d101      	bne.n	80138ca <HAL_PCD_EP_SetStall+0x8c>
 80138c6:	2302      	movs	r3, #2
 80138c8:	e011      	b.n	80138ee <HAL_PCD_EP_SetStall+0xb0>
 80138ca:	687a      	ldr	r2, [r7, #4]
 80138cc:	23aa      	movs	r3, #170	@ 0xaa
 80138ce:	009b      	lsls	r3, r3, #2
 80138d0:	2101      	movs	r1, #1
 80138d2:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	68fa      	ldr	r2, [r7, #12]
 80138da:	0011      	movs	r1, r2
 80138dc:	0018      	movs	r0, r3
 80138de:	f007 f9c7 	bl	801ac70 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	23aa      	movs	r3, #170	@ 0xaa
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	2100      	movs	r1, #0
 80138ea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80138ec:	2300      	movs	r3, #0
}
 80138ee:	0018      	movs	r0, r3
 80138f0:	46bd      	mov	sp, r7
 80138f2:	b004      	add	sp, #16
 80138f4:	bd80      	pop	{r7, pc}

080138f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80138f6:	b580      	push	{r7, lr}
 80138f8:	b084      	sub	sp, #16
 80138fa:	af00      	add	r7, sp, #0
 80138fc:	6078      	str	r0, [r7, #4]
 80138fe:	000a      	movs	r2, r1
 8013900:	1cfb      	adds	r3, r7, #3
 8013902:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013904:	1cfb      	adds	r3, r7, #3
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	220f      	movs	r2, #15
 801390a:	401a      	ands	r2, r3
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	685b      	ldr	r3, [r3, #4]
 8013910:	429a      	cmp	r2, r3
 8013912:	d901      	bls.n	8013918 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013914:	2301      	movs	r3, #1
 8013916:	e048      	b.n	80139aa <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013918:	1cfb      	adds	r3, r7, #3
 801391a:	781b      	ldrb	r3, [r3, #0]
 801391c:	b25b      	sxtb	r3, r3
 801391e:	2b00      	cmp	r3, #0
 8013920:	da0f      	bge.n	8013942 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013922:	1cfb      	adds	r3, r7, #3
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	2207      	movs	r2, #7
 8013928:	4013      	ands	r3, r2
 801392a:	1c5a      	adds	r2, r3, #1
 801392c:	0013      	movs	r3, r2
 801392e:	009b      	lsls	r3, r3, #2
 8013930:	189b      	adds	r3, r3, r2
 8013932:	00db      	lsls	r3, r3, #3
 8013934:	687a      	ldr	r2, [r7, #4]
 8013936:	18d3      	adds	r3, r2, r3
 8013938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	2201      	movs	r2, #1
 801393e:	705a      	strb	r2, [r3, #1]
 8013940:	e00f      	b.n	8013962 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013942:	1cfb      	adds	r3, r7, #3
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	2207      	movs	r2, #7
 8013948:	401a      	ands	r2, r3
 801394a:	0013      	movs	r3, r2
 801394c:	009b      	lsls	r3, r3, #2
 801394e:	189b      	adds	r3, r3, r2
 8013950:	00db      	lsls	r3, r3, #3
 8013952:	3369      	adds	r3, #105	@ 0x69
 8013954:	33ff      	adds	r3, #255	@ 0xff
 8013956:	687a      	ldr	r2, [r7, #4]
 8013958:	18d3      	adds	r3, r2, r3
 801395a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	2200      	movs	r2, #0
 8013960:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	2200      	movs	r2, #0
 8013966:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013968:	1cfb      	adds	r3, r7, #3
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	2207      	movs	r2, #7
 801396e:	4013      	ands	r3, r2
 8013970:	b2da      	uxtb	r2, r3
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013976:	687a      	ldr	r2, [r7, #4]
 8013978:	23aa      	movs	r3, #170	@ 0xaa
 801397a:	009b      	lsls	r3, r3, #2
 801397c:	5cd3      	ldrb	r3, [r2, r3]
 801397e:	2b01      	cmp	r3, #1
 8013980:	d101      	bne.n	8013986 <HAL_PCD_EP_ClrStall+0x90>
 8013982:	2302      	movs	r3, #2
 8013984:	e011      	b.n	80139aa <HAL_PCD_EP_ClrStall+0xb4>
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	23aa      	movs	r3, #170	@ 0xaa
 801398a:	009b      	lsls	r3, r3, #2
 801398c:	2101      	movs	r1, #1
 801398e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	68fa      	ldr	r2, [r7, #12]
 8013996:	0011      	movs	r1, r2
 8013998:	0018      	movs	r0, r3
 801399a:	f007 f9b9 	bl	801ad10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801399e:	687a      	ldr	r2, [r7, #4]
 80139a0:	23aa      	movs	r3, #170	@ 0xaa
 80139a2:	009b      	lsls	r3, r3, #2
 80139a4:	2100      	movs	r1, #0
 80139a6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80139a8:	2300      	movs	r3, #0
}
 80139aa:	0018      	movs	r0, r3
 80139ac:	46bd      	mov	sp, r7
 80139ae:	b004      	add	sp, #16
 80139b0:	bd80      	pop	{r7, pc}
	...

080139b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80139b4:	b5b0      	push	{r4, r5, r7, lr}
 80139b6:	b096      	sub	sp, #88	@ 0x58
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80139bc:	f000 fbec 	bl	8014198 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681a      	ldr	r2, [r3, #0]
 80139c4:	204e      	movs	r0, #78	@ 0x4e
 80139c6:	183b      	adds	r3, r7, r0
 80139c8:	2144      	movs	r1, #68	@ 0x44
 80139ca:	5a52      	ldrh	r2, [r2, r1]
 80139cc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80139ce:	183b      	adds	r3, r7, r0
 80139d0:	881b      	ldrh	r3, [r3, #0]
 80139d2:	b2da      	uxtb	r2, r3
 80139d4:	244d      	movs	r4, #77	@ 0x4d
 80139d6:	193b      	adds	r3, r7, r4
 80139d8:	210f      	movs	r1, #15
 80139da:	400a      	ands	r2, r1
 80139dc:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80139de:	193b      	adds	r3, r7, r4
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d000      	beq.n	80139e8 <PCD_EP_ISR_Handler+0x34>
 80139e6:	e18f      	b.n	8013d08 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80139e8:	183b      	adds	r3, r7, r0
 80139ea:	881b      	ldrh	r3, [r3, #0]
 80139ec:	2210      	movs	r2, #16
 80139ee:	4013      	ands	r3, r2
 80139f0:	d155      	bne.n	8013a9e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	881b      	ldrh	r3, [r3, #0]
 80139f8:	b29a      	uxth	r2, r3
 80139fa:	200e      	movs	r0, #14
 80139fc:	183b      	adds	r3, r7, r0
 80139fe:	49bb      	ldr	r1, [pc, #748]	@ (8013cec <PCD_EP_ISR_Handler+0x338>)
 8013a00:	400a      	ands	r2, r1
 8013a02:	801a      	strh	r2, [r3, #0]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	183a      	adds	r2, r7, r0
 8013a0a:	8812      	ldrh	r2, [r2, #0]
 8013a0c:	49b8      	ldr	r1, [pc, #736]	@ (8013cf0 <PCD_EP_ISR_Handler+0x33c>)
 8013a0e:	430a      	orrs	r2, r1
 8013a10:	b292      	uxth	r2, r2
 8013a12:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	3328      	adds	r3, #40	@ 0x28
 8013a18:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	2250      	movs	r2, #80	@ 0x50
 8013a20:	5a9b      	ldrh	r3, [r3, r2]
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	001a      	movs	r2, r3
 8013a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a28:	781b      	ldrb	r3, [r3, #0]
 8013a2a:	00db      	lsls	r3, r3, #3
 8013a2c:	18d2      	adds	r2, r2, r3
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	18d3      	adds	r3, r2, r3
 8013a34:	4aaf      	ldr	r2, [pc, #700]	@ (8013cf4 <PCD_EP_ISR_Handler+0x340>)
 8013a36:	4694      	mov	ip, r2
 8013a38:	4463      	add	r3, ip
 8013a3a:	881b      	ldrh	r3, [r3, #0]
 8013a3c:	059b      	lsls	r3, r3, #22
 8013a3e:	0d9a      	lsrs	r2, r3, #22
 8013a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a42:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a46:	695a      	ldr	r2, [r3, #20]
 8013a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a4a:	69db      	ldr	r3, [r3, #28]
 8013a4c:	18d2      	adds	r2, r2, r3
 8013a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a50:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	2100      	movs	r1, #0
 8013a56:	0018      	movs	r0, r3
 8013a58:	f009 fac8 	bl	801cfec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2224      	movs	r2, #36	@ 0x24
 8013a60:	5c9b      	ldrb	r3, [r3, r2]
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d101      	bne.n	8013a6c <PCD_EP_ISR_Handler+0xb8>
 8013a68:	f000 fb96 	bl	8014198 <PCD_EP_ISR_Handler+0x7e4>
 8013a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a6e:	699b      	ldr	r3, [r3, #24]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d001      	beq.n	8013a78 <PCD_EP_ISR_Handler+0xc4>
 8013a74:	f000 fb90 	bl	8014198 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2224      	movs	r2, #36	@ 0x24
 8013a7c:	5c9b      	ldrb	r3, [r3, r2]
 8013a7e:	b2db      	uxtb	r3, r3
 8013a80:	2280      	movs	r2, #128	@ 0x80
 8013a82:	4252      	negs	r2, r2
 8013a84:	4313      	orrs	r3, r2
 8013a86:	b2da      	uxtb	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	0011      	movs	r1, r2
 8013a8e:	224c      	movs	r2, #76	@ 0x4c
 8013a90:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2224      	movs	r2, #36	@ 0x24
 8013a96:	2100      	movs	r1, #0
 8013a98:	5499      	strb	r1, [r3, r2]
 8013a9a:	f000 fb7d 	bl	8014198 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	3369      	adds	r3, #105	@ 0x69
 8013aa2:	33ff      	adds	r3, #255	@ 0xff
 8013aa4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681a      	ldr	r2, [r3, #0]
 8013aaa:	214a      	movs	r1, #74	@ 0x4a
 8013aac:	187b      	adds	r3, r7, r1
 8013aae:	8812      	ldrh	r2, [r2, #0]
 8013ab0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8013ab2:	187b      	adds	r3, r7, r1
 8013ab4:	881a      	ldrh	r2, [r3, #0]
 8013ab6:	2380      	movs	r3, #128	@ 0x80
 8013ab8:	011b      	lsls	r3, r3, #4
 8013aba:	4013      	ands	r3, r2
 8013abc:	d037      	beq.n	8013b2e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	2250      	movs	r2, #80	@ 0x50
 8013ac4:	5a9b      	ldrh	r3, [r3, r2]
 8013ac6:	b29b      	uxth	r3, r3
 8013ac8:	001a      	movs	r2, r3
 8013aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013acc:	781b      	ldrb	r3, [r3, #0]
 8013ace:	00db      	lsls	r3, r3, #3
 8013ad0:	18d2      	adds	r2, r2, r3
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	18d3      	adds	r3, r2, r3
 8013ad8:	4a87      	ldr	r2, [pc, #540]	@ (8013cf8 <PCD_EP_ISR_Handler+0x344>)
 8013ada:	4694      	mov	ip, r2
 8013adc:	4463      	add	r3, ip
 8013ade:	881b      	ldrh	r3, [r3, #0]
 8013ae0:	059b      	lsls	r3, r3, #22
 8013ae2:	0d9a      	lsrs	r2, r3, #22
 8013ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ae6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6818      	ldr	r0, [r3, #0]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	22ac      	movs	r2, #172	@ 0xac
 8013af0:	0092      	lsls	r2, r2, #2
 8013af2:	1899      	adds	r1, r3, r2
 8013af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013af6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013afa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013afc:	b29b      	uxth	r3, r3
 8013afe:	f007 fa3a 	bl	801af76 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	881b      	ldrh	r3, [r3, #0]
 8013b08:	b29a      	uxth	r2, r3
 8013b0a:	2010      	movs	r0, #16
 8013b0c:	183b      	adds	r3, r7, r0
 8013b0e:	497b      	ldr	r1, [pc, #492]	@ (8013cfc <PCD_EP_ISR_Handler+0x348>)
 8013b10:	400a      	ands	r2, r1
 8013b12:	801a      	strh	r2, [r3, #0]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	183a      	adds	r2, r7, r0
 8013b1a:	8812      	ldrh	r2, [r2, #0]
 8013b1c:	2180      	movs	r1, #128	@ 0x80
 8013b1e:	430a      	orrs	r2, r1
 8013b20:	b292      	uxth	r2, r2
 8013b22:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	0018      	movs	r0, r3
 8013b28:	f009 fa2a 	bl	801cf80 <HAL_PCD_SetupStageCallback>
 8013b2c:	e334      	b.n	8014198 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013b2e:	234a      	movs	r3, #74	@ 0x4a
 8013b30:	18fb      	adds	r3, r7, r3
 8013b32:	2200      	movs	r2, #0
 8013b34:	5e9b      	ldrsh	r3, [r3, r2]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	db00      	blt.n	8013b3c <PCD_EP_ISR_Handler+0x188>
 8013b3a:	e32d      	b.n	8014198 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	881b      	ldrh	r3, [r3, #0]
 8013b42:	b29a      	uxth	r2, r3
 8013b44:	201e      	movs	r0, #30
 8013b46:	183b      	adds	r3, r7, r0
 8013b48:	496c      	ldr	r1, [pc, #432]	@ (8013cfc <PCD_EP_ISR_Handler+0x348>)
 8013b4a:	400a      	ands	r2, r1
 8013b4c:	801a      	strh	r2, [r3, #0]
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	183a      	adds	r2, r7, r0
 8013b54:	8812      	ldrh	r2, [r2, #0]
 8013b56:	2180      	movs	r1, #128	@ 0x80
 8013b58:	430a      	orrs	r2, r1
 8013b5a:	b292      	uxth	r2, r2
 8013b5c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	2250      	movs	r2, #80	@ 0x50
 8013b64:	5a9b      	ldrh	r3, [r3, r2]
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	001a      	movs	r2, r3
 8013b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b6c:	781b      	ldrb	r3, [r3, #0]
 8013b6e:	00db      	lsls	r3, r3, #3
 8013b70:	18d2      	adds	r2, r2, r3
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	18d3      	adds	r3, r2, r3
 8013b78:	4a5f      	ldr	r2, [pc, #380]	@ (8013cf8 <PCD_EP_ISR_Handler+0x344>)
 8013b7a:	4694      	mov	ip, r2
 8013b7c:	4463      	add	r3, ip
 8013b7e:	881b      	ldrh	r3, [r3, #0]
 8013b80:	059b      	lsls	r3, r3, #22
 8013b82:	0d9a      	lsrs	r2, r3, #22
 8013b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b86:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b8a:	69db      	ldr	r3, [r3, #28]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d01a      	beq.n	8013bc6 <PCD_EP_ISR_Handler+0x212>
 8013b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b92:	695b      	ldr	r3, [r3, #20]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d016      	beq.n	8013bc6 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6818      	ldr	r0, [r3, #0]
 8013b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b9e:	6959      	ldr	r1, [r3, #20]
 8013ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ba2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ba6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013ba8:	b29b      	uxth	r3, r3
 8013baa:	f007 f9e4 	bl	801af76 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8013bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bb0:	695a      	ldr	r2, [r3, #20]
 8013bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bb4:	69db      	ldr	r3, [r3, #28]
 8013bb6:	18d2      	adds	r2, r2, r3
 8013bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2100      	movs	r1, #0
 8013bc0:	0018      	movs	r0, r3
 8013bc2:	f009 f9f2 	bl	801cfaa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681a      	ldr	r2, [r3, #0]
 8013bca:	214a      	movs	r1, #74	@ 0x4a
 8013bcc:	187b      	adds	r3, r7, r1
 8013bce:	8812      	ldrh	r2, [r2, #0]
 8013bd0:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013bd2:	187b      	adds	r3, r7, r1
 8013bd4:	881a      	ldrh	r2, [r3, #0]
 8013bd6:	2380      	movs	r3, #128	@ 0x80
 8013bd8:	011b      	lsls	r3, r3, #4
 8013bda:	4013      	ands	r3, r2
 8013bdc:	d000      	beq.n	8013be0 <PCD_EP_ISR_Handler+0x22c>
 8013bde:	e2db      	b.n	8014198 <PCD_EP_ISR_Handler+0x7e4>
 8013be0:	187b      	adds	r3, r7, r1
 8013be2:	881a      	ldrh	r2, [r3, #0]
 8013be4:	23c0      	movs	r3, #192	@ 0xc0
 8013be6:	019b      	lsls	r3, r3, #6
 8013be8:	401a      	ands	r2, r3
 8013bea:	23c0      	movs	r3, #192	@ 0xc0
 8013bec:	019b      	lsls	r3, r3, #6
 8013bee:	429a      	cmp	r2, r3
 8013bf0:	d100      	bne.n	8013bf4 <PCD_EP_ISR_Handler+0x240>
 8013bf2:	e2d1      	b.n	8014198 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	61bb      	str	r3, [r7, #24]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2250      	movs	r2, #80	@ 0x50
 8013c00:	5a9b      	ldrh	r3, [r3, r2]
 8013c02:	b29b      	uxth	r3, r3
 8013c04:	001a      	movs	r2, r3
 8013c06:	69bb      	ldr	r3, [r7, #24]
 8013c08:	189b      	adds	r3, r3, r2
 8013c0a:	61bb      	str	r3, [r7, #24]
 8013c0c:	69bb      	ldr	r3, [r7, #24]
 8013c0e:	4a3a      	ldr	r2, [pc, #232]	@ (8013cf8 <PCD_EP_ISR_Handler+0x344>)
 8013c10:	4694      	mov	ip, r2
 8013c12:	4463      	add	r3, ip
 8013c14:	617b      	str	r3, [r7, #20]
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	881b      	ldrh	r3, [r3, #0]
 8013c1a:	b29b      	uxth	r3, r3
 8013c1c:	059b      	lsls	r3, r3, #22
 8013c1e:	0d9b      	lsrs	r3, r3, #22
 8013c20:	b29a      	uxth	r2, r3
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	801a      	strh	r2, [r3, #0]
 8013c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c28:	691b      	ldr	r3, [r3, #16]
 8013c2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8013c2c:	d91a      	bls.n	8013c64 <PCD_EP_ISR_Handler+0x2b0>
 8013c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c30:	691b      	ldr	r3, [r3, #16]
 8013c32:	095b      	lsrs	r3, r3, #5
 8013c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c38:	691b      	ldr	r3, [r3, #16]
 8013c3a:	221f      	movs	r2, #31
 8013c3c:	4013      	ands	r3, r2
 8013c3e:	d102      	bne.n	8013c46 <PCD_EP_ISR_Handler+0x292>
 8013c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c42:	3b01      	subs	r3, #1
 8013c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c46:	697b      	ldr	r3, [r7, #20]
 8013c48:	881b      	ldrh	r3, [r3, #0]
 8013c4a:	b29a      	uxth	r2, r3
 8013c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c4e:	b29b      	uxth	r3, r3
 8013c50:	029b      	lsls	r3, r3, #10
 8013c52:	b29b      	uxth	r3, r3
 8013c54:	4313      	orrs	r3, r2
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	4a25      	ldr	r2, [pc, #148]	@ (8013cf0 <PCD_EP_ISR_Handler+0x33c>)
 8013c5a:	4313      	orrs	r3, r2
 8013c5c:	b29a      	uxth	r2, r3
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	801a      	strh	r2, [r3, #0]
 8013c62:	e023      	b.n	8013cac <PCD_EP_ISR_Handler+0x2f8>
 8013c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c66:	691b      	ldr	r3, [r3, #16]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d108      	bne.n	8013c7e <PCD_EP_ISR_Handler+0x2ca>
 8013c6c:	697b      	ldr	r3, [r7, #20]
 8013c6e:	881b      	ldrh	r3, [r3, #0]
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	4a1f      	ldr	r2, [pc, #124]	@ (8013cf0 <PCD_EP_ISR_Handler+0x33c>)
 8013c74:	4313      	orrs	r3, r2
 8013c76:	b29a      	uxth	r2, r3
 8013c78:	697b      	ldr	r3, [r7, #20]
 8013c7a:	801a      	strh	r2, [r3, #0]
 8013c7c:	e016      	b.n	8013cac <PCD_EP_ISR_Handler+0x2f8>
 8013c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c80:	691b      	ldr	r3, [r3, #16]
 8013c82:	085b      	lsrs	r3, r3, #1
 8013c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c88:	691b      	ldr	r3, [r3, #16]
 8013c8a:	2201      	movs	r2, #1
 8013c8c:	4013      	ands	r3, r2
 8013c8e:	d002      	beq.n	8013c96 <PCD_EP_ISR_Handler+0x2e2>
 8013c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c92:	3301      	adds	r3, #1
 8013c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	881b      	ldrh	r3, [r3, #0]
 8013c9a:	b29a      	uxth	r2, r3
 8013c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c9e:	b29b      	uxth	r3, r3
 8013ca0:	029b      	lsls	r3, r3, #10
 8013ca2:	b29b      	uxth	r3, r3
 8013ca4:	4313      	orrs	r3, r2
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	881b      	ldrh	r3, [r3, #0]
 8013cb2:	b29a      	uxth	r2, r3
 8013cb4:	2012      	movs	r0, #18
 8013cb6:	183b      	adds	r3, r7, r0
 8013cb8:	4911      	ldr	r1, [pc, #68]	@ (8013d00 <PCD_EP_ISR_Handler+0x34c>)
 8013cba:	400a      	ands	r2, r1
 8013cbc:	801a      	strh	r2, [r3, #0]
 8013cbe:	183b      	adds	r3, r7, r0
 8013cc0:	183a      	adds	r2, r7, r0
 8013cc2:	8812      	ldrh	r2, [r2, #0]
 8013cc4:	2180      	movs	r1, #128	@ 0x80
 8013cc6:	0149      	lsls	r1, r1, #5
 8013cc8:	404a      	eors	r2, r1
 8013cca:	801a      	strh	r2, [r3, #0]
 8013ccc:	183b      	adds	r3, r7, r0
 8013cce:	183a      	adds	r2, r7, r0
 8013cd0:	8812      	ldrh	r2, [r2, #0]
 8013cd2:	2180      	movs	r1, #128	@ 0x80
 8013cd4:	0189      	lsls	r1, r1, #6
 8013cd6:	404a      	eors	r2, r1
 8013cd8:	801a      	strh	r2, [r3, #0]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	183a      	adds	r2, r7, r0
 8013ce0:	8812      	ldrh	r2, [r2, #0]
 8013ce2:	4908      	ldr	r1, [pc, #32]	@ (8013d04 <PCD_EP_ISR_Handler+0x350>)
 8013ce4:	430a      	orrs	r2, r1
 8013ce6:	b292      	uxth	r2, r2
 8013ce8:	801a      	strh	r2, [r3, #0]
 8013cea:	e255      	b.n	8014198 <PCD_EP_ISR_Handler+0x7e4>
 8013cec:	ffff8f0f 	.word	0xffff8f0f
 8013cf0:	ffff8000 	.word	0xffff8000
 8013cf4:	00000402 	.word	0x00000402
 8013cf8:	00000406 	.word	0x00000406
 8013cfc:	00000f8f 	.word	0x00000f8f
 8013d00:	ffffbf8f 	.word	0xffffbf8f
 8013d04:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	001a      	movs	r2, r3
 8013d0e:	204d      	movs	r0, #77	@ 0x4d
 8013d10:	183b      	adds	r3, r7, r0
 8013d12:	781b      	ldrb	r3, [r3, #0]
 8013d14:	009b      	lsls	r3, r3, #2
 8013d16:	18d2      	adds	r2, r2, r3
 8013d18:	214a      	movs	r1, #74	@ 0x4a
 8013d1a:	187b      	adds	r3, r7, r1
 8013d1c:	8812      	ldrh	r2, [r2, #0]
 8013d1e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013d20:	187b      	adds	r3, r7, r1
 8013d22:	2200      	movs	r2, #0
 8013d24:	5e9b      	ldrsh	r3, [r3, r2]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	db00      	blt.n	8013d2c <PCD_EP_ISR_Handler+0x378>
 8013d2a:	e0fa      	b.n	8013f22 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	001a      	movs	r2, r3
 8013d32:	183b      	adds	r3, r7, r0
 8013d34:	781b      	ldrb	r3, [r3, #0]
 8013d36:	009b      	lsls	r3, r3, #2
 8013d38:	18d3      	adds	r3, r2, r3
 8013d3a:	881b      	ldrh	r3, [r3, #0]
 8013d3c:	b29a      	uxth	r2, r3
 8013d3e:	2448      	movs	r4, #72	@ 0x48
 8013d40:	193b      	adds	r3, r7, r4
 8013d42:	49d1      	ldr	r1, [pc, #836]	@ (8014088 <PCD_EP_ISR_Handler+0x6d4>)
 8013d44:	400a      	ands	r2, r1
 8013d46:	801a      	strh	r2, [r3, #0]
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	001a      	movs	r2, r3
 8013d4e:	183b      	adds	r3, r7, r0
 8013d50:	781b      	ldrb	r3, [r3, #0]
 8013d52:	009b      	lsls	r3, r3, #2
 8013d54:	18d3      	adds	r3, r2, r3
 8013d56:	193a      	adds	r2, r7, r4
 8013d58:	8812      	ldrh	r2, [r2, #0]
 8013d5a:	2180      	movs	r1, #128	@ 0x80
 8013d5c:	430a      	orrs	r2, r1
 8013d5e:	b292      	uxth	r2, r2
 8013d60:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8013d62:	183b      	adds	r3, r7, r0
 8013d64:	781a      	ldrb	r2, [r3, #0]
 8013d66:	0013      	movs	r3, r2
 8013d68:	009b      	lsls	r3, r3, #2
 8013d6a:	189b      	adds	r3, r3, r2
 8013d6c:	00db      	lsls	r3, r3, #3
 8013d6e:	3369      	adds	r3, #105	@ 0x69
 8013d70:	33ff      	adds	r3, #255	@ 0xff
 8013d72:	687a      	ldr	r2, [r7, #4]
 8013d74:	18d3      	adds	r3, r2, r3
 8013d76:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8013d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d7a:	7b1b      	ldrb	r3, [r3, #12]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d125      	bne.n	8013dcc <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2250      	movs	r2, #80	@ 0x50
 8013d86:	5a9b      	ldrh	r3, [r3, r2]
 8013d88:	b29b      	uxth	r3, r3
 8013d8a:	001a      	movs	r2, r3
 8013d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d8e:	781b      	ldrb	r3, [r3, #0]
 8013d90:	00db      	lsls	r3, r3, #3
 8013d92:	18d2      	adds	r2, r2, r3
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	18d3      	adds	r3, r2, r3
 8013d9a:	4abc      	ldr	r2, [pc, #752]	@ (801408c <PCD_EP_ISR_Handler+0x6d8>)
 8013d9c:	4694      	mov	ip, r2
 8013d9e:	4463      	add	r3, ip
 8013da0:	881a      	ldrh	r2, [r3, #0]
 8013da2:	2450      	movs	r4, #80	@ 0x50
 8013da4:	193b      	adds	r3, r7, r4
 8013da6:	0592      	lsls	r2, r2, #22
 8013da8:	0d92      	lsrs	r2, r2, #22
 8013daa:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8013dac:	193b      	adds	r3, r7, r4
 8013dae:	881b      	ldrh	r3, [r3, #0]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d100      	bne.n	8013db6 <PCD_EP_ISR_Handler+0x402>
 8013db4:	e08d      	b.n	8013ed2 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6818      	ldr	r0, [r3, #0]
 8013dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dbc:	6959      	ldr	r1, [r3, #20]
 8013dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dc0:	88da      	ldrh	r2, [r3, #6]
 8013dc2:	193b      	adds	r3, r7, r4
 8013dc4:	881b      	ldrh	r3, [r3, #0]
 8013dc6:	f007 f8d6 	bl	801af76 <USB_ReadPMA>
 8013dca:	e082      	b.n	8013ed2 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8013dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dce:	78db      	ldrb	r3, [r3, #3]
 8013dd0:	2b02      	cmp	r3, #2
 8013dd2:	d10c      	bne.n	8013dee <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8013dd4:	2350      	movs	r3, #80	@ 0x50
 8013dd6:	18fc      	adds	r4, r7, r3
 8013dd8:	234a      	movs	r3, #74	@ 0x4a
 8013dda:	18fb      	adds	r3, r7, r3
 8013ddc:	881a      	ldrh	r2, [r3, #0]
 8013dde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	0018      	movs	r0, r3
 8013de4:	f000 f9ec 	bl	80141c0 <HAL_PCD_EP_DB_Receive>
 8013de8:	0003      	movs	r3, r0
 8013dea:	8023      	strh	r3, [r4, #0]
 8013dec:	e071      	b.n	8013ed2 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	001a      	movs	r2, r3
 8013df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013df6:	781b      	ldrb	r3, [r3, #0]
 8013df8:	009b      	lsls	r3, r3, #2
 8013dfa:	18d3      	adds	r3, r2, r3
 8013dfc:	881b      	ldrh	r3, [r3, #0]
 8013dfe:	b29a      	uxth	r2, r3
 8013e00:	2052      	movs	r0, #82	@ 0x52
 8013e02:	183b      	adds	r3, r7, r0
 8013e04:	49a2      	ldr	r1, [pc, #648]	@ (8014090 <PCD_EP_ISR_Handler+0x6dc>)
 8013e06:	400a      	ands	r2, r1
 8013e08:	801a      	strh	r2, [r3, #0]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	001a      	movs	r2, r3
 8013e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	009b      	lsls	r3, r3, #2
 8013e16:	18d3      	adds	r3, r2, r3
 8013e18:	183a      	adds	r2, r7, r0
 8013e1a:	8812      	ldrh	r2, [r2, #0]
 8013e1c:	499d      	ldr	r1, [pc, #628]	@ (8014094 <PCD_EP_ISR_Handler+0x6e0>)
 8013e1e:	430a      	orrs	r2, r1
 8013e20:	b292      	uxth	r2, r2
 8013e22:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	001a      	movs	r2, r3
 8013e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e2c:	781b      	ldrb	r3, [r3, #0]
 8013e2e:	009b      	lsls	r3, r3, #2
 8013e30:	18d3      	adds	r3, r2, r3
 8013e32:	881b      	ldrh	r3, [r3, #0]
 8013e34:	b29b      	uxth	r3, r3
 8013e36:	001a      	movs	r2, r3
 8013e38:	2380      	movs	r3, #128	@ 0x80
 8013e3a:	01db      	lsls	r3, r3, #7
 8013e3c:	4013      	ands	r3, r2
 8013e3e:	d024      	beq.n	8013e8a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	2250      	movs	r2, #80	@ 0x50
 8013e46:	5a9b      	ldrh	r3, [r3, r2]
 8013e48:	b29b      	uxth	r3, r3
 8013e4a:	001a      	movs	r2, r3
 8013e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	00db      	lsls	r3, r3, #3
 8013e52:	18d2      	adds	r2, r2, r3
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	18d3      	adds	r3, r2, r3
 8013e5a:	4a8f      	ldr	r2, [pc, #572]	@ (8014098 <PCD_EP_ISR_Handler+0x6e4>)
 8013e5c:	4694      	mov	ip, r2
 8013e5e:	4463      	add	r3, ip
 8013e60:	881a      	ldrh	r2, [r3, #0]
 8013e62:	2450      	movs	r4, #80	@ 0x50
 8013e64:	193b      	adds	r3, r7, r4
 8013e66:	0592      	lsls	r2, r2, #22
 8013e68:	0d92      	lsrs	r2, r2, #22
 8013e6a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013e6c:	193b      	adds	r3, r7, r4
 8013e6e:	881b      	ldrh	r3, [r3, #0]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d02e      	beq.n	8013ed2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	6818      	ldr	r0, [r3, #0]
 8013e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e7a:	6959      	ldr	r1, [r3, #20]
 8013e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e7e:	891a      	ldrh	r2, [r3, #8]
 8013e80:	193b      	adds	r3, r7, r4
 8013e82:	881b      	ldrh	r3, [r3, #0]
 8013e84:	f007 f877 	bl	801af76 <USB_ReadPMA>
 8013e88:	e023      	b.n	8013ed2 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	2250      	movs	r2, #80	@ 0x50
 8013e90:	5a9b      	ldrh	r3, [r3, r2]
 8013e92:	b29b      	uxth	r3, r3
 8013e94:	001a      	movs	r2, r3
 8013e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e98:	781b      	ldrb	r3, [r3, #0]
 8013e9a:	00db      	lsls	r3, r3, #3
 8013e9c:	18d2      	adds	r2, r2, r3
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	18d3      	adds	r3, r2, r3
 8013ea4:	4a79      	ldr	r2, [pc, #484]	@ (801408c <PCD_EP_ISR_Handler+0x6d8>)
 8013ea6:	4694      	mov	ip, r2
 8013ea8:	4463      	add	r3, ip
 8013eaa:	881a      	ldrh	r2, [r3, #0]
 8013eac:	2450      	movs	r4, #80	@ 0x50
 8013eae:	193b      	adds	r3, r7, r4
 8013eb0:	0592      	lsls	r2, r2, #22
 8013eb2:	0d92      	lsrs	r2, r2, #22
 8013eb4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013eb6:	193b      	adds	r3, r7, r4
 8013eb8:	881b      	ldrh	r3, [r3, #0]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d009      	beq.n	8013ed2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	6818      	ldr	r0, [r3, #0]
 8013ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ec4:	6959      	ldr	r1, [r3, #20]
 8013ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ec8:	895a      	ldrh	r2, [r3, #10]
 8013eca:	193b      	adds	r3, r7, r4
 8013ecc:	881b      	ldrh	r3, [r3, #0]
 8013ece:	f007 f852 	bl	801af76 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8013ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ed4:	69da      	ldr	r2, [r3, #28]
 8013ed6:	2150      	movs	r1, #80	@ 0x50
 8013ed8:	187b      	adds	r3, r7, r1
 8013eda:	881b      	ldrh	r3, [r3, #0]
 8013edc:	18d2      	adds	r2, r2, r3
 8013ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ee0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8013ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ee4:	695a      	ldr	r2, [r3, #20]
 8013ee6:	187b      	adds	r3, r7, r1
 8013ee8:	881b      	ldrh	r3, [r3, #0]
 8013eea:	18d2      	adds	r2, r2, r3
 8013eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013eee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8013ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ef2:	699b      	ldr	r3, [r3, #24]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d005      	beq.n	8013f04 <PCD_EP_ISR_Handler+0x550>
 8013ef8:	187b      	adds	r3, r7, r1
 8013efa:	881a      	ldrh	r2, [r3, #0]
 8013efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013efe:	691b      	ldr	r3, [r3, #16]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d207      	bcs.n	8013f14 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8013f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f06:	781a      	ldrb	r2, [r3, #0]
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	0011      	movs	r1, r2
 8013f0c:	0018      	movs	r0, r3
 8013f0e:	f009 f84c 	bl	801cfaa <HAL_PCD_DataOutStageCallback>
 8013f12:	e006      	b.n	8013f22 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f1a:	0011      	movs	r1, r2
 8013f1c:	0018      	movs	r0, r3
 8013f1e:	f005 fd6f 	bl	8019a00 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8013f22:	244a      	movs	r4, #74	@ 0x4a
 8013f24:	193b      	adds	r3, r7, r4
 8013f26:	881b      	ldrh	r3, [r3, #0]
 8013f28:	2280      	movs	r2, #128	@ 0x80
 8013f2a:	4013      	ands	r3, r2
 8013f2c:	d100      	bne.n	8013f30 <PCD_EP_ISR_Handler+0x57c>
 8013f2e:	e133      	b.n	8014198 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8013f30:	204d      	movs	r0, #77	@ 0x4d
 8013f32:	183b      	adds	r3, r7, r0
 8013f34:	781b      	ldrb	r3, [r3, #0]
 8013f36:	1c5a      	adds	r2, r3, #1
 8013f38:	0013      	movs	r3, r2
 8013f3a:	009b      	lsls	r3, r3, #2
 8013f3c:	189b      	adds	r3, r3, r2
 8013f3e:	00db      	lsls	r3, r3, #3
 8013f40:	687a      	ldr	r2, [r7, #4]
 8013f42:	18d3      	adds	r3, r2, r3
 8013f44:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	001a      	movs	r2, r3
 8013f4c:	183b      	adds	r3, r7, r0
 8013f4e:	781b      	ldrb	r3, [r3, #0]
 8013f50:	009b      	lsls	r3, r3, #2
 8013f52:	18d3      	adds	r3, r2, r3
 8013f54:	881b      	ldrh	r3, [r3, #0]
 8013f56:	b29a      	uxth	r2, r3
 8013f58:	2542      	movs	r5, #66	@ 0x42
 8013f5a:	197b      	adds	r3, r7, r5
 8013f5c:	494f      	ldr	r1, [pc, #316]	@ (801409c <PCD_EP_ISR_Handler+0x6e8>)
 8013f5e:	400a      	ands	r2, r1
 8013f60:	801a      	strh	r2, [r3, #0]
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	001a      	movs	r2, r3
 8013f68:	183b      	adds	r3, r7, r0
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	009b      	lsls	r3, r3, #2
 8013f6e:	18d3      	adds	r3, r2, r3
 8013f70:	197a      	adds	r2, r7, r5
 8013f72:	8812      	ldrh	r2, [r2, #0]
 8013f74:	494a      	ldr	r1, [pc, #296]	@ (80140a0 <PCD_EP_ISR_Handler+0x6ec>)
 8013f76:	430a      	orrs	r2, r1
 8013f78:	b292      	uxth	r2, r2
 8013f7a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8013f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f7e:	78db      	ldrb	r3, [r3, #3]
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	d000      	beq.n	8013f86 <PCD_EP_ISR_Handler+0x5d2>
 8013f84:	e0af      	b.n	80140e6 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8013f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f88:	2200      	movs	r2, #0
 8013f8a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8013f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f8e:	7b1b      	ldrb	r3, [r3, #12]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d100      	bne.n	8013f96 <PCD_EP_ISR_Handler+0x5e2>
 8013f94:	e09f      	b.n	80140d6 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013f96:	193b      	adds	r3, r7, r4
 8013f98:	881b      	ldrh	r3, [r3, #0]
 8013f9a:	2240      	movs	r2, #64	@ 0x40
 8013f9c:	4013      	ands	r3, r2
 8013f9e:	d046      	beq.n	801402e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fa2:	785b      	ldrb	r3, [r3, #1]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d125      	bne.n	8013ff4 <PCD_EP_ISR_Handler+0x640>
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	2250      	movs	r2, #80	@ 0x50
 8013fb4:	5a9b      	ldrh	r3, [r3, r2]
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	001a      	movs	r2, r3
 8013fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fbc:	189b      	adds	r3, r3, r2
 8013fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8013fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	00da      	lsls	r2, r3, #3
 8013fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fc8:	18d3      	adds	r3, r2, r3
 8013fca:	4a33      	ldr	r2, [pc, #204]	@ (8014098 <PCD_EP_ISR_Handler+0x6e4>)
 8013fcc:	4694      	mov	ip, r2
 8013fce:	4463      	add	r3, ip
 8013fd0:	623b      	str	r3, [r7, #32]
 8013fd2:	6a3b      	ldr	r3, [r7, #32]
 8013fd4:	881b      	ldrh	r3, [r3, #0]
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	059b      	lsls	r3, r3, #22
 8013fda:	0d9b      	lsrs	r3, r3, #22
 8013fdc:	b29a      	uxth	r2, r3
 8013fde:	6a3b      	ldr	r3, [r7, #32]
 8013fe0:	801a      	strh	r2, [r3, #0]
 8013fe2:	6a3b      	ldr	r3, [r7, #32]
 8013fe4:	881b      	ldrh	r3, [r3, #0]
 8013fe6:	b29b      	uxth	r3, r3
 8013fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80140a0 <PCD_EP_ISR_Handler+0x6ec>)
 8013fea:	4313      	orrs	r3, r2
 8013fec:	b29a      	uxth	r2, r3
 8013fee:	6a3b      	ldr	r3, [r7, #32]
 8013ff0:	801a      	strh	r2, [r3, #0]
 8013ff2:	e070      	b.n	80140d6 <PCD_EP_ISR_Handler+0x722>
 8013ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ff6:	785b      	ldrb	r3, [r3, #1]
 8013ff8:	2b01      	cmp	r3, #1
 8013ffa:	d16c      	bne.n	80140d6 <PCD_EP_ISR_Handler+0x722>
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	2250      	movs	r2, #80	@ 0x50
 8014008:	5a9b      	ldrh	r3, [r3, r2]
 801400a:	b29b      	uxth	r3, r3
 801400c:	001a      	movs	r2, r3
 801400e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014010:	189b      	adds	r3, r3, r2
 8014012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014016:	781b      	ldrb	r3, [r3, #0]
 8014018:	00da      	lsls	r2, r3, #3
 801401a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801401c:	18d3      	adds	r3, r2, r3
 801401e:	4a1e      	ldr	r2, [pc, #120]	@ (8014098 <PCD_EP_ISR_Handler+0x6e4>)
 8014020:	4694      	mov	ip, r2
 8014022:	4463      	add	r3, ip
 8014024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014028:	2200      	movs	r2, #0
 801402a:	801a      	strh	r2, [r3, #0]
 801402c:	e053      	b.n	80140d6 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014036:	785b      	ldrb	r3, [r3, #1]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d133      	bne.n	80140a4 <PCD_EP_ISR_Handler+0x6f0>
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	637b      	str	r3, [r7, #52]	@ 0x34
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	2250      	movs	r2, #80	@ 0x50
 8014048:	5a9b      	ldrh	r3, [r3, r2]
 801404a:	b29b      	uxth	r3, r3
 801404c:	001a      	movs	r2, r3
 801404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014050:	189b      	adds	r3, r3, r2
 8014052:	637b      	str	r3, [r7, #52]	@ 0x34
 8014054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	00da      	lsls	r2, r3, #3
 801405a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801405c:	18d3      	adds	r3, r2, r3
 801405e:	4a0b      	ldr	r2, [pc, #44]	@ (801408c <PCD_EP_ISR_Handler+0x6d8>)
 8014060:	4694      	mov	ip, r2
 8014062:	4463      	add	r3, ip
 8014064:	633b      	str	r3, [r7, #48]	@ 0x30
 8014066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014068:	881b      	ldrh	r3, [r3, #0]
 801406a:	b29b      	uxth	r3, r3
 801406c:	059b      	lsls	r3, r3, #22
 801406e:	0d9b      	lsrs	r3, r3, #22
 8014070:	b29a      	uxth	r2, r3
 8014072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014074:	801a      	strh	r2, [r3, #0]
 8014076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014078:	881b      	ldrh	r3, [r3, #0]
 801407a:	b29b      	uxth	r3, r3
 801407c:	4a08      	ldr	r2, [pc, #32]	@ (80140a0 <PCD_EP_ISR_Handler+0x6ec>)
 801407e:	4313      	orrs	r3, r2
 8014080:	b29a      	uxth	r2, r3
 8014082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014084:	801a      	strh	r2, [r3, #0]
 8014086:	e026      	b.n	80140d6 <PCD_EP_ISR_Handler+0x722>
 8014088:	00000f8f 	.word	0x00000f8f
 801408c:	00000406 	.word	0x00000406
 8014090:	ffff8f8f 	.word	0xffff8f8f
 8014094:	ffff80c0 	.word	0xffff80c0
 8014098:	00000402 	.word	0x00000402
 801409c:	ffff8f0f 	.word	0xffff8f0f
 80140a0:	ffff8000 	.word	0xffff8000
 80140a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140a6:	785b      	ldrb	r3, [r3, #1]
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d114      	bne.n	80140d6 <PCD_EP_ISR_Handler+0x722>
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	2250      	movs	r2, #80	@ 0x50
 80140b2:	5a9b      	ldrh	r3, [r3, r2]
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	001a      	movs	r2, r3
 80140b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140ba:	189b      	adds	r3, r3, r2
 80140bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80140be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140c0:	781b      	ldrb	r3, [r3, #0]
 80140c2:	00da      	lsls	r2, r3, #3
 80140c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80140c6:	18d3      	adds	r3, r2, r3
 80140c8:	4a3b      	ldr	r2, [pc, #236]	@ (80141b8 <PCD_EP_ISR_Handler+0x804>)
 80140ca:	4694      	mov	ip, r2
 80140cc:	4463      	add	r3, ip
 80140ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80140d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140d2:	2200      	movs	r2, #0
 80140d4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80140d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140d8:	781a      	ldrb	r2, [r3, #0]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	0011      	movs	r1, r2
 80140de:	0018      	movs	r0, r3
 80140e0:	f008 ff84 	bl	801cfec <HAL_PCD_DataInStageCallback>
 80140e4:	e058      	b.n	8014198 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80140e6:	234a      	movs	r3, #74	@ 0x4a
 80140e8:	18fb      	adds	r3, r7, r3
 80140ea:	881a      	ldrh	r2, [r3, #0]
 80140ec:	2380      	movs	r3, #128	@ 0x80
 80140ee:	005b      	lsls	r3, r3, #1
 80140f0:	4013      	ands	r3, r2
 80140f2:	d149      	bne.n	8014188 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	2250      	movs	r2, #80	@ 0x50
 80140fa:	5a9b      	ldrh	r3, [r3, r2]
 80140fc:	b29b      	uxth	r3, r3
 80140fe:	001a      	movs	r2, r3
 8014100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	00db      	lsls	r3, r3, #3
 8014106:	18d2      	adds	r2, r2, r3
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	18d3      	adds	r3, r2, r3
 801410e:	4a2b      	ldr	r2, [pc, #172]	@ (80141bc <PCD_EP_ISR_Handler+0x808>)
 8014110:	4694      	mov	ip, r2
 8014112:	4463      	add	r3, ip
 8014114:	881a      	ldrh	r2, [r3, #0]
 8014116:	2140      	movs	r1, #64	@ 0x40
 8014118:	187b      	adds	r3, r7, r1
 801411a:	0592      	lsls	r2, r2, #22
 801411c:	0d92      	lsrs	r2, r2, #22
 801411e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8014120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014122:	699a      	ldr	r2, [r3, #24]
 8014124:	187b      	adds	r3, r7, r1
 8014126:	881b      	ldrh	r3, [r3, #0]
 8014128:	429a      	cmp	r2, r3
 801412a:	d907      	bls.n	801413c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801412c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801412e:	699a      	ldr	r2, [r3, #24]
 8014130:	187b      	adds	r3, r7, r1
 8014132:	881b      	ldrh	r3, [r3, #0]
 8014134:	1ad2      	subs	r2, r2, r3
 8014136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014138:	619a      	str	r2, [r3, #24]
 801413a:	e002      	b.n	8014142 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801413c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801413e:	2200      	movs	r2, #0
 8014140:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8014142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014144:	699b      	ldr	r3, [r3, #24]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d107      	bne.n	801415a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801414a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801414c:	781a      	ldrb	r2, [r3, #0]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	0011      	movs	r1, r2
 8014152:	0018      	movs	r0, r3
 8014154:	f008 ff4a 	bl	801cfec <HAL_PCD_DataInStageCallback>
 8014158:	e01e      	b.n	8014198 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801415a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801415c:	695a      	ldr	r2, [r3, #20]
 801415e:	2140      	movs	r1, #64	@ 0x40
 8014160:	187b      	adds	r3, r7, r1
 8014162:	881b      	ldrh	r3, [r3, #0]
 8014164:	18d2      	adds	r2, r2, r3
 8014166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014168:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801416a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801416c:	69da      	ldr	r2, [r3, #28]
 801416e:	187b      	adds	r3, r7, r1
 8014170:	881b      	ldrh	r3, [r3, #0]
 8014172:	18d2      	adds	r2, r2, r3
 8014174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014176:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801417e:	0011      	movs	r1, r2
 8014180:	0018      	movs	r0, r3
 8014182:	f005 fc3d 	bl	8019a00 <USB_EPStartXfer>
 8014186:	e007      	b.n	8014198 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8014188:	234a      	movs	r3, #74	@ 0x4a
 801418a:	18fb      	adds	r3, r7, r3
 801418c:	881a      	ldrh	r2, [r3, #0]
 801418e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	0018      	movs	r0, r3
 8014194:	f000 f930 	bl	80143f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2244      	movs	r2, #68	@ 0x44
 801419e:	5a9b      	ldrh	r3, [r3, r2]
 80141a0:	b29b      	uxth	r3, r3
 80141a2:	b21b      	sxth	r3, r3
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	da01      	bge.n	80141ac <PCD_EP_ISR_Handler+0x7f8>
 80141a8:	f7ff fc0a 	bl	80139c0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80141ac:	2300      	movs	r3, #0
}
 80141ae:	0018      	movs	r0, r3
 80141b0:	46bd      	mov	sp, r7
 80141b2:	b016      	add	sp, #88	@ 0x58
 80141b4:	bdb0      	pop	{r4, r5, r7, pc}
 80141b6:	46c0      	nop			@ (mov r8, r8)
 80141b8:	00000406 	.word	0x00000406
 80141bc:	00000402 	.word	0x00000402

080141c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80141c0:	b590      	push	{r4, r7, lr}
 80141c2:	b089      	sub	sp, #36	@ 0x24
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	60b9      	str	r1, [r7, #8]
 80141ca:	1dbb      	adds	r3, r7, #6
 80141cc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80141ce:	1dbb      	adds	r3, r7, #6
 80141d0:	881a      	ldrh	r2, [r3, #0]
 80141d2:	2380      	movs	r3, #128	@ 0x80
 80141d4:	01db      	lsls	r3, r3, #7
 80141d6:	4013      	ands	r3, r2
 80141d8:	d100      	bne.n	80141dc <HAL_PCD_EP_DB_Receive+0x1c>
 80141da:	e07d      	b.n	80142d8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	2250      	movs	r2, #80	@ 0x50
 80141e2:	5a9b      	ldrh	r3, [r3, r2]
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	001a      	movs	r2, r3
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	781b      	ldrb	r3, [r3, #0]
 80141ec:	00db      	lsls	r3, r3, #3
 80141ee:	18d2      	adds	r2, r2, r3
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	18d3      	adds	r3, r2, r3
 80141f6:	4a7a      	ldr	r2, [pc, #488]	@ (80143e0 <HAL_PCD_EP_DB_Receive+0x220>)
 80141f8:	4694      	mov	ip, r2
 80141fa:	4463      	add	r3, ip
 80141fc:	881a      	ldrh	r2, [r3, #0]
 80141fe:	211a      	movs	r1, #26
 8014200:	187b      	adds	r3, r7, r1
 8014202:	0592      	lsls	r2, r2, #22
 8014204:	0d92      	lsrs	r2, r2, #22
 8014206:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	699a      	ldr	r2, [r3, #24]
 801420c:	187b      	adds	r3, r7, r1
 801420e:	881b      	ldrh	r3, [r3, #0]
 8014210:	429a      	cmp	r2, r3
 8014212:	d307      	bcc.n	8014224 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	699a      	ldr	r2, [r3, #24]
 8014218:	187b      	adds	r3, r7, r1
 801421a:	881b      	ldrh	r3, [r3, #0]
 801421c:	1ad2      	subs	r2, r2, r3
 801421e:	68bb      	ldr	r3, [r7, #8]
 8014220:	619a      	str	r2, [r3, #24]
 8014222:	e002      	b.n	801422a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	2200      	movs	r2, #0
 8014228:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	699b      	ldr	r3, [r3, #24]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d121      	bne.n	8014276 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	001a      	movs	r2, r3
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	781b      	ldrb	r3, [r3, #0]
 801423c:	009b      	lsls	r3, r3, #2
 801423e:	18d3      	adds	r3, r2, r3
 8014240:	881b      	ldrh	r3, [r3, #0]
 8014242:	b29a      	uxth	r2, r3
 8014244:	2018      	movs	r0, #24
 8014246:	183b      	adds	r3, r7, r0
 8014248:	4966      	ldr	r1, [pc, #408]	@ (80143e4 <HAL_PCD_EP_DB_Receive+0x224>)
 801424a:	400a      	ands	r2, r1
 801424c:	801a      	strh	r2, [r3, #0]
 801424e:	183b      	adds	r3, r7, r0
 8014250:	183a      	adds	r2, r7, r0
 8014252:	8812      	ldrh	r2, [r2, #0]
 8014254:	2180      	movs	r1, #128	@ 0x80
 8014256:	0189      	lsls	r1, r1, #6
 8014258:	404a      	eors	r2, r1
 801425a:	801a      	strh	r2, [r3, #0]
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	001a      	movs	r2, r3
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	18d3      	adds	r3, r2, r3
 801426a:	183a      	adds	r2, r7, r0
 801426c:	8812      	ldrh	r2, [r2, #0]
 801426e:	495e      	ldr	r1, [pc, #376]	@ (80143e8 <HAL_PCD_EP_DB_Receive+0x228>)
 8014270:	430a      	orrs	r2, r1
 8014272:	b292      	uxth	r2, r2
 8014274:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014276:	1dbb      	adds	r3, r7, #6
 8014278:	881b      	ldrh	r3, [r3, #0]
 801427a:	2240      	movs	r2, #64	@ 0x40
 801427c:	4013      	ands	r3, r2
 801427e:	d01a      	beq.n	80142b6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	001a      	movs	r2, r3
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	781b      	ldrb	r3, [r3, #0]
 801428a:	009b      	lsls	r3, r3, #2
 801428c:	18d3      	adds	r3, r2, r3
 801428e:	881b      	ldrh	r3, [r3, #0]
 8014290:	b29a      	uxth	r2, r3
 8014292:	2016      	movs	r0, #22
 8014294:	183b      	adds	r3, r7, r0
 8014296:	4955      	ldr	r1, [pc, #340]	@ (80143ec <HAL_PCD_EP_DB_Receive+0x22c>)
 8014298:	400a      	ands	r2, r1
 801429a:	801a      	strh	r2, [r3, #0]
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	001a      	movs	r2, r3
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	781b      	ldrb	r3, [r3, #0]
 80142a6:	009b      	lsls	r3, r3, #2
 80142a8:	18d3      	adds	r3, r2, r3
 80142aa:	183a      	adds	r2, r7, r0
 80142ac:	8812      	ldrh	r2, [r2, #0]
 80142ae:	4950      	ldr	r1, [pc, #320]	@ (80143f0 <HAL_PCD_EP_DB_Receive+0x230>)
 80142b0:	430a      	orrs	r2, r1
 80142b2:	b292      	uxth	r2, r2
 80142b4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80142b6:	241a      	movs	r4, #26
 80142b8:	193b      	adds	r3, r7, r4
 80142ba:	881b      	ldrh	r3, [r3, #0]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d100      	bne.n	80142c2 <HAL_PCD_EP_DB_Receive+0x102>
 80142c0:	e086      	b.n	80143d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	6818      	ldr	r0, [r3, #0]
 80142c6:	68bb      	ldr	r3, [r7, #8]
 80142c8:	6959      	ldr	r1, [r3, #20]
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	891a      	ldrh	r2, [r3, #8]
 80142ce:	193b      	adds	r3, r7, r4
 80142d0:	881b      	ldrh	r3, [r3, #0]
 80142d2:	f006 fe50 	bl	801af76 <USB_ReadPMA>
 80142d6:	e07b      	b.n	80143d0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	2250      	movs	r2, #80	@ 0x50
 80142de:	5a9b      	ldrh	r3, [r3, r2]
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	001a      	movs	r2, r3
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	00db      	lsls	r3, r3, #3
 80142ea:	18d2      	adds	r2, r2, r3
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	18d3      	adds	r3, r2, r3
 80142f2:	4a40      	ldr	r2, [pc, #256]	@ (80143f4 <HAL_PCD_EP_DB_Receive+0x234>)
 80142f4:	4694      	mov	ip, r2
 80142f6:	4463      	add	r3, ip
 80142f8:	881a      	ldrh	r2, [r3, #0]
 80142fa:	211a      	movs	r1, #26
 80142fc:	187b      	adds	r3, r7, r1
 80142fe:	0592      	lsls	r2, r2, #22
 8014300:	0d92      	lsrs	r2, r2, #22
 8014302:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	699a      	ldr	r2, [r3, #24]
 8014308:	187b      	adds	r3, r7, r1
 801430a:	881b      	ldrh	r3, [r3, #0]
 801430c:	429a      	cmp	r2, r3
 801430e:	d307      	bcc.n	8014320 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	699a      	ldr	r2, [r3, #24]
 8014314:	187b      	adds	r3, r7, r1
 8014316:	881b      	ldrh	r3, [r3, #0]
 8014318:	1ad2      	subs	r2, r2, r3
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	619a      	str	r2, [r3, #24]
 801431e:	e002      	b.n	8014326 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	2200      	movs	r2, #0
 8014324:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	699b      	ldr	r3, [r3, #24]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d121      	bne.n	8014372 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	001a      	movs	r2, r3
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	18d3      	adds	r3, r2, r3
 801433c:	881b      	ldrh	r3, [r3, #0]
 801433e:	b29a      	uxth	r2, r3
 8014340:	201e      	movs	r0, #30
 8014342:	183b      	adds	r3, r7, r0
 8014344:	4927      	ldr	r1, [pc, #156]	@ (80143e4 <HAL_PCD_EP_DB_Receive+0x224>)
 8014346:	400a      	ands	r2, r1
 8014348:	801a      	strh	r2, [r3, #0]
 801434a:	183b      	adds	r3, r7, r0
 801434c:	183a      	adds	r2, r7, r0
 801434e:	8812      	ldrh	r2, [r2, #0]
 8014350:	2180      	movs	r1, #128	@ 0x80
 8014352:	0189      	lsls	r1, r1, #6
 8014354:	404a      	eors	r2, r1
 8014356:	801a      	strh	r2, [r3, #0]
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	001a      	movs	r2, r3
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	009b      	lsls	r3, r3, #2
 8014364:	18d3      	adds	r3, r2, r3
 8014366:	183a      	adds	r2, r7, r0
 8014368:	8812      	ldrh	r2, [r2, #0]
 801436a:	491f      	ldr	r1, [pc, #124]	@ (80143e8 <HAL_PCD_EP_DB_Receive+0x228>)
 801436c:	430a      	orrs	r2, r1
 801436e:	b292      	uxth	r2, r2
 8014370:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8014372:	1dbb      	adds	r3, r7, #6
 8014374:	881b      	ldrh	r3, [r3, #0]
 8014376:	2240      	movs	r2, #64	@ 0x40
 8014378:	4013      	ands	r3, r2
 801437a:	d11a      	bne.n	80143b2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	001a      	movs	r2, r3
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	009b      	lsls	r3, r3, #2
 8014388:	18d3      	adds	r3, r2, r3
 801438a:	881b      	ldrh	r3, [r3, #0]
 801438c:	b29a      	uxth	r2, r3
 801438e:	201c      	movs	r0, #28
 8014390:	183b      	adds	r3, r7, r0
 8014392:	4916      	ldr	r1, [pc, #88]	@ (80143ec <HAL_PCD_EP_DB_Receive+0x22c>)
 8014394:	400a      	ands	r2, r1
 8014396:	801a      	strh	r2, [r3, #0]
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	001a      	movs	r2, r3
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	009b      	lsls	r3, r3, #2
 80143a4:	18d3      	adds	r3, r2, r3
 80143a6:	183a      	adds	r2, r7, r0
 80143a8:	8812      	ldrh	r2, [r2, #0]
 80143aa:	4911      	ldr	r1, [pc, #68]	@ (80143f0 <HAL_PCD_EP_DB_Receive+0x230>)
 80143ac:	430a      	orrs	r2, r1
 80143ae:	b292      	uxth	r2, r2
 80143b0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80143b2:	241a      	movs	r4, #26
 80143b4:	193b      	adds	r3, r7, r4
 80143b6:	881b      	ldrh	r3, [r3, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d009      	beq.n	80143d0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	6818      	ldr	r0, [r3, #0]
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	6959      	ldr	r1, [r3, #20]
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	895a      	ldrh	r2, [r3, #10]
 80143c8:	193b      	adds	r3, r7, r4
 80143ca:	881b      	ldrh	r3, [r3, #0]
 80143cc:	f006 fdd3 	bl	801af76 <USB_ReadPMA>
    }
  }

  return count;
 80143d0:	231a      	movs	r3, #26
 80143d2:	18fb      	adds	r3, r7, r3
 80143d4:	881b      	ldrh	r3, [r3, #0]
}
 80143d6:	0018      	movs	r0, r3
 80143d8:	46bd      	mov	sp, r7
 80143da:	b009      	add	sp, #36	@ 0x24
 80143dc:	bd90      	pop	{r4, r7, pc}
 80143de:	46c0      	nop			@ (mov r8, r8)
 80143e0:	00000402 	.word	0x00000402
 80143e4:	ffffbf8f 	.word	0xffffbf8f
 80143e8:	ffff8080 	.word	0xffff8080
 80143ec:	ffff8f8f 	.word	0xffff8f8f
 80143f0:	ffff80c0 	.word	0xffff80c0
 80143f4:	00000406 	.word	0x00000406

080143f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b0a4      	sub	sp, #144	@ 0x90
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	60f8      	str	r0, [r7, #12]
 8014400:	60b9      	str	r1, [r7, #8]
 8014402:	1dbb      	adds	r3, r7, #6
 8014404:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014406:	1dbb      	adds	r3, r7, #6
 8014408:	881b      	ldrh	r3, [r3, #0]
 801440a:	2240      	movs	r2, #64	@ 0x40
 801440c:	4013      	ands	r3, r2
 801440e:	d100      	bne.n	8014412 <HAL_PCD_EP_DB_Transmit+0x1a>
 8014410:	e1e4      	b.n	80147dc <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	2250      	movs	r2, #80	@ 0x50
 8014418:	5a9b      	ldrh	r3, [r3, r2]
 801441a:	b29b      	uxth	r3, r3
 801441c:	001a      	movs	r2, r3
 801441e:	68bb      	ldr	r3, [r7, #8]
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	00db      	lsls	r3, r3, #3
 8014424:	18d2      	adds	r2, r2, r3
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	18d3      	adds	r3, r2, r3
 801442c:	4ad0      	ldr	r2, [pc, #832]	@ (8014770 <HAL_PCD_EP_DB_Transmit+0x378>)
 801442e:	4694      	mov	ip, r2
 8014430:	4463      	add	r3, ip
 8014432:	881a      	ldrh	r2, [r3, #0]
 8014434:	2186      	movs	r1, #134	@ 0x86
 8014436:	187b      	adds	r3, r7, r1
 8014438:	0592      	lsls	r2, r2, #22
 801443a:	0d92      	lsrs	r2, r2, #22
 801443c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	699a      	ldr	r2, [r3, #24]
 8014442:	187b      	adds	r3, r7, r1
 8014444:	881b      	ldrh	r3, [r3, #0]
 8014446:	429a      	cmp	r2, r3
 8014448:	d907      	bls.n	801445a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	699a      	ldr	r2, [r3, #24]
 801444e:	187b      	adds	r3, r7, r1
 8014450:	881b      	ldrh	r3, [r3, #0]
 8014452:	1ad2      	subs	r2, r2, r3
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	619a      	str	r2, [r3, #24]
 8014458:	e002      	b.n	8014460 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	2200      	movs	r2, #0
 801445e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	699b      	ldr	r3, [r3, #24]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d000      	beq.n	801446a <HAL_PCD_EP_DB_Transmit+0x72>
 8014468:	e0b5      	b.n	80145d6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801446a:	68bb      	ldr	r3, [r7, #8]
 801446c:	785b      	ldrb	r3, [r3, #1]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d125      	bne.n	80144be <HAL_PCD_EP_DB_Transmit+0xc6>
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2250      	movs	r2, #80	@ 0x50
 801447e:	5a9b      	ldrh	r3, [r3, r2]
 8014480:	b29b      	uxth	r3, r3
 8014482:	001a      	movs	r2, r3
 8014484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014486:	189b      	adds	r3, r3, r2
 8014488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	00da      	lsls	r2, r3, #3
 8014490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014492:	18d3      	adds	r3, r2, r3
 8014494:	4ab6      	ldr	r2, [pc, #728]	@ (8014770 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014496:	4694      	mov	ip, r2
 8014498:	4463      	add	r3, ip
 801449a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801449e:	881b      	ldrh	r3, [r3, #0]
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	059b      	lsls	r3, r3, #22
 80144a4:	0d9b      	lsrs	r3, r3, #22
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144aa:	801a      	strh	r2, [r3, #0]
 80144ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144ae:	881b      	ldrh	r3, [r3, #0]
 80144b0:	b29b      	uxth	r3, r3
 80144b2:	4ab0      	ldr	r2, [pc, #704]	@ (8014774 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80144b4:	4313      	orrs	r3, r2
 80144b6:	b29a      	uxth	r2, r3
 80144b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144ba:	801a      	strh	r2, [r3, #0]
 80144bc:	e01b      	b.n	80144f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	785b      	ldrb	r3, [r3, #1]
 80144c2:	2b01      	cmp	r3, #1
 80144c4:	d117      	bne.n	80144f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	2250      	movs	r2, #80	@ 0x50
 80144d2:	5a9b      	ldrh	r3, [r3, r2]
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	001a      	movs	r2, r3
 80144d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144da:	189b      	adds	r3, r3, r2
 80144dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	00da      	lsls	r2, r3, #3
 80144e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144e6:	18d3      	adds	r3, r2, r3
 80144e8:	4aa1      	ldr	r2, [pc, #644]	@ (8014770 <HAL_PCD_EP_DB_Transmit+0x378>)
 80144ea:	4694      	mov	ip, r2
 80144ec:	4463      	add	r3, ip
 80144ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80144f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144f2:	2200      	movs	r2, #0
 80144f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	785b      	ldrb	r3, [r3, #1]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d125      	bne.n	8014550 <HAL_PCD_EP_DB_Transmit+0x158>
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	61fb      	str	r3, [r7, #28]
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	2250      	movs	r2, #80	@ 0x50
 8014510:	5a9b      	ldrh	r3, [r3, r2]
 8014512:	b29b      	uxth	r3, r3
 8014514:	001a      	movs	r2, r3
 8014516:	69fb      	ldr	r3, [r7, #28]
 8014518:	189b      	adds	r3, r3, r2
 801451a:	61fb      	str	r3, [r7, #28]
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	781b      	ldrb	r3, [r3, #0]
 8014520:	00da      	lsls	r2, r3, #3
 8014522:	69fb      	ldr	r3, [r7, #28]
 8014524:	18d3      	adds	r3, r2, r3
 8014526:	4a94      	ldr	r2, [pc, #592]	@ (8014778 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014528:	4694      	mov	ip, r2
 801452a:	4463      	add	r3, ip
 801452c:	61bb      	str	r3, [r7, #24]
 801452e:	69bb      	ldr	r3, [r7, #24]
 8014530:	881b      	ldrh	r3, [r3, #0]
 8014532:	b29b      	uxth	r3, r3
 8014534:	059b      	lsls	r3, r3, #22
 8014536:	0d9b      	lsrs	r3, r3, #22
 8014538:	b29a      	uxth	r2, r3
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	801a      	strh	r2, [r3, #0]
 801453e:	69bb      	ldr	r3, [r7, #24]
 8014540:	881b      	ldrh	r3, [r3, #0]
 8014542:	b29b      	uxth	r3, r3
 8014544:	4a8b      	ldr	r2, [pc, #556]	@ (8014774 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014546:	4313      	orrs	r3, r2
 8014548:	b29a      	uxth	r2, r3
 801454a:	69bb      	ldr	r3, [r7, #24]
 801454c:	801a      	strh	r2, [r3, #0]
 801454e:	e018      	b.n	8014582 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014550:	68bb      	ldr	r3, [r7, #8]
 8014552:	785b      	ldrb	r3, [r3, #1]
 8014554:	2b01      	cmp	r3, #1
 8014556:	d114      	bne.n	8014582 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	2250      	movs	r2, #80	@ 0x50
 801455e:	5a9b      	ldrh	r3, [r3, r2]
 8014560:	b29b      	uxth	r3, r3
 8014562:	001a      	movs	r2, r3
 8014564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014566:	189b      	adds	r3, r3, r2
 8014568:	627b      	str	r3, [r7, #36]	@ 0x24
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	00da      	lsls	r2, r3, #3
 8014570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014572:	18d3      	adds	r3, r2, r3
 8014574:	4a80      	ldr	r2, [pc, #512]	@ (8014778 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014576:	4694      	mov	ip, r2
 8014578:	4463      	add	r3, ip
 801457a:	623b      	str	r3, [r7, #32]
 801457c:	6a3b      	ldr	r3, [r7, #32]
 801457e:	2200      	movs	r2, #0
 8014580:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	781a      	ldrb	r2, [r3, #0]
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	0011      	movs	r1, r2
 801458a:	0018      	movs	r0, r3
 801458c:	f008 fd2e 	bl	801cfec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014590:	1dbb      	adds	r3, r7, #6
 8014592:	881a      	ldrh	r2, [r3, #0]
 8014594:	2380      	movs	r3, #128	@ 0x80
 8014596:	01db      	lsls	r3, r3, #7
 8014598:	4013      	ands	r3, r2
 801459a:	d100      	bne.n	801459e <HAL_PCD_EP_DB_Transmit+0x1a6>
 801459c:	e309      	b.n	8014bb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	001a      	movs	r2, r3
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	781b      	ldrb	r3, [r3, #0]
 80145a8:	009b      	lsls	r3, r3, #2
 80145aa:	18d3      	adds	r3, r2, r3
 80145ac:	881b      	ldrh	r3, [r3, #0]
 80145ae:	b29a      	uxth	r2, r3
 80145b0:	2016      	movs	r0, #22
 80145b2:	183b      	adds	r3, r7, r0
 80145b4:	4971      	ldr	r1, [pc, #452]	@ (801477c <HAL_PCD_EP_DB_Transmit+0x384>)
 80145b6:	400a      	ands	r2, r1
 80145b8:	801a      	strh	r2, [r3, #0]
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	001a      	movs	r2, r3
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	781b      	ldrb	r3, [r3, #0]
 80145c4:	009b      	lsls	r3, r3, #2
 80145c6:	18d3      	adds	r3, r2, r3
 80145c8:	183a      	adds	r2, r7, r0
 80145ca:	8812      	ldrh	r2, [r2, #0]
 80145cc:	496c      	ldr	r1, [pc, #432]	@ (8014780 <HAL_PCD_EP_DB_Transmit+0x388>)
 80145ce:	430a      	orrs	r2, r1
 80145d0:	b292      	uxth	r2, r2
 80145d2:	801a      	strh	r2, [r3, #0]
 80145d4:	e2ed      	b.n	8014bb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80145d6:	1dbb      	adds	r3, r7, #6
 80145d8:	881a      	ldrh	r2, [r3, #0]
 80145da:	2380      	movs	r3, #128	@ 0x80
 80145dc:	01db      	lsls	r3, r3, #7
 80145de:	4013      	ands	r3, r2
 80145e0:	d01a      	beq.n	8014618 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	001a      	movs	r2, r3
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	009b      	lsls	r3, r3, #2
 80145ee:	18d3      	adds	r3, r2, r3
 80145f0:	881b      	ldrh	r3, [r3, #0]
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	208a      	movs	r0, #138	@ 0x8a
 80145f6:	183b      	adds	r3, r7, r0
 80145f8:	4960      	ldr	r1, [pc, #384]	@ (801477c <HAL_PCD_EP_DB_Transmit+0x384>)
 80145fa:	400a      	ands	r2, r1
 80145fc:	801a      	strh	r2, [r3, #0]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	001a      	movs	r2, r3
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	781b      	ldrb	r3, [r3, #0]
 8014608:	009b      	lsls	r3, r3, #2
 801460a:	18d3      	adds	r3, r2, r3
 801460c:	183a      	adds	r2, r7, r0
 801460e:	8812      	ldrh	r2, [r2, #0]
 8014610:	495b      	ldr	r1, [pc, #364]	@ (8014780 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014612:	430a      	orrs	r2, r1
 8014614:	b292      	uxth	r2, r2
 8014616:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	2224      	movs	r2, #36	@ 0x24
 801461c:	5c9b      	ldrb	r3, [r3, r2]
 801461e:	2b01      	cmp	r3, #1
 8014620:	d000      	beq.n	8014624 <HAL_PCD_EP_DB_Transmit+0x22c>
 8014622:	e2c6      	b.n	8014bb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	695a      	ldr	r2, [r3, #20]
 8014628:	2186      	movs	r1, #134	@ 0x86
 801462a:	187b      	adds	r3, r7, r1
 801462c:	881b      	ldrh	r3, [r3, #0]
 801462e:	18d2      	adds	r2, r2, r3
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	69da      	ldr	r2, [r3, #28]
 8014638:	187b      	adds	r3, r7, r1
 801463a:	881b      	ldrh	r3, [r3, #0]
 801463c:	18d2      	adds	r2, r2, r3
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	6a1a      	ldr	r2, [r3, #32]
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	691b      	ldr	r3, [r3, #16]
 801464a:	429a      	cmp	r2, r3
 801464c:	d30c      	bcc.n	8014668 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	691b      	ldr	r3, [r3, #16]
 8014652:	218c      	movs	r1, #140	@ 0x8c
 8014654:	187a      	adds	r2, r7, r1
 8014656:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	6a1a      	ldr	r2, [r3, #32]
 801465c:	187b      	adds	r3, r7, r1
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	1ad2      	subs	r2, r2, r3
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	621a      	str	r2, [r3, #32]
 8014666:	e01a      	b.n	801469e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	6a1b      	ldr	r3, [r3, #32]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d10a      	bne.n	8014686 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8014670:	2386      	movs	r3, #134	@ 0x86
 8014672:	18fb      	adds	r3, r7, r3
 8014674:	881b      	ldrh	r3, [r3, #0]
 8014676:	228c      	movs	r2, #140	@ 0x8c
 8014678:	18ba      	adds	r2, r7, r2
 801467a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	2224      	movs	r2, #36	@ 0x24
 8014680:	2100      	movs	r1, #0
 8014682:	5499      	strb	r1, [r3, r2]
 8014684:	e00b      	b.n	801469e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	2224      	movs	r2, #36	@ 0x24
 801468a:	2100      	movs	r1, #0
 801468c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	6a1b      	ldr	r3, [r3, #32]
 8014692:	228c      	movs	r2, #140	@ 0x8c
 8014694:	18ba      	adds	r2, r7, r2
 8014696:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	2200      	movs	r2, #0
 801469c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	785b      	ldrb	r3, [r3, #1]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d000      	beq.n	80146a8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80146a6:	e06d      	b.n	8014784 <HAL_PCD_EP_DB_Transmit+0x38c>
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	2250      	movs	r2, #80	@ 0x50
 80146b4:	5a9b      	ldrh	r3, [r3, r2]
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	001a      	movs	r2, r3
 80146ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80146bc:	189b      	adds	r3, r3, r2
 80146be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	781b      	ldrb	r3, [r3, #0]
 80146c4:	00da      	lsls	r2, r3, #3
 80146c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80146c8:	18d3      	adds	r3, r2, r3
 80146ca:	4a29      	ldr	r2, [pc, #164]	@ (8014770 <HAL_PCD_EP_DB_Transmit+0x378>)
 80146cc:	4694      	mov	ip, r2
 80146ce:	4463      	add	r3, ip
 80146d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80146d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146d4:	881b      	ldrh	r3, [r3, #0]
 80146d6:	b29b      	uxth	r3, r3
 80146d8:	059b      	lsls	r3, r3, #22
 80146da:	0d9b      	lsrs	r3, r3, #22
 80146dc:	b29a      	uxth	r2, r3
 80146de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146e0:	801a      	strh	r2, [r3, #0]
 80146e2:	228c      	movs	r2, #140	@ 0x8c
 80146e4:	18bb      	adds	r3, r7, r2
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80146ea:	d91a      	bls.n	8014722 <HAL_PCD_EP_DB_Transmit+0x32a>
 80146ec:	18bb      	adds	r3, r7, r2
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	095b      	lsrs	r3, r3, #5
 80146f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80146f4:	18bb      	adds	r3, r7, r2
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	221f      	movs	r2, #31
 80146fa:	4013      	ands	r3, r2
 80146fc:	d102      	bne.n	8014704 <HAL_PCD_EP_DB_Transmit+0x30c>
 80146fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014700:	3b01      	subs	r3, #1
 8014702:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014706:	881b      	ldrh	r3, [r3, #0]
 8014708:	b29a      	uxth	r2, r3
 801470a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801470c:	b29b      	uxth	r3, r3
 801470e:	029b      	lsls	r3, r3, #10
 8014710:	b29b      	uxth	r3, r3
 8014712:	4313      	orrs	r3, r2
 8014714:	b29b      	uxth	r3, r3
 8014716:	4a17      	ldr	r2, [pc, #92]	@ (8014774 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014718:	4313      	orrs	r3, r2
 801471a:	b29a      	uxth	r2, r3
 801471c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801471e:	801a      	strh	r2, [r3, #0]
 8014720:	e04f      	b.n	80147c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014722:	238c      	movs	r3, #140	@ 0x8c
 8014724:	18fb      	adds	r3, r7, r3
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d108      	bne.n	801473e <HAL_PCD_EP_DB_Transmit+0x346>
 801472c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801472e:	881b      	ldrh	r3, [r3, #0]
 8014730:	b29b      	uxth	r3, r3
 8014732:	4a10      	ldr	r2, [pc, #64]	@ (8014774 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014734:	4313      	orrs	r3, r2
 8014736:	b29a      	uxth	r2, r3
 8014738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801473a:	801a      	strh	r2, [r3, #0]
 801473c:	e041      	b.n	80147c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801473e:	228c      	movs	r2, #140	@ 0x8c
 8014740:	18bb      	adds	r3, r7, r2
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	085b      	lsrs	r3, r3, #1
 8014746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014748:	18bb      	adds	r3, r7, r2
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	2201      	movs	r2, #1
 801474e:	4013      	ands	r3, r2
 8014750:	d002      	beq.n	8014758 <HAL_PCD_EP_DB_Transmit+0x360>
 8014752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014754:	3301      	adds	r3, #1
 8014756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801475a:	881b      	ldrh	r3, [r3, #0]
 801475c:	b29a      	uxth	r2, r3
 801475e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014760:	b29b      	uxth	r3, r3
 8014762:	029b      	lsls	r3, r3, #10
 8014764:	b29b      	uxth	r3, r3
 8014766:	4313      	orrs	r3, r2
 8014768:	b29a      	uxth	r2, r3
 801476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801476c:	801a      	strh	r2, [r3, #0]
 801476e:	e028      	b.n	80147c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014770:	00000402 	.word	0x00000402
 8014774:	ffff8000 	.word	0xffff8000
 8014778:	00000406 	.word	0x00000406
 801477c:	ffff8f8f 	.word	0xffff8f8f
 8014780:	ffffc080 	.word	0xffffc080
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	785b      	ldrb	r3, [r3, #1]
 8014788:	2b01      	cmp	r3, #1
 801478a:	d11a      	bne.n	80147c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	647b      	str	r3, [r7, #68]	@ 0x44
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	2250      	movs	r2, #80	@ 0x50
 8014798:	5a9b      	ldrh	r3, [r3, r2]
 801479a:	b29b      	uxth	r3, r3
 801479c:	001a      	movs	r2, r3
 801479e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147a0:	189b      	adds	r3, r3, r2
 80147a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	00da      	lsls	r2, r3, #3
 80147aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147ac:	18d3      	adds	r3, r2, r3
 80147ae:	4adb      	ldr	r2, [pc, #876]	@ (8014b1c <HAL_PCD_EP_DB_Transmit+0x724>)
 80147b0:	4694      	mov	ip, r2
 80147b2:	4463      	add	r3, ip
 80147b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80147b6:	238c      	movs	r3, #140	@ 0x8c
 80147b8:	18fb      	adds	r3, r7, r3
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	b29a      	uxth	r2, r3
 80147be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80147c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	6818      	ldr	r0, [r3, #0]
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	6959      	ldr	r1, [r3, #20]
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	891a      	ldrh	r2, [r3, #8]
 80147ce:	238c      	movs	r3, #140	@ 0x8c
 80147d0:	18fb      	adds	r3, r7, r3
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	b29b      	uxth	r3, r3
 80147d6:	f006 fb85 	bl	801aee4 <USB_WritePMA>
 80147da:	e1ea      	b.n	8014bb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	2250      	movs	r2, #80	@ 0x50
 80147e2:	5a9b      	ldrh	r3, [r3, r2]
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	001a      	movs	r2, r3
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	00db      	lsls	r3, r3, #3
 80147ee:	18d2      	adds	r2, r2, r3
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	18d3      	adds	r3, r2, r3
 80147f6:	4aca      	ldr	r2, [pc, #808]	@ (8014b20 <HAL_PCD_EP_DB_Transmit+0x728>)
 80147f8:	4694      	mov	ip, r2
 80147fa:	4463      	add	r3, ip
 80147fc:	881a      	ldrh	r2, [r3, #0]
 80147fe:	2186      	movs	r1, #134	@ 0x86
 8014800:	187b      	adds	r3, r7, r1
 8014802:	0592      	lsls	r2, r2, #22
 8014804:	0d92      	lsrs	r2, r2, #22
 8014806:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	699a      	ldr	r2, [r3, #24]
 801480c:	187b      	adds	r3, r7, r1
 801480e:	881b      	ldrh	r3, [r3, #0]
 8014810:	429a      	cmp	r2, r3
 8014812:	d307      	bcc.n	8014824 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	699a      	ldr	r2, [r3, #24]
 8014818:	187b      	adds	r3, r7, r1
 801481a:	881b      	ldrh	r3, [r3, #0]
 801481c:	1ad2      	subs	r2, r2, r3
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	619a      	str	r2, [r3, #24]
 8014822:	e002      	b.n	801482a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	2200      	movs	r2, #0
 8014828:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	699b      	ldr	r3, [r3, #24]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d000      	beq.n	8014834 <HAL_PCD_EP_DB_Transmit+0x43c>
 8014832:	e0bb      	b.n	80149ac <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	785b      	ldrb	r3, [r3, #1]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d125      	bne.n	8014888 <HAL_PCD_EP_DB_Transmit+0x490>
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	2250      	movs	r2, #80	@ 0x50
 8014848:	5a9b      	ldrh	r3, [r3, r2]
 801484a:	b29b      	uxth	r3, r3
 801484c:	001a      	movs	r2, r3
 801484e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014850:	189b      	adds	r3, r3, r2
 8014852:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	00da      	lsls	r2, r3, #3
 801485a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801485c:	18d3      	adds	r3, r2, r3
 801485e:	4aaf      	ldr	r2, [pc, #700]	@ (8014b1c <HAL_PCD_EP_DB_Transmit+0x724>)
 8014860:	4694      	mov	ip, r2
 8014862:	4463      	add	r3, ip
 8014864:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014866:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014868:	881b      	ldrh	r3, [r3, #0]
 801486a:	b29b      	uxth	r3, r3
 801486c:	059b      	lsls	r3, r3, #22
 801486e:	0d9b      	lsrs	r3, r3, #22
 8014870:	b29a      	uxth	r2, r3
 8014872:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014874:	801a      	strh	r2, [r3, #0]
 8014876:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014878:	881b      	ldrh	r3, [r3, #0]
 801487a:	b29b      	uxth	r3, r3
 801487c:	4aa9      	ldr	r2, [pc, #676]	@ (8014b24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801487e:	4313      	orrs	r3, r2
 8014880:	b29a      	uxth	r2, r3
 8014882:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014884:	801a      	strh	r2, [r3, #0]
 8014886:	e01b      	b.n	80148c0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	785b      	ldrb	r3, [r3, #1]
 801488c:	2b01      	cmp	r3, #1
 801488e:	d117      	bne.n	80148c0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	667b      	str	r3, [r7, #100]	@ 0x64
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	2250      	movs	r2, #80	@ 0x50
 801489c:	5a9b      	ldrh	r3, [r3, r2]
 801489e:	b29b      	uxth	r3, r3
 80148a0:	001a      	movs	r2, r3
 80148a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80148a4:	189b      	adds	r3, r3, r2
 80148a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	00da      	lsls	r2, r3, #3
 80148ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80148b0:	18d3      	adds	r3, r2, r3
 80148b2:	4a9a      	ldr	r2, [pc, #616]	@ (8014b1c <HAL_PCD_EP_DB_Transmit+0x724>)
 80148b4:	4694      	mov	ip, r2
 80148b6:	4463      	add	r3, ip
 80148b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80148ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80148bc:	2200      	movs	r2, #0
 80148be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	677b      	str	r3, [r7, #116]	@ 0x74
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	785b      	ldrb	r3, [r3, #1]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d12b      	bne.n	8014926 <HAL_PCD_EP_DB_Transmit+0x52e>
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	2250      	movs	r2, #80	@ 0x50
 80148da:	5a9b      	ldrh	r3, [r3, r2]
 80148dc:	b29b      	uxth	r3, r3
 80148de:	001a      	movs	r2, r3
 80148e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80148e2:	189b      	adds	r3, r3, r2
 80148e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80148e6:	68bb      	ldr	r3, [r7, #8]
 80148e8:	781b      	ldrb	r3, [r3, #0]
 80148ea:	00da      	lsls	r2, r3, #3
 80148ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80148ee:	18d3      	adds	r3, r2, r3
 80148f0:	4a8b      	ldr	r2, [pc, #556]	@ (8014b20 <HAL_PCD_EP_DB_Transmit+0x728>)
 80148f2:	4694      	mov	ip, r2
 80148f4:	4463      	add	r3, ip
 80148f6:	2180      	movs	r1, #128	@ 0x80
 80148f8:	187a      	adds	r2, r7, r1
 80148fa:	6013      	str	r3, [r2, #0]
 80148fc:	187b      	adds	r3, r7, r1
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	881b      	ldrh	r3, [r3, #0]
 8014902:	b29b      	uxth	r3, r3
 8014904:	059b      	lsls	r3, r3, #22
 8014906:	0d9b      	lsrs	r3, r3, #22
 8014908:	b29a      	uxth	r2, r3
 801490a:	187b      	adds	r3, r7, r1
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	801a      	strh	r2, [r3, #0]
 8014910:	187b      	adds	r3, r7, r1
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	881b      	ldrh	r3, [r3, #0]
 8014916:	b29b      	uxth	r3, r3
 8014918:	4a82      	ldr	r2, [pc, #520]	@ (8014b24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801491a:	4313      	orrs	r3, r2
 801491c:	b29a      	uxth	r2, r3
 801491e:	187b      	adds	r3, r7, r1
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	801a      	strh	r2, [r3, #0]
 8014924:	e018      	b.n	8014958 <HAL_PCD_EP_DB_Transmit+0x560>
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	785b      	ldrb	r3, [r3, #1]
 801492a:	2b01      	cmp	r3, #1
 801492c:	d114      	bne.n	8014958 <HAL_PCD_EP_DB_Transmit+0x560>
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	2250      	movs	r2, #80	@ 0x50
 8014934:	5a9b      	ldrh	r3, [r3, r2]
 8014936:	b29b      	uxth	r3, r3
 8014938:	001a      	movs	r2, r3
 801493a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801493c:	189b      	adds	r3, r3, r2
 801493e:	677b      	str	r3, [r7, #116]	@ 0x74
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	00da      	lsls	r2, r3, #3
 8014946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014948:	18d3      	adds	r3, r2, r3
 801494a:	4a75      	ldr	r2, [pc, #468]	@ (8014b20 <HAL_PCD_EP_DB_Transmit+0x728>)
 801494c:	4694      	mov	ip, r2
 801494e:	4463      	add	r3, ip
 8014950:	673b      	str	r3, [r7, #112]	@ 0x70
 8014952:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014954:	2200      	movs	r2, #0
 8014956:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	781a      	ldrb	r2, [r3, #0]
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	0011      	movs	r1, r2
 8014960:	0018      	movs	r0, r3
 8014962:	f008 fb43 	bl	801cfec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014966:	1dbb      	adds	r3, r7, #6
 8014968:	881a      	ldrh	r2, [r3, #0]
 801496a:	2380      	movs	r3, #128	@ 0x80
 801496c:	01db      	lsls	r3, r3, #7
 801496e:	4013      	ands	r3, r2
 8014970:	d000      	beq.n	8014974 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014972:	e11e      	b.n	8014bb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	001a      	movs	r2, r3
 801497a:	68bb      	ldr	r3, [r7, #8]
 801497c:	781b      	ldrb	r3, [r3, #0]
 801497e:	009b      	lsls	r3, r3, #2
 8014980:	18d3      	adds	r3, r2, r3
 8014982:	881b      	ldrh	r3, [r3, #0]
 8014984:	b29a      	uxth	r2, r3
 8014986:	2088      	movs	r0, #136	@ 0x88
 8014988:	183b      	adds	r3, r7, r0
 801498a:	4967      	ldr	r1, [pc, #412]	@ (8014b28 <HAL_PCD_EP_DB_Transmit+0x730>)
 801498c:	400a      	ands	r2, r1
 801498e:	801a      	strh	r2, [r3, #0]
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	001a      	movs	r2, r3
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	781b      	ldrb	r3, [r3, #0]
 801499a:	009b      	lsls	r3, r3, #2
 801499c:	18d3      	adds	r3, r2, r3
 801499e:	183a      	adds	r2, r7, r0
 80149a0:	8812      	ldrh	r2, [r2, #0]
 80149a2:	4962      	ldr	r1, [pc, #392]	@ (8014b2c <HAL_PCD_EP_DB_Transmit+0x734>)
 80149a4:	430a      	orrs	r2, r1
 80149a6:	b292      	uxth	r2, r2
 80149a8:	801a      	strh	r2, [r3, #0]
 80149aa:	e102      	b.n	8014bb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80149ac:	1dbb      	adds	r3, r7, #6
 80149ae:	881a      	ldrh	r2, [r3, #0]
 80149b0:	2380      	movs	r3, #128	@ 0x80
 80149b2:	01db      	lsls	r3, r3, #7
 80149b4:	4013      	ands	r3, r2
 80149b6:	d11a      	bne.n	80149ee <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	001a      	movs	r2, r3
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	781b      	ldrb	r3, [r3, #0]
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	18d3      	adds	r3, r2, r3
 80149c6:	881b      	ldrh	r3, [r3, #0]
 80149c8:	b29a      	uxth	r2, r3
 80149ca:	204e      	movs	r0, #78	@ 0x4e
 80149cc:	183b      	adds	r3, r7, r0
 80149ce:	4956      	ldr	r1, [pc, #344]	@ (8014b28 <HAL_PCD_EP_DB_Transmit+0x730>)
 80149d0:	400a      	ands	r2, r1
 80149d2:	801a      	strh	r2, [r3, #0]
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	001a      	movs	r2, r3
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	009b      	lsls	r3, r3, #2
 80149e0:	18d3      	adds	r3, r2, r3
 80149e2:	183a      	adds	r2, r7, r0
 80149e4:	8812      	ldrh	r2, [r2, #0]
 80149e6:	4951      	ldr	r1, [pc, #324]	@ (8014b2c <HAL_PCD_EP_DB_Transmit+0x734>)
 80149e8:	430a      	orrs	r2, r1
 80149ea:	b292      	uxth	r2, r2
 80149ec:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	2224      	movs	r2, #36	@ 0x24
 80149f2:	5c9b      	ldrb	r3, [r3, r2]
 80149f4:	2b01      	cmp	r3, #1
 80149f6:	d000      	beq.n	80149fa <HAL_PCD_EP_DB_Transmit+0x602>
 80149f8:	e0db      	b.n	8014bb2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	695a      	ldr	r2, [r3, #20]
 80149fe:	2186      	movs	r1, #134	@ 0x86
 8014a00:	187b      	adds	r3, r7, r1
 8014a02:	881b      	ldrh	r3, [r3, #0]
 8014a04:	18d2      	adds	r2, r2, r3
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	69da      	ldr	r2, [r3, #28]
 8014a0e:	187b      	adds	r3, r7, r1
 8014a10:	881b      	ldrh	r3, [r3, #0]
 8014a12:	18d2      	adds	r2, r2, r3
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	6a1a      	ldr	r2, [r3, #32]
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	691b      	ldr	r3, [r3, #16]
 8014a20:	429a      	cmp	r2, r3
 8014a22:	d30c      	bcc.n	8014a3e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	691b      	ldr	r3, [r3, #16]
 8014a28:	218c      	movs	r1, #140	@ 0x8c
 8014a2a:	187a      	adds	r2, r7, r1
 8014a2c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	6a1a      	ldr	r2, [r3, #32]
 8014a32:	187b      	adds	r3, r7, r1
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	1ad2      	subs	r2, r2, r3
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	621a      	str	r2, [r3, #32]
 8014a3c:	e01a      	b.n	8014a74 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	6a1b      	ldr	r3, [r3, #32]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d10a      	bne.n	8014a5c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014a46:	2386      	movs	r3, #134	@ 0x86
 8014a48:	18fb      	adds	r3, r7, r3
 8014a4a:	881b      	ldrh	r3, [r3, #0]
 8014a4c:	228c      	movs	r2, #140	@ 0x8c
 8014a4e:	18ba      	adds	r2, r7, r2
 8014a50:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	2224      	movs	r2, #36	@ 0x24
 8014a56:	2100      	movs	r1, #0
 8014a58:	5499      	strb	r1, [r3, r2]
 8014a5a:	e00b      	b.n	8014a74 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	6a1b      	ldr	r3, [r3, #32]
 8014a60:	228c      	movs	r2, #140	@ 0x8c
 8014a62:	18ba      	adds	r2, r7, r2
 8014a64:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	2200      	movs	r2, #0
 8014a6a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8014a6c:	68bb      	ldr	r3, [r7, #8]
 8014a6e:	2224      	movs	r2, #36	@ 0x24
 8014a70:	2100      	movs	r1, #0
 8014a72:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	657b      	str	r3, [r7, #84]	@ 0x54
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	785b      	ldrb	r3, [r3, #1]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d000      	beq.n	8014a84 <HAL_PCD_EP_DB_Transmit+0x68c>
 8014a82:	e06e      	b.n	8014b62 <HAL_PCD_EP_DB_Transmit+0x76a>
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	2250      	movs	r2, #80	@ 0x50
 8014a90:	5a9b      	ldrh	r3, [r3, r2]
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	001a      	movs	r2, r3
 8014a96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a98:	189b      	adds	r3, r3, r2
 8014a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	00da      	lsls	r2, r3, #3
 8014aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014aa4:	18d3      	adds	r3, r2, r3
 8014aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8014b20 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014aa8:	4694      	mov	ip, r2
 8014aaa:	4463      	add	r3, ip
 8014aac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014aae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014ab0:	881b      	ldrh	r3, [r3, #0]
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	059b      	lsls	r3, r3, #22
 8014ab6:	0d9b      	lsrs	r3, r3, #22
 8014ab8:	b29a      	uxth	r2, r3
 8014aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014abc:	801a      	strh	r2, [r3, #0]
 8014abe:	228c      	movs	r2, #140	@ 0x8c
 8014ac0:	18bb      	adds	r3, r7, r2
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	2b3e      	cmp	r3, #62	@ 0x3e
 8014ac6:	d91a      	bls.n	8014afe <HAL_PCD_EP_DB_Transmit+0x706>
 8014ac8:	18bb      	adds	r3, r7, r2
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	095b      	lsrs	r3, r3, #5
 8014ace:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014ad0:	18bb      	adds	r3, r7, r2
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	221f      	movs	r2, #31
 8014ad6:	4013      	ands	r3, r2
 8014ad8:	d102      	bne.n	8014ae0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8014ada:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014adc:	3b01      	subs	r3, #1
 8014ade:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014ae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014ae2:	881b      	ldrh	r3, [r3, #0]
 8014ae4:	b29a      	uxth	r2, r3
 8014ae6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	029b      	lsls	r3, r3, #10
 8014aec:	b29b      	uxth	r3, r3
 8014aee:	4313      	orrs	r3, r2
 8014af0:	b29b      	uxth	r3, r3
 8014af2:	4a0c      	ldr	r2, [pc, #48]	@ (8014b24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014af4:	4313      	orrs	r3, r2
 8014af6:	b29a      	uxth	r2, r3
 8014af8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014afa:	801a      	strh	r2, [r3, #0]
 8014afc:	e04d      	b.n	8014b9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014afe:	238c      	movs	r3, #140	@ 0x8c
 8014b00:	18fb      	adds	r3, r7, r3
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d113      	bne.n	8014b30 <HAL_PCD_EP_DB_Transmit+0x738>
 8014b08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b0a:	881b      	ldrh	r3, [r3, #0]
 8014b0c:	b29b      	uxth	r3, r3
 8014b0e:	4a05      	ldr	r2, [pc, #20]	@ (8014b24 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014b10:	4313      	orrs	r3, r2
 8014b12:	b29a      	uxth	r2, r3
 8014b14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b16:	801a      	strh	r2, [r3, #0]
 8014b18:	e03f      	b.n	8014b9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014b1a:	46c0      	nop			@ (mov r8, r8)
 8014b1c:	00000402 	.word	0x00000402
 8014b20:	00000406 	.word	0x00000406
 8014b24:	ffff8000 	.word	0xffff8000
 8014b28:	ffff8f8f 	.word	0xffff8f8f
 8014b2c:	ffffc080 	.word	0xffffc080
 8014b30:	228c      	movs	r2, #140	@ 0x8c
 8014b32:	18bb      	adds	r3, r7, r2
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	085b      	lsrs	r3, r3, #1
 8014b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014b3a:	18bb      	adds	r3, r7, r2
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	2201      	movs	r2, #1
 8014b40:	4013      	ands	r3, r2
 8014b42:	d002      	beq.n	8014b4a <HAL_PCD_EP_DB_Transmit+0x752>
 8014b44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014b46:	3301      	adds	r3, #1
 8014b48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b4c:	881b      	ldrh	r3, [r3, #0]
 8014b4e:	b29a      	uxth	r2, r3
 8014b50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014b52:	b29b      	uxth	r3, r3
 8014b54:	029b      	lsls	r3, r3, #10
 8014b56:	b29b      	uxth	r3, r3
 8014b58:	4313      	orrs	r3, r2
 8014b5a:	b29a      	uxth	r2, r3
 8014b5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b5e:	801a      	strh	r2, [r3, #0]
 8014b60:	e01b      	b.n	8014b9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014b62:	68bb      	ldr	r3, [r7, #8]
 8014b64:	785b      	ldrb	r3, [r3, #1]
 8014b66:	2b01      	cmp	r3, #1
 8014b68:	d117      	bne.n	8014b9a <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	2250      	movs	r2, #80	@ 0x50
 8014b70:	5a9b      	ldrh	r3, [r3, r2]
 8014b72:	b29b      	uxth	r3, r3
 8014b74:	001a      	movs	r2, r3
 8014b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b78:	189b      	adds	r3, r3, r2
 8014b7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	781b      	ldrb	r3, [r3, #0]
 8014b80:	00da      	lsls	r2, r3, #3
 8014b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014b84:	18d3      	adds	r3, r2, r3
 8014b86:	4a21      	ldr	r2, [pc, #132]	@ (8014c0c <HAL_PCD_EP_DB_Transmit+0x814>)
 8014b88:	4694      	mov	ip, r2
 8014b8a:	4463      	add	r3, ip
 8014b8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8014b8e:	238c      	movs	r3, #140	@ 0x8c
 8014b90:	18fb      	adds	r3, r7, r3
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	b29a      	uxth	r2, r3
 8014b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014b98:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	6818      	ldr	r0, [r3, #0]
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	6959      	ldr	r1, [r3, #20]
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	895a      	ldrh	r2, [r3, #10]
 8014ba6:	238c      	movs	r3, #140	@ 0x8c
 8014ba8:	18fb      	adds	r3, r7, r3
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	f006 f999 	bl	801aee4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	001a      	movs	r2, r3
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	781b      	ldrb	r3, [r3, #0]
 8014bbc:	009b      	lsls	r3, r3, #2
 8014bbe:	18d3      	adds	r3, r2, r3
 8014bc0:	881b      	ldrh	r3, [r3, #0]
 8014bc2:	b29a      	uxth	r2, r3
 8014bc4:	2014      	movs	r0, #20
 8014bc6:	183b      	adds	r3, r7, r0
 8014bc8:	4911      	ldr	r1, [pc, #68]	@ (8014c10 <HAL_PCD_EP_DB_Transmit+0x818>)
 8014bca:	400a      	ands	r2, r1
 8014bcc:	801a      	strh	r2, [r3, #0]
 8014bce:	183b      	adds	r3, r7, r0
 8014bd0:	183a      	adds	r2, r7, r0
 8014bd2:	8812      	ldrh	r2, [r2, #0]
 8014bd4:	2110      	movs	r1, #16
 8014bd6:	404a      	eors	r2, r1
 8014bd8:	801a      	strh	r2, [r3, #0]
 8014bda:	183b      	adds	r3, r7, r0
 8014bdc:	183a      	adds	r2, r7, r0
 8014bde:	8812      	ldrh	r2, [r2, #0]
 8014be0:	2120      	movs	r1, #32
 8014be2:	404a      	eors	r2, r1
 8014be4:	801a      	strh	r2, [r3, #0]
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	001a      	movs	r2, r3
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	781b      	ldrb	r3, [r3, #0]
 8014bf0:	009b      	lsls	r3, r3, #2
 8014bf2:	18d3      	adds	r3, r2, r3
 8014bf4:	183a      	adds	r2, r7, r0
 8014bf6:	8812      	ldrh	r2, [r2, #0]
 8014bf8:	4906      	ldr	r1, [pc, #24]	@ (8014c14 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8014bfa:	430a      	orrs	r2, r1
 8014bfc:	b292      	uxth	r2, r2
 8014bfe:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8014c00:	2300      	movs	r3, #0
}
 8014c02:	0018      	movs	r0, r3
 8014c04:	46bd      	mov	sp, r7
 8014c06:	b024      	add	sp, #144	@ 0x90
 8014c08:	bd80      	pop	{r7, pc}
 8014c0a:	46c0      	nop			@ (mov r8, r8)
 8014c0c:	00000406 	.word	0x00000406
 8014c10:	ffff8fbf 	.word	0xffff8fbf
 8014c14:	ffff8080 	.word	0xffff8080

08014c18 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8014c18:	b590      	push	{r4, r7, lr}
 8014c1a:	b087      	sub	sp, #28
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	0008      	movs	r0, r1
 8014c22:	0011      	movs	r1, r2
 8014c24:	607b      	str	r3, [r7, #4]
 8014c26:	240a      	movs	r4, #10
 8014c28:	193b      	adds	r3, r7, r4
 8014c2a:	1c02      	adds	r2, r0, #0
 8014c2c:	801a      	strh	r2, [r3, #0]
 8014c2e:	2308      	movs	r3, #8
 8014c30:	18fb      	adds	r3, r7, r3
 8014c32:	1c0a      	adds	r2, r1, #0
 8014c34:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8014c36:	0021      	movs	r1, r4
 8014c38:	187b      	adds	r3, r7, r1
 8014c3a:	881b      	ldrh	r3, [r3, #0]
 8014c3c:	2280      	movs	r2, #128	@ 0x80
 8014c3e:	4013      	ands	r3, r2
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d00c      	beq.n	8014c60 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014c46:	187b      	adds	r3, r7, r1
 8014c48:	881b      	ldrh	r3, [r3, #0]
 8014c4a:	2207      	movs	r2, #7
 8014c4c:	4013      	ands	r3, r2
 8014c4e:	1c5a      	adds	r2, r3, #1
 8014c50:	0013      	movs	r3, r2
 8014c52:	009b      	lsls	r3, r3, #2
 8014c54:	189b      	adds	r3, r3, r2
 8014c56:	00db      	lsls	r3, r3, #3
 8014c58:	68fa      	ldr	r2, [r7, #12]
 8014c5a:	18d3      	adds	r3, r2, r3
 8014c5c:	617b      	str	r3, [r7, #20]
 8014c5e:	e00b      	b.n	8014c78 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014c60:	230a      	movs	r3, #10
 8014c62:	18fb      	adds	r3, r7, r3
 8014c64:	881a      	ldrh	r2, [r3, #0]
 8014c66:	0013      	movs	r3, r2
 8014c68:	009b      	lsls	r3, r3, #2
 8014c6a:	189b      	adds	r3, r3, r2
 8014c6c:	00db      	lsls	r3, r3, #3
 8014c6e:	3369      	adds	r3, #105	@ 0x69
 8014c70:	33ff      	adds	r3, #255	@ 0xff
 8014c72:	68fa      	ldr	r2, [r7, #12]
 8014c74:	18d3      	adds	r3, r2, r3
 8014c76:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014c78:	2308      	movs	r3, #8
 8014c7a:	18fb      	adds	r3, r7, r3
 8014c7c:	881b      	ldrh	r3, [r3, #0]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d107      	bne.n	8014c92 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014c82:	697b      	ldr	r3, [r7, #20]
 8014c84:	2200      	movs	r2, #0
 8014c86:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	b29a      	uxth	r2, r3
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	80da      	strh	r2, [r3, #6]
 8014c90:	e00b      	b.n	8014caa <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	2201      	movs	r2, #1
 8014c96:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	b29a      	uxth	r2, r3
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	0c1b      	lsrs	r3, r3, #16
 8014ca4:	b29a      	uxth	r2, r3
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014caa:	2300      	movs	r3, #0
}
 8014cac:	0018      	movs	r0, r3
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	b007      	add	sp, #28
 8014cb2:	bd90      	pop	{r4, r7, pc}

08014cb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b084      	sub	sp, #16
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014cc2:	687a      	ldr	r2, [r7, #4]
 8014cc4:	23ba      	movs	r3, #186	@ 0xba
 8014cc6:	009b      	lsls	r3, r3, #2
 8014cc8:	2101      	movs	r1, #1
 8014cca:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8014ccc:	687a      	ldr	r2, [r7, #4]
 8014cce:	23b8      	movs	r3, #184	@ 0xb8
 8014cd0:	009b      	lsls	r3, r3, #2
 8014cd2:	2100      	movs	r1, #0
 8014cd4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2254      	movs	r2, #84	@ 0x54
 8014cda:	5a9b      	ldrh	r3, [r3, r2]
 8014cdc:	b29b      	uxth	r3, r3
 8014cde:	2201      	movs	r2, #1
 8014ce0:	4313      	orrs	r3, r2
 8014ce2:	b299      	uxth	r1, r3
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	2254      	movs	r2, #84	@ 0x54
 8014ce8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	2254      	movs	r2, #84	@ 0x54
 8014cee:	5a9b      	ldrh	r3, [r3, r2]
 8014cf0:	b29b      	uxth	r3, r3
 8014cf2:	2202      	movs	r2, #2
 8014cf4:	4313      	orrs	r3, r2
 8014cf6:	b299      	uxth	r1, r3
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	2254      	movs	r2, #84	@ 0x54
 8014cfc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014cfe:	2300      	movs	r3, #0
}
 8014d00:	0018      	movs	r0, r3
 8014d02:	46bd      	mov	sp, r7
 8014d04:	b004      	add	sp, #16
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b082      	sub	sp, #8
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	000a      	movs	r2, r1
 8014d12:	1cfb      	adds	r3, r7, #3
 8014d14:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014d16:	46c0      	nop			@ (mov r8, r8)
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	b002      	add	sp, #8
 8014d1c:	bd80      	pop	{r7, pc}
	...

08014d20 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014d20:	b580      	push	{r7, lr}
 8014d22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014d24:	4b04      	ldr	r3, [pc, #16]	@ (8014d38 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014d26:	681a      	ldr	r2, [r3, #0]
 8014d28:	4b03      	ldr	r3, [pc, #12]	@ (8014d38 <HAL_PWR_EnableBkUpAccess+0x18>)
 8014d2a:	2180      	movs	r1, #128	@ 0x80
 8014d2c:	0049      	lsls	r1, r1, #1
 8014d2e:	430a      	orrs	r2, r1
 8014d30:	601a      	str	r2, [r3, #0]
}
 8014d32:	46c0      	nop			@ (mov r8, r8)
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}
 8014d38:	40007000 	.word	0x40007000

08014d3c <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8014d40:	4b04      	ldr	r3, [pc, #16]	@ (8014d54 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014d42:	681a      	ldr	r2, [r3, #0]
 8014d44:	4b03      	ldr	r3, [pc, #12]	@ (8014d54 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014d46:	4904      	ldr	r1, [pc, #16]	@ (8014d58 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8014d48:	400a      	ands	r2, r1
 8014d4a:	601a      	str	r2, [r3, #0]
}
 8014d4c:	46c0      	nop			@ (mov r8, r8)
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	46c0      	nop			@ (mov r8, r8)
 8014d54:	40007000 	.word	0x40007000
 8014d58:	fffffeff 	.word	0xfffffeff

08014d5c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b086      	sub	sp, #24
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
 8014d64:	000a      	movs	r2, r1
 8014d66:	1cfb      	adds	r3, r7, #3
 8014d68:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8014d6e:	4b25      	ldr	r3, [pc, #148]	@ (8014e04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014d70:	681a      	ldr	r2, [r3, #0]
 8014d72:	2380      	movs	r3, #128	@ 0x80
 8014d74:	009b      	lsls	r3, r3, #2
 8014d76:	4013      	ands	r3, r2
 8014d78:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8014d7a:	4b23      	ldr	r3, [pc, #140]	@ (8014e08 <HAL_PWR_EnterSTOPMode+0xac>)
 8014d7c:	6a1b      	ldr	r3, [r3, #32]
 8014d7e:	2201      	movs	r2, #1
 8014d80:	4013      	ands	r3, r2
 8014d82:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d008      	beq.n	8014d9c <HAL_PWR_EnterSTOPMode+0x40>
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d005      	beq.n	8014d9c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8014d90:	4b1c      	ldr	r3, [pc, #112]	@ (8014e04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014d92:	681a      	ldr	r2, [r3, #0]
 8014d94:	4b1b      	ldr	r3, [pc, #108]	@ (8014e04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014d96:	491d      	ldr	r1, [pc, #116]	@ (8014e0c <HAL_PWR_EnterSTOPMode+0xb0>)
 8014d98:	400a      	ands	r2, r1
 8014d9a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8014d9c:	4b19      	ldr	r3, [pc, #100]	@ (8014e04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	2203      	movs	r2, #3
 8014da6:	4393      	bics	r3, r2
 8014da8:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8014daa:	697a      	ldr	r2, [r7, #20]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	4313      	orrs	r3, r2
 8014db0:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8014db2:	4b14      	ldr	r3, [pc, #80]	@ (8014e04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014db4:	697a      	ldr	r2, [r7, #20]
 8014db6:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014db8:	4b15      	ldr	r3, [pc, #84]	@ (8014e10 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014dba:	691a      	ldr	r2, [r3, #16]
 8014dbc:	4b14      	ldr	r3, [pc, #80]	@ (8014e10 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014dbe:	2104      	movs	r1, #4
 8014dc0:	430a      	orrs	r2, r1
 8014dc2:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8014dc4:	1cfb      	adds	r3, r7, #3
 8014dc6:	781b      	ldrb	r3, [r3, #0]
 8014dc8:	2b01      	cmp	r3, #1
 8014dca:	d101      	bne.n	8014dd0 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8014dcc:	bf30      	wfi
 8014dce:	e002      	b.n	8014dd6 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8014dd0:	bf40      	sev
    __WFE();
 8014dd2:	bf20      	wfe
    __WFE();
 8014dd4:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8014e10 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014dd8:	691a      	ldr	r2, [r3, #16]
 8014dda:	4b0d      	ldr	r3, [pc, #52]	@ (8014e10 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014ddc:	2104      	movs	r1, #4
 8014dde:	438a      	bics	r2, r1
 8014de0:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d009      	beq.n	8014dfc <HAL_PWR_EnterSTOPMode+0xa0>
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d006      	beq.n	8014dfc <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8014dee:	4b05      	ldr	r3, [pc, #20]	@ (8014e04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014df0:	681a      	ldr	r2, [r3, #0]
 8014df2:	4b04      	ldr	r3, [pc, #16]	@ (8014e04 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014df4:	2180      	movs	r1, #128	@ 0x80
 8014df6:	0089      	lsls	r1, r1, #2
 8014df8:	430a      	orrs	r2, r1
 8014dfa:	601a      	str	r2, [r3, #0]
  }
}
 8014dfc:	46c0      	nop			@ (mov r8, r8)
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	b006      	add	sp, #24
 8014e02:	bd80      	pop	{r7, pc}
 8014e04:	40007000 	.word	0x40007000
 8014e08:	40010000 	.word	0x40010000
 8014e0c:	fffffdff 	.word	0xfffffdff
 8014e10:	e000ed00 	.word	0xe000ed00

08014e14 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8014e18:	4b07      	ldr	r3, [pc, #28]	@ (8014e38 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014e1a:	681a      	ldr	r2, [r3, #0]
 8014e1c:	4b06      	ldr	r3, [pc, #24]	@ (8014e38 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014e1e:	2102      	movs	r1, #2
 8014e20:	430a      	orrs	r2, r1
 8014e22:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014e24:	4b05      	ldr	r3, [pc, #20]	@ (8014e3c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014e26:	691a      	ldr	r2, [r3, #16]
 8014e28:	4b04      	ldr	r3, [pc, #16]	@ (8014e3c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014e2a:	2104      	movs	r1, #4
 8014e2c:	430a      	orrs	r2, r1
 8014e2e:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8014e30:	bf30      	wfi
}
 8014e32:	46c0      	nop			@ (mov r8, r8)
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}
 8014e38:	40007000 	.word	0x40007000
 8014e3c:	e000ed00 	.word	0xe000ed00

08014e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014e40:	b5b0      	push	{r4, r5, r7, lr}
 8014e42:	b08a      	sub	sp, #40	@ 0x28
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d102      	bne.n	8014e54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8014e4e:	2301      	movs	r3, #1
 8014e50:	f000 fbbf 	bl	80155d2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014e54:	4bc9      	ldr	r3, [pc, #804]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014e56:	68db      	ldr	r3, [r3, #12]
 8014e58:	220c      	movs	r2, #12
 8014e5a:	4013      	ands	r3, r2
 8014e5c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014e5e:	4bc7      	ldr	r3, [pc, #796]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014e60:	68da      	ldr	r2, [r3, #12]
 8014e62:	2380      	movs	r3, #128	@ 0x80
 8014e64:	025b      	lsls	r3, r3, #9
 8014e66:	4013      	ands	r3, r2
 8014e68:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	2201      	movs	r2, #1
 8014e70:	4013      	ands	r3, r2
 8014e72:	d100      	bne.n	8014e76 <HAL_RCC_OscConfig+0x36>
 8014e74:	e07e      	b.n	8014f74 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014e76:	69fb      	ldr	r3, [r7, #28]
 8014e78:	2b08      	cmp	r3, #8
 8014e7a:	d007      	beq.n	8014e8c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014e7c:	69fb      	ldr	r3, [r7, #28]
 8014e7e:	2b0c      	cmp	r3, #12
 8014e80:	d112      	bne.n	8014ea8 <HAL_RCC_OscConfig+0x68>
 8014e82:	69ba      	ldr	r2, [r7, #24]
 8014e84:	2380      	movs	r3, #128	@ 0x80
 8014e86:	025b      	lsls	r3, r3, #9
 8014e88:	429a      	cmp	r2, r3
 8014e8a:	d10d      	bne.n	8014ea8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014e8c:	4bbb      	ldr	r3, [pc, #748]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014e8e:	681a      	ldr	r2, [r3, #0]
 8014e90:	2380      	movs	r3, #128	@ 0x80
 8014e92:	029b      	lsls	r3, r3, #10
 8014e94:	4013      	ands	r3, r2
 8014e96:	d100      	bne.n	8014e9a <HAL_RCC_OscConfig+0x5a>
 8014e98:	e06b      	b.n	8014f72 <HAL_RCC_OscConfig+0x132>
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	685b      	ldr	r3, [r3, #4]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d167      	bne.n	8014f72 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8014ea2:	2301      	movs	r3, #1
 8014ea4:	f000 fb95 	bl	80155d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	685a      	ldr	r2, [r3, #4]
 8014eac:	2380      	movs	r3, #128	@ 0x80
 8014eae:	025b      	lsls	r3, r3, #9
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	d107      	bne.n	8014ec4 <HAL_RCC_OscConfig+0x84>
 8014eb4:	4bb1      	ldr	r3, [pc, #708]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014eb6:	681a      	ldr	r2, [r3, #0]
 8014eb8:	4bb0      	ldr	r3, [pc, #704]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014eba:	2180      	movs	r1, #128	@ 0x80
 8014ebc:	0249      	lsls	r1, r1, #9
 8014ebe:	430a      	orrs	r2, r1
 8014ec0:	601a      	str	r2, [r3, #0]
 8014ec2:	e027      	b.n	8014f14 <HAL_RCC_OscConfig+0xd4>
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	685a      	ldr	r2, [r3, #4]
 8014ec8:	23a0      	movs	r3, #160	@ 0xa0
 8014eca:	02db      	lsls	r3, r3, #11
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d10e      	bne.n	8014eee <HAL_RCC_OscConfig+0xae>
 8014ed0:	4baa      	ldr	r3, [pc, #680]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014ed2:	681a      	ldr	r2, [r3, #0]
 8014ed4:	4ba9      	ldr	r3, [pc, #676]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014ed6:	2180      	movs	r1, #128	@ 0x80
 8014ed8:	02c9      	lsls	r1, r1, #11
 8014eda:	430a      	orrs	r2, r1
 8014edc:	601a      	str	r2, [r3, #0]
 8014ede:	4ba7      	ldr	r3, [pc, #668]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014ee0:	681a      	ldr	r2, [r3, #0]
 8014ee2:	4ba6      	ldr	r3, [pc, #664]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014ee4:	2180      	movs	r1, #128	@ 0x80
 8014ee6:	0249      	lsls	r1, r1, #9
 8014ee8:	430a      	orrs	r2, r1
 8014eea:	601a      	str	r2, [r3, #0]
 8014eec:	e012      	b.n	8014f14 <HAL_RCC_OscConfig+0xd4>
 8014eee:	4ba3      	ldr	r3, [pc, #652]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014ef0:	681a      	ldr	r2, [r3, #0]
 8014ef2:	4ba2      	ldr	r3, [pc, #648]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014ef4:	49a2      	ldr	r1, [pc, #648]	@ (8015180 <HAL_RCC_OscConfig+0x340>)
 8014ef6:	400a      	ands	r2, r1
 8014ef8:	601a      	str	r2, [r3, #0]
 8014efa:	4ba0      	ldr	r3, [pc, #640]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014efc:	681a      	ldr	r2, [r3, #0]
 8014efe:	2380      	movs	r3, #128	@ 0x80
 8014f00:	025b      	lsls	r3, r3, #9
 8014f02:	4013      	ands	r3, r2
 8014f04:	60fb      	str	r3, [r7, #12]
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	4b9c      	ldr	r3, [pc, #624]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014f0a:	681a      	ldr	r2, [r3, #0]
 8014f0c:	4b9b      	ldr	r3, [pc, #620]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014f0e:	499d      	ldr	r1, [pc, #628]	@ (8015184 <HAL_RCC_OscConfig+0x344>)
 8014f10:	400a      	ands	r2, r1
 8014f12:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	685b      	ldr	r3, [r3, #4]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d015      	beq.n	8014f48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014f1c:	f7f9 fe60 	bl	800ebe0 <HAL_GetTick>
 8014f20:	0003      	movs	r3, r0
 8014f22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014f24:	e009      	b.n	8014f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014f26:	f7f9 fe5b 	bl	800ebe0 <HAL_GetTick>
 8014f2a:	0002      	movs	r2, r0
 8014f2c:	697b      	ldr	r3, [r7, #20]
 8014f2e:	1ad3      	subs	r3, r2, r3
 8014f30:	2b64      	cmp	r3, #100	@ 0x64
 8014f32:	d902      	bls.n	8014f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014f34:	2303      	movs	r3, #3
 8014f36:	f000 fb4c 	bl	80155d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014f3a:	4b90      	ldr	r3, [pc, #576]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014f3c:	681a      	ldr	r2, [r3, #0]
 8014f3e:	2380      	movs	r3, #128	@ 0x80
 8014f40:	029b      	lsls	r3, r3, #10
 8014f42:	4013      	ands	r3, r2
 8014f44:	d0ef      	beq.n	8014f26 <HAL_RCC_OscConfig+0xe6>
 8014f46:	e015      	b.n	8014f74 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014f48:	f7f9 fe4a 	bl	800ebe0 <HAL_GetTick>
 8014f4c:	0003      	movs	r3, r0
 8014f4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014f50:	e008      	b.n	8014f64 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014f52:	f7f9 fe45 	bl	800ebe0 <HAL_GetTick>
 8014f56:	0002      	movs	r2, r0
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	1ad3      	subs	r3, r2, r3
 8014f5c:	2b64      	cmp	r3, #100	@ 0x64
 8014f5e:	d901      	bls.n	8014f64 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8014f60:	2303      	movs	r3, #3
 8014f62:	e336      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014f64:	4b85      	ldr	r3, [pc, #532]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014f66:	681a      	ldr	r2, [r3, #0]
 8014f68:	2380      	movs	r3, #128	@ 0x80
 8014f6a:	029b      	lsls	r3, r3, #10
 8014f6c:	4013      	ands	r3, r2
 8014f6e:	d1f0      	bne.n	8014f52 <HAL_RCC_OscConfig+0x112>
 8014f70:	e000      	b.n	8014f74 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014f72:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	2202      	movs	r2, #2
 8014f7a:	4013      	ands	r3, r2
 8014f7c:	d100      	bne.n	8014f80 <HAL_RCC_OscConfig+0x140>
 8014f7e:	e099      	b.n	80150b4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8014f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f88:	2220      	movs	r2, #32
 8014f8a:	4013      	ands	r3, r2
 8014f8c:	d009      	beq.n	8014fa2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8014f8e:	4b7b      	ldr	r3, [pc, #492]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014f90:	681a      	ldr	r2, [r3, #0]
 8014f92:	4b7a      	ldr	r3, [pc, #488]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014f94:	2120      	movs	r1, #32
 8014f96:	430a      	orrs	r2, r1
 8014f98:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8014f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9c:	2220      	movs	r2, #32
 8014f9e:	4393      	bics	r3, r2
 8014fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	2b04      	cmp	r3, #4
 8014fa6:	d005      	beq.n	8014fb4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8014fa8:	69fb      	ldr	r3, [r7, #28]
 8014faa:	2b0c      	cmp	r3, #12
 8014fac:	d13e      	bne.n	801502c <HAL_RCC_OscConfig+0x1ec>
 8014fae:	69bb      	ldr	r3, [r7, #24]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d13b      	bne.n	801502c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8014fb4:	4b71      	ldr	r3, [pc, #452]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	2204      	movs	r2, #4
 8014fba:	4013      	ands	r3, r2
 8014fbc:	d004      	beq.n	8014fc8 <HAL_RCC_OscConfig+0x188>
 8014fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d101      	bne.n	8014fc8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	e304      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014fc8:	4b6c      	ldr	r3, [pc, #432]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014fca:	685b      	ldr	r3, [r3, #4]
 8014fcc:	4a6e      	ldr	r2, [pc, #440]	@ (8015188 <HAL_RCC_OscConfig+0x348>)
 8014fce:	4013      	ands	r3, r2
 8014fd0:	0019      	movs	r1, r3
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	691b      	ldr	r3, [r3, #16]
 8014fd6:	021a      	lsls	r2, r3, #8
 8014fd8:	4b68      	ldr	r3, [pc, #416]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014fda:	430a      	orrs	r2, r1
 8014fdc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8014fde:	4b67      	ldr	r3, [pc, #412]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	2209      	movs	r2, #9
 8014fe4:	4393      	bics	r3, r2
 8014fe6:	0019      	movs	r1, r3
 8014fe8:	4b64      	ldr	r3, [pc, #400]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fec:	430a      	orrs	r2, r1
 8014fee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014ff0:	f000 fc42 	bl	8015878 <HAL_RCC_GetSysClockFreq>
 8014ff4:	0001      	movs	r1, r0
 8014ff6:	4b61      	ldr	r3, [pc, #388]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8014ff8:	68db      	ldr	r3, [r3, #12]
 8014ffa:	091b      	lsrs	r3, r3, #4
 8014ffc:	220f      	movs	r2, #15
 8014ffe:	4013      	ands	r3, r2
 8015000:	4a62      	ldr	r2, [pc, #392]	@ (801518c <HAL_RCC_OscConfig+0x34c>)
 8015002:	5cd3      	ldrb	r3, [r2, r3]
 8015004:	000a      	movs	r2, r1
 8015006:	40da      	lsrs	r2, r3
 8015008:	4b61      	ldr	r3, [pc, #388]	@ (8015190 <HAL_RCC_OscConfig+0x350>)
 801500a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801500c:	4b61      	ldr	r3, [pc, #388]	@ (8015194 <HAL_RCC_OscConfig+0x354>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	2513      	movs	r5, #19
 8015012:	197c      	adds	r4, r7, r5
 8015014:	0018      	movs	r0, r3
 8015016:	f7f9 fd9d 	bl	800eb54 <HAL_InitTick>
 801501a:	0003      	movs	r3, r0
 801501c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801501e:	197b      	adds	r3, r7, r5
 8015020:	781b      	ldrb	r3, [r3, #0]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d046      	beq.n	80150b4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8015026:	197b      	adds	r3, r7, r5
 8015028:	781b      	ldrb	r3, [r3, #0]
 801502a:	e2d2      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801502e:	2b00      	cmp	r3, #0
 8015030:	d027      	beq.n	8015082 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8015032:	4b52      	ldr	r3, [pc, #328]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	2209      	movs	r2, #9
 8015038:	4393      	bics	r3, r2
 801503a:	0019      	movs	r1, r3
 801503c:	4b4f      	ldr	r3, [pc, #316]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 801503e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015040:	430a      	orrs	r2, r1
 8015042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015044:	f7f9 fdcc 	bl	800ebe0 <HAL_GetTick>
 8015048:	0003      	movs	r3, r0
 801504a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801504c:	e008      	b.n	8015060 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801504e:	f7f9 fdc7 	bl	800ebe0 <HAL_GetTick>
 8015052:	0002      	movs	r2, r0
 8015054:	697b      	ldr	r3, [r7, #20]
 8015056:	1ad3      	subs	r3, r2, r3
 8015058:	2b02      	cmp	r3, #2
 801505a:	d901      	bls.n	8015060 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801505c:	2303      	movs	r3, #3
 801505e:	e2b8      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015060:	4b46      	ldr	r3, [pc, #280]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	2204      	movs	r2, #4
 8015066:	4013      	ands	r3, r2
 8015068:	d0f1      	beq.n	801504e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801506a:	4b44      	ldr	r3, [pc, #272]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 801506c:	685b      	ldr	r3, [r3, #4]
 801506e:	4a46      	ldr	r2, [pc, #280]	@ (8015188 <HAL_RCC_OscConfig+0x348>)
 8015070:	4013      	ands	r3, r2
 8015072:	0019      	movs	r1, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	691b      	ldr	r3, [r3, #16]
 8015078:	021a      	lsls	r2, r3, #8
 801507a:	4b40      	ldr	r3, [pc, #256]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 801507c:	430a      	orrs	r2, r1
 801507e:	605a      	str	r2, [r3, #4]
 8015080:	e018      	b.n	80150b4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015082:	4b3e      	ldr	r3, [pc, #248]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8015084:	681a      	ldr	r2, [r3, #0]
 8015086:	4b3d      	ldr	r3, [pc, #244]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8015088:	2101      	movs	r1, #1
 801508a:	438a      	bics	r2, r1
 801508c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801508e:	f7f9 fda7 	bl	800ebe0 <HAL_GetTick>
 8015092:	0003      	movs	r3, r0
 8015094:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015096:	e008      	b.n	80150aa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015098:	f7f9 fda2 	bl	800ebe0 <HAL_GetTick>
 801509c:	0002      	movs	r2, r0
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	1ad3      	subs	r3, r2, r3
 80150a2:	2b02      	cmp	r3, #2
 80150a4:	d901      	bls.n	80150aa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80150a6:	2303      	movs	r3, #3
 80150a8:	e293      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80150aa:	4b34      	ldr	r3, [pc, #208]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	2204      	movs	r2, #4
 80150b0:	4013      	ands	r3, r2
 80150b2:	d1f1      	bne.n	8015098 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2210      	movs	r2, #16
 80150ba:	4013      	ands	r3, r2
 80150bc:	d100      	bne.n	80150c0 <HAL_RCC_OscConfig+0x280>
 80150be:	e0a2      	b.n	8015206 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80150c0:	69fb      	ldr	r3, [r7, #28]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d140      	bne.n	8015148 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80150c6:	4b2d      	ldr	r3, [pc, #180]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 80150c8:	681a      	ldr	r2, [r3, #0]
 80150ca:	2380      	movs	r3, #128	@ 0x80
 80150cc:	009b      	lsls	r3, r3, #2
 80150ce:	4013      	ands	r3, r2
 80150d0:	d005      	beq.n	80150de <HAL_RCC_OscConfig+0x29e>
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	69db      	ldr	r3, [r3, #28]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d101      	bne.n	80150de <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80150da:	2301      	movs	r3, #1
 80150dc:	e279      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80150de:	4b27      	ldr	r3, [pc, #156]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 80150e0:	685b      	ldr	r3, [r3, #4]
 80150e2:	4a2d      	ldr	r2, [pc, #180]	@ (8015198 <HAL_RCC_OscConfig+0x358>)
 80150e4:	4013      	ands	r3, r2
 80150e6:	0019      	movs	r1, r3
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80150ec:	4b23      	ldr	r3, [pc, #140]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 80150ee:	430a      	orrs	r2, r1
 80150f0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80150f2:	4b22      	ldr	r3, [pc, #136]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 80150f4:	685b      	ldr	r3, [r3, #4]
 80150f6:	021b      	lsls	r3, r3, #8
 80150f8:	0a19      	lsrs	r1, r3, #8
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	6a1b      	ldr	r3, [r3, #32]
 80150fe:	061a      	lsls	r2, r3, #24
 8015100:	4b1e      	ldr	r3, [pc, #120]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8015102:	430a      	orrs	r2, r1
 8015104:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801510a:	0b5b      	lsrs	r3, r3, #13
 801510c:	3301      	adds	r3, #1
 801510e:	2280      	movs	r2, #128	@ 0x80
 8015110:	0212      	lsls	r2, r2, #8
 8015112:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8015114:	4b19      	ldr	r3, [pc, #100]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	091b      	lsrs	r3, r3, #4
 801511a:	210f      	movs	r1, #15
 801511c:	400b      	ands	r3, r1
 801511e:	491b      	ldr	r1, [pc, #108]	@ (801518c <HAL_RCC_OscConfig+0x34c>)
 8015120:	5ccb      	ldrb	r3, [r1, r3]
 8015122:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8015124:	4b1a      	ldr	r3, [pc, #104]	@ (8015190 <HAL_RCC_OscConfig+0x350>)
 8015126:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8015128:	4b1a      	ldr	r3, [pc, #104]	@ (8015194 <HAL_RCC_OscConfig+0x354>)
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	2513      	movs	r5, #19
 801512e:	197c      	adds	r4, r7, r5
 8015130:	0018      	movs	r0, r3
 8015132:	f7f9 fd0f 	bl	800eb54 <HAL_InitTick>
 8015136:	0003      	movs	r3, r0
 8015138:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801513a:	197b      	adds	r3, r7, r5
 801513c:	781b      	ldrb	r3, [r3, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d061      	beq.n	8015206 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8015142:	197b      	adds	r3, r7, r5
 8015144:	781b      	ldrb	r3, [r3, #0]
 8015146:	e244      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	69db      	ldr	r3, [r3, #28]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d040      	beq.n	80151d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015150:	4b0a      	ldr	r3, [pc, #40]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8015152:	681a      	ldr	r2, [r3, #0]
 8015154:	4b09      	ldr	r3, [pc, #36]	@ (801517c <HAL_RCC_OscConfig+0x33c>)
 8015156:	2180      	movs	r1, #128	@ 0x80
 8015158:	0049      	lsls	r1, r1, #1
 801515a:	430a      	orrs	r2, r1
 801515c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801515e:	f7f9 fd3f 	bl	800ebe0 <HAL_GetTick>
 8015162:	0003      	movs	r3, r0
 8015164:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015166:	e019      	b.n	801519c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015168:	f7f9 fd3a 	bl	800ebe0 <HAL_GetTick>
 801516c:	0002      	movs	r2, r0
 801516e:	697b      	ldr	r3, [r7, #20]
 8015170:	1ad3      	subs	r3, r2, r3
 8015172:	2b02      	cmp	r3, #2
 8015174:	d912      	bls.n	801519c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8015176:	2303      	movs	r3, #3
 8015178:	e22b      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
 801517a:	46c0      	nop			@ (mov r8, r8)
 801517c:	40021000 	.word	0x40021000
 8015180:	fffeffff 	.word	0xfffeffff
 8015184:	fffbffff 	.word	0xfffbffff
 8015188:	ffffe0ff 	.word	0xffffe0ff
 801518c:	080254d4 	.word	0x080254d4
 8015190:	200000cc 	.word	0x200000cc
 8015194:	200000dc 	.word	0x200000dc
 8015198:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801519c:	4bca      	ldr	r3, [pc, #808]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801519e:	681a      	ldr	r2, [r3, #0]
 80151a0:	2380      	movs	r3, #128	@ 0x80
 80151a2:	009b      	lsls	r3, r3, #2
 80151a4:	4013      	ands	r3, r2
 80151a6:	d0df      	beq.n	8015168 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80151a8:	4bc7      	ldr	r3, [pc, #796]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80151aa:	685b      	ldr	r3, [r3, #4]
 80151ac:	4ac7      	ldr	r2, [pc, #796]	@ (80154cc <HAL_RCC_OscConfig+0x68c>)
 80151ae:	4013      	ands	r3, r2
 80151b0:	0019      	movs	r1, r3
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80151b6:	4bc4      	ldr	r3, [pc, #784]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80151b8:	430a      	orrs	r2, r1
 80151ba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80151bc:	4bc2      	ldr	r3, [pc, #776]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80151be:	685b      	ldr	r3, [r3, #4]
 80151c0:	021b      	lsls	r3, r3, #8
 80151c2:	0a19      	lsrs	r1, r3, #8
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	6a1b      	ldr	r3, [r3, #32]
 80151c8:	061a      	lsls	r2, r3, #24
 80151ca:	4bbf      	ldr	r3, [pc, #764]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80151cc:	430a      	orrs	r2, r1
 80151ce:	605a      	str	r2, [r3, #4]
 80151d0:	e019      	b.n	8015206 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80151d2:	4bbd      	ldr	r3, [pc, #756]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80151d4:	681a      	ldr	r2, [r3, #0]
 80151d6:	4bbc      	ldr	r3, [pc, #752]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80151d8:	49bd      	ldr	r1, [pc, #756]	@ (80154d0 <HAL_RCC_OscConfig+0x690>)
 80151da:	400a      	ands	r2, r1
 80151dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80151de:	f7f9 fcff 	bl	800ebe0 <HAL_GetTick>
 80151e2:	0003      	movs	r3, r0
 80151e4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80151e6:	e008      	b.n	80151fa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80151e8:	f7f9 fcfa 	bl	800ebe0 <HAL_GetTick>
 80151ec:	0002      	movs	r2, r0
 80151ee:	697b      	ldr	r3, [r7, #20]
 80151f0:	1ad3      	subs	r3, r2, r3
 80151f2:	2b02      	cmp	r3, #2
 80151f4:	d901      	bls.n	80151fa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80151f6:	2303      	movs	r3, #3
 80151f8:	e1eb      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80151fa:	4bb3      	ldr	r3, [pc, #716]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80151fc:	681a      	ldr	r2, [r3, #0]
 80151fe:	2380      	movs	r3, #128	@ 0x80
 8015200:	009b      	lsls	r3, r3, #2
 8015202:	4013      	ands	r3, r2
 8015204:	d1f0      	bne.n	80151e8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2208      	movs	r2, #8
 801520c:	4013      	ands	r3, r2
 801520e:	d036      	beq.n	801527e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	695b      	ldr	r3, [r3, #20]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d019      	beq.n	801524c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015218:	4bab      	ldr	r3, [pc, #684]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801521a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801521c:	4baa      	ldr	r3, [pc, #680]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801521e:	2101      	movs	r1, #1
 8015220:	430a      	orrs	r2, r1
 8015222:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015224:	f7f9 fcdc 	bl	800ebe0 <HAL_GetTick>
 8015228:	0003      	movs	r3, r0
 801522a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801522c:	e008      	b.n	8015240 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801522e:	f7f9 fcd7 	bl	800ebe0 <HAL_GetTick>
 8015232:	0002      	movs	r2, r0
 8015234:	697b      	ldr	r3, [r7, #20]
 8015236:	1ad3      	subs	r3, r2, r3
 8015238:	2b02      	cmp	r3, #2
 801523a:	d901      	bls.n	8015240 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801523c:	2303      	movs	r3, #3
 801523e:	e1c8      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015240:	4ba1      	ldr	r3, [pc, #644]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015244:	2202      	movs	r2, #2
 8015246:	4013      	ands	r3, r2
 8015248:	d0f1      	beq.n	801522e <HAL_RCC_OscConfig+0x3ee>
 801524a:	e018      	b.n	801527e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801524c:	4b9e      	ldr	r3, [pc, #632]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801524e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015250:	4b9d      	ldr	r3, [pc, #628]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015252:	2101      	movs	r1, #1
 8015254:	438a      	bics	r2, r1
 8015256:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015258:	f7f9 fcc2 	bl	800ebe0 <HAL_GetTick>
 801525c:	0003      	movs	r3, r0
 801525e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015260:	e008      	b.n	8015274 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015262:	f7f9 fcbd 	bl	800ebe0 <HAL_GetTick>
 8015266:	0002      	movs	r2, r0
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	1ad3      	subs	r3, r2, r3
 801526c:	2b02      	cmp	r3, #2
 801526e:	d901      	bls.n	8015274 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8015270:	2303      	movs	r3, #3
 8015272:	e1ae      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015274:	4b94      	ldr	r3, [pc, #592]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015278:	2202      	movs	r2, #2
 801527a:	4013      	ands	r3, r2
 801527c:	d1f1      	bne.n	8015262 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	2204      	movs	r2, #4
 8015284:	4013      	ands	r3, r2
 8015286:	d100      	bne.n	801528a <HAL_RCC_OscConfig+0x44a>
 8015288:	e0ae      	b.n	80153e8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801528a:	2023      	movs	r0, #35	@ 0x23
 801528c:	183b      	adds	r3, r7, r0
 801528e:	2200      	movs	r2, #0
 8015290:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015292:	4b8d      	ldr	r3, [pc, #564]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015296:	2380      	movs	r3, #128	@ 0x80
 8015298:	055b      	lsls	r3, r3, #21
 801529a:	4013      	ands	r3, r2
 801529c:	d109      	bne.n	80152b2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801529e:	4b8a      	ldr	r3, [pc, #552]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80152a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80152a2:	4b89      	ldr	r3, [pc, #548]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80152a4:	2180      	movs	r1, #128	@ 0x80
 80152a6:	0549      	lsls	r1, r1, #21
 80152a8:	430a      	orrs	r2, r1
 80152aa:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80152ac:	183b      	adds	r3, r7, r0
 80152ae:	2201      	movs	r2, #1
 80152b0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80152b2:	4b88      	ldr	r3, [pc, #544]	@ (80154d4 <HAL_RCC_OscConfig+0x694>)
 80152b4:	681a      	ldr	r2, [r3, #0]
 80152b6:	2380      	movs	r3, #128	@ 0x80
 80152b8:	005b      	lsls	r3, r3, #1
 80152ba:	4013      	ands	r3, r2
 80152bc:	d11a      	bne.n	80152f4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80152be:	4b85      	ldr	r3, [pc, #532]	@ (80154d4 <HAL_RCC_OscConfig+0x694>)
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	4b84      	ldr	r3, [pc, #528]	@ (80154d4 <HAL_RCC_OscConfig+0x694>)
 80152c4:	2180      	movs	r1, #128	@ 0x80
 80152c6:	0049      	lsls	r1, r1, #1
 80152c8:	430a      	orrs	r2, r1
 80152ca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80152cc:	f7f9 fc88 	bl	800ebe0 <HAL_GetTick>
 80152d0:	0003      	movs	r3, r0
 80152d2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80152d4:	e008      	b.n	80152e8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80152d6:	f7f9 fc83 	bl	800ebe0 <HAL_GetTick>
 80152da:	0002      	movs	r2, r0
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	1ad3      	subs	r3, r2, r3
 80152e0:	2b64      	cmp	r3, #100	@ 0x64
 80152e2:	d901      	bls.n	80152e8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80152e4:	2303      	movs	r3, #3
 80152e6:	e174      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80152e8:	4b7a      	ldr	r3, [pc, #488]	@ (80154d4 <HAL_RCC_OscConfig+0x694>)
 80152ea:	681a      	ldr	r2, [r3, #0]
 80152ec:	2380      	movs	r3, #128	@ 0x80
 80152ee:	005b      	lsls	r3, r3, #1
 80152f0:	4013      	ands	r3, r2
 80152f2:	d0f0      	beq.n	80152d6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	689a      	ldr	r2, [r3, #8]
 80152f8:	2380      	movs	r3, #128	@ 0x80
 80152fa:	005b      	lsls	r3, r3, #1
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d107      	bne.n	8015310 <HAL_RCC_OscConfig+0x4d0>
 8015300:	4b71      	ldr	r3, [pc, #452]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015302:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015304:	4b70      	ldr	r3, [pc, #448]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015306:	2180      	movs	r1, #128	@ 0x80
 8015308:	0049      	lsls	r1, r1, #1
 801530a:	430a      	orrs	r2, r1
 801530c:	651a      	str	r2, [r3, #80]	@ 0x50
 801530e:	e031      	b.n	8015374 <HAL_RCC_OscConfig+0x534>
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	689b      	ldr	r3, [r3, #8]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d10c      	bne.n	8015332 <HAL_RCC_OscConfig+0x4f2>
 8015318:	4b6b      	ldr	r3, [pc, #428]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801531a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801531c:	4b6a      	ldr	r3, [pc, #424]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801531e:	496c      	ldr	r1, [pc, #432]	@ (80154d0 <HAL_RCC_OscConfig+0x690>)
 8015320:	400a      	ands	r2, r1
 8015322:	651a      	str	r2, [r3, #80]	@ 0x50
 8015324:	4b68      	ldr	r3, [pc, #416]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015326:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015328:	4b67      	ldr	r3, [pc, #412]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801532a:	496b      	ldr	r1, [pc, #428]	@ (80154d8 <HAL_RCC_OscConfig+0x698>)
 801532c:	400a      	ands	r2, r1
 801532e:	651a      	str	r2, [r3, #80]	@ 0x50
 8015330:	e020      	b.n	8015374 <HAL_RCC_OscConfig+0x534>
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	689a      	ldr	r2, [r3, #8]
 8015336:	23a0      	movs	r3, #160	@ 0xa0
 8015338:	00db      	lsls	r3, r3, #3
 801533a:	429a      	cmp	r2, r3
 801533c:	d10e      	bne.n	801535c <HAL_RCC_OscConfig+0x51c>
 801533e:	4b62      	ldr	r3, [pc, #392]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015340:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015342:	4b61      	ldr	r3, [pc, #388]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015344:	2180      	movs	r1, #128	@ 0x80
 8015346:	00c9      	lsls	r1, r1, #3
 8015348:	430a      	orrs	r2, r1
 801534a:	651a      	str	r2, [r3, #80]	@ 0x50
 801534c:	4b5e      	ldr	r3, [pc, #376]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801534e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015350:	4b5d      	ldr	r3, [pc, #372]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015352:	2180      	movs	r1, #128	@ 0x80
 8015354:	0049      	lsls	r1, r1, #1
 8015356:	430a      	orrs	r2, r1
 8015358:	651a      	str	r2, [r3, #80]	@ 0x50
 801535a:	e00b      	b.n	8015374 <HAL_RCC_OscConfig+0x534>
 801535c:	4b5a      	ldr	r3, [pc, #360]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801535e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015360:	4b59      	ldr	r3, [pc, #356]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015362:	495b      	ldr	r1, [pc, #364]	@ (80154d0 <HAL_RCC_OscConfig+0x690>)
 8015364:	400a      	ands	r2, r1
 8015366:	651a      	str	r2, [r3, #80]	@ 0x50
 8015368:	4b57      	ldr	r3, [pc, #348]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801536a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801536c:	4b56      	ldr	r3, [pc, #344]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801536e:	495a      	ldr	r1, [pc, #360]	@ (80154d8 <HAL_RCC_OscConfig+0x698>)
 8015370:	400a      	ands	r2, r1
 8015372:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	689b      	ldr	r3, [r3, #8]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d015      	beq.n	80153a8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801537c:	f7f9 fc30 	bl	800ebe0 <HAL_GetTick>
 8015380:	0003      	movs	r3, r0
 8015382:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015384:	e009      	b.n	801539a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015386:	f7f9 fc2b 	bl	800ebe0 <HAL_GetTick>
 801538a:	0002      	movs	r2, r0
 801538c:	697b      	ldr	r3, [r7, #20]
 801538e:	1ad3      	subs	r3, r2, r3
 8015390:	4a52      	ldr	r2, [pc, #328]	@ (80154dc <HAL_RCC_OscConfig+0x69c>)
 8015392:	4293      	cmp	r3, r2
 8015394:	d901      	bls.n	801539a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8015396:	2303      	movs	r3, #3
 8015398:	e11b      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801539a:	4b4b      	ldr	r3, [pc, #300]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801539c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801539e:	2380      	movs	r3, #128	@ 0x80
 80153a0:	009b      	lsls	r3, r3, #2
 80153a2:	4013      	ands	r3, r2
 80153a4:	d0ef      	beq.n	8015386 <HAL_RCC_OscConfig+0x546>
 80153a6:	e014      	b.n	80153d2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80153a8:	f7f9 fc1a 	bl	800ebe0 <HAL_GetTick>
 80153ac:	0003      	movs	r3, r0
 80153ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80153b0:	e009      	b.n	80153c6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80153b2:	f7f9 fc15 	bl	800ebe0 <HAL_GetTick>
 80153b6:	0002      	movs	r2, r0
 80153b8:	697b      	ldr	r3, [r7, #20]
 80153ba:	1ad3      	subs	r3, r2, r3
 80153bc:	4a47      	ldr	r2, [pc, #284]	@ (80154dc <HAL_RCC_OscConfig+0x69c>)
 80153be:	4293      	cmp	r3, r2
 80153c0:	d901      	bls.n	80153c6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80153c2:	2303      	movs	r3, #3
 80153c4:	e105      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80153c6:	4b40      	ldr	r3, [pc, #256]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80153c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153ca:	2380      	movs	r3, #128	@ 0x80
 80153cc:	009b      	lsls	r3, r3, #2
 80153ce:	4013      	ands	r3, r2
 80153d0:	d1ef      	bne.n	80153b2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80153d2:	2323      	movs	r3, #35	@ 0x23
 80153d4:	18fb      	adds	r3, r7, r3
 80153d6:	781b      	ldrb	r3, [r3, #0]
 80153d8:	2b01      	cmp	r3, #1
 80153da:	d105      	bne.n	80153e8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80153dc:	4b3a      	ldr	r3, [pc, #232]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80153de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80153e0:	4b39      	ldr	r3, [pc, #228]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80153e2:	493f      	ldr	r1, [pc, #252]	@ (80154e0 <HAL_RCC_OscConfig+0x6a0>)
 80153e4:	400a      	ands	r2, r1
 80153e6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	2220      	movs	r2, #32
 80153ee:	4013      	ands	r3, r2
 80153f0:	d049      	beq.n	8015486 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	699b      	ldr	r3, [r3, #24]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d026      	beq.n	8015448 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80153fa:	4b33      	ldr	r3, [pc, #204]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80153fc:	689a      	ldr	r2, [r3, #8]
 80153fe:	4b32      	ldr	r3, [pc, #200]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015400:	2101      	movs	r1, #1
 8015402:	430a      	orrs	r2, r1
 8015404:	609a      	str	r2, [r3, #8]
 8015406:	4b30      	ldr	r3, [pc, #192]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 8015408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801540a:	4b2f      	ldr	r3, [pc, #188]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801540c:	2101      	movs	r1, #1
 801540e:	430a      	orrs	r2, r1
 8015410:	635a      	str	r2, [r3, #52]	@ 0x34
 8015412:	4b34      	ldr	r3, [pc, #208]	@ (80154e4 <HAL_RCC_OscConfig+0x6a4>)
 8015414:	6a1a      	ldr	r2, [r3, #32]
 8015416:	4b33      	ldr	r3, [pc, #204]	@ (80154e4 <HAL_RCC_OscConfig+0x6a4>)
 8015418:	2180      	movs	r1, #128	@ 0x80
 801541a:	0189      	lsls	r1, r1, #6
 801541c:	430a      	orrs	r2, r1
 801541e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015420:	f7f9 fbde 	bl	800ebe0 <HAL_GetTick>
 8015424:	0003      	movs	r3, r0
 8015426:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015428:	e008      	b.n	801543c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801542a:	f7f9 fbd9 	bl	800ebe0 <HAL_GetTick>
 801542e:	0002      	movs	r2, r0
 8015430:	697b      	ldr	r3, [r7, #20]
 8015432:	1ad3      	subs	r3, r2, r3
 8015434:	2b02      	cmp	r3, #2
 8015436:	d901      	bls.n	801543c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8015438:	2303      	movs	r3, #3
 801543a:	e0ca      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801543c:	4b22      	ldr	r3, [pc, #136]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801543e:	689b      	ldr	r3, [r3, #8]
 8015440:	2202      	movs	r2, #2
 8015442:	4013      	ands	r3, r2
 8015444:	d0f1      	beq.n	801542a <HAL_RCC_OscConfig+0x5ea>
 8015446:	e01e      	b.n	8015486 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8015448:	4b1f      	ldr	r3, [pc, #124]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801544a:	689a      	ldr	r2, [r3, #8]
 801544c:	4b1e      	ldr	r3, [pc, #120]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801544e:	2101      	movs	r1, #1
 8015450:	438a      	bics	r2, r1
 8015452:	609a      	str	r2, [r3, #8]
 8015454:	4b23      	ldr	r3, [pc, #140]	@ (80154e4 <HAL_RCC_OscConfig+0x6a4>)
 8015456:	6a1a      	ldr	r2, [r3, #32]
 8015458:	4b22      	ldr	r3, [pc, #136]	@ (80154e4 <HAL_RCC_OscConfig+0x6a4>)
 801545a:	4923      	ldr	r1, [pc, #140]	@ (80154e8 <HAL_RCC_OscConfig+0x6a8>)
 801545c:	400a      	ands	r2, r1
 801545e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015460:	f7f9 fbbe 	bl	800ebe0 <HAL_GetTick>
 8015464:	0003      	movs	r3, r0
 8015466:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015468:	e008      	b.n	801547c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801546a:	f7f9 fbb9 	bl	800ebe0 <HAL_GetTick>
 801546e:	0002      	movs	r2, r0
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	1ad3      	subs	r3, r2, r3
 8015474:	2b02      	cmp	r3, #2
 8015476:	d901      	bls.n	801547c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8015478:	2303      	movs	r3, #3
 801547a:	e0aa      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801547c:	4b12      	ldr	r3, [pc, #72]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 801547e:	689b      	ldr	r3, [r3, #8]
 8015480:	2202      	movs	r2, #2
 8015482:	4013      	ands	r3, r2
 8015484:	d1f1      	bne.n	801546a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801548a:	2b00      	cmp	r3, #0
 801548c:	d100      	bne.n	8015490 <HAL_RCC_OscConfig+0x650>
 801548e:	e09f      	b.n	80155d0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	2b0c      	cmp	r3, #12
 8015494:	d100      	bne.n	8015498 <HAL_RCC_OscConfig+0x658>
 8015496:	e078      	b.n	801558a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801549c:	2b02      	cmp	r3, #2
 801549e:	d159      	bne.n	8015554 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80154a0:	4b09      	ldr	r3, [pc, #36]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	4b08      	ldr	r3, [pc, #32]	@ (80154c8 <HAL_RCC_OscConfig+0x688>)
 80154a6:	4911      	ldr	r1, [pc, #68]	@ (80154ec <HAL_RCC_OscConfig+0x6ac>)
 80154a8:	400a      	ands	r2, r1
 80154aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80154ac:	f7f9 fb98 	bl	800ebe0 <HAL_GetTick>
 80154b0:	0003      	movs	r3, r0
 80154b2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80154b4:	e01c      	b.n	80154f0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80154b6:	f7f9 fb93 	bl	800ebe0 <HAL_GetTick>
 80154ba:	0002      	movs	r2, r0
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	1ad3      	subs	r3, r2, r3
 80154c0:	2b02      	cmp	r3, #2
 80154c2:	d915      	bls.n	80154f0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80154c4:	2303      	movs	r3, #3
 80154c6:	e084      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
 80154c8:	40021000 	.word	0x40021000
 80154cc:	ffff1fff 	.word	0xffff1fff
 80154d0:	fffffeff 	.word	0xfffffeff
 80154d4:	40007000 	.word	0x40007000
 80154d8:	fffffbff 	.word	0xfffffbff
 80154dc:	00001388 	.word	0x00001388
 80154e0:	efffffff 	.word	0xefffffff
 80154e4:	40010000 	.word	0x40010000
 80154e8:	ffffdfff 	.word	0xffffdfff
 80154ec:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80154f0:	4b3a      	ldr	r3, [pc, #232]	@ (80155dc <HAL_RCC_OscConfig+0x79c>)
 80154f2:	681a      	ldr	r2, [r3, #0]
 80154f4:	2380      	movs	r3, #128	@ 0x80
 80154f6:	049b      	lsls	r3, r3, #18
 80154f8:	4013      	ands	r3, r2
 80154fa:	d1dc      	bne.n	80154b6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80154fc:	4b37      	ldr	r3, [pc, #220]	@ (80155dc <HAL_RCC_OscConfig+0x79c>)
 80154fe:	68db      	ldr	r3, [r3, #12]
 8015500:	4a37      	ldr	r2, [pc, #220]	@ (80155e0 <HAL_RCC_OscConfig+0x7a0>)
 8015502:	4013      	ands	r3, r2
 8015504:	0019      	movs	r1, r3
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801550e:	431a      	orrs	r2, r3
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015514:	431a      	orrs	r2, r3
 8015516:	4b31      	ldr	r3, [pc, #196]	@ (80155dc <HAL_RCC_OscConfig+0x79c>)
 8015518:	430a      	orrs	r2, r1
 801551a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801551c:	4b2f      	ldr	r3, [pc, #188]	@ (80155dc <HAL_RCC_OscConfig+0x79c>)
 801551e:	681a      	ldr	r2, [r3, #0]
 8015520:	4b2e      	ldr	r3, [pc, #184]	@ (80155dc <HAL_RCC_OscConfig+0x79c>)
 8015522:	2180      	movs	r1, #128	@ 0x80
 8015524:	0449      	lsls	r1, r1, #17
 8015526:	430a      	orrs	r2, r1
 8015528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801552a:	f7f9 fb59 	bl	800ebe0 <HAL_GetTick>
 801552e:	0003      	movs	r3, r0
 8015530:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015532:	e008      	b.n	8015546 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015534:	f7f9 fb54 	bl	800ebe0 <HAL_GetTick>
 8015538:	0002      	movs	r2, r0
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	1ad3      	subs	r3, r2, r3
 801553e:	2b02      	cmp	r3, #2
 8015540:	d901      	bls.n	8015546 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8015542:	2303      	movs	r3, #3
 8015544:	e045      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015546:	4b25      	ldr	r3, [pc, #148]	@ (80155dc <HAL_RCC_OscConfig+0x79c>)
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	2380      	movs	r3, #128	@ 0x80
 801554c:	049b      	lsls	r3, r3, #18
 801554e:	4013      	ands	r3, r2
 8015550:	d0f0      	beq.n	8015534 <HAL_RCC_OscConfig+0x6f4>
 8015552:	e03d      	b.n	80155d0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015554:	4b21      	ldr	r3, [pc, #132]	@ (80155dc <HAL_RCC_OscConfig+0x79c>)
 8015556:	681a      	ldr	r2, [r3, #0]
 8015558:	4b20      	ldr	r3, [pc, #128]	@ (80155dc <HAL_RCC_OscConfig+0x79c>)
 801555a:	4922      	ldr	r1, [pc, #136]	@ (80155e4 <HAL_RCC_OscConfig+0x7a4>)
 801555c:	400a      	ands	r2, r1
 801555e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015560:	f7f9 fb3e 	bl	800ebe0 <HAL_GetTick>
 8015564:	0003      	movs	r3, r0
 8015566:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015568:	e008      	b.n	801557c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801556a:	f7f9 fb39 	bl	800ebe0 <HAL_GetTick>
 801556e:	0002      	movs	r2, r0
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	1ad3      	subs	r3, r2, r3
 8015574:	2b02      	cmp	r3, #2
 8015576:	d901      	bls.n	801557c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8015578:	2303      	movs	r3, #3
 801557a:	e02a      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801557c:	4b17      	ldr	r3, [pc, #92]	@ (80155dc <HAL_RCC_OscConfig+0x79c>)
 801557e:	681a      	ldr	r2, [r3, #0]
 8015580:	2380      	movs	r3, #128	@ 0x80
 8015582:	049b      	lsls	r3, r3, #18
 8015584:	4013      	ands	r3, r2
 8015586:	d1f0      	bne.n	801556a <HAL_RCC_OscConfig+0x72a>
 8015588:	e022      	b.n	80155d0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801558e:	2b01      	cmp	r3, #1
 8015590:	d101      	bne.n	8015596 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8015592:	2301      	movs	r3, #1
 8015594:	e01d      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8015596:	4b11      	ldr	r3, [pc, #68]	@ (80155dc <HAL_RCC_OscConfig+0x79c>)
 8015598:	68db      	ldr	r3, [r3, #12]
 801559a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801559c:	69ba      	ldr	r2, [r7, #24]
 801559e:	2380      	movs	r3, #128	@ 0x80
 80155a0:	025b      	lsls	r3, r3, #9
 80155a2:	401a      	ands	r2, r3
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d10f      	bne.n	80155cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80155ac:	69ba      	ldr	r2, [r7, #24]
 80155ae:	23f0      	movs	r3, #240	@ 0xf0
 80155b0:	039b      	lsls	r3, r3, #14
 80155b2:	401a      	ands	r2, r3
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80155b8:	429a      	cmp	r2, r3
 80155ba:	d107      	bne.n	80155cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80155bc:	69ba      	ldr	r2, [r7, #24]
 80155be:	23c0      	movs	r3, #192	@ 0xc0
 80155c0:	041b      	lsls	r3, r3, #16
 80155c2:	401a      	ands	r2, r3
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d001      	beq.n	80155d0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80155cc:	2301      	movs	r3, #1
 80155ce:	e000      	b.n	80155d2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	0018      	movs	r0, r3
 80155d4:	46bd      	mov	sp, r7
 80155d6:	b00a      	add	sp, #40	@ 0x28
 80155d8:	bdb0      	pop	{r4, r5, r7, pc}
 80155da:	46c0      	nop			@ (mov r8, r8)
 80155dc:	40021000 	.word	0x40021000
 80155e0:	ff02ffff 	.word	0xff02ffff
 80155e4:	feffffff 	.word	0xfeffffff

080155e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80155e8:	b5b0      	push	{r4, r5, r7, lr}
 80155ea:	b084      	sub	sp, #16
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d101      	bne.n	80155fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80155f8:	2301      	movs	r3, #1
 80155fa:	e128      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80155fc:	4b96      	ldr	r3, [pc, #600]	@ (8015858 <HAL_RCC_ClockConfig+0x270>)
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	2201      	movs	r2, #1
 8015602:	4013      	ands	r3, r2
 8015604:	683a      	ldr	r2, [r7, #0]
 8015606:	429a      	cmp	r2, r3
 8015608:	d91e      	bls.n	8015648 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801560a:	4b93      	ldr	r3, [pc, #588]	@ (8015858 <HAL_RCC_ClockConfig+0x270>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	2201      	movs	r2, #1
 8015610:	4393      	bics	r3, r2
 8015612:	0019      	movs	r1, r3
 8015614:	4b90      	ldr	r3, [pc, #576]	@ (8015858 <HAL_RCC_ClockConfig+0x270>)
 8015616:	683a      	ldr	r2, [r7, #0]
 8015618:	430a      	orrs	r2, r1
 801561a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801561c:	f7f9 fae0 	bl	800ebe0 <HAL_GetTick>
 8015620:	0003      	movs	r3, r0
 8015622:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015624:	e009      	b.n	801563a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015626:	f7f9 fadb 	bl	800ebe0 <HAL_GetTick>
 801562a:	0002      	movs	r2, r0
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	1ad3      	subs	r3, r2, r3
 8015630:	4a8a      	ldr	r2, [pc, #552]	@ (801585c <HAL_RCC_ClockConfig+0x274>)
 8015632:	4293      	cmp	r3, r2
 8015634:	d901      	bls.n	801563a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8015636:	2303      	movs	r3, #3
 8015638:	e109      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801563a:	4b87      	ldr	r3, [pc, #540]	@ (8015858 <HAL_RCC_ClockConfig+0x270>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	2201      	movs	r2, #1
 8015640:	4013      	ands	r3, r2
 8015642:	683a      	ldr	r2, [r7, #0]
 8015644:	429a      	cmp	r2, r3
 8015646:	d1ee      	bne.n	8015626 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	2202      	movs	r2, #2
 801564e:	4013      	ands	r3, r2
 8015650:	d009      	beq.n	8015666 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015652:	4b83      	ldr	r3, [pc, #524]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 8015654:	68db      	ldr	r3, [r3, #12]
 8015656:	22f0      	movs	r2, #240	@ 0xf0
 8015658:	4393      	bics	r3, r2
 801565a:	0019      	movs	r1, r3
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	689a      	ldr	r2, [r3, #8]
 8015660:	4b7f      	ldr	r3, [pc, #508]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 8015662:	430a      	orrs	r2, r1
 8015664:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	2201      	movs	r2, #1
 801566c:	4013      	ands	r3, r2
 801566e:	d100      	bne.n	8015672 <HAL_RCC_ClockConfig+0x8a>
 8015670:	e089      	b.n	8015786 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	685b      	ldr	r3, [r3, #4]
 8015676:	2b02      	cmp	r3, #2
 8015678:	d107      	bne.n	801568a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801567a:	4b79      	ldr	r3, [pc, #484]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 801567c:	681a      	ldr	r2, [r3, #0]
 801567e:	2380      	movs	r3, #128	@ 0x80
 8015680:	029b      	lsls	r3, r3, #10
 8015682:	4013      	ands	r3, r2
 8015684:	d120      	bne.n	80156c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015686:	2301      	movs	r3, #1
 8015688:	e0e1      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	685b      	ldr	r3, [r3, #4]
 801568e:	2b03      	cmp	r3, #3
 8015690:	d107      	bne.n	80156a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015692:	4b73      	ldr	r3, [pc, #460]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 8015694:	681a      	ldr	r2, [r3, #0]
 8015696:	2380      	movs	r3, #128	@ 0x80
 8015698:	049b      	lsls	r3, r3, #18
 801569a:	4013      	ands	r3, r2
 801569c:	d114      	bne.n	80156c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801569e:	2301      	movs	r3, #1
 80156a0:	e0d5      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	2b01      	cmp	r3, #1
 80156a8:	d106      	bne.n	80156b8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80156aa:	4b6d      	ldr	r3, [pc, #436]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	2204      	movs	r2, #4
 80156b0:	4013      	ands	r3, r2
 80156b2:	d109      	bne.n	80156c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80156b4:	2301      	movs	r3, #1
 80156b6:	e0ca      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80156b8:	4b69      	ldr	r3, [pc, #420]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 80156ba:	681a      	ldr	r2, [r3, #0]
 80156bc:	2380      	movs	r3, #128	@ 0x80
 80156be:	009b      	lsls	r3, r3, #2
 80156c0:	4013      	ands	r3, r2
 80156c2:	d101      	bne.n	80156c8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80156c4:	2301      	movs	r3, #1
 80156c6:	e0c2      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80156c8:	4b65      	ldr	r3, [pc, #404]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 80156ca:	68db      	ldr	r3, [r3, #12]
 80156cc:	2203      	movs	r2, #3
 80156ce:	4393      	bics	r3, r2
 80156d0:	0019      	movs	r1, r3
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	685a      	ldr	r2, [r3, #4]
 80156d6:	4b62      	ldr	r3, [pc, #392]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 80156d8:	430a      	orrs	r2, r1
 80156da:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80156dc:	f7f9 fa80 	bl	800ebe0 <HAL_GetTick>
 80156e0:	0003      	movs	r3, r0
 80156e2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	685b      	ldr	r3, [r3, #4]
 80156e8:	2b02      	cmp	r3, #2
 80156ea:	d111      	bne.n	8015710 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80156ec:	e009      	b.n	8015702 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80156ee:	f7f9 fa77 	bl	800ebe0 <HAL_GetTick>
 80156f2:	0002      	movs	r2, r0
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	1ad3      	subs	r3, r2, r3
 80156f8:	4a58      	ldr	r2, [pc, #352]	@ (801585c <HAL_RCC_ClockConfig+0x274>)
 80156fa:	4293      	cmp	r3, r2
 80156fc:	d901      	bls.n	8015702 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80156fe:	2303      	movs	r3, #3
 8015700:	e0a5      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015702:	4b57      	ldr	r3, [pc, #348]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 8015704:	68db      	ldr	r3, [r3, #12]
 8015706:	220c      	movs	r2, #12
 8015708:	4013      	ands	r3, r2
 801570a:	2b08      	cmp	r3, #8
 801570c:	d1ef      	bne.n	80156ee <HAL_RCC_ClockConfig+0x106>
 801570e:	e03a      	b.n	8015786 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	685b      	ldr	r3, [r3, #4]
 8015714:	2b03      	cmp	r3, #3
 8015716:	d111      	bne.n	801573c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015718:	e009      	b.n	801572e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801571a:	f7f9 fa61 	bl	800ebe0 <HAL_GetTick>
 801571e:	0002      	movs	r2, r0
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	1ad3      	subs	r3, r2, r3
 8015724:	4a4d      	ldr	r2, [pc, #308]	@ (801585c <HAL_RCC_ClockConfig+0x274>)
 8015726:	4293      	cmp	r3, r2
 8015728:	d901      	bls.n	801572e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801572a:	2303      	movs	r3, #3
 801572c:	e08f      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801572e:	4b4c      	ldr	r3, [pc, #304]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 8015730:	68db      	ldr	r3, [r3, #12]
 8015732:	220c      	movs	r2, #12
 8015734:	4013      	ands	r3, r2
 8015736:	2b0c      	cmp	r3, #12
 8015738:	d1ef      	bne.n	801571a <HAL_RCC_ClockConfig+0x132>
 801573a:	e024      	b.n	8015786 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	685b      	ldr	r3, [r3, #4]
 8015740:	2b01      	cmp	r3, #1
 8015742:	d11b      	bne.n	801577c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015744:	e009      	b.n	801575a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015746:	f7f9 fa4b 	bl	800ebe0 <HAL_GetTick>
 801574a:	0002      	movs	r2, r0
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	1ad3      	subs	r3, r2, r3
 8015750:	4a42      	ldr	r2, [pc, #264]	@ (801585c <HAL_RCC_ClockConfig+0x274>)
 8015752:	4293      	cmp	r3, r2
 8015754:	d901      	bls.n	801575a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8015756:	2303      	movs	r3, #3
 8015758:	e079      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801575a:	4b41      	ldr	r3, [pc, #260]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	220c      	movs	r2, #12
 8015760:	4013      	ands	r3, r2
 8015762:	2b04      	cmp	r3, #4
 8015764:	d1ef      	bne.n	8015746 <HAL_RCC_ClockConfig+0x15e>
 8015766:	e00e      	b.n	8015786 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015768:	f7f9 fa3a 	bl	800ebe0 <HAL_GetTick>
 801576c:	0002      	movs	r2, r0
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	1ad3      	subs	r3, r2, r3
 8015772:	4a3a      	ldr	r2, [pc, #232]	@ (801585c <HAL_RCC_ClockConfig+0x274>)
 8015774:	4293      	cmp	r3, r2
 8015776:	d901      	bls.n	801577c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8015778:	2303      	movs	r3, #3
 801577a:	e068      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801577c:	4b38      	ldr	r3, [pc, #224]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 801577e:	68db      	ldr	r3, [r3, #12]
 8015780:	220c      	movs	r2, #12
 8015782:	4013      	ands	r3, r2
 8015784:	d1f0      	bne.n	8015768 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015786:	4b34      	ldr	r3, [pc, #208]	@ (8015858 <HAL_RCC_ClockConfig+0x270>)
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	2201      	movs	r2, #1
 801578c:	4013      	ands	r3, r2
 801578e:	683a      	ldr	r2, [r7, #0]
 8015790:	429a      	cmp	r2, r3
 8015792:	d21e      	bcs.n	80157d2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015794:	4b30      	ldr	r3, [pc, #192]	@ (8015858 <HAL_RCC_ClockConfig+0x270>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	2201      	movs	r2, #1
 801579a:	4393      	bics	r3, r2
 801579c:	0019      	movs	r1, r3
 801579e:	4b2e      	ldr	r3, [pc, #184]	@ (8015858 <HAL_RCC_ClockConfig+0x270>)
 80157a0:	683a      	ldr	r2, [r7, #0]
 80157a2:	430a      	orrs	r2, r1
 80157a4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80157a6:	f7f9 fa1b 	bl	800ebe0 <HAL_GetTick>
 80157aa:	0003      	movs	r3, r0
 80157ac:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80157ae:	e009      	b.n	80157c4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80157b0:	f7f9 fa16 	bl	800ebe0 <HAL_GetTick>
 80157b4:	0002      	movs	r2, r0
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	1ad3      	subs	r3, r2, r3
 80157ba:	4a28      	ldr	r2, [pc, #160]	@ (801585c <HAL_RCC_ClockConfig+0x274>)
 80157bc:	4293      	cmp	r3, r2
 80157be:	d901      	bls.n	80157c4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80157c0:	2303      	movs	r3, #3
 80157c2:	e044      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80157c4:	4b24      	ldr	r3, [pc, #144]	@ (8015858 <HAL_RCC_ClockConfig+0x270>)
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2201      	movs	r2, #1
 80157ca:	4013      	ands	r3, r2
 80157cc:	683a      	ldr	r2, [r7, #0]
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d1ee      	bne.n	80157b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	2204      	movs	r2, #4
 80157d8:	4013      	ands	r3, r2
 80157da:	d009      	beq.n	80157f0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80157dc:	4b20      	ldr	r3, [pc, #128]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 80157de:	68db      	ldr	r3, [r3, #12]
 80157e0:	4a20      	ldr	r2, [pc, #128]	@ (8015864 <HAL_RCC_ClockConfig+0x27c>)
 80157e2:	4013      	ands	r3, r2
 80157e4:	0019      	movs	r1, r3
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	68da      	ldr	r2, [r3, #12]
 80157ea:	4b1d      	ldr	r3, [pc, #116]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 80157ec:	430a      	orrs	r2, r1
 80157ee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	2208      	movs	r2, #8
 80157f6:	4013      	ands	r3, r2
 80157f8:	d00a      	beq.n	8015810 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80157fa:	4b19      	ldr	r3, [pc, #100]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 80157fc:	68db      	ldr	r3, [r3, #12]
 80157fe:	4a1a      	ldr	r2, [pc, #104]	@ (8015868 <HAL_RCC_ClockConfig+0x280>)
 8015800:	4013      	ands	r3, r2
 8015802:	0019      	movs	r1, r3
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	691b      	ldr	r3, [r3, #16]
 8015808:	00da      	lsls	r2, r3, #3
 801580a:	4b15      	ldr	r3, [pc, #84]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 801580c:	430a      	orrs	r2, r1
 801580e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015810:	f000 f832 	bl	8015878 <HAL_RCC_GetSysClockFreq>
 8015814:	0001      	movs	r1, r0
 8015816:	4b12      	ldr	r3, [pc, #72]	@ (8015860 <HAL_RCC_ClockConfig+0x278>)
 8015818:	68db      	ldr	r3, [r3, #12]
 801581a:	091b      	lsrs	r3, r3, #4
 801581c:	220f      	movs	r2, #15
 801581e:	4013      	ands	r3, r2
 8015820:	4a12      	ldr	r2, [pc, #72]	@ (801586c <HAL_RCC_ClockConfig+0x284>)
 8015822:	5cd3      	ldrb	r3, [r2, r3]
 8015824:	000a      	movs	r2, r1
 8015826:	40da      	lsrs	r2, r3
 8015828:	4b11      	ldr	r3, [pc, #68]	@ (8015870 <HAL_RCC_ClockConfig+0x288>)
 801582a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801582c:	4b11      	ldr	r3, [pc, #68]	@ (8015874 <HAL_RCC_ClockConfig+0x28c>)
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	250b      	movs	r5, #11
 8015832:	197c      	adds	r4, r7, r5
 8015834:	0018      	movs	r0, r3
 8015836:	f7f9 f98d 	bl	800eb54 <HAL_InitTick>
 801583a:	0003      	movs	r3, r0
 801583c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801583e:	197b      	adds	r3, r7, r5
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d002      	beq.n	801584c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8015846:	197b      	adds	r3, r7, r5
 8015848:	781b      	ldrb	r3, [r3, #0]
 801584a:	e000      	b.n	801584e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801584c:	2300      	movs	r3, #0
}
 801584e:	0018      	movs	r0, r3
 8015850:	46bd      	mov	sp, r7
 8015852:	b004      	add	sp, #16
 8015854:	bdb0      	pop	{r4, r5, r7, pc}
 8015856:	46c0      	nop			@ (mov r8, r8)
 8015858:	40022000 	.word	0x40022000
 801585c:	00001388 	.word	0x00001388
 8015860:	40021000 	.word	0x40021000
 8015864:	fffff8ff 	.word	0xfffff8ff
 8015868:	ffffc7ff 	.word	0xffffc7ff
 801586c:	080254d4 	.word	0x080254d4
 8015870:	200000cc 	.word	0x200000cc
 8015874:	200000dc 	.word	0x200000dc

08015878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015878:	b5b0      	push	{r4, r5, r7, lr}
 801587a:	b08e      	sub	sp, #56	@ 0x38
 801587c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801587e:	4b4c      	ldr	r3, [pc, #304]	@ (80159b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8015880:	68db      	ldr	r3, [r3, #12]
 8015882:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015886:	230c      	movs	r3, #12
 8015888:	4013      	ands	r3, r2
 801588a:	2b0c      	cmp	r3, #12
 801588c:	d014      	beq.n	80158b8 <HAL_RCC_GetSysClockFreq+0x40>
 801588e:	d900      	bls.n	8015892 <HAL_RCC_GetSysClockFreq+0x1a>
 8015890:	e07b      	b.n	801598a <HAL_RCC_GetSysClockFreq+0x112>
 8015892:	2b04      	cmp	r3, #4
 8015894:	d002      	beq.n	801589c <HAL_RCC_GetSysClockFreq+0x24>
 8015896:	2b08      	cmp	r3, #8
 8015898:	d00b      	beq.n	80158b2 <HAL_RCC_GetSysClockFreq+0x3a>
 801589a:	e076      	b.n	801598a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801589c:	4b44      	ldr	r3, [pc, #272]	@ (80159b0 <HAL_RCC_GetSysClockFreq+0x138>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	2210      	movs	r2, #16
 80158a2:	4013      	ands	r3, r2
 80158a4:	d002      	beq.n	80158ac <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80158a6:	4b43      	ldr	r3, [pc, #268]	@ (80159b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80158a8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80158aa:	e07c      	b.n	80159a6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80158ac:	4b42      	ldr	r3, [pc, #264]	@ (80159b8 <HAL_RCC_GetSysClockFreq+0x140>)
 80158ae:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80158b0:	e079      	b.n	80159a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80158b2:	4b42      	ldr	r3, [pc, #264]	@ (80159bc <HAL_RCC_GetSysClockFreq+0x144>)
 80158b4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80158b6:	e076      	b.n	80159a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80158b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158ba:	0c9a      	lsrs	r2, r3, #18
 80158bc:	230f      	movs	r3, #15
 80158be:	401a      	ands	r2, r3
 80158c0:	4b3f      	ldr	r3, [pc, #252]	@ (80159c0 <HAL_RCC_GetSysClockFreq+0x148>)
 80158c2:	5c9b      	ldrb	r3, [r3, r2]
 80158c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80158c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158c8:	0d9a      	lsrs	r2, r3, #22
 80158ca:	2303      	movs	r3, #3
 80158cc:	4013      	ands	r3, r2
 80158ce:	3301      	adds	r3, #1
 80158d0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80158d2:	4b37      	ldr	r3, [pc, #220]	@ (80159b0 <HAL_RCC_GetSysClockFreq+0x138>)
 80158d4:	68da      	ldr	r2, [r3, #12]
 80158d6:	2380      	movs	r3, #128	@ 0x80
 80158d8:	025b      	lsls	r3, r3, #9
 80158da:	4013      	ands	r3, r2
 80158dc:	d01a      	beq.n	8015914 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80158de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158e0:	61bb      	str	r3, [r7, #24]
 80158e2:	2300      	movs	r3, #0
 80158e4:	61fb      	str	r3, [r7, #28]
 80158e6:	4a35      	ldr	r2, [pc, #212]	@ (80159bc <HAL_RCC_GetSysClockFreq+0x144>)
 80158e8:	2300      	movs	r3, #0
 80158ea:	69b8      	ldr	r0, [r7, #24]
 80158ec:	69f9      	ldr	r1, [r7, #28]
 80158ee:	f7ea fe67 	bl	80005c0 <__aeabi_lmul>
 80158f2:	0002      	movs	r2, r0
 80158f4:	000b      	movs	r3, r1
 80158f6:	0010      	movs	r0, r2
 80158f8:	0019      	movs	r1, r3
 80158fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158fc:	613b      	str	r3, [r7, #16]
 80158fe:	2300      	movs	r3, #0
 8015900:	617b      	str	r3, [r7, #20]
 8015902:	693a      	ldr	r2, [r7, #16]
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	f7ea fe3b 	bl	8000580 <__aeabi_uldivmod>
 801590a:	0002      	movs	r2, r0
 801590c:	000b      	movs	r3, r1
 801590e:	0013      	movs	r3, r2
 8015910:	637b      	str	r3, [r7, #52]	@ 0x34
 8015912:	e037      	b.n	8015984 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015914:	4b26      	ldr	r3, [pc, #152]	@ (80159b0 <HAL_RCC_GetSysClockFreq+0x138>)
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	2210      	movs	r2, #16
 801591a:	4013      	ands	r3, r2
 801591c:	d01a      	beq.n	8015954 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801591e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015920:	60bb      	str	r3, [r7, #8]
 8015922:	2300      	movs	r3, #0
 8015924:	60fb      	str	r3, [r7, #12]
 8015926:	4a23      	ldr	r2, [pc, #140]	@ (80159b4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015928:	2300      	movs	r3, #0
 801592a:	68b8      	ldr	r0, [r7, #8]
 801592c:	68f9      	ldr	r1, [r7, #12]
 801592e:	f7ea fe47 	bl	80005c0 <__aeabi_lmul>
 8015932:	0002      	movs	r2, r0
 8015934:	000b      	movs	r3, r1
 8015936:	0010      	movs	r0, r2
 8015938:	0019      	movs	r1, r3
 801593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801593c:	603b      	str	r3, [r7, #0]
 801593e:	2300      	movs	r3, #0
 8015940:	607b      	str	r3, [r7, #4]
 8015942:	683a      	ldr	r2, [r7, #0]
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f7ea fe1b 	bl	8000580 <__aeabi_uldivmod>
 801594a:	0002      	movs	r2, r0
 801594c:	000b      	movs	r3, r1
 801594e:	0013      	movs	r3, r2
 8015950:	637b      	str	r3, [r7, #52]	@ 0x34
 8015952:	e017      	b.n	8015984 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015956:	0018      	movs	r0, r3
 8015958:	2300      	movs	r3, #0
 801595a:	0019      	movs	r1, r3
 801595c:	4a16      	ldr	r2, [pc, #88]	@ (80159b8 <HAL_RCC_GetSysClockFreq+0x140>)
 801595e:	2300      	movs	r3, #0
 8015960:	f7ea fe2e 	bl	80005c0 <__aeabi_lmul>
 8015964:	0002      	movs	r2, r0
 8015966:	000b      	movs	r3, r1
 8015968:	0010      	movs	r0, r2
 801596a:	0019      	movs	r1, r3
 801596c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801596e:	001c      	movs	r4, r3
 8015970:	2300      	movs	r3, #0
 8015972:	001d      	movs	r5, r3
 8015974:	0022      	movs	r2, r4
 8015976:	002b      	movs	r3, r5
 8015978:	f7ea fe02 	bl	8000580 <__aeabi_uldivmod>
 801597c:	0002      	movs	r2, r0
 801597e:	000b      	movs	r3, r1
 8015980:	0013      	movs	r3, r2
 8015982:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015986:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015988:	e00d      	b.n	80159a6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801598a:	4b09      	ldr	r3, [pc, #36]	@ (80159b0 <HAL_RCC_GetSysClockFreq+0x138>)
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	0b5b      	lsrs	r3, r3, #13
 8015990:	2207      	movs	r2, #7
 8015992:	4013      	ands	r3, r2
 8015994:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015996:	6a3b      	ldr	r3, [r7, #32]
 8015998:	3301      	adds	r3, #1
 801599a:	2280      	movs	r2, #128	@ 0x80
 801599c:	0212      	lsls	r2, r2, #8
 801599e:	409a      	lsls	r2, r3
 80159a0:	0013      	movs	r3, r2
 80159a2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80159a4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80159a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80159a8:	0018      	movs	r0, r3
 80159aa:	46bd      	mov	sp, r7
 80159ac:	b00e      	add	sp, #56	@ 0x38
 80159ae:	bdb0      	pop	{r4, r5, r7, pc}
 80159b0:	40021000 	.word	0x40021000
 80159b4:	003d0900 	.word	0x003d0900
 80159b8:	00f42400 	.word	0x00f42400
 80159bc:	007a1200 	.word	0x007a1200
 80159c0:	080254ec 	.word	0x080254ec

080159c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80159c8:	4b02      	ldr	r3, [pc, #8]	@ (80159d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80159ca:	681b      	ldr	r3, [r3, #0]
}
 80159cc:	0018      	movs	r0, r3
 80159ce:	46bd      	mov	sp, r7
 80159d0:	bd80      	pop	{r7, pc}
 80159d2:	46c0      	nop			@ (mov r8, r8)
 80159d4:	200000cc 	.word	0x200000cc

080159d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80159dc:	f7ff fff2 	bl	80159c4 <HAL_RCC_GetHCLKFreq>
 80159e0:	0001      	movs	r1, r0
 80159e2:	4b06      	ldr	r3, [pc, #24]	@ (80159fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	0a1b      	lsrs	r3, r3, #8
 80159e8:	2207      	movs	r2, #7
 80159ea:	4013      	ands	r3, r2
 80159ec:	4a04      	ldr	r2, [pc, #16]	@ (8015a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80159ee:	5cd3      	ldrb	r3, [r2, r3]
 80159f0:	40d9      	lsrs	r1, r3
 80159f2:	000b      	movs	r3, r1
}
 80159f4:	0018      	movs	r0, r3
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
 80159fa:	46c0      	nop			@ (mov r8, r8)
 80159fc:	40021000 	.word	0x40021000
 8015a00:	080254e4 	.word	0x080254e4

08015a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015a08:	f7ff ffdc 	bl	80159c4 <HAL_RCC_GetHCLKFreq>
 8015a0c:	0001      	movs	r1, r0
 8015a0e:	4b06      	ldr	r3, [pc, #24]	@ (8015a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015a10:	68db      	ldr	r3, [r3, #12]
 8015a12:	0adb      	lsrs	r3, r3, #11
 8015a14:	2207      	movs	r2, #7
 8015a16:	4013      	ands	r3, r2
 8015a18:	4a04      	ldr	r2, [pc, #16]	@ (8015a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8015a1a:	5cd3      	ldrb	r3, [r2, r3]
 8015a1c:	40d9      	lsrs	r1, r3
 8015a1e:	000b      	movs	r3, r1
}
 8015a20:	0018      	movs	r0, r3
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}
 8015a26:	46c0      	nop			@ (mov r8, r8)
 8015a28:	40021000 	.word	0x40021000
 8015a2c:	080254e4 	.word	0x080254e4

08015a30 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b086      	sub	sp, #24
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015a38:	2017      	movs	r0, #23
 8015a3a:	183b      	adds	r3, r7, r0
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	2220      	movs	r2, #32
 8015a46:	4013      	ands	r3, r2
 8015a48:	d100      	bne.n	8015a4c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015a4a:	e0c7      	b.n	8015bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015a4c:	4b9b      	ldr	r3, [pc, #620]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015a4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015a50:	2380      	movs	r3, #128	@ 0x80
 8015a52:	055b      	lsls	r3, r3, #21
 8015a54:	4013      	ands	r3, r2
 8015a56:	d109      	bne.n	8015a6c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015a58:	4b98      	ldr	r3, [pc, #608]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015a5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015a5c:	4b97      	ldr	r3, [pc, #604]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015a5e:	2180      	movs	r1, #128	@ 0x80
 8015a60:	0549      	lsls	r1, r1, #21
 8015a62:	430a      	orrs	r2, r1
 8015a64:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015a66:	183b      	adds	r3, r7, r0
 8015a68:	2201      	movs	r2, #1
 8015a6a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015a6c:	4b94      	ldr	r3, [pc, #592]	@ (8015cc0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015a6e:	681a      	ldr	r2, [r3, #0]
 8015a70:	2380      	movs	r3, #128	@ 0x80
 8015a72:	005b      	lsls	r3, r3, #1
 8015a74:	4013      	ands	r3, r2
 8015a76:	d11a      	bne.n	8015aae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015a78:	4b91      	ldr	r3, [pc, #580]	@ (8015cc0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015a7a:	681a      	ldr	r2, [r3, #0]
 8015a7c:	4b90      	ldr	r3, [pc, #576]	@ (8015cc0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015a7e:	2180      	movs	r1, #128	@ 0x80
 8015a80:	0049      	lsls	r1, r1, #1
 8015a82:	430a      	orrs	r2, r1
 8015a84:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015a86:	f7f9 f8ab 	bl	800ebe0 <HAL_GetTick>
 8015a8a:	0003      	movs	r3, r0
 8015a8c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015a8e:	e008      	b.n	8015aa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015a90:	f7f9 f8a6 	bl	800ebe0 <HAL_GetTick>
 8015a94:	0002      	movs	r2, r0
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	1ad3      	subs	r3, r2, r3
 8015a9a:	2b64      	cmp	r3, #100	@ 0x64
 8015a9c:	d901      	bls.n	8015aa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8015a9e:	2303      	movs	r3, #3
 8015aa0:	e107      	b.n	8015cb2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015aa2:	4b87      	ldr	r3, [pc, #540]	@ (8015cc0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015aa4:	681a      	ldr	r2, [r3, #0]
 8015aa6:	2380      	movs	r3, #128	@ 0x80
 8015aa8:	005b      	lsls	r3, r3, #1
 8015aaa:	4013      	ands	r3, r2
 8015aac:	d0f0      	beq.n	8015a90 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8015aae:	4b83      	ldr	r3, [pc, #524]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	23c0      	movs	r3, #192	@ 0xc0
 8015ab4:	039b      	lsls	r3, r3, #14
 8015ab6:	4013      	ands	r3, r2
 8015ab8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	685a      	ldr	r2, [r3, #4]
 8015abe:	23c0      	movs	r3, #192	@ 0xc0
 8015ac0:	039b      	lsls	r3, r3, #14
 8015ac2:	4013      	ands	r3, r2
 8015ac4:	68fa      	ldr	r2, [r7, #12]
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d013      	beq.n	8015af2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	685a      	ldr	r2, [r3, #4]
 8015ace:	23c0      	movs	r3, #192	@ 0xc0
 8015ad0:	029b      	lsls	r3, r3, #10
 8015ad2:	401a      	ands	r2, r3
 8015ad4:	23c0      	movs	r3, #192	@ 0xc0
 8015ad6:	029b      	lsls	r3, r3, #10
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d10a      	bne.n	8015af2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015adc:	4b77      	ldr	r3, [pc, #476]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ade:	681a      	ldr	r2, [r3, #0]
 8015ae0:	2380      	movs	r3, #128	@ 0x80
 8015ae2:	029b      	lsls	r3, r3, #10
 8015ae4:	401a      	ands	r2, r3
 8015ae6:	2380      	movs	r3, #128	@ 0x80
 8015ae8:	029b      	lsls	r3, r3, #10
 8015aea:	429a      	cmp	r2, r3
 8015aec:	d101      	bne.n	8015af2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8015aee:	2301      	movs	r3, #1
 8015af0:	e0df      	b.n	8015cb2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8015af2:	4b72      	ldr	r3, [pc, #456]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015af4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015af6:	23c0      	movs	r3, #192	@ 0xc0
 8015af8:	029b      	lsls	r3, r3, #10
 8015afa:	4013      	ands	r3, r2
 8015afc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d03b      	beq.n	8015b7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	685a      	ldr	r2, [r3, #4]
 8015b08:	23c0      	movs	r3, #192	@ 0xc0
 8015b0a:	029b      	lsls	r3, r3, #10
 8015b0c:	4013      	ands	r3, r2
 8015b0e:	68fa      	ldr	r2, [r7, #12]
 8015b10:	429a      	cmp	r2, r3
 8015b12:	d033      	beq.n	8015b7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	2220      	movs	r2, #32
 8015b1a:	4013      	ands	r3, r2
 8015b1c:	d02e      	beq.n	8015b7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8015b1e:	4b67      	ldr	r3, [pc, #412]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015b22:	4a68      	ldr	r2, [pc, #416]	@ (8015cc4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015b24:	4013      	ands	r3, r2
 8015b26:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015b28:	4b64      	ldr	r3, [pc, #400]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015b2c:	4b63      	ldr	r3, [pc, #396]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b2e:	2180      	movs	r1, #128	@ 0x80
 8015b30:	0309      	lsls	r1, r1, #12
 8015b32:	430a      	orrs	r2, r1
 8015b34:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015b36:	4b61      	ldr	r3, [pc, #388]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015b3a:	4b60      	ldr	r3, [pc, #384]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b3c:	4962      	ldr	r1, [pc, #392]	@ (8015cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8015b3e:	400a      	ands	r2, r1
 8015b40:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8015b42:	4b5e      	ldr	r3, [pc, #376]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b44:	68fa      	ldr	r2, [r7, #12]
 8015b46:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015b48:	68fa      	ldr	r2, [r7, #12]
 8015b4a:	2380      	movs	r3, #128	@ 0x80
 8015b4c:	005b      	lsls	r3, r3, #1
 8015b4e:	4013      	ands	r3, r2
 8015b50:	d014      	beq.n	8015b7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015b52:	f7f9 f845 	bl	800ebe0 <HAL_GetTick>
 8015b56:	0003      	movs	r3, r0
 8015b58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015b5a:	e009      	b.n	8015b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015b5c:	f7f9 f840 	bl	800ebe0 <HAL_GetTick>
 8015b60:	0002      	movs	r2, r0
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	1ad3      	subs	r3, r2, r3
 8015b66:	4a59      	ldr	r2, [pc, #356]	@ (8015ccc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015b68:	4293      	cmp	r3, r2
 8015b6a:	d901      	bls.n	8015b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015b6c:	2303      	movs	r3, #3
 8015b6e:	e0a0      	b.n	8015cb2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015b70:	4b52      	ldr	r3, [pc, #328]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015b74:	2380      	movs	r3, #128	@ 0x80
 8015b76:	009b      	lsls	r3, r3, #2
 8015b78:	4013      	ands	r3, r2
 8015b7a:	d0ef      	beq.n	8015b5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2220      	movs	r2, #32
 8015b82:	4013      	ands	r3, r2
 8015b84:	d01f      	beq.n	8015bc6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	685a      	ldr	r2, [r3, #4]
 8015b8a:	23c0      	movs	r3, #192	@ 0xc0
 8015b8c:	029b      	lsls	r3, r3, #10
 8015b8e:	401a      	ands	r2, r3
 8015b90:	23c0      	movs	r3, #192	@ 0xc0
 8015b92:	029b      	lsls	r3, r3, #10
 8015b94:	429a      	cmp	r2, r3
 8015b96:	d10c      	bne.n	8015bb2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015b98:	4b48      	ldr	r3, [pc, #288]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	4a4c      	ldr	r2, [pc, #304]	@ (8015cd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8015b9e:	4013      	ands	r3, r2
 8015ba0:	0019      	movs	r1, r3
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	685a      	ldr	r2, [r3, #4]
 8015ba6:	23c0      	movs	r3, #192	@ 0xc0
 8015ba8:	039b      	lsls	r3, r3, #14
 8015baa:	401a      	ands	r2, r3
 8015bac:	4b43      	ldr	r3, [pc, #268]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bae:	430a      	orrs	r2, r1
 8015bb0:	601a      	str	r2, [r3, #0]
 8015bb2:	4b42      	ldr	r3, [pc, #264]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bb4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	685a      	ldr	r2, [r3, #4]
 8015bba:	23c0      	movs	r3, #192	@ 0xc0
 8015bbc:	029b      	lsls	r3, r3, #10
 8015bbe:	401a      	ands	r2, r3
 8015bc0:	4b3e      	ldr	r3, [pc, #248]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bc2:	430a      	orrs	r2, r1
 8015bc4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015bc6:	2317      	movs	r3, #23
 8015bc8:	18fb      	adds	r3, r7, r3
 8015bca:	781b      	ldrb	r3, [r3, #0]
 8015bcc:	2b01      	cmp	r3, #1
 8015bce:	d105      	bne.n	8015bdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015bd0:	4b3a      	ldr	r3, [pc, #232]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015bd4:	4b39      	ldr	r3, [pc, #228]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bd6:	493f      	ldr	r1, [pc, #252]	@ (8015cd4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015bd8:	400a      	ands	r2, r1
 8015bda:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	2201      	movs	r2, #1
 8015be2:	4013      	ands	r3, r2
 8015be4:	d009      	beq.n	8015bfa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015be6:	4b35      	ldr	r3, [pc, #212]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015bea:	2203      	movs	r2, #3
 8015bec:	4393      	bics	r3, r2
 8015bee:	0019      	movs	r1, r3
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	689a      	ldr	r2, [r3, #8]
 8015bf4:	4b31      	ldr	r3, [pc, #196]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bf6:	430a      	orrs	r2, r1
 8015bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	2202      	movs	r2, #2
 8015c00:	4013      	ands	r3, r2
 8015c02:	d009      	beq.n	8015c18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015c04:	4b2d      	ldr	r3, [pc, #180]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015c08:	220c      	movs	r2, #12
 8015c0a:	4393      	bics	r3, r2
 8015c0c:	0019      	movs	r1, r3
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	68da      	ldr	r2, [r3, #12]
 8015c12:	4b2a      	ldr	r3, [pc, #168]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c14:	430a      	orrs	r2, r1
 8015c16:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	2204      	movs	r2, #4
 8015c1e:	4013      	ands	r3, r2
 8015c20:	d009      	beq.n	8015c36 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015c22:	4b26      	ldr	r3, [pc, #152]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015c26:	4a2c      	ldr	r2, [pc, #176]	@ (8015cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015c28:	4013      	ands	r3, r2
 8015c2a:	0019      	movs	r1, r3
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	691a      	ldr	r2, [r3, #16]
 8015c30:	4b22      	ldr	r3, [pc, #136]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c32:	430a      	orrs	r2, r1
 8015c34:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	2208      	movs	r2, #8
 8015c3c:	4013      	ands	r3, r2
 8015c3e:	d009      	beq.n	8015c54 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015c40:	4b1e      	ldr	r3, [pc, #120]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015c44:	4a25      	ldr	r2, [pc, #148]	@ (8015cdc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8015c46:	4013      	ands	r3, r2
 8015c48:	0019      	movs	r1, r3
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	695a      	ldr	r2, [r3, #20]
 8015c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c50:	430a      	orrs	r2, r1
 8015c52:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681a      	ldr	r2, [r3, #0]
 8015c58:	2380      	movs	r3, #128	@ 0x80
 8015c5a:	005b      	lsls	r3, r3, #1
 8015c5c:	4013      	ands	r3, r2
 8015c5e:	d009      	beq.n	8015c74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015c60:	4b16      	ldr	r3, [pc, #88]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015c64:	4a17      	ldr	r2, [pc, #92]	@ (8015cc4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015c66:	4013      	ands	r3, r2
 8015c68:	0019      	movs	r1, r3
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	699a      	ldr	r2, [r3, #24]
 8015c6e:	4b13      	ldr	r3, [pc, #76]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c70:	430a      	orrs	r2, r1
 8015c72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	2240      	movs	r2, #64	@ 0x40
 8015c7a:	4013      	ands	r3, r2
 8015c7c:	d009      	beq.n	8015c92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015c82:	4a17      	ldr	r2, [pc, #92]	@ (8015ce0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015c84:	4013      	ands	r3, r2
 8015c86:	0019      	movs	r1, r3
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	6a1a      	ldr	r2, [r3, #32]
 8015c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c8e:	430a      	orrs	r2, r1
 8015c90:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	2280      	movs	r2, #128	@ 0x80
 8015c98:	4013      	ands	r3, r2
 8015c9a:	d009      	beq.n	8015cb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015c9c:	4b07      	ldr	r3, [pc, #28]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ca0:	4a10      	ldr	r2, [pc, #64]	@ (8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015ca2:	4013      	ands	r3, r2
 8015ca4:	0019      	movs	r1, r3
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	69da      	ldr	r2, [r3, #28]
 8015caa:	4b04      	ldr	r3, [pc, #16]	@ (8015cbc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cac:	430a      	orrs	r2, r1
 8015cae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015cb0:	2300      	movs	r3, #0
}
 8015cb2:	0018      	movs	r0, r3
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	b006      	add	sp, #24
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	46c0      	nop			@ (mov r8, r8)
 8015cbc:	40021000 	.word	0x40021000
 8015cc0:	40007000 	.word	0x40007000
 8015cc4:	fffcffff 	.word	0xfffcffff
 8015cc8:	fff7ffff 	.word	0xfff7ffff
 8015ccc:	00001388 	.word	0x00001388
 8015cd0:	ffcfffff 	.word	0xffcfffff
 8015cd4:	efffffff 	.word	0xefffffff
 8015cd8:	fffff3ff 	.word	0xfffff3ff
 8015cdc:	ffffcfff 	.word	0xffffcfff
 8015ce0:	fbffffff 	.word	0xfbffffff
 8015ce4:	fff3ffff 	.word	0xfff3ffff

08015ce8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015ce8:	b5b0      	push	{r4, r5, r7, lr}
 8015cea:	b084      	sub	sp, #16
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015cf0:	230f      	movs	r3, #15
 8015cf2:	18fb      	adds	r3, r7, r3
 8015cf4:	2201      	movs	r2, #1
 8015cf6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d101      	bne.n	8015d02 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8015cfe:	2301      	movs	r3, #1
 8015d00:	e088      	b.n	8015e14 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	2221      	movs	r2, #33	@ 0x21
 8015d06:	5c9b      	ldrb	r3, [r3, r2]
 8015d08:	b2db      	uxtb	r3, r3
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d107      	bne.n	8015d1e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	2220      	movs	r2, #32
 8015d12:	2100      	movs	r1, #0
 8015d14:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	0018      	movs	r0, r3
 8015d1a:	f7f3 f933 	bl	8008f84 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2221      	movs	r2, #33	@ 0x21
 8015d22:	2102      	movs	r1, #2
 8015d24:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	68db      	ldr	r3, [r3, #12]
 8015d2c:	2210      	movs	r2, #16
 8015d2e:	4013      	ands	r3, r2
 8015d30:	2b10      	cmp	r3, #16
 8015d32:	d05f      	beq.n	8015df4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	22ca      	movs	r2, #202	@ 0xca
 8015d3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	2253      	movs	r2, #83	@ 0x53
 8015d42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8015d44:	250f      	movs	r5, #15
 8015d46:	197c      	adds	r4, r7, r5
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	0018      	movs	r0, r3
 8015d4c:	f000 fa7c 	bl	8016248 <RTC_EnterInitMode>
 8015d50:	0003      	movs	r3, r0
 8015d52:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8015d54:	0028      	movs	r0, r5
 8015d56:	183b      	adds	r3, r7, r0
 8015d58:	781b      	ldrb	r3, [r3, #0]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d12c      	bne.n	8015db8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	689a      	ldr	r2, [r3, #8]
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	492c      	ldr	r1, [pc, #176]	@ (8015e1c <HAL_RTC_Init+0x134>)
 8015d6a:	400a      	ands	r2, r1
 8015d6c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	6899      	ldr	r1, [r3, #8]
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	685a      	ldr	r2, [r3, #4]
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	691b      	ldr	r3, [r3, #16]
 8015d7c:	431a      	orrs	r2, r3
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	699b      	ldr	r3, [r3, #24]
 8015d82:	431a      	orrs	r2, r3
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	430a      	orrs	r2, r1
 8015d8a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	687a      	ldr	r2, [r7, #4]
 8015d92:	68d2      	ldr	r2, [r2, #12]
 8015d94:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	6919      	ldr	r1, [r3, #16]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	689b      	ldr	r3, [r3, #8]
 8015da0:	041a      	lsls	r2, r3, #16
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	430a      	orrs	r2, r1
 8015da8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8015daa:	183c      	adds	r4, r7, r0
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	0018      	movs	r0, r3
 8015db0:	f000 fa8e 	bl	80162d0 <RTC_ExitInitMode>
 8015db4:	0003      	movs	r3, r0
 8015db6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8015db8:	230f      	movs	r3, #15
 8015dba:	18fb      	adds	r3, r7, r3
 8015dbc:	781b      	ldrb	r3, [r3, #0]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d113      	bne.n	8015dea <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	2103      	movs	r1, #3
 8015dce:	438a      	bics	r2, r1
 8015dd0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	69da      	ldr	r2, [r3, #28]
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	695b      	ldr	r3, [r3, #20]
 8015de0:	431a      	orrs	r2, r3
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	430a      	orrs	r2, r1
 8015de8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	22ff      	movs	r2, #255	@ 0xff
 8015df0:	625a      	str	r2, [r3, #36]	@ 0x24
 8015df2:	e003      	b.n	8015dfc <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8015df4:	230f      	movs	r3, #15
 8015df6:	18fb      	adds	r3, r7, r3
 8015df8:	2200      	movs	r2, #0
 8015dfa:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8015dfc:	230f      	movs	r3, #15
 8015dfe:	18fb      	adds	r3, r7, r3
 8015e00:	781b      	ldrb	r3, [r3, #0]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d103      	bne.n	8015e0e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	2221      	movs	r2, #33	@ 0x21
 8015e0a:	2101      	movs	r1, #1
 8015e0c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8015e0e:	230f      	movs	r3, #15
 8015e10:	18fb      	adds	r3, r7, r3
 8015e12:	781b      	ldrb	r3, [r3, #0]
}
 8015e14:	0018      	movs	r0, r3
 8015e16:	46bd      	mov	sp, r7
 8015e18:	b004      	add	sp, #16
 8015e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8015e1c:	ff8fffbf 	.word	0xff8fffbf

08015e20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015e20:	b5b0      	push	{r4, r5, r7, lr}
 8015e22:	b086      	sub	sp, #24
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	60b9      	str	r1, [r7, #8]
 8015e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	2220      	movs	r2, #32
 8015e34:	5c9b      	ldrb	r3, [r3, r2]
 8015e36:	2b01      	cmp	r3, #1
 8015e38:	d101      	bne.n	8015e3e <HAL_RTC_SetTime+0x1e>
 8015e3a:	2302      	movs	r3, #2
 8015e3c:	e092      	b.n	8015f64 <HAL_RTC_SetTime+0x144>
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	2220      	movs	r2, #32
 8015e42:	2101      	movs	r1, #1
 8015e44:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	2221      	movs	r2, #33	@ 0x21
 8015e4a:	2102      	movs	r1, #2
 8015e4c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d125      	bne.n	8015ea0 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	689b      	ldr	r3, [r3, #8]
 8015e5a:	2240      	movs	r2, #64	@ 0x40
 8015e5c:	4013      	ands	r3, r2
 8015e5e:	d102      	bne.n	8015e66 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015e60:	68bb      	ldr	r3, [r7, #8]
 8015e62:	2200      	movs	r2, #0
 8015e64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015e66:	68bb      	ldr	r3, [r7, #8]
 8015e68:	781b      	ldrb	r3, [r3, #0]
 8015e6a:	0018      	movs	r0, r3
 8015e6c:	f000 fa5a 	bl	8016324 <RTC_ByteToBcd2>
 8015e70:	0003      	movs	r3, r0
 8015e72:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	785b      	ldrb	r3, [r3, #1]
 8015e78:	0018      	movs	r0, r3
 8015e7a:	f000 fa53 	bl	8016324 <RTC_ByteToBcd2>
 8015e7e:	0003      	movs	r3, r0
 8015e80:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015e82:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	789b      	ldrb	r3, [r3, #2]
 8015e88:	0018      	movs	r0, r3
 8015e8a:	f000 fa4b 	bl	8016324 <RTC_ByteToBcd2>
 8015e8e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015e90:	0022      	movs	r2, r4
 8015e92:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8015e94:	68bb      	ldr	r3, [r7, #8]
 8015e96:	78db      	ldrb	r3, [r3, #3]
 8015e98:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015e9a:	4313      	orrs	r3, r2
 8015e9c:	617b      	str	r3, [r7, #20]
 8015e9e:	e017      	b.n	8015ed0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	689b      	ldr	r3, [r3, #8]
 8015ea6:	2240      	movs	r2, #64	@ 0x40
 8015ea8:	4013      	ands	r3, r2
 8015eaa:	d102      	bne.n	8015eb2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	2200      	movs	r2, #0
 8015eb0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015eb2:	68bb      	ldr	r3, [r7, #8]
 8015eb4:	781b      	ldrb	r3, [r3, #0]
 8015eb6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015eb8:	68bb      	ldr	r3, [r7, #8]
 8015eba:	785b      	ldrb	r3, [r3, #1]
 8015ebc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015ebe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8015ec0:	68ba      	ldr	r2, [r7, #8]
 8015ec2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015ec4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	78db      	ldrb	r3, [r3, #3]
 8015eca:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015ecc:	4313      	orrs	r3, r2
 8015ece:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	22ca      	movs	r2, #202	@ 0xca
 8015ed6:	625a      	str	r2, [r3, #36]	@ 0x24
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	2253      	movs	r2, #83	@ 0x53
 8015ede:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015ee0:	2513      	movs	r5, #19
 8015ee2:	197c      	adds	r4, r7, r5
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	0018      	movs	r0, r3
 8015ee8:	f000 f9ae 	bl	8016248 <RTC_EnterInitMode>
 8015eec:	0003      	movs	r3, r0
 8015eee:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8015ef0:	0028      	movs	r0, r5
 8015ef2:	183b      	adds	r3, r7, r0
 8015ef4:	781b      	ldrb	r3, [r3, #0]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d120      	bne.n	8015f3c <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	697a      	ldr	r2, [r7, #20]
 8015f00:	491a      	ldr	r1, [pc, #104]	@ (8015f6c <HAL_RTC_SetTime+0x14c>)
 8015f02:	400a      	ands	r2, r1
 8015f04:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	689a      	ldr	r2, [r3, #8]
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	4917      	ldr	r1, [pc, #92]	@ (8015f70 <HAL_RTC_SetTime+0x150>)
 8015f12:	400a      	ands	r2, r1
 8015f14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	6899      	ldr	r1, [r3, #8]
 8015f1c:	68bb      	ldr	r3, [r7, #8]
 8015f1e:	68da      	ldr	r2, [r3, #12]
 8015f20:	68bb      	ldr	r3, [r7, #8]
 8015f22:	691b      	ldr	r3, [r3, #16]
 8015f24:	431a      	orrs	r2, r3
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	430a      	orrs	r2, r1
 8015f2c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8015f2e:	183c      	adds	r4, r7, r0
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	0018      	movs	r0, r3
 8015f34:	f000 f9cc 	bl	80162d0 <RTC_ExitInitMode>
 8015f38:	0003      	movs	r3, r0
 8015f3a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015f3c:	2313      	movs	r3, #19
 8015f3e:	18fb      	adds	r3, r7, r3
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d103      	bne.n	8015f4e <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	2221      	movs	r2, #33	@ 0x21
 8015f4a:	2101      	movs	r1, #1
 8015f4c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	22ff      	movs	r2, #255	@ 0xff
 8015f54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	2220      	movs	r2, #32
 8015f5a:	2100      	movs	r1, #0
 8015f5c:	5499      	strb	r1, [r3, r2]

  return status;
 8015f5e:	2313      	movs	r3, #19
 8015f60:	18fb      	adds	r3, r7, r3
 8015f62:	781b      	ldrb	r3, [r3, #0]
}
 8015f64:	0018      	movs	r0, r3
 8015f66:	46bd      	mov	sp, r7
 8015f68:	b006      	add	sp, #24
 8015f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8015f6c:	007f7f7f 	.word	0x007f7f7f
 8015f70:	fffbffff 	.word	0xfffbffff

08015f74 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b086      	sub	sp, #24
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015f80:	2300      	movs	r3, #0
 8015f82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	691b      	ldr	r3, [r3, #16]
 8015f94:	045b      	lsls	r3, r3, #17
 8015f96:	0c5a      	lsrs	r2, r3, #17
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	4a22      	ldr	r2, [pc, #136]	@ (801602c <HAL_RTC_GetTime+0xb8>)
 8015fa4:	4013      	ands	r3, r2
 8015fa6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8015fa8:	697b      	ldr	r3, [r7, #20]
 8015faa:	0c1b      	lsrs	r3, r3, #16
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	223f      	movs	r2, #63	@ 0x3f
 8015fb0:	4013      	ands	r3, r2
 8015fb2:	b2da      	uxtb	r2, r3
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8015fb8:	697b      	ldr	r3, [r7, #20]
 8015fba:	0a1b      	lsrs	r3, r3, #8
 8015fbc:	b2db      	uxtb	r3, r3
 8015fbe:	227f      	movs	r2, #127	@ 0x7f
 8015fc0:	4013      	ands	r3, r2
 8015fc2:	b2da      	uxtb	r2, r3
 8015fc4:	68bb      	ldr	r3, [r7, #8]
 8015fc6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8015fc8:	697b      	ldr	r3, [r7, #20]
 8015fca:	b2db      	uxtb	r3, r3
 8015fcc:	227f      	movs	r2, #127	@ 0x7f
 8015fce:	4013      	ands	r3, r2
 8015fd0:	b2da      	uxtb	r2, r3
 8015fd2:	68bb      	ldr	r3, [r7, #8]
 8015fd4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	0d9b      	lsrs	r3, r3, #22
 8015fda:	b2db      	uxtb	r3, r3
 8015fdc:	2201      	movs	r2, #1
 8015fde:	4013      	ands	r3, r2
 8015fe0:	b2da      	uxtb	r2, r3
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d11a      	bne.n	8016022 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	0018      	movs	r0, r3
 8015ff2:	f000 f9b8 	bl	8016366 <RTC_Bcd2ToByte>
 8015ff6:	0003      	movs	r3, r0
 8015ff8:	001a      	movs	r2, r3
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8015ffe:	68bb      	ldr	r3, [r7, #8]
 8016000:	785b      	ldrb	r3, [r3, #1]
 8016002:	0018      	movs	r0, r3
 8016004:	f000 f9af 	bl	8016366 <RTC_Bcd2ToByte>
 8016008:	0003      	movs	r3, r0
 801600a:	001a      	movs	r2, r3
 801600c:	68bb      	ldr	r3, [r7, #8]
 801600e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8016010:	68bb      	ldr	r3, [r7, #8]
 8016012:	789b      	ldrb	r3, [r3, #2]
 8016014:	0018      	movs	r0, r3
 8016016:	f000 f9a6 	bl	8016366 <RTC_Bcd2ToByte>
 801601a:	0003      	movs	r3, r0
 801601c:	001a      	movs	r2, r3
 801601e:	68bb      	ldr	r3, [r7, #8]
 8016020:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8016022:	2300      	movs	r3, #0
}
 8016024:	0018      	movs	r0, r3
 8016026:	46bd      	mov	sp, r7
 8016028:	b006      	add	sp, #24
 801602a:	bd80      	pop	{r7, pc}
 801602c:	007f7f7f 	.word	0x007f7f7f

08016030 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016030:	b5b0      	push	{r4, r5, r7, lr}
 8016032:	b086      	sub	sp, #24
 8016034:	af00      	add	r7, sp, #0
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801603c:	2300      	movs	r3, #0
 801603e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	2220      	movs	r2, #32
 8016044:	5c9b      	ldrb	r3, [r3, r2]
 8016046:	2b01      	cmp	r3, #1
 8016048:	d101      	bne.n	801604e <HAL_RTC_SetDate+0x1e>
 801604a:	2302      	movs	r3, #2
 801604c:	e07e      	b.n	801614c <HAL_RTC_SetDate+0x11c>
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	2220      	movs	r2, #32
 8016052:	2101      	movs	r1, #1
 8016054:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2221      	movs	r2, #33	@ 0x21
 801605a:	2102      	movs	r1, #2
 801605c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d10e      	bne.n	8016082 <HAL_RTC_SetDate+0x52>
 8016064:	68bb      	ldr	r3, [r7, #8]
 8016066:	785b      	ldrb	r3, [r3, #1]
 8016068:	001a      	movs	r2, r3
 801606a:	2310      	movs	r3, #16
 801606c:	4013      	ands	r3, r2
 801606e:	d008      	beq.n	8016082 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	785b      	ldrb	r3, [r3, #1]
 8016074:	2210      	movs	r2, #16
 8016076:	4393      	bics	r3, r2
 8016078:	b2db      	uxtb	r3, r3
 801607a:	330a      	adds	r3, #10
 801607c:	b2da      	uxtb	r2, r3
 801607e:	68bb      	ldr	r3, [r7, #8]
 8016080:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d11c      	bne.n	80160c2 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016088:	68bb      	ldr	r3, [r7, #8]
 801608a:	78db      	ldrb	r3, [r3, #3]
 801608c:	0018      	movs	r0, r3
 801608e:	f000 f949 	bl	8016324 <RTC_ByteToBcd2>
 8016092:	0003      	movs	r3, r0
 8016094:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016096:	68bb      	ldr	r3, [r7, #8]
 8016098:	785b      	ldrb	r3, [r3, #1]
 801609a:	0018      	movs	r0, r3
 801609c:	f000 f942 	bl	8016324 <RTC_ByteToBcd2>
 80160a0:	0003      	movs	r3, r0
 80160a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80160a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80160a6:	68bb      	ldr	r3, [r7, #8]
 80160a8:	789b      	ldrb	r3, [r3, #2]
 80160aa:	0018      	movs	r0, r3
 80160ac:	f000 f93a 	bl	8016324 <RTC_ByteToBcd2>
 80160b0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80160b2:	0022      	movs	r2, r4
 80160b4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	781b      	ldrb	r3, [r3, #0]
 80160ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80160bc:	4313      	orrs	r3, r2
 80160be:	617b      	str	r3, [r7, #20]
 80160c0:	e00e      	b.n	80160e0 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	78db      	ldrb	r3, [r3, #3]
 80160c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	785b      	ldrb	r3, [r3, #1]
 80160cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80160ce:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80160d0:	68ba      	ldr	r2, [r7, #8]
 80160d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80160d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80160d6:	68bb      	ldr	r3, [r7, #8]
 80160d8:	781b      	ldrb	r3, [r3, #0]
 80160da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80160dc:	4313      	orrs	r3, r2
 80160de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	22ca      	movs	r2, #202	@ 0xca
 80160e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	2253      	movs	r2, #83	@ 0x53
 80160ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80160f0:	2513      	movs	r5, #19
 80160f2:	197c      	adds	r4, r7, r5
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	0018      	movs	r0, r3
 80160f8:	f000 f8a6 	bl	8016248 <RTC_EnterInitMode>
 80160fc:	0003      	movs	r3, r0
 80160fe:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8016100:	0028      	movs	r0, r5
 8016102:	183b      	adds	r3, r7, r0
 8016104:	781b      	ldrb	r3, [r3, #0]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d10c      	bne.n	8016124 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	697a      	ldr	r2, [r7, #20]
 8016110:	4910      	ldr	r1, [pc, #64]	@ (8016154 <HAL_RTC_SetDate+0x124>)
 8016112:	400a      	ands	r2, r1
 8016114:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8016116:	183c      	adds	r4, r7, r0
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	0018      	movs	r0, r3
 801611c:	f000 f8d8 	bl	80162d0 <RTC_ExitInitMode>
 8016120:	0003      	movs	r3, r0
 8016122:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8016124:	2313      	movs	r3, #19
 8016126:	18fb      	adds	r3, r7, r3
 8016128:	781b      	ldrb	r3, [r3, #0]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d103      	bne.n	8016136 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	2221      	movs	r2, #33	@ 0x21
 8016132:	2101      	movs	r1, #1
 8016134:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	22ff      	movs	r2, #255	@ 0xff
 801613c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	2220      	movs	r2, #32
 8016142:	2100      	movs	r1, #0
 8016144:	5499      	strb	r1, [r3, r2]

  return status;
 8016146:	2313      	movs	r3, #19
 8016148:	18fb      	adds	r3, r7, r3
 801614a:	781b      	ldrb	r3, [r3, #0]
}
 801614c:	0018      	movs	r0, r3
 801614e:	46bd      	mov	sp, r7
 8016150:	b006      	add	sp, #24
 8016152:	bdb0      	pop	{r4, r5, r7, pc}
 8016154:	00ffff3f 	.word	0x00ffff3f

08016158 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b086      	sub	sp, #24
 801615c:	af00      	add	r7, sp, #0
 801615e:	60f8      	str	r0, [r7, #12]
 8016160:	60b9      	str	r1, [r7, #8]
 8016162:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016164:	2300      	movs	r3, #0
 8016166:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	4a21      	ldr	r2, [pc, #132]	@ (80161f4 <HAL_RTC_GetDate+0x9c>)
 8016170:	4013      	ands	r3, r2
 8016172:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	0c1b      	lsrs	r3, r3, #16
 8016178:	b2da      	uxtb	r2, r3
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801617e:	697b      	ldr	r3, [r7, #20]
 8016180:	0a1b      	lsrs	r3, r3, #8
 8016182:	b2db      	uxtb	r3, r3
 8016184:	221f      	movs	r2, #31
 8016186:	4013      	ands	r3, r2
 8016188:	b2da      	uxtb	r2, r3
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801618e:	697b      	ldr	r3, [r7, #20]
 8016190:	b2db      	uxtb	r3, r3
 8016192:	223f      	movs	r2, #63	@ 0x3f
 8016194:	4013      	ands	r3, r2
 8016196:	b2da      	uxtb	r2, r3
 8016198:	68bb      	ldr	r3, [r7, #8]
 801619a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801619c:	697b      	ldr	r3, [r7, #20]
 801619e:	0b5b      	lsrs	r3, r3, #13
 80161a0:	b2db      	uxtb	r3, r3
 80161a2:	2207      	movs	r2, #7
 80161a4:	4013      	ands	r3, r2
 80161a6:	b2da      	uxtb	r2, r3
 80161a8:	68bb      	ldr	r3, [r7, #8]
 80161aa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d11a      	bne.n	80161e8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	78db      	ldrb	r3, [r3, #3]
 80161b6:	0018      	movs	r0, r3
 80161b8:	f000 f8d5 	bl	8016366 <RTC_Bcd2ToByte>
 80161bc:	0003      	movs	r3, r0
 80161be:	001a      	movs	r2, r3
 80161c0:	68bb      	ldr	r3, [r7, #8]
 80161c2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	785b      	ldrb	r3, [r3, #1]
 80161c8:	0018      	movs	r0, r3
 80161ca:	f000 f8cc 	bl	8016366 <RTC_Bcd2ToByte>
 80161ce:	0003      	movs	r3, r0
 80161d0:	001a      	movs	r2, r3
 80161d2:	68bb      	ldr	r3, [r7, #8]
 80161d4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	789b      	ldrb	r3, [r3, #2]
 80161da:	0018      	movs	r0, r3
 80161dc:	f000 f8c3 	bl	8016366 <RTC_Bcd2ToByte>
 80161e0:	0003      	movs	r3, r0
 80161e2:	001a      	movs	r2, r3
 80161e4:	68bb      	ldr	r3, [r7, #8]
 80161e6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80161e8:	2300      	movs	r3, #0
}
 80161ea:	0018      	movs	r0, r3
 80161ec:	46bd      	mov	sp, r7
 80161ee:	b006      	add	sp, #24
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	46c0      	nop			@ (mov r8, r8)
 80161f4:	00ffff3f 	.word	0x00ffff3f

080161f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b084      	sub	sp, #16
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016200:	2300      	movs	r3, #0
 8016202:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	4a0e      	ldr	r2, [pc, #56]	@ (8016244 <HAL_RTC_WaitForSynchro+0x4c>)
 801620a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801620c:	f7f8 fce8 	bl	800ebe0 <HAL_GetTick>
 8016210:	0003      	movs	r3, r0
 8016212:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8016214:	e00a      	b.n	801622c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016216:	f7f8 fce3 	bl	800ebe0 <HAL_GetTick>
 801621a:	0002      	movs	r2, r0
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	1ad2      	subs	r2, r2, r3
 8016220:	23fa      	movs	r3, #250	@ 0xfa
 8016222:	009b      	lsls	r3, r3, #2
 8016224:	429a      	cmp	r2, r3
 8016226:	d901      	bls.n	801622c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8016228:	2303      	movs	r3, #3
 801622a:	e006      	b.n	801623a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	68db      	ldr	r3, [r3, #12]
 8016232:	2220      	movs	r2, #32
 8016234:	4013      	ands	r3, r2
 8016236:	d0ee      	beq.n	8016216 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8016238:	2300      	movs	r3, #0
}
 801623a:	0018      	movs	r0, r3
 801623c:	46bd      	mov	sp, r7
 801623e:	b004      	add	sp, #16
 8016240:	bd80      	pop	{r7, pc}
 8016242:	46c0      	nop			@ (mov r8, r8)
 8016244:	0001ff5f 	.word	0x0001ff5f

08016248 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b084      	sub	sp, #16
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016250:	2300      	movs	r3, #0
 8016252:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8016254:	230f      	movs	r3, #15
 8016256:	18fb      	adds	r3, r7, r3
 8016258:	2200      	movs	r2, #0
 801625a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	68db      	ldr	r3, [r3, #12]
 8016262:	2240      	movs	r2, #64	@ 0x40
 8016264:	4013      	ands	r3, r2
 8016266:	d12c      	bne.n	80162c2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	68da      	ldr	r2, [r3, #12]
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	2180      	movs	r1, #128	@ 0x80
 8016274:	430a      	orrs	r2, r1
 8016276:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8016278:	f7f8 fcb2 	bl	800ebe0 <HAL_GetTick>
 801627c:	0003      	movs	r3, r0
 801627e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016280:	e014      	b.n	80162ac <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016282:	f7f8 fcad 	bl	800ebe0 <HAL_GetTick>
 8016286:	0002      	movs	r2, r0
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	1ad2      	subs	r2, r2, r3
 801628c:	200f      	movs	r0, #15
 801628e:	183b      	adds	r3, r7, r0
 8016290:	1839      	adds	r1, r7, r0
 8016292:	7809      	ldrb	r1, [r1, #0]
 8016294:	7019      	strb	r1, [r3, #0]
 8016296:	23fa      	movs	r3, #250	@ 0xfa
 8016298:	009b      	lsls	r3, r3, #2
 801629a:	429a      	cmp	r2, r3
 801629c:	d906      	bls.n	80162ac <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2221      	movs	r2, #33	@ 0x21
 80162a2:	2104      	movs	r1, #4
 80162a4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80162a6:	183b      	adds	r3, r7, r0
 80162a8:	2201      	movs	r2, #1
 80162aa:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	68db      	ldr	r3, [r3, #12]
 80162b2:	2240      	movs	r2, #64	@ 0x40
 80162b4:	4013      	ands	r3, r2
 80162b6:	d104      	bne.n	80162c2 <RTC_EnterInitMode+0x7a>
 80162b8:	230f      	movs	r3, #15
 80162ba:	18fb      	adds	r3, r7, r3
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	2b01      	cmp	r3, #1
 80162c0:	d1df      	bne.n	8016282 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80162c2:	230f      	movs	r3, #15
 80162c4:	18fb      	adds	r3, r7, r3
 80162c6:	781b      	ldrb	r3, [r3, #0]
}
 80162c8:	0018      	movs	r0, r3
 80162ca:	46bd      	mov	sp, r7
 80162cc:	b004      	add	sp, #16
 80162ce:	bd80      	pop	{r7, pc}

080162d0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80162d0:	b590      	push	{r4, r7, lr}
 80162d2:	b085      	sub	sp, #20
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80162d8:	240f      	movs	r4, #15
 80162da:	193b      	adds	r3, r7, r4
 80162dc:	2200      	movs	r2, #0
 80162de:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	68da      	ldr	r2, [r3, #12]
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	2180      	movs	r1, #128	@ 0x80
 80162ec:	438a      	bics	r2, r1
 80162ee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	689b      	ldr	r3, [r3, #8]
 80162f6:	2220      	movs	r2, #32
 80162f8:	4013      	ands	r3, r2
 80162fa:	d10c      	bne.n	8016316 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	0018      	movs	r0, r3
 8016300:	f7ff ff7a 	bl	80161f8 <HAL_RTC_WaitForSynchro>
 8016304:	1e03      	subs	r3, r0, #0
 8016306:	d006      	beq.n	8016316 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	2221      	movs	r2, #33	@ 0x21
 801630c:	2104      	movs	r1, #4
 801630e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8016310:	193b      	adds	r3, r7, r4
 8016312:	2201      	movs	r2, #1
 8016314:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8016316:	230f      	movs	r3, #15
 8016318:	18fb      	adds	r3, r7, r3
 801631a:	781b      	ldrb	r3, [r3, #0]
}
 801631c:	0018      	movs	r0, r3
 801631e:	46bd      	mov	sp, r7
 8016320:	b005      	add	sp, #20
 8016322:	bd90      	pop	{r4, r7, pc}

08016324 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b084      	sub	sp, #16
 8016328:	af00      	add	r7, sp, #0
 801632a:	0002      	movs	r2, r0
 801632c:	1dfb      	adds	r3, r7, #7
 801632e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8016330:	2300      	movs	r3, #0
 8016332:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8016334:	e007      	b.n	8016346 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	3301      	adds	r3, #1
 801633a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801633c:	1dfb      	adds	r3, r7, #7
 801633e:	1dfa      	adds	r2, r7, #7
 8016340:	7812      	ldrb	r2, [r2, #0]
 8016342:	3a0a      	subs	r2, #10
 8016344:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8016346:	1dfb      	adds	r3, r7, #7
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	2b09      	cmp	r3, #9
 801634c:	d8f3      	bhi.n	8016336 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	b2db      	uxtb	r3, r3
 8016352:	011b      	lsls	r3, r3, #4
 8016354:	b2da      	uxtb	r2, r3
 8016356:	1dfb      	adds	r3, r7, #7
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	4313      	orrs	r3, r2
 801635c:	b2db      	uxtb	r3, r3
}
 801635e:	0018      	movs	r0, r3
 8016360:	46bd      	mov	sp, r7
 8016362:	b004      	add	sp, #16
 8016364:	bd80      	pop	{r7, pc}

08016366 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8016366:	b580      	push	{r7, lr}
 8016368:	b084      	sub	sp, #16
 801636a:	af00      	add	r7, sp, #0
 801636c:	0002      	movs	r2, r0
 801636e:	1dfb      	adds	r3, r7, #7
 8016370:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8016372:	2300      	movs	r3, #0
 8016374:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8016376:	1dfb      	adds	r3, r7, #7
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	091b      	lsrs	r3, r3, #4
 801637c:	b2db      	uxtb	r3, r3
 801637e:	001a      	movs	r2, r3
 8016380:	0013      	movs	r3, r2
 8016382:	009b      	lsls	r3, r3, #2
 8016384:	189b      	adds	r3, r3, r2
 8016386:	005b      	lsls	r3, r3, #1
 8016388:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	b2da      	uxtb	r2, r3
 801638e:	1dfb      	adds	r3, r7, #7
 8016390:	781b      	ldrb	r3, [r3, #0]
 8016392:	210f      	movs	r1, #15
 8016394:	400b      	ands	r3, r1
 8016396:	b2db      	uxtb	r3, r3
 8016398:	18d3      	adds	r3, r2, r3
 801639a:	b2db      	uxtb	r3, r3
}
 801639c:	0018      	movs	r0, r3
 801639e:	46bd      	mov	sp, r7
 80163a0:	b004      	add	sp, #16
 80163a2:	bd80      	pop	{r7, pc}

080163a4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b086      	sub	sp, #24
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	60f8      	str	r0, [r7, #12]
 80163ac:	60b9      	str	r1, [r7, #8]
 80163ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80163b0:	4b64      	ldr	r3, [pc, #400]	@ (8016544 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	22fa      	movs	r2, #250	@ 0xfa
 80163b6:	01d1      	lsls	r1, r2, #7
 80163b8:	0018      	movs	r0, r3
 80163ba:	f7e9 fef3 	bl	80001a4 <__udivsi3>
 80163be:	0003      	movs	r3, r0
 80163c0:	001a      	movs	r2, r3
 80163c2:	0013      	movs	r3, r2
 80163c4:	015b      	lsls	r3, r3, #5
 80163c6:	1a9b      	subs	r3, r3, r2
 80163c8:	009b      	lsls	r3, r3, #2
 80163ca:	189b      	adds	r3, r3, r2
 80163cc:	00db      	lsls	r3, r3, #3
 80163ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	2220      	movs	r2, #32
 80163d4:	5c9b      	ldrb	r3, [r3, r2]
 80163d6:	2b01      	cmp	r3, #1
 80163d8:	d101      	bne.n	80163de <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80163da:	2302      	movs	r3, #2
 80163dc:	e0ad      	b.n	801653a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	2220      	movs	r2, #32
 80163e2:	2101      	movs	r1, #1
 80163e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	2221      	movs	r2, #33	@ 0x21
 80163ea:	2102      	movs	r1, #2
 80163ec:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	22ca      	movs	r2, #202	@ 0xca
 80163f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	2253      	movs	r2, #83	@ 0x53
 80163fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	689a      	ldr	r2, [r3, #8]
 8016404:	2380      	movs	r3, #128	@ 0x80
 8016406:	00db      	lsls	r3, r3, #3
 8016408:	4013      	ands	r3, r2
 801640a:	d019      	beq.n	8016440 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801640c:	697b      	ldr	r3, [r7, #20]
 801640e:	3b01      	subs	r3, #1
 8016410:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8016412:	697b      	ldr	r3, [r7, #20]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d10d      	bne.n	8016434 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	22ff      	movs	r2, #255	@ 0xff
 801641e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	2221      	movs	r2, #33	@ 0x21
 8016424:	2103      	movs	r1, #3
 8016426:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	2220      	movs	r2, #32
 801642c:	2100      	movs	r1, #0
 801642e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8016430:	2303      	movs	r3, #3
 8016432:	e082      	b.n	801653a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	68db      	ldr	r3, [r3, #12]
 801643a:	2204      	movs	r2, #4
 801643c:	4013      	ands	r3, r2
 801643e:	d1e5      	bne.n	801640c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	689a      	ldr	r2, [r3, #8]
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	493f      	ldr	r1, [pc, #252]	@ (8016548 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801644c:	400a      	ands	r2, r1
 801644e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	68db      	ldr	r3, [r3, #12]
 8016456:	22ff      	movs	r2, #255	@ 0xff
 8016458:	401a      	ands	r2, r3
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	493b      	ldr	r1, [pc, #236]	@ (801654c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8016460:	430a      	orrs	r2, r1
 8016462:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016464:	4b37      	ldr	r3, [pc, #220]	@ (8016544 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	22fa      	movs	r2, #250	@ 0xfa
 801646a:	01d1      	lsls	r1, r2, #7
 801646c:	0018      	movs	r0, r3
 801646e:	f7e9 fe99 	bl	80001a4 <__udivsi3>
 8016472:	0003      	movs	r3, r0
 8016474:	001a      	movs	r2, r3
 8016476:	0013      	movs	r3, r2
 8016478:	015b      	lsls	r3, r3, #5
 801647a:	1a9b      	subs	r3, r3, r2
 801647c:	009b      	lsls	r3, r3, #2
 801647e:	189b      	adds	r3, r3, r2
 8016480:	00db      	lsls	r3, r3, #3
 8016482:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	3b01      	subs	r3, #1
 8016488:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801648a:	697b      	ldr	r3, [r7, #20]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d10d      	bne.n	80164ac <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	22ff      	movs	r2, #255	@ 0xff
 8016496:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	2221      	movs	r2, #33	@ 0x21
 801649c:	2103      	movs	r1, #3
 801649e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	2220      	movs	r2, #32
 80164a4:	2100      	movs	r1, #0
 80164a6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80164a8:	2303      	movs	r3, #3
 80164aa:	e046      	b.n	801653a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	68db      	ldr	r3, [r3, #12]
 80164b2:	2204      	movs	r2, #4
 80164b4:	4013      	ands	r3, r2
 80164b6:	d0e5      	beq.n	8016484 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	689a      	ldr	r2, [r3, #8]
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	2107      	movs	r1, #7
 80164c4:	438a      	bics	r2, r1
 80164c6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	6899      	ldr	r1, [r3, #8]
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	687a      	ldr	r2, [r7, #4]
 80164d4:	430a      	orrs	r2, r1
 80164d6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	68ba      	ldr	r2, [r7, #8]
 80164de:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80164e0:	4b1b      	ldr	r3, [pc, #108]	@ (8016550 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80164e2:	681a      	ldr	r2, [r3, #0]
 80164e4:	4b1a      	ldr	r3, [pc, #104]	@ (8016550 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80164e6:	2180      	movs	r1, #128	@ 0x80
 80164e8:	0349      	lsls	r1, r1, #13
 80164ea:	430a      	orrs	r2, r1
 80164ec:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80164ee:	4b18      	ldr	r3, [pc, #96]	@ (8016550 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80164f0:	689a      	ldr	r2, [r3, #8]
 80164f2:	4b17      	ldr	r3, [pc, #92]	@ (8016550 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80164f4:	2180      	movs	r1, #128	@ 0x80
 80164f6:	0349      	lsls	r1, r1, #13
 80164f8:	430a      	orrs	r2, r1
 80164fa:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	689a      	ldr	r2, [r3, #8]
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	2180      	movs	r1, #128	@ 0x80
 8016508:	01c9      	lsls	r1, r1, #7
 801650a:	430a      	orrs	r2, r1
 801650c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	689a      	ldr	r2, [r3, #8]
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	2180      	movs	r1, #128	@ 0x80
 801651a:	00c9      	lsls	r1, r1, #3
 801651c:	430a      	orrs	r2, r1
 801651e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	22ff      	movs	r2, #255	@ 0xff
 8016526:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	2221      	movs	r2, #33	@ 0x21
 801652c:	2101      	movs	r1, #1
 801652e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	2220      	movs	r2, #32
 8016534:	2100      	movs	r1, #0
 8016536:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016538:	2300      	movs	r3, #0
}
 801653a:	0018      	movs	r0, r3
 801653c:	46bd      	mov	sp, r7
 801653e:	b006      	add	sp, #24
 8016540:	bd80      	pop	{r7, pc}
 8016542:	46c0      	nop			@ (mov r8, r8)
 8016544:	200000cc 	.word	0x200000cc
 8016548:	fffffbff 	.word	0xfffffbff
 801654c:	fffffb7f 	.word	0xfffffb7f
 8016550:	40010400 	.word	0x40010400

08016554 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b084      	sub	sp, #16
 8016558:	af00      	add	r7, sp, #0
 801655a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801655c:	2300      	movs	r3, #0
 801655e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	2220      	movs	r2, #32
 8016564:	5c9b      	ldrb	r3, [r3, r2]
 8016566:	2b01      	cmp	r3, #1
 8016568:	d101      	bne.n	801656e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801656a:	2302      	movs	r3, #2
 801656c:	e04e      	b.n	801660c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2220      	movs	r2, #32
 8016572:	2101      	movs	r1, #1
 8016574:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	2221      	movs	r2, #33	@ 0x21
 801657a:	2102      	movs	r1, #2
 801657c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	22ca      	movs	r2, #202	@ 0xca
 8016584:	625a      	str	r2, [r3, #36]	@ 0x24
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	2253      	movs	r2, #83	@ 0x53
 801658c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	689a      	ldr	r2, [r3, #8]
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	491e      	ldr	r1, [pc, #120]	@ (8016614 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801659a:	400a      	ands	r2, r1
 801659c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	689a      	ldr	r2, [r3, #8]
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	491b      	ldr	r1, [pc, #108]	@ (8016618 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 80165aa:	400a      	ands	r2, r1
 80165ac:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80165ae:	f7f8 fb17 	bl	800ebe0 <HAL_GetTick>
 80165b2:	0003      	movs	r3, r0
 80165b4:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80165b6:	e016      	b.n	80165e6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80165b8:	f7f8 fb12 	bl	800ebe0 <HAL_GetTick>
 80165bc:	0002      	movs	r2, r0
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	1ad2      	subs	r2, r2, r3
 80165c2:	23fa      	movs	r3, #250	@ 0xfa
 80165c4:	009b      	lsls	r3, r3, #2
 80165c6:	429a      	cmp	r2, r3
 80165c8:	d90d      	bls.n	80165e6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	22ff      	movs	r2, #255	@ 0xff
 80165d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	2221      	movs	r2, #33	@ 0x21
 80165d6:	2103      	movs	r1, #3
 80165d8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	2220      	movs	r2, #32
 80165de:	2100      	movs	r1, #0
 80165e0:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80165e2:	2303      	movs	r3, #3
 80165e4:	e012      	b.n	801660c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	68db      	ldr	r3, [r3, #12]
 80165ec:	2204      	movs	r2, #4
 80165ee:	4013      	ands	r3, r2
 80165f0:	d0e2      	beq.n	80165b8 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	22ff      	movs	r2, #255	@ 0xff
 80165f8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	2221      	movs	r2, #33	@ 0x21
 80165fe:	2101      	movs	r1, #1
 8016600:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	2220      	movs	r2, #32
 8016606:	2100      	movs	r1, #0
 8016608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801660a:	2300      	movs	r3, #0
}
 801660c:	0018      	movs	r0, r3
 801660e:	46bd      	mov	sp, r7
 8016610:	b004      	add	sp, #16
 8016612:	bd80      	pop	{r7, pc}
 8016614:	fffffbff 	.word	0xfffffbff
 8016618:	ffffbfff 	.word	0xffffbfff

0801661c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	b082      	sub	sp, #8
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8016624:	4b13      	ldr	r3, [pc, #76]	@ (8016674 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8016626:	2280      	movs	r2, #128	@ 0x80
 8016628:	0352      	lsls	r2, r2, #13
 801662a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	689a      	ldr	r2, [r3, #8]
 8016632:	2380      	movs	r3, #128	@ 0x80
 8016634:	01db      	lsls	r3, r3, #7
 8016636:	4013      	ands	r3, r2
 8016638:	d014      	beq.n	8016664 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	68da      	ldr	r2, [r3, #12]
 8016640:	2380      	movs	r3, #128	@ 0x80
 8016642:	00db      	lsls	r3, r3, #3
 8016644:	4013      	ands	r3, r2
 8016646:	d00d      	beq.n	8016664 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	68db      	ldr	r3, [r3, #12]
 801664e:	22ff      	movs	r2, #255	@ 0xff
 8016650:	401a      	ands	r2, r3
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	4908      	ldr	r1, [pc, #32]	@ (8016678 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8016658:	430a      	orrs	r2, r1
 801665a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	0018      	movs	r0, r3
 8016660:	f000 f80c 	bl	801667c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2221      	movs	r2, #33	@ 0x21
 8016668:	2101      	movs	r1, #1
 801666a:	5499      	strb	r1, [r3, r2]
}
 801666c:	46c0      	nop			@ (mov r8, r8)
 801666e:	46bd      	mov	sp, r7
 8016670:	b002      	add	sp, #8
 8016672:	bd80      	pop	{r7, pc}
 8016674:	40010400 	.word	0x40010400
 8016678:	fffffb7f 	.word	0xfffffb7f

0801667c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b082      	sub	sp, #8
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8016684:	46c0      	nop			@ (mov r8, r8)
 8016686:	46bd      	mov	sp, r7
 8016688:	b002      	add	sp, #8
 801668a:	bd80      	pop	{r7, pc}

0801668c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b086      	sub	sp, #24
 8016690:	af00      	add	r7, sp, #0
 8016692:	60f8      	str	r0, [r7, #12]
 8016694:	60b9      	str	r1, [r7, #8]
 8016696:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8016698:	2300      	movs	r3, #0
 801669a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	3350      	adds	r3, #80	@ 0x50
 80166a2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	009b      	lsls	r3, r3, #2
 80166a8:	697a      	ldr	r2, [r7, #20]
 80166aa:	18d3      	adds	r3, r2, r3
 80166ac:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80166ae:	697b      	ldr	r3, [r7, #20]
 80166b0:	687a      	ldr	r2, [r7, #4]
 80166b2:	601a      	str	r2, [r3, #0]
}
 80166b4:	46c0      	nop			@ (mov r8, r8)
 80166b6:	46bd      	mov	sp, r7
 80166b8:	b006      	add	sp, #24
 80166ba:	bd80      	pop	{r7, pc}

080166bc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b084      	sub	sp, #16
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80166c6:	2300      	movs	r3, #0
 80166c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	3350      	adds	r3, #80	@ 0x50
 80166d0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80166d2:	683b      	ldr	r3, [r7, #0]
 80166d4:	009b      	lsls	r3, r3, #2
 80166d6:	68fa      	ldr	r2, [r7, #12]
 80166d8:	18d3      	adds	r3, r2, r3
 80166da:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	681b      	ldr	r3, [r3, #0]
}
 80166e0:	0018      	movs	r0, r3
 80166e2:	46bd      	mov	sp, r7
 80166e4:	b004      	add	sp, #16
 80166e6:	bd80      	pop	{r7, pc}

080166e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d101      	bne.n	80166fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80166f6:	2301      	movs	r3, #1
 80166f8:	e032      	b.n	8016760 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	2239      	movs	r2, #57	@ 0x39
 80166fe:	5c9b      	ldrb	r3, [r3, r2]
 8016700:	b2db      	uxtb	r3, r3
 8016702:	2b00      	cmp	r3, #0
 8016704:	d107      	bne.n	8016716 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	2238      	movs	r2, #56	@ 0x38
 801670a:	2100      	movs	r1, #0
 801670c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	0018      	movs	r0, r3
 8016712:	f7f7 fb67 	bl	800dde4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	2239      	movs	r2, #57	@ 0x39
 801671a:	2102      	movs	r1, #2
 801671c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	681a      	ldr	r2, [r3, #0]
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	3304      	adds	r3, #4
 8016726:	0019      	movs	r1, r3
 8016728:	0010      	movs	r0, r2
 801672a:	f000 fa1d 	bl	8016b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	223e      	movs	r2, #62	@ 0x3e
 8016732:	2101      	movs	r1, #1
 8016734:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	223a      	movs	r2, #58	@ 0x3a
 801673a:	2101      	movs	r1, #1
 801673c:	5499      	strb	r1, [r3, r2]
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	223b      	movs	r2, #59	@ 0x3b
 8016742:	2101      	movs	r1, #1
 8016744:	5499      	strb	r1, [r3, r2]
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	223c      	movs	r2, #60	@ 0x3c
 801674a:	2101      	movs	r1, #1
 801674c:	5499      	strb	r1, [r3, r2]
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	223d      	movs	r2, #61	@ 0x3d
 8016752:	2101      	movs	r1, #1
 8016754:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	2239      	movs	r2, #57	@ 0x39
 801675a:	2101      	movs	r1, #1
 801675c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801675e:	2300      	movs	r3, #0
}
 8016760:	0018      	movs	r0, r3
 8016762:	46bd      	mov	sp, r7
 8016764:	b002      	add	sp, #8
 8016766:	bd80      	pop	{r7, pc}

08016768 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b084      	sub	sp, #16
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2239      	movs	r2, #57	@ 0x39
 8016774:	5c9b      	ldrb	r3, [r3, r2]
 8016776:	b2db      	uxtb	r3, r3
 8016778:	2b01      	cmp	r3, #1
 801677a:	d001      	beq.n	8016780 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801677c:	2301      	movs	r3, #1
 801677e:	e033      	b.n	80167e8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	2239      	movs	r2, #57	@ 0x39
 8016784:	2102      	movs	r1, #2
 8016786:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681a      	ldr	r2, [r3, #0]
 801678c:	2380      	movs	r3, #128	@ 0x80
 801678e:	05db      	lsls	r3, r3, #23
 8016790:	429a      	cmp	r2, r3
 8016792:	d00e      	beq.n	80167b2 <HAL_TIM_Base_Start+0x4a>
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	4a15      	ldr	r2, [pc, #84]	@ (80167f0 <HAL_TIM_Base_Start+0x88>)
 801679a:	4293      	cmp	r3, r2
 801679c:	d009      	beq.n	80167b2 <HAL_TIM_Base_Start+0x4a>
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	4a14      	ldr	r2, [pc, #80]	@ (80167f4 <HAL_TIM_Base_Start+0x8c>)
 80167a4:	4293      	cmp	r3, r2
 80167a6:	d004      	beq.n	80167b2 <HAL_TIM_Base_Start+0x4a>
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	4a12      	ldr	r2, [pc, #72]	@ (80167f8 <HAL_TIM_Base_Start+0x90>)
 80167ae:	4293      	cmp	r3, r2
 80167b0:	d111      	bne.n	80167d6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	689b      	ldr	r3, [r3, #8]
 80167b8:	2207      	movs	r2, #7
 80167ba:	4013      	ands	r3, r2
 80167bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	2b06      	cmp	r3, #6
 80167c2:	d010      	beq.n	80167e6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	681a      	ldr	r2, [r3, #0]
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	2101      	movs	r1, #1
 80167d0:	430a      	orrs	r2, r1
 80167d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80167d4:	e007      	b.n	80167e6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	681a      	ldr	r2, [r3, #0]
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	2101      	movs	r1, #1
 80167e2:	430a      	orrs	r2, r1
 80167e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80167e6:	2300      	movs	r3, #0
}
 80167e8:	0018      	movs	r0, r3
 80167ea:	46bd      	mov	sp, r7
 80167ec:	b004      	add	sp, #16
 80167ee:	bd80      	pop	{r7, pc}
 80167f0:	40000400 	.word	0x40000400
 80167f4:	40010800 	.word	0x40010800
 80167f8:	40011400 	.word	0x40011400

080167fc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	6a1b      	ldr	r3, [r3, #32]
 801680a:	4a0a      	ldr	r2, [pc, #40]	@ (8016834 <HAL_TIM_Base_Stop+0x38>)
 801680c:	4013      	ands	r3, r2
 801680e:	d107      	bne.n	8016820 <HAL_TIM_Base_Stop+0x24>
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	681a      	ldr	r2, [r3, #0]
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	2101      	movs	r1, #1
 801681c:	438a      	bics	r2, r1
 801681e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2239      	movs	r2, #57	@ 0x39
 8016824:	2101      	movs	r1, #1
 8016826:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8016828:	2300      	movs	r3, #0
}
 801682a:	0018      	movs	r0, r3
 801682c:	46bd      	mov	sp, r7
 801682e:	b002      	add	sp, #8
 8016830:	bd80      	pop	{r7, pc}
 8016832:	46c0      	nop			@ (mov r8, r8)
 8016834:	00001111 	.word	0x00001111

08016838 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d101      	bne.n	801684a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016846:	2301      	movs	r3, #1
 8016848:	e032      	b.n	80168b0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	2239      	movs	r2, #57	@ 0x39
 801684e:	5c9b      	ldrb	r3, [r3, r2]
 8016850:	b2db      	uxtb	r3, r3
 8016852:	2b00      	cmp	r3, #0
 8016854:	d107      	bne.n	8016866 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	2238      	movs	r2, #56	@ 0x38
 801685a:	2100      	movs	r1, #0
 801685c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	0018      	movs	r0, r3
 8016862:	f7f7 fa9b 	bl	800dd9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	2239      	movs	r2, #57	@ 0x39
 801686a:	2102      	movs	r1, #2
 801686c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681a      	ldr	r2, [r3, #0]
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	3304      	adds	r3, #4
 8016876:	0019      	movs	r1, r3
 8016878:	0010      	movs	r0, r2
 801687a:	f000 f975 	bl	8016b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	223e      	movs	r2, #62	@ 0x3e
 8016882:	2101      	movs	r1, #1
 8016884:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	223a      	movs	r2, #58	@ 0x3a
 801688a:	2101      	movs	r1, #1
 801688c:	5499      	strb	r1, [r3, r2]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	223b      	movs	r2, #59	@ 0x3b
 8016892:	2101      	movs	r1, #1
 8016894:	5499      	strb	r1, [r3, r2]
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	223c      	movs	r2, #60	@ 0x3c
 801689a:	2101      	movs	r1, #1
 801689c:	5499      	strb	r1, [r3, r2]
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	223d      	movs	r2, #61	@ 0x3d
 80168a2:	2101      	movs	r1, #1
 80168a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	2239      	movs	r2, #57	@ 0x39
 80168aa:	2101      	movs	r1, #1
 80168ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80168ae:	2300      	movs	r3, #0
}
 80168b0:	0018      	movs	r0, r3
 80168b2:	46bd      	mov	sp, r7
 80168b4:	b002      	add	sp, #8
 80168b6:	bd80      	pop	{r7, pc}

080168b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b084      	sub	sp, #16
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
 80168c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80168c2:	683b      	ldr	r3, [r7, #0]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d108      	bne.n	80168da <HAL_TIM_PWM_Start+0x22>
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	223a      	movs	r2, #58	@ 0x3a
 80168cc:	5c9b      	ldrb	r3, [r3, r2]
 80168ce:	b2db      	uxtb	r3, r3
 80168d0:	3b01      	subs	r3, #1
 80168d2:	1e5a      	subs	r2, r3, #1
 80168d4:	4193      	sbcs	r3, r2
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	e01f      	b.n	801691a <HAL_TIM_PWM_Start+0x62>
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	2b04      	cmp	r3, #4
 80168de:	d108      	bne.n	80168f2 <HAL_TIM_PWM_Start+0x3a>
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	223b      	movs	r2, #59	@ 0x3b
 80168e4:	5c9b      	ldrb	r3, [r3, r2]
 80168e6:	b2db      	uxtb	r3, r3
 80168e8:	3b01      	subs	r3, #1
 80168ea:	1e5a      	subs	r2, r3, #1
 80168ec:	4193      	sbcs	r3, r2
 80168ee:	b2db      	uxtb	r3, r3
 80168f0:	e013      	b.n	801691a <HAL_TIM_PWM_Start+0x62>
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	2b08      	cmp	r3, #8
 80168f6:	d108      	bne.n	801690a <HAL_TIM_PWM_Start+0x52>
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	223c      	movs	r2, #60	@ 0x3c
 80168fc:	5c9b      	ldrb	r3, [r3, r2]
 80168fe:	b2db      	uxtb	r3, r3
 8016900:	3b01      	subs	r3, #1
 8016902:	1e5a      	subs	r2, r3, #1
 8016904:	4193      	sbcs	r3, r2
 8016906:	b2db      	uxtb	r3, r3
 8016908:	e007      	b.n	801691a <HAL_TIM_PWM_Start+0x62>
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	223d      	movs	r2, #61	@ 0x3d
 801690e:	5c9b      	ldrb	r3, [r3, r2]
 8016910:	b2db      	uxtb	r3, r3
 8016912:	3b01      	subs	r3, #1
 8016914:	1e5a      	subs	r2, r3, #1
 8016916:	4193      	sbcs	r3, r2
 8016918:	b2db      	uxtb	r3, r3
 801691a:	2b00      	cmp	r3, #0
 801691c:	d001      	beq.n	8016922 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801691e:	2301      	movs	r3, #1
 8016920:	e052      	b.n	80169c8 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d104      	bne.n	8016932 <HAL_TIM_PWM_Start+0x7a>
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	223a      	movs	r2, #58	@ 0x3a
 801692c:	2102      	movs	r1, #2
 801692e:	5499      	strb	r1, [r3, r2]
 8016930:	e013      	b.n	801695a <HAL_TIM_PWM_Start+0xa2>
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	2b04      	cmp	r3, #4
 8016936:	d104      	bne.n	8016942 <HAL_TIM_PWM_Start+0x8a>
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	223b      	movs	r2, #59	@ 0x3b
 801693c:	2102      	movs	r1, #2
 801693e:	5499      	strb	r1, [r3, r2]
 8016940:	e00b      	b.n	801695a <HAL_TIM_PWM_Start+0xa2>
 8016942:	683b      	ldr	r3, [r7, #0]
 8016944:	2b08      	cmp	r3, #8
 8016946:	d104      	bne.n	8016952 <HAL_TIM_PWM_Start+0x9a>
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	223c      	movs	r2, #60	@ 0x3c
 801694c:	2102      	movs	r1, #2
 801694e:	5499      	strb	r1, [r3, r2]
 8016950:	e003      	b.n	801695a <HAL_TIM_PWM_Start+0xa2>
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	223d      	movs	r2, #61	@ 0x3d
 8016956:	2102      	movs	r1, #2
 8016958:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	6839      	ldr	r1, [r7, #0]
 8016960:	2201      	movs	r2, #1
 8016962:	0018      	movs	r0, r3
 8016964:	f000 fa62 	bl	8016e2c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	681a      	ldr	r2, [r3, #0]
 801696c:	2380      	movs	r3, #128	@ 0x80
 801696e:	05db      	lsls	r3, r3, #23
 8016970:	429a      	cmp	r2, r3
 8016972:	d00e      	beq.n	8016992 <HAL_TIM_PWM_Start+0xda>
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	4a15      	ldr	r2, [pc, #84]	@ (80169d0 <HAL_TIM_PWM_Start+0x118>)
 801697a:	4293      	cmp	r3, r2
 801697c:	d009      	beq.n	8016992 <HAL_TIM_PWM_Start+0xda>
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	4a14      	ldr	r2, [pc, #80]	@ (80169d4 <HAL_TIM_PWM_Start+0x11c>)
 8016984:	4293      	cmp	r3, r2
 8016986:	d004      	beq.n	8016992 <HAL_TIM_PWM_Start+0xda>
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	4a12      	ldr	r2, [pc, #72]	@ (80169d8 <HAL_TIM_PWM_Start+0x120>)
 801698e:	4293      	cmp	r3, r2
 8016990:	d111      	bne.n	80169b6 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	689b      	ldr	r3, [r3, #8]
 8016998:	2207      	movs	r2, #7
 801699a:	4013      	ands	r3, r2
 801699c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	2b06      	cmp	r3, #6
 80169a2:	d010      	beq.n	80169c6 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	681a      	ldr	r2, [r3, #0]
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2101      	movs	r1, #1
 80169b0:	430a      	orrs	r2, r1
 80169b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80169b4:	e007      	b.n	80169c6 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	681a      	ldr	r2, [r3, #0]
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	2101      	movs	r1, #1
 80169c2:	430a      	orrs	r2, r1
 80169c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80169c6:	2300      	movs	r3, #0
}
 80169c8:	0018      	movs	r0, r3
 80169ca:	46bd      	mov	sp, r7
 80169cc:	b004      	add	sp, #16
 80169ce:	bd80      	pop	{r7, pc}
 80169d0:	40000400 	.word	0x40000400
 80169d4:	40010800 	.word	0x40010800
 80169d8:	40011400 	.word	0x40011400

080169dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b086      	sub	sp, #24
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	60f8      	str	r0, [r7, #12]
 80169e4:	60b9      	str	r1, [r7, #8]
 80169e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80169e8:	2317      	movs	r3, #23
 80169ea:	18fb      	adds	r3, r7, r3
 80169ec:	2200      	movs	r2, #0
 80169ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	2238      	movs	r2, #56	@ 0x38
 80169f4:	5c9b      	ldrb	r3, [r3, r2]
 80169f6:	2b01      	cmp	r3, #1
 80169f8:	d101      	bne.n	80169fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80169fa:	2302      	movs	r3, #2
 80169fc:	e0ad      	b.n	8016b5a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	2238      	movs	r2, #56	@ 0x38
 8016a02:	2101      	movs	r1, #1
 8016a04:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2b0c      	cmp	r3, #12
 8016a0a:	d100      	bne.n	8016a0e <HAL_TIM_PWM_ConfigChannel+0x32>
 8016a0c:	e076      	b.n	8016afc <HAL_TIM_PWM_ConfigChannel+0x120>
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	2b0c      	cmp	r3, #12
 8016a12:	d900      	bls.n	8016a16 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016a14:	e095      	b.n	8016b42 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2b08      	cmp	r3, #8
 8016a1a:	d04e      	beq.n	8016aba <HAL_TIM_PWM_ConfigChannel+0xde>
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	2b08      	cmp	r3, #8
 8016a20:	d900      	bls.n	8016a24 <HAL_TIM_PWM_ConfigChannel+0x48>
 8016a22:	e08e      	b.n	8016b42 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d003      	beq.n	8016a32 <HAL_TIM_PWM_ConfigChannel+0x56>
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	2b04      	cmp	r3, #4
 8016a2e:	d021      	beq.n	8016a74 <HAL_TIM_PWM_ConfigChannel+0x98>
 8016a30:	e087      	b.n	8016b42 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	68ba      	ldr	r2, [r7, #8]
 8016a38:	0011      	movs	r1, r2
 8016a3a:	0018      	movs	r0, r3
 8016a3c:	f000 f8f2 	bl	8016c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	699a      	ldr	r2, [r3, #24]
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	2108      	movs	r1, #8
 8016a4c:	430a      	orrs	r2, r1
 8016a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	699a      	ldr	r2, [r3, #24]
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	2104      	movs	r1, #4
 8016a5c:	438a      	bics	r2, r1
 8016a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	6999      	ldr	r1, [r3, #24]
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	68da      	ldr	r2, [r3, #12]
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	430a      	orrs	r2, r1
 8016a70:	619a      	str	r2, [r3, #24]
      break;
 8016a72:	e06b      	b.n	8016b4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	68ba      	ldr	r2, [r7, #8]
 8016a7a:	0011      	movs	r1, r2
 8016a7c:	0018      	movs	r0, r3
 8016a7e:	f000 f90d 	bl	8016c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	699a      	ldr	r2, [r3, #24]
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	2180      	movs	r1, #128	@ 0x80
 8016a8e:	0109      	lsls	r1, r1, #4
 8016a90:	430a      	orrs	r2, r1
 8016a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	699a      	ldr	r2, [r3, #24]
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	4931      	ldr	r1, [pc, #196]	@ (8016b64 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016aa0:	400a      	ands	r2, r1
 8016aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	6999      	ldr	r1, [r3, #24]
 8016aaa:	68bb      	ldr	r3, [r7, #8]
 8016aac:	68db      	ldr	r3, [r3, #12]
 8016aae:	021a      	lsls	r2, r3, #8
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	430a      	orrs	r2, r1
 8016ab6:	619a      	str	r2, [r3, #24]
      break;
 8016ab8:	e048      	b.n	8016b4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	68ba      	ldr	r2, [r7, #8]
 8016ac0:	0011      	movs	r1, r2
 8016ac2:	0018      	movs	r0, r3
 8016ac4:	f000 f92c 	bl	8016d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	69da      	ldr	r2, [r3, #28]
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	2108      	movs	r1, #8
 8016ad4:	430a      	orrs	r2, r1
 8016ad6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	69da      	ldr	r2, [r3, #28]
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	2104      	movs	r1, #4
 8016ae4:	438a      	bics	r2, r1
 8016ae6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	69d9      	ldr	r1, [r3, #28]
 8016aee:	68bb      	ldr	r3, [r7, #8]
 8016af0:	68da      	ldr	r2, [r3, #12]
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	430a      	orrs	r2, r1
 8016af8:	61da      	str	r2, [r3, #28]
      break;
 8016afa:	e027      	b.n	8016b4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	68ba      	ldr	r2, [r7, #8]
 8016b02:	0011      	movs	r1, r2
 8016b04:	0018      	movs	r0, r3
 8016b06:	f000 f94b 	bl	8016da0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	69da      	ldr	r2, [r3, #28]
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	2180      	movs	r1, #128	@ 0x80
 8016b16:	0109      	lsls	r1, r1, #4
 8016b18:	430a      	orrs	r2, r1
 8016b1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	69da      	ldr	r2, [r3, #28]
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	490f      	ldr	r1, [pc, #60]	@ (8016b64 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016b28:	400a      	ands	r2, r1
 8016b2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	69d9      	ldr	r1, [r3, #28]
 8016b32:	68bb      	ldr	r3, [r7, #8]
 8016b34:	68db      	ldr	r3, [r3, #12]
 8016b36:	021a      	lsls	r2, r3, #8
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	430a      	orrs	r2, r1
 8016b3e:	61da      	str	r2, [r3, #28]
      break;
 8016b40:	e004      	b.n	8016b4c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8016b42:	2317      	movs	r3, #23
 8016b44:	18fb      	adds	r3, r7, r3
 8016b46:	2201      	movs	r2, #1
 8016b48:	701a      	strb	r2, [r3, #0]
      break;
 8016b4a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	2238      	movs	r2, #56	@ 0x38
 8016b50:	2100      	movs	r1, #0
 8016b52:	5499      	strb	r1, [r3, r2]

  return status;
 8016b54:	2317      	movs	r3, #23
 8016b56:	18fb      	adds	r3, r7, r3
 8016b58:	781b      	ldrb	r3, [r3, #0]
}
 8016b5a:	0018      	movs	r0, r3
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	b006      	add	sp, #24
 8016b60:	bd80      	pop	{r7, pc}
 8016b62:	46c0      	nop			@ (mov r8, r8)
 8016b64:	fffffbff 	.word	0xfffffbff

08016b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b084      	sub	sp, #16
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
 8016b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016b78:	687a      	ldr	r2, [r7, #4]
 8016b7a:	2380      	movs	r3, #128	@ 0x80
 8016b7c:	05db      	lsls	r3, r3, #23
 8016b7e:	429a      	cmp	r2, r3
 8016b80:	d00b      	beq.n	8016b9a <TIM_Base_SetConfig+0x32>
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	4a23      	ldr	r2, [pc, #140]	@ (8016c14 <TIM_Base_SetConfig+0xac>)
 8016b86:	4293      	cmp	r3, r2
 8016b88:	d007      	beq.n	8016b9a <TIM_Base_SetConfig+0x32>
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	4a22      	ldr	r2, [pc, #136]	@ (8016c18 <TIM_Base_SetConfig+0xb0>)
 8016b8e:	4293      	cmp	r3, r2
 8016b90:	d003      	beq.n	8016b9a <TIM_Base_SetConfig+0x32>
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	4a21      	ldr	r2, [pc, #132]	@ (8016c1c <TIM_Base_SetConfig+0xb4>)
 8016b96:	4293      	cmp	r3, r2
 8016b98:	d108      	bne.n	8016bac <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	2270      	movs	r2, #112	@ 0x70
 8016b9e:	4393      	bics	r3, r2
 8016ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016ba2:	683b      	ldr	r3, [r7, #0]
 8016ba4:	685b      	ldr	r3, [r3, #4]
 8016ba6:	68fa      	ldr	r2, [r7, #12]
 8016ba8:	4313      	orrs	r3, r2
 8016baa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016bac:	687a      	ldr	r2, [r7, #4]
 8016bae:	2380      	movs	r3, #128	@ 0x80
 8016bb0:	05db      	lsls	r3, r3, #23
 8016bb2:	429a      	cmp	r2, r3
 8016bb4:	d00b      	beq.n	8016bce <TIM_Base_SetConfig+0x66>
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	4a16      	ldr	r2, [pc, #88]	@ (8016c14 <TIM_Base_SetConfig+0xac>)
 8016bba:	4293      	cmp	r3, r2
 8016bbc:	d007      	beq.n	8016bce <TIM_Base_SetConfig+0x66>
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	4a15      	ldr	r2, [pc, #84]	@ (8016c18 <TIM_Base_SetConfig+0xb0>)
 8016bc2:	4293      	cmp	r3, r2
 8016bc4:	d003      	beq.n	8016bce <TIM_Base_SetConfig+0x66>
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	4a14      	ldr	r2, [pc, #80]	@ (8016c1c <TIM_Base_SetConfig+0xb4>)
 8016bca:	4293      	cmp	r3, r2
 8016bcc:	d108      	bne.n	8016be0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	4a13      	ldr	r2, [pc, #76]	@ (8016c20 <TIM_Base_SetConfig+0xb8>)
 8016bd2:	4013      	ands	r3, r2
 8016bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	68db      	ldr	r3, [r3, #12]
 8016bda:	68fa      	ldr	r2, [r7, #12]
 8016bdc:	4313      	orrs	r3, r2
 8016bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	2280      	movs	r2, #128	@ 0x80
 8016be4:	4393      	bics	r3, r2
 8016be6:	001a      	movs	r2, r3
 8016be8:	683b      	ldr	r3, [r7, #0]
 8016bea:	691b      	ldr	r3, [r3, #16]
 8016bec:	4313      	orrs	r3, r2
 8016bee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	68fa      	ldr	r2, [r7, #12]
 8016bf4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	689a      	ldr	r2, [r3, #8]
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	681a      	ldr	r2, [r3, #0]
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	2201      	movs	r2, #1
 8016c0a:	615a      	str	r2, [r3, #20]
}
 8016c0c:	46c0      	nop			@ (mov r8, r8)
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	b004      	add	sp, #16
 8016c12:	bd80      	pop	{r7, pc}
 8016c14:	40000400 	.word	0x40000400
 8016c18:	40010800 	.word	0x40010800
 8016c1c:	40011400 	.word	0x40011400
 8016c20:	fffffcff 	.word	0xfffffcff

08016c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b086      	sub	sp, #24
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
 8016c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	6a1b      	ldr	r3, [r3, #32]
 8016c32:	2201      	movs	r2, #1
 8016c34:	4393      	bics	r3, r2
 8016c36:	001a      	movs	r2, r3
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	6a1b      	ldr	r3, [r3, #32]
 8016c40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	685b      	ldr	r3, [r3, #4]
 8016c46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	699b      	ldr	r3, [r3, #24]
 8016c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	2270      	movs	r2, #112	@ 0x70
 8016c52:	4393      	bics	r3, r2
 8016c54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	2203      	movs	r2, #3
 8016c5a:	4393      	bics	r3, r2
 8016c5c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	68fa      	ldr	r2, [r7, #12]
 8016c64:	4313      	orrs	r3, r2
 8016c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016c68:	697b      	ldr	r3, [r7, #20]
 8016c6a:	2202      	movs	r2, #2
 8016c6c:	4393      	bics	r3, r2
 8016c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016c70:	683b      	ldr	r3, [r7, #0]
 8016c72:	689b      	ldr	r3, [r3, #8]
 8016c74:	697a      	ldr	r2, [r7, #20]
 8016c76:	4313      	orrs	r3, r2
 8016c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	693a      	ldr	r2, [r7, #16]
 8016c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	68fa      	ldr	r2, [r7, #12]
 8016c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016c86:	683b      	ldr	r3, [r7, #0]
 8016c88:	685a      	ldr	r2, [r3, #4]
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	697a      	ldr	r2, [r7, #20]
 8016c92:	621a      	str	r2, [r3, #32]
}
 8016c94:	46c0      	nop			@ (mov r8, r8)
 8016c96:	46bd      	mov	sp, r7
 8016c98:	b006      	add	sp, #24
 8016c9a:	bd80      	pop	{r7, pc}

08016c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b086      	sub	sp, #24
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
 8016ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6a1b      	ldr	r3, [r3, #32]
 8016caa:	2210      	movs	r2, #16
 8016cac:	4393      	bics	r3, r2
 8016cae:	001a      	movs	r2, r3
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	6a1b      	ldr	r3, [r3, #32]
 8016cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	685b      	ldr	r3, [r3, #4]
 8016cbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	699b      	ldr	r3, [r3, #24]
 8016cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	4a13      	ldr	r2, [pc, #76]	@ (8016d18 <TIM_OC2_SetConfig+0x7c>)
 8016cca:	4013      	ands	r3, r2
 8016ccc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	4a12      	ldr	r2, [pc, #72]	@ (8016d1c <TIM_OC2_SetConfig+0x80>)
 8016cd2:	4013      	ands	r3, r2
 8016cd4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016cd6:	683b      	ldr	r3, [r7, #0]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	021b      	lsls	r3, r3, #8
 8016cdc:	68fa      	ldr	r2, [r7, #12]
 8016cde:	4313      	orrs	r3, r2
 8016ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016ce2:	697b      	ldr	r3, [r7, #20]
 8016ce4:	2220      	movs	r2, #32
 8016ce6:	4393      	bics	r3, r2
 8016ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016cea:	683b      	ldr	r3, [r7, #0]
 8016cec:	689b      	ldr	r3, [r3, #8]
 8016cee:	011b      	lsls	r3, r3, #4
 8016cf0:	697a      	ldr	r2, [r7, #20]
 8016cf2:	4313      	orrs	r3, r2
 8016cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	693a      	ldr	r2, [r7, #16]
 8016cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	68fa      	ldr	r2, [r7, #12]
 8016d00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016d02:	683b      	ldr	r3, [r7, #0]
 8016d04:	685a      	ldr	r2, [r3, #4]
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	697a      	ldr	r2, [r7, #20]
 8016d0e:	621a      	str	r2, [r3, #32]
}
 8016d10:	46c0      	nop			@ (mov r8, r8)
 8016d12:	46bd      	mov	sp, r7
 8016d14:	b006      	add	sp, #24
 8016d16:	bd80      	pop	{r7, pc}
 8016d18:	ffff8fff 	.word	0xffff8fff
 8016d1c:	fffffcff 	.word	0xfffffcff

08016d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b086      	sub	sp, #24
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
 8016d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6a1b      	ldr	r3, [r3, #32]
 8016d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8016d98 <TIM_OC3_SetConfig+0x78>)
 8016d30:	401a      	ands	r2, r3
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	6a1b      	ldr	r3, [r3, #32]
 8016d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	685b      	ldr	r3, [r3, #4]
 8016d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	69db      	ldr	r3, [r3, #28]
 8016d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	2270      	movs	r2, #112	@ 0x70
 8016d4c:	4393      	bics	r3, r2
 8016d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	2203      	movs	r2, #3
 8016d54:	4393      	bics	r3, r2
 8016d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016d58:	683b      	ldr	r3, [r7, #0]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	68fa      	ldr	r2, [r7, #12]
 8016d5e:	4313      	orrs	r3, r2
 8016d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016d62:	697b      	ldr	r3, [r7, #20]
 8016d64:	4a0d      	ldr	r2, [pc, #52]	@ (8016d9c <TIM_OC3_SetConfig+0x7c>)
 8016d66:	4013      	ands	r3, r2
 8016d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016d6a:	683b      	ldr	r3, [r7, #0]
 8016d6c:	689b      	ldr	r3, [r3, #8]
 8016d6e:	021b      	lsls	r3, r3, #8
 8016d70:	697a      	ldr	r2, [r7, #20]
 8016d72:	4313      	orrs	r3, r2
 8016d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	693a      	ldr	r2, [r7, #16]
 8016d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	68fa      	ldr	r2, [r7, #12]
 8016d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016d82:	683b      	ldr	r3, [r7, #0]
 8016d84:	685a      	ldr	r2, [r3, #4]
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	697a      	ldr	r2, [r7, #20]
 8016d8e:	621a      	str	r2, [r3, #32]
}
 8016d90:	46c0      	nop			@ (mov r8, r8)
 8016d92:	46bd      	mov	sp, r7
 8016d94:	b006      	add	sp, #24
 8016d96:	bd80      	pop	{r7, pc}
 8016d98:	fffffeff 	.word	0xfffffeff
 8016d9c:	fffffdff 	.word	0xfffffdff

08016da0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b086      	sub	sp, #24
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	6078      	str	r0, [r7, #4]
 8016da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	6a1b      	ldr	r3, [r3, #32]
 8016dae:	4a1b      	ldr	r2, [pc, #108]	@ (8016e1c <TIM_OC4_SetConfig+0x7c>)
 8016db0:	401a      	ands	r2, r3
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	6a1b      	ldr	r3, [r3, #32]
 8016dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	685b      	ldr	r3, [r3, #4]
 8016dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	69db      	ldr	r3, [r3, #28]
 8016dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016dc8:	68fb      	ldr	r3, [r7, #12]
 8016dca:	4a15      	ldr	r2, [pc, #84]	@ (8016e20 <TIM_OC4_SetConfig+0x80>)
 8016dcc:	4013      	ands	r3, r2
 8016dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	4a14      	ldr	r2, [pc, #80]	@ (8016e24 <TIM_OC4_SetConfig+0x84>)
 8016dd4:	4013      	ands	r3, r2
 8016dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016dd8:	683b      	ldr	r3, [r7, #0]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	021b      	lsls	r3, r3, #8
 8016dde:	68fa      	ldr	r2, [r7, #12]
 8016de0:	4313      	orrs	r3, r2
 8016de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016de4:	697b      	ldr	r3, [r7, #20]
 8016de6:	4a10      	ldr	r2, [pc, #64]	@ (8016e28 <TIM_OC4_SetConfig+0x88>)
 8016de8:	4013      	ands	r3, r2
 8016dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016dec:	683b      	ldr	r3, [r7, #0]
 8016dee:	689b      	ldr	r3, [r3, #8]
 8016df0:	031b      	lsls	r3, r3, #12
 8016df2:	697a      	ldr	r2, [r7, #20]
 8016df4:	4313      	orrs	r3, r2
 8016df6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	693a      	ldr	r2, [r7, #16]
 8016dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	68fa      	ldr	r2, [r7, #12]
 8016e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016e04:	683b      	ldr	r3, [r7, #0]
 8016e06:	685a      	ldr	r2, [r3, #4]
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	697a      	ldr	r2, [r7, #20]
 8016e10:	621a      	str	r2, [r3, #32]
}
 8016e12:	46c0      	nop			@ (mov r8, r8)
 8016e14:	46bd      	mov	sp, r7
 8016e16:	b006      	add	sp, #24
 8016e18:	bd80      	pop	{r7, pc}
 8016e1a:	46c0      	nop			@ (mov r8, r8)
 8016e1c:	ffffefff 	.word	0xffffefff
 8016e20:	ffff8fff 	.word	0xffff8fff
 8016e24:	fffffcff 	.word	0xfffffcff
 8016e28:	ffffdfff 	.word	0xffffdfff

08016e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b086      	sub	sp, #24
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	60f8      	str	r0, [r7, #12]
 8016e34:	60b9      	str	r1, [r7, #8]
 8016e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016e38:	68bb      	ldr	r3, [r7, #8]
 8016e3a:	221f      	movs	r2, #31
 8016e3c:	4013      	ands	r3, r2
 8016e3e:	2201      	movs	r2, #1
 8016e40:	409a      	lsls	r2, r3
 8016e42:	0013      	movs	r3, r2
 8016e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	6a1b      	ldr	r3, [r3, #32]
 8016e4a:	697a      	ldr	r2, [r7, #20]
 8016e4c:	43d2      	mvns	r2, r2
 8016e4e:	401a      	ands	r2, r3
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	6a1a      	ldr	r2, [r3, #32]
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	211f      	movs	r1, #31
 8016e5c:	400b      	ands	r3, r1
 8016e5e:	6879      	ldr	r1, [r7, #4]
 8016e60:	4099      	lsls	r1, r3
 8016e62:	000b      	movs	r3, r1
 8016e64:	431a      	orrs	r2, r3
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	621a      	str	r2, [r3, #32]
}
 8016e6a:	46c0      	nop			@ (mov r8, r8)
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	b006      	add	sp, #24
 8016e70:	bd80      	pop	{r7, pc}
	...

08016e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b084      	sub	sp, #16
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	2238      	movs	r2, #56	@ 0x38
 8016e82:	5c9b      	ldrb	r3, [r3, r2]
 8016e84:	2b01      	cmp	r3, #1
 8016e86:	d101      	bne.n	8016e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016e88:	2302      	movs	r3, #2
 8016e8a:	e047      	b.n	8016f1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	2238      	movs	r2, #56	@ 0x38
 8016e90:	2101      	movs	r1, #1
 8016e92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2239      	movs	r2, #57	@ 0x39
 8016e98:	2102      	movs	r1, #2
 8016e9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	685b      	ldr	r3, [r3, #4]
 8016ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	689b      	ldr	r3, [r3, #8]
 8016eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	2270      	movs	r2, #112	@ 0x70
 8016eb0:	4393      	bics	r3, r2
 8016eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	68fa      	ldr	r2, [r7, #12]
 8016eba:	4313      	orrs	r3, r2
 8016ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	68fa      	ldr	r2, [r7, #12]
 8016ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	681a      	ldr	r2, [r3, #0]
 8016eca:	2380      	movs	r3, #128	@ 0x80
 8016ecc:	05db      	lsls	r3, r3, #23
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	d00e      	beq.n	8016ef0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	4a13      	ldr	r2, [pc, #76]	@ (8016f24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8016ed8:	4293      	cmp	r3, r2
 8016eda:	d009      	beq.n	8016ef0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	4a11      	ldr	r2, [pc, #68]	@ (8016f28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8016ee2:	4293      	cmp	r3, r2
 8016ee4:	d004      	beq.n	8016ef0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	4a10      	ldr	r2, [pc, #64]	@ (8016f2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8016eec:	4293      	cmp	r3, r2
 8016eee:	d10c      	bne.n	8016f0a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	2280      	movs	r2, #128	@ 0x80
 8016ef4:	4393      	bics	r3, r2
 8016ef6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	685b      	ldr	r3, [r3, #4]
 8016efc:	68ba      	ldr	r2, [r7, #8]
 8016efe:	4313      	orrs	r3, r2
 8016f00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	68ba      	ldr	r2, [r7, #8]
 8016f08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2239      	movs	r2, #57	@ 0x39
 8016f0e:	2101      	movs	r1, #1
 8016f10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	2238      	movs	r2, #56	@ 0x38
 8016f16:	2100      	movs	r1, #0
 8016f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016f1a:	2300      	movs	r3, #0
}
 8016f1c:	0018      	movs	r0, r3
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	b004      	add	sp, #16
 8016f22:	bd80      	pop	{r7, pc}
 8016f24:	40000400 	.word	0x40000400
 8016f28:	40010800 	.word	0x40010800
 8016f2c:	40011400 	.word	0x40011400

08016f30 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b082      	sub	sp, #8
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
 8016f38:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	2238      	movs	r2, #56	@ 0x38
 8016f3e:	5c9b      	ldrb	r3, [r3, r2]
 8016f40:	2b01      	cmp	r3, #1
 8016f42:	d101      	bne.n	8016f48 <HAL_TIMEx_RemapConfig+0x18>
 8016f44:	2302      	movs	r3, #2
 8016f46:	e00c      	b.n	8016f62 <HAL_TIMEx_RemapConfig+0x32>
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2238      	movs	r2, #56	@ 0x38
 8016f4c:	2101      	movs	r1, #1
 8016f4e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	683a      	ldr	r2, [r7, #0]
 8016f56:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	2238      	movs	r2, #56	@ 0x38
 8016f5c:	2100      	movs	r1, #0
 8016f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016f60:	2300      	movs	r3, #0
}
 8016f62:	0018      	movs	r0, r3
 8016f64:	46bd      	mov	sp, r7
 8016f66:	b002      	add	sp, #8
 8016f68:	bd80      	pop	{r7, pc}
	...

08016f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b082      	sub	sp, #8
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d101      	bne.n	8016f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016f7a:	2301      	movs	r3, #1
 8016f7c:	e053      	b.n	8017026 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d116      	bne.n	8016fb4 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	2278      	movs	r2, #120	@ 0x78
 8016f8a:	2100      	movs	r1, #0
 8016f8c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	0018      	movs	r0, r3
 8016f92:	f000 fd65 	bl	8017a60 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	22b0      	movs	r2, #176	@ 0xb0
 8016f9a:	589b      	ldr	r3, [r3, r2]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d103      	bne.n	8016fa8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	21b0      	movs	r1, #176	@ 0xb0
 8016fa4:	4a22      	ldr	r2, [pc, #136]	@ (8017030 <HAL_UART_Init+0xc4>)
 8016fa6:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	22b0      	movs	r2, #176	@ 0xb0
 8016fac:	589b      	ldr	r3, [r3, r2]
 8016fae:	687a      	ldr	r2, [r7, #4]
 8016fb0:	0010      	movs	r0, r2
 8016fb2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	2224      	movs	r2, #36	@ 0x24
 8016fb8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	681a      	ldr	r2, [r3, #0]
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	2101      	movs	r1, #1
 8016fc6:	438a      	bics	r2, r1
 8016fc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	0018      	movs	r0, r3
 8016fce:	f000 fd8b 	bl	8017ae8 <UART_SetConfig>
 8016fd2:	0003      	movs	r3, r0
 8016fd4:	2b01      	cmp	r3, #1
 8016fd6:	d101      	bne.n	8016fdc <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8016fd8:	2301      	movs	r3, #1
 8016fda:	e024      	b.n	8017026 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d003      	beq.n	8016fec <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	0018      	movs	r0, r3
 8016fe8:	f001 f81c 	bl	8018024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	685a      	ldr	r2, [r3, #4]
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	490f      	ldr	r1, [pc, #60]	@ (8017034 <HAL_UART_Init+0xc8>)
 8016ff8:	400a      	ands	r2, r1
 8016ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	689a      	ldr	r2, [r3, #8]
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	212a      	movs	r1, #42	@ 0x2a
 8017008:	438a      	bics	r2, r1
 801700a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	681a      	ldr	r2, [r3, #0]
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	2101      	movs	r1, #1
 8017018:	430a      	orrs	r2, r1
 801701a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	0018      	movs	r0, r3
 8017020:	f001 f8b4 	bl	801818c <UART_CheckIdleState>
 8017024:	0003      	movs	r3, r0
}
 8017026:	0018      	movs	r0, r3
 8017028:	46bd      	mov	sp, r7
 801702a:	b002      	add	sp, #8
 801702c:	bd80      	pop	{r7, pc}
 801702e:	46c0      	nop			@ (mov r8, r8)
 8017030:	0800e019 	.word	0x0800e019
 8017034:	ffffb7ff 	.word	0xffffb7ff

08017038 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b08a      	sub	sp, #40	@ 0x28
 801703c:	af02      	add	r7, sp, #8
 801703e:	60f8      	str	r0, [r7, #12]
 8017040:	60b9      	str	r1, [r7, #8]
 8017042:	603b      	str	r3, [r7, #0]
 8017044:	1dbb      	adds	r3, r7, #6
 8017046:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801704c:	2b20      	cmp	r3, #32
 801704e:	d000      	beq.n	8017052 <HAL_UART_Transmit+0x1a>
 8017050:	e08c      	b.n	801716c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8017052:	68bb      	ldr	r3, [r7, #8]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d003      	beq.n	8017060 <HAL_UART_Transmit+0x28>
 8017058:	1dbb      	adds	r3, r7, #6
 801705a:	881b      	ldrh	r3, [r3, #0]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d101      	bne.n	8017064 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8017060:	2301      	movs	r3, #1
 8017062:	e084      	b.n	801716e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	689a      	ldr	r2, [r3, #8]
 8017068:	2380      	movs	r3, #128	@ 0x80
 801706a:	015b      	lsls	r3, r3, #5
 801706c:	429a      	cmp	r2, r3
 801706e:	d109      	bne.n	8017084 <HAL_UART_Transmit+0x4c>
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	691b      	ldr	r3, [r3, #16]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d105      	bne.n	8017084 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	2201      	movs	r2, #1
 801707c:	4013      	ands	r3, r2
 801707e:	d001      	beq.n	8017084 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8017080:	2301      	movs	r3, #1
 8017082:	e074      	b.n	801716e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	2284      	movs	r2, #132	@ 0x84
 8017088:	2100      	movs	r1, #0
 801708a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	2221      	movs	r2, #33	@ 0x21
 8017090:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017092:	f7f7 fda5 	bl	800ebe0 <HAL_GetTick>
 8017096:	0003      	movs	r3, r0
 8017098:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	1dba      	adds	r2, r7, #6
 801709e:	2150      	movs	r1, #80	@ 0x50
 80170a0:	8812      	ldrh	r2, [r2, #0]
 80170a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	1dba      	adds	r2, r7, #6
 80170a8:	2152      	movs	r1, #82	@ 0x52
 80170aa:	8812      	ldrh	r2, [r2, #0]
 80170ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	689a      	ldr	r2, [r3, #8]
 80170b2:	2380      	movs	r3, #128	@ 0x80
 80170b4:	015b      	lsls	r3, r3, #5
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d108      	bne.n	80170cc <HAL_UART_Transmit+0x94>
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	691b      	ldr	r3, [r3, #16]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d104      	bne.n	80170cc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80170c2:	2300      	movs	r3, #0
 80170c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80170c6:	68bb      	ldr	r3, [r7, #8]
 80170c8:	61bb      	str	r3, [r7, #24]
 80170ca:	e003      	b.n	80170d4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80170cc:	68bb      	ldr	r3, [r7, #8]
 80170ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80170d0:	2300      	movs	r3, #0
 80170d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80170d4:	e02f      	b.n	8017136 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80170d6:	697a      	ldr	r2, [r7, #20]
 80170d8:	68f8      	ldr	r0, [r7, #12]
 80170da:	683b      	ldr	r3, [r7, #0]
 80170dc:	9300      	str	r3, [sp, #0]
 80170de:	0013      	movs	r3, r2
 80170e0:	2200      	movs	r2, #0
 80170e2:	2180      	movs	r1, #128	@ 0x80
 80170e4:	f001 f8fa 	bl	80182dc <UART_WaitOnFlagUntilTimeout>
 80170e8:	1e03      	subs	r3, r0, #0
 80170ea:	d004      	beq.n	80170f6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	2220      	movs	r2, #32
 80170f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80170f2:	2303      	movs	r3, #3
 80170f4:	e03b      	b.n	801716e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80170f6:	69fb      	ldr	r3, [r7, #28]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d10b      	bne.n	8017114 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80170fc:	69bb      	ldr	r3, [r7, #24]
 80170fe:	881b      	ldrh	r3, [r3, #0]
 8017100:	001a      	movs	r2, r3
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	05d2      	lsls	r2, r2, #23
 8017108:	0dd2      	lsrs	r2, r2, #23
 801710a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801710c:	69bb      	ldr	r3, [r7, #24]
 801710e:	3302      	adds	r3, #2
 8017110:	61bb      	str	r3, [r7, #24]
 8017112:	e007      	b.n	8017124 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017114:	69fb      	ldr	r3, [r7, #28]
 8017116:	781a      	ldrb	r2, [r3, #0]
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801711e:	69fb      	ldr	r3, [r7, #28]
 8017120:	3301      	adds	r3, #1
 8017122:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	2252      	movs	r2, #82	@ 0x52
 8017128:	5a9b      	ldrh	r3, [r3, r2]
 801712a:	b29b      	uxth	r3, r3
 801712c:	3b01      	subs	r3, #1
 801712e:	b299      	uxth	r1, r3
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	2252      	movs	r2, #82	@ 0x52
 8017134:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	2252      	movs	r2, #82	@ 0x52
 801713a:	5a9b      	ldrh	r3, [r3, r2]
 801713c:	b29b      	uxth	r3, r3
 801713e:	2b00      	cmp	r3, #0
 8017140:	d1c9      	bne.n	80170d6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017142:	697a      	ldr	r2, [r7, #20]
 8017144:	68f8      	ldr	r0, [r7, #12]
 8017146:	683b      	ldr	r3, [r7, #0]
 8017148:	9300      	str	r3, [sp, #0]
 801714a:	0013      	movs	r3, r2
 801714c:	2200      	movs	r2, #0
 801714e:	2140      	movs	r1, #64	@ 0x40
 8017150:	f001 f8c4 	bl	80182dc <UART_WaitOnFlagUntilTimeout>
 8017154:	1e03      	subs	r3, r0, #0
 8017156:	d004      	beq.n	8017162 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	2220      	movs	r2, #32
 801715c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801715e:	2303      	movs	r3, #3
 8017160:	e005      	b.n	801716e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	2220      	movs	r2, #32
 8017166:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8017168:	2300      	movs	r3, #0
 801716a:	e000      	b.n	801716e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801716c:	2302      	movs	r3, #2
  }
}
 801716e:	0018      	movs	r0, r3
 8017170:	46bd      	mov	sp, r7
 8017172:	b008      	add	sp, #32
 8017174:	bd80      	pop	{r7, pc}
	...

08017178 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017178:	b580      	push	{r7, lr}
 801717a:	b088      	sub	sp, #32
 801717c:	af00      	add	r7, sp, #0
 801717e:	60f8      	str	r0, [r7, #12]
 8017180:	60b9      	str	r1, [r7, #8]
 8017182:	1dbb      	adds	r3, r7, #6
 8017184:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	2280      	movs	r2, #128	@ 0x80
 801718a:	589b      	ldr	r3, [r3, r2]
 801718c:	2b20      	cmp	r3, #32
 801718e:	d14a      	bne.n	8017226 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017190:	68bb      	ldr	r3, [r7, #8]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d003      	beq.n	801719e <HAL_UART_Receive_IT+0x26>
 8017196:	1dbb      	adds	r3, r7, #6
 8017198:	881b      	ldrh	r3, [r3, #0]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d101      	bne.n	80171a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801719e:	2301      	movs	r3, #1
 80171a0:	e042      	b.n	8017228 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	689a      	ldr	r2, [r3, #8]
 80171a6:	2380      	movs	r3, #128	@ 0x80
 80171a8:	015b      	lsls	r3, r3, #5
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d109      	bne.n	80171c2 <HAL_UART_Receive_IT+0x4a>
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	691b      	ldr	r3, [r3, #16]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d105      	bne.n	80171c2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	2201      	movs	r2, #1
 80171ba:	4013      	ands	r3, r2
 80171bc:	d001      	beq.n	80171c2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80171be:	2301      	movs	r3, #1
 80171c0:	e032      	b.n	8017228 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	2200      	movs	r2, #0
 80171c6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	4a18      	ldr	r2, [pc, #96]	@ (8017230 <HAL_UART_Receive_IT+0xb8>)
 80171ce:	4293      	cmp	r3, r2
 80171d0:	d020      	beq.n	8017214 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	685a      	ldr	r2, [r3, #4]
 80171d8:	2380      	movs	r3, #128	@ 0x80
 80171da:	041b      	lsls	r3, r3, #16
 80171dc:	4013      	ands	r3, r2
 80171de:	d019      	beq.n	8017214 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80171e0:	f3ef 8310 	mrs	r3, PRIMASK
 80171e4:	613b      	str	r3, [r7, #16]
  return(result);
 80171e6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80171e8:	61fb      	str	r3, [r7, #28]
 80171ea:	2301      	movs	r3, #1
 80171ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171ee:	697b      	ldr	r3, [r7, #20]
 80171f0:	f383 8810 	msr	PRIMASK, r3
}
 80171f4:	46c0      	nop			@ (mov r8, r8)
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	681a      	ldr	r2, [r3, #0]
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	2180      	movs	r1, #128	@ 0x80
 8017202:	04c9      	lsls	r1, r1, #19
 8017204:	430a      	orrs	r2, r1
 8017206:	601a      	str	r2, [r3, #0]
 8017208:	69fb      	ldr	r3, [r7, #28]
 801720a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801720c:	69bb      	ldr	r3, [r7, #24]
 801720e:	f383 8810 	msr	PRIMASK, r3
}
 8017212:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8017214:	1dbb      	adds	r3, r7, #6
 8017216:	881a      	ldrh	r2, [r3, #0]
 8017218:	68b9      	ldr	r1, [r7, #8]
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	0018      	movs	r0, r3
 801721e:	f001 f8c7 	bl	80183b0 <UART_Start_Receive_IT>
 8017222:	0003      	movs	r3, r0
 8017224:	e000      	b.n	8017228 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017226:	2302      	movs	r3, #2
  }
}
 8017228:	0018      	movs	r0, r3
 801722a:	46bd      	mov	sp, r7
 801722c:	b008      	add	sp, #32
 801722e:	bd80      	pop	{r7, pc}
 8017230:	40004800 	.word	0x40004800

08017234 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b088      	sub	sp, #32
 8017238:	af00      	add	r7, sp, #0
 801723a:	60f8      	str	r0, [r7, #12]
 801723c:	60b9      	str	r1, [r7, #8]
 801723e:	1dbb      	adds	r3, r7, #6
 8017240:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017246:	2b20      	cmp	r3, #32
 8017248:	d000      	beq.n	801724c <HAL_UART_Transmit_DMA+0x18>
 801724a:	e077      	b.n	801733c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801724c:	68bb      	ldr	r3, [r7, #8]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d003      	beq.n	801725a <HAL_UART_Transmit_DMA+0x26>
 8017252:	1dbb      	adds	r3, r7, #6
 8017254:	881b      	ldrh	r3, [r3, #0]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d101      	bne.n	801725e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801725a:	2301      	movs	r3, #1
 801725c:	e06f      	b.n	801733e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	689a      	ldr	r2, [r3, #8]
 8017262:	2380      	movs	r3, #128	@ 0x80
 8017264:	015b      	lsls	r3, r3, #5
 8017266:	429a      	cmp	r2, r3
 8017268:	d109      	bne.n	801727e <HAL_UART_Transmit_DMA+0x4a>
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	691b      	ldr	r3, [r3, #16]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d105      	bne.n	801727e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017272:	68bb      	ldr	r3, [r7, #8]
 8017274:	2201      	movs	r2, #1
 8017276:	4013      	ands	r3, r2
 8017278:	d001      	beq.n	801727e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801727a:	2301      	movs	r3, #1
 801727c:	e05f      	b.n	801733e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	68ba      	ldr	r2, [r7, #8]
 8017282:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	1dba      	adds	r2, r7, #6
 8017288:	2150      	movs	r1, #80	@ 0x50
 801728a:	8812      	ldrh	r2, [r2, #0]
 801728c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	1dba      	adds	r2, r7, #6
 8017292:	2152      	movs	r1, #82	@ 0x52
 8017294:	8812      	ldrh	r2, [r2, #0]
 8017296:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	2284      	movs	r2, #132	@ 0x84
 801729c:	2100      	movs	r1, #0
 801729e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	2221      	movs	r2, #33	@ 0x21
 80172a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d027      	beq.n	80172fe <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172b2:	4a25      	ldr	r2, [pc, #148]	@ (8017348 <HAL_UART_Transmit_DMA+0x114>)
 80172b4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172ba:	4a24      	ldr	r2, [pc, #144]	@ (801734c <HAL_UART_Transmit_DMA+0x118>)
 80172bc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172c2:	4a23      	ldr	r2, [pc, #140]	@ (8017350 <HAL_UART_Transmit_DMA+0x11c>)
 80172c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80172c6:	68fb      	ldr	r3, [r7, #12]
 80172c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172ca:	2200      	movs	r2, #0
 80172cc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80172d6:	0019      	movs	r1, r3
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	3328      	adds	r3, #40	@ 0x28
 80172de:	001a      	movs	r2, r3
 80172e0:	1dbb      	adds	r3, r7, #6
 80172e2:	881b      	ldrh	r3, [r3, #0]
 80172e4:	f7f8 f9ce 	bl	800f684 <HAL_DMA_Start_IT>
 80172e8:	1e03      	subs	r3, r0, #0
 80172ea:	d008      	beq.n	80172fe <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	2284      	movs	r2, #132	@ 0x84
 80172f0:	2110      	movs	r1, #16
 80172f2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	2220      	movs	r2, #32
 80172f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80172fa:	2301      	movs	r3, #1
 80172fc:	e01f      	b.n	801733e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	2240      	movs	r2, #64	@ 0x40
 8017304:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017306:	f3ef 8310 	mrs	r3, PRIMASK
 801730a:	613b      	str	r3, [r7, #16]
  return(result);
 801730c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801730e:	61fb      	str	r3, [r7, #28]
 8017310:	2301      	movs	r3, #1
 8017312:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017314:	697b      	ldr	r3, [r7, #20]
 8017316:	f383 8810 	msr	PRIMASK, r3
}
 801731a:	46c0      	nop			@ (mov r8, r8)
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	689a      	ldr	r2, [r3, #8]
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	2180      	movs	r1, #128	@ 0x80
 8017328:	430a      	orrs	r2, r1
 801732a:	609a      	str	r2, [r3, #8]
 801732c:	69fb      	ldr	r3, [r7, #28]
 801732e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017330:	69bb      	ldr	r3, [r7, #24]
 8017332:	f383 8810 	msr	PRIMASK, r3
}
 8017336:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8017338:	2300      	movs	r3, #0
 801733a:	e000      	b.n	801733e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801733c:	2302      	movs	r3, #2
  }
}
 801733e:	0018      	movs	r0, r3
 8017340:	46bd      	mov	sp, r7
 8017342:	b008      	add	sp, #32
 8017344:	bd80      	pop	{r7, pc}
 8017346:	46c0      	nop			@ (mov r8, r8)
 8017348:	08018795 	.word	0x08018795
 801734c:	08018831 	.word	0x08018831
 8017350:	080189d1 	.word	0x080189d1

08017354 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b088      	sub	sp, #32
 8017358:	af00      	add	r7, sp, #0
 801735a:	60f8      	str	r0, [r7, #12]
 801735c:	60b9      	str	r1, [r7, #8]
 801735e:	1dbb      	adds	r3, r7, #6
 8017360:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	2280      	movs	r2, #128	@ 0x80
 8017366:	589b      	ldr	r3, [r3, r2]
 8017368:	2b20      	cmp	r3, #32
 801736a:	d14a      	bne.n	8017402 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801736c:	68bb      	ldr	r3, [r7, #8]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d003      	beq.n	801737a <HAL_UART_Receive_DMA+0x26>
 8017372:	1dbb      	adds	r3, r7, #6
 8017374:	881b      	ldrh	r3, [r3, #0]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d101      	bne.n	801737e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801737a:	2301      	movs	r3, #1
 801737c:	e042      	b.n	8017404 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	689a      	ldr	r2, [r3, #8]
 8017382:	2380      	movs	r3, #128	@ 0x80
 8017384:	015b      	lsls	r3, r3, #5
 8017386:	429a      	cmp	r2, r3
 8017388:	d109      	bne.n	801739e <HAL_UART_Receive_DMA+0x4a>
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	691b      	ldr	r3, [r3, #16]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d105      	bne.n	801739e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017392:	68bb      	ldr	r3, [r7, #8]
 8017394:	2201      	movs	r2, #1
 8017396:	4013      	ands	r3, r2
 8017398:	d001      	beq.n	801739e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801739a:	2301      	movs	r3, #1
 801739c:	e032      	b.n	8017404 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	2200      	movs	r2, #0
 80173a2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	4a18      	ldr	r2, [pc, #96]	@ (801740c <HAL_UART_Receive_DMA+0xb8>)
 80173aa:	4293      	cmp	r3, r2
 80173ac:	d020      	beq.n	80173f0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	685a      	ldr	r2, [r3, #4]
 80173b4:	2380      	movs	r3, #128	@ 0x80
 80173b6:	041b      	lsls	r3, r3, #16
 80173b8:	4013      	ands	r3, r2
 80173ba:	d019      	beq.n	80173f0 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80173bc:	f3ef 8310 	mrs	r3, PRIMASK
 80173c0:	613b      	str	r3, [r7, #16]
  return(result);
 80173c2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80173c4:	61fb      	str	r3, [r7, #28]
 80173c6:	2301      	movs	r3, #1
 80173c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173ca:	697b      	ldr	r3, [r7, #20]
 80173cc:	f383 8810 	msr	PRIMASK, r3
}
 80173d0:	46c0      	nop			@ (mov r8, r8)
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	681a      	ldr	r2, [r3, #0]
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	2180      	movs	r1, #128	@ 0x80
 80173de:	04c9      	lsls	r1, r1, #19
 80173e0:	430a      	orrs	r2, r1
 80173e2:	601a      	str	r2, [r3, #0]
 80173e4:	69fb      	ldr	r3, [r7, #28]
 80173e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173e8:	69bb      	ldr	r3, [r7, #24]
 80173ea:	f383 8810 	msr	PRIMASK, r3
}
 80173ee:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80173f0:	1dbb      	adds	r3, r7, #6
 80173f2:	881a      	ldrh	r2, [r3, #0]
 80173f4:	68b9      	ldr	r1, [r7, #8]
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	0018      	movs	r0, r3
 80173fa:	f001 f8a3 	bl	8018544 <UART_Start_Receive_DMA>
 80173fe:	0003      	movs	r3, r0
 8017400:	e000      	b.n	8017404 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8017402:	2302      	movs	r3, #2
  }
}
 8017404:	0018      	movs	r0, r3
 8017406:	46bd      	mov	sp, r7
 8017408:	b008      	add	sp, #32
 801740a:	bd80      	pop	{r7, pc}
 801740c:	40004800 	.word	0x40004800

08017410 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017410:	b590      	push	{r4, r7, lr}
 8017412:	b0ab      	sub	sp, #172	@ 0xac
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	69db      	ldr	r3, [r3, #28]
 801741e:	22a4      	movs	r2, #164	@ 0xa4
 8017420:	18b9      	adds	r1, r7, r2
 8017422:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	20a0      	movs	r0, #160	@ 0xa0
 801742c:	1839      	adds	r1, r7, r0
 801742e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	689b      	ldr	r3, [r3, #8]
 8017436:	219c      	movs	r1, #156	@ 0x9c
 8017438:	1879      	adds	r1, r7, r1
 801743a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801743c:	0011      	movs	r1, r2
 801743e:	18bb      	adds	r3, r7, r2
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	4a9c      	ldr	r2, [pc, #624]	@ (80176b4 <HAL_UART_IRQHandler+0x2a4>)
 8017444:	4013      	ands	r3, r2
 8017446:	2298      	movs	r2, #152	@ 0x98
 8017448:	18bc      	adds	r4, r7, r2
 801744a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801744c:	18bb      	adds	r3, r7, r2
 801744e:	681b      	ldr	r3, [r3, #0]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d114      	bne.n	801747e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8017454:	187b      	adds	r3, r7, r1
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	2220      	movs	r2, #32
 801745a:	4013      	ands	r3, r2
 801745c:	d00f      	beq.n	801747e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801745e:	183b      	adds	r3, r7, r0
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	2220      	movs	r2, #32
 8017464:	4013      	ands	r3, r2
 8017466:	d00a      	beq.n	801747e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801746c:	2b00      	cmp	r3, #0
 801746e:	d100      	bne.n	8017472 <HAL_UART_IRQHandler+0x62>
 8017470:	e2aa      	b.n	80179c8 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017476:	687a      	ldr	r2, [r7, #4]
 8017478:	0010      	movs	r0, r2
 801747a:	4798      	blx	r3
      }
      return;
 801747c:	e2a4      	b.n	80179c8 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801747e:	2398      	movs	r3, #152	@ 0x98
 8017480:	18fb      	adds	r3, r7, r3
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d100      	bne.n	801748a <HAL_UART_IRQHandler+0x7a>
 8017488:	e11a      	b.n	80176c0 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801748a:	239c      	movs	r3, #156	@ 0x9c
 801748c:	18fb      	adds	r3, r7, r3
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	2201      	movs	r2, #1
 8017492:	4013      	ands	r3, r2
 8017494:	d106      	bne.n	80174a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8017496:	23a0      	movs	r3, #160	@ 0xa0
 8017498:	18fb      	adds	r3, r7, r3
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	4a86      	ldr	r2, [pc, #536]	@ (80176b8 <HAL_UART_IRQHandler+0x2a8>)
 801749e:	4013      	ands	r3, r2
 80174a0:	d100      	bne.n	80174a4 <HAL_UART_IRQHandler+0x94>
 80174a2:	e10d      	b.n	80176c0 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80174a4:	23a4      	movs	r3, #164	@ 0xa4
 80174a6:	18fb      	adds	r3, r7, r3
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	2201      	movs	r2, #1
 80174ac:	4013      	ands	r3, r2
 80174ae:	d012      	beq.n	80174d6 <HAL_UART_IRQHandler+0xc6>
 80174b0:	23a0      	movs	r3, #160	@ 0xa0
 80174b2:	18fb      	adds	r3, r7, r3
 80174b4:	681a      	ldr	r2, [r3, #0]
 80174b6:	2380      	movs	r3, #128	@ 0x80
 80174b8:	005b      	lsls	r3, r3, #1
 80174ba:	4013      	ands	r3, r2
 80174bc:	d00b      	beq.n	80174d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	2201      	movs	r2, #1
 80174c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	2284      	movs	r2, #132	@ 0x84
 80174ca:	589b      	ldr	r3, [r3, r2]
 80174cc:	2201      	movs	r2, #1
 80174ce:	431a      	orrs	r2, r3
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2184      	movs	r1, #132	@ 0x84
 80174d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80174d6:	23a4      	movs	r3, #164	@ 0xa4
 80174d8:	18fb      	adds	r3, r7, r3
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	2202      	movs	r2, #2
 80174de:	4013      	ands	r3, r2
 80174e0:	d011      	beq.n	8017506 <HAL_UART_IRQHandler+0xf6>
 80174e2:	239c      	movs	r3, #156	@ 0x9c
 80174e4:	18fb      	adds	r3, r7, r3
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	2201      	movs	r2, #1
 80174ea:	4013      	ands	r3, r2
 80174ec:	d00b      	beq.n	8017506 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	2202      	movs	r2, #2
 80174f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	2284      	movs	r2, #132	@ 0x84
 80174fa:	589b      	ldr	r3, [r3, r2]
 80174fc:	2204      	movs	r2, #4
 80174fe:	431a      	orrs	r2, r3
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2184      	movs	r1, #132	@ 0x84
 8017504:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017506:	23a4      	movs	r3, #164	@ 0xa4
 8017508:	18fb      	adds	r3, r7, r3
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	2204      	movs	r2, #4
 801750e:	4013      	ands	r3, r2
 8017510:	d011      	beq.n	8017536 <HAL_UART_IRQHandler+0x126>
 8017512:	239c      	movs	r3, #156	@ 0x9c
 8017514:	18fb      	adds	r3, r7, r3
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	2201      	movs	r2, #1
 801751a:	4013      	ands	r3, r2
 801751c:	d00b      	beq.n	8017536 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	2204      	movs	r2, #4
 8017524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	2284      	movs	r2, #132	@ 0x84
 801752a:	589b      	ldr	r3, [r3, r2]
 801752c:	2202      	movs	r2, #2
 801752e:	431a      	orrs	r2, r3
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2184      	movs	r1, #132	@ 0x84
 8017534:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017536:	23a4      	movs	r3, #164	@ 0xa4
 8017538:	18fb      	adds	r3, r7, r3
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	2208      	movs	r2, #8
 801753e:	4013      	ands	r3, r2
 8017540:	d017      	beq.n	8017572 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017542:	23a0      	movs	r3, #160	@ 0xa0
 8017544:	18fb      	adds	r3, r7, r3
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	2220      	movs	r2, #32
 801754a:	4013      	ands	r3, r2
 801754c:	d105      	bne.n	801755a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801754e:	239c      	movs	r3, #156	@ 0x9c
 8017550:	18fb      	adds	r3, r7, r3
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	2201      	movs	r2, #1
 8017556:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017558:	d00b      	beq.n	8017572 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	2208      	movs	r2, #8
 8017560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	2284      	movs	r2, #132	@ 0x84
 8017566:	589b      	ldr	r3, [r3, r2]
 8017568:	2208      	movs	r2, #8
 801756a:	431a      	orrs	r2, r3
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	2184      	movs	r1, #132	@ 0x84
 8017570:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017572:	23a4      	movs	r3, #164	@ 0xa4
 8017574:	18fb      	adds	r3, r7, r3
 8017576:	681a      	ldr	r2, [r3, #0]
 8017578:	2380      	movs	r3, #128	@ 0x80
 801757a:	011b      	lsls	r3, r3, #4
 801757c:	4013      	ands	r3, r2
 801757e:	d013      	beq.n	80175a8 <HAL_UART_IRQHandler+0x198>
 8017580:	23a0      	movs	r3, #160	@ 0xa0
 8017582:	18fb      	adds	r3, r7, r3
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	2380      	movs	r3, #128	@ 0x80
 8017588:	04db      	lsls	r3, r3, #19
 801758a:	4013      	ands	r3, r2
 801758c:	d00c      	beq.n	80175a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	2280      	movs	r2, #128	@ 0x80
 8017594:	0112      	lsls	r2, r2, #4
 8017596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	2284      	movs	r2, #132	@ 0x84
 801759c:	589b      	ldr	r3, [r3, r2]
 801759e:	2220      	movs	r2, #32
 80175a0:	431a      	orrs	r2, r3
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	2184      	movs	r1, #132	@ 0x84
 80175a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	2284      	movs	r2, #132	@ 0x84
 80175ac:	589b      	ldr	r3, [r3, r2]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d100      	bne.n	80175b4 <HAL_UART_IRQHandler+0x1a4>
 80175b2:	e20b      	b.n	80179cc <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80175b4:	23a4      	movs	r3, #164	@ 0xa4
 80175b6:	18fb      	adds	r3, r7, r3
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	2220      	movs	r2, #32
 80175bc:	4013      	ands	r3, r2
 80175be:	d00e      	beq.n	80175de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80175c0:	23a0      	movs	r3, #160	@ 0xa0
 80175c2:	18fb      	adds	r3, r7, r3
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	2220      	movs	r2, #32
 80175c8:	4013      	ands	r3, r2
 80175ca:	d008      	beq.n	80175de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d004      	beq.n	80175de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80175d8:	687a      	ldr	r2, [r7, #4]
 80175da:	0010      	movs	r0, r2
 80175dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	2284      	movs	r2, #132	@ 0x84
 80175e2:	589b      	ldr	r3, [r3, r2]
 80175e4:	2194      	movs	r1, #148	@ 0x94
 80175e6:	187a      	adds	r2, r7, r1
 80175e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	689b      	ldr	r3, [r3, #8]
 80175f0:	2240      	movs	r2, #64	@ 0x40
 80175f2:	4013      	ands	r3, r2
 80175f4:	2b40      	cmp	r3, #64	@ 0x40
 80175f6:	d004      	beq.n	8017602 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80175f8:	187b      	adds	r3, r7, r1
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	2228      	movs	r2, #40	@ 0x28
 80175fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017600:	d04b      	beq.n	801769a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	0018      	movs	r0, r3
 8017606:	f001 f861 	bl	80186cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	689b      	ldr	r3, [r3, #8]
 8017610:	2240      	movs	r2, #64	@ 0x40
 8017612:	4013      	ands	r3, r2
 8017614:	2b40      	cmp	r3, #64	@ 0x40
 8017616:	d139      	bne.n	801768c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017618:	f3ef 8310 	mrs	r3, PRIMASK
 801761c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801761e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017620:	2090      	movs	r0, #144	@ 0x90
 8017622:	183a      	adds	r2, r7, r0
 8017624:	6013      	str	r3, [r2, #0]
 8017626:	2301      	movs	r3, #1
 8017628:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801762a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801762c:	f383 8810 	msr	PRIMASK, r3
}
 8017630:	46c0      	nop			@ (mov r8, r8)
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	689a      	ldr	r2, [r3, #8]
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	2140      	movs	r1, #64	@ 0x40
 801763e:	438a      	bics	r2, r1
 8017640:	609a      	str	r2, [r3, #8]
 8017642:	183b      	adds	r3, r7, r0
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801764a:	f383 8810 	msr	PRIMASK, r3
}
 801764e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017654:	2b00      	cmp	r3, #0
 8017656:	d012      	beq.n	801767e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801765c:	4a17      	ldr	r2, [pc, #92]	@ (80176bc <HAL_UART_IRQHandler+0x2ac>)
 801765e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017664:	0018      	movs	r0, r3
 8017666:	f7f8 f8b3 	bl	800f7d0 <HAL_DMA_Abort_IT>
 801766a:	1e03      	subs	r3, r0, #0
 801766c:	d020      	beq.n	80176b0 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017678:	0018      	movs	r0, r3
 801767a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801767c:	e018      	b.n	80176b0 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	2298      	movs	r2, #152	@ 0x98
 8017682:	589b      	ldr	r3, [r3, r2]
 8017684:	687a      	ldr	r2, [r7, #4]
 8017686:	0010      	movs	r0, r2
 8017688:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801768a:	e011      	b.n	80176b0 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2298      	movs	r2, #152	@ 0x98
 8017690:	589b      	ldr	r3, [r3, r2]
 8017692:	687a      	ldr	r2, [r7, #4]
 8017694:	0010      	movs	r0, r2
 8017696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017698:	e00a      	b.n	80176b0 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	2298      	movs	r2, #152	@ 0x98
 801769e:	589b      	ldr	r3, [r3, r2]
 80176a0:	687a      	ldr	r2, [r7, #4]
 80176a2:	0010      	movs	r0, r2
 80176a4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2284      	movs	r2, #132	@ 0x84
 80176aa:	2100      	movs	r1, #0
 80176ac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80176ae:	e18d      	b.n	80179cc <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80176b0:	46c0      	nop			@ (mov r8, r8)
    return;
 80176b2:	e18b      	b.n	80179cc <HAL_UART_IRQHandler+0x5bc>
 80176b4:	0000080f 	.word	0x0000080f
 80176b8:	04000120 	.word	0x04000120
 80176bc:	08018a59 	.word	0x08018a59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80176c4:	2b01      	cmp	r3, #1
 80176c6:	d000      	beq.n	80176ca <HAL_UART_IRQHandler+0x2ba>
 80176c8:	e13d      	b.n	8017946 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80176ca:	23a4      	movs	r3, #164	@ 0xa4
 80176cc:	18fb      	adds	r3, r7, r3
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	2210      	movs	r2, #16
 80176d2:	4013      	ands	r3, r2
 80176d4:	d100      	bne.n	80176d8 <HAL_UART_IRQHandler+0x2c8>
 80176d6:	e136      	b.n	8017946 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80176d8:	23a0      	movs	r3, #160	@ 0xa0
 80176da:	18fb      	adds	r3, r7, r3
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	2210      	movs	r2, #16
 80176e0:	4013      	ands	r3, r2
 80176e2:	d100      	bne.n	80176e6 <HAL_UART_IRQHandler+0x2d6>
 80176e4:	e12f      	b.n	8017946 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	2210      	movs	r2, #16
 80176ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	689b      	ldr	r3, [r3, #8]
 80176f4:	2240      	movs	r2, #64	@ 0x40
 80176f6:	4013      	ands	r3, r2
 80176f8:	2b40      	cmp	r3, #64	@ 0x40
 80176fa:	d000      	beq.n	80176fe <HAL_UART_IRQHandler+0x2ee>
 80176fc:	e0a2      	b.n	8017844 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	685a      	ldr	r2, [r3, #4]
 8017706:	217e      	movs	r1, #126	@ 0x7e
 8017708:	187b      	adds	r3, r7, r1
 801770a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801770c:	187b      	adds	r3, r7, r1
 801770e:	881b      	ldrh	r3, [r3, #0]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d100      	bne.n	8017716 <HAL_UART_IRQHandler+0x306>
 8017714:	e15c      	b.n	80179d0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	2258      	movs	r2, #88	@ 0x58
 801771a:	5a9b      	ldrh	r3, [r3, r2]
 801771c:	187a      	adds	r2, r7, r1
 801771e:	8812      	ldrh	r2, [r2, #0]
 8017720:	429a      	cmp	r2, r3
 8017722:	d300      	bcc.n	8017726 <HAL_UART_IRQHandler+0x316>
 8017724:	e154      	b.n	80179d0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	187a      	adds	r2, r7, r1
 801772a:	215a      	movs	r1, #90	@ 0x5a
 801772c:	8812      	ldrh	r2, [r2, #0]
 801772e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	2220      	movs	r2, #32
 801773a:	4013      	ands	r3, r2
 801773c:	d16f      	bne.n	801781e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801773e:	f3ef 8310 	mrs	r3, PRIMASK
 8017742:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017746:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017748:	2301      	movs	r3, #1
 801774a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801774c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801774e:	f383 8810 	msr	PRIMASK, r3
}
 8017752:	46c0      	nop			@ (mov r8, r8)
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	681a      	ldr	r2, [r3, #0]
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	49a0      	ldr	r1, [pc, #640]	@ (80179e0 <HAL_UART_IRQHandler+0x5d0>)
 8017760:	400a      	ands	r2, r1
 8017762:	601a      	str	r2, [r3, #0]
 8017764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017766:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801776a:	f383 8810 	msr	PRIMASK, r3
}
 801776e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017770:	f3ef 8310 	mrs	r3, PRIMASK
 8017774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8017776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017778:	677b      	str	r3, [r7, #116]	@ 0x74
 801777a:	2301      	movs	r3, #1
 801777c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801777e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017780:	f383 8810 	msr	PRIMASK, r3
}
 8017784:	46c0      	nop			@ (mov r8, r8)
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	689a      	ldr	r2, [r3, #8]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	2101      	movs	r1, #1
 8017792:	438a      	bics	r2, r1
 8017794:	609a      	str	r2, [r3, #8]
 8017796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017798:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801779a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801779c:	f383 8810 	msr	PRIMASK, r3
}
 80177a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80177a2:	f3ef 8310 	mrs	r3, PRIMASK
 80177a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80177a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80177aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80177ac:	2301      	movs	r3, #1
 80177ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177b2:	f383 8810 	msr	PRIMASK, r3
}
 80177b6:	46c0      	nop			@ (mov r8, r8)
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	689a      	ldr	r2, [r3, #8]
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	2140      	movs	r1, #64	@ 0x40
 80177c4:	438a      	bics	r2, r1
 80177c6:	609a      	str	r2, [r3, #8]
 80177c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80177ca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80177ce:	f383 8810 	msr	PRIMASK, r3
}
 80177d2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	2280      	movs	r2, #128	@ 0x80
 80177d8:	2120      	movs	r1, #32
 80177da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	2200      	movs	r2, #0
 80177e0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80177e2:	f3ef 8310 	mrs	r3, PRIMASK
 80177e6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80177e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80177ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80177ec:	2301      	movs	r3, #1
 80177ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80177f2:	f383 8810 	msr	PRIMASK, r3
}
 80177f6:	46c0      	nop			@ (mov r8, r8)
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	681a      	ldr	r2, [r3, #0]
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	2110      	movs	r1, #16
 8017804:	438a      	bics	r2, r1
 8017806:	601a      	str	r2, [r3, #0]
 8017808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801780a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801780c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801780e:	f383 8810 	msr	PRIMASK, r3
}
 8017812:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017818:	0018      	movs	r0, r3
 801781a:	f7f7 ff99 	bl	800f750 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	2202      	movs	r2, #2
 8017822:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	22ac      	movs	r2, #172	@ 0xac
 8017828:	589b      	ldr	r3, [r3, r2]
 801782a:	687a      	ldr	r2, [r7, #4]
 801782c:	2158      	movs	r1, #88	@ 0x58
 801782e:	5a51      	ldrh	r1, [r2, r1]
 8017830:	687a      	ldr	r2, [r7, #4]
 8017832:	205a      	movs	r0, #90	@ 0x5a
 8017834:	5a12      	ldrh	r2, [r2, r0]
 8017836:	b292      	uxth	r2, r2
 8017838:	1a8a      	subs	r2, r1, r2
 801783a:	b291      	uxth	r1, r2
 801783c:	687a      	ldr	r2, [r7, #4]
 801783e:	0010      	movs	r0, r2
 8017840:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017842:	e0c5      	b.n	80179d0 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	2258      	movs	r2, #88	@ 0x58
 8017848:	5a99      	ldrh	r1, [r3, r2]
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	225a      	movs	r2, #90	@ 0x5a
 801784e:	5a9b      	ldrh	r3, [r3, r2]
 8017850:	b29a      	uxth	r2, r3
 8017852:	208e      	movs	r0, #142	@ 0x8e
 8017854:	183b      	adds	r3, r7, r0
 8017856:	1a8a      	subs	r2, r1, r2
 8017858:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	225a      	movs	r2, #90	@ 0x5a
 801785e:	5a9b      	ldrh	r3, [r3, r2]
 8017860:	b29b      	uxth	r3, r3
 8017862:	2b00      	cmp	r3, #0
 8017864:	d100      	bne.n	8017868 <HAL_UART_IRQHandler+0x458>
 8017866:	e0b5      	b.n	80179d4 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8017868:	183b      	adds	r3, r7, r0
 801786a:	881b      	ldrh	r3, [r3, #0]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d100      	bne.n	8017872 <HAL_UART_IRQHandler+0x462>
 8017870:	e0b0      	b.n	80179d4 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017872:	f3ef 8310 	mrs	r3, PRIMASK
 8017876:	60fb      	str	r3, [r7, #12]
  return(result);
 8017878:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801787a:	2488      	movs	r4, #136	@ 0x88
 801787c:	193a      	adds	r2, r7, r4
 801787e:	6013      	str	r3, [r2, #0]
 8017880:	2301      	movs	r3, #1
 8017882:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017884:	693b      	ldr	r3, [r7, #16]
 8017886:	f383 8810 	msr	PRIMASK, r3
}
 801788a:	46c0      	nop			@ (mov r8, r8)
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	681a      	ldr	r2, [r3, #0]
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	4953      	ldr	r1, [pc, #332]	@ (80179e4 <HAL_UART_IRQHandler+0x5d4>)
 8017898:	400a      	ands	r2, r1
 801789a:	601a      	str	r2, [r3, #0]
 801789c:	193b      	adds	r3, r7, r4
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178a2:	697b      	ldr	r3, [r7, #20]
 80178a4:	f383 8810 	msr	PRIMASK, r3
}
 80178a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178aa:	f3ef 8310 	mrs	r3, PRIMASK
 80178ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80178b0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80178b2:	2484      	movs	r4, #132	@ 0x84
 80178b4:	193a      	adds	r2, r7, r4
 80178b6:	6013      	str	r3, [r2, #0]
 80178b8:	2301      	movs	r3, #1
 80178ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178bc:	69fb      	ldr	r3, [r7, #28]
 80178be:	f383 8810 	msr	PRIMASK, r3
}
 80178c2:	46c0      	nop			@ (mov r8, r8)
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	689a      	ldr	r2, [r3, #8]
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	2101      	movs	r1, #1
 80178d0:	438a      	bics	r2, r1
 80178d2:	609a      	str	r2, [r3, #8]
 80178d4:	193b      	adds	r3, r7, r4
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178da:	6a3b      	ldr	r3, [r7, #32]
 80178dc:	f383 8810 	msr	PRIMASK, r3
}
 80178e0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	2280      	movs	r2, #128	@ 0x80
 80178e6:	2120      	movs	r1, #32
 80178e8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	2200      	movs	r2, #0
 80178ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2200      	movs	r2, #0
 80178f4:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178f6:	f3ef 8310 	mrs	r3, PRIMASK
 80178fa:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80178fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80178fe:	2480      	movs	r4, #128	@ 0x80
 8017900:	193a      	adds	r2, r7, r4
 8017902:	6013      	str	r3, [r2, #0]
 8017904:	2301      	movs	r3, #1
 8017906:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801790a:	f383 8810 	msr	PRIMASK, r3
}
 801790e:	46c0      	nop			@ (mov r8, r8)
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	681a      	ldr	r2, [r3, #0]
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	2110      	movs	r1, #16
 801791c:	438a      	bics	r2, r1
 801791e:	601a      	str	r2, [r3, #0]
 8017920:	193b      	adds	r3, r7, r4
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017928:	f383 8810 	msr	PRIMASK, r3
}
 801792c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	2202      	movs	r2, #2
 8017932:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	22ac      	movs	r2, #172	@ 0xac
 8017938:	589b      	ldr	r3, [r3, r2]
 801793a:	183a      	adds	r2, r7, r0
 801793c:	8811      	ldrh	r1, [r2, #0]
 801793e:	687a      	ldr	r2, [r7, #4]
 8017940:	0010      	movs	r0, r2
 8017942:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017944:	e046      	b.n	80179d4 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017946:	23a4      	movs	r3, #164	@ 0xa4
 8017948:	18fb      	adds	r3, r7, r3
 801794a:	681a      	ldr	r2, [r3, #0]
 801794c:	2380      	movs	r3, #128	@ 0x80
 801794e:	035b      	lsls	r3, r3, #13
 8017950:	4013      	ands	r3, r2
 8017952:	d012      	beq.n	801797a <HAL_UART_IRQHandler+0x56a>
 8017954:	239c      	movs	r3, #156	@ 0x9c
 8017956:	18fb      	adds	r3, r7, r3
 8017958:	681a      	ldr	r2, [r3, #0]
 801795a:	2380      	movs	r3, #128	@ 0x80
 801795c:	03db      	lsls	r3, r3, #15
 801795e:	4013      	ands	r3, r2
 8017960:	d00b      	beq.n	801797a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	2280      	movs	r2, #128	@ 0x80
 8017968:	0352      	lsls	r2, r2, #13
 801796a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	22a8      	movs	r2, #168	@ 0xa8
 8017970:	589b      	ldr	r3, [r3, r2]
 8017972:	687a      	ldr	r2, [r7, #4]
 8017974:	0010      	movs	r0, r2
 8017976:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017978:	e02f      	b.n	80179da <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801797a:	23a4      	movs	r3, #164	@ 0xa4
 801797c:	18fb      	adds	r3, r7, r3
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	2280      	movs	r2, #128	@ 0x80
 8017982:	4013      	ands	r3, r2
 8017984:	d00f      	beq.n	80179a6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017986:	23a0      	movs	r3, #160	@ 0xa0
 8017988:	18fb      	adds	r3, r7, r3
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	2280      	movs	r2, #128	@ 0x80
 801798e:	4013      	ands	r3, r2
 8017990:	d009      	beq.n	80179a6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017996:	2b00      	cmp	r3, #0
 8017998:	d01e      	beq.n	80179d8 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801799e:	687a      	ldr	r2, [r7, #4]
 80179a0:	0010      	movs	r0, r2
 80179a2:	4798      	blx	r3
    }
    return;
 80179a4:	e018      	b.n	80179d8 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80179a6:	23a4      	movs	r3, #164	@ 0xa4
 80179a8:	18fb      	adds	r3, r7, r3
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	2240      	movs	r2, #64	@ 0x40
 80179ae:	4013      	ands	r3, r2
 80179b0:	d013      	beq.n	80179da <HAL_UART_IRQHandler+0x5ca>
 80179b2:	23a0      	movs	r3, #160	@ 0xa0
 80179b4:	18fb      	adds	r3, r7, r3
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	2240      	movs	r2, #64	@ 0x40
 80179ba:	4013      	ands	r3, r2
 80179bc:	d00d      	beq.n	80179da <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	0018      	movs	r0, r3
 80179c2:	f001 f862 	bl	8018a8a <UART_EndTransmit_IT>
    return;
 80179c6:	e008      	b.n	80179da <HAL_UART_IRQHandler+0x5ca>
      return;
 80179c8:	46c0      	nop			@ (mov r8, r8)
 80179ca:	e006      	b.n	80179da <HAL_UART_IRQHandler+0x5ca>
    return;
 80179cc:	46c0      	nop			@ (mov r8, r8)
 80179ce:	e004      	b.n	80179da <HAL_UART_IRQHandler+0x5ca>
      return;
 80179d0:	46c0      	nop			@ (mov r8, r8)
 80179d2:	e002      	b.n	80179da <HAL_UART_IRQHandler+0x5ca>
      return;
 80179d4:	46c0      	nop			@ (mov r8, r8)
 80179d6:	e000      	b.n	80179da <HAL_UART_IRQHandler+0x5ca>
    return;
 80179d8:	46c0      	nop			@ (mov r8, r8)
  }

}
 80179da:	46bd      	mov	sp, r7
 80179dc:	b02b      	add	sp, #172	@ 0xac
 80179de:	bd90      	pop	{r4, r7, pc}
 80179e0:	fffffeff 	.word	0xfffffeff
 80179e4:	fffffedf 	.word	0xfffffedf

080179e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b082      	sub	sp, #8
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80179f0:	46c0      	nop			@ (mov r8, r8)
 80179f2:	46bd      	mov	sp, r7
 80179f4:	b002      	add	sp, #8
 80179f6:	bd80      	pop	{r7, pc}

080179f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b082      	sub	sp, #8
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8017a00:	46c0      	nop			@ (mov r8, r8)
 8017a02:	46bd      	mov	sp, r7
 8017a04:	b002      	add	sp, #8
 8017a06:	bd80      	pop	{r7, pc}

08017a08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b082      	sub	sp, #8
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017a10:	46c0      	nop			@ (mov r8, r8)
 8017a12:	46bd      	mov	sp, r7
 8017a14:	b002      	add	sp, #8
 8017a16:	bd80      	pop	{r7, pc}

08017a18 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b082      	sub	sp, #8
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017a20:	46c0      	nop			@ (mov r8, r8)
 8017a22:	46bd      	mov	sp, r7
 8017a24:	b002      	add	sp, #8
 8017a26:	bd80      	pop	{r7, pc}

08017a28 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b082      	sub	sp, #8
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017a30:	46c0      	nop			@ (mov r8, r8)
 8017a32:	46bd      	mov	sp, r7
 8017a34:	b002      	add	sp, #8
 8017a36:	bd80      	pop	{r7, pc}

08017a38 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b082      	sub	sp, #8
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017a40:	46c0      	nop			@ (mov r8, r8)
 8017a42:	46bd      	mov	sp, r7
 8017a44:	b002      	add	sp, #8
 8017a46:	bd80      	pop	{r7, pc}

08017a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b082      	sub	sp, #8
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
 8017a50:	000a      	movs	r2, r1
 8017a52:	1cbb      	adds	r3, r7, #2
 8017a54:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017a56:	46c0      	nop			@ (mov r8, r8)
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	b002      	add	sp, #8
 8017a5c:	bd80      	pop	{r7, pc}
	...

08017a60 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2188      	movs	r1, #136	@ 0x88
 8017a6c:	4a14      	ldr	r2, [pc, #80]	@ (8017ac0 <UART_InitCallbacksToDefault+0x60>)
 8017a6e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	218c      	movs	r1, #140	@ 0x8c
 8017a74:	4a13      	ldr	r2, [pc, #76]	@ (8017ac4 <UART_InitCallbacksToDefault+0x64>)
 8017a76:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	2190      	movs	r1, #144	@ 0x90
 8017a7c:	4a12      	ldr	r2, [pc, #72]	@ (8017ac8 <UART_InitCallbacksToDefault+0x68>)
 8017a7e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2194      	movs	r1, #148	@ 0x94
 8017a84:	4a11      	ldr	r2, [pc, #68]	@ (8017acc <UART_InitCallbacksToDefault+0x6c>)
 8017a86:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2198      	movs	r1, #152	@ 0x98
 8017a8c:	4a10      	ldr	r2, [pc, #64]	@ (8017ad0 <UART_InitCallbacksToDefault+0x70>)
 8017a8e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	219c      	movs	r1, #156	@ 0x9c
 8017a94:	4a0f      	ldr	r2, [pc, #60]	@ (8017ad4 <UART_InitCallbacksToDefault+0x74>)
 8017a96:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	21a0      	movs	r1, #160	@ 0xa0
 8017a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8017ad8 <UART_InitCallbacksToDefault+0x78>)
 8017a9e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	21a4      	movs	r1, #164	@ 0xa4
 8017aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8017adc <UART_InitCallbacksToDefault+0x7c>)
 8017aa6:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	21a8      	movs	r1, #168	@ 0xa8
 8017aac:	4a0c      	ldr	r2, [pc, #48]	@ (8017ae0 <UART_InitCallbacksToDefault+0x80>)
 8017aae:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	21ac      	movs	r1, #172	@ 0xac
 8017ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8017ae4 <UART_InitCallbacksToDefault+0x84>)
 8017ab6:	505a      	str	r2, [r3, r1]

}
 8017ab8:	46c0      	nop			@ (mov r8, r8)
 8017aba:	46bd      	mov	sp, r7
 8017abc:	b002      	add	sp, #8
 8017abe:	bd80      	pop	{r7, pc}
 8017ac0:	080179f9 	.word	0x080179f9
 8017ac4:	080179e9 	.word	0x080179e9
 8017ac8:	08017a09 	.word	0x08017a09
 8017acc:	08008141 	.word	0x08008141
 8017ad0:	08003cf9 	.word	0x08003cf9
 8017ad4:	08017a19 	.word	0x08017a19
 8017ad8:	08017a29 	.word	0x08017a29
 8017adc:	08017a39 	.word	0x08017a39
 8017ae0:	08018e7d 	.word	0x08018e7d
 8017ae4:	08017a49 	.word	0x08017a49

08017ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017ae8:	b5b0      	push	{r4, r5, r7, lr}
 8017aea:	b08e      	sub	sp, #56	@ 0x38
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017af0:	231a      	movs	r3, #26
 8017af2:	2218      	movs	r2, #24
 8017af4:	189b      	adds	r3, r3, r2
 8017af6:	19db      	adds	r3, r3, r7
 8017af8:	2200      	movs	r2, #0
 8017afa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017afc:	69fb      	ldr	r3, [r7, #28]
 8017afe:	689a      	ldr	r2, [r3, #8]
 8017b00:	69fb      	ldr	r3, [r7, #28]
 8017b02:	691b      	ldr	r3, [r3, #16]
 8017b04:	431a      	orrs	r2, r3
 8017b06:	69fb      	ldr	r3, [r7, #28]
 8017b08:	695b      	ldr	r3, [r3, #20]
 8017b0a:	431a      	orrs	r2, r3
 8017b0c:	69fb      	ldr	r3, [r7, #28]
 8017b0e:	69db      	ldr	r3, [r3, #28]
 8017b10:	4313      	orrs	r3, r2
 8017b12:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017b14:	69fb      	ldr	r3, [r7, #28]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	4ac3      	ldr	r2, [pc, #780]	@ (8017e28 <UART_SetConfig+0x340>)
 8017b1c:	4013      	ands	r3, r2
 8017b1e:	0019      	movs	r1, r3
 8017b20:	69fb      	ldr	r3, [r7, #28]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017b26:	430a      	orrs	r2, r1
 8017b28:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017b2a:	69fb      	ldr	r3, [r7, #28]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	685b      	ldr	r3, [r3, #4]
 8017b30:	4abe      	ldr	r2, [pc, #760]	@ (8017e2c <UART_SetConfig+0x344>)
 8017b32:	4013      	ands	r3, r2
 8017b34:	0019      	movs	r1, r3
 8017b36:	69fb      	ldr	r3, [r7, #28]
 8017b38:	68da      	ldr	r2, [r3, #12]
 8017b3a:	69fb      	ldr	r3, [r7, #28]
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	430a      	orrs	r2, r1
 8017b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017b42:	69fb      	ldr	r3, [r7, #28]
 8017b44:	699b      	ldr	r3, [r3, #24]
 8017b46:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017b48:	69fb      	ldr	r3, [r7, #28]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	4ab8      	ldr	r2, [pc, #736]	@ (8017e30 <UART_SetConfig+0x348>)
 8017b4e:	4293      	cmp	r3, r2
 8017b50:	d004      	beq.n	8017b5c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017b52:	69fb      	ldr	r3, [r7, #28]
 8017b54:	6a1b      	ldr	r3, [r3, #32]
 8017b56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017b58:	4313      	orrs	r3, r2
 8017b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017b5c:	69fb      	ldr	r3, [r7, #28]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	689b      	ldr	r3, [r3, #8]
 8017b62:	4ab4      	ldr	r2, [pc, #720]	@ (8017e34 <UART_SetConfig+0x34c>)
 8017b64:	4013      	ands	r3, r2
 8017b66:	0019      	movs	r1, r3
 8017b68:	69fb      	ldr	r3, [r7, #28]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017b6e:	430a      	orrs	r2, r1
 8017b70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017b72:	69fb      	ldr	r3, [r7, #28]
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	4ab0      	ldr	r2, [pc, #704]	@ (8017e38 <UART_SetConfig+0x350>)
 8017b78:	4293      	cmp	r3, r2
 8017b7a:	d131      	bne.n	8017be0 <UART_SetConfig+0xf8>
 8017b7c:	4baf      	ldr	r3, [pc, #700]	@ (8017e3c <UART_SetConfig+0x354>)
 8017b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017b80:	2203      	movs	r2, #3
 8017b82:	4013      	ands	r3, r2
 8017b84:	2b03      	cmp	r3, #3
 8017b86:	d01d      	beq.n	8017bc4 <UART_SetConfig+0xdc>
 8017b88:	d823      	bhi.n	8017bd2 <UART_SetConfig+0xea>
 8017b8a:	2b02      	cmp	r3, #2
 8017b8c:	d00c      	beq.n	8017ba8 <UART_SetConfig+0xc0>
 8017b8e:	d820      	bhi.n	8017bd2 <UART_SetConfig+0xea>
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d002      	beq.n	8017b9a <UART_SetConfig+0xb2>
 8017b94:	2b01      	cmp	r3, #1
 8017b96:	d00e      	beq.n	8017bb6 <UART_SetConfig+0xce>
 8017b98:	e01b      	b.n	8017bd2 <UART_SetConfig+0xea>
 8017b9a:	231b      	movs	r3, #27
 8017b9c:	2218      	movs	r2, #24
 8017b9e:	189b      	adds	r3, r3, r2
 8017ba0:	19db      	adds	r3, r3, r7
 8017ba2:	2201      	movs	r2, #1
 8017ba4:	701a      	strb	r2, [r3, #0]
 8017ba6:	e0b4      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017ba8:	231b      	movs	r3, #27
 8017baa:	2218      	movs	r2, #24
 8017bac:	189b      	adds	r3, r3, r2
 8017bae:	19db      	adds	r3, r3, r7
 8017bb0:	2202      	movs	r2, #2
 8017bb2:	701a      	strb	r2, [r3, #0]
 8017bb4:	e0ad      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017bb6:	231b      	movs	r3, #27
 8017bb8:	2218      	movs	r2, #24
 8017bba:	189b      	adds	r3, r3, r2
 8017bbc:	19db      	adds	r3, r3, r7
 8017bbe:	2204      	movs	r2, #4
 8017bc0:	701a      	strb	r2, [r3, #0]
 8017bc2:	e0a6      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017bc4:	231b      	movs	r3, #27
 8017bc6:	2218      	movs	r2, #24
 8017bc8:	189b      	adds	r3, r3, r2
 8017bca:	19db      	adds	r3, r3, r7
 8017bcc:	2208      	movs	r2, #8
 8017bce:	701a      	strb	r2, [r3, #0]
 8017bd0:	e09f      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017bd2:	231b      	movs	r3, #27
 8017bd4:	2218      	movs	r2, #24
 8017bd6:	189b      	adds	r3, r3, r2
 8017bd8:	19db      	adds	r3, r3, r7
 8017bda:	2210      	movs	r2, #16
 8017bdc:	701a      	strb	r2, [r3, #0]
 8017bde:	e098      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017be0:	69fb      	ldr	r3, [r7, #28]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	4a96      	ldr	r2, [pc, #600]	@ (8017e40 <UART_SetConfig+0x358>)
 8017be6:	4293      	cmp	r3, r2
 8017be8:	d131      	bne.n	8017c4e <UART_SetConfig+0x166>
 8017bea:	4b94      	ldr	r3, [pc, #592]	@ (8017e3c <UART_SetConfig+0x354>)
 8017bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017bee:	220c      	movs	r2, #12
 8017bf0:	4013      	ands	r3, r2
 8017bf2:	2b0c      	cmp	r3, #12
 8017bf4:	d01d      	beq.n	8017c32 <UART_SetConfig+0x14a>
 8017bf6:	d823      	bhi.n	8017c40 <UART_SetConfig+0x158>
 8017bf8:	2b08      	cmp	r3, #8
 8017bfa:	d00c      	beq.n	8017c16 <UART_SetConfig+0x12e>
 8017bfc:	d820      	bhi.n	8017c40 <UART_SetConfig+0x158>
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d002      	beq.n	8017c08 <UART_SetConfig+0x120>
 8017c02:	2b04      	cmp	r3, #4
 8017c04:	d00e      	beq.n	8017c24 <UART_SetConfig+0x13c>
 8017c06:	e01b      	b.n	8017c40 <UART_SetConfig+0x158>
 8017c08:	231b      	movs	r3, #27
 8017c0a:	2218      	movs	r2, #24
 8017c0c:	189b      	adds	r3, r3, r2
 8017c0e:	19db      	adds	r3, r3, r7
 8017c10:	2200      	movs	r2, #0
 8017c12:	701a      	strb	r2, [r3, #0]
 8017c14:	e07d      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017c16:	231b      	movs	r3, #27
 8017c18:	2218      	movs	r2, #24
 8017c1a:	189b      	adds	r3, r3, r2
 8017c1c:	19db      	adds	r3, r3, r7
 8017c1e:	2202      	movs	r2, #2
 8017c20:	701a      	strb	r2, [r3, #0]
 8017c22:	e076      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017c24:	231b      	movs	r3, #27
 8017c26:	2218      	movs	r2, #24
 8017c28:	189b      	adds	r3, r3, r2
 8017c2a:	19db      	adds	r3, r3, r7
 8017c2c:	2204      	movs	r2, #4
 8017c2e:	701a      	strb	r2, [r3, #0]
 8017c30:	e06f      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017c32:	231b      	movs	r3, #27
 8017c34:	2218      	movs	r2, #24
 8017c36:	189b      	adds	r3, r3, r2
 8017c38:	19db      	adds	r3, r3, r7
 8017c3a:	2208      	movs	r2, #8
 8017c3c:	701a      	strb	r2, [r3, #0]
 8017c3e:	e068      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017c40:	231b      	movs	r3, #27
 8017c42:	2218      	movs	r2, #24
 8017c44:	189b      	adds	r3, r3, r2
 8017c46:	19db      	adds	r3, r3, r7
 8017c48:	2210      	movs	r2, #16
 8017c4a:	701a      	strb	r2, [r3, #0]
 8017c4c:	e061      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017c4e:	69fb      	ldr	r3, [r7, #28]
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	4a7c      	ldr	r2, [pc, #496]	@ (8017e44 <UART_SetConfig+0x35c>)
 8017c54:	4293      	cmp	r3, r2
 8017c56:	d106      	bne.n	8017c66 <UART_SetConfig+0x17e>
 8017c58:	231b      	movs	r3, #27
 8017c5a:	2218      	movs	r2, #24
 8017c5c:	189b      	adds	r3, r3, r2
 8017c5e:	19db      	adds	r3, r3, r7
 8017c60:	2200      	movs	r2, #0
 8017c62:	701a      	strb	r2, [r3, #0]
 8017c64:	e055      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017c66:	69fb      	ldr	r3, [r7, #28]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	4a77      	ldr	r2, [pc, #476]	@ (8017e48 <UART_SetConfig+0x360>)
 8017c6c:	4293      	cmp	r3, r2
 8017c6e:	d106      	bne.n	8017c7e <UART_SetConfig+0x196>
 8017c70:	231b      	movs	r3, #27
 8017c72:	2218      	movs	r2, #24
 8017c74:	189b      	adds	r3, r3, r2
 8017c76:	19db      	adds	r3, r3, r7
 8017c78:	2200      	movs	r2, #0
 8017c7a:	701a      	strb	r2, [r3, #0]
 8017c7c:	e049      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017c7e:	69fb      	ldr	r3, [r7, #28]
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	4a6b      	ldr	r2, [pc, #428]	@ (8017e30 <UART_SetConfig+0x348>)
 8017c84:	4293      	cmp	r3, r2
 8017c86:	d13e      	bne.n	8017d06 <UART_SetConfig+0x21e>
 8017c88:	4b6c      	ldr	r3, [pc, #432]	@ (8017e3c <UART_SetConfig+0x354>)
 8017c8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017c8c:	23c0      	movs	r3, #192	@ 0xc0
 8017c8e:	011b      	lsls	r3, r3, #4
 8017c90:	4013      	ands	r3, r2
 8017c92:	22c0      	movs	r2, #192	@ 0xc0
 8017c94:	0112      	lsls	r2, r2, #4
 8017c96:	4293      	cmp	r3, r2
 8017c98:	d027      	beq.n	8017cea <UART_SetConfig+0x202>
 8017c9a:	22c0      	movs	r2, #192	@ 0xc0
 8017c9c:	0112      	lsls	r2, r2, #4
 8017c9e:	4293      	cmp	r3, r2
 8017ca0:	d82a      	bhi.n	8017cf8 <UART_SetConfig+0x210>
 8017ca2:	2280      	movs	r2, #128	@ 0x80
 8017ca4:	0112      	lsls	r2, r2, #4
 8017ca6:	4293      	cmp	r3, r2
 8017ca8:	d011      	beq.n	8017cce <UART_SetConfig+0x1e6>
 8017caa:	2280      	movs	r2, #128	@ 0x80
 8017cac:	0112      	lsls	r2, r2, #4
 8017cae:	4293      	cmp	r3, r2
 8017cb0:	d822      	bhi.n	8017cf8 <UART_SetConfig+0x210>
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d004      	beq.n	8017cc0 <UART_SetConfig+0x1d8>
 8017cb6:	2280      	movs	r2, #128	@ 0x80
 8017cb8:	00d2      	lsls	r2, r2, #3
 8017cba:	4293      	cmp	r3, r2
 8017cbc:	d00e      	beq.n	8017cdc <UART_SetConfig+0x1f4>
 8017cbe:	e01b      	b.n	8017cf8 <UART_SetConfig+0x210>
 8017cc0:	231b      	movs	r3, #27
 8017cc2:	2218      	movs	r2, #24
 8017cc4:	189b      	adds	r3, r3, r2
 8017cc6:	19db      	adds	r3, r3, r7
 8017cc8:	2200      	movs	r2, #0
 8017cca:	701a      	strb	r2, [r3, #0]
 8017ccc:	e021      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017cce:	231b      	movs	r3, #27
 8017cd0:	2218      	movs	r2, #24
 8017cd2:	189b      	adds	r3, r3, r2
 8017cd4:	19db      	adds	r3, r3, r7
 8017cd6:	2202      	movs	r2, #2
 8017cd8:	701a      	strb	r2, [r3, #0]
 8017cda:	e01a      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017cdc:	231b      	movs	r3, #27
 8017cde:	2218      	movs	r2, #24
 8017ce0:	189b      	adds	r3, r3, r2
 8017ce2:	19db      	adds	r3, r3, r7
 8017ce4:	2204      	movs	r2, #4
 8017ce6:	701a      	strb	r2, [r3, #0]
 8017ce8:	e013      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017cea:	231b      	movs	r3, #27
 8017cec:	2218      	movs	r2, #24
 8017cee:	189b      	adds	r3, r3, r2
 8017cf0:	19db      	adds	r3, r3, r7
 8017cf2:	2208      	movs	r2, #8
 8017cf4:	701a      	strb	r2, [r3, #0]
 8017cf6:	e00c      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017cf8:	231b      	movs	r3, #27
 8017cfa:	2218      	movs	r2, #24
 8017cfc:	189b      	adds	r3, r3, r2
 8017cfe:	19db      	adds	r3, r3, r7
 8017d00:	2210      	movs	r2, #16
 8017d02:	701a      	strb	r2, [r3, #0]
 8017d04:	e005      	b.n	8017d12 <UART_SetConfig+0x22a>
 8017d06:	231b      	movs	r3, #27
 8017d08:	2218      	movs	r2, #24
 8017d0a:	189b      	adds	r3, r3, r2
 8017d0c:	19db      	adds	r3, r3, r7
 8017d0e:	2210      	movs	r2, #16
 8017d10:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017d12:	69fb      	ldr	r3, [r7, #28]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	4a46      	ldr	r2, [pc, #280]	@ (8017e30 <UART_SetConfig+0x348>)
 8017d18:	4293      	cmp	r3, r2
 8017d1a:	d000      	beq.n	8017d1e <UART_SetConfig+0x236>
 8017d1c:	e09a      	b.n	8017e54 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017d1e:	231b      	movs	r3, #27
 8017d20:	2218      	movs	r2, #24
 8017d22:	189b      	adds	r3, r3, r2
 8017d24:	19db      	adds	r3, r3, r7
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	2b08      	cmp	r3, #8
 8017d2a:	d01d      	beq.n	8017d68 <UART_SetConfig+0x280>
 8017d2c:	dc20      	bgt.n	8017d70 <UART_SetConfig+0x288>
 8017d2e:	2b04      	cmp	r3, #4
 8017d30:	d015      	beq.n	8017d5e <UART_SetConfig+0x276>
 8017d32:	dc1d      	bgt.n	8017d70 <UART_SetConfig+0x288>
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d002      	beq.n	8017d3e <UART_SetConfig+0x256>
 8017d38:	2b02      	cmp	r3, #2
 8017d3a:	d005      	beq.n	8017d48 <UART_SetConfig+0x260>
 8017d3c:	e018      	b.n	8017d70 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017d3e:	f7fd fe4b 	bl	80159d8 <HAL_RCC_GetPCLK1Freq>
 8017d42:	0003      	movs	r3, r0
 8017d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017d46:	e01c      	b.n	8017d82 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017d48:	4b3c      	ldr	r3, [pc, #240]	@ (8017e3c <UART_SetConfig+0x354>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	2210      	movs	r2, #16
 8017d4e:	4013      	ands	r3, r2
 8017d50:	d002      	beq.n	8017d58 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017d52:	4b3e      	ldr	r3, [pc, #248]	@ (8017e4c <UART_SetConfig+0x364>)
 8017d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017d56:	e014      	b.n	8017d82 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8017d58:	4b3d      	ldr	r3, [pc, #244]	@ (8017e50 <UART_SetConfig+0x368>)
 8017d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017d5c:	e011      	b.n	8017d82 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017d5e:	f7fd fd8b 	bl	8015878 <HAL_RCC_GetSysClockFreq>
 8017d62:	0003      	movs	r3, r0
 8017d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017d66:	e00c      	b.n	8017d82 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017d68:	2380      	movs	r3, #128	@ 0x80
 8017d6a:	021b      	lsls	r3, r3, #8
 8017d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017d6e:	e008      	b.n	8017d82 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8017d70:	2300      	movs	r3, #0
 8017d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017d74:	231a      	movs	r3, #26
 8017d76:	2218      	movs	r2, #24
 8017d78:	189b      	adds	r3, r3, r2
 8017d7a:	19db      	adds	r3, r3, r7
 8017d7c:	2201      	movs	r2, #1
 8017d7e:	701a      	strb	r2, [r3, #0]
        break;
 8017d80:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d100      	bne.n	8017d8a <UART_SetConfig+0x2a2>
 8017d88:	e133      	b.n	8017ff2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017d8a:	69fb      	ldr	r3, [r7, #28]
 8017d8c:	685a      	ldr	r2, [r3, #4]
 8017d8e:	0013      	movs	r3, r2
 8017d90:	005b      	lsls	r3, r3, #1
 8017d92:	189b      	adds	r3, r3, r2
 8017d94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d305      	bcc.n	8017da6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8017d9a:	69fb      	ldr	r3, [r7, #28]
 8017d9c:	685b      	ldr	r3, [r3, #4]
 8017d9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017da2:	429a      	cmp	r2, r3
 8017da4:	d906      	bls.n	8017db4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8017da6:	231a      	movs	r3, #26
 8017da8:	2218      	movs	r2, #24
 8017daa:	189b      	adds	r3, r3, r2
 8017dac:	19db      	adds	r3, r3, r7
 8017dae:	2201      	movs	r2, #1
 8017db0:	701a      	strb	r2, [r3, #0]
 8017db2:	e11e      	b.n	8017ff2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8017db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017db6:	613b      	str	r3, [r7, #16]
 8017db8:	2300      	movs	r3, #0
 8017dba:	617b      	str	r3, [r7, #20]
 8017dbc:	6939      	ldr	r1, [r7, #16]
 8017dbe:	697a      	ldr	r2, [r7, #20]
 8017dc0:	000b      	movs	r3, r1
 8017dc2:	0e1b      	lsrs	r3, r3, #24
 8017dc4:	0010      	movs	r0, r2
 8017dc6:	0205      	lsls	r5, r0, #8
 8017dc8:	431d      	orrs	r5, r3
 8017dca:	000b      	movs	r3, r1
 8017dcc:	021c      	lsls	r4, r3, #8
 8017dce:	69fb      	ldr	r3, [r7, #28]
 8017dd0:	685b      	ldr	r3, [r3, #4]
 8017dd2:	085b      	lsrs	r3, r3, #1
 8017dd4:	60bb      	str	r3, [r7, #8]
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	60fb      	str	r3, [r7, #12]
 8017dda:	68b8      	ldr	r0, [r7, #8]
 8017ddc:	68f9      	ldr	r1, [r7, #12]
 8017dde:	1900      	adds	r0, r0, r4
 8017de0:	4169      	adcs	r1, r5
 8017de2:	69fb      	ldr	r3, [r7, #28]
 8017de4:	685b      	ldr	r3, [r3, #4]
 8017de6:	603b      	str	r3, [r7, #0]
 8017de8:	2300      	movs	r3, #0
 8017dea:	607b      	str	r3, [r7, #4]
 8017dec:	683a      	ldr	r2, [r7, #0]
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	f7e8 fbc6 	bl	8000580 <__aeabi_uldivmod>
 8017df4:	0002      	movs	r2, r0
 8017df6:	000b      	movs	r3, r1
 8017df8:	0013      	movs	r3, r2
 8017dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017dfe:	23c0      	movs	r3, #192	@ 0xc0
 8017e00:	009b      	lsls	r3, r3, #2
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d309      	bcc.n	8017e1a <UART_SetConfig+0x332>
 8017e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017e08:	2380      	movs	r3, #128	@ 0x80
 8017e0a:	035b      	lsls	r3, r3, #13
 8017e0c:	429a      	cmp	r2, r3
 8017e0e:	d204      	bcs.n	8017e1a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8017e10:	69fb      	ldr	r3, [r7, #28]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017e16:	60da      	str	r2, [r3, #12]
 8017e18:	e0eb      	b.n	8017ff2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8017e1a:	231a      	movs	r3, #26
 8017e1c:	2218      	movs	r2, #24
 8017e1e:	189b      	adds	r3, r3, r2
 8017e20:	19db      	adds	r3, r3, r7
 8017e22:	2201      	movs	r2, #1
 8017e24:	701a      	strb	r2, [r3, #0]
 8017e26:	e0e4      	b.n	8017ff2 <UART_SetConfig+0x50a>
 8017e28:	efff69f3 	.word	0xefff69f3
 8017e2c:	ffffcfff 	.word	0xffffcfff
 8017e30:	40004800 	.word	0x40004800
 8017e34:	fffff4ff 	.word	0xfffff4ff
 8017e38:	40013800 	.word	0x40013800
 8017e3c:	40021000 	.word	0x40021000
 8017e40:	40004400 	.word	0x40004400
 8017e44:	40004c00 	.word	0x40004c00
 8017e48:	40005000 	.word	0x40005000
 8017e4c:	003d0900 	.word	0x003d0900
 8017e50:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017e54:	69fb      	ldr	r3, [r7, #28]
 8017e56:	69da      	ldr	r2, [r3, #28]
 8017e58:	2380      	movs	r3, #128	@ 0x80
 8017e5a:	021b      	lsls	r3, r3, #8
 8017e5c:	429a      	cmp	r2, r3
 8017e5e:	d000      	beq.n	8017e62 <UART_SetConfig+0x37a>
 8017e60:	e070      	b.n	8017f44 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8017e62:	231b      	movs	r3, #27
 8017e64:	2218      	movs	r2, #24
 8017e66:	189b      	adds	r3, r3, r2
 8017e68:	19db      	adds	r3, r3, r7
 8017e6a:	781b      	ldrb	r3, [r3, #0]
 8017e6c:	2b08      	cmp	r3, #8
 8017e6e:	d822      	bhi.n	8017eb6 <UART_SetConfig+0x3ce>
 8017e70:	009a      	lsls	r2, r3, #2
 8017e72:	4b67      	ldr	r3, [pc, #412]	@ (8018010 <UART_SetConfig+0x528>)
 8017e74:	18d3      	adds	r3, r2, r3
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017e7a:	f7fd fdad 	bl	80159d8 <HAL_RCC_GetPCLK1Freq>
 8017e7e:	0003      	movs	r3, r0
 8017e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017e82:	e021      	b.n	8017ec8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017e84:	f7fd fdbe 	bl	8015a04 <HAL_RCC_GetPCLK2Freq>
 8017e88:	0003      	movs	r3, r0
 8017e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017e8c:	e01c      	b.n	8017ec8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017e8e:	4b61      	ldr	r3, [pc, #388]	@ (8018014 <UART_SetConfig+0x52c>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	2210      	movs	r2, #16
 8017e94:	4013      	ands	r3, r2
 8017e96:	d002      	beq.n	8017e9e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017e98:	4b5f      	ldr	r3, [pc, #380]	@ (8018018 <UART_SetConfig+0x530>)
 8017e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017e9c:	e014      	b.n	8017ec8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8017e9e:	4b5f      	ldr	r3, [pc, #380]	@ (801801c <UART_SetConfig+0x534>)
 8017ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017ea2:	e011      	b.n	8017ec8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017ea4:	f7fd fce8 	bl	8015878 <HAL_RCC_GetSysClockFreq>
 8017ea8:	0003      	movs	r3, r0
 8017eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017eac:	e00c      	b.n	8017ec8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017eae:	2380      	movs	r3, #128	@ 0x80
 8017eb0:	021b      	lsls	r3, r3, #8
 8017eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017eb4:	e008      	b.n	8017ec8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017eba:	231a      	movs	r3, #26
 8017ebc:	2218      	movs	r2, #24
 8017ebe:	189b      	adds	r3, r3, r2
 8017ec0:	19db      	adds	r3, r3, r7
 8017ec2:	2201      	movs	r2, #1
 8017ec4:	701a      	strb	r2, [r3, #0]
        break;
 8017ec6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d100      	bne.n	8017ed0 <UART_SetConfig+0x3e8>
 8017ece:	e090      	b.n	8017ff2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8017ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ed2:	005a      	lsls	r2, r3, #1
 8017ed4:	69fb      	ldr	r3, [r7, #28]
 8017ed6:	685b      	ldr	r3, [r3, #4]
 8017ed8:	085b      	lsrs	r3, r3, #1
 8017eda:	18d2      	adds	r2, r2, r3
 8017edc:	69fb      	ldr	r3, [r7, #28]
 8017ede:	685b      	ldr	r3, [r3, #4]
 8017ee0:	0019      	movs	r1, r3
 8017ee2:	0010      	movs	r0, r2
 8017ee4:	f7e8 f95e 	bl	80001a4 <__udivsi3>
 8017ee8:	0003      	movs	r3, r0
 8017eea:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eee:	2b0f      	cmp	r3, #15
 8017ef0:	d921      	bls.n	8017f36 <UART_SetConfig+0x44e>
 8017ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017ef4:	2380      	movs	r3, #128	@ 0x80
 8017ef6:	025b      	lsls	r3, r3, #9
 8017ef8:	429a      	cmp	r2, r3
 8017efa:	d21c      	bcs.n	8017f36 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8017efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017efe:	b29a      	uxth	r2, r3
 8017f00:	200e      	movs	r0, #14
 8017f02:	2418      	movs	r4, #24
 8017f04:	1903      	adds	r3, r0, r4
 8017f06:	19db      	adds	r3, r3, r7
 8017f08:	210f      	movs	r1, #15
 8017f0a:	438a      	bics	r2, r1
 8017f0c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f10:	085b      	lsrs	r3, r3, #1
 8017f12:	b29b      	uxth	r3, r3
 8017f14:	2207      	movs	r2, #7
 8017f16:	4013      	ands	r3, r2
 8017f18:	b299      	uxth	r1, r3
 8017f1a:	1903      	adds	r3, r0, r4
 8017f1c:	19db      	adds	r3, r3, r7
 8017f1e:	1902      	adds	r2, r0, r4
 8017f20:	19d2      	adds	r2, r2, r7
 8017f22:	8812      	ldrh	r2, [r2, #0]
 8017f24:	430a      	orrs	r2, r1
 8017f26:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8017f28:	69fb      	ldr	r3, [r7, #28]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	1902      	adds	r2, r0, r4
 8017f2e:	19d2      	adds	r2, r2, r7
 8017f30:	8812      	ldrh	r2, [r2, #0]
 8017f32:	60da      	str	r2, [r3, #12]
 8017f34:	e05d      	b.n	8017ff2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8017f36:	231a      	movs	r3, #26
 8017f38:	2218      	movs	r2, #24
 8017f3a:	189b      	adds	r3, r3, r2
 8017f3c:	19db      	adds	r3, r3, r7
 8017f3e:	2201      	movs	r2, #1
 8017f40:	701a      	strb	r2, [r3, #0]
 8017f42:	e056      	b.n	8017ff2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8017f44:	231b      	movs	r3, #27
 8017f46:	2218      	movs	r2, #24
 8017f48:	189b      	adds	r3, r3, r2
 8017f4a:	19db      	adds	r3, r3, r7
 8017f4c:	781b      	ldrb	r3, [r3, #0]
 8017f4e:	2b08      	cmp	r3, #8
 8017f50:	d822      	bhi.n	8017f98 <UART_SetConfig+0x4b0>
 8017f52:	009a      	lsls	r2, r3, #2
 8017f54:	4b32      	ldr	r3, [pc, #200]	@ (8018020 <UART_SetConfig+0x538>)
 8017f56:	18d3      	adds	r3, r2, r3
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017f5c:	f7fd fd3c 	bl	80159d8 <HAL_RCC_GetPCLK1Freq>
 8017f60:	0003      	movs	r3, r0
 8017f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f64:	e021      	b.n	8017faa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017f66:	f7fd fd4d 	bl	8015a04 <HAL_RCC_GetPCLK2Freq>
 8017f6a:	0003      	movs	r3, r0
 8017f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f6e:	e01c      	b.n	8017faa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017f70:	4b28      	ldr	r3, [pc, #160]	@ (8018014 <UART_SetConfig+0x52c>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	2210      	movs	r2, #16
 8017f76:	4013      	ands	r3, r2
 8017f78:	d002      	beq.n	8017f80 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017f7a:	4b27      	ldr	r3, [pc, #156]	@ (8018018 <UART_SetConfig+0x530>)
 8017f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017f7e:	e014      	b.n	8017faa <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8017f80:	4b26      	ldr	r3, [pc, #152]	@ (801801c <UART_SetConfig+0x534>)
 8017f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f84:	e011      	b.n	8017faa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017f86:	f7fd fc77 	bl	8015878 <HAL_RCC_GetSysClockFreq>
 8017f8a:	0003      	movs	r3, r0
 8017f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f8e:	e00c      	b.n	8017faa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017f90:	2380      	movs	r3, #128	@ 0x80
 8017f92:	021b      	lsls	r3, r3, #8
 8017f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f96:	e008      	b.n	8017faa <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8017f98:	2300      	movs	r3, #0
 8017f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017f9c:	231a      	movs	r3, #26
 8017f9e:	2218      	movs	r2, #24
 8017fa0:	189b      	adds	r3, r3, r2
 8017fa2:	19db      	adds	r3, r3, r7
 8017fa4:	2201      	movs	r2, #1
 8017fa6:	701a      	strb	r2, [r3, #0]
        break;
 8017fa8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8017faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d020      	beq.n	8017ff2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8017fb0:	69fb      	ldr	r3, [r7, #28]
 8017fb2:	685b      	ldr	r3, [r3, #4]
 8017fb4:	085a      	lsrs	r2, r3, #1
 8017fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fb8:	18d2      	adds	r2, r2, r3
 8017fba:	69fb      	ldr	r3, [r7, #28]
 8017fbc:	685b      	ldr	r3, [r3, #4]
 8017fbe:	0019      	movs	r1, r3
 8017fc0:	0010      	movs	r0, r2
 8017fc2:	f7e8 f8ef 	bl	80001a4 <__udivsi3>
 8017fc6:	0003      	movs	r3, r0
 8017fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fcc:	2b0f      	cmp	r3, #15
 8017fce:	d90a      	bls.n	8017fe6 <UART_SetConfig+0x4fe>
 8017fd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017fd2:	2380      	movs	r3, #128	@ 0x80
 8017fd4:	025b      	lsls	r3, r3, #9
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	d205      	bcs.n	8017fe6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8017fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fdc:	b29a      	uxth	r2, r3
 8017fde:	69fb      	ldr	r3, [r7, #28]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	60da      	str	r2, [r3, #12]
 8017fe4:	e005      	b.n	8017ff2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8017fe6:	231a      	movs	r3, #26
 8017fe8:	2218      	movs	r2, #24
 8017fea:	189b      	adds	r3, r3, r2
 8017fec:	19db      	adds	r3, r3, r7
 8017fee:	2201      	movs	r2, #1
 8017ff0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8017ff2:	69fb      	ldr	r3, [r7, #28]
 8017ff4:	2200      	movs	r2, #0
 8017ff6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8017ff8:	69fb      	ldr	r3, [r7, #28]
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8017ffe:	231a      	movs	r3, #26
 8018000:	2218      	movs	r2, #24
 8018002:	189b      	adds	r3, r3, r2
 8018004:	19db      	adds	r3, r3, r7
 8018006:	781b      	ldrb	r3, [r3, #0]
}
 8018008:	0018      	movs	r0, r3
 801800a:	46bd      	mov	sp, r7
 801800c:	b00e      	add	sp, #56	@ 0x38
 801800e:	bdb0      	pop	{r4, r5, r7, pc}
 8018010:	08025520 	.word	0x08025520
 8018014:	40021000 	.word	0x40021000
 8018018:	003d0900 	.word	0x003d0900
 801801c:	00f42400 	.word	0x00f42400
 8018020:	08025544 	.word	0x08025544

08018024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018024:	b580      	push	{r7, lr}
 8018026:	b082      	sub	sp, #8
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018030:	2201      	movs	r2, #1
 8018032:	4013      	ands	r3, r2
 8018034:	d00b      	beq.n	801804e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	685b      	ldr	r3, [r3, #4]
 801803c:	4a4a      	ldr	r2, [pc, #296]	@ (8018168 <UART_AdvFeatureConfig+0x144>)
 801803e:	4013      	ands	r3, r2
 8018040:	0019      	movs	r1, r3
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	430a      	orrs	r2, r1
 801804c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018052:	2202      	movs	r2, #2
 8018054:	4013      	ands	r3, r2
 8018056:	d00b      	beq.n	8018070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	685b      	ldr	r3, [r3, #4]
 801805e:	4a43      	ldr	r2, [pc, #268]	@ (801816c <UART_AdvFeatureConfig+0x148>)
 8018060:	4013      	ands	r3, r2
 8018062:	0019      	movs	r1, r3
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	430a      	orrs	r2, r1
 801806e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018074:	2204      	movs	r2, #4
 8018076:	4013      	ands	r3, r2
 8018078:	d00b      	beq.n	8018092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	685b      	ldr	r3, [r3, #4]
 8018080:	4a3b      	ldr	r2, [pc, #236]	@ (8018170 <UART_AdvFeatureConfig+0x14c>)
 8018082:	4013      	ands	r3, r2
 8018084:	0019      	movs	r1, r3
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	430a      	orrs	r2, r1
 8018090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018096:	2208      	movs	r2, #8
 8018098:	4013      	ands	r3, r2
 801809a:	d00b      	beq.n	80180b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	685b      	ldr	r3, [r3, #4]
 80180a2:	4a34      	ldr	r2, [pc, #208]	@ (8018174 <UART_AdvFeatureConfig+0x150>)
 80180a4:	4013      	ands	r3, r2
 80180a6:	0019      	movs	r1, r3
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	430a      	orrs	r2, r1
 80180b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180b8:	2210      	movs	r2, #16
 80180ba:	4013      	ands	r3, r2
 80180bc:	d00b      	beq.n	80180d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	689b      	ldr	r3, [r3, #8]
 80180c4:	4a2c      	ldr	r2, [pc, #176]	@ (8018178 <UART_AdvFeatureConfig+0x154>)
 80180c6:	4013      	ands	r3, r2
 80180c8:	0019      	movs	r1, r3
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	430a      	orrs	r2, r1
 80180d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180da:	2220      	movs	r2, #32
 80180dc:	4013      	ands	r3, r2
 80180de:	d00b      	beq.n	80180f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	689b      	ldr	r3, [r3, #8]
 80180e6:	4a25      	ldr	r2, [pc, #148]	@ (801817c <UART_AdvFeatureConfig+0x158>)
 80180e8:	4013      	ands	r3, r2
 80180ea:	0019      	movs	r1, r3
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	430a      	orrs	r2, r1
 80180f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180fc:	2240      	movs	r2, #64	@ 0x40
 80180fe:	4013      	ands	r3, r2
 8018100:	d01d      	beq.n	801813e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	685b      	ldr	r3, [r3, #4]
 8018108:	4a1d      	ldr	r2, [pc, #116]	@ (8018180 <UART_AdvFeatureConfig+0x15c>)
 801810a:	4013      	ands	r3, r2
 801810c:	0019      	movs	r1, r3
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	430a      	orrs	r2, r1
 8018118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801811e:	2380      	movs	r3, #128	@ 0x80
 8018120:	035b      	lsls	r3, r3, #13
 8018122:	429a      	cmp	r2, r3
 8018124:	d10b      	bne.n	801813e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	685b      	ldr	r3, [r3, #4]
 801812c:	4a15      	ldr	r2, [pc, #84]	@ (8018184 <UART_AdvFeatureConfig+0x160>)
 801812e:	4013      	ands	r3, r2
 8018130:	0019      	movs	r1, r3
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	430a      	orrs	r2, r1
 801813c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018142:	2280      	movs	r2, #128	@ 0x80
 8018144:	4013      	ands	r3, r2
 8018146:	d00b      	beq.n	8018160 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	685b      	ldr	r3, [r3, #4]
 801814e:	4a0e      	ldr	r2, [pc, #56]	@ (8018188 <UART_AdvFeatureConfig+0x164>)
 8018150:	4013      	ands	r3, r2
 8018152:	0019      	movs	r1, r3
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	430a      	orrs	r2, r1
 801815e:	605a      	str	r2, [r3, #4]
  }
}
 8018160:	46c0      	nop			@ (mov r8, r8)
 8018162:	46bd      	mov	sp, r7
 8018164:	b002      	add	sp, #8
 8018166:	bd80      	pop	{r7, pc}
 8018168:	fffdffff 	.word	0xfffdffff
 801816c:	fffeffff 	.word	0xfffeffff
 8018170:	fffbffff 	.word	0xfffbffff
 8018174:	ffff7fff 	.word	0xffff7fff
 8018178:	ffffefff 	.word	0xffffefff
 801817c:	ffffdfff 	.word	0xffffdfff
 8018180:	ffefffff 	.word	0xffefffff
 8018184:	ff9fffff 	.word	0xff9fffff
 8018188:	fff7ffff 	.word	0xfff7ffff

0801818c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b092      	sub	sp, #72	@ 0x48
 8018190:	af02      	add	r7, sp, #8
 8018192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	2284      	movs	r2, #132	@ 0x84
 8018198:	2100      	movs	r1, #0
 801819a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801819c:	f7f6 fd20 	bl	800ebe0 <HAL_GetTick>
 80181a0:	0003      	movs	r3, r0
 80181a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	2208      	movs	r2, #8
 80181ac:	4013      	ands	r3, r2
 80181ae:	2b08      	cmp	r3, #8
 80181b0:	d12c      	bne.n	801820c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80181b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181b4:	2280      	movs	r2, #128	@ 0x80
 80181b6:	0391      	lsls	r1, r2, #14
 80181b8:	6878      	ldr	r0, [r7, #4]
 80181ba:	4a46      	ldr	r2, [pc, #280]	@ (80182d4 <UART_CheckIdleState+0x148>)
 80181bc:	9200      	str	r2, [sp, #0]
 80181be:	2200      	movs	r2, #0
 80181c0:	f000 f88c 	bl	80182dc <UART_WaitOnFlagUntilTimeout>
 80181c4:	1e03      	subs	r3, r0, #0
 80181c6:	d021      	beq.n	801820c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80181c8:	f3ef 8310 	mrs	r3, PRIMASK
 80181cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80181ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80181d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80181d2:	2301      	movs	r3, #1
 80181d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181d8:	f383 8810 	msr	PRIMASK, r3
}
 80181dc:	46c0      	nop			@ (mov r8, r8)
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	681a      	ldr	r2, [r3, #0]
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	2180      	movs	r1, #128	@ 0x80
 80181ea:	438a      	bics	r2, r1
 80181ec:	601a      	str	r2, [r3, #0]
 80181ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181f4:	f383 8810 	msr	PRIMASK, r3
}
 80181f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	2220      	movs	r2, #32
 80181fe:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	2278      	movs	r2, #120	@ 0x78
 8018204:	2100      	movs	r1, #0
 8018206:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018208:	2303      	movs	r3, #3
 801820a:	e05f      	b.n	80182cc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	2204      	movs	r2, #4
 8018214:	4013      	ands	r3, r2
 8018216:	2b04      	cmp	r3, #4
 8018218:	d146      	bne.n	80182a8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801821a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801821c:	2280      	movs	r2, #128	@ 0x80
 801821e:	03d1      	lsls	r1, r2, #15
 8018220:	6878      	ldr	r0, [r7, #4]
 8018222:	4a2c      	ldr	r2, [pc, #176]	@ (80182d4 <UART_CheckIdleState+0x148>)
 8018224:	9200      	str	r2, [sp, #0]
 8018226:	2200      	movs	r2, #0
 8018228:	f000 f858 	bl	80182dc <UART_WaitOnFlagUntilTimeout>
 801822c:	1e03      	subs	r3, r0, #0
 801822e:	d03b      	beq.n	80182a8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018230:	f3ef 8310 	mrs	r3, PRIMASK
 8018234:	60fb      	str	r3, [r7, #12]
  return(result);
 8018236:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018238:	637b      	str	r3, [r7, #52]	@ 0x34
 801823a:	2301      	movs	r3, #1
 801823c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801823e:	693b      	ldr	r3, [r7, #16]
 8018240:	f383 8810 	msr	PRIMASK, r3
}
 8018244:	46c0      	nop			@ (mov r8, r8)
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	681a      	ldr	r2, [r3, #0]
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	4921      	ldr	r1, [pc, #132]	@ (80182d8 <UART_CheckIdleState+0x14c>)
 8018252:	400a      	ands	r2, r1
 8018254:	601a      	str	r2, [r3, #0]
 8018256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018258:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801825a:	697b      	ldr	r3, [r7, #20]
 801825c:	f383 8810 	msr	PRIMASK, r3
}
 8018260:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018262:	f3ef 8310 	mrs	r3, PRIMASK
 8018266:	61bb      	str	r3, [r7, #24]
  return(result);
 8018268:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801826a:	633b      	str	r3, [r7, #48]	@ 0x30
 801826c:	2301      	movs	r3, #1
 801826e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	f383 8810 	msr	PRIMASK, r3
}
 8018276:	46c0      	nop			@ (mov r8, r8)
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	689a      	ldr	r2, [r3, #8]
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	2101      	movs	r1, #1
 8018284:	438a      	bics	r2, r1
 8018286:	609a      	str	r2, [r3, #8]
 8018288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801828a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801828c:	6a3b      	ldr	r3, [r7, #32]
 801828e:	f383 8810 	msr	PRIMASK, r3
}
 8018292:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	2280      	movs	r2, #128	@ 0x80
 8018298:	2120      	movs	r1, #32
 801829a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	2278      	movs	r2, #120	@ 0x78
 80182a0:	2100      	movs	r1, #0
 80182a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80182a4:	2303      	movs	r3, #3
 80182a6:	e011      	b.n	80182cc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	2220      	movs	r2, #32
 80182ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	2280      	movs	r2, #128	@ 0x80
 80182b2:	2120      	movs	r1, #32
 80182b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	2200      	movs	r2, #0
 80182ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	2200      	movs	r2, #0
 80182c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	2278      	movs	r2, #120	@ 0x78
 80182c6:	2100      	movs	r1, #0
 80182c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80182ca:	2300      	movs	r3, #0
}
 80182cc:	0018      	movs	r0, r3
 80182ce:	46bd      	mov	sp, r7
 80182d0:	b010      	add	sp, #64	@ 0x40
 80182d2:	bd80      	pop	{r7, pc}
 80182d4:	01ffffff 	.word	0x01ffffff
 80182d8:	fffffedf 	.word	0xfffffedf

080182dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b084      	sub	sp, #16
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	60f8      	str	r0, [r7, #12]
 80182e4:	60b9      	str	r1, [r7, #8]
 80182e6:	603b      	str	r3, [r7, #0]
 80182e8:	1dfb      	adds	r3, r7, #7
 80182ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80182ec:	e04b      	b.n	8018386 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80182ee:	69bb      	ldr	r3, [r7, #24]
 80182f0:	3301      	adds	r3, #1
 80182f2:	d048      	beq.n	8018386 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80182f4:	f7f6 fc74 	bl	800ebe0 <HAL_GetTick>
 80182f8:	0002      	movs	r2, r0
 80182fa:	683b      	ldr	r3, [r7, #0]
 80182fc:	1ad3      	subs	r3, r2, r3
 80182fe:	69ba      	ldr	r2, [r7, #24]
 8018300:	429a      	cmp	r2, r3
 8018302:	d302      	bcc.n	801830a <UART_WaitOnFlagUntilTimeout+0x2e>
 8018304:	69bb      	ldr	r3, [r7, #24]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d101      	bne.n	801830e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801830a:	2303      	movs	r3, #3
 801830c:	e04b      	b.n	80183a6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	2204      	movs	r2, #4
 8018316:	4013      	ands	r3, r2
 8018318:	d035      	beq.n	8018386 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	69db      	ldr	r3, [r3, #28]
 8018320:	2208      	movs	r2, #8
 8018322:	4013      	ands	r3, r2
 8018324:	2b08      	cmp	r3, #8
 8018326:	d111      	bne.n	801834c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	2208      	movs	r2, #8
 801832e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	0018      	movs	r0, r3
 8018334:	f000 f9ca 	bl	80186cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	2284      	movs	r2, #132	@ 0x84
 801833c:	2108      	movs	r1, #8
 801833e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	2278      	movs	r2, #120	@ 0x78
 8018344:	2100      	movs	r1, #0
 8018346:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8018348:	2301      	movs	r3, #1
 801834a:	e02c      	b.n	80183a6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	69da      	ldr	r2, [r3, #28]
 8018352:	2380      	movs	r3, #128	@ 0x80
 8018354:	011b      	lsls	r3, r3, #4
 8018356:	401a      	ands	r2, r3
 8018358:	2380      	movs	r3, #128	@ 0x80
 801835a:	011b      	lsls	r3, r3, #4
 801835c:	429a      	cmp	r2, r3
 801835e:	d112      	bne.n	8018386 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	2280      	movs	r2, #128	@ 0x80
 8018366:	0112      	lsls	r2, r2, #4
 8018368:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	0018      	movs	r0, r3
 801836e:	f000 f9ad 	bl	80186cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	2284      	movs	r2, #132	@ 0x84
 8018376:	2120      	movs	r1, #32
 8018378:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	2278      	movs	r2, #120	@ 0x78
 801837e:	2100      	movs	r1, #0
 8018380:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8018382:	2303      	movs	r3, #3
 8018384:	e00f      	b.n	80183a6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	69db      	ldr	r3, [r3, #28]
 801838c:	68ba      	ldr	r2, [r7, #8]
 801838e:	4013      	ands	r3, r2
 8018390:	68ba      	ldr	r2, [r7, #8]
 8018392:	1ad3      	subs	r3, r2, r3
 8018394:	425a      	negs	r2, r3
 8018396:	4153      	adcs	r3, r2
 8018398:	b2db      	uxtb	r3, r3
 801839a:	001a      	movs	r2, r3
 801839c:	1dfb      	adds	r3, r7, #7
 801839e:	781b      	ldrb	r3, [r3, #0]
 80183a0:	429a      	cmp	r2, r3
 80183a2:	d0a4      	beq.n	80182ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80183a4:	2300      	movs	r3, #0
}
 80183a6:	0018      	movs	r0, r3
 80183a8:	46bd      	mov	sp, r7
 80183aa:	b004      	add	sp, #16
 80183ac:	bd80      	pop	{r7, pc}
	...

080183b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	b090      	sub	sp, #64	@ 0x40
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	60f8      	str	r0, [r7, #12]
 80183b8:	60b9      	str	r1, [r7, #8]
 80183ba:	1dbb      	adds	r3, r7, #6
 80183bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	68ba      	ldr	r2, [r7, #8]
 80183c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	1dba      	adds	r2, r7, #6
 80183c8:	2158      	movs	r1, #88	@ 0x58
 80183ca:	8812      	ldrh	r2, [r2, #0]
 80183cc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	1dba      	adds	r2, r7, #6
 80183d2:	215a      	movs	r1, #90	@ 0x5a
 80183d4:	8812      	ldrh	r2, [r2, #0]
 80183d6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	2200      	movs	r2, #0
 80183dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	689a      	ldr	r2, [r3, #8]
 80183e2:	2380      	movs	r3, #128	@ 0x80
 80183e4:	015b      	lsls	r3, r3, #5
 80183e6:	429a      	cmp	r2, r3
 80183e8:	d10d      	bne.n	8018406 <UART_Start_Receive_IT+0x56>
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	691b      	ldr	r3, [r3, #16]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d104      	bne.n	80183fc <UART_Start_Receive_IT+0x4c>
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	225c      	movs	r2, #92	@ 0x5c
 80183f6:	4950      	ldr	r1, [pc, #320]	@ (8018538 <UART_Start_Receive_IT+0x188>)
 80183f8:	5299      	strh	r1, [r3, r2]
 80183fa:	e02e      	b.n	801845a <UART_Start_Receive_IT+0xaa>
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	225c      	movs	r2, #92	@ 0x5c
 8018400:	21ff      	movs	r1, #255	@ 0xff
 8018402:	5299      	strh	r1, [r3, r2]
 8018404:	e029      	b.n	801845a <UART_Start_Receive_IT+0xaa>
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	689b      	ldr	r3, [r3, #8]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d10d      	bne.n	801842a <UART_Start_Receive_IT+0x7a>
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	691b      	ldr	r3, [r3, #16]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d104      	bne.n	8018420 <UART_Start_Receive_IT+0x70>
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	225c      	movs	r2, #92	@ 0x5c
 801841a:	21ff      	movs	r1, #255	@ 0xff
 801841c:	5299      	strh	r1, [r3, r2]
 801841e:	e01c      	b.n	801845a <UART_Start_Receive_IT+0xaa>
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	225c      	movs	r2, #92	@ 0x5c
 8018424:	217f      	movs	r1, #127	@ 0x7f
 8018426:	5299      	strh	r1, [r3, r2]
 8018428:	e017      	b.n	801845a <UART_Start_Receive_IT+0xaa>
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	689a      	ldr	r2, [r3, #8]
 801842e:	2380      	movs	r3, #128	@ 0x80
 8018430:	055b      	lsls	r3, r3, #21
 8018432:	429a      	cmp	r2, r3
 8018434:	d10d      	bne.n	8018452 <UART_Start_Receive_IT+0xa2>
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	691b      	ldr	r3, [r3, #16]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d104      	bne.n	8018448 <UART_Start_Receive_IT+0x98>
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	225c      	movs	r2, #92	@ 0x5c
 8018442:	217f      	movs	r1, #127	@ 0x7f
 8018444:	5299      	strh	r1, [r3, r2]
 8018446:	e008      	b.n	801845a <UART_Start_Receive_IT+0xaa>
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	225c      	movs	r2, #92	@ 0x5c
 801844c:	213f      	movs	r1, #63	@ 0x3f
 801844e:	5299      	strh	r1, [r3, r2]
 8018450:	e003      	b.n	801845a <UART_Start_Receive_IT+0xaa>
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	225c      	movs	r2, #92	@ 0x5c
 8018456:	2100      	movs	r1, #0
 8018458:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	2284      	movs	r2, #132	@ 0x84
 801845e:	2100      	movs	r1, #0
 8018460:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	2280      	movs	r2, #128	@ 0x80
 8018466:	2122      	movs	r1, #34	@ 0x22
 8018468:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801846a:	f3ef 8310 	mrs	r3, PRIMASK
 801846e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018470:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018474:	2301      	movs	r3, #1
 8018476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801847a:	f383 8810 	msr	PRIMASK, r3
}
 801847e:	46c0      	nop			@ (mov r8, r8)
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	689a      	ldr	r2, [r3, #8]
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	2101      	movs	r1, #1
 801848c:	430a      	orrs	r2, r1
 801848e:	609a      	str	r2, [r3, #8]
 8018490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018492:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018496:	f383 8810 	msr	PRIMASK, r3
}
 801849a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	689a      	ldr	r2, [r3, #8]
 80184a0:	2380      	movs	r3, #128	@ 0x80
 80184a2:	015b      	lsls	r3, r3, #5
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d107      	bne.n	80184b8 <UART_Start_Receive_IT+0x108>
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	691b      	ldr	r3, [r3, #16]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d103      	bne.n	80184b8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	4a22      	ldr	r2, [pc, #136]	@ (801853c <UART_Start_Receive_IT+0x18c>)
 80184b4:	669a      	str	r2, [r3, #104]	@ 0x68
 80184b6:	e002      	b.n	80184be <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	4a21      	ldr	r2, [pc, #132]	@ (8018540 <UART_Start_Receive_IT+0x190>)
 80184bc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	691b      	ldr	r3, [r3, #16]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d019      	beq.n	80184fa <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184c6:	f3ef 8310 	mrs	r3, PRIMASK
 80184ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80184cc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80184ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80184d0:	2301      	movs	r3, #1
 80184d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184d4:	6a3b      	ldr	r3, [r7, #32]
 80184d6:	f383 8810 	msr	PRIMASK, r3
}
 80184da:	46c0      	nop			@ (mov r8, r8)
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	681a      	ldr	r2, [r3, #0]
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	2190      	movs	r1, #144	@ 0x90
 80184e8:	0049      	lsls	r1, r1, #1
 80184ea:	430a      	orrs	r2, r1
 80184ec:	601a      	str	r2, [r3, #0]
 80184ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80184f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80184f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184f4:	f383 8810 	msr	PRIMASK, r3
}
 80184f8:	e018      	b.n	801852c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80184fa:	f3ef 8310 	mrs	r3, PRIMASK
 80184fe:	613b      	str	r3, [r7, #16]
  return(result);
 8018500:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8018502:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018504:	2301      	movs	r3, #1
 8018506:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018508:	697b      	ldr	r3, [r7, #20]
 801850a:	f383 8810 	msr	PRIMASK, r3
}
 801850e:	46c0      	nop			@ (mov r8, r8)
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	681a      	ldr	r2, [r3, #0]
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	2120      	movs	r1, #32
 801851c:	430a      	orrs	r2, r1
 801851e:	601a      	str	r2, [r3, #0]
 8018520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018522:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018524:	69bb      	ldr	r3, [r7, #24]
 8018526:	f383 8810 	msr	PRIMASK, r3
}
 801852a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801852c:	2300      	movs	r3, #0
}
 801852e:	0018      	movs	r0, r3
 8018530:	46bd      	mov	sp, r7
 8018532:	b010      	add	sp, #64	@ 0x40
 8018534:	bd80      	pop	{r7, pc}
 8018536:	46c0      	nop			@ (mov r8, r8)
 8018538:	000001ff 	.word	0x000001ff
 801853c:	08018cb1 	.word	0x08018cb1
 8018540:	08018ae5 	.word	0x08018ae5

08018544 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b090      	sub	sp, #64	@ 0x40
 8018548:	af00      	add	r7, sp, #0
 801854a:	60f8      	str	r0, [r7, #12]
 801854c:	60b9      	str	r1, [r7, #8]
 801854e:	1dbb      	adds	r3, r7, #6
 8018550:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	68ba      	ldr	r2, [r7, #8]
 8018556:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	1dba      	adds	r2, r7, #6
 801855c:	2158      	movs	r1, #88	@ 0x58
 801855e:	8812      	ldrh	r2, [r2, #0]
 8018560:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	2284      	movs	r2, #132	@ 0x84
 8018566:	2100      	movs	r1, #0
 8018568:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	2280      	movs	r2, #128	@ 0x80
 801856e:	2122      	movs	r1, #34	@ 0x22
 8018570:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018576:	2b00      	cmp	r3, #0
 8018578:	d028      	beq.n	80185cc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801857e:	4a3e      	ldr	r2, [pc, #248]	@ (8018678 <UART_Start_Receive_DMA+0x134>)
 8018580:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018586:	4a3d      	ldr	r2, [pc, #244]	@ (801867c <UART_Start_Receive_DMA+0x138>)
 8018588:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801858e:	4a3c      	ldr	r2, [pc, #240]	@ (8018680 <UART_Start_Receive_DMA+0x13c>)
 8018590:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018596:	2200      	movs	r2, #0
 8018598:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	3324      	adds	r3, #36	@ 0x24
 80185a4:	0019      	movs	r1, r3
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80185aa:	001a      	movs	r2, r3
 80185ac:	1dbb      	adds	r3, r7, #6
 80185ae:	881b      	ldrh	r3, [r3, #0]
 80185b0:	f7f7 f868 	bl	800f684 <HAL_DMA_Start_IT>
 80185b4:	1e03      	subs	r3, r0, #0
 80185b6:	d009      	beq.n	80185cc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	2284      	movs	r2, #132	@ 0x84
 80185bc:	2110      	movs	r1, #16
 80185be:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	2280      	movs	r2, #128	@ 0x80
 80185c4:	2120      	movs	r1, #32
 80185c6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80185c8:	2301      	movs	r3, #1
 80185ca:	e050      	b.n	801866e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	691b      	ldr	r3, [r3, #16]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d019      	beq.n	8018608 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80185d4:	f3ef 8310 	mrs	r3, PRIMASK
 80185d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80185da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80185dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80185de:	2301      	movs	r3, #1
 80185e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80185e4:	f383 8810 	msr	PRIMASK, r3
}
 80185e8:	46c0      	nop			@ (mov r8, r8)
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	681a      	ldr	r2, [r3, #0]
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	2180      	movs	r1, #128	@ 0x80
 80185f6:	0049      	lsls	r1, r1, #1
 80185f8:	430a      	orrs	r2, r1
 80185fa:	601a      	str	r2, [r3, #0]
 80185fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80185fe:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018602:	f383 8810 	msr	PRIMASK, r3
}
 8018606:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018608:	f3ef 8310 	mrs	r3, PRIMASK
 801860c:	613b      	str	r3, [r7, #16]
  return(result);
 801860e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018610:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018612:	2301      	movs	r3, #1
 8018614:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018616:	697b      	ldr	r3, [r7, #20]
 8018618:	f383 8810 	msr	PRIMASK, r3
}
 801861c:	46c0      	nop			@ (mov r8, r8)
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	689a      	ldr	r2, [r3, #8]
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	2101      	movs	r1, #1
 801862a:	430a      	orrs	r2, r1
 801862c:	609a      	str	r2, [r3, #8]
 801862e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018630:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018632:	69bb      	ldr	r3, [r7, #24]
 8018634:	f383 8810 	msr	PRIMASK, r3
}
 8018638:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801863a:	f3ef 8310 	mrs	r3, PRIMASK
 801863e:	61fb      	str	r3, [r7, #28]
  return(result);
 8018640:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018642:	637b      	str	r3, [r7, #52]	@ 0x34
 8018644:	2301      	movs	r3, #1
 8018646:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018648:	6a3b      	ldr	r3, [r7, #32]
 801864a:	f383 8810 	msr	PRIMASK, r3
}
 801864e:	46c0      	nop			@ (mov r8, r8)
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	689a      	ldr	r2, [r3, #8]
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	2140      	movs	r1, #64	@ 0x40
 801865c:	430a      	orrs	r2, r1
 801865e:	609a      	str	r2, [r3, #8]
 8018660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018662:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018666:	f383 8810 	msr	PRIMASK, r3
}
 801866a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801866c:	2300      	movs	r3, #0
}
 801866e:	0018      	movs	r0, r3
 8018670:	46bd      	mov	sp, r7
 8018672:	b010      	add	sp, #64	@ 0x40
 8018674:	bd80      	pop	{r7, pc}
 8018676:	46c0      	nop			@ (mov r8, r8)
 8018678:	08018855 	.word	0x08018855
 801867c:	08018989 	.word	0x08018989
 8018680:	080189d1 	.word	0x080189d1

08018684 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018684:	b580      	push	{r7, lr}
 8018686:	b086      	sub	sp, #24
 8018688:	af00      	add	r7, sp, #0
 801868a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801868c:	f3ef 8310 	mrs	r3, PRIMASK
 8018690:	60bb      	str	r3, [r7, #8]
  return(result);
 8018692:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018694:	617b      	str	r3, [r7, #20]
 8018696:	2301      	movs	r3, #1
 8018698:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	f383 8810 	msr	PRIMASK, r3
}
 80186a0:	46c0      	nop			@ (mov r8, r8)
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	681a      	ldr	r2, [r3, #0]
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	21c0      	movs	r1, #192	@ 0xc0
 80186ae:	438a      	bics	r2, r1
 80186b0:	601a      	str	r2, [r3, #0]
 80186b2:	697b      	ldr	r3, [r7, #20]
 80186b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186b6:	693b      	ldr	r3, [r7, #16]
 80186b8:	f383 8810 	msr	PRIMASK, r3
}
 80186bc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	2220      	movs	r2, #32
 80186c2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80186c4:	46c0      	nop			@ (mov r8, r8)
 80186c6:	46bd      	mov	sp, r7
 80186c8:	b006      	add	sp, #24
 80186ca:	bd80      	pop	{r7, pc}

080186cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b08e      	sub	sp, #56	@ 0x38
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80186d4:	f3ef 8310 	mrs	r3, PRIMASK
 80186d8:	617b      	str	r3, [r7, #20]
  return(result);
 80186da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80186dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80186de:	2301      	movs	r3, #1
 80186e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186e2:	69bb      	ldr	r3, [r7, #24]
 80186e4:	f383 8810 	msr	PRIMASK, r3
}
 80186e8:	46c0      	nop			@ (mov r8, r8)
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	681a      	ldr	r2, [r3, #0]
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	4926      	ldr	r1, [pc, #152]	@ (8018790 <UART_EndRxTransfer+0xc4>)
 80186f6:	400a      	ands	r2, r1
 80186f8:	601a      	str	r2, [r3, #0]
 80186fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80186fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186fe:	69fb      	ldr	r3, [r7, #28]
 8018700:	f383 8810 	msr	PRIMASK, r3
}
 8018704:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018706:	f3ef 8310 	mrs	r3, PRIMASK
 801870a:	623b      	str	r3, [r7, #32]
  return(result);
 801870c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801870e:	633b      	str	r3, [r7, #48]	@ 0x30
 8018710:	2301      	movs	r3, #1
 8018712:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018716:	f383 8810 	msr	PRIMASK, r3
}
 801871a:	46c0      	nop			@ (mov r8, r8)
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	689a      	ldr	r2, [r3, #8]
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	2101      	movs	r1, #1
 8018728:	438a      	bics	r2, r1
 801872a:	609a      	str	r2, [r3, #8]
 801872c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801872e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018732:	f383 8810 	msr	PRIMASK, r3
}
 8018736:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801873c:	2b01      	cmp	r3, #1
 801873e:	d118      	bne.n	8018772 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018740:	f3ef 8310 	mrs	r3, PRIMASK
 8018744:	60bb      	str	r3, [r7, #8]
  return(result);
 8018746:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801874a:	2301      	movs	r3, #1
 801874c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	f383 8810 	msr	PRIMASK, r3
}
 8018754:	46c0      	nop			@ (mov r8, r8)
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	681a      	ldr	r2, [r3, #0]
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	2110      	movs	r1, #16
 8018762:	438a      	bics	r2, r1
 8018764:	601a      	str	r2, [r3, #0]
 8018766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018768:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801876a:	693b      	ldr	r3, [r7, #16]
 801876c:	f383 8810 	msr	PRIMASK, r3
}
 8018770:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	2280      	movs	r2, #128	@ 0x80
 8018776:	2120      	movs	r1, #32
 8018778:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	2200      	movs	r2, #0
 801877e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	2200      	movs	r2, #0
 8018784:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8018786:	46c0      	nop			@ (mov r8, r8)
 8018788:	46bd      	mov	sp, r7
 801878a:	b00e      	add	sp, #56	@ 0x38
 801878c:	bd80      	pop	{r7, pc}
 801878e:	46c0      	nop			@ (mov r8, r8)
 8018790:	fffffedf 	.word	0xfffffedf

08018794 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b08c      	sub	sp, #48	@ 0x30
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80187a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	2220      	movs	r2, #32
 80187aa:	4013      	ands	r3, r2
 80187ac:	d135      	bne.n	801881a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80187ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187b0:	2252      	movs	r2, #82	@ 0x52
 80187b2:	2100      	movs	r1, #0
 80187b4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187b6:	f3ef 8310 	mrs	r3, PRIMASK
 80187ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80187bc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80187be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80187c0:	2301      	movs	r3, #1
 80187c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187c4:	693b      	ldr	r3, [r7, #16]
 80187c6:	f383 8810 	msr	PRIMASK, r3
}
 80187ca:	46c0      	nop			@ (mov r8, r8)
 80187cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	689a      	ldr	r2, [r3, #8]
 80187d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	2180      	movs	r1, #128	@ 0x80
 80187d8:	438a      	bics	r2, r1
 80187da:	609a      	str	r2, [r3, #8]
 80187dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187e0:	697b      	ldr	r3, [r7, #20]
 80187e2:	f383 8810 	msr	PRIMASK, r3
}
 80187e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187e8:	f3ef 8310 	mrs	r3, PRIMASK
 80187ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80187ee:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80187f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80187f2:	2301      	movs	r3, #1
 80187f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187f6:	69fb      	ldr	r3, [r7, #28]
 80187f8:	f383 8810 	msr	PRIMASK, r3
}
 80187fc:	46c0      	nop			@ (mov r8, r8)
 80187fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	681a      	ldr	r2, [r3, #0]
 8018804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	2140      	movs	r1, #64	@ 0x40
 801880a:	430a      	orrs	r2, r1
 801880c:	601a      	str	r2, [r3, #0]
 801880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018810:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018812:	6a3b      	ldr	r3, [r7, #32]
 8018814:	f383 8810 	msr	PRIMASK, r3
}
 8018818:	e006      	b.n	8018828 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801881a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801881c:	228c      	movs	r2, #140	@ 0x8c
 801881e:	589b      	ldr	r3, [r3, r2]
 8018820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018822:	0010      	movs	r0, r2
 8018824:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018826:	46c0      	nop			@ (mov r8, r8)
 8018828:	46c0      	nop			@ (mov r8, r8)
 801882a:	46bd      	mov	sp, r7
 801882c:	b00c      	add	sp, #48	@ 0x30
 801882e:	bd80      	pop	{r7, pc}

08018830 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018830:	b580      	push	{r7, lr}
 8018832:	b084      	sub	sp, #16
 8018834:	af00      	add	r7, sp, #0
 8018836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801883c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	2288      	movs	r2, #136	@ 0x88
 8018842:	589b      	ldr	r3, [r3, r2]
 8018844:	68fa      	ldr	r2, [r7, #12]
 8018846:	0010      	movs	r0, r2
 8018848:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801884a:	46c0      	nop			@ (mov r8, r8)
 801884c:	46bd      	mov	sp, r7
 801884e:	b004      	add	sp, #16
 8018850:	bd80      	pop	{r7, pc}
	...

08018854 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018854:	b580      	push	{r7, lr}
 8018856:	b094      	sub	sp, #80	@ 0x50
 8018858:	af00      	add	r7, sp, #0
 801885a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018860:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	2220      	movs	r2, #32
 801886a:	4013      	ands	r3, r2
 801886c:	d16f      	bne.n	801894e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801886e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018870:	225a      	movs	r2, #90	@ 0x5a
 8018872:	2100      	movs	r1, #0
 8018874:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018876:	f3ef 8310 	mrs	r3, PRIMASK
 801887a:	61bb      	str	r3, [r7, #24]
  return(result);
 801887c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801887e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018880:	2301      	movs	r3, #1
 8018882:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018884:	69fb      	ldr	r3, [r7, #28]
 8018886:	f383 8810 	msr	PRIMASK, r3
}
 801888a:	46c0      	nop			@ (mov r8, r8)
 801888c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	681a      	ldr	r2, [r3, #0]
 8018892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	493b      	ldr	r1, [pc, #236]	@ (8018984 <UART_DMAReceiveCplt+0x130>)
 8018898:	400a      	ands	r2, r1
 801889a:	601a      	str	r2, [r3, #0]
 801889c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801889e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188a0:	6a3b      	ldr	r3, [r7, #32]
 80188a2:	f383 8810 	msr	PRIMASK, r3
}
 80188a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188a8:	f3ef 8310 	mrs	r3, PRIMASK
 80188ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80188ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80188b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80188b2:	2301      	movs	r3, #1
 80188b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188b8:	f383 8810 	msr	PRIMASK, r3
}
 80188bc:	46c0      	nop			@ (mov r8, r8)
 80188be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	689a      	ldr	r2, [r3, #8]
 80188c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	2101      	movs	r1, #1
 80188ca:	438a      	bics	r2, r1
 80188cc:	609a      	str	r2, [r3, #8]
 80188ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80188d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188d4:	f383 8810 	msr	PRIMASK, r3
}
 80188d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188da:	f3ef 8310 	mrs	r3, PRIMASK
 80188de:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80188e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80188e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80188e4:	2301      	movs	r3, #1
 80188e6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188ea:	f383 8810 	msr	PRIMASK, r3
}
 80188ee:	46c0      	nop			@ (mov r8, r8)
 80188f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	689a      	ldr	r2, [r3, #8]
 80188f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	2140      	movs	r1, #64	@ 0x40
 80188fc:	438a      	bics	r2, r1
 80188fe:	609a      	str	r2, [r3, #8]
 8018900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018902:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018906:	f383 8810 	msr	PRIMASK, r3
}
 801890a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801890c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801890e:	2280      	movs	r2, #128	@ 0x80
 8018910:	2120      	movs	r1, #32
 8018912:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018918:	2b01      	cmp	r3, #1
 801891a:	d118      	bne.n	801894e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801891c:	f3ef 8310 	mrs	r3, PRIMASK
 8018920:	60fb      	str	r3, [r7, #12]
  return(result);
 8018922:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018926:	2301      	movs	r3, #1
 8018928:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801892a:	693b      	ldr	r3, [r7, #16]
 801892c:	f383 8810 	msr	PRIMASK, r3
}
 8018930:	46c0      	nop			@ (mov r8, r8)
 8018932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	681a      	ldr	r2, [r3, #0]
 8018938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	2110      	movs	r1, #16
 801893e:	438a      	bics	r2, r1
 8018940:	601a      	str	r2, [r3, #0]
 8018942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018944:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018946:	697b      	ldr	r3, [r7, #20]
 8018948:	f383 8810 	msr	PRIMASK, r3
}
 801894c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801894e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018950:	2200      	movs	r2, #0
 8018952:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018958:	2b01      	cmp	r3, #1
 801895a:	d109      	bne.n	8018970 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801895c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801895e:	22ac      	movs	r2, #172	@ 0xac
 8018960:	589b      	ldr	r3, [r3, r2]
 8018962:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018964:	2158      	movs	r1, #88	@ 0x58
 8018966:	5a51      	ldrh	r1, [r2, r1]
 8018968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801896a:	0010      	movs	r0, r2
 801896c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801896e:	e005      	b.n	801897c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018972:	2294      	movs	r2, #148	@ 0x94
 8018974:	589b      	ldr	r3, [r3, r2]
 8018976:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018978:	0010      	movs	r0, r2
 801897a:	4798      	blx	r3
}
 801897c:	46c0      	nop			@ (mov r8, r8)
 801897e:	46bd      	mov	sp, r7
 8018980:	b014      	add	sp, #80	@ 0x50
 8018982:	bd80      	pop	{r7, pc}
 8018984:	fffffeff 	.word	0xfffffeff

08018988 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018988:	b580      	push	{r7, lr}
 801898a:	b084      	sub	sp, #16
 801898c:	af00      	add	r7, sp, #0
 801898e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018994:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	2201      	movs	r2, #1
 801899a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80189a0:	2b01      	cmp	r3, #1
 80189a2:	d10b      	bne.n	80189bc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	22ac      	movs	r2, #172	@ 0xac
 80189a8:	589b      	ldr	r3, [r3, r2]
 80189aa:	68fa      	ldr	r2, [r7, #12]
 80189ac:	2158      	movs	r1, #88	@ 0x58
 80189ae:	5a52      	ldrh	r2, [r2, r1]
 80189b0:	0852      	lsrs	r2, r2, #1
 80189b2:	b291      	uxth	r1, r2
 80189b4:	68fa      	ldr	r2, [r7, #12]
 80189b6:	0010      	movs	r0, r2
 80189b8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80189ba:	e005      	b.n	80189c8 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	2290      	movs	r2, #144	@ 0x90
 80189c0:	589b      	ldr	r3, [r3, r2]
 80189c2:	68fa      	ldr	r2, [r7, #12]
 80189c4:	0010      	movs	r0, r2
 80189c6:	4798      	blx	r3
}
 80189c8:	46c0      	nop			@ (mov r8, r8)
 80189ca:	46bd      	mov	sp, r7
 80189cc:	b004      	add	sp, #16
 80189ce:	bd80      	pop	{r7, pc}

080189d0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b086      	sub	sp, #24
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189dc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80189de:	697b      	ldr	r3, [r7, #20]
 80189e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80189e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80189e4:	697b      	ldr	r3, [r7, #20]
 80189e6:	2280      	movs	r2, #128	@ 0x80
 80189e8:	589b      	ldr	r3, [r3, r2]
 80189ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80189ec:	697b      	ldr	r3, [r7, #20]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	689b      	ldr	r3, [r3, #8]
 80189f2:	2280      	movs	r2, #128	@ 0x80
 80189f4:	4013      	ands	r3, r2
 80189f6:	2b80      	cmp	r3, #128	@ 0x80
 80189f8:	d10a      	bne.n	8018a10 <UART_DMAError+0x40>
 80189fa:	693b      	ldr	r3, [r7, #16]
 80189fc:	2b21      	cmp	r3, #33	@ 0x21
 80189fe:	d107      	bne.n	8018a10 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018a00:	697b      	ldr	r3, [r7, #20]
 8018a02:	2252      	movs	r2, #82	@ 0x52
 8018a04:	2100      	movs	r1, #0
 8018a06:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018a08:	697b      	ldr	r3, [r7, #20]
 8018a0a:	0018      	movs	r0, r3
 8018a0c:	f7ff fe3a 	bl	8018684 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018a10:	697b      	ldr	r3, [r7, #20]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	689b      	ldr	r3, [r3, #8]
 8018a16:	2240      	movs	r2, #64	@ 0x40
 8018a18:	4013      	ands	r3, r2
 8018a1a:	2b40      	cmp	r3, #64	@ 0x40
 8018a1c:	d10a      	bne.n	8018a34 <UART_DMAError+0x64>
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	2b22      	cmp	r3, #34	@ 0x22
 8018a22:	d107      	bne.n	8018a34 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018a24:	697b      	ldr	r3, [r7, #20]
 8018a26:	225a      	movs	r2, #90	@ 0x5a
 8018a28:	2100      	movs	r1, #0
 8018a2a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018a2c:	697b      	ldr	r3, [r7, #20]
 8018a2e:	0018      	movs	r0, r3
 8018a30:	f7ff fe4c 	bl	80186cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018a34:	697b      	ldr	r3, [r7, #20]
 8018a36:	2284      	movs	r2, #132	@ 0x84
 8018a38:	589b      	ldr	r3, [r3, r2]
 8018a3a:	2210      	movs	r2, #16
 8018a3c:	431a      	orrs	r2, r3
 8018a3e:	697b      	ldr	r3, [r7, #20]
 8018a40:	2184      	movs	r1, #132	@ 0x84
 8018a42:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018a44:	697b      	ldr	r3, [r7, #20]
 8018a46:	2298      	movs	r2, #152	@ 0x98
 8018a48:	589b      	ldr	r3, [r3, r2]
 8018a4a:	697a      	ldr	r2, [r7, #20]
 8018a4c:	0010      	movs	r0, r2
 8018a4e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018a50:	46c0      	nop			@ (mov r8, r8)
 8018a52:	46bd      	mov	sp, r7
 8018a54:	b006      	add	sp, #24
 8018a56:	bd80      	pop	{r7, pc}

08018a58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018a58:	b580      	push	{r7, lr}
 8018a5a:	b084      	sub	sp, #16
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	225a      	movs	r2, #90	@ 0x5a
 8018a6a:	2100      	movs	r1, #0
 8018a6c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	2252      	movs	r2, #82	@ 0x52
 8018a72:	2100      	movs	r1, #0
 8018a74:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	2298      	movs	r2, #152	@ 0x98
 8018a7a:	589b      	ldr	r3, [r3, r2]
 8018a7c:	68fa      	ldr	r2, [r7, #12]
 8018a7e:	0010      	movs	r0, r2
 8018a80:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018a82:	46c0      	nop			@ (mov r8, r8)
 8018a84:	46bd      	mov	sp, r7
 8018a86:	b004      	add	sp, #16
 8018a88:	bd80      	pop	{r7, pc}

08018a8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018a8a:	b580      	push	{r7, lr}
 8018a8c:	b086      	sub	sp, #24
 8018a8e:	af00      	add	r7, sp, #0
 8018a90:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a92:	f3ef 8310 	mrs	r3, PRIMASK
 8018a96:	60bb      	str	r3, [r7, #8]
  return(result);
 8018a98:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018a9a:	617b      	str	r3, [r7, #20]
 8018a9c:	2301      	movs	r3, #1
 8018a9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	f383 8810 	msr	PRIMASK, r3
}
 8018aa6:	46c0      	nop			@ (mov r8, r8)
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	681a      	ldr	r2, [r3, #0]
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	2140      	movs	r1, #64	@ 0x40
 8018ab4:	438a      	bics	r2, r1
 8018ab6:	601a      	str	r2, [r3, #0]
 8018ab8:	697b      	ldr	r3, [r7, #20]
 8018aba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018abc:	693b      	ldr	r3, [r7, #16]
 8018abe:	f383 8810 	msr	PRIMASK, r3
}
 8018ac2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2220      	movs	r2, #32
 8018ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	2200      	movs	r2, #0
 8018ace:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	228c      	movs	r2, #140	@ 0x8c
 8018ad4:	589b      	ldr	r3, [r3, r2]
 8018ad6:	687a      	ldr	r2, [r7, #4]
 8018ad8:	0010      	movs	r0, r2
 8018ada:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018adc:	46c0      	nop			@ (mov r8, r8)
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	b006      	add	sp, #24
 8018ae2:	bd80      	pop	{r7, pc}

08018ae4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b094      	sub	sp, #80	@ 0x50
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8018aec:	204e      	movs	r0, #78	@ 0x4e
 8018aee:	183b      	adds	r3, r7, r0
 8018af0:	687a      	ldr	r2, [r7, #4]
 8018af2:	215c      	movs	r1, #92	@ 0x5c
 8018af4:	5a52      	ldrh	r2, [r2, r1]
 8018af6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	2280      	movs	r2, #128	@ 0x80
 8018afc:	589b      	ldr	r3, [r3, r2]
 8018afe:	2b22      	cmp	r3, #34	@ 0x22
 8018b00:	d000      	beq.n	8018b04 <UART_RxISR_8BIT+0x20>
 8018b02:	e0c2      	b.n	8018c8a <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018b0a:	214c      	movs	r1, #76	@ 0x4c
 8018b0c:	187b      	adds	r3, r7, r1
 8018b0e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018b10:	187b      	adds	r3, r7, r1
 8018b12:	881b      	ldrh	r3, [r3, #0]
 8018b14:	b2da      	uxtb	r2, r3
 8018b16:	183b      	adds	r3, r7, r0
 8018b18:	881b      	ldrh	r3, [r3, #0]
 8018b1a:	b2d9      	uxtb	r1, r3
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b20:	400a      	ands	r2, r1
 8018b22:	b2d2      	uxtb	r2, r2
 8018b24:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b2a:	1c5a      	adds	r2, r3, #1
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	225a      	movs	r2, #90	@ 0x5a
 8018b34:	5a9b      	ldrh	r3, [r3, r2]
 8018b36:	b29b      	uxth	r3, r3
 8018b38:	3b01      	subs	r3, #1
 8018b3a:	b299      	uxth	r1, r3
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	225a      	movs	r2, #90	@ 0x5a
 8018b40:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	225a      	movs	r2, #90	@ 0x5a
 8018b46:	5a9b      	ldrh	r3, [r3, r2]
 8018b48:	b29b      	uxth	r3, r3
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d000      	beq.n	8018b50 <UART_RxISR_8BIT+0x6c>
 8018b4e:	e0a4      	b.n	8018c9a <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b50:	f3ef 8310 	mrs	r3, PRIMASK
 8018b54:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018b58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018b5a:	2301      	movs	r3, #1
 8018b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b60:	f383 8810 	msr	PRIMASK, r3
}
 8018b64:	46c0      	nop			@ (mov r8, r8)
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	681a      	ldr	r2, [r3, #0]
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	494c      	ldr	r1, [pc, #304]	@ (8018ca4 <UART_RxISR_8BIT+0x1c0>)
 8018b72:	400a      	ands	r2, r1
 8018b74:	601a      	str	r2, [r3, #0]
 8018b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b7c:	f383 8810 	msr	PRIMASK, r3
}
 8018b80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b82:	f3ef 8310 	mrs	r3, PRIMASK
 8018b86:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8018b8c:	2301      	movs	r3, #1
 8018b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018b92:	f383 8810 	msr	PRIMASK, r3
}
 8018b96:	46c0      	nop			@ (mov r8, r8)
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	689a      	ldr	r2, [r3, #8]
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	2101      	movs	r1, #1
 8018ba4:	438a      	bics	r2, r1
 8018ba6:	609a      	str	r2, [r3, #8]
 8018ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018baa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bae:	f383 8810 	msr	PRIMASK, r3
}
 8018bb2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	2280      	movs	r2, #128	@ 0x80
 8018bb8:	2120      	movs	r1, #32
 8018bba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	4a36      	ldr	r2, [pc, #216]	@ (8018ca8 <UART_RxISR_8BIT+0x1c4>)
 8018bce:	4293      	cmp	r3, r2
 8018bd0:	d01f      	beq.n	8018c12 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	685a      	ldr	r2, [r3, #4]
 8018bd8:	2380      	movs	r3, #128	@ 0x80
 8018bda:	041b      	lsls	r3, r3, #16
 8018bdc:	4013      	ands	r3, r2
 8018bde:	d018      	beq.n	8018c12 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018be0:	f3ef 8310 	mrs	r3, PRIMASK
 8018be4:	61bb      	str	r3, [r7, #24]
  return(result);
 8018be6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8018bea:	2301      	movs	r3, #1
 8018bec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bee:	69fb      	ldr	r3, [r7, #28]
 8018bf0:	f383 8810 	msr	PRIMASK, r3
}
 8018bf4:	46c0      	nop			@ (mov r8, r8)
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	681a      	ldr	r2, [r3, #0]
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	492a      	ldr	r1, [pc, #168]	@ (8018cac <UART_RxISR_8BIT+0x1c8>)
 8018c02:	400a      	ands	r2, r1
 8018c04:	601a      	str	r2, [r3, #0]
 8018c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018c08:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c0a:	6a3b      	ldr	r3, [r7, #32]
 8018c0c:	f383 8810 	msr	PRIMASK, r3
}
 8018c10:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018c16:	2b01      	cmp	r3, #1
 8018c18:	d130      	bne.n	8018c7c <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	2200      	movs	r2, #0
 8018c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c20:	f3ef 8310 	mrs	r3, PRIMASK
 8018c24:	60fb      	str	r3, [r7, #12]
  return(result);
 8018c26:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018c2a:	2301      	movs	r3, #1
 8018c2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c2e:	693b      	ldr	r3, [r7, #16]
 8018c30:	f383 8810 	msr	PRIMASK, r3
}
 8018c34:	46c0      	nop			@ (mov r8, r8)
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	681a      	ldr	r2, [r3, #0]
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	2110      	movs	r1, #16
 8018c42:	438a      	bics	r2, r1
 8018c44:	601a      	str	r2, [r3, #0]
 8018c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018c48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c4a:	697b      	ldr	r3, [r7, #20]
 8018c4c:	f383 8810 	msr	PRIMASK, r3
}
 8018c50:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	69db      	ldr	r3, [r3, #28]
 8018c58:	2210      	movs	r2, #16
 8018c5a:	4013      	ands	r3, r2
 8018c5c:	2b10      	cmp	r3, #16
 8018c5e:	d103      	bne.n	8018c68 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	2210      	movs	r2, #16
 8018c66:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	22ac      	movs	r2, #172	@ 0xac
 8018c6c:	589b      	ldr	r3, [r3, r2]
 8018c6e:	687a      	ldr	r2, [r7, #4]
 8018c70:	2158      	movs	r1, #88	@ 0x58
 8018c72:	5a51      	ldrh	r1, [r2, r1]
 8018c74:	687a      	ldr	r2, [r7, #4]
 8018c76:	0010      	movs	r0, r2
 8018c78:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018c7a:	e00e      	b.n	8018c9a <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	2294      	movs	r2, #148	@ 0x94
 8018c80:	589b      	ldr	r3, [r3, r2]
 8018c82:	687a      	ldr	r2, [r7, #4]
 8018c84:	0010      	movs	r0, r2
 8018c86:	4798      	blx	r3
}
 8018c88:	e007      	b.n	8018c9a <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	699a      	ldr	r2, [r3, #24]
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	2108      	movs	r1, #8
 8018c96:	430a      	orrs	r2, r1
 8018c98:	619a      	str	r2, [r3, #24]
}
 8018c9a:	46c0      	nop			@ (mov r8, r8)
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	b014      	add	sp, #80	@ 0x50
 8018ca0:	bd80      	pop	{r7, pc}
 8018ca2:	46c0      	nop			@ (mov r8, r8)
 8018ca4:	fffffedf 	.word	0xfffffedf
 8018ca8:	40004800 	.word	0x40004800
 8018cac:	fbffffff 	.word	0xfbffffff

08018cb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b094      	sub	sp, #80	@ 0x50
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018cb8:	204e      	movs	r0, #78	@ 0x4e
 8018cba:	183b      	adds	r3, r7, r0
 8018cbc:	687a      	ldr	r2, [r7, #4]
 8018cbe:	215c      	movs	r1, #92	@ 0x5c
 8018cc0:	5a52      	ldrh	r2, [r2, r1]
 8018cc2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	2280      	movs	r2, #128	@ 0x80
 8018cc8:	589b      	ldr	r3, [r3, r2]
 8018cca:	2b22      	cmp	r3, #34	@ 0x22
 8018ccc:	d000      	beq.n	8018cd0 <UART_RxISR_16BIT+0x20>
 8018cce:	e0c2      	b.n	8018e56 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018cd6:	214c      	movs	r1, #76	@ 0x4c
 8018cd8:	187b      	adds	r3, r7, r1
 8018cda:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8018ce2:	187b      	adds	r3, r7, r1
 8018ce4:	183a      	adds	r2, r7, r0
 8018ce6:	881b      	ldrh	r3, [r3, #0]
 8018ce8:	8812      	ldrh	r2, [r2, #0]
 8018cea:	4013      	ands	r3, r2
 8018cec:	b29a      	uxth	r2, r3
 8018cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018cf0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018cf6:	1c9a      	adds	r2, r3, #2
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	225a      	movs	r2, #90	@ 0x5a
 8018d00:	5a9b      	ldrh	r3, [r3, r2]
 8018d02:	b29b      	uxth	r3, r3
 8018d04:	3b01      	subs	r3, #1
 8018d06:	b299      	uxth	r1, r3
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	225a      	movs	r2, #90	@ 0x5a
 8018d0c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	225a      	movs	r2, #90	@ 0x5a
 8018d12:	5a9b      	ldrh	r3, [r3, r2]
 8018d14:	b29b      	uxth	r3, r3
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d000      	beq.n	8018d1c <UART_RxISR_16BIT+0x6c>
 8018d1a:	e0a4      	b.n	8018e66 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8018d20:	623b      	str	r3, [r7, #32]
  return(result);
 8018d22:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8018d26:	2301      	movs	r3, #1
 8018d28:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d2c:	f383 8810 	msr	PRIMASK, r3
}
 8018d30:	46c0      	nop			@ (mov r8, r8)
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	681a      	ldr	r2, [r3, #0]
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	494c      	ldr	r1, [pc, #304]	@ (8018e70 <UART_RxISR_16BIT+0x1c0>)
 8018d3e:	400a      	ands	r2, r1
 8018d40:	601a      	str	r2, [r3, #0]
 8018d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d48:	f383 8810 	msr	PRIMASK, r3
}
 8018d4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8018d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8018d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018d56:	643b      	str	r3, [r7, #64]	@ 0x40
 8018d58:	2301      	movs	r3, #1
 8018d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018d5e:	f383 8810 	msr	PRIMASK, r3
}
 8018d62:	46c0      	nop			@ (mov r8, r8)
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	689a      	ldr	r2, [r3, #8]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	2101      	movs	r1, #1
 8018d70:	438a      	bics	r2, r1
 8018d72:	609a      	str	r2, [r3, #8]
 8018d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018d76:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018d7a:	f383 8810 	msr	PRIMASK, r3
}
 8018d7e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	2280      	movs	r2, #128	@ 0x80
 8018d84:	2120      	movs	r1, #32
 8018d86:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	2200      	movs	r2, #0
 8018d92:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	4a36      	ldr	r2, [pc, #216]	@ (8018e74 <UART_RxISR_16BIT+0x1c4>)
 8018d9a:	4293      	cmp	r3, r2
 8018d9c:	d01f      	beq.n	8018dde <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	685a      	ldr	r2, [r3, #4]
 8018da4:	2380      	movs	r3, #128	@ 0x80
 8018da6:	041b      	lsls	r3, r3, #16
 8018da8:	4013      	ands	r3, r2
 8018daa:	d018      	beq.n	8018dde <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018dac:	f3ef 8310 	mrs	r3, PRIMASK
 8018db0:	617b      	str	r3, [r7, #20]
  return(result);
 8018db2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018db6:	2301      	movs	r3, #1
 8018db8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dba:	69bb      	ldr	r3, [r7, #24]
 8018dbc:	f383 8810 	msr	PRIMASK, r3
}
 8018dc0:	46c0      	nop			@ (mov r8, r8)
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	681a      	ldr	r2, [r3, #0]
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	492a      	ldr	r1, [pc, #168]	@ (8018e78 <UART_RxISR_16BIT+0x1c8>)
 8018dce:	400a      	ands	r2, r1
 8018dd0:	601a      	str	r2, [r3, #0]
 8018dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018dd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dd6:	69fb      	ldr	r3, [r7, #28]
 8018dd8:	f383 8810 	msr	PRIMASK, r3
}
 8018ddc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018de2:	2b01      	cmp	r3, #1
 8018de4:	d130      	bne.n	8018e48 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	2200      	movs	r2, #0
 8018dea:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018dec:	f3ef 8310 	mrs	r3, PRIMASK
 8018df0:	60bb      	str	r3, [r7, #8]
  return(result);
 8018df2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018df4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018df6:	2301      	movs	r3, #1
 8018df8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	f383 8810 	msr	PRIMASK, r3
}
 8018e00:	46c0      	nop			@ (mov r8, r8)
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	681a      	ldr	r2, [r3, #0]
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	2110      	movs	r1, #16
 8018e0e:	438a      	bics	r2, r1
 8018e10:	601a      	str	r2, [r3, #0]
 8018e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e16:	693b      	ldr	r3, [r7, #16]
 8018e18:	f383 8810 	msr	PRIMASK, r3
}
 8018e1c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	69db      	ldr	r3, [r3, #28]
 8018e24:	2210      	movs	r2, #16
 8018e26:	4013      	ands	r3, r2
 8018e28:	2b10      	cmp	r3, #16
 8018e2a:	d103      	bne.n	8018e34 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	2210      	movs	r2, #16
 8018e32:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	22ac      	movs	r2, #172	@ 0xac
 8018e38:	589b      	ldr	r3, [r3, r2]
 8018e3a:	687a      	ldr	r2, [r7, #4]
 8018e3c:	2158      	movs	r1, #88	@ 0x58
 8018e3e:	5a51      	ldrh	r1, [r2, r1]
 8018e40:	687a      	ldr	r2, [r7, #4]
 8018e42:	0010      	movs	r0, r2
 8018e44:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018e46:	e00e      	b.n	8018e66 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	2294      	movs	r2, #148	@ 0x94
 8018e4c:	589b      	ldr	r3, [r3, r2]
 8018e4e:	687a      	ldr	r2, [r7, #4]
 8018e50:	0010      	movs	r0, r2
 8018e52:	4798      	blx	r3
}
 8018e54:	e007      	b.n	8018e66 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	699a      	ldr	r2, [r3, #24]
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	2108      	movs	r1, #8
 8018e62:	430a      	orrs	r2, r1
 8018e64:	619a      	str	r2, [r3, #24]
}
 8018e66:	46c0      	nop			@ (mov r8, r8)
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	b014      	add	sp, #80	@ 0x50
 8018e6c:	bd80      	pop	{r7, pc}
 8018e6e:	46c0      	nop			@ (mov r8, r8)
 8018e70:	fffffedf 	.word	0xfffffedf
 8018e74:	40004800 	.word	0x40004800
 8018e78:	fbffffff 	.word	0xfbffffff

08018e7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b082      	sub	sp, #8
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018e84:	46c0      	nop			@ (mov r8, r8)
 8018e86:	46bd      	mov	sp, r7
 8018e88:	b002      	add	sp, #8
 8018e8a:	bd80      	pop	{r7, pc}

08018e8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b084      	sub	sp, #16
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	2244      	movs	r2, #68	@ 0x44
 8018e98:	2100      	movs	r1, #0
 8018e9a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018e9c:	4b05      	ldr	r3, [pc, #20]	@ (8018eb4 <USB_EnableGlobalInt+0x28>)
 8018e9e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8018ea0:	68fb      	ldr	r3, [r7, #12]
 8018ea2:	b299      	uxth	r1, r3
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2240      	movs	r2, #64	@ 0x40
 8018ea8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018eaa:	2300      	movs	r3, #0
}
 8018eac:	0018      	movs	r0, r3
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	b004      	add	sp, #16
 8018eb2:	bd80      	pop	{r7, pc}
 8018eb4:	0000bf80 	.word	0x0000bf80

08018eb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018eb8:	b580      	push	{r7, lr}
 8018eba:	b084      	sub	sp, #16
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018ec0:	4b09      	ldr	r3, [pc, #36]	@ (8018ee8 <USB_DisableGlobalInt+0x30>)
 8018ec2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	2240      	movs	r2, #64	@ 0x40
 8018ec8:	5a9b      	ldrh	r3, [r3, r2]
 8018eca:	b29b      	uxth	r3, r3
 8018ecc:	68fa      	ldr	r2, [r7, #12]
 8018ece:	b292      	uxth	r2, r2
 8018ed0:	43d2      	mvns	r2, r2
 8018ed2:	b292      	uxth	r2, r2
 8018ed4:	4013      	ands	r3, r2
 8018ed6:	b299      	uxth	r1, r3
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	2240      	movs	r2, #64	@ 0x40
 8018edc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018ede:	2300      	movs	r3, #0
}
 8018ee0:	0018      	movs	r0, r3
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	b004      	add	sp, #16
 8018ee6:	bd80      	pop	{r7, pc}
 8018ee8:	0000bf80 	.word	0x0000bf80

08018eec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8018eec:	b084      	sub	sp, #16
 8018eee:	b590      	push	{r4, r7, lr}
 8018ef0:	b083      	sub	sp, #12
 8018ef2:	af00      	add	r7, sp, #0
 8018ef4:	6078      	str	r0, [r7, #4]
 8018ef6:	2004      	movs	r0, #4
 8018ef8:	2410      	movs	r4, #16
 8018efa:	1900      	adds	r0, r0, r4
 8018efc:	2408      	movs	r4, #8
 8018efe:	46a4      	mov	ip, r4
 8018f00:	44bc      	add	ip, r7
 8018f02:	4460      	add	r0, ip
 8018f04:	6001      	str	r1, [r0, #0]
 8018f06:	6042      	str	r2, [r0, #4]
 8018f08:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	2240      	movs	r2, #64	@ 0x40
 8018f0e:	2101      	movs	r1, #1
 8018f10:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	2240      	movs	r2, #64	@ 0x40
 8018f16:	2100      	movs	r1, #0
 8018f18:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	2244      	movs	r2, #68	@ 0x44
 8018f1e:	2100      	movs	r1, #0
 8018f20:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	2250      	movs	r2, #80	@ 0x50
 8018f26:	2100      	movs	r1, #0
 8018f28:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018f2a:	2300      	movs	r3, #0
}
 8018f2c:	0018      	movs	r0, r3
 8018f2e:	46bd      	mov	sp, r7
 8018f30:	b003      	add	sp, #12
 8018f32:	bc90      	pop	{r4, r7}
 8018f34:	bc08      	pop	{r3}
 8018f36:	b004      	add	sp, #16
 8018f38:	4718      	bx	r3
	...

08018f3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b09c      	sub	sp, #112	@ 0x70
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	6078      	str	r0, [r7, #4]
 8018f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8018f46:	236f      	movs	r3, #111	@ 0x6f
 8018f48:	18fb      	adds	r3, r7, r3
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8018f4e:	687a      	ldr	r2, [r7, #4]
 8018f50:	683b      	ldr	r3, [r7, #0]
 8018f52:	781b      	ldrb	r3, [r3, #0]
 8018f54:	009b      	lsls	r3, r3, #2
 8018f56:	18d3      	adds	r3, r2, r3
 8018f58:	881b      	ldrh	r3, [r3, #0]
 8018f5a:	b29a      	uxth	r2, r3
 8018f5c:	236c      	movs	r3, #108	@ 0x6c
 8018f5e:	18fb      	adds	r3, r7, r3
 8018f60:	49a3      	ldr	r1, [pc, #652]	@ (80191f0 <USB_ActivateEndpoint+0x2b4>)
 8018f62:	400a      	ands	r2, r1
 8018f64:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8018f66:	683b      	ldr	r3, [r7, #0]
 8018f68:	78db      	ldrb	r3, [r3, #3]
 8018f6a:	2b03      	cmp	r3, #3
 8018f6c:	d017      	beq.n	8018f9e <USB_ActivateEndpoint+0x62>
 8018f6e:	dc28      	bgt.n	8018fc2 <USB_ActivateEndpoint+0x86>
 8018f70:	2b02      	cmp	r3, #2
 8018f72:	d00e      	beq.n	8018f92 <USB_ActivateEndpoint+0x56>
 8018f74:	dc25      	bgt.n	8018fc2 <USB_ActivateEndpoint+0x86>
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d002      	beq.n	8018f80 <USB_ActivateEndpoint+0x44>
 8018f7a:	2b01      	cmp	r3, #1
 8018f7c:	d018      	beq.n	8018fb0 <USB_ActivateEndpoint+0x74>
 8018f7e:	e020      	b.n	8018fc2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8018f80:	226c      	movs	r2, #108	@ 0x6c
 8018f82:	18bb      	adds	r3, r7, r2
 8018f84:	18ba      	adds	r2, r7, r2
 8018f86:	8812      	ldrh	r2, [r2, #0]
 8018f88:	2180      	movs	r1, #128	@ 0x80
 8018f8a:	0089      	lsls	r1, r1, #2
 8018f8c:	430a      	orrs	r2, r1
 8018f8e:	801a      	strh	r2, [r3, #0]
      break;
 8018f90:	e01c      	b.n	8018fcc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8018f92:	226c      	movs	r2, #108	@ 0x6c
 8018f94:	18bb      	adds	r3, r7, r2
 8018f96:	18ba      	adds	r2, r7, r2
 8018f98:	8812      	ldrh	r2, [r2, #0]
 8018f9a:	801a      	strh	r2, [r3, #0]
      break;
 8018f9c:	e016      	b.n	8018fcc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8018f9e:	226c      	movs	r2, #108	@ 0x6c
 8018fa0:	18bb      	adds	r3, r7, r2
 8018fa2:	18ba      	adds	r2, r7, r2
 8018fa4:	8812      	ldrh	r2, [r2, #0]
 8018fa6:	21c0      	movs	r1, #192	@ 0xc0
 8018fa8:	00c9      	lsls	r1, r1, #3
 8018faa:	430a      	orrs	r2, r1
 8018fac:	801a      	strh	r2, [r3, #0]
      break;
 8018fae:	e00d      	b.n	8018fcc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8018fb0:	226c      	movs	r2, #108	@ 0x6c
 8018fb2:	18bb      	adds	r3, r7, r2
 8018fb4:	18ba      	adds	r2, r7, r2
 8018fb6:	8812      	ldrh	r2, [r2, #0]
 8018fb8:	2180      	movs	r1, #128	@ 0x80
 8018fba:	00c9      	lsls	r1, r1, #3
 8018fbc:	430a      	orrs	r2, r1
 8018fbe:	801a      	strh	r2, [r3, #0]
      break;
 8018fc0:	e004      	b.n	8018fcc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8018fc2:	236f      	movs	r3, #111	@ 0x6f
 8018fc4:	18fb      	adds	r3, r7, r3
 8018fc6:	2201      	movs	r2, #1
 8018fc8:	701a      	strb	r2, [r3, #0]
      break;
 8018fca:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8018fcc:	687a      	ldr	r2, [r7, #4]
 8018fce:	683b      	ldr	r3, [r7, #0]
 8018fd0:	781b      	ldrb	r3, [r3, #0]
 8018fd2:	009b      	lsls	r3, r3, #2
 8018fd4:	18d3      	adds	r3, r2, r3
 8018fd6:	226c      	movs	r2, #108	@ 0x6c
 8018fd8:	18ba      	adds	r2, r7, r2
 8018fda:	8812      	ldrh	r2, [r2, #0]
 8018fdc:	4985      	ldr	r1, [pc, #532]	@ (80191f4 <USB_ActivateEndpoint+0x2b8>)
 8018fde:	430a      	orrs	r2, r1
 8018fe0:	b292      	uxth	r2, r2
 8018fe2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8018fe4:	687a      	ldr	r2, [r7, #4]
 8018fe6:	683b      	ldr	r3, [r7, #0]
 8018fe8:	781b      	ldrb	r3, [r3, #0]
 8018fea:	009b      	lsls	r3, r3, #2
 8018fec:	18d3      	adds	r3, r2, r3
 8018fee:	881b      	ldrh	r3, [r3, #0]
 8018ff0:	b29b      	uxth	r3, r3
 8018ff2:	b21b      	sxth	r3, r3
 8018ff4:	4a80      	ldr	r2, [pc, #512]	@ (80191f8 <USB_ActivateEndpoint+0x2bc>)
 8018ff6:	4013      	ands	r3, r2
 8018ff8:	b21a      	sxth	r2, r3
 8018ffa:	683b      	ldr	r3, [r7, #0]
 8018ffc:	781b      	ldrb	r3, [r3, #0]
 8018ffe:	b21b      	sxth	r3, r3
 8019000:	4313      	orrs	r3, r2
 8019002:	b21a      	sxth	r2, r3
 8019004:	2166      	movs	r1, #102	@ 0x66
 8019006:	187b      	adds	r3, r7, r1
 8019008:	801a      	strh	r2, [r3, #0]
 801900a:	687a      	ldr	r2, [r7, #4]
 801900c:	683b      	ldr	r3, [r7, #0]
 801900e:	781b      	ldrb	r3, [r3, #0]
 8019010:	009b      	lsls	r3, r3, #2
 8019012:	18d3      	adds	r3, r2, r3
 8019014:	187a      	adds	r2, r7, r1
 8019016:	8812      	ldrh	r2, [r2, #0]
 8019018:	4976      	ldr	r1, [pc, #472]	@ (80191f4 <USB_ActivateEndpoint+0x2b8>)
 801901a:	430a      	orrs	r2, r1
 801901c:	b292      	uxth	r2, r2
 801901e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8019020:	683b      	ldr	r3, [r7, #0]
 8019022:	7b1b      	ldrb	r3, [r3, #12]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d000      	beq.n	801902a <USB_ActivateEndpoint+0xee>
 8019028:	e178      	b.n	801931c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801902a:	683b      	ldr	r3, [r7, #0]
 801902c:	785b      	ldrb	r3, [r3, #1]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d100      	bne.n	8019034 <USB_ActivateEndpoint+0xf8>
 8019032:	e07a      	b.n	801912a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	61bb      	str	r3, [r7, #24]
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	2250      	movs	r2, #80	@ 0x50
 801903c:	5a9b      	ldrh	r3, [r3, r2]
 801903e:	b29b      	uxth	r3, r3
 8019040:	001a      	movs	r2, r3
 8019042:	69bb      	ldr	r3, [r7, #24]
 8019044:	189b      	adds	r3, r3, r2
 8019046:	61bb      	str	r3, [r7, #24]
 8019048:	683b      	ldr	r3, [r7, #0]
 801904a:	781b      	ldrb	r3, [r3, #0]
 801904c:	00da      	lsls	r2, r3, #3
 801904e:	69bb      	ldr	r3, [r7, #24]
 8019050:	18d3      	adds	r3, r2, r3
 8019052:	2280      	movs	r2, #128	@ 0x80
 8019054:	00d2      	lsls	r2, r2, #3
 8019056:	4694      	mov	ip, r2
 8019058:	4463      	add	r3, ip
 801905a:	617b      	str	r3, [r7, #20]
 801905c:	683b      	ldr	r3, [r7, #0]
 801905e:	88db      	ldrh	r3, [r3, #6]
 8019060:	085b      	lsrs	r3, r3, #1
 8019062:	b29b      	uxth	r3, r3
 8019064:	18db      	adds	r3, r3, r3
 8019066:	b29a      	uxth	r2, r3
 8019068:	697b      	ldr	r3, [r7, #20]
 801906a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801906c:	687a      	ldr	r2, [r7, #4]
 801906e:	683b      	ldr	r3, [r7, #0]
 8019070:	781b      	ldrb	r3, [r3, #0]
 8019072:	009b      	lsls	r3, r3, #2
 8019074:	18d2      	adds	r2, r2, r3
 8019076:	2112      	movs	r1, #18
 8019078:	187b      	adds	r3, r7, r1
 801907a:	8812      	ldrh	r2, [r2, #0]
 801907c:	801a      	strh	r2, [r3, #0]
 801907e:	187b      	adds	r3, r7, r1
 8019080:	881b      	ldrh	r3, [r3, #0]
 8019082:	2240      	movs	r2, #64	@ 0x40
 8019084:	4013      	ands	r3, r2
 8019086:	d016      	beq.n	80190b6 <USB_ActivateEndpoint+0x17a>
 8019088:	687a      	ldr	r2, [r7, #4]
 801908a:	683b      	ldr	r3, [r7, #0]
 801908c:	781b      	ldrb	r3, [r3, #0]
 801908e:	009b      	lsls	r3, r3, #2
 8019090:	18d3      	adds	r3, r2, r3
 8019092:	881b      	ldrh	r3, [r3, #0]
 8019094:	b29a      	uxth	r2, r3
 8019096:	2010      	movs	r0, #16
 8019098:	183b      	adds	r3, r7, r0
 801909a:	4957      	ldr	r1, [pc, #348]	@ (80191f8 <USB_ActivateEndpoint+0x2bc>)
 801909c:	400a      	ands	r2, r1
 801909e:	801a      	strh	r2, [r3, #0]
 80190a0:	687a      	ldr	r2, [r7, #4]
 80190a2:	683b      	ldr	r3, [r7, #0]
 80190a4:	781b      	ldrb	r3, [r3, #0]
 80190a6:	009b      	lsls	r3, r3, #2
 80190a8:	18d3      	adds	r3, r2, r3
 80190aa:	183a      	adds	r2, r7, r0
 80190ac:	8812      	ldrh	r2, [r2, #0]
 80190ae:	4953      	ldr	r1, [pc, #332]	@ (80191fc <USB_ActivateEndpoint+0x2c0>)
 80190b0:	430a      	orrs	r2, r1
 80190b2:	b292      	uxth	r2, r2
 80190b4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80190b6:	683b      	ldr	r3, [r7, #0]
 80190b8:	78db      	ldrb	r3, [r3, #3]
 80190ba:	2b01      	cmp	r3, #1
 80190bc:	d01d      	beq.n	80190fa <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80190be:	687a      	ldr	r2, [r7, #4]
 80190c0:	683b      	ldr	r3, [r7, #0]
 80190c2:	781b      	ldrb	r3, [r3, #0]
 80190c4:	009b      	lsls	r3, r3, #2
 80190c6:	18d3      	adds	r3, r2, r3
 80190c8:	881b      	ldrh	r3, [r3, #0]
 80190ca:	b29a      	uxth	r2, r3
 80190cc:	200c      	movs	r0, #12
 80190ce:	183b      	adds	r3, r7, r0
 80190d0:	494b      	ldr	r1, [pc, #300]	@ (8019200 <USB_ActivateEndpoint+0x2c4>)
 80190d2:	400a      	ands	r2, r1
 80190d4:	801a      	strh	r2, [r3, #0]
 80190d6:	183b      	adds	r3, r7, r0
 80190d8:	183a      	adds	r2, r7, r0
 80190da:	8812      	ldrh	r2, [r2, #0]
 80190dc:	2120      	movs	r1, #32
 80190de:	404a      	eors	r2, r1
 80190e0:	801a      	strh	r2, [r3, #0]
 80190e2:	687a      	ldr	r2, [r7, #4]
 80190e4:	683b      	ldr	r3, [r7, #0]
 80190e6:	781b      	ldrb	r3, [r3, #0]
 80190e8:	009b      	lsls	r3, r3, #2
 80190ea:	18d3      	adds	r3, r2, r3
 80190ec:	183a      	adds	r2, r7, r0
 80190ee:	8812      	ldrh	r2, [r2, #0]
 80190f0:	4940      	ldr	r1, [pc, #256]	@ (80191f4 <USB_ActivateEndpoint+0x2b8>)
 80190f2:	430a      	orrs	r2, r1
 80190f4:	b292      	uxth	r2, r2
 80190f6:	801a      	strh	r2, [r3, #0]
 80190f8:	e2b4      	b.n	8019664 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80190fa:	687a      	ldr	r2, [r7, #4]
 80190fc:	683b      	ldr	r3, [r7, #0]
 80190fe:	781b      	ldrb	r3, [r3, #0]
 8019100:	009b      	lsls	r3, r3, #2
 8019102:	18d3      	adds	r3, r2, r3
 8019104:	881b      	ldrh	r3, [r3, #0]
 8019106:	b29a      	uxth	r2, r3
 8019108:	200e      	movs	r0, #14
 801910a:	183b      	adds	r3, r7, r0
 801910c:	493c      	ldr	r1, [pc, #240]	@ (8019200 <USB_ActivateEndpoint+0x2c4>)
 801910e:	400a      	ands	r2, r1
 8019110:	801a      	strh	r2, [r3, #0]
 8019112:	687a      	ldr	r2, [r7, #4]
 8019114:	683b      	ldr	r3, [r7, #0]
 8019116:	781b      	ldrb	r3, [r3, #0]
 8019118:	009b      	lsls	r3, r3, #2
 801911a:	18d3      	adds	r3, r2, r3
 801911c:	183a      	adds	r2, r7, r0
 801911e:	8812      	ldrh	r2, [r2, #0]
 8019120:	4934      	ldr	r1, [pc, #208]	@ (80191f4 <USB_ActivateEndpoint+0x2b8>)
 8019122:	430a      	orrs	r2, r1
 8019124:	b292      	uxth	r2, r2
 8019126:	801a      	strh	r2, [r3, #0]
 8019128:	e29c      	b.n	8019664 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	633b      	str	r3, [r7, #48]	@ 0x30
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	2250      	movs	r2, #80	@ 0x50
 8019132:	5a9b      	ldrh	r3, [r3, r2]
 8019134:	b29b      	uxth	r3, r3
 8019136:	001a      	movs	r2, r3
 8019138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801913a:	189b      	adds	r3, r3, r2
 801913c:	633b      	str	r3, [r7, #48]	@ 0x30
 801913e:	683b      	ldr	r3, [r7, #0]
 8019140:	781b      	ldrb	r3, [r3, #0]
 8019142:	00da      	lsls	r2, r3, #3
 8019144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019146:	18d3      	adds	r3, r2, r3
 8019148:	4a2e      	ldr	r2, [pc, #184]	@ (8019204 <USB_ActivateEndpoint+0x2c8>)
 801914a:	4694      	mov	ip, r2
 801914c:	4463      	add	r3, ip
 801914e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019150:	683b      	ldr	r3, [r7, #0]
 8019152:	88db      	ldrh	r3, [r3, #6]
 8019154:	085b      	lsrs	r3, r3, #1
 8019156:	b29b      	uxth	r3, r3
 8019158:	18db      	adds	r3, r3, r3
 801915a:	b29a      	uxth	r2, r3
 801915c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801915e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	2250      	movs	r2, #80	@ 0x50
 8019168:	5a9b      	ldrh	r3, [r3, r2]
 801916a:	b29b      	uxth	r3, r3
 801916c:	001a      	movs	r2, r3
 801916e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019170:	189b      	adds	r3, r3, r2
 8019172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019174:	683b      	ldr	r3, [r7, #0]
 8019176:	781b      	ldrb	r3, [r3, #0]
 8019178:	00da      	lsls	r2, r3, #3
 801917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801917c:	18d3      	adds	r3, r2, r3
 801917e:	4a22      	ldr	r2, [pc, #136]	@ (8019208 <USB_ActivateEndpoint+0x2cc>)
 8019180:	4694      	mov	ip, r2
 8019182:	4463      	add	r3, ip
 8019184:	627b      	str	r3, [r7, #36]	@ 0x24
 8019186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019188:	881b      	ldrh	r3, [r3, #0]
 801918a:	b29b      	uxth	r3, r3
 801918c:	059b      	lsls	r3, r3, #22
 801918e:	0d9b      	lsrs	r3, r3, #22
 8019190:	b29a      	uxth	r2, r3
 8019192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019194:	801a      	strh	r2, [r3, #0]
 8019196:	683b      	ldr	r3, [r7, #0]
 8019198:	691b      	ldr	r3, [r3, #16]
 801919a:	2b3e      	cmp	r3, #62	@ 0x3e
 801919c:	d91a      	bls.n	80191d4 <USB_ActivateEndpoint+0x298>
 801919e:	683b      	ldr	r3, [r7, #0]
 80191a0:	691b      	ldr	r3, [r3, #16]
 80191a2:	095b      	lsrs	r3, r3, #5
 80191a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80191a6:	683b      	ldr	r3, [r7, #0]
 80191a8:	691b      	ldr	r3, [r3, #16]
 80191aa:	221f      	movs	r2, #31
 80191ac:	4013      	ands	r3, r2
 80191ae:	d102      	bne.n	80191b6 <USB_ActivateEndpoint+0x27a>
 80191b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80191b2:	3b01      	subs	r3, #1
 80191b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80191b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191b8:	881b      	ldrh	r3, [r3, #0]
 80191ba:	b29a      	uxth	r2, r3
 80191bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80191be:	b29b      	uxth	r3, r3
 80191c0:	029b      	lsls	r3, r3, #10
 80191c2:	b29b      	uxth	r3, r3
 80191c4:	4313      	orrs	r3, r2
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	4a10      	ldr	r2, [pc, #64]	@ (801920c <USB_ActivateEndpoint+0x2d0>)
 80191ca:	4313      	orrs	r3, r2
 80191cc:	b29a      	uxth	r2, r3
 80191ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191d0:	801a      	strh	r2, [r3, #0]
 80191d2:	e034      	b.n	801923e <USB_ActivateEndpoint+0x302>
 80191d4:	683b      	ldr	r3, [r7, #0]
 80191d6:	691b      	ldr	r3, [r3, #16]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d119      	bne.n	8019210 <USB_ActivateEndpoint+0x2d4>
 80191dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191de:	881b      	ldrh	r3, [r3, #0]
 80191e0:	b29b      	uxth	r3, r3
 80191e2:	4a0a      	ldr	r2, [pc, #40]	@ (801920c <USB_ActivateEndpoint+0x2d0>)
 80191e4:	4313      	orrs	r3, r2
 80191e6:	b29a      	uxth	r2, r3
 80191e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191ea:	801a      	strh	r2, [r3, #0]
 80191ec:	e027      	b.n	801923e <USB_ActivateEndpoint+0x302>
 80191ee:	46c0      	nop			@ (mov r8, r8)
 80191f0:	ffff898f 	.word	0xffff898f
 80191f4:	ffff8080 	.word	0xffff8080
 80191f8:	ffff8f8f 	.word	0xffff8f8f
 80191fc:	ffff80c0 	.word	0xffff80c0
 8019200:	ffff8fbf 	.word	0xffff8fbf
 8019204:	00000404 	.word	0x00000404
 8019208:	00000406 	.word	0x00000406
 801920c:	ffff8000 	.word	0xffff8000
 8019210:	683b      	ldr	r3, [r7, #0]
 8019212:	691b      	ldr	r3, [r3, #16]
 8019214:	085b      	lsrs	r3, r3, #1
 8019216:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019218:	683b      	ldr	r3, [r7, #0]
 801921a:	691b      	ldr	r3, [r3, #16]
 801921c:	2201      	movs	r2, #1
 801921e:	4013      	ands	r3, r2
 8019220:	d002      	beq.n	8019228 <USB_ActivateEndpoint+0x2ec>
 8019222:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019224:	3301      	adds	r3, #1
 8019226:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801922a:	881b      	ldrh	r3, [r3, #0]
 801922c:	b29a      	uxth	r2, r3
 801922e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019230:	b29b      	uxth	r3, r3
 8019232:	029b      	lsls	r3, r3, #10
 8019234:	b29b      	uxth	r3, r3
 8019236:	4313      	orrs	r3, r2
 8019238:	b29a      	uxth	r2, r3
 801923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801923c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801923e:	687a      	ldr	r2, [r7, #4]
 8019240:	683b      	ldr	r3, [r7, #0]
 8019242:	781b      	ldrb	r3, [r3, #0]
 8019244:	009b      	lsls	r3, r3, #2
 8019246:	18d2      	adds	r2, r2, r3
 8019248:	2122      	movs	r1, #34	@ 0x22
 801924a:	187b      	adds	r3, r7, r1
 801924c:	8812      	ldrh	r2, [r2, #0]
 801924e:	801a      	strh	r2, [r3, #0]
 8019250:	187b      	adds	r3, r7, r1
 8019252:	881a      	ldrh	r2, [r3, #0]
 8019254:	2380      	movs	r3, #128	@ 0x80
 8019256:	01db      	lsls	r3, r3, #7
 8019258:	4013      	ands	r3, r2
 801925a:	d016      	beq.n	801928a <USB_ActivateEndpoint+0x34e>
 801925c:	687a      	ldr	r2, [r7, #4]
 801925e:	683b      	ldr	r3, [r7, #0]
 8019260:	781b      	ldrb	r3, [r3, #0]
 8019262:	009b      	lsls	r3, r3, #2
 8019264:	18d3      	adds	r3, r2, r3
 8019266:	881b      	ldrh	r3, [r3, #0]
 8019268:	b29a      	uxth	r2, r3
 801926a:	2020      	movs	r0, #32
 801926c:	183b      	adds	r3, r7, r0
 801926e:	49dd      	ldr	r1, [pc, #884]	@ (80195e4 <USB_ActivateEndpoint+0x6a8>)
 8019270:	400a      	ands	r2, r1
 8019272:	801a      	strh	r2, [r3, #0]
 8019274:	687a      	ldr	r2, [r7, #4]
 8019276:	683b      	ldr	r3, [r7, #0]
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	009b      	lsls	r3, r3, #2
 801927c:	18d3      	adds	r3, r2, r3
 801927e:	183a      	adds	r2, r7, r0
 8019280:	8812      	ldrh	r2, [r2, #0]
 8019282:	49d9      	ldr	r1, [pc, #868]	@ (80195e8 <USB_ActivateEndpoint+0x6ac>)
 8019284:	430a      	orrs	r2, r1
 8019286:	b292      	uxth	r2, r2
 8019288:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801928a:	683b      	ldr	r3, [r7, #0]
 801928c:	781b      	ldrb	r3, [r3, #0]
 801928e:	2b00      	cmp	r3, #0
 8019290:	d125      	bne.n	80192de <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019292:	687a      	ldr	r2, [r7, #4]
 8019294:	683b      	ldr	r3, [r7, #0]
 8019296:	781b      	ldrb	r3, [r3, #0]
 8019298:	009b      	lsls	r3, r3, #2
 801929a:	18d3      	adds	r3, r2, r3
 801929c:	881b      	ldrh	r3, [r3, #0]
 801929e:	b29a      	uxth	r2, r3
 80192a0:	201c      	movs	r0, #28
 80192a2:	183b      	adds	r3, r7, r0
 80192a4:	49d1      	ldr	r1, [pc, #836]	@ (80195ec <USB_ActivateEndpoint+0x6b0>)
 80192a6:	400a      	ands	r2, r1
 80192a8:	801a      	strh	r2, [r3, #0]
 80192aa:	183b      	adds	r3, r7, r0
 80192ac:	183a      	adds	r2, r7, r0
 80192ae:	8812      	ldrh	r2, [r2, #0]
 80192b0:	2180      	movs	r1, #128	@ 0x80
 80192b2:	0149      	lsls	r1, r1, #5
 80192b4:	404a      	eors	r2, r1
 80192b6:	801a      	strh	r2, [r3, #0]
 80192b8:	183b      	adds	r3, r7, r0
 80192ba:	183a      	adds	r2, r7, r0
 80192bc:	8812      	ldrh	r2, [r2, #0]
 80192be:	2180      	movs	r1, #128	@ 0x80
 80192c0:	0189      	lsls	r1, r1, #6
 80192c2:	404a      	eors	r2, r1
 80192c4:	801a      	strh	r2, [r3, #0]
 80192c6:	687a      	ldr	r2, [r7, #4]
 80192c8:	683b      	ldr	r3, [r7, #0]
 80192ca:	781b      	ldrb	r3, [r3, #0]
 80192cc:	009b      	lsls	r3, r3, #2
 80192ce:	18d3      	adds	r3, r2, r3
 80192d0:	183a      	adds	r2, r7, r0
 80192d2:	8812      	ldrh	r2, [r2, #0]
 80192d4:	49c6      	ldr	r1, [pc, #792]	@ (80195f0 <USB_ActivateEndpoint+0x6b4>)
 80192d6:	430a      	orrs	r2, r1
 80192d8:	b292      	uxth	r2, r2
 80192da:	801a      	strh	r2, [r3, #0]
 80192dc:	e1c2      	b.n	8019664 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80192de:	687a      	ldr	r2, [r7, #4]
 80192e0:	683b      	ldr	r3, [r7, #0]
 80192e2:	781b      	ldrb	r3, [r3, #0]
 80192e4:	009b      	lsls	r3, r3, #2
 80192e6:	18d3      	adds	r3, r2, r3
 80192e8:	881b      	ldrh	r3, [r3, #0]
 80192ea:	b29a      	uxth	r2, r3
 80192ec:	201e      	movs	r0, #30
 80192ee:	183b      	adds	r3, r7, r0
 80192f0:	49be      	ldr	r1, [pc, #760]	@ (80195ec <USB_ActivateEndpoint+0x6b0>)
 80192f2:	400a      	ands	r2, r1
 80192f4:	801a      	strh	r2, [r3, #0]
 80192f6:	183b      	adds	r3, r7, r0
 80192f8:	183a      	adds	r2, r7, r0
 80192fa:	8812      	ldrh	r2, [r2, #0]
 80192fc:	2180      	movs	r1, #128	@ 0x80
 80192fe:	0189      	lsls	r1, r1, #6
 8019300:	404a      	eors	r2, r1
 8019302:	801a      	strh	r2, [r3, #0]
 8019304:	687a      	ldr	r2, [r7, #4]
 8019306:	683b      	ldr	r3, [r7, #0]
 8019308:	781b      	ldrb	r3, [r3, #0]
 801930a:	009b      	lsls	r3, r3, #2
 801930c:	18d3      	adds	r3, r2, r3
 801930e:	183a      	adds	r2, r7, r0
 8019310:	8812      	ldrh	r2, [r2, #0]
 8019312:	49b7      	ldr	r1, [pc, #732]	@ (80195f0 <USB_ActivateEndpoint+0x6b4>)
 8019314:	430a      	orrs	r2, r1
 8019316:	b292      	uxth	r2, r2
 8019318:	801a      	strh	r2, [r3, #0]
 801931a:	e1a3      	b.n	8019664 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801931c:	683b      	ldr	r3, [r7, #0]
 801931e:	78db      	ldrb	r3, [r3, #3]
 8019320:	2b02      	cmp	r3, #2
 8019322:	d117      	bne.n	8019354 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019324:	687a      	ldr	r2, [r7, #4]
 8019326:	683b      	ldr	r3, [r7, #0]
 8019328:	781b      	ldrb	r3, [r3, #0]
 801932a:	009b      	lsls	r3, r3, #2
 801932c:	18d3      	adds	r3, r2, r3
 801932e:	881b      	ldrh	r3, [r3, #0]
 8019330:	b29a      	uxth	r2, r3
 8019332:	2062      	movs	r0, #98	@ 0x62
 8019334:	183b      	adds	r3, r7, r0
 8019336:	49ab      	ldr	r1, [pc, #684]	@ (80195e4 <USB_ActivateEndpoint+0x6a8>)
 8019338:	400a      	ands	r2, r1
 801933a:	801a      	strh	r2, [r3, #0]
 801933c:	687a      	ldr	r2, [r7, #4]
 801933e:	683b      	ldr	r3, [r7, #0]
 8019340:	781b      	ldrb	r3, [r3, #0]
 8019342:	009b      	lsls	r3, r3, #2
 8019344:	18d3      	adds	r3, r2, r3
 8019346:	183a      	adds	r2, r7, r0
 8019348:	8812      	ldrh	r2, [r2, #0]
 801934a:	49aa      	ldr	r1, [pc, #680]	@ (80195f4 <USB_ActivateEndpoint+0x6b8>)
 801934c:	430a      	orrs	r2, r1
 801934e:	b292      	uxth	r2, r2
 8019350:	801a      	strh	r2, [r3, #0]
 8019352:	e016      	b.n	8019382 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8019354:	687a      	ldr	r2, [r7, #4]
 8019356:	683b      	ldr	r3, [r7, #0]
 8019358:	781b      	ldrb	r3, [r3, #0]
 801935a:	009b      	lsls	r3, r3, #2
 801935c:	18d3      	adds	r3, r2, r3
 801935e:	881b      	ldrh	r3, [r3, #0]
 8019360:	b29a      	uxth	r2, r3
 8019362:	2064      	movs	r0, #100	@ 0x64
 8019364:	183b      	adds	r3, r7, r0
 8019366:	49a4      	ldr	r1, [pc, #656]	@ (80195f8 <USB_ActivateEndpoint+0x6bc>)
 8019368:	400a      	ands	r2, r1
 801936a:	801a      	strh	r2, [r3, #0]
 801936c:	687a      	ldr	r2, [r7, #4]
 801936e:	683b      	ldr	r3, [r7, #0]
 8019370:	781b      	ldrb	r3, [r3, #0]
 8019372:	009b      	lsls	r3, r3, #2
 8019374:	18d3      	adds	r3, r2, r3
 8019376:	183a      	adds	r2, r7, r0
 8019378:	8812      	ldrh	r2, [r2, #0]
 801937a:	499d      	ldr	r1, [pc, #628]	@ (80195f0 <USB_ActivateEndpoint+0x6b4>)
 801937c:	430a      	orrs	r2, r1
 801937e:	b292      	uxth	r2, r2
 8019380:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	2250      	movs	r2, #80	@ 0x50
 801938a:	5a9b      	ldrh	r3, [r3, r2]
 801938c:	b29b      	uxth	r3, r3
 801938e:	001a      	movs	r2, r3
 8019390:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019392:	189b      	adds	r3, r3, r2
 8019394:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019396:	683b      	ldr	r3, [r7, #0]
 8019398:	781b      	ldrb	r3, [r3, #0]
 801939a:	00da      	lsls	r2, r3, #3
 801939c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801939e:	18d3      	adds	r3, r2, r3
 80193a0:	2280      	movs	r2, #128	@ 0x80
 80193a2:	00d2      	lsls	r2, r2, #3
 80193a4:	4694      	mov	ip, r2
 80193a6:	4463      	add	r3, ip
 80193a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80193aa:	683b      	ldr	r3, [r7, #0]
 80193ac:	891b      	ldrh	r3, [r3, #8]
 80193ae:	085b      	lsrs	r3, r3, #1
 80193b0:	b29b      	uxth	r3, r3
 80193b2:	18db      	adds	r3, r3, r3
 80193b4:	b29a      	uxth	r2, r3
 80193b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80193b8:	801a      	strh	r2, [r3, #0]
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	2250      	movs	r2, #80	@ 0x50
 80193c2:	5a9b      	ldrh	r3, [r3, r2]
 80193c4:	b29b      	uxth	r3, r3
 80193c6:	001a      	movs	r2, r3
 80193c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193ca:	189b      	adds	r3, r3, r2
 80193cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	781b      	ldrb	r3, [r3, #0]
 80193d2:	00da      	lsls	r2, r3, #3
 80193d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193d6:	18d3      	adds	r3, r2, r3
 80193d8:	4a88      	ldr	r2, [pc, #544]	@ (80195fc <USB_ActivateEndpoint+0x6c0>)
 80193da:	4694      	mov	ip, r2
 80193dc:	4463      	add	r3, ip
 80193de:	653b      	str	r3, [r7, #80]	@ 0x50
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	895b      	ldrh	r3, [r3, #10]
 80193e4:	085b      	lsrs	r3, r3, #1
 80193e6:	b29b      	uxth	r3, r3
 80193e8:	18db      	adds	r3, r3, r3
 80193ea:	b29a      	uxth	r2, r3
 80193ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193ee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	785b      	ldrb	r3, [r3, #1]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d000      	beq.n	80193fa <USB_ActivateEndpoint+0x4be>
 80193f8:	e087      	b.n	801950a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80193fa:	687a      	ldr	r2, [r7, #4]
 80193fc:	683b      	ldr	r3, [r7, #0]
 80193fe:	781b      	ldrb	r3, [r3, #0]
 8019400:	009b      	lsls	r3, r3, #2
 8019402:	18d2      	adds	r2, r2, r3
 8019404:	2140      	movs	r1, #64	@ 0x40
 8019406:	187b      	adds	r3, r7, r1
 8019408:	8812      	ldrh	r2, [r2, #0]
 801940a:	801a      	strh	r2, [r3, #0]
 801940c:	187b      	adds	r3, r7, r1
 801940e:	881a      	ldrh	r2, [r3, #0]
 8019410:	2380      	movs	r3, #128	@ 0x80
 8019412:	01db      	lsls	r3, r3, #7
 8019414:	4013      	ands	r3, r2
 8019416:	d016      	beq.n	8019446 <USB_ActivateEndpoint+0x50a>
 8019418:	687a      	ldr	r2, [r7, #4]
 801941a:	683b      	ldr	r3, [r7, #0]
 801941c:	781b      	ldrb	r3, [r3, #0]
 801941e:	009b      	lsls	r3, r3, #2
 8019420:	18d3      	adds	r3, r2, r3
 8019422:	881b      	ldrh	r3, [r3, #0]
 8019424:	b29a      	uxth	r2, r3
 8019426:	203e      	movs	r0, #62	@ 0x3e
 8019428:	183b      	adds	r3, r7, r0
 801942a:	496e      	ldr	r1, [pc, #440]	@ (80195e4 <USB_ActivateEndpoint+0x6a8>)
 801942c:	400a      	ands	r2, r1
 801942e:	801a      	strh	r2, [r3, #0]
 8019430:	687a      	ldr	r2, [r7, #4]
 8019432:	683b      	ldr	r3, [r7, #0]
 8019434:	781b      	ldrb	r3, [r3, #0]
 8019436:	009b      	lsls	r3, r3, #2
 8019438:	18d3      	adds	r3, r2, r3
 801943a:	183a      	adds	r2, r7, r0
 801943c:	8812      	ldrh	r2, [r2, #0]
 801943e:	496a      	ldr	r1, [pc, #424]	@ (80195e8 <USB_ActivateEndpoint+0x6ac>)
 8019440:	430a      	orrs	r2, r1
 8019442:	b292      	uxth	r2, r2
 8019444:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019446:	687a      	ldr	r2, [r7, #4]
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	781b      	ldrb	r3, [r3, #0]
 801944c:	009b      	lsls	r3, r3, #2
 801944e:	18d2      	adds	r2, r2, r3
 8019450:	213c      	movs	r1, #60	@ 0x3c
 8019452:	187b      	adds	r3, r7, r1
 8019454:	8812      	ldrh	r2, [r2, #0]
 8019456:	801a      	strh	r2, [r3, #0]
 8019458:	187b      	adds	r3, r7, r1
 801945a:	881b      	ldrh	r3, [r3, #0]
 801945c:	2240      	movs	r2, #64	@ 0x40
 801945e:	4013      	ands	r3, r2
 8019460:	d016      	beq.n	8019490 <USB_ActivateEndpoint+0x554>
 8019462:	687a      	ldr	r2, [r7, #4]
 8019464:	683b      	ldr	r3, [r7, #0]
 8019466:	781b      	ldrb	r3, [r3, #0]
 8019468:	009b      	lsls	r3, r3, #2
 801946a:	18d3      	adds	r3, r2, r3
 801946c:	881b      	ldrh	r3, [r3, #0]
 801946e:	b29a      	uxth	r2, r3
 8019470:	203a      	movs	r0, #58	@ 0x3a
 8019472:	183b      	adds	r3, r7, r0
 8019474:	495b      	ldr	r1, [pc, #364]	@ (80195e4 <USB_ActivateEndpoint+0x6a8>)
 8019476:	400a      	ands	r2, r1
 8019478:	801a      	strh	r2, [r3, #0]
 801947a:	687a      	ldr	r2, [r7, #4]
 801947c:	683b      	ldr	r3, [r7, #0]
 801947e:	781b      	ldrb	r3, [r3, #0]
 8019480:	009b      	lsls	r3, r3, #2
 8019482:	18d3      	adds	r3, r2, r3
 8019484:	183a      	adds	r2, r7, r0
 8019486:	8812      	ldrh	r2, [r2, #0]
 8019488:	495d      	ldr	r1, [pc, #372]	@ (8019600 <USB_ActivateEndpoint+0x6c4>)
 801948a:	430a      	orrs	r2, r1
 801948c:	b292      	uxth	r2, r2
 801948e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019490:	687a      	ldr	r2, [r7, #4]
 8019492:	683b      	ldr	r3, [r7, #0]
 8019494:	781b      	ldrb	r3, [r3, #0]
 8019496:	009b      	lsls	r3, r3, #2
 8019498:	18d3      	adds	r3, r2, r3
 801949a:	881b      	ldrh	r3, [r3, #0]
 801949c:	b29a      	uxth	r2, r3
 801949e:	2038      	movs	r0, #56	@ 0x38
 80194a0:	183b      	adds	r3, r7, r0
 80194a2:	4952      	ldr	r1, [pc, #328]	@ (80195ec <USB_ActivateEndpoint+0x6b0>)
 80194a4:	400a      	ands	r2, r1
 80194a6:	801a      	strh	r2, [r3, #0]
 80194a8:	183b      	adds	r3, r7, r0
 80194aa:	183a      	adds	r2, r7, r0
 80194ac:	8812      	ldrh	r2, [r2, #0]
 80194ae:	2180      	movs	r1, #128	@ 0x80
 80194b0:	0149      	lsls	r1, r1, #5
 80194b2:	404a      	eors	r2, r1
 80194b4:	801a      	strh	r2, [r3, #0]
 80194b6:	183b      	adds	r3, r7, r0
 80194b8:	183a      	adds	r2, r7, r0
 80194ba:	8812      	ldrh	r2, [r2, #0]
 80194bc:	2180      	movs	r1, #128	@ 0x80
 80194be:	0189      	lsls	r1, r1, #6
 80194c0:	404a      	eors	r2, r1
 80194c2:	801a      	strh	r2, [r3, #0]
 80194c4:	687a      	ldr	r2, [r7, #4]
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	781b      	ldrb	r3, [r3, #0]
 80194ca:	009b      	lsls	r3, r3, #2
 80194cc:	18d3      	adds	r3, r2, r3
 80194ce:	183a      	adds	r2, r7, r0
 80194d0:	8812      	ldrh	r2, [r2, #0]
 80194d2:	4947      	ldr	r1, [pc, #284]	@ (80195f0 <USB_ActivateEndpoint+0x6b4>)
 80194d4:	430a      	orrs	r2, r1
 80194d6:	b292      	uxth	r2, r2
 80194d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80194da:	687a      	ldr	r2, [r7, #4]
 80194dc:	683b      	ldr	r3, [r7, #0]
 80194de:	781b      	ldrb	r3, [r3, #0]
 80194e0:	009b      	lsls	r3, r3, #2
 80194e2:	18d3      	adds	r3, r2, r3
 80194e4:	881b      	ldrh	r3, [r3, #0]
 80194e6:	b29a      	uxth	r2, r3
 80194e8:	2036      	movs	r0, #54	@ 0x36
 80194ea:	183b      	adds	r3, r7, r0
 80194ec:	4945      	ldr	r1, [pc, #276]	@ (8019604 <USB_ActivateEndpoint+0x6c8>)
 80194ee:	400a      	ands	r2, r1
 80194f0:	801a      	strh	r2, [r3, #0]
 80194f2:	687a      	ldr	r2, [r7, #4]
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	781b      	ldrb	r3, [r3, #0]
 80194f8:	009b      	lsls	r3, r3, #2
 80194fa:	18d3      	adds	r3, r2, r3
 80194fc:	183a      	adds	r2, r7, r0
 80194fe:	8812      	ldrh	r2, [r2, #0]
 8019500:	493b      	ldr	r1, [pc, #236]	@ (80195f0 <USB_ActivateEndpoint+0x6b4>)
 8019502:	430a      	orrs	r2, r1
 8019504:	b292      	uxth	r2, r2
 8019506:	801a      	strh	r2, [r3, #0]
 8019508:	e0ac      	b.n	8019664 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801950a:	687a      	ldr	r2, [r7, #4]
 801950c:	683b      	ldr	r3, [r7, #0]
 801950e:	781b      	ldrb	r3, [r3, #0]
 8019510:	009b      	lsls	r3, r3, #2
 8019512:	18d2      	adds	r2, r2, r3
 8019514:	214e      	movs	r1, #78	@ 0x4e
 8019516:	187b      	adds	r3, r7, r1
 8019518:	8812      	ldrh	r2, [r2, #0]
 801951a:	801a      	strh	r2, [r3, #0]
 801951c:	187b      	adds	r3, r7, r1
 801951e:	881a      	ldrh	r2, [r3, #0]
 8019520:	2380      	movs	r3, #128	@ 0x80
 8019522:	01db      	lsls	r3, r3, #7
 8019524:	4013      	ands	r3, r2
 8019526:	d016      	beq.n	8019556 <USB_ActivateEndpoint+0x61a>
 8019528:	687a      	ldr	r2, [r7, #4]
 801952a:	683b      	ldr	r3, [r7, #0]
 801952c:	781b      	ldrb	r3, [r3, #0]
 801952e:	009b      	lsls	r3, r3, #2
 8019530:	18d3      	adds	r3, r2, r3
 8019532:	881b      	ldrh	r3, [r3, #0]
 8019534:	b29a      	uxth	r2, r3
 8019536:	204c      	movs	r0, #76	@ 0x4c
 8019538:	183b      	adds	r3, r7, r0
 801953a:	492a      	ldr	r1, [pc, #168]	@ (80195e4 <USB_ActivateEndpoint+0x6a8>)
 801953c:	400a      	ands	r2, r1
 801953e:	801a      	strh	r2, [r3, #0]
 8019540:	687a      	ldr	r2, [r7, #4]
 8019542:	683b      	ldr	r3, [r7, #0]
 8019544:	781b      	ldrb	r3, [r3, #0]
 8019546:	009b      	lsls	r3, r3, #2
 8019548:	18d3      	adds	r3, r2, r3
 801954a:	183a      	adds	r2, r7, r0
 801954c:	8812      	ldrh	r2, [r2, #0]
 801954e:	4926      	ldr	r1, [pc, #152]	@ (80195e8 <USB_ActivateEndpoint+0x6ac>)
 8019550:	430a      	orrs	r2, r1
 8019552:	b292      	uxth	r2, r2
 8019554:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019556:	687a      	ldr	r2, [r7, #4]
 8019558:	683b      	ldr	r3, [r7, #0]
 801955a:	781b      	ldrb	r3, [r3, #0]
 801955c:	009b      	lsls	r3, r3, #2
 801955e:	18d2      	adds	r2, r2, r3
 8019560:	214a      	movs	r1, #74	@ 0x4a
 8019562:	187b      	adds	r3, r7, r1
 8019564:	8812      	ldrh	r2, [r2, #0]
 8019566:	801a      	strh	r2, [r3, #0]
 8019568:	187b      	adds	r3, r7, r1
 801956a:	881b      	ldrh	r3, [r3, #0]
 801956c:	2240      	movs	r2, #64	@ 0x40
 801956e:	4013      	ands	r3, r2
 8019570:	d016      	beq.n	80195a0 <USB_ActivateEndpoint+0x664>
 8019572:	687a      	ldr	r2, [r7, #4]
 8019574:	683b      	ldr	r3, [r7, #0]
 8019576:	781b      	ldrb	r3, [r3, #0]
 8019578:	009b      	lsls	r3, r3, #2
 801957a:	18d3      	adds	r3, r2, r3
 801957c:	881b      	ldrh	r3, [r3, #0]
 801957e:	b29a      	uxth	r2, r3
 8019580:	2048      	movs	r0, #72	@ 0x48
 8019582:	183b      	adds	r3, r7, r0
 8019584:	4917      	ldr	r1, [pc, #92]	@ (80195e4 <USB_ActivateEndpoint+0x6a8>)
 8019586:	400a      	ands	r2, r1
 8019588:	801a      	strh	r2, [r3, #0]
 801958a:	687a      	ldr	r2, [r7, #4]
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	781b      	ldrb	r3, [r3, #0]
 8019590:	009b      	lsls	r3, r3, #2
 8019592:	18d3      	adds	r3, r2, r3
 8019594:	183a      	adds	r2, r7, r0
 8019596:	8812      	ldrh	r2, [r2, #0]
 8019598:	4919      	ldr	r1, [pc, #100]	@ (8019600 <USB_ActivateEndpoint+0x6c4>)
 801959a:	430a      	orrs	r2, r1
 801959c:	b292      	uxth	r2, r2
 801959e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	78db      	ldrb	r3, [r3, #3]
 80195a4:	2b01      	cmp	r3, #1
 80195a6:	d02f      	beq.n	8019608 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80195a8:	687a      	ldr	r2, [r7, #4]
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	781b      	ldrb	r3, [r3, #0]
 80195ae:	009b      	lsls	r3, r3, #2
 80195b0:	18d3      	adds	r3, r2, r3
 80195b2:	881b      	ldrh	r3, [r3, #0]
 80195b4:	b29a      	uxth	r2, r3
 80195b6:	2044      	movs	r0, #68	@ 0x44
 80195b8:	183b      	adds	r3, r7, r0
 80195ba:	4912      	ldr	r1, [pc, #72]	@ (8019604 <USB_ActivateEndpoint+0x6c8>)
 80195bc:	400a      	ands	r2, r1
 80195be:	801a      	strh	r2, [r3, #0]
 80195c0:	183b      	adds	r3, r7, r0
 80195c2:	183a      	adds	r2, r7, r0
 80195c4:	8812      	ldrh	r2, [r2, #0]
 80195c6:	2120      	movs	r1, #32
 80195c8:	404a      	eors	r2, r1
 80195ca:	801a      	strh	r2, [r3, #0]
 80195cc:	687a      	ldr	r2, [r7, #4]
 80195ce:	683b      	ldr	r3, [r7, #0]
 80195d0:	781b      	ldrb	r3, [r3, #0]
 80195d2:	009b      	lsls	r3, r3, #2
 80195d4:	18d3      	adds	r3, r2, r3
 80195d6:	183a      	adds	r2, r7, r0
 80195d8:	8812      	ldrh	r2, [r2, #0]
 80195da:	4905      	ldr	r1, [pc, #20]	@ (80195f0 <USB_ActivateEndpoint+0x6b4>)
 80195dc:	430a      	orrs	r2, r1
 80195de:	b292      	uxth	r2, r2
 80195e0:	801a      	strh	r2, [r3, #0]
 80195e2:	e028      	b.n	8019636 <USB_ActivateEndpoint+0x6fa>
 80195e4:	ffff8f8f 	.word	0xffff8f8f
 80195e8:	ffffc080 	.word	0xffffc080
 80195ec:	ffffbf8f 	.word	0xffffbf8f
 80195f0:	ffff8080 	.word	0xffff8080
 80195f4:	ffff8180 	.word	0xffff8180
 80195f8:	ffff8e8f 	.word	0xffff8e8f
 80195fc:	00000404 	.word	0x00000404
 8019600:	ffff80c0 	.word	0xffff80c0
 8019604:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019608:	687a      	ldr	r2, [r7, #4]
 801960a:	683b      	ldr	r3, [r7, #0]
 801960c:	781b      	ldrb	r3, [r3, #0]
 801960e:	009b      	lsls	r3, r3, #2
 8019610:	18d3      	adds	r3, r2, r3
 8019612:	881b      	ldrh	r3, [r3, #0]
 8019614:	b29a      	uxth	r2, r3
 8019616:	2046      	movs	r0, #70	@ 0x46
 8019618:	183b      	adds	r3, r7, r0
 801961a:	4916      	ldr	r1, [pc, #88]	@ (8019674 <USB_ActivateEndpoint+0x738>)
 801961c:	400a      	ands	r2, r1
 801961e:	801a      	strh	r2, [r3, #0]
 8019620:	687a      	ldr	r2, [r7, #4]
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	781b      	ldrb	r3, [r3, #0]
 8019626:	009b      	lsls	r3, r3, #2
 8019628:	18d3      	adds	r3, r2, r3
 801962a:	183a      	adds	r2, r7, r0
 801962c:	8812      	ldrh	r2, [r2, #0]
 801962e:	4912      	ldr	r1, [pc, #72]	@ (8019678 <USB_ActivateEndpoint+0x73c>)
 8019630:	430a      	orrs	r2, r1
 8019632:	b292      	uxth	r2, r2
 8019634:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019636:	687a      	ldr	r2, [r7, #4]
 8019638:	683b      	ldr	r3, [r7, #0]
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	009b      	lsls	r3, r3, #2
 801963e:	18d3      	adds	r3, r2, r3
 8019640:	881b      	ldrh	r3, [r3, #0]
 8019642:	b29a      	uxth	r2, r3
 8019644:	2042      	movs	r0, #66	@ 0x42
 8019646:	183b      	adds	r3, r7, r0
 8019648:	490c      	ldr	r1, [pc, #48]	@ (801967c <USB_ActivateEndpoint+0x740>)
 801964a:	400a      	ands	r2, r1
 801964c:	801a      	strh	r2, [r3, #0]
 801964e:	687a      	ldr	r2, [r7, #4]
 8019650:	683b      	ldr	r3, [r7, #0]
 8019652:	781b      	ldrb	r3, [r3, #0]
 8019654:	009b      	lsls	r3, r3, #2
 8019656:	18d3      	adds	r3, r2, r3
 8019658:	183a      	adds	r2, r7, r0
 801965a:	8812      	ldrh	r2, [r2, #0]
 801965c:	4906      	ldr	r1, [pc, #24]	@ (8019678 <USB_ActivateEndpoint+0x73c>)
 801965e:	430a      	orrs	r2, r1
 8019660:	b292      	uxth	r2, r2
 8019662:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8019664:	236f      	movs	r3, #111	@ 0x6f
 8019666:	18fb      	adds	r3, r7, r3
 8019668:	781b      	ldrb	r3, [r3, #0]
}
 801966a:	0018      	movs	r0, r3
 801966c:	46bd      	mov	sp, r7
 801966e:	b01c      	add	sp, #112	@ 0x70
 8019670:	bd80      	pop	{r7, pc}
 8019672:	46c0      	nop			@ (mov r8, r8)
 8019674:	ffff8fbf 	.word	0xffff8fbf
 8019678:	ffff8080 	.word	0xffff8080
 801967c:	ffffbf8f 	.word	0xffffbf8f

08019680 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019680:	b580      	push	{r7, lr}
 8019682:	b08c      	sub	sp, #48	@ 0x30
 8019684:	af00      	add	r7, sp, #0
 8019686:	6078      	str	r0, [r7, #4]
 8019688:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801968a:	683b      	ldr	r3, [r7, #0]
 801968c:	7b1b      	ldrb	r3, [r3, #12]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d000      	beq.n	8019694 <USB_DeactivateEndpoint+0x14>
 8019692:	e07e      	b.n	8019792 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019694:	683b      	ldr	r3, [r7, #0]
 8019696:	785b      	ldrb	r3, [r3, #1]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d03c      	beq.n	8019716 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801969c:	687a      	ldr	r2, [r7, #4]
 801969e:	683b      	ldr	r3, [r7, #0]
 80196a0:	781b      	ldrb	r3, [r3, #0]
 80196a2:	009b      	lsls	r3, r3, #2
 80196a4:	18d2      	adds	r2, r2, r3
 80196a6:	210c      	movs	r1, #12
 80196a8:	187b      	adds	r3, r7, r1
 80196aa:	8812      	ldrh	r2, [r2, #0]
 80196ac:	801a      	strh	r2, [r3, #0]
 80196ae:	187b      	adds	r3, r7, r1
 80196b0:	881b      	ldrh	r3, [r3, #0]
 80196b2:	2240      	movs	r2, #64	@ 0x40
 80196b4:	4013      	ands	r3, r2
 80196b6:	d016      	beq.n	80196e6 <USB_DeactivateEndpoint+0x66>
 80196b8:	687a      	ldr	r2, [r7, #4]
 80196ba:	683b      	ldr	r3, [r7, #0]
 80196bc:	781b      	ldrb	r3, [r3, #0]
 80196be:	009b      	lsls	r3, r3, #2
 80196c0:	18d3      	adds	r3, r2, r3
 80196c2:	881b      	ldrh	r3, [r3, #0]
 80196c4:	b29a      	uxth	r2, r3
 80196c6:	200a      	movs	r0, #10
 80196c8:	183b      	adds	r3, r7, r0
 80196ca:	49c7      	ldr	r1, [pc, #796]	@ (80199e8 <USB_DeactivateEndpoint+0x368>)
 80196cc:	400a      	ands	r2, r1
 80196ce:	801a      	strh	r2, [r3, #0]
 80196d0:	687a      	ldr	r2, [r7, #4]
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	781b      	ldrb	r3, [r3, #0]
 80196d6:	009b      	lsls	r3, r3, #2
 80196d8:	18d3      	adds	r3, r2, r3
 80196da:	183a      	adds	r2, r7, r0
 80196dc:	8812      	ldrh	r2, [r2, #0]
 80196de:	49c3      	ldr	r1, [pc, #780]	@ (80199ec <USB_DeactivateEndpoint+0x36c>)
 80196e0:	430a      	orrs	r2, r1
 80196e2:	b292      	uxth	r2, r2
 80196e4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80196e6:	687a      	ldr	r2, [r7, #4]
 80196e8:	683b      	ldr	r3, [r7, #0]
 80196ea:	781b      	ldrb	r3, [r3, #0]
 80196ec:	009b      	lsls	r3, r3, #2
 80196ee:	18d3      	adds	r3, r2, r3
 80196f0:	881b      	ldrh	r3, [r3, #0]
 80196f2:	b29a      	uxth	r2, r3
 80196f4:	2008      	movs	r0, #8
 80196f6:	183b      	adds	r3, r7, r0
 80196f8:	49bd      	ldr	r1, [pc, #756]	@ (80199f0 <USB_DeactivateEndpoint+0x370>)
 80196fa:	400a      	ands	r2, r1
 80196fc:	801a      	strh	r2, [r3, #0]
 80196fe:	687a      	ldr	r2, [r7, #4]
 8019700:	683b      	ldr	r3, [r7, #0]
 8019702:	781b      	ldrb	r3, [r3, #0]
 8019704:	009b      	lsls	r3, r3, #2
 8019706:	18d3      	adds	r3, r2, r3
 8019708:	183a      	adds	r2, r7, r0
 801970a:	8812      	ldrh	r2, [r2, #0]
 801970c:	49b9      	ldr	r1, [pc, #740]	@ (80199f4 <USB_DeactivateEndpoint+0x374>)
 801970e:	430a      	orrs	r2, r1
 8019710:	b292      	uxth	r2, r2
 8019712:	801a      	strh	r2, [r3, #0]
 8019714:	e163      	b.n	80199de <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019716:	687a      	ldr	r2, [r7, #4]
 8019718:	683b      	ldr	r3, [r7, #0]
 801971a:	781b      	ldrb	r3, [r3, #0]
 801971c:	009b      	lsls	r3, r3, #2
 801971e:	18d2      	adds	r2, r2, r3
 8019720:	2112      	movs	r1, #18
 8019722:	187b      	adds	r3, r7, r1
 8019724:	8812      	ldrh	r2, [r2, #0]
 8019726:	801a      	strh	r2, [r3, #0]
 8019728:	187b      	adds	r3, r7, r1
 801972a:	881a      	ldrh	r2, [r3, #0]
 801972c:	2380      	movs	r3, #128	@ 0x80
 801972e:	01db      	lsls	r3, r3, #7
 8019730:	4013      	ands	r3, r2
 8019732:	d016      	beq.n	8019762 <USB_DeactivateEndpoint+0xe2>
 8019734:	687a      	ldr	r2, [r7, #4]
 8019736:	683b      	ldr	r3, [r7, #0]
 8019738:	781b      	ldrb	r3, [r3, #0]
 801973a:	009b      	lsls	r3, r3, #2
 801973c:	18d3      	adds	r3, r2, r3
 801973e:	881b      	ldrh	r3, [r3, #0]
 8019740:	b29a      	uxth	r2, r3
 8019742:	2010      	movs	r0, #16
 8019744:	183b      	adds	r3, r7, r0
 8019746:	49a8      	ldr	r1, [pc, #672]	@ (80199e8 <USB_DeactivateEndpoint+0x368>)
 8019748:	400a      	ands	r2, r1
 801974a:	801a      	strh	r2, [r3, #0]
 801974c:	687a      	ldr	r2, [r7, #4]
 801974e:	683b      	ldr	r3, [r7, #0]
 8019750:	781b      	ldrb	r3, [r3, #0]
 8019752:	009b      	lsls	r3, r3, #2
 8019754:	18d3      	adds	r3, r2, r3
 8019756:	183a      	adds	r2, r7, r0
 8019758:	8812      	ldrh	r2, [r2, #0]
 801975a:	49a7      	ldr	r1, [pc, #668]	@ (80199f8 <USB_DeactivateEndpoint+0x378>)
 801975c:	430a      	orrs	r2, r1
 801975e:	b292      	uxth	r2, r2
 8019760:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019762:	687a      	ldr	r2, [r7, #4]
 8019764:	683b      	ldr	r3, [r7, #0]
 8019766:	781b      	ldrb	r3, [r3, #0]
 8019768:	009b      	lsls	r3, r3, #2
 801976a:	18d3      	adds	r3, r2, r3
 801976c:	881b      	ldrh	r3, [r3, #0]
 801976e:	b29a      	uxth	r2, r3
 8019770:	200e      	movs	r0, #14
 8019772:	183b      	adds	r3, r7, r0
 8019774:	49a1      	ldr	r1, [pc, #644]	@ (80199fc <USB_DeactivateEndpoint+0x37c>)
 8019776:	400a      	ands	r2, r1
 8019778:	801a      	strh	r2, [r3, #0]
 801977a:	687a      	ldr	r2, [r7, #4]
 801977c:	683b      	ldr	r3, [r7, #0]
 801977e:	781b      	ldrb	r3, [r3, #0]
 8019780:	009b      	lsls	r3, r3, #2
 8019782:	18d3      	adds	r3, r2, r3
 8019784:	183a      	adds	r2, r7, r0
 8019786:	8812      	ldrh	r2, [r2, #0]
 8019788:	499a      	ldr	r1, [pc, #616]	@ (80199f4 <USB_DeactivateEndpoint+0x374>)
 801978a:	430a      	orrs	r2, r1
 801978c:	b292      	uxth	r2, r2
 801978e:	801a      	strh	r2, [r3, #0]
 8019790:	e125      	b.n	80199de <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019792:	683b      	ldr	r3, [r7, #0]
 8019794:	785b      	ldrb	r3, [r3, #1]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d000      	beq.n	801979c <USB_DeactivateEndpoint+0x11c>
 801979a:	e090      	b.n	80198be <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801979c:	687a      	ldr	r2, [r7, #4]
 801979e:	683b      	ldr	r3, [r7, #0]
 80197a0:	781b      	ldrb	r3, [r3, #0]
 80197a2:	009b      	lsls	r3, r3, #2
 80197a4:	18d2      	adds	r2, r2, r3
 80197a6:	2120      	movs	r1, #32
 80197a8:	187b      	adds	r3, r7, r1
 80197aa:	8812      	ldrh	r2, [r2, #0]
 80197ac:	801a      	strh	r2, [r3, #0]
 80197ae:	187b      	adds	r3, r7, r1
 80197b0:	881a      	ldrh	r2, [r3, #0]
 80197b2:	2380      	movs	r3, #128	@ 0x80
 80197b4:	01db      	lsls	r3, r3, #7
 80197b6:	4013      	ands	r3, r2
 80197b8:	d016      	beq.n	80197e8 <USB_DeactivateEndpoint+0x168>
 80197ba:	687a      	ldr	r2, [r7, #4]
 80197bc:	683b      	ldr	r3, [r7, #0]
 80197be:	781b      	ldrb	r3, [r3, #0]
 80197c0:	009b      	lsls	r3, r3, #2
 80197c2:	18d3      	adds	r3, r2, r3
 80197c4:	881b      	ldrh	r3, [r3, #0]
 80197c6:	b29a      	uxth	r2, r3
 80197c8:	201e      	movs	r0, #30
 80197ca:	183b      	adds	r3, r7, r0
 80197cc:	4986      	ldr	r1, [pc, #536]	@ (80199e8 <USB_DeactivateEndpoint+0x368>)
 80197ce:	400a      	ands	r2, r1
 80197d0:	801a      	strh	r2, [r3, #0]
 80197d2:	687a      	ldr	r2, [r7, #4]
 80197d4:	683b      	ldr	r3, [r7, #0]
 80197d6:	781b      	ldrb	r3, [r3, #0]
 80197d8:	009b      	lsls	r3, r3, #2
 80197da:	18d3      	adds	r3, r2, r3
 80197dc:	183a      	adds	r2, r7, r0
 80197de:	8812      	ldrh	r2, [r2, #0]
 80197e0:	4985      	ldr	r1, [pc, #532]	@ (80199f8 <USB_DeactivateEndpoint+0x378>)
 80197e2:	430a      	orrs	r2, r1
 80197e4:	b292      	uxth	r2, r2
 80197e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80197e8:	687a      	ldr	r2, [r7, #4]
 80197ea:	683b      	ldr	r3, [r7, #0]
 80197ec:	781b      	ldrb	r3, [r3, #0]
 80197ee:	009b      	lsls	r3, r3, #2
 80197f0:	18d2      	adds	r2, r2, r3
 80197f2:	211c      	movs	r1, #28
 80197f4:	187b      	adds	r3, r7, r1
 80197f6:	8812      	ldrh	r2, [r2, #0]
 80197f8:	801a      	strh	r2, [r3, #0]
 80197fa:	187b      	adds	r3, r7, r1
 80197fc:	881b      	ldrh	r3, [r3, #0]
 80197fe:	2240      	movs	r2, #64	@ 0x40
 8019800:	4013      	ands	r3, r2
 8019802:	d016      	beq.n	8019832 <USB_DeactivateEndpoint+0x1b2>
 8019804:	687a      	ldr	r2, [r7, #4]
 8019806:	683b      	ldr	r3, [r7, #0]
 8019808:	781b      	ldrb	r3, [r3, #0]
 801980a:	009b      	lsls	r3, r3, #2
 801980c:	18d3      	adds	r3, r2, r3
 801980e:	881b      	ldrh	r3, [r3, #0]
 8019810:	b29a      	uxth	r2, r3
 8019812:	201a      	movs	r0, #26
 8019814:	183b      	adds	r3, r7, r0
 8019816:	4974      	ldr	r1, [pc, #464]	@ (80199e8 <USB_DeactivateEndpoint+0x368>)
 8019818:	400a      	ands	r2, r1
 801981a:	801a      	strh	r2, [r3, #0]
 801981c:	687a      	ldr	r2, [r7, #4]
 801981e:	683b      	ldr	r3, [r7, #0]
 8019820:	781b      	ldrb	r3, [r3, #0]
 8019822:	009b      	lsls	r3, r3, #2
 8019824:	18d3      	adds	r3, r2, r3
 8019826:	183a      	adds	r2, r7, r0
 8019828:	8812      	ldrh	r2, [r2, #0]
 801982a:	4970      	ldr	r1, [pc, #448]	@ (80199ec <USB_DeactivateEndpoint+0x36c>)
 801982c:	430a      	orrs	r2, r1
 801982e:	b292      	uxth	r2, r2
 8019830:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8019832:	687a      	ldr	r2, [r7, #4]
 8019834:	683b      	ldr	r3, [r7, #0]
 8019836:	781b      	ldrb	r3, [r3, #0]
 8019838:	009b      	lsls	r3, r3, #2
 801983a:	18d3      	adds	r3, r2, r3
 801983c:	881b      	ldrh	r3, [r3, #0]
 801983e:	b29a      	uxth	r2, r3
 8019840:	2018      	movs	r0, #24
 8019842:	183b      	adds	r3, r7, r0
 8019844:	4968      	ldr	r1, [pc, #416]	@ (80199e8 <USB_DeactivateEndpoint+0x368>)
 8019846:	400a      	ands	r2, r1
 8019848:	801a      	strh	r2, [r3, #0]
 801984a:	687a      	ldr	r2, [r7, #4]
 801984c:	683b      	ldr	r3, [r7, #0]
 801984e:	781b      	ldrb	r3, [r3, #0]
 8019850:	009b      	lsls	r3, r3, #2
 8019852:	18d3      	adds	r3, r2, r3
 8019854:	183a      	adds	r2, r7, r0
 8019856:	8812      	ldrh	r2, [r2, #0]
 8019858:	4964      	ldr	r1, [pc, #400]	@ (80199ec <USB_DeactivateEndpoint+0x36c>)
 801985a:	430a      	orrs	r2, r1
 801985c:	b292      	uxth	r2, r2
 801985e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019860:	687a      	ldr	r2, [r7, #4]
 8019862:	683b      	ldr	r3, [r7, #0]
 8019864:	781b      	ldrb	r3, [r3, #0]
 8019866:	009b      	lsls	r3, r3, #2
 8019868:	18d3      	adds	r3, r2, r3
 801986a:	881b      	ldrh	r3, [r3, #0]
 801986c:	b29a      	uxth	r2, r3
 801986e:	2016      	movs	r0, #22
 8019870:	183b      	adds	r3, r7, r0
 8019872:	4962      	ldr	r1, [pc, #392]	@ (80199fc <USB_DeactivateEndpoint+0x37c>)
 8019874:	400a      	ands	r2, r1
 8019876:	801a      	strh	r2, [r3, #0]
 8019878:	687a      	ldr	r2, [r7, #4]
 801987a:	683b      	ldr	r3, [r7, #0]
 801987c:	781b      	ldrb	r3, [r3, #0]
 801987e:	009b      	lsls	r3, r3, #2
 8019880:	18d3      	adds	r3, r2, r3
 8019882:	183a      	adds	r2, r7, r0
 8019884:	8812      	ldrh	r2, [r2, #0]
 8019886:	495b      	ldr	r1, [pc, #364]	@ (80199f4 <USB_DeactivateEndpoint+0x374>)
 8019888:	430a      	orrs	r2, r1
 801988a:	b292      	uxth	r2, r2
 801988c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801988e:	687a      	ldr	r2, [r7, #4]
 8019890:	683b      	ldr	r3, [r7, #0]
 8019892:	781b      	ldrb	r3, [r3, #0]
 8019894:	009b      	lsls	r3, r3, #2
 8019896:	18d3      	adds	r3, r2, r3
 8019898:	881b      	ldrh	r3, [r3, #0]
 801989a:	b29a      	uxth	r2, r3
 801989c:	2014      	movs	r0, #20
 801989e:	183b      	adds	r3, r7, r0
 80198a0:	4953      	ldr	r1, [pc, #332]	@ (80199f0 <USB_DeactivateEndpoint+0x370>)
 80198a2:	400a      	ands	r2, r1
 80198a4:	801a      	strh	r2, [r3, #0]
 80198a6:	687a      	ldr	r2, [r7, #4]
 80198a8:	683b      	ldr	r3, [r7, #0]
 80198aa:	781b      	ldrb	r3, [r3, #0]
 80198ac:	009b      	lsls	r3, r3, #2
 80198ae:	18d3      	adds	r3, r2, r3
 80198b0:	183a      	adds	r2, r7, r0
 80198b2:	8812      	ldrh	r2, [r2, #0]
 80198b4:	494f      	ldr	r1, [pc, #316]	@ (80199f4 <USB_DeactivateEndpoint+0x374>)
 80198b6:	430a      	orrs	r2, r1
 80198b8:	b292      	uxth	r2, r2
 80198ba:	801a      	strh	r2, [r3, #0]
 80198bc:	e08f      	b.n	80199de <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80198be:	687a      	ldr	r2, [r7, #4]
 80198c0:	683b      	ldr	r3, [r7, #0]
 80198c2:	781b      	ldrb	r3, [r3, #0]
 80198c4:	009b      	lsls	r3, r3, #2
 80198c6:	18d2      	adds	r2, r2, r3
 80198c8:	212e      	movs	r1, #46	@ 0x2e
 80198ca:	187b      	adds	r3, r7, r1
 80198cc:	8812      	ldrh	r2, [r2, #0]
 80198ce:	801a      	strh	r2, [r3, #0]
 80198d0:	187b      	adds	r3, r7, r1
 80198d2:	881a      	ldrh	r2, [r3, #0]
 80198d4:	2380      	movs	r3, #128	@ 0x80
 80198d6:	01db      	lsls	r3, r3, #7
 80198d8:	4013      	ands	r3, r2
 80198da:	d016      	beq.n	801990a <USB_DeactivateEndpoint+0x28a>
 80198dc:	687a      	ldr	r2, [r7, #4]
 80198de:	683b      	ldr	r3, [r7, #0]
 80198e0:	781b      	ldrb	r3, [r3, #0]
 80198e2:	009b      	lsls	r3, r3, #2
 80198e4:	18d3      	adds	r3, r2, r3
 80198e6:	881b      	ldrh	r3, [r3, #0]
 80198e8:	b29a      	uxth	r2, r3
 80198ea:	202c      	movs	r0, #44	@ 0x2c
 80198ec:	183b      	adds	r3, r7, r0
 80198ee:	493e      	ldr	r1, [pc, #248]	@ (80199e8 <USB_DeactivateEndpoint+0x368>)
 80198f0:	400a      	ands	r2, r1
 80198f2:	801a      	strh	r2, [r3, #0]
 80198f4:	687a      	ldr	r2, [r7, #4]
 80198f6:	683b      	ldr	r3, [r7, #0]
 80198f8:	781b      	ldrb	r3, [r3, #0]
 80198fa:	009b      	lsls	r3, r3, #2
 80198fc:	18d3      	adds	r3, r2, r3
 80198fe:	183a      	adds	r2, r7, r0
 8019900:	8812      	ldrh	r2, [r2, #0]
 8019902:	493d      	ldr	r1, [pc, #244]	@ (80199f8 <USB_DeactivateEndpoint+0x378>)
 8019904:	430a      	orrs	r2, r1
 8019906:	b292      	uxth	r2, r2
 8019908:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801990a:	687a      	ldr	r2, [r7, #4]
 801990c:	683b      	ldr	r3, [r7, #0]
 801990e:	781b      	ldrb	r3, [r3, #0]
 8019910:	009b      	lsls	r3, r3, #2
 8019912:	18d2      	adds	r2, r2, r3
 8019914:	212a      	movs	r1, #42	@ 0x2a
 8019916:	187b      	adds	r3, r7, r1
 8019918:	8812      	ldrh	r2, [r2, #0]
 801991a:	801a      	strh	r2, [r3, #0]
 801991c:	187b      	adds	r3, r7, r1
 801991e:	881b      	ldrh	r3, [r3, #0]
 8019920:	2240      	movs	r2, #64	@ 0x40
 8019922:	4013      	ands	r3, r2
 8019924:	d016      	beq.n	8019954 <USB_DeactivateEndpoint+0x2d4>
 8019926:	687a      	ldr	r2, [r7, #4]
 8019928:	683b      	ldr	r3, [r7, #0]
 801992a:	781b      	ldrb	r3, [r3, #0]
 801992c:	009b      	lsls	r3, r3, #2
 801992e:	18d3      	adds	r3, r2, r3
 8019930:	881b      	ldrh	r3, [r3, #0]
 8019932:	b29a      	uxth	r2, r3
 8019934:	2028      	movs	r0, #40	@ 0x28
 8019936:	183b      	adds	r3, r7, r0
 8019938:	492b      	ldr	r1, [pc, #172]	@ (80199e8 <USB_DeactivateEndpoint+0x368>)
 801993a:	400a      	ands	r2, r1
 801993c:	801a      	strh	r2, [r3, #0]
 801993e:	687a      	ldr	r2, [r7, #4]
 8019940:	683b      	ldr	r3, [r7, #0]
 8019942:	781b      	ldrb	r3, [r3, #0]
 8019944:	009b      	lsls	r3, r3, #2
 8019946:	18d3      	adds	r3, r2, r3
 8019948:	183a      	adds	r2, r7, r0
 801994a:	8812      	ldrh	r2, [r2, #0]
 801994c:	4927      	ldr	r1, [pc, #156]	@ (80199ec <USB_DeactivateEndpoint+0x36c>)
 801994e:	430a      	orrs	r2, r1
 8019950:	b292      	uxth	r2, r2
 8019952:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019954:	687a      	ldr	r2, [r7, #4]
 8019956:	683b      	ldr	r3, [r7, #0]
 8019958:	781b      	ldrb	r3, [r3, #0]
 801995a:	009b      	lsls	r3, r3, #2
 801995c:	18d3      	adds	r3, r2, r3
 801995e:	881b      	ldrh	r3, [r3, #0]
 8019960:	b29a      	uxth	r2, r3
 8019962:	2026      	movs	r0, #38	@ 0x26
 8019964:	183b      	adds	r3, r7, r0
 8019966:	4920      	ldr	r1, [pc, #128]	@ (80199e8 <USB_DeactivateEndpoint+0x368>)
 8019968:	400a      	ands	r2, r1
 801996a:	801a      	strh	r2, [r3, #0]
 801996c:	687a      	ldr	r2, [r7, #4]
 801996e:	683b      	ldr	r3, [r7, #0]
 8019970:	781b      	ldrb	r3, [r3, #0]
 8019972:	009b      	lsls	r3, r3, #2
 8019974:	18d3      	adds	r3, r2, r3
 8019976:	183a      	adds	r2, r7, r0
 8019978:	8812      	ldrh	r2, [r2, #0]
 801997a:	491f      	ldr	r1, [pc, #124]	@ (80199f8 <USB_DeactivateEndpoint+0x378>)
 801997c:	430a      	orrs	r2, r1
 801997e:	b292      	uxth	r2, r2
 8019980:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019982:	687a      	ldr	r2, [r7, #4]
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	781b      	ldrb	r3, [r3, #0]
 8019988:	009b      	lsls	r3, r3, #2
 801998a:	18d3      	adds	r3, r2, r3
 801998c:	881b      	ldrh	r3, [r3, #0]
 801998e:	b29a      	uxth	r2, r3
 8019990:	2024      	movs	r0, #36	@ 0x24
 8019992:	183b      	adds	r3, r7, r0
 8019994:	4916      	ldr	r1, [pc, #88]	@ (80199f0 <USB_DeactivateEndpoint+0x370>)
 8019996:	400a      	ands	r2, r1
 8019998:	801a      	strh	r2, [r3, #0]
 801999a:	687a      	ldr	r2, [r7, #4]
 801999c:	683b      	ldr	r3, [r7, #0]
 801999e:	781b      	ldrb	r3, [r3, #0]
 80199a0:	009b      	lsls	r3, r3, #2
 80199a2:	18d3      	adds	r3, r2, r3
 80199a4:	183a      	adds	r2, r7, r0
 80199a6:	8812      	ldrh	r2, [r2, #0]
 80199a8:	4912      	ldr	r1, [pc, #72]	@ (80199f4 <USB_DeactivateEndpoint+0x374>)
 80199aa:	430a      	orrs	r2, r1
 80199ac:	b292      	uxth	r2, r2
 80199ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80199b0:	687a      	ldr	r2, [r7, #4]
 80199b2:	683b      	ldr	r3, [r7, #0]
 80199b4:	781b      	ldrb	r3, [r3, #0]
 80199b6:	009b      	lsls	r3, r3, #2
 80199b8:	18d3      	adds	r3, r2, r3
 80199ba:	881b      	ldrh	r3, [r3, #0]
 80199bc:	b29a      	uxth	r2, r3
 80199be:	2022      	movs	r0, #34	@ 0x22
 80199c0:	183b      	adds	r3, r7, r0
 80199c2:	490e      	ldr	r1, [pc, #56]	@ (80199fc <USB_DeactivateEndpoint+0x37c>)
 80199c4:	400a      	ands	r2, r1
 80199c6:	801a      	strh	r2, [r3, #0]
 80199c8:	687a      	ldr	r2, [r7, #4]
 80199ca:	683b      	ldr	r3, [r7, #0]
 80199cc:	781b      	ldrb	r3, [r3, #0]
 80199ce:	009b      	lsls	r3, r3, #2
 80199d0:	18d3      	adds	r3, r2, r3
 80199d2:	183a      	adds	r2, r7, r0
 80199d4:	8812      	ldrh	r2, [r2, #0]
 80199d6:	4907      	ldr	r1, [pc, #28]	@ (80199f4 <USB_DeactivateEndpoint+0x374>)
 80199d8:	430a      	orrs	r2, r1
 80199da:	b292      	uxth	r2, r2
 80199dc:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80199de:	2300      	movs	r3, #0
}
 80199e0:	0018      	movs	r0, r3
 80199e2:	46bd      	mov	sp, r7
 80199e4:	b00c      	add	sp, #48	@ 0x30
 80199e6:	bd80      	pop	{r7, pc}
 80199e8:	ffff8f8f 	.word	0xffff8f8f
 80199ec:	ffff80c0 	.word	0xffff80c0
 80199f0:	ffff8fbf 	.word	0xffff8fbf
 80199f4:	ffff8080 	.word	0xffff8080
 80199f8:	ffffc080 	.word	0xffffc080
 80199fc:	ffffbf8f 	.word	0xffffbf8f

08019a00 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019a00:	b590      	push	{r4, r7, lr}
 8019a02:	b0c3      	sub	sp, #268	@ 0x10c
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
 8019a08:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019a0a:	683b      	ldr	r3, [r7, #0]
 8019a0c:	785b      	ldrb	r3, [r3, #1]
 8019a0e:	2b01      	cmp	r3, #1
 8019a10:	d001      	beq.n	8019a16 <USB_EPStartXfer+0x16>
 8019a12:	f000 fd2d 	bl	801a470 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019a16:	683b      	ldr	r3, [r7, #0]
 8019a18:	699a      	ldr	r2, [r3, #24]
 8019a1a:	683b      	ldr	r3, [r7, #0]
 8019a1c:	691b      	ldr	r3, [r3, #16]
 8019a1e:	429a      	cmp	r2, r3
 8019a20:	d905      	bls.n	8019a2e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8019a22:	683b      	ldr	r3, [r7, #0]
 8019a24:	691b      	ldr	r3, [r3, #16]
 8019a26:	1d7a      	adds	r2, r7, #5
 8019a28:	32ff      	adds	r2, #255	@ 0xff
 8019a2a:	6013      	str	r3, [r2, #0]
 8019a2c:	e004      	b.n	8019a38 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8019a2e:	683b      	ldr	r3, [r7, #0]
 8019a30:	699b      	ldr	r3, [r3, #24]
 8019a32:	1d7a      	adds	r2, r7, #5
 8019a34:	32ff      	adds	r2, #255	@ 0xff
 8019a36:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019a38:	683b      	ldr	r3, [r7, #0]
 8019a3a:	7b1b      	ldrb	r3, [r3, #12]
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d125      	bne.n	8019a8c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	6959      	ldr	r1, [r3, #20]
 8019a44:	683b      	ldr	r3, [r7, #0]
 8019a46:	88da      	ldrh	r2, [r3, #6]
 8019a48:	1d7b      	adds	r3, r7, #5
 8019a4a:	33ff      	adds	r3, #255	@ 0xff
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	b29b      	uxth	r3, r3
 8019a50:	6878      	ldr	r0, [r7, #4]
 8019a52:	f001 fa47 	bl	801aee4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	613b      	str	r3, [r7, #16]
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	2250      	movs	r2, #80	@ 0x50
 8019a5e:	5a9b      	ldrh	r3, [r3, r2]
 8019a60:	b29b      	uxth	r3, r3
 8019a62:	001a      	movs	r2, r3
 8019a64:	693b      	ldr	r3, [r7, #16]
 8019a66:	189b      	adds	r3, r3, r2
 8019a68:	613b      	str	r3, [r7, #16]
 8019a6a:	683b      	ldr	r3, [r7, #0]
 8019a6c:	781b      	ldrb	r3, [r3, #0]
 8019a6e:	00da      	lsls	r2, r3, #3
 8019a70:	693b      	ldr	r3, [r7, #16]
 8019a72:	18d3      	adds	r3, r2, r3
 8019a74:	4ad7      	ldr	r2, [pc, #860]	@ (8019dd4 <USB_EPStartXfer+0x3d4>)
 8019a76:	4694      	mov	ip, r2
 8019a78:	4463      	add	r3, ip
 8019a7a:	60fb      	str	r3, [r7, #12]
 8019a7c:	1d7b      	adds	r3, r7, #5
 8019a7e:	33ff      	adds	r3, #255	@ 0xff
 8019a80:	681b      	ldr	r3, [r3, #0]
 8019a82:	b29a      	uxth	r2, r3
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	801a      	strh	r2, [r3, #0]
 8019a88:	f000 fccd 	bl	801a426 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8019a8c:	683b      	ldr	r3, [r7, #0]
 8019a8e:	78db      	ldrb	r3, [r3, #3]
 8019a90:	2b02      	cmp	r3, #2
 8019a92:	d000      	beq.n	8019a96 <USB_EPStartXfer+0x96>
 8019a94:	e362      	b.n	801a15c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019a96:	683b      	ldr	r3, [r7, #0]
 8019a98:	6a1a      	ldr	r2, [r3, #32]
 8019a9a:	683b      	ldr	r3, [r7, #0]
 8019a9c:	691b      	ldr	r3, [r3, #16]
 8019a9e:	429a      	cmp	r2, r3
 8019aa0:	d800      	bhi.n	8019aa4 <USB_EPStartXfer+0xa4>
 8019aa2:	e309      	b.n	801a0b8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019aa4:	687a      	ldr	r2, [r7, #4]
 8019aa6:	683b      	ldr	r3, [r7, #0]
 8019aa8:	781b      	ldrb	r3, [r3, #0]
 8019aaa:	009b      	lsls	r3, r3, #2
 8019aac:	18d3      	adds	r3, r2, r3
 8019aae:	881b      	ldrh	r3, [r3, #0]
 8019ab0:	b29a      	uxth	r2, r3
 8019ab2:	2056      	movs	r0, #86	@ 0x56
 8019ab4:	183b      	adds	r3, r7, r0
 8019ab6:	49c8      	ldr	r1, [pc, #800]	@ (8019dd8 <USB_EPStartXfer+0x3d8>)
 8019ab8:	400a      	ands	r2, r1
 8019aba:	801a      	strh	r2, [r3, #0]
 8019abc:	687a      	ldr	r2, [r7, #4]
 8019abe:	683b      	ldr	r3, [r7, #0]
 8019ac0:	781b      	ldrb	r3, [r3, #0]
 8019ac2:	009b      	lsls	r3, r3, #2
 8019ac4:	18d3      	adds	r3, r2, r3
 8019ac6:	183a      	adds	r2, r7, r0
 8019ac8:	8812      	ldrh	r2, [r2, #0]
 8019aca:	49c4      	ldr	r1, [pc, #784]	@ (8019ddc <USB_EPStartXfer+0x3dc>)
 8019acc:	430a      	orrs	r2, r1
 8019ace:	b292      	uxth	r2, r2
 8019ad0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8019ad2:	683b      	ldr	r3, [r7, #0]
 8019ad4:	6a1a      	ldr	r2, [r3, #32]
 8019ad6:	1d7b      	adds	r3, r7, #5
 8019ad8:	33ff      	adds	r3, #255	@ 0xff
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	1ad2      	subs	r2, r2, r3
 8019ade:	683b      	ldr	r3, [r7, #0]
 8019ae0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019ae2:	687a      	ldr	r2, [r7, #4]
 8019ae4:	683b      	ldr	r3, [r7, #0]
 8019ae6:	781b      	ldrb	r3, [r3, #0]
 8019ae8:	009b      	lsls	r3, r3, #2
 8019aea:	18d3      	adds	r3, r2, r3
 8019aec:	881b      	ldrh	r3, [r3, #0]
 8019aee:	b29b      	uxth	r3, r3
 8019af0:	001a      	movs	r2, r3
 8019af2:	2340      	movs	r3, #64	@ 0x40
 8019af4:	4013      	ands	r3, r2
 8019af6:	d100      	bne.n	8019afa <USB_EPStartXfer+0xfa>
 8019af8:	e176      	b.n	8019de8 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	633b      	str	r3, [r7, #48]	@ 0x30
 8019afe:	683b      	ldr	r3, [r7, #0]
 8019b00:	785b      	ldrb	r3, [r3, #1]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d000      	beq.n	8019b08 <USB_EPStartXfer+0x108>
 8019b06:	e074      	b.n	8019bf2 <USB_EPStartXfer+0x1f2>
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	2250      	movs	r2, #80	@ 0x50
 8019b10:	5a9b      	ldrh	r3, [r3, r2]
 8019b12:	b29b      	uxth	r3, r3
 8019b14:	001a      	movs	r2, r3
 8019b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b18:	189b      	adds	r3, r3, r2
 8019b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019b1c:	683b      	ldr	r3, [r7, #0]
 8019b1e:	781b      	ldrb	r3, [r3, #0]
 8019b20:	00da      	lsls	r2, r3, #3
 8019b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b24:	18d3      	adds	r3, r2, r3
 8019b26:	4aae      	ldr	r2, [pc, #696]	@ (8019de0 <USB_EPStartXfer+0x3e0>)
 8019b28:	4694      	mov	ip, r2
 8019b2a:	4463      	add	r3, ip
 8019b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b30:	881b      	ldrh	r3, [r3, #0]
 8019b32:	b29b      	uxth	r3, r3
 8019b34:	059b      	lsls	r3, r3, #22
 8019b36:	0d9b      	lsrs	r3, r3, #22
 8019b38:	b29a      	uxth	r2, r3
 8019b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b3c:	801a      	strh	r2, [r3, #0]
 8019b3e:	1d7b      	adds	r3, r7, #5
 8019b40:	33ff      	adds	r3, #255	@ 0xff
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	2b3e      	cmp	r3, #62	@ 0x3e
 8019b46:	d924      	bls.n	8019b92 <USB_EPStartXfer+0x192>
 8019b48:	1d7b      	adds	r3, r7, #5
 8019b4a:	33ff      	adds	r3, #255	@ 0xff
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	095b      	lsrs	r3, r3, #5
 8019b50:	1c7a      	adds	r2, r7, #1
 8019b52:	32ff      	adds	r2, #255	@ 0xff
 8019b54:	6013      	str	r3, [r2, #0]
 8019b56:	1d7b      	adds	r3, r7, #5
 8019b58:	33ff      	adds	r3, #255	@ 0xff
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	221f      	movs	r2, #31
 8019b5e:	4013      	ands	r3, r2
 8019b60:	d106      	bne.n	8019b70 <USB_EPStartXfer+0x170>
 8019b62:	1c7b      	adds	r3, r7, #1
 8019b64:	33ff      	adds	r3, #255	@ 0xff
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	3b01      	subs	r3, #1
 8019b6a:	1c7a      	adds	r2, r7, #1
 8019b6c:	32ff      	adds	r2, #255	@ 0xff
 8019b6e:	6013      	str	r3, [r2, #0]
 8019b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b72:	881b      	ldrh	r3, [r3, #0]
 8019b74:	b29a      	uxth	r2, r3
 8019b76:	1c7b      	adds	r3, r7, #1
 8019b78:	33ff      	adds	r3, #255	@ 0xff
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	b29b      	uxth	r3, r3
 8019b7e:	029b      	lsls	r3, r3, #10
 8019b80:	b29b      	uxth	r3, r3
 8019b82:	4313      	orrs	r3, r2
 8019b84:	b29b      	uxth	r3, r3
 8019b86:	4a97      	ldr	r2, [pc, #604]	@ (8019de4 <USB_EPStartXfer+0x3e4>)
 8019b88:	4313      	orrs	r3, r2
 8019b8a:	b29a      	uxth	r2, r3
 8019b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b8e:	801a      	strh	r2, [r3, #0]
 8019b90:	e04a      	b.n	8019c28 <USB_EPStartXfer+0x228>
 8019b92:	1d7b      	adds	r3, r7, #5
 8019b94:	33ff      	adds	r3, #255	@ 0xff
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d108      	bne.n	8019bae <USB_EPStartXfer+0x1ae>
 8019b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b9e:	881b      	ldrh	r3, [r3, #0]
 8019ba0:	b29b      	uxth	r3, r3
 8019ba2:	4a90      	ldr	r2, [pc, #576]	@ (8019de4 <USB_EPStartXfer+0x3e4>)
 8019ba4:	4313      	orrs	r3, r2
 8019ba6:	b29a      	uxth	r2, r3
 8019ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019baa:	801a      	strh	r2, [r3, #0]
 8019bac:	e03c      	b.n	8019c28 <USB_EPStartXfer+0x228>
 8019bae:	1d7b      	adds	r3, r7, #5
 8019bb0:	33ff      	adds	r3, #255	@ 0xff
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	085b      	lsrs	r3, r3, #1
 8019bb6:	1c7a      	adds	r2, r7, #1
 8019bb8:	32ff      	adds	r2, #255	@ 0xff
 8019bba:	6013      	str	r3, [r2, #0]
 8019bbc:	1d7b      	adds	r3, r7, #5
 8019bbe:	33ff      	adds	r3, #255	@ 0xff
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	2201      	movs	r2, #1
 8019bc4:	4013      	ands	r3, r2
 8019bc6:	d006      	beq.n	8019bd6 <USB_EPStartXfer+0x1d6>
 8019bc8:	1c7b      	adds	r3, r7, #1
 8019bca:	33ff      	adds	r3, #255	@ 0xff
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	3301      	adds	r3, #1
 8019bd0:	1c7a      	adds	r2, r7, #1
 8019bd2:	32ff      	adds	r2, #255	@ 0xff
 8019bd4:	6013      	str	r3, [r2, #0]
 8019bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bd8:	881b      	ldrh	r3, [r3, #0]
 8019bda:	b29a      	uxth	r2, r3
 8019bdc:	1c7b      	adds	r3, r7, #1
 8019bde:	33ff      	adds	r3, #255	@ 0xff
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	b29b      	uxth	r3, r3
 8019be4:	029b      	lsls	r3, r3, #10
 8019be6:	b29b      	uxth	r3, r3
 8019be8:	4313      	orrs	r3, r2
 8019bea:	b29a      	uxth	r2, r3
 8019bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bee:	801a      	strh	r2, [r3, #0]
 8019bf0:	e01a      	b.n	8019c28 <USB_EPStartXfer+0x228>
 8019bf2:	683b      	ldr	r3, [r7, #0]
 8019bf4:	785b      	ldrb	r3, [r3, #1]
 8019bf6:	2b01      	cmp	r3, #1
 8019bf8:	d116      	bne.n	8019c28 <USB_EPStartXfer+0x228>
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	2250      	movs	r2, #80	@ 0x50
 8019bfe:	5a9b      	ldrh	r3, [r3, r2]
 8019c00:	b29b      	uxth	r3, r3
 8019c02:	001a      	movs	r2, r3
 8019c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c06:	189b      	adds	r3, r3, r2
 8019c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8019c0a:	683b      	ldr	r3, [r7, #0]
 8019c0c:	781b      	ldrb	r3, [r3, #0]
 8019c0e:	00da      	lsls	r2, r3, #3
 8019c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c12:	18d3      	adds	r3, r2, r3
 8019c14:	4a72      	ldr	r2, [pc, #456]	@ (8019de0 <USB_EPStartXfer+0x3e0>)
 8019c16:	4694      	mov	ip, r2
 8019c18:	4463      	add	r3, ip
 8019c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019c1c:	1d7b      	adds	r3, r7, #5
 8019c1e:	33ff      	adds	r3, #255	@ 0xff
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	b29a      	uxth	r2, r3
 8019c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019c28:	2076      	movs	r0, #118	@ 0x76
 8019c2a:	183b      	adds	r3, r7, r0
 8019c2c:	683a      	ldr	r2, [r7, #0]
 8019c2e:	8952      	ldrh	r2, [r2, #10]
 8019c30:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019c32:	683b      	ldr	r3, [r7, #0]
 8019c34:	6959      	ldr	r1, [r3, #20]
 8019c36:	1d7b      	adds	r3, r7, #5
 8019c38:	33ff      	adds	r3, #255	@ 0xff
 8019c3a:	681b      	ldr	r3, [r3, #0]
 8019c3c:	b29c      	uxth	r4, r3
 8019c3e:	183b      	adds	r3, r7, r0
 8019c40:	881a      	ldrh	r2, [r3, #0]
 8019c42:	6878      	ldr	r0, [r7, #4]
 8019c44:	0023      	movs	r3, r4
 8019c46:	f001 f94d 	bl	801aee4 <USB_WritePMA>
            ep->xfer_buff += len;
 8019c4a:	683b      	ldr	r3, [r7, #0]
 8019c4c:	695a      	ldr	r2, [r3, #20]
 8019c4e:	1d7b      	adds	r3, r7, #5
 8019c50:	33ff      	adds	r3, #255	@ 0xff
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	18d2      	adds	r2, r2, r3
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	6a1a      	ldr	r2, [r3, #32]
 8019c5e:	683b      	ldr	r3, [r7, #0]
 8019c60:	691b      	ldr	r3, [r3, #16]
 8019c62:	429a      	cmp	r2, r3
 8019c64:	d908      	bls.n	8019c78 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019c66:	683b      	ldr	r3, [r7, #0]
 8019c68:	6a1a      	ldr	r2, [r3, #32]
 8019c6a:	1d7b      	adds	r3, r7, #5
 8019c6c:	33ff      	adds	r3, #255	@ 0xff
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	1ad2      	subs	r2, r2, r3
 8019c72:	683b      	ldr	r3, [r7, #0]
 8019c74:	621a      	str	r2, [r3, #32]
 8019c76:	e007      	b.n	8019c88 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019c78:	683b      	ldr	r3, [r7, #0]
 8019c7a:	6a1b      	ldr	r3, [r3, #32]
 8019c7c:	1d7a      	adds	r2, r7, #5
 8019c7e:	32ff      	adds	r2, #255	@ 0xff
 8019c80:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019c82:	683b      	ldr	r3, [r7, #0]
 8019c84:	2200      	movs	r2, #0
 8019c86:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019c88:	683b      	ldr	r3, [r7, #0]
 8019c8a:	785b      	ldrb	r3, [r3, #1]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d000      	beq.n	8019c92 <USB_EPStartXfer+0x292>
 8019c90:	e070      	b.n	8019d74 <USB_EPStartXfer+0x374>
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	61bb      	str	r3, [r7, #24]
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	2250      	movs	r2, #80	@ 0x50
 8019c9a:	5a9b      	ldrh	r3, [r3, r2]
 8019c9c:	b29b      	uxth	r3, r3
 8019c9e:	001a      	movs	r2, r3
 8019ca0:	69bb      	ldr	r3, [r7, #24]
 8019ca2:	189b      	adds	r3, r3, r2
 8019ca4:	61bb      	str	r3, [r7, #24]
 8019ca6:	683b      	ldr	r3, [r7, #0]
 8019ca8:	781b      	ldrb	r3, [r3, #0]
 8019caa:	00da      	lsls	r2, r3, #3
 8019cac:	69bb      	ldr	r3, [r7, #24]
 8019cae:	18d3      	adds	r3, r2, r3
 8019cb0:	4a48      	ldr	r2, [pc, #288]	@ (8019dd4 <USB_EPStartXfer+0x3d4>)
 8019cb2:	4694      	mov	ip, r2
 8019cb4:	4463      	add	r3, ip
 8019cb6:	617b      	str	r3, [r7, #20]
 8019cb8:	697b      	ldr	r3, [r7, #20]
 8019cba:	881b      	ldrh	r3, [r3, #0]
 8019cbc:	b29b      	uxth	r3, r3
 8019cbe:	059b      	lsls	r3, r3, #22
 8019cc0:	0d9b      	lsrs	r3, r3, #22
 8019cc2:	b29a      	uxth	r2, r3
 8019cc4:	697b      	ldr	r3, [r7, #20]
 8019cc6:	801a      	strh	r2, [r3, #0]
 8019cc8:	1d7b      	adds	r3, r7, #5
 8019cca:	33ff      	adds	r3, #255	@ 0xff
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	2b3e      	cmp	r3, #62	@ 0x3e
 8019cd0:	d922      	bls.n	8019d18 <USB_EPStartXfer+0x318>
 8019cd2:	1d7b      	adds	r3, r7, #5
 8019cd4:	33ff      	adds	r3, #255	@ 0xff
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	095b      	lsrs	r3, r3, #5
 8019cda:	21fc      	movs	r1, #252	@ 0xfc
 8019cdc:	187a      	adds	r2, r7, r1
 8019cde:	6013      	str	r3, [r2, #0]
 8019ce0:	1d7b      	adds	r3, r7, #5
 8019ce2:	33ff      	adds	r3, #255	@ 0xff
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	221f      	movs	r2, #31
 8019ce8:	4013      	ands	r3, r2
 8019cea:	d104      	bne.n	8019cf6 <USB_EPStartXfer+0x2f6>
 8019cec:	187b      	adds	r3, r7, r1
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	3b01      	subs	r3, #1
 8019cf2:	187a      	adds	r2, r7, r1
 8019cf4:	6013      	str	r3, [r2, #0]
 8019cf6:	697b      	ldr	r3, [r7, #20]
 8019cf8:	881b      	ldrh	r3, [r3, #0]
 8019cfa:	b29a      	uxth	r2, r3
 8019cfc:	23fc      	movs	r3, #252	@ 0xfc
 8019cfe:	18fb      	adds	r3, r7, r3
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	b29b      	uxth	r3, r3
 8019d04:	029b      	lsls	r3, r3, #10
 8019d06:	b29b      	uxth	r3, r3
 8019d08:	4313      	orrs	r3, r2
 8019d0a:	b29b      	uxth	r3, r3
 8019d0c:	4a35      	ldr	r2, [pc, #212]	@ (8019de4 <USB_EPStartXfer+0x3e4>)
 8019d0e:	4313      	orrs	r3, r2
 8019d10:	b29a      	uxth	r2, r3
 8019d12:	697b      	ldr	r3, [r7, #20]
 8019d14:	801a      	strh	r2, [r3, #0]
 8019d16:	e04a      	b.n	8019dae <USB_EPStartXfer+0x3ae>
 8019d18:	1d7b      	adds	r3, r7, #5
 8019d1a:	33ff      	adds	r3, #255	@ 0xff
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d108      	bne.n	8019d34 <USB_EPStartXfer+0x334>
 8019d22:	697b      	ldr	r3, [r7, #20]
 8019d24:	881b      	ldrh	r3, [r3, #0]
 8019d26:	b29b      	uxth	r3, r3
 8019d28:	4a2e      	ldr	r2, [pc, #184]	@ (8019de4 <USB_EPStartXfer+0x3e4>)
 8019d2a:	4313      	orrs	r3, r2
 8019d2c:	b29a      	uxth	r2, r3
 8019d2e:	697b      	ldr	r3, [r7, #20]
 8019d30:	801a      	strh	r2, [r3, #0]
 8019d32:	e03c      	b.n	8019dae <USB_EPStartXfer+0x3ae>
 8019d34:	1d7b      	adds	r3, r7, #5
 8019d36:	33ff      	adds	r3, #255	@ 0xff
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	085b      	lsrs	r3, r3, #1
 8019d3c:	21fc      	movs	r1, #252	@ 0xfc
 8019d3e:	187a      	adds	r2, r7, r1
 8019d40:	6013      	str	r3, [r2, #0]
 8019d42:	1d7b      	adds	r3, r7, #5
 8019d44:	33ff      	adds	r3, #255	@ 0xff
 8019d46:	681b      	ldr	r3, [r3, #0]
 8019d48:	2201      	movs	r2, #1
 8019d4a:	4013      	ands	r3, r2
 8019d4c:	d004      	beq.n	8019d58 <USB_EPStartXfer+0x358>
 8019d4e:	187b      	adds	r3, r7, r1
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	3301      	adds	r3, #1
 8019d54:	187a      	adds	r2, r7, r1
 8019d56:	6013      	str	r3, [r2, #0]
 8019d58:	697b      	ldr	r3, [r7, #20]
 8019d5a:	881b      	ldrh	r3, [r3, #0]
 8019d5c:	b29a      	uxth	r2, r3
 8019d5e:	23fc      	movs	r3, #252	@ 0xfc
 8019d60:	18fb      	adds	r3, r7, r3
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	b29b      	uxth	r3, r3
 8019d66:	029b      	lsls	r3, r3, #10
 8019d68:	b29b      	uxth	r3, r3
 8019d6a:	4313      	orrs	r3, r2
 8019d6c:	b29a      	uxth	r2, r3
 8019d6e:	697b      	ldr	r3, [r7, #20]
 8019d70:	801a      	strh	r2, [r3, #0]
 8019d72:	e01c      	b.n	8019dae <USB_EPStartXfer+0x3ae>
 8019d74:	683b      	ldr	r3, [r7, #0]
 8019d76:	785b      	ldrb	r3, [r3, #1]
 8019d78:	2b01      	cmp	r3, #1
 8019d7a:	d118      	bne.n	8019dae <USB_EPStartXfer+0x3ae>
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	623b      	str	r3, [r7, #32]
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	2250      	movs	r2, #80	@ 0x50
 8019d84:	5a9b      	ldrh	r3, [r3, r2]
 8019d86:	b29b      	uxth	r3, r3
 8019d88:	001a      	movs	r2, r3
 8019d8a:	6a3b      	ldr	r3, [r7, #32]
 8019d8c:	189b      	adds	r3, r3, r2
 8019d8e:	623b      	str	r3, [r7, #32]
 8019d90:	683b      	ldr	r3, [r7, #0]
 8019d92:	781b      	ldrb	r3, [r3, #0]
 8019d94:	00da      	lsls	r2, r3, #3
 8019d96:	6a3b      	ldr	r3, [r7, #32]
 8019d98:	18d3      	adds	r3, r2, r3
 8019d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8019dd4 <USB_EPStartXfer+0x3d4>)
 8019d9c:	4694      	mov	ip, r2
 8019d9e:	4463      	add	r3, ip
 8019da0:	61fb      	str	r3, [r7, #28]
 8019da2:	1d7b      	adds	r3, r7, #5
 8019da4:	33ff      	adds	r3, #255	@ 0xff
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	b29a      	uxth	r2, r3
 8019daa:	69fb      	ldr	r3, [r7, #28]
 8019dac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019dae:	2076      	movs	r0, #118	@ 0x76
 8019db0:	183b      	adds	r3, r7, r0
 8019db2:	683a      	ldr	r2, [r7, #0]
 8019db4:	8912      	ldrh	r2, [r2, #8]
 8019db6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	6959      	ldr	r1, [r3, #20]
 8019dbc:	1d7b      	adds	r3, r7, #5
 8019dbe:	33ff      	adds	r3, #255	@ 0xff
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	b29c      	uxth	r4, r3
 8019dc4:	183b      	adds	r3, r7, r0
 8019dc6:	881a      	ldrh	r2, [r3, #0]
 8019dc8:	6878      	ldr	r0, [r7, #4]
 8019dca:	0023      	movs	r3, r4
 8019dcc:	f001 f88a 	bl	801aee4 <USB_WritePMA>
 8019dd0:	e329      	b.n	801a426 <USB_EPStartXfer+0xa26>
 8019dd2:	46c0      	nop			@ (mov r8, r8)
 8019dd4:	00000402 	.word	0x00000402
 8019dd8:	ffff8f8f 	.word	0xffff8f8f
 8019ddc:	ffff8180 	.word	0xffff8180
 8019de0:	00000406 	.word	0x00000406
 8019de4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019de8:	683b      	ldr	r3, [r7, #0]
 8019dea:	785b      	ldrb	r3, [r3, #1]
 8019dec:	2b00      	cmp	r3, #0
 8019dee:	d000      	beq.n	8019df2 <USB_EPStartXfer+0x3f2>
 8019df0:	e070      	b.n	8019ed4 <USB_EPStartXfer+0x4d4>
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	2250      	movs	r2, #80	@ 0x50
 8019dfa:	5a9b      	ldrh	r3, [r3, r2]
 8019dfc:	b29b      	uxth	r3, r3
 8019dfe:	001a      	movs	r2, r3
 8019e00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019e02:	189b      	adds	r3, r3, r2
 8019e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019e06:	683b      	ldr	r3, [r7, #0]
 8019e08:	781b      	ldrb	r3, [r3, #0]
 8019e0a:	00da      	lsls	r2, r3, #3
 8019e0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019e0e:	18d3      	adds	r3, r2, r3
 8019e10:	4acd      	ldr	r2, [pc, #820]	@ (801a148 <USB_EPStartXfer+0x748>)
 8019e12:	4694      	mov	ip, r2
 8019e14:	4463      	add	r3, ip
 8019e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8019e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019e1a:	881b      	ldrh	r3, [r3, #0]
 8019e1c:	b29b      	uxth	r3, r3
 8019e1e:	059b      	lsls	r3, r3, #22
 8019e20:	0d9b      	lsrs	r3, r3, #22
 8019e22:	b29a      	uxth	r2, r3
 8019e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019e26:	801a      	strh	r2, [r3, #0]
 8019e28:	1d7b      	adds	r3, r7, #5
 8019e2a:	33ff      	adds	r3, #255	@ 0xff
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019e30:	d922      	bls.n	8019e78 <USB_EPStartXfer+0x478>
 8019e32:	1d7b      	adds	r3, r7, #5
 8019e34:	33ff      	adds	r3, #255	@ 0xff
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	095b      	lsrs	r3, r3, #5
 8019e3a:	21f8      	movs	r1, #248	@ 0xf8
 8019e3c:	187a      	adds	r2, r7, r1
 8019e3e:	6013      	str	r3, [r2, #0]
 8019e40:	1d7b      	adds	r3, r7, #5
 8019e42:	33ff      	adds	r3, #255	@ 0xff
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	221f      	movs	r2, #31
 8019e48:	4013      	ands	r3, r2
 8019e4a:	d104      	bne.n	8019e56 <USB_EPStartXfer+0x456>
 8019e4c:	187b      	adds	r3, r7, r1
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	3b01      	subs	r3, #1
 8019e52:	187a      	adds	r2, r7, r1
 8019e54:	6013      	str	r3, [r2, #0]
 8019e56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019e58:	881b      	ldrh	r3, [r3, #0]
 8019e5a:	b29a      	uxth	r2, r3
 8019e5c:	23f8      	movs	r3, #248	@ 0xf8
 8019e5e:	18fb      	adds	r3, r7, r3
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	029b      	lsls	r3, r3, #10
 8019e66:	b29b      	uxth	r3, r3
 8019e68:	4313      	orrs	r3, r2
 8019e6a:	b29b      	uxth	r3, r3
 8019e6c:	4ab7      	ldr	r2, [pc, #732]	@ (801a14c <USB_EPStartXfer+0x74c>)
 8019e6e:	4313      	orrs	r3, r2
 8019e70:	b29a      	uxth	r2, r3
 8019e72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019e74:	801a      	strh	r2, [r3, #0]
 8019e76:	e04a      	b.n	8019f0e <USB_EPStartXfer+0x50e>
 8019e78:	1d7b      	adds	r3, r7, #5
 8019e7a:	33ff      	adds	r3, #255	@ 0xff
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d108      	bne.n	8019e94 <USB_EPStartXfer+0x494>
 8019e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019e84:	881b      	ldrh	r3, [r3, #0]
 8019e86:	b29b      	uxth	r3, r3
 8019e88:	4ab0      	ldr	r2, [pc, #704]	@ (801a14c <USB_EPStartXfer+0x74c>)
 8019e8a:	4313      	orrs	r3, r2
 8019e8c:	b29a      	uxth	r2, r3
 8019e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019e90:	801a      	strh	r2, [r3, #0]
 8019e92:	e03c      	b.n	8019f0e <USB_EPStartXfer+0x50e>
 8019e94:	1d7b      	adds	r3, r7, #5
 8019e96:	33ff      	adds	r3, #255	@ 0xff
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	085b      	lsrs	r3, r3, #1
 8019e9c:	21f8      	movs	r1, #248	@ 0xf8
 8019e9e:	187a      	adds	r2, r7, r1
 8019ea0:	6013      	str	r3, [r2, #0]
 8019ea2:	1d7b      	adds	r3, r7, #5
 8019ea4:	33ff      	adds	r3, #255	@ 0xff
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	2201      	movs	r2, #1
 8019eaa:	4013      	ands	r3, r2
 8019eac:	d004      	beq.n	8019eb8 <USB_EPStartXfer+0x4b8>
 8019eae:	187b      	adds	r3, r7, r1
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	3301      	adds	r3, #1
 8019eb4:	187a      	adds	r2, r7, r1
 8019eb6:	6013      	str	r3, [r2, #0]
 8019eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019eba:	881b      	ldrh	r3, [r3, #0]
 8019ebc:	b29a      	uxth	r2, r3
 8019ebe:	23f8      	movs	r3, #248	@ 0xf8
 8019ec0:	18fb      	adds	r3, r7, r3
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	b29b      	uxth	r3, r3
 8019ec6:	029b      	lsls	r3, r3, #10
 8019ec8:	b29b      	uxth	r3, r3
 8019eca:	4313      	orrs	r3, r2
 8019ecc:	b29a      	uxth	r2, r3
 8019ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ed0:	801a      	strh	r2, [r3, #0]
 8019ed2:	e01c      	b.n	8019f0e <USB_EPStartXfer+0x50e>
 8019ed4:	683b      	ldr	r3, [r7, #0]
 8019ed6:	785b      	ldrb	r3, [r3, #1]
 8019ed8:	2b01      	cmp	r3, #1
 8019eda:	d118      	bne.n	8019f0e <USB_EPStartXfer+0x50e>
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	653b      	str	r3, [r7, #80]	@ 0x50
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	2250      	movs	r2, #80	@ 0x50
 8019ee4:	5a9b      	ldrh	r3, [r3, r2]
 8019ee6:	b29b      	uxth	r3, r3
 8019ee8:	001a      	movs	r2, r3
 8019eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019eec:	189b      	adds	r3, r3, r2
 8019eee:	653b      	str	r3, [r7, #80]	@ 0x50
 8019ef0:	683b      	ldr	r3, [r7, #0]
 8019ef2:	781b      	ldrb	r3, [r3, #0]
 8019ef4:	00da      	lsls	r2, r3, #3
 8019ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ef8:	18d3      	adds	r3, r2, r3
 8019efa:	4a93      	ldr	r2, [pc, #588]	@ (801a148 <USB_EPStartXfer+0x748>)
 8019efc:	4694      	mov	ip, r2
 8019efe:	4463      	add	r3, ip
 8019f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019f02:	1d7b      	adds	r3, r7, #5
 8019f04:	33ff      	adds	r3, #255	@ 0xff
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	b29a      	uxth	r2, r3
 8019f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019f0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019f0e:	2076      	movs	r0, #118	@ 0x76
 8019f10:	183b      	adds	r3, r7, r0
 8019f12:	683a      	ldr	r2, [r7, #0]
 8019f14:	8912      	ldrh	r2, [r2, #8]
 8019f16:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	6959      	ldr	r1, [r3, #20]
 8019f1c:	1d7b      	adds	r3, r7, #5
 8019f1e:	33ff      	adds	r3, #255	@ 0xff
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	b29c      	uxth	r4, r3
 8019f24:	183b      	adds	r3, r7, r0
 8019f26:	881a      	ldrh	r2, [r3, #0]
 8019f28:	6878      	ldr	r0, [r7, #4]
 8019f2a:	0023      	movs	r3, r4
 8019f2c:	f000 ffda 	bl	801aee4 <USB_WritePMA>
            ep->xfer_buff += len;
 8019f30:	683b      	ldr	r3, [r7, #0]
 8019f32:	695a      	ldr	r2, [r3, #20]
 8019f34:	1d7b      	adds	r3, r7, #5
 8019f36:	33ff      	adds	r3, #255	@ 0xff
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	18d2      	adds	r2, r2, r3
 8019f3c:	683b      	ldr	r3, [r7, #0]
 8019f3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019f40:	683b      	ldr	r3, [r7, #0]
 8019f42:	6a1a      	ldr	r2, [r3, #32]
 8019f44:	683b      	ldr	r3, [r7, #0]
 8019f46:	691b      	ldr	r3, [r3, #16]
 8019f48:	429a      	cmp	r2, r3
 8019f4a:	d908      	bls.n	8019f5e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8019f4c:	683b      	ldr	r3, [r7, #0]
 8019f4e:	6a1a      	ldr	r2, [r3, #32]
 8019f50:	1d7b      	adds	r3, r7, #5
 8019f52:	33ff      	adds	r3, #255	@ 0xff
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	1ad2      	subs	r2, r2, r3
 8019f58:	683b      	ldr	r3, [r7, #0]
 8019f5a:	621a      	str	r2, [r3, #32]
 8019f5c:	e007      	b.n	8019f6e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8019f5e:	683b      	ldr	r3, [r7, #0]
 8019f60:	6a1b      	ldr	r3, [r3, #32]
 8019f62:	1d7a      	adds	r2, r7, #5
 8019f64:	32ff      	adds	r2, #255	@ 0xff
 8019f66:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019f68:	683b      	ldr	r3, [r7, #0]
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	643b      	str	r3, [r7, #64]	@ 0x40
 8019f72:	683b      	ldr	r3, [r7, #0]
 8019f74:	785b      	ldrb	r3, [r3, #1]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d000      	beq.n	8019f7c <USB_EPStartXfer+0x57c>
 8019f7a:	e070      	b.n	801a05e <USB_EPStartXfer+0x65e>
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	2250      	movs	r2, #80	@ 0x50
 8019f84:	5a9b      	ldrh	r3, [r3, r2]
 8019f86:	b29b      	uxth	r3, r3
 8019f88:	001a      	movs	r2, r3
 8019f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f8c:	189b      	adds	r3, r3, r2
 8019f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019f90:	683b      	ldr	r3, [r7, #0]
 8019f92:	781b      	ldrb	r3, [r3, #0]
 8019f94:	00da      	lsls	r2, r3, #3
 8019f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f98:	18d3      	adds	r3, r2, r3
 8019f9a:	4a6d      	ldr	r2, [pc, #436]	@ (801a150 <USB_EPStartXfer+0x750>)
 8019f9c:	4694      	mov	ip, r2
 8019f9e:	4463      	add	r3, ip
 8019fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8019fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019fa4:	881b      	ldrh	r3, [r3, #0]
 8019fa6:	b29b      	uxth	r3, r3
 8019fa8:	059b      	lsls	r3, r3, #22
 8019faa:	0d9b      	lsrs	r3, r3, #22
 8019fac:	b29a      	uxth	r2, r3
 8019fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019fb0:	801a      	strh	r2, [r3, #0]
 8019fb2:	1d7b      	adds	r3, r7, #5
 8019fb4:	33ff      	adds	r3, #255	@ 0xff
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8019fba:	d922      	bls.n	801a002 <USB_EPStartXfer+0x602>
 8019fbc:	1d7b      	adds	r3, r7, #5
 8019fbe:	33ff      	adds	r3, #255	@ 0xff
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	095b      	lsrs	r3, r3, #5
 8019fc4:	21f4      	movs	r1, #244	@ 0xf4
 8019fc6:	187a      	adds	r2, r7, r1
 8019fc8:	6013      	str	r3, [r2, #0]
 8019fca:	1d7b      	adds	r3, r7, #5
 8019fcc:	33ff      	adds	r3, #255	@ 0xff
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	221f      	movs	r2, #31
 8019fd2:	4013      	ands	r3, r2
 8019fd4:	d104      	bne.n	8019fe0 <USB_EPStartXfer+0x5e0>
 8019fd6:	187b      	adds	r3, r7, r1
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	3b01      	subs	r3, #1
 8019fdc:	187a      	adds	r2, r7, r1
 8019fde:	6013      	str	r3, [r2, #0]
 8019fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019fe2:	881b      	ldrh	r3, [r3, #0]
 8019fe4:	b29a      	uxth	r2, r3
 8019fe6:	23f4      	movs	r3, #244	@ 0xf4
 8019fe8:	18fb      	adds	r3, r7, r3
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	b29b      	uxth	r3, r3
 8019fee:	029b      	lsls	r3, r3, #10
 8019ff0:	b29b      	uxth	r3, r3
 8019ff2:	4313      	orrs	r3, r2
 8019ff4:	b29b      	uxth	r3, r3
 8019ff6:	4a55      	ldr	r2, [pc, #340]	@ (801a14c <USB_EPStartXfer+0x74c>)
 8019ff8:	4313      	orrs	r3, r2
 8019ffa:	b29a      	uxth	r2, r3
 8019ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ffe:	801a      	strh	r2, [r3, #0]
 801a000:	e048      	b.n	801a094 <USB_EPStartXfer+0x694>
 801a002:	1d7b      	adds	r3, r7, #5
 801a004:	33ff      	adds	r3, #255	@ 0xff
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d108      	bne.n	801a01e <USB_EPStartXfer+0x61e>
 801a00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a00e:	881b      	ldrh	r3, [r3, #0]
 801a010:	b29b      	uxth	r3, r3
 801a012:	4a4e      	ldr	r2, [pc, #312]	@ (801a14c <USB_EPStartXfer+0x74c>)
 801a014:	4313      	orrs	r3, r2
 801a016:	b29a      	uxth	r2, r3
 801a018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a01a:	801a      	strh	r2, [r3, #0]
 801a01c:	e03a      	b.n	801a094 <USB_EPStartXfer+0x694>
 801a01e:	1d7b      	adds	r3, r7, #5
 801a020:	33ff      	adds	r3, #255	@ 0xff
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	085b      	lsrs	r3, r3, #1
 801a026:	21f4      	movs	r1, #244	@ 0xf4
 801a028:	187a      	adds	r2, r7, r1
 801a02a:	6013      	str	r3, [r2, #0]
 801a02c:	1d7b      	adds	r3, r7, #5
 801a02e:	33ff      	adds	r3, #255	@ 0xff
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	2201      	movs	r2, #1
 801a034:	4013      	ands	r3, r2
 801a036:	d004      	beq.n	801a042 <USB_EPStartXfer+0x642>
 801a038:	187b      	adds	r3, r7, r1
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	3301      	adds	r3, #1
 801a03e:	187a      	adds	r2, r7, r1
 801a040:	6013      	str	r3, [r2, #0]
 801a042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a044:	881b      	ldrh	r3, [r3, #0]
 801a046:	b29a      	uxth	r2, r3
 801a048:	23f4      	movs	r3, #244	@ 0xf4
 801a04a:	18fb      	adds	r3, r7, r3
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	b29b      	uxth	r3, r3
 801a050:	029b      	lsls	r3, r3, #10
 801a052:	b29b      	uxth	r3, r3
 801a054:	4313      	orrs	r3, r2
 801a056:	b29a      	uxth	r2, r3
 801a058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a05a:	801a      	strh	r2, [r3, #0]
 801a05c:	e01a      	b.n	801a094 <USB_EPStartXfer+0x694>
 801a05e:	683b      	ldr	r3, [r7, #0]
 801a060:	785b      	ldrb	r3, [r3, #1]
 801a062:	2b01      	cmp	r3, #1
 801a064:	d116      	bne.n	801a094 <USB_EPStartXfer+0x694>
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	2250      	movs	r2, #80	@ 0x50
 801a06a:	5a9b      	ldrh	r3, [r3, r2]
 801a06c:	b29b      	uxth	r3, r3
 801a06e:	001a      	movs	r2, r3
 801a070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a072:	189b      	adds	r3, r3, r2
 801a074:	643b      	str	r3, [r7, #64]	@ 0x40
 801a076:	683b      	ldr	r3, [r7, #0]
 801a078:	781b      	ldrb	r3, [r3, #0]
 801a07a:	00da      	lsls	r2, r3, #3
 801a07c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a07e:	18d3      	adds	r3, r2, r3
 801a080:	4a33      	ldr	r2, [pc, #204]	@ (801a150 <USB_EPStartXfer+0x750>)
 801a082:	4694      	mov	ip, r2
 801a084:	4463      	add	r3, ip
 801a086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a088:	1d7b      	adds	r3, r7, #5
 801a08a:	33ff      	adds	r3, #255	@ 0xff
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	b29a      	uxth	r2, r3
 801a090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a092:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a094:	2076      	movs	r0, #118	@ 0x76
 801a096:	183b      	adds	r3, r7, r0
 801a098:	683a      	ldr	r2, [r7, #0]
 801a09a:	8952      	ldrh	r2, [r2, #10]
 801a09c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a09e:	683b      	ldr	r3, [r7, #0]
 801a0a0:	6959      	ldr	r1, [r3, #20]
 801a0a2:	1d7b      	adds	r3, r7, #5
 801a0a4:	33ff      	adds	r3, #255	@ 0xff
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	b29c      	uxth	r4, r3
 801a0aa:	183b      	adds	r3, r7, r0
 801a0ac:	881a      	ldrh	r2, [r3, #0]
 801a0ae:	6878      	ldr	r0, [r7, #4]
 801a0b0:	0023      	movs	r3, r4
 801a0b2:	f000 ff17 	bl	801aee4 <USB_WritePMA>
 801a0b6:	e1b6      	b.n	801a426 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a0b8:	683b      	ldr	r3, [r7, #0]
 801a0ba:	6a1b      	ldr	r3, [r3, #32]
 801a0bc:	1d7a      	adds	r2, r7, #5
 801a0be:	32ff      	adds	r2, #255	@ 0xff
 801a0c0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a0c2:	687a      	ldr	r2, [r7, #4]
 801a0c4:	683b      	ldr	r3, [r7, #0]
 801a0c6:	781b      	ldrb	r3, [r3, #0]
 801a0c8:	009b      	lsls	r3, r3, #2
 801a0ca:	18d3      	adds	r3, r2, r3
 801a0cc:	881b      	ldrh	r3, [r3, #0]
 801a0ce:	b29a      	uxth	r2, r3
 801a0d0:	2062      	movs	r0, #98	@ 0x62
 801a0d2:	183b      	adds	r3, r7, r0
 801a0d4:	491f      	ldr	r1, [pc, #124]	@ (801a154 <USB_EPStartXfer+0x754>)
 801a0d6:	400a      	ands	r2, r1
 801a0d8:	801a      	strh	r2, [r3, #0]
 801a0da:	687a      	ldr	r2, [r7, #4]
 801a0dc:	683b      	ldr	r3, [r7, #0]
 801a0de:	781b      	ldrb	r3, [r3, #0]
 801a0e0:	009b      	lsls	r3, r3, #2
 801a0e2:	18d3      	adds	r3, r2, r3
 801a0e4:	183a      	adds	r2, r7, r0
 801a0e6:	8812      	ldrh	r2, [r2, #0]
 801a0e8:	491b      	ldr	r1, [pc, #108]	@ (801a158 <USB_EPStartXfer+0x758>)
 801a0ea:	430a      	orrs	r2, r1
 801a0ec:	b292      	uxth	r2, r2
 801a0ee:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	2250      	movs	r2, #80	@ 0x50
 801a0f8:	5a9b      	ldrh	r3, [r3, r2]
 801a0fa:	b29b      	uxth	r3, r3
 801a0fc:	001a      	movs	r2, r3
 801a0fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a100:	189b      	adds	r3, r3, r2
 801a102:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a104:	683b      	ldr	r3, [r7, #0]
 801a106:	781b      	ldrb	r3, [r3, #0]
 801a108:	00da      	lsls	r2, r3, #3
 801a10a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a10c:	18d3      	adds	r3, r2, r3
 801a10e:	4a0e      	ldr	r2, [pc, #56]	@ (801a148 <USB_EPStartXfer+0x748>)
 801a110:	4694      	mov	ip, r2
 801a112:	4463      	add	r3, ip
 801a114:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a116:	1d7b      	adds	r3, r7, #5
 801a118:	33ff      	adds	r3, #255	@ 0xff
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	b29a      	uxth	r2, r3
 801a11e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a120:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a122:	2076      	movs	r0, #118	@ 0x76
 801a124:	183b      	adds	r3, r7, r0
 801a126:	683a      	ldr	r2, [r7, #0]
 801a128:	8912      	ldrh	r2, [r2, #8]
 801a12a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a12c:	683b      	ldr	r3, [r7, #0]
 801a12e:	6959      	ldr	r1, [r3, #20]
 801a130:	1d7b      	adds	r3, r7, #5
 801a132:	33ff      	adds	r3, #255	@ 0xff
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	b29c      	uxth	r4, r3
 801a138:	183b      	adds	r3, r7, r0
 801a13a:	881a      	ldrh	r2, [r3, #0]
 801a13c:	6878      	ldr	r0, [r7, #4]
 801a13e:	0023      	movs	r3, r4
 801a140:	f000 fed0 	bl	801aee4 <USB_WritePMA>
 801a144:	e16f      	b.n	801a426 <USB_EPStartXfer+0xa26>
 801a146:	46c0      	nop			@ (mov r8, r8)
 801a148:	00000402 	.word	0x00000402
 801a14c:	ffff8000 	.word	0xffff8000
 801a150:	00000406 	.word	0x00000406
 801a154:	ffff8e8f 	.word	0xffff8e8f
 801a158:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a15c:	683b      	ldr	r3, [r7, #0]
 801a15e:	6a1a      	ldr	r2, [r3, #32]
 801a160:	1d7b      	adds	r3, r7, #5
 801a162:	33ff      	adds	r3, #255	@ 0xff
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	1ad2      	subs	r2, r2, r3
 801a168:	683b      	ldr	r3, [r7, #0]
 801a16a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a16c:	687a      	ldr	r2, [r7, #4]
 801a16e:	683b      	ldr	r3, [r7, #0]
 801a170:	781b      	ldrb	r3, [r3, #0]
 801a172:	009b      	lsls	r3, r3, #2
 801a174:	18d3      	adds	r3, r2, r3
 801a176:	881b      	ldrh	r3, [r3, #0]
 801a178:	b29b      	uxth	r3, r3
 801a17a:	001a      	movs	r2, r3
 801a17c:	2340      	movs	r3, #64	@ 0x40
 801a17e:	4013      	ands	r3, r2
 801a180:	d100      	bne.n	801a184 <USB_EPStartXfer+0x784>
 801a182:	e0a4      	b.n	801a2ce <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	673b      	str	r3, [r7, #112]	@ 0x70
 801a188:	683b      	ldr	r3, [r7, #0]
 801a18a:	785b      	ldrb	r3, [r3, #1]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d000      	beq.n	801a192 <USB_EPStartXfer+0x792>
 801a190:	e070      	b.n	801a274 <USB_EPStartXfer+0x874>
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	2250      	movs	r2, #80	@ 0x50
 801a19a:	5a9b      	ldrh	r3, [r3, r2]
 801a19c:	b29b      	uxth	r3, r3
 801a19e:	001a      	movs	r2, r3
 801a1a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1a2:	189b      	adds	r3, r3, r2
 801a1a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a1a6:	683b      	ldr	r3, [r7, #0]
 801a1a8:	781b      	ldrb	r3, [r3, #0]
 801a1aa:	00da      	lsls	r2, r3, #3
 801a1ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1ae:	18d3      	adds	r3, r2, r3
 801a1b0:	4abc      	ldr	r2, [pc, #752]	@ (801a4a4 <USB_EPStartXfer+0xaa4>)
 801a1b2:	4694      	mov	ip, r2
 801a1b4:	4463      	add	r3, ip
 801a1b6:	667b      	str	r3, [r7, #100]	@ 0x64
 801a1b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a1ba:	881b      	ldrh	r3, [r3, #0]
 801a1bc:	b29b      	uxth	r3, r3
 801a1be:	059b      	lsls	r3, r3, #22
 801a1c0:	0d9b      	lsrs	r3, r3, #22
 801a1c2:	b29a      	uxth	r2, r3
 801a1c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a1c6:	801a      	strh	r2, [r3, #0]
 801a1c8:	1d7b      	adds	r3, r7, #5
 801a1ca:	33ff      	adds	r3, #255	@ 0xff
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	2b3e      	cmp	r3, #62	@ 0x3e
 801a1d0:	d922      	bls.n	801a218 <USB_EPStartXfer+0x818>
 801a1d2:	1d7b      	adds	r3, r7, #5
 801a1d4:	33ff      	adds	r3, #255	@ 0xff
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	095b      	lsrs	r3, r3, #5
 801a1da:	21f0      	movs	r1, #240	@ 0xf0
 801a1dc:	187a      	adds	r2, r7, r1
 801a1de:	6013      	str	r3, [r2, #0]
 801a1e0:	1d7b      	adds	r3, r7, #5
 801a1e2:	33ff      	adds	r3, #255	@ 0xff
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	221f      	movs	r2, #31
 801a1e8:	4013      	ands	r3, r2
 801a1ea:	d104      	bne.n	801a1f6 <USB_EPStartXfer+0x7f6>
 801a1ec:	187b      	adds	r3, r7, r1
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	3b01      	subs	r3, #1
 801a1f2:	187a      	adds	r2, r7, r1
 801a1f4:	6013      	str	r3, [r2, #0]
 801a1f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a1f8:	881b      	ldrh	r3, [r3, #0]
 801a1fa:	b29a      	uxth	r2, r3
 801a1fc:	23f0      	movs	r3, #240	@ 0xf0
 801a1fe:	18fb      	adds	r3, r7, r3
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	b29b      	uxth	r3, r3
 801a204:	029b      	lsls	r3, r3, #10
 801a206:	b29b      	uxth	r3, r3
 801a208:	4313      	orrs	r3, r2
 801a20a:	b29b      	uxth	r3, r3
 801a20c:	4aa6      	ldr	r2, [pc, #664]	@ (801a4a8 <USB_EPStartXfer+0xaa8>)
 801a20e:	4313      	orrs	r3, r2
 801a210:	b29a      	uxth	r2, r3
 801a212:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a214:	801a      	strh	r2, [r3, #0]
 801a216:	e048      	b.n	801a2aa <USB_EPStartXfer+0x8aa>
 801a218:	1d7b      	adds	r3, r7, #5
 801a21a:	33ff      	adds	r3, #255	@ 0xff
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d108      	bne.n	801a234 <USB_EPStartXfer+0x834>
 801a222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a224:	881b      	ldrh	r3, [r3, #0]
 801a226:	b29b      	uxth	r3, r3
 801a228:	4a9f      	ldr	r2, [pc, #636]	@ (801a4a8 <USB_EPStartXfer+0xaa8>)
 801a22a:	4313      	orrs	r3, r2
 801a22c:	b29a      	uxth	r2, r3
 801a22e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a230:	801a      	strh	r2, [r3, #0]
 801a232:	e03a      	b.n	801a2aa <USB_EPStartXfer+0x8aa>
 801a234:	1d7b      	adds	r3, r7, #5
 801a236:	33ff      	adds	r3, #255	@ 0xff
 801a238:	681b      	ldr	r3, [r3, #0]
 801a23a:	085b      	lsrs	r3, r3, #1
 801a23c:	21f0      	movs	r1, #240	@ 0xf0
 801a23e:	187a      	adds	r2, r7, r1
 801a240:	6013      	str	r3, [r2, #0]
 801a242:	1d7b      	adds	r3, r7, #5
 801a244:	33ff      	adds	r3, #255	@ 0xff
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	2201      	movs	r2, #1
 801a24a:	4013      	ands	r3, r2
 801a24c:	d004      	beq.n	801a258 <USB_EPStartXfer+0x858>
 801a24e:	187b      	adds	r3, r7, r1
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	3301      	adds	r3, #1
 801a254:	187a      	adds	r2, r7, r1
 801a256:	6013      	str	r3, [r2, #0]
 801a258:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a25a:	881b      	ldrh	r3, [r3, #0]
 801a25c:	b29a      	uxth	r2, r3
 801a25e:	23f0      	movs	r3, #240	@ 0xf0
 801a260:	18fb      	adds	r3, r7, r3
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	b29b      	uxth	r3, r3
 801a266:	029b      	lsls	r3, r3, #10
 801a268:	b29b      	uxth	r3, r3
 801a26a:	4313      	orrs	r3, r2
 801a26c:	b29a      	uxth	r2, r3
 801a26e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a270:	801a      	strh	r2, [r3, #0]
 801a272:	e01a      	b.n	801a2aa <USB_EPStartXfer+0x8aa>
 801a274:	683b      	ldr	r3, [r7, #0]
 801a276:	785b      	ldrb	r3, [r3, #1]
 801a278:	2b01      	cmp	r3, #1
 801a27a:	d116      	bne.n	801a2aa <USB_EPStartXfer+0x8aa>
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	2250      	movs	r2, #80	@ 0x50
 801a280:	5a9b      	ldrh	r3, [r3, r2]
 801a282:	b29b      	uxth	r3, r3
 801a284:	001a      	movs	r2, r3
 801a286:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a288:	189b      	adds	r3, r3, r2
 801a28a:	673b      	str	r3, [r7, #112]	@ 0x70
 801a28c:	683b      	ldr	r3, [r7, #0]
 801a28e:	781b      	ldrb	r3, [r3, #0]
 801a290:	00da      	lsls	r2, r3, #3
 801a292:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a294:	18d3      	adds	r3, r2, r3
 801a296:	4a83      	ldr	r2, [pc, #524]	@ (801a4a4 <USB_EPStartXfer+0xaa4>)
 801a298:	4694      	mov	ip, r2
 801a29a:	4463      	add	r3, ip
 801a29c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a29e:	1d7b      	adds	r3, r7, #5
 801a2a0:	33ff      	adds	r3, #255	@ 0xff
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	b29a      	uxth	r2, r3
 801a2a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a2a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a2aa:	2076      	movs	r0, #118	@ 0x76
 801a2ac:	183b      	adds	r3, r7, r0
 801a2ae:	683a      	ldr	r2, [r7, #0]
 801a2b0:	8952      	ldrh	r2, [r2, #10]
 801a2b2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a2b4:	683b      	ldr	r3, [r7, #0]
 801a2b6:	6959      	ldr	r1, [r3, #20]
 801a2b8:	1d7b      	adds	r3, r7, #5
 801a2ba:	33ff      	adds	r3, #255	@ 0xff
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	b29c      	uxth	r4, r3
 801a2c0:	183b      	adds	r3, r7, r0
 801a2c2:	881a      	ldrh	r2, [r3, #0]
 801a2c4:	6878      	ldr	r0, [r7, #4]
 801a2c6:	0023      	movs	r3, r4
 801a2c8:	f000 fe0c 	bl	801aee4 <USB_WritePMA>
 801a2cc:	e0ab      	b.n	801a426 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a2ce:	683b      	ldr	r3, [r7, #0]
 801a2d0:	785b      	ldrb	r3, [r3, #1]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d000      	beq.n	801a2d8 <USB_EPStartXfer+0x8d8>
 801a2d6:	e070      	b.n	801a3ba <USB_EPStartXfer+0x9ba>
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	2250      	movs	r2, #80	@ 0x50
 801a2e0:	5a9b      	ldrh	r3, [r3, r2]
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	001a      	movs	r2, r3
 801a2e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a2e8:	189b      	adds	r3, r3, r2
 801a2ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	781b      	ldrb	r3, [r3, #0]
 801a2f0:	00da      	lsls	r2, r3, #3
 801a2f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a2f4:	18d3      	adds	r3, r2, r3
 801a2f6:	4a6d      	ldr	r2, [pc, #436]	@ (801a4ac <USB_EPStartXfer+0xaac>)
 801a2f8:	4694      	mov	ip, r2
 801a2fa:	4463      	add	r3, ip
 801a2fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a2fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a300:	881b      	ldrh	r3, [r3, #0]
 801a302:	b29b      	uxth	r3, r3
 801a304:	059b      	lsls	r3, r3, #22
 801a306:	0d9b      	lsrs	r3, r3, #22
 801a308:	b29a      	uxth	r2, r3
 801a30a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a30c:	801a      	strh	r2, [r3, #0]
 801a30e:	1d7b      	adds	r3, r7, #5
 801a310:	33ff      	adds	r3, #255	@ 0xff
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	2b3e      	cmp	r3, #62	@ 0x3e
 801a316:	d922      	bls.n	801a35e <USB_EPStartXfer+0x95e>
 801a318:	1d7b      	adds	r3, r7, #5
 801a31a:	33ff      	adds	r3, #255	@ 0xff
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	095b      	lsrs	r3, r3, #5
 801a320:	21ec      	movs	r1, #236	@ 0xec
 801a322:	187a      	adds	r2, r7, r1
 801a324:	6013      	str	r3, [r2, #0]
 801a326:	1d7b      	adds	r3, r7, #5
 801a328:	33ff      	adds	r3, #255	@ 0xff
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	221f      	movs	r2, #31
 801a32e:	4013      	ands	r3, r2
 801a330:	d104      	bne.n	801a33c <USB_EPStartXfer+0x93c>
 801a332:	187b      	adds	r3, r7, r1
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	3b01      	subs	r3, #1
 801a338:	187a      	adds	r2, r7, r1
 801a33a:	6013      	str	r3, [r2, #0]
 801a33c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a33e:	881b      	ldrh	r3, [r3, #0]
 801a340:	b29a      	uxth	r2, r3
 801a342:	23ec      	movs	r3, #236	@ 0xec
 801a344:	18fb      	adds	r3, r7, r3
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	b29b      	uxth	r3, r3
 801a34a:	029b      	lsls	r3, r3, #10
 801a34c:	b29b      	uxth	r3, r3
 801a34e:	4313      	orrs	r3, r2
 801a350:	b29b      	uxth	r3, r3
 801a352:	4a55      	ldr	r2, [pc, #340]	@ (801a4a8 <USB_EPStartXfer+0xaa8>)
 801a354:	4313      	orrs	r3, r2
 801a356:	b29a      	uxth	r2, r3
 801a358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a35a:	801a      	strh	r2, [r3, #0]
 801a35c:	e052      	b.n	801a404 <USB_EPStartXfer+0xa04>
 801a35e:	1d7b      	adds	r3, r7, #5
 801a360:	33ff      	adds	r3, #255	@ 0xff
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	2b00      	cmp	r3, #0
 801a366:	d108      	bne.n	801a37a <USB_EPStartXfer+0x97a>
 801a368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a36a:	881b      	ldrh	r3, [r3, #0]
 801a36c:	b29b      	uxth	r3, r3
 801a36e:	4a4e      	ldr	r2, [pc, #312]	@ (801a4a8 <USB_EPStartXfer+0xaa8>)
 801a370:	4313      	orrs	r3, r2
 801a372:	b29a      	uxth	r2, r3
 801a374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a376:	801a      	strh	r2, [r3, #0]
 801a378:	e044      	b.n	801a404 <USB_EPStartXfer+0xa04>
 801a37a:	1d7b      	adds	r3, r7, #5
 801a37c:	33ff      	adds	r3, #255	@ 0xff
 801a37e:	681b      	ldr	r3, [r3, #0]
 801a380:	085b      	lsrs	r3, r3, #1
 801a382:	21ec      	movs	r1, #236	@ 0xec
 801a384:	187a      	adds	r2, r7, r1
 801a386:	6013      	str	r3, [r2, #0]
 801a388:	1d7b      	adds	r3, r7, #5
 801a38a:	33ff      	adds	r3, #255	@ 0xff
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	2201      	movs	r2, #1
 801a390:	4013      	ands	r3, r2
 801a392:	d004      	beq.n	801a39e <USB_EPStartXfer+0x99e>
 801a394:	187b      	adds	r3, r7, r1
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	3301      	adds	r3, #1
 801a39a:	187a      	adds	r2, r7, r1
 801a39c:	6013      	str	r3, [r2, #0]
 801a39e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a3a0:	881b      	ldrh	r3, [r3, #0]
 801a3a2:	b29a      	uxth	r2, r3
 801a3a4:	23ec      	movs	r3, #236	@ 0xec
 801a3a6:	18fb      	adds	r3, r7, r3
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	b29b      	uxth	r3, r3
 801a3ac:	029b      	lsls	r3, r3, #10
 801a3ae:	b29b      	uxth	r3, r3
 801a3b0:	4313      	orrs	r3, r2
 801a3b2:	b29a      	uxth	r2, r3
 801a3b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a3b6:	801a      	strh	r2, [r3, #0]
 801a3b8:	e024      	b.n	801a404 <USB_EPStartXfer+0xa04>
 801a3ba:	683b      	ldr	r3, [r7, #0]
 801a3bc:	785b      	ldrb	r3, [r3, #1]
 801a3be:	2b01      	cmp	r3, #1
 801a3c0:	d120      	bne.n	801a404 <USB_EPStartXfer+0xa04>
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	2184      	movs	r1, #132	@ 0x84
 801a3c6:	187a      	adds	r2, r7, r1
 801a3c8:	6013      	str	r3, [r2, #0]
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2250      	movs	r2, #80	@ 0x50
 801a3ce:	5a9b      	ldrh	r3, [r3, r2]
 801a3d0:	b29b      	uxth	r3, r3
 801a3d2:	001a      	movs	r2, r3
 801a3d4:	187b      	adds	r3, r7, r1
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	189b      	adds	r3, r3, r2
 801a3da:	187a      	adds	r2, r7, r1
 801a3dc:	6013      	str	r3, [r2, #0]
 801a3de:	683b      	ldr	r3, [r7, #0]
 801a3e0:	781b      	ldrb	r3, [r3, #0]
 801a3e2:	00da      	lsls	r2, r3, #3
 801a3e4:	187b      	adds	r3, r7, r1
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	18d3      	adds	r3, r2, r3
 801a3ea:	4a30      	ldr	r2, [pc, #192]	@ (801a4ac <USB_EPStartXfer+0xaac>)
 801a3ec:	4694      	mov	ip, r2
 801a3ee:	4463      	add	r3, ip
 801a3f0:	2180      	movs	r1, #128	@ 0x80
 801a3f2:	187a      	adds	r2, r7, r1
 801a3f4:	6013      	str	r3, [r2, #0]
 801a3f6:	1d7b      	adds	r3, r7, #5
 801a3f8:	33ff      	adds	r3, #255	@ 0xff
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	b29a      	uxth	r2, r3
 801a3fe:	187b      	adds	r3, r7, r1
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a404:	2076      	movs	r0, #118	@ 0x76
 801a406:	183b      	adds	r3, r7, r0
 801a408:	683a      	ldr	r2, [r7, #0]
 801a40a:	8912      	ldrh	r2, [r2, #8]
 801a40c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a40e:	683b      	ldr	r3, [r7, #0]
 801a410:	6959      	ldr	r1, [r3, #20]
 801a412:	1d7b      	adds	r3, r7, #5
 801a414:	33ff      	adds	r3, #255	@ 0xff
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	b29c      	uxth	r4, r3
 801a41a:	183b      	adds	r3, r7, r0
 801a41c:	881a      	ldrh	r2, [r3, #0]
 801a41e:	6878      	ldr	r0, [r7, #4]
 801a420:	0023      	movs	r3, r4
 801a422:	f000 fd5f 	bl	801aee4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801a426:	687a      	ldr	r2, [r7, #4]
 801a428:	683b      	ldr	r3, [r7, #0]
 801a42a:	781b      	ldrb	r3, [r3, #0]
 801a42c:	009b      	lsls	r3, r3, #2
 801a42e:	18d3      	adds	r3, r2, r3
 801a430:	881b      	ldrh	r3, [r3, #0]
 801a432:	b29a      	uxth	r2, r3
 801a434:	200a      	movs	r0, #10
 801a436:	183b      	adds	r3, r7, r0
 801a438:	491d      	ldr	r1, [pc, #116]	@ (801a4b0 <USB_EPStartXfer+0xab0>)
 801a43a:	400a      	ands	r2, r1
 801a43c:	801a      	strh	r2, [r3, #0]
 801a43e:	183b      	adds	r3, r7, r0
 801a440:	183a      	adds	r2, r7, r0
 801a442:	8812      	ldrh	r2, [r2, #0]
 801a444:	2110      	movs	r1, #16
 801a446:	404a      	eors	r2, r1
 801a448:	801a      	strh	r2, [r3, #0]
 801a44a:	183b      	adds	r3, r7, r0
 801a44c:	183a      	adds	r2, r7, r0
 801a44e:	8812      	ldrh	r2, [r2, #0]
 801a450:	2120      	movs	r1, #32
 801a452:	404a      	eors	r2, r1
 801a454:	801a      	strh	r2, [r3, #0]
 801a456:	687a      	ldr	r2, [r7, #4]
 801a458:	683b      	ldr	r3, [r7, #0]
 801a45a:	781b      	ldrb	r3, [r3, #0]
 801a45c:	009b      	lsls	r3, r3, #2
 801a45e:	18d3      	adds	r3, r2, r3
 801a460:	183a      	adds	r2, r7, r0
 801a462:	8812      	ldrh	r2, [r2, #0]
 801a464:	4913      	ldr	r1, [pc, #76]	@ (801a4b4 <USB_EPStartXfer+0xab4>)
 801a466:	430a      	orrs	r2, r1
 801a468:	b292      	uxth	r2, r2
 801a46a:	801a      	strh	r2, [r3, #0]
 801a46c:	f000 fbf4 	bl	801ac58 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801a470:	683b      	ldr	r3, [r7, #0]
 801a472:	7b1b      	ldrb	r3, [r3, #12]
 801a474:	2b00      	cmp	r3, #0
 801a476:	d000      	beq.n	801a47a <USB_EPStartXfer+0xa7a>
 801a478:	e0a9      	b.n	801a5ce <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801a47a:	683b      	ldr	r3, [r7, #0]
 801a47c:	699a      	ldr	r2, [r3, #24]
 801a47e:	683b      	ldr	r3, [r7, #0]
 801a480:	691b      	ldr	r3, [r3, #16]
 801a482:	429a      	cmp	r2, r3
 801a484:	d918      	bls.n	801a4b8 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801a486:	683b      	ldr	r3, [r7, #0]
 801a488:	691b      	ldr	r3, [r3, #16]
 801a48a:	1d7a      	adds	r2, r7, #5
 801a48c:	32ff      	adds	r2, #255	@ 0xff
 801a48e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801a490:	683b      	ldr	r3, [r7, #0]
 801a492:	699a      	ldr	r2, [r3, #24]
 801a494:	1d7b      	adds	r3, r7, #5
 801a496:	33ff      	adds	r3, #255	@ 0xff
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	1ad2      	subs	r2, r2, r3
 801a49c:	683b      	ldr	r3, [r7, #0]
 801a49e:	619a      	str	r2, [r3, #24]
 801a4a0:	e012      	b.n	801a4c8 <USB_EPStartXfer+0xac8>
 801a4a2:	46c0      	nop			@ (mov r8, r8)
 801a4a4:	00000406 	.word	0x00000406
 801a4a8:	ffff8000 	.word	0xffff8000
 801a4ac:	00000402 	.word	0x00000402
 801a4b0:	ffff8fbf 	.word	0xffff8fbf
 801a4b4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801a4b8:	683b      	ldr	r3, [r7, #0]
 801a4ba:	699b      	ldr	r3, [r3, #24]
 801a4bc:	1d7a      	adds	r2, r7, #5
 801a4be:	32ff      	adds	r2, #255	@ 0xff
 801a4c0:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801a4c2:	683b      	ldr	r3, [r7, #0]
 801a4c4:	2200      	movs	r2, #0
 801a4c6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801a4c8:	687b      	ldr	r3, [r7, #4]
 801a4ca:	2190      	movs	r1, #144	@ 0x90
 801a4cc:	187a      	adds	r2, r7, r1
 801a4ce:	6013      	str	r3, [r2, #0]
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	2250      	movs	r2, #80	@ 0x50
 801a4d4:	5a9b      	ldrh	r3, [r3, r2]
 801a4d6:	b29b      	uxth	r3, r3
 801a4d8:	001a      	movs	r2, r3
 801a4da:	187b      	adds	r3, r7, r1
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	189b      	adds	r3, r3, r2
 801a4e0:	187a      	adds	r2, r7, r1
 801a4e2:	6013      	str	r3, [r2, #0]
 801a4e4:	683b      	ldr	r3, [r7, #0]
 801a4e6:	781b      	ldrb	r3, [r3, #0]
 801a4e8:	00da      	lsls	r2, r3, #3
 801a4ea:	187b      	adds	r3, r7, r1
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	18d3      	adds	r3, r2, r3
 801a4f0:	4acf      	ldr	r2, [pc, #828]	@ (801a830 <USB_EPStartXfer+0xe30>)
 801a4f2:	4694      	mov	ip, r2
 801a4f4:	4463      	add	r3, ip
 801a4f6:	218c      	movs	r1, #140	@ 0x8c
 801a4f8:	187a      	adds	r2, r7, r1
 801a4fa:	6013      	str	r3, [r2, #0]
 801a4fc:	187b      	adds	r3, r7, r1
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	881b      	ldrh	r3, [r3, #0]
 801a502:	b29b      	uxth	r3, r3
 801a504:	059b      	lsls	r3, r3, #22
 801a506:	0d9b      	lsrs	r3, r3, #22
 801a508:	b29a      	uxth	r2, r3
 801a50a:	187b      	adds	r3, r7, r1
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	801a      	strh	r2, [r3, #0]
 801a510:	1d7b      	adds	r3, r7, #5
 801a512:	33ff      	adds	r3, #255	@ 0xff
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	2b3e      	cmp	r3, #62	@ 0x3e
 801a518:	d925      	bls.n	801a566 <USB_EPStartXfer+0xb66>
 801a51a:	1d7b      	adds	r3, r7, #5
 801a51c:	33ff      	adds	r3, #255	@ 0xff
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	095b      	lsrs	r3, r3, #5
 801a522:	21e8      	movs	r1, #232	@ 0xe8
 801a524:	187a      	adds	r2, r7, r1
 801a526:	6013      	str	r3, [r2, #0]
 801a528:	1d7b      	adds	r3, r7, #5
 801a52a:	33ff      	adds	r3, #255	@ 0xff
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	221f      	movs	r2, #31
 801a530:	4013      	ands	r3, r2
 801a532:	d104      	bne.n	801a53e <USB_EPStartXfer+0xb3e>
 801a534:	187b      	adds	r3, r7, r1
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	3b01      	subs	r3, #1
 801a53a:	187a      	adds	r2, r7, r1
 801a53c:	6013      	str	r3, [r2, #0]
 801a53e:	218c      	movs	r1, #140	@ 0x8c
 801a540:	187b      	adds	r3, r7, r1
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	881b      	ldrh	r3, [r3, #0]
 801a546:	b29a      	uxth	r2, r3
 801a548:	23e8      	movs	r3, #232	@ 0xe8
 801a54a:	18fb      	adds	r3, r7, r3
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	b29b      	uxth	r3, r3
 801a550:	029b      	lsls	r3, r3, #10
 801a552:	b29b      	uxth	r3, r3
 801a554:	4313      	orrs	r3, r2
 801a556:	b29b      	uxth	r3, r3
 801a558:	4ab6      	ldr	r2, [pc, #728]	@ (801a834 <USB_EPStartXfer+0xe34>)
 801a55a:	4313      	orrs	r3, r2
 801a55c:	b29a      	uxth	r2, r3
 801a55e:	187b      	adds	r3, r7, r1
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	801a      	strh	r2, [r3, #0]
 801a564:	e353      	b.n	801ac0e <USB_EPStartXfer+0x120e>
 801a566:	1d7b      	adds	r3, r7, #5
 801a568:	33ff      	adds	r3, #255	@ 0xff
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d10b      	bne.n	801a588 <USB_EPStartXfer+0xb88>
 801a570:	218c      	movs	r1, #140	@ 0x8c
 801a572:	187b      	adds	r3, r7, r1
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	881b      	ldrh	r3, [r3, #0]
 801a578:	b29b      	uxth	r3, r3
 801a57a:	4aae      	ldr	r2, [pc, #696]	@ (801a834 <USB_EPStartXfer+0xe34>)
 801a57c:	4313      	orrs	r3, r2
 801a57e:	b29a      	uxth	r2, r3
 801a580:	187b      	adds	r3, r7, r1
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	801a      	strh	r2, [r3, #0]
 801a586:	e342      	b.n	801ac0e <USB_EPStartXfer+0x120e>
 801a588:	1d7b      	adds	r3, r7, #5
 801a58a:	33ff      	adds	r3, #255	@ 0xff
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	085b      	lsrs	r3, r3, #1
 801a590:	21e8      	movs	r1, #232	@ 0xe8
 801a592:	187a      	adds	r2, r7, r1
 801a594:	6013      	str	r3, [r2, #0]
 801a596:	1d7b      	adds	r3, r7, #5
 801a598:	33ff      	adds	r3, #255	@ 0xff
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	2201      	movs	r2, #1
 801a59e:	4013      	ands	r3, r2
 801a5a0:	d004      	beq.n	801a5ac <USB_EPStartXfer+0xbac>
 801a5a2:	187b      	adds	r3, r7, r1
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	3301      	adds	r3, #1
 801a5a8:	187a      	adds	r2, r7, r1
 801a5aa:	6013      	str	r3, [r2, #0]
 801a5ac:	218c      	movs	r1, #140	@ 0x8c
 801a5ae:	187b      	adds	r3, r7, r1
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	881b      	ldrh	r3, [r3, #0]
 801a5b4:	b29a      	uxth	r2, r3
 801a5b6:	23e8      	movs	r3, #232	@ 0xe8
 801a5b8:	18fb      	adds	r3, r7, r3
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	b29b      	uxth	r3, r3
 801a5be:	029b      	lsls	r3, r3, #10
 801a5c0:	b29b      	uxth	r3, r3
 801a5c2:	4313      	orrs	r3, r2
 801a5c4:	b29a      	uxth	r2, r3
 801a5c6:	187b      	adds	r3, r7, r1
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	801a      	strh	r2, [r3, #0]
 801a5cc:	e31f      	b.n	801ac0e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801a5ce:	683b      	ldr	r3, [r7, #0]
 801a5d0:	78db      	ldrb	r3, [r3, #3]
 801a5d2:	2b02      	cmp	r3, #2
 801a5d4:	d000      	beq.n	801a5d8 <USB_EPStartXfer+0xbd8>
 801a5d6:	e191      	b.n	801a8fc <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801a5d8:	683b      	ldr	r3, [r7, #0]
 801a5da:	785b      	ldrb	r3, [r3, #1]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d000      	beq.n	801a5e2 <USB_EPStartXfer+0xbe2>
 801a5e0:	e07c      	b.n	801a6dc <USB_EPStartXfer+0xcdc>
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	21ac      	movs	r1, #172	@ 0xac
 801a5e6:	187a      	adds	r2, r7, r1
 801a5e8:	6013      	str	r3, [r2, #0]
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	2250      	movs	r2, #80	@ 0x50
 801a5ee:	5a9b      	ldrh	r3, [r3, r2]
 801a5f0:	b29b      	uxth	r3, r3
 801a5f2:	001a      	movs	r2, r3
 801a5f4:	187b      	adds	r3, r7, r1
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	189b      	adds	r3, r3, r2
 801a5fa:	187a      	adds	r2, r7, r1
 801a5fc:	6013      	str	r3, [r2, #0]
 801a5fe:	683b      	ldr	r3, [r7, #0]
 801a600:	781b      	ldrb	r3, [r3, #0]
 801a602:	00da      	lsls	r2, r3, #3
 801a604:	187b      	adds	r3, r7, r1
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	18d3      	adds	r3, r2, r3
 801a60a:	4a8b      	ldr	r2, [pc, #556]	@ (801a838 <USB_EPStartXfer+0xe38>)
 801a60c:	4694      	mov	ip, r2
 801a60e:	4463      	add	r3, ip
 801a610:	21a8      	movs	r1, #168	@ 0xa8
 801a612:	187a      	adds	r2, r7, r1
 801a614:	6013      	str	r3, [r2, #0]
 801a616:	187b      	adds	r3, r7, r1
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	881b      	ldrh	r3, [r3, #0]
 801a61c:	b29b      	uxth	r3, r3
 801a61e:	059b      	lsls	r3, r3, #22
 801a620:	0d9b      	lsrs	r3, r3, #22
 801a622:	b29a      	uxth	r2, r3
 801a624:	187b      	adds	r3, r7, r1
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	801a      	strh	r2, [r3, #0]
 801a62a:	683b      	ldr	r3, [r7, #0]
 801a62c:	691b      	ldr	r3, [r3, #16]
 801a62e:	2b3e      	cmp	r3, #62	@ 0x3e
 801a630:	d923      	bls.n	801a67a <USB_EPStartXfer+0xc7a>
 801a632:	683b      	ldr	r3, [r7, #0]
 801a634:	691b      	ldr	r3, [r3, #16]
 801a636:	095b      	lsrs	r3, r3, #5
 801a638:	21e4      	movs	r1, #228	@ 0xe4
 801a63a:	187a      	adds	r2, r7, r1
 801a63c:	6013      	str	r3, [r2, #0]
 801a63e:	683b      	ldr	r3, [r7, #0]
 801a640:	691b      	ldr	r3, [r3, #16]
 801a642:	221f      	movs	r2, #31
 801a644:	4013      	ands	r3, r2
 801a646:	d104      	bne.n	801a652 <USB_EPStartXfer+0xc52>
 801a648:	187b      	adds	r3, r7, r1
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	3b01      	subs	r3, #1
 801a64e:	187a      	adds	r2, r7, r1
 801a650:	6013      	str	r3, [r2, #0]
 801a652:	21a8      	movs	r1, #168	@ 0xa8
 801a654:	187b      	adds	r3, r7, r1
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	881b      	ldrh	r3, [r3, #0]
 801a65a:	b29a      	uxth	r2, r3
 801a65c:	23e4      	movs	r3, #228	@ 0xe4
 801a65e:	18fb      	adds	r3, r7, r3
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	b29b      	uxth	r3, r3
 801a664:	029b      	lsls	r3, r3, #10
 801a666:	b29b      	uxth	r3, r3
 801a668:	4313      	orrs	r3, r2
 801a66a:	b29b      	uxth	r3, r3
 801a66c:	4a71      	ldr	r2, [pc, #452]	@ (801a834 <USB_EPStartXfer+0xe34>)
 801a66e:	4313      	orrs	r3, r2
 801a670:	b29a      	uxth	r2, r3
 801a672:	187b      	adds	r3, r7, r1
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	801a      	strh	r2, [r3, #0]
 801a678:	e054      	b.n	801a724 <USB_EPStartXfer+0xd24>
 801a67a:	683b      	ldr	r3, [r7, #0]
 801a67c:	691b      	ldr	r3, [r3, #16]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d10b      	bne.n	801a69a <USB_EPStartXfer+0xc9a>
 801a682:	21a8      	movs	r1, #168	@ 0xa8
 801a684:	187b      	adds	r3, r7, r1
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	881b      	ldrh	r3, [r3, #0]
 801a68a:	b29b      	uxth	r3, r3
 801a68c:	4a69      	ldr	r2, [pc, #420]	@ (801a834 <USB_EPStartXfer+0xe34>)
 801a68e:	4313      	orrs	r3, r2
 801a690:	b29a      	uxth	r2, r3
 801a692:	187b      	adds	r3, r7, r1
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	801a      	strh	r2, [r3, #0]
 801a698:	e044      	b.n	801a724 <USB_EPStartXfer+0xd24>
 801a69a:	683b      	ldr	r3, [r7, #0]
 801a69c:	691b      	ldr	r3, [r3, #16]
 801a69e:	085b      	lsrs	r3, r3, #1
 801a6a0:	21e4      	movs	r1, #228	@ 0xe4
 801a6a2:	187a      	adds	r2, r7, r1
 801a6a4:	6013      	str	r3, [r2, #0]
 801a6a6:	683b      	ldr	r3, [r7, #0]
 801a6a8:	691b      	ldr	r3, [r3, #16]
 801a6aa:	2201      	movs	r2, #1
 801a6ac:	4013      	ands	r3, r2
 801a6ae:	d004      	beq.n	801a6ba <USB_EPStartXfer+0xcba>
 801a6b0:	187b      	adds	r3, r7, r1
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	3301      	adds	r3, #1
 801a6b6:	187a      	adds	r2, r7, r1
 801a6b8:	6013      	str	r3, [r2, #0]
 801a6ba:	21a8      	movs	r1, #168	@ 0xa8
 801a6bc:	187b      	adds	r3, r7, r1
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	881b      	ldrh	r3, [r3, #0]
 801a6c2:	b29a      	uxth	r2, r3
 801a6c4:	23e4      	movs	r3, #228	@ 0xe4
 801a6c6:	18fb      	adds	r3, r7, r3
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	b29b      	uxth	r3, r3
 801a6cc:	029b      	lsls	r3, r3, #10
 801a6ce:	b29b      	uxth	r3, r3
 801a6d0:	4313      	orrs	r3, r2
 801a6d2:	b29a      	uxth	r2, r3
 801a6d4:	187b      	adds	r3, r7, r1
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	801a      	strh	r2, [r3, #0]
 801a6da:	e023      	b.n	801a724 <USB_EPStartXfer+0xd24>
 801a6dc:	683b      	ldr	r3, [r7, #0]
 801a6de:	785b      	ldrb	r3, [r3, #1]
 801a6e0:	2b01      	cmp	r3, #1
 801a6e2:	d11f      	bne.n	801a724 <USB_EPStartXfer+0xd24>
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	21b4      	movs	r1, #180	@ 0xb4
 801a6e8:	187a      	adds	r2, r7, r1
 801a6ea:	6013      	str	r3, [r2, #0]
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	2250      	movs	r2, #80	@ 0x50
 801a6f0:	5a9b      	ldrh	r3, [r3, r2]
 801a6f2:	b29b      	uxth	r3, r3
 801a6f4:	001a      	movs	r2, r3
 801a6f6:	187b      	adds	r3, r7, r1
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	189b      	adds	r3, r3, r2
 801a6fc:	187a      	adds	r2, r7, r1
 801a6fe:	6013      	str	r3, [r2, #0]
 801a700:	683b      	ldr	r3, [r7, #0]
 801a702:	781b      	ldrb	r3, [r3, #0]
 801a704:	00da      	lsls	r2, r3, #3
 801a706:	187b      	adds	r3, r7, r1
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	18d3      	adds	r3, r2, r3
 801a70c:	4a4a      	ldr	r2, [pc, #296]	@ (801a838 <USB_EPStartXfer+0xe38>)
 801a70e:	4694      	mov	ip, r2
 801a710:	4463      	add	r3, ip
 801a712:	21b0      	movs	r1, #176	@ 0xb0
 801a714:	187a      	adds	r2, r7, r1
 801a716:	6013      	str	r3, [r2, #0]
 801a718:	683b      	ldr	r3, [r7, #0]
 801a71a:	691b      	ldr	r3, [r3, #16]
 801a71c:	b29a      	uxth	r2, r3
 801a71e:	187b      	adds	r3, r7, r1
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	801a      	strh	r2, [r3, #0]
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	22a4      	movs	r2, #164	@ 0xa4
 801a728:	18ba      	adds	r2, r7, r2
 801a72a:	6013      	str	r3, [r2, #0]
 801a72c:	683b      	ldr	r3, [r7, #0]
 801a72e:	785b      	ldrb	r3, [r3, #1]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d000      	beq.n	801a736 <USB_EPStartXfer+0xd36>
 801a734:	e082      	b.n	801a83c <USB_EPStartXfer+0xe3c>
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	219c      	movs	r1, #156	@ 0x9c
 801a73a:	187a      	adds	r2, r7, r1
 801a73c:	6013      	str	r3, [r2, #0]
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	2250      	movs	r2, #80	@ 0x50
 801a742:	5a9b      	ldrh	r3, [r3, r2]
 801a744:	b29b      	uxth	r3, r3
 801a746:	001a      	movs	r2, r3
 801a748:	187b      	adds	r3, r7, r1
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	189b      	adds	r3, r3, r2
 801a74e:	187a      	adds	r2, r7, r1
 801a750:	6013      	str	r3, [r2, #0]
 801a752:	683b      	ldr	r3, [r7, #0]
 801a754:	781b      	ldrb	r3, [r3, #0]
 801a756:	00da      	lsls	r2, r3, #3
 801a758:	187b      	adds	r3, r7, r1
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	18d3      	adds	r3, r2, r3
 801a75e:	4a34      	ldr	r2, [pc, #208]	@ (801a830 <USB_EPStartXfer+0xe30>)
 801a760:	4694      	mov	ip, r2
 801a762:	4463      	add	r3, ip
 801a764:	2198      	movs	r1, #152	@ 0x98
 801a766:	187a      	adds	r2, r7, r1
 801a768:	6013      	str	r3, [r2, #0]
 801a76a:	187b      	adds	r3, r7, r1
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	881b      	ldrh	r3, [r3, #0]
 801a770:	b29b      	uxth	r3, r3
 801a772:	059b      	lsls	r3, r3, #22
 801a774:	0d9b      	lsrs	r3, r3, #22
 801a776:	b29a      	uxth	r2, r3
 801a778:	187b      	adds	r3, r7, r1
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	801a      	strh	r2, [r3, #0]
 801a77e:	683b      	ldr	r3, [r7, #0]
 801a780:	691b      	ldr	r3, [r3, #16]
 801a782:	2b3e      	cmp	r3, #62	@ 0x3e
 801a784:	d923      	bls.n	801a7ce <USB_EPStartXfer+0xdce>
 801a786:	683b      	ldr	r3, [r7, #0]
 801a788:	691b      	ldr	r3, [r3, #16]
 801a78a:	095b      	lsrs	r3, r3, #5
 801a78c:	21e0      	movs	r1, #224	@ 0xe0
 801a78e:	187a      	adds	r2, r7, r1
 801a790:	6013      	str	r3, [r2, #0]
 801a792:	683b      	ldr	r3, [r7, #0]
 801a794:	691b      	ldr	r3, [r3, #16]
 801a796:	221f      	movs	r2, #31
 801a798:	4013      	ands	r3, r2
 801a79a:	d104      	bne.n	801a7a6 <USB_EPStartXfer+0xda6>
 801a79c:	187b      	adds	r3, r7, r1
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	3b01      	subs	r3, #1
 801a7a2:	187a      	adds	r2, r7, r1
 801a7a4:	6013      	str	r3, [r2, #0]
 801a7a6:	2198      	movs	r1, #152	@ 0x98
 801a7a8:	187b      	adds	r3, r7, r1
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	881b      	ldrh	r3, [r3, #0]
 801a7ae:	b29a      	uxth	r2, r3
 801a7b0:	23e0      	movs	r3, #224	@ 0xe0
 801a7b2:	18fb      	adds	r3, r7, r3
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	b29b      	uxth	r3, r3
 801a7b8:	029b      	lsls	r3, r3, #10
 801a7ba:	b29b      	uxth	r3, r3
 801a7bc:	4313      	orrs	r3, r2
 801a7be:	b29b      	uxth	r3, r3
 801a7c0:	4a1c      	ldr	r2, [pc, #112]	@ (801a834 <USB_EPStartXfer+0xe34>)
 801a7c2:	4313      	orrs	r3, r2
 801a7c4:	b29a      	uxth	r2, r3
 801a7c6:	187b      	adds	r3, r7, r1
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	801a      	strh	r2, [r3, #0]
 801a7cc:	e057      	b.n	801a87e <USB_EPStartXfer+0xe7e>
 801a7ce:	683b      	ldr	r3, [r7, #0]
 801a7d0:	691b      	ldr	r3, [r3, #16]
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d10b      	bne.n	801a7ee <USB_EPStartXfer+0xdee>
 801a7d6:	2198      	movs	r1, #152	@ 0x98
 801a7d8:	187b      	adds	r3, r7, r1
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	881b      	ldrh	r3, [r3, #0]
 801a7de:	b29b      	uxth	r3, r3
 801a7e0:	4a14      	ldr	r2, [pc, #80]	@ (801a834 <USB_EPStartXfer+0xe34>)
 801a7e2:	4313      	orrs	r3, r2
 801a7e4:	b29a      	uxth	r2, r3
 801a7e6:	187b      	adds	r3, r7, r1
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	801a      	strh	r2, [r3, #0]
 801a7ec:	e047      	b.n	801a87e <USB_EPStartXfer+0xe7e>
 801a7ee:	683b      	ldr	r3, [r7, #0]
 801a7f0:	691b      	ldr	r3, [r3, #16]
 801a7f2:	085b      	lsrs	r3, r3, #1
 801a7f4:	21e0      	movs	r1, #224	@ 0xe0
 801a7f6:	187a      	adds	r2, r7, r1
 801a7f8:	6013      	str	r3, [r2, #0]
 801a7fa:	683b      	ldr	r3, [r7, #0]
 801a7fc:	691b      	ldr	r3, [r3, #16]
 801a7fe:	2201      	movs	r2, #1
 801a800:	4013      	ands	r3, r2
 801a802:	d004      	beq.n	801a80e <USB_EPStartXfer+0xe0e>
 801a804:	187b      	adds	r3, r7, r1
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	3301      	adds	r3, #1
 801a80a:	187a      	adds	r2, r7, r1
 801a80c:	6013      	str	r3, [r2, #0]
 801a80e:	2198      	movs	r1, #152	@ 0x98
 801a810:	187b      	adds	r3, r7, r1
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	881b      	ldrh	r3, [r3, #0]
 801a816:	b29a      	uxth	r2, r3
 801a818:	23e0      	movs	r3, #224	@ 0xe0
 801a81a:	18fb      	adds	r3, r7, r3
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	b29b      	uxth	r3, r3
 801a820:	029b      	lsls	r3, r3, #10
 801a822:	b29b      	uxth	r3, r3
 801a824:	4313      	orrs	r3, r2
 801a826:	b29a      	uxth	r2, r3
 801a828:	187b      	adds	r3, r7, r1
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	801a      	strh	r2, [r3, #0]
 801a82e:	e026      	b.n	801a87e <USB_EPStartXfer+0xe7e>
 801a830:	00000406 	.word	0x00000406
 801a834:	ffff8000 	.word	0xffff8000
 801a838:	00000402 	.word	0x00000402
 801a83c:	683b      	ldr	r3, [r7, #0]
 801a83e:	785b      	ldrb	r3, [r3, #1]
 801a840:	2b01      	cmp	r3, #1
 801a842:	d11c      	bne.n	801a87e <USB_EPStartXfer+0xe7e>
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	2250      	movs	r2, #80	@ 0x50
 801a848:	5a9b      	ldrh	r3, [r3, r2]
 801a84a:	b29b      	uxth	r3, r3
 801a84c:	001a      	movs	r2, r3
 801a84e:	21a4      	movs	r1, #164	@ 0xa4
 801a850:	187b      	adds	r3, r7, r1
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	189b      	adds	r3, r3, r2
 801a856:	187a      	adds	r2, r7, r1
 801a858:	6013      	str	r3, [r2, #0]
 801a85a:	683b      	ldr	r3, [r7, #0]
 801a85c:	781b      	ldrb	r3, [r3, #0]
 801a85e:	00da      	lsls	r2, r3, #3
 801a860:	187b      	adds	r3, r7, r1
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	18d3      	adds	r3, r2, r3
 801a866:	4ad2      	ldr	r2, [pc, #840]	@ (801abb0 <USB_EPStartXfer+0x11b0>)
 801a868:	4694      	mov	ip, r2
 801a86a:	4463      	add	r3, ip
 801a86c:	21a0      	movs	r1, #160	@ 0xa0
 801a86e:	187a      	adds	r2, r7, r1
 801a870:	6013      	str	r3, [r2, #0]
 801a872:	683b      	ldr	r3, [r7, #0]
 801a874:	691b      	ldr	r3, [r3, #16]
 801a876:	b29a      	uxth	r2, r3
 801a878:	187b      	adds	r3, r7, r1
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	69db      	ldr	r3, [r3, #28]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d100      	bne.n	801a888 <USB_EPStartXfer+0xe88>
 801a886:	e1c2      	b.n	801ac0e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801a888:	687a      	ldr	r2, [r7, #4]
 801a88a:	683b      	ldr	r3, [r7, #0]
 801a88c:	781b      	ldrb	r3, [r3, #0]
 801a88e:	009b      	lsls	r3, r3, #2
 801a890:	18d2      	adds	r2, r2, r3
 801a892:	2196      	movs	r1, #150	@ 0x96
 801a894:	187b      	adds	r3, r7, r1
 801a896:	8812      	ldrh	r2, [r2, #0]
 801a898:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a89a:	187b      	adds	r3, r7, r1
 801a89c:	881a      	ldrh	r2, [r3, #0]
 801a89e:	2380      	movs	r3, #128	@ 0x80
 801a8a0:	01db      	lsls	r3, r3, #7
 801a8a2:	4013      	ands	r3, r2
 801a8a4:	d004      	beq.n	801a8b0 <USB_EPStartXfer+0xeb0>
 801a8a6:	187b      	adds	r3, r7, r1
 801a8a8:	881b      	ldrh	r3, [r3, #0]
 801a8aa:	2240      	movs	r2, #64	@ 0x40
 801a8ac:	4013      	ands	r3, r2
 801a8ae:	d10d      	bne.n	801a8cc <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a8b0:	2196      	movs	r1, #150	@ 0x96
 801a8b2:	187b      	adds	r3, r7, r1
 801a8b4:	881a      	ldrh	r2, [r3, #0]
 801a8b6:	2380      	movs	r3, #128	@ 0x80
 801a8b8:	01db      	lsls	r3, r3, #7
 801a8ba:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a8bc:	d000      	beq.n	801a8c0 <USB_EPStartXfer+0xec0>
 801a8be:	e1a6      	b.n	801ac0e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a8c0:	187b      	adds	r3, r7, r1
 801a8c2:	881b      	ldrh	r3, [r3, #0]
 801a8c4:	2240      	movs	r2, #64	@ 0x40
 801a8c6:	4013      	ands	r3, r2
 801a8c8:	d000      	beq.n	801a8cc <USB_EPStartXfer+0xecc>
 801a8ca:	e1a0      	b.n	801ac0e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801a8cc:	687a      	ldr	r2, [r7, #4]
 801a8ce:	683b      	ldr	r3, [r7, #0]
 801a8d0:	781b      	ldrb	r3, [r3, #0]
 801a8d2:	009b      	lsls	r3, r3, #2
 801a8d4:	18d3      	adds	r3, r2, r3
 801a8d6:	881b      	ldrh	r3, [r3, #0]
 801a8d8:	b29a      	uxth	r2, r3
 801a8da:	2094      	movs	r0, #148	@ 0x94
 801a8dc:	183b      	adds	r3, r7, r0
 801a8de:	49b5      	ldr	r1, [pc, #724]	@ (801abb4 <USB_EPStartXfer+0x11b4>)
 801a8e0:	400a      	ands	r2, r1
 801a8e2:	801a      	strh	r2, [r3, #0]
 801a8e4:	687a      	ldr	r2, [r7, #4]
 801a8e6:	683b      	ldr	r3, [r7, #0]
 801a8e8:	781b      	ldrb	r3, [r3, #0]
 801a8ea:	009b      	lsls	r3, r3, #2
 801a8ec:	18d3      	adds	r3, r2, r3
 801a8ee:	183a      	adds	r2, r7, r0
 801a8f0:	8812      	ldrh	r2, [r2, #0]
 801a8f2:	49b1      	ldr	r1, [pc, #708]	@ (801abb8 <USB_EPStartXfer+0x11b8>)
 801a8f4:	430a      	orrs	r2, r1
 801a8f6:	b292      	uxth	r2, r2
 801a8f8:	801a      	strh	r2, [r3, #0]
 801a8fa:	e188      	b.n	801ac0e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801a8fc:	683b      	ldr	r3, [r7, #0]
 801a8fe:	78db      	ldrb	r3, [r3, #3]
 801a900:	2b01      	cmp	r3, #1
 801a902:	d000      	beq.n	801a906 <USB_EPStartXfer+0xf06>
 801a904:	e181      	b.n	801ac0a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801a906:	683b      	ldr	r3, [r7, #0]
 801a908:	699a      	ldr	r2, [r3, #24]
 801a90a:	683b      	ldr	r3, [r7, #0]
 801a90c:	691b      	ldr	r3, [r3, #16]
 801a90e:	429a      	cmp	r2, r3
 801a910:	d90d      	bls.n	801a92e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801a912:	683b      	ldr	r3, [r7, #0]
 801a914:	691b      	ldr	r3, [r3, #16]
 801a916:	1d7a      	adds	r2, r7, #5
 801a918:	32ff      	adds	r2, #255	@ 0xff
 801a91a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801a91c:	683b      	ldr	r3, [r7, #0]
 801a91e:	699a      	ldr	r2, [r3, #24]
 801a920:	1d7b      	adds	r3, r7, #5
 801a922:	33ff      	adds	r3, #255	@ 0xff
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	1ad2      	subs	r2, r2, r3
 801a928:	683b      	ldr	r3, [r7, #0]
 801a92a:	619a      	str	r2, [r3, #24]
 801a92c:	e007      	b.n	801a93e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801a92e:	683b      	ldr	r3, [r7, #0]
 801a930:	699b      	ldr	r3, [r3, #24]
 801a932:	1d7a      	adds	r2, r7, #5
 801a934:	32ff      	adds	r2, #255	@ 0xff
 801a936:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801a938:	683b      	ldr	r3, [r7, #0]
 801a93a:	2200      	movs	r2, #0
 801a93c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801a93e:	683b      	ldr	r3, [r7, #0]
 801a940:	785b      	ldrb	r3, [r3, #1]
 801a942:	2b00      	cmp	r3, #0
 801a944:	d000      	beq.n	801a948 <USB_EPStartXfer+0xf48>
 801a946:	e082      	b.n	801aa4e <USB_EPStartXfer+0x104e>
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	21cc      	movs	r1, #204	@ 0xcc
 801a94c:	187a      	adds	r2, r7, r1
 801a94e:	6013      	str	r3, [r2, #0]
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	2250      	movs	r2, #80	@ 0x50
 801a954:	5a9b      	ldrh	r3, [r3, r2]
 801a956:	b29b      	uxth	r3, r3
 801a958:	001a      	movs	r2, r3
 801a95a:	187b      	adds	r3, r7, r1
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	189b      	adds	r3, r3, r2
 801a960:	187a      	adds	r2, r7, r1
 801a962:	6013      	str	r3, [r2, #0]
 801a964:	683b      	ldr	r3, [r7, #0]
 801a966:	781b      	ldrb	r3, [r3, #0]
 801a968:	00da      	lsls	r2, r3, #3
 801a96a:	187b      	adds	r3, r7, r1
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	18d3      	adds	r3, r2, r3
 801a970:	4a92      	ldr	r2, [pc, #584]	@ (801abbc <USB_EPStartXfer+0x11bc>)
 801a972:	4694      	mov	ip, r2
 801a974:	4463      	add	r3, ip
 801a976:	21c8      	movs	r1, #200	@ 0xc8
 801a978:	187a      	adds	r2, r7, r1
 801a97a:	6013      	str	r3, [r2, #0]
 801a97c:	187b      	adds	r3, r7, r1
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	881b      	ldrh	r3, [r3, #0]
 801a982:	b29b      	uxth	r3, r3
 801a984:	059b      	lsls	r3, r3, #22
 801a986:	0d9b      	lsrs	r3, r3, #22
 801a988:	b29a      	uxth	r2, r3
 801a98a:	187b      	adds	r3, r7, r1
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	801a      	strh	r2, [r3, #0]
 801a990:	1d7b      	adds	r3, r7, #5
 801a992:	33ff      	adds	r3, #255	@ 0xff
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	2b3e      	cmp	r3, #62	@ 0x3e
 801a998:	d925      	bls.n	801a9e6 <USB_EPStartXfer+0xfe6>
 801a99a:	1d7b      	adds	r3, r7, #5
 801a99c:	33ff      	adds	r3, #255	@ 0xff
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	095b      	lsrs	r3, r3, #5
 801a9a2:	21dc      	movs	r1, #220	@ 0xdc
 801a9a4:	187a      	adds	r2, r7, r1
 801a9a6:	6013      	str	r3, [r2, #0]
 801a9a8:	1d7b      	adds	r3, r7, #5
 801a9aa:	33ff      	adds	r3, #255	@ 0xff
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	221f      	movs	r2, #31
 801a9b0:	4013      	ands	r3, r2
 801a9b2:	d104      	bne.n	801a9be <USB_EPStartXfer+0xfbe>
 801a9b4:	187b      	adds	r3, r7, r1
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	3b01      	subs	r3, #1
 801a9ba:	187a      	adds	r2, r7, r1
 801a9bc:	6013      	str	r3, [r2, #0]
 801a9be:	21c8      	movs	r1, #200	@ 0xc8
 801a9c0:	187b      	adds	r3, r7, r1
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	881b      	ldrh	r3, [r3, #0]
 801a9c6:	b29a      	uxth	r2, r3
 801a9c8:	23dc      	movs	r3, #220	@ 0xdc
 801a9ca:	18fb      	adds	r3, r7, r3
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	b29b      	uxth	r3, r3
 801a9d0:	029b      	lsls	r3, r3, #10
 801a9d2:	b29b      	uxth	r3, r3
 801a9d4:	4313      	orrs	r3, r2
 801a9d6:	b29b      	uxth	r3, r3
 801a9d8:	4a79      	ldr	r2, [pc, #484]	@ (801abc0 <USB_EPStartXfer+0x11c0>)
 801a9da:	4313      	orrs	r3, r2
 801a9dc:	b29a      	uxth	r2, r3
 801a9de:	187b      	adds	r3, r7, r1
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	801a      	strh	r2, [r3, #0]
 801a9e4:	e058      	b.n	801aa98 <USB_EPStartXfer+0x1098>
 801a9e6:	1d7b      	adds	r3, r7, #5
 801a9e8:	33ff      	adds	r3, #255	@ 0xff
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d10b      	bne.n	801aa08 <USB_EPStartXfer+0x1008>
 801a9f0:	21c8      	movs	r1, #200	@ 0xc8
 801a9f2:	187b      	adds	r3, r7, r1
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	881b      	ldrh	r3, [r3, #0]
 801a9f8:	b29b      	uxth	r3, r3
 801a9fa:	4a71      	ldr	r2, [pc, #452]	@ (801abc0 <USB_EPStartXfer+0x11c0>)
 801a9fc:	4313      	orrs	r3, r2
 801a9fe:	b29a      	uxth	r2, r3
 801aa00:	187b      	adds	r3, r7, r1
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	801a      	strh	r2, [r3, #0]
 801aa06:	e047      	b.n	801aa98 <USB_EPStartXfer+0x1098>
 801aa08:	1d7b      	adds	r3, r7, #5
 801aa0a:	33ff      	adds	r3, #255	@ 0xff
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	085b      	lsrs	r3, r3, #1
 801aa10:	21dc      	movs	r1, #220	@ 0xdc
 801aa12:	187a      	adds	r2, r7, r1
 801aa14:	6013      	str	r3, [r2, #0]
 801aa16:	1d7b      	adds	r3, r7, #5
 801aa18:	33ff      	adds	r3, #255	@ 0xff
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	2201      	movs	r2, #1
 801aa1e:	4013      	ands	r3, r2
 801aa20:	d004      	beq.n	801aa2c <USB_EPStartXfer+0x102c>
 801aa22:	187b      	adds	r3, r7, r1
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	3301      	adds	r3, #1
 801aa28:	187a      	adds	r2, r7, r1
 801aa2a:	6013      	str	r3, [r2, #0]
 801aa2c:	21c8      	movs	r1, #200	@ 0xc8
 801aa2e:	187b      	adds	r3, r7, r1
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	881b      	ldrh	r3, [r3, #0]
 801aa34:	b29a      	uxth	r2, r3
 801aa36:	23dc      	movs	r3, #220	@ 0xdc
 801aa38:	18fb      	adds	r3, r7, r3
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	b29b      	uxth	r3, r3
 801aa3e:	029b      	lsls	r3, r3, #10
 801aa40:	b29b      	uxth	r3, r3
 801aa42:	4313      	orrs	r3, r2
 801aa44:	b29a      	uxth	r2, r3
 801aa46:	187b      	adds	r3, r7, r1
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	801a      	strh	r2, [r3, #0]
 801aa4c:	e024      	b.n	801aa98 <USB_EPStartXfer+0x1098>
 801aa4e:	683b      	ldr	r3, [r7, #0]
 801aa50:	785b      	ldrb	r3, [r3, #1]
 801aa52:	2b01      	cmp	r3, #1
 801aa54:	d120      	bne.n	801aa98 <USB_EPStartXfer+0x1098>
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	21d4      	movs	r1, #212	@ 0xd4
 801aa5a:	187a      	adds	r2, r7, r1
 801aa5c:	6013      	str	r3, [r2, #0]
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	2250      	movs	r2, #80	@ 0x50
 801aa62:	5a9b      	ldrh	r3, [r3, r2]
 801aa64:	b29b      	uxth	r3, r3
 801aa66:	001a      	movs	r2, r3
 801aa68:	187b      	adds	r3, r7, r1
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	189b      	adds	r3, r3, r2
 801aa6e:	187a      	adds	r2, r7, r1
 801aa70:	6013      	str	r3, [r2, #0]
 801aa72:	683b      	ldr	r3, [r7, #0]
 801aa74:	781b      	ldrb	r3, [r3, #0]
 801aa76:	00da      	lsls	r2, r3, #3
 801aa78:	187b      	adds	r3, r7, r1
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	18d3      	adds	r3, r2, r3
 801aa7e:	4a4f      	ldr	r2, [pc, #316]	@ (801abbc <USB_EPStartXfer+0x11bc>)
 801aa80:	4694      	mov	ip, r2
 801aa82:	4463      	add	r3, ip
 801aa84:	21d0      	movs	r1, #208	@ 0xd0
 801aa86:	187a      	adds	r2, r7, r1
 801aa88:	6013      	str	r3, [r2, #0]
 801aa8a:	1d7b      	adds	r3, r7, #5
 801aa8c:	33ff      	adds	r3, #255	@ 0xff
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	b29a      	uxth	r2, r3
 801aa92:	187b      	adds	r3, r7, r1
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	801a      	strh	r2, [r3, #0]
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	22c4      	movs	r2, #196	@ 0xc4
 801aa9c:	18ba      	adds	r2, r7, r2
 801aa9e:	6013      	str	r3, [r2, #0]
 801aaa0:	683b      	ldr	r3, [r7, #0]
 801aaa2:	785b      	ldrb	r3, [r3, #1]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d000      	beq.n	801aaaa <USB_EPStartXfer+0x10aa>
 801aaa8:	e08c      	b.n	801abc4 <USB_EPStartXfer+0x11c4>
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	21bc      	movs	r1, #188	@ 0xbc
 801aaae:	187a      	adds	r2, r7, r1
 801aab0:	6013      	str	r3, [r2, #0]
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	2250      	movs	r2, #80	@ 0x50
 801aab6:	5a9b      	ldrh	r3, [r3, r2]
 801aab8:	b29b      	uxth	r3, r3
 801aaba:	001a      	movs	r2, r3
 801aabc:	187b      	adds	r3, r7, r1
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	189b      	adds	r3, r3, r2
 801aac2:	187a      	adds	r2, r7, r1
 801aac4:	6013      	str	r3, [r2, #0]
 801aac6:	683b      	ldr	r3, [r7, #0]
 801aac8:	781b      	ldrb	r3, [r3, #0]
 801aaca:	00da      	lsls	r2, r3, #3
 801aacc:	187b      	adds	r3, r7, r1
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	18d3      	adds	r3, r2, r3
 801aad2:	4a37      	ldr	r2, [pc, #220]	@ (801abb0 <USB_EPStartXfer+0x11b0>)
 801aad4:	4694      	mov	ip, r2
 801aad6:	4463      	add	r3, ip
 801aad8:	21b8      	movs	r1, #184	@ 0xb8
 801aada:	187a      	adds	r2, r7, r1
 801aadc:	6013      	str	r3, [r2, #0]
 801aade:	187b      	adds	r3, r7, r1
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	881b      	ldrh	r3, [r3, #0]
 801aae4:	b29b      	uxth	r3, r3
 801aae6:	059b      	lsls	r3, r3, #22
 801aae8:	0d9b      	lsrs	r3, r3, #22
 801aaea:	b29a      	uxth	r2, r3
 801aaec:	187b      	adds	r3, r7, r1
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	801a      	strh	r2, [r3, #0]
 801aaf2:	1d7b      	adds	r3, r7, #5
 801aaf4:	33ff      	adds	r3, #255	@ 0xff
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	2b3e      	cmp	r3, #62	@ 0x3e
 801aafa:	d925      	bls.n	801ab48 <USB_EPStartXfer+0x1148>
 801aafc:	1d7b      	adds	r3, r7, #5
 801aafe:	33ff      	adds	r3, #255	@ 0xff
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	095b      	lsrs	r3, r3, #5
 801ab04:	21d8      	movs	r1, #216	@ 0xd8
 801ab06:	187a      	adds	r2, r7, r1
 801ab08:	6013      	str	r3, [r2, #0]
 801ab0a:	1d7b      	adds	r3, r7, #5
 801ab0c:	33ff      	adds	r3, #255	@ 0xff
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	221f      	movs	r2, #31
 801ab12:	4013      	ands	r3, r2
 801ab14:	d104      	bne.n	801ab20 <USB_EPStartXfer+0x1120>
 801ab16:	187b      	adds	r3, r7, r1
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	3b01      	subs	r3, #1
 801ab1c:	187a      	adds	r2, r7, r1
 801ab1e:	6013      	str	r3, [r2, #0]
 801ab20:	21b8      	movs	r1, #184	@ 0xb8
 801ab22:	187b      	adds	r3, r7, r1
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	881b      	ldrh	r3, [r3, #0]
 801ab28:	b29a      	uxth	r2, r3
 801ab2a:	23d8      	movs	r3, #216	@ 0xd8
 801ab2c:	18fb      	adds	r3, r7, r3
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	b29b      	uxth	r3, r3
 801ab32:	029b      	lsls	r3, r3, #10
 801ab34:	b29b      	uxth	r3, r3
 801ab36:	4313      	orrs	r3, r2
 801ab38:	b29b      	uxth	r3, r3
 801ab3a:	4a21      	ldr	r2, [pc, #132]	@ (801abc0 <USB_EPStartXfer+0x11c0>)
 801ab3c:	4313      	orrs	r3, r2
 801ab3e:	b29a      	uxth	r2, r3
 801ab40:	187b      	adds	r3, r7, r1
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	801a      	strh	r2, [r3, #0]
 801ab46:	e062      	b.n	801ac0e <USB_EPStartXfer+0x120e>
 801ab48:	1d7b      	adds	r3, r7, #5
 801ab4a:	33ff      	adds	r3, #255	@ 0xff
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d10b      	bne.n	801ab6a <USB_EPStartXfer+0x116a>
 801ab52:	21b8      	movs	r1, #184	@ 0xb8
 801ab54:	187b      	adds	r3, r7, r1
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	881b      	ldrh	r3, [r3, #0]
 801ab5a:	b29b      	uxth	r3, r3
 801ab5c:	4a18      	ldr	r2, [pc, #96]	@ (801abc0 <USB_EPStartXfer+0x11c0>)
 801ab5e:	4313      	orrs	r3, r2
 801ab60:	b29a      	uxth	r2, r3
 801ab62:	187b      	adds	r3, r7, r1
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	801a      	strh	r2, [r3, #0]
 801ab68:	e051      	b.n	801ac0e <USB_EPStartXfer+0x120e>
 801ab6a:	1d7b      	adds	r3, r7, #5
 801ab6c:	33ff      	adds	r3, #255	@ 0xff
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	085b      	lsrs	r3, r3, #1
 801ab72:	21d8      	movs	r1, #216	@ 0xd8
 801ab74:	187a      	adds	r2, r7, r1
 801ab76:	6013      	str	r3, [r2, #0]
 801ab78:	1d7b      	adds	r3, r7, #5
 801ab7a:	33ff      	adds	r3, #255	@ 0xff
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	2201      	movs	r2, #1
 801ab80:	4013      	ands	r3, r2
 801ab82:	d004      	beq.n	801ab8e <USB_EPStartXfer+0x118e>
 801ab84:	187b      	adds	r3, r7, r1
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	3301      	adds	r3, #1
 801ab8a:	187a      	adds	r2, r7, r1
 801ab8c:	6013      	str	r3, [r2, #0]
 801ab8e:	21b8      	movs	r1, #184	@ 0xb8
 801ab90:	187b      	adds	r3, r7, r1
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	881b      	ldrh	r3, [r3, #0]
 801ab96:	b29a      	uxth	r2, r3
 801ab98:	23d8      	movs	r3, #216	@ 0xd8
 801ab9a:	18fb      	adds	r3, r7, r3
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	b29b      	uxth	r3, r3
 801aba0:	029b      	lsls	r3, r3, #10
 801aba2:	b29b      	uxth	r3, r3
 801aba4:	4313      	orrs	r3, r2
 801aba6:	b29a      	uxth	r2, r3
 801aba8:	187b      	adds	r3, r7, r1
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	801a      	strh	r2, [r3, #0]
 801abae:	e02e      	b.n	801ac0e <USB_EPStartXfer+0x120e>
 801abb0:	00000406 	.word	0x00000406
 801abb4:	ffff8f8f 	.word	0xffff8f8f
 801abb8:	ffff80c0 	.word	0xffff80c0
 801abbc:	00000402 	.word	0x00000402
 801abc0:	ffff8000 	.word	0xffff8000
 801abc4:	683b      	ldr	r3, [r7, #0]
 801abc6:	785b      	ldrb	r3, [r3, #1]
 801abc8:	2b01      	cmp	r3, #1
 801abca:	d120      	bne.n	801ac0e <USB_EPStartXfer+0x120e>
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	2250      	movs	r2, #80	@ 0x50
 801abd0:	5a9b      	ldrh	r3, [r3, r2]
 801abd2:	b29b      	uxth	r3, r3
 801abd4:	001a      	movs	r2, r3
 801abd6:	21c4      	movs	r1, #196	@ 0xc4
 801abd8:	187b      	adds	r3, r7, r1
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	189b      	adds	r3, r3, r2
 801abde:	187a      	adds	r2, r7, r1
 801abe0:	6013      	str	r3, [r2, #0]
 801abe2:	683b      	ldr	r3, [r7, #0]
 801abe4:	781b      	ldrb	r3, [r3, #0]
 801abe6:	00da      	lsls	r2, r3, #3
 801abe8:	187b      	adds	r3, r7, r1
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	18d3      	adds	r3, r2, r3
 801abee:	4a1d      	ldr	r2, [pc, #116]	@ (801ac64 <USB_EPStartXfer+0x1264>)
 801abf0:	4694      	mov	ip, r2
 801abf2:	4463      	add	r3, ip
 801abf4:	21c0      	movs	r1, #192	@ 0xc0
 801abf6:	187a      	adds	r2, r7, r1
 801abf8:	6013      	str	r3, [r2, #0]
 801abfa:	1d7b      	adds	r3, r7, #5
 801abfc:	33ff      	adds	r3, #255	@ 0xff
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	b29a      	uxth	r2, r3
 801ac02:	187b      	adds	r3, r7, r1
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	801a      	strh	r2, [r3, #0]
 801ac08:	e001      	b.n	801ac0e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801ac0a:	2301      	movs	r3, #1
 801ac0c:	e025      	b.n	801ac5a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ac0e:	687a      	ldr	r2, [r7, #4]
 801ac10:	683b      	ldr	r3, [r7, #0]
 801ac12:	781b      	ldrb	r3, [r3, #0]
 801ac14:	009b      	lsls	r3, r3, #2
 801ac16:	18d3      	adds	r3, r2, r3
 801ac18:	881b      	ldrh	r3, [r3, #0]
 801ac1a:	b29a      	uxth	r2, r3
 801ac1c:	208a      	movs	r0, #138	@ 0x8a
 801ac1e:	183b      	adds	r3, r7, r0
 801ac20:	4911      	ldr	r1, [pc, #68]	@ (801ac68 <USB_EPStartXfer+0x1268>)
 801ac22:	400a      	ands	r2, r1
 801ac24:	801a      	strh	r2, [r3, #0]
 801ac26:	183b      	adds	r3, r7, r0
 801ac28:	183a      	adds	r2, r7, r0
 801ac2a:	8812      	ldrh	r2, [r2, #0]
 801ac2c:	2180      	movs	r1, #128	@ 0x80
 801ac2e:	0149      	lsls	r1, r1, #5
 801ac30:	404a      	eors	r2, r1
 801ac32:	801a      	strh	r2, [r3, #0]
 801ac34:	183b      	adds	r3, r7, r0
 801ac36:	183a      	adds	r2, r7, r0
 801ac38:	8812      	ldrh	r2, [r2, #0]
 801ac3a:	2180      	movs	r1, #128	@ 0x80
 801ac3c:	0189      	lsls	r1, r1, #6
 801ac3e:	404a      	eors	r2, r1
 801ac40:	801a      	strh	r2, [r3, #0]
 801ac42:	687a      	ldr	r2, [r7, #4]
 801ac44:	683b      	ldr	r3, [r7, #0]
 801ac46:	781b      	ldrb	r3, [r3, #0]
 801ac48:	009b      	lsls	r3, r3, #2
 801ac4a:	18d3      	adds	r3, r2, r3
 801ac4c:	183a      	adds	r2, r7, r0
 801ac4e:	8812      	ldrh	r2, [r2, #0]
 801ac50:	4906      	ldr	r1, [pc, #24]	@ (801ac6c <USB_EPStartXfer+0x126c>)
 801ac52:	430a      	orrs	r2, r1
 801ac54:	b292      	uxth	r2, r2
 801ac56:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801ac58:	2300      	movs	r3, #0
}
 801ac5a:	0018      	movs	r0, r3
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	b043      	add	sp, #268	@ 0x10c
 801ac60:	bd90      	pop	{r4, r7, pc}
 801ac62:	46c0      	nop			@ (mov r8, r8)
 801ac64:	00000406 	.word	0x00000406
 801ac68:	ffffbf8f 	.word	0xffffbf8f
 801ac6c:	ffff8080 	.word	0xffff8080

0801ac70 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ac70:	b580      	push	{r7, lr}
 801ac72:	b084      	sub	sp, #16
 801ac74:	af00      	add	r7, sp, #0
 801ac76:	6078      	str	r0, [r7, #4]
 801ac78:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801ac7a:	683b      	ldr	r3, [r7, #0]
 801ac7c:	785b      	ldrb	r3, [r3, #1]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d01d      	beq.n	801acbe <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801ac82:	687a      	ldr	r2, [r7, #4]
 801ac84:	683b      	ldr	r3, [r7, #0]
 801ac86:	781b      	ldrb	r3, [r3, #0]
 801ac88:	009b      	lsls	r3, r3, #2
 801ac8a:	18d3      	adds	r3, r2, r3
 801ac8c:	881b      	ldrh	r3, [r3, #0]
 801ac8e:	b29a      	uxth	r2, r3
 801ac90:	200c      	movs	r0, #12
 801ac92:	183b      	adds	r3, r7, r0
 801ac94:	491b      	ldr	r1, [pc, #108]	@ (801ad04 <USB_EPSetStall+0x94>)
 801ac96:	400a      	ands	r2, r1
 801ac98:	801a      	strh	r2, [r3, #0]
 801ac9a:	183b      	adds	r3, r7, r0
 801ac9c:	183a      	adds	r2, r7, r0
 801ac9e:	8812      	ldrh	r2, [r2, #0]
 801aca0:	2110      	movs	r1, #16
 801aca2:	404a      	eors	r2, r1
 801aca4:	801a      	strh	r2, [r3, #0]
 801aca6:	687a      	ldr	r2, [r7, #4]
 801aca8:	683b      	ldr	r3, [r7, #0]
 801acaa:	781b      	ldrb	r3, [r3, #0]
 801acac:	009b      	lsls	r3, r3, #2
 801acae:	18d3      	adds	r3, r2, r3
 801acb0:	183a      	adds	r2, r7, r0
 801acb2:	8812      	ldrh	r2, [r2, #0]
 801acb4:	4914      	ldr	r1, [pc, #80]	@ (801ad08 <USB_EPSetStall+0x98>)
 801acb6:	430a      	orrs	r2, r1
 801acb8:	b292      	uxth	r2, r2
 801acba:	801a      	strh	r2, [r3, #0]
 801acbc:	e01d      	b.n	801acfa <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801acbe:	687a      	ldr	r2, [r7, #4]
 801acc0:	683b      	ldr	r3, [r7, #0]
 801acc2:	781b      	ldrb	r3, [r3, #0]
 801acc4:	009b      	lsls	r3, r3, #2
 801acc6:	18d3      	adds	r3, r2, r3
 801acc8:	881b      	ldrh	r3, [r3, #0]
 801acca:	b29a      	uxth	r2, r3
 801accc:	200e      	movs	r0, #14
 801acce:	183b      	adds	r3, r7, r0
 801acd0:	490e      	ldr	r1, [pc, #56]	@ (801ad0c <USB_EPSetStall+0x9c>)
 801acd2:	400a      	ands	r2, r1
 801acd4:	801a      	strh	r2, [r3, #0]
 801acd6:	183b      	adds	r3, r7, r0
 801acd8:	183a      	adds	r2, r7, r0
 801acda:	8812      	ldrh	r2, [r2, #0]
 801acdc:	2180      	movs	r1, #128	@ 0x80
 801acde:	0149      	lsls	r1, r1, #5
 801ace0:	404a      	eors	r2, r1
 801ace2:	801a      	strh	r2, [r3, #0]
 801ace4:	687a      	ldr	r2, [r7, #4]
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	781b      	ldrb	r3, [r3, #0]
 801acea:	009b      	lsls	r3, r3, #2
 801acec:	18d3      	adds	r3, r2, r3
 801acee:	183a      	adds	r2, r7, r0
 801acf0:	8812      	ldrh	r2, [r2, #0]
 801acf2:	4905      	ldr	r1, [pc, #20]	@ (801ad08 <USB_EPSetStall+0x98>)
 801acf4:	430a      	orrs	r2, r1
 801acf6:	b292      	uxth	r2, r2
 801acf8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801acfa:	2300      	movs	r3, #0
}
 801acfc:	0018      	movs	r0, r3
 801acfe:	46bd      	mov	sp, r7
 801ad00:	b004      	add	sp, #16
 801ad02:	bd80      	pop	{r7, pc}
 801ad04:	ffff8fbf 	.word	0xffff8fbf
 801ad08:	ffff8080 	.word	0xffff8080
 801ad0c:	ffffbf8f 	.word	0xffffbf8f

0801ad10 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b086      	sub	sp, #24
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
 801ad18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	7b1b      	ldrb	r3, [r3, #12]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d000      	beq.n	801ad24 <USB_EPClearStall+0x14>
 801ad22:	e095      	b.n	801ae50 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801ad24:	683b      	ldr	r3, [r7, #0]
 801ad26:	785b      	ldrb	r3, [r3, #1]
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d046      	beq.n	801adba <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ad2c:	687a      	ldr	r2, [r7, #4]
 801ad2e:	683b      	ldr	r3, [r7, #0]
 801ad30:	781b      	ldrb	r3, [r3, #0]
 801ad32:	009b      	lsls	r3, r3, #2
 801ad34:	18d2      	adds	r2, r2, r3
 801ad36:	2110      	movs	r1, #16
 801ad38:	187b      	adds	r3, r7, r1
 801ad3a:	8812      	ldrh	r2, [r2, #0]
 801ad3c:	801a      	strh	r2, [r3, #0]
 801ad3e:	187b      	adds	r3, r7, r1
 801ad40:	881b      	ldrh	r3, [r3, #0]
 801ad42:	2240      	movs	r2, #64	@ 0x40
 801ad44:	4013      	ands	r3, r2
 801ad46:	d016      	beq.n	801ad76 <USB_EPClearStall+0x66>
 801ad48:	687a      	ldr	r2, [r7, #4]
 801ad4a:	683b      	ldr	r3, [r7, #0]
 801ad4c:	781b      	ldrb	r3, [r3, #0]
 801ad4e:	009b      	lsls	r3, r3, #2
 801ad50:	18d3      	adds	r3, r2, r3
 801ad52:	881b      	ldrh	r3, [r3, #0]
 801ad54:	b29a      	uxth	r2, r3
 801ad56:	200e      	movs	r0, #14
 801ad58:	183b      	adds	r3, r7, r0
 801ad5a:	4940      	ldr	r1, [pc, #256]	@ (801ae5c <USB_EPClearStall+0x14c>)
 801ad5c:	400a      	ands	r2, r1
 801ad5e:	801a      	strh	r2, [r3, #0]
 801ad60:	687a      	ldr	r2, [r7, #4]
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	781b      	ldrb	r3, [r3, #0]
 801ad66:	009b      	lsls	r3, r3, #2
 801ad68:	18d3      	adds	r3, r2, r3
 801ad6a:	183a      	adds	r2, r7, r0
 801ad6c:	8812      	ldrh	r2, [r2, #0]
 801ad6e:	493c      	ldr	r1, [pc, #240]	@ (801ae60 <USB_EPClearStall+0x150>)
 801ad70:	430a      	orrs	r2, r1
 801ad72:	b292      	uxth	r2, r2
 801ad74:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	78db      	ldrb	r3, [r3, #3]
 801ad7a:	2b01      	cmp	r3, #1
 801ad7c:	d068      	beq.n	801ae50 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801ad7e:	687a      	ldr	r2, [r7, #4]
 801ad80:	683b      	ldr	r3, [r7, #0]
 801ad82:	781b      	ldrb	r3, [r3, #0]
 801ad84:	009b      	lsls	r3, r3, #2
 801ad86:	18d3      	adds	r3, r2, r3
 801ad88:	881b      	ldrh	r3, [r3, #0]
 801ad8a:	b29a      	uxth	r2, r3
 801ad8c:	200c      	movs	r0, #12
 801ad8e:	183b      	adds	r3, r7, r0
 801ad90:	4934      	ldr	r1, [pc, #208]	@ (801ae64 <USB_EPClearStall+0x154>)
 801ad92:	400a      	ands	r2, r1
 801ad94:	801a      	strh	r2, [r3, #0]
 801ad96:	183b      	adds	r3, r7, r0
 801ad98:	183a      	adds	r2, r7, r0
 801ad9a:	8812      	ldrh	r2, [r2, #0]
 801ad9c:	2120      	movs	r1, #32
 801ad9e:	404a      	eors	r2, r1
 801ada0:	801a      	strh	r2, [r3, #0]
 801ada2:	687a      	ldr	r2, [r7, #4]
 801ada4:	683b      	ldr	r3, [r7, #0]
 801ada6:	781b      	ldrb	r3, [r3, #0]
 801ada8:	009b      	lsls	r3, r3, #2
 801adaa:	18d3      	adds	r3, r2, r3
 801adac:	183a      	adds	r2, r7, r0
 801adae:	8812      	ldrh	r2, [r2, #0]
 801adb0:	492d      	ldr	r1, [pc, #180]	@ (801ae68 <USB_EPClearStall+0x158>)
 801adb2:	430a      	orrs	r2, r1
 801adb4:	b292      	uxth	r2, r2
 801adb6:	801a      	strh	r2, [r3, #0]
 801adb8:	e04a      	b.n	801ae50 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801adba:	687a      	ldr	r2, [r7, #4]
 801adbc:	683b      	ldr	r3, [r7, #0]
 801adbe:	781b      	ldrb	r3, [r3, #0]
 801adc0:	009b      	lsls	r3, r3, #2
 801adc2:	18d2      	adds	r2, r2, r3
 801adc4:	2116      	movs	r1, #22
 801adc6:	187b      	adds	r3, r7, r1
 801adc8:	8812      	ldrh	r2, [r2, #0]
 801adca:	801a      	strh	r2, [r3, #0]
 801adcc:	187b      	adds	r3, r7, r1
 801adce:	881a      	ldrh	r2, [r3, #0]
 801add0:	2380      	movs	r3, #128	@ 0x80
 801add2:	01db      	lsls	r3, r3, #7
 801add4:	4013      	ands	r3, r2
 801add6:	d016      	beq.n	801ae06 <USB_EPClearStall+0xf6>
 801add8:	687a      	ldr	r2, [r7, #4]
 801adda:	683b      	ldr	r3, [r7, #0]
 801addc:	781b      	ldrb	r3, [r3, #0]
 801adde:	009b      	lsls	r3, r3, #2
 801ade0:	18d3      	adds	r3, r2, r3
 801ade2:	881b      	ldrh	r3, [r3, #0]
 801ade4:	b29a      	uxth	r2, r3
 801ade6:	2014      	movs	r0, #20
 801ade8:	183b      	adds	r3, r7, r0
 801adea:	491c      	ldr	r1, [pc, #112]	@ (801ae5c <USB_EPClearStall+0x14c>)
 801adec:	400a      	ands	r2, r1
 801adee:	801a      	strh	r2, [r3, #0]
 801adf0:	687a      	ldr	r2, [r7, #4]
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	781b      	ldrb	r3, [r3, #0]
 801adf6:	009b      	lsls	r3, r3, #2
 801adf8:	18d3      	adds	r3, r2, r3
 801adfa:	183a      	adds	r2, r7, r0
 801adfc:	8812      	ldrh	r2, [r2, #0]
 801adfe:	491b      	ldr	r1, [pc, #108]	@ (801ae6c <USB_EPClearStall+0x15c>)
 801ae00:	430a      	orrs	r2, r1
 801ae02:	b292      	uxth	r2, r2
 801ae04:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ae06:	687a      	ldr	r2, [r7, #4]
 801ae08:	683b      	ldr	r3, [r7, #0]
 801ae0a:	781b      	ldrb	r3, [r3, #0]
 801ae0c:	009b      	lsls	r3, r3, #2
 801ae0e:	18d3      	adds	r3, r2, r3
 801ae10:	881b      	ldrh	r3, [r3, #0]
 801ae12:	b29a      	uxth	r2, r3
 801ae14:	2012      	movs	r0, #18
 801ae16:	183b      	adds	r3, r7, r0
 801ae18:	4915      	ldr	r1, [pc, #84]	@ (801ae70 <USB_EPClearStall+0x160>)
 801ae1a:	400a      	ands	r2, r1
 801ae1c:	801a      	strh	r2, [r3, #0]
 801ae1e:	183b      	adds	r3, r7, r0
 801ae20:	183a      	adds	r2, r7, r0
 801ae22:	8812      	ldrh	r2, [r2, #0]
 801ae24:	2180      	movs	r1, #128	@ 0x80
 801ae26:	0149      	lsls	r1, r1, #5
 801ae28:	404a      	eors	r2, r1
 801ae2a:	801a      	strh	r2, [r3, #0]
 801ae2c:	183b      	adds	r3, r7, r0
 801ae2e:	183a      	adds	r2, r7, r0
 801ae30:	8812      	ldrh	r2, [r2, #0]
 801ae32:	2180      	movs	r1, #128	@ 0x80
 801ae34:	0189      	lsls	r1, r1, #6
 801ae36:	404a      	eors	r2, r1
 801ae38:	801a      	strh	r2, [r3, #0]
 801ae3a:	687a      	ldr	r2, [r7, #4]
 801ae3c:	683b      	ldr	r3, [r7, #0]
 801ae3e:	781b      	ldrb	r3, [r3, #0]
 801ae40:	009b      	lsls	r3, r3, #2
 801ae42:	18d3      	adds	r3, r2, r3
 801ae44:	183a      	adds	r2, r7, r0
 801ae46:	8812      	ldrh	r2, [r2, #0]
 801ae48:	4907      	ldr	r1, [pc, #28]	@ (801ae68 <USB_EPClearStall+0x158>)
 801ae4a:	430a      	orrs	r2, r1
 801ae4c:	b292      	uxth	r2, r2
 801ae4e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801ae50:	2300      	movs	r3, #0
}
 801ae52:	0018      	movs	r0, r3
 801ae54:	46bd      	mov	sp, r7
 801ae56:	b006      	add	sp, #24
 801ae58:	bd80      	pop	{r7, pc}
 801ae5a:	46c0      	nop			@ (mov r8, r8)
 801ae5c:	ffff8f8f 	.word	0xffff8f8f
 801ae60:	ffff80c0 	.word	0xffff80c0
 801ae64:	ffff8fbf 	.word	0xffff8fbf
 801ae68:	ffff8080 	.word	0xffff8080
 801ae6c:	ffffc080 	.word	0xffffc080
 801ae70:	ffffbf8f 	.word	0xffffbf8f

0801ae74 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801ae74:	b580      	push	{r7, lr}
 801ae76:	b082      	sub	sp, #8
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	6078      	str	r0, [r7, #4]
 801ae7c:	000a      	movs	r2, r1
 801ae7e:	1cfb      	adds	r3, r7, #3
 801ae80:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801ae82:	1cfb      	adds	r3, r7, #3
 801ae84:	781b      	ldrb	r3, [r3, #0]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d103      	bne.n	801ae92 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	224c      	movs	r2, #76	@ 0x4c
 801ae8e:	2180      	movs	r1, #128	@ 0x80
 801ae90:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801ae92:	2300      	movs	r3, #0
}
 801ae94:	0018      	movs	r0, r3
 801ae96:	46bd      	mov	sp, r7
 801ae98:	b002      	add	sp, #8
 801ae9a:	bd80      	pop	{r7, pc}

0801ae9c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801ae9c:	b580      	push	{r7, lr}
 801ae9e:	b082      	sub	sp, #8
 801aea0:	af00      	add	r7, sp, #0
 801aea2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	2258      	movs	r2, #88	@ 0x58
 801aea8:	5a9b      	ldrh	r3, [r3, r2]
 801aeaa:	b29b      	uxth	r3, r3
 801aeac:	4a05      	ldr	r2, [pc, #20]	@ (801aec4 <USB_DevConnect+0x28>)
 801aeae:	4313      	orrs	r3, r2
 801aeb0:	b299      	uxth	r1, r3
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	2258      	movs	r2, #88	@ 0x58
 801aeb6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801aeb8:	2300      	movs	r3, #0
}
 801aeba:	0018      	movs	r0, r3
 801aebc:	46bd      	mov	sp, r7
 801aebe:	b002      	add	sp, #8
 801aec0:	bd80      	pop	{r7, pc}
 801aec2:	46c0      	nop			@ (mov r8, r8)
 801aec4:	ffff8000 	.word	0xffff8000

0801aec8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801aec8:	b580      	push	{r7, lr}
 801aeca:	b084      	sub	sp, #16
 801aecc:	af00      	add	r7, sp, #0
 801aece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	2244      	movs	r2, #68	@ 0x44
 801aed4:	5a9b      	ldrh	r3, [r3, r2]
 801aed6:	b29b      	uxth	r3, r3
 801aed8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801aeda:	68fb      	ldr	r3, [r7, #12]
}
 801aedc:	0018      	movs	r0, r3
 801aede:	46bd      	mov	sp, r7
 801aee0:	b004      	add	sp, #16
 801aee2:	bd80      	pop	{r7, pc}

0801aee4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b08a      	sub	sp, #40	@ 0x28
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	60f8      	str	r0, [r7, #12]
 801aeec:	60b9      	str	r1, [r7, #8]
 801aeee:	0019      	movs	r1, r3
 801aef0:	1dbb      	adds	r3, r7, #6
 801aef2:	801a      	strh	r2, [r3, #0]
 801aef4:	1d3b      	adds	r3, r7, #4
 801aef6:	1c0a      	adds	r2, r1, #0
 801aef8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801aefa:	1d3b      	adds	r3, r7, #4
 801aefc:	881b      	ldrh	r3, [r3, #0]
 801aefe:	3301      	adds	r3, #1
 801af00:	085b      	lsrs	r3, r3, #1
 801af02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801af08:	68bb      	ldr	r3, [r7, #8]
 801af0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801af0c:	1dbb      	adds	r3, r7, #6
 801af0e:	881a      	ldrh	r2, [r3, #0]
 801af10:	697b      	ldr	r3, [r7, #20]
 801af12:	18d3      	adds	r3, r2, r3
 801af14:	2280      	movs	r2, #128	@ 0x80
 801af16:	00d2      	lsls	r2, r2, #3
 801af18:	4694      	mov	ip, r2
 801af1a:	4463      	add	r3, ip
 801af1c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801af1e:	69bb      	ldr	r3, [r7, #24]
 801af20:	627b      	str	r3, [r7, #36]	@ 0x24
 801af22:	e020      	b.n	801af66 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801af24:	69fb      	ldr	r3, [r7, #28]
 801af26:	781a      	ldrb	r2, [r3, #0]
 801af28:	2112      	movs	r1, #18
 801af2a:	187b      	adds	r3, r7, r1
 801af2c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801af2e:	69fb      	ldr	r3, [r7, #28]
 801af30:	3301      	adds	r3, #1
 801af32:	781b      	ldrb	r3, [r3, #0]
 801af34:	021b      	lsls	r3, r3, #8
 801af36:	b21a      	sxth	r2, r3
 801af38:	187b      	adds	r3, r7, r1
 801af3a:	2000      	movs	r0, #0
 801af3c:	5e1b      	ldrsh	r3, [r3, r0]
 801af3e:	4313      	orrs	r3, r2
 801af40:	b21a      	sxth	r2, r3
 801af42:	187b      	adds	r3, r7, r1
 801af44:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801af46:	6a3b      	ldr	r3, [r7, #32]
 801af48:	187a      	adds	r2, r7, r1
 801af4a:	8812      	ldrh	r2, [r2, #0]
 801af4c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801af4e:	6a3b      	ldr	r3, [r7, #32]
 801af50:	3302      	adds	r3, #2
 801af52:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801af54:	69fb      	ldr	r3, [r7, #28]
 801af56:	3301      	adds	r3, #1
 801af58:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801af5a:	69fb      	ldr	r3, [r7, #28]
 801af5c:	3301      	adds	r3, #1
 801af5e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801af60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af62:	3b01      	subs	r3, #1
 801af64:	627b      	str	r3, [r7, #36]	@ 0x24
 801af66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d1db      	bne.n	801af24 <USB_WritePMA+0x40>
  }
}
 801af6c:	46c0      	nop			@ (mov r8, r8)
 801af6e:	46c0      	nop			@ (mov r8, r8)
 801af70:	46bd      	mov	sp, r7
 801af72:	b00a      	add	sp, #40	@ 0x28
 801af74:	bd80      	pop	{r7, pc}

0801af76 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801af76:	b580      	push	{r7, lr}
 801af78:	b08a      	sub	sp, #40	@ 0x28
 801af7a:	af00      	add	r7, sp, #0
 801af7c:	60f8      	str	r0, [r7, #12]
 801af7e:	60b9      	str	r1, [r7, #8]
 801af80:	0019      	movs	r1, r3
 801af82:	1dbb      	adds	r3, r7, #6
 801af84:	801a      	strh	r2, [r3, #0]
 801af86:	1d3b      	adds	r3, r7, #4
 801af88:	1c0a      	adds	r2, r1, #0
 801af8a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801af8c:	1d3b      	adds	r3, r7, #4
 801af8e:	881b      	ldrh	r3, [r3, #0]
 801af90:	085b      	lsrs	r3, r3, #1
 801af92:	b29b      	uxth	r3, r3
 801af94:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801af96:	68fb      	ldr	r3, [r7, #12]
 801af98:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801af9a:	68bb      	ldr	r3, [r7, #8]
 801af9c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801af9e:	1dbb      	adds	r3, r7, #6
 801afa0:	881a      	ldrh	r2, [r3, #0]
 801afa2:	697b      	ldr	r3, [r7, #20]
 801afa4:	18d3      	adds	r3, r2, r3
 801afa6:	2280      	movs	r2, #128	@ 0x80
 801afa8:	00d2      	lsls	r2, r2, #3
 801afaa:	4694      	mov	ip, r2
 801afac:	4463      	add	r3, ip
 801afae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801afb0:	69bb      	ldr	r3, [r7, #24]
 801afb2:	627b      	str	r3, [r7, #36]	@ 0x24
 801afb4:	e018      	b.n	801afe8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801afb6:	6a3b      	ldr	r3, [r7, #32]
 801afb8:	881b      	ldrh	r3, [r3, #0]
 801afba:	b29b      	uxth	r3, r3
 801afbc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801afbe:	6a3b      	ldr	r3, [r7, #32]
 801afc0:	3302      	adds	r3, #2
 801afc2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801afc4:	693b      	ldr	r3, [r7, #16]
 801afc6:	b2da      	uxtb	r2, r3
 801afc8:	69fb      	ldr	r3, [r7, #28]
 801afca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801afcc:	69fb      	ldr	r3, [r7, #28]
 801afce:	3301      	adds	r3, #1
 801afd0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801afd2:	693b      	ldr	r3, [r7, #16]
 801afd4:	0a1b      	lsrs	r3, r3, #8
 801afd6:	b2da      	uxtb	r2, r3
 801afd8:	69fb      	ldr	r3, [r7, #28]
 801afda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801afdc:	69fb      	ldr	r3, [r7, #28]
 801afde:	3301      	adds	r3, #1
 801afe0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801afe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afe4:	3b01      	subs	r3, #1
 801afe6:	627b      	str	r3, [r7, #36]	@ 0x24
 801afe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afea:	2b00      	cmp	r3, #0
 801afec:	d1e3      	bne.n	801afb6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801afee:	1d3b      	adds	r3, r7, #4
 801aff0:	881b      	ldrh	r3, [r3, #0]
 801aff2:	2201      	movs	r2, #1
 801aff4:	4013      	ands	r3, r2
 801aff6:	b29b      	uxth	r3, r3
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d007      	beq.n	801b00c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801affc:	6a3b      	ldr	r3, [r7, #32]
 801affe:	881b      	ldrh	r3, [r3, #0]
 801b000:	b29b      	uxth	r3, r3
 801b002:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b004:	693b      	ldr	r3, [r7, #16]
 801b006:	b2da      	uxtb	r2, r3
 801b008:	69fb      	ldr	r3, [r7, #28]
 801b00a:	701a      	strb	r2, [r3, #0]
  }
}
 801b00c:	46c0      	nop			@ (mov r8, r8)
 801b00e:	46bd      	mov	sp, r7
 801b010:	b00a      	add	sp, #40	@ 0x28
 801b012:	bd80      	pop	{r7, pc}

0801b014 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b084      	sub	sp, #16
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
 801b01c:	000a      	movs	r2, r1
 801b01e:	1cfb      	adds	r3, r7, #3
 801b020:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b022:	230f      	movs	r3, #15
 801b024:	18fb      	adds	r3, r7, r3
 801b026:	2200      	movs	r2, #0
 801b028:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	7c1b      	ldrb	r3, [r3, #16]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d116      	bne.n	801b060 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b032:	2380      	movs	r3, #128	@ 0x80
 801b034:	009b      	lsls	r3, r3, #2
 801b036:	6878      	ldr	r0, [r7, #4]
 801b038:	2202      	movs	r2, #2
 801b03a:	2181      	movs	r1, #129	@ 0x81
 801b03c:	f002 f8eb 	bl	801d216 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	2201      	movs	r2, #1
 801b044:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b046:	2380      	movs	r3, #128	@ 0x80
 801b048:	009b      	lsls	r3, r3, #2
 801b04a:	6878      	ldr	r0, [r7, #4]
 801b04c:	2202      	movs	r2, #2
 801b04e:	2101      	movs	r1, #1
 801b050:	f002 f8e1 	bl	801d216 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b054:	687a      	ldr	r2, [r7, #4]
 801b056:	23b6      	movs	r3, #182	@ 0xb6
 801b058:	005b      	lsls	r3, r3, #1
 801b05a:	2101      	movs	r1, #1
 801b05c:	50d1      	str	r1, [r2, r3]
 801b05e:	e013      	b.n	801b088 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b060:	6878      	ldr	r0, [r7, #4]
 801b062:	2340      	movs	r3, #64	@ 0x40
 801b064:	2202      	movs	r2, #2
 801b066:	2181      	movs	r1, #129	@ 0x81
 801b068:	f002 f8d5 	bl	801d216 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	2201      	movs	r2, #1
 801b070:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b072:	6878      	ldr	r0, [r7, #4]
 801b074:	2340      	movs	r3, #64	@ 0x40
 801b076:	2202      	movs	r2, #2
 801b078:	2101      	movs	r1, #1
 801b07a:	f002 f8cc 	bl	801d216 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b07e:	687a      	ldr	r2, [r7, #4]
 801b080:	23b6      	movs	r3, #182	@ 0xb6
 801b082:	005b      	lsls	r3, r3, #1
 801b084:	2101      	movs	r1, #1
 801b086:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b088:	6878      	ldr	r0, [r7, #4]
 801b08a:	2308      	movs	r3, #8
 801b08c:	2203      	movs	r2, #3
 801b08e:	2182      	movs	r1, #130	@ 0x82
 801b090:	f002 f8c1 	bl	801d216 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b094:	687b      	ldr	r3, [r7, #4]
 801b096:	2201      	movs	r2, #1
 801b098:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b09a:	2387      	movs	r3, #135	@ 0x87
 801b09c:	009b      	lsls	r3, r3, #2
 801b09e:	0018      	movs	r0, r3
 801b0a0:	f002 fa52 	bl	801d548 <USBD_static_malloc>
 801b0a4:	0001      	movs	r1, r0
 801b0a6:	687a      	ldr	r2, [r7, #4]
 801b0a8:	23ae      	movs	r3, #174	@ 0xae
 801b0aa:	009b      	lsls	r3, r3, #2
 801b0ac:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b0ae:	687a      	ldr	r2, [r7, #4]
 801b0b0:	23ae      	movs	r3, #174	@ 0xae
 801b0b2:	009b      	lsls	r3, r3, #2
 801b0b4:	58d3      	ldr	r3, [r2, r3]
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d104      	bne.n	801b0c4 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b0ba:	230f      	movs	r3, #15
 801b0bc:	18fb      	adds	r3, r7, r3
 801b0be:	2201      	movs	r2, #1
 801b0c0:	701a      	strb	r2, [r3, #0]
 801b0c2:	e02c      	b.n	801b11e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b0c4:	687a      	ldr	r2, [r7, #4]
 801b0c6:	23ae      	movs	r3, #174	@ 0xae
 801b0c8:	009b      	lsls	r3, r3, #2
 801b0ca:	58d3      	ldr	r3, [r2, r3]
 801b0cc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b0ce:	687a      	ldr	r2, [r7, #4]
 801b0d0:	23af      	movs	r3, #175	@ 0xaf
 801b0d2:	009b      	lsls	r3, r3, #2
 801b0d4:	58d3      	ldr	r3, [r2, r3]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b0da:	68ba      	ldr	r2, [r7, #8]
 801b0dc:	2385      	movs	r3, #133	@ 0x85
 801b0de:	009b      	lsls	r3, r3, #2
 801b0e0:	2100      	movs	r1, #0
 801b0e2:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b0e4:	68ba      	ldr	r2, [r7, #8]
 801b0e6:	2386      	movs	r3, #134	@ 0x86
 801b0e8:	009b      	lsls	r3, r3, #2
 801b0ea:	2100      	movs	r1, #0
 801b0ec:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	7c1b      	ldrb	r3, [r3, #16]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d10a      	bne.n	801b10c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b0f6:	68ba      	ldr	r2, [r7, #8]
 801b0f8:	2381      	movs	r3, #129	@ 0x81
 801b0fa:	009b      	lsls	r3, r3, #2
 801b0fc:	58d2      	ldr	r2, [r2, r3]
 801b0fe:	2380      	movs	r3, #128	@ 0x80
 801b100:	009b      	lsls	r3, r3, #2
 801b102:	6878      	ldr	r0, [r7, #4]
 801b104:	2101      	movs	r1, #1
 801b106:	f002 f9d1 	bl	801d4ac <USBD_LL_PrepareReceive>
 801b10a:	e008      	b.n	801b11e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b10c:	68ba      	ldr	r2, [r7, #8]
 801b10e:	2381      	movs	r3, #129	@ 0x81
 801b110:	009b      	lsls	r3, r3, #2
 801b112:	58d2      	ldr	r2, [r2, r3]
 801b114:	6878      	ldr	r0, [r7, #4]
 801b116:	2340      	movs	r3, #64	@ 0x40
 801b118:	2101      	movs	r1, #1
 801b11a:	f002 f9c7 	bl	801d4ac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b11e:	230f      	movs	r3, #15
 801b120:	18fb      	adds	r3, r7, r3
 801b122:	781b      	ldrb	r3, [r3, #0]
}
 801b124:	0018      	movs	r0, r3
 801b126:	46bd      	mov	sp, r7
 801b128:	b004      	add	sp, #16
 801b12a:	bd80      	pop	{r7, pc}

0801b12c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b084      	sub	sp, #16
 801b130:	af00      	add	r7, sp, #0
 801b132:	6078      	str	r0, [r7, #4]
 801b134:	000a      	movs	r2, r1
 801b136:	1cfb      	adds	r3, r7, #3
 801b138:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b13a:	230f      	movs	r3, #15
 801b13c:	18fb      	adds	r3, r7, r3
 801b13e:	2200      	movs	r2, #0
 801b140:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	2181      	movs	r1, #129	@ 0x81
 801b146:	0018      	movs	r0, r3
 801b148:	f002 f89c 	bl	801d284 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	2200      	movs	r2, #0
 801b150:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	2101      	movs	r1, #1
 801b156:	0018      	movs	r0, r3
 801b158:	f002 f894 	bl	801d284 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b15c:	687a      	ldr	r2, [r7, #4]
 801b15e:	23b6      	movs	r3, #182	@ 0xb6
 801b160:	005b      	lsls	r3, r3, #1
 801b162:	2100      	movs	r1, #0
 801b164:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	2182      	movs	r1, #130	@ 0x82
 801b16a:	0018      	movs	r0, r3
 801b16c:	f002 f88a 	bl	801d284 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	2200      	movs	r2, #0
 801b174:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b176:	687a      	ldr	r2, [r7, #4]
 801b178:	23ae      	movs	r3, #174	@ 0xae
 801b17a:	009b      	lsls	r3, r3, #2
 801b17c:	58d3      	ldr	r3, [r2, r3]
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d011      	beq.n	801b1a6 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b182:	687a      	ldr	r2, [r7, #4]
 801b184:	23af      	movs	r3, #175	@ 0xaf
 801b186:	009b      	lsls	r3, r3, #2
 801b188:	58d3      	ldr	r3, [r2, r3]
 801b18a:	685b      	ldr	r3, [r3, #4]
 801b18c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b18e:	687a      	ldr	r2, [r7, #4]
 801b190:	23ae      	movs	r3, #174	@ 0xae
 801b192:	009b      	lsls	r3, r3, #2
 801b194:	58d3      	ldr	r3, [r2, r3]
 801b196:	0018      	movs	r0, r3
 801b198:	f002 f9e2 	bl	801d560 <USBD_static_free>
    pdev->pClassData = NULL;
 801b19c:	687a      	ldr	r2, [r7, #4]
 801b19e:	23ae      	movs	r3, #174	@ 0xae
 801b1a0:	009b      	lsls	r3, r3, #2
 801b1a2:	2100      	movs	r1, #0
 801b1a4:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b1a6:	230f      	movs	r3, #15
 801b1a8:	18fb      	adds	r3, r7, r3
 801b1aa:	781b      	ldrb	r3, [r3, #0]
}
 801b1ac:	0018      	movs	r0, r3
 801b1ae:	46bd      	mov	sp, r7
 801b1b0:	b004      	add	sp, #16
 801b1b2:	bd80      	pop	{r7, pc}

0801b1b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b1b4:	b580      	push	{r7, lr}
 801b1b6:	b086      	sub	sp, #24
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	6078      	str	r0, [r7, #4]
 801b1bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b1be:	687a      	ldr	r2, [r7, #4]
 801b1c0:	23ae      	movs	r3, #174	@ 0xae
 801b1c2:	009b      	lsls	r3, r3, #2
 801b1c4:	58d3      	ldr	r3, [r2, r3]
 801b1c6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b1c8:	230f      	movs	r3, #15
 801b1ca:	18fb      	adds	r3, r7, r3
 801b1cc:	2200      	movs	r2, #0
 801b1ce:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b1d0:	230c      	movs	r3, #12
 801b1d2:	18fb      	adds	r3, r7, r3
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b1d8:	2317      	movs	r3, #23
 801b1da:	18fb      	adds	r3, r7, r3
 801b1dc:	2200      	movs	r2, #0
 801b1de:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b1e0:	683b      	ldr	r3, [r7, #0]
 801b1e2:	781b      	ldrb	r3, [r3, #0]
 801b1e4:	001a      	movs	r2, r3
 801b1e6:	2360      	movs	r3, #96	@ 0x60
 801b1e8:	4013      	ands	r3, r2
 801b1ea:	d03d      	beq.n	801b268 <USBD_CDC_Setup+0xb4>
 801b1ec:	2b20      	cmp	r3, #32
 801b1ee:	d000      	beq.n	801b1f2 <USBD_CDC_Setup+0x3e>
 801b1f0:	e094      	b.n	801b31c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b1f2:	683b      	ldr	r3, [r7, #0]
 801b1f4:	88db      	ldrh	r3, [r3, #6]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d02b      	beq.n	801b252 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b1fa:	683b      	ldr	r3, [r7, #0]
 801b1fc:	781b      	ldrb	r3, [r3, #0]
 801b1fe:	b25b      	sxtb	r3, r3
 801b200:	2b00      	cmp	r3, #0
 801b202:	da12      	bge.n	801b22a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b204:	687a      	ldr	r2, [r7, #4]
 801b206:	23af      	movs	r3, #175	@ 0xaf
 801b208:	009b      	lsls	r3, r3, #2
 801b20a:	58d3      	ldr	r3, [r2, r3]
 801b20c:	689b      	ldr	r3, [r3, #8]
 801b20e:	683a      	ldr	r2, [r7, #0]
 801b210:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b212:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b214:	683a      	ldr	r2, [r7, #0]
 801b216:	88d2      	ldrh	r2, [r2, #6]
 801b218:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b21a:	6939      	ldr	r1, [r7, #16]
 801b21c:	683b      	ldr	r3, [r7, #0]
 801b21e:	88da      	ldrh	r2, [r3, #6]
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	0018      	movs	r0, r3
 801b224:	f001 fbaf 	bl	801c986 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b228:	e083      	b.n	801b332 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b22a:	683b      	ldr	r3, [r7, #0]
 801b22c:	7859      	ldrb	r1, [r3, #1]
 801b22e:	693a      	ldr	r2, [r7, #16]
 801b230:	2380      	movs	r3, #128	@ 0x80
 801b232:	009b      	lsls	r3, r3, #2
 801b234:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b236:	683b      	ldr	r3, [r7, #0]
 801b238:	88db      	ldrh	r3, [r3, #6]
 801b23a:	b2d9      	uxtb	r1, r3
 801b23c:	693b      	ldr	r3, [r7, #16]
 801b23e:	4a40      	ldr	r2, [pc, #256]	@ (801b340 <USBD_CDC_Setup+0x18c>)
 801b240:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b242:	6939      	ldr	r1, [r7, #16]
 801b244:	683b      	ldr	r3, [r7, #0]
 801b246:	88da      	ldrh	r2, [r3, #6]
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	0018      	movs	r0, r3
 801b24c:	f001 fbce 	bl	801c9ec <USBD_CtlPrepareRx>
      break;
 801b250:	e06f      	b.n	801b332 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b252:	687a      	ldr	r2, [r7, #4]
 801b254:	23af      	movs	r3, #175	@ 0xaf
 801b256:	009b      	lsls	r3, r3, #2
 801b258:	58d3      	ldr	r3, [r2, r3]
 801b25a:	689b      	ldr	r3, [r3, #8]
 801b25c:	683a      	ldr	r2, [r7, #0]
 801b25e:	7850      	ldrb	r0, [r2, #1]
 801b260:	6839      	ldr	r1, [r7, #0]
 801b262:	2200      	movs	r2, #0
 801b264:	4798      	blx	r3
      break;
 801b266:	e064      	b.n	801b332 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b268:	683b      	ldr	r3, [r7, #0]
 801b26a:	785b      	ldrb	r3, [r3, #1]
 801b26c:	2b0b      	cmp	r3, #11
 801b26e:	d037      	beq.n	801b2e0 <USBD_CDC_Setup+0x12c>
 801b270:	dc47      	bgt.n	801b302 <USBD_CDC_Setup+0x14e>
 801b272:	2b00      	cmp	r3, #0
 801b274:	d002      	beq.n	801b27c <USBD_CDC_Setup+0xc8>
 801b276:	2b0a      	cmp	r3, #10
 801b278:	d019      	beq.n	801b2ae <USBD_CDC_Setup+0xfa>
 801b27a:	e042      	b.n	801b302 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b27c:	687a      	ldr	r2, [r7, #4]
 801b27e:	23a7      	movs	r3, #167	@ 0xa7
 801b280:	009b      	lsls	r3, r3, #2
 801b282:	5cd3      	ldrb	r3, [r2, r3]
 801b284:	2b03      	cmp	r3, #3
 801b286:	d107      	bne.n	801b298 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b288:	230c      	movs	r3, #12
 801b28a:	18f9      	adds	r1, r7, r3
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	2202      	movs	r2, #2
 801b290:	0018      	movs	r0, r3
 801b292:	f001 fb78 	bl	801c986 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b296:	e040      	b.n	801b31a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b298:	683a      	ldr	r2, [r7, #0]
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	0011      	movs	r1, r2
 801b29e:	0018      	movs	r0, r3
 801b2a0:	f001 faf3 	bl	801c88a <USBD_CtlError>
            ret = USBD_FAIL;
 801b2a4:	2317      	movs	r3, #23
 801b2a6:	18fb      	adds	r3, r7, r3
 801b2a8:	2202      	movs	r2, #2
 801b2aa:	701a      	strb	r2, [r3, #0]
          break;
 801b2ac:	e035      	b.n	801b31a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b2ae:	687a      	ldr	r2, [r7, #4]
 801b2b0:	23a7      	movs	r3, #167	@ 0xa7
 801b2b2:	009b      	lsls	r3, r3, #2
 801b2b4:	5cd3      	ldrb	r3, [r2, r3]
 801b2b6:	2b03      	cmp	r3, #3
 801b2b8:	d107      	bne.n	801b2ca <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b2ba:	230f      	movs	r3, #15
 801b2bc:	18f9      	adds	r1, r7, r3
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	2201      	movs	r2, #1
 801b2c2:	0018      	movs	r0, r3
 801b2c4:	f001 fb5f 	bl	801c986 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b2c8:	e027      	b.n	801b31a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b2ca:	683a      	ldr	r2, [r7, #0]
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	0011      	movs	r1, r2
 801b2d0:	0018      	movs	r0, r3
 801b2d2:	f001 fada 	bl	801c88a <USBD_CtlError>
            ret = USBD_FAIL;
 801b2d6:	2317      	movs	r3, #23
 801b2d8:	18fb      	adds	r3, r7, r3
 801b2da:	2202      	movs	r2, #2
 801b2dc:	701a      	strb	r2, [r3, #0]
          break;
 801b2de:	e01c      	b.n	801b31a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b2e0:	687a      	ldr	r2, [r7, #4]
 801b2e2:	23a7      	movs	r3, #167	@ 0xa7
 801b2e4:	009b      	lsls	r3, r3, #2
 801b2e6:	5cd3      	ldrb	r3, [r2, r3]
 801b2e8:	2b03      	cmp	r3, #3
 801b2ea:	d015      	beq.n	801b318 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b2ec:	683a      	ldr	r2, [r7, #0]
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	0011      	movs	r1, r2
 801b2f2:	0018      	movs	r0, r3
 801b2f4:	f001 fac9 	bl	801c88a <USBD_CtlError>
            ret = USBD_FAIL;
 801b2f8:	2317      	movs	r3, #23
 801b2fa:	18fb      	adds	r3, r7, r3
 801b2fc:	2202      	movs	r2, #2
 801b2fe:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b300:	e00a      	b.n	801b318 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b302:	683a      	ldr	r2, [r7, #0]
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	0011      	movs	r1, r2
 801b308:	0018      	movs	r0, r3
 801b30a:	f001 fabe 	bl	801c88a <USBD_CtlError>
          ret = USBD_FAIL;
 801b30e:	2317      	movs	r3, #23
 801b310:	18fb      	adds	r3, r7, r3
 801b312:	2202      	movs	r2, #2
 801b314:	701a      	strb	r2, [r3, #0]
          break;
 801b316:	e000      	b.n	801b31a <USBD_CDC_Setup+0x166>
          break;
 801b318:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b31a:	e00a      	b.n	801b332 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b31c:	683a      	ldr	r2, [r7, #0]
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	0011      	movs	r1, r2
 801b322:	0018      	movs	r0, r3
 801b324:	f001 fab1 	bl	801c88a <USBD_CtlError>
      ret = USBD_FAIL;
 801b328:	2317      	movs	r3, #23
 801b32a:	18fb      	adds	r3, r7, r3
 801b32c:	2202      	movs	r2, #2
 801b32e:	701a      	strb	r2, [r3, #0]
      break;
 801b330:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b332:	2317      	movs	r3, #23
 801b334:	18fb      	adds	r3, r7, r3
 801b336:	781b      	ldrb	r3, [r3, #0]
}
 801b338:	0018      	movs	r0, r3
 801b33a:	46bd      	mov	sp, r7
 801b33c:	b006      	add	sp, #24
 801b33e:	bd80      	pop	{r7, pc}
 801b340:	00000201 	.word	0x00000201

0801b344 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b344:	b580      	push	{r7, lr}
 801b346:	b084      	sub	sp, #16
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
 801b34c:	000a      	movs	r2, r1
 801b34e:	1cfb      	adds	r3, r7, #3
 801b350:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b352:	687a      	ldr	r2, [r7, #4]
 801b354:	23ae      	movs	r3, #174	@ 0xae
 801b356:	009b      	lsls	r3, r3, #2
 801b358:	58d3      	ldr	r3, [r2, r3]
 801b35a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b35c:	687a      	ldr	r2, [r7, #4]
 801b35e:	23b0      	movs	r3, #176	@ 0xb0
 801b360:	009b      	lsls	r3, r3, #2
 801b362:	58d3      	ldr	r3, [r2, r3]
 801b364:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b366:	687a      	ldr	r2, [r7, #4]
 801b368:	23ae      	movs	r3, #174	@ 0xae
 801b36a:	009b      	lsls	r3, r3, #2
 801b36c:	58d3      	ldr	r3, [r2, r3]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d03e      	beq.n	801b3f0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b372:	1cfb      	adds	r3, r7, #3
 801b374:	781a      	ldrb	r2, [r3, #0]
 801b376:	6879      	ldr	r1, [r7, #4]
 801b378:	0013      	movs	r3, r2
 801b37a:	009b      	lsls	r3, r3, #2
 801b37c:	189b      	adds	r3, r3, r2
 801b37e:	009b      	lsls	r3, r3, #2
 801b380:	18cb      	adds	r3, r1, r3
 801b382:	331c      	adds	r3, #28
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	2b00      	cmp	r3, #0
 801b388:	d02b      	beq.n	801b3e2 <USBD_CDC_DataIn+0x9e>
 801b38a:	1cfb      	adds	r3, r7, #3
 801b38c:	781a      	ldrb	r2, [r3, #0]
 801b38e:	6879      	ldr	r1, [r7, #4]
 801b390:	0013      	movs	r3, r2
 801b392:	009b      	lsls	r3, r3, #2
 801b394:	189b      	adds	r3, r3, r2
 801b396:	009b      	lsls	r3, r3, #2
 801b398:	18cb      	adds	r3, r1, r3
 801b39a:	331c      	adds	r3, #28
 801b39c:	6818      	ldr	r0, [r3, #0]
 801b39e:	1cfb      	adds	r3, r7, #3
 801b3a0:	781a      	ldrb	r2, [r3, #0]
 801b3a2:	68b9      	ldr	r1, [r7, #8]
 801b3a4:	0013      	movs	r3, r2
 801b3a6:	009b      	lsls	r3, r3, #2
 801b3a8:	189b      	adds	r3, r3, r2
 801b3aa:	00db      	lsls	r3, r3, #3
 801b3ac:	18cb      	adds	r3, r1, r3
 801b3ae:	3338      	adds	r3, #56	@ 0x38
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	0019      	movs	r1, r3
 801b3b4:	f7e4 ff7c 	bl	80002b0 <__aeabi_uidivmod>
 801b3b8:	1e0b      	subs	r3, r1, #0
 801b3ba:	d112      	bne.n	801b3e2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801b3bc:	1cfb      	adds	r3, r7, #3
 801b3be:	781a      	ldrb	r2, [r3, #0]
 801b3c0:	6879      	ldr	r1, [r7, #4]
 801b3c2:	0013      	movs	r3, r2
 801b3c4:	009b      	lsls	r3, r3, #2
 801b3c6:	189b      	adds	r3, r3, r2
 801b3c8:	009b      	lsls	r3, r3, #2
 801b3ca:	18cb      	adds	r3, r1, r3
 801b3cc:	331c      	adds	r3, #28
 801b3ce:	2200      	movs	r2, #0
 801b3d0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b3d2:	1cfb      	adds	r3, r7, #3
 801b3d4:	7819      	ldrb	r1, [r3, #0]
 801b3d6:	6878      	ldr	r0, [r7, #4]
 801b3d8:	2300      	movs	r3, #0
 801b3da:	2200      	movs	r2, #0
 801b3dc:	f002 f82f 	bl	801d43e <USBD_LL_Transmit>
 801b3e0:	e004      	b.n	801b3ec <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801b3e2:	68fa      	ldr	r2, [r7, #12]
 801b3e4:	2385      	movs	r3, #133	@ 0x85
 801b3e6:	009b      	lsls	r3, r3, #2
 801b3e8:	2100      	movs	r1, #0
 801b3ea:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	e000      	b.n	801b3f2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801b3f0:	2302      	movs	r3, #2
  }
}
 801b3f2:	0018      	movs	r0, r3
 801b3f4:	46bd      	mov	sp, r7
 801b3f6:	b004      	add	sp, #16
 801b3f8:	bd80      	pop	{r7, pc}

0801b3fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b3fa:	b580      	push	{r7, lr}
 801b3fc:	b084      	sub	sp, #16
 801b3fe:	af00      	add	r7, sp, #0
 801b400:	6078      	str	r0, [r7, #4]
 801b402:	000a      	movs	r2, r1
 801b404:	1cfb      	adds	r3, r7, #3
 801b406:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b408:	687a      	ldr	r2, [r7, #4]
 801b40a:	23ae      	movs	r3, #174	@ 0xae
 801b40c:	009b      	lsls	r3, r3, #2
 801b40e:	58d3      	ldr	r3, [r2, r3]
 801b410:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b412:	1cfb      	adds	r3, r7, #3
 801b414:	781a      	ldrb	r2, [r3, #0]
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	0011      	movs	r1, r2
 801b41a:	0018      	movs	r0, r3
 801b41c:	f002 f87d 	bl	801d51a <USBD_LL_GetRxDataSize>
 801b420:	0001      	movs	r1, r0
 801b422:	68fa      	ldr	r2, [r7, #12]
 801b424:	2383      	movs	r3, #131	@ 0x83
 801b426:	009b      	lsls	r3, r3, #2
 801b428:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801b42a:	687a      	ldr	r2, [r7, #4]
 801b42c:	23ae      	movs	r3, #174	@ 0xae
 801b42e:	009b      	lsls	r3, r3, #2
 801b430:	58d3      	ldr	r3, [r2, r3]
 801b432:	2b00      	cmp	r3, #0
 801b434:	d011      	beq.n	801b45a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b436:	687a      	ldr	r2, [r7, #4]
 801b438:	23af      	movs	r3, #175	@ 0xaf
 801b43a:	009b      	lsls	r3, r3, #2
 801b43c:	58d3      	ldr	r3, [r2, r3]
 801b43e:	68da      	ldr	r2, [r3, #12]
 801b440:	68f9      	ldr	r1, [r7, #12]
 801b442:	2381      	movs	r3, #129	@ 0x81
 801b444:	009b      	lsls	r3, r3, #2
 801b446:	58c8      	ldr	r0, [r1, r3]
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	2183      	movs	r1, #131	@ 0x83
 801b44c:	0089      	lsls	r1, r1, #2
 801b44e:	468c      	mov	ip, r1
 801b450:	4463      	add	r3, ip
 801b452:	0019      	movs	r1, r3
 801b454:	4790      	blx	r2

    return USBD_OK;
 801b456:	2300      	movs	r3, #0
 801b458:	e000      	b.n	801b45c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801b45a:	2302      	movs	r3, #2
  }
}
 801b45c:	0018      	movs	r0, r3
 801b45e:	46bd      	mov	sp, r7
 801b460:	b004      	add	sp, #16
 801b462:	bd80      	pop	{r7, pc}

0801b464 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b464:	b590      	push	{r4, r7, lr}
 801b466:	b085      	sub	sp, #20
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b46c:	687a      	ldr	r2, [r7, #4]
 801b46e:	23ae      	movs	r3, #174	@ 0xae
 801b470:	009b      	lsls	r3, r3, #2
 801b472:	58d3      	ldr	r3, [r2, r3]
 801b474:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801b476:	687a      	ldr	r2, [r7, #4]
 801b478:	23af      	movs	r3, #175	@ 0xaf
 801b47a:	009b      	lsls	r3, r3, #2
 801b47c:	58d3      	ldr	r3, [r2, r3]
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d018      	beq.n	801b4b4 <USBD_CDC_EP0_RxReady+0x50>
 801b482:	68fa      	ldr	r2, [r7, #12]
 801b484:	2380      	movs	r3, #128	@ 0x80
 801b486:	009b      	lsls	r3, r3, #2
 801b488:	5cd3      	ldrb	r3, [r2, r3]
 801b48a:	2bff      	cmp	r3, #255	@ 0xff
 801b48c:	d012      	beq.n	801b4b4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b48e:	687a      	ldr	r2, [r7, #4]
 801b490:	23af      	movs	r3, #175	@ 0xaf
 801b492:	009b      	lsls	r3, r3, #2
 801b494:	58d3      	ldr	r3, [r2, r3]
 801b496:	689b      	ldr	r3, [r3, #8]
 801b498:	68f9      	ldr	r1, [r7, #12]
 801b49a:	2280      	movs	r2, #128	@ 0x80
 801b49c:	0092      	lsls	r2, r2, #2
 801b49e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801b4a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801b4a2:	68fa      	ldr	r2, [r7, #12]
 801b4a4:	4c06      	ldr	r4, [pc, #24]	@ (801b4c0 <USBD_CDC_EP0_RxReady+0x5c>)
 801b4a6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b4a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801b4aa:	68fa      	ldr	r2, [r7, #12]
 801b4ac:	2380      	movs	r3, #128	@ 0x80
 801b4ae:	009b      	lsls	r3, r3, #2
 801b4b0:	21ff      	movs	r1, #255	@ 0xff
 801b4b2:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801b4b4:	2300      	movs	r3, #0
}
 801b4b6:	0018      	movs	r0, r3
 801b4b8:	46bd      	mov	sp, r7
 801b4ba:	b005      	add	sp, #20
 801b4bc:	bd90      	pop	{r4, r7, pc}
 801b4be:	46c0      	nop			@ (mov r8, r8)
 801b4c0:	00000201 	.word	0x00000201

0801b4c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801b4c4:	b580      	push	{r7, lr}
 801b4c6:	b082      	sub	sp, #8
 801b4c8:	af00      	add	r7, sp, #0
 801b4ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	2243      	movs	r2, #67	@ 0x43
 801b4d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801b4d2:	4b02      	ldr	r3, [pc, #8]	@ (801b4dc <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801b4d4:	0018      	movs	r0, r3
 801b4d6:	46bd      	mov	sp, r7
 801b4d8:	b002      	add	sp, #8
 801b4da:	bd80      	pop	{r7, pc}
 801b4dc:	2000016c 	.word	0x2000016c

0801b4e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801b4e0:	b580      	push	{r7, lr}
 801b4e2:	b082      	sub	sp, #8
 801b4e4:	af00      	add	r7, sp, #0
 801b4e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	2243      	movs	r2, #67	@ 0x43
 801b4ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801b4ee:	4b02      	ldr	r3, [pc, #8]	@ (801b4f8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801b4f0:	0018      	movs	r0, r3
 801b4f2:	46bd      	mov	sp, r7
 801b4f4:	b002      	add	sp, #8
 801b4f6:	bd80      	pop	{r7, pc}
 801b4f8:	20000128 	.word	0x20000128

0801b4fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801b4fc:	b580      	push	{r7, lr}
 801b4fe:	b082      	sub	sp, #8
 801b500:	af00      	add	r7, sp, #0
 801b502:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	2243      	movs	r2, #67	@ 0x43
 801b508:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801b50a:	4b02      	ldr	r3, [pc, #8]	@ (801b514 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801b50c:	0018      	movs	r0, r3
 801b50e:	46bd      	mov	sp, r7
 801b510:	b002      	add	sp, #8
 801b512:	bd80      	pop	{r7, pc}
 801b514:	200001b0 	.word	0x200001b0

0801b518 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801b518:	b580      	push	{r7, lr}
 801b51a:	b082      	sub	sp, #8
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	220a      	movs	r2, #10
 801b524:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801b526:	4b02      	ldr	r3, [pc, #8]	@ (801b530 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801b528:	0018      	movs	r0, r3
 801b52a:	46bd      	mov	sp, r7
 801b52c:	b002      	add	sp, #8
 801b52e:	bd80      	pop	{r7, pc}
 801b530:	200000e4 	.word	0x200000e4

0801b534 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801b534:	b580      	push	{r7, lr}
 801b536:	b084      	sub	sp, #16
 801b538:	af00      	add	r7, sp, #0
 801b53a:	6078      	str	r0, [r7, #4]
 801b53c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801b53e:	200f      	movs	r0, #15
 801b540:	183b      	adds	r3, r7, r0
 801b542:	2202      	movs	r2, #2
 801b544:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801b546:	683b      	ldr	r3, [r7, #0]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d007      	beq.n	801b55c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801b54c:	687a      	ldr	r2, [r7, #4]
 801b54e:	23af      	movs	r3, #175	@ 0xaf
 801b550:	009b      	lsls	r3, r3, #2
 801b552:	6839      	ldr	r1, [r7, #0]
 801b554:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801b556:	183b      	adds	r3, r7, r0
 801b558:	2200      	movs	r2, #0
 801b55a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801b55c:	230f      	movs	r3, #15
 801b55e:	18fb      	adds	r3, r7, r3
 801b560:	781b      	ldrb	r3, [r3, #0]
}
 801b562:	0018      	movs	r0, r3
 801b564:	46bd      	mov	sp, r7
 801b566:	b004      	add	sp, #16
 801b568:	bd80      	pop	{r7, pc}

0801b56a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801b56a:	b580      	push	{r7, lr}
 801b56c:	b086      	sub	sp, #24
 801b56e:	af00      	add	r7, sp, #0
 801b570:	60f8      	str	r0, [r7, #12]
 801b572:	60b9      	str	r1, [r7, #8]
 801b574:	1dbb      	adds	r3, r7, #6
 801b576:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b578:	68fa      	ldr	r2, [r7, #12]
 801b57a:	23ae      	movs	r3, #174	@ 0xae
 801b57c:	009b      	lsls	r3, r3, #2
 801b57e:	58d3      	ldr	r3, [r2, r3]
 801b580:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801b582:	697a      	ldr	r2, [r7, #20]
 801b584:	2382      	movs	r3, #130	@ 0x82
 801b586:	009b      	lsls	r3, r3, #2
 801b588:	68b9      	ldr	r1, [r7, #8]
 801b58a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801b58c:	1dbb      	adds	r3, r7, #6
 801b58e:	8819      	ldrh	r1, [r3, #0]
 801b590:	697a      	ldr	r2, [r7, #20]
 801b592:	2384      	movs	r3, #132	@ 0x84
 801b594:	009b      	lsls	r3, r3, #2
 801b596:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b598:	2300      	movs	r3, #0
}
 801b59a:	0018      	movs	r0, r3
 801b59c:	46bd      	mov	sp, r7
 801b59e:	b006      	add	sp, #24
 801b5a0:	bd80      	pop	{r7, pc}

0801b5a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801b5a2:	b580      	push	{r7, lr}
 801b5a4:	b084      	sub	sp, #16
 801b5a6:	af00      	add	r7, sp, #0
 801b5a8:	6078      	str	r0, [r7, #4]
 801b5aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b5ac:	687a      	ldr	r2, [r7, #4]
 801b5ae:	23ae      	movs	r3, #174	@ 0xae
 801b5b0:	009b      	lsls	r3, r3, #2
 801b5b2:	58d3      	ldr	r3, [r2, r3]
 801b5b4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801b5b6:	68fa      	ldr	r2, [r7, #12]
 801b5b8:	2381      	movs	r3, #129	@ 0x81
 801b5ba:	009b      	lsls	r3, r3, #2
 801b5bc:	6839      	ldr	r1, [r7, #0]
 801b5be:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b5c0:	2300      	movs	r3, #0
}
 801b5c2:	0018      	movs	r0, r3
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	b004      	add	sp, #16
 801b5c8:	bd80      	pop	{r7, pc}

0801b5ca <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801b5ca:	b580      	push	{r7, lr}
 801b5cc:	b084      	sub	sp, #16
 801b5ce:	af00      	add	r7, sp, #0
 801b5d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b5d2:	687a      	ldr	r2, [r7, #4]
 801b5d4:	23ae      	movs	r3, #174	@ 0xae
 801b5d6:	009b      	lsls	r3, r3, #2
 801b5d8:	58d3      	ldr	r3, [r2, r3]
 801b5da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801b5dc:	687a      	ldr	r2, [r7, #4]
 801b5de:	23ae      	movs	r3, #174	@ 0xae
 801b5e0:	009b      	lsls	r3, r3, #2
 801b5e2:	58d3      	ldr	r3, [r2, r3]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d022      	beq.n	801b62e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801b5e8:	68fa      	ldr	r2, [r7, #12]
 801b5ea:	2385      	movs	r3, #133	@ 0x85
 801b5ec:	009b      	lsls	r3, r3, #2
 801b5ee:	58d3      	ldr	r3, [r2, r3]
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d11a      	bne.n	801b62a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801b5f4:	68fa      	ldr	r2, [r7, #12]
 801b5f6:	2385      	movs	r3, #133	@ 0x85
 801b5f8:	009b      	lsls	r3, r3, #2
 801b5fa:	2101      	movs	r1, #1
 801b5fc:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801b5fe:	68fa      	ldr	r2, [r7, #12]
 801b600:	2384      	movs	r3, #132	@ 0x84
 801b602:	009b      	lsls	r3, r3, #2
 801b604:	58d2      	ldr	r2, [r2, r3]
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b60a:	68fa      	ldr	r2, [r7, #12]
 801b60c:	2382      	movs	r3, #130	@ 0x82
 801b60e:	009b      	lsls	r3, r3, #2
 801b610:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801b612:	68fa      	ldr	r2, [r7, #12]
 801b614:	2384      	movs	r3, #132	@ 0x84
 801b616:	009b      	lsls	r3, r3, #2
 801b618:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b61a:	b29b      	uxth	r3, r3
 801b61c:	6878      	ldr	r0, [r7, #4]
 801b61e:	000a      	movs	r2, r1
 801b620:	2181      	movs	r1, #129	@ 0x81
 801b622:	f001 ff0c 	bl	801d43e <USBD_LL_Transmit>

      return USBD_OK;
 801b626:	2300      	movs	r3, #0
 801b628:	e002      	b.n	801b630 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801b62a:	2301      	movs	r3, #1
 801b62c:	e000      	b.n	801b630 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801b62e:	2302      	movs	r3, #2
  }
}
 801b630:	0018      	movs	r0, r3
 801b632:	46bd      	mov	sp, r7
 801b634:	b004      	add	sp, #16
 801b636:	bd80      	pop	{r7, pc}

0801b638 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801b638:	b580      	push	{r7, lr}
 801b63a:	b084      	sub	sp, #16
 801b63c:	af00      	add	r7, sp, #0
 801b63e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b640:	687a      	ldr	r2, [r7, #4]
 801b642:	23ae      	movs	r3, #174	@ 0xae
 801b644:	009b      	lsls	r3, r3, #2
 801b646:	58d3      	ldr	r3, [r2, r3]
 801b648:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801b64a:	687a      	ldr	r2, [r7, #4]
 801b64c:	23ae      	movs	r3, #174	@ 0xae
 801b64e:	009b      	lsls	r3, r3, #2
 801b650:	58d3      	ldr	r3, [r2, r3]
 801b652:	2b00      	cmp	r3, #0
 801b654:	d019      	beq.n	801b68a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	7c1b      	ldrb	r3, [r3, #16]
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d10a      	bne.n	801b674 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b65e:	68fa      	ldr	r2, [r7, #12]
 801b660:	2381      	movs	r3, #129	@ 0x81
 801b662:	009b      	lsls	r3, r3, #2
 801b664:	58d2      	ldr	r2, [r2, r3]
 801b666:	2380      	movs	r3, #128	@ 0x80
 801b668:	009b      	lsls	r3, r3, #2
 801b66a:	6878      	ldr	r0, [r7, #4]
 801b66c:	2101      	movs	r1, #1
 801b66e:	f001 ff1d 	bl	801d4ac <USBD_LL_PrepareReceive>
 801b672:	e008      	b.n	801b686 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b674:	68fa      	ldr	r2, [r7, #12]
 801b676:	2381      	movs	r3, #129	@ 0x81
 801b678:	009b      	lsls	r3, r3, #2
 801b67a:	58d2      	ldr	r2, [r2, r3]
 801b67c:	6878      	ldr	r0, [r7, #4]
 801b67e:	2340      	movs	r3, #64	@ 0x40
 801b680:	2101      	movs	r1, #1
 801b682:	f001 ff13 	bl	801d4ac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801b686:	2300      	movs	r3, #0
 801b688:	e000      	b.n	801b68c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801b68a:	2302      	movs	r3, #2
  }
}
 801b68c:	0018      	movs	r0, r3
 801b68e:	46bd      	mov	sp, r7
 801b690:	b004      	add	sp, #16
 801b692:	bd80      	pop	{r7, pc}

0801b694 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801b694:	b580      	push	{r7, lr}
 801b696:	b084      	sub	sp, #16
 801b698:	af00      	add	r7, sp, #0
 801b69a:	60f8      	str	r0, [r7, #12]
 801b69c:	60b9      	str	r1, [r7, #8]
 801b69e:	1dfb      	adds	r3, r7, #7
 801b6a0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801b6a2:	68fb      	ldr	r3, [r7, #12]
 801b6a4:	2b00      	cmp	r3, #0
 801b6a6:	d101      	bne.n	801b6ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801b6a8:	2302      	movs	r3, #2
 801b6aa:	e020      	b.n	801b6ee <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801b6ac:	68fa      	ldr	r2, [r7, #12]
 801b6ae:	23ad      	movs	r3, #173	@ 0xad
 801b6b0:	009b      	lsls	r3, r3, #2
 801b6b2:	58d3      	ldr	r3, [r2, r3]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d004      	beq.n	801b6c2 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801b6b8:	68fa      	ldr	r2, [r7, #12]
 801b6ba:	23ad      	movs	r3, #173	@ 0xad
 801b6bc:	009b      	lsls	r3, r3, #2
 801b6be:	2100      	movs	r1, #0
 801b6c0:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b6c2:	68bb      	ldr	r3, [r7, #8]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d004      	beq.n	801b6d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b6c8:	68fa      	ldr	r2, [r7, #12]
 801b6ca:	23ac      	movs	r3, #172	@ 0xac
 801b6cc:	009b      	lsls	r3, r3, #2
 801b6ce:	68b9      	ldr	r1, [r7, #8]
 801b6d0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b6d2:	68fa      	ldr	r2, [r7, #12]
 801b6d4:	23a7      	movs	r3, #167	@ 0xa7
 801b6d6:	009b      	lsls	r3, r3, #2
 801b6d8:	2101      	movs	r1, #1
 801b6da:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	1dfa      	adds	r2, r7, #7
 801b6e0:	7812      	ldrb	r2, [r2, #0]
 801b6e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	0018      	movs	r0, r3
 801b6e8:	f001 fd0c 	bl	801d104 <USBD_LL_Init>

  return USBD_OK;
 801b6ec:	2300      	movs	r3, #0
}
 801b6ee:	0018      	movs	r0, r3
 801b6f0:	46bd      	mov	sp, r7
 801b6f2:	b004      	add	sp, #16
 801b6f4:	bd80      	pop	{r7, pc}

0801b6f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b6f6:	b580      	push	{r7, lr}
 801b6f8:	b084      	sub	sp, #16
 801b6fa:	af00      	add	r7, sp, #0
 801b6fc:	6078      	str	r0, [r7, #4]
 801b6fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801b700:	200f      	movs	r0, #15
 801b702:	183b      	adds	r3, r7, r0
 801b704:	2200      	movs	r2, #0
 801b706:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801b708:	683b      	ldr	r3, [r7, #0]
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d008      	beq.n	801b720 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801b70e:	687a      	ldr	r2, [r7, #4]
 801b710:	23ad      	movs	r3, #173	@ 0xad
 801b712:	009b      	lsls	r3, r3, #2
 801b714:	6839      	ldr	r1, [r7, #0]
 801b716:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801b718:	183b      	adds	r3, r7, r0
 801b71a:	2200      	movs	r2, #0
 801b71c:	701a      	strb	r2, [r3, #0]
 801b71e:	e003      	b.n	801b728 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801b720:	230f      	movs	r3, #15
 801b722:	18fb      	adds	r3, r7, r3
 801b724:	2202      	movs	r2, #2
 801b726:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801b728:	230f      	movs	r3, #15
 801b72a:	18fb      	adds	r3, r7, r3
 801b72c:	781b      	ldrb	r3, [r3, #0]
}
 801b72e:	0018      	movs	r0, r3
 801b730:	46bd      	mov	sp, r7
 801b732:	b004      	add	sp, #16
 801b734:	bd80      	pop	{r7, pc}

0801b736 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801b736:	b580      	push	{r7, lr}
 801b738:	b082      	sub	sp, #8
 801b73a:	af00      	add	r7, sp, #0
 801b73c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	0018      	movs	r0, r3
 801b742:	f001 fd43 	bl	801d1cc <USBD_LL_Start>

  return USBD_OK;
 801b746:	2300      	movs	r3, #0
}
 801b748:	0018      	movs	r0, r3
 801b74a:	46bd      	mov	sp, r7
 801b74c:	b002      	add	sp, #8
 801b74e:	bd80      	pop	{r7, pc}

0801b750 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801b750:	b580      	push	{r7, lr}
 801b752:	b082      	sub	sp, #8
 801b754:	af00      	add	r7, sp, #0
 801b756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b758:	2300      	movs	r3, #0
}
 801b75a:	0018      	movs	r0, r3
 801b75c:	46bd      	mov	sp, r7
 801b75e:	b002      	add	sp, #8
 801b760:	bd80      	pop	{r7, pc}

0801b762 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b762:	b590      	push	{r4, r7, lr}
 801b764:	b085      	sub	sp, #20
 801b766:	af00      	add	r7, sp, #0
 801b768:	6078      	str	r0, [r7, #4]
 801b76a:	000a      	movs	r2, r1
 801b76c:	1cfb      	adds	r3, r7, #3
 801b76e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801b770:	240f      	movs	r4, #15
 801b772:	193b      	adds	r3, r7, r4
 801b774:	2202      	movs	r2, #2
 801b776:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801b778:	687a      	ldr	r2, [r7, #4]
 801b77a:	23ad      	movs	r3, #173	@ 0xad
 801b77c:	009b      	lsls	r3, r3, #2
 801b77e:	58d3      	ldr	r3, [r2, r3]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d00e      	beq.n	801b7a2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801b784:	687a      	ldr	r2, [r7, #4]
 801b786:	23ad      	movs	r3, #173	@ 0xad
 801b788:	009b      	lsls	r3, r3, #2
 801b78a:	58d3      	ldr	r3, [r2, r3]
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	1cfa      	adds	r2, r7, #3
 801b790:	7811      	ldrb	r1, [r2, #0]
 801b792:	687a      	ldr	r2, [r7, #4]
 801b794:	0010      	movs	r0, r2
 801b796:	4798      	blx	r3
 801b798:	1e03      	subs	r3, r0, #0
 801b79a:	d102      	bne.n	801b7a2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801b79c:	193b      	adds	r3, r7, r4
 801b79e:	2200      	movs	r2, #0
 801b7a0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801b7a2:	230f      	movs	r3, #15
 801b7a4:	18fb      	adds	r3, r7, r3
 801b7a6:	781b      	ldrb	r3, [r3, #0]
}
 801b7a8:	0018      	movs	r0, r3
 801b7aa:	46bd      	mov	sp, r7
 801b7ac:	b005      	add	sp, #20
 801b7ae:	bd90      	pop	{r4, r7, pc}

0801b7b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b7b0:	b580      	push	{r7, lr}
 801b7b2:	b082      	sub	sp, #8
 801b7b4:	af00      	add	r7, sp, #0
 801b7b6:	6078      	str	r0, [r7, #4]
 801b7b8:	000a      	movs	r2, r1
 801b7ba:	1cfb      	adds	r3, r7, #3
 801b7bc:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801b7be:	687a      	ldr	r2, [r7, #4]
 801b7c0:	23ad      	movs	r3, #173	@ 0xad
 801b7c2:	009b      	lsls	r3, r3, #2
 801b7c4:	58d3      	ldr	r3, [r2, r3]
 801b7c6:	685b      	ldr	r3, [r3, #4]
 801b7c8:	1cfa      	adds	r2, r7, #3
 801b7ca:	7811      	ldrb	r1, [r2, #0]
 801b7cc:	687a      	ldr	r2, [r7, #4]
 801b7ce:	0010      	movs	r0, r2
 801b7d0:	4798      	blx	r3

  return USBD_OK;
 801b7d2:	2300      	movs	r3, #0
}
 801b7d4:	0018      	movs	r0, r3
 801b7d6:	46bd      	mov	sp, r7
 801b7d8:	b002      	add	sp, #8
 801b7da:	bd80      	pop	{r7, pc}

0801b7dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801b7dc:	b580      	push	{r7, lr}
 801b7de:	b082      	sub	sp, #8
 801b7e0:	af00      	add	r7, sp, #0
 801b7e2:	6078      	str	r0, [r7, #4]
 801b7e4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	22aa      	movs	r2, #170	@ 0xaa
 801b7ea:	0092      	lsls	r2, r2, #2
 801b7ec:	4694      	mov	ip, r2
 801b7ee:	4463      	add	r3, ip
 801b7f0:	683a      	ldr	r2, [r7, #0]
 801b7f2:	0011      	movs	r1, r2
 801b7f4:	0018      	movs	r0, r3
 801b7f6:	f001 f810 	bl	801c81a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801b7fa:	687a      	ldr	r2, [r7, #4]
 801b7fc:	23a5      	movs	r3, #165	@ 0xa5
 801b7fe:	009b      	lsls	r3, r3, #2
 801b800:	2101      	movs	r1, #1
 801b802:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	4a23      	ldr	r2, [pc, #140]	@ (801b894 <USBD_LL_SetupStage+0xb8>)
 801b808:	5a9b      	ldrh	r3, [r3, r2]
 801b80a:	0019      	movs	r1, r3
 801b80c:	687a      	ldr	r2, [r7, #4]
 801b80e:	23a6      	movs	r3, #166	@ 0xa6
 801b810:	009b      	lsls	r3, r3, #2
 801b812:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801b814:	687a      	ldr	r2, [r7, #4]
 801b816:	23aa      	movs	r3, #170	@ 0xaa
 801b818:	009b      	lsls	r3, r3, #2
 801b81a:	5cd3      	ldrb	r3, [r2, r3]
 801b81c:	001a      	movs	r2, r3
 801b81e:	231f      	movs	r3, #31
 801b820:	4013      	ands	r3, r2
 801b822:	2b02      	cmp	r3, #2
 801b824:	d019      	beq.n	801b85a <USBD_LL_SetupStage+0x7e>
 801b826:	d822      	bhi.n	801b86e <USBD_LL_SetupStage+0x92>
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d002      	beq.n	801b832 <USBD_LL_SetupStage+0x56>
 801b82c:	2b01      	cmp	r3, #1
 801b82e:	d00a      	beq.n	801b846 <USBD_LL_SetupStage+0x6a>
 801b830:	e01d      	b.n	801b86e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	22aa      	movs	r2, #170	@ 0xaa
 801b836:	0092      	lsls	r2, r2, #2
 801b838:	189a      	adds	r2, r3, r2
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	0011      	movs	r1, r2
 801b83e:	0018      	movs	r0, r3
 801b840:	f000 fa10 	bl	801bc64 <USBD_StdDevReq>
      break;
 801b844:	e020      	b.n	801b888 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	22aa      	movs	r2, #170	@ 0xaa
 801b84a:	0092      	lsls	r2, r2, #2
 801b84c:	189a      	adds	r2, r3, r2
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	0011      	movs	r1, r2
 801b852:	0018      	movs	r0, r3
 801b854:	f000 fa78 	bl	801bd48 <USBD_StdItfReq>
      break;
 801b858:	e016      	b.n	801b888 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	22aa      	movs	r2, #170	@ 0xaa
 801b85e:	0092      	lsls	r2, r2, #2
 801b860:	189a      	adds	r2, r3, r2
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	0011      	movs	r1, r2
 801b866:	0018      	movs	r0, r3
 801b868:	f000 fac5 	bl	801bdf6 <USBD_StdEPReq>
      break;
 801b86c:	e00c      	b.n	801b888 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801b86e:	687a      	ldr	r2, [r7, #4]
 801b870:	23aa      	movs	r3, #170	@ 0xaa
 801b872:	009b      	lsls	r3, r3, #2
 801b874:	5cd3      	ldrb	r3, [r2, r3]
 801b876:	227f      	movs	r2, #127	@ 0x7f
 801b878:	4393      	bics	r3, r2
 801b87a:	b2da      	uxtb	r2, r3
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	0011      	movs	r1, r2
 801b880:	0018      	movs	r0, r3
 801b882:	f001 fd2a 	bl	801d2da <USBD_LL_StallEP>
      break;
 801b886:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b888:	2300      	movs	r3, #0
}
 801b88a:	0018      	movs	r0, r3
 801b88c:	46bd      	mov	sp, r7
 801b88e:	b002      	add	sp, #8
 801b890:	bd80      	pop	{r7, pc}
 801b892:	46c0      	nop			@ (mov r8, r8)
 801b894:	000002ae 	.word	0x000002ae

0801b898 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801b898:	b580      	push	{r7, lr}
 801b89a:	b086      	sub	sp, #24
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	60f8      	str	r0, [r7, #12]
 801b8a0:	607a      	str	r2, [r7, #4]
 801b8a2:	200b      	movs	r0, #11
 801b8a4:	183b      	adds	r3, r7, r0
 801b8a6:	1c0a      	adds	r2, r1, #0
 801b8a8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b8aa:	183b      	adds	r3, r7, r0
 801b8ac:	781b      	ldrb	r3, [r3, #0]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d154      	bne.n	801b95c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	3355      	adds	r3, #85	@ 0x55
 801b8b6:	33ff      	adds	r3, #255	@ 0xff
 801b8b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801b8ba:	68fa      	ldr	r2, [r7, #12]
 801b8bc:	23a5      	movs	r3, #165	@ 0xa5
 801b8be:	009b      	lsls	r3, r3, #2
 801b8c0:	58d3      	ldr	r3, [r2, r3]
 801b8c2:	2b03      	cmp	r3, #3
 801b8c4:	d139      	bne.n	801b93a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801b8c6:	697b      	ldr	r3, [r7, #20]
 801b8c8:	68da      	ldr	r2, [r3, #12]
 801b8ca:	697b      	ldr	r3, [r7, #20]
 801b8cc:	691b      	ldr	r3, [r3, #16]
 801b8ce:	429a      	cmp	r2, r3
 801b8d0:	d919      	bls.n	801b906 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801b8d2:	697b      	ldr	r3, [r7, #20]
 801b8d4:	68da      	ldr	r2, [r3, #12]
 801b8d6:	697b      	ldr	r3, [r7, #20]
 801b8d8:	691b      	ldr	r3, [r3, #16]
 801b8da:	1ad2      	subs	r2, r2, r3
 801b8dc:	697b      	ldr	r3, [r7, #20]
 801b8de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b8e0:	697b      	ldr	r3, [r7, #20]
 801b8e2:	68da      	ldr	r2, [r3, #12]
 801b8e4:	697b      	ldr	r3, [r7, #20]
 801b8e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b8e8:	429a      	cmp	r2, r3
 801b8ea:	d203      	bcs.n	801b8f4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b8ec:	697b      	ldr	r3, [r7, #20]
 801b8ee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801b8f0:	b29b      	uxth	r3, r3
 801b8f2:	e002      	b.n	801b8fa <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b8f4:	697b      	ldr	r3, [r7, #20]
 801b8f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b8f8:	b29b      	uxth	r3, r3
 801b8fa:	6879      	ldr	r1, [r7, #4]
 801b8fc:	68f8      	ldr	r0, [r7, #12]
 801b8fe:	001a      	movs	r2, r3
 801b900:	f001 f898 	bl	801ca34 <USBD_CtlContinueRx>
 801b904:	e045      	b.n	801b992 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b906:	68fa      	ldr	r2, [r7, #12]
 801b908:	23ad      	movs	r3, #173	@ 0xad
 801b90a:	009b      	lsls	r3, r3, #2
 801b90c:	58d3      	ldr	r3, [r2, r3]
 801b90e:	691b      	ldr	r3, [r3, #16]
 801b910:	2b00      	cmp	r3, #0
 801b912:	d00d      	beq.n	801b930 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b914:	68fa      	ldr	r2, [r7, #12]
 801b916:	23a7      	movs	r3, #167	@ 0xa7
 801b918:	009b      	lsls	r3, r3, #2
 801b91a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b91c:	2b03      	cmp	r3, #3
 801b91e:	d107      	bne.n	801b930 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801b920:	68fa      	ldr	r2, [r7, #12]
 801b922:	23ad      	movs	r3, #173	@ 0xad
 801b924:	009b      	lsls	r3, r3, #2
 801b926:	58d3      	ldr	r3, [r2, r3]
 801b928:	691b      	ldr	r3, [r3, #16]
 801b92a:	68fa      	ldr	r2, [r7, #12]
 801b92c:	0010      	movs	r0, r2
 801b92e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	0018      	movs	r0, r3
 801b934:	f001 f891 	bl	801ca5a <USBD_CtlSendStatus>
 801b938:	e02b      	b.n	801b992 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801b93a:	68fa      	ldr	r2, [r7, #12]
 801b93c:	23a5      	movs	r3, #165	@ 0xa5
 801b93e:	009b      	lsls	r3, r3, #2
 801b940:	58d3      	ldr	r3, [r2, r3]
 801b942:	2b05      	cmp	r3, #5
 801b944:	d125      	bne.n	801b992 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801b946:	68fa      	ldr	r2, [r7, #12]
 801b948:	23a5      	movs	r3, #165	@ 0xa5
 801b94a:	009b      	lsls	r3, r3, #2
 801b94c:	2100      	movs	r1, #0
 801b94e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	2100      	movs	r1, #0
 801b954:	0018      	movs	r0, r3
 801b956:	f001 fcc0 	bl	801d2da <USBD_LL_StallEP>
 801b95a:	e01a      	b.n	801b992 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801b95c:	68fa      	ldr	r2, [r7, #12]
 801b95e:	23ad      	movs	r3, #173	@ 0xad
 801b960:	009b      	lsls	r3, r3, #2
 801b962:	58d3      	ldr	r3, [r2, r3]
 801b964:	699b      	ldr	r3, [r3, #24]
 801b966:	2b00      	cmp	r3, #0
 801b968:	d011      	beq.n	801b98e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b96a:	68fa      	ldr	r2, [r7, #12]
 801b96c:	23a7      	movs	r3, #167	@ 0xa7
 801b96e:	009b      	lsls	r3, r3, #2
 801b970:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801b972:	2b03      	cmp	r3, #3
 801b974:	d10b      	bne.n	801b98e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801b976:	68fa      	ldr	r2, [r7, #12]
 801b978:	23ad      	movs	r3, #173	@ 0xad
 801b97a:	009b      	lsls	r3, r3, #2
 801b97c:	58d3      	ldr	r3, [r2, r3]
 801b97e:	699b      	ldr	r3, [r3, #24]
 801b980:	220b      	movs	r2, #11
 801b982:	18ba      	adds	r2, r7, r2
 801b984:	7811      	ldrb	r1, [r2, #0]
 801b986:	68fa      	ldr	r2, [r7, #12]
 801b988:	0010      	movs	r0, r2
 801b98a:	4798      	blx	r3
 801b98c:	e001      	b.n	801b992 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801b98e:	2302      	movs	r3, #2
 801b990:	e000      	b.n	801b994 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801b992:	2300      	movs	r3, #0
}
 801b994:	0018      	movs	r0, r3
 801b996:	46bd      	mov	sp, r7
 801b998:	b006      	add	sp, #24
 801b99a:	bd80      	pop	{r7, pc}

0801b99c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801b99c:	b580      	push	{r7, lr}
 801b99e:	b086      	sub	sp, #24
 801b9a0:	af00      	add	r7, sp, #0
 801b9a2:	60f8      	str	r0, [r7, #12]
 801b9a4:	607a      	str	r2, [r7, #4]
 801b9a6:	200b      	movs	r0, #11
 801b9a8:	183b      	adds	r3, r7, r0
 801b9aa:	1c0a      	adds	r2, r1, #0
 801b9ac:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b9ae:	183b      	adds	r3, r7, r0
 801b9b0:	781b      	ldrb	r3, [r3, #0]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d000      	beq.n	801b9b8 <USBD_LL_DataInStage+0x1c>
 801b9b6:	e08e      	b.n	801bad6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	3314      	adds	r3, #20
 801b9bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801b9be:	68fa      	ldr	r2, [r7, #12]
 801b9c0:	23a5      	movs	r3, #165	@ 0xa5
 801b9c2:	009b      	lsls	r3, r3, #2
 801b9c4:	58d3      	ldr	r3, [r2, r3]
 801b9c6:	2b02      	cmp	r3, #2
 801b9c8:	d164      	bne.n	801ba94 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801b9ca:	697b      	ldr	r3, [r7, #20]
 801b9cc:	68da      	ldr	r2, [r3, #12]
 801b9ce:	697b      	ldr	r3, [r7, #20]
 801b9d0:	691b      	ldr	r3, [r3, #16]
 801b9d2:	429a      	cmp	r2, r3
 801b9d4:	d915      	bls.n	801ba02 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801b9d6:	697b      	ldr	r3, [r7, #20]
 801b9d8:	68da      	ldr	r2, [r3, #12]
 801b9da:	697b      	ldr	r3, [r7, #20]
 801b9dc:	691b      	ldr	r3, [r3, #16]
 801b9de:	1ad2      	subs	r2, r2, r3
 801b9e0:	697b      	ldr	r3, [r7, #20]
 801b9e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801b9e4:	697b      	ldr	r3, [r7, #20]
 801b9e6:	68db      	ldr	r3, [r3, #12]
 801b9e8:	b29a      	uxth	r2, r3
 801b9ea:	6879      	ldr	r1, [r7, #4]
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	0018      	movs	r0, r3
 801b9f0:	f000 ffe9 	bl	801c9c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b9f4:	68f8      	ldr	r0, [r7, #12]
 801b9f6:	2300      	movs	r3, #0
 801b9f8:	2200      	movs	r2, #0
 801b9fa:	2100      	movs	r1, #0
 801b9fc:	f001 fd56 	bl	801d4ac <USBD_LL_PrepareReceive>
 801ba00:	e059      	b.n	801bab6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801ba02:	697b      	ldr	r3, [r7, #20]
 801ba04:	689a      	ldr	r2, [r3, #8]
 801ba06:	697b      	ldr	r3, [r7, #20]
 801ba08:	691b      	ldr	r3, [r3, #16]
 801ba0a:	0019      	movs	r1, r3
 801ba0c:	0010      	movs	r0, r2
 801ba0e:	f7e4 fc4f 	bl	80002b0 <__aeabi_uidivmod>
 801ba12:	1e0b      	subs	r3, r1, #0
 801ba14:	d11f      	bne.n	801ba56 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801ba16:	697b      	ldr	r3, [r7, #20]
 801ba18:	689a      	ldr	r2, [r3, #8]
 801ba1a:	697b      	ldr	r3, [r7, #20]
 801ba1c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801ba1e:	429a      	cmp	r2, r3
 801ba20:	d319      	bcc.n	801ba56 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801ba22:	697b      	ldr	r3, [r7, #20]
 801ba24:	689a      	ldr	r2, [r3, #8]
 801ba26:	68f9      	ldr	r1, [r7, #12]
 801ba28:	23a6      	movs	r3, #166	@ 0xa6
 801ba2a:	009b      	lsls	r3, r3, #2
 801ba2c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801ba2e:	429a      	cmp	r2, r3
 801ba30:	d211      	bcs.n	801ba56 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801ba32:	68fb      	ldr	r3, [r7, #12]
 801ba34:	2200      	movs	r2, #0
 801ba36:	2100      	movs	r1, #0
 801ba38:	0018      	movs	r0, r3
 801ba3a:	f000 ffc4 	bl	801c9c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801ba3e:	68fa      	ldr	r2, [r7, #12]
 801ba40:	23a6      	movs	r3, #166	@ 0xa6
 801ba42:	009b      	lsls	r3, r3, #2
 801ba44:	2100      	movs	r1, #0
 801ba46:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801ba48:	68f8      	ldr	r0, [r7, #12]
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	2200      	movs	r2, #0
 801ba4e:	2100      	movs	r1, #0
 801ba50:	f001 fd2c 	bl	801d4ac <USBD_LL_PrepareReceive>
 801ba54:	e02f      	b.n	801bab6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801ba56:	68fa      	ldr	r2, [r7, #12]
 801ba58:	23ad      	movs	r3, #173	@ 0xad
 801ba5a:	009b      	lsls	r3, r3, #2
 801ba5c:	58d3      	ldr	r3, [r2, r3]
 801ba5e:	68db      	ldr	r3, [r3, #12]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d00d      	beq.n	801ba80 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ba64:	68fa      	ldr	r2, [r7, #12]
 801ba66:	23a7      	movs	r3, #167	@ 0xa7
 801ba68:	009b      	lsls	r3, r3, #2
 801ba6a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801ba6c:	2b03      	cmp	r3, #3
 801ba6e:	d107      	bne.n	801ba80 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801ba70:	68fa      	ldr	r2, [r7, #12]
 801ba72:	23ad      	movs	r3, #173	@ 0xad
 801ba74:	009b      	lsls	r3, r3, #2
 801ba76:	58d3      	ldr	r3, [r2, r3]
 801ba78:	68db      	ldr	r3, [r3, #12]
 801ba7a:	68fa      	ldr	r2, [r7, #12]
 801ba7c:	0010      	movs	r0, r2
 801ba7e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	2180      	movs	r1, #128	@ 0x80
 801ba84:	0018      	movs	r0, r3
 801ba86:	f001 fc28 	bl	801d2da <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	0018      	movs	r0, r3
 801ba8e:	f000 fff8 	bl	801ca82 <USBD_CtlReceiveStatus>
 801ba92:	e010      	b.n	801bab6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801ba94:	68fa      	ldr	r2, [r7, #12]
 801ba96:	23a5      	movs	r3, #165	@ 0xa5
 801ba98:	009b      	lsls	r3, r3, #2
 801ba9a:	58d3      	ldr	r3, [r2, r3]
 801ba9c:	2b04      	cmp	r3, #4
 801ba9e:	d005      	beq.n	801baac <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801baa0:	68fa      	ldr	r2, [r7, #12]
 801baa2:	23a5      	movs	r3, #165	@ 0xa5
 801baa4:	009b      	lsls	r3, r3, #2
 801baa6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d104      	bne.n	801bab6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	2180      	movs	r1, #128	@ 0x80
 801bab0:	0018      	movs	r0, r3
 801bab2:	f001 fc12 	bl	801d2da <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801bab6:	68fa      	ldr	r2, [r7, #12]
 801bab8:	23a8      	movs	r3, #168	@ 0xa8
 801baba:	009b      	lsls	r3, r3, #2
 801babc:	5cd3      	ldrb	r3, [r2, r3]
 801babe:	2b01      	cmp	r3, #1
 801bac0:	d124      	bne.n	801bb0c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801bac2:	68fb      	ldr	r3, [r7, #12]
 801bac4:	0018      	movs	r0, r3
 801bac6:	f7ff fe43 	bl	801b750 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801baca:	68fa      	ldr	r2, [r7, #12]
 801bacc:	23a8      	movs	r3, #168	@ 0xa8
 801bace:	009b      	lsls	r3, r3, #2
 801bad0:	2100      	movs	r1, #0
 801bad2:	54d1      	strb	r1, [r2, r3]
 801bad4:	e01a      	b.n	801bb0c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801bad6:	68fa      	ldr	r2, [r7, #12]
 801bad8:	23ad      	movs	r3, #173	@ 0xad
 801bada:	009b      	lsls	r3, r3, #2
 801badc:	58d3      	ldr	r3, [r2, r3]
 801bade:	695b      	ldr	r3, [r3, #20]
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d011      	beq.n	801bb08 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bae4:	68fa      	ldr	r2, [r7, #12]
 801bae6:	23a7      	movs	r3, #167	@ 0xa7
 801bae8:	009b      	lsls	r3, r3, #2
 801baea:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801baec:	2b03      	cmp	r3, #3
 801baee:	d10b      	bne.n	801bb08 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801baf0:	68fa      	ldr	r2, [r7, #12]
 801baf2:	23ad      	movs	r3, #173	@ 0xad
 801baf4:	009b      	lsls	r3, r3, #2
 801baf6:	58d3      	ldr	r3, [r2, r3]
 801baf8:	695b      	ldr	r3, [r3, #20]
 801bafa:	220b      	movs	r2, #11
 801bafc:	18ba      	adds	r2, r7, r2
 801bafe:	7811      	ldrb	r1, [r2, #0]
 801bb00:	68fa      	ldr	r2, [r7, #12]
 801bb02:	0010      	movs	r0, r2
 801bb04:	4798      	blx	r3
 801bb06:	e001      	b.n	801bb0c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bb08:	2302      	movs	r3, #2
 801bb0a:	e000      	b.n	801bb0e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801bb0c:	2300      	movs	r3, #0
}
 801bb0e:	0018      	movs	r0, r3
 801bb10:	46bd      	mov	sp, r7
 801bb12:	b006      	add	sp, #24
 801bb14:	bd80      	pop	{r7, pc}

0801bb16 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801bb16:	b580      	push	{r7, lr}
 801bb18:	b082      	sub	sp, #8
 801bb1a:	af00      	add	r7, sp, #0
 801bb1c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bb1e:	6878      	ldr	r0, [r7, #4]
 801bb20:	2340      	movs	r3, #64	@ 0x40
 801bb22:	2200      	movs	r2, #0
 801bb24:	2100      	movs	r1, #0
 801bb26:	f001 fb76 	bl	801d216 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801bb2a:	687a      	ldr	r2, [r7, #4]
 801bb2c:	23ac      	movs	r3, #172	@ 0xac
 801bb2e:	005b      	lsls	r3, r3, #1
 801bb30:	2101      	movs	r1, #1
 801bb32:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801bb34:	687a      	ldr	r2, [r7, #4]
 801bb36:	23b2      	movs	r3, #178	@ 0xb2
 801bb38:	005b      	lsls	r3, r3, #1
 801bb3a:	2140      	movs	r1, #64	@ 0x40
 801bb3c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bb3e:	6878      	ldr	r0, [r7, #4]
 801bb40:	2340      	movs	r3, #64	@ 0x40
 801bb42:	2200      	movs	r2, #0
 801bb44:	2180      	movs	r1, #128	@ 0x80
 801bb46:	f001 fb66 	bl	801d216 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	2201      	movs	r2, #1
 801bb4e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	2240      	movs	r2, #64	@ 0x40
 801bb54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801bb56:	687a      	ldr	r2, [r7, #4]
 801bb58:	23a7      	movs	r3, #167	@ 0xa7
 801bb5a:	009b      	lsls	r3, r3, #2
 801bb5c:	2101      	movs	r1, #1
 801bb5e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801bb60:	687a      	ldr	r2, [r7, #4]
 801bb62:	23a5      	movs	r3, #165	@ 0xa5
 801bb64:	009b      	lsls	r3, r3, #2
 801bb66:	2100      	movs	r1, #0
 801bb68:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	2200      	movs	r2, #0
 801bb6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801bb70:	687a      	ldr	r2, [r7, #4]
 801bb72:	23a9      	movs	r3, #169	@ 0xa9
 801bb74:	009b      	lsls	r3, r3, #2
 801bb76:	2100      	movs	r1, #0
 801bb78:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801bb7a:	687a      	ldr	r2, [r7, #4]
 801bb7c:	23ae      	movs	r3, #174	@ 0xae
 801bb7e:	009b      	lsls	r3, r3, #2
 801bb80:	58d3      	ldr	r3, [r2, r3]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d00a      	beq.n	801bb9c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801bb86:	687a      	ldr	r2, [r7, #4]
 801bb88:	23ad      	movs	r3, #173	@ 0xad
 801bb8a:	009b      	lsls	r3, r3, #2
 801bb8c:	58d3      	ldr	r3, [r2, r3]
 801bb8e:	685a      	ldr	r2, [r3, #4]
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	685b      	ldr	r3, [r3, #4]
 801bb94:	b2d9      	uxtb	r1, r3
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	0018      	movs	r0, r3
 801bb9a:	4790      	blx	r2
  }

  return USBD_OK;
 801bb9c:	2300      	movs	r3, #0
}
 801bb9e:	0018      	movs	r0, r3
 801bba0:	46bd      	mov	sp, r7
 801bba2:	b002      	add	sp, #8
 801bba4:	bd80      	pop	{r7, pc}

0801bba6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801bba6:	b580      	push	{r7, lr}
 801bba8:	b082      	sub	sp, #8
 801bbaa:	af00      	add	r7, sp, #0
 801bbac:	6078      	str	r0, [r7, #4]
 801bbae:	000a      	movs	r2, r1
 801bbb0:	1cfb      	adds	r3, r7, #3
 801bbb2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	1cfa      	adds	r2, r7, #3
 801bbb8:	7812      	ldrb	r2, [r2, #0]
 801bbba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801bbbc:	2300      	movs	r3, #0
}
 801bbbe:	0018      	movs	r0, r3
 801bbc0:	46bd      	mov	sp, r7
 801bbc2:	b002      	add	sp, #8
 801bbc4:	bd80      	pop	{r7, pc}
	...

0801bbc8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801bbc8:	b580      	push	{r7, lr}
 801bbca:	b082      	sub	sp, #8
 801bbcc:	af00      	add	r7, sp, #0
 801bbce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801bbd0:	687a      	ldr	r2, [r7, #4]
 801bbd2:	23a7      	movs	r3, #167	@ 0xa7
 801bbd4:	009b      	lsls	r3, r3, #2
 801bbd6:	5cd1      	ldrb	r1, [r2, r3]
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	4a06      	ldr	r2, [pc, #24]	@ (801bbf4 <USBD_LL_Suspend+0x2c>)
 801bbdc:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801bbde:	687a      	ldr	r2, [r7, #4]
 801bbe0:	23a7      	movs	r3, #167	@ 0xa7
 801bbe2:	009b      	lsls	r3, r3, #2
 801bbe4:	2104      	movs	r1, #4
 801bbe6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801bbe8:	2300      	movs	r3, #0
}
 801bbea:	0018      	movs	r0, r3
 801bbec:	46bd      	mov	sp, r7
 801bbee:	b002      	add	sp, #8
 801bbf0:	bd80      	pop	{r7, pc}
 801bbf2:	46c0      	nop			@ (mov r8, r8)
 801bbf4:	0000029d 	.word	0x0000029d

0801bbf8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801bbf8:	b580      	push	{r7, lr}
 801bbfa:	b082      	sub	sp, #8
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801bc00:	687a      	ldr	r2, [r7, #4]
 801bc02:	23a7      	movs	r3, #167	@ 0xa7
 801bc04:	009b      	lsls	r3, r3, #2
 801bc06:	5cd3      	ldrb	r3, [r2, r3]
 801bc08:	2b04      	cmp	r3, #4
 801bc0a:	d106      	bne.n	801bc1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	4a05      	ldr	r2, [pc, #20]	@ (801bc24 <USBD_LL_Resume+0x2c>)
 801bc10:	5c99      	ldrb	r1, [r3, r2]
 801bc12:	687a      	ldr	r2, [r7, #4]
 801bc14:	23a7      	movs	r3, #167	@ 0xa7
 801bc16:	009b      	lsls	r3, r3, #2
 801bc18:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801bc1a:	2300      	movs	r3, #0
}
 801bc1c:	0018      	movs	r0, r3
 801bc1e:	46bd      	mov	sp, r7
 801bc20:	b002      	add	sp, #8
 801bc22:	bd80      	pop	{r7, pc}
 801bc24:	0000029d 	.word	0x0000029d

0801bc28 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801bc28:	b580      	push	{r7, lr}
 801bc2a:	b082      	sub	sp, #8
 801bc2c:	af00      	add	r7, sp, #0
 801bc2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bc30:	687a      	ldr	r2, [r7, #4]
 801bc32:	23a7      	movs	r3, #167	@ 0xa7
 801bc34:	009b      	lsls	r3, r3, #2
 801bc36:	5cd3      	ldrb	r3, [r2, r3]
 801bc38:	2b03      	cmp	r3, #3
 801bc3a:	d10e      	bne.n	801bc5a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801bc3c:	687a      	ldr	r2, [r7, #4]
 801bc3e:	23ad      	movs	r3, #173	@ 0xad
 801bc40:	009b      	lsls	r3, r3, #2
 801bc42:	58d3      	ldr	r3, [r2, r3]
 801bc44:	69db      	ldr	r3, [r3, #28]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d007      	beq.n	801bc5a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801bc4a:	687a      	ldr	r2, [r7, #4]
 801bc4c:	23ad      	movs	r3, #173	@ 0xad
 801bc4e:	009b      	lsls	r3, r3, #2
 801bc50:	58d3      	ldr	r3, [r2, r3]
 801bc52:	69db      	ldr	r3, [r3, #28]
 801bc54:	687a      	ldr	r2, [r7, #4]
 801bc56:	0010      	movs	r0, r2
 801bc58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801bc5a:	2300      	movs	r3, #0
}
 801bc5c:	0018      	movs	r0, r3
 801bc5e:	46bd      	mov	sp, r7
 801bc60:	b002      	add	sp, #8
 801bc62:	bd80      	pop	{r7, pc}

0801bc64 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801bc64:	b580      	push	{r7, lr}
 801bc66:	b084      	sub	sp, #16
 801bc68:	af00      	add	r7, sp, #0
 801bc6a:	6078      	str	r0, [r7, #4]
 801bc6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bc6e:	230f      	movs	r3, #15
 801bc70:	18fb      	adds	r3, r7, r3
 801bc72:	2200      	movs	r2, #0
 801bc74:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bc76:	683b      	ldr	r3, [r7, #0]
 801bc78:	781b      	ldrb	r3, [r3, #0]
 801bc7a:	001a      	movs	r2, r3
 801bc7c:	2360      	movs	r3, #96	@ 0x60
 801bc7e:	4013      	ands	r3, r2
 801bc80:	2b40      	cmp	r3, #64	@ 0x40
 801bc82:	d004      	beq.n	801bc8e <USBD_StdDevReq+0x2a>
 801bc84:	d84f      	bhi.n	801bd26 <USBD_StdDevReq+0xc2>
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d00b      	beq.n	801bca2 <USBD_StdDevReq+0x3e>
 801bc8a:	2b20      	cmp	r3, #32
 801bc8c:	d14b      	bne.n	801bd26 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bc8e:	687a      	ldr	r2, [r7, #4]
 801bc90:	23ad      	movs	r3, #173	@ 0xad
 801bc92:	009b      	lsls	r3, r3, #2
 801bc94:	58d3      	ldr	r3, [r2, r3]
 801bc96:	689b      	ldr	r3, [r3, #8]
 801bc98:	6839      	ldr	r1, [r7, #0]
 801bc9a:	687a      	ldr	r2, [r7, #4]
 801bc9c:	0010      	movs	r0, r2
 801bc9e:	4798      	blx	r3
      break;
 801bca0:	e048      	b.n	801bd34 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801bca2:	683b      	ldr	r3, [r7, #0]
 801bca4:	785b      	ldrb	r3, [r3, #1]
 801bca6:	2b09      	cmp	r3, #9
 801bca8:	d835      	bhi.n	801bd16 <USBD_StdDevReq+0xb2>
 801bcaa:	009a      	lsls	r2, r3, #2
 801bcac:	4b25      	ldr	r3, [pc, #148]	@ (801bd44 <USBD_StdDevReq+0xe0>)
 801bcae:	18d3      	adds	r3, r2, r3
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801bcb4:	683a      	ldr	r2, [r7, #0]
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	0011      	movs	r1, r2
 801bcba:	0018      	movs	r0, r3
 801bcbc:	f000 fa52 	bl	801c164 <USBD_GetDescriptor>
          break;
 801bcc0:	e030      	b.n	801bd24 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801bcc2:	683a      	ldr	r2, [r7, #0]
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	0011      	movs	r1, r2
 801bcc8:	0018      	movs	r0, r3
 801bcca:	f000 fbfd 	bl	801c4c8 <USBD_SetAddress>
          break;
 801bcce:	e029      	b.n	801bd24 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801bcd0:	683a      	ldr	r2, [r7, #0]
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	0011      	movs	r1, r2
 801bcd6:	0018      	movs	r0, r3
 801bcd8:	f000 fc4a 	bl	801c570 <USBD_SetConfig>
          break;
 801bcdc:	e022      	b.n	801bd24 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801bcde:	683a      	ldr	r2, [r7, #0]
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	0011      	movs	r1, r2
 801bce4:	0018      	movs	r0, r3
 801bce6:	f000 fce7 	bl	801c6b8 <USBD_GetConfig>
          break;
 801bcea:	e01b      	b.n	801bd24 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801bcec:	683a      	ldr	r2, [r7, #0]
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	0011      	movs	r1, r2
 801bcf2:	0018      	movs	r0, r3
 801bcf4:	f000 fd1b 	bl	801c72e <USBD_GetStatus>
          break;
 801bcf8:	e014      	b.n	801bd24 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801bcfa:	683a      	ldr	r2, [r7, #0]
 801bcfc:	687b      	ldr	r3, [r7, #4]
 801bcfe:	0011      	movs	r1, r2
 801bd00:	0018      	movs	r0, r3
 801bd02:	f000 fd4e 	bl	801c7a2 <USBD_SetFeature>
          break;
 801bd06:	e00d      	b.n	801bd24 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801bd08:	683a      	ldr	r2, [r7, #0]
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	0011      	movs	r1, r2
 801bd0e:	0018      	movs	r0, r3
 801bd10:	f000 fd5d 	bl	801c7ce <USBD_ClrFeature>
          break;
 801bd14:	e006      	b.n	801bd24 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801bd16:	683a      	ldr	r2, [r7, #0]
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	0011      	movs	r1, r2
 801bd1c:	0018      	movs	r0, r3
 801bd1e:	f000 fdb4 	bl	801c88a <USBD_CtlError>
          break;
 801bd22:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bd24:	e006      	b.n	801bd34 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801bd26:	683a      	ldr	r2, [r7, #0]
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	0011      	movs	r1, r2
 801bd2c:	0018      	movs	r0, r3
 801bd2e:	f000 fdac 	bl	801c88a <USBD_CtlError>
      break;
 801bd32:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801bd34:	230f      	movs	r3, #15
 801bd36:	18fb      	adds	r3, r7, r3
 801bd38:	781b      	ldrb	r3, [r3, #0]
}
 801bd3a:	0018      	movs	r0, r3
 801bd3c:	46bd      	mov	sp, r7
 801bd3e:	b004      	add	sp, #16
 801bd40:	bd80      	pop	{r7, pc}
 801bd42:	46c0      	nop			@ (mov r8, r8)
 801bd44:	08025568 	.word	0x08025568

0801bd48 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801bd48:	b5b0      	push	{r4, r5, r7, lr}
 801bd4a:	b084      	sub	sp, #16
 801bd4c:	af00      	add	r7, sp, #0
 801bd4e:	6078      	str	r0, [r7, #4]
 801bd50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bd52:	230f      	movs	r3, #15
 801bd54:	18fb      	adds	r3, r7, r3
 801bd56:	2200      	movs	r2, #0
 801bd58:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bd5a:	683b      	ldr	r3, [r7, #0]
 801bd5c:	781b      	ldrb	r3, [r3, #0]
 801bd5e:	001a      	movs	r2, r3
 801bd60:	2360      	movs	r3, #96	@ 0x60
 801bd62:	4013      	ands	r3, r2
 801bd64:	2b40      	cmp	r3, #64	@ 0x40
 801bd66:	d004      	beq.n	801bd72 <USBD_StdItfReq+0x2a>
 801bd68:	d839      	bhi.n	801bdde <USBD_StdItfReq+0x96>
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d001      	beq.n	801bd72 <USBD_StdItfReq+0x2a>
 801bd6e:	2b20      	cmp	r3, #32
 801bd70:	d135      	bne.n	801bdde <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801bd72:	687a      	ldr	r2, [r7, #4]
 801bd74:	23a7      	movs	r3, #167	@ 0xa7
 801bd76:	009b      	lsls	r3, r3, #2
 801bd78:	5cd3      	ldrb	r3, [r2, r3]
 801bd7a:	3b01      	subs	r3, #1
 801bd7c:	2b02      	cmp	r3, #2
 801bd7e:	d825      	bhi.n	801bdcc <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801bd80:	683b      	ldr	r3, [r7, #0]
 801bd82:	889b      	ldrh	r3, [r3, #4]
 801bd84:	b2db      	uxtb	r3, r3
 801bd86:	2b01      	cmp	r3, #1
 801bd88:	d819      	bhi.n	801bdbe <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801bd8a:	687a      	ldr	r2, [r7, #4]
 801bd8c:	23ad      	movs	r3, #173	@ 0xad
 801bd8e:	009b      	lsls	r3, r3, #2
 801bd90:	58d3      	ldr	r3, [r2, r3]
 801bd92:	689b      	ldr	r3, [r3, #8]
 801bd94:	250f      	movs	r5, #15
 801bd96:	197c      	adds	r4, r7, r5
 801bd98:	6839      	ldr	r1, [r7, #0]
 801bd9a:	687a      	ldr	r2, [r7, #4]
 801bd9c:	0010      	movs	r0, r2
 801bd9e:	4798      	blx	r3
 801bda0:	0003      	movs	r3, r0
 801bda2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801bda4:	683b      	ldr	r3, [r7, #0]
 801bda6:	88db      	ldrh	r3, [r3, #6]
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	d116      	bne.n	801bdda <USBD_StdItfReq+0x92>
 801bdac:	197b      	adds	r3, r7, r5
 801bdae:	781b      	ldrb	r3, [r3, #0]
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	d112      	bne.n	801bdda <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	0018      	movs	r0, r3
 801bdb8:	f000 fe4f 	bl	801ca5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801bdbc:	e00d      	b.n	801bdda <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801bdbe:	683a      	ldr	r2, [r7, #0]
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	0011      	movs	r1, r2
 801bdc4:	0018      	movs	r0, r3
 801bdc6:	f000 fd60 	bl	801c88a <USBD_CtlError>
          break;
 801bdca:	e006      	b.n	801bdda <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801bdcc:	683a      	ldr	r2, [r7, #0]
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	0011      	movs	r1, r2
 801bdd2:	0018      	movs	r0, r3
 801bdd4:	f000 fd59 	bl	801c88a <USBD_CtlError>
          break;
 801bdd8:	e000      	b.n	801bddc <USBD_StdItfReq+0x94>
          break;
 801bdda:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bddc:	e006      	b.n	801bdec <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801bdde:	683a      	ldr	r2, [r7, #0]
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	0011      	movs	r1, r2
 801bde4:	0018      	movs	r0, r3
 801bde6:	f000 fd50 	bl	801c88a <USBD_CtlError>
      break;
 801bdea:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801bdec:	2300      	movs	r3, #0
}
 801bdee:	0018      	movs	r0, r3
 801bdf0:	46bd      	mov	sp, r7
 801bdf2:	b004      	add	sp, #16
 801bdf4:	bdb0      	pop	{r4, r5, r7, pc}

0801bdf6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801bdf6:	b5b0      	push	{r4, r5, r7, lr}
 801bdf8:	b084      	sub	sp, #16
 801bdfa:	af00      	add	r7, sp, #0
 801bdfc:	6078      	str	r0, [r7, #4]
 801bdfe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801be00:	230f      	movs	r3, #15
 801be02:	18fb      	adds	r3, r7, r3
 801be04:	2200      	movs	r2, #0
 801be06:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801be08:	683b      	ldr	r3, [r7, #0]
 801be0a:	889a      	ldrh	r2, [r3, #4]
 801be0c:	230e      	movs	r3, #14
 801be0e:	18fb      	adds	r3, r7, r3
 801be10:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801be12:	683b      	ldr	r3, [r7, #0]
 801be14:	781b      	ldrb	r3, [r3, #0]
 801be16:	001a      	movs	r2, r3
 801be18:	2360      	movs	r3, #96	@ 0x60
 801be1a:	4013      	ands	r3, r2
 801be1c:	2b40      	cmp	r3, #64	@ 0x40
 801be1e:	d006      	beq.n	801be2e <USBD_StdEPReq+0x38>
 801be20:	d900      	bls.n	801be24 <USBD_StdEPReq+0x2e>
 801be22:	e190      	b.n	801c146 <USBD_StdEPReq+0x350>
 801be24:	2b00      	cmp	r3, #0
 801be26:	d00c      	beq.n	801be42 <USBD_StdEPReq+0x4c>
 801be28:	2b20      	cmp	r3, #32
 801be2a:	d000      	beq.n	801be2e <USBD_StdEPReq+0x38>
 801be2c:	e18b      	b.n	801c146 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801be2e:	687a      	ldr	r2, [r7, #4]
 801be30:	23ad      	movs	r3, #173	@ 0xad
 801be32:	009b      	lsls	r3, r3, #2
 801be34:	58d3      	ldr	r3, [r2, r3]
 801be36:	689b      	ldr	r3, [r3, #8]
 801be38:	6839      	ldr	r1, [r7, #0]
 801be3a:	687a      	ldr	r2, [r7, #4]
 801be3c:	0010      	movs	r0, r2
 801be3e:	4798      	blx	r3
      break;
 801be40:	e188      	b.n	801c154 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801be42:	683b      	ldr	r3, [r7, #0]
 801be44:	781b      	ldrb	r3, [r3, #0]
 801be46:	001a      	movs	r2, r3
 801be48:	2360      	movs	r3, #96	@ 0x60
 801be4a:	4013      	ands	r3, r2
 801be4c:	2b20      	cmp	r3, #32
 801be4e:	d10f      	bne.n	801be70 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801be50:	687a      	ldr	r2, [r7, #4]
 801be52:	23ad      	movs	r3, #173	@ 0xad
 801be54:	009b      	lsls	r3, r3, #2
 801be56:	58d3      	ldr	r3, [r2, r3]
 801be58:	689b      	ldr	r3, [r3, #8]
 801be5a:	250f      	movs	r5, #15
 801be5c:	197c      	adds	r4, r7, r5
 801be5e:	6839      	ldr	r1, [r7, #0]
 801be60:	687a      	ldr	r2, [r7, #4]
 801be62:	0010      	movs	r0, r2
 801be64:	4798      	blx	r3
 801be66:	0003      	movs	r3, r0
 801be68:	7023      	strb	r3, [r4, #0]

        return ret;
 801be6a:	197b      	adds	r3, r7, r5
 801be6c:	781b      	ldrb	r3, [r3, #0]
 801be6e:	e174      	b.n	801c15a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801be70:	683b      	ldr	r3, [r7, #0]
 801be72:	785b      	ldrb	r3, [r3, #1]
 801be74:	2b03      	cmp	r3, #3
 801be76:	d007      	beq.n	801be88 <USBD_StdEPReq+0x92>
 801be78:	dd00      	ble.n	801be7c <USBD_StdEPReq+0x86>
 801be7a:	e15c      	b.n	801c136 <USBD_StdEPReq+0x340>
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d100      	bne.n	801be82 <USBD_StdEPReq+0x8c>
 801be80:	e092      	b.n	801bfa8 <USBD_StdEPReq+0x1b2>
 801be82:	2b01      	cmp	r3, #1
 801be84:	d04b      	beq.n	801bf1e <USBD_StdEPReq+0x128>
 801be86:	e156      	b.n	801c136 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801be88:	687a      	ldr	r2, [r7, #4]
 801be8a:	23a7      	movs	r3, #167	@ 0xa7
 801be8c:	009b      	lsls	r3, r3, #2
 801be8e:	5cd3      	ldrb	r3, [r2, r3]
 801be90:	2b02      	cmp	r3, #2
 801be92:	d002      	beq.n	801be9a <USBD_StdEPReq+0xa4>
 801be94:	2b03      	cmp	r3, #3
 801be96:	d01d      	beq.n	801bed4 <USBD_StdEPReq+0xde>
 801be98:	e039      	b.n	801bf0e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801be9a:	220e      	movs	r2, #14
 801be9c:	18bb      	adds	r3, r7, r2
 801be9e:	781b      	ldrb	r3, [r3, #0]
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d010      	beq.n	801bec6 <USBD_StdEPReq+0xd0>
 801bea4:	18bb      	adds	r3, r7, r2
 801bea6:	781b      	ldrb	r3, [r3, #0]
 801bea8:	2b80      	cmp	r3, #128	@ 0x80
 801beaa:	d00c      	beq.n	801bec6 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801beac:	18bb      	adds	r3, r7, r2
 801beae:	781a      	ldrb	r2, [r3, #0]
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	0011      	movs	r1, r2
 801beb4:	0018      	movs	r0, r3
 801beb6:	f001 fa10 	bl	801d2da <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	2180      	movs	r1, #128	@ 0x80
 801bebe:	0018      	movs	r0, r3
 801bec0:	f001 fa0b 	bl	801d2da <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801bec4:	e02a      	b.n	801bf1c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801bec6:	683a      	ldr	r2, [r7, #0]
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	0011      	movs	r1, r2
 801becc:	0018      	movs	r0, r3
 801bece:	f000 fcdc 	bl	801c88a <USBD_CtlError>
              break;
 801bed2:	e023      	b.n	801bf1c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801bed4:	683b      	ldr	r3, [r7, #0]
 801bed6:	885b      	ldrh	r3, [r3, #2]
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d113      	bne.n	801bf04 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801bedc:	220e      	movs	r2, #14
 801bede:	18bb      	adds	r3, r7, r2
 801bee0:	781b      	ldrb	r3, [r3, #0]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d00e      	beq.n	801bf04 <USBD_StdEPReq+0x10e>
 801bee6:	18bb      	adds	r3, r7, r2
 801bee8:	781b      	ldrb	r3, [r3, #0]
 801beea:	2b80      	cmp	r3, #128	@ 0x80
 801beec:	d00a      	beq.n	801bf04 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801beee:	683b      	ldr	r3, [r7, #0]
 801bef0:	88db      	ldrh	r3, [r3, #6]
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d106      	bne.n	801bf04 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801bef6:	18bb      	adds	r3, r7, r2
 801bef8:	781a      	ldrb	r2, [r3, #0]
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	0011      	movs	r1, r2
 801befe:	0018      	movs	r0, r3
 801bf00:	f001 f9eb 	bl	801d2da <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	0018      	movs	r0, r3
 801bf08:	f000 fda7 	bl	801ca5a <USBD_CtlSendStatus>

              break;
 801bf0c:	e006      	b.n	801bf1c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801bf0e:	683a      	ldr	r2, [r7, #0]
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	0011      	movs	r1, r2
 801bf14:	0018      	movs	r0, r3
 801bf16:	f000 fcb8 	bl	801c88a <USBD_CtlError>
              break;
 801bf1a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801bf1c:	e112      	b.n	801c144 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801bf1e:	687a      	ldr	r2, [r7, #4]
 801bf20:	23a7      	movs	r3, #167	@ 0xa7
 801bf22:	009b      	lsls	r3, r3, #2
 801bf24:	5cd3      	ldrb	r3, [r2, r3]
 801bf26:	2b02      	cmp	r3, #2
 801bf28:	d002      	beq.n	801bf30 <USBD_StdEPReq+0x13a>
 801bf2a:	2b03      	cmp	r3, #3
 801bf2c:	d01d      	beq.n	801bf6a <USBD_StdEPReq+0x174>
 801bf2e:	e032      	b.n	801bf96 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801bf30:	220e      	movs	r2, #14
 801bf32:	18bb      	adds	r3, r7, r2
 801bf34:	781b      	ldrb	r3, [r3, #0]
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d010      	beq.n	801bf5c <USBD_StdEPReq+0x166>
 801bf3a:	18bb      	adds	r3, r7, r2
 801bf3c:	781b      	ldrb	r3, [r3, #0]
 801bf3e:	2b80      	cmp	r3, #128	@ 0x80
 801bf40:	d00c      	beq.n	801bf5c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801bf42:	18bb      	adds	r3, r7, r2
 801bf44:	781a      	ldrb	r2, [r3, #0]
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	0011      	movs	r1, r2
 801bf4a:	0018      	movs	r0, r3
 801bf4c:	f001 f9c5 	bl	801d2da <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	2180      	movs	r1, #128	@ 0x80
 801bf54:	0018      	movs	r0, r3
 801bf56:	f001 f9c0 	bl	801d2da <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801bf5a:	e024      	b.n	801bfa6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801bf5c:	683a      	ldr	r2, [r7, #0]
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	0011      	movs	r1, r2
 801bf62:	0018      	movs	r0, r3
 801bf64:	f000 fc91 	bl	801c88a <USBD_CtlError>
              break;
 801bf68:	e01d      	b.n	801bfa6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801bf6a:	683b      	ldr	r3, [r7, #0]
 801bf6c:	885b      	ldrh	r3, [r3, #2]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d118      	bne.n	801bfa4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801bf72:	210e      	movs	r1, #14
 801bf74:	187b      	adds	r3, r7, r1
 801bf76:	781b      	ldrb	r3, [r3, #0]
 801bf78:	227f      	movs	r2, #127	@ 0x7f
 801bf7a:	4013      	ands	r3, r2
 801bf7c:	d006      	beq.n	801bf8c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801bf7e:	187b      	adds	r3, r7, r1
 801bf80:	781a      	ldrb	r2, [r3, #0]
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	0011      	movs	r1, r2
 801bf86:	0018      	movs	r0, r3
 801bf88:	f001 f9d2 	bl	801d330 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	0018      	movs	r0, r3
 801bf90:	f000 fd63 	bl	801ca5a <USBD_CtlSendStatus>
              }
              break;
 801bf94:	e006      	b.n	801bfa4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801bf96:	683a      	ldr	r2, [r7, #0]
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	0011      	movs	r1, r2
 801bf9c:	0018      	movs	r0, r3
 801bf9e:	f000 fc74 	bl	801c88a <USBD_CtlError>
              break;
 801bfa2:	e000      	b.n	801bfa6 <USBD_StdEPReq+0x1b0>
              break;
 801bfa4:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801bfa6:	e0cd      	b.n	801c144 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801bfa8:	687a      	ldr	r2, [r7, #4]
 801bfaa:	23a7      	movs	r3, #167	@ 0xa7
 801bfac:	009b      	lsls	r3, r3, #2
 801bfae:	5cd3      	ldrb	r3, [r2, r3]
 801bfb0:	2b02      	cmp	r3, #2
 801bfb2:	d002      	beq.n	801bfba <USBD_StdEPReq+0x1c4>
 801bfb4:	2b03      	cmp	r3, #3
 801bfb6:	d03c      	beq.n	801c032 <USBD_StdEPReq+0x23c>
 801bfb8:	e0b5      	b.n	801c126 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801bfba:	220e      	movs	r2, #14
 801bfbc:	18bb      	adds	r3, r7, r2
 801bfbe:	781b      	ldrb	r3, [r3, #0]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d00a      	beq.n	801bfda <USBD_StdEPReq+0x1e4>
 801bfc4:	18bb      	adds	r3, r7, r2
 801bfc6:	781b      	ldrb	r3, [r3, #0]
 801bfc8:	2b80      	cmp	r3, #128	@ 0x80
 801bfca:	d006      	beq.n	801bfda <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801bfcc:	683a      	ldr	r2, [r7, #0]
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	0011      	movs	r1, r2
 801bfd2:	0018      	movs	r0, r3
 801bfd4:	f000 fc59 	bl	801c88a <USBD_CtlError>
                break;
 801bfd8:	e0ac      	b.n	801c134 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801bfda:	220e      	movs	r2, #14
 801bfdc:	18bb      	adds	r3, r7, r2
 801bfde:	781b      	ldrb	r3, [r3, #0]
 801bfe0:	b25b      	sxtb	r3, r3
 801bfe2:	2b00      	cmp	r3, #0
 801bfe4:	da0c      	bge.n	801c000 <USBD_StdEPReq+0x20a>
 801bfe6:	18bb      	adds	r3, r7, r2
 801bfe8:	781b      	ldrb	r3, [r3, #0]
 801bfea:	227f      	movs	r2, #127	@ 0x7f
 801bfec:	401a      	ands	r2, r3
 801bfee:	0013      	movs	r3, r2
 801bff0:	009b      	lsls	r3, r3, #2
 801bff2:	189b      	adds	r3, r3, r2
 801bff4:	009b      	lsls	r3, r3, #2
 801bff6:	3310      	adds	r3, #16
 801bff8:	687a      	ldr	r2, [r7, #4]
 801bffa:	18d3      	adds	r3, r2, r3
 801bffc:	3304      	adds	r3, #4
 801bffe:	e00d      	b.n	801c01c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c000:	230e      	movs	r3, #14
 801c002:	18fb      	adds	r3, r7, r3
 801c004:	781b      	ldrb	r3, [r3, #0]
 801c006:	227f      	movs	r2, #127	@ 0x7f
 801c008:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c00a:	0013      	movs	r3, r2
 801c00c:	009b      	lsls	r3, r3, #2
 801c00e:	189b      	adds	r3, r3, r2
 801c010:	009b      	lsls	r3, r3, #2
 801c012:	3351      	adds	r3, #81	@ 0x51
 801c014:	33ff      	adds	r3, #255	@ 0xff
 801c016:	687a      	ldr	r2, [r7, #4]
 801c018:	18d3      	adds	r3, r2, r3
 801c01a:	3304      	adds	r3, #4
 801c01c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c01e:	68bb      	ldr	r3, [r7, #8]
 801c020:	2200      	movs	r2, #0
 801c022:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c024:	68b9      	ldr	r1, [r7, #8]
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	2202      	movs	r2, #2
 801c02a:	0018      	movs	r0, r3
 801c02c:	f000 fcab 	bl	801c986 <USBD_CtlSendData>
              break;
 801c030:	e080      	b.n	801c134 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c032:	220e      	movs	r2, #14
 801c034:	18bb      	adds	r3, r7, r2
 801c036:	781b      	ldrb	r3, [r3, #0]
 801c038:	b25b      	sxtb	r3, r3
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	da14      	bge.n	801c068 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c03e:	18bb      	adds	r3, r7, r2
 801c040:	781b      	ldrb	r3, [r3, #0]
 801c042:	220f      	movs	r2, #15
 801c044:	401a      	ands	r2, r3
 801c046:	6879      	ldr	r1, [r7, #4]
 801c048:	0013      	movs	r3, r2
 801c04a:	009b      	lsls	r3, r3, #2
 801c04c:	189b      	adds	r3, r3, r2
 801c04e:	009b      	lsls	r3, r3, #2
 801c050:	18cb      	adds	r3, r1, r3
 801c052:	3318      	adds	r3, #24
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d11e      	bne.n	801c098 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c05a:	683a      	ldr	r2, [r7, #0]
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	0011      	movs	r1, r2
 801c060:	0018      	movs	r0, r3
 801c062:	f000 fc12 	bl	801c88a <USBD_CtlError>
                  break;
 801c066:	e065      	b.n	801c134 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c068:	230e      	movs	r3, #14
 801c06a:	18fb      	adds	r3, r7, r3
 801c06c:	781b      	ldrb	r3, [r3, #0]
 801c06e:	220f      	movs	r2, #15
 801c070:	401a      	ands	r2, r3
 801c072:	6878      	ldr	r0, [r7, #4]
 801c074:	23ac      	movs	r3, #172	@ 0xac
 801c076:	0059      	lsls	r1, r3, #1
 801c078:	0013      	movs	r3, r2
 801c07a:	009b      	lsls	r3, r3, #2
 801c07c:	189b      	adds	r3, r3, r2
 801c07e:	009b      	lsls	r3, r3, #2
 801c080:	18c3      	adds	r3, r0, r3
 801c082:	185b      	adds	r3, r3, r1
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	2b00      	cmp	r3, #0
 801c088:	d106      	bne.n	801c098 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c08a:	683a      	ldr	r2, [r7, #0]
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	0011      	movs	r1, r2
 801c090:	0018      	movs	r0, r3
 801c092:	f000 fbfa 	bl	801c88a <USBD_CtlError>
                  break;
 801c096:	e04d      	b.n	801c134 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c098:	220e      	movs	r2, #14
 801c09a:	18bb      	adds	r3, r7, r2
 801c09c:	781b      	ldrb	r3, [r3, #0]
 801c09e:	b25b      	sxtb	r3, r3
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	da0c      	bge.n	801c0be <USBD_StdEPReq+0x2c8>
 801c0a4:	18bb      	adds	r3, r7, r2
 801c0a6:	781b      	ldrb	r3, [r3, #0]
 801c0a8:	227f      	movs	r2, #127	@ 0x7f
 801c0aa:	401a      	ands	r2, r3
 801c0ac:	0013      	movs	r3, r2
 801c0ae:	009b      	lsls	r3, r3, #2
 801c0b0:	189b      	adds	r3, r3, r2
 801c0b2:	009b      	lsls	r3, r3, #2
 801c0b4:	3310      	adds	r3, #16
 801c0b6:	687a      	ldr	r2, [r7, #4]
 801c0b8:	18d3      	adds	r3, r2, r3
 801c0ba:	3304      	adds	r3, #4
 801c0bc:	e00d      	b.n	801c0da <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c0be:	230e      	movs	r3, #14
 801c0c0:	18fb      	adds	r3, r7, r3
 801c0c2:	781b      	ldrb	r3, [r3, #0]
 801c0c4:	227f      	movs	r2, #127	@ 0x7f
 801c0c6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c0c8:	0013      	movs	r3, r2
 801c0ca:	009b      	lsls	r3, r3, #2
 801c0cc:	189b      	adds	r3, r3, r2
 801c0ce:	009b      	lsls	r3, r3, #2
 801c0d0:	3351      	adds	r3, #81	@ 0x51
 801c0d2:	33ff      	adds	r3, #255	@ 0xff
 801c0d4:	687a      	ldr	r2, [r7, #4]
 801c0d6:	18d3      	adds	r3, r2, r3
 801c0d8:	3304      	adds	r3, #4
 801c0da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c0dc:	220e      	movs	r2, #14
 801c0de:	18bb      	adds	r3, r7, r2
 801c0e0:	781b      	ldrb	r3, [r3, #0]
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d003      	beq.n	801c0ee <USBD_StdEPReq+0x2f8>
 801c0e6:	18bb      	adds	r3, r7, r2
 801c0e8:	781b      	ldrb	r3, [r3, #0]
 801c0ea:	2b80      	cmp	r3, #128	@ 0x80
 801c0ec:	d103      	bne.n	801c0f6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c0ee:	68bb      	ldr	r3, [r7, #8]
 801c0f0:	2200      	movs	r2, #0
 801c0f2:	601a      	str	r2, [r3, #0]
 801c0f4:	e010      	b.n	801c118 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c0f6:	230e      	movs	r3, #14
 801c0f8:	18fb      	adds	r3, r7, r3
 801c0fa:	781a      	ldrb	r2, [r3, #0]
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	0011      	movs	r1, r2
 801c100:	0018      	movs	r0, r3
 801c102:	f001 f940 	bl	801d386 <USBD_LL_IsStallEP>
 801c106:	1e03      	subs	r3, r0, #0
 801c108:	d003      	beq.n	801c112 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c10a:	68bb      	ldr	r3, [r7, #8]
 801c10c:	2201      	movs	r2, #1
 801c10e:	601a      	str	r2, [r3, #0]
 801c110:	e002      	b.n	801c118 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c112:	68bb      	ldr	r3, [r7, #8]
 801c114:	2200      	movs	r2, #0
 801c116:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c118:	68b9      	ldr	r1, [r7, #8]
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	2202      	movs	r2, #2
 801c11e:	0018      	movs	r0, r3
 801c120:	f000 fc31 	bl	801c986 <USBD_CtlSendData>
              break;
 801c124:	e006      	b.n	801c134 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c126:	683a      	ldr	r2, [r7, #0]
 801c128:	687b      	ldr	r3, [r7, #4]
 801c12a:	0011      	movs	r1, r2
 801c12c:	0018      	movs	r0, r3
 801c12e:	f000 fbac 	bl	801c88a <USBD_CtlError>
              break;
 801c132:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c134:	e006      	b.n	801c144 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c136:	683a      	ldr	r2, [r7, #0]
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	0011      	movs	r1, r2
 801c13c:	0018      	movs	r0, r3
 801c13e:	f000 fba4 	bl	801c88a <USBD_CtlError>
          break;
 801c142:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c144:	e006      	b.n	801c154 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c146:	683a      	ldr	r2, [r7, #0]
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	0011      	movs	r1, r2
 801c14c:	0018      	movs	r0, r3
 801c14e:	f000 fb9c 	bl	801c88a <USBD_CtlError>
      break;
 801c152:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c154:	230f      	movs	r3, #15
 801c156:	18fb      	adds	r3, r7, r3
 801c158:	781b      	ldrb	r3, [r3, #0]
}
 801c15a:	0018      	movs	r0, r3
 801c15c:	46bd      	mov	sp, r7
 801c15e:	b004      	add	sp, #16
 801c160:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c164 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c164:	b580      	push	{r7, lr}
 801c166:	b084      	sub	sp, #16
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
 801c16c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c16e:	2308      	movs	r3, #8
 801c170:	18fb      	adds	r3, r7, r3
 801c172:	2200      	movs	r2, #0
 801c174:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c176:	2300      	movs	r3, #0
 801c178:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c17a:	230b      	movs	r3, #11
 801c17c:	18fb      	adds	r3, r7, r3
 801c17e:	2200      	movs	r2, #0
 801c180:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c182:	683b      	ldr	r3, [r7, #0]
 801c184:	885b      	ldrh	r3, [r3, #2]
 801c186:	0a1b      	lsrs	r3, r3, #8
 801c188:	b29b      	uxth	r3, r3
 801c18a:	2b07      	cmp	r3, #7
 801c18c:	d900      	bls.n	801c190 <USBD_GetDescriptor+0x2c>
 801c18e:	e159      	b.n	801c444 <USBD_GetDescriptor+0x2e0>
 801c190:	009a      	lsls	r2, r3, #2
 801c192:	4bcb      	ldr	r3, [pc, #812]	@ (801c4c0 <USBD_GetDescriptor+0x35c>)
 801c194:	18d3      	adds	r3, r2, r3
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c19a:	687a      	ldr	r2, [r7, #4]
 801c19c:	23ac      	movs	r3, #172	@ 0xac
 801c19e:	009b      	lsls	r3, r3, #2
 801c1a0:	58d3      	ldr	r3, [r2, r3]
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	687a      	ldr	r2, [r7, #4]
 801c1a6:	7c12      	ldrb	r2, [r2, #16]
 801c1a8:	2108      	movs	r1, #8
 801c1aa:	1879      	adds	r1, r7, r1
 801c1ac:	0010      	movs	r0, r2
 801c1ae:	4798      	blx	r3
 801c1b0:	0003      	movs	r3, r0
 801c1b2:	60fb      	str	r3, [r7, #12]
      break;
 801c1b4:	e153      	b.n	801c45e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	7c1b      	ldrb	r3, [r3, #16]
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	d10f      	bne.n	801c1de <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c1be:	687a      	ldr	r2, [r7, #4]
 801c1c0:	23ad      	movs	r3, #173	@ 0xad
 801c1c2:	009b      	lsls	r3, r3, #2
 801c1c4:	58d3      	ldr	r3, [r2, r3]
 801c1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1c8:	2208      	movs	r2, #8
 801c1ca:	18ba      	adds	r2, r7, r2
 801c1cc:	0010      	movs	r0, r2
 801c1ce:	4798      	blx	r3
 801c1d0:	0003      	movs	r3, r0
 801c1d2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	3301      	adds	r3, #1
 801c1d8:	2202      	movs	r2, #2
 801c1da:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c1dc:	e13f      	b.n	801c45e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c1de:	687a      	ldr	r2, [r7, #4]
 801c1e0:	23ad      	movs	r3, #173	@ 0xad
 801c1e2:	009b      	lsls	r3, r3, #2
 801c1e4:	58d3      	ldr	r3, [r2, r3]
 801c1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1e8:	2208      	movs	r2, #8
 801c1ea:	18ba      	adds	r2, r7, r2
 801c1ec:	0010      	movs	r0, r2
 801c1ee:	4798      	blx	r3
 801c1f0:	0003      	movs	r3, r0
 801c1f2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c1f4:	68fb      	ldr	r3, [r7, #12]
 801c1f6:	3301      	adds	r3, #1
 801c1f8:	2202      	movs	r2, #2
 801c1fa:	701a      	strb	r2, [r3, #0]
      break;
 801c1fc:	e12f      	b.n	801c45e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c1fe:	683b      	ldr	r3, [r7, #0]
 801c200:	885b      	ldrh	r3, [r3, #2]
 801c202:	b2db      	uxtb	r3, r3
 801c204:	2b05      	cmp	r3, #5
 801c206:	d900      	bls.n	801c20a <USBD_GetDescriptor+0xa6>
 801c208:	e0d0      	b.n	801c3ac <USBD_GetDescriptor+0x248>
 801c20a:	009a      	lsls	r2, r3, #2
 801c20c:	4bad      	ldr	r3, [pc, #692]	@ (801c4c4 <USBD_GetDescriptor+0x360>)
 801c20e:	18d3      	adds	r3, r2, r3
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c214:	687a      	ldr	r2, [r7, #4]
 801c216:	23ac      	movs	r3, #172	@ 0xac
 801c218:	009b      	lsls	r3, r3, #2
 801c21a:	58d3      	ldr	r3, [r2, r3]
 801c21c:	685b      	ldr	r3, [r3, #4]
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d00d      	beq.n	801c23e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c222:	687a      	ldr	r2, [r7, #4]
 801c224:	23ac      	movs	r3, #172	@ 0xac
 801c226:	009b      	lsls	r3, r3, #2
 801c228:	58d3      	ldr	r3, [r2, r3]
 801c22a:	685b      	ldr	r3, [r3, #4]
 801c22c:	687a      	ldr	r2, [r7, #4]
 801c22e:	7c12      	ldrb	r2, [r2, #16]
 801c230:	2108      	movs	r1, #8
 801c232:	1879      	adds	r1, r7, r1
 801c234:	0010      	movs	r0, r2
 801c236:	4798      	blx	r3
 801c238:	0003      	movs	r3, r0
 801c23a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c23c:	e0c3      	b.n	801c3c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c23e:	683a      	ldr	r2, [r7, #0]
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	0011      	movs	r1, r2
 801c244:	0018      	movs	r0, r3
 801c246:	f000 fb20 	bl	801c88a <USBD_CtlError>
            err++;
 801c24a:	210b      	movs	r1, #11
 801c24c:	187b      	adds	r3, r7, r1
 801c24e:	781a      	ldrb	r2, [r3, #0]
 801c250:	187b      	adds	r3, r7, r1
 801c252:	3201      	adds	r2, #1
 801c254:	701a      	strb	r2, [r3, #0]
          break;
 801c256:	e0b6      	b.n	801c3c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c258:	687a      	ldr	r2, [r7, #4]
 801c25a:	23ac      	movs	r3, #172	@ 0xac
 801c25c:	009b      	lsls	r3, r3, #2
 801c25e:	58d3      	ldr	r3, [r2, r3]
 801c260:	689b      	ldr	r3, [r3, #8]
 801c262:	2b00      	cmp	r3, #0
 801c264:	d00d      	beq.n	801c282 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c266:	687a      	ldr	r2, [r7, #4]
 801c268:	23ac      	movs	r3, #172	@ 0xac
 801c26a:	009b      	lsls	r3, r3, #2
 801c26c:	58d3      	ldr	r3, [r2, r3]
 801c26e:	689b      	ldr	r3, [r3, #8]
 801c270:	687a      	ldr	r2, [r7, #4]
 801c272:	7c12      	ldrb	r2, [r2, #16]
 801c274:	2108      	movs	r1, #8
 801c276:	1879      	adds	r1, r7, r1
 801c278:	0010      	movs	r0, r2
 801c27a:	4798      	blx	r3
 801c27c:	0003      	movs	r3, r0
 801c27e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c280:	e0a1      	b.n	801c3c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c282:	683a      	ldr	r2, [r7, #0]
 801c284:	687b      	ldr	r3, [r7, #4]
 801c286:	0011      	movs	r1, r2
 801c288:	0018      	movs	r0, r3
 801c28a:	f000 fafe 	bl	801c88a <USBD_CtlError>
            err++;
 801c28e:	210b      	movs	r1, #11
 801c290:	187b      	adds	r3, r7, r1
 801c292:	781a      	ldrb	r2, [r3, #0]
 801c294:	187b      	adds	r3, r7, r1
 801c296:	3201      	adds	r2, #1
 801c298:	701a      	strb	r2, [r3, #0]
          break;
 801c29a:	e094      	b.n	801c3c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c29c:	687a      	ldr	r2, [r7, #4]
 801c29e:	23ac      	movs	r3, #172	@ 0xac
 801c2a0:	009b      	lsls	r3, r3, #2
 801c2a2:	58d3      	ldr	r3, [r2, r3]
 801c2a4:	68db      	ldr	r3, [r3, #12]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d00d      	beq.n	801c2c6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c2aa:	687a      	ldr	r2, [r7, #4]
 801c2ac:	23ac      	movs	r3, #172	@ 0xac
 801c2ae:	009b      	lsls	r3, r3, #2
 801c2b0:	58d3      	ldr	r3, [r2, r3]
 801c2b2:	68db      	ldr	r3, [r3, #12]
 801c2b4:	687a      	ldr	r2, [r7, #4]
 801c2b6:	7c12      	ldrb	r2, [r2, #16]
 801c2b8:	2108      	movs	r1, #8
 801c2ba:	1879      	adds	r1, r7, r1
 801c2bc:	0010      	movs	r0, r2
 801c2be:	4798      	blx	r3
 801c2c0:	0003      	movs	r3, r0
 801c2c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c2c4:	e07f      	b.n	801c3c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c2c6:	683a      	ldr	r2, [r7, #0]
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	0011      	movs	r1, r2
 801c2cc:	0018      	movs	r0, r3
 801c2ce:	f000 fadc 	bl	801c88a <USBD_CtlError>
            err++;
 801c2d2:	210b      	movs	r1, #11
 801c2d4:	187b      	adds	r3, r7, r1
 801c2d6:	781a      	ldrb	r2, [r3, #0]
 801c2d8:	187b      	adds	r3, r7, r1
 801c2da:	3201      	adds	r2, #1
 801c2dc:	701a      	strb	r2, [r3, #0]
          break;
 801c2de:	e072      	b.n	801c3c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c2e0:	687a      	ldr	r2, [r7, #4]
 801c2e2:	23ac      	movs	r3, #172	@ 0xac
 801c2e4:	009b      	lsls	r3, r3, #2
 801c2e6:	58d3      	ldr	r3, [r2, r3]
 801c2e8:	691b      	ldr	r3, [r3, #16]
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d00d      	beq.n	801c30a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c2ee:	687a      	ldr	r2, [r7, #4]
 801c2f0:	23ac      	movs	r3, #172	@ 0xac
 801c2f2:	009b      	lsls	r3, r3, #2
 801c2f4:	58d3      	ldr	r3, [r2, r3]
 801c2f6:	691b      	ldr	r3, [r3, #16]
 801c2f8:	687a      	ldr	r2, [r7, #4]
 801c2fa:	7c12      	ldrb	r2, [r2, #16]
 801c2fc:	2108      	movs	r1, #8
 801c2fe:	1879      	adds	r1, r7, r1
 801c300:	0010      	movs	r0, r2
 801c302:	4798      	blx	r3
 801c304:	0003      	movs	r3, r0
 801c306:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c308:	e05d      	b.n	801c3c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c30a:	683a      	ldr	r2, [r7, #0]
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	0011      	movs	r1, r2
 801c310:	0018      	movs	r0, r3
 801c312:	f000 faba 	bl	801c88a <USBD_CtlError>
            err++;
 801c316:	210b      	movs	r1, #11
 801c318:	187b      	adds	r3, r7, r1
 801c31a:	781a      	ldrb	r2, [r3, #0]
 801c31c:	187b      	adds	r3, r7, r1
 801c31e:	3201      	adds	r2, #1
 801c320:	701a      	strb	r2, [r3, #0]
          break;
 801c322:	e050      	b.n	801c3c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c324:	687a      	ldr	r2, [r7, #4]
 801c326:	23ac      	movs	r3, #172	@ 0xac
 801c328:	009b      	lsls	r3, r3, #2
 801c32a:	58d3      	ldr	r3, [r2, r3]
 801c32c:	695b      	ldr	r3, [r3, #20]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d00d      	beq.n	801c34e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c332:	687a      	ldr	r2, [r7, #4]
 801c334:	23ac      	movs	r3, #172	@ 0xac
 801c336:	009b      	lsls	r3, r3, #2
 801c338:	58d3      	ldr	r3, [r2, r3]
 801c33a:	695b      	ldr	r3, [r3, #20]
 801c33c:	687a      	ldr	r2, [r7, #4]
 801c33e:	7c12      	ldrb	r2, [r2, #16]
 801c340:	2108      	movs	r1, #8
 801c342:	1879      	adds	r1, r7, r1
 801c344:	0010      	movs	r0, r2
 801c346:	4798      	blx	r3
 801c348:	0003      	movs	r3, r0
 801c34a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c34c:	e03b      	b.n	801c3c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c34e:	683a      	ldr	r2, [r7, #0]
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	0011      	movs	r1, r2
 801c354:	0018      	movs	r0, r3
 801c356:	f000 fa98 	bl	801c88a <USBD_CtlError>
            err++;
 801c35a:	210b      	movs	r1, #11
 801c35c:	187b      	adds	r3, r7, r1
 801c35e:	781a      	ldrb	r2, [r3, #0]
 801c360:	187b      	adds	r3, r7, r1
 801c362:	3201      	adds	r2, #1
 801c364:	701a      	strb	r2, [r3, #0]
          break;
 801c366:	e02e      	b.n	801c3c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c368:	687a      	ldr	r2, [r7, #4]
 801c36a:	23ac      	movs	r3, #172	@ 0xac
 801c36c:	009b      	lsls	r3, r3, #2
 801c36e:	58d3      	ldr	r3, [r2, r3]
 801c370:	699b      	ldr	r3, [r3, #24]
 801c372:	2b00      	cmp	r3, #0
 801c374:	d00d      	beq.n	801c392 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c376:	687a      	ldr	r2, [r7, #4]
 801c378:	23ac      	movs	r3, #172	@ 0xac
 801c37a:	009b      	lsls	r3, r3, #2
 801c37c:	58d3      	ldr	r3, [r2, r3]
 801c37e:	699b      	ldr	r3, [r3, #24]
 801c380:	687a      	ldr	r2, [r7, #4]
 801c382:	7c12      	ldrb	r2, [r2, #16]
 801c384:	2108      	movs	r1, #8
 801c386:	1879      	adds	r1, r7, r1
 801c388:	0010      	movs	r0, r2
 801c38a:	4798      	blx	r3
 801c38c:	0003      	movs	r3, r0
 801c38e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c390:	e019      	b.n	801c3c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c392:	683a      	ldr	r2, [r7, #0]
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	0011      	movs	r1, r2
 801c398:	0018      	movs	r0, r3
 801c39a:	f000 fa76 	bl	801c88a <USBD_CtlError>
            err++;
 801c39e:	210b      	movs	r1, #11
 801c3a0:	187b      	adds	r3, r7, r1
 801c3a2:	781a      	ldrb	r2, [r3, #0]
 801c3a4:	187b      	adds	r3, r7, r1
 801c3a6:	3201      	adds	r2, #1
 801c3a8:	701a      	strb	r2, [r3, #0]
          break;
 801c3aa:	e00c      	b.n	801c3c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801c3ac:	683a      	ldr	r2, [r7, #0]
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	0011      	movs	r1, r2
 801c3b2:	0018      	movs	r0, r3
 801c3b4:	f000 fa69 	bl	801c88a <USBD_CtlError>
          err++;
 801c3b8:	210b      	movs	r1, #11
 801c3ba:	187b      	adds	r3, r7, r1
 801c3bc:	781a      	ldrb	r2, [r3, #0]
 801c3be:	187b      	adds	r3, r7, r1
 801c3c0:	3201      	adds	r2, #1
 801c3c2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801c3c4:	e04b      	b.n	801c45e <USBD_GetDescriptor+0x2fa>
 801c3c6:	e04a      	b.n	801c45e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	7c1b      	ldrb	r3, [r3, #16]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d10b      	bne.n	801c3e8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c3d0:	687a      	ldr	r2, [r7, #4]
 801c3d2:	23ad      	movs	r3, #173	@ 0xad
 801c3d4:	009b      	lsls	r3, r3, #2
 801c3d6:	58d3      	ldr	r3, [r2, r3]
 801c3d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c3da:	2208      	movs	r2, #8
 801c3dc:	18ba      	adds	r2, r7, r2
 801c3de:	0010      	movs	r0, r2
 801c3e0:	4798      	blx	r3
 801c3e2:	0003      	movs	r3, r0
 801c3e4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c3e6:	e03a      	b.n	801c45e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c3e8:	683a      	ldr	r2, [r7, #0]
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	0011      	movs	r1, r2
 801c3ee:	0018      	movs	r0, r3
 801c3f0:	f000 fa4b 	bl	801c88a <USBD_CtlError>
        err++;
 801c3f4:	210b      	movs	r1, #11
 801c3f6:	187b      	adds	r3, r7, r1
 801c3f8:	781a      	ldrb	r2, [r3, #0]
 801c3fa:	187b      	adds	r3, r7, r1
 801c3fc:	3201      	adds	r2, #1
 801c3fe:	701a      	strb	r2, [r3, #0]
      break;
 801c400:	e02d      	b.n	801c45e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	7c1b      	ldrb	r3, [r3, #16]
 801c406:	2b00      	cmp	r3, #0
 801c408:	d10f      	bne.n	801c42a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c40a:	687a      	ldr	r2, [r7, #4]
 801c40c:	23ad      	movs	r3, #173	@ 0xad
 801c40e:	009b      	lsls	r3, r3, #2
 801c410:	58d3      	ldr	r3, [r2, r3]
 801c412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c414:	2208      	movs	r2, #8
 801c416:	18ba      	adds	r2, r7, r2
 801c418:	0010      	movs	r0, r2
 801c41a:	4798      	blx	r3
 801c41c:	0003      	movs	r3, r0
 801c41e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	3301      	adds	r3, #1
 801c424:	2207      	movs	r2, #7
 801c426:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c428:	e019      	b.n	801c45e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c42a:	683a      	ldr	r2, [r7, #0]
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	0011      	movs	r1, r2
 801c430:	0018      	movs	r0, r3
 801c432:	f000 fa2a 	bl	801c88a <USBD_CtlError>
        err++;
 801c436:	210b      	movs	r1, #11
 801c438:	187b      	adds	r3, r7, r1
 801c43a:	781a      	ldrb	r2, [r3, #0]
 801c43c:	187b      	adds	r3, r7, r1
 801c43e:	3201      	adds	r2, #1
 801c440:	701a      	strb	r2, [r3, #0]
      break;
 801c442:	e00c      	b.n	801c45e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801c444:	683a      	ldr	r2, [r7, #0]
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	0011      	movs	r1, r2
 801c44a:	0018      	movs	r0, r3
 801c44c:	f000 fa1d 	bl	801c88a <USBD_CtlError>
      err++;
 801c450:	210b      	movs	r1, #11
 801c452:	187b      	adds	r3, r7, r1
 801c454:	781a      	ldrb	r2, [r3, #0]
 801c456:	187b      	adds	r3, r7, r1
 801c458:	3201      	adds	r2, #1
 801c45a:	701a      	strb	r2, [r3, #0]
      break;
 801c45c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801c45e:	230b      	movs	r3, #11
 801c460:	18fb      	adds	r3, r7, r3
 801c462:	781b      	ldrb	r3, [r3, #0]
 801c464:	2b00      	cmp	r3, #0
 801c466:	d127      	bne.n	801c4b8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801c468:	2108      	movs	r1, #8
 801c46a:	187b      	adds	r3, r7, r1
 801c46c:	881b      	ldrh	r3, [r3, #0]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d019      	beq.n	801c4a6 <USBD_GetDescriptor+0x342>
 801c472:	683b      	ldr	r3, [r7, #0]
 801c474:	88db      	ldrh	r3, [r3, #6]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d015      	beq.n	801c4a6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801c47a:	683b      	ldr	r3, [r7, #0]
 801c47c:	88da      	ldrh	r2, [r3, #6]
 801c47e:	187b      	adds	r3, r7, r1
 801c480:	881b      	ldrh	r3, [r3, #0]
 801c482:	1c18      	adds	r0, r3, #0
 801c484:	1c11      	adds	r1, r2, #0
 801c486:	b28a      	uxth	r2, r1
 801c488:	b283      	uxth	r3, r0
 801c48a:	429a      	cmp	r2, r3
 801c48c:	d900      	bls.n	801c490 <USBD_GetDescriptor+0x32c>
 801c48e:	1c01      	adds	r1, r0, #0
 801c490:	b28a      	uxth	r2, r1
 801c492:	2108      	movs	r1, #8
 801c494:	187b      	adds	r3, r7, r1
 801c496:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801c498:	187b      	adds	r3, r7, r1
 801c49a:	881a      	ldrh	r2, [r3, #0]
 801c49c:	68f9      	ldr	r1, [r7, #12]
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	0018      	movs	r0, r3
 801c4a2:	f000 fa70 	bl	801c986 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801c4a6:	683b      	ldr	r3, [r7, #0]
 801c4a8:	88db      	ldrh	r3, [r3, #6]
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d105      	bne.n	801c4ba <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	0018      	movs	r0, r3
 801c4b2:	f000 fad2 	bl	801ca5a <USBD_CtlSendStatus>
 801c4b6:	e000      	b.n	801c4ba <USBD_GetDescriptor+0x356>
    return;
 801c4b8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c4ba:	46bd      	mov	sp, r7
 801c4bc:	b004      	add	sp, #16
 801c4be:	bd80      	pop	{r7, pc}
 801c4c0:	08025590 	.word	0x08025590
 801c4c4:	080255b0 	.word	0x080255b0

0801c4c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c4c8:	b590      	push	{r4, r7, lr}
 801c4ca:	b085      	sub	sp, #20
 801c4cc:	af00      	add	r7, sp, #0
 801c4ce:	6078      	str	r0, [r7, #4]
 801c4d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801c4d2:	683b      	ldr	r3, [r7, #0]
 801c4d4:	889b      	ldrh	r3, [r3, #4]
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d13d      	bne.n	801c556 <USBD_SetAddress+0x8e>
 801c4da:	683b      	ldr	r3, [r7, #0]
 801c4dc:	88db      	ldrh	r3, [r3, #6]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d139      	bne.n	801c556 <USBD_SetAddress+0x8e>
 801c4e2:	683b      	ldr	r3, [r7, #0]
 801c4e4:	885b      	ldrh	r3, [r3, #2]
 801c4e6:	2b7f      	cmp	r3, #127	@ 0x7f
 801c4e8:	d835      	bhi.n	801c556 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801c4ea:	683b      	ldr	r3, [r7, #0]
 801c4ec:	885b      	ldrh	r3, [r3, #2]
 801c4ee:	b2da      	uxtb	r2, r3
 801c4f0:	230f      	movs	r3, #15
 801c4f2:	18fb      	adds	r3, r7, r3
 801c4f4:	217f      	movs	r1, #127	@ 0x7f
 801c4f6:	400a      	ands	r2, r1
 801c4f8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c4fa:	687a      	ldr	r2, [r7, #4]
 801c4fc:	23a7      	movs	r3, #167	@ 0xa7
 801c4fe:	009b      	lsls	r3, r3, #2
 801c500:	5cd3      	ldrb	r3, [r2, r3]
 801c502:	2b03      	cmp	r3, #3
 801c504:	d106      	bne.n	801c514 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801c506:	683a      	ldr	r2, [r7, #0]
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	0011      	movs	r1, r2
 801c50c:	0018      	movs	r0, r3
 801c50e:	f000 f9bc 	bl	801c88a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c512:	e027      	b.n	801c564 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	240f      	movs	r4, #15
 801c518:	193a      	adds	r2, r7, r4
 801c51a:	4914      	ldr	r1, [pc, #80]	@ (801c56c <USBD_SetAddress+0xa4>)
 801c51c:	7812      	ldrb	r2, [r2, #0]
 801c51e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801c520:	193b      	adds	r3, r7, r4
 801c522:	781a      	ldrb	r2, [r3, #0]
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	0011      	movs	r1, r2
 801c528:	0018      	movs	r0, r3
 801c52a:	f000 ff5d 	bl	801d3e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	0018      	movs	r0, r3
 801c532:	f000 fa92 	bl	801ca5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801c536:	193b      	adds	r3, r7, r4
 801c538:	781b      	ldrb	r3, [r3, #0]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d005      	beq.n	801c54a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c53e:	687a      	ldr	r2, [r7, #4]
 801c540:	23a7      	movs	r3, #167	@ 0xa7
 801c542:	009b      	lsls	r3, r3, #2
 801c544:	2102      	movs	r1, #2
 801c546:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c548:	e00c      	b.n	801c564 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801c54a:	687a      	ldr	r2, [r7, #4]
 801c54c:	23a7      	movs	r3, #167	@ 0xa7
 801c54e:	009b      	lsls	r3, r3, #2
 801c550:	2101      	movs	r1, #1
 801c552:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c554:	e006      	b.n	801c564 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c556:	683a      	ldr	r2, [r7, #0]
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	0011      	movs	r1, r2
 801c55c:	0018      	movs	r0, r3
 801c55e:	f000 f994 	bl	801c88a <USBD_CtlError>
  }
}
 801c562:	46c0      	nop			@ (mov r8, r8)
 801c564:	46c0      	nop			@ (mov r8, r8)
 801c566:	46bd      	mov	sp, r7
 801c568:	b005      	add	sp, #20
 801c56a:	bd90      	pop	{r4, r7, pc}
 801c56c:	0000029e 	.word	0x0000029e

0801c570 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c570:	b580      	push	{r7, lr}
 801c572:	b082      	sub	sp, #8
 801c574:	af00      	add	r7, sp, #0
 801c576:	6078      	str	r0, [r7, #4]
 801c578:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801c57a:	683b      	ldr	r3, [r7, #0]
 801c57c:	885b      	ldrh	r3, [r3, #2]
 801c57e:	b2da      	uxtb	r2, r3
 801c580:	4b4c      	ldr	r3, [pc, #304]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c582:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801c584:	4b4b      	ldr	r3, [pc, #300]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c586:	781b      	ldrb	r3, [r3, #0]
 801c588:	2b01      	cmp	r3, #1
 801c58a:	d906      	bls.n	801c59a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801c58c:	683a      	ldr	r2, [r7, #0]
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	0011      	movs	r1, r2
 801c592:	0018      	movs	r0, r3
 801c594:	f000 f979 	bl	801c88a <USBD_CtlError>
 801c598:	e088      	b.n	801c6ac <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801c59a:	687a      	ldr	r2, [r7, #4]
 801c59c:	23a7      	movs	r3, #167	@ 0xa7
 801c59e:	009b      	lsls	r3, r3, #2
 801c5a0:	5cd3      	ldrb	r3, [r2, r3]
 801c5a2:	2b02      	cmp	r3, #2
 801c5a4:	d002      	beq.n	801c5ac <USBD_SetConfig+0x3c>
 801c5a6:	2b03      	cmp	r3, #3
 801c5a8:	d029      	beq.n	801c5fe <USBD_SetConfig+0x8e>
 801c5aa:	e071      	b.n	801c690 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801c5ac:	4b41      	ldr	r3, [pc, #260]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c5ae:	781b      	ldrb	r3, [r3, #0]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	d01f      	beq.n	801c5f4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801c5b4:	4b3f      	ldr	r3, [pc, #252]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c5b6:	781b      	ldrb	r3, [r3, #0]
 801c5b8:	001a      	movs	r2, r3
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801c5be:	687a      	ldr	r2, [r7, #4]
 801c5c0:	23a7      	movs	r3, #167	@ 0xa7
 801c5c2:	009b      	lsls	r3, r3, #2
 801c5c4:	2103      	movs	r1, #3
 801c5c6:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c5c8:	4b3a      	ldr	r3, [pc, #232]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c5ca:	781a      	ldrb	r2, [r3, #0]
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	0011      	movs	r1, r2
 801c5d0:	0018      	movs	r0, r3
 801c5d2:	f7ff f8c6 	bl	801b762 <USBD_SetClassConfig>
 801c5d6:	0003      	movs	r3, r0
 801c5d8:	2b02      	cmp	r3, #2
 801c5da:	d106      	bne.n	801c5ea <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801c5dc:	683a      	ldr	r2, [r7, #0]
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	0011      	movs	r1, r2
 801c5e2:	0018      	movs	r0, r3
 801c5e4:	f000 f951 	bl	801c88a <USBD_CtlError>
            return;
 801c5e8:	e060      	b.n	801c6ac <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	0018      	movs	r0, r3
 801c5ee:	f000 fa34 	bl	801ca5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c5f2:	e05b      	b.n	801c6ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	0018      	movs	r0, r3
 801c5f8:	f000 fa2f 	bl	801ca5a <USBD_CtlSendStatus>
        break;
 801c5fc:	e056      	b.n	801c6ac <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801c5fe:	4b2d      	ldr	r3, [pc, #180]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c600:	781b      	ldrb	r3, [r3, #0]
 801c602:	2b00      	cmp	r3, #0
 801c604:	d115      	bne.n	801c632 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c606:	687a      	ldr	r2, [r7, #4]
 801c608:	23a7      	movs	r3, #167	@ 0xa7
 801c60a:	009b      	lsls	r3, r3, #2
 801c60c:	2102      	movs	r1, #2
 801c60e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801c610:	4b28      	ldr	r3, [pc, #160]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c612:	781b      	ldrb	r3, [r3, #0]
 801c614:	001a      	movs	r2, r3
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801c61a:	4b26      	ldr	r3, [pc, #152]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c61c:	781a      	ldrb	r2, [r3, #0]
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	0011      	movs	r1, r2
 801c622:	0018      	movs	r0, r3
 801c624:	f7ff f8c4 	bl	801b7b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	0018      	movs	r0, r3
 801c62c:	f000 fa15 	bl	801ca5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c630:	e03c      	b.n	801c6ac <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801c632:	4b20      	ldr	r3, [pc, #128]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c634:	781b      	ldrb	r3, [r3, #0]
 801c636:	001a      	movs	r2, r3
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	685b      	ldr	r3, [r3, #4]
 801c63c:	429a      	cmp	r2, r3
 801c63e:	d022      	beq.n	801c686 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	685b      	ldr	r3, [r3, #4]
 801c644:	b2da      	uxtb	r2, r3
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	0011      	movs	r1, r2
 801c64a:	0018      	movs	r0, r3
 801c64c:	f7ff f8b0 	bl	801b7b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801c650:	4b18      	ldr	r3, [pc, #96]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c652:	781b      	ldrb	r3, [r3, #0]
 801c654:	001a      	movs	r2, r3
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c65a:	4b16      	ldr	r3, [pc, #88]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c65c:	781a      	ldrb	r2, [r3, #0]
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	0011      	movs	r1, r2
 801c662:	0018      	movs	r0, r3
 801c664:	f7ff f87d 	bl	801b762 <USBD_SetClassConfig>
 801c668:	0003      	movs	r3, r0
 801c66a:	2b02      	cmp	r3, #2
 801c66c:	d106      	bne.n	801c67c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801c66e:	683a      	ldr	r2, [r7, #0]
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	0011      	movs	r1, r2
 801c674:	0018      	movs	r0, r3
 801c676:	f000 f908 	bl	801c88a <USBD_CtlError>
            return;
 801c67a:	e017      	b.n	801c6ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	0018      	movs	r0, r3
 801c680:	f000 f9eb 	bl	801ca5a <USBD_CtlSendStatus>
        break;
 801c684:	e012      	b.n	801c6ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	0018      	movs	r0, r3
 801c68a:	f000 f9e6 	bl	801ca5a <USBD_CtlSendStatus>
        break;
 801c68e:	e00d      	b.n	801c6ac <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801c690:	683a      	ldr	r2, [r7, #0]
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	0011      	movs	r1, r2
 801c696:	0018      	movs	r0, r3
 801c698:	f000 f8f7 	bl	801c88a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801c69c:	4b05      	ldr	r3, [pc, #20]	@ (801c6b4 <USBD_SetConfig+0x144>)
 801c69e:	781a      	ldrb	r2, [r3, #0]
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	0011      	movs	r1, r2
 801c6a4:	0018      	movs	r0, r3
 801c6a6:	f7ff f883 	bl	801b7b0 <USBD_ClrClassConfig>
        break;
 801c6aa:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c6ac:	46bd      	mov	sp, r7
 801c6ae:	b002      	add	sp, #8
 801c6b0:	bd80      	pop	{r7, pc}
 801c6b2:	46c0      	nop			@ (mov r8, r8)
 801c6b4:	200025c4 	.word	0x200025c4

0801c6b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	b082      	sub	sp, #8
 801c6bc:	af00      	add	r7, sp, #0
 801c6be:	6078      	str	r0, [r7, #4]
 801c6c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801c6c2:	683b      	ldr	r3, [r7, #0]
 801c6c4:	88db      	ldrh	r3, [r3, #6]
 801c6c6:	2b01      	cmp	r3, #1
 801c6c8:	d006      	beq.n	801c6d8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801c6ca:	683a      	ldr	r2, [r7, #0]
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	0011      	movs	r1, r2
 801c6d0:	0018      	movs	r0, r3
 801c6d2:	f000 f8da 	bl	801c88a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801c6d6:	e026      	b.n	801c726 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801c6d8:	687a      	ldr	r2, [r7, #4]
 801c6da:	23a7      	movs	r3, #167	@ 0xa7
 801c6dc:	009b      	lsls	r3, r3, #2
 801c6de:	5cd3      	ldrb	r3, [r2, r3]
 801c6e0:	2b02      	cmp	r3, #2
 801c6e2:	dc02      	bgt.n	801c6ea <USBD_GetConfig+0x32>
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	dc03      	bgt.n	801c6f0 <USBD_GetConfig+0x38>
 801c6e8:	e016      	b.n	801c718 <USBD_GetConfig+0x60>
 801c6ea:	2b03      	cmp	r3, #3
 801c6ec:	d00c      	beq.n	801c708 <USBD_GetConfig+0x50>
 801c6ee:	e013      	b.n	801c718 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	2200      	movs	r2, #0
 801c6f4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	3308      	adds	r3, #8
 801c6fa:	0019      	movs	r1, r3
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	2201      	movs	r2, #1
 801c700:	0018      	movs	r0, r3
 801c702:	f000 f940 	bl	801c986 <USBD_CtlSendData>
        break;
 801c706:	e00e      	b.n	801c726 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	1d19      	adds	r1, r3, #4
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	2201      	movs	r2, #1
 801c710:	0018      	movs	r0, r3
 801c712:	f000 f938 	bl	801c986 <USBD_CtlSendData>
        break;
 801c716:	e006      	b.n	801c726 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801c718:	683a      	ldr	r2, [r7, #0]
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	0011      	movs	r1, r2
 801c71e:	0018      	movs	r0, r3
 801c720:	f000 f8b3 	bl	801c88a <USBD_CtlError>
        break;
 801c724:	46c0      	nop			@ (mov r8, r8)
}
 801c726:	46c0      	nop			@ (mov r8, r8)
 801c728:	46bd      	mov	sp, r7
 801c72a:	b002      	add	sp, #8
 801c72c:	bd80      	pop	{r7, pc}

0801c72e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c72e:	b580      	push	{r7, lr}
 801c730:	b082      	sub	sp, #8
 801c732:	af00      	add	r7, sp, #0
 801c734:	6078      	str	r0, [r7, #4]
 801c736:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c738:	687a      	ldr	r2, [r7, #4]
 801c73a:	23a7      	movs	r3, #167	@ 0xa7
 801c73c:	009b      	lsls	r3, r3, #2
 801c73e:	5cd3      	ldrb	r3, [r2, r3]
 801c740:	3b01      	subs	r3, #1
 801c742:	2b02      	cmp	r3, #2
 801c744:	d822      	bhi.n	801c78c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801c746:	683b      	ldr	r3, [r7, #0]
 801c748:	88db      	ldrh	r3, [r3, #6]
 801c74a:	2b02      	cmp	r3, #2
 801c74c:	d006      	beq.n	801c75c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801c74e:	683a      	ldr	r2, [r7, #0]
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	0011      	movs	r1, r2
 801c754:	0018      	movs	r0, r3
 801c756:	f000 f898 	bl	801c88a <USBD_CtlError>
        break;
 801c75a:	e01e      	b.n	801c79a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	2201      	movs	r2, #1
 801c760:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801c762:	687a      	ldr	r2, [r7, #4]
 801c764:	23a9      	movs	r3, #169	@ 0xa9
 801c766:	009b      	lsls	r3, r3, #2
 801c768:	58d3      	ldr	r3, [r2, r3]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d005      	beq.n	801c77a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	68db      	ldr	r3, [r3, #12]
 801c772:	2202      	movs	r2, #2
 801c774:	431a      	orrs	r2, r3
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	330c      	adds	r3, #12
 801c77e:	0019      	movs	r1, r3
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	2202      	movs	r2, #2
 801c784:	0018      	movs	r0, r3
 801c786:	f000 f8fe 	bl	801c986 <USBD_CtlSendData>
      break;
 801c78a:	e006      	b.n	801c79a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801c78c:	683a      	ldr	r2, [r7, #0]
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	0011      	movs	r1, r2
 801c792:	0018      	movs	r0, r3
 801c794:	f000 f879 	bl	801c88a <USBD_CtlError>
      break;
 801c798:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c79a:	46c0      	nop			@ (mov r8, r8)
 801c79c:	46bd      	mov	sp, r7
 801c79e:	b002      	add	sp, #8
 801c7a0:	bd80      	pop	{r7, pc}

0801c7a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c7a2:	b580      	push	{r7, lr}
 801c7a4:	b082      	sub	sp, #8
 801c7a6:	af00      	add	r7, sp, #0
 801c7a8:	6078      	str	r0, [r7, #4]
 801c7aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c7ac:	683b      	ldr	r3, [r7, #0]
 801c7ae:	885b      	ldrh	r3, [r3, #2]
 801c7b0:	2b01      	cmp	r3, #1
 801c7b2:	d108      	bne.n	801c7c6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801c7b4:	687a      	ldr	r2, [r7, #4]
 801c7b6:	23a9      	movs	r3, #169	@ 0xa9
 801c7b8:	009b      	lsls	r3, r3, #2
 801c7ba:	2101      	movs	r1, #1
 801c7bc:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	0018      	movs	r0, r3
 801c7c2:	f000 f94a 	bl	801ca5a <USBD_CtlSendStatus>
  }
}
 801c7c6:	46c0      	nop			@ (mov r8, r8)
 801c7c8:	46bd      	mov	sp, r7
 801c7ca:	b002      	add	sp, #8
 801c7cc:	bd80      	pop	{r7, pc}

0801c7ce <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c7ce:	b580      	push	{r7, lr}
 801c7d0:	b082      	sub	sp, #8
 801c7d2:	af00      	add	r7, sp, #0
 801c7d4:	6078      	str	r0, [r7, #4]
 801c7d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c7d8:	687a      	ldr	r2, [r7, #4]
 801c7da:	23a7      	movs	r3, #167	@ 0xa7
 801c7dc:	009b      	lsls	r3, r3, #2
 801c7de:	5cd3      	ldrb	r3, [r2, r3]
 801c7e0:	3b01      	subs	r3, #1
 801c7e2:	2b02      	cmp	r3, #2
 801c7e4:	d80d      	bhi.n	801c802 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c7e6:	683b      	ldr	r3, [r7, #0]
 801c7e8:	885b      	ldrh	r3, [r3, #2]
 801c7ea:	2b01      	cmp	r3, #1
 801c7ec:	d110      	bne.n	801c810 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801c7ee:	687a      	ldr	r2, [r7, #4]
 801c7f0:	23a9      	movs	r3, #169	@ 0xa9
 801c7f2:	009b      	lsls	r3, r3, #2
 801c7f4:	2100      	movs	r1, #0
 801c7f6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	0018      	movs	r0, r3
 801c7fc:	f000 f92d 	bl	801ca5a <USBD_CtlSendStatus>
      }
      break;
 801c800:	e006      	b.n	801c810 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801c802:	683a      	ldr	r2, [r7, #0]
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	0011      	movs	r1, r2
 801c808:	0018      	movs	r0, r3
 801c80a:	f000 f83e 	bl	801c88a <USBD_CtlError>
      break;
 801c80e:	e000      	b.n	801c812 <USBD_ClrFeature+0x44>
      break;
 801c810:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c812:	46c0      	nop			@ (mov r8, r8)
 801c814:	46bd      	mov	sp, r7
 801c816:	b002      	add	sp, #8
 801c818:	bd80      	pop	{r7, pc}

0801c81a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801c81a:	b580      	push	{r7, lr}
 801c81c:	b082      	sub	sp, #8
 801c81e:	af00      	add	r7, sp, #0
 801c820:	6078      	str	r0, [r7, #4]
 801c822:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801c824:	683b      	ldr	r3, [r7, #0]
 801c826:	781a      	ldrb	r2, [r3, #0]
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801c82c:	683b      	ldr	r3, [r7, #0]
 801c82e:	785a      	ldrb	r2, [r3, #1]
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801c834:	683b      	ldr	r3, [r7, #0]
 801c836:	3302      	adds	r3, #2
 801c838:	781b      	ldrb	r3, [r3, #0]
 801c83a:	001a      	movs	r2, r3
 801c83c:	683b      	ldr	r3, [r7, #0]
 801c83e:	3303      	adds	r3, #3
 801c840:	781b      	ldrb	r3, [r3, #0]
 801c842:	021b      	lsls	r3, r3, #8
 801c844:	b29b      	uxth	r3, r3
 801c846:	18d3      	adds	r3, r2, r3
 801c848:	b29a      	uxth	r2, r3
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801c84e:	683b      	ldr	r3, [r7, #0]
 801c850:	3304      	adds	r3, #4
 801c852:	781b      	ldrb	r3, [r3, #0]
 801c854:	001a      	movs	r2, r3
 801c856:	683b      	ldr	r3, [r7, #0]
 801c858:	3305      	adds	r3, #5
 801c85a:	781b      	ldrb	r3, [r3, #0]
 801c85c:	021b      	lsls	r3, r3, #8
 801c85e:	b29b      	uxth	r3, r3
 801c860:	18d3      	adds	r3, r2, r3
 801c862:	b29a      	uxth	r2, r3
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801c868:	683b      	ldr	r3, [r7, #0]
 801c86a:	3306      	adds	r3, #6
 801c86c:	781b      	ldrb	r3, [r3, #0]
 801c86e:	001a      	movs	r2, r3
 801c870:	683b      	ldr	r3, [r7, #0]
 801c872:	3307      	adds	r3, #7
 801c874:	781b      	ldrb	r3, [r3, #0]
 801c876:	021b      	lsls	r3, r3, #8
 801c878:	b29b      	uxth	r3, r3
 801c87a:	18d3      	adds	r3, r2, r3
 801c87c:	b29a      	uxth	r2, r3
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	80da      	strh	r2, [r3, #6]

}
 801c882:	46c0      	nop			@ (mov r8, r8)
 801c884:	46bd      	mov	sp, r7
 801c886:	b002      	add	sp, #8
 801c888:	bd80      	pop	{r7, pc}

0801c88a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801c88a:	b580      	push	{r7, lr}
 801c88c:	b082      	sub	sp, #8
 801c88e:	af00      	add	r7, sp, #0
 801c890:	6078      	str	r0, [r7, #4]
 801c892:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	2180      	movs	r1, #128	@ 0x80
 801c898:	0018      	movs	r0, r3
 801c89a:	f000 fd1e 	bl	801d2da <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	2100      	movs	r1, #0
 801c8a2:	0018      	movs	r0, r3
 801c8a4:	f000 fd19 	bl	801d2da <USBD_LL_StallEP>
}
 801c8a8:	46c0      	nop			@ (mov r8, r8)
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	b002      	add	sp, #8
 801c8ae:	bd80      	pop	{r7, pc}

0801c8b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801c8b0:	b590      	push	{r4, r7, lr}
 801c8b2:	b087      	sub	sp, #28
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	60f8      	str	r0, [r7, #12]
 801c8b8:	60b9      	str	r1, [r7, #8]
 801c8ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801c8bc:	2417      	movs	r4, #23
 801c8be:	193b      	adds	r3, r7, r4
 801c8c0:	2200      	movs	r2, #0
 801c8c2:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d03c      	beq.n	801c944 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	0018      	movs	r0, r3
 801c8ce:	f000 f83d 	bl	801c94c <USBD_GetLen>
 801c8d2:	0003      	movs	r3, r0
 801c8d4:	3301      	adds	r3, #1
 801c8d6:	b29b      	uxth	r3, r3
 801c8d8:	18db      	adds	r3, r3, r3
 801c8da:	b29a      	uxth	r2, r3
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801c8e0:	193b      	adds	r3, r7, r4
 801c8e2:	781b      	ldrb	r3, [r3, #0]
 801c8e4:	193a      	adds	r2, r7, r4
 801c8e6:	1c59      	adds	r1, r3, #1
 801c8e8:	7011      	strb	r1, [r2, #0]
 801c8ea:	001a      	movs	r2, r3
 801c8ec:	68bb      	ldr	r3, [r7, #8]
 801c8ee:	189b      	adds	r3, r3, r2
 801c8f0:	687a      	ldr	r2, [r7, #4]
 801c8f2:	7812      	ldrb	r2, [r2, #0]
 801c8f4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801c8f6:	193b      	adds	r3, r7, r4
 801c8f8:	781b      	ldrb	r3, [r3, #0]
 801c8fa:	193a      	adds	r2, r7, r4
 801c8fc:	1c59      	adds	r1, r3, #1
 801c8fe:	7011      	strb	r1, [r2, #0]
 801c900:	001a      	movs	r2, r3
 801c902:	68bb      	ldr	r3, [r7, #8]
 801c904:	189b      	adds	r3, r3, r2
 801c906:	2203      	movs	r2, #3
 801c908:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801c90a:	e017      	b.n	801c93c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801c90c:	68fb      	ldr	r3, [r7, #12]
 801c90e:	1c5a      	adds	r2, r3, #1
 801c910:	60fa      	str	r2, [r7, #12]
 801c912:	2417      	movs	r4, #23
 801c914:	193a      	adds	r2, r7, r4
 801c916:	7812      	ldrb	r2, [r2, #0]
 801c918:	1939      	adds	r1, r7, r4
 801c91a:	1c50      	adds	r0, r2, #1
 801c91c:	7008      	strb	r0, [r1, #0]
 801c91e:	0011      	movs	r1, r2
 801c920:	68ba      	ldr	r2, [r7, #8]
 801c922:	1852      	adds	r2, r2, r1
 801c924:	781b      	ldrb	r3, [r3, #0]
 801c926:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801c928:	193b      	adds	r3, r7, r4
 801c92a:	781b      	ldrb	r3, [r3, #0]
 801c92c:	193a      	adds	r2, r7, r4
 801c92e:	1c59      	adds	r1, r3, #1
 801c930:	7011      	strb	r1, [r2, #0]
 801c932:	001a      	movs	r2, r3
 801c934:	68bb      	ldr	r3, [r7, #8]
 801c936:	189b      	adds	r3, r3, r2
 801c938:	2200      	movs	r2, #0
 801c93a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	781b      	ldrb	r3, [r3, #0]
 801c940:	2b00      	cmp	r3, #0
 801c942:	d1e3      	bne.n	801c90c <USBD_GetString+0x5c>
    }
  }
}
 801c944:	46c0      	nop			@ (mov r8, r8)
 801c946:	46bd      	mov	sp, r7
 801c948:	b007      	add	sp, #28
 801c94a:	bd90      	pop	{r4, r7, pc}

0801c94c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801c94c:	b580      	push	{r7, lr}
 801c94e:	b084      	sub	sp, #16
 801c950:	af00      	add	r7, sp, #0
 801c952:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801c954:	230f      	movs	r3, #15
 801c956:	18fb      	adds	r3, r7, r3
 801c958:	2200      	movs	r2, #0
 801c95a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801c95c:	e008      	b.n	801c970 <USBD_GetLen+0x24>
  {
    len++;
 801c95e:	210f      	movs	r1, #15
 801c960:	187b      	adds	r3, r7, r1
 801c962:	781a      	ldrb	r2, [r3, #0]
 801c964:	187b      	adds	r3, r7, r1
 801c966:	3201      	adds	r2, #1
 801c968:	701a      	strb	r2, [r3, #0]
    buf++;
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	3301      	adds	r3, #1
 801c96e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	781b      	ldrb	r3, [r3, #0]
 801c974:	2b00      	cmp	r3, #0
 801c976:	d1f2      	bne.n	801c95e <USBD_GetLen+0x12>
  }

  return len;
 801c978:	230f      	movs	r3, #15
 801c97a:	18fb      	adds	r3, r7, r3
 801c97c:	781b      	ldrb	r3, [r3, #0]
}
 801c97e:	0018      	movs	r0, r3
 801c980:	46bd      	mov	sp, r7
 801c982:	b004      	add	sp, #16
 801c984:	bd80      	pop	{r7, pc}

0801c986 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801c986:	b580      	push	{r7, lr}
 801c988:	b084      	sub	sp, #16
 801c98a:	af00      	add	r7, sp, #0
 801c98c:	60f8      	str	r0, [r7, #12]
 801c98e:	60b9      	str	r1, [r7, #8]
 801c990:	1dbb      	adds	r3, r7, #6
 801c992:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801c994:	68fa      	ldr	r2, [r7, #12]
 801c996:	23a5      	movs	r3, #165	@ 0xa5
 801c998:	009b      	lsls	r3, r3, #2
 801c99a:	2102      	movs	r1, #2
 801c99c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801c99e:	1dbb      	adds	r3, r7, #6
 801c9a0:	881a      	ldrh	r2, [r3, #0]
 801c9a2:	68fb      	ldr	r3, [r7, #12]
 801c9a4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801c9a6:	1dbb      	adds	r3, r7, #6
 801c9a8:	881a      	ldrh	r2, [r3, #0]
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c9ae:	1dbb      	adds	r3, r7, #6
 801c9b0:	881b      	ldrh	r3, [r3, #0]
 801c9b2:	68ba      	ldr	r2, [r7, #8]
 801c9b4:	68f8      	ldr	r0, [r7, #12]
 801c9b6:	2100      	movs	r1, #0
 801c9b8:	f000 fd41 	bl	801d43e <USBD_LL_Transmit>

  return USBD_OK;
 801c9bc:	2300      	movs	r3, #0
}
 801c9be:	0018      	movs	r0, r3
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	b004      	add	sp, #16
 801c9c4:	bd80      	pop	{r7, pc}

0801c9c6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801c9c6:	b580      	push	{r7, lr}
 801c9c8:	b084      	sub	sp, #16
 801c9ca:	af00      	add	r7, sp, #0
 801c9cc:	60f8      	str	r0, [r7, #12]
 801c9ce:	60b9      	str	r1, [r7, #8]
 801c9d0:	1dbb      	adds	r3, r7, #6
 801c9d2:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801c9d4:	1dbb      	adds	r3, r7, #6
 801c9d6:	881b      	ldrh	r3, [r3, #0]
 801c9d8:	68ba      	ldr	r2, [r7, #8]
 801c9da:	68f8      	ldr	r0, [r7, #12]
 801c9dc:	2100      	movs	r1, #0
 801c9de:	f000 fd2e 	bl	801d43e <USBD_LL_Transmit>

  return USBD_OK;
 801c9e2:	2300      	movs	r3, #0
}
 801c9e4:	0018      	movs	r0, r3
 801c9e6:	46bd      	mov	sp, r7
 801c9e8:	b004      	add	sp, #16
 801c9ea:	bd80      	pop	{r7, pc}

0801c9ec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801c9ec:	b580      	push	{r7, lr}
 801c9ee:	b084      	sub	sp, #16
 801c9f0:	af00      	add	r7, sp, #0
 801c9f2:	60f8      	str	r0, [r7, #12]
 801c9f4:	60b9      	str	r1, [r7, #8]
 801c9f6:	1dbb      	adds	r3, r7, #6
 801c9f8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801c9fa:	68fa      	ldr	r2, [r7, #12]
 801c9fc:	23a5      	movs	r3, #165	@ 0xa5
 801c9fe:	009b      	lsls	r3, r3, #2
 801ca00:	2103      	movs	r1, #3
 801ca02:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801ca04:	1dbb      	adds	r3, r7, #6
 801ca06:	8819      	ldrh	r1, [r3, #0]
 801ca08:	68fa      	ldr	r2, [r7, #12]
 801ca0a:	23ae      	movs	r3, #174	@ 0xae
 801ca0c:	005b      	lsls	r3, r3, #1
 801ca0e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801ca10:	1dbb      	adds	r3, r7, #6
 801ca12:	8819      	ldrh	r1, [r3, #0]
 801ca14:	68fa      	ldr	r2, [r7, #12]
 801ca16:	23b0      	movs	r3, #176	@ 0xb0
 801ca18:	005b      	lsls	r3, r3, #1
 801ca1a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801ca1c:	1dbb      	adds	r3, r7, #6
 801ca1e:	881b      	ldrh	r3, [r3, #0]
 801ca20:	68ba      	ldr	r2, [r7, #8]
 801ca22:	68f8      	ldr	r0, [r7, #12]
 801ca24:	2100      	movs	r1, #0
 801ca26:	f000 fd41 	bl	801d4ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801ca2a:	2300      	movs	r3, #0
}
 801ca2c:	0018      	movs	r0, r3
 801ca2e:	46bd      	mov	sp, r7
 801ca30:	b004      	add	sp, #16
 801ca32:	bd80      	pop	{r7, pc}

0801ca34 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801ca34:	b580      	push	{r7, lr}
 801ca36:	b084      	sub	sp, #16
 801ca38:	af00      	add	r7, sp, #0
 801ca3a:	60f8      	str	r0, [r7, #12]
 801ca3c:	60b9      	str	r1, [r7, #8]
 801ca3e:	1dbb      	adds	r3, r7, #6
 801ca40:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801ca42:	1dbb      	adds	r3, r7, #6
 801ca44:	881b      	ldrh	r3, [r3, #0]
 801ca46:	68ba      	ldr	r2, [r7, #8]
 801ca48:	68f8      	ldr	r0, [r7, #12]
 801ca4a:	2100      	movs	r1, #0
 801ca4c:	f000 fd2e 	bl	801d4ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801ca50:	2300      	movs	r3, #0
}
 801ca52:	0018      	movs	r0, r3
 801ca54:	46bd      	mov	sp, r7
 801ca56:	b004      	add	sp, #16
 801ca58:	bd80      	pop	{r7, pc}

0801ca5a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801ca5a:	b580      	push	{r7, lr}
 801ca5c:	b082      	sub	sp, #8
 801ca5e:	af00      	add	r7, sp, #0
 801ca60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801ca62:	687a      	ldr	r2, [r7, #4]
 801ca64:	23a5      	movs	r3, #165	@ 0xa5
 801ca66:	009b      	lsls	r3, r3, #2
 801ca68:	2104      	movs	r1, #4
 801ca6a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801ca6c:	6878      	ldr	r0, [r7, #4]
 801ca6e:	2300      	movs	r3, #0
 801ca70:	2200      	movs	r2, #0
 801ca72:	2100      	movs	r1, #0
 801ca74:	f000 fce3 	bl	801d43e <USBD_LL_Transmit>

  return USBD_OK;
 801ca78:	2300      	movs	r3, #0
}
 801ca7a:	0018      	movs	r0, r3
 801ca7c:	46bd      	mov	sp, r7
 801ca7e:	b002      	add	sp, #8
 801ca80:	bd80      	pop	{r7, pc}

0801ca82 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801ca82:	b580      	push	{r7, lr}
 801ca84:	b082      	sub	sp, #8
 801ca86:	af00      	add	r7, sp, #0
 801ca88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801ca8a:	687a      	ldr	r2, [r7, #4]
 801ca8c:	23a5      	movs	r3, #165	@ 0xa5
 801ca8e:	009b      	lsls	r3, r3, #2
 801ca90:	2105      	movs	r1, #5
 801ca92:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801ca94:	6878      	ldr	r0, [r7, #4]
 801ca96:	2300      	movs	r3, #0
 801ca98:	2200      	movs	r2, #0
 801ca9a:	2100      	movs	r1, #0
 801ca9c:	f000 fd06 	bl	801d4ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801caa0:	2300      	movs	r3, #0
}
 801caa2:	0018      	movs	r0, r3
 801caa4:	46bd      	mov	sp, r7
 801caa6:	b002      	add	sp, #8
 801caa8:	bd80      	pop	{r7, pc}
	...

0801caac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801caac:	b580      	push	{r7, lr}
 801caae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cab0:	4914      	ldr	r1, [pc, #80]	@ (801cb04 <MX_USB_DEVICE_Init+0x58>)
 801cab2:	4b15      	ldr	r3, [pc, #84]	@ (801cb08 <MX_USB_DEVICE_Init+0x5c>)
 801cab4:	2200      	movs	r2, #0
 801cab6:	0018      	movs	r0, r3
 801cab8:	f7fe fdec 	bl	801b694 <USBD_Init>
 801cabc:	1e03      	subs	r3, r0, #0
 801cabe:	d001      	beq.n	801cac4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cac0:	f7eb fbf2 	bl	80082a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801cac4:	4a11      	ldr	r2, [pc, #68]	@ (801cb0c <MX_USB_DEVICE_Init+0x60>)
 801cac6:	4b10      	ldr	r3, [pc, #64]	@ (801cb08 <MX_USB_DEVICE_Init+0x5c>)
 801cac8:	0011      	movs	r1, r2
 801caca:	0018      	movs	r0, r3
 801cacc:	f7fe fe13 	bl	801b6f6 <USBD_RegisterClass>
 801cad0:	1e03      	subs	r3, r0, #0
 801cad2:	d001      	beq.n	801cad8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801cad4:	f7eb fbe8 	bl	80082a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801cad8:	4a0d      	ldr	r2, [pc, #52]	@ (801cb10 <MX_USB_DEVICE_Init+0x64>)
 801cada:	4b0b      	ldr	r3, [pc, #44]	@ (801cb08 <MX_USB_DEVICE_Init+0x5c>)
 801cadc:	0011      	movs	r1, r2
 801cade:	0018      	movs	r0, r3
 801cae0:	f7fe fd28 	bl	801b534 <USBD_CDC_RegisterInterface>
 801cae4:	1e03      	subs	r3, r0, #0
 801cae6:	d001      	beq.n	801caec <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801cae8:	f7eb fbde 	bl	80082a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801caec:	4b06      	ldr	r3, [pc, #24]	@ (801cb08 <MX_USB_DEVICE_Init+0x5c>)
 801caee:	0018      	movs	r0, r3
 801caf0:	f7fe fe21 	bl	801b736 <USBD_Start>
 801caf4:	1e03      	subs	r3, r0, #0
 801caf6:	d001      	beq.n	801cafc <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801caf8:	f7eb fbd6 	bl	80082a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cafc:	46c0      	nop			@ (mov r8, r8)
 801cafe:	46bd      	mov	sp, r7
 801cb00:	bd80      	pop	{r7, pc}
 801cb02:	46c0      	nop			@ (mov r8, r8)
 801cb04:	20000204 	.word	0x20000204
 801cb08:	200025c8 	.word	0x200025c8
 801cb0c:	200000f0 	.word	0x200000f0
 801cb10:	200001f4 	.word	0x200001f4

0801cb14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801cb14:	b580      	push	{r7, lr}
 801cb16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801cb18:	4907      	ldr	r1, [pc, #28]	@ (801cb38 <CDC_Init_FS+0x24>)
 801cb1a:	4b08      	ldr	r3, [pc, #32]	@ (801cb3c <CDC_Init_FS+0x28>)
 801cb1c:	2200      	movs	r2, #0
 801cb1e:	0018      	movs	r0, r3
 801cb20:	f7fe fd23 	bl	801b56a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801cb24:	4a06      	ldr	r2, [pc, #24]	@ (801cb40 <CDC_Init_FS+0x2c>)
 801cb26:	4b05      	ldr	r3, [pc, #20]	@ (801cb3c <CDC_Init_FS+0x28>)
 801cb28:	0011      	movs	r1, r2
 801cb2a:	0018      	movs	r0, r3
 801cb2c:	f7fe fd39 	bl	801b5a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801cb30:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cb32:	0018      	movs	r0, r3
 801cb34:	46bd      	mov	sp, r7
 801cb36:	bd80      	pop	{r7, pc}
 801cb38:	20002d4c 	.word	0x20002d4c
 801cb3c:	200025c8 	.word	0x200025c8
 801cb40:	2000294c 	.word	0x2000294c

0801cb44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801cb44:	b580      	push	{r7, lr}
 801cb46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801cb48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801cb4a:	0018      	movs	r0, r3
 801cb4c:	46bd      	mov	sp, r7
 801cb4e:	bd80      	pop	{r7, pc}

0801cb50 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801cb50:	b580      	push	{r7, lr}
 801cb52:	b082      	sub	sp, #8
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	6039      	str	r1, [r7, #0]
 801cb58:	0011      	movs	r1, r2
 801cb5a:	1dfb      	adds	r3, r7, #7
 801cb5c:	1c02      	adds	r2, r0, #0
 801cb5e:	701a      	strb	r2, [r3, #0]
 801cb60:	1d3b      	adds	r3, r7, #4
 801cb62:	1c0a      	adds	r2, r1, #0
 801cb64:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801cb66:	1dfb      	adds	r3, r7, #7
 801cb68:	781b      	ldrb	r3, [r3, #0]
 801cb6a:	2b23      	cmp	r3, #35	@ 0x23
 801cb6c:	d804      	bhi.n	801cb78 <CDC_Control_FS+0x28>
 801cb6e:	009a      	lsls	r2, r3, #2
 801cb70:	4b04      	ldr	r3, [pc, #16]	@ (801cb84 <CDC_Control_FS+0x34>)
 801cb72:	18d3      	adds	r3, r2, r3
 801cb74:	681b      	ldr	r3, [r3, #0]
 801cb76:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801cb78:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801cb7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801cb7c:	0018      	movs	r0, r3
 801cb7e:	46bd      	mov	sp, r7
 801cb80:	b002      	add	sp, #8
 801cb82:	bd80      	pop	{r7, pc}
 801cb84:	080255c8 	.word	0x080255c8

0801cb88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801cb88:	b580      	push	{r7, lr}
 801cb8a:	b082      	sub	sp, #8
 801cb8c:	af00      	add	r7, sp, #0
 801cb8e:	6078      	str	r0, [r7, #4]
 801cb90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801cb92:	4b12      	ldr	r3, [pc, #72]	@ (801cbdc <CDC_Receive_FS+0x54>)
 801cb94:	781b      	ldrb	r3, [r3, #0]
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d013      	beq.n	801cbc2 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801cb9a:	683b      	ldr	r3, [r7, #0]
 801cb9c:	681b      	ldr	r3, [r3, #0]
 801cb9e:	b29a      	uxth	r2, r3
 801cba0:	2301      	movs	r3, #1
 801cba2:	425b      	negs	r3, r3
 801cba4:	6879      	ldr	r1, [r7, #4]
 801cba6:	480e      	ldr	r0, [pc, #56]	@ (801cbe0 <CDC_Receive_FS+0x58>)
 801cba8:	f7fa fa46 	bl	8017038 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801cbac:	687a      	ldr	r2, [r7, #4]
 801cbae:	4b0d      	ldr	r3, [pc, #52]	@ (801cbe4 <CDC_Receive_FS+0x5c>)
 801cbb0:	0011      	movs	r1, r2
 801cbb2:	0018      	movs	r0, r3
 801cbb4:	f7fe fcf5 	bl	801b5a2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cbb8:	4b0a      	ldr	r3, [pc, #40]	@ (801cbe4 <CDC_Receive_FS+0x5c>)
 801cbba:	0018      	movs	r0, r3
 801cbbc:	f7fe fd3c 	bl	801b638 <USBD_CDC_ReceivePacket>
 801cbc0:	e006      	b.n	801cbd0 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801cbc2:	683b      	ldr	r3, [r7, #0]
 801cbc4:	681a      	ldr	r2, [r3, #0]
 801cbc6:	4b08      	ldr	r3, [pc, #32]	@ (801cbe8 <CDC_Receive_FS+0x60>)
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	18d2      	adds	r2, r2, r3
 801cbcc:	4b06      	ldr	r3, [pc, #24]	@ (801cbe8 <CDC_Receive_FS+0x60>)
 801cbce:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801cbd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801cbd2:	0018      	movs	r0, r3
 801cbd4:	46bd      	mov	sp, r7
 801cbd6:	b002      	add	sp, #8
 801cbd8:	bd80      	pop	{r7, pc}
 801cbda:	46c0      	nop			@ (mov r8, r8)
 801cbdc:	2000288c 	.word	0x2000288c
 801cbe0:	20002890 	.word	0x20002890
 801cbe4:	200025c8 	.word	0x200025c8
 801cbe8:	20002948 	.word	0x20002948

0801cbec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801cbec:	b5b0      	push	{r4, r5, r7, lr}
 801cbee:	b084      	sub	sp, #16
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	6078      	str	r0, [r7, #4]
 801cbf4:	000a      	movs	r2, r1
 801cbf6:	1cbb      	adds	r3, r7, #2
 801cbf8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801cbfa:	230f      	movs	r3, #15
 801cbfc:	18fb      	adds	r3, r7, r3
 801cbfe:	2200      	movs	r2, #0
 801cc00:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801cc02:	4a11      	ldr	r2, [pc, #68]	@ (801cc48 <CDC_Transmit_FS+0x5c>)
 801cc04:	23ae      	movs	r3, #174	@ 0xae
 801cc06:	009b      	lsls	r3, r3, #2
 801cc08:	58d3      	ldr	r3, [r2, r3]
 801cc0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801cc0c:	68ba      	ldr	r2, [r7, #8]
 801cc0e:	2385      	movs	r3, #133	@ 0x85
 801cc10:	009b      	lsls	r3, r3, #2
 801cc12:	58d3      	ldr	r3, [r2, r3]
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d001      	beq.n	801cc1c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801cc18:	2301      	movs	r3, #1
 801cc1a:	e010      	b.n	801cc3e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801cc1c:	1cbb      	adds	r3, r7, #2
 801cc1e:	881a      	ldrh	r2, [r3, #0]
 801cc20:	6879      	ldr	r1, [r7, #4]
 801cc22:	4b09      	ldr	r3, [pc, #36]	@ (801cc48 <CDC_Transmit_FS+0x5c>)
 801cc24:	0018      	movs	r0, r3
 801cc26:	f7fe fca0 	bl	801b56a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801cc2a:	250f      	movs	r5, #15
 801cc2c:	197c      	adds	r4, r7, r5
 801cc2e:	4b06      	ldr	r3, [pc, #24]	@ (801cc48 <CDC_Transmit_FS+0x5c>)
 801cc30:	0018      	movs	r0, r3
 801cc32:	f7fe fcca 	bl	801b5ca <USBD_CDC_TransmitPacket>
 801cc36:	0003      	movs	r3, r0
 801cc38:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801cc3a:	197b      	adds	r3, r7, r5
 801cc3c:	781b      	ldrb	r3, [r3, #0]
}
 801cc3e:	0018      	movs	r0, r3
 801cc40:	46bd      	mov	sp, r7
 801cc42:	b004      	add	sp, #16
 801cc44:	bdb0      	pop	{r4, r5, r7, pc}
 801cc46:	46c0      	nop			@ (mov r8, r8)
 801cc48:	200025c8 	.word	0x200025c8

0801cc4c <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801cc4c:	b580      	push	{r7, lr}
 801cc4e:	af00      	add	r7, sp, #0
  ESPProg = true;
 801cc50:	4b02      	ldr	r3, [pc, #8]	@ (801cc5c <EnableESPProg+0x10>)
 801cc52:	2201      	movs	r2, #1
 801cc54:	701a      	strb	r2, [r3, #0]
}
 801cc56:	46c0      	nop			@ (mov r8, r8)
 801cc58:	46bd      	mov	sp, r7
 801cc5a:	bd80      	pop	{r7, pc}
 801cc5c:	2000288c 	.word	0x2000288c

0801cc60 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801cc60:	b580      	push	{r7, lr}
 801cc62:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801cc64:	4b01      	ldr	r3, [pc, #4]	@ (801cc6c <GetUsbRxPointer+0xc>)
}
 801cc66:	0018      	movs	r0, r3
 801cc68:	46bd      	mov	sp, r7
 801cc6a:	bd80      	pop	{r7, pc}
 801cc6c:	2000294c 	.word	0x2000294c

0801cc70 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801cc70:	b580      	push	{r7, lr}
 801cc72:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801cc74:	4b07      	ldr	r3, [pc, #28]	@ (801cc94 <ResetUsbRxDataSize+0x24>)
 801cc76:	2200      	movs	r2, #0
 801cc78:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801cc7a:	4a07      	ldr	r2, [pc, #28]	@ (801cc98 <ResetUsbRxDataSize+0x28>)
 801cc7c:	4b07      	ldr	r3, [pc, #28]	@ (801cc9c <ResetUsbRxDataSize+0x2c>)
 801cc7e:	0011      	movs	r1, r2
 801cc80:	0018      	movs	r0, r3
 801cc82:	f7fe fc8e 	bl	801b5a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cc86:	4b05      	ldr	r3, [pc, #20]	@ (801cc9c <ResetUsbRxDataSize+0x2c>)
 801cc88:	0018      	movs	r0, r3
 801cc8a:	f7fe fcd5 	bl	801b638 <USBD_CDC_ReceivePacket>
}
 801cc8e:	46c0      	nop			@ (mov r8, r8)
 801cc90:	46bd      	mov	sp, r7
 801cc92:	bd80      	pop	{r7, pc}
 801cc94:	20002948 	.word	0x20002948
 801cc98:	2000294c 	.word	0x2000294c
 801cc9c:	200025c8 	.word	0x200025c8

0801cca0 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801cca0:	b580      	push	{r7, lr}
 801cca2:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801cca4:	4b02      	ldr	r3, [pc, #8]	@ (801ccb0 <GetUsbRxDataSize+0x10>)
 801cca6:	681b      	ldr	r3, [r3, #0]
}
 801cca8:	0018      	movs	r0, r3
 801ccaa:	46bd      	mov	sp, r7
 801ccac:	bd80      	pop	{r7, pc}
 801ccae:	46c0      	nop			@ (mov r8, r8)
 801ccb0:	20002948 	.word	0x20002948

0801ccb4 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801ccb4:	b580      	push	{r7, lr}
 801ccb6:	b082      	sub	sp, #8
 801ccb8:	af00      	add	r7, sp, #0
 801ccba:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801ccbc:	687a      	ldr	r2, [r7, #4]
 801ccbe:	4b07      	ldr	r3, [pc, #28]	@ (801ccdc <GetUsbRxNextChunk+0x28>)
 801ccc0:	18d2      	adds	r2, r2, r3
 801ccc2:	4b07      	ldr	r3, [pc, #28]	@ (801cce0 <GetUsbRxNextChunk+0x2c>)
 801ccc4:	0011      	movs	r1, r2
 801ccc6:	0018      	movs	r0, r3
 801ccc8:	f7fe fc6b 	bl	801b5a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cccc:	4b04      	ldr	r3, [pc, #16]	@ (801cce0 <GetUsbRxNextChunk+0x2c>)
 801ccce:	0018      	movs	r0, r3
 801ccd0:	f7fe fcb2 	bl	801b638 <USBD_CDC_ReceivePacket>
}
 801ccd4:	46c0      	nop			@ (mov r8, r8)
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	b002      	add	sp, #8
 801ccda:	bd80      	pop	{r7, pc}
 801ccdc:	2000294c 	.word	0x2000294c
 801cce0:	200025c8 	.word	0x200025c8

0801cce4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cce4:	b580      	push	{r7, lr}
 801cce6:	b082      	sub	sp, #8
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	0002      	movs	r2, r0
 801ccec:	6039      	str	r1, [r7, #0]
 801ccee:	1dfb      	adds	r3, r7, #7
 801ccf0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801ccf2:	683b      	ldr	r3, [r7, #0]
 801ccf4:	2212      	movs	r2, #18
 801ccf6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801ccf8:	4b02      	ldr	r3, [pc, #8]	@ (801cd04 <USBD_FS_DeviceDescriptor+0x20>)
}
 801ccfa:	0018      	movs	r0, r3
 801ccfc:	46bd      	mov	sp, r7
 801ccfe:	b002      	add	sp, #8
 801cd00:	bd80      	pop	{r7, pc}
 801cd02:	46c0      	nop			@ (mov r8, r8)
 801cd04:	20000220 	.word	0x20000220

0801cd08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd08:	b580      	push	{r7, lr}
 801cd0a:	b082      	sub	sp, #8
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	0002      	movs	r2, r0
 801cd10:	6039      	str	r1, [r7, #0]
 801cd12:	1dfb      	adds	r3, r7, #7
 801cd14:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cd16:	683b      	ldr	r3, [r7, #0]
 801cd18:	2204      	movs	r2, #4
 801cd1a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801cd1c:	4b02      	ldr	r3, [pc, #8]	@ (801cd28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cd1e:	0018      	movs	r0, r3
 801cd20:	46bd      	mov	sp, r7
 801cd22:	b002      	add	sp, #8
 801cd24:	bd80      	pop	{r7, pc}
 801cd26:	46c0      	nop			@ (mov r8, r8)
 801cd28:	20000234 	.word	0x20000234

0801cd2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b082      	sub	sp, #8
 801cd30:	af00      	add	r7, sp, #0
 801cd32:	0002      	movs	r2, r0
 801cd34:	6039      	str	r1, [r7, #0]
 801cd36:	1dfb      	adds	r3, r7, #7
 801cd38:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801cd3a:	1dfb      	adds	r3, r7, #7
 801cd3c:	781b      	ldrb	r3, [r3, #0]
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d106      	bne.n	801cd50 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cd42:	683a      	ldr	r2, [r7, #0]
 801cd44:	4908      	ldr	r1, [pc, #32]	@ (801cd68 <USBD_FS_ProductStrDescriptor+0x3c>)
 801cd46:	4b09      	ldr	r3, [pc, #36]	@ (801cd6c <USBD_FS_ProductStrDescriptor+0x40>)
 801cd48:	0018      	movs	r0, r3
 801cd4a:	f7ff fdb1 	bl	801c8b0 <USBD_GetString>
 801cd4e:	e005      	b.n	801cd5c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cd50:	683a      	ldr	r2, [r7, #0]
 801cd52:	4905      	ldr	r1, [pc, #20]	@ (801cd68 <USBD_FS_ProductStrDescriptor+0x3c>)
 801cd54:	4b05      	ldr	r3, [pc, #20]	@ (801cd6c <USBD_FS_ProductStrDescriptor+0x40>)
 801cd56:	0018      	movs	r0, r3
 801cd58:	f7ff fdaa 	bl	801c8b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cd5c:	4b02      	ldr	r3, [pc, #8]	@ (801cd68 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801cd5e:	0018      	movs	r0, r3
 801cd60:	46bd      	mov	sp, r7
 801cd62:	b002      	add	sp, #8
 801cd64:	bd80      	pop	{r7, pc}
 801cd66:	46c0      	nop			@ (mov r8, r8)
 801cd68:	2000314c 	.word	0x2000314c
 801cd6c:	08025054 	.word	0x08025054

0801cd70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd70:	b580      	push	{r7, lr}
 801cd72:	b082      	sub	sp, #8
 801cd74:	af00      	add	r7, sp, #0
 801cd76:	0002      	movs	r2, r0
 801cd78:	6039      	str	r1, [r7, #0]
 801cd7a:	1dfb      	adds	r3, r7, #7
 801cd7c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801cd7e:	683a      	ldr	r2, [r7, #0]
 801cd80:	4904      	ldr	r1, [pc, #16]	@ (801cd94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801cd82:	4b05      	ldr	r3, [pc, #20]	@ (801cd98 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801cd84:	0018      	movs	r0, r3
 801cd86:	f7ff fd93 	bl	801c8b0 <USBD_GetString>
  return USBD_StrDesc;
 801cd8a:	4b02      	ldr	r3, [pc, #8]	@ (801cd94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801cd8c:	0018      	movs	r0, r3
 801cd8e:	46bd      	mov	sp, r7
 801cd90:	b002      	add	sp, #8
 801cd92:	bd80      	pop	{r7, pc}
 801cd94:	2000314c 	.word	0x2000314c
 801cd98:	0802506c 	.word	0x0802506c

0801cd9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cd9c:	b580      	push	{r7, lr}
 801cd9e:	b082      	sub	sp, #8
 801cda0:	af00      	add	r7, sp, #0
 801cda2:	0002      	movs	r2, r0
 801cda4:	6039      	str	r1, [r7, #0]
 801cda6:	1dfb      	adds	r3, r7, #7
 801cda8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801cdaa:	683b      	ldr	r3, [r7, #0]
 801cdac:	221a      	movs	r2, #26
 801cdae:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801cdb0:	f000 f84c 	bl	801ce4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801cdb4:	4b02      	ldr	r3, [pc, #8]	@ (801cdc0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801cdb6:	0018      	movs	r0, r3
 801cdb8:	46bd      	mov	sp, r7
 801cdba:	b002      	add	sp, #8
 801cdbc:	bd80      	pop	{r7, pc}
 801cdbe:	46c0      	nop			@ (mov r8, r8)
 801cdc0:	20000238 	.word	0x20000238

0801cdc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cdc4:	b580      	push	{r7, lr}
 801cdc6:	b082      	sub	sp, #8
 801cdc8:	af00      	add	r7, sp, #0
 801cdca:	0002      	movs	r2, r0
 801cdcc:	6039      	str	r1, [r7, #0]
 801cdce:	1dfb      	adds	r3, r7, #7
 801cdd0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801cdd2:	1dfb      	adds	r3, r7, #7
 801cdd4:	781b      	ldrb	r3, [r3, #0]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d106      	bne.n	801cde8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cdda:	683a      	ldr	r2, [r7, #0]
 801cddc:	4908      	ldr	r1, [pc, #32]	@ (801ce00 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801cdde:	4b09      	ldr	r3, [pc, #36]	@ (801ce04 <USBD_FS_ConfigStrDescriptor+0x40>)
 801cde0:	0018      	movs	r0, r3
 801cde2:	f7ff fd65 	bl	801c8b0 <USBD_GetString>
 801cde6:	e005      	b.n	801cdf4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801cde8:	683a      	ldr	r2, [r7, #0]
 801cdea:	4905      	ldr	r1, [pc, #20]	@ (801ce00 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801cdec:	4b05      	ldr	r3, [pc, #20]	@ (801ce04 <USBD_FS_ConfigStrDescriptor+0x40>)
 801cdee:	0018      	movs	r0, r3
 801cdf0:	f7ff fd5e 	bl	801c8b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cdf4:	4b02      	ldr	r3, [pc, #8]	@ (801ce00 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801cdf6:	0018      	movs	r0, r3
 801cdf8:	46bd      	mov	sp, r7
 801cdfa:	b002      	add	sp, #8
 801cdfc:	bd80      	pop	{r7, pc}
 801cdfe:	46c0      	nop			@ (mov r8, r8)
 801ce00:	2000314c 	.word	0x2000314c
 801ce04:	08025080 	.word	0x08025080

0801ce08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce08:	b580      	push	{r7, lr}
 801ce0a:	b082      	sub	sp, #8
 801ce0c:	af00      	add	r7, sp, #0
 801ce0e:	0002      	movs	r2, r0
 801ce10:	6039      	str	r1, [r7, #0]
 801ce12:	1dfb      	adds	r3, r7, #7
 801ce14:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801ce16:	1dfb      	adds	r3, r7, #7
 801ce18:	781b      	ldrb	r3, [r3, #0]
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d106      	bne.n	801ce2c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ce1e:	683a      	ldr	r2, [r7, #0]
 801ce20:	4908      	ldr	r1, [pc, #32]	@ (801ce44 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801ce22:	4b09      	ldr	r3, [pc, #36]	@ (801ce48 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801ce24:	0018      	movs	r0, r3
 801ce26:	f7ff fd43 	bl	801c8b0 <USBD_GetString>
 801ce2a:	e005      	b.n	801ce38 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801ce2c:	683a      	ldr	r2, [r7, #0]
 801ce2e:	4905      	ldr	r1, [pc, #20]	@ (801ce44 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801ce30:	4b05      	ldr	r3, [pc, #20]	@ (801ce48 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801ce32:	0018      	movs	r0, r3
 801ce34:	f7ff fd3c 	bl	801c8b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ce38:	4b02      	ldr	r3, [pc, #8]	@ (801ce44 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801ce3a:	0018      	movs	r0, r3
 801ce3c:	46bd      	mov	sp, r7
 801ce3e:	b002      	add	sp, #8
 801ce40:	bd80      	pop	{r7, pc}
 801ce42:	46c0      	nop			@ (mov r8, r8)
 801ce44:	2000314c 	.word	0x2000314c
 801ce48:	0802508c 	.word	0x0802508c

0801ce4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801ce4c:	b580      	push	{r7, lr}
 801ce4e:	b084      	sub	sp, #16
 801ce50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801ce52:	4b10      	ldr	r3, [pc, #64]	@ (801ce94 <Get_SerialNum+0x48>)
 801ce54:	681b      	ldr	r3, [r3, #0]
 801ce56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801ce58:	4b0f      	ldr	r3, [pc, #60]	@ (801ce98 <Get_SerialNum+0x4c>)
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801ce5e:	4b0f      	ldr	r3, [pc, #60]	@ (801ce9c <Get_SerialNum+0x50>)
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801ce64:	68fa      	ldr	r2, [r7, #12]
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	18d3      	adds	r3, r2, r3
 801ce6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801ce6c:	68fb      	ldr	r3, [r7, #12]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d00b      	beq.n	801ce8a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801ce72:	490b      	ldr	r1, [pc, #44]	@ (801cea0 <Get_SerialNum+0x54>)
 801ce74:	68fb      	ldr	r3, [r7, #12]
 801ce76:	2208      	movs	r2, #8
 801ce78:	0018      	movs	r0, r3
 801ce7a:	f000 f815 	bl	801cea8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801ce7e:	4909      	ldr	r1, [pc, #36]	@ (801cea4 <Get_SerialNum+0x58>)
 801ce80:	68bb      	ldr	r3, [r7, #8]
 801ce82:	2204      	movs	r2, #4
 801ce84:	0018      	movs	r0, r3
 801ce86:	f000 f80f 	bl	801cea8 <IntToUnicode>
  }
}
 801ce8a:	46c0      	nop			@ (mov r8, r8)
 801ce8c:	46bd      	mov	sp, r7
 801ce8e:	b004      	add	sp, #16
 801ce90:	bd80      	pop	{r7, pc}
 801ce92:	46c0      	nop			@ (mov r8, r8)
 801ce94:	1ff80050 	.word	0x1ff80050
 801ce98:	1ff80054 	.word	0x1ff80054
 801ce9c:	1ff80058 	.word	0x1ff80058
 801cea0:	2000023a 	.word	0x2000023a
 801cea4:	2000024a 	.word	0x2000024a

0801cea8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cea8:	b580      	push	{r7, lr}
 801ceaa:	b086      	sub	sp, #24
 801ceac:	af00      	add	r7, sp, #0
 801ceae:	60f8      	str	r0, [r7, #12]
 801ceb0:	60b9      	str	r1, [r7, #8]
 801ceb2:	1dfb      	adds	r3, r7, #7
 801ceb4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801ceb6:	2117      	movs	r1, #23
 801ceb8:	187b      	adds	r3, r7, r1
 801ceba:	2200      	movs	r2, #0
 801cebc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801cebe:	187b      	adds	r3, r7, r1
 801cec0:	2200      	movs	r2, #0
 801cec2:	701a      	strb	r2, [r3, #0]
 801cec4:	e02f      	b.n	801cf26 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	0f1b      	lsrs	r3, r3, #28
 801ceca:	2b09      	cmp	r3, #9
 801cecc:	d80d      	bhi.n	801ceea <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	0f1b      	lsrs	r3, r3, #28
 801ced2:	b2da      	uxtb	r2, r3
 801ced4:	2317      	movs	r3, #23
 801ced6:	18fb      	adds	r3, r7, r3
 801ced8:	781b      	ldrb	r3, [r3, #0]
 801ceda:	005b      	lsls	r3, r3, #1
 801cedc:	0019      	movs	r1, r3
 801cede:	68bb      	ldr	r3, [r7, #8]
 801cee0:	185b      	adds	r3, r3, r1
 801cee2:	3230      	adds	r2, #48	@ 0x30
 801cee4:	b2d2      	uxtb	r2, r2
 801cee6:	701a      	strb	r2, [r3, #0]
 801cee8:	e00c      	b.n	801cf04 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801ceea:	68fb      	ldr	r3, [r7, #12]
 801ceec:	0f1b      	lsrs	r3, r3, #28
 801ceee:	b2da      	uxtb	r2, r3
 801cef0:	2317      	movs	r3, #23
 801cef2:	18fb      	adds	r3, r7, r3
 801cef4:	781b      	ldrb	r3, [r3, #0]
 801cef6:	005b      	lsls	r3, r3, #1
 801cef8:	0019      	movs	r1, r3
 801cefa:	68bb      	ldr	r3, [r7, #8]
 801cefc:	185b      	adds	r3, r3, r1
 801cefe:	3237      	adds	r2, #55	@ 0x37
 801cf00:	b2d2      	uxtb	r2, r2
 801cf02:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	011b      	lsls	r3, r3, #4
 801cf08:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801cf0a:	2117      	movs	r1, #23
 801cf0c:	187b      	adds	r3, r7, r1
 801cf0e:	781b      	ldrb	r3, [r3, #0]
 801cf10:	005b      	lsls	r3, r3, #1
 801cf12:	3301      	adds	r3, #1
 801cf14:	68ba      	ldr	r2, [r7, #8]
 801cf16:	18d3      	adds	r3, r2, r3
 801cf18:	2200      	movs	r2, #0
 801cf1a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801cf1c:	187b      	adds	r3, r7, r1
 801cf1e:	781a      	ldrb	r2, [r3, #0]
 801cf20:	187b      	adds	r3, r7, r1
 801cf22:	3201      	adds	r2, #1
 801cf24:	701a      	strb	r2, [r3, #0]
 801cf26:	2317      	movs	r3, #23
 801cf28:	18fa      	adds	r2, r7, r3
 801cf2a:	1dfb      	adds	r3, r7, #7
 801cf2c:	7812      	ldrb	r2, [r2, #0]
 801cf2e:	781b      	ldrb	r3, [r3, #0]
 801cf30:	429a      	cmp	r2, r3
 801cf32:	d3c8      	bcc.n	801cec6 <IntToUnicode+0x1e>
  }
}
 801cf34:	46c0      	nop			@ (mov r8, r8)
 801cf36:	46c0      	nop			@ (mov r8, r8)
 801cf38:	46bd      	mov	sp, r7
 801cf3a:	b006      	add	sp, #24
 801cf3c:	bd80      	pop	{r7, pc}
	...

0801cf40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801cf40:	b580      	push	{r7, lr}
 801cf42:	b082      	sub	sp, #8
 801cf44:	af00      	add	r7, sp, #0
 801cf46:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	4a0a      	ldr	r2, [pc, #40]	@ (801cf78 <HAL_PCD_MspInit+0x38>)
 801cf4e:	4293      	cmp	r3, r2
 801cf50:	d10e      	bne.n	801cf70 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801cf52:	4b0a      	ldr	r3, [pc, #40]	@ (801cf7c <HAL_PCD_MspInit+0x3c>)
 801cf54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801cf56:	4b09      	ldr	r3, [pc, #36]	@ (801cf7c <HAL_PCD_MspInit+0x3c>)
 801cf58:	2180      	movs	r1, #128	@ 0x80
 801cf5a:	0409      	lsls	r1, r1, #16
 801cf5c:	430a      	orrs	r2, r1
 801cf5e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801cf60:	2200      	movs	r2, #0
 801cf62:	2100      	movs	r1, #0
 801cf64:	201f      	movs	r0, #31
 801cf66:	f7f2 fadf 	bl	800f528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801cf6a:	201f      	movs	r0, #31
 801cf6c:	f7f2 faf1 	bl	800f552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801cf70:	46c0      	nop			@ (mov r8, r8)
 801cf72:	46bd      	mov	sp, r7
 801cf74:	b002      	add	sp, #8
 801cf76:	bd80      	pop	{r7, pc}
 801cf78:	40005c00 	.word	0x40005c00
 801cf7c:	40021000 	.word	0x40021000

0801cf80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cf80:	b580      	push	{r7, lr}
 801cf82:	b082      	sub	sp, #8
 801cf84:	af00      	add	r7, sp, #0
 801cf86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801cf88:	687a      	ldr	r2, [r7, #4]
 801cf8a:	23bc      	movs	r3, #188	@ 0xbc
 801cf8c:	009b      	lsls	r3, r3, #2
 801cf8e:	58d2      	ldr	r2, [r2, r3]
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	21ac      	movs	r1, #172	@ 0xac
 801cf94:	0089      	lsls	r1, r1, #2
 801cf96:	468c      	mov	ip, r1
 801cf98:	4463      	add	r3, ip
 801cf9a:	0019      	movs	r1, r3
 801cf9c:	0010      	movs	r0, r2
 801cf9e:	f7fe fc1d 	bl	801b7dc <USBD_LL_SetupStage>
}
 801cfa2:	46c0      	nop			@ (mov r8, r8)
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	b002      	add	sp, #8
 801cfa8:	bd80      	pop	{r7, pc}

0801cfaa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cfaa:	b590      	push	{r4, r7, lr}
 801cfac:	b083      	sub	sp, #12
 801cfae:	af00      	add	r7, sp, #0
 801cfb0:	6078      	str	r0, [r7, #4]
 801cfb2:	000a      	movs	r2, r1
 801cfb4:	1cfb      	adds	r3, r7, #3
 801cfb6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801cfb8:	687a      	ldr	r2, [r7, #4]
 801cfba:	23bc      	movs	r3, #188	@ 0xbc
 801cfbc:	009b      	lsls	r3, r3, #2
 801cfbe:	58d4      	ldr	r4, [r2, r3]
 801cfc0:	1cfb      	adds	r3, r7, #3
 801cfc2:	781a      	ldrb	r2, [r3, #0]
 801cfc4:	6878      	ldr	r0, [r7, #4]
 801cfc6:	23be      	movs	r3, #190	@ 0xbe
 801cfc8:	0059      	lsls	r1, r3, #1
 801cfca:	0013      	movs	r3, r2
 801cfcc:	009b      	lsls	r3, r3, #2
 801cfce:	189b      	adds	r3, r3, r2
 801cfd0:	00db      	lsls	r3, r3, #3
 801cfd2:	18c3      	adds	r3, r0, r3
 801cfd4:	185b      	adds	r3, r3, r1
 801cfd6:	681a      	ldr	r2, [r3, #0]
 801cfd8:	1cfb      	adds	r3, r7, #3
 801cfda:	781b      	ldrb	r3, [r3, #0]
 801cfdc:	0019      	movs	r1, r3
 801cfde:	0020      	movs	r0, r4
 801cfe0:	f7fe fc5a 	bl	801b898 <USBD_LL_DataOutStage>
}
 801cfe4:	46c0      	nop			@ (mov r8, r8)
 801cfe6:	46bd      	mov	sp, r7
 801cfe8:	b003      	add	sp, #12
 801cfea:	bd90      	pop	{r4, r7, pc}

0801cfec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cfec:	b580      	push	{r7, lr}
 801cfee:	b082      	sub	sp, #8
 801cff0:	af00      	add	r7, sp, #0
 801cff2:	6078      	str	r0, [r7, #4]
 801cff4:	000a      	movs	r2, r1
 801cff6:	1cfb      	adds	r3, r7, #3
 801cff8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801cffa:	687a      	ldr	r2, [r7, #4]
 801cffc:	23bc      	movs	r3, #188	@ 0xbc
 801cffe:	009b      	lsls	r3, r3, #2
 801d000:	58d0      	ldr	r0, [r2, r3]
 801d002:	1cfb      	adds	r3, r7, #3
 801d004:	781a      	ldrb	r2, [r3, #0]
 801d006:	6879      	ldr	r1, [r7, #4]
 801d008:	0013      	movs	r3, r2
 801d00a:	009b      	lsls	r3, r3, #2
 801d00c:	189b      	adds	r3, r3, r2
 801d00e:	00db      	lsls	r3, r3, #3
 801d010:	18cb      	adds	r3, r1, r3
 801d012:	333c      	adds	r3, #60	@ 0x3c
 801d014:	681a      	ldr	r2, [r3, #0]
 801d016:	1cfb      	adds	r3, r7, #3
 801d018:	781b      	ldrb	r3, [r3, #0]
 801d01a:	0019      	movs	r1, r3
 801d01c:	f7fe fcbe 	bl	801b99c <USBD_LL_DataInStage>
}
 801d020:	46c0      	nop			@ (mov r8, r8)
 801d022:	46bd      	mov	sp, r7
 801d024:	b002      	add	sp, #8
 801d026:	bd80      	pop	{r7, pc}

0801d028 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d028:	b580      	push	{r7, lr}
 801d02a:	b082      	sub	sp, #8
 801d02c:	af00      	add	r7, sp, #0
 801d02e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d030:	687a      	ldr	r2, [r7, #4]
 801d032:	23bc      	movs	r3, #188	@ 0xbc
 801d034:	009b      	lsls	r3, r3, #2
 801d036:	58d3      	ldr	r3, [r2, r3]
 801d038:	0018      	movs	r0, r3
 801d03a:	f7fe fdf5 	bl	801bc28 <USBD_LL_SOF>
}
 801d03e:	46c0      	nop			@ (mov r8, r8)
 801d040:	46bd      	mov	sp, r7
 801d042:	b002      	add	sp, #8
 801d044:	bd80      	pop	{r7, pc}

0801d046 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d046:	b580      	push	{r7, lr}
 801d048:	b084      	sub	sp, #16
 801d04a:	af00      	add	r7, sp, #0
 801d04c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d04e:	230f      	movs	r3, #15
 801d050:	18fb      	adds	r3, r7, r3
 801d052:	2201      	movs	r2, #1
 801d054:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	689b      	ldr	r3, [r3, #8]
 801d05a:	2b02      	cmp	r3, #2
 801d05c:	d001      	beq.n	801d062 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d05e:	f7eb f923 	bl	80082a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d062:	687a      	ldr	r2, [r7, #4]
 801d064:	23bc      	movs	r3, #188	@ 0xbc
 801d066:	009b      	lsls	r3, r3, #2
 801d068:	58d2      	ldr	r2, [r2, r3]
 801d06a:	230f      	movs	r3, #15
 801d06c:	18fb      	adds	r3, r7, r3
 801d06e:	781b      	ldrb	r3, [r3, #0]
 801d070:	0019      	movs	r1, r3
 801d072:	0010      	movs	r0, r2
 801d074:	f7fe fd97 	bl	801bba6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d078:	687a      	ldr	r2, [r7, #4]
 801d07a:	23bc      	movs	r3, #188	@ 0xbc
 801d07c:	009b      	lsls	r3, r3, #2
 801d07e:	58d3      	ldr	r3, [r2, r3]
 801d080:	0018      	movs	r0, r3
 801d082:	f7fe fd48 	bl	801bb16 <USBD_LL_Reset>
}
 801d086:	46c0      	nop			@ (mov r8, r8)
 801d088:	46bd      	mov	sp, r7
 801d08a:	b004      	add	sp, #16
 801d08c:	bd80      	pop	{r7, pc}
	...

0801d090 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b082      	sub	sp, #8
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d098:	687a      	ldr	r2, [r7, #4]
 801d09a:	23bc      	movs	r3, #188	@ 0xbc
 801d09c:	009b      	lsls	r3, r3, #2
 801d09e:	58d3      	ldr	r3, [r2, r3]
 801d0a0:	0018      	movs	r0, r3
 801d0a2:	f7fe fd91 	bl	801bbc8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	699b      	ldr	r3, [r3, #24]
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d005      	beq.n	801d0ba <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d0ae:	4b05      	ldr	r3, [pc, #20]	@ (801d0c4 <HAL_PCD_SuspendCallback+0x34>)
 801d0b0:	691a      	ldr	r2, [r3, #16]
 801d0b2:	4b04      	ldr	r3, [pc, #16]	@ (801d0c4 <HAL_PCD_SuspendCallback+0x34>)
 801d0b4:	2106      	movs	r1, #6
 801d0b6:	430a      	orrs	r2, r1
 801d0b8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d0ba:	46c0      	nop			@ (mov r8, r8)
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	b002      	add	sp, #8
 801d0c0:	bd80      	pop	{r7, pc}
 801d0c2:	46c0      	nop			@ (mov r8, r8)
 801d0c4:	e000ed00 	.word	0xe000ed00

0801d0c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0c8:	b580      	push	{r7, lr}
 801d0ca:	b082      	sub	sp, #8
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	699b      	ldr	r3, [r3, #24]
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d007      	beq.n	801d0e8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d0d8:	4b09      	ldr	r3, [pc, #36]	@ (801d100 <HAL_PCD_ResumeCallback+0x38>)
 801d0da:	691a      	ldr	r2, [r3, #16]
 801d0dc:	4b08      	ldr	r3, [pc, #32]	@ (801d100 <HAL_PCD_ResumeCallback+0x38>)
 801d0de:	2106      	movs	r1, #6
 801d0e0:	438a      	bics	r2, r1
 801d0e2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d0e4:	f000 fa44 	bl	801d570 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d0e8:	687a      	ldr	r2, [r7, #4]
 801d0ea:	23bc      	movs	r3, #188	@ 0xbc
 801d0ec:	009b      	lsls	r3, r3, #2
 801d0ee:	58d3      	ldr	r3, [r2, r3]
 801d0f0:	0018      	movs	r0, r3
 801d0f2:	f7fe fd81 	bl	801bbf8 <USBD_LL_Resume>
}
 801d0f6:	46c0      	nop			@ (mov r8, r8)
 801d0f8:	46bd      	mov	sp, r7
 801d0fa:	b002      	add	sp, #8
 801d0fc:	bd80      	pop	{r7, pc}
 801d0fe:	46c0      	nop			@ (mov r8, r8)
 801d100:	e000ed00 	.word	0xe000ed00

0801d104 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d104:	b580      	push	{r7, lr}
 801d106:	b082      	sub	sp, #8
 801d108:	af00      	add	r7, sp, #0
 801d10a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d10c:	4a2d      	ldr	r2, [pc, #180]	@ (801d1c4 <USBD_LL_Init+0xc0>)
 801d10e:	23bc      	movs	r3, #188	@ 0xbc
 801d110:	009b      	lsls	r3, r3, #2
 801d112:	6879      	ldr	r1, [r7, #4]
 801d114:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d116:	687a      	ldr	r2, [r7, #4]
 801d118:	23b0      	movs	r3, #176	@ 0xb0
 801d11a:	009b      	lsls	r3, r3, #2
 801d11c:	4929      	ldr	r1, [pc, #164]	@ (801d1c4 <USBD_LL_Init+0xc0>)
 801d11e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d120:	4b28      	ldr	r3, [pc, #160]	@ (801d1c4 <USBD_LL_Init+0xc0>)
 801d122:	4a29      	ldr	r2, [pc, #164]	@ (801d1c8 <USBD_LL_Init+0xc4>)
 801d124:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d126:	4b27      	ldr	r3, [pc, #156]	@ (801d1c4 <USBD_LL_Init+0xc0>)
 801d128:	2208      	movs	r2, #8
 801d12a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d12c:	4b25      	ldr	r3, [pc, #148]	@ (801d1c4 <USBD_LL_Init+0xc0>)
 801d12e:	2202      	movs	r2, #2
 801d130:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d132:	4b24      	ldr	r3, [pc, #144]	@ (801d1c4 <USBD_LL_Init+0xc0>)
 801d134:	2202      	movs	r2, #2
 801d136:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d138:	4b22      	ldr	r3, [pc, #136]	@ (801d1c4 <USBD_LL_Init+0xc0>)
 801d13a:	2200      	movs	r2, #0
 801d13c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d13e:	4b21      	ldr	r3, [pc, #132]	@ (801d1c4 <USBD_LL_Init+0xc0>)
 801d140:	2200      	movs	r2, #0
 801d142:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d144:	4b1f      	ldr	r3, [pc, #124]	@ (801d1c4 <USBD_LL_Init+0xc0>)
 801d146:	2200      	movs	r2, #0
 801d148:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d14a:	4b1e      	ldr	r3, [pc, #120]	@ (801d1c4 <USBD_LL_Init+0xc0>)
 801d14c:	0018      	movs	r0, r3
 801d14e:	f7f5 ff95 	bl	801307c <HAL_PCD_Init>
 801d152:	1e03      	subs	r3, r0, #0
 801d154:	d001      	beq.n	801d15a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d156:	f7eb f8a7 	bl	80082a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d15a:	687a      	ldr	r2, [r7, #4]
 801d15c:	23b0      	movs	r3, #176	@ 0xb0
 801d15e:	009b      	lsls	r3, r3, #2
 801d160:	58d0      	ldr	r0, [r2, r3]
 801d162:	2318      	movs	r3, #24
 801d164:	2200      	movs	r2, #0
 801d166:	2100      	movs	r1, #0
 801d168:	f7f7 fd56 	bl	8014c18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d16c:	687a      	ldr	r2, [r7, #4]
 801d16e:	23b0      	movs	r3, #176	@ 0xb0
 801d170:	009b      	lsls	r3, r3, #2
 801d172:	58d0      	ldr	r0, [r2, r3]
 801d174:	2358      	movs	r3, #88	@ 0x58
 801d176:	2200      	movs	r2, #0
 801d178:	2180      	movs	r1, #128	@ 0x80
 801d17a:	f7f7 fd4d 	bl	8014c18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d17e:	687a      	ldr	r2, [r7, #4]
 801d180:	23b0      	movs	r3, #176	@ 0xb0
 801d182:	009b      	lsls	r3, r3, #2
 801d184:	58d0      	ldr	r0, [r2, r3]
 801d186:	23c0      	movs	r3, #192	@ 0xc0
 801d188:	2200      	movs	r2, #0
 801d18a:	2181      	movs	r1, #129	@ 0x81
 801d18c:	f7f7 fd44 	bl	8014c18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d190:	687a      	ldr	r2, [r7, #4]
 801d192:	23b0      	movs	r3, #176	@ 0xb0
 801d194:	009b      	lsls	r3, r3, #2
 801d196:	58d0      	ldr	r0, [r2, r3]
 801d198:	2388      	movs	r3, #136	@ 0x88
 801d19a:	005b      	lsls	r3, r3, #1
 801d19c:	2200      	movs	r2, #0
 801d19e:	2101      	movs	r1, #1
 801d1a0:	f7f7 fd3a 	bl	8014c18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d1a4:	687a      	ldr	r2, [r7, #4]
 801d1a6:	23b0      	movs	r3, #176	@ 0xb0
 801d1a8:	009b      	lsls	r3, r3, #2
 801d1aa:	58d0      	ldr	r0, [r2, r3]
 801d1ac:	2380      	movs	r3, #128	@ 0x80
 801d1ae:	005b      	lsls	r3, r3, #1
 801d1b0:	2200      	movs	r2, #0
 801d1b2:	2182      	movs	r1, #130	@ 0x82
 801d1b4:	f7f7 fd30 	bl	8014c18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d1b8:	2300      	movs	r3, #0
}
 801d1ba:	0018      	movs	r0, r3
 801d1bc:	46bd      	mov	sp, r7
 801d1be:	b002      	add	sp, #8
 801d1c0:	bd80      	pop	{r7, pc}
 801d1c2:	46c0      	nop			@ (mov r8, r8)
 801d1c4:	2000334c 	.word	0x2000334c
 801d1c8:	40005c00 	.word	0x40005c00

0801d1cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1ce:	b085      	sub	sp, #20
 801d1d0:	af00      	add	r7, sp, #0
 801d1d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d1d4:	210f      	movs	r1, #15
 801d1d6:	187b      	adds	r3, r7, r1
 801d1d8:	2200      	movs	r2, #0
 801d1da:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d1dc:	260e      	movs	r6, #14
 801d1de:	19bb      	adds	r3, r7, r6
 801d1e0:	2200      	movs	r2, #0
 801d1e2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d1e4:	687a      	ldr	r2, [r7, #4]
 801d1e6:	23b0      	movs	r3, #176	@ 0xb0
 801d1e8:	009b      	lsls	r3, r3, #2
 801d1ea:	58d3      	ldr	r3, [r2, r3]
 801d1ec:	000d      	movs	r5, r1
 801d1ee:	187c      	adds	r4, r7, r1
 801d1f0:	0018      	movs	r0, r3
 801d1f2:	f7f6 f843 	bl	801327c <HAL_PCD_Start>
 801d1f6:	0003      	movs	r3, r0
 801d1f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d1fa:	19bc      	adds	r4, r7, r6
 801d1fc:	197b      	adds	r3, r7, r5
 801d1fe:	781b      	ldrb	r3, [r3, #0]
 801d200:	0018      	movs	r0, r3
 801d202:	f000 f9bc 	bl	801d57e <USBD_Get_USB_Status>
 801d206:	0003      	movs	r3, r0
 801d208:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d20a:	19bb      	adds	r3, r7, r6
 801d20c:	781b      	ldrb	r3, [r3, #0]
}
 801d20e:	0018      	movs	r0, r3
 801d210:	46bd      	mov	sp, r7
 801d212:	b005      	add	sp, #20
 801d214:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d216 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d216:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d218:	b085      	sub	sp, #20
 801d21a:	af00      	add	r7, sp, #0
 801d21c:	6078      	str	r0, [r7, #4]
 801d21e:	000c      	movs	r4, r1
 801d220:	0010      	movs	r0, r2
 801d222:	0019      	movs	r1, r3
 801d224:	1cfb      	adds	r3, r7, #3
 801d226:	1c22      	adds	r2, r4, #0
 801d228:	701a      	strb	r2, [r3, #0]
 801d22a:	1cbb      	adds	r3, r7, #2
 801d22c:	1c02      	adds	r2, r0, #0
 801d22e:	701a      	strb	r2, [r3, #0]
 801d230:	003b      	movs	r3, r7
 801d232:	1c0a      	adds	r2, r1, #0
 801d234:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d236:	260f      	movs	r6, #15
 801d238:	19bb      	adds	r3, r7, r6
 801d23a:	2200      	movs	r2, #0
 801d23c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d23e:	250e      	movs	r5, #14
 801d240:	197b      	adds	r3, r7, r5
 801d242:	2200      	movs	r2, #0
 801d244:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d246:	687a      	ldr	r2, [r7, #4]
 801d248:	23b0      	movs	r3, #176	@ 0xb0
 801d24a:	009b      	lsls	r3, r3, #2
 801d24c:	58d0      	ldr	r0, [r2, r3]
 801d24e:	19bc      	adds	r4, r7, r6
 801d250:	1cbb      	adds	r3, r7, #2
 801d252:	781d      	ldrb	r5, [r3, #0]
 801d254:	003b      	movs	r3, r7
 801d256:	881a      	ldrh	r2, [r3, #0]
 801d258:	1cfb      	adds	r3, r7, #3
 801d25a:	7819      	ldrb	r1, [r3, #0]
 801d25c:	002b      	movs	r3, r5
 801d25e:	f7f6 f9a2 	bl	80135a6 <HAL_PCD_EP_Open>
 801d262:	0003      	movs	r3, r0
 801d264:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d266:	250e      	movs	r5, #14
 801d268:	197c      	adds	r4, r7, r5
 801d26a:	19bb      	adds	r3, r7, r6
 801d26c:	781b      	ldrb	r3, [r3, #0]
 801d26e:	0018      	movs	r0, r3
 801d270:	f000 f985 	bl	801d57e <USBD_Get_USB_Status>
 801d274:	0003      	movs	r3, r0
 801d276:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d278:	197b      	adds	r3, r7, r5
 801d27a:	781b      	ldrb	r3, [r3, #0]
}
 801d27c:	0018      	movs	r0, r3
 801d27e:	46bd      	mov	sp, r7
 801d280:	b005      	add	sp, #20
 801d282:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d284 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d284:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d286:	b085      	sub	sp, #20
 801d288:	af00      	add	r7, sp, #0
 801d28a:	6078      	str	r0, [r7, #4]
 801d28c:	000a      	movs	r2, r1
 801d28e:	1cfb      	adds	r3, r7, #3
 801d290:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d292:	210f      	movs	r1, #15
 801d294:	187b      	adds	r3, r7, r1
 801d296:	2200      	movs	r2, #0
 801d298:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d29a:	260e      	movs	r6, #14
 801d29c:	19bb      	adds	r3, r7, r6
 801d29e:	2200      	movs	r2, #0
 801d2a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d2a2:	687a      	ldr	r2, [r7, #4]
 801d2a4:	23b0      	movs	r3, #176	@ 0xb0
 801d2a6:	009b      	lsls	r3, r3, #2
 801d2a8:	58d2      	ldr	r2, [r2, r3]
 801d2aa:	000d      	movs	r5, r1
 801d2ac:	187c      	adds	r4, r7, r1
 801d2ae:	1cfb      	adds	r3, r7, #3
 801d2b0:	781b      	ldrb	r3, [r3, #0]
 801d2b2:	0019      	movs	r1, r3
 801d2b4:	0010      	movs	r0, r2
 801d2b6:	f7f6 f9e5 	bl	8013684 <HAL_PCD_EP_Close>
 801d2ba:	0003      	movs	r3, r0
 801d2bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d2be:	19bc      	adds	r4, r7, r6
 801d2c0:	197b      	adds	r3, r7, r5
 801d2c2:	781b      	ldrb	r3, [r3, #0]
 801d2c4:	0018      	movs	r0, r3
 801d2c6:	f000 f95a 	bl	801d57e <USBD_Get_USB_Status>
 801d2ca:	0003      	movs	r3, r0
 801d2cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d2ce:	19bb      	adds	r3, r7, r6
 801d2d0:	781b      	ldrb	r3, [r3, #0]
}
 801d2d2:	0018      	movs	r0, r3
 801d2d4:	46bd      	mov	sp, r7
 801d2d6:	b005      	add	sp, #20
 801d2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d2da <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d2da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2dc:	b085      	sub	sp, #20
 801d2de:	af00      	add	r7, sp, #0
 801d2e0:	6078      	str	r0, [r7, #4]
 801d2e2:	000a      	movs	r2, r1
 801d2e4:	1cfb      	adds	r3, r7, #3
 801d2e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d2e8:	210f      	movs	r1, #15
 801d2ea:	187b      	adds	r3, r7, r1
 801d2ec:	2200      	movs	r2, #0
 801d2ee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d2f0:	260e      	movs	r6, #14
 801d2f2:	19bb      	adds	r3, r7, r6
 801d2f4:	2200      	movs	r2, #0
 801d2f6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d2f8:	687a      	ldr	r2, [r7, #4]
 801d2fa:	23b0      	movs	r3, #176	@ 0xb0
 801d2fc:	009b      	lsls	r3, r3, #2
 801d2fe:	58d2      	ldr	r2, [r2, r3]
 801d300:	000d      	movs	r5, r1
 801d302:	187c      	adds	r4, r7, r1
 801d304:	1cfb      	adds	r3, r7, #3
 801d306:	781b      	ldrb	r3, [r3, #0]
 801d308:	0019      	movs	r1, r3
 801d30a:	0010      	movs	r0, r2
 801d30c:	f7f6 fa97 	bl	801383e <HAL_PCD_EP_SetStall>
 801d310:	0003      	movs	r3, r0
 801d312:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d314:	19bc      	adds	r4, r7, r6
 801d316:	197b      	adds	r3, r7, r5
 801d318:	781b      	ldrb	r3, [r3, #0]
 801d31a:	0018      	movs	r0, r3
 801d31c:	f000 f92f 	bl	801d57e <USBD_Get_USB_Status>
 801d320:	0003      	movs	r3, r0
 801d322:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d324:	19bb      	adds	r3, r7, r6
 801d326:	781b      	ldrb	r3, [r3, #0]
}
 801d328:	0018      	movs	r0, r3
 801d32a:	46bd      	mov	sp, r7
 801d32c:	b005      	add	sp, #20
 801d32e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d330 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d330:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d332:	b085      	sub	sp, #20
 801d334:	af00      	add	r7, sp, #0
 801d336:	6078      	str	r0, [r7, #4]
 801d338:	000a      	movs	r2, r1
 801d33a:	1cfb      	adds	r3, r7, #3
 801d33c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d33e:	210f      	movs	r1, #15
 801d340:	187b      	adds	r3, r7, r1
 801d342:	2200      	movs	r2, #0
 801d344:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d346:	260e      	movs	r6, #14
 801d348:	19bb      	adds	r3, r7, r6
 801d34a:	2200      	movs	r2, #0
 801d34c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d34e:	687a      	ldr	r2, [r7, #4]
 801d350:	23b0      	movs	r3, #176	@ 0xb0
 801d352:	009b      	lsls	r3, r3, #2
 801d354:	58d2      	ldr	r2, [r2, r3]
 801d356:	000d      	movs	r5, r1
 801d358:	187c      	adds	r4, r7, r1
 801d35a:	1cfb      	adds	r3, r7, #3
 801d35c:	781b      	ldrb	r3, [r3, #0]
 801d35e:	0019      	movs	r1, r3
 801d360:	0010      	movs	r0, r2
 801d362:	f7f6 fac8 	bl	80138f6 <HAL_PCD_EP_ClrStall>
 801d366:	0003      	movs	r3, r0
 801d368:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d36a:	19bc      	adds	r4, r7, r6
 801d36c:	197b      	adds	r3, r7, r5
 801d36e:	781b      	ldrb	r3, [r3, #0]
 801d370:	0018      	movs	r0, r3
 801d372:	f000 f904 	bl	801d57e <USBD_Get_USB_Status>
 801d376:	0003      	movs	r3, r0
 801d378:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d37a:	19bb      	adds	r3, r7, r6
 801d37c:	781b      	ldrb	r3, [r3, #0]
}
 801d37e:	0018      	movs	r0, r3
 801d380:	46bd      	mov	sp, r7
 801d382:	b005      	add	sp, #20
 801d384:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d386 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d386:	b580      	push	{r7, lr}
 801d388:	b084      	sub	sp, #16
 801d38a:	af00      	add	r7, sp, #0
 801d38c:	6078      	str	r0, [r7, #4]
 801d38e:	000a      	movs	r2, r1
 801d390:	1cfb      	adds	r3, r7, #3
 801d392:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d394:	687a      	ldr	r2, [r7, #4]
 801d396:	23b0      	movs	r3, #176	@ 0xb0
 801d398:	009b      	lsls	r3, r3, #2
 801d39a:	58d3      	ldr	r3, [r2, r3]
 801d39c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d39e:	1cfb      	adds	r3, r7, #3
 801d3a0:	781b      	ldrb	r3, [r3, #0]
 801d3a2:	b25b      	sxtb	r3, r3
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	da0d      	bge.n	801d3c4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d3a8:	1cfb      	adds	r3, r7, #3
 801d3aa:	781b      	ldrb	r3, [r3, #0]
 801d3ac:	227f      	movs	r2, #127	@ 0x7f
 801d3ae:	4013      	ands	r3, r2
 801d3b0:	68f9      	ldr	r1, [r7, #12]
 801d3b2:	1c5a      	adds	r2, r3, #1
 801d3b4:	0013      	movs	r3, r2
 801d3b6:	009b      	lsls	r3, r3, #2
 801d3b8:	189b      	adds	r3, r3, r2
 801d3ba:	00db      	lsls	r3, r3, #3
 801d3bc:	18cb      	adds	r3, r1, r3
 801d3be:	3302      	adds	r3, #2
 801d3c0:	781b      	ldrb	r3, [r3, #0]
 801d3c2:	e00d      	b.n	801d3e0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d3c4:	1cfb      	adds	r3, r7, #3
 801d3c6:	781b      	ldrb	r3, [r3, #0]
 801d3c8:	227f      	movs	r2, #127	@ 0x7f
 801d3ca:	401a      	ands	r2, r3
 801d3cc:	68f8      	ldr	r0, [r7, #12]
 801d3ce:	23b5      	movs	r3, #181	@ 0xb5
 801d3d0:	0059      	lsls	r1, r3, #1
 801d3d2:	0013      	movs	r3, r2
 801d3d4:	009b      	lsls	r3, r3, #2
 801d3d6:	189b      	adds	r3, r3, r2
 801d3d8:	00db      	lsls	r3, r3, #3
 801d3da:	18c3      	adds	r3, r0, r3
 801d3dc:	185b      	adds	r3, r3, r1
 801d3de:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d3e0:	0018      	movs	r0, r3
 801d3e2:	46bd      	mov	sp, r7
 801d3e4:	b004      	add	sp, #16
 801d3e6:	bd80      	pop	{r7, pc}

0801d3e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3ea:	b085      	sub	sp, #20
 801d3ec:	af00      	add	r7, sp, #0
 801d3ee:	6078      	str	r0, [r7, #4]
 801d3f0:	000a      	movs	r2, r1
 801d3f2:	1cfb      	adds	r3, r7, #3
 801d3f4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d3f6:	210f      	movs	r1, #15
 801d3f8:	187b      	adds	r3, r7, r1
 801d3fa:	2200      	movs	r2, #0
 801d3fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d3fe:	260e      	movs	r6, #14
 801d400:	19bb      	adds	r3, r7, r6
 801d402:	2200      	movs	r2, #0
 801d404:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d406:	687a      	ldr	r2, [r7, #4]
 801d408:	23b0      	movs	r3, #176	@ 0xb0
 801d40a:	009b      	lsls	r3, r3, #2
 801d40c:	58d2      	ldr	r2, [r2, r3]
 801d40e:	000d      	movs	r5, r1
 801d410:	187c      	adds	r4, r7, r1
 801d412:	1cfb      	adds	r3, r7, #3
 801d414:	781b      	ldrb	r3, [r3, #0]
 801d416:	0019      	movs	r1, r3
 801d418:	0010      	movs	r0, r2
 801d41a:	f7f6 f899 	bl	8013550 <HAL_PCD_SetAddress>
 801d41e:	0003      	movs	r3, r0
 801d420:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d422:	19bc      	adds	r4, r7, r6
 801d424:	197b      	adds	r3, r7, r5
 801d426:	781b      	ldrb	r3, [r3, #0]
 801d428:	0018      	movs	r0, r3
 801d42a:	f000 f8a8 	bl	801d57e <USBD_Get_USB_Status>
 801d42e:	0003      	movs	r3, r0
 801d430:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d432:	19bb      	adds	r3, r7, r6
 801d434:	781b      	ldrb	r3, [r3, #0]
}
 801d436:	0018      	movs	r0, r3
 801d438:	46bd      	mov	sp, r7
 801d43a:	b005      	add	sp, #20
 801d43c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d43e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d43e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d440:	b087      	sub	sp, #28
 801d442:	af00      	add	r7, sp, #0
 801d444:	60f8      	str	r0, [r7, #12]
 801d446:	0008      	movs	r0, r1
 801d448:	607a      	str	r2, [r7, #4]
 801d44a:	0019      	movs	r1, r3
 801d44c:	230b      	movs	r3, #11
 801d44e:	18fb      	adds	r3, r7, r3
 801d450:	1c02      	adds	r2, r0, #0
 801d452:	701a      	strb	r2, [r3, #0]
 801d454:	2408      	movs	r4, #8
 801d456:	193b      	adds	r3, r7, r4
 801d458:	1c0a      	adds	r2, r1, #0
 801d45a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d45c:	2117      	movs	r1, #23
 801d45e:	187b      	adds	r3, r7, r1
 801d460:	2200      	movs	r2, #0
 801d462:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d464:	2516      	movs	r5, #22
 801d466:	197b      	adds	r3, r7, r5
 801d468:	2200      	movs	r2, #0
 801d46a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d46c:	68fa      	ldr	r2, [r7, #12]
 801d46e:	23b0      	movs	r3, #176	@ 0xb0
 801d470:	009b      	lsls	r3, r3, #2
 801d472:	58d0      	ldr	r0, [r2, r3]
 801d474:	193b      	adds	r3, r7, r4
 801d476:	881d      	ldrh	r5, [r3, #0]
 801d478:	000e      	movs	r6, r1
 801d47a:	187c      	adds	r4, r7, r1
 801d47c:	687a      	ldr	r2, [r7, #4]
 801d47e:	230b      	movs	r3, #11
 801d480:	18fb      	adds	r3, r7, r3
 801d482:	7819      	ldrb	r1, [r3, #0]
 801d484:	002b      	movs	r3, r5
 801d486:	f7f6 f99e 	bl	80137c6 <HAL_PCD_EP_Transmit>
 801d48a:	0003      	movs	r3, r0
 801d48c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d48e:	2516      	movs	r5, #22
 801d490:	197c      	adds	r4, r7, r5
 801d492:	19bb      	adds	r3, r7, r6
 801d494:	781b      	ldrb	r3, [r3, #0]
 801d496:	0018      	movs	r0, r3
 801d498:	f000 f871 	bl	801d57e <USBD_Get_USB_Status>
 801d49c:	0003      	movs	r3, r0
 801d49e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d4a0:	197b      	adds	r3, r7, r5
 801d4a2:	781b      	ldrb	r3, [r3, #0]
}
 801d4a4:	0018      	movs	r0, r3
 801d4a6:	46bd      	mov	sp, r7
 801d4a8:	b007      	add	sp, #28
 801d4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d4ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4ae:	b087      	sub	sp, #28
 801d4b0:	af00      	add	r7, sp, #0
 801d4b2:	60f8      	str	r0, [r7, #12]
 801d4b4:	0008      	movs	r0, r1
 801d4b6:	607a      	str	r2, [r7, #4]
 801d4b8:	0019      	movs	r1, r3
 801d4ba:	230b      	movs	r3, #11
 801d4bc:	18fb      	adds	r3, r7, r3
 801d4be:	1c02      	adds	r2, r0, #0
 801d4c0:	701a      	strb	r2, [r3, #0]
 801d4c2:	2408      	movs	r4, #8
 801d4c4:	193b      	adds	r3, r7, r4
 801d4c6:	1c0a      	adds	r2, r1, #0
 801d4c8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4ca:	2117      	movs	r1, #23
 801d4cc:	187b      	adds	r3, r7, r1
 801d4ce:	2200      	movs	r2, #0
 801d4d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4d2:	2516      	movs	r5, #22
 801d4d4:	197b      	adds	r3, r7, r5
 801d4d6:	2200      	movs	r2, #0
 801d4d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d4da:	68fa      	ldr	r2, [r7, #12]
 801d4dc:	23b0      	movs	r3, #176	@ 0xb0
 801d4de:	009b      	lsls	r3, r3, #2
 801d4e0:	58d0      	ldr	r0, [r2, r3]
 801d4e2:	193b      	adds	r3, r7, r4
 801d4e4:	881d      	ldrh	r5, [r3, #0]
 801d4e6:	000e      	movs	r6, r1
 801d4e8:	187c      	adds	r4, r7, r1
 801d4ea:	687a      	ldr	r2, [r7, #4]
 801d4ec:	230b      	movs	r3, #11
 801d4ee:	18fb      	adds	r3, r7, r3
 801d4f0:	7819      	ldrb	r1, [r3, #0]
 801d4f2:	002b      	movs	r3, r5
 801d4f4:	f7f6 f917 	bl	8013726 <HAL_PCD_EP_Receive>
 801d4f8:	0003      	movs	r3, r0
 801d4fa:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4fc:	2516      	movs	r5, #22
 801d4fe:	197c      	adds	r4, r7, r5
 801d500:	19bb      	adds	r3, r7, r6
 801d502:	781b      	ldrb	r3, [r3, #0]
 801d504:	0018      	movs	r0, r3
 801d506:	f000 f83a 	bl	801d57e <USBD_Get_USB_Status>
 801d50a:	0003      	movs	r3, r0
 801d50c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d50e:	197b      	adds	r3, r7, r5
 801d510:	781b      	ldrb	r3, [r3, #0]
}
 801d512:	0018      	movs	r0, r3
 801d514:	46bd      	mov	sp, r7
 801d516:	b007      	add	sp, #28
 801d518:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d51a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d51a:	b580      	push	{r7, lr}
 801d51c:	b082      	sub	sp, #8
 801d51e:	af00      	add	r7, sp, #0
 801d520:	6078      	str	r0, [r7, #4]
 801d522:	000a      	movs	r2, r1
 801d524:	1cfb      	adds	r3, r7, #3
 801d526:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d528:	687a      	ldr	r2, [r7, #4]
 801d52a:	23b0      	movs	r3, #176	@ 0xb0
 801d52c:	009b      	lsls	r3, r3, #2
 801d52e:	58d2      	ldr	r2, [r2, r3]
 801d530:	1cfb      	adds	r3, r7, #3
 801d532:	781b      	ldrb	r3, [r3, #0]
 801d534:	0019      	movs	r1, r3
 801d536:	0010      	movs	r0, r2
 801d538:	f7f6 f92c 	bl	8013794 <HAL_PCD_EP_GetRxCount>
 801d53c:	0003      	movs	r3, r0
}
 801d53e:	0018      	movs	r0, r3
 801d540:	46bd      	mov	sp, r7
 801d542:	b002      	add	sp, #8
 801d544:	bd80      	pop	{r7, pc}
	...

0801d548 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d548:	b580      	push	{r7, lr}
 801d54a:	b082      	sub	sp, #8
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d550:	4b02      	ldr	r3, [pc, #8]	@ (801d55c <USBD_static_malloc+0x14>)
}
 801d552:	0018      	movs	r0, r3
 801d554:	46bd      	mov	sp, r7
 801d556:	b002      	add	sp, #8
 801d558:	bd80      	pop	{r7, pc}
 801d55a:	46c0      	nop			@ (mov r8, r8)
 801d55c:	20003640 	.word	0x20003640

0801d560 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d560:	b580      	push	{r7, lr}
 801d562:	b082      	sub	sp, #8
 801d564:	af00      	add	r7, sp, #0
 801d566:	6078      	str	r0, [r7, #4]

}
 801d568:	46c0      	nop			@ (mov r8, r8)
 801d56a:	46bd      	mov	sp, r7
 801d56c:	b002      	add	sp, #8
 801d56e:	bd80      	pop	{r7, pc}

0801d570 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d570:	b580      	push	{r7, lr}
 801d572:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d574:	f7ea fd42 	bl	8007ffc <SystemClock_Config>
}
 801d578:	46c0      	nop			@ (mov r8, r8)
 801d57a:	46bd      	mov	sp, r7
 801d57c:	bd80      	pop	{r7, pc}

0801d57e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d57e:	b580      	push	{r7, lr}
 801d580:	b084      	sub	sp, #16
 801d582:	af00      	add	r7, sp, #0
 801d584:	0002      	movs	r2, r0
 801d586:	1dfb      	adds	r3, r7, #7
 801d588:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d58a:	230f      	movs	r3, #15
 801d58c:	18fb      	adds	r3, r7, r3
 801d58e:	2200      	movs	r2, #0
 801d590:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801d592:	1dfb      	adds	r3, r7, #7
 801d594:	781b      	ldrb	r3, [r3, #0]
 801d596:	2b03      	cmp	r3, #3
 801d598:	d017      	beq.n	801d5ca <USBD_Get_USB_Status+0x4c>
 801d59a:	dc1b      	bgt.n	801d5d4 <USBD_Get_USB_Status+0x56>
 801d59c:	2b02      	cmp	r3, #2
 801d59e:	d00f      	beq.n	801d5c0 <USBD_Get_USB_Status+0x42>
 801d5a0:	dc18      	bgt.n	801d5d4 <USBD_Get_USB_Status+0x56>
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d002      	beq.n	801d5ac <USBD_Get_USB_Status+0x2e>
 801d5a6:	2b01      	cmp	r3, #1
 801d5a8:	d005      	beq.n	801d5b6 <USBD_Get_USB_Status+0x38>
 801d5aa:	e013      	b.n	801d5d4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d5ac:	230f      	movs	r3, #15
 801d5ae:	18fb      	adds	r3, r7, r3
 801d5b0:	2200      	movs	r2, #0
 801d5b2:	701a      	strb	r2, [r3, #0]
    break;
 801d5b4:	e013      	b.n	801d5de <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d5b6:	230f      	movs	r3, #15
 801d5b8:	18fb      	adds	r3, r7, r3
 801d5ba:	2202      	movs	r2, #2
 801d5bc:	701a      	strb	r2, [r3, #0]
    break;
 801d5be:	e00e      	b.n	801d5de <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d5c0:	230f      	movs	r3, #15
 801d5c2:	18fb      	adds	r3, r7, r3
 801d5c4:	2201      	movs	r2, #1
 801d5c6:	701a      	strb	r2, [r3, #0]
    break;
 801d5c8:	e009      	b.n	801d5de <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d5ca:	230f      	movs	r3, #15
 801d5cc:	18fb      	adds	r3, r7, r3
 801d5ce:	2202      	movs	r2, #2
 801d5d0:	701a      	strb	r2, [r3, #0]
    break;
 801d5d2:	e004      	b.n	801d5de <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801d5d4:	230f      	movs	r3, #15
 801d5d6:	18fb      	adds	r3, r7, r3
 801d5d8:	2202      	movs	r2, #2
 801d5da:	701a      	strb	r2, [r3, #0]
    break;
 801d5dc:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801d5de:	230f      	movs	r3, #15
 801d5e0:	18fb      	adds	r3, r7, r3
 801d5e2:	781b      	ldrb	r3, [r3, #0]
}
 801d5e4:	0018      	movs	r0, r3
 801d5e6:	46bd      	mov	sp, r7
 801d5e8:	b004      	add	sp, #16
 801d5ea:	bd80      	pop	{r7, pc}

0801d5ec <arm_cfft_radix4by2_q31>:
 801d5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5ee:	465f      	mov	r7, fp
 801d5f0:	4656      	mov	r6, sl
 801d5f2:	464d      	mov	r5, r9
 801d5f4:	4644      	mov	r4, r8
 801d5f6:	000b      	movs	r3, r1
 801d5f8:	b4f0      	push	{r4, r5, r6, r7}
 801d5fa:	085b      	lsrs	r3, r3, #1
 801d5fc:	b08f      	sub	sp, #60	@ 0x3c
 801d5fe:	910a      	str	r1, [sp, #40]	@ 0x28
 801d600:	0007      	movs	r7, r0
 801d602:	9009      	str	r0, [sp, #36]	@ 0x24
 801d604:	0011      	movs	r1, r2
 801d606:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d608:	930c      	str	r3, [sp, #48]	@ 0x30
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d100      	bne.n	801d610 <arm_cfft_radix4by2_q31+0x24>
 801d60e:	e0a0      	b.n	801d752 <arm_cfft_radix4by2_q31+0x166>
 801d610:	0002      	movs	r2, r0
 801d612:	00db      	lsls	r3, r3, #3
 801d614:	3204      	adds	r2, #4
 801d616:	4691      	mov	r9, r2
 801d618:	4698      	mov	r8, r3
 801d61a:	000a      	movs	r2, r1
 801d61c:	464e      	mov	r6, r9
 801d61e:	4442      	add	r2, r8
 801d620:	4699      	mov	r9, r3
 801d622:	4688      	mov	r8, r1
 801d624:	9208      	str	r2, [sp, #32]
 801d626:	900d      	str	r0, [sp, #52]	@ 0x34
 801d628:	4643      	mov	r3, r8
 801d62a:	681b      	ldr	r3, [r3, #0]
 801d62c:	469b      	mov	fp, r3
 801d62e:	4643      	mov	r3, r8
 801d630:	685b      	ldr	r3, [r3, #4]
 801d632:	469a      	mov	sl, r3
 801d634:	683b      	ldr	r3, [r7, #0]
 801d636:	109c      	asrs	r4, r3, #2
 801d638:	464b      	mov	r3, r9
 801d63a:	58fb      	ldr	r3, [r7, r3]
 801d63c:	109a      	asrs	r2, r3, #2
 801d63e:	18a3      	adds	r3, r4, r2
 801d640:	603b      	str	r3, [r7, #0]
 801d642:	6833      	ldr	r3, [r6, #0]
 801d644:	1aa4      	subs	r4, r4, r2
 801d646:	109d      	asrs	r5, r3, #2
 801d648:	464b      	mov	r3, r9
 801d64a:	58f3      	ldr	r3, [r6, r3]
 801d64c:	17e2      	asrs	r2, r4, #31
 801d64e:	109b      	asrs	r3, r3, #2
 801d650:	18e9      	adds	r1, r5, r3
 801d652:	6031      	str	r1, [r6, #0]
 801d654:	0011      	movs	r1, r2
 801d656:	465a      	mov	r2, fp
 801d658:	17d2      	asrs	r2, r2, #31
 801d65a:	0010      	movs	r0, r2
 801d65c:	4652      	mov	r2, sl
 801d65e:	1aed      	subs	r5, r5, r3
 801d660:	17eb      	asrs	r3, r5, #31
 801d662:	17d2      	asrs	r2, r2, #31
 801d664:	9307      	str	r3, [sp, #28]
 801d666:	9204      	str	r2, [sp, #16]
 801d668:	0003      	movs	r3, r0
 801d66a:	465a      	mov	r2, fp
 801d66c:	9006      	str	r0, [sp, #24]
 801d66e:	0020      	movs	r0, r4
 801d670:	9105      	str	r1, [sp, #20]
 801d672:	f7e2 ffa5 	bl	80005c0 <__aeabi_lmul>
 801d676:	2280      	movs	r2, #128	@ 0x80
 801d678:	2300      	movs	r3, #0
 801d67a:	0612      	lsls	r2, r2, #24
 801d67c:	1880      	adds	r0, r0, r2
 801d67e:	4159      	adcs	r1, r3
 801d680:	2300      	movs	r3, #0
 801d682:	9101      	str	r1, [sp, #4]
 801d684:	9300      	str	r3, [sp, #0]
 801d686:	4652      	mov	r2, sl
 801d688:	9b04      	ldr	r3, [sp, #16]
 801d68a:	0028      	movs	r0, r5
 801d68c:	17e9      	asrs	r1, r5, #31
 801d68e:	f7e2 ff97 	bl	80005c0 <__aeabi_lmul>
 801d692:	9a00      	ldr	r2, [sp, #0]
 801d694:	9b01      	ldr	r3, [sp, #4]
 801d696:	1880      	adds	r0, r0, r2
 801d698:	4159      	adcs	r1, r3
 801d69a:	2280      	movs	r2, #128	@ 0x80
 801d69c:	2300      	movs	r3, #0
 801d69e:	0612      	lsls	r2, r2, #24
 801d6a0:	1880      	adds	r0, r0, r2
 801d6a2:	4159      	adcs	r1, r3
 801d6a4:	464a      	mov	r2, r9
 801d6a6:	004b      	lsls	r3, r1, #1
 801d6a8:	50bb      	str	r3, [r7, r2]
 801d6aa:	4658      	mov	r0, fp
 801d6ac:	002a      	movs	r2, r5
 801d6ae:	9b07      	ldr	r3, [sp, #28]
 801d6b0:	9906      	ldr	r1, [sp, #24]
 801d6b2:	f7e2 ff85 	bl	80005c0 <__aeabi_lmul>
 801d6b6:	2280      	movs	r2, #128	@ 0x80
 801d6b8:	2300      	movs	r3, #0
 801d6ba:	0612      	lsls	r2, r2, #24
 801d6bc:	1880      	adds	r0, r0, r2
 801d6be:	4159      	adcs	r1, r3
 801d6c0:	2000      	movs	r0, #0
 801d6c2:	9103      	str	r1, [sp, #12]
 801d6c4:	9002      	str	r0, [sp, #8]
 801d6c6:	4652      	mov	r2, sl
 801d6c8:	9b04      	ldr	r3, [sp, #16]
 801d6ca:	0020      	movs	r0, r4
 801d6cc:	9905      	ldr	r1, [sp, #20]
 801d6ce:	f7e2 ff77 	bl	80005c0 <__aeabi_lmul>
 801d6d2:	9a02      	ldr	r2, [sp, #8]
 801d6d4:	9b03      	ldr	r3, [sp, #12]
 801d6d6:	1a12      	subs	r2, r2, r0
 801d6d8:	418b      	sbcs	r3, r1
 801d6da:	2080      	movs	r0, #128	@ 0x80
 801d6dc:	2100      	movs	r1, #0
 801d6de:	0600      	lsls	r0, r0, #24
 801d6e0:	1812      	adds	r2, r2, r0
 801d6e2:	414b      	adcs	r3, r1
 801d6e4:	464a      	mov	r2, r9
 801d6e6:	005b      	lsls	r3, r3, #1
 801d6e8:	50b3      	str	r3, [r6, r2]
 801d6ea:	2308      	movs	r3, #8
 801d6ec:	469c      	mov	ip, r3
 801d6ee:	9b08      	ldr	r3, [sp, #32]
 801d6f0:	44e0      	add	r8, ip
 801d6f2:	3708      	adds	r7, #8
 801d6f4:	3608      	adds	r6, #8
 801d6f6:	4598      	cmp	r8, r3
 801d6f8:	d196      	bne.n	801d628 <arm_cfft_radix4by2_q31+0x3c>
 801d6fa:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d6fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d6fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d700:	2302      	movs	r3, #2
 801d702:	003a      	movs	r2, r7
 801d704:	0029      	movs	r1, r5
 801d706:	0020      	movs	r0, r4
 801d708:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d70a:	f000 f957 	bl	801d9bc <arm_radix4_butterfly_q31>
 801d70e:	46a4      	mov	ip, r4
 801d710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d712:	2302      	movs	r3, #2
 801d714:	0088      	lsls	r0, r1, #2
 801d716:	4460      	add	r0, ip
 801d718:	003a      	movs	r2, r7
 801d71a:	0029      	movs	r1, r5
 801d71c:	f000 f94e 	bl	801d9bc <arm_radix4_butterfly_q31>
 801d720:	46a4      	mov	ip, r4
 801d722:	0128      	lsls	r0, r5, #4
 801d724:	4460      	add	r0, ip
 801d726:	6833      	ldr	r3, [r6, #0]
 801d728:	005b      	lsls	r3, r3, #1
 801d72a:	6033      	str	r3, [r6, #0]
 801d72c:	6873      	ldr	r3, [r6, #4]
 801d72e:	005b      	lsls	r3, r3, #1
 801d730:	6073      	str	r3, [r6, #4]
 801d732:	68b3      	ldr	r3, [r6, #8]
 801d734:	005b      	lsls	r3, r3, #1
 801d736:	60b3      	str	r3, [r6, #8]
 801d738:	68f3      	ldr	r3, [r6, #12]
 801d73a:	005b      	lsls	r3, r3, #1
 801d73c:	60f3      	str	r3, [r6, #12]
 801d73e:	3610      	adds	r6, #16
 801d740:	42b0      	cmp	r0, r6
 801d742:	d1f0      	bne.n	801d726 <arm_cfft_radix4by2_q31+0x13a>
 801d744:	b00f      	add	sp, #60	@ 0x3c
 801d746:	bc3c      	pop	{r2, r3, r4, r5}
 801d748:	4690      	mov	r8, r2
 801d74a:	4699      	mov	r9, r3
 801d74c:	46a2      	mov	sl, r4
 801d74e:	46ab      	mov	fp, r5
 801d750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d752:	2302      	movs	r3, #2
 801d754:	2100      	movs	r1, #0
 801d756:	0015      	movs	r5, r2
 801d758:	f000 f930 	bl	801d9bc <arm_radix4_butterfly_q31>
 801d75c:	46bc      	mov	ip, r7
 801d75e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d760:	002a      	movs	r2, r5
 801d762:	0098      	lsls	r0, r3, #2
 801d764:	4460      	add	r0, ip
 801d766:	2302      	movs	r3, #2
 801d768:	2100      	movs	r1, #0
 801d76a:	f000 f927 	bl	801d9bc <arm_radix4_butterfly_q31>
 801d76e:	e7e9      	b.n	801d744 <arm_cfft_radix4by2_q31+0x158>

0801d770 <arm_cfft_radix4by2_inverse_q31>:
 801d770:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d772:	465f      	mov	r7, fp
 801d774:	4656      	mov	r6, sl
 801d776:	464d      	mov	r5, r9
 801d778:	4644      	mov	r4, r8
 801d77a:	000b      	movs	r3, r1
 801d77c:	b4f0      	push	{r4, r5, r6, r7}
 801d77e:	085b      	lsrs	r3, r3, #1
 801d780:	b08f      	sub	sp, #60	@ 0x3c
 801d782:	910a      	str	r1, [sp, #40]	@ 0x28
 801d784:	0007      	movs	r7, r0
 801d786:	9009      	str	r0, [sp, #36]	@ 0x24
 801d788:	0011      	movs	r1, r2
 801d78a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d78c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d100      	bne.n	801d794 <arm_cfft_radix4by2_inverse_q31+0x24>
 801d792:	e0a0      	b.n	801d8d6 <arm_cfft_radix4by2_inverse_q31+0x166>
 801d794:	0002      	movs	r2, r0
 801d796:	00db      	lsls	r3, r3, #3
 801d798:	3204      	adds	r2, #4
 801d79a:	4691      	mov	r9, r2
 801d79c:	4698      	mov	r8, r3
 801d79e:	000a      	movs	r2, r1
 801d7a0:	464e      	mov	r6, r9
 801d7a2:	4442      	add	r2, r8
 801d7a4:	4699      	mov	r9, r3
 801d7a6:	4688      	mov	r8, r1
 801d7a8:	9208      	str	r2, [sp, #32]
 801d7aa:	900d      	str	r0, [sp, #52]	@ 0x34
 801d7ac:	4643      	mov	r3, r8
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	469b      	mov	fp, r3
 801d7b2:	4643      	mov	r3, r8
 801d7b4:	685b      	ldr	r3, [r3, #4]
 801d7b6:	469a      	mov	sl, r3
 801d7b8:	683b      	ldr	r3, [r7, #0]
 801d7ba:	109c      	asrs	r4, r3, #2
 801d7bc:	464b      	mov	r3, r9
 801d7be:	58fb      	ldr	r3, [r7, r3]
 801d7c0:	109a      	asrs	r2, r3, #2
 801d7c2:	18a3      	adds	r3, r4, r2
 801d7c4:	603b      	str	r3, [r7, #0]
 801d7c6:	6833      	ldr	r3, [r6, #0]
 801d7c8:	1aa4      	subs	r4, r4, r2
 801d7ca:	109d      	asrs	r5, r3, #2
 801d7cc:	464b      	mov	r3, r9
 801d7ce:	58f3      	ldr	r3, [r6, r3]
 801d7d0:	17e2      	asrs	r2, r4, #31
 801d7d2:	109b      	asrs	r3, r3, #2
 801d7d4:	18e9      	adds	r1, r5, r3
 801d7d6:	6031      	str	r1, [r6, #0]
 801d7d8:	0011      	movs	r1, r2
 801d7da:	465a      	mov	r2, fp
 801d7dc:	17d2      	asrs	r2, r2, #31
 801d7de:	0010      	movs	r0, r2
 801d7e0:	4652      	mov	r2, sl
 801d7e2:	1aed      	subs	r5, r5, r3
 801d7e4:	17eb      	asrs	r3, r5, #31
 801d7e6:	17d2      	asrs	r2, r2, #31
 801d7e8:	9307      	str	r3, [sp, #28]
 801d7ea:	9204      	str	r2, [sp, #16]
 801d7ec:	0003      	movs	r3, r0
 801d7ee:	465a      	mov	r2, fp
 801d7f0:	9006      	str	r0, [sp, #24]
 801d7f2:	0020      	movs	r0, r4
 801d7f4:	9105      	str	r1, [sp, #20]
 801d7f6:	f7e2 fee3 	bl	80005c0 <__aeabi_lmul>
 801d7fa:	2280      	movs	r2, #128	@ 0x80
 801d7fc:	2300      	movs	r3, #0
 801d7fe:	0612      	lsls	r2, r2, #24
 801d800:	1880      	adds	r0, r0, r2
 801d802:	4159      	adcs	r1, r3
 801d804:	2300      	movs	r3, #0
 801d806:	9101      	str	r1, [sp, #4]
 801d808:	9300      	str	r3, [sp, #0]
 801d80a:	4652      	mov	r2, sl
 801d80c:	9b04      	ldr	r3, [sp, #16]
 801d80e:	0028      	movs	r0, r5
 801d810:	17e9      	asrs	r1, r5, #31
 801d812:	f7e2 fed5 	bl	80005c0 <__aeabi_lmul>
 801d816:	9a00      	ldr	r2, [sp, #0]
 801d818:	9b01      	ldr	r3, [sp, #4]
 801d81a:	1a12      	subs	r2, r2, r0
 801d81c:	418b      	sbcs	r3, r1
 801d81e:	2080      	movs	r0, #128	@ 0x80
 801d820:	2100      	movs	r1, #0
 801d822:	0600      	lsls	r0, r0, #24
 801d824:	1812      	adds	r2, r2, r0
 801d826:	414b      	adcs	r3, r1
 801d828:	464a      	mov	r2, r9
 801d82a:	005b      	lsls	r3, r3, #1
 801d82c:	50bb      	str	r3, [r7, r2]
 801d82e:	4658      	mov	r0, fp
 801d830:	002a      	movs	r2, r5
 801d832:	9b07      	ldr	r3, [sp, #28]
 801d834:	9906      	ldr	r1, [sp, #24]
 801d836:	f7e2 fec3 	bl	80005c0 <__aeabi_lmul>
 801d83a:	2280      	movs	r2, #128	@ 0x80
 801d83c:	2300      	movs	r3, #0
 801d83e:	0612      	lsls	r2, r2, #24
 801d840:	1880      	adds	r0, r0, r2
 801d842:	4159      	adcs	r1, r3
 801d844:	2000      	movs	r0, #0
 801d846:	9103      	str	r1, [sp, #12]
 801d848:	9002      	str	r0, [sp, #8]
 801d84a:	4652      	mov	r2, sl
 801d84c:	9b04      	ldr	r3, [sp, #16]
 801d84e:	0020      	movs	r0, r4
 801d850:	9905      	ldr	r1, [sp, #20]
 801d852:	f7e2 feb5 	bl	80005c0 <__aeabi_lmul>
 801d856:	9b02      	ldr	r3, [sp, #8]
 801d858:	9c03      	ldr	r4, [sp, #12]
 801d85a:	18c0      	adds	r0, r0, r3
 801d85c:	4161      	adcs	r1, r4
 801d85e:	2380      	movs	r3, #128	@ 0x80
 801d860:	2400      	movs	r4, #0
 801d862:	061b      	lsls	r3, r3, #24
 801d864:	18c0      	adds	r0, r0, r3
 801d866:	4161      	adcs	r1, r4
 801d868:	464a      	mov	r2, r9
 801d86a:	004b      	lsls	r3, r1, #1
 801d86c:	50b3      	str	r3, [r6, r2]
 801d86e:	2308      	movs	r3, #8
 801d870:	469c      	mov	ip, r3
 801d872:	9b08      	ldr	r3, [sp, #32]
 801d874:	44e0      	add	r8, ip
 801d876:	3708      	adds	r7, #8
 801d878:	3608      	adds	r6, #8
 801d87a:	4598      	cmp	r8, r3
 801d87c:	d196      	bne.n	801d7ac <arm_cfft_radix4by2_inverse_q31+0x3c>
 801d87e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d880:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d882:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d884:	2302      	movs	r3, #2
 801d886:	003a      	movs	r2, r7
 801d888:	0029      	movs	r1, r5
 801d88a:	0020      	movs	r0, r4
 801d88c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d88e:	f000 fb3b 	bl	801df08 <arm_radix4_butterfly_inverse_q31>
 801d892:	46a4      	mov	ip, r4
 801d894:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d896:	2302      	movs	r3, #2
 801d898:	0088      	lsls	r0, r1, #2
 801d89a:	4460      	add	r0, ip
 801d89c:	003a      	movs	r2, r7
 801d89e:	0029      	movs	r1, r5
 801d8a0:	f000 fb32 	bl	801df08 <arm_radix4_butterfly_inverse_q31>
 801d8a4:	46a4      	mov	ip, r4
 801d8a6:	0128      	lsls	r0, r5, #4
 801d8a8:	4460      	add	r0, ip
 801d8aa:	6833      	ldr	r3, [r6, #0]
 801d8ac:	005b      	lsls	r3, r3, #1
 801d8ae:	6033      	str	r3, [r6, #0]
 801d8b0:	6873      	ldr	r3, [r6, #4]
 801d8b2:	005b      	lsls	r3, r3, #1
 801d8b4:	6073      	str	r3, [r6, #4]
 801d8b6:	68b3      	ldr	r3, [r6, #8]
 801d8b8:	005b      	lsls	r3, r3, #1
 801d8ba:	60b3      	str	r3, [r6, #8]
 801d8bc:	68f3      	ldr	r3, [r6, #12]
 801d8be:	005b      	lsls	r3, r3, #1
 801d8c0:	60f3      	str	r3, [r6, #12]
 801d8c2:	3610      	adds	r6, #16
 801d8c4:	42b0      	cmp	r0, r6
 801d8c6:	d1f0      	bne.n	801d8aa <arm_cfft_radix4by2_inverse_q31+0x13a>
 801d8c8:	b00f      	add	sp, #60	@ 0x3c
 801d8ca:	bc3c      	pop	{r2, r3, r4, r5}
 801d8cc:	4690      	mov	r8, r2
 801d8ce:	4699      	mov	r9, r3
 801d8d0:	46a2      	mov	sl, r4
 801d8d2:	46ab      	mov	fp, r5
 801d8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8d6:	2302      	movs	r3, #2
 801d8d8:	2100      	movs	r1, #0
 801d8da:	0015      	movs	r5, r2
 801d8dc:	f000 fb14 	bl	801df08 <arm_radix4_butterfly_inverse_q31>
 801d8e0:	46bc      	mov	ip, r7
 801d8e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d8e4:	002a      	movs	r2, r5
 801d8e6:	0098      	lsls	r0, r3, #2
 801d8e8:	4460      	add	r0, ip
 801d8ea:	2302      	movs	r3, #2
 801d8ec:	2100      	movs	r1, #0
 801d8ee:	f000 fb0b 	bl	801df08 <arm_radix4_butterfly_inverse_q31>
 801d8f2:	e7e9      	b.n	801d8c8 <arm_cfft_radix4by2_inverse_q31+0x158>

0801d8f4 <arm_cfft_q31>:
 801d8f4:	b570      	push	{r4, r5, r6, lr}
 801d8f6:	001e      	movs	r6, r3
 801d8f8:	2380      	movs	r3, #128	@ 0x80
 801d8fa:	000d      	movs	r5, r1
 801d8fc:	0004      	movs	r4, r0
 801d8fe:	8801      	ldrh	r1, [r0, #0]
 801d900:	005b      	lsls	r3, r3, #1
 801d902:	2a01      	cmp	r2, #1
 801d904:	d028      	beq.n	801d958 <arm_cfft_q31+0x64>
 801d906:	4299      	cmp	r1, r3
 801d908:	d020      	beq.n	801d94c <arm_cfft_q31+0x58>
 801d90a:	d812      	bhi.n	801d932 <arm_cfft_q31+0x3e>
 801d90c:	2920      	cmp	r1, #32
 801d90e:	d004      	beq.n	801d91a <arm_cfft_q31+0x26>
 801d910:	d949      	bls.n	801d9a6 <arm_cfft_q31+0xb2>
 801d912:	2940      	cmp	r1, #64	@ 0x40
 801d914:	d01a      	beq.n	801d94c <arm_cfft_q31+0x58>
 801d916:	2980      	cmp	r1, #128	@ 0x80
 801d918:	d103      	bne.n	801d922 <arm_cfft_q31+0x2e>
 801d91a:	6862      	ldr	r2, [r4, #4]
 801d91c:	0028      	movs	r0, r5
 801d91e:	f7ff fe65 	bl	801d5ec <arm_cfft_radix4by2_q31>
 801d922:	2e00      	cmp	r6, #0
 801d924:	d004      	beq.n	801d930 <arm_cfft_q31+0x3c>
 801d926:	68a2      	ldr	r2, [r4, #8]
 801d928:	89a1      	ldrh	r1, [r4, #12]
 801d92a:	0028      	movs	r0, r5
 801d92c:	f7e2 fbec 	bl	8000108 <arm_bitreversal_32>
 801d930:	bd70      	pop	{r4, r5, r6, pc}
 801d932:	2380      	movs	r3, #128	@ 0x80
 801d934:	00db      	lsls	r3, r3, #3
 801d936:	4299      	cmp	r1, r3
 801d938:	d008      	beq.n	801d94c <arm_cfft_q31+0x58>
 801d93a:	d92f      	bls.n	801d99c <arm_cfft_q31+0xa8>
 801d93c:	2380      	movs	r3, #128	@ 0x80
 801d93e:	011b      	lsls	r3, r3, #4
 801d940:	4299      	cmp	r1, r3
 801d942:	d0ea      	beq.n	801d91a <arm_cfft_q31+0x26>
 801d944:	2380      	movs	r3, #128	@ 0x80
 801d946:	015b      	lsls	r3, r3, #5
 801d948:	4299      	cmp	r1, r3
 801d94a:	d1ea      	bne.n	801d922 <arm_cfft_q31+0x2e>
 801d94c:	2301      	movs	r3, #1
 801d94e:	6862      	ldr	r2, [r4, #4]
 801d950:	0028      	movs	r0, r5
 801d952:	f000 f833 	bl	801d9bc <arm_radix4_butterfly_q31>
 801d956:	e7e4      	b.n	801d922 <arm_cfft_q31+0x2e>
 801d958:	4299      	cmp	r1, r3
 801d95a:	d019      	beq.n	801d990 <arm_cfft_q31+0x9c>
 801d95c:	d80b      	bhi.n	801d976 <arm_cfft_q31+0x82>
 801d95e:	2920      	cmp	r1, #32
 801d960:	d004      	beq.n	801d96c <arm_cfft_q31+0x78>
 801d962:	d928      	bls.n	801d9b6 <arm_cfft_q31+0xc2>
 801d964:	2940      	cmp	r1, #64	@ 0x40
 801d966:	d013      	beq.n	801d990 <arm_cfft_q31+0x9c>
 801d968:	2980      	cmp	r1, #128	@ 0x80
 801d96a:	d1da      	bne.n	801d922 <arm_cfft_q31+0x2e>
 801d96c:	6862      	ldr	r2, [r4, #4]
 801d96e:	0028      	movs	r0, r5
 801d970:	f7ff fefe 	bl	801d770 <arm_cfft_radix4by2_inverse_q31>
 801d974:	e7d5      	b.n	801d922 <arm_cfft_q31+0x2e>
 801d976:	2380      	movs	r3, #128	@ 0x80
 801d978:	00db      	lsls	r3, r3, #3
 801d97a:	4299      	cmp	r1, r3
 801d97c:	d008      	beq.n	801d990 <arm_cfft_q31+0x9c>
 801d97e:	d915      	bls.n	801d9ac <arm_cfft_q31+0xb8>
 801d980:	2380      	movs	r3, #128	@ 0x80
 801d982:	011b      	lsls	r3, r3, #4
 801d984:	4299      	cmp	r1, r3
 801d986:	d0f1      	beq.n	801d96c <arm_cfft_q31+0x78>
 801d988:	2380      	movs	r3, #128	@ 0x80
 801d98a:	015b      	lsls	r3, r3, #5
 801d98c:	4299      	cmp	r1, r3
 801d98e:	d1c8      	bne.n	801d922 <arm_cfft_q31+0x2e>
 801d990:	2301      	movs	r3, #1
 801d992:	6862      	ldr	r2, [r4, #4]
 801d994:	0028      	movs	r0, r5
 801d996:	f000 fab7 	bl	801df08 <arm_radix4_butterfly_inverse_q31>
 801d99a:	e7c2      	b.n	801d922 <arm_cfft_q31+0x2e>
 801d99c:	2380      	movs	r3, #128	@ 0x80
 801d99e:	009b      	lsls	r3, r3, #2
 801d9a0:	4299      	cmp	r1, r3
 801d9a2:	d0ba      	beq.n	801d91a <arm_cfft_q31+0x26>
 801d9a4:	e7bd      	b.n	801d922 <arm_cfft_q31+0x2e>
 801d9a6:	2910      	cmp	r1, #16
 801d9a8:	d1bb      	bne.n	801d922 <arm_cfft_q31+0x2e>
 801d9aa:	e7cf      	b.n	801d94c <arm_cfft_q31+0x58>
 801d9ac:	2380      	movs	r3, #128	@ 0x80
 801d9ae:	009b      	lsls	r3, r3, #2
 801d9b0:	4299      	cmp	r1, r3
 801d9b2:	d0db      	beq.n	801d96c <arm_cfft_q31+0x78>
 801d9b4:	e7b5      	b.n	801d922 <arm_cfft_q31+0x2e>
 801d9b6:	2910      	cmp	r1, #16
 801d9b8:	d1b3      	bne.n	801d922 <arm_cfft_q31+0x2e>
 801d9ba:	e7e9      	b.n	801d990 <arm_cfft_q31+0x9c>

0801d9bc <arm_radix4_butterfly_q31>:
 801d9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9be:	464d      	mov	r5, r9
 801d9c0:	4644      	mov	r4, r8
 801d9c2:	465f      	mov	r7, fp
 801d9c4:	4656      	mov	r6, sl
 801d9c6:	469c      	mov	ip, r3
 801d9c8:	b4f0      	push	{r4, r5, r6, r7}
 801d9ca:	b0a7      	sub	sp, #156	@ 0x9c
 801d9cc:	9114      	str	r1, [sp, #80]	@ 0x50
 801d9ce:	0889      	lsrs	r1, r1, #2
 801d9d0:	9310      	str	r3, [sp, #64]	@ 0x40
 801d9d2:	00cb      	lsls	r3, r1, #3
 801d9d4:	0015      	movs	r5, r2
 801d9d6:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d9d8:	18c2      	adds	r2, r0, r3
 801d9da:	000c      	movs	r4, r1
 801d9dc:	469a      	mov	sl, r3
 801d9de:	9124      	str	r1, [sp, #144]	@ 0x90
 801d9e0:	18d1      	adds	r1, r2, r3
 801d9e2:	4663      	mov	r3, ip
 801d9e4:	468b      	mov	fp, r1
 801d9e6:	0119      	lsls	r1, r3, #4
 801d9e8:	910d      	str	r1, [sp, #52]	@ 0x34
 801d9ea:	00d9      	lsls	r1, r3, #3
 801d9ec:	005b      	lsls	r3, r3, #1
 801d9ee:	4463      	add	r3, ip
 801d9f0:	910e      	str	r1, [sp, #56]	@ 0x38
 801d9f2:	00d9      	lsls	r1, r3, #3
 801d9f4:	465b      	mov	r3, fp
 801d9f6:	44da      	add	sl, fp
 801d9f8:	4690      	mov	r8, r2
 801d9fa:	4683      	mov	fp, r0
 801d9fc:	4699      	mov	r9, r3
 801d9fe:	9022      	str	r0, [sp, #136]	@ 0x88
 801da00:	9025      	str	r0, [sp, #148]	@ 0x94
 801da02:	910f      	str	r1, [sp, #60]	@ 0x3c
 801da04:	9502      	str	r5, [sp, #8]
 801da06:	9500      	str	r5, [sp, #0]
 801da08:	9501      	str	r5, [sp, #4]
 801da0a:	9407      	str	r4, [sp, #28]
 801da0c:	465b      	mov	r3, fp
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	4642      	mov	r2, r8
 801da12:	111c      	asrs	r4, r3, #4
 801da14:	464b      	mov	r3, r9
 801da16:	4658      	mov	r0, fp
 801da18:	681b      	ldr	r3, [r3, #0]
 801da1a:	6812      	ldr	r2, [r2, #0]
 801da1c:	111b      	asrs	r3, r3, #4
 801da1e:	18e7      	adds	r7, r4, r3
 801da20:	1ae3      	subs	r3, r4, r3
 801da22:	1114      	asrs	r4, r2, #4
 801da24:	4652      	mov	r2, sl
 801da26:	6840      	ldr	r0, [r0, #4]
 801da28:	6812      	ldr	r2, [r2, #0]
 801da2a:	1105      	asrs	r5, r0, #4
 801da2c:	4648      	mov	r0, r9
 801da2e:	9303      	str	r3, [sp, #12]
 801da30:	1113      	asrs	r3, r2, #4
 801da32:	18e2      	adds	r2, r4, r3
 801da34:	465c      	mov	r4, fp
 801da36:	6840      	ldr	r0, [r0, #4]
 801da38:	1103      	asrs	r3, r0, #4
 801da3a:	18ee      	adds	r6, r5, r3
 801da3c:	1ae8      	subs	r0, r5, r3
 801da3e:	18bb      	adds	r3, r7, r2
 801da40:	6023      	str	r3, [r4, #0]
 801da42:	4644      	mov	r4, r8
 801da44:	6864      	ldr	r4, [r4, #4]
 801da46:	9004      	str	r0, [sp, #16]
 801da48:	1125      	asrs	r5, r4, #4
 801da4a:	4654      	mov	r4, sl
 801da4c:	6864      	ldr	r4, [r4, #4]
 801da4e:	1123      	asrs	r3, r4, #4
 801da50:	465c      	mov	r4, fp
 801da52:	18eb      	adds	r3, r5, r3
 801da54:	18f1      	adds	r1, r6, r3
 801da56:	6061      	str	r1, [r4, #4]
 801da58:	4655      	mov	r5, sl
 801da5a:	4644      	mov	r4, r8
 801da5c:	686d      	ldr	r5, [r5, #4]
 801da5e:	6864      	ldr	r4, [r4, #4]
 801da60:	1129      	asrs	r1, r5, #4
 801da62:	1124      	asrs	r4, r4, #4
 801da64:	1a64      	subs	r4, r4, r1
 801da66:	4641      	mov	r1, r8
 801da68:	6809      	ldr	r1, [r1, #0]
 801da6a:	9405      	str	r4, [sp, #20]
 801da6c:	1108      	asrs	r0, r1, #4
 801da6e:	4651      	mov	r1, sl
 801da70:	6809      	ldr	r1, [r1, #0]
 801da72:	1abc      	subs	r4, r7, r2
 801da74:	1109      	asrs	r1, r1, #4
 801da76:	1a41      	subs	r1, r0, r1
 801da78:	17e2      	asrs	r2, r4, #31
 801da7a:	9106      	str	r1, [sp, #24]
 801da7c:	0011      	movs	r1, r2
 801da7e:	9a01      	ldr	r2, [sp, #4]
 801da80:	9108      	str	r1, [sp, #32]
 801da82:	6817      	ldr	r7, [r2, #0]
 801da84:	17fd      	asrs	r5, r7, #31
 801da86:	0028      	movs	r0, r5
 801da88:	1af5      	subs	r5, r6, r3
 801da8a:	17ee      	asrs	r6, r5, #31
 801da8c:	960a      	str	r6, [sp, #40]	@ 0x28
 801da8e:	6856      	ldr	r6, [r2, #4]
 801da90:	9009      	str	r0, [sp, #36]	@ 0x24
 801da92:	17f3      	asrs	r3, r6, #31
 801da94:	003a      	movs	r2, r7
 801da96:	930b      	str	r3, [sp, #44]	@ 0x2c
 801da98:	0003      	movs	r3, r0
 801da9a:	0020      	movs	r0, r4
 801da9c:	f7e2 fd90 	bl	80005c0 <__aeabi_lmul>
 801daa0:	0032      	movs	r2, r6
 801daa2:	17f3      	asrs	r3, r6, #31
 801daa4:	910c      	str	r1, [sp, #48]	@ 0x30
 801daa6:	0028      	movs	r0, r5
 801daa8:	17e9      	asrs	r1, r5, #31
 801daaa:	f7e2 fd89 	bl	80005c0 <__aeabi_lmul>
 801daae:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dab0:	002a      	movs	r2, r5
 801dab2:	4684      	mov	ip, r0
 801dab4:	4640      	mov	r0, r8
 801dab6:	4461      	add	r1, ip
 801dab8:	0049      	lsls	r1, r1, #1
 801daba:	6001      	str	r1, [r0, #0]
 801dabc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dabe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dac0:	0038      	movs	r0, r7
 801dac2:	f7e2 fd7d 	bl	80005c0 <__aeabi_lmul>
 801dac6:	0032      	movs	r2, r6
 801dac8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801daca:	000d      	movs	r5, r1
 801dacc:	0020      	movs	r0, r4
 801dace:	9908      	ldr	r1, [sp, #32]
 801dad0:	f7e2 fd76 	bl	80005c0 <__aeabi_lmul>
 801dad4:	4646      	mov	r6, r8
 801dad6:	1a6d      	subs	r5, r5, r1
 801dad8:	006d      	lsls	r5, r5, #1
 801dada:	6075      	str	r5, [r6, #4]
 801dadc:	9903      	ldr	r1, [sp, #12]
 801dade:	9d05      	ldr	r5, [sp, #20]
 801dae0:	000c      	movs	r4, r1
 801dae2:	46ac      	mov	ip, r5
 801dae4:	4464      	add	r4, ip
 801dae6:	17e6      	asrs	r6, r4, #31
 801dae8:	0031      	movs	r1, r6
 801daea:	9b00      	ldr	r3, [sp, #0]
 801daec:	9804      	ldr	r0, [sp, #16]
 801daee:	681e      	ldr	r6, [r3, #0]
 801daf0:	17f7      	asrs	r7, r6, #31
 801daf2:	9709      	str	r7, [sp, #36]	@ 0x24
 801daf4:	9f06      	ldr	r7, [sp, #24]
 801daf6:	0032      	movs	r2, r6
 801daf8:	1bc7      	subs	r7, r0, r7
 801dafa:	17fd      	asrs	r5, r7, #31
 801dafc:	950a      	str	r5, [sp, #40]	@ 0x28
 801dafe:	685d      	ldr	r5, [r3, #4]
 801db00:	17f3      	asrs	r3, r6, #31
 801db02:	17e8      	asrs	r0, r5, #31
 801db04:	900b      	str	r0, [sp, #44]	@ 0x2c
 801db06:	0020      	movs	r0, r4
 801db08:	9108      	str	r1, [sp, #32]
 801db0a:	f7e2 fd59 	bl	80005c0 <__aeabi_lmul>
 801db0e:	002a      	movs	r2, r5
 801db10:	17eb      	asrs	r3, r5, #31
 801db12:	910c      	str	r1, [sp, #48]	@ 0x30
 801db14:	0038      	movs	r0, r7
 801db16:	17f9      	asrs	r1, r7, #31
 801db18:	f7e2 fd52 	bl	80005c0 <__aeabi_lmul>
 801db1c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801db1e:	003a      	movs	r2, r7
 801db20:	4684      	mov	ip, r0
 801db22:	4648      	mov	r0, r9
 801db24:	4461      	add	r1, ip
 801db26:	0049      	lsls	r1, r1, #1
 801db28:	6001      	str	r1, [r0, #0]
 801db2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801db2c:	0030      	movs	r0, r6
 801db2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801db30:	f7e2 fd46 	bl	80005c0 <__aeabi_lmul>
 801db34:	002a      	movs	r2, r5
 801db36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801db38:	000e      	movs	r6, r1
 801db3a:	0020      	movs	r0, r4
 801db3c:	9908      	ldr	r1, [sp, #32]
 801db3e:	f7e2 fd3f 	bl	80005c0 <__aeabi_lmul>
 801db42:	464c      	mov	r4, r9
 801db44:	9d05      	ldr	r5, [sp, #20]
 801db46:	1a76      	subs	r6, r6, r1
 801db48:	9903      	ldr	r1, [sp, #12]
 801db4a:	0076      	lsls	r6, r6, #1
 801db4c:	6066      	str	r6, [r4, #4]
 801db4e:	1b4c      	subs	r4, r1, r5
 801db50:	9e06      	ldr	r6, [sp, #24]
 801db52:	17e1      	asrs	r1, r4, #31
 801db54:	9103      	str	r1, [sp, #12]
 801db56:	9902      	ldr	r1, [sp, #8]
 801db58:	46b4      	mov	ip, r6
 801db5a:	680f      	ldr	r7, [r1, #0]
 801db5c:	9804      	ldr	r0, [sp, #16]
 801db5e:	17fd      	asrs	r5, r7, #31
 801db60:	002b      	movs	r3, r5
 801db62:	684e      	ldr	r6, [r1, #4]
 801db64:	4460      	add	r0, ip
 801db66:	0005      	movs	r5, r0
 801db68:	17c0      	asrs	r0, r0, #31
 801db6a:	9005      	str	r0, [sp, #20]
 801db6c:	17f0      	asrs	r0, r6, #31
 801db6e:	9006      	str	r0, [sp, #24]
 801db70:	003a      	movs	r2, r7
 801db72:	0020      	movs	r0, r4
 801db74:	17e1      	asrs	r1, r4, #31
 801db76:	9304      	str	r3, [sp, #16]
 801db78:	f7e2 fd22 	bl	80005c0 <__aeabi_lmul>
 801db7c:	0032      	movs	r2, r6
 801db7e:	9108      	str	r1, [sp, #32]
 801db80:	17f3      	asrs	r3, r6, #31
 801db82:	0028      	movs	r0, r5
 801db84:	17e9      	asrs	r1, r5, #31
 801db86:	f7e2 fd1b 	bl	80005c0 <__aeabi_lmul>
 801db8a:	9808      	ldr	r0, [sp, #32]
 801db8c:	002a      	movs	r2, r5
 801db8e:	4684      	mov	ip, r0
 801db90:	4650      	mov	r0, sl
 801db92:	4461      	add	r1, ip
 801db94:	0049      	lsls	r1, r1, #1
 801db96:	6001      	str	r1, [r0, #0]
 801db98:	9b05      	ldr	r3, [sp, #20]
 801db9a:	9904      	ldr	r1, [sp, #16]
 801db9c:	0038      	movs	r0, r7
 801db9e:	f7e2 fd0f 	bl	80005c0 <__aeabi_lmul>
 801dba2:	0020      	movs	r0, r4
 801dba4:	2408      	movs	r4, #8
 801dba6:	000d      	movs	r5, r1
 801dba8:	0032      	movs	r2, r6
 801dbaa:	9b06      	ldr	r3, [sp, #24]
 801dbac:	9903      	ldr	r1, [sp, #12]
 801dbae:	f7e2 fd07 	bl	80005c0 <__aeabi_lmul>
 801dbb2:	46a4      	mov	ip, r4
 801dbb4:	4650      	mov	r0, sl
 801dbb6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dbb8:	44e3      	add	fp, ip
 801dbba:	44e0      	add	r8, ip
 801dbbc:	44e1      	add	r9, ip
 801dbbe:	44e2      	add	sl, ip
 801dbc0:	46a4      	mov	ip, r4
 801dbc2:	1a6d      	subs	r5, r5, r1
 801dbc4:	006d      	lsls	r5, r5, #1
 801dbc6:	9a01      	ldr	r2, [sp, #4]
 801dbc8:	6045      	str	r5, [r0, #4]
 801dbca:	9807      	ldr	r0, [sp, #28]
 801dbcc:	4462      	add	r2, ip
 801dbce:	3801      	subs	r0, #1
 801dbd0:	9201      	str	r2, [sp, #4]
 801dbd2:	9007      	str	r0, [sp, #28]
 801dbd4:	9b00      	ldr	r3, [sp, #0]
 801dbd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dbd8:	9902      	ldr	r1, [sp, #8]
 801dbda:	4694      	mov	ip, r2
 801dbdc:	4463      	add	r3, ip
 801dbde:	9300      	str	r3, [sp, #0]
 801dbe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dbe2:	469c      	mov	ip, r3
 801dbe4:	4461      	add	r1, ip
 801dbe6:	9102      	str	r1, [sp, #8]
 801dbe8:	2800      	cmp	r0, #0
 801dbea:	d000      	beq.n	801dbee <arm_radix4_butterfly_q31+0x232>
 801dbec:	e70e      	b.n	801da0c <arm_radix4_butterfly_q31+0x50>
 801dbee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dbf0:	009b      	lsls	r3, r3, #2
 801dbf2:	931f      	str	r3, [sp, #124]	@ 0x7c
 801dbf4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dbf6:	9320      	str	r3, [sp, #128]	@ 0x80
 801dbf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dbfa:	2b04      	cmp	r3, #4
 801dbfc:	d800      	bhi.n	801dc00 <arm_radix4_butterfly_q31+0x244>
 801dbfe:	e180      	b.n	801df02 <arm_radix4_butterfly_q31+0x546>
 801dc00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dc02:	0893      	lsrs	r3, r2, #2
 801dc04:	1e59      	subs	r1, r3, #1
 801dc06:	9321      	str	r3, [sp, #132]	@ 0x84
 801dc08:	00db      	lsls	r3, r3, #3
 801dc0a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801dc0c:	00d3      	lsls	r3, r2, #3
 801dc0e:	9300      	str	r3, [sp, #0]
 801dc10:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dc12:	911a      	str	r1, [sp, #104]	@ 0x68
 801dc14:	00da      	lsls	r2, r3, #3
 801dc16:	921e      	str	r2, [sp, #120]	@ 0x78
 801dc18:	011a      	lsls	r2, r3, #4
 801dc1a:	921d      	str	r2, [sp, #116]	@ 0x74
 801dc1c:	001a      	movs	r2, r3
 801dc1e:	4694      	mov	ip, r2
 801dc20:	005b      	lsls	r3, r3, #1
 801dc22:	4463      	add	r3, ip
 801dc24:	00db      	lsls	r3, r3, #3
 801dc26:	931c      	str	r3, [sp, #112]	@ 0x70
 801dc28:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801dc2a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dc2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dc2e:	9318      	str	r3, [sp, #96]	@ 0x60
 801dc30:	9319      	str	r3, [sp, #100]	@ 0x64
 801dc32:	9316      	str	r3, [sp, #88]	@ 0x58
 801dc34:	2300      	movs	r3, #0
 801dc36:	9315      	str	r3, [sp, #84]	@ 0x54
 801dc38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dc3a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801dc3c:	681a      	ldr	r2, [r3, #0]
 801dc3e:	685b      	ldr	r3, [r3, #4]
 801dc40:	9205      	str	r2, [sp, #20]
 801dc42:	9306      	str	r3, [sp, #24]
 801dc44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dc46:	468c      	mov	ip, r1
 801dc48:	681a      	ldr	r2, [r3, #0]
 801dc4a:	685b      	ldr	r3, [r3, #4]
 801dc4c:	9207      	str	r2, [sp, #28]
 801dc4e:	9308      	str	r3, [sp, #32]
 801dc50:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dc52:	681a      	ldr	r2, [r3, #0]
 801dc54:	685b      	ldr	r3, [r3, #4]
 801dc56:	9209      	str	r2, [sp, #36]	@ 0x24
 801dc58:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dc5a:	930a      	str	r3, [sp, #40]	@ 0x28
 801dc5c:	0013      	movs	r3, r2
 801dc5e:	4463      	add	r3, ip
 801dc60:	4698      	mov	r8, r3
 801dc62:	0013      	movs	r3, r2
 801dc64:	4442      	add	r2, r8
 801dc66:	4691      	mov	r9, r2
 801dc68:	001a      	movs	r2, r3
 801dc6a:	444a      	add	r2, r9
 801dc6c:	4692      	mov	sl, r2
 801dc6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dc70:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801dc72:	4293      	cmp	r3, r2
 801dc74:	d800      	bhi.n	801dc78 <arm_radix4_butterfly_q31+0x2bc>
 801dc76:	e0dd      	b.n	801de34 <arm_radix4_butterfly_q31+0x478>
 801dc78:	4694      	mov	ip, r2
 801dc7a:	468b      	mov	fp, r1
 801dc7c:	4644      	mov	r4, r8
 801dc7e:	4655      	mov	r5, sl
 801dc80:	9b07      	ldr	r3, [sp, #28]
 801dc82:	17db      	asrs	r3, r3, #31
 801dc84:	930c      	str	r3, [sp, #48]	@ 0x30
 801dc86:	9b08      	ldr	r3, [sp, #32]
 801dc88:	17db      	asrs	r3, r3, #31
 801dc8a:	930d      	str	r3, [sp, #52]	@ 0x34
 801dc8c:	9b05      	ldr	r3, [sp, #20]
 801dc8e:	17db      	asrs	r3, r3, #31
 801dc90:	930e      	str	r3, [sp, #56]	@ 0x38
 801dc92:	9b06      	ldr	r3, [sp, #24]
 801dc94:	17db      	asrs	r3, r3, #31
 801dc96:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dc98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc9a:	17db      	asrs	r3, r3, #31
 801dc9c:	9310      	str	r3, [sp, #64]	@ 0x40
 801dc9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dca0:	17db      	asrs	r3, r3, #31
 801dca2:	9311      	str	r3, [sp, #68]	@ 0x44
 801dca4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dca6:	4463      	add	r3, ip
 801dca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dcaa:	465b      	mov	r3, fp
 801dcac:	4659      	mov	r1, fp
 801dcae:	681a      	ldr	r2, [r3, #0]
 801dcb0:	464b      	mov	r3, r9
 801dcb2:	684f      	ldr	r7, [r1, #4]
 801dcb4:	4649      	mov	r1, r9
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	18d6      	adds	r6, r2, r3
 801dcba:	1ad3      	subs	r3, r2, r3
 801dcbc:	9301      	str	r3, [sp, #4]
 801dcbe:	684b      	ldr	r3, [r1, #4]
 801dcc0:	18f8      	adds	r0, r7, r3
 801dcc2:	1af9      	subs	r1, r7, r3
 801dcc4:	6827      	ldr	r7, [r4, #0]
 801dcc6:	9102      	str	r1, [sp, #8]
 801dcc8:	003a      	movs	r2, r7
 801dcca:	682f      	ldr	r7, [r5, #0]
 801dccc:	46bc      	mov	ip, r7
 801dcce:	465f      	mov	r7, fp
 801dcd0:	4462      	add	r2, ip
 801dcd2:	18b3      	adds	r3, r6, r2
 801dcd4:	109b      	asrs	r3, r3, #2
 801dcd6:	603b      	str	r3, [r7, #0]
 801dcd8:	6867      	ldr	r7, [r4, #4]
 801dcda:	1ab6      	subs	r6, r6, r2
 801dcdc:	46b8      	mov	r8, r7
 801dcde:	686f      	ldr	r7, [r5, #4]
 801dce0:	17f2      	asrs	r2, r6, #31
 801dce2:	46bc      	mov	ip, r7
 801dce4:	44e0      	add	r8, ip
 801dce6:	4643      	mov	r3, r8
 801dce8:	465f      	mov	r7, fp
 801dcea:	18c1      	adds	r1, r0, r3
 801dcec:	1089      	asrs	r1, r1, #2
 801dcee:	6079      	str	r1, [r7, #4]
 801dcf0:	9900      	ldr	r1, [sp, #0]
 801dcf2:	4690      	mov	r8, r2
 801dcf4:	468c      	mov	ip, r1
 801dcf6:	6867      	ldr	r7, [r4, #4]
 801dcf8:	6869      	ldr	r1, [r5, #4]
 801dcfa:	44e3      	add	fp, ip
 801dcfc:	1a7f      	subs	r7, r7, r1
 801dcfe:	9703      	str	r7, [sp, #12]
 801dd00:	6829      	ldr	r1, [r5, #0]
 801dd02:	6827      	ldr	r7, [r4, #0]
 801dd04:	1a7f      	subs	r7, r7, r1
 801dd06:	9704      	str	r7, [sp, #16]
 801dd08:	1ac7      	subs	r7, r0, r3
 801dd0a:	17fa      	asrs	r2, r7, #31
 801dd0c:	4692      	mov	sl, r2
 801dd0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd10:	9a07      	ldr	r2, [sp, #28]
 801dd12:	0030      	movs	r0, r6
 801dd14:	4641      	mov	r1, r8
 801dd16:	f7e2 fc53 	bl	80005c0 <__aeabi_lmul>
 801dd1a:	9a08      	ldr	r2, [sp, #32]
 801dd1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dd1e:	9112      	str	r1, [sp, #72]	@ 0x48
 801dd20:	0038      	movs	r0, r7
 801dd22:	4651      	mov	r1, sl
 801dd24:	f7e2 fc4c 	bl	80005c0 <__aeabi_lmul>
 801dd28:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dd2a:	9a07      	ldr	r2, [sp, #28]
 801dd2c:	4684      	mov	ip, r0
 801dd2e:	4461      	add	r1, ip
 801dd30:	1049      	asrs	r1, r1, #1
 801dd32:	6021      	str	r1, [r4, #0]
 801dd34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd36:	0038      	movs	r0, r7
 801dd38:	4651      	mov	r1, sl
 801dd3a:	f7e2 fc41 	bl	80005c0 <__aeabi_lmul>
 801dd3e:	9a08      	ldr	r2, [sp, #32]
 801dd40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dd42:	000f      	movs	r7, r1
 801dd44:	0030      	movs	r0, r6
 801dd46:	4641      	mov	r1, r8
 801dd48:	f7e2 fc3a 	bl	80005c0 <__aeabi_lmul>
 801dd4c:	9b00      	ldr	r3, [sp, #0]
 801dd4e:	9a01      	ldr	r2, [sp, #4]
 801dd50:	469c      	mov	ip, r3
 801dd52:	9803      	ldr	r0, [sp, #12]
 801dd54:	1a7f      	subs	r7, r7, r1
 801dd56:	107f      	asrs	r7, r7, #1
 801dd58:	6067      	str	r7, [r4, #4]
 801dd5a:	0016      	movs	r6, r2
 801dd5c:	4464      	add	r4, ip
 801dd5e:	4684      	mov	ip, r0
 801dd60:	4466      	add	r6, ip
 801dd62:	17f2      	asrs	r2, r6, #31
 801dd64:	4690      	mov	r8, r2
 801dd66:	9902      	ldr	r1, [sp, #8]
 801dd68:	9f04      	ldr	r7, [sp, #16]
 801dd6a:	0030      	movs	r0, r6
 801dd6c:	1bcf      	subs	r7, r1, r7
 801dd6e:	17fa      	asrs	r2, r7, #31
 801dd70:	4692      	mov	sl, r2
 801dd72:	4641      	mov	r1, r8
 801dd74:	9a05      	ldr	r2, [sp, #20]
 801dd76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd78:	f7e2 fc22 	bl	80005c0 <__aeabi_lmul>
 801dd7c:	9a06      	ldr	r2, [sp, #24]
 801dd7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd80:	9112      	str	r1, [sp, #72]	@ 0x48
 801dd82:	0038      	movs	r0, r7
 801dd84:	4651      	mov	r1, sl
 801dd86:	f7e2 fc1b 	bl	80005c0 <__aeabi_lmul>
 801dd8a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801dd8c:	9a05      	ldr	r2, [sp, #20]
 801dd8e:	4684      	mov	ip, r0
 801dd90:	4648      	mov	r0, r9
 801dd92:	4461      	add	r1, ip
 801dd94:	1049      	asrs	r1, r1, #1
 801dd96:	6001      	str	r1, [r0, #0]
 801dd98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd9a:	0038      	movs	r0, r7
 801dd9c:	4651      	mov	r1, sl
 801dd9e:	f7e2 fc0f 	bl	80005c0 <__aeabi_lmul>
 801dda2:	9a06      	ldr	r2, [sp, #24]
 801dda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dda6:	000f      	movs	r7, r1
 801dda8:	0030      	movs	r0, r6
 801ddaa:	4641      	mov	r1, r8
 801ddac:	f7e2 fc08 	bl	80005c0 <__aeabi_lmul>
 801ddb0:	464e      	mov	r6, r9
 801ddb2:	9a00      	ldr	r2, [sp, #0]
 801ddb4:	9b01      	ldr	r3, [sp, #4]
 801ddb6:	4694      	mov	ip, r2
 801ddb8:	9803      	ldr	r0, [sp, #12]
 801ddba:	1a7f      	subs	r7, r7, r1
 801ddbc:	107f      	asrs	r7, r7, #1
 801ddbe:	6077      	str	r7, [r6, #4]
 801ddc0:	1a1e      	subs	r6, r3, r0
 801ddc2:	9b04      	ldr	r3, [sp, #16]
 801ddc4:	44e1      	add	r9, ip
 801ddc6:	469c      	mov	ip, r3
 801ddc8:	17f0      	asrs	r0, r6, #31
 801ddca:	4680      	mov	r8, r0
 801ddcc:	9902      	ldr	r1, [sp, #8]
 801ddce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ddd0:	4461      	add	r1, ip
 801ddd2:	17cb      	asrs	r3, r1, #31
 801ddd4:	000f      	movs	r7, r1
 801ddd6:	469a      	mov	sl, r3
 801ddd8:	0030      	movs	r0, r6
 801ddda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dddc:	4641      	mov	r1, r8
 801ddde:	f7e2 fbef 	bl	80005c0 <__aeabi_lmul>
 801dde2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dde4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dde6:	9101      	str	r1, [sp, #4]
 801dde8:	0038      	movs	r0, r7
 801ddea:	4651      	mov	r1, sl
 801ddec:	f7e2 fbe8 	bl	80005c0 <__aeabi_lmul>
 801ddf0:	9801      	ldr	r0, [sp, #4]
 801ddf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ddf4:	4684      	mov	ip, r0
 801ddf6:	4461      	add	r1, ip
 801ddf8:	1049      	asrs	r1, r1, #1
 801ddfa:	6029      	str	r1, [r5, #0]
 801ddfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ddfe:	0038      	movs	r0, r7
 801de00:	4651      	mov	r1, sl
 801de02:	f7e2 fbdd 	bl	80005c0 <__aeabi_lmul>
 801de06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801de08:	000f      	movs	r7, r1
 801de0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801de0c:	0030      	movs	r0, r6
 801de0e:	4641      	mov	r1, r8
 801de10:	f7e2 fbd6 	bl	80005c0 <__aeabi_lmul>
 801de14:	1a7f      	subs	r7, r7, r1
 801de16:	107f      	asrs	r7, r7, #1
 801de18:	606f      	str	r7, [r5, #4]
 801de1a:	9a00      	ldr	r2, [sp, #0]
 801de1c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801de1e:	4694      	mov	ip, r2
 801de20:	4465      	add	r5, ip
 801de22:	468c      	mov	ip, r1
 801de24:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801de26:	0013      	movs	r3, r2
 801de28:	4462      	add	r2, ip
 801de2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801de2c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801de2e:	429a      	cmp	r2, r3
 801de30:	d900      	bls.n	801de34 <arm_radix4_butterfly_q31+0x478>
 801de32:	e73a      	b.n	801dcaa <arm_radix4_butterfly_q31+0x2ee>
 801de34:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801de36:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801de38:	468c      	mov	ip, r1
 801de3a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801de3c:	4462      	add	r2, ip
 801de3e:	468c      	mov	ip, r1
 801de40:	9216      	str	r2, [sp, #88]	@ 0x58
 801de42:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801de44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801de46:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801de48:	4462      	add	r2, ip
 801de4a:	468c      	mov	ip, r1
 801de4c:	9219      	str	r2, [sp, #100]	@ 0x64
 801de4e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801de50:	3301      	adds	r3, #1
 801de52:	4462      	add	r2, ip
 801de54:	9218      	str	r2, [sp, #96]	@ 0x60
 801de56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801de58:	9315      	str	r3, [sp, #84]	@ 0x54
 801de5a:	3208      	adds	r2, #8
 801de5c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801de5e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801de60:	4293      	cmp	r3, r2
 801de62:	d800      	bhi.n	801de66 <arm_radix4_butterfly_q31+0x4aa>
 801de64:	e6e8      	b.n	801dc38 <arm_radix4_butterfly_q31+0x27c>
 801de66:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801de68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801de6a:	009b      	lsls	r3, r3, #2
 801de6c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801de6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801de70:	9213      	str	r2, [sp, #76]	@ 0x4c
 801de72:	089b      	lsrs	r3, r3, #2
 801de74:	9320      	str	r3, [sp, #128]	@ 0x80
 801de76:	2b04      	cmp	r3, #4
 801de78:	d900      	bls.n	801de7c <arm_radix4_butterfly_q31+0x4c0>
 801de7a:	e6c1      	b.n	801dc00 <arm_radix4_butterfly_q31+0x244>
 801de7c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801de7e:	469a      	mov	sl, r3
 801de80:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801de82:	691c      	ldr	r4, [r3, #16]
 801de84:	685a      	ldr	r2, [r3, #4]
 801de86:	46a1      	mov	r9, r4
 801de88:	4690      	mov	r8, r2
 801de8a:	6819      	ldr	r1, [r3, #0]
 801de8c:	689a      	ldr	r2, [r3, #8]
 801de8e:	699f      	ldr	r7, [r3, #24]
 801de90:	188d      	adds	r5, r1, r2
 801de92:	444d      	add	r5, r9
 801de94:	19ed      	adds	r5, r5, r7
 801de96:	69de      	ldr	r6, [r3, #28]
 801de98:	601d      	str	r5, [r3, #0]
 801de9a:	4645      	mov	r5, r8
 801de9c:	46b4      	mov	ip, r6
 801de9e:	68d8      	ldr	r0, [r3, #12]
 801dea0:	695c      	ldr	r4, [r3, #20]
 801dea2:	182d      	adds	r5, r5, r0
 801dea4:	192d      	adds	r5, r5, r4
 801dea6:	4465      	add	r5, ip
 801dea8:	605d      	str	r5, [r3, #4]
 801deaa:	1a8d      	subs	r5, r1, r2
 801deac:	444d      	add	r5, r9
 801deae:	1bed      	subs	r5, r5, r7
 801deb0:	609d      	str	r5, [r3, #8]
 801deb2:	4645      	mov	r5, r8
 801deb4:	1a2d      	subs	r5, r5, r0
 801deb6:	192d      	adds	r5, r5, r4
 801deb8:	1bad      	subs	r5, r5, r6
 801deba:	464e      	mov	r6, r9
 801debc:	60dd      	str	r5, [r3, #12]
 801debe:	180d      	adds	r5, r1, r0
 801dec0:	1bad      	subs	r5, r5, r6
 801dec2:	4666      	mov	r6, ip
 801dec4:	1bad      	subs	r5, r5, r6
 801dec6:	611d      	str	r5, [r3, #16]
 801dec8:	4645      	mov	r5, r8
 801deca:	1aad      	subs	r5, r5, r2
 801decc:	4442      	add	r2, r8
 801dece:	1b12      	subs	r2, r2, r4
 801ded0:	1bd2      	subs	r2, r2, r7
 801ded2:	1a08      	subs	r0, r1, r0
 801ded4:	61da      	str	r2, [r3, #28]
 801ded6:	4649      	mov	r1, r9
 801ded8:	2201      	movs	r2, #1
 801deda:	1a41      	subs	r1, r0, r1
 801dedc:	4252      	negs	r2, r2
 801dede:	4461      	add	r1, ip
 801dee0:	4694      	mov	ip, r2
 801dee2:	44e2      	add	sl, ip
 801dee4:	4652      	mov	r2, sl
 801dee6:	1b2d      	subs	r5, r5, r4
 801dee8:	19ed      	adds	r5, r5, r7
 801deea:	615d      	str	r5, [r3, #20]
 801deec:	6199      	str	r1, [r3, #24]
 801deee:	3320      	adds	r3, #32
 801def0:	2a00      	cmp	r2, #0
 801def2:	d1c6      	bne.n	801de82 <arm_radix4_butterfly_q31+0x4c6>
 801def4:	b027      	add	sp, #156	@ 0x9c
 801def6:	bc3c      	pop	{r2, r3, r4, r5}
 801def8:	4690      	mov	r8, r2
 801defa:	4699      	mov	r9, r3
 801defc:	46a2      	mov	sl, r4
 801defe:	46ab      	mov	fp, r5
 801df00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df02:	469a      	mov	sl, r3
 801df04:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801df06:	e7bc      	b.n	801de82 <arm_radix4_butterfly_q31+0x4c6>

0801df08 <arm_radix4_butterfly_inverse_q31>:
 801df08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df0a:	464d      	mov	r5, r9
 801df0c:	4644      	mov	r4, r8
 801df0e:	465f      	mov	r7, fp
 801df10:	4656      	mov	r6, sl
 801df12:	b4f0      	push	{r4, r5, r6, r7}
 801df14:	b0a7      	sub	sp, #156	@ 0x9c
 801df16:	469c      	mov	ip, r3
 801df18:	9114      	str	r1, [sp, #80]	@ 0x50
 801df1a:	0889      	lsrs	r1, r1, #2
 801df1c:	9310      	str	r3, [sp, #64]	@ 0x40
 801df1e:	00cb      	lsls	r3, r1, #3
 801df20:	0015      	movs	r5, r2
 801df22:	9223      	str	r2, [sp, #140]	@ 0x8c
 801df24:	18c2      	adds	r2, r0, r3
 801df26:	000c      	movs	r4, r1
 801df28:	9124      	str	r1, [sp, #144]	@ 0x90
 801df2a:	18d1      	adds	r1, r2, r3
 801df2c:	468b      	mov	fp, r1
 801df2e:	469a      	mov	sl, r3
 801df30:	4663      	mov	r3, ip
 801df32:	44da      	add	sl, fp
 801df34:	46d0      	mov	r8, sl
 801df36:	4681      	mov	r9, r0
 801df38:	4692      	mov	sl, r2
 801df3a:	0119      	lsls	r1, r3, #4
 801df3c:	910d      	str	r1, [sp, #52]	@ 0x34
 801df3e:	00d9      	lsls	r1, r3, #3
 801df40:	005b      	lsls	r3, r3, #1
 801df42:	4463      	add	r3, ip
 801df44:	910e      	str	r1, [sp, #56]	@ 0x38
 801df46:	00d9      	lsls	r1, r3, #3
 801df48:	9022      	str	r0, [sp, #136]	@ 0x88
 801df4a:	9025      	str	r0, [sp, #148]	@ 0x94
 801df4c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801df4e:	9502      	str	r5, [sp, #8]
 801df50:	9500      	str	r5, [sp, #0]
 801df52:	9501      	str	r5, [sp, #4]
 801df54:	9409      	str	r4, [sp, #36]	@ 0x24
 801df56:	464b      	mov	r3, r9
 801df58:	681b      	ldr	r3, [r3, #0]
 801df5a:	4652      	mov	r2, sl
 801df5c:	111c      	asrs	r4, r3, #4
 801df5e:	465b      	mov	r3, fp
 801df60:	4648      	mov	r0, r9
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	6812      	ldr	r2, [r2, #0]
 801df66:	6840      	ldr	r0, [r0, #4]
 801df68:	111b      	asrs	r3, r3, #4
 801df6a:	18e7      	adds	r7, r4, r3
 801df6c:	1ae3      	subs	r3, r4, r3
 801df6e:	1114      	asrs	r4, r2, #4
 801df70:	4642      	mov	r2, r8
 801df72:	1105      	asrs	r5, r0, #4
 801df74:	4658      	mov	r0, fp
 801df76:	6812      	ldr	r2, [r2, #0]
 801df78:	6840      	ldr	r0, [r0, #4]
 801df7a:	9303      	str	r3, [sp, #12]
 801df7c:	1113      	asrs	r3, r2, #4
 801df7e:	18e2      	adds	r2, r4, r3
 801df80:	1103      	asrs	r3, r0, #4
 801df82:	18ee      	adds	r6, r5, r3
 801df84:	1ae8      	subs	r0, r5, r3
 801df86:	464d      	mov	r5, r9
 801df88:	18bb      	adds	r3, r7, r2
 801df8a:	602b      	str	r3, [r5, #0]
 801df8c:	4641      	mov	r1, r8
 801df8e:	4655      	mov	r5, sl
 801df90:	6849      	ldr	r1, [r1, #4]
 801df92:	686d      	ldr	r5, [r5, #4]
 801df94:	110b      	asrs	r3, r1, #4
 801df96:	112d      	asrs	r5, r5, #4
 801df98:	18eb      	adds	r3, r5, r3
 801df9a:	464d      	mov	r5, r9
 801df9c:	18f1      	adds	r1, r6, r3
 801df9e:	6069      	str	r1, [r5, #4]
 801dfa0:	4655      	mov	r5, sl
 801dfa2:	686d      	ldr	r5, [r5, #4]
 801dfa4:	9004      	str	r0, [sp, #16]
 801dfa6:	112c      	asrs	r4, r5, #4
 801dfa8:	4645      	mov	r5, r8
 801dfaa:	686d      	ldr	r5, [r5, #4]
 801dfac:	1129      	asrs	r1, r5, #4
 801dfae:	1a65      	subs	r5, r4, r1
 801dfb0:	4651      	mov	r1, sl
 801dfb2:	6809      	ldr	r1, [r1, #0]
 801dfb4:	1abc      	subs	r4, r7, r2
 801dfb6:	1108      	asrs	r0, r1, #4
 801dfb8:	4641      	mov	r1, r8
 801dfba:	17e2      	asrs	r2, r4, #31
 801dfbc:	6809      	ldr	r1, [r1, #0]
 801dfbe:	9207      	str	r2, [sp, #28]
 801dfc0:	9a01      	ldr	r2, [sp, #4]
 801dfc2:	1109      	asrs	r1, r1, #4
 801dfc4:	6817      	ldr	r7, [r2, #0]
 801dfc6:	1a41      	subs	r1, r0, r1
 801dfc8:	9106      	str	r1, [sp, #24]
 801dfca:	0039      	movs	r1, r7
 801dfcc:	17ff      	asrs	r7, r7, #31
 801dfce:	0038      	movs	r0, r7
 801dfd0:	9505      	str	r5, [sp, #20]
 801dfd2:	1af5      	subs	r5, r6, r3
 801dfd4:	17ef      	asrs	r7, r5, #31
 801dfd6:	970b      	str	r7, [sp, #44]	@ 0x2c
 801dfd8:	6857      	ldr	r7, [r2, #4]
 801dfda:	0003      	movs	r3, r0
 801dfdc:	17fe      	asrs	r6, r7, #31
 801dfde:	000a      	movs	r2, r1
 801dfe0:	9108      	str	r1, [sp, #32]
 801dfe2:	900a      	str	r0, [sp, #40]	@ 0x28
 801dfe4:	17e1      	asrs	r1, r4, #31
 801dfe6:	0020      	movs	r0, r4
 801dfe8:	960c      	str	r6, [sp, #48]	@ 0x30
 801dfea:	f7e2 fae9 	bl	80005c0 <__aeabi_lmul>
 801dfee:	003a      	movs	r2, r7
 801dff0:	17fb      	asrs	r3, r7, #31
 801dff2:	000e      	movs	r6, r1
 801dff4:	0028      	movs	r0, r5
 801dff6:	17e9      	asrs	r1, r5, #31
 801dff8:	f7e2 fae2 	bl	80005c0 <__aeabi_lmul>
 801dffc:	4653      	mov	r3, sl
 801dffe:	1a76      	subs	r6, r6, r1
 801e000:	0076      	lsls	r6, r6, #1
 801e002:	601e      	str	r6, [r3, #0]
 801e004:	002a      	movs	r2, r5
 801e006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e008:	9808      	ldr	r0, [sp, #32]
 801e00a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e00c:	f7e2 fad8 	bl	80005c0 <__aeabi_lmul>
 801e010:	003a      	movs	r2, r7
 801e012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e014:	000d      	movs	r5, r1
 801e016:	0020      	movs	r0, r4
 801e018:	9907      	ldr	r1, [sp, #28]
 801e01a:	f7e2 fad1 	bl	80005c0 <__aeabi_lmul>
 801e01e:	4657      	mov	r7, sl
 801e020:	186d      	adds	r5, r5, r1
 801e022:	006d      	lsls	r5, r5, #1
 801e024:	607d      	str	r5, [r7, #4]
 801e026:	9b03      	ldr	r3, [sp, #12]
 801e028:	9e06      	ldr	r6, [sp, #24]
 801e02a:	9d05      	ldr	r5, [sp, #20]
 801e02c:	46b4      	mov	ip, r6
 801e02e:	1b5d      	subs	r5, r3, r5
 801e030:	9b00      	ldr	r3, [sp, #0]
 801e032:	17ef      	asrs	r7, r5, #31
 801e034:	0039      	movs	r1, r7
 801e036:	681f      	ldr	r7, [r3, #0]
 801e038:	17fc      	asrs	r4, r7, #31
 801e03a:	0020      	movs	r0, r4
 801e03c:	9c04      	ldr	r4, [sp, #16]
 801e03e:	4464      	add	r4, ip
 801e040:	17e6      	asrs	r6, r4, #31
 801e042:	9407      	str	r4, [sp, #28]
 801e044:	9608      	str	r6, [sp, #32]
 801e046:	685e      	ldr	r6, [r3, #4]
 801e048:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e04a:	17f2      	asrs	r2, r6, #31
 801e04c:	0003      	movs	r3, r0
 801e04e:	920c      	str	r2, [sp, #48]	@ 0x30
 801e050:	0028      	movs	r0, r5
 801e052:	003a      	movs	r2, r7
 801e054:	910a      	str	r1, [sp, #40]	@ 0x28
 801e056:	f7e2 fab3 	bl	80005c0 <__aeabi_lmul>
 801e05a:	0032      	movs	r2, r6
 801e05c:	17f3      	asrs	r3, r6, #31
 801e05e:	9807      	ldr	r0, [sp, #28]
 801e060:	000c      	movs	r4, r1
 801e062:	9908      	ldr	r1, [sp, #32]
 801e064:	f7e2 faac 	bl	80005c0 <__aeabi_lmul>
 801e068:	4658      	mov	r0, fp
 801e06a:	1a64      	subs	r4, r4, r1
 801e06c:	0064      	lsls	r4, r4, #1
 801e06e:	9a07      	ldr	r2, [sp, #28]
 801e070:	6004      	str	r4, [r0, #0]
 801e072:	9b08      	ldr	r3, [sp, #32]
 801e074:	0038      	movs	r0, r7
 801e076:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e078:	f7e2 faa2 	bl	80005c0 <__aeabi_lmul>
 801e07c:	0032      	movs	r2, r6
 801e07e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e080:	000c      	movs	r4, r1
 801e082:	0028      	movs	r0, r5
 801e084:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e086:	f7e2 fa9b 	bl	80005c0 <__aeabi_lmul>
 801e08a:	9d05      	ldr	r5, [sp, #20]
 801e08c:	465f      	mov	r7, fp
 801e08e:	46ac      	mov	ip, r5
 801e090:	1864      	adds	r4, r4, r1
 801e092:	9903      	ldr	r1, [sp, #12]
 801e094:	0064      	lsls	r4, r4, #1
 801e096:	4461      	add	r1, ip
 801e098:	607c      	str	r4, [r7, #4]
 801e09a:	000c      	movs	r4, r1
 801e09c:	17c9      	asrs	r1, r1, #31
 801e09e:	9105      	str	r1, [sp, #20]
 801e0a0:	9902      	ldr	r1, [sp, #8]
 801e0a2:	9804      	ldr	r0, [sp, #16]
 801e0a4:	680d      	ldr	r5, [r1, #0]
 801e0a6:	9e06      	ldr	r6, [sp, #24]
 801e0a8:	002b      	movs	r3, r5
 801e0aa:	17ed      	asrs	r5, r5, #31
 801e0ac:	684f      	ldr	r7, [r1, #4]
 801e0ae:	9503      	str	r5, [sp, #12]
 801e0b0:	1b85      	subs	r5, r0, r6
 801e0b2:	17e8      	asrs	r0, r5, #31
 801e0b4:	001a      	movs	r2, r3
 801e0b6:	9006      	str	r0, [sp, #24]
 801e0b8:	17fe      	asrs	r6, r7, #31
 801e0ba:	9304      	str	r3, [sp, #16]
 801e0bc:	0020      	movs	r0, r4
 801e0be:	9b03      	ldr	r3, [sp, #12]
 801e0c0:	17e1      	asrs	r1, r4, #31
 801e0c2:	9607      	str	r6, [sp, #28]
 801e0c4:	f7e2 fa7c 	bl	80005c0 <__aeabi_lmul>
 801e0c8:	003a      	movs	r2, r7
 801e0ca:	000e      	movs	r6, r1
 801e0cc:	17fb      	asrs	r3, r7, #31
 801e0ce:	0028      	movs	r0, r5
 801e0d0:	17e9      	asrs	r1, r5, #31
 801e0d2:	f7e2 fa75 	bl	80005c0 <__aeabi_lmul>
 801e0d6:	4640      	mov	r0, r8
 801e0d8:	1a76      	subs	r6, r6, r1
 801e0da:	0076      	lsls	r6, r6, #1
 801e0dc:	002a      	movs	r2, r5
 801e0de:	9b06      	ldr	r3, [sp, #24]
 801e0e0:	6006      	str	r6, [r0, #0]
 801e0e2:	9903      	ldr	r1, [sp, #12]
 801e0e4:	9804      	ldr	r0, [sp, #16]
 801e0e6:	f7e2 fa6b 	bl	80005c0 <__aeabi_lmul>
 801e0ea:	0020      	movs	r0, r4
 801e0ec:	2408      	movs	r4, #8
 801e0ee:	9b07      	ldr	r3, [sp, #28]
 801e0f0:	000d      	movs	r5, r1
 801e0f2:	003a      	movs	r2, r7
 801e0f4:	9905      	ldr	r1, [sp, #20]
 801e0f6:	f7e2 fa63 	bl	80005c0 <__aeabi_lmul>
 801e0fa:	4640      	mov	r0, r8
 801e0fc:	46a4      	mov	ip, r4
 801e0fe:	186d      	adds	r5, r5, r1
 801e100:	006d      	lsls	r5, r5, #1
 801e102:	6045      	str	r5, [r0, #4]
 801e104:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e106:	44e1      	add	r9, ip
 801e108:	3801      	subs	r0, #1
 801e10a:	9009      	str	r0, [sp, #36]	@ 0x24
 801e10c:	9a01      	ldr	r2, [sp, #4]
 801e10e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e110:	44e2      	add	sl, ip
 801e112:	44e3      	add	fp, ip
 801e114:	44e0      	add	r8, ip
 801e116:	46a4      	mov	ip, r4
 801e118:	4462      	add	r2, ip
 801e11a:	9201      	str	r2, [sp, #4]
 801e11c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e11e:	9b00      	ldr	r3, [sp, #0]
 801e120:	4694      	mov	ip, r2
 801e122:	4463      	add	r3, ip
 801e124:	9300      	str	r3, [sp, #0]
 801e126:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e128:	9902      	ldr	r1, [sp, #8]
 801e12a:	469c      	mov	ip, r3
 801e12c:	4461      	add	r1, ip
 801e12e:	9102      	str	r1, [sp, #8]
 801e130:	2800      	cmp	r0, #0
 801e132:	d000      	beq.n	801e136 <arm_radix4_butterfly_inverse_q31+0x22e>
 801e134:	e70f      	b.n	801df56 <arm_radix4_butterfly_inverse_q31+0x4e>
 801e136:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e138:	009b      	lsls	r3, r3, #2
 801e13a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e13c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e13e:	9320      	str	r3, [sp, #128]	@ 0x80
 801e140:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e142:	2b04      	cmp	r3, #4
 801e144:	d800      	bhi.n	801e148 <arm_radix4_butterfly_inverse_q31+0x240>
 801e146:	e17c      	b.n	801e442 <arm_radix4_butterfly_inverse_q31+0x53a>
 801e148:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e14a:	0893      	lsrs	r3, r2, #2
 801e14c:	1e59      	subs	r1, r3, #1
 801e14e:	9321      	str	r3, [sp, #132]	@ 0x84
 801e150:	00db      	lsls	r3, r3, #3
 801e152:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e154:	00d3      	lsls	r3, r2, #3
 801e156:	9300      	str	r3, [sp, #0]
 801e158:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e15a:	911a      	str	r1, [sp, #104]	@ 0x68
 801e15c:	00da      	lsls	r2, r3, #3
 801e15e:	921e      	str	r2, [sp, #120]	@ 0x78
 801e160:	011a      	lsls	r2, r3, #4
 801e162:	921d      	str	r2, [sp, #116]	@ 0x74
 801e164:	001a      	movs	r2, r3
 801e166:	4694      	mov	ip, r2
 801e168:	005b      	lsls	r3, r3, #1
 801e16a:	4463      	add	r3, ip
 801e16c:	00db      	lsls	r3, r3, #3
 801e16e:	931c      	str	r3, [sp, #112]	@ 0x70
 801e170:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e172:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e174:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e176:	9318      	str	r3, [sp, #96]	@ 0x60
 801e178:	9319      	str	r3, [sp, #100]	@ 0x64
 801e17a:	9316      	str	r3, [sp, #88]	@ 0x58
 801e17c:	2300      	movs	r3, #0
 801e17e:	9315      	str	r3, [sp, #84]	@ 0x54
 801e180:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e182:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e184:	681a      	ldr	r2, [r3, #0]
 801e186:	685b      	ldr	r3, [r3, #4]
 801e188:	9205      	str	r2, [sp, #20]
 801e18a:	9306      	str	r3, [sp, #24]
 801e18c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e18e:	468c      	mov	ip, r1
 801e190:	681a      	ldr	r2, [r3, #0]
 801e192:	685b      	ldr	r3, [r3, #4]
 801e194:	9207      	str	r2, [sp, #28]
 801e196:	9308      	str	r3, [sp, #32]
 801e198:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e19a:	681a      	ldr	r2, [r3, #0]
 801e19c:	685b      	ldr	r3, [r3, #4]
 801e19e:	9209      	str	r2, [sp, #36]	@ 0x24
 801e1a0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e1a2:	930a      	str	r3, [sp, #40]	@ 0x28
 801e1a4:	0013      	movs	r3, r2
 801e1a6:	4463      	add	r3, ip
 801e1a8:	4698      	mov	r8, r3
 801e1aa:	0013      	movs	r3, r2
 801e1ac:	4442      	add	r2, r8
 801e1ae:	4691      	mov	r9, r2
 801e1b0:	001a      	movs	r2, r3
 801e1b2:	444a      	add	r2, r9
 801e1b4:	4692      	mov	sl, r2
 801e1b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e1b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e1ba:	4293      	cmp	r3, r2
 801e1bc:	d800      	bhi.n	801e1c0 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e1be:	e0d9      	b.n	801e374 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e1c0:	4694      	mov	ip, r2
 801e1c2:	4644      	mov	r4, r8
 801e1c4:	4655      	mov	r5, sl
 801e1c6:	4688      	mov	r8, r1
 801e1c8:	9b07      	ldr	r3, [sp, #28]
 801e1ca:	17db      	asrs	r3, r3, #31
 801e1cc:	930c      	str	r3, [sp, #48]	@ 0x30
 801e1ce:	9b08      	ldr	r3, [sp, #32]
 801e1d0:	17db      	asrs	r3, r3, #31
 801e1d2:	930d      	str	r3, [sp, #52]	@ 0x34
 801e1d4:	9b05      	ldr	r3, [sp, #20]
 801e1d6:	17db      	asrs	r3, r3, #31
 801e1d8:	930e      	str	r3, [sp, #56]	@ 0x38
 801e1da:	9b06      	ldr	r3, [sp, #24]
 801e1dc:	17db      	asrs	r3, r3, #31
 801e1de:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e1e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1e2:	17db      	asrs	r3, r3, #31
 801e1e4:	9310      	str	r3, [sp, #64]	@ 0x40
 801e1e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e1e8:	17db      	asrs	r3, r3, #31
 801e1ea:	9311      	str	r3, [sp, #68]	@ 0x44
 801e1ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e1ee:	4463      	add	r3, ip
 801e1f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e1f2:	4643      	mov	r3, r8
 801e1f4:	4641      	mov	r1, r8
 801e1f6:	681a      	ldr	r2, [r3, #0]
 801e1f8:	464b      	mov	r3, r9
 801e1fa:	684f      	ldr	r7, [r1, #4]
 801e1fc:	4649      	mov	r1, r9
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	18d6      	adds	r6, r2, r3
 801e202:	1ad3      	subs	r3, r2, r3
 801e204:	9301      	str	r3, [sp, #4]
 801e206:	684b      	ldr	r3, [r1, #4]
 801e208:	1af9      	subs	r1, r7, r3
 801e20a:	9102      	str	r1, [sp, #8]
 801e20c:	6829      	ldr	r1, [r5, #0]
 801e20e:	18f8      	adds	r0, r7, r3
 801e210:	468c      	mov	ip, r1
 801e212:	6827      	ldr	r7, [r4, #0]
 801e214:	4467      	add	r7, ip
 801e216:	003a      	movs	r2, r7
 801e218:	19f3      	adds	r3, r6, r7
 801e21a:	4647      	mov	r7, r8
 801e21c:	109b      	asrs	r3, r3, #2
 801e21e:	603b      	str	r3, [r7, #0]
 801e220:	6869      	ldr	r1, [r5, #4]
 801e222:	6867      	ldr	r7, [r4, #4]
 801e224:	468c      	mov	ip, r1
 801e226:	4467      	add	r7, ip
 801e228:	003b      	movs	r3, r7
 801e22a:	19c1      	adds	r1, r0, r7
 801e22c:	4647      	mov	r7, r8
 801e22e:	1ab6      	subs	r6, r6, r2
 801e230:	1089      	asrs	r1, r1, #2
 801e232:	6079      	str	r1, [r7, #4]
 801e234:	17f2      	asrs	r2, r6, #31
 801e236:	9900      	ldr	r1, [sp, #0]
 801e238:	4692      	mov	sl, r2
 801e23a:	468c      	mov	ip, r1
 801e23c:	6867      	ldr	r7, [r4, #4]
 801e23e:	6869      	ldr	r1, [r5, #4]
 801e240:	44e0      	add	r8, ip
 801e242:	1a7f      	subs	r7, r7, r1
 801e244:	9703      	str	r7, [sp, #12]
 801e246:	6821      	ldr	r1, [r4, #0]
 801e248:	682f      	ldr	r7, [r5, #0]
 801e24a:	1bc9      	subs	r1, r1, r7
 801e24c:	1ac7      	subs	r7, r0, r3
 801e24e:	17fa      	asrs	r2, r7, #31
 801e250:	4693      	mov	fp, r2
 801e252:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e254:	9a07      	ldr	r2, [sp, #28]
 801e256:	9104      	str	r1, [sp, #16]
 801e258:	0030      	movs	r0, r6
 801e25a:	4651      	mov	r1, sl
 801e25c:	f7e2 f9b0 	bl	80005c0 <__aeabi_lmul>
 801e260:	9a08      	ldr	r2, [sp, #32]
 801e262:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e264:	9112      	str	r1, [sp, #72]	@ 0x48
 801e266:	0038      	movs	r0, r7
 801e268:	4659      	mov	r1, fp
 801e26a:	f7e2 f9a9 	bl	80005c0 <__aeabi_lmul>
 801e26e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e270:	9a07      	ldr	r2, [sp, #28]
 801e272:	1a41      	subs	r1, r0, r1
 801e274:	1049      	asrs	r1, r1, #1
 801e276:	6021      	str	r1, [r4, #0]
 801e278:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e27a:	0038      	movs	r0, r7
 801e27c:	4659      	mov	r1, fp
 801e27e:	f7e2 f99f 	bl	80005c0 <__aeabi_lmul>
 801e282:	9a08      	ldr	r2, [sp, #32]
 801e284:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e286:	000f      	movs	r7, r1
 801e288:	0030      	movs	r0, r6
 801e28a:	4651      	mov	r1, sl
 801e28c:	f7e2 f998 	bl	80005c0 <__aeabi_lmul>
 801e290:	9b00      	ldr	r3, [sp, #0]
 801e292:	187f      	adds	r7, r7, r1
 801e294:	469c      	mov	ip, r3
 801e296:	107f      	asrs	r7, r7, #1
 801e298:	6067      	str	r7, [r4, #4]
 801e29a:	9a01      	ldr	r2, [sp, #4]
 801e29c:	9f03      	ldr	r7, [sp, #12]
 801e29e:	9802      	ldr	r0, [sp, #8]
 801e2a0:	1bd7      	subs	r7, r2, r7
 801e2a2:	17fe      	asrs	r6, r7, #31
 801e2a4:	0031      	movs	r1, r6
 801e2a6:	9e04      	ldr	r6, [sp, #16]
 801e2a8:	4682      	mov	sl, r0
 801e2aa:	4464      	add	r4, ip
 801e2ac:	46b4      	mov	ip, r6
 801e2ae:	44e2      	add	sl, ip
 801e2b0:	4652      	mov	r2, sl
 801e2b2:	17d2      	asrs	r2, r2, #31
 801e2b4:	4693      	mov	fp, r2
 801e2b6:	0038      	movs	r0, r7
 801e2b8:	9a05      	ldr	r2, [sp, #20]
 801e2ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e2bc:	9112      	str	r1, [sp, #72]	@ 0x48
 801e2be:	f7e2 f97f 	bl	80005c0 <__aeabi_lmul>
 801e2c2:	9a06      	ldr	r2, [sp, #24]
 801e2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e2c6:	000e      	movs	r6, r1
 801e2c8:	4650      	mov	r0, sl
 801e2ca:	4659      	mov	r1, fp
 801e2cc:	f7e2 f978 	bl	80005c0 <__aeabi_lmul>
 801e2d0:	4648      	mov	r0, r9
 801e2d2:	1a76      	subs	r6, r6, r1
 801e2d4:	1076      	asrs	r6, r6, #1
 801e2d6:	6006      	str	r6, [r0, #0]
 801e2d8:	9a05      	ldr	r2, [sp, #20]
 801e2da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e2dc:	4650      	mov	r0, sl
 801e2de:	4659      	mov	r1, fp
 801e2e0:	f7e2 f96e 	bl	80005c0 <__aeabi_lmul>
 801e2e4:	9a06      	ldr	r2, [sp, #24]
 801e2e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e2e8:	000e      	movs	r6, r1
 801e2ea:	0038      	movs	r0, r7
 801e2ec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e2ee:	f7e2 f967 	bl	80005c0 <__aeabi_lmul>
 801e2f2:	9a00      	ldr	r2, [sp, #0]
 801e2f4:	9f03      	ldr	r7, [sp, #12]
 801e2f6:	4694      	mov	ip, r2
 801e2f8:	1876      	adds	r6, r6, r1
 801e2fa:	4649      	mov	r1, r9
 801e2fc:	44e1      	add	r9, ip
 801e2fe:	46bc      	mov	ip, r7
 801e300:	9b01      	ldr	r3, [sp, #4]
 801e302:	1076      	asrs	r6, r6, #1
 801e304:	4463      	add	r3, ip
 801e306:	17df      	asrs	r7, r3, #31
 801e308:	604e      	str	r6, [r1, #4]
 801e30a:	46ba      	mov	sl, r7
 801e30c:	001e      	movs	r6, r3
 801e30e:	9802      	ldr	r0, [sp, #8]
 801e310:	9b04      	ldr	r3, [sp, #16]
 801e312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e314:	1ac7      	subs	r7, r0, r3
 801e316:	17fb      	asrs	r3, r7, #31
 801e318:	469b      	mov	fp, r3
 801e31a:	0030      	movs	r0, r6
 801e31c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e31e:	4651      	mov	r1, sl
 801e320:	f7e2 f94e 	bl	80005c0 <__aeabi_lmul>
 801e324:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e326:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e328:	9101      	str	r1, [sp, #4]
 801e32a:	0038      	movs	r0, r7
 801e32c:	4659      	mov	r1, fp
 801e32e:	f7e2 f947 	bl	80005c0 <__aeabi_lmul>
 801e332:	9801      	ldr	r0, [sp, #4]
 801e334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e336:	1a41      	subs	r1, r0, r1
 801e338:	1049      	asrs	r1, r1, #1
 801e33a:	6029      	str	r1, [r5, #0]
 801e33c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e33e:	0038      	movs	r0, r7
 801e340:	4659      	mov	r1, fp
 801e342:	f7e2 f93d 	bl	80005c0 <__aeabi_lmul>
 801e346:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e348:	000f      	movs	r7, r1
 801e34a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e34c:	0030      	movs	r0, r6
 801e34e:	4651      	mov	r1, sl
 801e350:	f7e2 f936 	bl	80005c0 <__aeabi_lmul>
 801e354:	187f      	adds	r7, r7, r1
 801e356:	107f      	asrs	r7, r7, #1
 801e358:	606f      	str	r7, [r5, #4]
 801e35a:	9a00      	ldr	r2, [sp, #0]
 801e35c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e35e:	4694      	mov	ip, r2
 801e360:	4465      	add	r5, ip
 801e362:	468c      	mov	ip, r1
 801e364:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e366:	0013      	movs	r3, r2
 801e368:	4462      	add	r2, ip
 801e36a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e36c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e36e:	429a      	cmp	r2, r3
 801e370:	d900      	bls.n	801e374 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e372:	e73e      	b.n	801e1f2 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e374:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e376:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e378:	468c      	mov	ip, r1
 801e37a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e37c:	4462      	add	r2, ip
 801e37e:	468c      	mov	ip, r1
 801e380:	9216      	str	r2, [sp, #88]	@ 0x58
 801e382:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e384:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e386:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e388:	4462      	add	r2, ip
 801e38a:	468c      	mov	ip, r1
 801e38c:	9219      	str	r2, [sp, #100]	@ 0x64
 801e38e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e390:	3301      	adds	r3, #1
 801e392:	4462      	add	r2, ip
 801e394:	9218      	str	r2, [sp, #96]	@ 0x60
 801e396:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e398:	9315      	str	r3, [sp, #84]	@ 0x54
 801e39a:	3208      	adds	r2, #8
 801e39c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e39e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e3a0:	4293      	cmp	r3, r2
 801e3a2:	d800      	bhi.n	801e3a6 <arm_radix4_butterfly_inverse_q31+0x49e>
 801e3a4:	e6ec      	b.n	801e180 <arm_radix4_butterfly_inverse_q31+0x278>
 801e3a6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e3a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e3aa:	009b      	lsls	r3, r3, #2
 801e3ac:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e3ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e3b0:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e3b2:	089b      	lsrs	r3, r3, #2
 801e3b4:	9320      	str	r3, [sp, #128]	@ 0x80
 801e3b6:	2b04      	cmp	r3, #4
 801e3b8:	d900      	bls.n	801e3bc <arm_radix4_butterfly_inverse_q31+0x4b4>
 801e3ba:	e6c5      	b.n	801e148 <arm_radix4_butterfly_inverse_q31+0x240>
 801e3bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e3be:	469a      	mov	sl, r3
 801e3c0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e3c2:	681a      	ldr	r2, [r3, #0]
 801e3c4:	6918      	ldr	r0, [r3, #16]
 801e3c6:	4691      	mov	r9, r2
 801e3c8:	464c      	mov	r4, r9
 801e3ca:	4680      	mov	r8, r0
 801e3cc:	69de      	ldr	r6, [r3, #28]
 801e3ce:	689d      	ldr	r5, [r3, #8]
 801e3d0:	46b4      	mov	ip, r6
 801e3d2:	6998      	ldr	r0, [r3, #24]
 801e3d4:	1964      	adds	r4, r4, r5
 801e3d6:	6859      	ldr	r1, [r3, #4]
 801e3d8:	68da      	ldr	r2, [r3, #12]
 801e3da:	4444      	add	r4, r8
 801e3dc:	695f      	ldr	r7, [r3, #20]
 801e3de:	1824      	adds	r4, r4, r0
 801e3e0:	601c      	str	r4, [r3, #0]
 801e3e2:	188c      	adds	r4, r1, r2
 801e3e4:	19e4      	adds	r4, r4, r7
 801e3e6:	4464      	add	r4, ip
 801e3e8:	605c      	str	r4, [r3, #4]
 801e3ea:	464c      	mov	r4, r9
 801e3ec:	1b64      	subs	r4, r4, r5
 801e3ee:	4444      	add	r4, r8
 801e3f0:	1a24      	subs	r4, r4, r0
 801e3f2:	609c      	str	r4, [r3, #8]
 801e3f4:	1a8c      	subs	r4, r1, r2
 801e3f6:	19e4      	adds	r4, r4, r7
 801e3f8:	1ba4      	subs	r4, r4, r6
 801e3fa:	60dc      	str	r4, [r3, #12]
 801e3fc:	464c      	mov	r4, r9
 801e3fe:	4646      	mov	r6, r8
 801e400:	1aa4      	subs	r4, r4, r2
 801e402:	1ba4      	subs	r4, r4, r6
 801e404:	4464      	add	r4, ip
 801e406:	611c      	str	r4, [r3, #16]
 801e408:	194c      	adds	r4, r1, r5
 801e40a:	1be4      	subs	r4, r4, r7
 801e40c:	1a24      	subs	r4, r4, r0
 801e40e:	615c      	str	r4, [r3, #20]
 801e410:	4644      	mov	r4, r8
 801e412:	4666      	mov	r6, ip
 801e414:	444a      	add	r2, r9
 801e416:	1b12      	subs	r2, r2, r4
 801e418:	1b92      	subs	r2, r2, r6
 801e41a:	619a      	str	r2, [r3, #24]
 801e41c:	1b4a      	subs	r2, r1, r5
 801e41e:	1bd1      	subs	r1, r2, r7
 801e420:	2201      	movs	r2, #1
 801e422:	4252      	negs	r2, r2
 801e424:	4694      	mov	ip, r2
 801e426:	44e2      	add	sl, ip
 801e428:	4652      	mov	r2, sl
 801e42a:	1809      	adds	r1, r1, r0
 801e42c:	61d9      	str	r1, [r3, #28]
 801e42e:	3320      	adds	r3, #32
 801e430:	2a00      	cmp	r2, #0
 801e432:	d1c6      	bne.n	801e3c2 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801e434:	b027      	add	sp, #156	@ 0x9c
 801e436:	bc3c      	pop	{r2, r3, r4, r5}
 801e438:	4690      	mov	r8, r2
 801e43a:	4699      	mov	r9, r3
 801e43c:	46a2      	mov	sl, r4
 801e43e:	46ab      	mov	fp, r5
 801e440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e442:	469a      	mov	sl, r3
 801e444:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e446:	e7bc      	b.n	801e3c2 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801e448 <arm_cmplx_mag_squared_q31>:
 801e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e44a:	464f      	mov	r7, r9
 801e44c:	4646      	mov	r6, r8
 801e44e:	0004      	movs	r4, r0
 801e450:	b4c0      	push	{r6, r7}
 801e452:	0016      	movs	r6, r2
 801e454:	000f      	movs	r7, r1
 801e456:	2a00      	cmp	r2, #0
 801e458:	d018      	beq.n	801e48c <arm_cmplx_mag_squared_q31+0x44>
 801e45a:	6823      	ldr	r3, [r4, #0]
 801e45c:	6822      	ldr	r2, [r4, #0]
 801e45e:	17d9      	asrs	r1, r3, #31
 801e460:	6863      	ldr	r3, [r4, #4]
 801e462:	0010      	movs	r0, r2
 801e464:	4698      	mov	r8, r3
 801e466:	17db      	asrs	r3, r3, #31
 801e468:	4699      	mov	r9, r3
 801e46a:	000b      	movs	r3, r1
 801e46c:	f7e2 f8a8 	bl	80005c0 <__aeabi_lmul>
 801e470:	4642      	mov	r2, r8
 801e472:	104d      	asrs	r5, r1, #1
 801e474:	464b      	mov	r3, r9
 801e476:	4640      	mov	r0, r8
 801e478:	4649      	mov	r1, r9
 801e47a:	f7e2 f8a1 	bl	80005c0 <__aeabi_lmul>
 801e47e:	1049      	asrs	r1, r1, #1
 801e480:	1869      	adds	r1, r5, r1
 801e482:	3e01      	subs	r6, #1
 801e484:	c702      	stmia	r7!, {r1}
 801e486:	3408      	adds	r4, #8
 801e488:	2e00      	cmp	r6, #0
 801e48a:	d1e6      	bne.n	801e45a <arm_cmplx_mag_squared_q31+0x12>
 801e48c:	bc0c      	pop	{r2, r3}
 801e48e:	4690      	mov	r8, r2
 801e490:	4699      	mov	r9, r3
 801e492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e494 <arm_mult_q31>:
 801e494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e496:	4646      	mov	r6, r8
 801e498:	464f      	mov	r7, r9
 801e49a:	4690      	mov	r8, r2
 801e49c:	b4c0      	push	{r6, r7}
 801e49e:	001d      	movs	r5, r3
 801e4a0:	0006      	movs	r6, r0
 801e4a2:	000f      	movs	r7, r1
 801e4a4:	2400      	movs	r4, #0
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d020      	beq.n	801e4ec <arm_mult_q31+0x58>
 801e4aa:	4b12      	ldr	r3, [pc, #72]	@ (801e4f4 <arm_mult_q31+0x60>)
 801e4ac:	4699      	mov	r9, r3
 801e4ae:	e007      	b.n	801e4c0 <arm_mult_q31+0x2c>
 801e4b0:	464b      	mov	r3, r9
 801e4b2:	4059      	eors	r1, r3
 801e4b4:	4643      	mov	r3, r8
 801e4b6:	3d01      	subs	r5, #1
 801e4b8:	5119      	str	r1, [r3, r4]
 801e4ba:	3404      	adds	r4, #4
 801e4bc:	2d00      	cmp	r5, #0
 801e4be:	d015      	beq.n	801e4ec <arm_mult_q31+0x58>
 801e4c0:	5933      	ldr	r3, [r6, r4]
 801e4c2:	593a      	ldr	r2, [r7, r4]
 801e4c4:	17d9      	asrs	r1, r3, #31
 801e4c6:	593b      	ldr	r3, [r7, r4]
 801e4c8:	5930      	ldr	r0, [r6, r4]
 801e4ca:	17db      	asrs	r3, r3, #31
 801e4cc:	f7e2 f878 	bl	80005c0 <__aeabi_lmul>
 801e4d0:	004b      	lsls	r3, r1, #1
 801e4d2:	0fc0      	lsrs	r0, r0, #31
 801e4d4:	4318      	orrs	r0, r3
 801e4d6:	17c9      	asrs	r1, r1, #31
 801e4d8:	17c3      	asrs	r3, r0, #31
 801e4da:	428b      	cmp	r3, r1
 801e4dc:	d1e8      	bne.n	801e4b0 <arm_mult_q31+0x1c>
 801e4de:	0001      	movs	r1, r0
 801e4e0:	4643      	mov	r3, r8
 801e4e2:	3d01      	subs	r5, #1
 801e4e4:	5119      	str	r1, [r3, r4]
 801e4e6:	3404      	adds	r4, #4
 801e4e8:	2d00      	cmp	r5, #0
 801e4ea:	d1e9      	bne.n	801e4c0 <arm_mult_q31+0x2c>
 801e4ec:	bc0c      	pop	{r2, r3}
 801e4ee:	4690      	mov	r8, r2
 801e4f0:	4699      	mov	r9, r3
 801e4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4f4:	7fffffff 	.word	0x7fffffff

0801e4f8 <arm_add_q31>:
 801e4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4fa:	465f      	mov	r7, fp
 801e4fc:	4656      	mov	r6, sl
 801e4fe:	464d      	mov	r5, r9
 801e500:	4644      	mov	r4, r8
 801e502:	b4f0      	push	{r4, r5, r6, r7}
 801e504:	4693      	mov	fp, r2
 801e506:	b083      	sub	sp, #12
 801e508:	4681      	mov	r9, r0
 801e50a:	468a      	mov	sl, r1
 801e50c:	4698      	mov	r8, r3
 801e50e:	2200      	movs	r2, #0
 801e510:	2b00      	cmp	r3, #0
 801e512:	d020      	beq.n	801e556 <arm_add_q31+0x5e>
 801e514:	4649      	mov	r1, r9
 801e516:	4653      	mov	r3, sl
 801e518:	588e      	ldr	r6, [r1, r2]
 801e51a:	589b      	ldr	r3, [r3, r2]
 801e51c:	17f7      	asrs	r7, r6, #31
 801e51e:	001c      	movs	r4, r3
 801e520:	0030      	movs	r0, r6
 801e522:	0039      	movs	r1, r7
 801e524:	17dd      	asrs	r5, r3, #31
 801e526:	46b4      	mov	ip, r6
 801e528:	1900      	adds	r0, r0, r4
 801e52a:	4169      	adcs	r1, r5
 801e52c:	4463      	add	r3, ip
 801e52e:	9000      	str	r0, [sp, #0]
 801e530:	9101      	str	r1, [sp, #4]
 801e532:	17d9      	asrs	r1, r3, #31
 801e534:	468c      	mov	ip, r1
 801e536:	9901      	ldr	r1, [sp, #4]
 801e538:	458c      	cmp	ip, r1
 801e53a:	d002      	beq.n	801e542 <arm_add_q31+0x4a>
 801e53c:	17cb      	asrs	r3, r1, #31
 801e53e:	4909      	ldr	r1, [pc, #36]	@ (801e564 <arm_add_q31+0x6c>)
 801e540:	404b      	eors	r3, r1
 801e542:	4659      	mov	r1, fp
 801e544:	508b      	str	r3, [r1, r2]
 801e546:	2301      	movs	r3, #1
 801e548:	425b      	negs	r3, r3
 801e54a:	469c      	mov	ip, r3
 801e54c:	44e0      	add	r8, ip
 801e54e:	4643      	mov	r3, r8
 801e550:	3204      	adds	r2, #4
 801e552:	2b00      	cmp	r3, #0
 801e554:	d1de      	bne.n	801e514 <arm_add_q31+0x1c>
 801e556:	b003      	add	sp, #12
 801e558:	bc3c      	pop	{r2, r3, r4, r5}
 801e55a:	4690      	mov	r8, r2
 801e55c:	4699      	mov	r9, r3
 801e55e:	46a2      	mov	sl, r4
 801e560:	46ab      	mov	fp, r5
 801e562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e564:	7fffffff 	.word	0x7fffffff

0801e568 <atof>:
 801e568:	b510      	push	{r4, lr}
 801e56a:	2100      	movs	r1, #0
 801e56c:	f000 fe12 	bl	801f194 <strtod>
 801e570:	bd10      	pop	{r4, pc}

0801e572 <atoi>:
 801e572:	b510      	push	{r4, lr}
 801e574:	220a      	movs	r2, #10
 801e576:	2100      	movs	r1, #0
 801e578:	f000 fea4 	bl	801f2c4 <strtol>
 801e57c:	bd10      	pop	{r4, pc}
	...

0801e580 <sulp>:
 801e580:	b570      	push	{r4, r5, r6, lr}
 801e582:	0016      	movs	r6, r2
 801e584:	000d      	movs	r5, r1
 801e586:	f003 fcf3 	bl	8021f70 <__ulp>
 801e58a:	2e00      	cmp	r6, #0
 801e58c:	d00d      	beq.n	801e5aa <sulp+0x2a>
 801e58e:	236b      	movs	r3, #107	@ 0x6b
 801e590:	006a      	lsls	r2, r5, #1
 801e592:	0d52      	lsrs	r2, r2, #21
 801e594:	1a9b      	subs	r3, r3, r2
 801e596:	2b00      	cmp	r3, #0
 801e598:	dd07      	ble.n	801e5aa <sulp+0x2a>
 801e59a:	2400      	movs	r4, #0
 801e59c:	4a03      	ldr	r2, [pc, #12]	@ (801e5ac <sulp+0x2c>)
 801e59e:	051b      	lsls	r3, r3, #20
 801e5a0:	189d      	adds	r5, r3, r2
 801e5a2:	002b      	movs	r3, r5
 801e5a4:	0022      	movs	r2, r4
 801e5a6:	f7e4 f849 	bl	800263c <__aeabi_dmul>
 801e5aa:	bd70      	pop	{r4, r5, r6, pc}
 801e5ac:	3ff00000 	.word	0x3ff00000

0801e5b0 <_strtod_l>:
 801e5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5b2:	b0a3      	sub	sp, #140	@ 0x8c
 801e5b4:	921b      	str	r2, [sp, #108]	@ 0x6c
 801e5b6:	2200      	movs	r2, #0
 801e5b8:	2600      	movs	r6, #0
 801e5ba:	2700      	movs	r7, #0
 801e5bc:	9005      	str	r0, [sp, #20]
 801e5be:	9109      	str	r1, [sp, #36]	@ 0x24
 801e5c0:	921e      	str	r2, [sp, #120]	@ 0x78
 801e5c2:	911d      	str	r1, [sp, #116]	@ 0x74
 801e5c4:	780a      	ldrb	r2, [r1, #0]
 801e5c6:	2a2b      	cmp	r2, #43	@ 0x2b
 801e5c8:	d053      	beq.n	801e672 <_strtod_l+0xc2>
 801e5ca:	d83f      	bhi.n	801e64c <_strtod_l+0x9c>
 801e5cc:	2a0d      	cmp	r2, #13
 801e5ce:	d839      	bhi.n	801e644 <_strtod_l+0x94>
 801e5d0:	2a08      	cmp	r2, #8
 801e5d2:	d839      	bhi.n	801e648 <_strtod_l+0x98>
 801e5d4:	2a00      	cmp	r2, #0
 801e5d6:	d042      	beq.n	801e65e <_strtod_l+0xae>
 801e5d8:	2200      	movs	r2, #0
 801e5da:	9212      	str	r2, [sp, #72]	@ 0x48
 801e5dc:	2100      	movs	r1, #0
 801e5de:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801e5e0:	910c      	str	r1, [sp, #48]	@ 0x30
 801e5e2:	782a      	ldrb	r2, [r5, #0]
 801e5e4:	2a30      	cmp	r2, #48	@ 0x30
 801e5e6:	d000      	beq.n	801e5ea <_strtod_l+0x3a>
 801e5e8:	e083      	b.n	801e6f2 <_strtod_l+0x142>
 801e5ea:	786a      	ldrb	r2, [r5, #1]
 801e5ec:	3120      	adds	r1, #32
 801e5ee:	438a      	bics	r2, r1
 801e5f0:	2a58      	cmp	r2, #88	@ 0x58
 801e5f2:	d000      	beq.n	801e5f6 <_strtod_l+0x46>
 801e5f4:	e073      	b.n	801e6de <_strtod_l+0x12e>
 801e5f6:	9302      	str	r3, [sp, #8]
 801e5f8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e5fa:	4a95      	ldr	r2, [pc, #596]	@ (801e850 <_strtod_l+0x2a0>)
 801e5fc:	9301      	str	r3, [sp, #4]
 801e5fe:	ab1e      	add	r3, sp, #120	@ 0x78
 801e600:	9300      	str	r3, [sp, #0]
 801e602:	9805      	ldr	r0, [sp, #20]
 801e604:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e606:	a91d      	add	r1, sp, #116	@ 0x74
 801e608:	f002 fd62 	bl	80210d0 <__gethex>
 801e60c:	230f      	movs	r3, #15
 801e60e:	0002      	movs	r2, r0
 801e610:	401a      	ands	r2, r3
 801e612:	0004      	movs	r4, r0
 801e614:	9206      	str	r2, [sp, #24]
 801e616:	4218      	tst	r0, r3
 801e618:	d005      	beq.n	801e626 <_strtod_l+0x76>
 801e61a:	2a06      	cmp	r2, #6
 801e61c:	d12b      	bne.n	801e676 <_strtod_l+0xc6>
 801e61e:	2300      	movs	r3, #0
 801e620:	3501      	adds	r5, #1
 801e622:	951d      	str	r5, [sp, #116]	@ 0x74
 801e624:	9312      	str	r3, [sp, #72]	@ 0x48
 801e626:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e628:	2b00      	cmp	r3, #0
 801e62a:	d002      	beq.n	801e632 <_strtod_l+0x82>
 801e62c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e62e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e630:	6013      	str	r3, [r2, #0]
 801e632:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e634:	2b00      	cmp	r3, #0
 801e636:	d019      	beq.n	801e66c <_strtod_l+0xbc>
 801e638:	2380      	movs	r3, #128	@ 0x80
 801e63a:	0030      	movs	r0, r6
 801e63c:	061b      	lsls	r3, r3, #24
 801e63e:	18f9      	adds	r1, r7, r3
 801e640:	b023      	add	sp, #140	@ 0x8c
 801e642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e644:	2a20      	cmp	r2, #32
 801e646:	d1c7      	bne.n	801e5d8 <_strtod_l+0x28>
 801e648:	3101      	adds	r1, #1
 801e64a:	e7ba      	b.n	801e5c2 <_strtod_l+0x12>
 801e64c:	2a2d      	cmp	r2, #45	@ 0x2d
 801e64e:	d1c3      	bne.n	801e5d8 <_strtod_l+0x28>
 801e650:	3a2c      	subs	r2, #44	@ 0x2c
 801e652:	9212      	str	r2, [sp, #72]	@ 0x48
 801e654:	1c4a      	adds	r2, r1, #1
 801e656:	921d      	str	r2, [sp, #116]	@ 0x74
 801e658:	784a      	ldrb	r2, [r1, #1]
 801e65a:	2a00      	cmp	r2, #0
 801e65c:	d1be      	bne.n	801e5dc <_strtod_l+0x2c>
 801e65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e660:	931d      	str	r3, [sp, #116]	@ 0x74
 801e662:	2300      	movs	r3, #0
 801e664:	9312      	str	r3, [sp, #72]	@ 0x48
 801e666:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d1df      	bne.n	801e62c <_strtod_l+0x7c>
 801e66c:	0030      	movs	r0, r6
 801e66e:	0039      	movs	r1, r7
 801e670:	e7e6      	b.n	801e640 <_strtod_l+0x90>
 801e672:	2200      	movs	r2, #0
 801e674:	e7ed      	b.n	801e652 <_strtod_l+0xa2>
 801e676:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e678:	2a00      	cmp	r2, #0
 801e67a:	d007      	beq.n	801e68c <_strtod_l+0xdc>
 801e67c:	2135      	movs	r1, #53	@ 0x35
 801e67e:	a820      	add	r0, sp, #128	@ 0x80
 801e680:	f003 fd6c 	bl	802215c <__copybits>
 801e684:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e686:	9805      	ldr	r0, [sp, #20]
 801e688:	f003 f926 	bl	80218d8 <_Bfree>
 801e68c:	9806      	ldr	r0, [sp, #24]
 801e68e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e690:	3801      	subs	r0, #1
 801e692:	2804      	cmp	r0, #4
 801e694:	d806      	bhi.n	801e6a4 <_strtod_l+0xf4>
 801e696:	f7e1 fd71 	bl	800017c <__gnu_thumb1_case_uqi>
 801e69a:	0312      	.short	0x0312
 801e69c:	1e1c      	.short	0x1e1c
 801e69e:	12          	.byte	0x12
 801e69f:	00          	.byte	0x00
 801e6a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e6a2:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801e6a4:	05e4      	lsls	r4, r4, #23
 801e6a6:	d502      	bpl.n	801e6ae <_strtod_l+0xfe>
 801e6a8:	2380      	movs	r3, #128	@ 0x80
 801e6aa:	061b      	lsls	r3, r3, #24
 801e6ac:	431f      	orrs	r7, r3
 801e6ae:	4b69      	ldr	r3, [pc, #420]	@ (801e854 <_strtod_l+0x2a4>)
 801e6b0:	423b      	tst	r3, r7
 801e6b2:	d1b8      	bne.n	801e626 <_strtod_l+0x76>
 801e6b4:	f001 fd90 	bl	80201d8 <__errno>
 801e6b8:	2322      	movs	r3, #34	@ 0x22
 801e6ba:	6003      	str	r3, [r0, #0]
 801e6bc:	e7b3      	b.n	801e626 <_strtod_l+0x76>
 801e6be:	4966      	ldr	r1, [pc, #408]	@ (801e858 <_strtod_l+0x2a8>)
 801e6c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e6c2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e6c4:	400a      	ands	r2, r1
 801e6c6:	4965      	ldr	r1, [pc, #404]	@ (801e85c <_strtod_l+0x2ac>)
 801e6c8:	185b      	adds	r3, r3, r1
 801e6ca:	051b      	lsls	r3, r3, #20
 801e6cc:	431a      	orrs	r2, r3
 801e6ce:	0017      	movs	r7, r2
 801e6d0:	e7e8      	b.n	801e6a4 <_strtod_l+0xf4>
 801e6d2:	4f60      	ldr	r7, [pc, #384]	@ (801e854 <_strtod_l+0x2a4>)
 801e6d4:	e7e6      	b.n	801e6a4 <_strtod_l+0xf4>
 801e6d6:	2601      	movs	r6, #1
 801e6d8:	4f61      	ldr	r7, [pc, #388]	@ (801e860 <_strtod_l+0x2b0>)
 801e6da:	4276      	negs	r6, r6
 801e6dc:	e7e2      	b.n	801e6a4 <_strtod_l+0xf4>
 801e6de:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e6e0:	1c5a      	adds	r2, r3, #1
 801e6e2:	921d      	str	r2, [sp, #116]	@ 0x74
 801e6e4:	785b      	ldrb	r3, [r3, #1]
 801e6e6:	2b30      	cmp	r3, #48	@ 0x30
 801e6e8:	d0f9      	beq.n	801e6de <_strtod_l+0x12e>
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	d09b      	beq.n	801e626 <_strtod_l+0x76>
 801e6ee:	2301      	movs	r3, #1
 801e6f0:	930c      	str	r3, [sp, #48]	@ 0x30
 801e6f2:	2500      	movs	r5, #0
 801e6f4:	220a      	movs	r2, #10
 801e6f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e6f8:	950d      	str	r5, [sp, #52]	@ 0x34
 801e6fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e6fc:	9508      	str	r5, [sp, #32]
 801e6fe:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e700:	7804      	ldrb	r4, [r0, #0]
 801e702:	0023      	movs	r3, r4
 801e704:	3b30      	subs	r3, #48	@ 0x30
 801e706:	b2d9      	uxtb	r1, r3
 801e708:	2909      	cmp	r1, #9
 801e70a:	d927      	bls.n	801e75c <_strtod_l+0x1ac>
 801e70c:	2201      	movs	r2, #1
 801e70e:	4955      	ldr	r1, [pc, #340]	@ (801e864 <_strtod_l+0x2b4>)
 801e710:	f001 fcd4 	bl	80200bc <strncmp>
 801e714:	2800      	cmp	r0, #0
 801e716:	d031      	beq.n	801e77c <_strtod_l+0x1cc>
 801e718:	2000      	movs	r0, #0
 801e71a:	0023      	movs	r3, r4
 801e71c:	4684      	mov	ip, r0
 801e71e:	9a08      	ldr	r2, [sp, #32]
 801e720:	900e      	str	r0, [sp, #56]	@ 0x38
 801e722:	9206      	str	r2, [sp, #24]
 801e724:	2220      	movs	r2, #32
 801e726:	0019      	movs	r1, r3
 801e728:	4391      	bics	r1, r2
 801e72a:	000a      	movs	r2, r1
 801e72c:	2100      	movs	r1, #0
 801e72e:	9107      	str	r1, [sp, #28]
 801e730:	2a45      	cmp	r2, #69	@ 0x45
 801e732:	d000      	beq.n	801e736 <_strtod_l+0x186>
 801e734:	e0c0      	b.n	801e8b8 <_strtod_l+0x308>
 801e736:	9b06      	ldr	r3, [sp, #24]
 801e738:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e73a:	4303      	orrs	r3, r0
 801e73c:	4313      	orrs	r3, r2
 801e73e:	428b      	cmp	r3, r1
 801e740:	d08d      	beq.n	801e65e <_strtod_l+0xae>
 801e742:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e744:	9309      	str	r3, [sp, #36]	@ 0x24
 801e746:	3301      	adds	r3, #1
 801e748:	931d      	str	r3, [sp, #116]	@ 0x74
 801e74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e74c:	785b      	ldrb	r3, [r3, #1]
 801e74e:	2b2b      	cmp	r3, #43	@ 0x2b
 801e750:	d070      	beq.n	801e834 <_strtod_l+0x284>
 801e752:	000c      	movs	r4, r1
 801e754:	2b2d      	cmp	r3, #45	@ 0x2d
 801e756:	d173      	bne.n	801e840 <_strtod_l+0x290>
 801e758:	2401      	movs	r4, #1
 801e75a:	e06c      	b.n	801e836 <_strtod_l+0x286>
 801e75c:	9908      	ldr	r1, [sp, #32]
 801e75e:	2908      	cmp	r1, #8
 801e760:	dc09      	bgt.n	801e776 <_strtod_l+0x1c6>
 801e762:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e764:	4351      	muls	r1, r2
 801e766:	185b      	adds	r3, r3, r1
 801e768:	930d      	str	r3, [sp, #52]	@ 0x34
 801e76a:	9b08      	ldr	r3, [sp, #32]
 801e76c:	3001      	adds	r0, #1
 801e76e:	3301      	adds	r3, #1
 801e770:	9308      	str	r3, [sp, #32]
 801e772:	901d      	str	r0, [sp, #116]	@ 0x74
 801e774:	e7c3      	b.n	801e6fe <_strtod_l+0x14e>
 801e776:	4355      	muls	r5, r2
 801e778:	195d      	adds	r5, r3, r5
 801e77a:	e7f6      	b.n	801e76a <_strtod_l+0x1ba>
 801e77c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e77e:	1c5a      	adds	r2, r3, #1
 801e780:	921d      	str	r2, [sp, #116]	@ 0x74
 801e782:	9a08      	ldr	r2, [sp, #32]
 801e784:	785b      	ldrb	r3, [r3, #1]
 801e786:	2a00      	cmp	r2, #0
 801e788:	d03a      	beq.n	801e800 <_strtod_l+0x250>
 801e78a:	900e      	str	r0, [sp, #56]	@ 0x38
 801e78c:	9206      	str	r2, [sp, #24]
 801e78e:	001a      	movs	r2, r3
 801e790:	3a30      	subs	r2, #48	@ 0x30
 801e792:	2a09      	cmp	r2, #9
 801e794:	d912      	bls.n	801e7bc <_strtod_l+0x20c>
 801e796:	2201      	movs	r2, #1
 801e798:	4694      	mov	ip, r2
 801e79a:	e7c3      	b.n	801e724 <_strtod_l+0x174>
 801e79c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e79e:	3001      	adds	r0, #1
 801e7a0:	1c5a      	adds	r2, r3, #1
 801e7a2:	921d      	str	r2, [sp, #116]	@ 0x74
 801e7a4:	785b      	ldrb	r3, [r3, #1]
 801e7a6:	2b30      	cmp	r3, #48	@ 0x30
 801e7a8:	d0f8      	beq.n	801e79c <_strtod_l+0x1ec>
 801e7aa:	001a      	movs	r2, r3
 801e7ac:	3a31      	subs	r2, #49	@ 0x31
 801e7ae:	2a08      	cmp	r2, #8
 801e7b0:	d83b      	bhi.n	801e82a <_strtod_l+0x27a>
 801e7b2:	900e      	str	r0, [sp, #56]	@ 0x38
 801e7b4:	2000      	movs	r0, #0
 801e7b6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e7b8:	9006      	str	r0, [sp, #24]
 801e7ba:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e7bc:	001a      	movs	r2, r3
 801e7be:	1c41      	adds	r1, r0, #1
 801e7c0:	3a30      	subs	r2, #48	@ 0x30
 801e7c2:	2b30      	cmp	r3, #48	@ 0x30
 801e7c4:	d016      	beq.n	801e7f4 <_strtod_l+0x244>
 801e7c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e7c8:	185b      	adds	r3, r3, r1
 801e7ca:	930e      	str	r3, [sp, #56]	@ 0x38
 801e7cc:	9b06      	ldr	r3, [sp, #24]
 801e7ce:	210a      	movs	r1, #10
 801e7d0:	469c      	mov	ip, r3
 801e7d2:	4484      	add	ip, r0
 801e7d4:	459c      	cmp	ip, r3
 801e7d6:	d115      	bne.n	801e804 <_strtod_l+0x254>
 801e7d8:	9906      	ldr	r1, [sp, #24]
 801e7da:	9b06      	ldr	r3, [sp, #24]
 801e7dc:	3101      	adds	r1, #1
 801e7de:	1809      	adds	r1, r1, r0
 801e7e0:	181b      	adds	r3, r3, r0
 801e7e2:	9106      	str	r1, [sp, #24]
 801e7e4:	2b08      	cmp	r3, #8
 801e7e6:	dc19      	bgt.n	801e81c <_strtod_l+0x26c>
 801e7e8:	230a      	movs	r3, #10
 801e7ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e7ec:	434b      	muls	r3, r1
 801e7ee:	2100      	movs	r1, #0
 801e7f0:	18d3      	adds	r3, r2, r3
 801e7f2:	930d      	str	r3, [sp, #52]	@ 0x34
 801e7f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e7f6:	0008      	movs	r0, r1
 801e7f8:	1c5a      	adds	r2, r3, #1
 801e7fa:	921d      	str	r2, [sp, #116]	@ 0x74
 801e7fc:	785b      	ldrb	r3, [r3, #1]
 801e7fe:	e7c6      	b.n	801e78e <_strtod_l+0x1de>
 801e800:	9808      	ldr	r0, [sp, #32]
 801e802:	e7d0      	b.n	801e7a6 <_strtod_l+0x1f6>
 801e804:	1c5c      	adds	r4, r3, #1
 801e806:	2b08      	cmp	r3, #8
 801e808:	dc04      	bgt.n	801e814 <_strtod_l+0x264>
 801e80a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e80c:	434b      	muls	r3, r1
 801e80e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e810:	0023      	movs	r3, r4
 801e812:	e7df      	b.n	801e7d4 <_strtod_l+0x224>
 801e814:	2c10      	cmp	r4, #16
 801e816:	dcfb      	bgt.n	801e810 <_strtod_l+0x260>
 801e818:	434d      	muls	r5, r1
 801e81a:	e7f9      	b.n	801e810 <_strtod_l+0x260>
 801e81c:	2100      	movs	r1, #0
 801e81e:	2b0f      	cmp	r3, #15
 801e820:	dce8      	bgt.n	801e7f4 <_strtod_l+0x244>
 801e822:	230a      	movs	r3, #10
 801e824:	435d      	muls	r5, r3
 801e826:	1955      	adds	r5, r2, r5
 801e828:	e7e4      	b.n	801e7f4 <_strtod_l+0x244>
 801e82a:	2200      	movs	r2, #0
 801e82c:	920e      	str	r2, [sp, #56]	@ 0x38
 801e82e:	9206      	str	r2, [sp, #24]
 801e830:	3201      	adds	r2, #1
 801e832:	e7b1      	b.n	801e798 <_strtod_l+0x1e8>
 801e834:	2400      	movs	r4, #0
 801e836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e838:	3302      	adds	r3, #2
 801e83a:	931d      	str	r3, [sp, #116]	@ 0x74
 801e83c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e83e:	789b      	ldrb	r3, [r3, #2]
 801e840:	001a      	movs	r2, r3
 801e842:	3a30      	subs	r2, #48	@ 0x30
 801e844:	2a09      	cmp	r2, #9
 801e846:	d913      	bls.n	801e870 <_strtod_l+0x2c0>
 801e848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e84a:	921d      	str	r2, [sp, #116]	@ 0x74
 801e84c:	2200      	movs	r2, #0
 801e84e:	e032      	b.n	801e8b6 <_strtod_l+0x306>
 801e850:	08025a60 	.word	0x08025a60
 801e854:	7ff00000 	.word	0x7ff00000
 801e858:	ffefffff 	.word	0xffefffff
 801e85c:	00000433 	.word	0x00000433
 801e860:	7fffffff 	.word	0x7fffffff
 801e864:	08025a48 	.word	0x08025a48
 801e868:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e86a:	1c5a      	adds	r2, r3, #1
 801e86c:	921d      	str	r2, [sp, #116]	@ 0x74
 801e86e:	785b      	ldrb	r3, [r3, #1]
 801e870:	2b30      	cmp	r3, #48	@ 0x30
 801e872:	d0f9      	beq.n	801e868 <_strtod_l+0x2b8>
 801e874:	2200      	movs	r2, #0
 801e876:	9207      	str	r2, [sp, #28]
 801e878:	001a      	movs	r2, r3
 801e87a:	3a31      	subs	r2, #49	@ 0x31
 801e87c:	2a08      	cmp	r2, #8
 801e87e:	d81b      	bhi.n	801e8b8 <_strtod_l+0x308>
 801e880:	3b30      	subs	r3, #48	@ 0x30
 801e882:	9310      	str	r3, [sp, #64]	@ 0x40
 801e884:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e886:	9307      	str	r3, [sp, #28]
 801e888:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e88a:	1c59      	adds	r1, r3, #1
 801e88c:	911d      	str	r1, [sp, #116]	@ 0x74
 801e88e:	785b      	ldrb	r3, [r3, #1]
 801e890:	001a      	movs	r2, r3
 801e892:	3a30      	subs	r2, #48	@ 0x30
 801e894:	2a09      	cmp	r2, #9
 801e896:	d93a      	bls.n	801e90e <_strtod_l+0x35e>
 801e898:	9a07      	ldr	r2, [sp, #28]
 801e89a:	1a8a      	subs	r2, r1, r2
 801e89c:	49b4      	ldr	r1, [pc, #720]	@ (801eb70 <_strtod_l+0x5c0>)
 801e89e:	9107      	str	r1, [sp, #28]
 801e8a0:	2a08      	cmp	r2, #8
 801e8a2:	dc04      	bgt.n	801e8ae <_strtod_l+0x2fe>
 801e8a4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e8a6:	9207      	str	r2, [sp, #28]
 801e8a8:	428a      	cmp	r2, r1
 801e8aa:	dd00      	ble.n	801e8ae <_strtod_l+0x2fe>
 801e8ac:	9107      	str	r1, [sp, #28]
 801e8ae:	2c00      	cmp	r4, #0
 801e8b0:	d002      	beq.n	801e8b8 <_strtod_l+0x308>
 801e8b2:	9a07      	ldr	r2, [sp, #28]
 801e8b4:	4252      	negs	r2, r2
 801e8b6:	9207      	str	r2, [sp, #28]
 801e8b8:	9a06      	ldr	r2, [sp, #24]
 801e8ba:	2a00      	cmp	r2, #0
 801e8bc:	d14d      	bne.n	801e95a <_strtod_l+0x3aa>
 801e8be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e8c0:	4310      	orrs	r0, r2
 801e8c2:	d000      	beq.n	801e8c6 <_strtod_l+0x316>
 801e8c4:	e6af      	b.n	801e626 <_strtod_l+0x76>
 801e8c6:	4662      	mov	r2, ip
 801e8c8:	2a00      	cmp	r2, #0
 801e8ca:	d000      	beq.n	801e8ce <_strtod_l+0x31e>
 801e8cc:	e6c7      	b.n	801e65e <_strtod_l+0xae>
 801e8ce:	2b69      	cmp	r3, #105	@ 0x69
 801e8d0:	d027      	beq.n	801e922 <_strtod_l+0x372>
 801e8d2:	dc23      	bgt.n	801e91c <_strtod_l+0x36c>
 801e8d4:	2b49      	cmp	r3, #73	@ 0x49
 801e8d6:	d024      	beq.n	801e922 <_strtod_l+0x372>
 801e8d8:	2b4e      	cmp	r3, #78	@ 0x4e
 801e8da:	d000      	beq.n	801e8de <_strtod_l+0x32e>
 801e8dc:	e6bf      	b.n	801e65e <_strtod_l+0xae>
 801e8de:	49a5      	ldr	r1, [pc, #660]	@ (801eb74 <_strtod_l+0x5c4>)
 801e8e0:	a81d      	add	r0, sp, #116	@ 0x74
 801e8e2:	f002 fe2b 	bl	802153c <__match>
 801e8e6:	2800      	cmp	r0, #0
 801e8e8:	d100      	bne.n	801e8ec <_strtod_l+0x33c>
 801e8ea:	e6b8      	b.n	801e65e <_strtod_l+0xae>
 801e8ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8ee:	781b      	ldrb	r3, [r3, #0]
 801e8f0:	2b28      	cmp	r3, #40	@ 0x28
 801e8f2:	d12c      	bne.n	801e94e <_strtod_l+0x39e>
 801e8f4:	49a0      	ldr	r1, [pc, #640]	@ (801eb78 <_strtod_l+0x5c8>)
 801e8f6:	aa20      	add	r2, sp, #128	@ 0x80
 801e8f8:	a81d      	add	r0, sp, #116	@ 0x74
 801e8fa:	f002 fe33 	bl	8021564 <__hexnan>
 801e8fe:	2805      	cmp	r0, #5
 801e900:	d125      	bne.n	801e94e <_strtod_l+0x39e>
 801e902:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e904:	4a9d      	ldr	r2, [pc, #628]	@ (801eb7c <_strtod_l+0x5cc>)
 801e906:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e908:	431a      	orrs	r2, r3
 801e90a:	0017      	movs	r7, r2
 801e90c:	e68b      	b.n	801e626 <_strtod_l+0x76>
 801e90e:	220a      	movs	r2, #10
 801e910:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e912:	434a      	muls	r2, r1
 801e914:	18d2      	adds	r2, r2, r3
 801e916:	3a30      	subs	r2, #48	@ 0x30
 801e918:	9210      	str	r2, [sp, #64]	@ 0x40
 801e91a:	e7b5      	b.n	801e888 <_strtod_l+0x2d8>
 801e91c:	2b6e      	cmp	r3, #110	@ 0x6e
 801e91e:	d0de      	beq.n	801e8de <_strtod_l+0x32e>
 801e920:	e69d      	b.n	801e65e <_strtod_l+0xae>
 801e922:	4997      	ldr	r1, [pc, #604]	@ (801eb80 <_strtod_l+0x5d0>)
 801e924:	a81d      	add	r0, sp, #116	@ 0x74
 801e926:	f002 fe09 	bl	802153c <__match>
 801e92a:	2800      	cmp	r0, #0
 801e92c:	d100      	bne.n	801e930 <_strtod_l+0x380>
 801e92e:	e696      	b.n	801e65e <_strtod_l+0xae>
 801e930:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e932:	4994      	ldr	r1, [pc, #592]	@ (801eb84 <_strtod_l+0x5d4>)
 801e934:	3b01      	subs	r3, #1
 801e936:	a81d      	add	r0, sp, #116	@ 0x74
 801e938:	931d      	str	r3, [sp, #116]	@ 0x74
 801e93a:	f002 fdff 	bl	802153c <__match>
 801e93e:	2800      	cmp	r0, #0
 801e940:	d102      	bne.n	801e948 <_strtod_l+0x398>
 801e942:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e944:	3301      	adds	r3, #1
 801e946:	931d      	str	r3, [sp, #116]	@ 0x74
 801e948:	2600      	movs	r6, #0
 801e94a:	4f8c      	ldr	r7, [pc, #560]	@ (801eb7c <_strtod_l+0x5cc>)
 801e94c:	e66b      	b.n	801e626 <_strtod_l+0x76>
 801e94e:	488e      	ldr	r0, [pc, #568]	@ (801eb88 <_strtod_l+0x5d8>)
 801e950:	f001 fc84 	bl	802025c <nan>
 801e954:	0006      	movs	r6, r0
 801e956:	000f      	movs	r7, r1
 801e958:	e665      	b.n	801e626 <_strtod_l+0x76>
 801e95a:	9b07      	ldr	r3, [sp, #28]
 801e95c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e95e:	1a9b      	subs	r3, r3, r2
 801e960:	930c      	str	r3, [sp, #48]	@ 0x30
 801e962:	9b08      	ldr	r3, [sp, #32]
 801e964:	2b00      	cmp	r3, #0
 801e966:	d101      	bne.n	801e96c <_strtod_l+0x3bc>
 801e968:	9b06      	ldr	r3, [sp, #24]
 801e96a:	9308      	str	r3, [sp, #32]
 801e96c:	9c06      	ldr	r4, [sp, #24]
 801e96e:	2c10      	cmp	r4, #16
 801e970:	dd00      	ble.n	801e974 <_strtod_l+0x3c4>
 801e972:	2410      	movs	r4, #16
 801e974:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e976:	f7e4 fd51 	bl	800341c <__aeabi_ui2d>
 801e97a:	9b06      	ldr	r3, [sp, #24]
 801e97c:	0006      	movs	r6, r0
 801e97e:	000f      	movs	r7, r1
 801e980:	2b09      	cmp	r3, #9
 801e982:	dc13      	bgt.n	801e9ac <_strtod_l+0x3fc>
 801e984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e986:	2b00      	cmp	r3, #0
 801e988:	d100      	bne.n	801e98c <_strtod_l+0x3dc>
 801e98a:	e64c      	b.n	801e626 <_strtod_l+0x76>
 801e98c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e98e:	2b00      	cmp	r3, #0
 801e990:	dc00      	bgt.n	801e994 <_strtod_l+0x3e4>
 801e992:	e07e      	b.n	801ea92 <_strtod_l+0x4e2>
 801e994:	2b16      	cmp	r3, #22
 801e996:	dc63      	bgt.n	801ea60 <_strtod_l+0x4b0>
 801e998:	497c      	ldr	r1, [pc, #496]	@ (801eb8c <_strtod_l+0x5dc>)
 801e99a:	00db      	lsls	r3, r3, #3
 801e99c:	18c9      	adds	r1, r1, r3
 801e99e:	0032      	movs	r2, r6
 801e9a0:	6808      	ldr	r0, [r1, #0]
 801e9a2:	6849      	ldr	r1, [r1, #4]
 801e9a4:	003b      	movs	r3, r7
 801e9a6:	f7e3 fe49 	bl	800263c <__aeabi_dmul>
 801e9aa:	e7d3      	b.n	801e954 <_strtod_l+0x3a4>
 801e9ac:	0022      	movs	r2, r4
 801e9ae:	4b77      	ldr	r3, [pc, #476]	@ (801eb8c <_strtod_l+0x5dc>)
 801e9b0:	3a09      	subs	r2, #9
 801e9b2:	00d2      	lsls	r2, r2, #3
 801e9b4:	189b      	adds	r3, r3, r2
 801e9b6:	681a      	ldr	r2, [r3, #0]
 801e9b8:	685b      	ldr	r3, [r3, #4]
 801e9ba:	f7e3 fe3f 	bl	800263c <__aeabi_dmul>
 801e9be:	0006      	movs	r6, r0
 801e9c0:	0028      	movs	r0, r5
 801e9c2:	000f      	movs	r7, r1
 801e9c4:	f7e4 fd2a 	bl	800341c <__aeabi_ui2d>
 801e9c8:	000b      	movs	r3, r1
 801e9ca:	0002      	movs	r2, r0
 801e9cc:	0039      	movs	r1, r7
 801e9ce:	0030      	movs	r0, r6
 801e9d0:	f7e2 fe8c 	bl	80016ec <__aeabi_dadd>
 801e9d4:	9b06      	ldr	r3, [sp, #24]
 801e9d6:	0006      	movs	r6, r0
 801e9d8:	000f      	movs	r7, r1
 801e9da:	2b0f      	cmp	r3, #15
 801e9dc:	ddd2      	ble.n	801e984 <_strtod_l+0x3d4>
 801e9de:	9b06      	ldr	r3, [sp, #24]
 801e9e0:	1b1c      	subs	r4, r3, r4
 801e9e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e9e4:	18e4      	adds	r4, r4, r3
 801e9e6:	2c00      	cmp	r4, #0
 801e9e8:	dc00      	bgt.n	801e9ec <_strtod_l+0x43c>
 801e9ea:	e09b      	b.n	801eb24 <_strtod_l+0x574>
 801e9ec:	220f      	movs	r2, #15
 801e9ee:	0023      	movs	r3, r4
 801e9f0:	4013      	ands	r3, r2
 801e9f2:	4214      	tst	r4, r2
 801e9f4:	d00a      	beq.n	801ea0c <_strtod_l+0x45c>
 801e9f6:	4965      	ldr	r1, [pc, #404]	@ (801eb8c <_strtod_l+0x5dc>)
 801e9f8:	00db      	lsls	r3, r3, #3
 801e9fa:	18c9      	adds	r1, r1, r3
 801e9fc:	0032      	movs	r2, r6
 801e9fe:	6808      	ldr	r0, [r1, #0]
 801ea00:	6849      	ldr	r1, [r1, #4]
 801ea02:	003b      	movs	r3, r7
 801ea04:	f7e3 fe1a 	bl	800263c <__aeabi_dmul>
 801ea08:	0006      	movs	r6, r0
 801ea0a:	000f      	movs	r7, r1
 801ea0c:	230f      	movs	r3, #15
 801ea0e:	439c      	bics	r4, r3
 801ea10:	d073      	beq.n	801eafa <_strtod_l+0x54a>
 801ea12:	3326      	adds	r3, #38	@ 0x26
 801ea14:	33ff      	adds	r3, #255	@ 0xff
 801ea16:	429c      	cmp	r4, r3
 801ea18:	dd4b      	ble.n	801eab2 <_strtod_l+0x502>
 801ea1a:	2300      	movs	r3, #0
 801ea1c:	9306      	str	r3, [sp, #24]
 801ea1e:	9307      	str	r3, [sp, #28]
 801ea20:	930d      	str	r3, [sp, #52]	@ 0x34
 801ea22:	9308      	str	r3, [sp, #32]
 801ea24:	2322      	movs	r3, #34	@ 0x22
 801ea26:	2600      	movs	r6, #0
 801ea28:	9a05      	ldr	r2, [sp, #20]
 801ea2a:	4f54      	ldr	r7, [pc, #336]	@ (801eb7c <_strtod_l+0x5cc>)
 801ea2c:	6013      	str	r3, [r2, #0]
 801ea2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ea30:	42b3      	cmp	r3, r6
 801ea32:	d100      	bne.n	801ea36 <_strtod_l+0x486>
 801ea34:	e5f7      	b.n	801e626 <_strtod_l+0x76>
 801ea36:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ea38:	9805      	ldr	r0, [sp, #20]
 801ea3a:	f002 ff4d 	bl	80218d8 <_Bfree>
 801ea3e:	9908      	ldr	r1, [sp, #32]
 801ea40:	9805      	ldr	r0, [sp, #20]
 801ea42:	f002 ff49 	bl	80218d8 <_Bfree>
 801ea46:	9907      	ldr	r1, [sp, #28]
 801ea48:	9805      	ldr	r0, [sp, #20]
 801ea4a:	f002 ff45 	bl	80218d8 <_Bfree>
 801ea4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ea50:	9805      	ldr	r0, [sp, #20]
 801ea52:	f002 ff41 	bl	80218d8 <_Bfree>
 801ea56:	9906      	ldr	r1, [sp, #24]
 801ea58:	9805      	ldr	r0, [sp, #20]
 801ea5a:	f002 ff3d 	bl	80218d8 <_Bfree>
 801ea5e:	e5e2      	b.n	801e626 <_strtod_l+0x76>
 801ea60:	2325      	movs	r3, #37	@ 0x25
 801ea62:	9a06      	ldr	r2, [sp, #24]
 801ea64:	1a9b      	subs	r3, r3, r2
 801ea66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ea68:	4293      	cmp	r3, r2
 801ea6a:	dbb8      	blt.n	801e9de <_strtod_l+0x42e>
 801ea6c:	240f      	movs	r4, #15
 801ea6e:	9b06      	ldr	r3, [sp, #24]
 801ea70:	4d46      	ldr	r5, [pc, #280]	@ (801eb8c <_strtod_l+0x5dc>)
 801ea72:	1ae4      	subs	r4, r4, r3
 801ea74:	00e1      	lsls	r1, r4, #3
 801ea76:	1869      	adds	r1, r5, r1
 801ea78:	0032      	movs	r2, r6
 801ea7a:	6808      	ldr	r0, [r1, #0]
 801ea7c:	6849      	ldr	r1, [r1, #4]
 801ea7e:	003b      	movs	r3, r7
 801ea80:	f7e3 fddc 	bl	800263c <__aeabi_dmul>
 801ea84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea86:	1b1c      	subs	r4, r3, r4
 801ea88:	00e4      	lsls	r4, r4, #3
 801ea8a:	192d      	adds	r5, r5, r4
 801ea8c:	682a      	ldr	r2, [r5, #0]
 801ea8e:	686b      	ldr	r3, [r5, #4]
 801ea90:	e789      	b.n	801e9a6 <_strtod_l+0x3f6>
 801ea92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea94:	3316      	adds	r3, #22
 801ea96:	dba2      	blt.n	801e9de <_strtod_l+0x42e>
 801ea98:	9907      	ldr	r1, [sp, #28]
 801ea9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ea9c:	4b3b      	ldr	r3, [pc, #236]	@ (801eb8c <_strtod_l+0x5dc>)
 801ea9e:	1a52      	subs	r2, r2, r1
 801eaa0:	00d2      	lsls	r2, r2, #3
 801eaa2:	189b      	adds	r3, r3, r2
 801eaa4:	0030      	movs	r0, r6
 801eaa6:	681a      	ldr	r2, [r3, #0]
 801eaa8:	685b      	ldr	r3, [r3, #4]
 801eaaa:	0039      	movs	r1, r7
 801eaac:	f7e3 f982 	bl	8001db4 <__aeabi_ddiv>
 801eab0:	e750      	b.n	801e954 <_strtod_l+0x3a4>
 801eab2:	2300      	movs	r3, #0
 801eab4:	0030      	movs	r0, r6
 801eab6:	0039      	movs	r1, r7
 801eab8:	4d35      	ldr	r5, [pc, #212]	@ (801eb90 <_strtod_l+0x5e0>)
 801eaba:	1124      	asrs	r4, r4, #4
 801eabc:	9309      	str	r3, [sp, #36]	@ 0x24
 801eabe:	2c01      	cmp	r4, #1
 801eac0:	dc1e      	bgt.n	801eb00 <_strtod_l+0x550>
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d001      	beq.n	801eaca <_strtod_l+0x51a>
 801eac6:	0006      	movs	r6, r0
 801eac8:	000f      	movs	r7, r1
 801eaca:	4b32      	ldr	r3, [pc, #200]	@ (801eb94 <_strtod_l+0x5e4>)
 801eacc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eace:	18ff      	adds	r7, r7, r3
 801ead0:	4b2f      	ldr	r3, [pc, #188]	@ (801eb90 <_strtod_l+0x5e0>)
 801ead2:	00d5      	lsls	r5, r2, #3
 801ead4:	195d      	adds	r5, r3, r5
 801ead6:	0032      	movs	r2, r6
 801ead8:	6828      	ldr	r0, [r5, #0]
 801eada:	6869      	ldr	r1, [r5, #4]
 801eadc:	003b      	movs	r3, r7
 801eade:	f7e3 fdad 	bl	800263c <__aeabi_dmul>
 801eae2:	4b26      	ldr	r3, [pc, #152]	@ (801eb7c <_strtod_l+0x5cc>)
 801eae4:	4a2c      	ldr	r2, [pc, #176]	@ (801eb98 <_strtod_l+0x5e8>)
 801eae6:	0006      	movs	r6, r0
 801eae8:	400b      	ands	r3, r1
 801eaea:	4293      	cmp	r3, r2
 801eaec:	d895      	bhi.n	801ea1a <_strtod_l+0x46a>
 801eaee:	4a2b      	ldr	r2, [pc, #172]	@ (801eb9c <_strtod_l+0x5ec>)
 801eaf0:	4293      	cmp	r3, r2
 801eaf2:	d913      	bls.n	801eb1c <_strtod_l+0x56c>
 801eaf4:	2601      	movs	r6, #1
 801eaf6:	4f2a      	ldr	r7, [pc, #168]	@ (801eba0 <_strtod_l+0x5f0>)
 801eaf8:	4276      	negs	r6, r6
 801eafa:	2300      	movs	r3, #0
 801eafc:	9309      	str	r3, [sp, #36]	@ 0x24
 801eafe:	e086      	b.n	801ec0e <_strtod_l+0x65e>
 801eb00:	2201      	movs	r2, #1
 801eb02:	4214      	tst	r4, r2
 801eb04:	d004      	beq.n	801eb10 <_strtod_l+0x560>
 801eb06:	682a      	ldr	r2, [r5, #0]
 801eb08:	686b      	ldr	r3, [r5, #4]
 801eb0a:	f7e3 fd97 	bl	800263c <__aeabi_dmul>
 801eb0e:	2301      	movs	r3, #1
 801eb10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eb12:	1064      	asrs	r4, r4, #1
 801eb14:	3201      	adds	r2, #1
 801eb16:	9209      	str	r2, [sp, #36]	@ 0x24
 801eb18:	3508      	adds	r5, #8
 801eb1a:	e7d0      	b.n	801eabe <_strtod_l+0x50e>
 801eb1c:	23d4      	movs	r3, #212	@ 0xd4
 801eb1e:	049b      	lsls	r3, r3, #18
 801eb20:	18cf      	adds	r7, r1, r3
 801eb22:	e7ea      	b.n	801eafa <_strtod_l+0x54a>
 801eb24:	2c00      	cmp	r4, #0
 801eb26:	d0e8      	beq.n	801eafa <_strtod_l+0x54a>
 801eb28:	4264      	negs	r4, r4
 801eb2a:	230f      	movs	r3, #15
 801eb2c:	0022      	movs	r2, r4
 801eb2e:	401a      	ands	r2, r3
 801eb30:	421c      	tst	r4, r3
 801eb32:	d00a      	beq.n	801eb4a <_strtod_l+0x59a>
 801eb34:	4b15      	ldr	r3, [pc, #84]	@ (801eb8c <_strtod_l+0x5dc>)
 801eb36:	00d2      	lsls	r2, r2, #3
 801eb38:	189b      	adds	r3, r3, r2
 801eb3a:	0030      	movs	r0, r6
 801eb3c:	681a      	ldr	r2, [r3, #0]
 801eb3e:	685b      	ldr	r3, [r3, #4]
 801eb40:	0039      	movs	r1, r7
 801eb42:	f7e3 f937 	bl	8001db4 <__aeabi_ddiv>
 801eb46:	0006      	movs	r6, r0
 801eb48:	000f      	movs	r7, r1
 801eb4a:	1124      	asrs	r4, r4, #4
 801eb4c:	d0d5      	beq.n	801eafa <_strtod_l+0x54a>
 801eb4e:	2c1f      	cmp	r4, #31
 801eb50:	dd28      	ble.n	801eba4 <_strtod_l+0x5f4>
 801eb52:	2300      	movs	r3, #0
 801eb54:	9306      	str	r3, [sp, #24]
 801eb56:	9307      	str	r3, [sp, #28]
 801eb58:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb5a:	9308      	str	r3, [sp, #32]
 801eb5c:	2322      	movs	r3, #34	@ 0x22
 801eb5e:	9a05      	ldr	r2, [sp, #20]
 801eb60:	2600      	movs	r6, #0
 801eb62:	6013      	str	r3, [r2, #0]
 801eb64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb66:	2700      	movs	r7, #0
 801eb68:	2b00      	cmp	r3, #0
 801eb6a:	d000      	beq.n	801eb6e <_strtod_l+0x5be>
 801eb6c:	e763      	b.n	801ea36 <_strtod_l+0x486>
 801eb6e:	e55a      	b.n	801e626 <_strtod_l+0x76>
 801eb70:	00004e1f 	.word	0x00004e1f
 801eb74:	08025bae 	.word	0x08025bae
 801eb78:	08025a4c 	.word	0x08025a4c
 801eb7c:	7ff00000 	.word	0x7ff00000
 801eb80:	08025ba6 	.word	0x08025ba6
 801eb84:	08025be0 	.word	0x08025be0
 801eb88:	08025e6c 	.word	0x08025e6c
 801eb8c:	08025d58 	.word	0x08025d58
 801eb90:	08025d30 	.word	0x08025d30
 801eb94:	fcb00000 	.word	0xfcb00000
 801eb98:	7ca00000 	.word	0x7ca00000
 801eb9c:	7c900000 	.word	0x7c900000
 801eba0:	7fefffff 	.word	0x7fefffff
 801eba4:	2310      	movs	r3, #16
 801eba6:	0022      	movs	r2, r4
 801eba8:	401a      	ands	r2, r3
 801ebaa:	9209      	str	r2, [sp, #36]	@ 0x24
 801ebac:	421c      	tst	r4, r3
 801ebae:	d001      	beq.n	801ebb4 <_strtod_l+0x604>
 801ebb0:	335a      	adds	r3, #90	@ 0x5a
 801ebb2:	9309      	str	r3, [sp, #36]	@ 0x24
 801ebb4:	0030      	movs	r0, r6
 801ebb6:	0039      	movs	r1, r7
 801ebb8:	2300      	movs	r3, #0
 801ebba:	4dbf      	ldr	r5, [pc, #764]	@ (801eeb8 <_strtod_l+0x908>)
 801ebbc:	2201      	movs	r2, #1
 801ebbe:	4214      	tst	r4, r2
 801ebc0:	d004      	beq.n	801ebcc <_strtod_l+0x61c>
 801ebc2:	682a      	ldr	r2, [r5, #0]
 801ebc4:	686b      	ldr	r3, [r5, #4]
 801ebc6:	f7e3 fd39 	bl	800263c <__aeabi_dmul>
 801ebca:	2301      	movs	r3, #1
 801ebcc:	1064      	asrs	r4, r4, #1
 801ebce:	3508      	adds	r5, #8
 801ebd0:	2c00      	cmp	r4, #0
 801ebd2:	d1f3      	bne.n	801ebbc <_strtod_l+0x60c>
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d001      	beq.n	801ebdc <_strtod_l+0x62c>
 801ebd8:	0006      	movs	r6, r0
 801ebda:	000f      	movs	r7, r1
 801ebdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ebde:	2b00      	cmp	r3, #0
 801ebe0:	d00d      	beq.n	801ebfe <_strtod_l+0x64e>
 801ebe2:	236b      	movs	r3, #107	@ 0x6b
 801ebe4:	007a      	lsls	r2, r7, #1
 801ebe6:	0d52      	lsrs	r2, r2, #21
 801ebe8:	0039      	movs	r1, r7
 801ebea:	1a9b      	subs	r3, r3, r2
 801ebec:	2b00      	cmp	r3, #0
 801ebee:	dd06      	ble.n	801ebfe <_strtod_l+0x64e>
 801ebf0:	2b1f      	cmp	r3, #31
 801ebf2:	dd5a      	ble.n	801ecaa <_strtod_l+0x6fa>
 801ebf4:	2600      	movs	r6, #0
 801ebf6:	2b34      	cmp	r3, #52	@ 0x34
 801ebf8:	dd50      	ble.n	801ec9c <_strtod_l+0x6ec>
 801ebfa:	27dc      	movs	r7, #220	@ 0xdc
 801ebfc:	04bf      	lsls	r7, r7, #18
 801ebfe:	2200      	movs	r2, #0
 801ec00:	2300      	movs	r3, #0
 801ec02:	0030      	movs	r0, r6
 801ec04:	0039      	movs	r1, r7
 801ec06:	f7e1 fc53 	bl	80004b0 <__aeabi_dcmpeq>
 801ec0a:	2800      	cmp	r0, #0
 801ec0c:	d1a1      	bne.n	801eb52 <_strtod_l+0x5a2>
 801ec0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ec10:	9a08      	ldr	r2, [sp, #32]
 801ec12:	9300      	str	r3, [sp, #0]
 801ec14:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ec16:	9b06      	ldr	r3, [sp, #24]
 801ec18:	9805      	ldr	r0, [sp, #20]
 801ec1a:	f002 fec5 	bl	80219a8 <__s2b>
 801ec1e:	900d      	str	r0, [sp, #52]	@ 0x34
 801ec20:	2800      	cmp	r0, #0
 801ec22:	d100      	bne.n	801ec26 <_strtod_l+0x676>
 801ec24:	e6f9      	b.n	801ea1a <_strtod_l+0x46a>
 801ec26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec28:	9907      	ldr	r1, [sp, #28]
 801ec2a:	17da      	asrs	r2, r3, #31
 801ec2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ec2e:	1a5b      	subs	r3, r3, r1
 801ec30:	401a      	ands	r2, r3
 801ec32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec34:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ec36:	43db      	mvns	r3, r3
 801ec38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ec3a:	17db      	asrs	r3, r3, #31
 801ec3c:	401a      	ands	r2, r3
 801ec3e:	2300      	movs	r3, #0
 801ec40:	921a      	str	r2, [sp, #104]	@ 0x68
 801ec42:	9306      	str	r3, [sp, #24]
 801ec44:	9307      	str	r3, [sp, #28]
 801ec46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ec48:	9805      	ldr	r0, [sp, #20]
 801ec4a:	6859      	ldr	r1, [r3, #4]
 801ec4c:	f002 fe00 	bl	8021850 <_Balloc>
 801ec50:	9008      	str	r0, [sp, #32]
 801ec52:	2800      	cmp	r0, #0
 801ec54:	d100      	bne.n	801ec58 <_strtod_l+0x6a8>
 801ec56:	e6e5      	b.n	801ea24 <_strtod_l+0x474>
 801ec58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ec5a:	300c      	adds	r0, #12
 801ec5c:	0019      	movs	r1, r3
 801ec5e:	691a      	ldr	r2, [r3, #16]
 801ec60:	310c      	adds	r1, #12
 801ec62:	3202      	adds	r2, #2
 801ec64:	0092      	lsls	r2, r2, #2
 801ec66:	f001 faef 	bl	8020248 <memcpy>
 801ec6a:	ab20      	add	r3, sp, #128	@ 0x80
 801ec6c:	9301      	str	r3, [sp, #4]
 801ec6e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ec70:	9300      	str	r3, [sp, #0]
 801ec72:	0032      	movs	r2, r6
 801ec74:	003b      	movs	r3, r7
 801ec76:	9805      	ldr	r0, [sp, #20]
 801ec78:	9610      	str	r6, [sp, #64]	@ 0x40
 801ec7a:	9711      	str	r7, [sp, #68]	@ 0x44
 801ec7c:	f003 f9e4 	bl	8022048 <__d2b>
 801ec80:	901e      	str	r0, [sp, #120]	@ 0x78
 801ec82:	2800      	cmp	r0, #0
 801ec84:	d100      	bne.n	801ec88 <_strtod_l+0x6d8>
 801ec86:	e6cd      	b.n	801ea24 <_strtod_l+0x474>
 801ec88:	2101      	movs	r1, #1
 801ec8a:	9805      	ldr	r0, [sp, #20]
 801ec8c:	f002 ff28 	bl	8021ae0 <__i2b>
 801ec90:	9007      	str	r0, [sp, #28]
 801ec92:	2800      	cmp	r0, #0
 801ec94:	d10e      	bne.n	801ecb4 <_strtod_l+0x704>
 801ec96:	2300      	movs	r3, #0
 801ec98:	9307      	str	r3, [sp, #28]
 801ec9a:	e6c3      	b.n	801ea24 <_strtod_l+0x474>
 801ec9c:	234b      	movs	r3, #75	@ 0x4b
 801ec9e:	1a9a      	subs	r2, r3, r2
 801eca0:	3b4c      	subs	r3, #76	@ 0x4c
 801eca2:	4093      	lsls	r3, r2
 801eca4:	4019      	ands	r1, r3
 801eca6:	000f      	movs	r7, r1
 801eca8:	e7a9      	b.n	801ebfe <_strtod_l+0x64e>
 801ecaa:	2201      	movs	r2, #1
 801ecac:	4252      	negs	r2, r2
 801ecae:	409a      	lsls	r2, r3
 801ecb0:	4016      	ands	r6, r2
 801ecb2:	e7a4      	b.n	801ebfe <_strtod_l+0x64e>
 801ecb4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ecb6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ecb8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801ecba:	1ad4      	subs	r4, r2, r3
 801ecbc:	2b00      	cmp	r3, #0
 801ecbe:	db01      	blt.n	801ecc4 <_strtod_l+0x714>
 801ecc0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801ecc2:	195d      	adds	r5, r3, r5
 801ecc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ecc6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ecc8:	1a5b      	subs	r3, r3, r1
 801ecca:	2136      	movs	r1, #54	@ 0x36
 801eccc:	189b      	adds	r3, r3, r2
 801ecce:	1a8a      	subs	r2, r1, r2
 801ecd0:	497a      	ldr	r1, [pc, #488]	@ (801eebc <_strtod_l+0x90c>)
 801ecd2:	2001      	movs	r0, #1
 801ecd4:	468c      	mov	ip, r1
 801ecd6:	2100      	movs	r1, #0
 801ecd8:	3b01      	subs	r3, #1
 801ecda:	9116      	str	r1, [sp, #88]	@ 0x58
 801ecdc:	9014      	str	r0, [sp, #80]	@ 0x50
 801ecde:	4563      	cmp	r3, ip
 801ece0:	da06      	bge.n	801ecf0 <_strtod_l+0x740>
 801ece2:	4661      	mov	r1, ip
 801ece4:	1ac9      	subs	r1, r1, r3
 801ece6:	1a52      	subs	r2, r2, r1
 801ece8:	291f      	cmp	r1, #31
 801ecea:	dc3f      	bgt.n	801ed6c <_strtod_l+0x7bc>
 801ecec:	4088      	lsls	r0, r1
 801ecee:	9014      	str	r0, [sp, #80]	@ 0x50
 801ecf0:	18ab      	adds	r3, r5, r2
 801ecf2:	930e      	str	r3, [sp, #56]	@ 0x38
 801ecf4:	18a4      	adds	r4, r4, r2
 801ecf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ecfa:	191c      	adds	r4, r3, r4
 801ecfc:	002b      	movs	r3, r5
 801ecfe:	4295      	cmp	r5, r2
 801ed00:	dd00      	ble.n	801ed04 <_strtod_l+0x754>
 801ed02:	0013      	movs	r3, r2
 801ed04:	42a3      	cmp	r3, r4
 801ed06:	dd00      	ble.n	801ed0a <_strtod_l+0x75a>
 801ed08:	0023      	movs	r3, r4
 801ed0a:	2b00      	cmp	r3, #0
 801ed0c:	dd04      	ble.n	801ed18 <_strtod_l+0x768>
 801ed0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ed10:	1ae4      	subs	r4, r4, r3
 801ed12:	1ad2      	subs	r2, r2, r3
 801ed14:	920e      	str	r2, [sp, #56]	@ 0x38
 801ed16:	1aed      	subs	r5, r5, r3
 801ed18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ed1a:	2b00      	cmp	r3, #0
 801ed1c:	dd16      	ble.n	801ed4c <_strtod_l+0x79c>
 801ed1e:	001a      	movs	r2, r3
 801ed20:	9907      	ldr	r1, [sp, #28]
 801ed22:	9805      	ldr	r0, [sp, #20]
 801ed24:	f002 ffa6 	bl	8021c74 <__pow5mult>
 801ed28:	9007      	str	r0, [sp, #28]
 801ed2a:	2800      	cmp	r0, #0
 801ed2c:	d0b3      	beq.n	801ec96 <_strtod_l+0x6e6>
 801ed2e:	0001      	movs	r1, r0
 801ed30:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ed32:	9805      	ldr	r0, [sp, #20]
 801ed34:	f002 feec 	bl	8021b10 <__multiply>
 801ed38:	9013      	str	r0, [sp, #76]	@ 0x4c
 801ed3a:	2800      	cmp	r0, #0
 801ed3c:	d100      	bne.n	801ed40 <_strtod_l+0x790>
 801ed3e:	e671      	b.n	801ea24 <_strtod_l+0x474>
 801ed40:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ed42:	9805      	ldr	r0, [sp, #20]
 801ed44:	f002 fdc8 	bl	80218d8 <_Bfree>
 801ed48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ed4a:	931e      	str	r3, [sp, #120]	@ 0x78
 801ed4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	dc12      	bgt.n	801ed78 <_strtod_l+0x7c8>
 801ed52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	dd18      	ble.n	801ed8a <_strtod_l+0x7da>
 801ed58:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ed5a:	9908      	ldr	r1, [sp, #32]
 801ed5c:	9805      	ldr	r0, [sp, #20]
 801ed5e:	f002 ff89 	bl	8021c74 <__pow5mult>
 801ed62:	9008      	str	r0, [sp, #32]
 801ed64:	2800      	cmp	r0, #0
 801ed66:	d110      	bne.n	801ed8a <_strtod_l+0x7da>
 801ed68:	2300      	movs	r3, #0
 801ed6a:	e65a      	b.n	801ea22 <_strtod_l+0x472>
 801ed6c:	4954      	ldr	r1, [pc, #336]	@ (801eec0 <_strtod_l+0x910>)
 801ed6e:	1acb      	subs	r3, r1, r3
 801ed70:	0001      	movs	r1, r0
 801ed72:	4099      	lsls	r1, r3
 801ed74:	9116      	str	r1, [sp, #88]	@ 0x58
 801ed76:	e7ba      	b.n	801ecee <_strtod_l+0x73e>
 801ed78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ed7a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ed7c:	9805      	ldr	r0, [sp, #20]
 801ed7e:	f002 ffd5 	bl	8021d2c <__lshift>
 801ed82:	901e      	str	r0, [sp, #120]	@ 0x78
 801ed84:	2800      	cmp	r0, #0
 801ed86:	d1e4      	bne.n	801ed52 <_strtod_l+0x7a2>
 801ed88:	e64c      	b.n	801ea24 <_strtod_l+0x474>
 801ed8a:	2c00      	cmp	r4, #0
 801ed8c:	dd07      	ble.n	801ed9e <_strtod_l+0x7ee>
 801ed8e:	0022      	movs	r2, r4
 801ed90:	9908      	ldr	r1, [sp, #32]
 801ed92:	9805      	ldr	r0, [sp, #20]
 801ed94:	f002 ffca 	bl	8021d2c <__lshift>
 801ed98:	9008      	str	r0, [sp, #32]
 801ed9a:	2800      	cmp	r0, #0
 801ed9c:	d0e4      	beq.n	801ed68 <_strtod_l+0x7b8>
 801ed9e:	2d00      	cmp	r5, #0
 801eda0:	dd08      	ble.n	801edb4 <_strtod_l+0x804>
 801eda2:	002a      	movs	r2, r5
 801eda4:	9907      	ldr	r1, [sp, #28]
 801eda6:	9805      	ldr	r0, [sp, #20]
 801eda8:	f002 ffc0 	bl	8021d2c <__lshift>
 801edac:	9007      	str	r0, [sp, #28]
 801edae:	2800      	cmp	r0, #0
 801edb0:	d100      	bne.n	801edb4 <_strtod_l+0x804>
 801edb2:	e637      	b.n	801ea24 <_strtod_l+0x474>
 801edb4:	9a08      	ldr	r2, [sp, #32]
 801edb6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801edb8:	9805      	ldr	r0, [sp, #20]
 801edba:	f003 f83f 	bl	8021e3c <__mdiff>
 801edbe:	9006      	str	r0, [sp, #24]
 801edc0:	2800      	cmp	r0, #0
 801edc2:	d100      	bne.n	801edc6 <_strtod_l+0x816>
 801edc4:	e62e      	b.n	801ea24 <_strtod_l+0x474>
 801edc6:	68c3      	ldr	r3, [r0, #12]
 801edc8:	9907      	ldr	r1, [sp, #28]
 801edca:	9313      	str	r3, [sp, #76]	@ 0x4c
 801edcc:	2300      	movs	r3, #0
 801edce:	60c3      	str	r3, [r0, #12]
 801edd0:	f003 f818 	bl	8021e04 <__mcmp>
 801edd4:	2800      	cmp	r0, #0
 801edd6:	da3b      	bge.n	801ee50 <_strtod_l+0x8a0>
 801edd8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801edda:	4333      	orrs	r3, r6
 801eddc:	d167      	bne.n	801eeae <_strtod_l+0x8fe>
 801edde:	033b      	lsls	r3, r7, #12
 801ede0:	d165      	bne.n	801eeae <_strtod_l+0x8fe>
 801ede2:	22d6      	movs	r2, #214	@ 0xd6
 801ede4:	4b37      	ldr	r3, [pc, #220]	@ (801eec4 <_strtod_l+0x914>)
 801ede6:	04d2      	lsls	r2, r2, #19
 801ede8:	403b      	ands	r3, r7
 801edea:	4293      	cmp	r3, r2
 801edec:	d95f      	bls.n	801eeae <_strtod_l+0x8fe>
 801edee:	9b06      	ldr	r3, [sp, #24]
 801edf0:	695b      	ldr	r3, [r3, #20]
 801edf2:	2b00      	cmp	r3, #0
 801edf4:	d103      	bne.n	801edfe <_strtod_l+0x84e>
 801edf6:	9b06      	ldr	r3, [sp, #24]
 801edf8:	691b      	ldr	r3, [r3, #16]
 801edfa:	2b01      	cmp	r3, #1
 801edfc:	dd57      	ble.n	801eeae <_strtod_l+0x8fe>
 801edfe:	9906      	ldr	r1, [sp, #24]
 801ee00:	2201      	movs	r2, #1
 801ee02:	9805      	ldr	r0, [sp, #20]
 801ee04:	f002 ff92 	bl	8021d2c <__lshift>
 801ee08:	9907      	ldr	r1, [sp, #28]
 801ee0a:	9006      	str	r0, [sp, #24]
 801ee0c:	f002 fffa 	bl	8021e04 <__mcmp>
 801ee10:	2800      	cmp	r0, #0
 801ee12:	dd4c      	ble.n	801eeae <_strtod_l+0x8fe>
 801ee14:	4b2b      	ldr	r3, [pc, #172]	@ (801eec4 <_strtod_l+0x914>)
 801ee16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ee18:	403b      	ands	r3, r7
 801ee1a:	2a00      	cmp	r2, #0
 801ee1c:	d074      	beq.n	801ef08 <_strtod_l+0x958>
 801ee1e:	22d6      	movs	r2, #214	@ 0xd6
 801ee20:	04d2      	lsls	r2, r2, #19
 801ee22:	4293      	cmp	r3, r2
 801ee24:	d870      	bhi.n	801ef08 <_strtod_l+0x958>
 801ee26:	22dc      	movs	r2, #220	@ 0xdc
 801ee28:	0492      	lsls	r2, r2, #18
 801ee2a:	4293      	cmp	r3, r2
 801ee2c:	d800      	bhi.n	801ee30 <_strtod_l+0x880>
 801ee2e:	e695      	b.n	801eb5c <_strtod_l+0x5ac>
 801ee30:	0030      	movs	r0, r6
 801ee32:	0039      	movs	r1, r7
 801ee34:	4b24      	ldr	r3, [pc, #144]	@ (801eec8 <_strtod_l+0x918>)
 801ee36:	2200      	movs	r2, #0
 801ee38:	f7e3 fc00 	bl	800263c <__aeabi_dmul>
 801ee3c:	4b21      	ldr	r3, [pc, #132]	@ (801eec4 <_strtod_l+0x914>)
 801ee3e:	0006      	movs	r6, r0
 801ee40:	000f      	movs	r7, r1
 801ee42:	420b      	tst	r3, r1
 801ee44:	d000      	beq.n	801ee48 <_strtod_l+0x898>
 801ee46:	e5f6      	b.n	801ea36 <_strtod_l+0x486>
 801ee48:	2322      	movs	r3, #34	@ 0x22
 801ee4a:	9a05      	ldr	r2, [sp, #20]
 801ee4c:	6013      	str	r3, [r2, #0]
 801ee4e:	e5f2      	b.n	801ea36 <_strtod_l+0x486>
 801ee50:	970e      	str	r7, [sp, #56]	@ 0x38
 801ee52:	2800      	cmp	r0, #0
 801ee54:	d175      	bne.n	801ef42 <_strtod_l+0x992>
 801ee56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ee58:	033b      	lsls	r3, r7, #12
 801ee5a:	0b1b      	lsrs	r3, r3, #12
 801ee5c:	2a00      	cmp	r2, #0
 801ee5e:	d039      	beq.n	801eed4 <_strtod_l+0x924>
 801ee60:	4a1a      	ldr	r2, [pc, #104]	@ (801eecc <_strtod_l+0x91c>)
 801ee62:	4293      	cmp	r3, r2
 801ee64:	d138      	bne.n	801eed8 <_strtod_l+0x928>
 801ee66:	2101      	movs	r1, #1
 801ee68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee6a:	4249      	negs	r1, r1
 801ee6c:	0032      	movs	r2, r6
 801ee6e:	0008      	movs	r0, r1
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	d00b      	beq.n	801ee8c <_strtod_l+0x8dc>
 801ee74:	24d4      	movs	r4, #212	@ 0xd4
 801ee76:	4b13      	ldr	r3, [pc, #76]	@ (801eec4 <_strtod_l+0x914>)
 801ee78:	0008      	movs	r0, r1
 801ee7a:	403b      	ands	r3, r7
 801ee7c:	04e4      	lsls	r4, r4, #19
 801ee7e:	42a3      	cmp	r3, r4
 801ee80:	d804      	bhi.n	801ee8c <_strtod_l+0x8dc>
 801ee82:	306c      	adds	r0, #108	@ 0x6c
 801ee84:	0d1b      	lsrs	r3, r3, #20
 801ee86:	1ac3      	subs	r3, r0, r3
 801ee88:	4099      	lsls	r1, r3
 801ee8a:	0008      	movs	r0, r1
 801ee8c:	4282      	cmp	r2, r0
 801ee8e:	d123      	bne.n	801eed8 <_strtod_l+0x928>
 801ee90:	4b0f      	ldr	r3, [pc, #60]	@ (801eed0 <_strtod_l+0x920>)
 801ee92:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ee94:	4299      	cmp	r1, r3
 801ee96:	d102      	bne.n	801ee9e <_strtod_l+0x8ee>
 801ee98:	3201      	adds	r2, #1
 801ee9a:	d100      	bne.n	801ee9e <_strtod_l+0x8ee>
 801ee9c:	e5c2      	b.n	801ea24 <_strtod_l+0x474>
 801ee9e:	4b09      	ldr	r3, [pc, #36]	@ (801eec4 <_strtod_l+0x914>)
 801eea0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eea2:	2600      	movs	r6, #0
 801eea4:	401a      	ands	r2, r3
 801eea6:	0013      	movs	r3, r2
 801eea8:	2280      	movs	r2, #128	@ 0x80
 801eeaa:	0352      	lsls	r2, r2, #13
 801eeac:	189f      	adds	r7, r3, r2
 801eeae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d1bd      	bne.n	801ee30 <_strtod_l+0x880>
 801eeb4:	e5bf      	b.n	801ea36 <_strtod_l+0x486>
 801eeb6:	46c0      	nop			@ (mov r8, r8)
 801eeb8:	08025a78 	.word	0x08025a78
 801eebc:	fffffc02 	.word	0xfffffc02
 801eec0:	fffffbe2 	.word	0xfffffbe2
 801eec4:	7ff00000 	.word	0x7ff00000
 801eec8:	39500000 	.word	0x39500000
 801eecc:	000fffff 	.word	0x000fffff
 801eed0:	7fefffff 	.word	0x7fefffff
 801eed4:	4333      	orrs	r3, r6
 801eed6:	d09d      	beq.n	801ee14 <_strtod_l+0x864>
 801eed8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	d01c      	beq.n	801ef18 <_strtod_l+0x968>
 801eede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eee0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801eee2:	4213      	tst	r3, r2
 801eee4:	d0e3      	beq.n	801eeae <_strtod_l+0x8fe>
 801eee6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eee8:	0030      	movs	r0, r6
 801eeea:	0039      	movs	r1, r7
 801eeec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d016      	beq.n	801ef20 <_strtod_l+0x970>
 801eef2:	f7ff fb45 	bl	801e580 <sulp>
 801eef6:	0002      	movs	r2, r0
 801eef8:	000b      	movs	r3, r1
 801eefa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801eefc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801eefe:	f7e2 fbf5 	bl	80016ec <__aeabi_dadd>
 801ef02:	0006      	movs	r6, r0
 801ef04:	000f      	movs	r7, r1
 801ef06:	e7d2      	b.n	801eeae <_strtod_l+0x8fe>
 801ef08:	2601      	movs	r6, #1
 801ef0a:	4a92      	ldr	r2, [pc, #584]	@ (801f154 <_strtod_l+0xba4>)
 801ef0c:	4276      	negs	r6, r6
 801ef0e:	189b      	adds	r3, r3, r2
 801ef10:	4a91      	ldr	r2, [pc, #580]	@ (801f158 <_strtod_l+0xba8>)
 801ef12:	431a      	orrs	r2, r3
 801ef14:	0017      	movs	r7, r2
 801ef16:	e7ca      	b.n	801eeae <_strtod_l+0x8fe>
 801ef18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ef1a:	4233      	tst	r3, r6
 801ef1c:	d0c7      	beq.n	801eeae <_strtod_l+0x8fe>
 801ef1e:	e7e2      	b.n	801eee6 <_strtod_l+0x936>
 801ef20:	f7ff fb2e 	bl	801e580 <sulp>
 801ef24:	0002      	movs	r2, r0
 801ef26:	000b      	movs	r3, r1
 801ef28:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ef2a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ef2c:	f7e3 fe4e 	bl	8002bcc <__aeabi_dsub>
 801ef30:	2200      	movs	r2, #0
 801ef32:	2300      	movs	r3, #0
 801ef34:	0006      	movs	r6, r0
 801ef36:	000f      	movs	r7, r1
 801ef38:	f7e1 faba 	bl	80004b0 <__aeabi_dcmpeq>
 801ef3c:	2800      	cmp	r0, #0
 801ef3e:	d0b6      	beq.n	801eeae <_strtod_l+0x8fe>
 801ef40:	e60c      	b.n	801eb5c <_strtod_l+0x5ac>
 801ef42:	9907      	ldr	r1, [sp, #28]
 801ef44:	9806      	ldr	r0, [sp, #24]
 801ef46:	f003 f8df 	bl	8022108 <__ratio>
 801ef4a:	2380      	movs	r3, #128	@ 0x80
 801ef4c:	2200      	movs	r2, #0
 801ef4e:	05db      	lsls	r3, r3, #23
 801ef50:	0004      	movs	r4, r0
 801ef52:	000d      	movs	r5, r1
 801ef54:	f7e1 fabc 	bl	80004d0 <__aeabi_dcmple>
 801ef58:	2800      	cmp	r0, #0
 801ef5a:	d06c      	beq.n	801f036 <_strtod_l+0xa86>
 801ef5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d177      	bne.n	801f052 <_strtod_l+0xaa2>
 801ef62:	2e00      	cmp	r6, #0
 801ef64:	d157      	bne.n	801f016 <_strtod_l+0xa66>
 801ef66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef68:	031b      	lsls	r3, r3, #12
 801ef6a:	d15a      	bne.n	801f022 <_strtod_l+0xa72>
 801ef6c:	2200      	movs	r2, #0
 801ef6e:	0020      	movs	r0, r4
 801ef70:	0029      	movs	r1, r5
 801ef72:	4b7a      	ldr	r3, [pc, #488]	@ (801f15c <_strtod_l+0xbac>)
 801ef74:	f7e1 faa2 	bl	80004bc <__aeabi_dcmplt>
 801ef78:	2800      	cmp	r0, #0
 801ef7a:	d159      	bne.n	801f030 <_strtod_l+0xa80>
 801ef7c:	0020      	movs	r0, r4
 801ef7e:	0029      	movs	r1, r5
 801ef80:	2200      	movs	r2, #0
 801ef82:	4b77      	ldr	r3, [pc, #476]	@ (801f160 <_strtod_l+0xbb0>)
 801ef84:	f7e3 fb5a 	bl	800263c <__aeabi_dmul>
 801ef88:	0004      	movs	r4, r0
 801ef8a:	000d      	movs	r5, r1
 801ef8c:	2380      	movs	r3, #128	@ 0x80
 801ef8e:	061b      	lsls	r3, r3, #24
 801ef90:	18eb      	adds	r3, r5, r3
 801ef92:	940a      	str	r4, [sp, #40]	@ 0x28
 801ef94:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ef96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ef98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ef9a:	9214      	str	r2, [sp, #80]	@ 0x50
 801ef9c:	9315      	str	r3, [sp, #84]	@ 0x54
 801ef9e:	4a71      	ldr	r2, [pc, #452]	@ (801f164 <_strtod_l+0xbb4>)
 801efa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efa2:	4013      	ands	r3, r2
 801efa4:	9316      	str	r3, [sp, #88]	@ 0x58
 801efa6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801efa8:	4b6f      	ldr	r3, [pc, #444]	@ (801f168 <_strtod_l+0xbb8>)
 801efaa:	429a      	cmp	r2, r3
 801efac:	d000      	beq.n	801efb0 <_strtod_l+0xa00>
 801efae:	e087      	b.n	801f0c0 <_strtod_l+0xb10>
 801efb0:	4a6e      	ldr	r2, [pc, #440]	@ (801f16c <_strtod_l+0xbbc>)
 801efb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efb4:	4694      	mov	ip, r2
 801efb6:	4463      	add	r3, ip
 801efb8:	001f      	movs	r7, r3
 801efba:	0030      	movs	r0, r6
 801efbc:	0019      	movs	r1, r3
 801efbe:	f002 ffd7 	bl	8021f70 <__ulp>
 801efc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801efc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801efc6:	f7e3 fb39 	bl	800263c <__aeabi_dmul>
 801efca:	0032      	movs	r2, r6
 801efcc:	003b      	movs	r3, r7
 801efce:	f7e2 fb8d 	bl	80016ec <__aeabi_dadd>
 801efd2:	4a64      	ldr	r2, [pc, #400]	@ (801f164 <_strtod_l+0xbb4>)
 801efd4:	4b66      	ldr	r3, [pc, #408]	@ (801f170 <_strtod_l+0xbc0>)
 801efd6:	0006      	movs	r6, r0
 801efd8:	400a      	ands	r2, r1
 801efda:	429a      	cmp	r2, r3
 801efdc:	d940      	bls.n	801f060 <_strtod_l+0xab0>
 801efde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801efe0:	4a64      	ldr	r2, [pc, #400]	@ (801f174 <_strtod_l+0xbc4>)
 801efe2:	4293      	cmp	r3, r2
 801efe4:	d103      	bne.n	801efee <_strtod_l+0xa3e>
 801efe6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801efe8:	3301      	adds	r3, #1
 801efea:	d100      	bne.n	801efee <_strtod_l+0xa3e>
 801efec:	e51a      	b.n	801ea24 <_strtod_l+0x474>
 801efee:	2601      	movs	r6, #1
 801eff0:	4f60      	ldr	r7, [pc, #384]	@ (801f174 <_strtod_l+0xbc4>)
 801eff2:	4276      	negs	r6, r6
 801eff4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eff6:	9805      	ldr	r0, [sp, #20]
 801eff8:	f002 fc6e 	bl	80218d8 <_Bfree>
 801effc:	9908      	ldr	r1, [sp, #32]
 801effe:	9805      	ldr	r0, [sp, #20]
 801f000:	f002 fc6a 	bl	80218d8 <_Bfree>
 801f004:	9907      	ldr	r1, [sp, #28]
 801f006:	9805      	ldr	r0, [sp, #20]
 801f008:	f002 fc66 	bl	80218d8 <_Bfree>
 801f00c:	9906      	ldr	r1, [sp, #24]
 801f00e:	9805      	ldr	r0, [sp, #20]
 801f010:	f002 fc62 	bl	80218d8 <_Bfree>
 801f014:	e617      	b.n	801ec46 <_strtod_l+0x696>
 801f016:	2e01      	cmp	r6, #1
 801f018:	d103      	bne.n	801f022 <_strtod_l+0xa72>
 801f01a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f01c:	2b00      	cmp	r3, #0
 801f01e:	d100      	bne.n	801f022 <_strtod_l+0xa72>
 801f020:	e59c      	b.n	801eb5c <_strtod_l+0x5ac>
 801f022:	2300      	movs	r3, #0
 801f024:	4c54      	ldr	r4, [pc, #336]	@ (801f178 <_strtod_l+0xbc8>)
 801f026:	4d4d      	ldr	r5, [pc, #308]	@ (801f15c <_strtod_l+0xbac>)
 801f028:	930a      	str	r3, [sp, #40]	@ 0x28
 801f02a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f02c:	2400      	movs	r4, #0
 801f02e:	e7b2      	b.n	801ef96 <_strtod_l+0x9e6>
 801f030:	2400      	movs	r4, #0
 801f032:	4d4b      	ldr	r5, [pc, #300]	@ (801f160 <_strtod_l+0xbb0>)
 801f034:	e7aa      	b.n	801ef8c <_strtod_l+0x9dc>
 801f036:	0020      	movs	r0, r4
 801f038:	0029      	movs	r1, r5
 801f03a:	4b49      	ldr	r3, [pc, #292]	@ (801f160 <_strtod_l+0xbb0>)
 801f03c:	2200      	movs	r2, #0
 801f03e:	f7e3 fafd 	bl	800263c <__aeabi_dmul>
 801f042:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f044:	0004      	movs	r4, r0
 801f046:	000d      	movs	r5, r1
 801f048:	2b00      	cmp	r3, #0
 801f04a:	d09f      	beq.n	801ef8c <_strtod_l+0x9dc>
 801f04c:	940a      	str	r4, [sp, #40]	@ 0x28
 801f04e:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f050:	e7a1      	b.n	801ef96 <_strtod_l+0x9e6>
 801f052:	2300      	movs	r3, #0
 801f054:	4c41      	ldr	r4, [pc, #260]	@ (801f15c <_strtod_l+0xbac>)
 801f056:	0025      	movs	r5, r4
 801f058:	930a      	str	r3, [sp, #40]	@ 0x28
 801f05a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f05c:	001c      	movs	r4, r3
 801f05e:	e79a      	b.n	801ef96 <_strtod_l+0x9e6>
 801f060:	23d4      	movs	r3, #212	@ 0xd4
 801f062:	049b      	lsls	r3, r3, #18
 801f064:	18cf      	adds	r7, r1, r3
 801f066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f068:	9710      	str	r7, [sp, #64]	@ 0x40
 801f06a:	2b00      	cmp	r3, #0
 801f06c:	d1c2      	bne.n	801eff4 <_strtod_l+0xa44>
 801f06e:	4b3d      	ldr	r3, [pc, #244]	@ (801f164 <_strtod_l+0xbb4>)
 801f070:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f072:	403b      	ands	r3, r7
 801f074:	429a      	cmp	r2, r3
 801f076:	d1bd      	bne.n	801eff4 <_strtod_l+0xa44>
 801f078:	0020      	movs	r0, r4
 801f07a:	0029      	movs	r1, r5
 801f07c:	f7e1 fb04 	bl	8000688 <__aeabi_d2lz>
 801f080:	f7e1 fb3c 	bl	80006fc <__aeabi_l2d>
 801f084:	0002      	movs	r2, r0
 801f086:	000b      	movs	r3, r1
 801f088:	0020      	movs	r0, r4
 801f08a:	0029      	movs	r1, r5
 801f08c:	f7e3 fd9e 	bl	8002bcc <__aeabi_dsub>
 801f090:	033c      	lsls	r4, r7, #12
 801f092:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f094:	0b24      	lsrs	r4, r4, #12
 801f096:	4334      	orrs	r4, r6
 801f098:	900e      	str	r0, [sp, #56]	@ 0x38
 801f09a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f09c:	4a37      	ldr	r2, [pc, #220]	@ (801f17c <_strtod_l+0xbcc>)
 801f09e:	431c      	orrs	r4, r3
 801f0a0:	d052      	beq.n	801f148 <_strtod_l+0xb98>
 801f0a2:	4b37      	ldr	r3, [pc, #220]	@ (801f180 <_strtod_l+0xbd0>)
 801f0a4:	f7e1 fa0a 	bl	80004bc <__aeabi_dcmplt>
 801f0a8:	2800      	cmp	r0, #0
 801f0aa:	d000      	beq.n	801f0ae <_strtod_l+0xafe>
 801f0ac:	e4c3      	b.n	801ea36 <_strtod_l+0x486>
 801f0ae:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f0b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f0b2:	4a34      	ldr	r2, [pc, #208]	@ (801f184 <_strtod_l+0xbd4>)
 801f0b4:	4b2a      	ldr	r3, [pc, #168]	@ (801f160 <_strtod_l+0xbb0>)
 801f0b6:	f7e1 fa15 	bl	80004e4 <__aeabi_dcmpgt>
 801f0ba:	2800      	cmp	r0, #0
 801f0bc:	d09a      	beq.n	801eff4 <_strtod_l+0xa44>
 801f0be:	e4ba      	b.n	801ea36 <_strtod_l+0x486>
 801f0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0c2:	2b00      	cmp	r3, #0
 801f0c4:	d02a      	beq.n	801f11c <_strtod_l+0xb6c>
 801f0c6:	23d4      	movs	r3, #212	@ 0xd4
 801f0c8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f0ca:	04db      	lsls	r3, r3, #19
 801f0cc:	429a      	cmp	r2, r3
 801f0ce:	d825      	bhi.n	801f11c <_strtod_l+0xb6c>
 801f0d0:	0020      	movs	r0, r4
 801f0d2:	0029      	movs	r1, r5
 801f0d4:	4a2c      	ldr	r2, [pc, #176]	@ (801f188 <_strtod_l+0xbd8>)
 801f0d6:	4b2d      	ldr	r3, [pc, #180]	@ (801f18c <_strtod_l+0xbdc>)
 801f0d8:	f7e1 f9fa 	bl	80004d0 <__aeabi_dcmple>
 801f0dc:	2800      	cmp	r0, #0
 801f0de:	d016      	beq.n	801f10e <_strtod_l+0xb5e>
 801f0e0:	0020      	movs	r0, r4
 801f0e2:	0029      	movs	r1, r5
 801f0e4:	f7e1 fab2 	bl	800064c <__aeabi_d2uiz>
 801f0e8:	2800      	cmp	r0, #0
 801f0ea:	d100      	bne.n	801f0ee <_strtod_l+0xb3e>
 801f0ec:	3001      	adds	r0, #1
 801f0ee:	f7e4 f995 	bl	800341c <__aeabi_ui2d>
 801f0f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f0f4:	0004      	movs	r4, r0
 801f0f6:	000d      	movs	r5, r1
 801f0f8:	2b00      	cmp	r3, #0
 801f0fa:	d122      	bne.n	801f142 <_strtod_l+0xb92>
 801f0fc:	2380      	movs	r3, #128	@ 0x80
 801f0fe:	061b      	lsls	r3, r3, #24
 801f100:	18cb      	adds	r3, r1, r3
 801f102:	9018      	str	r0, [sp, #96]	@ 0x60
 801f104:	9319      	str	r3, [sp, #100]	@ 0x64
 801f106:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f108:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f10a:	9214      	str	r2, [sp, #80]	@ 0x50
 801f10c:	9315      	str	r3, [sp, #84]	@ 0x54
 801f10e:	22d6      	movs	r2, #214	@ 0xd6
 801f110:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f112:	04d2      	lsls	r2, r2, #19
 801f114:	189b      	adds	r3, r3, r2
 801f116:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f118:	1a9b      	subs	r3, r3, r2
 801f11a:	9315      	str	r3, [sp, #84]	@ 0x54
 801f11c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f11e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f120:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f122:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f124:	f002 ff24 	bl	8021f70 <__ulp>
 801f128:	0002      	movs	r2, r0
 801f12a:	000b      	movs	r3, r1
 801f12c:	0030      	movs	r0, r6
 801f12e:	0039      	movs	r1, r7
 801f130:	f7e3 fa84 	bl	800263c <__aeabi_dmul>
 801f134:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f136:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f138:	f7e2 fad8 	bl	80016ec <__aeabi_dadd>
 801f13c:	0006      	movs	r6, r0
 801f13e:	000f      	movs	r7, r1
 801f140:	e791      	b.n	801f066 <_strtod_l+0xab6>
 801f142:	9418      	str	r4, [sp, #96]	@ 0x60
 801f144:	9519      	str	r5, [sp, #100]	@ 0x64
 801f146:	e7de      	b.n	801f106 <_strtod_l+0xb56>
 801f148:	4b11      	ldr	r3, [pc, #68]	@ (801f190 <_strtod_l+0xbe0>)
 801f14a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f14c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f14e:	f7e1 f9b5 	bl	80004bc <__aeabi_dcmplt>
 801f152:	e7b2      	b.n	801f0ba <_strtod_l+0xb0a>
 801f154:	fff00000 	.word	0xfff00000
 801f158:	000fffff 	.word	0x000fffff
 801f15c:	3ff00000 	.word	0x3ff00000
 801f160:	3fe00000 	.word	0x3fe00000
 801f164:	7ff00000 	.word	0x7ff00000
 801f168:	7fe00000 	.word	0x7fe00000
 801f16c:	fcb00000 	.word	0xfcb00000
 801f170:	7c9fffff 	.word	0x7c9fffff
 801f174:	7fefffff 	.word	0x7fefffff
 801f178:	bff00000 	.word	0xbff00000
 801f17c:	94a03595 	.word	0x94a03595
 801f180:	3fdfffff 	.word	0x3fdfffff
 801f184:	35afe535 	.word	0x35afe535
 801f188:	ffc00000 	.word	0xffc00000
 801f18c:	41dfffff 	.word	0x41dfffff
 801f190:	3fcfffff 	.word	0x3fcfffff

0801f194 <strtod>:
 801f194:	b510      	push	{r4, lr}
 801f196:	4c04      	ldr	r4, [pc, #16]	@ (801f1a8 <strtod+0x14>)
 801f198:	000a      	movs	r2, r1
 801f19a:	0001      	movs	r1, r0
 801f19c:	4b03      	ldr	r3, [pc, #12]	@ (801f1ac <strtod+0x18>)
 801f19e:	6820      	ldr	r0, [r4, #0]
 801f1a0:	f7ff fa06 	bl	801e5b0 <_strtod_l>
 801f1a4:	bd10      	pop	{r4, pc}
 801f1a6:	46c0      	nop			@ (mov r8, r8)
 801f1a8:	200003cc 	.word	0x200003cc
 801f1ac:	20000260 	.word	0x20000260

0801f1b0 <_strtol_l.constprop.0>:
 801f1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1b2:	b085      	sub	sp, #20
 801f1b4:	0017      	movs	r7, r2
 801f1b6:	001e      	movs	r6, r3
 801f1b8:	9003      	str	r0, [sp, #12]
 801f1ba:	9101      	str	r1, [sp, #4]
 801f1bc:	2b24      	cmp	r3, #36	@ 0x24
 801f1be:	d844      	bhi.n	801f24a <_strtol_l.constprop.0+0x9a>
 801f1c0:	000c      	movs	r4, r1
 801f1c2:	2b01      	cmp	r3, #1
 801f1c4:	d041      	beq.n	801f24a <_strtol_l.constprop.0+0x9a>
 801f1c6:	4b3d      	ldr	r3, [pc, #244]	@ (801f2bc <_strtol_l.constprop.0+0x10c>)
 801f1c8:	2208      	movs	r2, #8
 801f1ca:	469c      	mov	ip, r3
 801f1cc:	0023      	movs	r3, r4
 801f1ce:	4661      	mov	r1, ip
 801f1d0:	781d      	ldrb	r5, [r3, #0]
 801f1d2:	3401      	adds	r4, #1
 801f1d4:	5d48      	ldrb	r0, [r1, r5]
 801f1d6:	0001      	movs	r1, r0
 801f1d8:	4011      	ands	r1, r2
 801f1da:	4210      	tst	r0, r2
 801f1dc:	d1f6      	bne.n	801f1cc <_strtol_l.constprop.0+0x1c>
 801f1de:	2d2d      	cmp	r5, #45	@ 0x2d
 801f1e0:	d13a      	bne.n	801f258 <_strtol_l.constprop.0+0xa8>
 801f1e2:	7825      	ldrb	r5, [r4, #0]
 801f1e4:	1c9c      	adds	r4, r3, #2
 801f1e6:	2301      	movs	r3, #1
 801f1e8:	9300      	str	r3, [sp, #0]
 801f1ea:	2210      	movs	r2, #16
 801f1ec:	0033      	movs	r3, r6
 801f1ee:	4393      	bics	r3, r2
 801f1f0:	d109      	bne.n	801f206 <_strtol_l.constprop.0+0x56>
 801f1f2:	2d30      	cmp	r5, #48	@ 0x30
 801f1f4:	d136      	bne.n	801f264 <_strtol_l.constprop.0+0xb4>
 801f1f6:	2120      	movs	r1, #32
 801f1f8:	7823      	ldrb	r3, [r4, #0]
 801f1fa:	438b      	bics	r3, r1
 801f1fc:	2b58      	cmp	r3, #88	@ 0x58
 801f1fe:	d131      	bne.n	801f264 <_strtol_l.constprop.0+0xb4>
 801f200:	0016      	movs	r6, r2
 801f202:	7865      	ldrb	r5, [r4, #1]
 801f204:	3402      	adds	r4, #2
 801f206:	4a2e      	ldr	r2, [pc, #184]	@ (801f2c0 <_strtol_l.constprop.0+0x110>)
 801f208:	9b00      	ldr	r3, [sp, #0]
 801f20a:	4694      	mov	ip, r2
 801f20c:	4463      	add	r3, ip
 801f20e:	0031      	movs	r1, r6
 801f210:	0018      	movs	r0, r3
 801f212:	9302      	str	r3, [sp, #8]
 801f214:	f7e1 f84c 	bl	80002b0 <__aeabi_uidivmod>
 801f218:	2200      	movs	r2, #0
 801f21a:	4684      	mov	ip, r0
 801f21c:	0010      	movs	r0, r2
 801f21e:	002b      	movs	r3, r5
 801f220:	3b30      	subs	r3, #48	@ 0x30
 801f222:	2b09      	cmp	r3, #9
 801f224:	d825      	bhi.n	801f272 <_strtol_l.constprop.0+0xc2>
 801f226:	001d      	movs	r5, r3
 801f228:	42ae      	cmp	r6, r5
 801f22a:	dd31      	ble.n	801f290 <_strtol_l.constprop.0+0xe0>
 801f22c:	1c53      	adds	r3, r2, #1
 801f22e:	d009      	beq.n	801f244 <_strtol_l.constprop.0+0x94>
 801f230:	2201      	movs	r2, #1
 801f232:	4252      	negs	r2, r2
 801f234:	4584      	cmp	ip, r0
 801f236:	d305      	bcc.n	801f244 <_strtol_l.constprop.0+0x94>
 801f238:	d101      	bne.n	801f23e <_strtol_l.constprop.0+0x8e>
 801f23a:	42a9      	cmp	r1, r5
 801f23c:	db25      	blt.n	801f28a <_strtol_l.constprop.0+0xda>
 801f23e:	2201      	movs	r2, #1
 801f240:	4370      	muls	r0, r6
 801f242:	1828      	adds	r0, r5, r0
 801f244:	7825      	ldrb	r5, [r4, #0]
 801f246:	3401      	adds	r4, #1
 801f248:	e7e9      	b.n	801f21e <_strtol_l.constprop.0+0x6e>
 801f24a:	f000 ffc5 	bl	80201d8 <__errno>
 801f24e:	2316      	movs	r3, #22
 801f250:	6003      	str	r3, [r0, #0]
 801f252:	2000      	movs	r0, #0
 801f254:	b005      	add	sp, #20
 801f256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f258:	9100      	str	r1, [sp, #0]
 801f25a:	2d2b      	cmp	r5, #43	@ 0x2b
 801f25c:	d1c5      	bne.n	801f1ea <_strtol_l.constprop.0+0x3a>
 801f25e:	7825      	ldrb	r5, [r4, #0]
 801f260:	1c9c      	adds	r4, r3, #2
 801f262:	e7c2      	b.n	801f1ea <_strtol_l.constprop.0+0x3a>
 801f264:	2e00      	cmp	r6, #0
 801f266:	d1ce      	bne.n	801f206 <_strtol_l.constprop.0+0x56>
 801f268:	3608      	adds	r6, #8
 801f26a:	2d30      	cmp	r5, #48	@ 0x30
 801f26c:	d0cb      	beq.n	801f206 <_strtol_l.constprop.0+0x56>
 801f26e:	3602      	adds	r6, #2
 801f270:	e7c9      	b.n	801f206 <_strtol_l.constprop.0+0x56>
 801f272:	002b      	movs	r3, r5
 801f274:	3b41      	subs	r3, #65	@ 0x41
 801f276:	2b19      	cmp	r3, #25
 801f278:	d801      	bhi.n	801f27e <_strtol_l.constprop.0+0xce>
 801f27a:	3d37      	subs	r5, #55	@ 0x37
 801f27c:	e7d4      	b.n	801f228 <_strtol_l.constprop.0+0x78>
 801f27e:	002b      	movs	r3, r5
 801f280:	3b61      	subs	r3, #97	@ 0x61
 801f282:	2b19      	cmp	r3, #25
 801f284:	d804      	bhi.n	801f290 <_strtol_l.constprop.0+0xe0>
 801f286:	3d57      	subs	r5, #87	@ 0x57
 801f288:	e7ce      	b.n	801f228 <_strtol_l.constprop.0+0x78>
 801f28a:	2201      	movs	r2, #1
 801f28c:	4252      	negs	r2, r2
 801f28e:	e7d9      	b.n	801f244 <_strtol_l.constprop.0+0x94>
 801f290:	1c53      	adds	r3, r2, #1
 801f292:	d108      	bne.n	801f2a6 <_strtol_l.constprop.0+0xf6>
 801f294:	2322      	movs	r3, #34	@ 0x22
 801f296:	9a03      	ldr	r2, [sp, #12]
 801f298:	9802      	ldr	r0, [sp, #8]
 801f29a:	6013      	str	r3, [r2, #0]
 801f29c:	2f00      	cmp	r7, #0
 801f29e:	d0d9      	beq.n	801f254 <_strtol_l.constprop.0+0xa4>
 801f2a0:	1e63      	subs	r3, r4, #1
 801f2a2:	9301      	str	r3, [sp, #4]
 801f2a4:	e007      	b.n	801f2b6 <_strtol_l.constprop.0+0x106>
 801f2a6:	9b00      	ldr	r3, [sp, #0]
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	d000      	beq.n	801f2ae <_strtol_l.constprop.0+0xfe>
 801f2ac:	4240      	negs	r0, r0
 801f2ae:	2f00      	cmp	r7, #0
 801f2b0:	d0d0      	beq.n	801f254 <_strtol_l.constprop.0+0xa4>
 801f2b2:	2a00      	cmp	r2, #0
 801f2b4:	d1f4      	bne.n	801f2a0 <_strtol_l.constprop.0+0xf0>
 801f2b6:	9b01      	ldr	r3, [sp, #4]
 801f2b8:	603b      	str	r3, [r7, #0]
 801f2ba:	e7cb      	b.n	801f254 <_strtol_l.constprop.0+0xa4>
 801f2bc:	08025aa1 	.word	0x08025aa1
 801f2c0:	7fffffff 	.word	0x7fffffff

0801f2c4 <strtol>:
 801f2c4:	b510      	push	{r4, lr}
 801f2c6:	4c04      	ldr	r4, [pc, #16]	@ (801f2d8 <strtol+0x14>)
 801f2c8:	0013      	movs	r3, r2
 801f2ca:	000a      	movs	r2, r1
 801f2cc:	0001      	movs	r1, r0
 801f2ce:	6820      	ldr	r0, [r4, #0]
 801f2d0:	f7ff ff6e 	bl	801f1b0 <_strtol_l.constprop.0>
 801f2d4:	bd10      	pop	{r4, pc}
 801f2d6:	46c0      	nop			@ (mov r8, r8)
 801f2d8:	200003cc 	.word	0x200003cc

0801f2dc <__cvt>:
 801f2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2de:	001f      	movs	r7, r3
 801f2e0:	2300      	movs	r3, #0
 801f2e2:	0016      	movs	r6, r2
 801f2e4:	b08b      	sub	sp, #44	@ 0x2c
 801f2e6:	429f      	cmp	r7, r3
 801f2e8:	da04      	bge.n	801f2f4 <__cvt+0x18>
 801f2ea:	2180      	movs	r1, #128	@ 0x80
 801f2ec:	0609      	lsls	r1, r1, #24
 801f2ee:	187b      	adds	r3, r7, r1
 801f2f0:	001f      	movs	r7, r3
 801f2f2:	232d      	movs	r3, #45	@ 0x2d
 801f2f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f2f6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f2f8:	7013      	strb	r3, [r2, #0]
 801f2fa:	2320      	movs	r3, #32
 801f2fc:	2203      	movs	r2, #3
 801f2fe:	439d      	bics	r5, r3
 801f300:	2d46      	cmp	r5, #70	@ 0x46
 801f302:	d007      	beq.n	801f314 <__cvt+0x38>
 801f304:	002b      	movs	r3, r5
 801f306:	3b45      	subs	r3, #69	@ 0x45
 801f308:	4259      	negs	r1, r3
 801f30a:	414b      	adcs	r3, r1
 801f30c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f30e:	3a01      	subs	r2, #1
 801f310:	18cb      	adds	r3, r1, r3
 801f312:	9310      	str	r3, [sp, #64]	@ 0x40
 801f314:	ab09      	add	r3, sp, #36	@ 0x24
 801f316:	9304      	str	r3, [sp, #16]
 801f318:	ab08      	add	r3, sp, #32
 801f31a:	9303      	str	r3, [sp, #12]
 801f31c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f31e:	9200      	str	r2, [sp, #0]
 801f320:	9302      	str	r3, [sp, #8]
 801f322:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f324:	0032      	movs	r2, r6
 801f326:	9301      	str	r3, [sp, #4]
 801f328:	003b      	movs	r3, r7
 801f32a:	f001 f82b 	bl	8020384 <_dtoa_r>
 801f32e:	0004      	movs	r4, r0
 801f330:	2d47      	cmp	r5, #71	@ 0x47
 801f332:	d11b      	bne.n	801f36c <__cvt+0x90>
 801f334:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f336:	07db      	lsls	r3, r3, #31
 801f338:	d511      	bpl.n	801f35e <__cvt+0x82>
 801f33a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f33c:	18c3      	adds	r3, r0, r3
 801f33e:	9307      	str	r3, [sp, #28]
 801f340:	2200      	movs	r2, #0
 801f342:	2300      	movs	r3, #0
 801f344:	0030      	movs	r0, r6
 801f346:	0039      	movs	r1, r7
 801f348:	f7e1 f8b2 	bl	80004b0 <__aeabi_dcmpeq>
 801f34c:	2800      	cmp	r0, #0
 801f34e:	d001      	beq.n	801f354 <__cvt+0x78>
 801f350:	9b07      	ldr	r3, [sp, #28]
 801f352:	9309      	str	r3, [sp, #36]	@ 0x24
 801f354:	2230      	movs	r2, #48	@ 0x30
 801f356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f358:	9907      	ldr	r1, [sp, #28]
 801f35a:	428b      	cmp	r3, r1
 801f35c:	d320      	bcc.n	801f3a0 <__cvt+0xc4>
 801f35e:	0020      	movs	r0, r4
 801f360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f362:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f364:	1b1b      	subs	r3, r3, r4
 801f366:	6013      	str	r3, [r2, #0]
 801f368:	b00b      	add	sp, #44	@ 0x2c
 801f36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f36c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f36e:	18c3      	adds	r3, r0, r3
 801f370:	9307      	str	r3, [sp, #28]
 801f372:	2d46      	cmp	r5, #70	@ 0x46
 801f374:	d1e4      	bne.n	801f340 <__cvt+0x64>
 801f376:	7803      	ldrb	r3, [r0, #0]
 801f378:	2b30      	cmp	r3, #48	@ 0x30
 801f37a:	d10c      	bne.n	801f396 <__cvt+0xba>
 801f37c:	2200      	movs	r2, #0
 801f37e:	2300      	movs	r3, #0
 801f380:	0030      	movs	r0, r6
 801f382:	0039      	movs	r1, r7
 801f384:	f7e1 f894 	bl	80004b0 <__aeabi_dcmpeq>
 801f388:	2800      	cmp	r0, #0
 801f38a:	d104      	bne.n	801f396 <__cvt+0xba>
 801f38c:	2301      	movs	r3, #1
 801f38e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f390:	1a9b      	subs	r3, r3, r2
 801f392:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f394:	6013      	str	r3, [r2, #0]
 801f396:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f398:	9a07      	ldr	r2, [sp, #28]
 801f39a:	681b      	ldr	r3, [r3, #0]
 801f39c:	18d3      	adds	r3, r2, r3
 801f39e:	e7ce      	b.n	801f33e <__cvt+0x62>
 801f3a0:	1c59      	adds	r1, r3, #1
 801f3a2:	9109      	str	r1, [sp, #36]	@ 0x24
 801f3a4:	701a      	strb	r2, [r3, #0]
 801f3a6:	e7d6      	b.n	801f356 <__cvt+0x7a>

0801f3a8 <__exponent>:
 801f3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f3aa:	232b      	movs	r3, #43	@ 0x2b
 801f3ac:	0005      	movs	r5, r0
 801f3ae:	000c      	movs	r4, r1
 801f3b0:	b085      	sub	sp, #20
 801f3b2:	7002      	strb	r2, [r0, #0]
 801f3b4:	2900      	cmp	r1, #0
 801f3b6:	da01      	bge.n	801f3bc <__exponent+0x14>
 801f3b8:	424c      	negs	r4, r1
 801f3ba:	3302      	adds	r3, #2
 801f3bc:	706b      	strb	r3, [r5, #1]
 801f3be:	2c09      	cmp	r4, #9
 801f3c0:	dd2c      	ble.n	801f41c <__exponent+0x74>
 801f3c2:	ab02      	add	r3, sp, #8
 801f3c4:	1dde      	adds	r6, r3, #7
 801f3c6:	0020      	movs	r0, r4
 801f3c8:	210a      	movs	r1, #10
 801f3ca:	f7e1 f85b 	bl	8000484 <__aeabi_idivmod>
 801f3ce:	0037      	movs	r7, r6
 801f3d0:	3130      	adds	r1, #48	@ 0x30
 801f3d2:	3e01      	subs	r6, #1
 801f3d4:	0020      	movs	r0, r4
 801f3d6:	7031      	strb	r1, [r6, #0]
 801f3d8:	210a      	movs	r1, #10
 801f3da:	9401      	str	r4, [sp, #4]
 801f3dc:	f7e0 ff6c 	bl	80002b8 <__divsi3>
 801f3e0:	9b01      	ldr	r3, [sp, #4]
 801f3e2:	0004      	movs	r4, r0
 801f3e4:	2b63      	cmp	r3, #99	@ 0x63
 801f3e6:	dcee      	bgt.n	801f3c6 <__exponent+0x1e>
 801f3e8:	1eba      	subs	r2, r7, #2
 801f3ea:	1ca8      	adds	r0, r5, #2
 801f3ec:	0001      	movs	r1, r0
 801f3ee:	0013      	movs	r3, r2
 801f3f0:	3430      	adds	r4, #48	@ 0x30
 801f3f2:	7014      	strb	r4, [r2, #0]
 801f3f4:	ac02      	add	r4, sp, #8
 801f3f6:	3407      	adds	r4, #7
 801f3f8:	429c      	cmp	r4, r3
 801f3fa:	d80a      	bhi.n	801f412 <__exponent+0x6a>
 801f3fc:	2300      	movs	r3, #0
 801f3fe:	42a2      	cmp	r2, r4
 801f400:	d803      	bhi.n	801f40a <__exponent+0x62>
 801f402:	3309      	adds	r3, #9
 801f404:	aa02      	add	r2, sp, #8
 801f406:	189b      	adds	r3, r3, r2
 801f408:	1bdb      	subs	r3, r3, r7
 801f40a:	18c0      	adds	r0, r0, r3
 801f40c:	1b40      	subs	r0, r0, r5
 801f40e:	b005      	add	sp, #20
 801f410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f412:	781c      	ldrb	r4, [r3, #0]
 801f414:	3301      	adds	r3, #1
 801f416:	700c      	strb	r4, [r1, #0]
 801f418:	3101      	adds	r1, #1
 801f41a:	e7eb      	b.n	801f3f4 <__exponent+0x4c>
 801f41c:	2330      	movs	r3, #48	@ 0x30
 801f41e:	18e4      	adds	r4, r4, r3
 801f420:	70ab      	strb	r3, [r5, #2]
 801f422:	1d28      	adds	r0, r5, #4
 801f424:	70ec      	strb	r4, [r5, #3]
 801f426:	e7f1      	b.n	801f40c <__exponent+0x64>

0801f428 <_printf_float>:
 801f428:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f42a:	b097      	sub	sp, #92	@ 0x5c
 801f42c:	000d      	movs	r5, r1
 801f42e:	920a      	str	r2, [sp, #40]	@ 0x28
 801f430:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f432:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f434:	9009      	str	r0, [sp, #36]	@ 0x24
 801f436:	f000 fe7d 	bl	8020134 <_localeconv_r>
 801f43a:	6803      	ldr	r3, [r0, #0]
 801f43c:	0018      	movs	r0, r3
 801f43e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f440:	f7e0 fe94 	bl	800016c <strlen>
 801f444:	2300      	movs	r3, #0
 801f446:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f448:	9314      	str	r3, [sp, #80]	@ 0x50
 801f44a:	7e2b      	ldrb	r3, [r5, #24]
 801f44c:	2207      	movs	r2, #7
 801f44e:	930c      	str	r3, [sp, #48]	@ 0x30
 801f450:	682b      	ldr	r3, [r5, #0]
 801f452:	930e      	str	r3, [sp, #56]	@ 0x38
 801f454:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f456:	6823      	ldr	r3, [r4, #0]
 801f458:	05c9      	lsls	r1, r1, #23
 801f45a:	d545      	bpl.n	801f4e8 <_printf_float+0xc0>
 801f45c:	189b      	adds	r3, r3, r2
 801f45e:	4393      	bics	r3, r2
 801f460:	001a      	movs	r2, r3
 801f462:	3208      	adds	r2, #8
 801f464:	6022      	str	r2, [r4, #0]
 801f466:	2201      	movs	r2, #1
 801f468:	681e      	ldr	r6, [r3, #0]
 801f46a:	685f      	ldr	r7, [r3, #4]
 801f46c:	007b      	lsls	r3, r7, #1
 801f46e:	085b      	lsrs	r3, r3, #1
 801f470:	9311      	str	r3, [sp, #68]	@ 0x44
 801f472:	9610      	str	r6, [sp, #64]	@ 0x40
 801f474:	64ae      	str	r6, [r5, #72]	@ 0x48
 801f476:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801f478:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f47a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f47c:	4ba7      	ldr	r3, [pc, #668]	@ (801f71c <_printf_float+0x2f4>)
 801f47e:	4252      	negs	r2, r2
 801f480:	f7e3 ff40 	bl	8003304 <__aeabi_dcmpun>
 801f484:	2800      	cmp	r0, #0
 801f486:	d131      	bne.n	801f4ec <_printf_float+0xc4>
 801f488:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f48a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f48c:	2201      	movs	r2, #1
 801f48e:	4ba3      	ldr	r3, [pc, #652]	@ (801f71c <_printf_float+0x2f4>)
 801f490:	4252      	negs	r2, r2
 801f492:	f7e1 f81d 	bl	80004d0 <__aeabi_dcmple>
 801f496:	2800      	cmp	r0, #0
 801f498:	d128      	bne.n	801f4ec <_printf_float+0xc4>
 801f49a:	2200      	movs	r2, #0
 801f49c:	2300      	movs	r3, #0
 801f49e:	0030      	movs	r0, r6
 801f4a0:	0039      	movs	r1, r7
 801f4a2:	f7e1 f80b 	bl	80004bc <__aeabi_dcmplt>
 801f4a6:	2800      	cmp	r0, #0
 801f4a8:	d003      	beq.n	801f4b2 <_printf_float+0x8a>
 801f4aa:	002b      	movs	r3, r5
 801f4ac:	222d      	movs	r2, #45	@ 0x2d
 801f4ae:	3343      	adds	r3, #67	@ 0x43
 801f4b0:	701a      	strb	r2, [r3, #0]
 801f4b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f4b4:	4f9a      	ldr	r7, [pc, #616]	@ (801f720 <_printf_float+0x2f8>)
 801f4b6:	2b47      	cmp	r3, #71	@ 0x47
 801f4b8:	d900      	bls.n	801f4bc <_printf_float+0x94>
 801f4ba:	4f9a      	ldr	r7, [pc, #616]	@ (801f724 <_printf_float+0x2fc>)
 801f4bc:	2303      	movs	r3, #3
 801f4be:	2400      	movs	r4, #0
 801f4c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f4c2:	612b      	str	r3, [r5, #16]
 801f4c4:	3301      	adds	r3, #1
 801f4c6:	439a      	bics	r2, r3
 801f4c8:	602a      	str	r2, [r5, #0]
 801f4ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f4cc:	0029      	movs	r1, r5
 801f4ce:	9300      	str	r3, [sp, #0]
 801f4d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f4d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f4d4:	aa15      	add	r2, sp, #84	@ 0x54
 801f4d6:	f000 f9e5 	bl	801f8a4 <_printf_common>
 801f4da:	3001      	adds	r0, #1
 801f4dc:	d000      	beq.n	801f4e0 <_printf_float+0xb8>
 801f4de:	e09f      	b.n	801f620 <_printf_float+0x1f8>
 801f4e0:	2001      	movs	r0, #1
 801f4e2:	4240      	negs	r0, r0
 801f4e4:	b017      	add	sp, #92	@ 0x5c
 801f4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4e8:	3307      	adds	r3, #7
 801f4ea:	e7b8      	b.n	801f45e <_printf_float+0x36>
 801f4ec:	0032      	movs	r2, r6
 801f4ee:	003b      	movs	r3, r7
 801f4f0:	0030      	movs	r0, r6
 801f4f2:	0039      	movs	r1, r7
 801f4f4:	f7e3 ff06 	bl	8003304 <__aeabi_dcmpun>
 801f4f8:	2800      	cmp	r0, #0
 801f4fa:	d00b      	beq.n	801f514 <_printf_float+0xec>
 801f4fc:	2f00      	cmp	r7, #0
 801f4fe:	da03      	bge.n	801f508 <_printf_float+0xe0>
 801f500:	002b      	movs	r3, r5
 801f502:	222d      	movs	r2, #45	@ 0x2d
 801f504:	3343      	adds	r3, #67	@ 0x43
 801f506:	701a      	strb	r2, [r3, #0]
 801f508:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f50a:	4f87      	ldr	r7, [pc, #540]	@ (801f728 <_printf_float+0x300>)
 801f50c:	2b47      	cmp	r3, #71	@ 0x47
 801f50e:	d9d5      	bls.n	801f4bc <_printf_float+0x94>
 801f510:	4f86      	ldr	r7, [pc, #536]	@ (801f72c <_printf_float+0x304>)
 801f512:	e7d3      	b.n	801f4bc <_printf_float+0x94>
 801f514:	2220      	movs	r2, #32
 801f516:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f518:	686b      	ldr	r3, [r5, #4]
 801f51a:	4394      	bics	r4, r2
 801f51c:	1c5a      	adds	r2, r3, #1
 801f51e:	d146      	bne.n	801f5ae <_printf_float+0x186>
 801f520:	3307      	adds	r3, #7
 801f522:	606b      	str	r3, [r5, #4]
 801f524:	2380      	movs	r3, #128	@ 0x80
 801f526:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f528:	00db      	lsls	r3, r3, #3
 801f52a:	4313      	orrs	r3, r2
 801f52c:	2200      	movs	r2, #0
 801f52e:	602b      	str	r3, [r5, #0]
 801f530:	9206      	str	r2, [sp, #24]
 801f532:	aa14      	add	r2, sp, #80	@ 0x50
 801f534:	9205      	str	r2, [sp, #20]
 801f536:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f538:	a90a      	add	r1, sp, #40	@ 0x28
 801f53a:	9204      	str	r2, [sp, #16]
 801f53c:	aa13      	add	r2, sp, #76	@ 0x4c
 801f53e:	9203      	str	r2, [sp, #12]
 801f540:	2223      	movs	r2, #35	@ 0x23
 801f542:	1852      	adds	r2, r2, r1
 801f544:	9202      	str	r2, [sp, #8]
 801f546:	9301      	str	r3, [sp, #4]
 801f548:	686b      	ldr	r3, [r5, #4]
 801f54a:	0032      	movs	r2, r6
 801f54c:	9300      	str	r3, [sp, #0]
 801f54e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f550:	003b      	movs	r3, r7
 801f552:	f7ff fec3 	bl	801f2dc <__cvt>
 801f556:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f558:	0007      	movs	r7, r0
 801f55a:	2c47      	cmp	r4, #71	@ 0x47
 801f55c:	d12d      	bne.n	801f5ba <_printf_float+0x192>
 801f55e:	1cd3      	adds	r3, r2, #3
 801f560:	db02      	blt.n	801f568 <_printf_float+0x140>
 801f562:	686b      	ldr	r3, [r5, #4]
 801f564:	429a      	cmp	r2, r3
 801f566:	dd48      	ble.n	801f5fa <_printf_float+0x1d2>
 801f568:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f56a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f56c:	3b02      	subs	r3, #2
 801f56e:	b2db      	uxtb	r3, r3
 801f570:	930c      	str	r3, [sp, #48]	@ 0x30
 801f572:	0028      	movs	r0, r5
 801f574:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f576:	3901      	subs	r1, #1
 801f578:	3050      	adds	r0, #80	@ 0x50
 801f57a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f57c:	f7ff ff14 	bl	801f3a8 <__exponent>
 801f580:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f582:	0004      	movs	r4, r0
 801f584:	1813      	adds	r3, r2, r0
 801f586:	612b      	str	r3, [r5, #16]
 801f588:	2a01      	cmp	r2, #1
 801f58a:	dc02      	bgt.n	801f592 <_printf_float+0x16a>
 801f58c:	682a      	ldr	r2, [r5, #0]
 801f58e:	07d2      	lsls	r2, r2, #31
 801f590:	d501      	bpl.n	801f596 <_printf_float+0x16e>
 801f592:	3301      	adds	r3, #1
 801f594:	612b      	str	r3, [r5, #16]
 801f596:	2323      	movs	r3, #35	@ 0x23
 801f598:	aa0a      	add	r2, sp, #40	@ 0x28
 801f59a:	189b      	adds	r3, r3, r2
 801f59c:	781b      	ldrb	r3, [r3, #0]
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	d100      	bne.n	801f5a4 <_printf_float+0x17c>
 801f5a2:	e792      	b.n	801f4ca <_printf_float+0xa2>
 801f5a4:	002b      	movs	r3, r5
 801f5a6:	222d      	movs	r2, #45	@ 0x2d
 801f5a8:	3343      	adds	r3, #67	@ 0x43
 801f5aa:	701a      	strb	r2, [r3, #0]
 801f5ac:	e78d      	b.n	801f4ca <_printf_float+0xa2>
 801f5ae:	2c47      	cmp	r4, #71	@ 0x47
 801f5b0:	d1b8      	bne.n	801f524 <_printf_float+0xfc>
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d1b6      	bne.n	801f524 <_printf_float+0xfc>
 801f5b6:	3301      	adds	r3, #1
 801f5b8:	e7b3      	b.n	801f522 <_printf_float+0xfa>
 801f5ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5bc:	0011      	movs	r1, r2
 801f5be:	2b65      	cmp	r3, #101	@ 0x65
 801f5c0:	d9d7      	bls.n	801f572 <_printf_float+0x14a>
 801f5c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5c4:	2b66      	cmp	r3, #102	@ 0x66
 801f5c6:	d11a      	bne.n	801f5fe <_printf_float+0x1d6>
 801f5c8:	686b      	ldr	r3, [r5, #4]
 801f5ca:	2a00      	cmp	r2, #0
 801f5cc:	dd09      	ble.n	801f5e2 <_printf_float+0x1ba>
 801f5ce:	612a      	str	r2, [r5, #16]
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d102      	bne.n	801f5da <_printf_float+0x1b2>
 801f5d4:	6829      	ldr	r1, [r5, #0]
 801f5d6:	07c9      	lsls	r1, r1, #31
 801f5d8:	d50b      	bpl.n	801f5f2 <_printf_float+0x1ca>
 801f5da:	3301      	adds	r3, #1
 801f5dc:	189b      	adds	r3, r3, r2
 801f5de:	612b      	str	r3, [r5, #16]
 801f5e0:	e007      	b.n	801f5f2 <_printf_float+0x1ca>
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	d103      	bne.n	801f5ee <_printf_float+0x1c6>
 801f5e6:	2201      	movs	r2, #1
 801f5e8:	6829      	ldr	r1, [r5, #0]
 801f5ea:	4211      	tst	r1, r2
 801f5ec:	d000      	beq.n	801f5f0 <_printf_float+0x1c8>
 801f5ee:	1c9a      	adds	r2, r3, #2
 801f5f0:	612a      	str	r2, [r5, #16]
 801f5f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f5f4:	2400      	movs	r4, #0
 801f5f6:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f5f8:	e7cd      	b.n	801f596 <_printf_float+0x16e>
 801f5fa:	2367      	movs	r3, #103	@ 0x67
 801f5fc:	930c      	str	r3, [sp, #48]	@ 0x30
 801f5fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f600:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f602:	4299      	cmp	r1, r3
 801f604:	db06      	blt.n	801f614 <_printf_float+0x1ec>
 801f606:	682b      	ldr	r3, [r5, #0]
 801f608:	6129      	str	r1, [r5, #16]
 801f60a:	07db      	lsls	r3, r3, #31
 801f60c:	d5f1      	bpl.n	801f5f2 <_printf_float+0x1ca>
 801f60e:	3101      	adds	r1, #1
 801f610:	6129      	str	r1, [r5, #16]
 801f612:	e7ee      	b.n	801f5f2 <_printf_float+0x1ca>
 801f614:	2201      	movs	r2, #1
 801f616:	2900      	cmp	r1, #0
 801f618:	dce0      	bgt.n	801f5dc <_printf_float+0x1b4>
 801f61a:	1892      	adds	r2, r2, r2
 801f61c:	1a52      	subs	r2, r2, r1
 801f61e:	e7dd      	b.n	801f5dc <_printf_float+0x1b4>
 801f620:	682a      	ldr	r2, [r5, #0]
 801f622:	0553      	lsls	r3, r2, #21
 801f624:	d408      	bmi.n	801f638 <_printf_float+0x210>
 801f626:	692b      	ldr	r3, [r5, #16]
 801f628:	003a      	movs	r2, r7
 801f62a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f62c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f62e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f630:	47a0      	blx	r4
 801f632:	3001      	adds	r0, #1
 801f634:	d129      	bne.n	801f68a <_printf_float+0x262>
 801f636:	e753      	b.n	801f4e0 <_printf_float+0xb8>
 801f638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f63a:	2b65      	cmp	r3, #101	@ 0x65
 801f63c:	d800      	bhi.n	801f640 <_printf_float+0x218>
 801f63e:	e0da      	b.n	801f7f6 <_printf_float+0x3ce>
 801f640:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f642:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f644:	2200      	movs	r2, #0
 801f646:	2300      	movs	r3, #0
 801f648:	f7e0 ff32 	bl	80004b0 <__aeabi_dcmpeq>
 801f64c:	2800      	cmp	r0, #0
 801f64e:	d033      	beq.n	801f6b8 <_printf_float+0x290>
 801f650:	2301      	movs	r3, #1
 801f652:	4a37      	ldr	r2, [pc, #220]	@ (801f730 <_printf_float+0x308>)
 801f654:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f656:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f658:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f65a:	47a0      	blx	r4
 801f65c:	3001      	adds	r0, #1
 801f65e:	d100      	bne.n	801f662 <_printf_float+0x23a>
 801f660:	e73e      	b.n	801f4e0 <_printf_float+0xb8>
 801f662:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f664:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f666:	42b3      	cmp	r3, r6
 801f668:	db02      	blt.n	801f670 <_printf_float+0x248>
 801f66a:	682b      	ldr	r3, [r5, #0]
 801f66c:	07db      	lsls	r3, r3, #31
 801f66e:	d50c      	bpl.n	801f68a <_printf_float+0x262>
 801f670:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f672:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f674:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f676:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f678:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f67a:	47a0      	blx	r4
 801f67c:	2400      	movs	r4, #0
 801f67e:	3001      	adds	r0, #1
 801f680:	d100      	bne.n	801f684 <_printf_float+0x25c>
 801f682:	e72d      	b.n	801f4e0 <_printf_float+0xb8>
 801f684:	1e73      	subs	r3, r6, #1
 801f686:	42a3      	cmp	r3, r4
 801f688:	dc0a      	bgt.n	801f6a0 <_printf_float+0x278>
 801f68a:	682b      	ldr	r3, [r5, #0]
 801f68c:	079b      	lsls	r3, r3, #30
 801f68e:	d500      	bpl.n	801f692 <_printf_float+0x26a>
 801f690:	e105      	b.n	801f89e <_printf_float+0x476>
 801f692:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f694:	68e8      	ldr	r0, [r5, #12]
 801f696:	4298      	cmp	r0, r3
 801f698:	db00      	blt.n	801f69c <_printf_float+0x274>
 801f69a:	e723      	b.n	801f4e4 <_printf_float+0xbc>
 801f69c:	0018      	movs	r0, r3
 801f69e:	e721      	b.n	801f4e4 <_printf_float+0xbc>
 801f6a0:	002a      	movs	r2, r5
 801f6a2:	2301      	movs	r3, #1
 801f6a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f6a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f6a8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f6aa:	321a      	adds	r2, #26
 801f6ac:	47b8      	blx	r7
 801f6ae:	3001      	adds	r0, #1
 801f6b0:	d100      	bne.n	801f6b4 <_printf_float+0x28c>
 801f6b2:	e715      	b.n	801f4e0 <_printf_float+0xb8>
 801f6b4:	3401      	adds	r4, #1
 801f6b6:	e7e5      	b.n	801f684 <_printf_float+0x25c>
 801f6b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f6ba:	2b00      	cmp	r3, #0
 801f6bc:	dc3a      	bgt.n	801f734 <_printf_float+0x30c>
 801f6be:	2301      	movs	r3, #1
 801f6c0:	4a1b      	ldr	r2, [pc, #108]	@ (801f730 <_printf_float+0x308>)
 801f6c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f6c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f6c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f6c8:	47a0      	blx	r4
 801f6ca:	3001      	adds	r0, #1
 801f6cc:	d100      	bne.n	801f6d0 <_printf_float+0x2a8>
 801f6ce:	e707      	b.n	801f4e0 <_printf_float+0xb8>
 801f6d0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f6d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f6d4:	4333      	orrs	r3, r6
 801f6d6:	d102      	bne.n	801f6de <_printf_float+0x2b6>
 801f6d8:	682b      	ldr	r3, [r5, #0]
 801f6da:	07db      	lsls	r3, r3, #31
 801f6dc:	d5d5      	bpl.n	801f68a <_printf_float+0x262>
 801f6de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f6e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f6e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f6e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f6e6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f6e8:	47a0      	blx	r4
 801f6ea:	2300      	movs	r3, #0
 801f6ec:	3001      	adds	r0, #1
 801f6ee:	d100      	bne.n	801f6f2 <_printf_float+0x2ca>
 801f6f0:	e6f6      	b.n	801f4e0 <_printf_float+0xb8>
 801f6f2:	930c      	str	r3, [sp, #48]	@ 0x30
 801f6f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f6f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f6f8:	425b      	negs	r3, r3
 801f6fa:	4293      	cmp	r3, r2
 801f6fc:	dc01      	bgt.n	801f702 <_printf_float+0x2da>
 801f6fe:	0033      	movs	r3, r6
 801f700:	e792      	b.n	801f628 <_printf_float+0x200>
 801f702:	002a      	movs	r2, r5
 801f704:	2301      	movs	r3, #1
 801f706:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f708:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f70a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f70c:	321a      	adds	r2, #26
 801f70e:	47a0      	blx	r4
 801f710:	3001      	adds	r0, #1
 801f712:	d100      	bne.n	801f716 <_printf_float+0x2ee>
 801f714:	e6e4      	b.n	801f4e0 <_printf_float+0xb8>
 801f716:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f718:	3301      	adds	r3, #1
 801f71a:	e7ea      	b.n	801f6f2 <_printf_float+0x2ca>
 801f71c:	7fefffff 	.word	0x7fefffff
 801f720:	08025ba1 	.word	0x08025ba1
 801f724:	08025ba5 	.word	0x08025ba5
 801f728:	08025ba9 	.word	0x08025ba9
 801f72c:	08025bad 	.word	0x08025bad
 801f730:	08025bb1 	.word	0x08025bb1
 801f734:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f736:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f738:	930c      	str	r3, [sp, #48]	@ 0x30
 801f73a:	429e      	cmp	r6, r3
 801f73c:	dd00      	ble.n	801f740 <_printf_float+0x318>
 801f73e:	001e      	movs	r6, r3
 801f740:	2e00      	cmp	r6, #0
 801f742:	dc31      	bgt.n	801f7a8 <_printf_float+0x380>
 801f744:	43f3      	mvns	r3, r6
 801f746:	2400      	movs	r4, #0
 801f748:	17db      	asrs	r3, r3, #31
 801f74a:	4033      	ands	r3, r6
 801f74c:	930e      	str	r3, [sp, #56]	@ 0x38
 801f74e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f752:	1af3      	subs	r3, r6, r3
 801f754:	42a3      	cmp	r3, r4
 801f756:	dc30      	bgt.n	801f7ba <_printf_float+0x392>
 801f758:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f75a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f75c:	429a      	cmp	r2, r3
 801f75e:	dc38      	bgt.n	801f7d2 <_printf_float+0x3aa>
 801f760:	682b      	ldr	r3, [r5, #0]
 801f762:	07db      	lsls	r3, r3, #31
 801f764:	d435      	bmi.n	801f7d2 <_printf_float+0x3aa>
 801f766:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f76a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f76c:	1b9b      	subs	r3, r3, r6
 801f76e:	1b14      	subs	r4, r2, r4
 801f770:	429c      	cmp	r4, r3
 801f772:	dd00      	ble.n	801f776 <_printf_float+0x34e>
 801f774:	001c      	movs	r4, r3
 801f776:	2c00      	cmp	r4, #0
 801f778:	dc34      	bgt.n	801f7e4 <_printf_float+0x3bc>
 801f77a:	43e3      	mvns	r3, r4
 801f77c:	2600      	movs	r6, #0
 801f77e:	17db      	asrs	r3, r3, #31
 801f780:	401c      	ands	r4, r3
 801f782:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f784:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f786:	1ad3      	subs	r3, r2, r3
 801f788:	1b1b      	subs	r3, r3, r4
 801f78a:	42b3      	cmp	r3, r6
 801f78c:	dc00      	bgt.n	801f790 <_printf_float+0x368>
 801f78e:	e77c      	b.n	801f68a <_printf_float+0x262>
 801f790:	002a      	movs	r2, r5
 801f792:	2301      	movs	r3, #1
 801f794:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f798:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f79a:	321a      	adds	r2, #26
 801f79c:	47b8      	blx	r7
 801f79e:	3001      	adds	r0, #1
 801f7a0:	d100      	bne.n	801f7a4 <_printf_float+0x37c>
 801f7a2:	e69d      	b.n	801f4e0 <_printf_float+0xb8>
 801f7a4:	3601      	adds	r6, #1
 801f7a6:	e7ec      	b.n	801f782 <_printf_float+0x35a>
 801f7a8:	0033      	movs	r3, r6
 801f7aa:	003a      	movs	r2, r7
 801f7ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f7b2:	47a0      	blx	r4
 801f7b4:	3001      	adds	r0, #1
 801f7b6:	d1c5      	bne.n	801f744 <_printf_float+0x31c>
 801f7b8:	e692      	b.n	801f4e0 <_printf_float+0xb8>
 801f7ba:	002a      	movs	r2, r5
 801f7bc:	2301      	movs	r3, #1
 801f7be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7c2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f7c4:	321a      	adds	r2, #26
 801f7c6:	47b0      	blx	r6
 801f7c8:	3001      	adds	r0, #1
 801f7ca:	d100      	bne.n	801f7ce <_printf_float+0x3a6>
 801f7cc:	e688      	b.n	801f4e0 <_printf_float+0xb8>
 801f7ce:	3401      	adds	r4, #1
 801f7d0:	e7bd      	b.n	801f74e <_printf_float+0x326>
 801f7d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f7d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f7dc:	47a0      	blx	r4
 801f7de:	3001      	adds	r0, #1
 801f7e0:	d1c1      	bne.n	801f766 <_printf_float+0x33e>
 801f7e2:	e67d      	b.n	801f4e0 <_printf_float+0xb8>
 801f7e4:	19ba      	adds	r2, r7, r6
 801f7e6:	0023      	movs	r3, r4
 801f7e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f7ee:	47b0      	blx	r6
 801f7f0:	3001      	adds	r0, #1
 801f7f2:	d1c2      	bne.n	801f77a <_printf_float+0x352>
 801f7f4:	e674      	b.n	801f4e0 <_printf_float+0xb8>
 801f7f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f7f8:	930c      	str	r3, [sp, #48]	@ 0x30
 801f7fa:	2b01      	cmp	r3, #1
 801f7fc:	dc02      	bgt.n	801f804 <_printf_float+0x3dc>
 801f7fe:	2301      	movs	r3, #1
 801f800:	421a      	tst	r2, r3
 801f802:	d039      	beq.n	801f878 <_printf_float+0x450>
 801f804:	2301      	movs	r3, #1
 801f806:	003a      	movs	r2, r7
 801f808:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f80a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f80c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f80e:	47b0      	blx	r6
 801f810:	3001      	adds	r0, #1
 801f812:	d100      	bne.n	801f816 <_printf_float+0x3ee>
 801f814:	e664      	b.n	801f4e0 <_printf_float+0xb8>
 801f816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f818:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f81a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f81c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f81e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f820:	47b0      	blx	r6
 801f822:	3001      	adds	r0, #1
 801f824:	d100      	bne.n	801f828 <_printf_float+0x400>
 801f826:	e65b      	b.n	801f4e0 <_printf_float+0xb8>
 801f828:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f82a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f82c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f82e:	2200      	movs	r2, #0
 801f830:	3b01      	subs	r3, #1
 801f832:	930c      	str	r3, [sp, #48]	@ 0x30
 801f834:	2300      	movs	r3, #0
 801f836:	f7e0 fe3b 	bl	80004b0 <__aeabi_dcmpeq>
 801f83a:	2800      	cmp	r0, #0
 801f83c:	d11a      	bne.n	801f874 <_printf_float+0x44c>
 801f83e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f840:	1c7a      	adds	r2, r7, #1
 801f842:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f844:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f846:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f848:	47b0      	blx	r6
 801f84a:	3001      	adds	r0, #1
 801f84c:	d10e      	bne.n	801f86c <_printf_float+0x444>
 801f84e:	e647      	b.n	801f4e0 <_printf_float+0xb8>
 801f850:	002a      	movs	r2, r5
 801f852:	2301      	movs	r3, #1
 801f854:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f858:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f85a:	321a      	adds	r2, #26
 801f85c:	47b8      	blx	r7
 801f85e:	3001      	adds	r0, #1
 801f860:	d100      	bne.n	801f864 <_printf_float+0x43c>
 801f862:	e63d      	b.n	801f4e0 <_printf_float+0xb8>
 801f864:	3601      	adds	r6, #1
 801f866:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f868:	429e      	cmp	r6, r3
 801f86a:	dbf1      	blt.n	801f850 <_printf_float+0x428>
 801f86c:	002a      	movs	r2, r5
 801f86e:	0023      	movs	r3, r4
 801f870:	3250      	adds	r2, #80	@ 0x50
 801f872:	e6da      	b.n	801f62a <_printf_float+0x202>
 801f874:	2600      	movs	r6, #0
 801f876:	e7f6      	b.n	801f866 <_printf_float+0x43e>
 801f878:	003a      	movs	r2, r7
 801f87a:	e7e2      	b.n	801f842 <_printf_float+0x41a>
 801f87c:	002a      	movs	r2, r5
 801f87e:	2301      	movs	r3, #1
 801f880:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f884:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f886:	3219      	adds	r2, #25
 801f888:	47b0      	blx	r6
 801f88a:	3001      	adds	r0, #1
 801f88c:	d100      	bne.n	801f890 <_printf_float+0x468>
 801f88e:	e627      	b.n	801f4e0 <_printf_float+0xb8>
 801f890:	3401      	adds	r4, #1
 801f892:	68eb      	ldr	r3, [r5, #12]
 801f894:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f896:	1a9b      	subs	r3, r3, r2
 801f898:	42a3      	cmp	r3, r4
 801f89a:	dcef      	bgt.n	801f87c <_printf_float+0x454>
 801f89c:	e6f9      	b.n	801f692 <_printf_float+0x26a>
 801f89e:	2400      	movs	r4, #0
 801f8a0:	e7f7      	b.n	801f892 <_printf_float+0x46a>
 801f8a2:	46c0      	nop			@ (mov r8, r8)

0801f8a4 <_printf_common>:
 801f8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f8a6:	0016      	movs	r6, r2
 801f8a8:	9301      	str	r3, [sp, #4]
 801f8aa:	688a      	ldr	r2, [r1, #8]
 801f8ac:	690b      	ldr	r3, [r1, #16]
 801f8ae:	000c      	movs	r4, r1
 801f8b0:	9000      	str	r0, [sp, #0]
 801f8b2:	4293      	cmp	r3, r2
 801f8b4:	da00      	bge.n	801f8b8 <_printf_common+0x14>
 801f8b6:	0013      	movs	r3, r2
 801f8b8:	0022      	movs	r2, r4
 801f8ba:	6033      	str	r3, [r6, #0]
 801f8bc:	3243      	adds	r2, #67	@ 0x43
 801f8be:	7812      	ldrb	r2, [r2, #0]
 801f8c0:	2a00      	cmp	r2, #0
 801f8c2:	d001      	beq.n	801f8c8 <_printf_common+0x24>
 801f8c4:	3301      	adds	r3, #1
 801f8c6:	6033      	str	r3, [r6, #0]
 801f8c8:	6823      	ldr	r3, [r4, #0]
 801f8ca:	069b      	lsls	r3, r3, #26
 801f8cc:	d502      	bpl.n	801f8d4 <_printf_common+0x30>
 801f8ce:	6833      	ldr	r3, [r6, #0]
 801f8d0:	3302      	adds	r3, #2
 801f8d2:	6033      	str	r3, [r6, #0]
 801f8d4:	6822      	ldr	r2, [r4, #0]
 801f8d6:	2306      	movs	r3, #6
 801f8d8:	0015      	movs	r5, r2
 801f8da:	401d      	ands	r5, r3
 801f8dc:	421a      	tst	r2, r3
 801f8de:	d027      	beq.n	801f930 <_printf_common+0x8c>
 801f8e0:	0023      	movs	r3, r4
 801f8e2:	3343      	adds	r3, #67	@ 0x43
 801f8e4:	781b      	ldrb	r3, [r3, #0]
 801f8e6:	1e5a      	subs	r2, r3, #1
 801f8e8:	4193      	sbcs	r3, r2
 801f8ea:	6822      	ldr	r2, [r4, #0]
 801f8ec:	0692      	lsls	r2, r2, #26
 801f8ee:	d430      	bmi.n	801f952 <_printf_common+0xae>
 801f8f0:	0022      	movs	r2, r4
 801f8f2:	9901      	ldr	r1, [sp, #4]
 801f8f4:	9800      	ldr	r0, [sp, #0]
 801f8f6:	9d08      	ldr	r5, [sp, #32]
 801f8f8:	3243      	adds	r2, #67	@ 0x43
 801f8fa:	47a8      	blx	r5
 801f8fc:	3001      	adds	r0, #1
 801f8fe:	d025      	beq.n	801f94c <_printf_common+0xa8>
 801f900:	2206      	movs	r2, #6
 801f902:	6823      	ldr	r3, [r4, #0]
 801f904:	2500      	movs	r5, #0
 801f906:	4013      	ands	r3, r2
 801f908:	2b04      	cmp	r3, #4
 801f90a:	d105      	bne.n	801f918 <_printf_common+0x74>
 801f90c:	6833      	ldr	r3, [r6, #0]
 801f90e:	68e5      	ldr	r5, [r4, #12]
 801f910:	1aed      	subs	r5, r5, r3
 801f912:	43eb      	mvns	r3, r5
 801f914:	17db      	asrs	r3, r3, #31
 801f916:	401d      	ands	r5, r3
 801f918:	68a3      	ldr	r3, [r4, #8]
 801f91a:	6922      	ldr	r2, [r4, #16]
 801f91c:	4293      	cmp	r3, r2
 801f91e:	dd01      	ble.n	801f924 <_printf_common+0x80>
 801f920:	1a9b      	subs	r3, r3, r2
 801f922:	18ed      	adds	r5, r5, r3
 801f924:	2600      	movs	r6, #0
 801f926:	42b5      	cmp	r5, r6
 801f928:	d120      	bne.n	801f96c <_printf_common+0xc8>
 801f92a:	2000      	movs	r0, #0
 801f92c:	e010      	b.n	801f950 <_printf_common+0xac>
 801f92e:	3501      	adds	r5, #1
 801f930:	68e3      	ldr	r3, [r4, #12]
 801f932:	6832      	ldr	r2, [r6, #0]
 801f934:	1a9b      	subs	r3, r3, r2
 801f936:	42ab      	cmp	r3, r5
 801f938:	ddd2      	ble.n	801f8e0 <_printf_common+0x3c>
 801f93a:	0022      	movs	r2, r4
 801f93c:	2301      	movs	r3, #1
 801f93e:	9901      	ldr	r1, [sp, #4]
 801f940:	9800      	ldr	r0, [sp, #0]
 801f942:	9f08      	ldr	r7, [sp, #32]
 801f944:	3219      	adds	r2, #25
 801f946:	47b8      	blx	r7
 801f948:	3001      	adds	r0, #1
 801f94a:	d1f0      	bne.n	801f92e <_printf_common+0x8a>
 801f94c:	2001      	movs	r0, #1
 801f94e:	4240      	negs	r0, r0
 801f950:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f952:	2030      	movs	r0, #48	@ 0x30
 801f954:	18e1      	adds	r1, r4, r3
 801f956:	3143      	adds	r1, #67	@ 0x43
 801f958:	7008      	strb	r0, [r1, #0]
 801f95a:	0021      	movs	r1, r4
 801f95c:	1c5a      	adds	r2, r3, #1
 801f95e:	3145      	adds	r1, #69	@ 0x45
 801f960:	7809      	ldrb	r1, [r1, #0]
 801f962:	18a2      	adds	r2, r4, r2
 801f964:	3243      	adds	r2, #67	@ 0x43
 801f966:	3302      	adds	r3, #2
 801f968:	7011      	strb	r1, [r2, #0]
 801f96a:	e7c1      	b.n	801f8f0 <_printf_common+0x4c>
 801f96c:	0022      	movs	r2, r4
 801f96e:	2301      	movs	r3, #1
 801f970:	9901      	ldr	r1, [sp, #4]
 801f972:	9800      	ldr	r0, [sp, #0]
 801f974:	9f08      	ldr	r7, [sp, #32]
 801f976:	321a      	adds	r2, #26
 801f978:	47b8      	blx	r7
 801f97a:	3001      	adds	r0, #1
 801f97c:	d0e6      	beq.n	801f94c <_printf_common+0xa8>
 801f97e:	3601      	adds	r6, #1
 801f980:	e7d1      	b.n	801f926 <_printf_common+0x82>
	...

0801f984 <_printf_i>:
 801f984:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f986:	b08b      	sub	sp, #44	@ 0x2c
 801f988:	9206      	str	r2, [sp, #24]
 801f98a:	000a      	movs	r2, r1
 801f98c:	3243      	adds	r2, #67	@ 0x43
 801f98e:	9307      	str	r3, [sp, #28]
 801f990:	9005      	str	r0, [sp, #20]
 801f992:	9203      	str	r2, [sp, #12]
 801f994:	7e0a      	ldrb	r2, [r1, #24]
 801f996:	000c      	movs	r4, r1
 801f998:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f99a:	2a78      	cmp	r2, #120	@ 0x78
 801f99c:	d809      	bhi.n	801f9b2 <_printf_i+0x2e>
 801f99e:	2a62      	cmp	r2, #98	@ 0x62
 801f9a0:	d80b      	bhi.n	801f9ba <_printf_i+0x36>
 801f9a2:	2a00      	cmp	r2, #0
 801f9a4:	d100      	bne.n	801f9a8 <_printf_i+0x24>
 801f9a6:	e0bc      	b.n	801fb22 <_printf_i+0x19e>
 801f9a8:	497b      	ldr	r1, [pc, #492]	@ (801fb98 <_printf_i+0x214>)
 801f9aa:	9104      	str	r1, [sp, #16]
 801f9ac:	2a58      	cmp	r2, #88	@ 0x58
 801f9ae:	d100      	bne.n	801f9b2 <_printf_i+0x2e>
 801f9b0:	e090      	b.n	801fad4 <_printf_i+0x150>
 801f9b2:	0025      	movs	r5, r4
 801f9b4:	3542      	adds	r5, #66	@ 0x42
 801f9b6:	702a      	strb	r2, [r5, #0]
 801f9b8:	e022      	b.n	801fa00 <_printf_i+0x7c>
 801f9ba:	0010      	movs	r0, r2
 801f9bc:	3863      	subs	r0, #99	@ 0x63
 801f9be:	2815      	cmp	r0, #21
 801f9c0:	d8f7      	bhi.n	801f9b2 <_printf_i+0x2e>
 801f9c2:	f7e0 fbe5 	bl	8000190 <__gnu_thumb1_case_shi>
 801f9c6:	0016      	.short	0x0016
 801f9c8:	fff6001f 	.word	0xfff6001f
 801f9cc:	fff6fff6 	.word	0xfff6fff6
 801f9d0:	001ffff6 	.word	0x001ffff6
 801f9d4:	fff6fff6 	.word	0xfff6fff6
 801f9d8:	fff6fff6 	.word	0xfff6fff6
 801f9dc:	003600a1 	.word	0x003600a1
 801f9e0:	fff60080 	.word	0xfff60080
 801f9e4:	00b2fff6 	.word	0x00b2fff6
 801f9e8:	0036fff6 	.word	0x0036fff6
 801f9ec:	fff6fff6 	.word	0xfff6fff6
 801f9f0:	0084      	.short	0x0084
 801f9f2:	0025      	movs	r5, r4
 801f9f4:	681a      	ldr	r2, [r3, #0]
 801f9f6:	3542      	adds	r5, #66	@ 0x42
 801f9f8:	1d11      	adds	r1, r2, #4
 801f9fa:	6019      	str	r1, [r3, #0]
 801f9fc:	6813      	ldr	r3, [r2, #0]
 801f9fe:	702b      	strb	r3, [r5, #0]
 801fa00:	2301      	movs	r3, #1
 801fa02:	e0a0      	b.n	801fb46 <_printf_i+0x1c2>
 801fa04:	6818      	ldr	r0, [r3, #0]
 801fa06:	6809      	ldr	r1, [r1, #0]
 801fa08:	1d02      	adds	r2, r0, #4
 801fa0a:	060d      	lsls	r5, r1, #24
 801fa0c:	d50b      	bpl.n	801fa26 <_printf_i+0xa2>
 801fa0e:	6806      	ldr	r6, [r0, #0]
 801fa10:	601a      	str	r2, [r3, #0]
 801fa12:	2e00      	cmp	r6, #0
 801fa14:	da03      	bge.n	801fa1e <_printf_i+0x9a>
 801fa16:	232d      	movs	r3, #45	@ 0x2d
 801fa18:	9a03      	ldr	r2, [sp, #12]
 801fa1a:	4276      	negs	r6, r6
 801fa1c:	7013      	strb	r3, [r2, #0]
 801fa1e:	4b5e      	ldr	r3, [pc, #376]	@ (801fb98 <_printf_i+0x214>)
 801fa20:	270a      	movs	r7, #10
 801fa22:	9304      	str	r3, [sp, #16]
 801fa24:	e018      	b.n	801fa58 <_printf_i+0xd4>
 801fa26:	6806      	ldr	r6, [r0, #0]
 801fa28:	601a      	str	r2, [r3, #0]
 801fa2a:	0649      	lsls	r1, r1, #25
 801fa2c:	d5f1      	bpl.n	801fa12 <_printf_i+0x8e>
 801fa2e:	b236      	sxth	r6, r6
 801fa30:	e7ef      	b.n	801fa12 <_printf_i+0x8e>
 801fa32:	6808      	ldr	r0, [r1, #0]
 801fa34:	6819      	ldr	r1, [r3, #0]
 801fa36:	c940      	ldmia	r1!, {r6}
 801fa38:	0605      	lsls	r5, r0, #24
 801fa3a:	d402      	bmi.n	801fa42 <_printf_i+0xbe>
 801fa3c:	0640      	lsls	r0, r0, #25
 801fa3e:	d500      	bpl.n	801fa42 <_printf_i+0xbe>
 801fa40:	b2b6      	uxth	r6, r6
 801fa42:	6019      	str	r1, [r3, #0]
 801fa44:	4b54      	ldr	r3, [pc, #336]	@ (801fb98 <_printf_i+0x214>)
 801fa46:	270a      	movs	r7, #10
 801fa48:	9304      	str	r3, [sp, #16]
 801fa4a:	2a6f      	cmp	r2, #111	@ 0x6f
 801fa4c:	d100      	bne.n	801fa50 <_printf_i+0xcc>
 801fa4e:	3f02      	subs	r7, #2
 801fa50:	0023      	movs	r3, r4
 801fa52:	2200      	movs	r2, #0
 801fa54:	3343      	adds	r3, #67	@ 0x43
 801fa56:	701a      	strb	r2, [r3, #0]
 801fa58:	6863      	ldr	r3, [r4, #4]
 801fa5a:	60a3      	str	r3, [r4, #8]
 801fa5c:	2b00      	cmp	r3, #0
 801fa5e:	db03      	blt.n	801fa68 <_printf_i+0xe4>
 801fa60:	2104      	movs	r1, #4
 801fa62:	6822      	ldr	r2, [r4, #0]
 801fa64:	438a      	bics	r2, r1
 801fa66:	6022      	str	r2, [r4, #0]
 801fa68:	2e00      	cmp	r6, #0
 801fa6a:	d102      	bne.n	801fa72 <_printf_i+0xee>
 801fa6c:	9d03      	ldr	r5, [sp, #12]
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d00c      	beq.n	801fa8c <_printf_i+0x108>
 801fa72:	9d03      	ldr	r5, [sp, #12]
 801fa74:	0030      	movs	r0, r6
 801fa76:	0039      	movs	r1, r7
 801fa78:	f7e0 fc1a 	bl	80002b0 <__aeabi_uidivmod>
 801fa7c:	9b04      	ldr	r3, [sp, #16]
 801fa7e:	3d01      	subs	r5, #1
 801fa80:	5c5b      	ldrb	r3, [r3, r1]
 801fa82:	702b      	strb	r3, [r5, #0]
 801fa84:	0033      	movs	r3, r6
 801fa86:	0006      	movs	r6, r0
 801fa88:	429f      	cmp	r7, r3
 801fa8a:	d9f3      	bls.n	801fa74 <_printf_i+0xf0>
 801fa8c:	2f08      	cmp	r7, #8
 801fa8e:	d109      	bne.n	801faa4 <_printf_i+0x120>
 801fa90:	6823      	ldr	r3, [r4, #0]
 801fa92:	07db      	lsls	r3, r3, #31
 801fa94:	d506      	bpl.n	801faa4 <_printf_i+0x120>
 801fa96:	6862      	ldr	r2, [r4, #4]
 801fa98:	6923      	ldr	r3, [r4, #16]
 801fa9a:	429a      	cmp	r2, r3
 801fa9c:	dc02      	bgt.n	801faa4 <_printf_i+0x120>
 801fa9e:	2330      	movs	r3, #48	@ 0x30
 801faa0:	3d01      	subs	r5, #1
 801faa2:	702b      	strb	r3, [r5, #0]
 801faa4:	9b03      	ldr	r3, [sp, #12]
 801faa6:	1b5b      	subs	r3, r3, r5
 801faa8:	6123      	str	r3, [r4, #16]
 801faaa:	9b07      	ldr	r3, [sp, #28]
 801faac:	0021      	movs	r1, r4
 801faae:	9300      	str	r3, [sp, #0]
 801fab0:	9805      	ldr	r0, [sp, #20]
 801fab2:	9b06      	ldr	r3, [sp, #24]
 801fab4:	aa09      	add	r2, sp, #36	@ 0x24
 801fab6:	f7ff fef5 	bl	801f8a4 <_printf_common>
 801faba:	3001      	adds	r0, #1
 801fabc:	d148      	bne.n	801fb50 <_printf_i+0x1cc>
 801fabe:	2001      	movs	r0, #1
 801fac0:	4240      	negs	r0, r0
 801fac2:	b00b      	add	sp, #44	@ 0x2c
 801fac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fac6:	2220      	movs	r2, #32
 801fac8:	6809      	ldr	r1, [r1, #0]
 801faca:	430a      	orrs	r2, r1
 801facc:	6022      	str	r2, [r4, #0]
 801face:	2278      	movs	r2, #120	@ 0x78
 801fad0:	4932      	ldr	r1, [pc, #200]	@ (801fb9c <_printf_i+0x218>)
 801fad2:	9104      	str	r1, [sp, #16]
 801fad4:	0021      	movs	r1, r4
 801fad6:	3145      	adds	r1, #69	@ 0x45
 801fad8:	700a      	strb	r2, [r1, #0]
 801fada:	6819      	ldr	r1, [r3, #0]
 801fadc:	6822      	ldr	r2, [r4, #0]
 801fade:	c940      	ldmia	r1!, {r6}
 801fae0:	0610      	lsls	r0, r2, #24
 801fae2:	d402      	bmi.n	801faea <_printf_i+0x166>
 801fae4:	0650      	lsls	r0, r2, #25
 801fae6:	d500      	bpl.n	801faea <_printf_i+0x166>
 801fae8:	b2b6      	uxth	r6, r6
 801faea:	6019      	str	r1, [r3, #0]
 801faec:	07d3      	lsls	r3, r2, #31
 801faee:	d502      	bpl.n	801faf6 <_printf_i+0x172>
 801faf0:	2320      	movs	r3, #32
 801faf2:	4313      	orrs	r3, r2
 801faf4:	6023      	str	r3, [r4, #0]
 801faf6:	2e00      	cmp	r6, #0
 801faf8:	d001      	beq.n	801fafe <_printf_i+0x17a>
 801fafa:	2710      	movs	r7, #16
 801fafc:	e7a8      	b.n	801fa50 <_printf_i+0xcc>
 801fafe:	2220      	movs	r2, #32
 801fb00:	6823      	ldr	r3, [r4, #0]
 801fb02:	4393      	bics	r3, r2
 801fb04:	6023      	str	r3, [r4, #0]
 801fb06:	e7f8      	b.n	801fafa <_printf_i+0x176>
 801fb08:	681a      	ldr	r2, [r3, #0]
 801fb0a:	680d      	ldr	r5, [r1, #0]
 801fb0c:	1d10      	adds	r0, r2, #4
 801fb0e:	6949      	ldr	r1, [r1, #20]
 801fb10:	6018      	str	r0, [r3, #0]
 801fb12:	6813      	ldr	r3, [r2, #0]
 801fb14:	062e      	lsls	r6, r5, #24
 801fb16:	d501      	bpl.n	801fb1c <_printf_i+0x198>
 801fb18:	6019      	str	r1, [r3, #0]
 801fb1a:	e002      	b.n	801fb22 <_printf_i+0x19e>
 801fb1c:	066d      	lsls	r5, r5, #25
 801fb1e:	d5fb      	bpl.n	801fb18 <_printf_i+0x194>
 801fb20:	8019      	strh	r1, [r3, #0]
 801fb22:	2300      	movs	r3, #0
 801fb24:	9d03      	ldr	r5, [sp, #12]
 801fb26:	6123      	str	r3, [r4, #16]
 801fb28:	e7bf      	b.n	801faaa <_printf_i+0x126>
 801fb2a:	681a      	ldr	r2, [r3, #0]
 801fb2c:	1d11      	adds	r1, r2, #4
 801fb2e:	6019      	str	r1, [r3, #0]
 801fb30:	6815      	ldr	r5, [r2, #0]
 801fb32:	2100      	movs	r1, #0
 801fb34:	0028      	movs	r0, r5
 801fb36:	6862      	ldr	r2, [r4, #4]
 801fb38:	f000 fb7b 	bl	8020232 <memchr>
 801fb3c:	2800      	cmp	r0, #0
 801fb3e:	d001      	beq.n	801fb44 <_printf_i+0x1c0>
 801fb40:	1b40      	subs	r0, r0, r5
 801fb42:	6060      	str	r0, [r4, #4]
 801fb44:	6863      	ldr	r3, [r4, #4]
 801fb46:	6123      	str	r3, [r4, #16]
 801fb48:	2300      	movs	r3, #0
 801fb4a:	9a03      	ldr	r2, [sp, #12]
 801fb4c:	7013      	strb	r3, [r2, #0]
 801fb4e:	e7ac      	b.n	801faaa <_printf_i+0x126>
 801fb50:	002a      	movs	r2, r5
 801fb52:	6923      	ldr	r3, [r4, #16]
 801fb54:	9906      	ldr	r1, [sp, #24]
 801fb56:	9805      	ldr	r0, [sp, #20]
 801fb58:	9d07      	ldr	r5, [sp, #28]
 801fb5a:	47a8      	blx	r5
 801fb5c:	3001      	adds	r0, #1
 801fb5e:	d0ae      	beq.n	801fabe <_printf_i+0x13a>
 801fb60:	6823      	ldr	r3, [r4, #0]
 801fb62:	079b      	lsls	r3, r3, #30
 801fb64:	d415      	bmi.n	801fb92 <_printf_i+0x20e>
 801fb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb68:	68e0      	ldr	r0, [r4, #12]
 801fb6a:	4298      	cmp	r0, r3
 801fb6c:	daa9      	bge.n	801fac2 <_printf_i+0x13e>
 801fb6e:	0018      	movs	r0, r3
 801fb70:	e7a7      	b.n	801fac2 <_printf_i+0x13e>
 801fb72:	0022      	movs	r2, r4
 801fb74:	2301      	movs	r3, #1
 801fb76:	9906      	ldr	r1, [sp, #24]
 801fb78:	9805      	ldr	r0, [sp, #20]
 801fb7a:	9e07      	ldr	r6, [sp, #28]
 801fb7c:	3219      	adds	r2, #25
 801fb7e:	47b0      	blx	r6
 801fb80:	3001      	adds	r0, #1
 801fb82:	d09c      	beq.n	801fabe <_printf_i+0x13a>
 801fb84:	3501      	adds	r5, #1
 801fb86:	68e3      	ldr	r3, [r4, #12]
 801fb88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fb8a:	1a9b      	subs	r3, r3, r2
 801fb8c:	42ab      	cmp	r3, r5
 801fb8e:	dcf0      	bgt.n	801fb72 <_printf_i+0x1ee>
 801fb90:	e7e9      	b.n	801fb66 <_printf_i+0x1e2>
 801fb92:	2500      	movs	r5, #0
 801fb94:	e7f7      	b.n	801fb86 <_printf_i+0x202>
 801fb96:	46c0      	nop			@ (mov r8, r8)
 801fb98:	08025bb3 	.word	0x08025bb3
 801fb9c:	08025bc4 	.word	0x08025bc4

0801fba0 <std>:
 801fba0:	2300      	movs	r3, #0
 801fba2:	b510      	push	{r4, lr}
 801fba4:	0004      	movs	r4, r0
 801fba6:	6003      	str	r3, [r0, #0]
 801fba8:	6043      	str	r3, [r0, #4]
 801fbaa:	6083      	str	r3, [r0, #8]
 801fbac:	8181      	strh	r1, [r0, #12]
 801fbae:	6643      	str	r3, [r0, #100]	@ 0x64
 801fbb0:	81c2      	strh	r2, [r0, #14]
 801fbb2:	6103      	str	r3, [r0, #16]
 801fbb4:	6143      	str	r3, [r0, #20]
 801fbb6:	6183      	str	r3, [r0, #24]
 801fbb8:	0019      	movs	r1, r3
 801fbba:	2208      	movs	r2, #8
 801fbbc:	305c      	adds	r0, #92	@ 0x5c
 801fbbe:	f000 fa67 	bl	8020090 <memset>
 801fbc2:	4b0b      	ldr	r3, [pc, #44]	@ (801fbf0 <std+0x50>)
 801fbc4:	6224      	str	r4, [r4, #32]
 801fbc6:	6263      	str	r3, [r4, #36]	@ 0x24
 801fbc8:	4b0a      	ldr	r3, [pc, #40]	@ (801fbf4 <std+0x54>)
 801fbca:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fbcc:	4b0a      	ldr	r3, [pc, #40]	@ (801fbf8 <std+0x58>)
 801fbce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fbd0:	4b0a      	ldr	r3, [pc, #40]	@ (801fbfc <std+0x5c>)
 801fbd2:	6323      	str	r3, [r4, #48]	@ 0x30
 801fbd4:	4b0a      	ldr	r3, [pc, #40]	@ (801fc00 <std+0x60>)
 801fbd6:	429c      	cmp	r4, r3
 801fbd8:	d005      	beq.n	801fbe6 <std+0x46>
 801fbda:	4b0a      	ldr	r3, [pc, #40]	@ (801fc04 <std+0x64>)
 801fbdc:	429c      	cmp	r4, r3
 801fbde:	d002      	beq.n	801fbe6 <std+0x46>
 801fbe0:	4b09      	ldr	r3, [pc, #36]	@ (801fc08 <std+0x68>)
 801fbe2:	429c      	cmp	r4, r3
 801fbe4:	d103      	bne.n	801fbee <std+0x4e>
 801fbe6:	0020      	movs	r0, r4
 801fbe8:	3058      	adds	r0, #88	@ 0x58
 801fbea:	f000 fb1f 	bl	802022c <__retarget_lock_init_recursive>
 801fbee:	bd10      	pop	{r4, pc}
 801fbf0:	0801fe49 	.word	0x0801fe49
 801fbf4:	0801fe71 	.word	0x0801fe71
 801fbf8:	0801fea9 	.word	0x0801fea9
 801fbfc:	0801fed5 	.word	0x0801fed5
 801fc00:	20003860 	.word	0x20003860
 801fc04:	200038c8 	.word	0x200038c8
 801fc08:	20003930 	.word	0x20003930

0801fc0c <stdio_exit_handler>:
 801fc0c:	b510      	push	{r4, lr}
 801fc0e:	4a03      	ldr	r2, [pc, #12]	@ (801fc1c <stdio_exit_handler+0x10>)
 801fc10:	4903      	ldr	r1, [pc, #12]	@ (801fc20 <stdio_exit_handler+0x14>)
 801fc12:	4804      	ldr	r0, [pc, #16]	@ (801fc24 <stdio_exit_handler+0x18>)
 801fc14:	f000 f86c 	bl	801fcf0 <_fwalk_sglue>
 801fc18:	bd10      	pop	{r4, pc}
 801fc1a:	46c0      	nop			@ (mov r8, r8)
 801fc1c:	20000254 	.word	0x20000254
 801fc20:	08022851 	.word	0x08022851
 801fc24:	200003d0 	.word	0x200003d0

0801fc28 <cleanup_stdio>:
 801fc28:	6841      	ldr	r1, [r0, #4]
 801fc2a:	4b0b      	ldr	r3, [pc, #44]	@ (801fc58 <cleanup_stdio+0x30>)
 801fc2c:	b510      	push	{r4, lr}
 801fc2e:	0004      	movs	r4, r0
 801fc30:	4299      	cmp	r1, r3
 801fc32:	d001      	beq.n	801fc38 <cleanup_stdio+0x10>
 801fc34:	f002 fe0c 	bl	8022850 <_fflush_r>
 801fc38:	68a1      	ldr	r1, [r4, #8]
 801fc3a:	4b08      	ldr	r3, [pc, #32]	@ (801fc5c <cleanup_stdio+0x34>)
 801fc3c:	4299      	cmp	r1, r3
 801fc3e:	d002      	beq.n	801fc46 <cleanup_stdio+0x1e>
 801fc40:	0020      	movs	r0, r4
 801fc42:	f002 fe05 	bl	8022850 <_fflush_r>
 801fc46:	68e1      	ldr	r1, [r4, #12]
 801fc48:	4b05      	ldr	r3, [pc, #20]	@ (801fc60 <cleanup_stdio+0x38>)
 801fc4a:	4299      	cmp	r1, r3
 801fc4c:	d002      	beq.n	801fc54 <cleanup_stdio+0x2c>
 801fc4e:	0020      	movs	r0, r4
 801fc50:	f002 fdfe 	bl	8022850 <_fflush_r>
 801fc54:	bd10      	pop	{r4, pc}
 801fc56:	46c0      	nop			@ (mov r8, r8)
 801fc58:	20003860 	.word	0x20003860
 801fc5c:	200038c8 	.word	0x200038c8
 801fc60:	20003930 	.word	0x20003930

0801fc64 <global_stdio_init.part.0>:
 801fc64:	b510      	push	{r4, lr}
 801fc66:	4b09      	ldr	r3, [pc, #36]	@ (801fc8c <global_stdio_init.part.0+0x28>)
 801fc68:	4a09      	ldr	r2, [pc, #36]	@ (801fc90 <global_stdio_init.part.0+0x2c>)
 801fc6a:	2104      	movs	r1, #4
 801fc6c:	601a      	str	r2, [r3, #0]
 801fc6e:	4809      	ldr	r0, [pc, #36]	@ (801fc94 <global_stdio_init.part.0+0x30>)
 801fc70:	2200      	movs	r2, #0
 801fc72:	f7ff ff95 	bl	801fba0 <std>
 801fc76:	2201      	movs	r2, #1
 801fc78:	2109      	movs	r1, #9
 801fc7a:	4807      	ldr	r0, [pc, #28]	@ (801fc98 <global_stdio_init.part.0+0x34>)
 801fc7c:	f7ff ff90 	bl	801fba0 <std>
 801fc80:	2202      	movs	r2, #2
 801fc82:	2112      	movs	r1, #18
 801fc84:	4805      	ldr	r0, [pc, #20]	@ (801fc9c <global_stdio_init.part.0+0x38>)
 801fc86:	f7ff ff8b 	bl	801fba0 <std>
 801fc8a:	bd10      	pop	{r4, pc}
 801fc8c:	20003998 	.word	0x20003998
 801fc90:	0801fc0d 	.word	0x0801fc0d
 801fc94:	20003860 	.word	0x20003860
 801fc98:	200038c8 	.word	0x200038c8
 801fc9c:	20003930 	.word	0x20003930

0801fca0 <__sfp_lock_acquire>:
 801fca0:	b510      	push	{r4, lr}
 801fca2:	4802      	ldr	r0, [pc, #8]	@ (801fcac <__sfp_lock_acquire+0xc>)
 801fca4:	f000 fac3 	bl	802022e <__retarget_lock_acquire_recursive>
 801fca8:	bd10      	pop	{r4, pc}
 801fcaa:	46c0      	nop			@ (mov r8, r8)
 801fcac:	200039a1 	.word	0x200039a1

0801fcb0 <__sfp_lock_release>:
 801fcb0:	b510      	push	{r4, lr}
 801fcb2:	4802      	ldr	r0, [pc, #8]	@ (801fcbc <__sfp_lock_release+0xc>)
 801fcb4:	f000 fabc 	bl	8020230 <__retarget_lock_release_recursive>
 801fcb8:	bd10      	pop	{r4, pc}
 801fcba:	46c0      	nop			@ (mov r8, r8)
 801fcbc:	200039a1 	.word	0x200039a1

0801fcc0 <__sinit>:
 801fcc0:	b510      	push	{r4, lr}
 801fcc2:	0004      	movs	r4, r0
 801fcc4:	f7ff ffec 	bl	801fca0 <__sfp_lock_acquire>
 801fcc8:	6a23      	ldr	r3, [r4, #32]
 801fcca:	2b00      	cmp	r3, #0
 801fccc:	d002      	beq.n	801fcd4 <__sinit+0x14>
 801fcce:	f7ff ffef 	bl	801fcb0 <__sfp_lock_release>
 801fcd2:	bd10      	pop	{r4, pc}
 801fcd4:	4b04      	ldr	r3, [pc, #16]	@ (801fce8 <__sinit+0x28>)
 801fcd6:	6223      	str	r3, [r4, #32]
 801fcd8:	4b04      	ldr	r3, [pc, #16]	@ (801fcec <__sinit+0x2c>)
 801fcda:	681b      	ldr	r3, [r3, #0]
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	d1f6      	bne.n	801fcce <__sinit+0xe>
 801fce0:	f7ff ffc0 	bl	801fc64 <global_stdio_init.part.0>
 801fce4:	e7f3      	b.n	801fcce <__sinit+0xe>
 801fce6:	46c0      	nop			@ (mov r8, r8)
 801fce8:	0801fc29 	.word	0x0801fc29
 801fcec:	20003998 	.word	0x20003998

0801fcf0 <_fwalk_sglue>:
 801fcf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fcf2:	0014      	movs	r4, r2
 801fcf4:	2600      	movs	r6, #0
 801fcf6:	9000      	str	r0, [sp, #0]
 801fcf8:	9101      	str	r1, [sp, #4]
 801fcfa:	68a5      	ldr	r5, [r4, #8]
 801fcfc:	6867      	ldr	r7, [r4, #4]
 801fcfe:	3f01      	subs	r7, #1
 801fd00:	d504      	bpl.n	801fd0c <_fwalk_sglue+0x1c>
 801fd02:	6824      	ldr	r4, [r4, #0]
 801fd04:	2c00      	cmp	r4, #0
 801fd06:	d1f8      	bne.n	801fcfa <_fwalk_sglue+0xa>
 801fd08:	0030      	movs	r0, r6
 801fd0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fd0c:	89ab      	ldrh	r3, [r5, #12]
 801fd0e:	2b01      	cmp	r3, #1
 801fd10:	d908      	bls.n	801fd24 <_fwalk_sglue+0x34>
 801fd12:	220e      	movs	r2, #14
 801fd14:	5eab      	ldrsh	r3, [r5, r2]
 801fd16:	3301      	adds	r3, #1
 801fd18:	d004      	beq.n	801fd24 <_fwalk_sglue+0x34>
 801fd1a:	0029      	movs	r1, r5
 801fd1c:	9800      	ldr	r0, [sp, #0]
 801fd1e:	9b01      	ldr	r3, [sp, #4]
 801fd20:	4798      	blx	r3
 801fd22:	4306      	orrs	r6, r0
 801fd24:	3568      	adds	r5, #104	@ 0x68
 801fd26:	e7ea      	b.n	801fcfe <_fwalk_sglue+0xe>

0801fd28 <iprintf>:
 801fd28:	b40f      	push	{r0, r1, r2, r3}
 801fd2a:	b507      	push	{r0, r1, r2, lr}
 801fd2c:	4905      	ldr	r1, [pc, #20]	@ (801fd44 <iprintf+0x1c>)
 801fd2e:	ab04      	add	r3, sp, #16
 801fd30:	6808      	ldr	r0, [r1, #0]
 801fd32:	cb04      	ldmia	r3!, {r2}
 801fd34:	6881      	ldr	r1, [r0, #8]
 801fd36:	9301      	str	r3, [sp, #4]
 801fd38:	f002 fbe8 	bl	802250c <_vfiprintf_r>
 801fd3c:	b003      	add	sp, #12
 801fd3e:	bc08      	pop	{r3}
 801fd40:	b004      	add	sp, #16
 801fd42:	4718      	bx	r3
 801fd44:	200003cc 	.word	0x200003cc

0801fd48 <_puts_r>:
 801fd48:	6a03      	ldr	r3, [r0, #32]
 801fd4a:	b570      	push	{r4, r5, r6, lr}
 801fd4c:	0005      	movs	r5, r0
 801fd4e:	000e      	movs	r6, r1
 801fd50:	6884      	ldr	r4, [r0, #8]
 801fd52:	2b00      	cmp	r3, #0
 801fd54:	d101      	bne.n	801fd5a <_puts_r+0x12>
 801fd56:	f7ff ffb3 	bl	801fcc0 <__sinit>
 801fd5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fd5c:	07db      	lsls	r3, r3, #31
 801fd5e:	d405      	bmi.n	801fd6c <_puts_r+0x24>
 801fd60:	89a3      	ldrh	r3, [r4, #12]
 801fd62:	059b      	lsls	r3, r3, #22
 801fd64:	d402      	bmi.n	801fd6c <_puts_r+0x24>
 801fd66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fd68:	f000 fa61 	bl	802022e <__retarget_lock_acquire_recursive>
 801fd6c:	89a3      	ldrh	r3, [r4, #12]
 801fd6e:	071b      	lsls	r3, r3, #28
 801fd70:	d502      	bpl.n	801fd78 <_puts_r+0x30>
 801fd72:	6923      	ldr	r3, [r4, #16]
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	d11f      	bne.n	801fdb8 <_puts_r+0x70>
 801fd78:	0021      	movs	r1, r4
 801fd7a:	0028      	movs	r0, r5
 801fd7c:	f000 f92a 	bl	801ffd4 <__swsetup_r>
 801fd80:	2800      	cmp	r0, #0
 801fd82:	d019      	beq.n	801fdb8 <_puts_r+0x70>
 801fd84:	2501      	movs	r5, #1
 801fd86:	426d      	negs	r5, r5
 801fd88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fd8a:	07db      	lsls	r3, r3, #31
 801fd8c:	d405      	bmi.n	801fd9a <_puts_r+0x52>
 801fd8e:	89a3      	ldrh	r3, [r4, #12]
 801fd90:	059b      	lsls	r3, r3, #22
 801fd92:	d402      	bmi.n	801fd9a <_puts_r+0x52>
 801fd94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fd96:	f000 fa4b 	bl	8020230 <__retarget_lock_release_recursive>
 801fd9a:	0028      	movs	r0, r5
 801fd9c:	bd70      	pop	{r4, r5, r6, pc}
 801fd9e:	3601      	adds	r6, #1
 801fda0:	60a3      	str	r3, [r4, #8]
 801fda2:	2b00      	cmp	r3, #0
 801fda4:	da04      	bge.n	801fdb0 <_puts_r+0x68>
 801fda6:	69a2      	ldr	r2, [r4, #24]
 801fda8:	429a      	cmp	r2, r3
 801fdaa:	dc16      	bgt.n	801fdda <_puts_r+0x92>
 801fdac:	290a      	cmp	r1, #10
 801fdae:	d014      	beq.n	801fdda <_puts_r+0x92>
 801fdb0:	6823      	ldr	r3, [r4, #0]
 801fdb2:	1c5a      	adds	r2, r3, #1
 801fdb4:	6022      	str	r2, [r4, #0]
 801fdb6:	7019      	strb	r1, [r3, #0]
 801fdb8:	68a3      	ldr	r3, [r4, #8]
 801fdba:	7831      	ldrb	r1, [r6, #0]
 801fdbc:	3b01      	subs	r3, #1
 801fdbe:	2900      	cmp	r1, #0
 801fdc0:	d1ed      	bne.n	801fd9e <_puts_r+0x56>
 801fdc2:	60a3      	str	r3, [r4, #8]
 801fdc4:	2b00      	cmp	r3, #0
 801fdc6:	da0f      	bge.n	801fde8 <_puts_r+0xa0>
 801fdc8:	0022      	movs	r2, r4
 801fdca:	0028      	movs	r0, r5
 801fdcc:	310a      	adds	r1, #10
 801fdce:	f000 f8bf 	bl	801ff50 <__swbuf_r>
 801fdd2:	3001      	adds	r0, #1
 801fdd4:	d0d6      	beq.n	801fd84 <_puts_r+0x3c>
 801fdd6:	250a      	movs	r5, #10
 801fdd8:	e7d6      	b.n	801fd88 <_puts_r+0x40>
 801fdda:	0022      	movs	r2, r4
 801fddc:	0028      	movs	r0, r5
 801fdde:	f000 f8b7 	bl	801ff50 <__swbuf_r>
 801fde2:	3001      	adds	r0, #1
 801fde4:	d1e8      	bne.n	801fdb8 <_puts_r+0x70>
 801fde6:	e7cd      	b.n	801fd84 <_puts_r+0x3c>
 801fde8:	6823      	ldr	r3, [r4, #0]
 801fdea:	1c5a      	adds	r2, r3, #1
 801fdec:	6022      	str	r2, [r4, #0]
 801fdee:	220a      	movs	r2, #10
 801fdf0:	701a      	strb	r2, [r3, #0]
 801fdf2:	e7f0      	b.n	801fdd6 <_puts_r+0x8e>

0801fdf4 <puts>:
 801fdf4:	b510      	push	{r4, lr}
 801fdf6:	4b03      	ldr	r3, [pc, #12]	@ (801fe04 <puts+0x10>)
 801fdf8:	0001      	movs	r1, r0
 801fdfa:	6818      	ldr	r0, [r3, #0]
 801fdfc:	f7ff ffa4 	bl	801fd48 <_puts_r>
 801fe00:	bd10      	pop	{r4, pc}
 801fe02:	46c0      	nop			@ (mov r8, r8)
 801fe04:	200003cc 	.word	0x200003cc

0801fe08 <siprintf>:
 801fe08:	b40e      	push	{r1, r2, r3}
 801fe0a:	b500      	push	{lr}
 801fe0c:	490b      	ldr	r1, [pc, #44]	@ (801fe3c <siprintf+0x34>)
 801fe0e:	b09c      	sub	sp, #112	@ 0x70
 801fe10:	ab1d      	add	r3, sp, #116	@ 0x74
 801fe12:	9002      	str	r0, [sp, #8]
 801fe14:	9006      	str	r0, [sp, #24]
 801fe16:	9107      	str	r1, [sp, #28]
 801fe18:	9104      	str	r1, [sp, #16]
 801fe1a:	4809      	ldr	r0, [pc, #36]	@ (801fe40 <siprintf+0x38>)
 801fe1c:	4909      	ldr	r1, [pc, #36]	@ (801fe44 <siprintf+0x3c>)
 801fe1e:	cb04      	ldmia	r3!, {r2}
 801fe20:	9105      	str	r1, [sp, #20]
 801fe22:	6800      	ldr	r0, [r0, #0]
 801fe24:	a902      	add	r1, sp, #8
 801fe26:	9301      	str	r3, [sp, #4]
 801fe28:	f002 fa4a 	bl	80222c0 <_svfiprintf_r>
 801fe2c:	2200      	movs	r2, #0
 801fe2e:	9b02      	ldr	r3, [sp, #8]
 801fe30:	701a      	strb	r2, [r3, #0]
 801fe32:	b01c      	add	sp, #112	@ 0x70
 801fe34:	bc08      	pop	{r3}
 801fe36:	b003      	add	sp, #12
 801fe38:	4718      	bx	r3
 801fe3a:	46c0      	nop			@ (mov r8, r8)
 801fe3c:	7fffffff 	.word	0x7fffffff
 801fe40:	200003cc 	.word	0x200003cc
 801fe44:	ffff0208 	.word	0xffff0208

0801fe48 <__sread>:
 801fe48:	b570      	push	{r4, r5, r6, lr}
 801fe4a:	000c      	movs	r4, r1
 801fe4c:	250e      	movs	r5, #14
 801fe4e:	5f49      	ldrsh	r1, [r1, r5]
 801fe50:	f000 f99a 	bl	8020188 <_read_r>
 801fe54:	2800      	cmp	r0, #0
 801fe56:	db03      	blt.n	801fe60 <__sread+0x18>
 801fe58:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801fe5a:	181b      	adds	r3, r3, r0
 801fe5c:	6563      	str	r3, [r4, #84]	@ 0x54
 801fe5e:	bd70      	pop	{r4, r5, r6, pc}
 801fe60:	89a3      	ldrh	r3, [r4, #12]
 801fe62:	4a02      	ldr	r2, [pc, #8]	@ (801fe6c <__sread+0x24>)
 801fe64:	4013      	ands	r3, r2
 801fe66:	81a3      	strh	r3, [r4, #12]
 801fe68:	e7f9      	b.n	801fe5e <__sread+0x16>
 801fe6a:	46c0      	nop			@ (mov r8, r8)
 801fe6c:	ffffefff 	.word	0xffffefff

0801fe70 <__swrite>:
 801fe70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe72:	001f      	movs	r7, r3
 801fe74:	898b      	ldrh	r3, [r1, #12]
 801fe76:	0005      	movs	r5, r0
 801fe78:	000c      	movs	r4, r1
 801fe7a:	0016      	movs	r6, r2
 801fe7c:	05db      	lsls	r3, r3, #23
 801fe7e:	d505      	bpl.n	801fe8c <__swrite+0x1c>
 801fe80:	230e      	movs	r3, #14
 801fe82:	5ec9      	ldrsh	r1, [r1, r3]
 801fe84:	2200      	movs	r2, #0
 801fe86:	2302      	movs	r3, #2
 801fe88:	f000 f96a 	bl	8020160 <_lseek_r>
 801fe8c:	89a3      	ldrh	r3, [r4, #12]
 801fe8e:	4a05      	ldr	r2, [pc, #20]	@ (801fea4 <__swrite+0x34>)
 801fe90:	0028      	movs	r0, r5
 801fe92:	4013      	ands	r3, r2
 801fe94:	81a3      	strh	r3, [r4, #12]
 801fe96:	0032      	movs	r2, r6
 801fe98:	230e      	movs	r3, #14
 801fe9a:	5ee1      	ldrsh	r1, [r4, r3]
 801fe9c:	003b      	movs	r3, r7
 801fe9e:	f000 f987 	bl	80201b0 <_write_r>
 801fea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fea4:	ffffefff 	.word	0xffffefff

0801fea8 <__sseek>:
 801fea8:	b570      	push	{r4, r5, r6, lr}
 801feaa:	000c      	movs	r4, r1
 801feac:	250e      	movs	r5, #14
 801feae:	5f49      	ldrsh	r1, [r1, r5]
 801feb0:	f000 f956 	bl	8020160 <_lseek_r>
 801feb4:	89a3      	ldrh	r3, [r4, #12]
 801feb6:	1c42      	adds	r2, r0, #1
 801feb8:	d103      	bne.n	801fec2 <__sseek+0x1a>
 801feba:	4a05      	ldr	r2, [pc, #20]	@ (801fed0 <__sseek+0x28>)
 801febc:	4013      	ands	r3, r2
 801febe:	81a3      	strh	r3, [r4, #12]
 801fec0:	bd70      	pop	{r4, r5, r6, pc}
 801fec2:	2280      	movs	r2, #128	@ 0x80
 801fec4:	0152      	lsls	r2, r2, #5
 801fec6:	4313      	orrs	r3, r2
 801fec8:	81a3      	strh	r3, [r4, #12]
 801feca:	6560      	str	r0, [r4, #84]	@ 0x54
 801fecc:	e7f8      	b.n	801fec0 <__sseek+0x18>
 801fece:	46c0      	nop			@ (mov r8, r8)
 801fed0:	ffffefff 	.word	0xffffefff

0801fed4 <__sclose>:
 801fed4:	b510      	push	{r4, lr}
 801fed6:	230e      	movs	r3, #14
 801fed8:	5ec9      	ldrsh	r1, [r1, r3]
 801feda:	f000 f92f 	bl	802013c <_close_r>
 801fede:	bd10      	pop	{r4, pc}

0801fee0 <_vsniprintf_r>:
 801fee0:	b530      	push	{r4, r5, lr}
 801fee2:	0014      	movs	r4, r2
 801fee4:	0005      	movs	r5, r0
 801fee6:	001a      	movs	r2, r3
 801fee8:	b09b      	sub	sp, #108	@ 0x6c
 801feea:	2c00      	cmp	r4, #0
 801feec:	da05      	bge.n	801fefa <_vsniprintf_r+0x1a>
 801feee:	238b      	movs	r3, #139	@ 0x8b
 801fef0:	6003      	str	r3, [r0, #0]
 801fef2:	2001      	movs	r0, #1
 801fef4:	4240      	negs	r0, r0
 801fef6:	b01b      	add	sp, #108	@ 0x6c
 801fef8:	bd30      	pop	{r4, r5, pc}
 801fefa:	2382      	movs	r3, #130	@ 0x82
 801fefc:	4668      	mov	r0, sp
 801fefe:	009b      	lsls	r3, r3, #2
 801ff00:	8183      	strh	r3, [r0, #12]
 801ff02:	2300      	movs	r3, #0
 801ff04:	9100      	str	r1, [sp, #0]
 801ff06:	9104      	str	r1, [sp, #16]
 801ff08:	429c      	cmp	r4, r3
 801ff0a:	d000      	beq.n	801ff0e <_vsniprintf_r+0x2e>
 801ff0c:	1e63      	subs	r3, r4, #1
 801ff0e:	9302      	str	r3, [sp, #8]
 801ff10:	9305      	str	r3, [sp, #20]
 801ff12:	2301      	movs	r3, #1
 801ff14:	4669      	mov	r1, sp
 801ff16:	425b      	negs	r3, r3
 801ff18:	81cb      	strh	r3, [r1, #14]
 801ff1a:	0028      	movs	r0, r5
 801ff1c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ff1e:	f002 f9cf 	bl	80222c0 <_svfiprintf_r>
 801ff22:	1c43      	adds	r3, r0, #1
 801ff24:	da01      	bge.n	801ff2a <_vsniprintf_r+0x4a>
 801ff26:	238b      	movs	r3, #139	@ 0x8b
 801ff28:	602b      	str	r3, [r5, #0]
 801ff2a:	2c00      	cmp	r4, #0
 801ff2c:	d0e3      	beq.n	801fef6 <_vsniprintf_r+0x16>
 801ff2e:	2200      	movs	r2, #0
 801ff30:	9b00      	ldr	r3, [sp, #0]
 801ff32:	701a      	strb	r2, [r3, #0]
 801ff34:	e7df      	b.n	801fef6 <_vsniprintf_r+0x16>
	...

0801ff38 <vsniprintf>:
 801ff38:	b513      	push	{r0, r1, r4, lr}
 801ff3a:	4c04      	ldr	r4, [pc, #16]	@ (801ff4c <vsniprintf+0x14>)
 801ff3c:	9300      	str	r3, [sp, #0]
 801ff3e:	0013      	movs	r3, r2
 801ff40:	000a      	movs	r2, r1
 801ff42:	0001      	movs	r1, r0
 801ff44:	6820      	ldr	r0, [r4, #0]
 801ff46:	f7ff ffcb 	bl	801fee0 <_vsniprintf_r>
 801ff4a:	bd16      	pop	{r1, r2, r4, pc}
 801ff4c:	200003cc 	.word	0x200003cc

0801ff50 <__swbuf_r>:
 801ff50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff52:	0006      	movs	r6, r0
 801ff54:	000d      	movs	r5, r1
 801ff56:	0014      	movs	r4, r2
 801ff58:	2800      	cmp	r0, #0
 801ff5a:	d004      	beq.n	801ff66 <__swbuf_r+0x16>
 801ff5c:	6a03      	ldr	r3, [r0, #32]
 801ff5e:	2b00      	cmp	r3, #0
 801ff60:	d101      	bne.n	801ff66 <__swbuf_r+0x16>
 801ff62:	f7ff fead 	bl	801fcc0 <__sinit>
 801ff66:	69a3      	ldr	r3, [r4, #24]
 801ff68:	60a3      	str	r3, [r4, #8]
 801ff6a:	89a3      	ldrh	r3, [r4, #12]
 801ff6c:	071b      	lsls	r3, r3, #28
 801ff6e:	d502      	bpl.n	801ff76 <__swbuf_r+0x26>
 801ff70:	6923      	ldr	r3, [r4, #16]
 801ff72:	2b00      	cmp	r3, #0
 801ff74:	d109      	bne.n	801ff8a <__swbuf_r+0x3a>
 801ff76:	0021      	movs	r1, r4
 801ff78:	0030      	movs	r0, r6
 801ff7a:	f000 f82b 	bl	801ffd4 <__swsetup_r>
 801ff7e:	2800      	cmp	r0, #0
 801ff80:	d003      	beq.n	801ff8a <__swbuf_r+0x3a>
 801ff82:	2501      	movs	r5, #1
 801ff84:	426d      	negs	r5, r5
 801ff86:	0028      	movs	r0, r5
 801ff88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff8a:	6923      	ldr	r3, [r4, #16]
 801ff8c:	6820      	ldr	r0, [r4, #0]
 801ff8e:	b2ef      	uxtb	r7, r5
 801ff90:	1ac0      	subs	r0, r0, r3
 801ff92:	6963      	ldr	r3, [r4, #20]
 801ff94:	b2ed      	uxtb	r5, r5
 801ff96:	4283      	cmp	r3, r0
 801ff98:	dc05      	bgt.n	801ffa6 <__swbuf_r+0x56>
 801ff9a:	0021      	movs	r1, r4
 801ff9c:	0030      	movs	r0, r6
 801ff9e:	f002 fc57 	bl	8022850 <_fflush_r>
 801ffa2:	2800      	cmp	r0, #0
 801ffa4:	d1ed      	bne.n	801ff82 <__swbuf_r+0x32>
 801ffa6:	68a3      	ldr	r3, [r4, #8]
 801ffa8:	3001      	adds	r0, #1
 801ffaa:	3b01      	subs	r3, #1
 801ffac:	60a3      	str	r3, [r4, #8]
 801ffae:	6823      	ldr	r3, [r4, #0]
 801ffb0:	1c5a      	adds	r2, r3, #1
 801ffb2:	6022      	str	r2, [r4, #0]
 801ffb4:	701f      	strb	r7, [r3, #0]
 801ffb6:	6963      	ldr	r3, [r4, #20]
 801ffb8:	4283      	cmp	r3, r0
 801ffba:	d004      	beq.n	801ffc6 <__swbuf_r+0x76>
 801ffbc:	89a3      	ldrh	r3, [r4, #12]
 801ffbe:	07db      	lsls	r3, r3, #31
 801ffc0:	d5e1      	bpl.n	801ff86 <__swbuf_r+0x36>
 801ffc2:	2d0a      	cmp	r5, #10
 801ffc4:	d1df      	bne.n	801ff86 <__swbuf_r+0x36>
 801ffc6:	0021      	movs	r1, r4
 801ffc8:	0030      	movs	r0, r6
 801ffca:	f002 fc41 	bl	8022850 <_fflush_r>
 801ffce:	2800      	cmp	r0, #0
 801ffd0:	d0d9      	beq.n	801ff86 <__swbuf_r+0x36>
 801ffd2:	e7d6      	b.n	801ff82 <__swbuf_r+0x32>

0801ffd4 <__swsetup_r>:
 801ffd4:	4b2d      	ldr	r3, [pc, #180]	@ (802008c <__swsetup_r+0xb8>)
 801ffd6:	b570      	push	{r4, r5, r6, lr}
 801ffd8:	0005      	movs	r5, r0
 801ffda:	6818      	ldr	r0, [r3, #0]
 801ffdc:	000c      	movs	r4, r1
 801ffde:	2800      	cmp	r0, #0
 801ffe0:	d004      	beq.n	801ffec <__swsetup_r+0x18>
 801ffe2:	6a03      	ldr	r3, [r0, #32]
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d101      	bne.n	801ffec <__swsetup_r+0x18>
 801ffe8:	f7ff fe6a 	bl	801fcc0 <__sinit>
 801ffec:	230c      	movs	r3, #12
 801ffee:	5ee2      	ldrsh	r2, [r4, r3]
 801fff0:	0713      	lsls	r3, r2, #28
 801fff2:	d423      	bmi.n	802003c <__swsetup_r+0x68>
 801fff4:	06d3      	lsls	r3, r2, #27
 801fff6:	d407      	bmi.n	8020008 <__swsetup_r+0x34>
 801fff8:	2309      	movs	r3, #9
 801fffa:	602b      	str	r3, [r5, #0]
 801fffc:	2340      	movs	r3, #64	@ 0x40
 801fffe:	2001      	movs	r0, #1
 8020000:	4313      	orrs	r3, r2
 8020002:	81a3      	strh	r3, [r4, #12]
 8020004:	4240      	negs	r0, r0
 8020006:	e03a      	b.n	802007e <__swsetup_r+0xaa>
 8020008:	0752      	lsls	r2, r2, #29
 802000a:	d513      	bpl.n	8020034 <__swsetup_r+0x60>
 802000c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802000e:	2900      	cmp	r1, #0
 8020010:	d008      	beq.n	8020024 <__swsetup_r+0x50>
 8020012:	0023      	movs	r3, r4
 8020014:	3344      	adds	r3, #68	@ 0x44
 8020016:	4299      	cmp	r1, r3
 8020018:	d002      	beq.n	8020020 <__swsetup_r+0x4c>
 802001a:	0028      	movs	r0, r5
 802001c:	f000 ffa6 	bl	8020f6c <_free_r>
 8020020:	2300      	movs	r3, #0
 8020022:	6363      	str	r3, [r4, #52]	@ 0x34
 8020024:	2224      	movs	r2, #36	@ 0x24
 8020026:	89a3      	ldrh	r3, [r4, #12]
 8020028:	4393      	bics	r3, r2
 802002a:	81a3      	strh	r3, [r4, #12]
 802002c:	2300      	movs	r3, #0
 802002e:	6063      	str	r3, [r4, #4]
 8020030:	6923      	ldr	r3, [r4, #16]
 8020032:	6023      	str	r3, [r4, #0]
 8020034:	2308      	movs	r3, #8
 8020036:	89a2      	ldrh	r2, [r4, #12]
 8020038:	4313      	orrs	r3, r2
 802003a:	81a3      	strh	r3, [r4, #12]
 802003c:	6923      	ldr	r3, [r4, #16]
 802003e:	2b00      	cmp	r3, #0
 8020040:	d10b      	bne.n	802005a <__swsetup_r+0x86>
 8020042:	21a0      	movs	r1, #160	@ 0xa0
 8020044:	2280      	movs	r2, #128	@ 0x80
 8020046:	89a3      	ldrh	r3, [r4, #12]
 8020048:	0089      	lsls	r1, r1, #2
 802004a:	0092      	lsls	r2, r2, #2
 802004c:	400b      	ands	r3, r1
 802004e:	4293      	cmp	r3, r2
 8020050:	d003      	beq.n	802005a <__swsetup_r+0x86>
 8020052:	0021      	movs	r1, r4
 8020054:	0028      	movs	r0, r5
 8020056:	f002 fc51 	bl	80228fc <__smakebuf_r>
 802005a:	230c      	movs	r3, #12
 802005c:	5ee2      	ldrsh	r2, [r4, r3]
 802005e:	2101      	movs	r1, #1
 8020060:	0013      	movs	r3, r2
 8020062:	400b      	ands	r3, r1
 8020064:	420a      	tst	r2, r1
 8020066:	d00b      	beq.n	8020080 <__swsetup_r+0xac>
 8020068:	2300      	movs	r3, #0
 802006a:	60a3      	str	r3, [r4, #8]
 802006c:	6963      	ldr	r3, [r4, #20]
 802006e:	425b      	negs	r3, r3
 8020070:	61a3      	str	r3, [r4, #24]
 8020072:	2000      	movs	r0, #0
 8020074:	6923      	ldr	r3, [r4, #16]
 8020076:	4283      	cmp	r3, r0
 8020078:	d101      	bne.n	802007e <__swsetup_r+0xaa>
 802007a:	0613      	lsls	r3, r2, #24
 802007c:	d4be      	bmi.n	801fffc <__swsetup_r+0x28>
 802007e:	bd70      	pop	{r4, r5, r6, pc}
 8020080:	0791      	lsls	r1, r2, #30
 8020082:	d400      	bmi.n	8020086 <__swsetup_r+0xb2>
 8020084:	6963      	ldr	r3, [r4, #20]
 8020086:	60a3      	str	r3, [r4, #8]
 8020088:	e7f3      	b.n	8020072 <__swsetup_r+0x9e>
 802008a:	46c0      	nop			@ (mov r8, r8)
 802008c:	200003cc 	.word	0x200003cc

08020090 <memset>:
 8020090:	0003      	movs	r3, r0
 8020092:	1882      	adds	r2, r0, r2
 8020094:	4293      	cmp	r3, r2
 8020096:	d100      	bne.n	802009a <memset+0xa>
 8020098:	4770      	bx	lr
 802009a:	7019      	strb	r1, [r3, #0]
 802009c:	3301      	adds	r3, #1
 802009e:	e7f9      	b.n	8020094 <memset+0x4>

080200a0 <strchr>:
 80200a0:	b2c9      	uxtb	r1, r1
 80200a2:	7803      	ldrb	r3, [r0, #0]
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	d004      	beq.n	80200b2 <strchr+0x12>
 80200a8:	428b      	cmp	r3, r1
 80200aa:	d100      	bne.n	80200ae <strchr+0xe>
 80200ac:	4770      	bx	lr
 80200ae:	3001      	adds	r0, #1
 80200b0:	e7f7      	b.n	80200a2 <strchr+0x2>
 80200b2:	424b      	negs	r3, r1
 80200b4:	4159      	adcs	r1, r3
 80200b6:	4249      	negs	r1, r1
 80200b8:	4008      	ands	r0, r1
 80200ba:	e7f7      	b.n	80200ac <strchr+0xc>

080200bc <strncmp>:
 80200bc:	b530      	push	{r4, r5, lr}
 80200be:	0005      	movs	r5, r0
 80200c0:	1e10      	subs	r0, r2, #0
 80200c2:	d00b      	beq.n	80200dc <strncmp+0x20>
 80200c4:	2400      	movs	r4, #0
 80200c6:	3a01      	subs	r2, #1
 80200c8:	5d2b      	ldrb	r3, [r5, r4]
 80200ca:	5d08      	ldrb	r0, [r1, r4]
 80200cc:	4283      	cmp	r3, r0
 80200ce:	d104      	bne.n	80200da <strncmp+0x1e>
 80200d0:	42a2      	cmp	r2, r4
 80200d2:	d002      	beq.n	80200da <strncmp+0x1e>
 80200d4:	3401      	adds	r4, #1
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d1f6      	bne.n	80200c8 <strncmp+0xc>
 80200da:	1a18      	subs	r0, r3, r0
 80200dc:	bd30      	pop	{r4, r5, pc}

080200de <strncpy>:
 80200de:	0003      	movs	r3, r0
 80200e0:	b530      	push	{r4, r5, lr}
 80200e2:	001d      	movs	r5, r3
 80200e4:	2a00      	cmp	r2, #0
 80200e6:	d006      	beq.n	80200f6 <strncpy+0x18>
 80200e8:	780c      	ldrb	r4, [r1, #0]
 80200ea:	3a01      	subs	r2, #1
 80200ec:	3301      	adds	r3, #1
 80200ee:	702c      	strb	r4, [r5, #0]
 80200f0:	3101      	adds	r1, #1
 80200f2:	2c00      	cmp	r4, #0
 80200f4:	d1f5      	bne.n	80200e2 <strncpy+0x4>
 80200f6:	2100      	movs	r1, #0
 80200f8:	189a      	adds	r2, r3, r2
 80200fa:	4293      	cmp	r3, r2
 80200fc:	d100      	bne.n	8020100 <strncpy+0x22>
 80200fe:	bd30      	pop	{r4, r5, pc}
 8020100:	7019      	strb	r1, [r3, #0]
 8020102:	3301      	adds	r3, #1
 8020104:	e7f9      	b.n	80200fa <strncpy+0x1c>

08020106 <strstr>:
 8020106:	780a      	ldrb	r2, [r1, #0]
 8020108:	b530      	push	{r4, r5, lr}
 802010a:	2a00      	cmp	r2, #0
 802010c:	d10c      	bne.n	8020128 <strstr+0x22>
 802010e:	bd30      	pop	{r4, r5, pc}
 8020110:	429a      	cmp	r2, r3
 8020112:	d108      	bne.n	8020126 <strstr+0x20>
 8020114:	2301      	movs	r3, #1
 8020116:	5ccc      	ldrb	r4, [r1, r3]
 8020118:	2c00      	cmp	r4, #0
 802011a:	d0f8      	beq.n	802010e <strstr+0x8>
 802011c:	5cc5      	ldrb	r5, [r0, r3]
 802011e:	42a5      	cmp	r5, r4
 8020120:	d101      	bne.n	8020126 <strstr+0x20>
 8020122:	3301      	adds	r3, #1
 8020124:	e7f7      	b.n	8020116 <strstr+0x10>
 8020126:	3001      	adds	r0, #1
 8020128:	7803      	ldrb	r3, [r0, #0]
 802012a:	2b00      	cmp	r3, #0
 802012c:	d1f0      	bne.n	8020110 <strstr+0xa>
 802012e:	0018      	movs	r0, r3
 8020130:	e7ed      	b.n	802010e <strstr+0x8>
	...

08020134 <_localeconv_r>:
 8020134:	4800      	ldr	r0, [pc, #0]	@ (8020138 <_localeconv_r+0x4>)
 8020136:	4770      	bx	lr
 8020138:	20000350 	.word	0x20000350

0802013c <_close_r>:
 802013c:	2300      	movs	r3, #0
 802013e:	b570      	push	{r4, r5, r6, lr}
 8020140:	4d06      	ldr	r5, [pc, #24]	@ (802015c <_close_r+0x20>)
 8020142:	0004      	movs	r4, r0
 8020144:	0008      	movs	r0, r1
 8020146:	602b      	str	r3, [r5, #0]
 8020148:	f7ed fc92 	bl	800da70 <_close>
 802014c:	1c43      	adds	r3, r0, #1
 802014e:	d103      	bne.n	8020158 <_close_r+0x1c>
 8020150:	682b      	ldr	r3, [r5, #0]
 8020152:	2b00      	cmp	r3, #0
 8020154:	d000      	beq.n	8020158 <_close_r+0x1c>
 8020156:	6023      	str	r3, [r4, #0]
 8020158:	bd70      	pop	{r4, r5, r6, pc}
 802015a:	46c0      	nop			@ (mov r8, r8)
 802015c:	2000399c 	.word	0x2000399c

08020160 <_lseek_r>:
 8020160:	b570      	push	{r4, r5, r6, lr}
 8020162:	0004      	movs	r4, r0
 8020164:	0008      	movs	r0, r1
 8020166:	0011      	movs	r1, r2
 8020168:	001a      	movs	r2, r3
 802016a:	2300      	movs	r3, #0
 802016c:	4d05      	ldr	r5, [pc, #20]	@ (8020184 <_lseek_r+0x24>)
 802016e:	602b      	str	r3, [r5, #0]
 8020170:	f7ed fc9f 	bl	800dab2 <_lseek>
 8020174:	1c43      	adds	r3, r0, #1
 8020176:	d103      	bne.n	8020180 <_lseek_r+0x20>
 8020178:	682b      	ldr	r3, [r5, #0]
 802017a:	2b00      	cmp	r3, #0
 802017c:	d000      	beq.n	8020180 <_lseek_r+0x20>
 802017e:	6023      	str	r3, [r4, #0]
 8020180:	bd70      	pop	{r4, r5, r6, pc}
 8020182:	46c0      	nop			@ (mov r8, r8)
 8020184:	2000399c 	.word	0x2000399c

08020188 <_read_r>:
 8020188:	b570      	push	{r4, r5, r6, lr}
 802018a:	0004      	movs	r4, r0
 802018c:	0008      	movs	r0, r1
 802018e:	0011      	movs	r1, r2
 8020190:	001a      	movs	r2, r3
 8020192:	2300      	movs	r3, #0
 8020194:	4d05      	ldr	r5, [pc, #20]	@ (80201ac <_read_r+0x24>)
 8020196:	602b      	str	r3, [r5, #0]
 8020198:	f7ed fc4d 	bl	800da36 <_read>
 802019c:	1c43      	adds	r3, r0, #1
 802019e:	d103      	bne.n	80201a8 <_read_r+0x20>
 80201a0:	682b      	ldr	r3, [r5, #0]
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d000      	beq.n	80201a8 <_read_r+0x20>
 80201a6:	6023      	str	r3, [r4, #0]
 80201a8:	bd70      	pop	{r4, r5, r6, pc}
 80201aa:	46c0      	nop			@ (mov r8, r8)
 80201ac:	2000399c 	.word	0x2000399c

080201b0 <_write_r>:
 80201b0:	b570      	push	{r4, r5, r6, lr}
 80201b2:	0004      	movs	r4, r0
 80201b4:	0008      	movs	r0, r1
 80201b6:	0011      	movs	r1, r2
 80201b8:	001a      	movs	r2, r3
 80201ba:	2300      	movs	r3, #0
 80201bc:	4d05      	ldr	r5, [pc, #20]	@ (80201d4 <_write_r+0x24>)
 80201be:	602b      	str	r3, [r5, #0]
 80201c0:	f7ee f90e 	bl	800e3e0 <_write>
 80201c4:	1c43      	adds	r3, r0, #1
 80201c6:	d103      	bne.n	80201d0 <_write_r+0x20>
 80201c8:	682b      	ldr	r3, [r5, #0]
 80201ca:	2b00      	cmp	r3, #0
 80201cc:	d000      	beq.n	80201d0 <_write_r+0x20>
 80201ce:	6023      	str	r3, [r4, #0]
 80201d0:	bd70      	pop	{r4, r5, r6, pc}
 80201d2:	46c0      	nop			@ (mov r8, r8)
 80201d4:	2000399c 	.word	0x2000399c

080201d8 <__errno>:
 80201d8:	4b01      	ldr	r3, [pc, #4]	@ (80201e0 <__errno+0x8>)
 80201da:	6818      	ldr	r0, [r3, #0]
 80201dc:	4770      	bx	lr
 80201de:	46c0      	nop			@ (mov r8, r8)
 80201e0:	200003cc 	.word	0x200003cc

080201e4 <__libc_init_array>:
 80201e4:	b570      	push	{r4, r5, r6, lr}
 80201e6:	2600      	movs	r6, #0
 80201e8:	4c0c      	ldr	r4, [pc, #48]	@ (802021c <__libc_init_array+0x38>)
 80201ea:	4d0d      	ldr	r5, [pc, #52]	@ (8020220 <__libc_init_array+0x3c>)
 80201ec:	1b64      	subs	r4, r4, r5
 80201ee:	10a4      	asrs	r4, r4, #2
 80201f0:	42a6      	cmp	r6, r4
 80201f2:	d109      	bne.n	8020208 <__libc_init_array+0x24>
 80201f4:	2600      	movs	r6, #0
 80201f6:	f002 fee9 	bl	8022fcc <_init>
 80201fa:	4c0a      	ldr	r4, [pc, #40]	@ (8020224 <__libc_init_array+0x40>)
 80201fc:	4d0a      	ldr	r5, [pc, #40]	@ (8020228 <__libc_init_array+0x44>)
 80201fe:	1b64      	subs	r4, r4, r5
 8020200:	10a4      	asrs	r4, r4, #2
 8020202:	42a6      	cmp	r6, r4
 8020204:	d105      	bne.n	8020212 <__libc_init_array+0x2e>
 8020206:	bd70      	pop	{r4, r5, r6, pc}
 8020208:	00b3      	lsls	r3, r6, #2
 802020a:	58eb      	ldr	r3, [r5, r3]
 802020c:	4798      	blx	r3
 802020e:	3601      	adds	r6, #1
 8020210:	e7ee      	b.n	80201f0 <__libc_init_array+0xc>
 8020212:	00b3      	lsls	r3, r6, #2
 8020214:	58eb      	ldr	r3, [r5, r3]
 8020216:	4798      	blx	r3
 8020218:	3601      	adds	r6, #1
 802021a:	e7f2      	b.n	8020202 <__libc_init_array+0x1e>
 802021c:	08025e90 	.word	0x08025e90
 8020220:	08025e90 	.word	0x08025e90
 8020224:	08025e94 	.word	0x08025e94
 8020228:	08025e90 	.word	0x08025e90

0802022c <__retarget_lock_init_recursive>:
 802022c:	4770      	bx	lr

0802022e <__retarget_lock_acquire_recursive>:
 802022e:	4770      	bx	lr

08020230 <__retarget_lock_release_recursive>:
 8020230:	4770      	bx	lr

08020232 <memchr>:
 8020232:	b2c9      	uxtb	r1, r1
 8020234:	1882      	adds	r2, r0, r2
 8020236:	4290      	cmp	r0, r2
 8020238:	d101      	bne.n	802023e <memchr+0xc>
 802023a:	2000      	movs	r0, #0
 802023c:	4770      	bx	lr
 802023e:	7803      	ldrb	r3, [r0, #0]
 8020240:	428b      	cmp	r3, r1
 8020242:	d0fb      	beq.n	802023c <memchr+0xa>
 8020244:	3001      	adds	r0, #1
 8020246:	e7f6      	b.n	8020236 <memchr+0x4>

08020248 <memcpy>:
 8020248:	2300      	movs	r3, #0
 802024a:	b510      	push	{r4, lr}
 802024c:	429a      	cmp	r2, r3
 802024e:	d100      	bne.n	8020252 <memcpy+0xa>
 8020250:	bd10      	pop	{r4, pc}
 8020252:	5ccc      	ldrb	r4, [r1, r3]
 8020254:	54c4      	strb	r4, [r0, r3]
 8020256:	3301      	adds	r3, #1
 8020258:	e7f8      	b.n	802024c <memcpy+0x4>
	...

0802025c <nan>:
 802025c:	2000      	movs	r0, #0
 802025e:	4901      	ldr	r1, [pc, #4]	@ (8020264 <nan+0x8>)
 8020260:	4770      	bx	lr
 8020262:	46c0      	nop			@ (mov r8, r8)
 8020264:	7ff80000 	.word	0x7ff80000

08020268 <quorem>:
 8020268:	b5f0      	push	{r4, r5, r6, r7, lr}
 802026a:	6902      	ldr	r2, [r0, #16]
 802026c:	690f      	ldr	r7, [r1, #16]
 802026e:	b087      	sub	sp, #28
 8020270:	0006      	movs	r6, r0
 8020272:	000b      	movs	r3, r1
 8020274:	2000      	movs	r0, #0
 8020276:	9102      	str	r1, [sp, #8]
 8020278:	42ba      	cmp	r2, r7
 802027a:	db6d      	blt.n	8020358 <quorem+0xf0>
 802027c:	3f01      	subs	r7, #1
 802027e:	00bc      	lsls	r4, r7, #2
 8020280:	3314      	adds	r3, #20
 8020282:	9305      	str	r3, [sp, #20]
 8020284:	191b      	adds	r3, r3, r4
 8020286:	9303      	str	r3, [sp, #12]
 8020288:	0033      	movs	r3, r6
 802028a:	3314      	adds	r3, #20
 802028c:	191c      	adds	r4, r3, r4
 802028e:	9301      	str	r3, [sp, #4]
 8020290:	6823      	ldr	r3, [r4, #0]
 8020292:	9304      	str	r3, [sp, #16]
 8020294:	9b03      	ldr	r3, [sp, #12]
 8020296:	9804      	ldr	r0, [sp, #16]
 8020298:	681d      	ldr	r5, [r3, #0]
 802029a:	3501      	adds	r5, #1
 802029c:	0029      	movs	r1, r5
 802029e:	f7df ff81 	bl	80001a4 <__udivsi3>
 80202a2:	9b04      	ldr	r3, [sp, #16]
 80202a4:	9000      	str	r0, [sp, #0]
 80202a6:	42ab      	cmp	r3, r5
 80202a8:	d32b      	bcc.n	8020302 <quorem+0x9a>
 80202aa:	9b05      	ldr	r3, [sp, #20]
 80202ac:	9d01      	ldr	r5, [sp, #4]
 80202ae:	469c      	mov	ip, r3
 80202b0:	2300      	movs	r3, #0
 80202b2:	9305      	str	r3, [sp, #20]
 80202b4:	9304      	str	r3, [sp, #16]
 80202b6:	4662      	mov	r2, ip
 80202b8:	ca08      	ldmia	r2!, {r3}
 80202ba:	6828      	ldr	r0, [r5, #0]
 80202bc:	4694      	mov	ip, r2
 80202be:	9a00      	ldr	r2, [sp, #0]
 80202c0:	b299      	uxth	r1, r3
 80202c2:	4351      	muls	r1, r2
 80202c4:	9a05      	ldr	r2, [sp, #20]
 80202c6:	0c1b      	lsrs	r3, r3, #16
 80202c8:	1889      	adds	r1, r1, r2
 80202ca:	9a00      	ldr	r2, [sp, #0]
 80202cc:	4353      	muls	r3, r2
 80202ce:	0c0a      	lsrs	r2, r1, #16
 80202d0:	189b      	adds	r3, r3, r2
 80202d2:	0c1a      	lsrs	r2, r3, #16
 80202d4:	b289      	uxth	r1, r1
 80202d6:	9205      	str	r2, [sp, #20]
 80202d8:	b282      	uxth	r2, r0
 80202da:	1a52      	subs	r2, r2, r1
 80202dc:	9904      	ldr	r1, [sp, #16]
 80202de:	0c00      	lsrs	r0, r0, #16
 80202e0:	1852      	adds	r2, r2, r1
 80202e2:	b29b      	uxth	r3, r3
 80202e4:	1411      	asrs	r1, r2, #16
 80202e6:	1ac3      	subs	r3, r0, r3
 80202e8:	185b      	adds	r3, r3, r1
 80202ea:	1419      	asrs	r1, r3, #16
 80202ec:	b292      	uxth	r2, r2
 80202ee:	041b      	lsls	r3, r3, #16
 80202f0:	431a      	orrs	r2, r3
 80202f2:	9b03      	ldr	r3, [sp, #12]
 80202f4:	9104      	str	r1, [sp, #16]
 80202f6:	c504      	stmia	r5!, {r2}
 80202f8:	4563      	cmp	r3, ip
 80202fa:	d2dc      	bcs.n	80202b6 <quorem+0x4e>
 80202fc:	6823      	ldr	r3, [r4, #0]
 80202fe:	2b00      	cmp	r3, #0
 8020300:	d030      	beq.n	8020364 <quorem+0xfc>
 8020302:	0030      	movs	r0, r6
 8020304:	9902      	ldr	r1, [sp, #8]
 8020306:	f001 fd7d 	bl	8021e04 <__mcmp>
 802030a:	2800      	cmp	r0, #0
 802030c:	db23      	blt.n	8020356 <quorem+0xee>
 802030e:	0034      	movs	r4, r6
 8020310:	2500      	movs	r5, #0
 8020312:	9902      	ldr	r1, [sp, #8]
 8020314:	3414      	adds	r4, #20
 8020316:	3114      	adds	r1, #20
 8020318:	6823      	ldr	r3, [r4, #0]
 802031a:	c901      	ldmia	r1!, {r0}
 802031c:	9302      	str	r3, [sp, #8]
 802031e:	466b      	mov	r3, sp
 8020320:	891b      	ldrh	r3, [r3, #8]
 8020322:	b282      	uxth	r2, r0
 8020324:	1a9a      	subs	r2, r3, r2
 8020326:	9b02      	ldr	r3, [sp, #8]
 8020328:	1952      	adds	r2, r2, r5
 802032a:	0c00      	lsrs	r0, r0, #16
 802032c:	0c1b      	lsrs	r3, r3, #16
 802032e:	1a1b      	subs	r3, r3, r0
 8020330:	1410      	asrs	r0, r2, #16
 8020332:	181b      	adds	r3, r3, r0
 8020334:	141d      	asrs	r5, r3, #16
 8020336:	b292      	uxth	r2, r2
 8020338:	041b      	lsls	r3, r3, #16
 802033a:	431a      	orrs	r2, r3
 802033c:	9b03      	ldr	r3, [sp, #12]
 802033e:	c404      	stmia	r4!, {r2}
 8020340:	428b      	cmp	r3, r1
 8020342:	d2e9      	bcs.n	8020318 <quorem+0xb0>
 8020344:	9a01      	ldr	r2, [sp, #4]
 8020346:	00bb      	lsls	r3, r7, #2
 8020348:	18d3      	adds	r3, r2, r3
 802034a:	681a      	ldr	r2, [r3, #0]
 802034c:	2a00      	cmp	r2, #0
 802034e:	d013      	beq.n	8020378 <quorem+0x110>
 8020350:	9b00      	ldr	r3, [sp, #0]
 8020352:	3301      	adds	r3, #1
 8020354:	9300      	str	r3, [sp, #0]
 8020356:	9800      	ldr	r0, [sp, #0]
 8020358:	b007      	add	sp, #28
 802035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802035c:	6823      	ldr	r3, [r4, #0]
 802035e:	2b00      	cmp	r3, #0
 8020360:	d104      	bne.n	802036c <quorem+0x104>
 8020362:	3f01      	subs	r7, #1
 8020364:	9b01      	ldr	r3, [sp, #4]
 8020366:	3c04      	subs	r4, #4
 8020368:	42a3      	cmp	r3, r4
 802036a:	d3f7      	bcc.n	802035c <quorem+0xf4>
 802036c:	6137      	str	r7, [r6, #16]
 802036e:	e7c8      	b.n	8020302 <quorem+0x9a>
 8020370:	681a      	ldr	r2, [r3, #0]
 8020372:	2a00      	cmp	r2, #0
 8020374:	d104      	bne.n	8020380 <quorem+0x118>
 8020376:	3f01      	subs	r7, #1
 8020378:	9a01      	ldr	r2, [sp, #4]
 802037a:	3b04      	subs	r3, #4
 802037c:	429a      	cmp	r2, r3
 802037e:	d3f7      	bcc.n	8020370 <quorem+0x108>
 8020380:	6137      	str	r7, [r6, #16]
 8020382:	e7e5      	b.n	8020350 <quorem+0xe8>

08020384 <_dtoa_r>:
 8020384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020386:	0014      	movs	r4, r2
 8020388:	001d      	movs	r5, r3
 802038a:	69c6      	ldr	r6, [r0, #28]
 802038c:	b09d      	sub	sp, #116	@ 0x74
 802038e:	940a      	str	r4, [sp, #40]	@ 0x28
 8020390:	950b      	str	r5, [sp, #44]	@ 0x2c
 8020392:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8020394:	9003      	str	r0, [sp, #12]
 8020396:	2e00      	cmp	r6, #0
 8020398:	d10f      	bne.n	80203ba <_dtoa_r+0x36>
 802039a:	2010      	movs	r0, #16
 802039c:	f001 f98a 	bl	80216b4 <malloc>
 80203a0:	9b03      	ldr	r3, [sp, #12]
 80203a2:	1e02      	subs	r2, r0, #0
 80203a4:	61d8      	str	r0, [r3, #28]
 80203a6:	d104      	bne.n	80203b2 <_dtoa_r+0x2e>
 80203a8:	21ef      	movs	r1, #239	@ 0xef
 80203aa:	4bc7      	ldr	r3, [pc, #796]	@ (80206c8 <_dtoa_r+0x344>)
 80203ac:	48c7      	ldr	r0, [pc, #796]	@ (80206cc <_dtoa_r+0x348>)
 80203ae:	f002 fb2f 	bl	8022a10 <__assert_func>
 80203b2:	6046      	str	r6, [r0, #4]
 80203b4:	6086      	str	r6, [r0, #8]
 80203b6:	6006      	str	r6, [r0, #0]
 80203b8:	60c6      	str	r6, [r0, #12]
 80203ba:	9b03      	ldr	r3, [sp, #12]
 80203bc:	69db      	ldr	r3, [r3, #28]
 80203be:	6819      	ldr	r1, [r3, #0]
 80203c0:	2900      	cmp	r1, #0
 80203c2:	d00b      	beq.n	80203dc <_dtoa_r+0x58>
 80203c4:	685a      	ldr	r2, [r3, #4]
 80203c6:	2301      	movs	r3, #1
 80203c8:	4093      	lsls	r3, r2
 80203ca:	604a      	str	r2, [r1, #4]
 80203cc:	608b      	str	r3, [r1, #8]
 80203ce:	9803      	ldr	r0, [sp, #12]
 80203d0:	f001 fa82 	bl	80218d8 <_Bfree>
 80203d4:	2200      	movs	r2, #0
 80203d6:	9b03      	ldr	r3, [sp, #12]
 80203d8:	69db      	ldr	r3, [r3, #28]
 80203da:	601a      	str	r2, [r3, #0]
 80203dc:	2d00      	cmp	r5, #0
 80203de:	da1e      	bge.n	802041e <_dtoa_r+0x9a>
 80203e0:	2301      	movs	r3, #1
 80203e2:	603b      	str	r3, [r7, #0]
 80203e4:	006b      	lsls	r3, r5, #1
 80203e6:	085b      	lsrs	r3, r3, #1
 80203e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80203ea:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80203ec:	4bb8      	ldr	r3, [pc, #736]	@ (80206d0 <_dtoa_r+0x34c>)
 80203ee:	4ab8      	ldr	r2, [pc, #736]	@ (80206d0 <_dtoa_r+0x34c>)
 80203f0:	403b      	ands	r3, r7
 80203f2:	4293      	cmp	r3, r2
 80203f4:	d116      	bne.n	8020424 <_dtoa_r+0xa0>
 80203f6:	4bb7      	ldr	r3, [pc, #732]	@ (80206d4 <_dtoa_r+0x350>)
 80203f8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80203fa:	6013      	str	r3, [r2, #0]
 80203fc:	033b      	lsls	r3, r7, #12
 80203fe:	0b1b      	lsrs	r3, r3, #12
 8020400:	4323      	orrs	r3, r4
 8020402:	d101      	bne.n	8020408 <_dtoa_r+0x84>
 8020404:	f000 fd83 	bl	8020f0e <_dtoa_r+0xb8a>
 8020408:	4bb3      	ldr	r3, [pc, #716]	@ (80206d8 <_dtoa_r+0x354>)
 802040a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802040c:	9308      	str	r3, [sp, #32]
 802040e:	2a00      	cmp	r2, #0
 8020410:	d002      	beq.n	8020418 <_dtoa_r+0x94>
 8020412:	4bb2      	ldr	r3, [pc, #712]	@ (80206dc <_dtoa_r+0x358>)
 8020414:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020416:	6013      	str	r3, [r2, #0]
 8020418:	9808      	ldr	r0, [sp, #32]
 802041a:	b01d      	add	sp, #116	@ 0x74
 802041c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802041e:	2300      	movs	r3, #0
 8020420:	603b      	str	r3, [r7, #0]
 8020422:	e7e2      	b.n	80203ea <_dtoa_r+0x66>
 8020424:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020428:	9212      	str	r2, [sp, #72]	@ 0x48
 802042a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802042c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802042e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020430:	2200      	movs	r2, #0
 8020432:	2300      	movs	r3, #0
 8020434:	f7e0 f83c 	bl	80004b0 <__aeabi_dcmpeq>
 8020438:	1e06      	subs	r6, r0, #0
 802043a:	d00b      	beq.n	8020454 <_dtoa_r+0xd0>
 802043c:	2301      	movs	r3, #1
 802043e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020440:	6013      	str	r3, [r2, #0]
 8020442:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020444:	2b00      	cmp	r3, #0
 8020446:	d002      	beq.n	802044e <_dtoa_r+0xca>
 8020448:	4ba5      	ldr	r3, [pc, #660]	@ (80206e0 <_dtoa_r+0x35c>)
 802044a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802044c:	6013      	str	r3, [r2, #0]
 802044e:	4ba5      	ldr	r3, [pc, #660]	@ (80206e4 <_dtoa_r+0x360>)
 8020450:	9308      	str	r3, [sp, #32]
 8020452:	e7e1      	b.n	8020418 <_dtoa_r+0x94>
 8020454:	ab1a      	add	r3, sp, #104	@ 0x68
 8020456:	9301      	str	r3, [sp, #4]
 8020458:	ab1b      	add	r3, sp, #108	@ 0x6c
 802045a:	9300      	str	r3, [sp, #0]
 802045c:	9803      	ldr	r0, [sp, #12]
 802045e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020460:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020462:	f001 fdf1 	bl	8022048 <__d2b>
 8020466:	007a      	lsls	r2, r7, #1
 8020468:	9005      	str	r0, [sp, #20]
 802046a:	0d52      	lsrs	r2, r2, #21
 802046c:	d100      	bne.n	8020470 <_dtoa_r+0xec>
 802046e:	e07b      	b.n	8020568 <_dtoa_r+0x1e4>
 8020470:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020472:	9618      	str	r6, [sp, #96]	@ 0x60
 8020474:	0319      	lsls	r1, r3, #12
 8020476:	4b9c      	ldr	r3, [pc, #624]	@ (80206e8 <_dtoa_r+0x364>)
 8020478:	0b09      	lsrs	r1, r1, #12
 802047a:	430b      	orrs	r3, r1
 802047c:	499b      	ldr	r1, [pc, #620]	@ (80206ec <_dtoa_r+0x368>)
 802047e:	1857      	adds	r7, r2, r1
 8020480:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020482:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020484:	0019      	movs	r1, r3
 8020486:	2200      	movs	r2, #0
 8020488:	4b99      	ldr	r3, [pc, #612]	@ (80206f0 <_dtoa_r+0x36c>)
 802048a:	f7e2 fb9f 	bl	8002bcc <__aeabi_dsub>
 802048e:	4a99      	ldr	r2, [pc, #612]	@ (80206f4 <_dtoa_r+0x370>)
 8020490:	4b99      	ldr	r3, [pc, #612]	@ (80206f8 <_dtoa_r+0x374>)
 8020492:	f7e2 f8d3 	bl	800263c <__aeabi_dmul>
 8020496:	4a99      	ldr	r2, [pc, #612]	@ (80206fc <_dtoa_r+0x378>)
 8020498:	4b99      	ldr	r3, [pc, #612]	@ (8020700 <_dtoa_r+0x37c>)
 802049a:	f7e1 f927 	bl	80016ec <__aeabi_dadd>
 802049e:	0004      	movs	r4, r0
 80204a0:	0038      	movs	r0, r7
 80204a2:	000d      	movs	r5, r1
 80204a4:	f7e2 ff8c 	bl	80033c0 <__aeabi_i2d>
 80204a8:	4a96      	ldr	r2, [pc, #600]	@ (8020704 <_dtoa_r+0x380>)
 80204aa:	4b97      	ldr	r3, [pc, #604]	@ (8020708 <_dtoa_r+0x384>)
 80204ac:	f7e2 f8c6 	bl	800263c <__aeabi_dmul>
 80204b0:	0002      	movs	r2, r0
 80204b2:	000b      	movs	r3, r1
 80204b4:	0020      	movs	r0, r4
 80204b6:	0029      	movs	r1, r5
 80204b8:	f7e1 f918 	bl	80016ec <__aeabi_dadd>
 80204bc:	0004      	movs	r4, r0
 80204be:	000d      	movs	r5, r1
 80204c0:	f7e2 ff42 	bl	8003348 <__aeabi_d2iz>
 80204c4:	2200      	movs	r2, #0
 80204c6:	9004      	str	r0, [sp, #16]
 80204c8:	2300      	movs	r3, #0
 80204ca:	0020      	movs	r0, r4
 80204cc:	0029      	movs	r1, r5
 80204ce:	f7df fff5 	bl	80004bc <__aeabi_dcmplt>
 80204d2:	2800      	cmp	r0, #0
 80204d4:	d00b      	beq.n	80204ee <_dtoa_r+0x16a>
 80204d6:	9804      	ldr	r0, [sp, #16]
 80204d8:	f7e2 ff72 	bl	80033c0 <__aeabi_i2d>
 80204dc:	002b      	movs	r3, r5
 80204de:	0022      	movs	r2, r4
 80204e0:	f7df ffe6 	bl	80004b0 <__aeabi_dcmpeq>
 80204e4:	4243      	negs	r3, r0
 80204e6:	4158      	adcs	r0, r3
 80204e8:	9b04      	ldr	r3, [sp, #16]
 80204ea:	1a1b      	subs	r3, r3, r0
 80204ec:	9304      	str	r3, [sp, #16]
 80204ee:	2301      	movs	r3, #1
 80204f0:	9315      	str	r3, [sp, #84]	@ 0x54
 80204f2:	9b04      	ldr	r3, [sp, #16]
 80204f4:	2b16      	cmp	r3, #22
 80204f6:	d810      	bhi.n	802051a <_dtoa_r+0x196>
 80204f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80204fa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80204fc:	9a04      	ldr	r2, [sp, #16]
 80204fe:	4b83      	ldr	r3, [pc, #524]	@ (802070c <_dtoa_r+0x388>)
 8020500:	00d2      	lsls	r2, r2, #3
 8020502:	189b      	adds	r3, r3, r2
 8020504:	681a      	ldr	r2, [r3, #0]
 8020506:	685b      	ldr	r3, [r3, #4]
 8020508:	f7df ffd8 	bl	80004bc <__aeabi_dcmplt>
 802050c:	2800      	cmp	r0, #0
 802050e:	d047      	beq.n	80205a0 <_dtoa_r+0x21c>
 8020510:	9b04      	ldr	r3, [sp, #16]
 8020512:	3b01      	subs	r3, #1
 8020514:	9304      	str	r3, [sp, #16]
 8020516:	2300      	movs	r3, #0
 8020518:	9315      	str	r3, [sp, #84]	@ 0x54
 802051a:	2200      	movs	r2, #0
 802051c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 802051e:	9206      	str	r2, [sp, #24]
 8020520:	1bdb      	subs	r3, r3, r7
 8020522:	1e5a      	subs	r2, r3, #1
 8020524:	d53e      	bpl.n	80205a4 <_dtoa_r+0x220>
 8020526:	2201      	movs	r2, #1
 8020528:	1ad3      	subs	r3, r2, r3
 802052a:	9306      	str	r3, [sp, #24]
 802052c:	2300      	movs	r3, #0
 802052e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020530:	9b04      	ldr	r3, [sp, #16]
 8020532:	2b00      	cmp	r3, #0
 8020534:	db38      	blt.n	80205a8 <_dtoa_r+0x224>
 8020536:	9a04      	ldr	r2, [sp, #16]
 8020538:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802053a:	4694      	mov	ip, r2
 802053c:	4463      	add	r3, ip
 802053e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020540:	2300      	movs	r3, #0
 8020542:	9214      	str	r2, [sp, #80]	@ 0x50
 8020544:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020546:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020548:	2401      	movs	r4, #1
 802054a:	2b09      	cmp	r3, #9
 802054c:	d867      	bhi.n	802061e <_dtoa_r+0x29a>
 802054e:	2b05      	cmp	r3, #5
 8020550:	dd02      	ble.n	8020558 <_dtoa_r+0x1d4>
 8020552:	2400      	movs	r4, #0
 8020554:	3b04      	subs	r3, #4
 8020556:	9322      	str	r3, [sp, #136]	@ 0x88
 8020558:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802055a:	1e98      	subs	r0, r3, #2
 802055c:	2803      	cmp	r0, #3
 802055e:	d867      	bhi.n	8020630 <_dtoa_r+0x2ac>
 8020560:	f7df fe0c 	bl	800017c <__gnu_thumb1_case_uqi>
 8020564:	5b383a2b 	.word	0x5b383a2b
 8020568:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802056a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 802056c:	18f6      	adds	r6, r6, r3
 802056e:	4b68      	ldr	r3, [pc, #416]	@ (8020710 <_dtoa_r+0x38c>)
 8020570:	18f2      	adds	r2, r6, r3
 8020572:	2a20      	cmp	r2, #32
 8020574:	dd0f      	ble.n	8020596 <_dtoa_r+0x212>
 8020576:	2340      	movs	r3, #64	@ 0x40
 8020578:	1a9b      	subs	r3, r3, r2
 802057a:	409f      	lsls	r7, r3
 802057c:	4b65      	ldr	r3, [pc, #404]	@ (8020714 <_dtoa_r+0x390>)
 802057e:	0038      	movs	r0, r7
 8020580:	18f3      	adds	r3, r6, r3
 8020582:	40dc      	lsrs	r4, r3
 8020584:	4320      	orrs	r0, r4
 8020586:	f7e2 ff49 	bl	800341c <__aeabi_ui2d>
 802058a:	2201      	movs	r2, #1
 802058c:	4b62      	ldr	r3, [pc, #392]	@ (8020718 <_dtoa_r+0x394>)
 802058e:	1e77      	subs	r7, r6, #1
 8020590:	18cb      	adds	r3, r1, r3
 8020592:	9218      	str	r2, [sp, #96]	@ 0x60
 8020594:	e776      	b.n	8020484 <_dtoa_r+0x100>
 8020596:	2320      	movs	r3, #32
 8020598:	0020      	movs	r0, r4
 802059a:	1a9b      	subs	r3, r3, r2
 802059c:	4098      	lsls	r0, r3
 802059e:	e7f2      	b.n	8020586 <_dtoa_r+0x202>
 80205a0:	9015      	str	r0, [sp, #84]	@ 0x54
 80205a2:	e7ba      	b.n	802051a <_dtoa_r+0x196>
 80205a4:	920d      	str	r2, [sp, #52]	@ 0x34
 80205a6:	e7c3      	b.n	8020530 <_dtoa_r+0x1ac>
 80205a8:	9b06      	ldr	r3, [sp, #24]
 80205aa:	9a04      	ldr	r2, [sp, #16]
 80205ac:	1a9b      	subs	r3, r3, r2
 80205ae:	9306      	str	r3, [sp, #24]
 80205b0:	4253      	negs	r3, r2
 80205b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80205b4:	2300      	movs	r3, #0
 80205b6:	9314      	str	r3, [sp, #80]	@ 0x50
 80205b8:	e7c5      	b.n	8020546 <_dtoa_r+0x1c2>
 80205ba:	2300      	movs	r3, #0
 80205bc:	9310      	str	r3, [sp, #64]	@ 0x40
 80205be:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80205c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80205c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80205c4:	2b00      	cmp	r3, #0
 80205c6:	dc13      	bgt.n	80205f0 <_dtoa_r+0x26c>
 80205c8:	2301      	movs	r3, #1
 80205ca:	001a      	movs	r2, r3
 80205cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80205ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80205d0:	9223      	str	r2, [sp, #140]	@ 0x8c
 80205d2:	e00d      	b.n	80205f0 <_dtoa_r+0x26c>
 80205d4:	2301      	movs	r3, #1
 80205d6:	e7f1      	b.n	80205bc <_dtoa_r+0x238>
 80205d8:	2300      	movs	r3, #0
 80205da:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80205dc:	9310      	str	r3, [sp, #64]	@ 0x40
 80205de:	4694      	mov	ip, r2
 80205e0:	9b04      	ldr	r3, [sp, #16]
 80205e2:	4463      	add	r3, ip
 80205e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80205e6:	3301      	adds	r3, #1
 80205e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	dc00      	bgt.n	80205f0 <_dtoa_r+0x26c>
 80205ee:	2301      	movs	r3, #1
 80205f0:	9a03      	ldr	r2, [sp, #12]
 80205f2:	2100      	movs	r1, #0
 80205f4:	69d0      	ldr	r0, [r2, #28]
 80205f6:	2204      	movs	r2, #4
 80205f8:	0015      	movs	r5, r2
 80205fa:	3514      	adds	r5, #20
 80205fc:	429d      	cmp	r5, r3
 80205fe:	d91b      	bls.n	8020638 <_dtoa_r+0x2b4>
 8020600:	6041      	str	r1, [r0, #4]
 8020602:	9803      	ldr	r0, [sp, #12]
 8020604:	f001 f924 	bl	8021850 <_Balloc>
 8020608:	9008      	str	r0, [sp, #32]
 802060a:	2800      	cmp	r0, #0
 802060c:	d117      	bne.n	802063e <_dtoa_r+0x2ba>
 802060e:	21b0      	movs	r1, #176	@ 0xb0
 8020610:	4b42      	ldr	r3, [pc, #264]	@ (802071c <_dtoa_r+0x398>)
 8020612:	482e      	ldr	r0, [pc, #184]	@ (80206cc <_dtoa_r+0x348>)
 8020614:	9a08      	ldr	r2, [sp, #32]
 8020616:	31ff      	adds	r1, #255	@ 0xff
 8020618:	e6c9      	b.n	80203ae <_dtoa_r+0x2a>
 802061a:	2301      	movs	r3, #1
 802061c:	e7dd      	b.n	80205da <_dtoa_r+0x256>
 802061e:	2300      	movs	r3, #0
 8020620:	9410      	str	r4, [sp, #64]	@ 0x40
 8020622:	9322      	str	r3, [sp, #136]	@ 0x88
 8020624:	3b01      	subs	r3, #1
 8020626:	930e      	str	r3, [sp, #56]	@ 0x38
 8020628:	9309      	str	r3, [sp, #36]	@ 0x24
 802062a:	2200      	movs	r2, #0
 802062c:	3313      	adds	r3, #19
 802062e:	e7cf      	b.n	80205d0 <_dtoa_r+0x24c>
 8020630:	2301      	movs	r3, #1
 8020632:	9310      	str	r3, [sp, #64]	@ 0x40
 8020634:	3b02      	subs	r3, #2
 8020636:	e7f6      	b.n	8020626 <_dtoa_r+0x2a2>
 8020638:	3101      	adds	r1, #1
 802063a:	0052      	lsls	r2, r2, #1
 802063c:	e7dc      	b.n	80205f8 <_dtoa_r+0x274>
 802063e:	9b03      	ldr	r3, [sp, #12]
 8020640:	9a08      	ldr	r2, [sp, #32]
 8020642:	69db      	ldr	r3, [r3, #28]
 8020644:	601a      	str	r2, [r3, #0]
 8020646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020648:	2b0e      	cmp	r3, #14
 802064a:	d900      	bls.n	802064e <_dtoa_r+0x2ca>
 802064c:	e0d9      	b.n	8020802 <_dtoa_r+0x47e>
 802064e:	2c00      	cmp	r4, #0
 8020650:	d100      	bne.n	8020654 <_dtoa_r+0x2d0>
 8020652:	e0d6      	b.n	8020802 <_dtoa_r+0x47e>
 8020654:	9b04      	ldr	r3, [sp, #16]
 8020656:	2b00      	cmp	r3, #0
 8020658:	dd64      	ble.n	8020724 <_dtoa_r+0x3a0>
 802065a:	210f      	movs	r1, #15
 802065c:	9a04      	ldr	r2, [sp, #16]
 802065e:	4b2b      	ldr	r3, [pc, #172]	@ (802070c <_dtoa_r+0x388>)
 8020660:	400a      	ands	r2, r1
 8020662:	00d2      	lsls	r2, r2, #3
 8020664:	189b      	adds	r3, r3, r2
 8020666:	681e      	ldr	r6, [r3, #0]
 8020668:	685f      	ldr	r7, [r3, #4]
 802066a:	9b04      	ldr	r3, [sp, #16]
 802066c:	2402      	movs	r4, #2
 802066e:	111d      	asrs	r5, r3, #4
 8020670:	05db      	lsls	r3, r3, #23
 8020672:	d50a      	bpl.n	802068a <_dtoa_r+0x306>
 8020674:	4b2a      	ldr	r3, [pc, #168]	@ (8020720 <_dtoa_r+0x39c>)
 8020676:	400d      	ands	r5, r1
 8020678:	6a1a      	ldr	r2, [r3, #32]
 802067a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802067c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802067e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020680:	f7e1 fb98 	bl	8001db4 <__aeabi_ddiv>
 8020684:	900a      	str	r0, [sp, #40]	@ 0x28
 8020686:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020688:	3401      	adds	r4, #1
 802068a:	4b25      	ldr	r3, [pc, #148]	@ (8020720 <_dtoa_r+0x39c>)
 802068c:	930c      	str	r3, [sp, #48]	@ 0x30
 802068e:	2d00      	cmp	r5, #0
 8020690:	d108      	bne.n	80206a4 <_dtoa_r+0x320>
 8020692:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020694:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020696:	0032      	movs	r2, r6
 8020698:	003b      	movs	r3, r7
 802069a:	f7e1 fb8b 	bl	8001db4 <__aeabi_ddiv>
 802069e:	900a      	str	r0, [sp, #40]	@ 0x28
 80206a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80206a2:	e05a      	b.n	802075a <_dtoa_r+0x3d6>
 80206a4:	2301      	movs	r3, #1
 80206a6:	421d      	tst	r5, r3
 80206a8:	d009      	beq.n	80206be <_dtoa_r+0x33a>
 80206aa:	18e4      	adds	r4, r4, r3
 80206ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80206ae:	0030      	movs	r0, r6
 80206b0:	681a      	ldr	r2, [r3, #0]
 80206b2:	685b      	ldr	r3, [r3, #4]
 80206b4:	0039      	movs	r1, r7
 80206b6:	f7e1 ffc1 	bl	800263c <__aeabi_dmul>
 80206ba:	0006      	movs	r6, r0
 80206bc:	000f      	movs	r7, r1
 80206be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80206c0:	106d      	asrs	r5, r5, #1
 80206c2:	3308      	adds	r3, #8
 80206c4:	e7e2      	b.n	802068c <_dtoa_r+0x308>
 80206c6:	46c0      	nop			@ (mov r8, r8)
 80206c8:	08025bea 	.word	0x08025bea
 80206cc:	08025c01 	.word	0x08025c01
 80206d0:	7ff00000 	.word	0x7ff00000
 80206d4:	0000270f 	.word	0x0000270f
 80206d8:	08025be6 	.word	0x08025be6
 80206dc:	08025be9 	.word	0x08025be9
 80206e0:	08025bb2 	.word	0x08025bb2
 80206e4:	08025bb1 	.word	0x08025bb1
 80206e8:	3ff00000 	.word	0x3ff00000
 80206ec:	fffffc01 	.word	0xfffffc01
 80206f0:	3ff80000 	.word	0x3ff80000
 80206f4:	636f4361 	.word	0x636f4361
 80206f8:	3fd287a7 	.word	0x3fd287a7
 80206fc:	8b60c8b3 	.word	0x8b60c8b3
 8020700:	3fc68a28 	.word	0x3fc68a28
 8020704:	509f79fb 	.word	0x509f79fb
 8020708:	3fd34413 	.word	0x3fd34413
 802070c:	08025d58 	.word	0x08025d58
 8020710:	00000432 	.word	0x00000432
 8020714:	00000412 	.word	0x00000412
 8020718:	fe100000 	.word	0xfe100000
 802071c:	08025c59 	.word	0x08025c59
 8020720:	08025d30 	.word	0x08025d30
 8020724:	9b04      	ldr	r3, [sp, #16]
 8020726:	2402      	movs	r4, #2
 8020728:	2b00      	cmp	r3, #0
 802072a:	d016      	beq.n	802075a <_dtoa_r+0x3d6>
 802072c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802072e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020730:	220f      	movs	r2, #15
 8020732:	425d      	negs	r5, r3
 8020734:	402a      	ands	r2, r5
 8020736:	4bd7      	ldr	r3, [pc, #860]	@ (8020a94 <_dtoa_r+0x710>)
 8020738:	00d2      	lsls	r2, r2, #3
 802073a:	189b      	adds	r3, r3, r2
 802073c:	681a      	ldr	r2, [r3, #0]
 802073e:	685b      	ldr	r3, [r3, #4]
 8020740:	f7e1 ff7c 	bl	800263c <__aeabi_dmul>
 8020744:	2701      	movs	r7, #1
 8020746:	2300      	movs	r3, #0
 8020748:	900a      	str	r0, [sp, #40]	@ 0x28
 802074a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802074c:	4ed2      	ldr	r6, [pc, #840]	@ (8020a98 <_dtoa_r+0x714>)
 802074e:	112d      	asrs	r5, r5, #4
 8020750:	2d00      	cmp	r5, #0
 8020752:	d000      	beq.n	8020756 <_dtoa_r+0x3d2>
 8020754:	e0ba      	b.n	80208cc <_dtoa_r+0x548>
 8020756:	2b00      	cmp	r3, #0
 8020758:	d1a1      	bne.n	802069e <_dtoa_r+0x31a>
 802075a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802075c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802075e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020760:	2b00      	cmp	r3, #0
 8020762:	d100      	bne.n	8020766 <_dtoa_r+0x3e2>
 8020764:	e0bd      	b.n	80208e2 <_dtoa_r+0x55e>
 8020766:	2200      	movs	r2, #0
 8020768:	0030      	movs	r0, r6
 802076a:	0039      	movs	r1, r7
 802076c:	4bcb      	ldr	r3, [pc, #812]	@ (8020a9c <_dtoa_r+0x718>)
 802076e:	f7df fea5 	bl	80004bc <__aeabi_dcmplt>
 8020772:	2800      	cmp	r0, #0
 8020774:	d100      	bne.n	8020778 <_dtoa_r+0x3f4>
 8020776:	e0b4      	b.n	80208e2 <_dtoa_r+0x55e>
 8020778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802077a:	2b00      	cmp	r3, #0
 802077c:	d100      	bne.n	8020780 <_dtoa_r+0x3fc>
 802077e:	e0b0      	b.n	80208e2 <_dtoa_r+0x55e>
 8020780:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020782:	2b00      	cmp	r3, #0
 8020784:	dd39      	ble.n	80207fa <_dtoa_r+0x476>
 8020786:	9b04      	ldr	r3, [sp, #16]
 8020788:	2200      	movs	r2, #0
 802078a:	3b01      	subs	r3, #1
 802078c:	930c      	str	r3, [sp, #48]	@ 0x30
 802078e:	0030      	movs	r0, r6
 8020790:	4bc3      	ldr	r3, [pc, #780]	@ (8020aa0 <_dtoa_r+0x71c>)
 8020792:	0039      	movs	r1, r7
 8020794:	f7e1 ff52 	bl	800263c <__aeabi_dmul>
 8020798:	900a      	str	r0, [sp, #40]	@ 0x28
 802079a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802079c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802079e:	3401      	adds	r4, #1
 80207a0:	0020      	movs	r0, r4
 80207a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80207a4:	f7e2 fe0c 	bl	80033c0 <__aeabi_i2d>
 80207a8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80207aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80207ac:	f7e1 ff46 	bl	800263c <__aeabi_dmul>
 80207b0:	4bbc      	ldr	r3, [pc, #752]	@ (8020aa4 <_dtoa_r+0x720>)
 80207b2:	2200      	movs	r2, #0
 80207b4:	f7e0 ff9a 	bl	80016ec <__aeabi_dadd>
 80207b8:	4bbb      	ldr	r3, [pc, #748]	@ (8020aa8 <_dtoa_r+0x724>)
 80207ba:	0006      	movs	r6, r0
 80207bc:	18cf      	adds	r7, r1, r3
 80207be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d000      	beq.n	80207c6 <_dtoa_r+0x442>
 80207c4:	e091      	b.n	80208ea <_dtoa_r+0x566>
 80207c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80207c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80207ca:	2200      	movs	r2, #0
 80207cc:	4bb7      	ldr	r3, [pc, #732]	@ (8020aac <_dtoa_r+0x728>)
 80207ce:	f7e2 f9fd 	bl	8002bcc <__aeabi_dsub>
 80207d2:	0032      	movs	r2, r6
 80207d4:	003b      	movs	r3, r7
 80207d6:	0004      	movs	r4, r0
 80207d8:	000d      	movs	r5, r1
 80207da:	f7df fe83 	bl	80004e4 <__aeabi_dcmpgt>
 80207de:	2800      	cmp	r0, #0
 80207e0:	d000      	beq.n	80207e4 <_dtoa_r+0x460>
 80207e2:	e29d      	b.n	8020d20 <_dtoa_r+0x99c>
 80207e4:	2180      	movs	r1, #128	@ 0x80
 80207e6:	0609      	lsls	r1, r1, #24
 80207e8:	187b      	adds	r3, r7, r1
 80207ea:	0032      	movs	r2, r6
 80207ec:	0020      	movs	r0, r4
 80207ee:	0029      	movs	r1, r5
 80207f0:	f7df fe64 	bl	80004bc <__aeabi_dcmplt>
 80207f4:	2800      	cmp	r0, #0
 80207f6:	d000      	beq.n	80207fa <_dtoa_r+0x476>
 80207f8:	e130      	b.n	8020a5c <_dtoa_r+0x6d8>
 80207fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80207fc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80207fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8020800:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020802:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020804:	2b00      	cmp	r3, #0
 8020806:	da00      	bge.n	802080a <_dtoa_r+0x486>
 8020808:	e177      	b.n	8020afa <_dtoa_r+0x776>
 802080a:	9a04      	ldr	r2, [sp, #16]
 802080c:	2a0e      	cmp	r2, #14
 802080e:	dd00      	ble.n	8020812 <_dtoa_r+0x48e>
 8020810:	e173      	b.n	8020afa <_dtoa_r+0x776>
 8020812:	4ba0      	ldr	r3, [pc, #640]	@ (8020a94 <_dtoa_r+0x710>)
 8020814:	00d2      	lsls	r2, r2, #3
 8020816:	189b      	adds	r3, r3, r2
 8020818:	685c      	ldr	r4, [r3, #4]
 802081a:	681b      	ldr	r3, [r3, #0]
 802081c:	9306      	str	r3, [sp, #24]
 802081e:	9407      	str	r4, [sp, #28]
 8020820:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020822:	2b00      	cmp	r3, #0
 8020824:	da03      	bge.n	802082e <_dtoa_r+0x4aa>
 8020826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020828:	2b00      	cmp	r3, #0
 802082a:	dc00      	bgt.n	802082e <_dtoa_r+0x4aa>
 802082c:	e106      	b.n	8020a3c <_dtoa_r+0x6b8>
 802082e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020830:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020834:	9d08      	ldr	r5, [sp, #32]
 8020836:	3b01      	subs	r3, #1
 8020838:	195b      	adds	r3, r3, r5
 802083a:	930a      	str	r3, [sp, #40]	@ 0x28
 802083c:	9a06      	ldr	r2, [sp, #24]
 802083e:	9b07      	ldr	r3, [sp, #28]
 8020840:	0030      	movs	r0, r6
 8020842:	0039      	movs	r1, r7
 8020844:	f7e1 fab6 	bl	8001db4 <__aeabi_ddiv>
 8020848:	f7e2 fd7e 	bl	8003348 <__aeabi_d2iz>
 802084c:	9009      	str	r0, [sp, #36]	@ 0x24
 802084e:	f7e2 fdb7 	bl	80033c0 <__aeabi_i2d>
 8020852:	9a06      	ldr	r2, [sp, #24]
 8020854:	9b07      	ldr	r3, [sp, #28]
 8020856:	f7e1 fef1 	bl	800263c <__aeabi_dmul>
 802085a:	0002      	movs	r2, r0
 802085c:	000b      	movs	r3, r1
 802085e:	0030      	movs	r0, r6
 8020860:	0039      	movs	r1, r7
 8020862:	f7e2 f9b3 	bl	8002bcc <__aeabi_dsub>
 8020866:	002b      	movs	r3, r5
 8020868:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802086a:	3501      	adds	r5, #1
 802086c:	3230      	adds	r2, #48	@ 0x30
 802086e:	701a      	strb	r2, [r3, #0]
 8020870:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020872:	002c      	movs	r4, r5
 8020874:	429a      	cmp	r2, r3
 8020876:	d000      	beq.n	802087a <_dtoa_r+0x4f6>
 8020878:	e131      	b.n	8020ade <_dtoa_r+0x75a>
 802087a:	0002      	movs	r2, r0
 802087c:	000b      	movs	r3, r1
 802087e:	f7e0 ff35 	bl	80016ec <__aeabi_dadd>
 8020882:	9a06      	ldr	r2, [sp, #24]
 8020884:	9b07      	ldr	r3, [sp, #28]
 8020886:	0006      	movs	r6, r0
 8020888:	000f      	movs	r7, r1
 802088a:	f7df fe2b 	bl	80004e4 <__aeabi_dcmpgt>
 802088e:	2800      	cmp	r0, #0
 8020890:	d000      	beq.n	8020894 <_dtoa_r+0x510>
 8020892:	e10f      	b.n	8020ab4 <_dtoa_r+0x730>
 8020894:	9a06      	ldr	r2, [sp, #24]
 8020896:	9b07      	ldr	r3, [sp, #28]
 8020898:	0030      	movs	r0, r6
 802089a:	0039      	movs	r1, r7
 802089c:	f7df fe08 	bl	80004b0 <__aeabi_dcmpeq>
 80208a0:	2800      	cmp	r0, #0
 80208a2:	d003      	beq.n	80208ac <_dtoa_r+0x528>
 80208a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208a6:	07dd      	lsls	r5, r3, #31
 80208a8:	d500      	bpl.n	80208ac <_dtoa_r+0x528>
 80208aa:	e103      	b.n	8020ab4 <_dtoa_r+0x730>
 80208ac:	9905      	ldr	r1, [sp, #20]
 80208ae:	9803      	ldr	r0, [sp, #12]
 80208b0:	f001 f812 	bl	80218d8 <_Bfree>
 80208b4:	2300      	movs	r3, #0
 80208b6:	7023      	strb	r3, [r4, #0]
 80208b8:	9b04      	ldr	r3, [sp, #16]
 80208ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80208bc:	3301      	adds	r3, #1
 80208be:	6013      	str	r3, [r2, #0]
 80208c0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80208c2:	2b00      	cmp	r3, #0
 80208c4:	d100      	bne.n	80208c8 <_dtoa_r+0x544>
 80208c6:	e5a7      	b.n	8020418 <_dtoa_r+0x94>
 80208c8:	601c      	str	r4, [r3, #0]
 80208ca:	e5a5      	b.n	8020418 <_dtoa_r+0x94>
 80208cc:	423d      	tst	r5, r7
 80208ce:	d005      	beq.n	80208dc <_dtoa_r+0x558>
 80208d0:	6832      	ldr	r2, [r6, #0]
 80208d2:	6873      	ldr	r3, [r6, #4]
 80208d4:	f7e1 feb2 	bl	800263c <__aeabi_dmul>
 80208d8:	003b      	movs	r3, r7
 80208da:	3401      	adds	r4, #1
 80208dc:	106d      	asrs	r5, r5, #1
 80208de:	3608      	adds	r6, #8
 80208e0:	e736      	b.n	8020750 <_dtoa_r+0x3cc>
 80208e2:	9b04      	ldr	r3, [sp, #16]
 80208e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80208e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208e8:	e75a      	b.n	80207a0 <_dtoa_r+0x41c>
 80208ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80208ec:	4b69      	ldr	r3, [pc, #420]	@ (8020a94 <_dtoa_r+0x710>)
 80208ee:	3a01      	subs	r2, #1
 80208f0:	00d2      	lsls	r2, r2, #3
 80208f2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80208f4:	189b      	adds	r3, r3, r2
 80208f6:	681a      	ldr	r2, [r3, #0]
 80208f8:	685b      	ldr	r3, [r3, #4]
 80208fa:	2900      	cmp	r1, #0
 80208fc:	d04c      	beq.n	8020998 <_dtoa_r+0x614>
 80208fe:	2000      	movs	r0, #0
 8020900:	496b      	ldr	r1, [pc, #428]	@ (8020ab0 <_dtoa_r+0x72c>)
 8020902:	f7e1 fa57 	bl	8001db4 <__aeabi_ddiv>
 8020906:	0032      	movs	r2, r6
 8020908:	003b      	movs	r3, r7
 802090a:	f7e2 f95f 	bl	8002bcc <__aeabi_dsub>
 802090e:	9a08      	ldr	r2, [sp, #32]
 8020910:	0006      	movs	r6, r0
 8020912:	4694      	mov	ip, r2
 8020914:	000f      	movs	r7, r1
 8020916:	9b08      	ldr	r3, [sp, #32]
 8020918:	9316      	str	r3, [sp, #88]	@ 0x58
 802091a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802091c:	4463      	add	r3, ip
 802091e:	9311      	str	r3, [sp, #68]	@ 0x44
 8020920:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020922:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020924:	f7e2 fd10 	bl	8003348 <__aeabi_d2iz>
 8020928:	0005      	movs	r5, r0
 802092a:	f7e2 fd49 	bl	80033c0 <__aeabi_i2d>
 802092e:	0002      	movs	r2, r0
 8020930:	000b      	movs	r3, r1
 8020932:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020934:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020936:	f7e2 f949 	bl	8002bcc <__aeabi_dsub>
 802093a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802093c:	3530      	adds	r5, #48	@ 0x30
 802093e:	1c5c      	adds	r4, r3, #1
 8020940:	701d      	strb	r5, [r3, #0]
 8020942:	0032      	movs	r2, r6
 8020944:	003b      	movs	r3, r7
 8020946:	900a      	str	r0, [sp, #40]	@ 0x28
 8020948:	910b      	str	r1, [sp, #44]	@ 0x2c
 802094a:	f7df fdb7 	bl	80004bc <__aeabi_dcmplt>
 802094e:	2800      	cmp	r0, #0
 8020950:	d16a      	bne.n	8020a28 <_dtoa_r+0x6a4>
 8020952:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020956:	2000      	movs	r0, #0
 8020958:	4950      	ldr	r1, [pc, #320]	@ (8020a9c <_dtoa_r+0x718>)
 802095a:	f7e2 f937 	bl	8002bcc <__aeabi_dsub>
 802095e:	0032      	movs	r2, r6
 8020960:	003b      	movs	r3, r7
 8020962:	f7df fdab 	bl	80004bc <__aeabi_dcmplt>
 8020966:	2800      	cmp	r0, #0
 8020968:	d000      	beq.n	802096c <_dtoa_r+0x5e8>
 802096a:	e0a5      	b.n	8020ab8 <_dtoa_r+0x734>
 802096c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802096e:	42a3      	cmp	r3, r4
 8020970:	d100      	bne.n	8020974 <_dtoa_r+0x5f0>
 8020972:	e742      	b.n	80207fa <_dtoa_r+0x476>
 8020974:	2200      	movs	r2, #0
 8020976:	0030      	movs	r0, r6
 8020978:	0039      	movs	r1, r7
 802097a:	4b49      	ldr	r3, [pc, #292]	@ (8020aa0 <_dtoa_r+0x71c>)
 802097c:	f7e1 fe5e 	bl	800263c <__aeabi_dmul>
 8020980:	2200      	movs	r2, #0
 8020982:	0006      	movs	r6, r0
 8020984:	000f      	movs	r7, r1
 8020986:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802098a:	4b45      	ldr	r3, [pc, #276]	@ (8020aa0 <_dtoa_r+0x71c>)
 802098c:	f7e1 fe56 	bl	800263c <__aeabi_dmul>
 8020990:	9416      	str	r4, [sp, #88]	@ 0x58
 8020992:	900a      	str	r0, [sp, #40]	@ 0x28
 8020994:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020996:	e7c3      	b.n	8020920 <_dtoa_r+0x59c>
 8020998:	0030      	movs	r0, r6
 802099a:	0039      	movs	r1, r7
 802099c:	f7e1 fe4e 	bl	800263c <__aeabi_dmul>
 80209a0:	9d08      	ldr	r5, [sp, #32]
 80209a2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80209a4:	002b      	movs	r3, r5
 80209a6:	4694      	mov	ip, r2
 80209a8:	9016      	str	r0, [sp, #88]	@ 0x58
 80209aa:	9117      	str	r1, [sp, #92]	@ 0x5c
 80209ac:	4463      	add	r3, ip
 80209ae:	9319      	str	r3, [sp, #100]	@ 0x64
 80209b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80209b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80209b4:	f7e2 fcc8 	bl	8003348 <__aeabi_d2iz>
 80209b8:	0004      	movs	r4, r0
 80209ba:	f7e2 fd01 	bl	80033c0 <__aeabi_i2d>
 80209be:	000b      	movs	r3, r1
 80209c0:	0002      	movs	r2, r0
 80209c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80209c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80209c6:	f7e2 f901 	bl	8002bcc <__aeabi_dsub>
 80209ca:	3430      	adds	r4, #48	@ 0x30
 80209cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80209ce:	702c      	strb	r4, [r5, #0]
 80209d0:	3501      	adds	r5, #1
 80209d2:	0006      	movs	r6, r0
 80209d4:	000f      	movs	r7, r1
 80209d6:	42ab      	cmp	r3, r5
 80209d8:	d129      	bne.n	8020a2e <_dtoa_r+0x6aa>
 80209da:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80209dc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80209de:	9b08      	ldr	r3, [sp, #32]
 80209e0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80209e2:	469c      	mov	ip, r3
 80209e4:	2200      	movs	r2, #0
 80209e6:	4b32      	ldr	r3, [pc, #200]	@ (8020ab0 <_dtoa_r+0x72c>)
 80209e8:	4464      	add	r4, ip
 80209ea:	f7e0 fe7f 	bl	80016ec <__aeabi_dadd>
 80209ee:	0002      	movs	r2, r0
 80209f0:	000b      	movs	r3, r1
 80209f2:	0030      	movs	r0, r6
 80209f4:	0039      	movs	r1, r7
 80209f6:	f7df fd75 	bl	80004e4 <__aeabi_dcmpgt>
 80209fa:	2800      	cmp	r0, #0
 80209fc:	d15c      	bne.n	8020ab8 <_dtoa_r+0x734>
 80209fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020a00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020a02:	2000      	movs	r0, #0
 8020a04:	492a      	ldr	r1, [pc, #168]	@ (8020ab0 <_dtoa_r+0x72c>)
 8020a06:	f7e2 f8e1 	bl	8002bcc <__aeabi_dsub>
 8020a0a:	0002      	movs	r2, r0
 8020a0c:	000b      	movs	r3, r1
 8020a0e:	0030      	movs	r0, r6
 8020a10:	0039      	movs	r1, r7
 8020a12:	f7df fd53 	bl	80004bc <__aeabi_dcmplt>
 8020a16:	2800      	cmp	r0, #0
 8020a18:	d100      	bne.n	8020a1c <_dtoa_r+0x698>
 8020a1a:	e6ee      	b.n	80207fa <_dtoa_r+0x476>
 8020a1c:	0023      	movs	r3, r4
 8020a1e:	3c01      	subs	r4, #1
 8020a20:	7822      	ldrb	r2, [r4, #0]
 8020a22:	2a30      	cmp	r2, #48	@ 0x30
 8020a24:	d0fa      	beq.n	8020a1c <_dtoa_r+0x698>
 8020a26:	001c      	movs	r4, r3
 8020a28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020a2a:	9304      	str	r3, [sp, #16]
 8020a2c:	e73e      	b.n	80208ac <_dtoa_r+0x528>
 8020a2e:	2200      	movs	r2, #0
 8020a30:	4b1b      	ldr	r3, [pc, #108]	@ (8020aa0 <_dtoa_r+0x71c>)
 8020a32:	f7e1 fe03 	bl	800263c <__aeabi_dmul>
 8020a36:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a3a:	e7b9      	b.n	80209b0 <_dtoa_r+0x62c>
 8020a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a3e:	2b00      	cmp	r3, #0
 8020a40:	d10c      	bne.n	8020a5c <_dtoa_r+0x6d8>
 8020a42:	9806      	ldr	r0, [sp, #24]
 8020a44:	9907      	ldr	r1, [sp, #28]
 8020a46:	2200      	movs	r2, #0
 8020a48:	4b18      	ldr	r3, [pc, #96]	@ (8020aac <_dtoa_r+0x728>)
 8020a4a:	f7e1 fdf7 	bl	800263c <__aeabi_dmul>
 8020a4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020a50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020a52:	f7df fd51 	bl	80004f8 <__aeabi_dcmpge>
 8020a56:	2800      	cmp	r0, #0
 8020a58:	d100      	bne.n	8020a5c <_dtoa_r+0x6d8>
 8020a5a:	e164      	b.n	8020d26 <_dtoa_r+0x9a2>
 8020a5c:	2600      	movs	r6, #0
 8020a5e:	0037      	movs	r7, r6
 8020a60:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020a62:	9c08      	ldr	r4, [sp, #32]
 8020a64:	43db      	mvns	r3, r3
 8020a66:	930c      	str	r3, [sp, #48]	@ 0x30
 8020a68:	2300      	movs	r3, #0
 8020a6a:	9304      	str	r3, [sp, #16]
 8020a6c:	0031      	movs	r1, r6
 8020a6e:	9803      	ldr	r0, [sp, #12]
 8020a70:	f000 ff32 	bl	80218d8 <_Bfree>
 8020a74:	2f00      	cmp	r7, #0
 8020a76:	d0d7      	beq.n	8020a28 <_dtoa_r+0x6a4>
 8020a78:	9b04      	ldr	r3, [sp, #16]
 8020a7a:	2b00      	cmp	r3, #0
 8020a7c:	d005      	beq.n	8020a8a <_dtoa_r+0x706>
 8020a7e:	42bb      	cmp	r3, r7
 8020a80:	d003      	beq.n	8020a8a <_dtoa_r+0x706>
 8020a82:	0019      	movs	r1, r3
 8020a84:	9803      	ldr	r0, [sp, #12]
 8020a86:	f000 ff27 	bl	80218d8 <_Bfree>
 8020a8a:	0039      	movs	r1, r7
 8020a8c:	9803      	ldr	r0, [sp, #12]
 8020a8e:	f000 ff23 	bl	80218d8 <_Bfree>
 8020a92:	e7c9      	b.n	8020a28 <_dtoa_r+0x6a4>
 8020a94:	08025d58 	.word	0x08025d58
 8020a98:	08025d30 	.word	0x08025d30
 8020a9c:	3ff00000 	.word	0x3ff00000
 8020aa0:	40240000 	.word	0x40240000
 8020aa4:	401c0000 	.word	0x401c0000
 8020aa8:	fcc00000 	.word	0xfcc00000
 8020aac:	40140000 	.word	0x40140000
 8020ab0:	3fe00000 	.word	0x3fe00000
 8020ab4:	9b04      	ldr	r3, [sp, #16]
 8020ab6:	930c      	str	r3, [sp, #48]	@ 0x30
 8020ab8:	0023      	movs	r3, r4
 8020aba:	001c      	movs	r4, r3
 8020abc:	3b01      	subs	r3, #1
 8020abe:	781a      	ldrb	r2, [r3, #0]
 8020ac0:	2a39      	cmp	r2, #57	@ 0x39
 8020ac2:	d108      	bne.n	8020ad6 <_dtoa_r+0x752>
 8020ac4:	9a08      	ldr	r2, [sp, #32]
 8020ac6:	429a      	cmp	r2, r3
 8020ac8:	d1f7      	bne.n	8020aba <_dtoa_r+0x736>
 8020aca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020acc:	9908      	ldr	r1, [sp, #32]
 8020ace:	3201      	adds	r2, #1
 8020ad0:	920c      	str	r2, [sp, #48]	@ 0x30
 8020ad2:	2230      	movs	r2, #48	@ 0x30
 8020ad4:	700a      	strb	r2, [r1, #0]
 8020ad6:	781a      	ldrb	r2, [r3, #0]
 8020ad8:	3201      	adds	r2, #1
 8020ada:	701a      	strb	r2, [r3, #0]
 8020adc:	e7a4      	b.n	8020a28 <_dtoa_r+0x6a4>
 8020ade:	2200      	movs	r2, #0
 8020ae0:	4bc6      	ldr	r3, [pc, #792]	@ (8020dfc <_dtoa_r+0xa78>)
 8020ae2:	f7e1 fdab 	bl	800263c <__aeabi_dmul>
 8020ae6:	2200      	movs	r2, #0
 8020ae8:	2300      	movs	r3, #0
 8020aea:	0006      	movs	r6, r0
 8020aec:	000f      	movs	r7, r1
 8020aee:	f7df fcdf 	bl	80004b0 <__aeabi_dcmpeq>
 8020af2:	2800      	cmp	r0, #0
 8020af4:	d100      	bne.n	8020af8 <_dtoa_r+0x774>
 8020af6:	e6a1      	b.n	802083c <_dtoa_r+0x4b8>
 8020af8:	e6d8      	b.n	80208ac <_dtoa_r+0x528>
 8020afa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020afc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020afe:	9c06      	ldr	r4, [sp, #24]
 8020b00:	2f00      	cmp	r7, #0
 8020b02:	d014      	beq.n	8020b2e <_dtoa_r+0x7aa>
 8020b04:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020b06:	2a01      	cmp	r2, #1
 8020b08:	dd00      	ble.n	8020b0c <_dtoa_r+0x788>
 8020b0a:	e0c8      	b.n	8020c9e <_dtoa_r+0x91a>
 8020b0c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020b0e:	2a00      	cmp	r2, #0
 8020b10:	d100      	bne.n	8020b14 <_dtoa_r+0x790>
 8020b12:	e0be      	b.n	8020c92 <_dtoa_r+0x90e>
 8020b14:	4aba      	ldr	r2, [pc, #744]	@ (8020e00 <_dtoa_r+0xa7c>)
 8020b16:	189b      	adds	r3, r3, r2
 8020b18:	9a06      	ldr	r2, [sp, #24]
 8020b1a:	2101      	movs	r1, #1
 8020b1c:	18d2      	adds	r2, r2, r3
 8020b1e:	9206      	str	r2, [sp, #24]
 8020b20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020b22:	9803      	ldr	r0, [sp, #12]
 8020b24:	18d3      	adds	r3, r2, r3
 8020b26:	930d      	str	r3, [sp, #52]	@ 0x34
 8020b28:	f000 ffda 	bl	8021ae0 <__i2b>
 8020b2c:	0007      	movs	r7, r0
 8020b2e:	2c00      	cmp	r4, #0
 8020b30:	d00e      	beq.n	8020b50 <_dtoa_r+0x7cc>
 8020b32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020b34:	2b00      	cmp	r3, #0
 8020b36:	dd0b      	ble.n	8020b50 <_dtoa_r+0x7cc>
 8020b38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020b3a:	0023      	movs	r3, r4
 8020b3c:	4294      	cmp	r4, r2
 8020b3e:	dd00      	ble.n	8020b42 <_dtoa_r+0x7be>
 8020b40:	0013      	movs	r3, r2
 8020b42:	9a06      	ldr	r2, [sp, #24]
 8020b44:	1ae4      	subs	r4, r4, r3
 8020b46:	1ad2      	subs	r2, r2, r3
 8020b48:	9206      	str	r2, [sp, #24]
 8020b4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020b4c:	1ad3      	subs	r3, r2, r3
 8020b4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020b50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	d01f      	beq.n	8020b96 <_dtoa_r+0x812>
 8020b56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d100      	bne.n	8020b5e <_dtoa_r+0x7da>
 8020b5c:	e0b5      	b.n	8020cca <_dtoa_r+0x946>
 8020b5e:	2d00      	cmp	r5, #0
 8020b60:	d010      	beq.n	8020b84 <_dtoa_r+0x800>
 8020b62:	0039      	movs	r1, r7
 8020b64:	002a      	movs	r2, r5
 8020b66:	9803      	ldr	r0, [sp, #12]
 8020b68:	f001 f884 	bl	8021c74 <__pow5mult>
 8020b6c:	9a05      	ldr	r2, [sp, #20]
 8020b6e:	0001      	movs	r1, r0
 8020b70:	0007      	movs	r7, r0
 8020b72:	9803      	ldr	r0, [sp, #12]
 8020b74:	f000 ffcc 	bl	8021b10 <__multiply>
 8020b78:	0006      	movs	r6, r0
 8020b7a:	9905      	ldr	r1, [sp, #20]
 8020b7c:	9803      	ldr	r0, [sp, #12]
 8020b7e:	f000 feab 	bl	80218d8 <_Bfree>
 8020b82:	9605      	str	r6, [sp, #20]
 8020b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b86:	1b5a      	subs	r2, r3, r5
 8020b88:	42ab      	cmp	r3, r5
 8020b8a:	d004      	beq.n	8020b96 <_dtoa_r+0x812>
 8020b8c:	9905      	ldr	r1, [sp, #20]
 8020b8e:	9803      	ldr	r0, [sp, #12]
 8020b90:	f001 f870 	bl	8021c74 <__pow5mult>
 8020b94:	9005      	str	r0, [sp, #20]
 8020b96:	2101      	movs	r1, #1
 8020b98:	9803      	ldr	r0, [sp, #12]
 8020b9a:	f000 ffa1 	bl	8021ae0 <__i2b>
 8020b9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020ba0:	0006      	movs	r6, r0
 8020ba2:	2b00      	cmp	r3, #0
 8020ba4:	d100      	bne.n	8020ba8 <_dtoa_r+0x824>
 8020ba6:	e1bc      	b.n	8020f22 <_dtoa_r+0xb9e>
 8020ba8:	001a      	movs	r2, r3
 8020baa:	0001      	movs	r1, r0
 8020bac:	9803      	ldr	r0, [sp, #12]
 8020bae:	f001 f861 	bl	8021c74 <__pow5mult>
 8020bb2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020bb4:	0006      	movs	r6, r0
 8020bb6:	2500      	movs	r5, #0
 8020bb8:	2b01      	cmp	r3, #1
 8020bba:	dc16      	bgt.n	8020bea <_dtoa_r+0x866>
 8020bbc:	2500      	movs	r5, #0
 8020bbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020bc0:	42ab      	cmp	r3, r5
 8020bc2:	d10e      	bne.n	8020be2 <_dtoa_r+0x85e>
 8020bc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020bc6:	031b      	lsls	r3, r3, #12
 8020bc8:	42ab      	cmp	r3, r5
 8020bca:	d10a      	bne.n	8020be2 <_dtoa_r+0x85e>
 8020bcc:	4b8d      	ldr	r3, [pc, #564]	@ (8020e04 <_dtoa_r+0xa80>)
 8020bce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020bd0:	4213      	tst	r3, r2
 8020bd2:	d006      	beq.n	8020be2 <_dtoa_r+0x85e>
 8020bd4:	9b06      	ldr	r3, [sp, #24]
 8020bd6:	3501      	adds	r5, #1
 8020bd8:	3301      	adds	r3, #1
 8020bda:	9306      	str	r3, [sp, #24]
 8020bdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020bde:	3301      	adds	r3, #1
 8020be0:	930d      	str	r3, [sp, #52]	@ 0x34
 8020be2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020be4:	2001      	movs	r0, #1
 8020be6:	2b00      	cmp	r3, #0
 8020be8:	d008      	beq.n	8020bfc <_dtoa_r+0x878>
 8020bea:	6933      	ldr	r3, [r6, #16]
 8020bec:	3303      	adds	r3, #3
 8020bee:	009b      	lsls	r3, r3, #2
 8020bf0:	18f3      	adds	r3, r6, r3
 8020bf2:	6858      	ldr	r0, [r3, #4]
 8020bf4:	f000 ff24 	bl	8021a40 <__hi0bits>
 8020bf8:	2320      	movs	r3, #32
 8020bfa:	1a18      	subs	r0, r3, r0
 8020bfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020bfe:	1818      	adds	r0, r3, r0
 8020c00:	0002      	movs	r2, r0
 8020c02:	231f      	movs	r3, #31
 8020c04:	401a      	ands	r2, r3
 8020c06:	4218      	tst	r0, r3
 8020c08:	d065      	beq.n	8020cd6 <_dtoa_r+0x952>
 8020c0a:	3301      	adds	r3, #1
 8020c0c:	1a9b      	subs	r3, r3, r2
 8020c0e:	2b04      	cmp	r3, #4
 8020c10:	dd5d      	ble.n	8020cce <_dtoa_r+0x94a>
 8020c12:	231c      	movs	r3, #28
 8020c14:	1a9b      	subs	r3, r3, r2
 8020c16:	9a06      	ldr	r2, [sp, #24]
 8020c18:	18e4      	adds	r4, r4, r3
 8020c1a:	18d2      	adds	r2, r2, r3
 8020c1c:	9206      	str	r2, [sp, #24]
 8020c1e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020c20:	18d3      	adds	r3, r2, r3
 8020c22:	930d      	str	r3, [sp, #52]	@ 0x34
 8020c24:	9b06      	ldr	r3, [sp, #24]
 8020c26:	2b00      	cmp	r3, #0
 8020c28:	dd05      	ble.n	8020c36 <_dtoa_r+0x8b2>
 8020c2a:	001a      	movs	r2, r3
 8020c2c:	9905      	ldr	r1, [sp, #20]
 8020c2e:	9803      	ldr	r0, [sp, #12]
 8020c30:	f001 f87c 	bl	8021d2c <__lshift>
 8020c34:	9005      	str	r0, [sp, #20]
 8020c36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020c38:	2b00      	cmp	r3, #0
 8020c3a:	dd05      	ble.n	8020c48 <_dtoa_r+0x8c4>
 8020c3c:	0031      	movs	r1, r6
 8020c3e:	001a      	movs	r2, r3
 8020c40:	9803      	ldr	r0, [sp, #12]
 8020c42:	f001 f873 	bl	8021d2c <__lshift>
 8020c46:	0006      	movs	r6, r0
 8020c48:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020c4a:	2b00      	cmp	r3, #0
 8020c4c:	d045      	beq.n	8020cda <_dtoa_r+0x956>
 8020c4e:	0031      	movs	r1, r6
 8020c50:	9805      	ldr	r0, [sp, #20]
 8020c52:	f001 f8d7 	bl	8021e04 <__mcmp>
 8020c56:	2800      	cmp	r0, #0
 8020c58:	da3f      	bge.n	8020cda <_dtoa_r+0x956>
 8020c5a:	9b04      	ldr	r3, [sp, #16]
 8020c5c:	220a      	movs	r2, #10
 8020c5e:	3b01      	subs	r3, #1
 8020c60:	930c      	str	r3, [sp, #48]	@ 0x30
 8020c62:	9905      	ldr	r1, [sp, #20]
 8020c64:	2300      	movs	r3, #0
 8020c66:	9803      	ldr	r0, [sp, #12]
 8020c68:	f000 fe5a 	bl	8021920 <__multadd>
 8020c6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c6e:	9005      	str	r0, [sp, #20]
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	d100      	bne.n	8020c76 <_dtoa_r+0x8f2>
 8020c74:	e15c      	b.n	8020f30 <_dtoa_r+0xbac>
 8020c76:	2300      	movs	r3, #0
 8020c78:	0039      	movs	r1, r7
 8020c7a:	220a      	movs	r2, #10
 8020c7c:	9803      	ldr	r0, [sp, #12]
 8020c7e:	f000 fe4f 	bl	8021920 <__multadd>
 8020c82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020c84:	0007      	movs	r7, r0
 8020c86:	2b00      	cmp	r3, #0
 8020c88:	dc55      	bgt.n	8020d36 <_dtoa_r+0x9b2>
 8020c8a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020c8c:	2b02      	cmp	r3, #2
 8020c8e:	dc2d      	bgt.n	8020cec <_dtoa_r+0x968>
 8020c90:	e051      	b.n	8020d36 <_dtoa_r+0x9b2>
 8020c92:	2336      	movs	r3, #54	@ 0x36
 8020c94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020c96:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020c98:	9c06      	ldr	r4, [sp, #24]
 8020c9a:	1a9b      	subs	r3, r3, r2
 8020c9c:	e73c      	b.n	8020b18 <_dtoa_r+0x794>
 8020c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ca0:	1e5d      	subs	r5, r3, #1
 8020ca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020ca4:	42ab      	cmp	r3, r5
 8020ca6:	db08      	blt.n	8020cba <_dtoa_r+0x936>
 8020ca8:	1b5d      	subs	r5, r3, r5
 8020caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020cac:	9c06      	ldr	r4, [sp, #24]
 8020cae:	2b00      	cmp	r3, #0
 8020cb0:	db00      	blt.n	8020cb4 <_dtoa_r+0x930>
 8020cb2:	e731      	b.n	8020b18 <_dtoa_r+0x794>
 8020cb4:	1ae4      	subs	r4, r4, r3
 8020cb6:	2300      	movs	r3, #0
 8020cb8:	e72e      	b.n	8020b18 <_dtoa_r+0x794>
 8020cba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020cbc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020cbe:	1aeb      	subs	r3, r5, r3
 8020cc0:	18d3      	adds	r3, r2, r3
 8020cc2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020cc4:	9314      	str	r3, [sp, #80]	@ 0x50
 8020cc6:	2500      	movs	r5, #0
 8020cc8:	e7ef      	b.n	8020caa <_dtoa_r+0x926>
 8020cca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020ccc:	e75e      	b.n	8020b8c <_dtoa_r+0x808>
 8020cce:	2b04      	cmp	r3, #4
 8020cd0:	d0a8      	beq.n	8020c24 <_dtoa_r+0x8a0>
 8020cd2:	331c      	adds	r3, #28
 8020cd4:	e79f      	b.n	8020c16 <_dtoa_r+0x892>
 8020cd6:	0013      	movs	r3, r2
 8020cd8:	e7fb      	b.n	8020cd2 <_dtoa_r+0x94e>
 8020cda:	9b04      	ldr	r3, [sp, #16]
 8020cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8020cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ce0:	930e      	str	r3, [sp, #56]	@ 0x38
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	dc23      	bgt.n	8020d2e <_dtoa_r+0x9aa>
 8020ce6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020ce8:	2b02      	cmp	r3, #2
 8020cea:	dd20      	ble.n	8020d2e <_dtoa_r+0x9aa>
 8020cec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	d000      	beq.n	8020cf4 <_dtoa_r+0x970>
 8020cf2:	e6b5      	b.n	8020a60 <_dtoa_r+0x6dc>
 8020cf4:	0031      	movs	r1, r6
 8020cf6:	2205      	movs	r2, #5
 8020cf8:	9803      	ldr	r0, [sp, #12]
 8020cfa:	f000 fe11 	bl	8021920 <__multadd>
 8020cfe:	0006      	movs	r6, r0
 8020d00:	0001      	movs	r1, r0
 8020d02:	9805      	ldr	r0, [sp, #20]
 8020d04:	f001 f87e 	bl	8021e04 <__mcmp>
 8020d08:	2800      	cmp	r0, #0
 8020d0a:	dc00      	bgt.n	8020d0e <_dtoa_r+0x98a>
 8020d0c:	e6a8      	b.n	8020a60 <_dtoa_r+0x6dc>
 8020d0e:	9b08      	ldr	r3, [sp, #32]
 8020d10:	9a08      	ldr	r2, [sp, #32]
 8020d12:	1c5c      	adds	r4, r3, #1
 8020d14:	2331      	movs	r3, #49	@ 0x31
 8020d16:	7013      	strb	r3, [r2, #0]
 8020d18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020d1a:	3301      	adds	r3, #1
 8020d1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d1e:	e6a3      	b.n	8020a68 <_dtoa_r+0x6e4>
 8020d20:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020d22:	0037      	movs	r7, r6
 8020d24:	e7f3      	b.n	8020d0e <_dtoa_r+0x98a>
 8020d26:	9b04      	ldr	r3, [sp, #16]
 8020d28:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020d2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d2c:	e7f9      	b.n	8020d22 <_dtoa_r+0x99e>
 8020d2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	d100      	bne.n	8020d36 <_dtoa_r+0x9b2>
 8020d34:	e100      	b.n	8020f38 <_dtoa_r+0xbb4>
 8020d36:	2c00      	cmp	r4, #0
 8020d38:	dd05      	ble.n	8020d46 <_dtoa_r+0x9c2>
 8020d3a:	0039      	movs	r1, r7
 8020d3c:	0022      	movs	r2, r4
 8020d3e:	9803      	ldr	r0, [sp, #12]
 8020d40:	f000 fff4 	bl	8021d2c <__lshift>
 8020d44:	0007      	movs	r7, r0
 8020d46:	0038      	movs	r0, r7
 8020d48:	2d00      	cmp	r5, #0
 8020d4a:	d018      	beq.n	8020d7e <_dtoa_r+0x9fa>
 8020d4c:	6879      	ldr	r1, [r7, #4]
 8020d4e:	9803      	ldr	r0, [sp, #12]
 8020d50:	f000 fd7e 	bl	8021850 <_Balloc>
 8020d54:	1e04      	subs	r4, r0, #0
 8020d56:	d105      	bne.n	8020d64 <_dtoa_r+0x9e0>
 8020d58:	0022      	movs	r2, r4
 8020d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8020e08 <_dtoa_r+0xa84>)
 8020d5c:	482b      	ldr	r0, [pc, #172]	@ (8020e0c <_dtoa_r+0xa88>)
 8020d5e:	492c      	ldr	r1, [pc, #176]	@ (8020e10 <_dtoa_r+0xa8c>)
 8020d60:	f7ff fb25 	bl	80203ae <_dtoa_r+0x2a>
 8020d64:	0039      	movs	r1, r7
 8020d66:	693a      	ldr	r2, [r7, #16]
 8020d68:	310c      	adds	r1, #12
 8020d6a:	3202      	adds	r2, #2
 8020d6c:	0092      	lsls	r2, r2, #2
 8020d6e:	300c      	adds	r0, #12
 8020d70:	f7ff fa6a 	bl	8020248 <memcpy>
 8020d74:	2201      	movs	r2, #1
 8020d76:	0021      	movs	r1, r4
 8020d78:	9803      	ldr	r0, [sp, #12]
 8020d7a:	f000 ffd7 	bl	8021d2c <__lshift>
 8020d7e:	9b08      	ldr	r3, [sp, #32]
 8020d80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020d82:	9306      	str	r3, [sp, #24]
 8020d84:	3b01      	subs	r3, #1
 8020d86:	189b      	adds	r3, r3, r2
 8020d88:	2201      	movs	r2, #1
 8020d8a:	9704      	str	r7, [sp, #16]
 8020d8c:	0007      	movs	r7, r0
 8020d8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020d90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d92:	4013      	ands	r3, r2
 8020d94:	930e      	str	r3, [sp, #56]	@ 0x38
 8020d96:	0031      	movs	r1, r6
 8020d98:	9805      	ldr	r0, [sp, #20]
 8020d9a:	f7ff fa65 	bl	8020268 <quorem>
 8020d9e:	9904      	ldr	r1, [sp, #16]
 8020da0:	0005      	movs	r5, r0
 8020da2:	900a      	str	r0, [sp, #40]	@ 0x28
 8020da4:	9805      	ldr	r0, [sp, #20]
 8020da6:	f001 f82d 	bl	8021e04 <__mcmp>
 8020daa:	003a      	movs	r2, r7
 8020dac:	900d      	str	r0, [sp, #52]	@ 0x34
 8020dae:	0031      	movs	r1, r6
 8020db0:	9803      	ldr	r0, [sp, #12]
 8020db2:	f001 f843 	bl	8021e3c <__mdiff>
 8020db6:	2201      	movs	r2, #1
 8020db8:	68c3      	ldr	r3, [r0, #12]
 8020dba:	0004      	movs	r4, r0
 8020dbc:	3530      	adds	r5, #48	@ 0x30
 8020dbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8020dc0:	2b00      	cmp	r3, #0
 8020dc2:	d104      	bne.n	8020dce <_dtoa_r+0xa4a>
 8020dc4:	0001      	movs	r1, r0
 8020dc6:	9805      	ldr	r0, [sp, #20]
 8020dc8:	f001 f81c 	bl	8021e04 <__mcmp>
 8020dcc:	9009      	str	r0, [sp, #36]	@ 0x24
 8020dce:	0021      	movs	r1, r4
 8020dd0:	9803      	ldr	r0, [sp, #12]
 8020dd2:	f000 fd81 	bl	80218d8 <_Bfree>
 8020dd6:	9b06      	ldr	r3, [sp, #24]
 8020dd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020dda:	1c5c      	adds	r4, r3, #1
 8020ddc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020dde:	4313      	orrs	r3, r2
 8020de0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020de2:	4313      	orrs	r3, r2
 8020de4:	d116      	bne.n	8020e14 <_dtoa_r+0xa90>
 8020de6:	2d39      	cmp	r5, #57	@ 0x39
 8020de8:	d02f      	beq.n	8020e4a <_dtoa_r+0xac6>
 8020dea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020dec:	2b00      	cmp	r3, #0
 8020dee:	dd01      	ble.n	8020df4 <_dtoa_r+0xa70>
 8020df0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020df2:	3531      	adds	r5, #49	@ 0x31
 8020df4:	9b06      	ldr	r3, [sp, #24]
 8020df6:	701d      	strb	r5, [r3, #0]
 8020df8:	e638      	b.n	8020a6c <_dtoa_r+0x6e8>
 8020dfa:	46c0      	nop			@ (mov r8, r8)
 8020dfc:	40240000 	.word	0x40240000
 8020e00:	00000433 	.word	0x00000433
 8020e04:	7ff00000 	.word	0x7ff00000
 8020e08:	08025c59 	.word	0x08025c59
 8020e0c:	08025c01 	.word	0x08025c01
 8020e10:	000002ef 	.word	0x000002ef
 8020e14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	db04      	blt.n	8020e24 <_dtoa_r+0xaa0>
 8020e1a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020e1c:	4313      	orrs	r3, r2
 8020e1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020e20:	4313      	orrs	r3, r2
 8020e22:	d11e      	bne.n	8020e62 <_dtoa_r+0xade>
 8020e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	dde4      	ble.n	8020df4 <_dtoa_r+0xa70>
 8020e2a:	9905      	ldr	r1, [sp, #20]
 8020e2c:	2201      	movs	r2, #1
 8020e2e:	9803      	ldr	r0, [sp, #12]
 8020e30:	f000 ff7c 	bl	8021d2c <__lshift>
 8020e34:	0031      	movs	r1, r6
 8020e36:	9005      	str	r0, [sp, #20]
 8020e38:	f000 ffe4 	bl	8021e04 <__mcmp>
 8020e3c:	2800      	cmp	r0, #0
 8020e3e:	dc02      	bgt.n	8020e46 <_dtoa_r+0xac2>
 8020e40:	d1d8      	bne.n	8020df4 <_dtoa_r+0xa70>
 8020e42:	07eb      	lsls	r3, r5, #31
 8020e44:	d5d6      	bpl.n	8020df4 <_dtoa_r+0xa70>
 8020e46:	2d39      	cmp	r5, #57	@ 0x39
 8020e48:	d1d2      	bne.n	8020df0 <_dtoa_r+0xa6c>
 8020e4a:	2339      	movs	r3, #57	@ 0x39
 8020e4c:	9a06      	ldr	r2, [sp, #24]
 8020e4e:	7013      	strb	r3, [r2, #0]
 8020e50:	0023      	movs	r3, r4
 8020e52:	001c      	movs	r4, r3
 8020e54:	3b01      	subs	r3, #1
 8020e56:	781a      	ldrb	r2, [r3, #0]
 8020e58:	2a39      	cmp	r2, #57	@ 0x39
 8020e5a:	d04f      	beq.n	8020efc <_dtoa_r+0xb78>
 8020e5c:	3201      	adds	r2, #1
 8020e5e:	701a      	strb	r2, [r3, #0]
 8020e60:	e604      	b.n	8020a6c <_dtoa_r+0x6e8>
 8020e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e64:	2b00      	cmp	r3, #0
 8020e66:	dd03      	ble.n	8020e70 <_dtoa_r+0xaec>
 8020e68:	2d39      	cmp	r5, #57	@ 0x39
 8020e6a:	d0ee      	beq.n	8020e4a <_dtoa_r+0xac6>
 8020e6c:	3501      	adds	r5, #1
 8020e6e:	e7c1      	b.n	8020df4 <_dtoa_r+0xa70>
 8020e70:	9b06      	ldr	r3, [sp, #24]
 8020e72:	9a06      	ldr	r2, [sp, #24]
 8020e74:	701d      	strb	r5, [r3, #0]
 8020e76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e78:	4293      	cmp	r3, r2
 8020e7a:	d02a      	beq.n	8020ed2 <_dtoa_r+0xb4e>
 8020e7c:	2300      	movs	r3, #0
 8020e7e:	220a      	movs	r2, #10
 8020e80:	9905      	ldr	r1, [sp, #20]
 8020e82:	9803      	ldr	r0, [sp, #12]
 8020e84:	f000 fd4c 	bl	8021920 <__multadd>
 8020e88:	9b04      	ldr	r3, [sp, #16]
 8020e8a:	9005      	str	r0, [sp, #20]
 8020e8c:	42bb      	cmp	r3, r7
 8020e8e:	d109      	bne.n	8020ea4 <_dtoa_r+0xb20>
 8020e90:	2300      	movs	r3, #0
 8020e92:	220a      	movs	r2, #10
 8020e94:	9904      	ldr	r1, [sp, #16]
 8020e96:	9803      	ldr	r0, [sp, #12]
 8020e98:	f000 fd42 	bl	8021920 <__multadd>
 8020e9c:	9004      	str	r0, [sp, #16]
 8020e9e:	0007      	movs	r7, r0
 8020ea0:	9406      	str	r4, [sp, #24]
 8020ea2:	e778      	b.n	8020d96 <_dtoa_r+0xa12>
 8020ea4:	9904      	ldr	r1, [sp, #16]
 8020ea6:	2300      	movs	r3, #0
 8020ea8:	220a      	movs	r2, #10
 8020eaa:	9803      	ldr	r0, [sp, #12]
 8020eac:	f000 fd38 	bl	8021920 <__multadd>
 8020eb0:	2300      	movs	r3, #0
 8020eb2:	9004      	str	r0, [sp, #16]
 8020eb4:	220a      	movs	r2, #10
 8020eb6:	0039      	movs	r1, r7
 8020eb8:	9803      	ldr	r0, [sp, #12]
 8020eba:	f000 fd31 	bl	8021920 <__multadd>
 8020ebe:	e7ee      	b.n	8020e9e <_dtoa_r+0xb1a>
 8020ec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020ec2:	2401      	movs	r4, #1
 8020ec4:	2b00      	cmp	r3, #0
 8020ec6:	dd00      	ble.n	8020eca <_dtoa_r+0xb46>
 8020ec8:	001c      	movs	r4, r3
 8020eca:	9b08      	ldr	r3, [sp, #32]
 8020ecc:	191c      	adds	r4, r3, r4
 8020ece:	2300      	movs	r3, #0
 8020ed0:	9304      	str	r3, [sp, #16]
 8020ed2:	9905      	ldr	r1, [sp, #20]
 8020ed4:	2201      	movs	r2, #1
 8020ed6:	9803      	ldr	r0, [sp, #12]
 8020ed8:	f000 ff28 	bl	8021d2c <__lshift>
 8020edc:	0031      	movs	r1, r6
 8020ede:	9005      	str	r0, [sp, #20]
 8020ee0:	f000 ff90 	bl	8021e04 <__mcmp>
 8020ee4:	2800      	cmp	r0, #0
 8020ee6:	dcb3      	bgt.n	8020e50 <_dtoa_r+0xacc>
 8020ee8:	d101      	bne.n	8020eee <_dtoa_r+0xb6a>
 8020eea:	07ed      	lsls	r5, r5, #31
 8020eec:	d4b0      	bmi.n	8020e50 <_dtoa_r+0xacc>
 8020eee:	0023      	movs	r3, r4
 8020ef0:	001c      	movs	r4, r3
 8020ef2:	3b01      	subs	r3, #1
 8020ef4:	781a      	ldrb	r2, [r3, #0]
 8020ef6:	2a30      	cmp	r2, #48	@ 0x30
 8020ef8:	d0fa      	beq.n	8020ef0 <_dtoa_r+0xb6c>
 8020efa:	e5b7      	b.n	8020a6c <_dtoa_r+0x6e8>
 8020efc:	9a08      	ldr	r2, [sp, #32]
 8020efe:	429a      	cmp	r2, r3
 8020f00:	d1a7      	bne.n	8020e52 <_dtoa_r+0xace>
 8020f02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020f04:	3301      	adds	r3, #1
 8020f06:	930c      	str	r3, [sp, #48]	@ 0x30
 8020f08:	2331      	movs	r3, #49	@ 0x31
 8020f0a:	7013      	strb	r3, [r2, #0]
 8020f0c:	e5ae      	b.n	8020a6c <_dtoa_r+0x6e8>
 8020f0e:	4b15      	ldr	r3, [pc, #84]	@ (8020f64 <_dtoa_r+0xbe0>)
 8020f10:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020f12:	9308      	str	r3, [sp, #32]
 8020f14:	4b14      	ldr	r3, [pc, #80]	@ (8020f68 <_dtoa_r+0xbe4>)
 8020f16:	2a00      	cmp	r2, #0
 8020f18:	d001      	beq.n	8020f1e <_dtoa_r+0xb9a>
 8020f1a:	f7ff fa7b 	bl	8020414 <_dtoa_r+0x90>
 8020f1e:	f7ff fa7b 	bl	8020418 <_dtoa_r+0x94>
 8020f22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020f24:	2b01      	cmp	r3, #1
 8020f26:	dc00      	bgt.n	8020f2a <_dtoa_r+0xba6>
 8020f28:	e648      	b.n	8020bbc <_dtoa_r+0x838>
 8020f2a:	2001      	movs	r0, #1
 8020f2c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020f2e:	e665      	b.n	8020bfc <_dtoa_r+0x878>
 8020f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	dc00      	bgt.n	8020f38 <_dtoa_r+0xbb4>
 8020f36:	e6d6      	b.n	8020ce6 <_dtoa_r+0x962>
 8020f38:	2400      	movs	r4, #0
 8020f3a:	0031      	movs	r1, r6
 8020f3c:	9805      	ldr	r0, [sp, #20]
 8020f3e:	f7ff f993 	bl	8020268 <quorem>
 8020f42:	9b08      	ldr	r3, [sp, #32]
 8020f44:	3030      	adds	r0, #48	@ 0x30
 8020f46:	5518      	strb	r0, [r3, r4]
 8020f48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f4a:	3401      	adds	r4, #1
 8020f4c:	0005      	movs	r5, r0
 8020f4e:	429c      	cmp	r4, r3
 8020f50:	dab6      	bge.n	8020ec0 <_dtoa_r+0xb3c>
 8020f52:	2300      	movs	r3, #0
 8020f54:	220a      	movs	r2, #10
 8020f56:	9905      	ldr	r1, [sp, #20]
 8020f58:	9803      	ldr	r0, [sp, #12]
 8020f5a:	f000 fce1 	bl	8021920 <__multadd>
 8020f5e:	9005      	str	r0, [sp, #20]
 8020f60:	e7eb      	b.n	8020f3a <_dtoa_r+0xbb6>
 8020f62:	46c0      	nop			@ (mov r8, r8)
 8020f64:	08025bdd 	.word	0x08025bdd
 8020f68:	08025be5 	.word	0x08025be5

08020f6c <_free_r>:
 8020f6c:	b570      	push	{r4, r5, r6, lr}
 8020f6e:	0005      	movs	r5, r0
 8020f70:	1e0c      	subs	r4, r1, #0
 8020f72:	d010      	beq.n	8020f96 <_free_r+0x2a>
 8020f74:	3c04      	subs	r4, #4
 8020f76:	6823      	ldr	r3, [r4, #0]
 8020f78:	2b00      	cmp	r3, #0
 8020f7a:	da00      	bge.n	8020f7e <_free_r+0x12>
 8020f7c:	18e4      	adds	r4, r4, r3
 8020f7e:	0028      	movs	r0, r5
 8020f80:	f000 fc56 	bl	8021830 <__malloc_lock>
 8020f84:	4a1d      	ldr	r2, [pc, #116]	@ (8020ffc <_free_r+0x90>)
 8020f86:	6813      	ldr	r3, [r2, #0]
 8020f88:	2b00      	cmp	r3, #0
 8020f8a:	d105      	bne.n	8020f98 <_free_r+0x2c>
 8020f8c:	6063      	str	r3, [r4, #4]
 8020f8e:	6014      	str	r4, [r2, #0]
 8020f90:	0028      	movs	r0, r5
 8020f92:	f000 fc55 	bl	8021840 <__malloc_unlock>
 8020f96:	bd70      	pop	{r4, r5, r6, pc}
 8020f98:	42a3      	cmp	r3, r4
 8020f9a:	d908      	bls.n	8020fae <_free_r+0x42>
 8020f9c:	6820      	ldr	r0, [r4, #0]
 8020f9e:	1821      	adds	r1, r4, r0
 8020fa0:	428b      	cmp	r3, r1
 8020fa2:	d1f3      	bne.n	8020f8c <_free_r+0x20>
 8020fa4:	6819      	ldr	r1, [r3, #0]
 8020fa6:	685b      	ldr	r3, [r3, #4]
 8020fa8:	1809      	adds	r1, r1, r0
 8020faa:	6021      	str	r1, [r4, #0]
 8020fac:	e7ee      	b.n	8020f8c <_free_r+0x20>
 8020fae:	001a      	movs	r2, r3
 8020fb0:	685b      	ldr	r3, [r3, #4]
 8020fb2:	2b00      	cmp	r3, #0
 8020fb4:	d001      	beq.n	8020fba <_free_r+0x4e>
 8020fb6:	42a3      	cmp	r3, r4
 8020fb8:	d9f9      	bls.n	8020fae <_free_r+0x42>
 8020fba:	6811      	ldr	r1, [r2, #0]
 8020fbc:	1850      	adds	r0, r2, r1
 8020fbe:	42a0      	cmp	r0, r4
 8020fc0:	d10b      	bne.n	8020fda <_free_r+0x6e>
 8020fc2:	6820      	ldr	r0, [r4, #0]
 8020fc4:	1809      	adds	r1, r1, r0
 8020fc6:	1850      	adds	r0, r2, r1
 8020fc8:	6011      	str	r1, [r2, #0]
 8020fca:	4283      	cmp	r3, r0
 8020fcc:	d1e0      	bne.n	8020f90 <_free_r+0x24>
 8020fce:	6818      	ldr	r0, [r3, #0]
 8020fd0:	685b      	ldr	r3, [r3, #4]
 8020fd2:	1841      	adds	r1, r0, r1
 8020fd4:	6011      	str	r1, [r2, #0]
 8020fd6:	6053      	str	r3, [r2, #4]
 8020fd8:	e7da      	b.n	8020f90 <_free_r+0x24>
 8020fda:	42a0      	cmp	r0, r4
 8020fdc:	d902      	bls.n	8020fe4 <_free_r+0x78>
 8020fde:	230c      	movs	r3, #12
 8020fe0:	602b      	str	r3, [r5, #0]
 8020fe2:	e7d5      	b.n	8020f90 <_free_r+0x24>
 8020fe4:	6820      	ldr	r0, [r4, #0]
 8020fe6:	1821      	adds	r1, r4, r0
 8020fe8:	428b      	cmp	r3, r1
 8020fea:	d103      	bne.n	8020ff4 <_free_r+0x88>
 8020fec:	6819      	ldr	r1, [r3, #0]
 8020fee:	685b      	ldr	r3, [r3, #4]
 8020ff0:	1809      	adds	r1, r1, r0
 8020ff2:	6021      	str	r1, [r4, #0]
 8020ff4:	6063      	str	r3, [r4, #4]
 8020ff6:	6054      	str	r4, [r2, #4]
 8020ff8:	e7ca      	b.n	8020f90 <_free_r+0x24>
 8020ffa:	46c0      	nop			@ (mov r8, r8)
 8020ffc:	200039a8 	.word	0x200039a8

08021000 <rshift>:
 8021000:	0002      	movs	r2, r0
 8021002:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021004:	6904      	ldr	r4, [r0, #16]
 8021006:	b085      	sub	sp, #20
 8021008:	3214      	adds	r2, #20
 802100a:	114b      	asrs	r3, r1, #5
 802100c:	0016      	movs	r6, r2
 802100e:	9302      	str	r3, [sp, #8]
 8021010:	429c      	cmp	r4, r3
 8021012:	dd31      	ble.n	8021078 <rshift+0x78>
 8021014:	261f      	movs	r6, #31
 8021016:	000f      	movs	r7, r1
 8021018:	009b      	lsls	r3, r3, #2
 802101a:	00a5      	lsls	r5, r4, #2
 802101c:	18d3      	adds	r3, r2, r3
 802101e:	4037      	ands	r7, r6
 8021020:	1955      	adds	r5, r2, r5
 8021022:	9300      	str	r3, [sp, #0]
 8021024:	9701      	str	r7, [sp, #4]
 8021026:	4231      	tst	r1, r6
 8021028:	d10d      	bne.n	8021046 <rshift+0x46>
 802102a:	0016      	movs	r6, r2
 802102c:	0019      	movs	r1, r3
 802102e:	428d      	cmp	r5, r1
 8021030:	d836      	bhi.n	80210a0 <rshift+0xa0>
 8021032:	9b00      	ldr	r3, [sp, #0]
 8021034:	2600      	movs	r6, #0
 8021036:	3b03      	subs	r3, #3
 8021038:	429d      	cmp	r5, r3
 802103a:	d302      	bcc.n	8021042 <rshift+0x42>
 802103c:	9b02      	ldr	r3, [sp, #8]
 802103e:	1ae4      	subs	r4, r4, r3
 8021040:	00a6      	lsls	r6, r4, #2
 8021042:	1996      	adds	r6, r2, r6
 8021044:	e018      	b.n	8021078 <rshift+0x78>
 8021046:	2120      	movs	r1, #32
 8021048:	9e01      	ldr	r6, [sp, #4]
 802104a:	9f01      	ldr	r7, [sp, #4]
 802104c:	1b89      	subs	r1, r1, r6
 802104e:	9e00      	ldr	r6, [sp, #0]
 8021050:	9103      	str	r1, [sp, #12]
 8021052:	ce02      	ldmia	r6!, {r1}
 8021054:	4694      	mov	ip, r2
 8021056:	40f9      	lsrs	r1, r7
 8021058:	42b5      	cmp	r5, r6
 802105a:	d816      	bhi.n	802108a <rshift+0x8a>
 802105c:	9b00      	ldr	r3, [sp, #0]
 802105e:	2600      	movs	r6, #0
 8021060:	3301      	adds	r3, #1
 8021062:	429d      	cmp	r5, r3
 8021064:	d303      	bcc.n	802106e <rshift+0x6e>
 8021066:	9b02      	ldr	r3, [sp, #8]
 8021068:	1ae4      	subs	r4, r4, r3
 802106a:	00a6      	lsls	r6, r4, #2
 802106c:	3e04      	subs	r6, #4
 802106e:	1996      	adds	r6, r2, r6
 8021070:	6031      	str	r1, [r6, #0]
 8021072:	2900      	cmp	r1, #0
 8021074:	d000      	beq.n	8021078 <rshift+0x78>
 8021076:	3604      	adds	r6, #4
 8021078:	1ab1      	subs	r1, r6, r2
 802107a:	1089      	asrs	r1, r1, #2
 802107c:	6101      	str	r1, [r0, #16]
 802107e:	4296      	cmp	r6, r2
 8021080:	d101      	bne.n	8021086 <rshift+0x86>
 8021082:	2300      	movs	r3, #0
 8021084:	6143      	str	r3, [r0, #20]
 8021086:	b005      	add	sp, #20
 8021088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802108a:	6837      	ldr	r7, [r6, #0]
 802108c:	9b03      	ldr	r3, [sp, #12]
 802108e:	409f      	lsls	r7, r3
 8021090:	430f      	orrs	r7, r1
 8021092:	4661      	mov	r1, ip
 8021094:	c180      	stmia	r1!, {r7}
 8021096:	468c      	mov	ip, r1
 8021098:	9b01      	ldr	r3, [sp, #4]
 802109a:	ce02      	ldmia	r6!, {r1}
 802109c:	40d9      	lsrs	r1, r3
 802109e:	e7db      	b.n	8021058 <rshift+0x58>
 80210a0:	c980      	ldmia	r1!, {r7}
 80210a2:	c680      	stmia	r6!, {r7}
 80210a4:	e7c3      	b.n	802102e <rshift+0x2e>

080210a6 <__hexdig_fun>:
 80210a6:	0002      	movs	r2, r0
 80210a8:	3a30      	subs	r2, #48	@ 0x30
 80210aa:	0003      	movs	r3, r0
 80210ac:	2a09      	cmp	r2, #9
 80210ae:	d802      	bhi.n	80210b6 <__hexdig_fun+0x10>
 80210b0:	3b20      	subs	r3, #32
 80210b2:	b2d8      	uxtb	r0, r3
 80210b4:	4770      	bx	lr
 80210b6:	0002      	movs	r2, r0
 80210b8:	3a61      	subs	r2, #97	@ 0x61
 80210ba:	2a05      	cmp	r2, #5
 80210bc:	d801      	bhi.n	80210c2 <__hexdig_fun+0x1c>
 80210be:	3b47      	subs	r3, #71	@ 0x47
 80210c0:	e7f7      	b.n	80210b2 <__hexdig_fun+0xc>
 80210c2:	001a      	movs	r2, r3
 80210c4:	3a41      	subs	r2, #65	@ 0x41
 80210c6:	2000      	movs	r0, #0
 80210c8:	2a05      	cmp	r2, #5
 80210ca:	d8f3      	bhi.n	80210b4 <__hexdig_fun+0xe>
 80210cc:	3b27      	subs	r3, #39	@ 0x27
 80210ce:	e7f0      	b.n	80210b2 <__hexdig_fun+0xc>

080210d0 <__gethex>:
 80210d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210d2:	b089      	sub	sp, #36	@ 0x24
 80210d4:	9307      	str	r3, [sp, #28]
 80210d6:	680b      	ldr	r3, [r1, #0]
 80210d8:	9201      	str	r2, [sp, #4]
 80210da:	9003      	str	r0, [sp, #12]
 80210dc:	9106      	str	r1, [sp, #24]
 80210de:	1c9a      	adds	r2, r3, #2
 80210e0:	0011      	movs	r1, r2
 80210e2:	3201      	adds	r2, #1
 80210e4:	1e50      	subs	r0, r2, #1
 80210e6:	7800      	ldrb	r0, [r0, #0]
 80210e8:	2830      	cmp	r0, #48	@ 0x30
 80210ea:	d0f9      	beq.n	80210e0 <__gethex+0x10>
 80210ec:	1acb      	subs	r3, r1, r3
 80210ee:	3b02      	subs	r3, #2
 80210f0:	9305      	str	r3, [sp, #20]
 80210f2:	9100      	str	r1, [sp, #0]
 80210f4:	f7ff ffd7 	bl	80210a6 <__hexdig_fun>
 80210f8:	2300      	movs	r3, #0
 80210fa:	001d      	movs	r5, r3
 80210fc:	9302      	str	r3, [sp, #8]
 80210fe:	4298      	cmp	r0, r3
 8021100:	d11e      	bne.n	8021140 <__gethex+0x70>
 8021102:	2201      	movs	r2, #1
 8021104:	49a6      	ldr	r1, [pc, #664]	@ (80213a0 <__gethex+0x2d0>)
 8021106:	9800      	ldr	r0, [sp, #0]
 8021108:	f7fe ffd8 	bl	80200bc <strncmp>
 802110c:	0007      	movs	r7, r0
 802110e:	42a8      	cmp	r0, r5
 8021110:	d000      	beq.n	8021114 <__gethex+0x44>
 8021112:	e06a      	b.n	80211ea <__gethex+0x11a>
 8021114:	9b00      	ldr	r3, [sp, #0]
 8021116:	7858      	ldrb	r0, [r3, #1]
 8021118:	1c5c      	adds	r4, r3, #1
 802111a:	f7ff ffc4 	bl	80210a6 <__hexdig_fun>
 802111e:	2301      	movs	r3, #1
 8021120:	9302      	str	r3, [sp, #8]
 8021122:	42a8      	cmp	r0, r5
 8021124:	d02f      	beq.n	8021186 <__gethex+0xb6>
 8021126:	9400      	str	r4, [sp, #0]
 8021128:	9b00      	ldr	r3, [sp, #0]
 802112a:	7818      	ldrb	r0, [r3, #0]
 802112c:	2830      	cmp	r0, #48	@ 0x30
 802112e:	d009      	beq.n	8021144 <__gethex+0x74>
 8021130:	f7ff ffb9 	bl	80210a6 <__hexdig_fun>
 8021134:	4242      	negs	r2, r0
 8021136:	4142      	adcs	r2, r0
 8021138:	2301      	movs	r3, #1
 802113a:	0025      	movs	r5, r4
 802113c:	9202      	str	r2, [sp, #8]
 802113e:	9305      	str	r3, [sp, #20]
 8021140:	9c00      	ldr	r4, [sp, #0]
 8021142:	e004      	b.n	802114e <__gethex+0x7e>
 8021144:	9b00      	ldr	r3, [sp, #0]
 8021146:	3301      	adds	r3, #1
 8021148:	9300      	str	r3, [sp, #0]
 802114a:	e7ed      	b.n	8021128 <__gethex+0x58>
 802114c:	3401      	adds	r4, #1
 802114e:	7820      	ldrb	r0, [r4, #0]
 8021150:	f7ff ffa9 	bl	80210a6 <__hexdig_fun>
 8021154:	1e07      	subs	r7, r0, #0
 8021156:	d1f9      	bne.n	802114c <__gethex+0x7c>
 8021158:	2201      	movs	r2, #1
 802115a:	0020      	movs	r0, r4
 802115c:	4990      	ldr	r1, [pc, #576]	@ (80213a0 <__gethex+0x2d0>)
 802115e:	f7fe ffad 	bl	80200bc <strncmp>
 8021162:	2800      	cmp	r0, #0
 8021164:	d10d      	bne.n	8021182 <__gethex+0xb2>
 8021166:	2d00      	cmp	r5, #0
 8021168:	d106      	bne.n	8021178 <__gethex+0xa8>
 802116a:	3401      	adds	r4, #1
 802116c:	0025      	movs	r5, r4
 802116e:	7820      	ldrb	r0, [r4, #0]
 8021170:	f7ff ff99 	bl	80210a6 <__hexdig_fun>
 8021174:	2800      	cmp	r0, #0
 8021176:	d102      	bne.n	802117e <__gethex+0xae>
 8021178:	1b2d      	subs	r5, r5, r4
 802117a:	00af      	lsls	r7, r5, #2
 802117c:	e003      	b.n	8021186 <__gethex+0xb6>
 802117e:	3401      	adds	r4, #1
 8021180:	e7f5      	b.n	802116e <__gethex+0x9e>
 8021182:	2d00      	cmp	r5, #0
 8021184:	d1f8      	bne.n	8021178 <__gethex+0xa8>
 8021186:	2220      	movs	r2, #32
 8021188:	7823      	ldrb	r3, [r4, #0]
 802118a:	0026      	movs	r6, r4
 802118c:	4393      	bics	r3, r2
 802118e:	2b50      	cmp	r3, #80	@ 0x50
 8021190:	d11d      	bne.n	80211ce <__gethex+0xfe>
 8021192:	7863      	ldrb	r3, [r4, #1]
 8021194:	2b2b      	cmp	r3, #43	@ 0x2b
 8021196:	d02d      	beq.n	80211f4 <__gethex+0x124>
 8021198:	2b2d      	cmp	r3, #45	@ 0x2d
 802119a:	d02f      	beq.n	80211fc <__gethex+0x12c>
 802119c:	2300      	movs	r3, #0
 802119e:	1c66      	adds	r6, r4, #1
 80211a0:	9304      	str	r3, [sp, #16]
 80211a2:	7830      	ldrb	r0, [r6, #0]
 80211a4:	f7ff ff7f 	bl	80210a6 <__hexdig_fun>
 80211a8:	1e43      	subs	r3, r0, #1
 80211aa:	b2db      	uxtb	r3, r3
 80211ac:	0005      	movs	r5, r0
 80211ae:	2b18      	cmp	r3, #24
 80211b0:	d82a      	bhi.n	8021208 <__gethex+0x138>
 80211b2:	7870      	ldrb	r0, [r6, #1]
 80211b4:	f7ff ff77 	bl	80210a6 <__hexdig_fun>
 80211b8:	1e43      	subs	r3, r0, #1
 80211ba:	b2db      	uxtb	r3, r3
 80211bc:	3601      	adds	r6, #1
 80211be:	3d10      	subs	r5, #16
 80211c0:	2b18      	cmp	r3, #24
 80211c2:	d91d      	bls.n	8021200 <__gethex+0x130>
 80211c4:	9b04      	ldr	r3, [sp, #16]
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	d000      	beq.n	80211cc <__gethex+0xfc>
 80211ca:	426d      	negs	r5, r5
 80211cc:	197f      	adds	r7, r7, r5
 80211ce:	9b06      	ldr	r3, [sp, #24]
 80211d0:	601e      	str	r6, [r3, #0]
 80211d2:	9b02      	ldr	r3, [sp, #8]
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	d019      	beq.n	802120c <__gethex+0x13c>
 80211d8:	9b05      	ldr	r3, [sp, #20]
 80211da:	2606      	movs	r6, #6
 80211dc:	425a      	negs	r2, r3
 80211de:	4153      	adcs	r3, r2
 80211e0:	425b      	negs	r3, r3
 80211e2:	401e      	ands	r6, r3
 80211e4:	0030      	movs	r0, r6
 80211e6:	b009      	add	sp, #36	@ 0x24
 80211e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80211ea:	2301      	movs	r3, #1
 80211ec:	2700      	movs	r7, #0
 80211ee:	9c00      	ldr	r4, [sp, #0]
 80211f0:	9302      	str	r3, [sp, #8]
 80211f2:	e7c8      	b.n	8021186 <__gethex+0xb6>
 80211f4:	2300      	movs	r3, #0
 80211f6:	9304      	str	r3, [sp, #16]
 80211f8:	1ca6      	adds	r6, r4, #2
 80211fa:	e7d2      	b.n	80211a2 <__gethex+0xd2>
 80211fc:	2301      	movs	r3, #1
 80211fe:	e7fa      	b.n	80211f6 <__gethex+0x126>
 8021200:	230a      	movs	r3, #10
 8021202:	435d      	muls	r5, r3
 8021204:	182d      	adds	r5, r5, r0
 8021206:	e7d4      	b.n	80211b2 <__gethex+0xe2>
 8021208:	0026      	movs	r6, r4
 802120a:	e7e0      	b.n	80211ce <__gethex+0xfe>
 802120c:	9b00      	ldr	r3, [sp, #0]
 802120e:	9902      	ldr	r1, [sp, #8]
 8021210:	1ae3      	subs	r3, r4, r3
 8021212:	3b01      	subs	r3, #1
 8021214:	2b07      	cmp	r3, #7
 8021216:	dc0a      	bgt.n	802122e <__gethex+0x15e>
 8021218:	9803      	ldr	r0, [sp, #12]
 802121a:	f000 fb19 	bl	8021850 <_Balloc>
 802121e:	1e05      	subs	r5, r0, #0
 8021220:	d108      	bne.n	8021234 <__gethex+0x164>
 8021222:	002a      	movs	r2, r5
 8021224:	21e4      	movs	r1, #228	@ 0xe4
 8021226:	4b5f      	ldr	r3, [pc, #380]	@ (80213a4 <__gethex+0x2d4>)
 8021228:	485f      	ldr	r0, [pc, #380]	@ (80213a8 <__gethex+0x2d8>)
 802122a:	f001 fbf1 	bl	8022a10 <__assert_func>
 802122e:	3101      	adds	r1, #1
 8021230:	105b      	asrs	r3, r3, #1
 8021232:	e7ef      	b.n	8021214 <__gethex+0x144>
 8021234:	0003      	movs	r3, r0
 8021236:	3314      	adds	r3, #20
 8021238:	9302      	str	r3, [sp, #8]
 802123a:	9305      	str	r3, [sp, #20]
 802123c:	2300      	movs	r3, #0
 802123e:	001e      	movs	r6, r3
 8021240:	9304      	str	r3, [sp, #16]
 8021242:	9b00      	ldr	r3, [sp, #0]
 8021244:	42a3      	cmp	r3, r4
 8021246:	d338      	bcc.n	80212ba <__gethex+0x1ea>
 8021248:	9c05      	ldr	r4, [sp, #20]
 802124a:	9b02      	ldr	r3, [sp, #8]
 802124c:	c440      	stmia	r4!, {r6}
 802124e:	1ae4      	subs	r4, r4, r3
 8021250:	10a4      	asrs	r4, r4, #2
 8021252:	0030      	movs	r0, r6
 8021254:	612c      	str	r4, [r5, #16]
 8021256:	f000 fbf3 	bl	8021a40 <__hi0bits>
 802125a:	9b01      	ldr	r3, [sp, #4]
 802125c:	0164      	lsls	r4, r4, #5
 802125e:	681b      	ldr	r3, [r3, #0]
 8021260:	1a26      	subs	r6, r4, r0
 8021262:	9300      	str	r3, [sp, #0]
 8021264:	429e      	cmp	r6, r3
 8021266:	dd52      	ble.n	802130e <__gethex+0x23e>
 8021268:	1af6      	subs	r6, r6, r3
 802126a:	0031      	movs	r1, r6
 802126c:	0028      	movs	r0, r5
 802126e:	f000 ff96 	bl	802219e <__any_on>
 8021272:	1e04      	subs	r4, r0, #0
 8021274:	d00f      	beq.n	8021296 <__gethex+0x1c6>
 8021276:	2401      	movs	r4, #1
 8021278:	231f      	movs	r3, #31
 802127a:	0020      	movs	r0, r4
 802127c:	1e72      	subs	r2, r6, #1
 802127e:	4013      	ands	r3, r2
 8021280:	4098      	lsls	r0, r3
 8021282:	0003      	movs	r3, r0
 8021284:	1151      	asrs	r1, r2, #5
 8021286:	9802      	ldr	r0, [sp, #8]
 8021288:	0089      	lsls	r1, r1, #2
 802128a:	5809      	ldr	r1, [r1, r0]
 802128c:	4219      	tst	r1, r3
 802128e:	d002      	beq.n	8021296 <__gethex+0x1c6>
 8021290:	42a2      	cmp	r2, r4
 8021292:	dc34      	bgt.n	80212fe <__gethex+0x22e>
 8021294:	2402      	movs	r4, #2
 8021296:	0031      	movs	r1, r6
 8021298:	0028      	movs	r0, r5
 802129a:	f7ff feb1 	bl	8021000 <rshift>
 802129e:	19bf      	adds	r7, r7, r6
 80212a0:	9b01      	ldr	r3, [sp, #4]
 80212a2:	689b      	ldr	r3, [r3, #8]
 80212a4:	42bb      	cmp	r3, r7
 80212a6:	da42      	bge.n	802132e <__gethex+0x25e>
 80212a8:	0029      	movs	r1, r5
 80212aa:	9803      	ldr	r0, [sp, #12]
 80212ac:	f000 fb14 	bl	80218d8 <_Bfree>
 80212b0:	2300      	movs	r3, #0
 80212b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80212b4:	26a3      	movs	r6, #163	@ 0xa3
 80212b6:	6013      	str	r3, [r2, #0]
 80212b8:	e794      	b.n	80211e4 <__gethex+0x114>
 80212ba:	3c01      	subs	r4, #1
 80212bc:	7823      	ldrb	r3, [r4, #0]
 80212be:	2b2e      	cmp	r3, #46	@ 0x2e
 80212c0:	d012      	beq.n	80212e8 <__gethex+0x218>
 80212c2:	9b04      	ldr	r3, [sp, #16]
 80212c4:	2b20      	cmp	r3, #32
 80212c6:	d104      	bne.n	80212d2 <__gethex+0x202>
 80212c8:	9b05      	ldr	r3, [sp, #20]
 80212ca:	c340      	stmia	r3!, {r6}
 80212cc:	2600      	movs	r6, #0
 80212ce:	9305      	str	r3, [sp, #20]
 80212d0:	9604      	str	r6, [sp, #16]
 80212d2:	7820      	ldrb	r0, [r4, #0]
 80212d4:	f7ff fee7 	bl	80210a6 <__hexdig_fun>
 80212d8:	230f      	movs	r3, #15
 80212da:	4018      	ands	r0, r3
 80212dc:	9b04      	ldr	r3, [sp, #16]
 80212de:	4098      	lsls	r0, r3
 80212e0:	3304      	adds	r3, #4
 80212e2:	4306      	orrs	r6, r0
 80212e4:	9304      	str	r3, [sp, #16]
 80212e6:	e7ac      	b.n	8021242 <__gethex+0x172>
 80212e8:	9b00      	ldr	r3, [sp, #0]
 80212ea:	42a3      	cmp	r3, r4
 80212ec:	d8e9      	bhi.n	80212c2 <__gethex+0x1f2>
 80212ee:	2201      	movs	r2, #1
 80212f0:	0020      	movs	r0, r4
 80212f2:	492b      	ldr	r1, [pc, #172]	@ (80213a0 <__gethex+0x2d0>)
 80212f4:	f7fe fee2 	bl	80200bc <strncmp>
 80212f8:	2800      	cmp	r0, #0
 80212fa:	d1e2      	bne.n	80212c2 <__gethex+0x1f2>
 80212fc:	e7a1      	b.n	8021242 <__gethex+0x172>
 80212fe:	0028      	movs	r0, r5
 8021300:	1eb1      	subs	r1, r6, #2
 8021302:	f000 ff4c 	bl	802219e <__any_on>
 8021306:	2800      	cmp	r0, #0
 8021308:	d0c4      	beq.n	8021294 <__gethex+0x1c4>
 802130a:	2403      	movs	r4, #3
 802130c:	e7c3      	b.n	8021296 <__gethex+0x1c6>
 802130e:	9b00      	ldr	r3, [sp, #0]
 8021310:	2400      	movs	r4, #0
 8021312:	429e      	cmp	r6, r3
 8021314:	dac4      	bge.n	80212a0 <__gethex+0x1d0>
 8021316:	1b9e      	subs	r6, r3, r6
 8021318:	0029      	movs	r1, r5
 802131a:	0032      	movs	r2, r6
 802131c:	9803      	ldr	r0, [sp, #12]
 802131e:	f000 fd05 	bl	8021d2c <__lshift>
 8021322:	0003      	movs	r3, r0
 8021324:	3314      	adds	r3, #20
 8021326:	0005      	movs	r5, r0
 8021328:	1bbf      	subs	r7, r7, r6
 802132a:	9302      	str	r3, [sp, #8]
 802132c:	e7b8      	b.n	80212a0 <__gethex+0x1d0>
 802132e:	9b01      	ldr	r3, [sp, #4]
 8021330:	685e      	ldr	r6, [r3, #4]
 8021332:	42be      	cmp	r6, r7
 8021334:	dd6f      	ble.n	8021416 <__gethex+0x346>
 8021336:	9b00      	ldr	r3, [sp, #0]
 8021338:	1bf6      	subs	r6, r6, r7
 802133a:	42b3      	cmp	r3, r6
 802133c:	dc36      	bgt.n	80213ac <__gethex+0x2dc>
 802133e:	9b01      	ldr	r3, [sp, #4]
 8021340:	68db      	ldr	r3, [r3, #12]
 8021342:	2b02      	cmp	r3, #2
 8021344:	d024      	beq.n	8021390 <__gethex+0x2c0>
 8021346:	2b03      	cmp	r3, #3
 8021348:	d026      	beq.n	8021398 <__gethex+0x2c8>
 802134a:	2b01      	cmp	r3, #1
 802134c:	d117      	bne.n	802137e <__gethex+0x2ae>
 802134e:	9b00      	ldr	r3, [sp, #0]
 8021350:	42b3      	cmp	r3, r6
 8021352:	d114      	bne.n	802137e <__gethex+0x2ae>
 8021354:	2b01      	cmp	r3, #1
 8021356:	d10b      	bne.n	8021370 <__gethex+0x2a0>
 8021358:	9b01      	ldr	r3, [sp, #4]
 802135a:	9a07      	ldr	r2, [sp, #28]
 802135c:	685b      	ldr	r3, [r3, #4]
 802135e:	2662      	movs	r6, #98	@ 0x62
 8021360:	6013      	str	r3, [r2, #0]
 8021362:	2301      	movs	r3, #1
 8021364:	9a02      	ldr	r2, [sp, #8]
 8021366:	612b      	str	r3, [r5, #16]
 8021368:	6013      	str	r3, [r2, #0]
 802136a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802136c:	601d      	str	r5, [r3, #0]
 802136e:	e739      	b.n	80211e4 <__gethex+0x114>
 8021370:	9900      	ldr	r1, [sp, #0]
 8021372:	0028      	movs	r0, r5
 8021374:	3901      	subs	r1, #1
 8021376:	f000 ff12 	bl	802219e <__any_on>
 802137a:	2800      	cmp	r0, #0
 802137c:	d1ec      	bne.n	8021358 <__gethex+0x288>
 802137e:	0029      	movs	r1, r5
 8021380:	9803      	ldr	r0, [sp, #12]
 8021382:	f000 faa9 	bl	80218d8 <_Bfree>
 8021386:	2300      	movs	r3, #0
 8021388:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802138a:	2650      	movs	r6, #80	@ 0x50
 802138c:	6013      	str	r3, [r2, #0]
 802138e:	e729      	b.n	80211e4 <__gethex+0x114>
 8021390:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021392:	2b00      	cmp	r3, #0
 8021394:	d1f3      	bne.n	802137e <__gethex+0x2ae>
 8021396:	e7df      	b.n	8021358 <__gethex+0x288>
 8021398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802139a:	2b00      	cmp	r3, #0
 802139c:	d1dc      	bne.n	8021358 <__gethex+0x288>
 802139e:	e7ee      	b.n	802137e <__gethex+0x2ae>
 80213a0:	08025a48 	.word	0x08025a48
 80213a4:	08025c59 	.word	0x08025c59
 80213a8:	08025c6a 	.word	0x08025c6a
 80213ac:	1e77      	subs	r7, r6, #1
 80213ae:	2c00      	cmp	r4, #0
 80213b0:	d12f      	bne.n	8021412 <__gethex+0x342>
 80213b2:	2f00      	cmp	r7, #0
 80213b4:	d004      	beq.n	80213c0 <__gethex+0x2f0>
 80213b6:	0039      	movs	r1, r7
 80213b8:	0028      	movs	r0, r5
 80213ba:	f000 fef0 	bl	802219e <__any_on>
 80213be:	0004      	movs	r4, r0
 80213c0:	231f      	movs	r3, #31
 80213c2:	117a      	asrs	r2, r7, #5
 80213c4:	401f      	ands	r7, r3
 80213c6:	3b1e      	subs	r3, #30
 80213c8:	40bb      	lsls	r3, r7
 80213ca:	9902      	ldr	r1, [sp, #8]
 80213cc:	0092      	lsls	r2, r2, #2
 80213ce:	5852      	ldr	r2, [r2, r1]
 80213d0:	421a      	tst	r2, r3
 80213d2:	d001      	beq.n	80213d8 <__gethex+0x308>
 80213d4:	2302      	movs	r3, #2
 80213d6:	431c      	orrs	r4, r3
 80213d8:	9b00      	ldr	r3, [sp, #0]
 80213da:	0031      	movs	r1, r6
 80213dc:	1b9b      	subs	r3, r3, r6
 80213de:	2602      	movs	r6, #2
 80213e0:	0028      	movs	r0, r5
 80213e2:	9300      	str	r3, [sp, #0]
 80213e4:	f7ff fe0c 	bl	8021000 <rshift>
 80213e8:	9b01      	ldr	r3, [sp, #4]
 80213ea:	685f      	ldr	r7, [r3, #4]
 80213ec:	2c00      	cmp	r4, #0
 80213ee:	d03f      	beq.n	8021470 <__gethex+0x3a0>
 80213f0:	9b01      	ldr	r3, [sp, #4]
 80213f2:	68db      	ldr	r3, [r3, #12]
 80213f4:	2b02      	cmp	r3, #2
 80213f6:	d010      	beq.n	802141a <__gethex+0x34a>
 80213f8:	2b03      	cmp	r3, #3
 80213fa:	d012      	beq.n	8021422 <__gethex+0x352>
 80213fc:	2b01      	cmp	r3, #1
 80213fe:	d106      	bne.n	802140e <__gethex+0x33e>
 8021400:	07a2      	lsls	r2, r4, #30
 8021402:	d504      	bpl.n	802140e <__gethex+0x33e>
 8021404:	9a02      	ldr	r2, [sp, #8]
 8021406:	6812      	ldr	r2, [r2, #0]
 8021408:	4314      	orrs	r4, r2
 802140a:	421c      	tst	r4, r3
 802140c:	d10c      	bne.n	8021428 <__gethex+0x358>
 802140e:	2310      	movs	r3, #16
 8021410:	e02d      	b.n	802146e <__gethex+0x39e>
 8021412:	2401      	movs	r4, #1
 8021414:	e7d4      	b.n	80213c0 <__gethex+0x2f0>
 8021416:	2601      	movs	r6, #1
 8021418:	e7e8      	b.n	80213ec <__gethex+0x31c>
 802141a:	2301      	movs	r3, #1
 802141c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802141e:	1a9b      	subs	r3, r3, r2
 8021420:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021424:	2b00      	cmp	r3, #0
 8021426:	d0f2      	beq.n	802140e <__gethex+0x33e>
 8021428:	692b      	ldr	r3, [r5, #16]
 802142a:	2000      	movs	r0, #0
 802142c:	9302      	str	r3, [sp, #8]
 802142e:	009b      	lsls	r3, r3, #2
 8021430:	9304      	str	r3, [sp, #16]
 8021432:	002b      	movs	r3, r5
 8021434:	9a04      	ldr	r2, [sp, #16]
 8021436:	3314      	adds	r3, #20
 8021438:	1899      	adds	r1, r3, r2
 802143a:	681a      	ldr	r2, [r3, #0]
 802143c:	1c54      	adds	r4, r2, #1
 802143e:	d01c      	beq.n	802147a <__gethex+0x3aa>
 8021440:	3201      	adds	r2, #1
 8021442:	601a      	str	r2, [r3, #0]
 8021444:	002b      	movs	r3, r5
 8021446:	3314      	adds	r3, #20
 8021448:	2e02      	cmp	r6, #2
 802144a:	d13f      	bne.n	80214cc <__gethex+0x3fc>
 802144c:	9a01      	ldr	r2, [sp, #4]
 802144e:	9900      	ldr	r1, [sp, #0]
 8021450:	6812      	ldr	r2, [r2, #0]
 8021452:	3a01      	subs	r2, #1
 8021454:	428a      	cmp	r2, r1
 8021456:	d109      	bne.n	802146c <__gethex+0x39c>
 8021458:	000a      	movs	r2, r1
 802145a:	201f      	movs	r0, #31
 802145c:	4010      	ands	r0, r2
 802145e:	2201      	movs	r2, #1
 8021460:	4082      	lsls	r2, r0
 8021462:	1149      	asrs	r1, r1, #5
 8021464:	0089      	lsls	r1, r1, #2
 8021466:	58cb      	ldr	r3, [r1, r3]
 8021468:	4213      	tst	r3, r2
 802146a:	d13d      	bne.n	80214e8 <__gethex+0x418>
 802146c:	2320      	movs	r3, #32
 802146e:	431e      	orrs	r6, r3
 8021470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021472:	601d      	str	r5, [r3, #0]
 8021474:	9b07      	ldr	r3, [sp, #28]
 8021476:	601f      	str	r7, [r3, #0]
 8021478:	e6b4      	b.n	80211e4 <__gethex+0x114>
 802147a:	c301      	stmia	r3!, {r0}
 802147c:	4299      	cmp	r1, r3
 802147e:	d8dc      	bhi.n	802143a <__gethex+0x36a>
 8021480:	68ab      	ldr	r3, [r5, #8]
 8021482:	9a02      	ldr	r2, [sp, #8]
 8021484:	429a      	cmp	r2, r3
 8021486:	db18      	blt.n	80214ba <__gethex+0x3ea>
 8021488:	6869      	ldr	r1, [r5, #4]
 802148a:	9803      	ldr	r0, [sp, #12]
 802148c:	3101      	adds	r1, #1
 802148e:	f000 f9df 	bl	8021850 <_Balloc>
 8021492:	1e04      	subs	r4, r0, #0
 8021494:	d104      	bne.n	80214a0 <__gethex+0x3d0>
 8021496:	0022      	movs	r2, r4
 8021498:	2184      	movs	r1, #132	@ 0x84
 802149a:	4b1d      	ldr	r3, [pc, #116]	@ (8021510 <__gethex+0x440>)
 802149c:	481d      	ldr	r0, [pc, #116]	@ (8021514 <__gethex+0x444>)
 802149e:	e6c4      	b.n	802122a <__gethex+0x15a>
 80214a0:	0029      	movs	r1, r5
 80214a2:	692a      	ldr	r2, [r5, #16]
 80214a4:	310c      	adds	r1, #12
 80214a6:	3202      	adds	r2, #2
 80214a8:	0092      	lsls	r2, r2, #2
 80214aa:	300c      	adds	r0, #12
 80214ac:	f7fe fecc 	bl	8020248 <memcpy>
 80214b0:	0029      	movs	r1, r5
 80214b2:	9803      	ldr	r0, [sp, #12]
 80214b4:	f000 fa10 	bl	80218d8 <_Bfree>
 80214b8:	0025      	movs	r5, r4
 80214ba:	692b      	ldr	r3, [r5, #16]
 80214bc:	1c5a      	adds	r2, r3, #1
 80214be:	612a      	str	r2, [r5, #16]
 80214c0:	2201      	movs	r2, #1
 80214c2:	3304      	adds	r3, #4
 80214c4:	009b      	lsls	r3, r3, #2
 80214c6:	18eb      	adds	r3, r5, r3
 80214c8:	605a      	str	r2, [r3, #4]
 80214ca:	e7bb      	b.n	8021444 <__gethex+0x374>
 80214cc:	692a      	ldr	r2, [r5, #16]
 80214ce:	9902      	ldr	r1, [sp, #8]
 80214d0:	428a      	cmp	r2, r1
 80214d2:	dd0b      	ble.n	80214ec <__gethex+0x41c>
 80214d4:	2101      	movs	r1, #1
 80214d6:	0028      	movs	r0, r5
 80214d8:	f7ff fd92 	bl	8021000 <rshift>
 80214dc:	9b01      	ldr	r3, [sp, #4]
 80214de:	3701      	adds	r7, #1
 80214e0:	689b      	ldr	r3, [r3, #8]
 80214e2:	42bb      	cmp	r3, r7
 80214e4:	da00      	bge.n	80214e8 <__gethex+0x418>
 80214e6:	e6df      	b.n	80212a8 <__gethex+0x1d8>
 80214e8:	2601      	movs	r6, #1
 80214ea:	e7bf      	b.n	802146c <__gethex+0x39c>
 80214ec:	221f      	movs	r2, #31
 80214ee:	9c00      	ldr	r4, [sp, #0]
 80214f0:	9900      	ldr	r1, [sp, #0]
 80214f2:	4014      	ands	r4, r2
 80214f4:	4211      	tst	r1, r2
 80214f6:	d0f7      	beq.n	80214e8 <__gethex+0x418>
 80214f8:	9a04      	ldr	r2, [sp, #16]
 80214fa:	189b      	adds	r3, r3, r2
 80214fc:	3b04      	subs	r3, #4
 80214fe:	6818      	ldr	r0, [r3, #0]
 8021500:	f000 fa9e 	bl	8021a40 <__hi0bits>
 8021504:	2320      	movs	r3, #32
 8021506:	1b1b      	subs	r3, r3, r4
 8021508:	4298      	cmp	r0, r3
 802150a:	dbe3      	blt.n	80214d4 <__gethex+0x404>
 802150c:	e7ec      	b.n	80214e8 <__gethex+0x418>
 802150e:	46c0      	nop			@ (mov r8, r8)
 8021510:	08025c59 	.word	0x08025c59
 8021514:	08025c6a 	.word	0x08025c6a

08021518 <L_shift>:
 8021518:	2308      	movs	r3, #8
 802151a:	b570      	push	{r4, r5, r6, lr}
 802151c:	2520      	movs	r5, #32
 802151e:	1a9a      	subs	r2, r3, r2
 8021520:	0092      	lsls	r2, r2, #2
 8021522:	1aad      	subs	r5, r5, r2
 8021524:	6843      	ldr	r3, [r0, #4]
 8021526:	6804      	ldr	r4, [r0, #0]
 8021528:	001e      	movs	r6, r3
 802152a:	40ae      	lsls	r6, r5
 802152c:	40d3      	lsrs	r3, r2
 802152e:	4334      	orrs	r4, r6
 8021530:	6004      	str	r4, [r0, #0]
 8021532:	6043      	str	r3, [r0, #4]
 8021534:	3004      	adds	r0, #4
 8021536:	4288      	cmp	r0, r1
 8021538:	d3f4      	bcc.n	8021524 <L_shift+0xc>
 802153a:	bd70      	pop	{r4, r5, r6, pc}

0802153c <__match>:
 802153c:	b530      	push	{r4, r5, lr}
 802153e:	6803      	ldr	r3, [r0, #0]
 8021540:	780c      	ldrb	r4, [r1, #0]
 8021542:	3301      	adds	r3, #1
 8021544:	2c00      	cmp	r4, #0
 8021546:	d102      	bne.n	802154e <__match+0x12>
 8021548:	6003      	str	r3, [r0, #0]
 802154a:	2001      	movs	r0, #1
 802154c:	bd30      	pop	{r4, r5, pc}
 802154e:	781a      	ldrb	r2, [r3, #0]
 8021550:	0015      	movs	r5, r2
 8021552:	3d41      	subs	r5, #65	@ 0x41
 8021554:	2d19      	cmp	r5, #25
 8021556:	d800      	bhi.n	802155a <__match+0x1e>
 8021558:	3220      	adds	r2, #32
 802155a:	3101      	adds	r1, #1
 802155c:	42a2      	cmp	r2, r4
 802155e:	d0ef      	beq.n	8021540 <__match+0x4>
 8021560:	2000      	movs	r0, #0
 8021562:	e7f3      	b.n	802154c <__match+0x10>

08021564 <__hexnan>:
 8021564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021566:	680b      	ldr	r3, [r1, #0]
 8021568:	b08b      	sub	sp, #44	@ 0x2c
 802156a:	9201      	str	r2, [sp, #4]
 802156c:	9901      	ldr	r1, [sp, #4]
 802156e:	115a      	asrs	r2, r3, #5
 8021570:	0092      	lsls	r2, r2, #2
 8021572:	188a      	adds	r2, r1, r2
 8021574:	9202      	str	r2, [sp, #8]
 8021576:	0019      	movs	r1, r3
 8021578:	221f      	movs	r2, #31
 802157a:	4011      	ands	r1, r2
 802157c:	9008      	str	r0, [sp, #32]
 802157e:	9106      	str	r1, [sp, #24]
 8021580:	4213      	tst	r3, r2
 8021582:	d002      	beq.n	802158a <__hexnan+0x26>
 8021584:	9b02      	ldr	r3, [sp, #8]
 8021586:	3304      	adds	r3, #4
 8021588:	9302      	str	r3, [sp, #8]
 802158a:	9b02      	ldr	r3, [sp, #8]
 802158c:	2500      	movs	r5, #0
 802158e:	1f1f      	subs	r7, r3, #4
 8021590:	003e      	movs	r6, r7
 8021592:	003c      	movs	r4, r7
 8021594:	9b08      	ldr	r3, [sp, #32]
 8021596:	603d      	str	r5, [r7, #0]
 8021598:	681b      	ldr	r3, [r3, #0]
 802159a:	9507      	str	r5, [sp, #28]
 802159c:	9305      	str	r3, [sp, #20]
 802159e:	9503      	str	r5, [sp, #12]
 80215a0:	9b05      	ldr	r3, [sp, #20]
 80215a2:	3301      	adds	r3, #1
 80215a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80215a6:	9b05      	ldr	r3, [sp, #20]
 80215a8:	785b      	ldrb	r3, [r3, #1]
 80215aa:	9304      	str	r3, [sp, #16]
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d028      	beq.n	8021602 <__hexnan+0x9e>
 80215b0:	9804      	ldr	r0, [sp, #16]
 80215b2:	f7ff fd78 	bl	80210a6 <__hexdig_fun>
 80215b6:	2800      	cmp	r0, #0
 80215b8:	d155      	bne.n	8021666 <__hexnan+0x102>
 80215ba:	9b04      	ldr	r3, [sp, #16]
 80215bc:	2b20      	cmp	r3, #32
 80215be:	d819      	bhi.n	80215f4 <__hexnan+0x90>
 80215c0:	9b03      	ldr	r3, [sp, #12]
 80215c2:	9a07      	ldr	r2, [sp, #28]
 80215c4:	4293      	cmp	r3, r2
 80215c6:	dd12      	ble.n	80215ee <__hexnan+0x8a>
 80215c8:	42b4      	cmp	r4, r6
 80215ca:	d206      	bcs.n	80215da <__hexnan+0x76>
 80215cc:	2d07      	cmp	r5, #7
 80215ce:	dc04      	bgt.n	80215da <__hexnan+0x76>
 80215d0:	002a      	movs	r2, r5
 80215d2:	0031      	movs	r1, r6
 80215d4:	0020      	movs	r0, r4
 80215d6:	f7ff ff9f 	bl	8021518 <L_shift>
 80215da:	9b01      	ldr	r3, [sp, #4]
 80215dc:	2508      	movs	r5, #8
 80215de:	429c      	cmp	r4, r3
 80215e0:	d905      	bls.n	80215ee <__hexnan+0x8a>
 80215e2:	1f26      	subs	r6, r4, #4
 80215e4:	2500      	movs	r5, #0
 80215e6:	0034      	movs	r4, r6
 80215e8:	9b03      	ldr	r3, [sp, #12]
 80215ea:	6035      	str	r5, [r6, #0]
 80215ec:	9307      	str	r3, [sp, #28]
 80215ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215f0:	9305      	str	r3, [sp, #20]
 80215f2:	e7d5      	b.n	80215a0 <__hexnan+0x3c>
 80215f4:	9b04      	ldr	r3, [sp, #16]
 80215f6:	2b29      	cmp	r3, #41	@ 0x29
 80215f8:	d15a      	bne.n	80216b0 <__hexnan+0x14c>
 80215fa:	9b05      	ldr	r3, [sp, #20]
 80215fc:	9a08      	ldr	r2, [sp, #32]
 80215fe:	3302      	adds	r3, #2
 8021600:	6013      	str	r3, [r2, #0]
 8021602:	9b03      	ldr	r3, [sp, #12]
 8021604:	2b00      	cmp	r3, #0
 8021606:	d053      	beq.n	80216b0 <__hexnan+0x14c>
 8021608:	42b4      	cmp	r4, r6
 802160a:	d206      	bcs.n	802161a <__hexnan+0xb6>
 802160c:	2d07      	cmp	r5, #7
 802160e:	dc04      	bgt.n	802161a <__hexnan+0xb6>
 8021610:	002a      	movs	r2, r5
 8021612:	0031      	movs	r1, r6
 8021614:	0020      	movs	r0, r4
 8021616:	f7ff ff7f 	bl	8021518 <L_shift>
 802161a:	9b01      	ldr	r3, [sp, #4]
 802161c:	429c      	cmp	r4, r3
 802161e:	d936      	bls.n	802168e <__hexnan+0x12a>
 8021620:	001a      	movs	r2, r3
 8021622:	0023      	movs	r3, r4
 8021624:	cb02      	ldmia	r3!, {r1}
 8021626:	c202      	stmia	r2!, {r1}
 8021628:	429f      	cmp	r7, r3
 802162a:	d2fb      	bcs.n	8021624 <__hexnan+0xc0>
 802162c:	9b02      	ldr	r3, [sp, #8]
 802162e:	1c61      	adds	r1, r4, #1
 8021630:	1eda      	subs	r2, r3, #3
 8021632:	2304      	movs	r3, #4
 8021634:	4291      	cmp	r1, r2
 8021636:	d805      	bhi.n	8021644 <__hexnan+0xe0>
 8021638:	9b02      	ldr	r3, [sp, #8]
 802163a:	3b04      	subs	r3, #4
 802163c:	1b1b      	subs	r3, r3, r4
 802163e:	089b      	lsrs	r3, r3, #2
 8021640:	3301      	adds	r3, #1
 8021642:	009b      	lsls	r3, r3, #2
 8021644:	9a01      	ldr	r2, [sp, #4]
 8021646:	18d3      	adds	r3, r2, r3
 8021648:	2200      	movs	r2, #0
 802164a:	c304      	stmia	r3!, {r2}
 802164c:	429f      	cmp	r7, r3
 802164e:	d2fc      	bcs.n	802164a <__hexnan+0xe6>
 8021650:	683b      	ldr	r3, [r7, #0]
 8021652:	2b00      	cmp	r3, #0
 8021654:	d104      	bne.n	8021660 <__hexnan+0xfc>
 8021656:	9b01      	ldr	r3, [sp, #4]
 8021658:	429f      	cmp	r7, r3
 802165a:	d127      	bne.n	80216ac <__hexnan+0x148>
 802165c:	2301      	movs	r3, #1
 802165e:	603b      	str	r3, [r7, #0]
 8021660:	2005      	movs	r0, #5
 8021662:	b00b      	add	sp, #44	@ 0x2c
 8021664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021666:	9b03      	ldr	r3, [sp, #12]
 8021668:	3501      	adds	r5, #1
 802166a:	3301      	adds	r3, #1
 802166c:	9303      	str	r3, [sp, #12]
 802166e:	2d08      	cmp	r5, #8
 8021670:	dd06      	ble.n	8021680 <__hexnan+0x11c>
 8021672:	9b01      	ldr	r3, [sp, #4]
 8021674:	429c      	cmp	r4, r3
 8021676:	d9ba      	bls.n	80215ee <__hexnan+0x8a>
 8021678:	2300      	movs	r3, #0
 802167a:	2501      	movs	r5, #1
 802167c:	3c04      	subs	r4, #4
 802167e:	6023      	str	r3, [r4, #0]
 8021680:	220f      	movs	r2, #15
 8021682:	6823      	ldr	r3, [r4, #0]
 8021684:	4010      	ands	r0, r2
 8021686:	011b      	lsls	r3, r3, #4
 8021688:	4303      	orrs	r3, r0
 802168a:	6023      	str	r3, [r4, #0]
 802168c:	e7af      	b.n	80215ee <__hexnan+0x8a>
 802168e:	9b06      	ldr	r3, [sp, #24]
 8021690:	2b00      	cmp	r3, #0
 8021692:	d0dd      	beq.n	8021650 <__hexnan+0xec>
 8021694:	2320      	movs	r3, #32
 8021696:	9a06      	ldr	r2, [sp, #24]
 8021698:	9902      	ldr	r1, [sp, #8]
 802169a:	1a9b      	subs	r3, r3, r2
 802169c:	2201      	movs	r2, #1
 802169e:	4252      	negs	r2, r2
 80216a0:	40da      	lsrs	r2, r3
 80216a2:	3904      	subs	r1, #4
 80216a4:	680b      	ldr	r3, [r1, #0]
 80216a6:	4013      	ands	r3, r2
 80216a8:	600b      	str	r3, [r1, #0]
 80216aa:	e7d1      	b.n	8021650 <__hexnan+0xec>
 80216ac:	3f04      	subs	r7, #4
 80216ae:	e7cf      	b.n	8021650 <__hexnan+0xec>
 80216b0:	2004      	movs	r0, #4
 80216b2:	e7d6      	b.n	8021662 <__hexnan+0xfe>

080216b4 <malloc>:
 80216b4:	b510      	push	{r4, lr}
 80216b6:	4b03      	ldr	r3, [pc, #12]	@ (80216c4 <malloc+0x10>)
 80216b8:	0001      	movs	r1, r0
 80216ba:	6818      	ldr	r0, [r3, #0]
 80216bc:	f000 f826 	bl	802170c <_malloc_r>
 80216c0:	bd10      	pop	{r4, pc}
 80216c2:	46c0      	nop			@ (mov r8, r8)
 80216c4:	200003cc 	.word	0x200003cc

080216c8 <sbrk_aligned>:
 80216c8:	b570      	push	{r4, r5, r6, lr}
 80216ca:	4e0f      	ldr	r6, [pc, #60]	@ (8021708 <sbrk_aligned+0x40>)
 80216cc:	000d      	movs	r5, r1
 80216ce:	6831      	ldr	r1, [r6, #0]
 80216d0:	0004      	movs	r4, r0
 80216d2:	2900      	cmp	r1, #0
 80216d4:	d102      	bne.n	80216dc <sbrk_aligned+0x14>
 80216d6:	f001 f989 	bl	80229ec <_sbrk_r>
 80216da:	6030      	str	r0, [r6, #0]
 80216dc:	0029      	movs	r1, r5
 80216de:	0020      	movs	r0, r4
 80216e0:	f001 f984 	bl	80229ec <_sbrk_r>
 80216e4:	1c43      	adds	r3, r0, #1
 80216e6:	d103      	bne.n	80216f0 <sbrk_aligned+0x28>
 80216e8:	2501      	movs	r5, #1
 80216ea:	426d      	negs	r5, r5
 80216ec:	0028      	movs	r0, r5
 80216ee:	bd70      	pop	{r4, r5, r6, pc}
 80216f0:	2303      	movs	r3, #3
 80216f2:	1cc5      	adds	r5, r0, #3
 80216f4:	439d      	bics	r5, r3
 80216f6:	42a8      	cmp	r0, r5
 80216f8:	d0f8      	beq.n	80216ec <sbrk_aligned+0x24>
 80216fa:	1a29      	subs	r1, r5, r0
 80216fc:	0020      	movs	r0, r4
 80216fe:	f001 f975 	bl	80229ec <_sbrk_r>
 8021702:	3001      	adds	r0, #1
 8021704:	d1f2      	bne.n	80216ec <sbrk_aligned+0x24>
 8021706:	e7ef      	b.n	80216e8 <sbrk_aligned+0x20>
 8021708:	200039a4 	.word	0x200039a4

0802170c <_malloc_r>:
 802170c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802170e:	2203      	movs	r2, #3
 8021710:	1ccb      	adds	r3, r1, #3
 8021712:	4393      	bics	r3, r2
 8021714:	3308      	adds	r3, #8
 8021716:	0005      	movs	r5, r0
 8021718:	001f      	movs	r7, r3
 802171a:	2b0c      	cmp	r3, #12
 802171c:	d234      	bcs.n	8021788 <_malloc_r+0x7c>
 802171e:	270c      	movs	r7, #12
 8021720:	42b9      	cmp	r1, r7
 8021722:	d833      	bhi.n	802178c <_malloc_r+0x80>
 8021724:	0028      	movs	r0, r5
 8021726:	f000 f883 	bl	8021830 <__malloc_lock>
 802172a:	4e37      	ldr	r6, [pc, #220]	@ (8021808 <_malloc_r+0xfc>)
 802172c:	6833      	ldr	r3, [r6, #0]
 802172e:	001c      	movs	r4, r3
 8021730:	2c00      	cmp	r4, #0
 8021732:	d12f      	bne.n	8021794 <_malloc_r+0x88>
 8021734:	0039      	movs	r1, r7
 8021736:	0028      	movs	r0, r5
 8021738:	f7ff ffc6 	bl	80216c8 <sbrk_aligned>
 802173c:	0004      	movs	r4, r0
 802173e:	1c43      	adds	r3, r0, #1
 8021740:	d15f      	bne.n	8021802 <_malloc_r+0xf6>
 8021742:	6834      	ldr	r4, [r6, #0]
 8021744:	9400      	str	r4, [sp, #0]
 8021746:	9b00      	ldr	r3, [sp, #0]
 8021748:	2b00      	cmp	r3, #0
 802174a:	d14a      	bne.n	80217e2 <_malloc_r+0xd6>
 802174c:	2c00      	cmp	r4, #0
 802174e:	d052      	beq.n	80217f6 <_malloc_r+0xea>
 8021750:	6823      	ldr	r3, [r4, #0]
 8021752:	0028      	movs	r0, r5
 8021754:	18e3      	adds	r3, r4, r3
 8021756:	9900      	ldr	r1, [sp, #0]
 8021758:	9301      	str	r3, [sp, #4]
 802175a:	f001 f947 	bl	80229ec <_sbrk_r>
 802175e:	9b01      	ldr	r3, [sp, #4]
 8021760:	4283      	cmp	r3, r0
 8021762:	d148      	bne.n	80217f6 <_malloc_r+0xea>
 8021764:	6823      	ldr	r3, [r4, #0]
 8021766:	0028      	movs	r0, r5
 8021768:	1aff      	subs	r7, r7, r3
 802176a:	0039      	movs	r1, r7
 802176c:	f7ff ffac 	bl	80216c8 <sbrk_aligned>
 8021770:	3001      	adds	r0, #1
 8021772:	d040      	beq.n	80217f6 <_malloc_r+0xea>
 8021774:	6823      	ldr	r3, [r4, #0]
 8021776:	19db      	adds	r3, r3, r7
 8021778:	6023      	str	r3, [r4, #0]
 802177a:	6833      	ldr	r3, [r6, #0]
 802177c:	685a      	ldr	r2, [r3, #4]
 802177e:	2a00      	cmp	r2, #0
 8021780:	d133      	bne.n	80217ea <_malloc_r+0xde>
 8021782:	9b00      	ldr	r3, [sp, #0]
 8021784:	6033      	str	r3, [r6, #0]
 8021786:	e019      	b.n	80217bc <_malloc_r+0xb0>
 8021788:	2b00      	cmp	r3, #0
 802178a:	dac9      	bge.n	8021720 <_malloc_r+0x14>
 802178c:	230c      	movs	r3, #12
 802178e:	602b      	str	r3, [r5, #0]
 8021790:	2000      	movs	r0, #0
 8021792:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021794:	6821      	ldr	r1, [r4, #0]
 8021796:	1bc9      	subs	r1, r1, r7
 8021798:	d420      	bmi.n	80217dc <_malloc_r+0xd0>
 802179a:	290b      	cmp	r1, #11
 802179c:	d90a      	bls.n	80217b4 <_malloc_r+0xa8>
 802179e:	19e2      	adds	r2, r4, r7
 80217a0:	6027      	str	r7, [r4, #0]
 80217a2:	42a3      	cmp	r3, r4
 80217a4:	d104      	bne.n	80217b0 <_malloc_r+0xa4>
 80217a6:	6032      	str	r2, [r6, #0]
 80217a8:	6863      	ldr	r3, [r4, #4]
 80217aa:	6011      	str	r1, [r2, #0]
 80217ac:	6053      	str	r3, [r2, #4]
 80217ae:	e005      	b.n	80217bc <_malloc_r+0xb0>
 80217b0:	605a      	str	r2, [r3, #4]
 80217b2:	e7f9      	b.n	80217a8 <_malloc_r+0x9c>
 80217b4:	6862      	ldr	r2, [r4, #4]
 80217b6:	42a3      	cmp	r3, r4
 80217b8:	d10e      	bne.n	80217d8 <_malloc_r+0xcc>
 80217ba:	6032      	str	r2, [r6, #0]
 80217bc:	0028      	movs	r0, r5
 80217be:	f000 f83f 	bl	8021840 <__malloc_unlock>
 80217c2:	0020      	movs	r0, r4
 80217c4:	2207      	movs	r2, #7
 80217c6:	300b      	adds	r0, #11
 80217c8:	1d23      	adds	r3, r4, #4
 80217ca:	4390      	bics	r0, r2
 80217cc:	1ac2      	subs	r2, r0, r3
 80217ce:	4298      	cmp	r0, r3
 80217d0:	d0df      	beq.n	8021792 <_malloc_r+0x86>
 80217d2:	1a1b      	subs	r3, r3, r0
 80217d4:	50a3      	str	r3, [r4, r2]
 80217d6:	e7dc      	b.n	8021792 <_malloc_r+0x86>
 80217d8:	605a      	str	r2, [r3, #4]
 80217da:	e7ef      	b.n	80217bc <_malloc_r+0xb0>
 80217dc:	0023      	movs	r3, r4
 80217de:	6864      	ldr	r4, [r4, #4]
 80217e0:	e7a6      	b.n	8021730 <_malloc_r+0x24>
 80217e2:	9c00      	ldr	r4, [sp, #0]
 80217e4:	6863      	ldr	r3, [r4, #4]
 80217e6:	9300      	str	r3, [sp, #0]
 80217e8:	e7ad      	b.n	8021746 <_malloc_r+0x3a>
 80217ea:	001a      	movs	r2, r3
 80217ec:	685b      	ldr	r3, [r3, #4]
 80217ee:	42a3      	cmp	r3, r4
 80217f0:	d1fb      	bne.n	80217ea <_malloc_r+0xde>
 80217f2:	2300      	movs	r3, #0
 80217f4:	e7da      	b.n	80217ac <_malloc_r+0xa0>
 80217f6:	230c      	movs	r3, #12
 80217f8:	0028      	movs	r0, r5
 80217fa:	602b      	str	r3, [r5, #0]
 80217fc:	f000 f820 	bl	8021840 <__malloc_unlock>
 8021800:	e7c6      	b.n	8021790 <_malloc_r+0x84>
 8021802:	6007      	str	r7, [r0, #0]
 8021804:	e7da      	b.n	80217bc <_malloc_r+0xb0>
 8021806:	46c0      	nop			@ (mov r8, r8)
 8021808:	200039a8 	.word	0x200039a8

0802180c <__ascii_mbtowc>:
 802180c:	b082      	sub	sp, #8
 802180e:	2900      	cmp	r1, #0
 8021810:	d100      	bne.n	8021814 <__ascii_mbtowc+0x8>
 8021812:	a901      	add	r1, sp, #4
 8021814:	1e10      	subs	r0, r2, #0
 8021816:	d006      	beq.n	8021826 <__ascii_mbtowc+0x1a>
 8021818:	2b00      	cmp	r3, #0
 802181a:	d006      	beq.n	802182a <__ascii_mbtowc+0x1e>
 802181c:	7813      	ldrb	r3, [r2, #0]
 802181e:	600b      	str	r3, [r1, #0]
 8021820:	7810      	ldrb	r0, [r2, #0]
 8021822:	1e43      	subs	r3, r0, #1
 8021824:	4198      	sbcs	r0, r3
 8021826:	b002      	add	sp, #8
 8021828:	4770      	bx	lr
 802182a:	2002      	movs	r0, #2
 802182c:	4240      	negs	r0, r0
 802182e:	e7fa      	b.n	8021826 <__ascii_mbtowc+0x1a>

08021830 <__malloc_lock>:
 8021830:	b510      	push	{r4, lr}
 8021832:	4802      	ldr	r0, [pc, #8]	@ (802183c <__malloc_lock+0xc>)
 8021834:	f7fe fcfb 	bl	802022e <__retarget_lock_acquire_recursive>
 8021838:	bd10      	pop	{r4, pc}
 802183a:	46c0      	nop			@ (mov r8, r8)
 802183c:	200039a0 	.word	0x200039a0

08021840 <__malloc_unlock>:
 8021840:	b510      	push	{r4, lr}
 8021842:	4802      	ldr	r0, [pc, #8]	@ (802184c <__malloc_unlock+0xc>)
 8021844:	f7fe fcf4 	bl	8020230 <__retarget_lock_release_recursive>
 8021848:	bd10      	pop	{r4, pc}
 802184a:	46c0      	nop			@ (mov r8, r8)
 802184c:	200039a0 	.word	0x200039a0

08021850 <_Balloc>:
 8021850:	b570      	push	{r4, r5, r6, lr}
 8021852:	69c5      	ldr	r5, [r0, #28]
 8021854:	0006      	movs	r6, r0
 8021856:	000c      	movs	r4, r1
 8021858:	2d00      	cmp	r5, #0
 802185a:	d10e      	bne.n	802187a <_Balloc+0x2a>
 802185c:	2010      	movs	r0, #16
 802185e:	f7ff ff29 	bl	80216b4 <malloc>
 8021862:	1e02      	subs	r2, r0, #0
 8021864:	61f0      	str	r0, [r6, #28]
 8021866:	d104      	bne.n	8021872 <_Balloc+0x22>
 8021868:	216b      	movs	r1, #107	@ 0x6b
 802186a:	4b19      	ldr	r3, [pc, #100]	@ (80218d0 <_Balloc+0x80>)
 802186c:	4819      	ldr	r0, [pc, #100]	@ (80218d4 <_Balloc+0x84>)
 802186e:	f001 f8cf 	bl	8022a10 <__assert_func>
 8021872:	6045      	str	r5, [r0, #4]
 8021874:	6085      	str	r5, [r0, #8]
 8021876:	6005      	str	r5, [r0, #0]
 8021878:	60c5      	str	r5, [r0, #12]
 802187a:	69f5      	ldr	r5, [r6, #28]
 802187c:	68eb      	ldr	r3, [r5, #12]
 802187e:	2b00      	cmp	r3, #0
 8021880:	d013      	beq.n	80218aa <_Balloc+0x5a>
 8021882:	69f3      	ldr	r3, [r6, #28]
 8021884:	00a2      	lsls	r2, r4, #2
 8021886:	68db      	ldr	r3, [r3, #12]
 8021888:	189b      	adds	r3, r3, r2
 802188a:	6818      	ldr	r0, [r3, #0]
 802188c:	2800      	cmp	r0, #0
 802188e:	d118      	bne.n	80218c2 <_Balloc+0x72>
 8021890:	2101      	movs	r1, #1
 8021892:	000d      	movs	r5, r1
 8021894:	40a5      	lsls	r5, r4
 8021896:	1d6a      	adds	r2, r5, #5
 8021898:	0030      	movs	r0, r6
 802189a:	0092      	lsls	r2, r2, #2
 802189c:	f001 f8d6 	bl	8022a4c <_calloc_r>
 80218a0:	2800      	cmp	r0, #0
 80218a2:	d00c      	beq.n	80218be <_Balloc+0x6e>
 80218a4:	6044      	str	r4, [r0, #4]
 80218a6:	6085      	str	r5, [r0, #8]
 80218a8:	e00d      	b.n	80218c6 <_Balloc+0x76>
 80218aa:	2221      	movs	r2, #33	@ 0x21
 80218ac:	2104      	movs	r1, #4
 80218ae:	0030      	movs	r0, r6
 80218b0:	f001 f8cc 	bl	8022a4c <_calloc_r>
 80218b4:	69f3      	ldr	r3, [r6, #28]
 80218b6:	60e8      	str	r0, [r5, #12]
 80218b8:	68db      	ldr	r3, [r3, #12]
 80218ba:	2b00      	cmp	r3, #0
 80218bc:	d1e1      	bne.n	8021882 <_Balloc+0x32>
 80218be:	2000      	movs	r0, #0
 80218c0:	bd70      	pop	{r4, r5, r6, pc}
 80218c2:	6802      	ldr	r2, [r0, #0]
 80218c4:	601a      	str	r2, [r3, #0]
 80218c6:	2300      	movs	r3, #0
 80218c8:	6103      	str	r3, [r0, #16]
 80218ca:	60c3      	str	r3, [r0, #12]
 80218cc:	e7f8      	b.n	80218c0 <_Balloc+0x70>
 80218ce:	46c0      	nop			@ (mov r8, r8)
 80218d0:	08025bea 	.word	0x08025bea
 80218d4:	08025cca 	.word	0x08025cca

080218d8 <_Bfree>:
 80218d8:	b570      	push	{r4, r5, r6, lr}
 80218da:	69c6      	ldr	r6, [r0, #28]
 80218dc:	0005      	movs	r5, r0
 80218de:	000c      	movs	r4, r1
 80218e0:	2e00      	cmp	r6, #0
 80218e2:	d10e      	bne.n	8021902 <_Bfree+0x2a>
 80218e4:	2010      	movs	r0, #16
 80218e6:	f7ff fee5 	bl	80216b4 <malloc>
 80218ea:	1e02      	subs	r2, r0, #0
 80218ec:	61e8      	str	r0, [r5, #28]
 80218ee:	d104      	bne.n	80218fa <_Bfree+0x22>
 80218f0:	218f      	movs	r1, #143	@ 0x8f
 80218f2:	4b09      	ldr	r3, [pc, #36]	@ (8021918 <_Bfree+0x40>)
 80218f4:	4809      	ldr	r0, [pc, #36]	@ (802191c <_Bfree+0x44>)
 80218f6:	f001 f88b 	bl	8022a10 <__assert_func>
 80218fa:	6046      	str	r6, [r0, #4]
 80218fc:	6086      	str	r6, [r0, #8]
 80218fe:	6006      	str	r6, [r0, #0]
 8021900:	60c6      	str	r6, [r0, #12]
 8021902:	2c00      	cmp	r4, #0
 8021904:	d007      	beq.n	8021916 <_Bfree+0x3e>
 8021906:	69eb      	ldr	r3, [r5, #28]
 8021908:	6862      	ldr	r2, [r4, #4]
 802190a:	68db      	ldr	r3, [r3, #12]
 802190c:	0092      	lsls	r2, r2, #2
 802190e:	189b      	adds	r3, r3, r2
 8021910:	681a      	ldr	r2, [r3, #0]
 8021912:	6022      	str	r2, [r4, #0]
 8021914:	601c      	str	r4, [r3, #0]
 8021916:	bd70      	pop	{r4, r5, r6, pc}
 8021918:	08025bea 	.word	0x08025bea
 802191c:	08025cca 	.word	0x08025cca

08021920 <__multadd>:
 8021920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021922:	000f      	movs	r7, r1
 8021924:	9001      	str	r0, [sp, #4]
 8021926:	000c      	movs	r4, r1
 8021928:	001e      	movs	r6, r3
 802192a:	2000      	movs	r0, #0
 802192c:	690d      	ldr	r5, [r1, #16]
 802192e:	3714      	adds	r7, #20
 8021930:	683b      	ldr	r3, [r7, #0]
 8021932:	3001      	adds	r0, #1
 8021934:	b299      	uxth	r1, r3
 8021936:	4351      	muls	r1, r2
 8021938:	0c1b      	lsrs	r3, r3, #16
 802193a:	4353      	muls	r3, r2
 802193c:	1989      	adds	r1, r1, r6
 802193e:	0c0e      	lsrs	r6, r1, #16
 8021940:	199b      	adds	r3, r3, r6
 8021942:	0c1e      	lsrs	r6, r3, #16
 8021944:	b289      	uxth	r1, r1
 8021946:	041b      	lsls	r3, r3, #16
 8021948:	185b      	adds	r3, r3, r1
 802194a:	c708      	stmia	r7!, {r3}
 802194c:	4285      	cmp	r5, r0
 802194e:	dcef      	bgt.n	8021930 <__multadd+0x10>
 8021950:	2e00      	cmp	r6, #0
 8021952:	d022      	beq.n	802199a <__multadd+0x7a>
 8021954:	68a3      	ldr	r3, [r4, #8]
 8021956:	42ab      	cmp	r3, r5
 8021958:	dc19      	bgt.n	802198e <__multadd+0x6e>
 802195a:	6861      	ldr	r1, [r4, #4]
 802195c:	9801      	ldr	r0, [sp, #4]
 802195e:	3101      	adds	r1, #1
 8021960:	f7ff ff76 	bl	8021850 <_Balloc>
 8021964:	1e07      	subs	r7, r0, #0
 8021966:	d105      	bne.n	8021974 <__multadd+0x54>
 8021968:	003a      	movs	r2, r7
 802196a:	21ba      	movs	r1, #186	@ 0xba
 802196c:	4b0c      	ldr	r3, [pc, #48]	@ (80219a0 <__multadd+0x80>)
 802196e:	480d      	ldr	r0, [pc, #52]	@ (80219a4 <__multadd+0x84>)
 8021970:	f001 f84e 	bl	8022a10 <__assert_func>
 8021974:	0021      	movs	r1, r4
 8021976:	6922      	ldr	r2, [r4, #16]
 8021978:	310c      	adds	r1, #12
 802197a:	3202      	adds	r2, #2
 802197c:	0092      	lsls	r2, r2, #2
 802197e:	300c      	adds	r0, #12
 8021980:	f7fe fc62 	bl	8020248 <memcpy>
 8021984:	0021      	movs	r1, r4
 8021986:	9801      	ldr	r0, [sp, #4]
 8021988:	f7ff ffa6 	bl	80218d8 <_Bfree>
 802198c:	003c      	movs	r4, r7
 802198e:	1d2b      	adds	r3, r5, #4
 8021990:	009b      	lsls	r3, r3, #2
 8021992:	18e3      	adds	r3, r4, r3
 8021994:	3501      	adds	r5, #1
 8021996:	605e      	str	r6, [r3, #4]
 8021998:	6125      	str	r5, [r4, #16]
 802199a:	0020      	movs	r0, r4
 802199c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802199e:	46c0      	nop			@ (mov r8, r8)
 80219a0:	08025c59 	.word	0x08025c59
 80219a4:	08025cca 	.word	0x08025cca

080219a8 <__s2b>:
 80219a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80219aa:	0007      	movs	r7, r0
 80219ac:	0018      	movs	r0, r3
 80219ae:	000c      	movs	r4, r1
 80219b0:	3008      	adds	r0, #8
 80219b2:	2109      	movs	r1, #9
 80219b4:	9301      	str	r3, [sp, #4]
 80219b6:	0015      	movs	r5, r2
 80219b8:	f7de fc7e 	bl	80002b8 <__divsi3>
 80219bc:	2301      	movs	r3, #1
 80219be:	2100      	movs	r1, #0
 80219c0:	4283      	cmp	r3, r0
 80219c2:	db0a      	blt.n	80219da <__s2b+0x32>
 80219c4:	0038      	movs	r0, r7
 80219c6:	f7ff ff43 	bl	8021850 <_Balloc>
 80219ca:	1e01      	subs	r1, r0, #0
 80219cc:	d108      	bne.n	80219e0 <__s2b+0x38>
 80219ce:	000a      	movs	r2, r1
 80219d0:	4b19      	ldr	r3, [pc, #100]	@ (8021a38 <__s2b+0x90>)
 80219d2:	481a      	ldr	r0, [pc, #104]	@ (8021a3c <__s2b+0x94>)
 80219d4:	31d3      	adds	r1, #211	@ 0xd3
 80219d6:	f001 f81b 	bl	8022a10 <__assert_func>
 80219da:	005b      	lsls	r3, r3, #1
 80219dc:	3101      	adds	r1, #1
 80219de:	e7ef      	b.n	80219c0 <__s2b+0x18>
 80219e0:	9b08      	ldr	r3, [sp, #32]
 80219e2:	6143      	str	r3, [r0, #20]
 80219e4:	2301      	movs	r3, #1
 80219e6:	6103      	str	r3, [r0, #16]
 80219e8:	2d09      	cmp	r5, #9
 80219ea:	dd18      	ble.n	8021a1e <__s2b+0x76>
 80219ec:	0023      	movs	r3, r4
 80219ee:	3309      	adds	r3, #9
 80219f0:	001e      	movs	r6, r3
 80219f2:	9300      	str	r3, [sp, #0]
 80219f4:	1964      	adds	r4, r4, r5
 80219f6:	7833      	ldrb	r3, [r6, #0]
 80219f8:	220a      	movs	r2, #10
 80219fa:	0038      	movs	r0, r7
 80219fc:	3b30      	subs	r3, #48	@ 0x30
 80219fe:	f7ff ff8f 	bl	8021920 <__multadd>
 8021a02:	3601      	adds	r6, #1
 8021a04:	0001      	movs	r1, r0
 8021a06:	42a6      	cmp	r6, r4
 8021a08:	d1f5      	bne.n	80219f6 <__s2b+0x4e>
 8021a0a:	002c      	movs	r4, r5
 8021a0c:	9b00      	ldr	r3, [sp, #0]
 8021a0e:	3c08      	subs	r4, #8
 8021a10:	191c      	adds	r4, r3, r4
 8021a12:	002e      	movs	r6, r5
 8021a14:	9b01      	ldr	r3, [sp, #4]
 8021a16:	429e      	cmp	r6, r3
 8021a18:	db04      	blt.n	8021a24 <__s2b+0x7c>
 8021a1a:	0008      	movs	r0, r1
 8021a1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021a1e:	2509      	movs	r5, #9
 8021a20:	340a      	adds	r4, #10
 8021a22:	e7f6      	b.n	8021a12 <__s2b+0x6a>
 8021a24:	1b63      	subs	r3, r4, r5
 8021a26:	5d9b      	ldrb	r3, [r3, r6]
 8021a28:	220a      	movs	r2, #10
 8021a2a:	0038      	movs	r0, r7
 8021a2c:	3b30      	subs	r3, #48	@ 0x30
 8021a2e:	f7ff ff77 	bl	8021920 <__multadd>
 8021a32:	3601      	adds	r6, #1
 8021a34:	0001      	movs	r1, r0
 8021a36:	e7ed      	b.n	8021a14 <__s2b+0x6c>
 8021a38:	08025c59 	.word	0x08025c59
 8021a3c:	08025cca 	.word	0x08025cca

08021a40 <__hi0bits>:
 8021a40:	2280      	movs	r2, #128	@ 0x80
 8021a42:	0003      	movs	r3, r0
 8021a44:	0252      	lsls	r2, r2, #9
 8021a46:	2000      	movs	r0, #0
 8021a48:	4293      	cmp	r3, r2
 8021a4a:	d201      	bcs.n	8021a50 <__hi0bits+0x10>
 8021a4c:	041b      	lsls	r3, r3, #16
 8021a4e:	3010      	adds	r0, #16
 8021a50:	2280      	movs	r2, #128	@ 0x80
 8021a52:	0452      	lsls	r2, r2, #17
 8021a54:	4293      	cmp	r3, r2
 8021a56:	d201      	bcs.n	8021a5c <__hi0bits+0x1c>
 8021a58:	3008      	adds	r0, #8
 8021a5a:	021b      	lsls	r3, r3, #8
 8021a5c:	2280      	movs	r2, #128	@ 0x80
 8021a5e:	0552      	lsls	r2, r2, #21
 8021a60:	4293      	cmp	r3, r2
 8021a62:	d201      	bcs.n	8021a68 <__hi0bits+0x28>
 8021a64:	3004      	adds	r0, #4
 8021a66:	011b      	lsls	r3, r3, #4
 8021a68:	2280      	movs	r2, #128	@ 0x80
 8021a6a:	05d2      	lsls	r2, r2, #23
 8021a6c:	4293      	cmp	r3, r2
 8021a6e:	d201      	bcs.n	8021a74 <__hi0bits+0x34>
 8021a70:	3002      	adds	r0, #2
 8021a72:	009b      	lsls	r3, r3, #2
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	db03      	blt.n	8021a80 <__hi0bits+0x40>
 8021a78:	3001      	adds	r0, #1
 8021a7a:	4213      	tst	r3, r2
 8021a7c:	d100      	bne.n	8021a80 <__hi0bits+0x40>
 8021a7e:	2020      	movs	r0, #32
 8021a80:	4770      	bx	lr

08021a82 <__lo0bits>:
 8021a82:	6803      	ldr	r3, [r0, #0]
 8021a84:	0001      	movs	r1, r0
 8021a86:	2207      	movs	r2, #7
 8021a88:	0018      	movs	r0, r3
 8021a8a:	4010      	ands	r0, r2
 8021a8c:	4213      	tst	r3, r2
 8021a8e:	d00d      	beq.n	8021aac <__lo0bits+0x2a>
 8021a90:	3a06      	subs	r2, #6
 8021a92:	2000      	movs	r0, #0
 8021a94:	4213      	tst	r3, r2
 8021a96:	d105      	bne.n	8021aa4 <__lo0bits+0x22>
 8021a98:	3002      	adds	r0, #2
 8021a9a:	4203      	tst	r3, r0
 8021a9c:	d003      	beq.n	8021aa6 <__lo0bits+0x24>
 8021a9e:	40d3      	lsrs	r3, r2
 8021aa0:	0010      	movs	r0, r2
 8021aa2:	600b      	str	r3, [r1, #0]
 8021aa4:	4770      	bx	lr
 8021aa6:	089b      	lsrs	r3, r3, #2
 8021aa8:	600b      	str	r3, [r1, #0]
 8021aaa:	e7fb      	b.n	8021aa4 <__lo0bits+0x22>
 8021aac:	b29a      	uxth	r2, r3
 8021aae:	2a00      	cmp	r2, #0
 8021ab0:	d101      	bne.n	8021ab6 <__lo0bits+0x34>
 8021ab2:	2010      	movs	r0, #16
 8021ab4:	0c1b      	lsrs	r3, r3, #16
 8021ab6:	b2da      	uxtb	r2, r3
 8021ab8:	2a00      	cmp	r2, #0
 8021aba:	d101      	bne.n	8021ac0 <__lo0bits+0x3e>
 8021abc:	3008      	adds	r0, #8
 8021abe:	0a1b      	lsrs	r3, r3, #8
 8021ac0:	071a      	lsls	r2, r3, #28
 8021ac2:	d101      	bne.n	8021ac8 <__lo0bits+0x46>
 8021ac4:	3004      	adds	r0, #4
 8021ac6:	091b      	lsrs	r3, r3, #4
 8021ac8:	079a      	lsls	r2, r3, #30
 8021aca:	d101      	bne.n	8021ad0 <__lo0bits+0x4e>
 8021acc:	3002      	adds	r0, #2
 8021ace:	089b      	lsrs	r3, r3, #2
 8021ad0:	07da      	lsls	r2, r3, #31
 8021ad2:	d4e9      	bmi.n	8021aa8 <__lo0bits+0x26>
 8021ad4:	3001      	adds	r0, #1
 8021ad6:	085b      	lsrs	r3, r3, #1
 8021ad8:	d1e6      	bne.n	8021aa8 <__lo0bits+0x26>
 8021ada:	2020      	movs	r0, #32
 8021adc:	e7e2      	b.n	8021aa4 <__lo0bits+0x22>
	...

08021ae0 <__i2b>:
 8021ae0:	b510      	push	{r4, lr}
 8021ae2:	000c      	movs	r4, r1
 8021ae4:	2101      	movs	r1, #1
 8021ae6:	f7ff feb3 	bl	8021850 <_Balloc>
 8021aea:	2800      	cmp	r0, #0
 8021aec:	d107      	bne.n	8021afe <__i2b+0x1e>
 8021aee:	2146      	movs	r1, #70	@ 0x46
 8021af0:	4c05      	ldr	r4, [pc, #20]	@ (8021b08 <__i2b+0x28>)
 8021af2:	0002      	movs	r2, r0
 8021af4:	4b05      	ldr	r3, [pc, #20]	@ (8021b0c <__i2b+0x2c>)
 8021af6:	0020      	movs	r0, r4
 8021af8:	31ff      	adds	r1, #255	@ 0xff
 8021afa:	f000 ff89 	bl	8022a10 <__assert_func>
 8021afe:	2301      	movs	r3, #1
 8021b00:	6144      	str	r4, [r0, #20]
 8021b02:	6103      	str	r3, [r0, #16]
 8021b04:	bd10      	pop	{r4, pc}
 8021b06:	46c0      	nop			@ (mov r8, r8)
 8021b08:	08025cca 	.word	0x08025cca
 8021b0c:	08025c59 	.word	0x08025c59

08021b10 <__multiply>:
 8021b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021b12:	0014      	movs	r4, r2
 8021b14:	690a      	ldr	r2, [r1, #16]
 8021b16:	6923      	ldr	r3, [r4, #16]
 8021b18:	000d      	movs	r5, r1
 8021b1a:	b08b      	sub	sp, #44	@ 0x2c
 8021b1c:	429a      	cmp	r2, r3
 8021b1e:	db02      	blt.n	8021b26 <__multiply+0x16>
 8021b20:	0023      	movs	r3, r4
 8021b22:	000c      	movs	r4, r1
 8021b24:	001d      	movs	r5, r3
 8021b26:	6927      	ldr	r7, [r4, #16]
 8021b28:	692e      	ldr	r6, [r5, #16]
 8021b2a:	6861      	ldr	r1, [r4, #4]
 8021b2c:	19bb      	adds	r3, r7, r6
 8021b2e:	9303      	str	r3, [sp, #12]
 8021b30:	68a3      	ldr	r3, [r4, #8]
 8021b32:	19ba      	adds	r2, r7, r6
 8021b34:	4293      	cmp	r3, r2
 8021b36:	da00      	bge.n	8021b3a <__multiply+0x2a>
 8021b38:	3101      	adds	r1, #1
 8021b3a:	f7ff fe89 	bl	8021850 <_Balloc>
 8021b3e:	9002      	str	r0, [sp, #8]
 8021b40:	2800      	cmp	r0, #0
 8021b42:	d106      	bne.n	8021b52 <__multiply+0x42>
 8021b44:	21b1      	movs	r1, #177	@ 0xb1
 8021b46:	4b49      	ldr	r3, [pc, #292]	@ (8021c6c <__multiply+0x15c>)
 8021b48:	4849      	ldr	r0, [pc, #292]	@ (8021c70 <__multiply+0x160>)
 8021b4a:	9a02      	ldr	r2, [sp, #8]
 8021b4c:	0049      	lsls	r1, r1, #1
 8021b4e:	f000 ff5f 	bl	8022a10 <__assert_func>
 8021b52:	9b02      	ldr	r3, [sp, #8]
 8021b54:	2200      	movs	r2, #0
 8021b56:	3314      	adds	r3, #20
 8021b58:	469c      	mov	ip, r3
 8021b5a:	19bb      	adds	r3, r7, r6
 8021b5c:	009b      	lsls	r3, r3, #2
 8021b5e:	4463      	add	r3, ip
 8021b60:	9304      	str	r3, [sp, #16]
 8021b62:	4663      	mov	r3, ip
 8021b64:	9904      	ldr	r1, [sp, #16]
 8021b66:	428b      	cmp	r3, r1
 8021b68:	d32a      	bcc.n	8021bc0 <__multiply+0xb0>
 8021b6a:	0023      	movs	r3, r4
 8021b6c:	00bf      	lsls	r7, r7, #2
 8021b6e:	3314      	adds	r3, #20
 8021b70:	3514      	adds	r5, #20
 8021b72:	9308      	str	r3, [sp, #32]
 8021b74:	00b6      	lsls	r6, r6, #2
 8021b76:	19db      	adds	r3, r3, r7
 8021b78:	9305      	str	r3, [sp, #20]
 8021b7a:	19ab      	adds	r3, r5, r6
 8021b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b7e:	2304      	movs	r3, #4
 8021b80:	9306      	str	r3, [sp, #24]
 8021b82:	0023      	movs	r3, r4
 8021b84:	9a05      	ldr	r2, [sp, #20]
 8021b86:	3315      	adds	r3, #21
 8021b88:	9501      	str	r5, [sp, #4]
 8021b8a:	429a      	cmp	r2, r3
 8021b8c:	d305      	bcc.n	8021b9a <__multiply+0x8a>
 8021b8e:	1b13      	subs	r3, r2, r4
 8021b90:	3b15      	subs	r3, #21
 8021b92:	089b      	lsrs	r3, r3, #2
 8021b94:	3301      	adds	r3, #1
 8021b96:	009b      	lsls	r3, r3, #2
 8021b98:	9306      	str	r3, [sp, #24]
 8021b9a:	9b01      	ldr	r3, [sp, #4]
 8021b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021b9e:	4293      	cmp	r3, r2
 8021ba0:	d310      	bcc.n	8021bc4 <__multiply+0xb4>
 8021ba2:	9b03      	ldr	r3, [sp, #12]
 8021ba4:	2b00      	cmp	r3, #0
 8021ba6:	dd05      	ble.n	8021bb4 <__multiply+0xa4>
 8021ba8:	9b04      	ldr	r3, [sp, #16]
 8021baa:	3b04      	subs	r3, #4
 8021bac:	9304      	str	r3, [sp, #16]
 8021bae:	681b      	ldr	r3, [r3, #0]
 8021bb0:	2b00      	cmp	r3, #0
 8021bb2:	d056      	beq.n	8021c62 <__multiply+0x152>
 8021bb4:	9b02      	ldr	r3, [sp, #8]
 8021bb6:	9a03      	ldr	r2, [sp, #12]
 8021bb8:	0018      	movs	r0, r3
 8021bba:	611a      	str	r2, [r3, #16]
 8021bbc:	b00b      	add	sp, #44	@ 0x2c
 8021bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021bc0:	c304      	stmia	r3!, {r2}
 8021bc2:	e7cf      	b.n	8021b64 <__multiply+0x54>
 8021bc4:	9b01      	ldr	r3, [sp, #4]
 8021bc6:	6818      	ldr	r0, [r3, #0]
 8021bc8:	b280      	uxth	r0, r0
 8021bca:	2800      	cmp	r0, #0
 8021bcc:	d01e      	beq.n	8021c0c <__multiply+0xfc>
 8021bce:	4667      	mov	r7, ip
 8021bd0:	2500      	movs	r5, #0
 8021bd2:	9e08      	ldr	r6, [sp, #32]
 8021bd4:	ce02      	ldmia	r6!, {r1}
 8021bd6:	683b      	ldr	r3, [r7, #0]
 8021bd8:	9307      	str	r3, [sp, #28]
 8021bda:	b28b      	uxth	r3, r1
 8021bdc:	4343      	muls	r3, r0
 8021bde:	001a      	movs	r2, r3
 8021be0:	466b      	mov	r3, sp
 8021be2:	0c09      	lsrs	r1, r1, #16
 8021be4:	8b9b      	ldrh	r3, [r3, #28]
 8021be6:	4341      	muls	r1, r0
 8021be8:	18d3      	adds	r3, r2, r3
 8021bea:	9a07      	ldr	r2, [sp, #28]
 8021bec:	195b      	adds	r3, r3, r5
 8021bee:	0c12      	lsrs	r2, r2, #16
 8021bf0:	1889      	adds	r1, r1, r2
 8021bf2:	0c1a      	lsrs	r2, r3, #16
 8021bf4:	188a      	adds	r2, r1, r2
 8021bf6:	b29b      	uxth	r3, r3
 8021bf8:	0c15      	lsrs	r5, r2, #16
 8021bfa:	0412      	lsls	r2, r2, #16
 8021bfc:	431a      	orrs	r2, r3
 8021bfe:	9b05      	ldr	r3, [sp, #20]
 8021c00:	c704      	stmia	r7!, {r2}
 8021c02:	42b3      	cmp	r3, r6
 8021c04:	d8e6      	bhi.n	8021bd4 <__multiply+0xc4>
 8021c06:	4663      	mov	r3, ip
 8021c08:	9a06      	ldr	r2, [sp, #24]
 8021c0a:	509d      	str	r5, [r3, r2]
 8021c0c:	9b01      	ldr	r3, [sp, #4]
 8021c0e:	6818      	ldr	r0, [r3, #0]
 8021c10:	0c00      	lsrs	r0, r0, #16
 8021c12:	d020      	beq.n	8021c56 <__multiply+0x146>
 8021c14:	4663      	mov	r3, ip
 8021c16:	0025      	movs	r5, r4
 8021c18:	4661      	mov	r1, ip
 8021c1a:	2700      	movs	r7, #0
 8021c1c:	681b      	ldr	r3, [r3, #0]
 8021c1e:	3514      	adds	r5, #20
 8021c20:	682a      	ldr	r2, [r5, #0]
 8021c22:	680e      	ldr	r6, [r1, #0]
 8021c24:	b292      	uxth	r2, r2
 8021c26:	4342      	muls	r2, r0
 8021c28:	0c36      	lsrs	r6, r6, #16
 8021c2a:	1992      	adds	r2, r2, r6
 8021c2c:	19d2      	adds	r2, r2, r7
 8021c2e:	0416      	lsls	r6, r2, #16
 8021c30:	b29b      	uxth	r3, r3
 8021c32:	431e      	orrs	r6, r3
 8021c34:	600e      	str	r6, [r1, #0]
 8021c36:	cd40      	ldmia	r5!, {r6}
 8021c38:	684b      	ldr	r3, [r1, #4]
 8021c3a:	0c36      	lsrs	r6, r6, #16
 8021c3c:	4346      	muls	r6, r0
 8021c3e:	b29b      	uxth	r3, r3
 8021c40:	0c12      	lsrs	r2, r2, #16
 8021c42:	18f3      	adds	r3, r6, r3
 8021c44:	189b      	adds	r3, r3, r2
 8021c46:	9a05      	ldr	r2, [sp, #20]
 8021c48:	0c1f      	lsrs	r7, r3, #16
 8021c4a:	3104      	adds	r1, #4
 8021c4c:	42aa      	cmp	r2, r5
 8021c4e:	d8e7      	bhi.n	8021c20 <__multiply+0x110>
 8021c50:	4662      	mov	r2, ip
 8021c52:	9906      	ldr	r1, [sp, #24]
 8021c54:	5053      	str	r3, [r2, r1]
 8021c56:	9b01      	ldr	r3, [sp, #4]
 8021c58:	3304      	adds	r3, #4
 8021c5a:	9301      	str	r3, [sp, #4]
 8021c5c:	2304      	movs	r3, #4
 8021c5e:	449c      	add	ip, r3
 8021c60:	e79b      	b.n	8021b9a <__multiply+0x8a>
 8021c62:	9b03      	ldr	r3, [sp, #12]
 8021c64:	3b01      	subs	r3, #1
 8021c66:	9303      	str	r3, [sp, #12]
 8021c68:	e79b      	b.n	8021ba2 <__multiply+0x92>
 8021c6a:	46c0      	nop			@ (mov r8, r8)
 8021c6c:	08025c59 	.word	0x08025c59
 8021c70:	08025cca 	.word	0x08025cca

08021c74 <__pow5mult>:
 8021c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021c76:	2303      	movs	r3, #3
 8021c78:	0015      	movs	r5, r2
 8021c7a:	0007      	movs	r7, r0
 8021c7c:	000e      	movs	r6, r1
 8021c7e:	401a      	ands	r2, r3
 8021c80:	421d      	tst	r5, r3
 8021c82:	d008      	beq.n	8021c96 <__pow5mult+0x22>
 8021c84:	4925      	ldr	r1, [pc, #148]	@ (8021d1c <__pow5mult+0xa8>)
 8021c86:	3a01      	subs	r2, #1
 8021c88:	0092      	lsls	r2, r2, #2
 8021c8a:	5852      	ldr	r2, [r2, r1]
 8021c8c:	2300      	movs	r3, #0
 8021c8e:	0031      	movs	r1, r6
 8021c90:	f7ff fe46 	bl	8021920 <__multadd>
 8021c94:	0006      	movs	r6, r0
 8021c96:	10ad      	asrs	r5, r5, #2
 8021c98:	d03d      	beq.n	8021d16 <__pow5mult+0xa2>
 8021c9a:	69fc      	ldr	r4, [r7, #28]
 8021c9c:	2c00      	cmp	r4, #0
 8021c9e:	d10f      	bne.n	8021cc0 <__pow5mult+0x4c>
 8021ca0:	2010      	movs	r0, #16
 8021ca2:	f7ff fd07 	bl	80216b4 <malloc>
 8021ca6:	1e02      	subs	r2, r0, #0
 8021ca8:	61f8      	str	r0, [r7, #28]
 8021caa:	d105      	bne.n	8021cb8 <__pow5mult+0x44>
 8021cac:	21b4      	movs	r1, #180	@ 0xb4
 8021cae:	4b1c      	ldr	r3, [pc, #112]	@ (8021d20 <__pow5mult+0xac>)
 8021cb0:	481c      	ldr	r0, [pc, #112]	@ (8021d24 <__pow5mult+0xb0>)
 8021cb2:	31ff      	adds	r1, #255	@ 0xff
 8021cb4:	f000 feac 	bl	8022a10 <__assert_func>
 8021cb8:	6044      	str	r4, [r0, #4]
 8021cba:	6084      	str	r4, [r0, #8]
 8021cbc:	6004      	str	r4, [r0, #0]
 8021cbe:	60c4      	str	r4, [r0, #12]
 8021cc0:	69fb      	ldr	r3, [r7, #28]
 8021cc2:	689c      	ldr	r4, [r3, #8]
 8021cc4:	9301      	str	r3, [sp, #4]
 8021cc6:	2c00      	cmp	r4, #0
 8021cc8:	d108      	bne.n	8021cdc <__pow5mult+0x68>
 8021cca:	0038      	movs	r0, r7
 8021ccc:	4916      	ldr	r1, [pc, #88]	@ (8021d28 <__pow5mult+0xb4>)
 8021cce:	f7ff ff07 	bl	8021ae0 <__i2b>
 8021cd2:	9b01      	ldr	r3, [sp, #4]
 8021cd4:	0004      	movs	r4, r0
 8021cd6:	6098      	str	r0, [r3, #8]
 8021cd8:	2300      	movs	r3, #0
 8021cda:	6003      	str	r3, [r0, #0]
 8021cdc:	2301      	movs	r3, #1
 8021cde:	421d      	tst	r5, r3
 8021ce0:	d00a      	beq.n	8021cf8 <__pow5mult+0x84>
 8021ce2:	0031      	movs	r1, r6
 8021ce4:	0022      	movs	r2, r4
 8021ce6:	0038      	movs	r0, r7
 8021ce8:	f7ff ff12 	bl	8021b10 <__multiply>
 8021cec:	0031      	movs	r1, r6
 8021cee:	9001      	str	r0, [sp, #4]
 8021cf0:	0038      	movs	r0, r7
 8021cf2:	f7ff fdf1 	bl	80218d8 <_Bfree>
 8021cf6:	9e01      	ldr	r6, [sp, #4]
 8021cf8:	106d      	asrs	r5, r5, #1
 8021cfa:	d00c      	beq.n	8021d16 <__pow5mult+0xa2>
 8021cfc:	6820      	ldr	r0, [r4, #0]
 8021cfe:	2800      	cmp	r0, #0
 8021d00:	d107      	bne.n	8021d12 <__pow5mult+0x9e>
 8021d02:	0022      	movs	r2, r4
 8021d04:	0021      	movs	r1, r4
 8021d06:	0038      	movs	r0, r7
 8021d08:	f7ff ff02 	bl	8021b10 <__multiply>
 8021d0c:	2300      	movs	r3, #0
 8021d0e:	6020      	str	r0, [r4, #0]
 8021d10:	6003      	str	r3, [r0, #0]
 8021d12:	0004      	movs	r4, r0
 8021d14:	e7e2      	b.n	8021cdc <__pow5mult+0x68>
 8021d16:	0030      	movs	r0, r6
 8021d18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021d1a:	46c0      	nop			@ (mov r8, r8)
 8021d1c:	08025d24 	.word	0x08025d24
 8021d20:	08025bea 	.word	0x08025bea
 8021d24:	08025cca 	.word	0x08025cca
 8021d28:	00000271 	.word	0x00000271

08021d2c <__lshift>:
 8021d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d2e:	000c      	movs	r4, r1
 8021d30:	0016      	movs	r6, r2
 8021d32:	6923      	ldr	r3, [r4, #16]
 8021d34:	1157      	asrs	r7, r2, #5
 8021d36:	b085      	sub	sp, #20
 8021d38:	18fb      	adds	r3, r7, r3
 8021d3a:	9301      	str	r3, [sp, #4]
 8021d3c:	3301      	adds	r3, #1
 8021d3e:	9300      	str	r3, [sp, #0]
 8021d40:	6849      	ldr	r1, [r1, #4]
 8021d42:	68a3      	ldr	r3, [r4, #8]
 8021d44:	9002      	str	r0, [sp, #8]
 8021d46:	9a00      	ldr	r2, [sp, #0]
 8021d48:	4293      	cmp	r3, r2
 8021d4a:	db10      	blt.n	8021d6e <__lshift+0x42>
 8021d4c:	9802      	ldr	r0, [sp, #8]
 8021d4e:	f7ff fd7f 	bl	8021850 <_Balloc>
 8021d52:	2300      	movs	r3, #0
 8021d54:	0001      	movs	r1, r0
 8021d56:	0005      	movs	r5, r0
 8021d58:	001a      	movs	r2, r3
 8021d5a:	3114      	adds	r1, #20
 8021d5c:	4298      	cmp	r0, r3
 8021d5e:	d10c      	bne.n	8021d7a <__lshift+0x4e>
 8021d60:	21ef      	movs	r1, #239	@ 0xef
 8021d62:	002a      	movs	r2, r5
 8021d64:	4b25      	ldr	r3, [pc, #148]	@ (8021dfc <__lshift+0xd0>)
 8021d66:	4826      	ldr	r0, [pc, #152]	@ (8021e00 <__lshift+0xd4>)
 8021d68:	0049      	lsls	r1, r1, #1
 8021d6a:	f000 fe51 	bl	8022a10 <__assert_func>
 8021d6e:	3101      	adds	r1, #1
 8021d70:	005b      	lsls	r3, r3, #1
 8021d72:	e7e8      	b.n	8021d46 <__lshift+0x1a>
 8021d74:	0098      	lsls	r0, r3, #2
 8021d76:	500a      	str	r2, [r1, r0]
 8021d78:	3301      	adds	r3, #1
 8021d7a:	42bb      	cmp	r3, r7
 8021d7c:	dbfa      	blt.n	8021d74 <__lshift+0x48>
 8021d7e:	43fb      	mvns	r3, r7
 8021d80:	17db      	asrs	r3, r3, #31
 8021d82:	401f      	ands	r7, r3
 8021d84:	00bf      	lsls	r7, r7, #2
 8021d86:	0023      	movs	r3, r4
 8021d88:	201f      	movs	r0, #31
 8021d8a:	19c9      	adds	r1, r1, r7
 8021d8c:	0037      	movs	r7, r6
 8021d8e:	6922      	ldr	r2, [r4, #16]
 8021d90:	3314      	adds	r3, #20
 8021d92:	0092      	lsls	r2, r2, #2
 8021d94:	189a      	adds	r2, r3, r2
 8021d96:	4007      	ands	r7, r0
 8021d98:	4206      	tst	r6, r0
 8021d9a:	d029      	beq.n	8021df0 <__lshift+0xc4>
 8021d9c:	3001      	adds	r0, #1
 8021d9e:	1bc0      	subs	r0, r0, r7
 8021da0:	9003      	str	r0, [sp, #12]
 8021da2:	468c      	mov	ip, r1
 8021da4:	2000      	movs	r0, #0
 8021da6:	681e      	ldr	r6, [r3, #0]
 8021da8:	40be      	lsls	r6, r7
 8021daa:	4306      	orrs	r6, r0
 8021dac:	4660      	mov	r0, ip
 8021dae:	c040      	stmia	r0!, {r6}
 8021db0:	4684      	mov	ip, r0
 8021db2:	9e03      	ldr	r6, [sp, #12]
 8021db4:	cb01      	ldmia	r3!, {r0}
 8021db6:	40f0      	lsrs	r0, r6
 8021db8:	429a      	cmp	r2, r3
 8021dba:	d8f4      	bhi.n	8021da6 <__lshift+0x7a>
 8021dbc:	0026      	movs	r6, r4
 8021dbe:	3615      	adds	r6, #21
 8021dc0:	2304      	movs	r3, #4
 8021dc2:	42b2      	cmp	r2, r6
 8021dc4:	d304      	bcc.n	8021dd0 <__lshift+0xa4>
 8021dc6:	1b13      	subs	r3, r2, r4
 8021dc8:	3b15      	subs	r3, #21
 8021dca:	089b      	lsrs	r3, r3, #2
 8021dcc:	3301      	adds	r3, #1
 8021dce:	009b      	lsls	r3, r3, #2
 8021dd0:	50c8      	str	r0, [r1, r3]
 8021dd2:	2800      	cmp	r0, #0
 8021dd4:	d002      	beq.n	8021ddc <__lshift+0xb0>
 8021dd6:	9b01      	ldr	r3, [sp, #4]
 8021dd8:	3302      	adds	r3, #2
 8021dda:	9300      	str	r3, [sp, #0]
 8021ddc:	9b00      	ldr	r3, [sp, #0]
 8021dde:	9802      	ldr	r0, [sp, #8]
 8021de0:	3b01      	subs	r3, #1
 8021de2:	0021      	movs	r1, r4
 8021de4:	612b      	str	r3, [r5, #16]
 8021de6:	f7ff fd77 	bl	80218d8 <_Bfree>
 8021dea:	0028      	movs	r0, r5
 8021dec:	b005      	add	sp, #20
 8021dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021df0:	cb01      	ldmia	r3!, {r0}
 8021df2:	c101      	stmia	r1!, {r0}
 8021df4:	429a      	cmp	r2, r3
 8021df6:	d8fb      	bhi.n	8021df0 <__lshift+0xc4>
 8021df8:	e7f0      	b.n	8021ddc <__lshift+0xb0>
 8021dfa:	46c0      	nop			@ (mov r8, r8)
 8021dfc:	08025c59 	.word	0x08025c59
 8021e00:	08025cca 	.word	0x08025cca

08021e04 <__mcmp>:
 8021e04:	b530      	push	{r4, r5, lr}
 8021e06:	690b      	ldr	r3, [r1, #16]
 8021e08:	6904      	ldr	r4, [r0, #16]
 8021e0a:	0002      	movs	r2, r0
 8021e0c:	1ae0      	subs	r0, r4, r3
 8021e0e:	429c      	cmp	r4, r3
 8021e10:	d10f      	bne.n	8021e32 <__mcmp+0x2e>
 8021e12:	3214      	adds	r2, #20
 8021e14:	009b      	lsls	r3, r3, #2
 8021e16:	3114      	adds	r1, #20
 8021e18:	0014      	movs	r4, r2
 8021e1a:	18c9      	adds	r1, r1, r3
 8021e1c:	18d2      	adds	r2, r2, r3
 8021e1e:	3a04      	subs	r2, #4
 8021e20:	3904      	subs	r1, #4
 8021e22:	6815      	ldr	r5, [r2, #0]
 8021e24:	680b      	ldr	r3, [r1, #0]
 8021e26:	429d      	cmp	r5, r3
 8021e28:	d004      	beq.n	8021e34 <__mcmp+0x30>
 8021e2a:	2001      	movs	r0, #1
 8021e2c:	429d      	cmp	r5, r3
 8021e2e:	d200      	bcs.n	8021e32 <__mcmp+0x2e>
 8021e30:	3802      	subs	r0, #2
 8021e32:	bd30      	pop	{r4, r5, pc}
 8021e34:	4294      	cmp	r4, r2
 8021e36:	d3f2      	bcc.n	8021e1e <__mcmp+0x1a>
 8021e38:	e7fb      	b.n	8021e32 <__mcmp+0x2e>
	...

08021e3c <__mdiff>:
 8021e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021e3e:	000c      	movs	r4, r1
 8021e40:	b087      	sub	sp, #28
 8021e42:	9000      	str	r0, [sp, #0]
 8021e44:	0011      	movs	r1, r2
 8021e46:	0020      	movs	r0, r4
 8021e48:	0017      	movs	r7, r2
 8021e4a:	f7ff ffdb 	bl	8021e04 <__mcmp>
 8021e4e:	1e05      	subs	r5, r0, #0
 8021e50:	d110      	bne.n	8021e74 <__mdiff+0x38>
 8021e52:	0001      	movs	r1, r0
 8021e54:	9800      	ldr	r0, [sp, #0]
 8021e56:	f7ff fcfb 	bl	8021850 <_Balloc>
 8021e5a:	1e02      	subs	r2, r0, #0
 8021e5c:	d104      	bne.n	8021e68 <__mdiff+0x2c>
 8021e5e:	4b40      	ldr	r3, [pc, #256]	@ (8021f60 <__mdiff+0x124>)
 8021e60:	4840      	ldr	r0, [pc, #256]	@ (8021f64 <__mdiff+0x128>)
 8021e62:	4941      	ldr	r1, [pc, #260]	@ (8021f68 <__mdiff+0x12c>)
 8021e64:	f000 fdd4 	bl	8022a10 <__assert_func>
 8021e68:	2301      	movs	r3, #1
 8021e6a:	6145      	str	r5, [r0, #20]
 8021e6c:	6103      	str	r3, [r0, #16]
 8021e6e:	0010      	movs	r0, r2
 8021e70:	b007      	add	sp, #28
 8021e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021e74:	2600      	movs	r6, #0
 8021e76:	42b0      	cmp	r0, r6
 8021e78:	da03      	bge.n	8021e82 <__mdiff+0x46>
 8021e7a:	0023      	movs	r3, r4
 8021e7c:	003c      	movs	r4, r7
 8021e7e:	001f      	movs	r7, r3
 8021e80:	3601      	adds	r6, #1
 8021e82:	6861      	ldr	r1, [r4, #4]
 8021e84:	9800      	ldr	r0, [sp, #0]
 8021e86:	f7ff fce3 	bl	8021850 <_Balloc>
 8021e8a:	1e02      	subs	r2, r0, #0
 8021e8c:	d103      	bne.n	8021e96 <__mdiff+0x5a>
 8021e8e:	4b34      	ldr	r3, [pc, #208]	@ (8021f60 <__mdiff+0x124>)
 8021e90:	4834      	ldr	r0, [pc, #208]	@ (8021f64 <__mdiff+0x128>)
 8021e92:	4936      	ldr	r1, [pc, #216]	@ (8021f6c <__mdiff+0x130>)
 8021e94:	e7e6      	b.n	8021e64 <__mdiff+0x28>
 8021e96:	6923      	ldr	r3, [r4, #16]
 8021e98:	3414      	adds	r4, #20
 8021e9a:	9300      	str	r3, [sp, #0]
 8021e9c:	009b      	lsls	r3, r3, #2
 8021e9e:	18e3      	adds	r3, r4, r3
 8021ea0:	0021      	movs	r1, r4
 8021ea2:	9401      	str	r4, [sp, #4]
 8021ea4:	003c      	movs	r4, r7
 8021ea6:	9302      	str	r3, [sp, #8]
 8021ea8:	693b      	ldr	r3, [r7, #16]
 8021eaa:	3414      	adds	r4, #20
 8021eac:	009b      	lsls	r3, r3, #2
 8021eae:	18e3      	adds	r3, r4, r3
 8021eb0:	9303      	str	r3, [sp, #12]
 8021eb2:	0003      	movs	r3, r0
 8021eb4:	60c6      	str	r6, [r0, #12]
 8021eb6:	468c      	mov	ip, r1
 8021eb8:	2000      	movs	r0, #0
 8021eba:	3314      	adds	r3, #20
 8021ebc:	9304      	str	r3, [sp, #16]
 8021ebe:	9305      	str	r3, [sp, #20]
 8021ec0:	4663      	mov	r3, ip
 8021ec2:	cb20      	ldmia	r3!, {r5}
 8021ec4:	b2a9      	uxth	r1, r5
 8021ec6:	000e      	movs	r6, r1
 8021ec8:	469c      	mov	ip, r3
 8021eca:	cc08      	ldmia	r4!, {r3}
 8021ecc:	0c2d      	lsrs	r5, r5, #16
 8021ece:	b299      	uxth	r1, r3
 8021ed0:	1a71      	subs	r1, r6, r1
 8021ed2:	1809      	adds	r1, r1, r0
 8021ed4:	0c1b      	lsrs	r3, r3, #16
 8021ed6:	1408      	asrs	r0, r1, #16
 8021ed8:	1aeb      	subs	r3, r5, r3
 8021eda:	181b      	adds	r3, r3, r0
 8021edc:	1418      	asrs	r0, r3, #16
 8021ede:	b289      	uxth	r1, r1
 8021ee0:	041b      	lsls	r3, r3, #16
 8021ee2:	4319      	orrs	r1, r3
 8021ee4:	9b05      	ldr	r3, [sp, #20]
 8021ee6:	c302      	stmia	r3!, {r1}
 8021ee8:	9305      	str	r3, [sp, #20]
 8021eea:	9b03      	ldr	r3, [sp, #12]
 8021eec:	42a3      	cmp	r3, r4
 8021eee:	d8e7      	bhi.n	8021ec0 <__mdiff+0x84>
 8021ef0:	0039      	movs	r1, r7
 8021ef2:	9c03      	ldr	r4, [sp, #12]
 8021ef4:	3115      	adds	r1, #21
 8021ef6:	2304      	movs	r3, #4
 8021ef8:	428c      	cmp	r4, r1
 8021efa:	d304      	bcc.n	8021f06 <__mdiff+0xca>
 8021efc:	1be3      	subs	r3, r4, r7
 8021efe:	3b15      	subs	r3, #21
 8021f00:	089b      	lsrs	r3, r3, #2
 8021f02:	3301      	adds	r3, #1
 8021f04:	009b      	lsls	r3, r3, #2
 8021f06:	9901      	ldr	r1, [sp, #4]
 8021f08:	18cd      	adds	r5, r1, r3
 8021f0a:	9904      	ldr	r1, [sp, #16]
 8021f0c:	002e      	movs	r6, r5
 8021f0e:	18cb      	adds	r3, r1, r3
 8021f10:	001f      	movs	r7, r3
 8021f12:	9902      	ldr	r1, [sp, #8]
 8021f14:	428e      	cmp	r6, r1
 8021f16:	d311      	bcc.n	8021f3c <__mdiff+0x100>
 8021f18:	9c02      	ldr	r4, [sp, #8]
 8021f1a:	1ee9      	subs	r1, r5, #3
 8021f1c:	2000      	movs	r0, #0
 8021f1e:	428c      	cmp	r4, r1
 8021f20:	d304      	bcc.n	8021f2c <__mdiff+0xf0>
 8021f22:	0021      	movs	r1, r4
 8021f24:	3103      	adds	r1, #3
 8021f26:	1b49      	subs	r1, r1, r5
 8021f28:	0889      	lsrs	r1, r1, #2
 8021f2a:	0088      	lsls	r0, r1, #2
 8021f2c:	181b      	adds	r3, r3, r0
 8021f2e:	3b04      	subs	r3, #4
 8021f30:	6819      	ldr	r1, [r3, #0]
 8021f32:	2900      	cmp	r1, #0
 8021f34:	d010      	beq.n	8021f58 <__mdiff+0x11c>
 8021f36:	9b00      	ldr	r3, [sp, #0]
 8021f38:	6113      	str	r3, [r2, #16]
 8021f3a:	e798      	b.n	8021e6e <__mdiff+0x32>
 8021f3c:	4684      	mov	ip, r0
 8021f3e:	ce02      	ldmia	r6!, {r1}
 8021f40:	b288      	uxth	r0, r1
 8021f42:	4460      	add	r0, ip
 8021f44:	1400      	asrs	r0, r0, #16
 8021f46:	0c0c      	lsrs	r4, r1, #16
 8021f48:	1904      	adds	r4, r0, r4
 8021f4a:	4461      	add	r1, ip
 8021f4c:	1420      	asrs	r0, r4, #16
 8021f4e:	b289      	uxth	r1, r1
 8021f50:	0424      	lsls	r4, r4, #16
 8021f52:	4321      	orrs	r1, r4
 8021f54:	c702      	stmia	r7!, {r1}
 8021f56:	e7dc      	b.n	8021f12 <__mdiff+0xd6>
 8021f58:	9900      	ldr	r1, [sp, #0]
 8021f5a:	3901      	subs	r1, #1
 8021f5c:	9100      	str	r1, [sp, #0]
 8021f5e:	e7e6      	b.n	8021f2e <__mdiff+0xf2>
 8021f60:	08025c59 	.word	0x08025c59
 8021f64:	08025cca 	.word	0x08025cca
 8021f68:	00000237 	.word	0x00000237
 8021f6c:	00000245 	.word	0x00000245

08021f70 <__ulp>:
 8021f70:	b510      	push	{r4, lr}
 8021f72:	2400      	movs	r4, #0
 8021f74:	4b0c      	ldr	r3, [pc, #48]	@ (8021fa8 <__ulp+0x38>)
 8021f76:	4a0d      	ldr	r2, [pc, #52]	@ (8021fac <__ulp+0x3c>)
 8021f78:	400b      	ands	r3, r1
 8021f7a:	189b      	adds	r3, r3, r2
 8021f7c:	42a3      	cmp	r3, r4
 8021f7e:	dc06      	bgt.n	8021f8e <__ulp+0x1e>
 8021f80:	425b      	negs	r3, r3
 8021f82:	151a      	asrs	r2, r3, #20
 8021f84:	2a13      	cmp	r2, #19
 8021f86:	dc05      	bgt.n	8021f94 <__ulp+0x24>
 8021f88:	2380      	movs	r3, #128	@ 0x80
 8021f8a:	031b      	lsls	r3, r3, #12
 8021f8c:	4113      	asrs	r3, r2
 8021f8e:	0019      	movs	r1, r3
 8021f90:	0020      	movs	r0, r4
 8021f92:	bd10      	pop	{r4, pc}
 8021f94:	3a14      	subs	r2, #20
 8021f96:	2401      	movs	r4, #1
 8021f98:	2a1e      	cmp	r2, #30
 8021f9a:	dc02      	bgt.n	8021fa2 <__ulp+0x32>
 8021f9c:	2480      	movs	r4, #128	@ 0x80
 8021f9e:	0624      	lsls	r4, r4, #24
 8021fa0:	40d4      	lsrs	r4, r2
 8021fa2:	2300      	movs	r3, #0
 8021fa4:	e7f3      	b.n	8021f8e <__ulp+0x1e>
 8021fa6:	46c0      	nop			@ (mov r8, r8)
 8021fa8:	7ff00000 	.word	0x7ff00000
 8021fac:	fcc00000 	.word	0xfcc00000

08021fb0 <__b2d>:
 8021fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021fb2:	0006      	movs	r6, r0
 8021fb4:	6903      	ldr	r3, [r0, #16]
 8021fb6:	3614      	adds	r6, #20
 8021fb8:	009b      	lsls	r3, r3, #2
 8021fba:	18f3      	adds	r3, r6, r3
 8021fbc:	1f1d      	subs	r5, r3, #4
 8021fbe:	682c      	ldr	r4, [r5, #0]
 8021fc0:	000f      	movs	r7, r1
 8021fc2:	0020      	movs	r0, r4
 8021fc4:	9301      	str	r3, [sp, #4]
 8021fc6:	f7ff fd3b 	bl	8021a40 <__hi0bits>
 8021fca:	2220      	movs	r2, #32
 8021fcc:	1a12      	subs	r2, r2, r0
 8021fce:	603a      	str	r2, [r7, #0]
 8021fd0:	0003      	movs	r3, r0
 8021fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8022044 <__b2d+0x94>)
 8021fd4:	280a      	cmp	r0, #10
 8021fd6:	dc15      	bgt.n	8022004 <__b2d+0x54>
 8021fd8:	210b      	movs	r1, #11
 8021fda:	0027      	movs	r7, r4
 8021fdc:	1a09      	subs	r1, r1, r0
 8021fde:	40cf      	lsrs	r7, r1
 8021fe0:	433a      	orrs	r2, r7
 8021fe2:	468c      	mov	ip, r1
 8021fe4:	0011      	movs	r1, r2
 8021fe6:	2200      	movs	r2, #0
 8021fe8:	42ae      	cmp	r6, r5
 8021fea:	d202      	bcs.n	8021ff2 <__b2d+0x42>
 8021fec:	9a01      	ldr	r2, [sp, #4]
 8021fee:	3a08      	subs	r2, #8
 8021ff0:	6812      	ldr	r2, [r2, #0]
 8021ff2:	3315      	adds	r3, #21
 8021ff4:	409c      	lsls	r4, r3
 8021ff6:	4663      	mov	r3, ip
 8021ff8:	0027      	movs	r7, r4
 8021ffa:	40da      	lsrs	r2, r3
 8021ffc:	4317      	orrs	r7, r2
 8021ffe:	0038      	movs	r0, r7
 8022000:	b003      	add	sp, #12
 8022002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022004:	2700      	movs	r7, #0
 8022006:	42ae      	cmp	r6, r5
 8022008:	d202      	bcs.n	8022010 <__b2d+0x60>
 802200a:	9d01      	ldr	r5, [sp, #4]
 802200c:	3d08      	subs	r5, #8
 802200e:	682f      	ldr	r7, [r5, #0]
 8022010:	210b      	movs	r1, #11
 8022012:	4249      	negs	r1, r1
 8022014:	468c      	mov	ip, r1
 8022016:	449c      	add	ip, r3
 8022018:	2b0b      	cmp	r3, #11
 802201a:	d010      	beq.n	802203e <__b2d+0x8e>
 802201c:	4661      	mov	r1, ip
 802201e:	2320      	movs	r3, #32
 8022020:	408c      	lsls	r4, r1
 8022022:	1a5b      	subs	r3, r3, r1
 8022024:	0039      	movs	r1, r7
 8022026:	40d9      	lsrs	r1, r3
 8022028:	430c      	orrs	r4, r1
 802202a:	4322      	orrs	r2, r4
 802202c:	0011      	movs	r1, r2
 802202e:	2200      	movs	r2, #0
 8022030:	42b5      	cmp	r5, r6
 8022032:	d901      	bls.n	8022038 <__b2d+0x88>
 8022034:	3d04      	subs	r5, #4
 8022036:	682a      	ldr	r2, [r5, #0]
 8022038:	4664      	mov	r4, ip
 802203a:	40a7      	lsls	r7, r4
 802203c:	e7dd      	b.n	8021ffa <__b2d+0x4a>
 802203e:	4322      	orrs	r2, r4
 8022040:	0011      	movs	r1, r2
 8022042:	e7dc      	b.n	8021ffe <__b2d+0x4e>
 8022044:	3ff00000 	.word	0x3ff00000

08022048 <__d2b>:
 8022048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802204a:	2101      	movs	r1, #1
 802204c:	0016      	movs	r6, r2
 802204e:	001f      	movs	r7, r3
 8022050:	f7ff fbfe 	bl	8021850 <_Balloc>
 8022054:	1e04      	subs	r4, r0, #0
 8022056:	d105      	bne.n	8022064 <__d2b+0x1c>
 8022058:	0022      	movs	r2, r4
 802205a:	4b25      	ldr	r3, [pc, #148]	@ (80220f0 <__d2b+0xa8>)
 802205c:	4825      	ldr	r0, [pc, #148]	@ (80220f4 <__d2b+0xac>)
 802205e:	4926      	ldr	r1, [pc, #152]	@ (80220f8 <__d2b+0xb0>)
 8022060:	f000 fcd6 	bl	8022a10 <__assert_func>
 8022064:	033b      	lsls	r3, r7, #12
 8022066:	007d      	lsls	r5, r7, #1
 8022068:	0b1b      	lsrs	r3, r3, #12
 802206a:	0d6d      	lsrs	r5, r5, #21
 802206c:	d002      	beq.n	8022074 <__d2b+0x2c>
 802206e:	2280      	movs	r2, #128	@ 0x80
 8022070:	0352      	lsls	r2, r2, #13
 8022072:	4313      	orrs	r3, r2
 8022074:	9301      	str	r3, [sp, #4]
 8022076:	2e00      	cmp	r6, #0
 8022078:	d025      	beq.n	80220c6 <__d2b+0x7e>
 802207a:	4668      	mov	r0, sp
 802207c:	9600      	str	r6, [sp, #0]
 802207e:	f7ff fd00 	bl	8021a82 <__lo0bits>
 8022082:	9b01      	ldr	r3, [sp, #4]
 8022084:	9900      	ldr	r1, [sp, #0]
 8022086:	2800      	cmp	r0, #0
 8022088:	d01b      	beq.n	80220c2 <__d2b+0x7a>
 802208a:	2220      	movs	r2, #32
 802208c:	001e      	movs	r6, r3
 802208e:	1a12      	subs	r2, r2, r0
 8022090:	4096      	lsls	r6, r2
 8022092:	0032      	movs	r2, r6
 8022094:	40c3      	lsrs	r3, r0
 8022096:	430a      	orrs	r2, r1
 8022098:	6162      	str	r2, [r4, #20]
 802209a:	9301      	str	r3, [sp, #4]
 802209c:	9e01      	ldr	r6, [sp, #4]
 802209e:	61a6      	str	r6, [r4, #24]
 80220a0:	1e73      	subs	r3, r6, #1
 80220a2:	419e      	sbcs	r6, r3
 80220a4:	3601      	adds	r6, #1
 80220a6:	6126      	str	r6, [r4, #16]
 80220a8:	2d00      	cmp	r5, #0
 80220aa:	d014      	beq.n	80220d6 <__d2b+0x8e>
 80220ac:	2635      	movs	r6, #53	@ 0x35
 80220ae:	4b13      	ldr	r3, [pc, #76]	@ (80220fc <__d2b+0xb4>)
 80220b0:	18ed      	adds	r5, r5, r3
 80220b2:	9b08      	ldr	r3, [sp, #32]
 80220b4:	182d      	adds	r5, r5, r0
 80220b6:	601d      	str	r5, [r3, #0]
 80220b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80220ba:	1a36      	subs	r6, r6, r0
 80220bc:	601e      	str	r6, [r3, #0]
 80220be:	0020      	movs	r0, r4
 80220c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80220c2:	6161      	str	r1, [r4, #20]
 80220c4:	e7ea      	b.n	802209c <__d2b+0x54>
 80220c6:	a801      	add	r0, sp, #4
 80220c8:	f7ff fcdb 	bl	8021a82 <__lo0bits>
 80220cc:	9b01      	ldr	r3, [sp, #4]
 80220ce:	2601      	movs	r6, #1
 80220d0:	6163      	str	r3, [r4, #20]
 80220d2:	3020      	adds	r0, #32
 80220d4:	e7e7      	b.n	80220a6 <__d2b+0x5e>
 80220d6:	4b0a      	ldr	r3, [pc, #40]	@ (8022100 <__d2b+0xb8>)
 80220d8:	18c0      	adds	r0, r0, r3
 80220da:	9b08      	ldr	r3, [sp, #32]
 80220dc:	6018      	str	r0, [r3, #0]
 80220de:	4b09      	ldr	r3, [pc, #36]	@ (8022104 <__d2b+0xbc>)
 80220e0:	18f3      	adds	r3, r6, r3
 80220e2:	009b      	lsls	r3, r3, #2
 80220e4:	18e3      	adds	r3, r4, r3
 80220e6:	6958      	ldr	r0, [r3, #20]
 80220e8:	f7ff fcaa 	bl	8021a40 <__hi0bits>
 80220ec:	0176      	lsls	r6, r6, #5
 80220ee:	e7e3      	b.n	80220b8 <__d2b+0x70>
 80220f0:	08025c59 	.word	0x08025c59
 80220f4:	08025cca 	.word	0x08025cca
 80220f8:	0000030f 	.word	0x0000030f
 80220fc:	fffffbcd 	.word	0xfffffbcd
 8022100:	fffffbce 	.word	0xfffffbce
 8022104:	3fffffff 	.word	0x3fffffff

08022108 <__ratio>:
 8022108:	b5f0      	push	{r4, r5, r6, r7, lr}
 802210a:	b087      	sub	sp, #28
 802210c:	000f      	movs	r7, r1
 802210e:	a904      	add	r1, sp, #16
 8022110:	0006      	movs	r6, r0
 8022112:	f7ff ff4d 	bl	8021fb0 <__b2d>
 8022116:	9000      	str	r0, [sp, #0]
 8022118:	9101      	str	r1, [sp, #4]
 802211a:	9b00      	ldr	r3, [sp, #0]
 802211c:	9c01      	ldr	r4, [sp, #4]
 802211e:	0038      	movs	r0, r7
 8022120:	a905      	add	r1, sp, #20
 8022122:	9302      	str	r3, [sp, #8]
 8022124:	9403      	str	r4, [sp, #12]
 8022126:	f7ff ff43 	bl	8021fb0 <__b2d>
 802212a:	000d      	movs	r5, r1
 802212c:	0002      	movs	r2, r0
 802212e:	000b      	movs	r3, r1
 8022130:	6930      	ldr	r0, [r6, #16]
 8022132:	6939      	ldr	r1, [r7, #16]
 8022134:	9e04      	ldr	r6, [sp, #16]
 8022136:	1a40      	subs	r0, r0, r1
 8022138:	9905      	ldr	r1, [sp, #20]
 802213a:	0140      	lsls	r0, r0, #5
 802213c:	1a71      	subs	r1, r6, r1
 802213e:	1841      	adds	r1, r0, r1
 8022140:	0508      	lsls	r0, r1, #20
 8022142:	2900      	cmp	r1, #0
 8022144:	dd08      	ble.n	8022158 <__ratio+0x50>
 8022146:	9901      	ldr	r1, [sp, #4]
 8022148:	1841      	adds	r1, r0, r1
 802214a:	9103      	str	r1, [sp, #12]
 802214c:	9802      	ldr	r0, [sp, #8]
 802214e:	9903      	ldr	r1, [sp, #12]
 8022150:	f7df fe30 	bl	8001db4 <__aeabi_ddiv>
 8022154:	b007      	add	sp, #28
 8022156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022158:	1a2b      	subs	r3, r5, r0
 802215a:	e7f7      	b.n	802214c <__ratio+0x44>

0802215c <__copybits>:
 802215c:	b570      	push	{r4, r5, r6, lr}
 802215e:	0014      	movs	r4, r2
 8022160:	0005      	movs	r5, r0
 8022162:	3901      	subs	r1, #1
 8022164:	6913      	ldr	r3, [r2, #16]
 8022166:	1149      	asrs	r1, r1, #5
 8022168:	3101      	adds	r1, #1
 802216a:	0089      	lsls	r1, r1, #2
 802216c:	3414      	adds	r4, #20
 802216e:	009b      	lsls	r3, r3, #2
 8022170:	1841      	adds	r1, r0, r1
 8022172:	18e3      	adds	r3, r4, r3
 8022174:	42a3      	cmp	r3, r4
 8022176:	d80d      	bhi.n	8022194 <__copybits+0x38>
 8022178:	0014      	movs	r4, r2
 802217a:	3411      	adds	r4, #17
 802217c:	2500      	movs	r5, #0
 802217e:	429c      	cmp	r4, r3
 8022180:	d803      	bhi.n	802218a <__copybits+0x2e>
 8022182:	1a9b      	subs	r3, r3, r2
 8022184:	3b11      	subs	r3, #17
 8022186:	089b      	lsrs	r3, r3, #2
 8022188:	009d      	lsls	r5, r3, #2
 802218a:	2300      	movs	r3, #0
 802218c:	1940      	adds	r0, r0, r5
 802218e:	4281      	cmp	r1, r0
 8022190:	d803      	bhi.n	802219a <__copybits+0x3e>
 8022192:	bd70      	pop	{r4, r5, r6, pc}
 8022194:	cc40      	ldmia	r4!, {r6}
 8022196:	c540      	stmia	r5!, {r6}
 8022198:	e7ec      	b.n	8022174 <__copybits+0x18>
 802219a:	c008      	stmia	r0!, {r3}
 802219c:	e7f7      	b.n	802218e <__copybits+0x32>

0802219e <__any_on>:
 802219e:	0002      	movs	r2, r0
 80221a0:	6900      	ldr	r0, [r0, #16]
 80221a2:	b510      	push	{r4, lr}
 80221a4:	3214      	adds	r2, #20
 80221a6:	114b      	asrs	r3, r1, #5
 80221a8:	4298      	cmp	r0, r3
 80221aa:	db13      	blt.n	80221d4 <__any_on+0x36>
 80221ac:	dd0c      	ble.n	80221c8 <__any_on+0x2a>
 80221ae:	241f      	movs	r4, #31
 80221b0:	0008      	movs	r0, r1
 80221b2:	4020      	ands	r0, r4
 80221b4:	4221      	tst	r1, r4
 80221b6:	d007      	beq.n	80221c8 <__any_on+0x2a>
 80221b8:	0099      	lsls	r1, r3, #2
 80221ba:	588c      	ldr	r4, [r1, r2]
 80221bc:	0021      	movs	r1, r4
 80221be:	40c1      	lsrs	r1, r0
 80221c0:	4081      	lsls	r1, r0
 80221c2:	2001      	movs	r0, #1
 80221c4:	428c      	cmp	r4, r1
 80221c6:	d104      	bne.n	80221d2 <__any_on+0x34>
 80221c8:	009b      	lsls	r3, r3, #2
 80221ca:	18d3      	adds	r3, r2, r3
 80221cc:	4293      	cmp	r3, r2
 80221ce:	d803      	bhi.n	80221d8 <__any_on+0x3a>
 80221d0:	2000      	movs	r0, #0
 80221d2:	bd10      	pop	{r4, pc}
 80221d4:	0003      	movs	r3, r0
 80221d6:	e7f7      	b.n	80221c8 <__any_on+0x2a>
 80221d8:	3b04      	subs	r3, #4
 80221da:	6819      	ldr	r1, [r3, #0]
 80221dc:	2900      	cmp	r1, #0
 80221de:	d0f5      	beq.n	80221cc <__any_on+0x2e>
 80221e0:	2001      	movs	r0, #1
 80221e2:	e7f6      	b.n	80221d2 <__any_on+0x34>

080221e4 <__ascii_wctomb>:
 80221e4:	0003      	movs	r3, r0
 80221e6:	1e08      	subs	r0, r1, #0
 80221e8:	d005      	beq.n	80221f6 <__ascii_wctomb+0x12>
 80221ea:	2aff      	cmp	r2, #255	@ 0xff
 80221ec:	d904      	bls.n	80221f8 <__ascii_wctomb+0x14>
 80221ee:	228a      	movs	r2, #138	@ 0x8a
 80221f0:	2001      	movs	r0, #1
 80221f2:	601a      	str	r2, [r3, #0]
 80221f4:	4240      	negs	r0, r0
 80221f6:	4770      	bx	lr
 80221f8:	2001      	movs	r0, #1
 80221fa:	700a      	strb	r2, [r1, #0]
 80221fc:	e7fb      	b.n	80221f6 <__ascii_wctomb+0x12>
	...

08022200 <__ssputs_r>:
 8022200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022202:	688e      	ldr	r6, [r1, #8]
 8022204:	b085      	sub	sp, #20
 8022206:	001f      	movs	r7, r3
 8022208:	000c      	movs	r4, r1
 802220a:	680b      	ldr	r3, [r1, #0]
 802220c:	9002      	str	r0, [sp, #8]
 802220e:	9203      	str	r2, [sp, #12]
 8022210:	42be      	cmp	r6, r7
 8022212:	d830      	bhi.n	8022276 <__ssputs_r+0x76>
 8022214:	210c      	movs	r1, #12
 8022216:	5e62      	ldrsh	r2, [r4, r1]
 8022218:	2190      	movs	r1, #144	@ 0x90
 802221a:	00c9      	lsls	r1, r1, #3
 802221c:	420a      	tst	r2, r1
 802221e:	d028      	beq.n	8022272 <__ssputs_r+0x72>
 8022220:	2003      	movs	r0, #3
 8022222:	6921      	ldr	r1, [r4, #16]
 8022224:	1a5b      	subs	r3, r3, r1
 8022226:	9301      	str	r3, [sp, #4]
 8022228:	6963      	ldr	r3, [r4, #20]
 802222a:	4343      	muls	r3, r0
 802222c:	9801      	ldr	r0, [sp, #4]
 802222e:	0fdd      	lsrs	r5, r3, #31
 8022230:	18ed      	adds	r5, r5, r3
 8022232:	1c7b      	adds	r3, r7, #1
 8022234:	181b      	adds	r3, r3, r0
 8022236:	106d      	asrs	r5, r5, #1
 8022238:	42ab      	cmp	r3, r5
 802223a:	d900      	bls.n	802223e <__ssputs_r+0x3e>
 802223c:	001d      	movs	r5, r3
 802223e:	0552      	lsls	r2, r2, #21
 8022240:	d528      	bpl.n	8022294 <__ssputs_r+0x94>
 8022242:	0029      	movs	r1, r5
 8022244:	9802      	ldr	r0, [sp, #8]
 8022246:	f7ff fa61 	bl	802170c <_malloc_r>
 802224a:	1e06      	subs	r6, r0, #0
 802224c:	d02c      	beq.n	80222a8 <__ssputs_r+0xa8>
 802224e:	9a01      	ldr	r2, [sp, #4]
 8022250:	6921      	ldr	r1, [r4, #16]
 8022252:	f7fd fff9 	bl	8020248 <memcpy>
 8022256:	89a2      	ldrh	r2, [r4, #12]
 8022258:	4b18      	ldr	r3, [pc, #96]	@ (80222bc <__ssputs_r+0xbc>)
 802225a:	401a      	ands	r2, r3
 802225c:	2380      	movs	r3, #128	@ 0x80
 802225e:	4313      	orrs	r3, r2
 8022260:	81a3      	strh	r3, [r4, #12]
 8022262:	9b01      	ldr	r3, [sp, #4]
 8022264:	6126      	str	r6, [r4, #16]
 8022266:	18f6      	adds	r6, r6, r3
 8022268:	6026      	str	r6, [r4, #0]
 802226a:	003e      	movs	r6, r7
 802226c:	6165      	str	r5, [r4, #20]
 802226e:	1aed      	subs	r5, r5, r3
 8022270:	60a5      	str	r5, [r4, #8]
 8022272:	42be      	cmp	r6, r7
 8022274:	d900      	bls.n	8022278 <__ssputs_r+0x78>
 8022276:	003e      	movs	r6, r7
 8022278:	0032      	movs	r2, r6
 802227a:	9903      	ldr	r1, [sp, #12]
 802227c:	6820      	ldr	r0, [r4, #0]
 802227e:	f000 fb7e 	bl	802297e <memmove>
 8022282:	2000      	movs	r0, #0
 8022284:	68a3      	ldr	r3, [r4, #8]
 8022286:	1b9b      	subs	r3, r3, r6
 8022288:	60a3      	str	r3, [r4, #8]
 802228a:	6823      	ldr	r3, [r4, #0]
 802228c:	199b      	adds	r3, r3, r6
 802228e:	6023      	str	r3, [r4, #0]
 8022290:	b005      	add	sp, #20
 8022292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022294:	002a      	movs	r2, r5
 8022296:	9802      	ldr	r0, [sp, #8]
 8022298:	f000 fc05 	bl	8022aa6 <_realloc_r>
 802229c:	1e06      	subs	r6, r0, #0
 802229e:	d1e0      	bne.n	8022262 <__ssputs_r+0x62>
 80222a0:	6921      	ldr	r1, [r4, #16]
 80222a2:	9802      	ldr	r0, [sp, #8]
 80222a4:	f7fe fe62 	bl	8020f6c <_free_r>
 80222a8:	230c      	movs	r3, #12
 80222aa:	2001      	movs	r0, #1
 80222ac:	9a02      	ldr	r2, [sp, #8]
 80222ae:	4240      	negs	r0, r0
 80222b0:	6013      	str	r3, [r2, #0]
 80222b2:	89a2      	ldrh	r2, [r4, #12]
 80222b4:	3334      	adds	r3, #52	@ 0x34
 80222b6:	4313      	orrs	r3, r2
 80222b8:	81a3      	strh	r3, [r4, #12]
 80222ba:	e7e9      	b.n	8022290 <__ssputs_r+0x90>
 80222bc:	fffffb7f 	.word	0xfffffb7f

080222c0 <_svfiprintf_r>:
 80222c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222c2:	b0a1      	sub	sp, #132	@ 0x84
 80222c4:	9003      	str	r0, [sp, #12]
 80222c6:	001d      	movs	r5, r3
 80222c8:	898b      	ldrh	r3, [r1, #12]
 80222ca:	000f      	movs	r7, r1
 80222cc:	0016      	movs	r6, r2
 80222ce:	061b      	lsls	r3, r3, #24
 80222d0:	d511      	bpl.n	80222f6 <_svfiprintf_r+0x36>
 80222d2:	690b      	ldr	r3, [r1, #16]
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	d10e      	bne.n	80222f6 <_svfiprintf_r+0x36>
 80222d8:	2140      	movs	r1, #64	@ 0x40
 80222da:	f7ff fa17 	bl	802170c <_malloc_r>
 80222de:	6038      	str	r0, [r7, #0]
 80222e0:	6138      	str	r0, [r7, #16]
 80222e2:	2800      	cmp	r0, #0
 80222e4:	d105      	bne.n	80222f2 <_svfiprintf_r+0x32>
 80222e6:	230c      	movs	r3, #12
 80222e8:	9a03      	ldr	r2, [sp, #12]
 80222ea:	6013      	str	r3, [r2, #0]
 80222ec:	2001      	movs	r0, #1
 80222ee:	4240      	negs	r0, r0
 80222f0:	e0cf      	b.n	8022492 <_svfiprintf_r+0x1d2>
 80222f2:	2340      	movs	r3, #64	@ 0x40
 80222f4:	617b      	str	r3, [r7, #20]
 80222f6:	2300      	movs	r3, #0
 80222f8:	ac08      	add	r4, sp, #32
 80222fa:	6163      	str	r3, [r4, #20]
 80222fc:	3320      	adds	r3, #32
 80222fe:	7663      	strb	r3, [r4, #25]
 8022300:	3310      	adds	r3, #16
 8022302:	76a3      	strb	r3, [r4, #26]
 8022304:	9507      	str	r5, [sp, #28]
 8022306:	0035      	movs	r5, r6
 8022308:	782b      	ldrb	r3, [r5, #0]
 802230a:	2b00      	cmp	r3, #0
 802230c:	d001      	beq.n	8022312 <_svfiprintf_r+0x52>
 802230e:	2b25      	cmp	r3, #37	@ 0x25
 8022310:	d148      	bne.n	80223a4 <_svfiprintf_r+0xe4>
 8022312:	1bab      	subs	r3, r5, r6
 8022314:	9305      	str	r3, [sp, #20]
 8022316:	42b5      	cmp	r5, r6
 8022318:	d00b      	beq.n	8022332 <_svfiprintf_r+0x72>
 802231a:	0032      	movs	r2, r6
 802231c:	0039      	movs	r1, r7
 802231e:	9803      	ldr	r0, [sp, #12]
 8022320:	f7ff ff6e 	bl	8022200 <__ssputs_r>
 8022324:	3001      	adds	r0, #1
 8022326:	d100      	bne.n	802232a <_svfiprintf_r+0x6a>
 8022328:	e0ae      	b.n	8022488 <_svfiprintf_r+0x1c8>
 802232a:	6963      	ldr	r3, [r4, #20]
 802232c:	9a05      	ldr	r2, [sp, #20]
 802232e:	189b      	adds	r3, r3, r2
 8022330:	6163      	str	r3, [r4, #20]
 8022332:	782b      	ldrb	r3, [r5, #0]
 8022334:	2b00      	cmp	r3, #0
 8022336:	d100      	bne.n	802233a <_svfiprintf_r+0x7a>
 8022338:	e0a6      	b.n	8022488 <_svfiprintf_r+0x1c8>
 802233a:	2201      	movs	r2, #1
 802233c:	2300      	movs	r3, #0
 802233e:	4252      	negs	r2, r2
 8022340:	6062      	str	r2, [r4, #4]
 8022342:	a904      	add	r1, sp, #16
 8022344:	3254      	adds	r2, #84	@ 0x54
 8022346:	1852      	adds	r2, r2, r1
 8022348:	1c6e      	adds	r6, r5, #1
 802234a:	6023      	str	r3, [r4, #0]
 802234c:	60e3      	str	r3, [r4, #12]
 802234e:	60a3      	str	r3, [r4, #8]
 8022350:	7013      	strb	r3, [r2, #0]
 8022352:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022354:	4b54      	ldr	r3, [pc, #336]	@ (80224a8 <_svfiprintf_r+0x1e8>)
 8022356:	2205      	movs	r2, #5
 8022358:	0018      	movs	r0, r3
 802235a:	7831      	ldrb	r1, [r6, #0]
 802235c:	9305      	str	r3, [sp, #20]
 802235e:	f7fd ff68 	bl	8020232 <memchr>
 8022362:	1c75      	adds	r5, r6, #1
 8022364:	2800      	cmp	r0, #0
 8022366:	d11f      	bne.n	80223a8 <_svfiprintf_r+0xe8>
 8022368:	6822      	ldr	r2, [r4, #0]
 802236a:	06d3      	lsls	r3, r2, #27
 802236c:	d504      	bpl.n	8022378 <_svfiprintf_r+0xb8>
 802236e:	2353      	movs	r3, #83	@ 0x53
 8022370:	a904      	add	r1, sp, #16
 8022372:	185b      	adds	r3, r3, r1
 8022374:	2120      	movs	r1, #32
 8022376:	7019      	strb	r1, [r3, #0]
 8022378:	0713      	lsls	r3, r2, #28
 802237a:	d504      	bpl.n	8022386 <_svfiprintf_r+0xc6>
 802237c:	2353      	movs	r3, #83	@ 0x53
 802237e:	a904      	add	r1, sp, #16
 8022380:	185b      	adds	r3, r3, r1
 8022382:	212b      	movs	r1, #43	@ 0x2b
 8022384:	7019      	strb	r1, [r3, #0]
 8022386:	7833      	ldrb	r3, [r6, #0]
 8022388:	2b2a      	cmp	r3, #42	@ 0x2a
 802238a:	d016      	beq.n	80223ba <_svfiprintf_r+0xfa>
 802238c:	0035      	movs	r5, r6
 802238e:	2100      	movs	r1, #0
 8022390:	200a      	movs	r0, #10
 8022392:	68e3      	ldr	r3, [r4, #12]
 8022394:	782a      	ldrb	r2, [r5, #0]
 8022396:	1c6e      	adds	r6, r5, #1
 8022398:	3a30      	subs	r2, #48	@ 0x30
 802239a:	2a09      	cmp	r2, #9
 802239c:	d950      	bls.n	8022440 <_svfiprintf_r+0x180>
 802239e:	2900      	cmp	r1, #0
 80223a0:	d111      	bne.n	80223c6 <_svfiprintf_r+0x106>
 80223a2:	e017      	b.n	80223d4 <_svfiprintf_r+0x114>
 80223a4:	3501      	adds	r5, #1
 80223a6:	e7af      	b.n	8022308 <_svfiprintf_r+0x48>
 80223a8:	9b05      	ldr	r3, [sp, #20]
 80223aa:	6822      	ldr	r2, [r4, #0]
 80223ac:	1ac0      	subs	r0, r0, r3
 80223ae:	2301      	movs	r3, #1
 80223b0:	4083      	lsls	r3, r0
 80223b2:	4313      	orrs	r3, r2
 80223b4:	002e      	movs	r6, r5
 80223b6:	6023      	str	r3, [r4, #0]
 80223b8:	e7cc      	b.n	8022354 <_svfiprintf_r+0x94>
 80223ba:	9b07      	ldr	r3, [sp, #28]
 80223bc:	1d19      	adds	r1, r3, #4
 80223be:	681b      	ldr	r3, [r3, #0]
 80223c0:	9107      	str	r1, [sp, #28]
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	db01      	blt.n	80223ca <_svfiprintf_r+0x10a>
 80223c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80223c8:	e004      	b.n	80223d4 <_svfiprintf_r+0x114>
 80223ca:	425b      	negs	r3, r3
 80223cc:	60e3      	str	r3, [r4, #12]
 80223ce:	2302      	movs	r3, #2
 80223d0:	4313      	orrs	r3, r2
 80223d2:	6023      	str	r3, [r4, #0]
 80223d4:	782b      	ldrb	r3, [r5, #0]
 80223d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80223d8:	d10c      	bne.n	80223f4 <_svfiprintf_r+0x134>
 80223da:	786b      	ldrb	r3, [r5, #1]
 80223dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80223de:	d134      	bne.n	802244a <_svfiprintf_r+0x18a>
 80223e0:	9b07      	ldr	r3, [sp, #28]
 80223e2:	3502      	adds	r5, #2
 80223e4:	1d1a      	adds	r2, r3, #4
 80223e6:	681b      	ldr	r3, [r3, #0]
 80223e8:	9207      	str	r2, [sp, #28]
 80223ea:	2b00      	cmp	r3, #0
 80223ec:	da01      	bge.n	80223f2 <_svfiprintf_r+0x132>
 80223ee:	2301      	movs	r3, #1
 80223f0:	425b      	negs	r3, r3
 80223f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80223f4:	4e2d      	ldr	r6, [pc, #180]	@ (80224ac <_svfiprintf_r+0x1ec>)
 80223f6:	2203      	movs	r2, #3
 80223f8:	0030      	movs	r0, r6
 80223fa:	7829      	ldrb	r1, [r5, #0]
 80223fc:	f7fd ff19 	bl	8020232 <memchr>
 8022400:	2800      	cmp	r0, #0
 8022402:	d006      	beq.n	8022412 <_svfiprintf_r+0x152>
 8022404:	2340      	movs	r3, #64	@ 0x40
 8022406:	1b80      	subs	r0, r0, r6
 8022408:	4083      	lsls	r3, r0
 802240a:	6822      	ldr	r2, [r4, #0]
 802240c:	3501      	adds	r5, #1
 802240e:	4313      	orrs	r3, r2
 8022410:	6023      	str	r3, [r4, #0]
 8022412:	7829      	ldrb	r1, [r5, #0]
 8022414:	2206      	movs	r2, #6
 8022416:	4826      	ldr	r0, [pc, #152]	@ (80224b0 <_svfiprintf_r+0x1f0>)
 8022418:	1c6e      	adds	r6, r5, #1
 802241a:	7621      	strb	r1, [r4, #24]
 802241c:	f7fd ff09 	bl	8020232 <memchr>
 8022420:	2800      	cmp	r0, #0
 8022422:	d038      	beq.n	8022496 <_svfiprintf_r+0x1d6>
 8022424:	4b23      	ldr	r3, [pc, #140]	@ (80224b4 <_svfiprintf_r+0x1f4>)
 8022426:	2b00      	cmp	r3, #0
 8022428:	d122      	bne.n	8022470 <_svfiprintf_r+0x1b0>
 802242a:	2207      	movs	r2, #7
 802242c:	9b07      	ldr	r3, [sp, #28]
 802242e:	3307      	adds	r3, #7
 8022430:	4393      	bics	r3, r2
 8022432:	3308      	adds	r3, #8
 8022434:	9307      	str	r3, [sp, #28]
 8022436:	6963      	ldr	r3, [r4, #20]
 8022438:	9a04      	ldr	r2, [sp, #16]
 802243a:	189b      	adds	r3, r3, r2
 802243c:	6163      	str	r3, [r4, #20]
 802243e:	e762      	b.n	8022306 <_svfiprintf_r+0x46>
 8022440:	4343      	muls	r3, r0
 8022442:	0035      	movs	r5, r6
 8022444:	2101      	movs	r1, #1
 8022446:	189b      	adds	r3, r3, r2
 8022448:	e7a4      	b.n	8022394 <_svfiprintf_r+0xd4>
 802244a:	2300      	movs	r3, #0
 802244c:	200a      	movs	r0, #10
 802244e:	0019      	movs	r1, r3
 8022450:	3501      	adds	r5, #1
 8022452:	6063      	str	r3, [r4, #4]
 8022454:	782a      	ldrb	r2, [r5, #0]
 8022456:	1c6e      	adds	r6, r5, #1
 8022458:	3a30      	subs	r2, #48	@ 0x30
 802245a:	2a09      	cmp	r2, #9
 802245c:	d903      	bls.n	8022466 <_svfiprintf_r+0x1a6>
 802245e:	2b00      	cmp	r3, #0
 8022460:	d0c8      	beq.n	80223f4 <_svfiprintf_r+0x134>
 8022462:	9109      	str	r1, [sp, #36]	@ 0x24
 8022464:	e7c6      	b.n	80223f4 <_svfiprintf_r+0x134>
 8022466:	4341      	muls	r1, r0
 8022468:	0035      	movs	r5, r6
 802246a:	2301      	movs	r3, #1
 802246c:	1889      	adds	r1, r1, r2
 802246e:	e7f1      	b.n	8022454 <_svfiprintf_r+0x194>
 8022470:	aa07      	add	r2, sp, #28
 8022472:	9200      	str	r2, [sp, #0]
 8022474:	0021      	movs	r1, r4
 8022476:	003a      	movs	r2, r7
 8022478:	4b0f      	ldr	r3, [pc, #60]	@ (80224b8 <_svfiprintf_r+0x1f8>)
 802247a:	9803      	ldr	r0, [sp, #12]
 802247c:	f7fc ffd4 	bl	801f428 <_printf_float>
 8022480:	9004      	str	r0, [sp, #16]
 8022482:	9b04      	ldr	r3, [sp, #16]
 8022484:	3301      	adds	r3, #1
 8022486:	d1d6      	bne.n	8022436 <_svfiprintf_r+0x176>
 8022488:	89bb      	ldrh	r3, [r7, #12]
 802248a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802248c:	065b      	lsls	r3, r3, #25
 802248e:	d500      	bpl.n	8022492 <_svfiprintf_r+0x1d2>
 8022490:	e72c      	b.n	80222ec <_svfiprintf_r+0x2c>
 8022492:	b021      	add	sp, #132	@ 0x84
 8022494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022496:	aa07      	add	r2, sp, #28
 8022498:	9200      	str	r2, [sp, #0]
 802249a:	0021      	movs	r1, r4
 802249c:	003a      	movs	r2, r7
 802249e:	4b06      	ldr	r3, [pc, #24]	@ (80224b8 <_svfiprintf_r+0x1f8>)
 80224a0:	9803      	ldr	r0, [sp, #12]
 80224a2:	f7fd fa6f 	bl	801f984 <_printf_i>
 80224a6:	e7eb      	b.n	8022480 <_svfiprintf_r+0x1c0>
 80224a8:	08025e20 	.word	0x08025e20
 80224ac:	08025e26 	.word	0x08025e26
 80224b0:	08025e2a 	.word	0x08025e2a
 80224b4:	0801f429 	.word	0x0801f429
 80224b8:	08022201 	.word	0x08022201

080224bc <__sfputc_r>:
 80224bc:	6893      	ldr	r3, [r2, #8]
 80224be:	b510      	push	{r4, lr}
 80224c0:	3b01      	subs	r3, #1
 80224c2:	6093      	str	r3, [r2, #8]
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	da04      	bge.n	80224d2 <__sfputc_r+0x16>
 80224c8:	6994      	ldr	r4, [r2, #24]
 80224ca:	42a3      	cmp	r3, r4
 80224cc:	db07      	blt.n	80224de <__sfputc_r+0x22>
 80224ce:	290a      	cmp	r1, #10
 80224d0:	d005      	beq.n	80224de <__sfputc_r+0x22>
 80224d2:	6813      	ldr	r3, [r2, #0]
 80224d4:	1c58      	adds	r0, r3, #1
 80224d6:	6010      	str	r0, [r2, #0]
 80224d8:	7019      	strb	r1, [r3, #0]
 80224da:	0008      	movs	r0, r1
 80224dc:	bd10      	pop	{r4, pc}
 80224de:	f7fd fd37 	bl	801ff50 <__swbuf_r>
 80224e2:	0001      	movs	r1, r0
 80224e4:	e7f9      	b.n	80224da <__sfputc_r+0x1e>

080224e6 <__sfputs_r>:
 80224e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80224e8:	0006      	movs	r6, r0
 80224ea:	000f      	movs	r7, r1
 80224ec:	0014      	movs	r4, r2
 80224ee:	18d5      	adds	r5, r2, r3
 80224f0:	42ac      	cmp	r4, r5
 80224f2:	d101      	bne.n	80224f8 <__sfputs_r+0x12>
 80224f4:	2000      	movs	r0, #0
 80224f6:	e007      	b.n	8022508 <__sfputs_r+0x22>
 80224f8:	7821      	ldrb	r1, [r4, #0]
 80224fa:	003a      	movs	r2, r7
 80224fc:	0030      	movs	r0, r6
 80224fe:	f7ff ffdd 	bl	80224bc <__sfputc_r>
 8022502:	3401      	adds	r4, #1
 8022504:	1c43      	adds	r3, r0, #1
 8022506:	d1f3      	bne.n	80224f0 <__sfputs_r+0xa>
 8022508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802250c <_vfiprintf_r>:
 802250c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802250e:	b0a1      	sub	sp, #132	@ 0x84
 8022510:	000f      	movs	r7, r1
 8022512:	0015      	movs	r5, r2
 8022514:	001e      	movs	r6, r3
 8022516:	9003      	str	r0, [sp, #12]
 8022518:	2800      	cmp	r0, #0
 802251a:	d004      	beq.n	8022526 <_vfiprintf_r+0x1a>
 802251c:	6a03      	ldr	r3, [r0, #32]
 802251e:	2b00      	cmp	r3, #0
 8022520:	d101      	bne.n	8022526 <_vfiprintf_r+0x1a>
 8022522:	f7fd fbcd 	bl	801fcc0 <__sinit>
 8022526:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022528:	07db      	lsls	r3, r3, #31
 802252a:	d405      	bmi.n	8022538 <_vfiprintf_r+0x2c>
 802252c:	89bb      	ldrh	r3, [r7, #12]
 802252e:	059b      	lsls	r3, r3, #22
 8022530:	d402      	bmi.n	8022538 <_vfiprintf_r+0x2c>
 8022532:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022534:	f7fd fe7b 	bl	802022e <__retarget_lock_acquire_recursive>
 8022538:	89bb      	ldrh	r3, [r7, #12]
 802253a:	071b      	lsls	r3, r3, #28
 802253c:	d502      	bpl.n	8022544 <_vfiprintf_r+0x38>
 802253e:	693b      	ldr	r3, [r7, #16]
 8022540:	2b00      	cmp	r3, #0
 8022542:	d113      	bne.n	802256c <_vfiprintf_r+0x60>
 8022544:	0039      	movs	r1, r7
 8022546:	9803      	ldr	r0, [sp, #12]
 8022548:	f7fd fd44 	bl	801ffd4 <__swsetup_r>
 802254c:	2800      	cmp	r0, #0
 802254e:	d00d      	beq.n	802256c <_vfiprintf_r+0x60>
 8022550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022552:	07db      	lsls	r3, r3, #31
 8022554:	d503      	bpl.n	802255e <_vfiprintf_r+0x52>
 8022556:	2001      	movs	r0, #1
 8022558:	4240      	negs	r0, r0
 802255a:	b021      	add	sp, #132	@ 0x84
 802255c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802255e:	89bb      	ldrh	r3, [r7, #12]
 8022560:	059b      	lsls	r3, r3, #22
 8022562:	d4f8      	bmi.n	8022556 <_vfiprintf_r+0x4a>
 8022564:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022566:	f7fd fe63 	bl	8020230 <__retarget_lock_release_recursive>
 802256a:	e7f4      	b.n	8022556 <_vfiprintf_r+0x4a>
 802256c:	2300      	movs	r3, #0
 802256e:	ac08      	add	r4, sp, #32
 8022570:	6163      	str	r3, [r4, #20]
 8022572:	3320      	adds	r3, #32
 8022574:	7663      	strb	r3, [r4, #25]
 8022576:	3310      	adds	r3, #16
 8022578:	76a3      	strb	r3, [r4, #26]
 802257a:	9607      	str	r6, [sp, #28]
 802257c:	002e      	movs	r6, r5
 802257e:	7833      	ldrb	r3, [r6, #0]
 8022580:	2b00      	cmp	r3, #0
 8022582:	d001      	beq.n	8022588 <_vfiprintf_r+0x7c>
 8022584:	2b25      	cmp	r3, #37	@ 0x25
 8022586:	d148      	bne.n	802261a <_vfiprintf_r+0x10e>
 8022588:	1b73      	subs	r3, r6, r5
 802258a:	9305      	str	r3, [sp, #20]
 802258c:	42ae      	cmp	r6, r5
 802258e:	d00b      	beq.n	80225a8 <_vfiprintf_r+0x9c>
 8022590:	002a      	movs	r2, r5
 8022592:	0039      	movs	r1, r7
 8022594:	9803      	ldr	r0, [sp, #12]
 8022596:	f7ff ffa6 	bl	80224e6 <__sfputs_r>
 802259a:	3001      	adds	r0, #1
 802259c:	d100      	bne.n	80225a0 <_vfiprintf_r+0x94>
 802259e:	e0ae      	b.n	80226fe <_vfiprintf_r+0x1f2>
 80225a0:	6963      	ldr	r3, [r4, #20]
 80225a2:	9a05      	ldr	r2, [sp, #20]
 80225a4:	189b      	adds	r3, r3, r2
 80225a6:	6163      	str	r3, [r4, #20]
 80225a8:	7833      	ldrb	r3, [r6, #0]
 80225aa:	2b00      	cmp	r3, #0
 80225ac:	d100      	bne.n	80225b0 <_vfiprintf_r+0xa4>
 80225ae:	e0a6      	b.n	80226fe <_vfiprintf_r+0x1f2>
 80225b0:	2201      	movs	r2, #1
 80225b2:	2300      	movs	r3, #0
 80225b4:	4252      	negs	r2, r2
 80225b6:	6062      	str	r2, [r4, #4]
 80225b8:	a904      	add	r1, sp, #16
 80225ba:	3254      	adds	r2, #84	@ 0x54
 80225bc:	1852      	adds	r2, r2, r1
 80225be:	1c75      	adds	r5, r6, #1
 80225c0:	6023      	str	r3, [r4, #0]
 80225c2:	60e3      	str	r3, [r4, #12]
 80225c4:	60a3      	str	r3, [r4, #8]
 80225c6:	7013      	strb	r3, [r2, #0]
 80225c8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80225ca:	4b59      	ldr	r3, [pc, #356]	@ (8022730 <_vfiprintf_r+0x224>)
 80225cc:	2205      	movs	r2, #5
 80225ce:	0018      	movs	r0, r3
 80225d0:	7829      	ldrb	r1, [r5, #0]
 80225d2:	9305      	str	r3, [sp, #20]
 80225d4:	f7fd fe2d 	bl	8020232 <memchr>
 80225d8:	1c6e      	adds	r6, r5, #1
 80225da:	2800      	cmp	r0, #0
 80225dc:	d11f      	bne.n	802261e <_vfiprintf_r+0x112>
 80225de:	6822      	ldr	r2, [r4, #0]
 80225e0:	06d3      	lsls	r3, r2, #27
 80225e2:	d504      	bpl.n	80225ee <_vfiprintf_r+0xe2>
 80225e4:	2353      	movs	r3, #83	@ 0x53
 80225e6:	a904      	add	r1, sp, #16
 80225e8:	185b      	adds	r3, r3, r1
 80225ea:	2120      	movs	r1, #32
 80225ec:	7019      	strb	r1, [r3, #0]
 80225ee:	0713      	lsls	r3, r2, #28
 80225f0:	d504      	bpl.n	80225fc <_vfiprintf_r+0xf0>
 80225f2:	2353      	movs	r3, #83	@ 0x53
 80225f4:	a904      	add	r1, sp, #16
 80225f6:	185b      	adds	r3, r3, r1
 80225f8:	212b      	movs	r1, #43	@ 0x2b
 80225fa:	7019      	strb	r1, [r3, #0]
 80225fc:	782b      	ldrb	r3, [r5, #0]
 80225fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8022600:	d016      	beq.n	8022630 <_vfiprintf_r+0x124>
 8022602:	002e      	movs	r6, r5
 8022604:	2100      	movs	r1, #0
 8022606:	200a      	movs	r0, #10
 8022608:	68e3      	ldr	r3, [r4, #12]
 802260a:	7832      	ldrb	r2, [r6, #0]
 802260c:	1c75      	adds	r5, r6, #1
 802260e:	3a30      	subs	r2, #48	@ 0x30
 8022610:	2a09      	cmp	r2, #9
 8022612:	d950      	bls.n	80226b6 <_vfiprintf_r+0x1aa>
 8022614:	2900      	cmp	r1, #0
 8022616:	d111      	bne.n	802263c <_vfiprintf_r+0x130>
 8022618:	e017      	b.n	802264a <_vfiprintf_r+0x13e>
 802261a:	3601      	adds	r6, #1
 802261c:	e7af      	b.n	802257e <_vfiprintf_r+0x72>
 802261e:	9b05      	ldr	r3, [sp, #20]
 8022620:	6822      	ldr	r2, [r4, #0]
 8022622:	1ac0      	subs	r0, r0, r3
 8022624:	2301      	movs	r3, #1
 8022626:	4083      	lsls	r3, r0
 8022628:	4313      	orrs	r3, r2
 802262a:	0035      	movs	r5, r6
 802262c:	6023      	str	r3, [r4, #0]
 802262e:	e7cc      	b.n	80225ca <_vfiprintf_r+0xbe>
 8022630:	9b07      	ldr	r3, [sp, #28]
 8022632:	1d19      	adds	r1, r3, #4
 8022634:	681b      	ldr	r3, [r3, #0]
 8022636:	9107      	str	r1, [sp, #28]
 8022638:	2b00      	cmp	r3, #0
 802263a:	db01      	blt.n	8022640 <_vfiprintf_r+0x134>
 802263c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802263e:	e004      	b.n	802264a <_vfiprintf_r+0x13e>
 8022640:	425b      	negs	r3, r3
 8022642:	60e3      	str	r3, [r4, #12]
 8022644:	2302      	movs	r3, #2
 8022646:	4313      	orrs	r3, r2
 8022648:	6023      	str	r3, [r4, #0]
 802264a:	7833      	ldrb	r3, [r6, #0]
 802264c:	2b2e      	cmp	r3, #46	@ 0x2e
 802264e:	d10c      	bne.n	802266a <_vfiprintf_r+0x15e>
 8022650:	7873      	ldrb	r3, [r6, #1]
 8022652:	2b2a      	cmp	r3, #42	@ 0x2a
 8022654:	d134      	bne.n	80226c0 <_vfiprintf_r+0x1b4>
 8022656:	9b07      	ldr	r3, [sp, #28]
 8022658:	3602      	adds	r6, #2
 802265a:	1d1a      	adds	r2, r3, #4
 802265c:	681b      	ldr	r3, [r3, #0]
 802265e:	9207      	str	r2, [sp, #28]
 8022660:	2b00      	cmp	r3, #0
 8022662:	da01      	bge.n	8022668 <_vfiprintf_r+0x15c>
 8022664:	2301      	movs	r3, #1
 8022666:	425b      	negs	r3, r3
 8022668:	9309      	str	r3, [sp, #36]	@ 0x24
 802266a:	4d32      	ldr	r5, [pc, #200]	@ (8022734 <_vfiprintf_r+0x228>)
 802266c:	2203      	movs	r2, #3
 802266e:	0028      	movs	r0, r5
 8022670:	7831      	ldrb	r1, [r6, #0]
 8022672:	f7fd fdde 	bl	8020232 <memchr>
 8022676:	2800      	cmp	r0, #0
 8022678:	d006      	beq.n	8022688 <_vfiprintf_r+0x17c>
 802267a:	2340      	movs	r3, #64	@ 0x40
 802267c:	1b40      	subs	r0, r0, r5
 802267e:	4083      	lsls	r3, r0
 8022680:	6822      	ldr	r2, [r4, #0]
 8022682:	3601      	adds	r6, #1
 8022684:	4313      	orrs	r3, r2
 8022686:	6023      	str	r3, [r4, #0]
 8022688:	7831      	ldrb	r1, [r6, #0]
 802268a:	2206      	movs	r2, #6
 802268c:	482a      	ldr	r0, [pc, #168]	@ (8022738 <_vfiprintf_r+0x22c>)
 802268e:	1c75      	adds	r5, r6, #1
 8022690:	7621      	strb	r1, [r4, #24]
 8022692:	f7fd fdce 	bl	8020232 <memchr>
 8022696:	2800      	cmp	r0, #0
 8022698:	d040      	beq.n	802271c <_vfiprintf_r+0x210>
 802269a:	4b28      	ldr	r3, [pc, #160]	@ (802273c <_vfiprintf_r+0x230>)
 802269c:	2b00      	cmp	r3, #0
 802269e:	d122      	bne.n	80226e6 <_vfiprintf_r+0x1da>
 80226a0:	2207      	movs	r2, #7
 80226a2:	9b07      	ldr	r3, [sp, #28]
 80226a4:	3307      	adds	r3, #7
 80226a6:	4393      	bics	r3, r2
 80226a8:	3308      	adds	r3, #8
 80226aa:	9307      	str	r3, [sp, #28]
 80226ac:	6963      	ldr	r3, [r4, #20]
 80226ae:	9a04      	ldr	r2, [sp, #16]
 80226b0:	189b      	adds	r3, r3, r2
 80226b2:	6163      	str	r3, [r4, #20]
 80226b4:	e762      	b.n	802257c <_vfiprintf_r+0x70>
 80226b6:	4343      	muls	r3, r0
 80226b8:	002e      	movs	r6, r5
 80226ba:	2101      	movs	r1, #1
 80226bc:	189b      	adds	r3, r3, r2
 80226be:	e7a4      	b.n	802260a <_vfiprintf_r+0xfe>
 80226c0:	2300      	movs	r3, #0
 80226c2:	200a      	movs	r0, #10
 80226c4:	0019      	movs	r1, r3
 80226c6:	3601      	adds	r6, #1
 80226c8:	6063      	str	r3, [r4, #4]
 80226ca:	7832      	ldrb	r2, [r6, #0]
 80226cc:	1c75      	adds	r5, r6, #1
 80226ce:	3a30      	subs	r2, #48	@ 0x30
 80226d0:	2a09      	cmp	r2, #9
 80226d2:	d903      	bls.n	80226dc <_vfiprintf_r+0x1d0>
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	d0c8      	beq.n	802266a <_vfiprintf_r+0x15e>
 80226d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80226da:	e7c6      	b.n	802266a <_vfiprintf_r+0x15e>
 80226dc:	4341      	muls	r1, r0
 80226de:	002e      	movs	r6, r5
 80226e0:	2301      	movs	r3, #1
 80226e2:	1889      	adds	r1, r1, r2
 80226e4:	e7f1      	b.n	80226ca <_vfiprintf_r+0x1be>
 80226e6:	aa07      	add	r2, sp, #28
 80226e8:	9200      	str	r2, [sp, #0]
 80226ea:	0021      	movs	r1, r4
 80226ec:	003a      	movs	r2, r7
 80226ee:	4b14      	ldr	r3, [pc, #80]	@ (8022740 <_vfiprintf_r+0x234>)
 80226f0:	9803      	ldr	r0, [sp, #12]
 80226f2:	f7fc fe99 	bl	801f428 <_printf_float>
 80226f6:	9004      	str	r0, [sp, #16]
 80226f8:	9b04      	ldr	r3, [sp, #16]
 80226fa:	3301      	adds	r3, #1
 80226fc:	d1d6      	bne.n	80226ac <_vfiprintf_r+0x1a0>
 80226fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022700:	07db      	lsls	r3, r3, #31
 8022702:	d405      	bmi.n	8022710 <_vfiprintf_r+0x204>
 8022704:	89bb      	ldrh	r3, [r7, #12]
 8022706:	059b      	lsls	r3, r3, #22
 8022708:	d402      	bmi.n	8022710 <_vfiprintf_r+0x204>
 802270a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802270c:	f7fd fd90 	bl	8020230 <__retarget_lock_release_recursive>
 8022710:	89bb      	ldrh	r3, [r7, #12]
 8022712:	065b      	lsls	r3, r3, #25
 8022714:	d500      	bpl.n	8022718 <_vfiprintf_r+0x20c>
 8022716:	e71e      	b.n	8022556 <_vfiprintf_r+0x4a>
 8022718:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802271a:	e71e      	b.n	802255a <_vfiprintf_r+0x4e>
 802271c:	aa07      	add	r2, sp, #28
 802271e:	9200      	str	r2, [sp, #0]
 8022720:	0021      	movs	r1, r4
 8022722:	003a      	movs	r2, r7
 8022724:	4b06      	ldr	r3, [pc, #24]	@ (8022740 <_vfiprintf_r+0x234>)
 8022726:	9803      	ldr	r0, [sp, #12]
 8022728:	f7fd f92c 	bl	801f984 <_printf_i>
 802272c:	e7e3      	b.n	80226f6 <_vfiprintf_r+0x1ea>
 802272e:	46c0      	nop			@ (mov r8, r8)
 8022730:	08025e20 	.word	0x08025e20
 8022734:	08025e26 	.word	0x08025e26
 8022738:	08025e2a 	.word	0x08025e2a
 802273c:	0801f429 	.word	0x0801f429
 8022740:	080224e7 	.word	0x080224e7

08022744 <__sflush_r>:
 8022744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022746:	220c      	movs	r2, #12
 8022748:	5e8b      	ldrsh	r3, [r1, r2]
 802274a:	0005      	movs	r5, r0
 802274c:	000c      	movs	r4, r1
 802274e:	071a      	lsls	r2, r3, #28
 8022750:	d456      	bmi.n	8022800 <__sflush_r+0xbc>
 8022752:	684a      	ldr	r2, [r1, #4]
 8022754:	2a00      	cmp	r2, #0
 8022756:	dc02      	bgt.n	802275e <__sflush_r+0x1a>
 8022758:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802275a:	2a00      	cmp	r2, #0
 802275c:	dd4e      	ble.n	80227fc <__sflush_r+0xb8>
 802275e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022760:	2f00      	cmp	r7, #0
 8022762:	d04b      	beq.n	80227fc <__sflush_r+0xb8>
 8022764:	2200      	movs	r2, #0
 8022766:	2080      	movs	r0, #128	@ 0x80
 8022768:	682e      	ldr	r6, [r5, #0]
 802276a:	602a      	str	r2, [r5, #0]
 802276c:	001a      	movs	r2, r3
 802276e:	0140      	lsls	r0, r0, #5
 8022770:	6a21      	ldr	r1, [r4, #32]
 8022772:	4002      	ands	r2, r0
 8022774:	4203      	tst	r3, r0
 8022776:	d033      	beq.n	80227e0 <__sflush_r+0x9c>
 8022778:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802277a:	89a3      	ldrh	r3, [r4, #12]
 802277c:	075b      	lsls	r3, r3, #29
 802277e:	d506      	bpl.n	802278e <__sflush_r+0x4a>
 8022780:	6863      	ldr	r3, [r4, #4]
 8022782:	1ad2      	subs	r2, r2, r3
 8022784:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022786:	2b00      	cmp	r3, #0
 8022788:	d001      	beq.n	802278e <__sflush_r+0x4a>
 802278a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802278c:	1ad2      	subs	r2, r2, r3
 802278e:	2300      	movs	r3, #0
 8022790:	0028      	movs	r0, r5
 8022792:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022794:	6a21      	ldr	r1, [r4, #32]
 8022796:	47b8      	blx	r7
 8022798:	89a2      	ldrh	r2, [r4, #12]
 802279a:	1c43      	adds	r3, r0, #1
 802279c:	d106      	bne.n	80227ac <__sflush_r+0x68>
 802279e:	6829      	ldr	r1, [r5, #0]
 80227a0:	291d      	cmp	r1, #29
 80227a2:	d846      	bhi.n	8022832 <__sflush_r+0xee>
 80227a4:	4b29      	ldr	r3, [pc, #164]	@ (802284c <__sflush_r+0x108>)
 80227a6:	410b      	asrs	r3, r1
 80227a8:	07db      	lsls	r3, r3, #31
 80227aa:	d442      	bmi.n	8022832 <__sflush_r+0xee>
 80227ac:	2300      	movs	r3, #0
 80227ae:	6063      	str	r3, [r4, #4]
 80227b0:	6923      	ldr	r3, [r4, #16]
 80227b2:	6023      	str	r3, [r4, #0]
 80227b4:	04d2      	lsls	r2, r2, #19
 80227b6:	d505      	bpl.n	80227c4 <__sflush_r+0x80>
 80227b8:	1c43      	adds	r3, r0, #1
 80227ba:	d102      	bne.n	80227c2 <__sflush_r+0x7e>
 80227bc:	682b      	ldr	r3, [r5, #0]
 80227be:	2b00      	cmp	r3, #0
 80227c0:	d100      	bne.n	80227c4 <__sflush_r+0x80>
 80227c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80227c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80227c6:	602e      	str	r6, [r5, #0]
 80227c8:	2900      	cmp	r1, #0
 80227ca:	d017      	beq.n	80227fc <__sflush_r+0xb8>
 80227cc:	0023      	movs	r3, r4
 80227ce:	3344      	adds	r3, #68	@ 0x44
 80227d0:	4299      	cmp	r1, r3
 80227d2:	d002      	beq.n	80227da <__sflush_r+0x96>
 80227d4:	0028      	movs	r0, r5
 80227d6:	f7fe fbc9 	bl	8020f6c <_free_r>
 80227da:	2300      	movs	r3, #0
 80227dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80227de:	e00d      	b.n	80227fc <__sflush_r+0xb8>
 80227e0:	2301      	movs	r3, #1
 80227e2:	0028      	movs	r0, r5
 80227e4:	47b8      	blx	r7
 80227e6:	0002      	movs	r2, r0
 80227e8:	1c43      	adds	r3, r0, #1
 80227ea:	d1c6      	bne.n	802277a <__sflush_r+0x36>
 80227ec:	682b      	ldr	r3, [r5, #0]
 80227ee:	2b00      	cmp	r3, #0
 80227f0:	d0c3      	beq.n	802277a <__sflush_r+0x36>
 80227f2:	2b1d      	cmp	r3, #29
 80227f4:	d001      	beq.n	80227fa <__sflush_r+0xb6>
 80227f6:	2b16      	cmp	r3, #22
 80227f8:	d11a      	bne.n	8022830 <__sflush_r+0xec>
 80227fa:	602e      	str	r6, [r5, #0]
 80227fc:	2000      	movs	r0, #0
 80227fe:	e01e      	b.n	802283e <__sflush_r+0xfa>
 8022800:	690e      	ldr	r6, [r1, #16]
 8022802:	2e00      	cmp	r6, #0
 8022804:	d0fa      	beq.n	80227fc <__sflush_r+0xb8>
 8022806:	680f      	ldr	r7, [r1, #0]
 8022808:	600e      	str	r6, [r1, #0]
 802280a:	1bba      	subs	r2, r7, r6
 802280c:	9201      	str	r2, [sp, #4]
 802280e:	2200      	movs	r2, #0
 8022810:	079b      	lsls	r3, r3, #30
 8022812:	d100      	bne.n	8022816 <__sflush_r+0xd2>
 8022814:	694a      	ldr	r2, [r1, #20]
 8022816:	60a2      	str	r2, [r4, #8]
 8022818:	9b01      	ldr	r3, [sp, #4]
 802281a:	2b00      	cmp	r3, #0
 802281c:	ddee      	ble.n	80227fc <__sflush_r+0xb8>
 802281e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8022820:	0032      	movs	r2, r6
 8022822:	001f      	movs	r7, r3
 8022824:	0028      	movs	r0, r5
 8022826:	9b01      	ldr	r3, [sp, #4]
 8022828:	6a21      	ldr	r1, [r4, #32]
 802282a:	47b8      	blx	r7
 802282c:	2800      	cmp	r0, #0
 802282e:	dc07      	bgt.n	8022840 <__sflush_r+0xfc>
 8022830:	89a2      	ldrh	r2, [r4, #12]
 8022832:	2340      	movs	r3, #64	@ 0x40
 8022834:	2001      	movs	r0, #1
 8022836:	4313      	orrs	r3, r2
 8022838:	b21b      	sxth	r3, r3
 802283a:	81a3      	strh	r3, [r4, #12]
 802283c:	4240      	negs	r0, r0
 802283e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022840:	9b01      	ldr	r3, [sp, #4]
 8022842:	1836      	adds	r6, r6, r0
 8022844:	1a1b      	subs	r3, r3, r0
 8022846:	9301      	str	r3, [sp, #4]
 8022848:	e7e6      	b.n	8022818 <__sflush_r+0xd4>
 802284a:	46c0      	nop			@ (mov r8, r8)
 802284c:	dfbffffe 	.word	0xdfbffffe

08022850 <_fflush_r>:
 8022850:	690b      	ldr	r3, [r1, #16]
 8022852:	b570      	push	{r4, r5, r6, lr}
 8022854:	0005      	movs	r5, r0
 8022856:	000c      	movs	r4, r1
 8022858:	2b00      	cmp	r3, #0
 802285a:	d102      	bne.n	8022862 <_fflush_r+0x12>
 802285c:	2500      	movs	r5, #0
 802285e:	0028      	movs	r0, r5
 8022860:	bd70      	pop	{r4, r5, r6, pc}
 8022862:	2800      	cmp	r0, #0
 8022864:	d004      	beq.n	8022870 <_fflush_r+0x20>
 8022866:	6a03      	ldr	r3, [r0, #32]
 8022868:	2b00      	cmp	r3, #0
 802286a:	d101      	bne.n	8022870 <_fflush_r+0x20>
 802286c:	f7fd fa28 	bl	801fcc0 <__sinit>
 8022870:	220c      	movs	r2, #12
 8022872:	5ea3      	ldrsh	r3, [r4, r2]
 8022874:	2b00      	cmp	r3, #0
 8022876:	d0f1      	beq.n	802285c <_fflush_r+0xc>
 8022878:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802287a:	07d2      	lsls	r2, r2, #31
 802287c:	d404      	bmi.n	8022888 <_fflush_r+0x38>
 802287e:	059b      	lsls	r3, r3, #22
 8022880:	d402      	bmi.n	8022888 <_fflush_r+0x38>
 8022882:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022884:	f7fd fcd3 	bl	802022e <__retarget_lock_acquire_recursive>
 8022888:	0028      	movs	r0, r5
 802288a:	0021      	movs	r1, r4
 802288c:	f7ff ff5a 	bl	8022744 <__sflush_r>
 8022890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022892:	0005      	movs	r5, r0
 8022894:	07db      	lsls	r3, r3, #31
 8022896:	d4e2      	bmi.n	802285e <_fflush_r+0xe>
 8022898:	89a3      	ldrh	r3, [r4, #12]
 802289a:	059b      	lsls	r3, r3, #22
 802289c:	d4df      	bmi.n	802285e <_fflush_r+0xe>
 802289e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80228a0:	f7fd fcc6 	bl	8020230 <__retarget_lock_release_recursive>
 80228a4:	e7db      	b.n	802285e <_fflush_r+0xe>
	...

080228a8 <__swhatbuf_r>:
 80228a8:	b570      	push	{r4, r5, r6, lr}
 80228aa:	000e      	movs	r6, r1
 80228ac:	001d      	movs	r5, r3
 80228ae:	230e      	movs	r3, #14
 80228b0:	5ec9      	ldrsh	r1, [r1, r3]
 80228b2:	0014      	movs	r4, r2
 80228b4:	b096      	sub	sp, #88	@ 0x58
 80228b6:	2900      	cmp	r1, #0
 80228b8:	da0c      	bge.n	80228d4 <__swhatbuf_r+0x2c>
 80228ba:	89b2      	ldrh	r2, [r6, #12]
 80228bc:	2380      	movs	r3, #128	@ 0x80
 80228be:	0011      	movs	r1, r2
 80228c0:	4019      	ands	r1, r3
 80228c2:	421a      	tst	r2, r3
 80228c4:	d114      	bne.n	80228f0 <__swhatbuf_r+0x48>
 80228c6:	2380      	movs	r3, #128	@ 0x80
 80228c8:	00db      	lsls	r3, r3, #3
 80228ca:	2000      	movs	r0, #0
 80228cc:	6029      	str	r1, [r5, #0]
 80228ce:	6023      	str	r3, [r4, #0]
 80228d0:	b016      	add	sp, #88	@ 0x58
 80228d2:	bd70      	pop	{r4, r5, r6, pc}
 80228d4:	466a      	mov	r2, sp
 80228d6:	f000 f865 	bl	80229a4 <_fstat_r>
 80228da:	2800      	cmp	r0, #0
 80228dc:	dbed      	blt.n	80228ba <__swhatbuf_r+0x12>
 80228de:	23f0      	movs	r3, #240	@ 0xf0
 80228e0:	9901      	ldr	r1, [sp, #4]
 80228e2:	021b      	lsls	r3, r3, #8
 80228e4:	4019      	ands	r1, r3
 80228e6:	4b04      	ldr	r3, [pc, #16]	@ (80228f8 <__swhatbuf_r+0x50>)
 80228e8:	18c9      	adds	r1, r1, r3
 80228ea:	424b      	negs	r3, r1
 80228ec:	4159      	adcs	r1, r3
 80228ee:	e7ea      	b.n	80228c6 <__swhatbuf_r+0x1e>
 80228f0:	2100      	movs	r1, #0
 80228f2:	2340      	movs	r3, #64	@ 0x40
 80228f4:	e7e9      	b.n	80228ca <__swhatbuf_r+0x22>
 80228f6:	46c0      	nop			@ (mov r8, r8)
 80228f8:	ffffe000 	.word	0xffffe000

080228fc <__smakebuf_r>:
 80228fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228fe:	2602      	movs	r6, #2
 8022900:	898b      	ldrh	r3, [r1, #12]
 8022902:	0005      	movs	r5, r0
 8022904:	000c      	movs	r4, r1
 8022906:	b085      	sub	sp, #20
 8022908:	4233      	tst	r3, r6
 802290a:	d007      	beq.n	802291c <__smakebuf_r+0x20>
 802290c:	0023      	movs	r3, r4
 802290e:	3347      	adds	r3, #71	@ 0x47
 8022910:	6023      	str	r3, [r4, #0]
 8022912:	6123      	str	r3, [r4, #16]
 8022914:	2301      	movs	r3, #1
 8022916:	6163      	str	r3, [r4, #20]
 8022918:	b005      	add	sp, #20
 802291a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802291c:	ab03      	add	r3, sp, #12
 802291e:	aa02      	add	r2, sp, #8
 8022920:	f7ff ffc2 	bl	80228a8 <__swhatbuf_r>
 8022924:	9f02      	ldr	r7, [sp, #8]
 8022926:	9001      	str	r0, [sp, #4]
 8022928:	0039      	movs	r1, r7
 802292a:	0028      	movs	r0, r5
 802292c:	f7fe feee 	bl	802170c <_malloc_r>
 8022930:	2800      	cmp	r0, #0
 8022932:	d108      	bne.n	8022946 <__smakebuf_r+0x4a>
 8022934:	220c      	movs	r2, #12
 8022936:	5ea3      	ldrsh	r3, [r4, r2]
 8022938:	059a      	lsls	r2, r3, #22
 802293a:	d4ed      	bmi.n	8022918 <__smakebuf_r+0x1c>
 802293c:	2203      	movs	r2, #3
 802293e:	4393      	bics	r3, r2
 8022940:	431e      	orrs	r6, r3
 8022942:	81a6      	strh	r6, [r4, #12]
 8022944:	e7e2      	b.n	802290c <__smakebuf_r+0x10>
 8022946:	2380      	movs	r3, #128	@ 0x80
 8022948:	89a2      	ldrh	r2, [r4, #12]
 802294a:	6020      	str	r0, [r4, #0]
 802294c:	4313      	orrs	r3, r2
 802294e:	81a3      	strh	r3, [r4, #12]
 8022950:	9b03      	ldr	r3, [sp, #12]
 8022952:	6120      	str	r0, [r4, #16]
 8022954:	6167      	str	r7, [r4, #20]
 8022956:	2b00      	cmp	r3, #0
 8022958:	d00c      	beq.n	8022974 <__smakebuf_r+0x78>
 802295a:	0028      	movs	r0, r5
 802295c:	230e      	movs	r3, #14
 802295e:	5ee1      	ldrsh	r1, [r4, r3]
 8022960:	f000 f832 	bl	80229c8 <_isatty_r>
 8022964:	2800      	cmp	r0, #0
 8022966:	d005      	beq.n	8022974 <__smakebuf_r+0x78>
 8022968:	2303      	movs	r3, #3
 802296a:	89a2      	ldrh	r2, [r4, #12]
 802296c:	439a      	bics	r2, r3
 802296e:	3b02      	subs	r3, #2
 8022970:	4313      	orrs	r3, r2
 8022972:	81a3      	strh	r3, [r4, #12]
 8022974:	89a3      	ldrh	r3, [r4, #12]
 8022976:	9a01      	ldr	r2, [sp, #4]
 8022978:	4313      	orrs	r3, r2
 802297a:	81a3      	strh	r3, [r4, #12]
 802297c:	e7cc      	b.n	8022918 <__smakebuf_r+0x1c>

0802297e <memmove>:
 802297e:	b510      	push	{r4, lr}
 8022980:	4288      	cmp	r0, r1
 8022982:	d806      	bhi.n	8022992 <memmove+0x14>
 8022984:	2300      	movs	r3, #0
 8022986:	429a      	cmp	r2, r3
 8022988:	d008      	beq.n	802299c <memmove+0x1e>
 802298a:	5ccc      	ldrb	r4, [r1, r3]
 802298c:	54c4      	strb	r4, [r0, r3]
 802298e:	3301      	adds	r3, #1
 8022990:	e7f9      	b.n	8022986 <memmove+0x8>
 8022992:	188b      	adds	r3, r1, r2
 8022994:	4298      	cmp	r0, r3
 8022996:	d2f5      	bcs.n	8022984 <memmove+0x6>
 8022998:	3a01      	subs	r2, #1
 802299a:	d200      	bcs.n	802299e <memmove+0x20>
 802299c:	bd10      	pop	{r4, pc}
 802299e:	5c8b      	ldrb	r3, [r1, r2]
 80229a0:	5483      	strb	r3, [r0, r2]
 80229a2:	e7f9      	b.n	8022998 <memmove+0x1a>

080229a4 <_fstat_r>:
 80229a4:	2300      	movs	r3, #0
 80229a6:	b570      	push	{r4, r5, r6, lr}
 80229a8:	4d06      	ldr	r5, [pc, #24]	@ (80229c4 <_fstat_r+0x20>)
 80229aa:	0004      	movs	r4, r0
 80229ac:	0008      	movs	r0, r1
 80229ae:	0011      	movs	r1, r2
 80229b0:	602b      	str	r3, [r5, #0]
 80229b2:	f7eb f867 	bl	800da84 <_fstat>
 80229b6:	1c43      	adds	r3, r0, #1
 80229b8:	d103      	bne.n	80229c2 <_fstat_r+0x1e>
 80229ba:	682b      	ldr	r3, [r5, #0]
 80229bc:	2b00      	cmp	r3, #0
 80229be:	d000      	beq.n	80229c2 <_fstat_r+0x1e>
 80229c0:	6023      	str	r3, [r4, #0]
 80229c2:	bd70      	pop	{r4, r5, r6, pc}
 80229c4:	2000399c 	.word	0x2000399c

080229c8 <_isatty_r>:
 80229c8:	2300      	movs	r3, #0
 80229ca:	b570      	push	{r4, r5, r6, lr}
 80229cc:	4d06      	ldr	r5, [pc, #24]	@ (80229e8 <_isatty_r+0x20>)
 80229ce:	0004      	movs	r4, r0
 80229d0:	0008      	movs	r0, r1
 80229d2:	602b      	str	r3, [r5, #0]
 80229d4:	f7eb f864 	bl	800daa0 <_isatty>
 80229d8:	1c43      	adds	r3, r0, #1
 80229da:	d103      	bne.n	80229e4 <_isatty_r+0x1c>
 80229dc:	682b      	ldr	r3, [r5, #0]
 80229de:	2b00      	cmp	r3, #0
 80229e0:	d000      	beq.n	80229e4 <_isatty_r+0x1c>
 80229e2:	6023      	str	r3, [r4, #0]
 80229e4:	bd70      	pop	{r4, r5, r6, pc}
 80229e6:	46c0      	nop			@ (mov r8, r8)
 80229e8:	2000399c 	.word	0x2000399c

080229ec <_sbrk_r>:
 80229ec:	2300      	movs	r3, #0
 80229ee:	b570      	push	{r4, r5, r6, lr}
 80229f0:	4d06      	ldr	r5, [pc, #24]	@ (8022a0c <_sbrk_r+0x20>)
 80229f2:	0004      	movs	r4, r0
 80229f4:	0008      	movs	r0, r1
 80229f6:	602b      	str	r3, [r5, #0]
 80229f8:	f7eb f866 	bl	800dac8 <_sbrk>
 80229fc:	1c43      	adds	r3, r0, #1
 80229fe:	d103      	bne.n	8022a08 <_sbrk_r+0x1c>
 8022a00:	682b      	ldr	r3, [r5, #0]
 8022a02:	2b00      	cmp	r3, #0
 8022a04:	d000      	beq.n	8022a08 <_sbrk_r+0x1c>
 8022a06:	6023      	str	r3, [r4, #0]
 8022a08:	bd70      	pop	{r4, r5, r6, pc}
 8022a0a:	46c0      	nop			@ (mov r8, r8)
 8022a0c:	2000399c 	.word	0x2000399c

08022a10 <__assert_func>:
 8022a10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022a12:	0014      	movs	r4, r2
 8022a14:	001a      	movs	r2, r3
 8022a16:	4b09      	ldr	r3, [pc, #36]	@ (8022a3c <__assert_func+0x2c>)
 8022a18:	0005      	movs	r5, r0
 8022a1a:	681b      	ldr	r3, [r3, #0]
 8022a1c:	000e      	movs	r6, r1
 8022a1e:	68d8      	ldr	r0, [r3, #12]
 8022a20:	4b07      	ldr	r3, [pc, #28]	@ (8022a40 <__assert_func+0x30>)
 8022a22:	2c00      	cmp	r4, #0
 8022a24:	d101      	bne.n	8022a2a <__assert_func+0x1a>
 8022a26:	4b07      	ldr	r3, [pc, #28]	@ (8022a44 <__assert_func+0x34>)
 8022a28:	001c      	movs	r4, r3
 8022a2a:	4907      	ldr	r1, [pc, #28]	@ (8022a48 <__assert_func+0x38>)
 8022a2c:	9301      	str	r3, [sp, #4]
 8022a2e:	9402      	str	r4, [sp, #8]
 8022a30:	002b      	movs	r3, r5
 8022a32:	9600      	str	r6, [sp, #0]
 8022a34:	f000 f866 	bl	8022b04 <fiprintf>
 8022a38:	f000 f874 	bl	8022b24 <abort>
 8022a3c:	200003cc 	.word	0x200003cc
 8022a40:	08025e31 	.word	0x08025e31
 8022a44:	08025e6c 	.word	0x08025e6c
 8022a48:	08025e3e 	.word	0x08025e3e

08022a4c <_calloc_r>:
 8022a4c:	b570      	push	{r4, r5, r6, lr}
 8022a4e:	0c0b      	lsrs	r3, r1, #16
 8022a50:	0c15      	lsrs	r5, r2, #16
 8022a52:	2b00      	cmp	r3, #0
 8022a54:	d11e      	bne.n	8022a94 <_calloc_r+0x48>
 8022a56:	2d00      	cmp	r5, #0
 8022a58:	d10c      	bne.n	8022a74 <_calloc_r+0x28>
 8022a5a:	b289      	uxth	r1, r1
 8022a5c:	b294      	uxth	r4, r2
 8022a5e:	434c      	muls	r4, r1
 8022a60:	0021      	movs	r1, r4
 8022a62:	f7fe fe53 	bl	802170c <_malloc_r>
 8022a66:	1e05      	subs	r5, r0, #0
 8022a68:	d01a      	beq.n	8022aa0 <_calloc_r+0x54>
 8022a6a:	0022      	movs	r2, r4
 8022a6c:	2100      	movs	r1, #0
 8022a6e:	f7fd fb0f 	bl	8020090 <memset>
 8022a72:	e016      	b.n	8022aa2 <_calloc_r+0x56>
 8022a74:	1c2b      	adds	r3, r5, #0
 8022a76:	1c0c      	adds	r4, r1, #0
 8022a78:	b289      	uxth	r1, r1
 8022a7a:	b292      	uxth	r2, r2
 8022a7c:	434a      	muls	r2, r1
 8022a7e:	b29b      	uxth	r3, r3
 8022a80:	b2a1      	uxth	r1, r4
 8022a82:	4359      	muls	r1, r3
 8022a84:	0c14      	lsrs	r4, r2, #16
 8022a86:	190c      	adds	r4, r1, r4
 8022a88:	0c23      	lsrs	r3, r4, #16
 8022a8a:	d107      	bne.n	8022a9c <_calloc_r+0x50>
 8022a8c:	0424      	lsls	r4, r4, #16
 8022a8e:	b292      	uxth	r2, r2
 8022a90:	4314      	orrs	r4, r2
 8022a92:	e7e5      	b.n	8022a60 <_calloc_r+0x14>
 8022a94:	2d00      	cmp	r5, #0
 8022a96:	d101      	bne.n	8022a9c <_calloc_r+0x50>
 8022a98:	1c14      	adds	r4, r2, #0
 8022a9a:	e7ed      	b.n	8022a78 <_calloc_r+0x2c>
 8022a9c:	230c      	movs	r3, #12
 8022a9e:	6003      	str	r3, [r0, #0]
 8022aa0:	2500      	movs	r5, #0
 8022aa2:	0028      	movs	r0, r5
 8022aa4:	bd70      	pop	{r4, r5, r6, pc}

08022aa6 <_realloc_r>:
 8022aa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022aa8:	0006      	movs	r6, r0
 8022aaa:	000c      	movs	r4, r1
 8022aac:	0015      	movs	r5, r2
 8022aae:	2900      	cmp	r1, #0
 8022ab0:	d105      	bne.n	8022abe <_realloc_r+0x18>
 8022ab2:	0011      	movs	r1, r2
 8022ab4:	f7fe fe2a 	bl	802170c <_malloc_r>
 8022ab8:	0004      	movs	r4, r0
 8022aba:	0020      	movs	r0, r4
 8022abc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022abe:	2a00      	cmp	r2, #0
 8022ac0:	d103      	bne.n	8022aca <_realloc_r+0x24>
 8022ac2:	f7fe fa53 	bl	8020f6c <_free_r>
 8022ac6:	2400      	movs	r4, #0
 8022ac8:	e7f7      	b.n	8022aba <_realloc_r+0x14>
 8022aca:	f000 f832 	bl	8022b32 <_malloc_usable_size_r>
 8022ace:	0007      	movs	r7, r0
 8022ad0:	4285      	cmp	r5, r0
 8022ad2:	d802      	bhi.n	8022ada <_realloc_r+0x34>
 8022ad4:	0843      	lsrs	r3, r0, #1
 8022ad6:	42ab      	cmp	r3, r5
 8022ad8:	d3ef      	bcc.n	8022aba <_realloc_r+0x14>
 8022ada:	0029      	movs	r1, r5
 8022adc:	0030      	movs	r0, r6
 8022ade:	f7fe fe15 	bl	802170c <_malloc_r>
 8022ae2:	9001      	str	r0, [sp, #4]
 8022ae4:	2800      	cmp	r0, #0
 8022ae6:	d0ee      	beq.n	8022ac6 <_realloc_r+0x20>
 8022ae8:	002a      	movs	r2, r5
 8022aea:	42bd      	cmp	r5, r7
 8022aec:	d900      	bls.n	8022af0 <_realloc_r+0x4a>
 8022aee:	003a      	movs	r2, r7
 8022af0:	0021      	movs	r1, r4
 8022af2:	9801      	ldr	r0, [sp, #4]
 8022af4:	f7fd fba8 	bl	8020248 <memcpy>
 8022af8:	0021      	movs	r1, r4
 8022afa:	0030      	movs	r0, r6
 8022afc:	f7fe fa36 	bl	8020f6c <_free_r>
 8022b00:	9c01      	ldr	r4, [sp, #4]
 8022b02:	e7da      	b.n	8022aba <_realloc_r+0x14>

08022b04 <fiprintf>:
 8022b04:	b40e      	push	{r1, r2, r3}
 8022b06:	b517      	push	{r0, r1, r2, r4, lr}
 8022b08:	4c05      	ldr	r4, [pc, #20]	@ (8022b20 <fiprintf+0x1c>)
 8022b0a:	ab05      	add	r3, sp, #20
 8022b0c:	cb04      	ldmia	r3!, {r2}
 8022b0e:	0001      	movs	r1, r0
 8022b10:	6820      	ldr	r0, [r4, #0]
 8022b12:	9301      	str	r3, [sp, #4]
 8022b14:	f7ff fcfa 	bl	802250c <_vfiprintf_r>
 8022b18:	bc1e      	pop	{r1, r2, r3, r4}
 8022b1a:	bc08      	pop	{r3}
 8022b1c:	b003      	add	sp, #12
 8022b1e:	4718      	bx	r3
 8022b20:	200003cc 	.word	0x200003cc

08022b24 <abort>:
 8022b24:	2006      	movs	r0, #6
 8022b26:	b510      	push	{r4, lr}
 8022b28:	f000 f834 	bl	8022b94 <raise>
 8022b2c:	2001      	movs	r0, #1
 8022b2e:	f7ea ff75 	bl	800da1c <_exit>

08022b32 <_malloc_usable_size_r>:
 8022b32:	1f0b      	subs	r3, r1, #4
 8022b34:	681b      	ldr	r3, [r3, #0]
 8022b36:	1f18      	subs	r0, r3, #4
 8022b38:	2b00      	cmp	r3, #0
 8022b3a:	da01      	bge.n	8022b40 <_malloc_usable_size_r+0xe>
 8022b3c:	580b      	ldr	r3, [r1, r0]
 8022b3e:	18c0      	adds	r0, r0, r3
 8022b40:	4770      	bx	lr

08022b42 <_raise_r>:
 8022b42:	b570      	push	{r4, r5, r6, lr}
 8022b44:	0004      	movs	r4, r0
 8022b46:	000d      	movs	r5, r1
 8022b48:	291f      	cmp	r1, #31
 8022b4a:	d904      	bls.n	8022b56 <_raise_r+0x14>
 8022b4c:	2316      	movs	r3, #22
 8022b4e:	6003      	str	r3, [r0, #0]
 8022b50:	2001      	movs	r0, #1
 8022b52:	4240      	negs	r0, r0
 8022b54:	bd70      	pop	{r4, r5, r6, pc}
 8022b56:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022b58:	2b00      	cmp	r3, #0
 8022b5a:	d004      	beq.n	8022b66 <_raise_r+0x24>
 8022b5c:	008a      	lsls	r2, r1, #2
 8022b5e:	189b      	adds	r3, r3, r2
 8022b60:	681a      	ldr	r2, [r3, #0]
 8022b62:	2a00      	cmp	r2, #0
 8022b64:	d108      	bne.n	8022b78 <_raise_r+0x36>
 8022b66:	0020      	movs	r0, r4
 8022b68:	f000 f830 	bl	8022bcc <_getpid_r>
 8022b6c:	002a      	movs	r2, r5
 8022b6e:	0001      	movs	r1, r0
 8022b70:	0020      	movs	r0, r4
 8022b72:	f000 f819 	bl	8022ba8 <_kill_r>
 8022b76:	e7ed      	b.n	8022b54 <_raise_r+0x12>
 8022b78:	2a01      	cmp	r2, #1
 8022b7a:	d009      	beq.n	8022b90 <_raise_r+0x4e>
 8022b7c:	1c51      	adds	r1, r2, #1
 8022b7e:	d103      	bne.n	8022b88 <_raise_r+0x46>
 8022b80:	2316      	movs	r3, #22
 8022b82:	6003      	str	r3, [r0, #0]
 8022b84:	2001      	movs	r0, #1
 8022b86:	e7e5      	b.n	8022b54 <_raise_r+0x12>
 8022b88:	2100      	movs	r1, #0
 8022b8a:	0028      	movs	r0, r5
 8022b8c:	6019      	str	r1, [r3, #0]
 8022b8e:	4790      	blx	r2
 8022b90:	2000      	movs	r0, #0
 8022b92:	e7df      	b.n	8022b54 <_raise_r+0x12>

08022b94 <raise>:
 8022b94:	b510      	push	{r4, lr}
 8022b96:	4b03      	ldr	r3, [pc, #12]	@ (8022ba4 <raise+0x10>)
 8022b98:	0001      	movs	r1, r0
 8022b9a:	6818      	ldr	r0, [r3, #0]
 8022b9c:	f7ff ffd1 	bl	8022b42 <_raise_r>
 8022ba0:	bd10      	pop	{r4, pc}
 8022ba2:	46c0      	nop			@ (mov r8, r8)
 8022ba4:	200003cc 	.word	0x200003cc

08022ba8 <_kill_r>:
 8022ba8:	2300      	movs	r3, #0
 8022baa:	b570      	push	{r4, r5, r6, lr}
 8022bac:	4d06      	ldr	r5, [pc, #24]	@ (8022bc8 <_kill_r+0x20>)
 8022bae:	0004      	movs	r4, r0
 8022bb0:	0008      	movs	r0, r1
 8022bb2:	0011      	movs	r1, r2
 8022bb4:	602b      	str	r3, [r5, #0]
 8022bb6:	f7ea ff21 	bl	800d9fc <_kill>
 8022bba:	1c43      	adds	r3, r0, #1
 8022bbc:	d103      	bne.n	8022bc6 <_kill_r+0x1e>
 8022bbe:	682b      	ldr	r3, [r5, #0]
 8022bc0:	2b00      	cmp	r3, #0
 8022bc2:	d000      	beq.n	8022bc6 <_kill_r+0x1e>
 8022bc4:	6023      	str	r3, [r4, #0]
 8022bc6:	bd70      	pop	{r4, r5, r6, pc}
 8022bc8:	2000399c 	.word	0x2000399c

08022bcc <_getpid_r>:
 8022bcc:	b510      	push	{r4, lr}
 8022bce:	f7ea ff0f 	bl	800d9f0 <_getpid>
 8022bd2:	bd10      	pop	{r4, pc}

08022bd4 <expf>:
 8022bd4:	b570      	push	{r4, r5, r6, lr}
 8022bd6:	1c04      	adds	r4, r0, #0
 8022bd8:	f000 f8e6 	bl	8022da8 <__ieee754_expf>
 8022bdc:	1c05      	adds	r5, r0, #0
 8022bde:	1c20      	adds	r0, r4, #0
 8022be0:	f000 f83c 	bl	8022c5c <finitef>
 8022be4:	2800      	cmp	r0, #0
 8022be6:	d00b      	beq.n	8022c00 <expf+0x2c>
 8022be8:	490c      	ldr	r1, [pc, #48]	@ (8022c1c <expf+0x48>)
 8022bea:	1c20      	adds	r0, r4, #0
 8022bec:	f7dd fcb4 	bl	8000558 <__aeabi_fcmpgt>
 8022bf0:	2800      	cmp	r0, #0
 8022bf2:	d007      	beq.n	8022c04 <expf+0x30>
 8022bf4:	f7fd faf0 	bl	80201d8 <__errno>
 8022bf8:	25ff      	movs	r5, #255	@ 0xff
 8022bfa:	2322      	movs	r3, #34	@ 0x22
 8022bfc:	05ed      	lsls	r5, r5, #23
 8022bfe:	6003      	str	r3, [r0, #0]
 8022c00:	1c28      	adds	r0, r5, #0
 8022c02:	bd70      	pop	{r4, r5, r6, pc}
 8022c04:	4906      	ldr	r1, [pc, #24]	@ (8022c20 <expf+0x4c>)
 8022c06:	1c20      	adds	r0, r4, #0
 8022c08:	f7dd fc92 	bl	8000530 <__aeabi_fcmplt>
 8022c0c:	2800      	cmp	r0, #0
 8022c0e:	d0f7      	beq.n	8022c00 <expf+0x2c>
 8022c10:	f7fd fae2 	bl	80201d8 <__errno>
 8022c14:	2322      	movs	r3, #34	@ 0x22
 8022c16:	2500      	movs	r5, #0
 8022c18:	6003      	str	r3, [r0, #0]
 8022c1a:	e7f1      	b.n	8022c00 <expf+0x2c>
 8022c1c:	42b17217 	.word	0x42b17217
 8022c20:	c2cff1b5 	.word	0xc2cff1b5

08022c24 <sqrtf>:
 8022c24:	b570      	push	{r4, r5, r6, lr}
 8022c26:	1c05      	adds	r5, r0, #0
 8022c28:	f000 f822 	bl	8022c70 <__ieee754_sqrtf>
 8022c2c:	1c29      	adds	r1, r5, #0
 8022c2e:	1c04      	adds	r4, r0, #0
 8022c30:	1c28      	adds	r0, r5, #0
 8022c32:	f7de fc97 	bl	8001564 <__aeabi_fcmpun>
 8022c36:	2800      	cmp	r0, #0
 8022c38:	d10e      	bne.n	8022c58 <sqrtf+0x34>
 8022c3a:	2100      	movs	r1, #0
 8022c3c:	1c28      	adds	r0, r5, #0
 8022c3e:	f7dd fc77 	bl	8000530 <__aeabi_fcmplt>
 8022c42:	2800      	cmp	r0, #0
 8022c44:	d008      	beq.n	8022c58 <sqrtf+0x34>
 8022c46:	f7fd fac7 	bl	80201d8 <__errno>
 8022c4a:	2321      	movs	r3, #33	@ 0x21
 8022c4c:	2100      	movs	r1, #0
 8022c4e:	6003      	str	r3, [r0, #0]
 8022c50:	1c08      	adds	r0, r1, #0
 8022c52:	f7dd ffbf 	bl	8000bd4 <__aeabi_fdiv>
 8022c56:	1c04      	adds	r4, r0, #0
 8022c58:	1c20      	adds	r0, r4, #0
 8022c5a:	bd70      	pop	{r4, r5, r6, pc}

08022c5c <finitef>:
 8022c5c:	22ff      	movs	r2, #255	@ 0xff
 8022c5e:	0043      	lsls	r3, r0, #1
 8022c60:	085b      	lsrs	r3, r3, #1
 8022c62:	2001      	movs	r0, #1
 8022c64:	05d2      	lsls	r2, r2, #23
 8022c66:	4293      	cmp	r3, r2
 8022c68:	db00      	blt.n	8022c6c <finitef+0x10>
 8022c6a:	2000      	movs	r0, #0
 8022c6c:	4770      	bx	lr
	...

08022c70 <__ieee754_sqrtf>:
 8022c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022c72:	0003      	movs	r3, r0
 8022c74:	0042      	lsls	r2, r0, #1
 8022c76:	1c04      	adds	r4, r0, #0
 8022c78:	20ff      	movs	r0, #255	@ 0xff
 8022c7a:	0852      	lsrs	r2, r2, #1
 8022c7c:	05c0      	lsls	r0, r0, #23
 8022c7e:	4282      	cmp	r2, r0
 8022c80:	d30a      	bcc.n	8022c98 <__ieee754_sqrtf+0x28>
 8022c82:	1c21      	adds	r1, r4, #0
 8022c84:	1c20      	adds	r0, r4, #0
 8022c86:	f7de f98b 	bl	8000fa0 <__aeabi_fmul>
 8022c8a:	1c01      	adds	r1, r0, #0
 8022c8c:	1c20      	adds	r0, r4, #0
 8022c8e:	f7dd fe17 	bl	80008c0 <__aeabi_fadd>
 8022c92:	1c04      	adds	r4, r0, #0
 8022c94:	1c20      	adds	r0, r4, #0
 8022c96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022c98:	2a00      	cmp	r2, #0
 8022c9a:	d0fb      	beq.n	8022c94 <__ieee754_sqrtf+0x24>
 8022c9c:	2c00      	cmp	r4, #0
 8022c9e:	da07      	bge.n	8022cb0 <__ieee754_sqrtf+0x40>
 8022ca0:	1c21      	adds	r1, r4, #0
 8022ca2:	1c20      	adds	r0, r4, #0
 8022ca4:	f7de faba 	bl	800121c <__aeabi_fsub>
 8022ca8:	1c01      	adds	r1, r0, #0
 8022caa:	f7dd ff93 	bl	8000bd4 <__aeabi_fdiv>
 8022cae:	e7f0      	b.n	8022c92 <__ieee754_sqrtf+0x22>
 8022cb0:	0022      	movs	r2, r4
 8022cb2:	15e1      	asrs	r1, r4, #23
 8022cb4:	4002      	ands	r2, r0
 8022cb6:	4204      	tst	r4, r0
 8022cb8:	d046      	beq.n	8022d48 <__ieee754_sqrtf+0xd8>
 8022cba:	2280      	movs	r2, #128	@ 0x80
 8022cbc:	000f      	movs	r7, r1
 8022cbe:	025b      	lsls	r3, r3, #9
 8022cc0:	0a5b      	lsrs	r3, r3, #9
 8022cc2:	0412      	lsls	r2, r2, #16
 8022cc4:	3f7f      	subs	r7, #127	@ 0x7f
 8022cc6:	4313      	orrs	r3, r2
 8022cc8:	07c9      	lsls	r1, r1, #31
 8022cca:	d400      	bmi.n	8022cce <__ieee754_sqrtf+0x5e>
 8022ccc:	005b      	lsls	r3, r3, #1
 8022cce:	2400      	movs	r4, #0
 8022cd0:	2180      	movs	r1, #128	@ 0x80
 8022cd2:	2019      	movs	r0, #25
 8022cd4:	0026      	movs	r6, r4
 8022cd6:	107f      	asrs	r7, r7, #1
 8022cd8:	005b      	lsls	r3, r3, #1
 8022cda:	0449      	lsls	r1, r1, #17
 8022cdc:	1875      	adds	r5, r6, r1
 8022cde:	001a      	movs	r2, r3
 8022ce0:	429d      	cmp	r5, r3
 8022ce2:	dc02      	bgt.n	8022cea <__ieee754_sqrtf+0x7a>
 8022ce4:	186e      	adds	r6, r5, r1
 8022ce6:	1b5a      	subs	r2, r3, r5
 8022ce8:	1864      	adds	r4, r4, r1
 8022cea:	3801      	subs	r0, #1
 8022cec:	0053      	lsls	r3, r2, #1
 8022cee:	0849      	lsrs	r1, r1, #1
 8022cf0:	2800      	cmp	r0, #0
 8022cf2:	d1f3      	bne.n	8022cdc <__ieee754_sqrtf+0x6c>
 8022cf4:	2a00      	cmp	r2, #0
 8022cf6:	d019      	beq.n	8022d2c <__ieee754_sqrtf+0xbc>
 8022cf8:	4d17      	ldr	r5, [pc, #92]	@ (8022d58 <__ieee754_sqrtf+0xe8>)
 8022cfa:	4e18      	ldr	r6, [pc, #96]	@ (8022d5c <__ieee754_sqrtf+0xec>)
 8022cfc:	6828      	ldr	r0, [r5, #0]
 8022cfe:	6831      	ldr	r1, [r6, #0]
 8022d00:	682b      	ldr	r3, [r5, #0]
 8022d02:	9301      	str	r3, [sp, #4]
 8022d04:	f7de fa8a 	bl	800121c <__aeabi_fsub>
 8022d08:	1c01      	adds	r1, r0, #0
 8022d0a:	9801      	ldr	r0, [sp, #4]
 8022d0c:	f7dd fc1a 	bl	8000544 <__aeabi_fcmple>
 8022d10:	2800      	cmp	r0, #0
 8022d12:	d00b      	beq.n	8022d2c <__ieee754_sqrtf+0xbc>
 8022d14:	6828      	ldr	r0, [r5, #0]
 8022d16:	6831      	ldr	r1, [r6, #0]
 8022d18:	f7dd fdd2 	bl	80008c0 <__aeabi_fadd>
 8022d1c:	682d      	ldr	r5, [r5, #0]
 8022d1e:	1c01      	adds	r1, r0, #0
 8022d20:	1c28      	adds	r0, r5, #0
 8022d22:	f7dd fc05 	bl	8000530 <__aeabi_fcmplt>
 8022d26:	2800      	cmp	r0, #0
 8022d28:	d011      	beq.n	8022d4e <__ieee754_sqrtf+0xde>
 8022d2a:	3402      	adds	r4, #2
 8022d2c:	23fc      	movs	r3, #252	@ 0xfc
 8022d2e:	1064      	asrs	r4, r4, #1
 8022d30:	059b      	lsls	r3, r3, #22
 8022d32:	18e3      	adds	r3, r4, r3
 8022d34:	05fc      	lsls	r4, r7, #23
 8022d36:	18e4      	adds	r4, r4, r3
 8022d38:	e7ac      	b.n	8022c94 <__ieee754_sqrtf+0x24>
 8022d3a:	005b      	lsls	r3, r3, #1
 8022d3c:	3201      	adds	r2, #1
 8022d3e:	4203      	tst	r3, r0
 8022d40:	d0fb      	beq.n	8022d3a <__ieee754_sqrtf+0xca>
 8022d42:	3a01      	subs	r2, #1
 8022d44:	1a89      	subs	r1, r1, r2
 8022d46:	e7b8      	b.n	8022cba <__ieee754_sqrtf+0x4a>
 8022d48:	2080      	movs	r0, #128	@ 0x80
 8022d4a:	0400      	lsls	r0, r0, #16
 8022d4c:	e7f7      	b.n	8022d3e <__ieee754_sqrtf+0xce>
 8022d4e:	2301      	movs	r3, #1
 8022d50:	3401      	adds	r4, #1
 8022d52:	439c      	bics	r4, r3
 8022d54:	e7ea      	b.n	8022d2c <__ieee754_sqrtf+0xbc>
 8022d56:	46c0      	nop			@ (mov r8, r8)
 8022d58:	20000420 	.word	0x20000420
 8022d5c:	2000041c 	.word	0x2000041c

08022d60 <roundf>:
 8022d60:	0dc3      	lsrs	r3, r0, #23
 8022d62:	b2db      	uxtb	r3, r3
 8022d64:	3b7f      	subs	r3, #127	@ 0x7f
 8022d66:	0002      	movs	r2, r0
 8022d68:	b510      	push	{r4, lr}
 8022d6a:	2b16      	cmp	r3, #22
 8022d6c:	dc13      	bgt.n	8022d96 <roundf+0x36>
 8022d6e:	2b00      	cmp	r3, #0
 8022d70:	da07      	bge.n	8022d82 <roundf+0x22>
 8022d72:	0fc2      	lsrs	r2, r0, #31
 8022d74:	07d0      	lsls	r0, r2, #31
 8022d76:	3301      	adds	r3, #1
 8022d78:	d102      	bne.n	8022d80 <roundf+0x20>
 8022d7a:	23fe      	movs	r3, #254	@ 0xfe
 8022d7c:	059b      	lsls	r3, r3, #22
 8022d7e:	4318      	orrs	r0, r3
 8022d80:	bd10      	pop	{r4, pc}
 8022d82:	4908      	ldr	r1, [pc, #32]	@ (8022da4 <roundf+0x44>)
 8022d84:	4119      	asrs	r1, r3
 8022d86:	4208      	tst	r0, r1
 8022d88:	d0fa      	beq.n	8022d80 <roundf+0x20>
 8022d8a:	2080      	movs	r0, #128	@ 0x80
 8022d8c:	03c0      	lsls	r0, r0, #15
 8022d8e:	4118      	asrs	r0, r3
 8022d90:	1880      	adds	r0, r0, r2
 8022d92:	4388      	bics	r0, r1
 8022d94:	e7f4      	b.n	8022d80 <roundf+0x20>
 8022d96:	2b80      	cmp	r3, #128	@ 0x80
 8022d98:	d1f2      	bne.n	8022d80 <roundf+0x20>
 8022d9a:	1c01      	adds	r1, r0, #0
 8022d9c:	f7dd fd90 	bl	80008c0 <__aeabi_fadd>
 8022da0:	e7ee      	b.n	8022d80 <roundf+0x20>
 8022da2:	46c0      	nop			@ (mov r8, r8)
 8022da4:	007fffff 	.word	0x007fffff

08022da8 <__ieee754_expf>:
 8022da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022daa:	21ff      	movs	r1, #255	@ 0xff
 8022dac:	0043      	lsls	r3, r0, #1
 8022dae:	1c04      	adds	r4, r0, #0
 8022db0:	085b      	lsrs	r3, r3, #1
 8022db2:	05c9      	lsls	r1, r1, #23
 8022db4:	428b      	cmp	r3, r1
 8022db6:	d904      	bls.n	8022dc2 <__ieee754_expf+0x1a>
 8022db8:	1c01      	adds	r1, r0, #0
 8022dba:	1c20      	adds	r0, r4, #0
 8022dbc:	f7dd fd80 	bl	80008c0 <__aeabi_fadd>
 8022dc0:	e00d      	b.n	8022dde <__ieee754_expf+0x36>
 8022dc2:	0fc6      	lsrs	r6, r0, #31
 8022dc4:	428b      	cmp	r3, r1
 8022dc6:	d104      	bne.n	8022dd2 <__ieee754_expf+0x2a>
 8022dc8:	2e00      	cmp	r6, #0
 8022dca:	d000      	beq.n	8022dce <__ieee754_expf+0x26>
 8022dcc:	e0ba      	b.n	8022f44 <__ieee754_expf+0x19c>
 8022dce:	1c20      	adds	r0, r4, #0
 8022dd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022dd2:	495d      	ldr	r1, [pc, #372]	@ (8022f48 <__ieee754_expf+0x1a0>)
 8022dd4:	4288      	cmp	r0, r1
 8022dd6:	dd04      	ble.n	8022de2 <__ieee754_expf+0x3a>
 8022dd8:	2000      	movs	r0, #0
 8022dda:	f000 f8f1 	bl	8022fc0 <__math_oflowf>
 8022dde:	1c04      	adds	r4, r0, #0
 8022de0:	e7f5      	b.n	8022dce <__ieee754_expf+0x26>
 8022de2:	2800      	cmp	r0, #0
 8022de4:	da06      	bge.n	8022df4 <__ieee754_expf+0x4c>
 8022de6:	4a59      	ldr	r2, [pc, #356]	@ (8022f4c <__ieee754_expf+0x1a4>)
 8022de8:	4293      	cmp	r3, r2
 8022dea:	d903      	bls.n	8022df4 <__ieee754_expf+0x4c>
 8022dec:	2000      	movs	r0, #0
 8022dee:	f000 f8e1 	bl	8022fb4 <__math_uflowf>
 8022df2:	e7f4      	b.n	8022dde <__ieee754_expf+0x36>
 8022df4:	4a56      	ldr	r2, [pc, #344]	@ (8022f50 <__ieee754_expf+0x1a8>)
 8022df6:	4293      	cmp	r3, r2
 8022df8:	d96e      	bls.n	8022ed8 <__ieee754_expf+0x130>
 8022dfa:	4a56      	ldr	r2, [pc, #344]	@ (8022f54 <__ieee754_expf+0x1ac>)
 8022dfc:	00b5      	lsls	r5, r6, #2
 8022dfe:	4293      	cmp	r3, r2
 8022e00:	d84e      	bhi.n	8022ea0 <__ieee754_expf+0xf8>
 8022e02:	4b55      	ldr	r3, [pc, #340]	@ (8022f58 <__ieee754_expf+0x1b0>)
 8022e04:	1c20      	adds	r0, r4, #0
 8022e06:	5959      	ldr	r1, [r3, r5]
 8022e08:	f7de fa08 	bl	800121c <__aeabi_fsub>
 8022e0c:	4b53      	ldr	r3, [pc, #332]	@ (8022f5c <__ieee754_expf+0x1b4>)
 8022e0e:	1c07      	adds	r7, r0, #0
 8022e10:	595b      	ldr	r3, [r3, r5]
 8022e12:	2501      	movs	r5, #1
 8022e14:	1bad      	subs	r5, r5, r6
 8022e16:	9300      	str	r3, [sp, #0]
 8022e18:	1bad      	subs	r5, r5, r6
 8022e1a:	9900      	ldr	r1, [sp, #0]
 8022e1c:	1c38      	adds	r0, r7, #0
 8022e1e:	f7de f9fd 	bl	800121c <__aeabi_fsub>
 8022e22:	1c04      	adds	r4, r0, #0
 8022e24:	1c21      	adds	r1, r4, #0
 8022e26:	1c20      	adds	r0, r4, #0
 8022e28:	f7de f8ba 	bl	8000fa0 <__aeabi_fmul>
 8022e2c:	494c      	ldr	r1, [pc, #304]	@ (8022f60 <__ieee754_expf+0x1b8>)
 8022e2e:	1c06      	adds	r6, r0, #0
 8022e30:	f7de f8b6 	bl	8000fa0 <__aeabi_fmul>
 8022e34:	494b      	ldr	r1, [pc, #300]	@ (8022f64 <__ieee754_expf+0x1bc>)
 8022e36:	f7de f9f1 	bl	800121c <__aeabi_fsub>
 8022e3a:	1c31      	adds	r1, r6, #0
 8022e3c:	f7de f8b0 	bl	8000fa0 <__aeabi_fmul>
 8022e40:	4949      	ldr	r1, [pc, #292]	@ (8022f68 <__ieee754_expf+0x1c0>)
 8022e42:	f7dd fd3d 	bl	80008c0 <__aeabi_fadd>
 8022e46:	1c31      	adds	r1, r6, #0
 8022e48:	f7de f8aa 	bl	8000fa0 <__aeabi_fmul>
 8022e4c:	4947      	ldr	r1, [pc, #284]	@ (8022f6c <__ieee754_expf+0x1c4>)
 8022e4e:	f7de f9e5 	bl	800121c <__aeabi_fsub>
 8022e52:	1c31      	adds	r1, r6, #0
 8022e54:	f7de f8a4 	bl	8000fa0 <__aeabi_fmul>
 8022e58:	4945      	ldr	r1, [pc, #276]	@ (8022f70 <__ieee754_expf+0x1c8>)
 8022e5a:	f7dd fd31 	bl	80008c0 <__aeabi_fadd>
 8022e5e:	1c31      	adds	r1, r6, #0
 8022e60:	f7de f89e 	bl	8000fa0 <__aeabi_fmul>
 8022e64:	1c01      	adds	r1, r0, #0
 8022e66:	1c20      	adds	r0, r4, #0
 8022e68:	f7de f9d8 	bl	800121c <__aeabi_fsub>
 8022e6c:	1c01      	adds	r1, r0, #0
 8022e6e:	1c06      	adds	r6, r0, #0
 8022e70:	1c20      	adds	r0, r4, #0
 8022e72:	f7de f895 	bl	8000fa0 <__aeabi_fmul>
 8022e76:	9001      	str	r0, [sp, #4]
 8022e78:	2d00      	cmp	r5, #0
 8022e7a:	d140      	bne.n	8022efe <__ieee754_expf+0x156>
 8022e7c:	2180      	movs	r1, #128	@ 0x80
 8022e7e:	1c30      	adds	r0, r6, #0
 8022e80:	05c9      	lsls	r1, r1, #23
 8022e82:	f7de f9cb 	bl	800121c <__aeabi_fsub>
 8022e86:	1c01      	adds	r1, r0, #0
 8022e88:	9801      	ldr	r0, [sp, #4]
 8022e8a:	f7dd fea3 	bl	8000bd4 <__aeabi_fdiv>
 8022e8e:	1c21      	adds	r1, r4, #0
 8022e90:	f7de f9c4 	bl	800121c <__aeabi_fsub>
 8022e94:	1c01      	adds	r1, r0, #0
 8022e96:	20fe      	movs	r0, #254	@ 0xfe
 8022e98:	0580      	lsls	r0, r0, #22
 8022e9a:	f7de f9bf 	bl	800121c <__aeabi_fsub>
 8022e9e:	e79e      	b.n	8022dde <__ieee754_expf+0x36>
 8022ea0:	4934      	ldr	r1, [pc, #208]	@ (8022f74 <__ieee754_expf+0x1cc>)
 8022ea2:	1c20      	adds	r0, r4, #0
 8022ea4:	f7de f87c 	bl	8000fa0 <__aeabi_fmul>
 8022ea8:	4b33      	ldr	r3, [pc, #204]	@ (8022f78 <__ieee754_expf+0x1d0>)
 8022eaa:	5959      	ldr	r1, [r3, r5]
 8022eac:	f7dd fd08 	bl	80008c0 <__aeabi_fadd>
 8022eb0:	f7de fb6e 	bl	8001590 <__aeabi_f2iz>
 8022eb4:	0005      	movs	r5, r0
 8022eb6:	f7de fb8b 	bl	80015d0 <__aeabi_i2f>
 8022eba:	4930      	ldr	r1, [pc, #192]	@ (8022f7c <__ieee754_expf+0x1d4>)
 8022ebc:	1c06      	adds	r6, r0, #0
 8022ebe:	f7de f86f 	bl	8000fa0 <__aeabi_fmul>
 8022ec2:	1c01      	adds	r1, r0, #0
 8022ec4:	1c20      	adds	r0, r4, #0
 8022ec6:	f7de f9a9 	bl	800121c <__aeabi_fsub>
 8022eca:	492d      	ldr	r1, [pc, #180]	@ (8022f80 <__ieee754_expf+0x1d8>)
 8022ecc:	1c07      	adds	r7, r0, #0
 8022ece:	1c30      	adds	r0, r6, #0
 8022ed0:	f7de f866 	bl	8000fa0 <__aeabi_fmul>
 8022ed4:	9000      	str	r0, [sp, #0]
 8022ed6:	e7a0      	b.n	8022e1a <__ieee754_expf+0x72>
 8022ed8:	22d0      	movs	r2, #208	@ 0xd0
 8022eda:	0592      	lsls	r2, r2, #22
 8022edc:	4293      	cmp	r3, r2
 8022ede:	d20c      	bcs.n	8022efa <__ieee754_expf+0x152>
 8022ee0:	4928      	ldr	r1, [pc, #160]	@ (8022f84 <__ieee754_expf+0x1dc>)
 8022ee2:	1c20      	adds	r0, r4, #0
 8022ee4:	f7dd fcec 	bl	80008c0 <__aeabi_fadd>
 8022ee8:	21fe      	movs	r1, #254	@ 0xfe
 8022eea:	0589      	lsls	r1, r1, #22
 8022eec:	f7dd fb34 	bl	8000558 <__aeabi_fcmpgt>
 8022ef0:	1e05      	subs	r5, r0, #0
 8022ef2:	d097      	beq.n	8022e24 <__ieee754_expf+0x7c>
 8022ef4:	21fe      	movs	r1, #254	@ 0xfe
 8022ef6:	0589      	lsls	r1, r1, #22
 8022ef8:	e75f      	b.n	8022dba <__ieee754_expf+0x12>
 8022efa:	2500      	movs	r5, #0
 8022efc:	e792      	b.n	8022e24 <__ieee754_expf+0x7c>
 8022efe:	2080      	movs	r0, #128	@ 0x80
 8022f00:	1c31      	adds	r1, r6, #0
 8022f02:	05c0      	lsls	r0, r0, #23
 8022f04:	f7de f98a 	bl	800121c <__aeabi_fsub>
 8022f08:	1c01      	adds	r1, r0, #0
 8022f0a:	9801      	ldr	r0, [sp, #4]
 8022f0c:	f7dd fe62 	bl	8000bd4 <__aeabi_fdiv>
 8022f10:	1c01      	adds	r1, r0, #0
 8022f12:	9800      	ldr	r0, [sp, #0]
 8022f14:	f7de f982 	bl	800121c <__aeabi_fsub>
 8022f18:	1c39      	adds	r1, r7, #0
 8022f1a:	f7de f97f 	bl	800121c <__aeabi_fsub>
 8022f1e:	1c01      	adds	r1, r0, #0
 8022f20:	20fe      	movs	r0, #254	@ 0xfe
 8022f22:	0580      	lsls	r0, r0, #22
 8022f24:	f7de f97a 	bl	800121c <__aeabi_fsub>
 8022f28:	002b      	movs	r3, r5
 8022f2a:	337d      	adds	r3, #125	@ 0x7d
 8022f2c:	db02      	blt.n	8022f34 <__ieee754_expf+0x18c>
 8022f2e:	05ec      	lsls	r4, r5, #23
 8022f30:	1824      	adds	r4, r4, r0
 8022f32:	e74c      	b.n	8022dce <__ieee754_expf+0x26>
 8022f34:	21d8      	movs	r1, #216	@ 0xd8
 8022f36:	3564      	adds	r5, #100	@ 0x64
 8022f38:	05ed      	lsls	r5, r5, #23
 8022f3a:	1828      	adds	r0, r5, r0
 8022f3c:	0509      	lsls	r1, r1, #20
 8022f3e:	f7de f82f 	bl	8000fa0 <__aeabi_fmul>
 8022f42:	e74c      	b.n	8022dde <__ieee754_expf+0x36>
 8022f44:	2400      	movs	r4, #0
 8022f46:	e742      	b.n	8022dce <__ieee754_expf+0x26>
 8022f48:	42b17217 	.word	0x42b17217
 8022f4c:	42cff1b5 	.word	0x42cff1b5
 8022f50:	3eb17218 	.word	0x3eb17218
 8022f54:	3f851591 	.word	0x3f851591
 8022f58:	08025e78 	.word	0x08025e78
 8022f5c:	08025e70 	.word	0x08025e70
 8022f60:	3331bb4c 	.word	0x3331bb4c
 8022f64:	35ddea0e 	.word	0x35ddea0e
 8022f68:	388ab355 	.word	0x388ab355
 8022f6c:	3b360b61 	.word	0x3b360b61
 8022f70:	3e2aaaab 	.word	0x3e2aaaab
 8022f74:	3fb8aa3b 	.word	0x3fb8aa3b
 8022f78:	08025e80 	.word	0x08025e80
 8022f7c:	3f317180 	.word	0x3f317180
 8022f80:	3717f7d1 	.word	0x3717f7d1
 8022f84:	7149f2ca 	.word	0x7149f2ca

08022f88 <with_errnof>:
 8022f88:	b570      	push	{r4, r5, r6, lr}
 8022f8a:	000d      	movs	r5, r1
 8022f8c:	1c04      	adds	r4, r0, #0
 8022f8e:	f7fd f923 	bl	80201d8 <__errno>
 8022f92:	6005      	str	r5, [r0, #0]
 8022f94:	1c20      	adds	r0, r4, #0
 8022f96:	bd70      	pop	{r4, r5, r6, pc}

08022f98 <xflowf>:
 8022f98:	b510      	push	{r4, lr}
 8022f9a:	1c0b      	adds	r3, r1, #0
 8022f9c:	2800      	cmp	r0, #0
 8022f9e:	d002      	beq.n	8022fa6 <xflowf+0xe>
 8022fa0:	2380      	movs	r3, #128	@ 0x80
 8022fa2:	061b      	lsls	r3, r3, #24
 8022fa4:	18cb      	adds	r3, r1, r3
 8022fa6:	1c18      	adds	r0, r3, #0
 8022fa8:	f7dd fffa 	bl	8000fa0 <__aeabi_fmul>
 8022fac:	2122      	movs	r1, #34	@ 0x22
 8022fae:	f7ff ffeb 	bl	8022f88 <with_errnof>
 8022fb2:	bd10      	pop	{r4, pc}

08022fb4 <__math_uflowf>:
 8022fb4:	2180      	movs	r1, #128	@ 0x80
 8022fb6:	b510      	push	{r4, lr}
 8022fb8:	0549      	lsls	r1, r1, #21
 8022fba:	f7ff ffed 	bl	8022f98 <xflowf>
 8022fbe:	bd10      	pop	{r4, pc}

08022fc0 <__math_oflowf>:
 8022fc0:	21e0      	movs	r1, #224	@ 0xe0
 8022fc2:	b510      	push	{r4, lr}
 8022fc4:	05c9      	lsls	r1, r1, #23
 8022fc6:	f7ff ffe7 	bl	8022f98 <xflowf>
 8022fca:	bd10      	pop	{r4, pc}

08022fcc <_init>:
 8022fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fce:	46c0      	nop			@ (mov r8, r8)
 8022fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022fd2:	bc08      	pop	{r3}
 8022fd4:	469e      	mov	lr, r3
 8022fd6:	4770      	bx	lr

08022fd8 <_fini>:
 8022fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fda:	46c0      	nop			@ (mov r8, r8)
 8022fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022fde:	bc08      	pop	{r3}
 8022fe0:	469e      	mov	lr, r3
 8022fe2:	4770      	bx	lr
